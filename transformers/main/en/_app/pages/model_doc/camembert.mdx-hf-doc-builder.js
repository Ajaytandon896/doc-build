import{S as fk,i as gk,s as _k,e as s,k as d,w as C,t as o,M as bk,c as a,d as t,m as c,a as r,x as $,h as n,b as p,G as e,g,y as E,q as F,o as M,B as z,v as kk,L as Tt}from"../../chunks/vendor-hf-doc-builder.js";import{T as kt}from"../../chunks/Tip-hf-doc-builder.js";import{D as je}from"../../chunks/Docstring-hf-doc-builder.js";import{C as yt}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ge}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as wt}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function wk(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertModel
import torch

tokenizer = CamembertTokenizer.from_pretrained("camembert-base")
model = CamembertModel.from_pretrained("camembert-base")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertModel.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Tk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function yk(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertForCausalLM, CamembertConfig
import torch

tokenizer = CamembertTokenizer.from_pretrained("camembert-base")
config = CamembertConfig.from_pretrained("camembert-base")
config.is_decoder = True
model = CamembertForCausalLM.from_pretrained("camembert-base", config=config)

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

prediction_logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForCausalLM, CamembertConfig
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config = CamembertConfig.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.is_decoder = <span class="hljs-literal">True</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForCausalLM.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>, config=config)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>prediction_logits = outputs.logits`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Ck(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function $k(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertForMaskedLM
import torch

tokenizer = CamembertTokenizer.from_pretrained("camembert-base")
model = CamembertForMaskedLM.from_pretrained("camembert-base")

inputs = tokenizer("The capital of France is <mask>.", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# retrieve index of <mask>
mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]

predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)
tokenizer.decode(predicted_token_id)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForMaskedLM.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is &lt;mask&gt;.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve index of &lt;mask&gt;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[<span class="hljs-number">0</span>].nonzero(as_tuple=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_id = logits[<span class="hljs-number">0</span>, mask_token_index].argmax(axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predicted_token_id)
<span class="hljs-string">&#x27; Paris&#x27;</span>`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Ek(D){let l,v;return l=new yt({props:{code:`labels = tokenizer("The capital of France is Paris.", return_tensors="pt")["input_ids"]
# mask labels of non-<mask> tokens
labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)

outputs = model(**inputs, labels=labels)
round(outputs.loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask labels of non-&lt;mask&gt; tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -<span class="hljs-number">100</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(outputs.loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.1</span>`}}),{c(){C(l.$$.fragment)},l(u){$(l.$$.fragment,u)},m(u,b){E(l,u,b),v=!0},p:Tt,i(u){v||(F(l.$$.fragment,u),v=!0)},o(u){M(l.$$.fragment,u),v=!1},d(u){z(l,u)}}}function Fk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function Mk(D){let l,v,u,b,T;return b=new yt({props:{code:`import torch
from transformers import CamembertTokenizer, CamembertForSequenceClassification

tokenizer = CamembertTokenizer.from_pretrained("cardiffnlp/twitter-roberta-base-emotion")
model = CamembertForSequenceClassification.from_pretrained("cardiffnlp/twitter-roberta-base-emotion")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
<span class="hljs-string">&#x27;optimism&#x27;</span>`}}),{c(){l=s("p"),v=o("Example of single-label classification:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example of single-label classification:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function zk(D){let l,v;return l=new yt({props:{code:'# To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\nnum_labels = len(model.config.id2label)\nmodel = CamembertForSequenceClassification.from_pretrained("cardiffnlp/twitter-roberta-base-emotion", num_labels=num_labels)\n\nlabels = torch.tensor([1])\nloss = model(**inputs, labels=labels).loss\nround(loss.item(), 2)',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.08</span>`}}),{c(){C(l.$$.fragment)},l(u){$(l.$$.fragment,u)},m(u,b){E(l,u,b),v=!0},p:Tt,i(u){v||(F(l.$$.fragment,u),v=!0)},o(u){M(l.$$.fragment,u),v=!1},d(u){z(l,u)}}}function qk(D){let l,v,u,b,T;return b=new yt({props:{code:`import torch
from transformers import CamembertTokenizer, CamembertForSequenceClassification

tokenizer = CamembertTokenizer.from_pretrained("cardiffnlp/twitter-roberta-base-emotion")
model = CamembertForSequenceClassification.from_pretrained("cardiffnlp/twitter-roberta-base-emotion", problem_type="multi_label_classification")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
<span class="hljs-string">&#x27;optimism&#x27;</span>`}}),{c(){l=s("p"),v=o("Example of multi-label classification:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example of multi-label classification:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Pk(D){let l,v;return l=new yt({props:{code:`# To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`
num_labels = len(model.config.id2label)
model = CamembertForSequenceClassification.from_pretrained(
    "cardiffnlp/twitter-roberta-base-emotion", num_labels=num_labels, problem_type="multi_label_classification"
)

labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
    torch.float
)
loss = model(**inputs, labels=labels).loss
loss.backward()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;cardiffnlp/twitter-roberta-base-emotion&quot;</span>, num_labels=num_labels, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
<span class="hljs-meta">... </span>    torch.<span class="hljs-built_in">float</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span>loss.backward()`}}),{c(){C(l.$$.fragment)},l(u){$(l.$$.fragment,u)},m(u,b){E(l,u,b),v=!0},p:Tt,i(u){v||(F(l.$$.fragment,u),v=!0)},o(u){M(l.$$.fragment,u),v=!1},d(u){z(l,u)}}}function xk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function Lk(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertForMultipleChoice
import torch

tokenizer = CamembertTokenizer.from_pretrained("camembert-base")
model = CamembertForMultipleChoice.from_pretrained("camembert-base")

prompt = "In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced."
choice0 = "It is eaten with a fork and a knife."
choice1 = "It is eaten while held in the hand."
labels = torch.tensor(0).unsqueeze(0)  # choice0 is correct (according to Wikipedia ;)), batch size 1

encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors="pt", padding=True)
outputs = model(**{k: v.unsqueeze(0) for k, v in encoding.items()}, labels=labels)  # batch size is 1

# the linear classifier still needs to be trained
loss = outputs.loss
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForMultipleChoice
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;camembert-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&quot;In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>choice0 = <span class="hljs-string">&quot;It is eaten with a fork and a knife.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>choice1 = <span class="hljs-string">&quot;It is eaten while held in the hand.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor(<span class="hljs-number">0</span>).unsqueeze(<span class="hljs-number">0</span>)  <span class="hljs-comment"># choice0 is correct (according to Wikipedia ;)), batch size 1</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>, padding=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**{k: v.unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> encoding.items()}, labels=labels)  <span class="hljs-comment"># batch size is 1</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># the linear classifier still needs to be trained</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function jk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function Ok(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertForTokenClassification
import torch

tokenizer = CamembertTokenizer.from_pretrained("Jean-Baptiste/roberta-large-ner-english")
model = CamembertForTokenClassification.from_pretrained("Jean-Baptiste/roberta-large-ner-english")

inputs = tokenizer(
    "HuggingFace is a company based in Paris and New York", add_special_tokens=False, return_tensors="pt"
)

with torch.no_grad():
    logits = model(**inputs).logits

predicted_token_class_ids = logits.argmax(-1)

# Note that tokens are classified rather then input words which means that
# there might be more predicted token classes than words.
# Multiple token classes might account for the same word
predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]
predicted_tokens_classes`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForTokenClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;Jean-Baptiste/roberta-large-ner-english&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForTokenClassification.from_pretrained(<span class="hljs-string">&quot;Jean-Baptiste/roberta-large-ner-english&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;HuggingFace is a company based in Paris and New York&quot;</span>, add_special_tokens=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_class_ids = logits.argmax(-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Note that tokens are classified rather then input words which means that</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># there might be more predicted token classes than words.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Multiple token classes might account for the same word</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes = [model.config.id2label[t.item()] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> predicted_token_class_ids[<span class="hljs-number">0</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_tokens_classes
[<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;ORG&#x27;</span>, <span class="hljs-string">&#x27;ORG&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;LOC&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;LOC&#x27;</span>, <span class="hljs-string">&#x27;LOC&#x27;</span>]`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Ak(D){let l,v;return l=new yt({props:{code:`labels = predicted_token_class_ids
loss = model(**inputs, labels=labels).loss
round(loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = predicted_token_class_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.01</span>`}}),{c(){C(l.$$.fragment)},l(u){$(l.$$.fragment,u)},m(u,b){E(l,u,b),v=!0},p:Tt,i(u){v||(F(l.$$.fragment,u),v=!0)},o(u){M(l.$$.fragment,u),v=!1},d(u){z(l,u)}}}function Dk(D){let l,v,u,b,T;return{c(){l=s("p"),v=o("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=s("code"),b=o("Module"),T=o(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a(f,"CODE",{});var x=r(u);b=n(x,"Module"),x.forEach(t),T=n(f,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),f.forEach(t)},m(h,f){g(h,l,f),e(l,v),e(l,u),e(u,b),e(l,T)},d(h){h&&t(l)}}}function Ik(D){let l,v,u,b,T;return b=new yt({props:{code:`from transformers import CamembertTokenizer, CamembertForQuestionAnswering
import torch

tokenizer = CamembertTokenizer.from_pretrained("deepset/roberta-base-squad2")
model = CamembertForQuestionAnswering.from_pretrained("deepset/roberta-base-squad2")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"

inputs = tokenizer(question, text, return_tensors="pt")
with torch.no_grad():
    outputs = model(**inputs)

answer_start_index = outputs.start_logits.argmax()
answer_end_index = outputs.end_logits.argmax()

predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> CamembertTokenizer, CamembertForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = CamembertTokenizer.from_pretrained(<span class="hljs-string">&quot;deepset/roberta-base-squad2&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = CamembertForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;deepset/roberta-base-squad2&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = outputs.start_logits.argmax()
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = outputs.end_logits.argmax()

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predict_answer_tokens)
<span class="hljs-string">&#x27; puppet&#x27;</span>`}}),{c(){l=s("p"),v=o("Example:"),u=d(),C(b.$$.fragment)},l(h){l=a(h,"P",{});var f=r(l);v=n(f,"Example:"),f.forEach(t),u=c(h),$(b.$$.fragment,h)},m(h,f){g(h,l,f),e(l,v),g(h,u,f),E(b,h,f),T=!0},p:Tt,i(h){T||(F(b.$$.fragment,h),T=!0)},o(h){M(b.$$.fragment,h),T=!1},d(h){h&&t(l),h&&t(u),z(b,h)}}}function Nk(D){let l,v;return l=new yt({props:{code:`# target is "nice puppet"
target_start_index = torch.tensor([14])
target_end_index = torch.tensor([15])

outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
loss = outputs.loss
round(loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index = torch.tensor([<span class="hljs-number">14</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>target_end_index = torch.tensor([<span class="hljs-number">15</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">0.86</span>`}}),{c(){C(l.$$.fragment)},l(u){$(l.$$.fragment,u)},m(u,b){E(l,u,b),v=!0},p:Tt,i(u){v||(F(l.$$.fragment,u),v=!0)},o(u){M(l.$$.fragment,u),v=!1},d(u){z(l,u)}}}function Sk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Rk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Bk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Wk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Uk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Kk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Hk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be;return{c(){l=s("p"),v=o("TensorFlow models and layers in "),u=s("code"),b=o("transformers"),T=o(" accept two formats as input:"),h=d(),f=s("ul"),x=s("li"),ve=o("having all inputs as keyword arguments (like PyTorch models), or"),he=d(),N=s("li"),ae=o("having all inputs as a list, tuple or dict in the first positional argument."),ee=d(),k=s("p"),we=o(`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=s("code"),Te=o("model.fit()"),pe=o(` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=s("code"),ye=o("model.fit()"),ie=o(` supports! If, however, you want to use the second
format outside of Keras methods like `),V=s("code"),Ce=o("fit()"),ue=o(" and "),W=s("code"),$e=o("predict()"),fe=o(`, such as when creating your own layers or models with
the Keras `),U=s("code"),me=o("Functional"),Ee=o(` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),ne=d(),q=s("ul"),j=s("li"),ge=o("a single Tensor with "),K=s("code"),le=o("input_ids"),Fe=o(" only and nothing else: "),H=s("code"),Me=o("model(input_ids)"),ze=d(),L=s("li"),se=o(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=s("code"),de=o("model([input_ids, attention_mask])"),qe=o(" or "),J=s("code"),ce=o("model([input_ids, attention_mask, token_type_ids])"),Pe=d(),I=s("li"),_e=o(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=s("code"),re=o('model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),te=d(),P=s("p"),xe=o(`Note that when creating models and layers with
`),O=s("a"),Le=o("subclassing"),be=o(` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),this.h()},l(m){l=a(m,"P",{});var w=r(l);v=n(w,"TensorFlow models and layers in "),u=a(w,"CODE",{});var Re=r(u);b=n(Re,"transformers"),Re.forEach(t),T=n(w," accept two formats as input:"),w.forEach(t),h=c(m),f=a(m,"UL",{});var Y=r(f);x=a(Y,"LI",{});var Be=r(x);ve=n(Be,"having all inputs as keyword arguments (like PyTorch models), or"),Be.forEach(t),he=c(Y),N=a(Y,"LI",{});var De=r(N);ae=n(De,"having all inputs as a list, tuple or dict in the first positional argument."),De.forEach(t),Y.forEach(t),ee=c(m),k=a(m,"P",{});var y=r(k);we=n(y,`The reason the second format is supported is that Keras methods prefer this format when passing inputs to models
and layers. Because of this support, when using methods like `),Q=a(y,"CODE",{});var We=r(Q);Te=n(We,"model.fit()"),We.forEach(t),pe=n(y,` things should \u201Cjust work\u201D for you - just
pass your inputs and labels in any format that `),R=a(y,"CODE",{});var Oe=r(R);ye=n(Oe,"model.fit()"),Oe.forEach(t),ie=n(y,` supports! If, however, you want to use the second
format outside of Keras methods like `),V=a(y,"CODE",{});var Ue=r(V);Ce=n(Ue,"fit()"),Ue.forEach(t),ue=n(y," and "),W=a(y,"CODE",{});var Ke=r(W);$e=n(Ke,"predict()"),Ke.forEach(t),fe=n(y,`, such as when creating your own layers or models with
the Keras `),U=a(y,"CODE",{});var Se=r(U);me=n(Se,"Functional"),Se.forEach(t),Ee=n(y,` API, there are three possibilities you can use to gather all the input Tensors in the first
positional argument:`),y.forEach(t),ne=c(m),q=a(m,"UL",{});var A=r(q);j=a(A,"LI",{});var B=r(j);ge=n(B,"a single Tensor with "),K=a(B,"CODE",{});var Ie=r(K);le=n(Ie,"input_ids"),Ie.forEach(t),Fe=n(B," only and nothing else: "),H=a(B,"CODE",{});var Ae=r(H);Me=n(Ae,"model(input_ids)"),Ae.forEach(t),B.forEach(t),ze=c(A),L=a(A,"LI",{});var X=r(L);se=n(X,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),G=a(X,"CODE",{});var Ne=r(G);de=n(Ne,"model([input_ids, attention_mask])"),Ne.forEach(t),qe=n(X," or "),J=a(X,"CODE",{});var He=r(J);ce=n(He,"model([input_ids, attention_mask, token_type_ids])"),He.forEach(t),X.forEach(t),Pe=c(A),I=a(A,"LI",{});var ke=r(I);_e=n(ke,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),S=a(ke,"CODE",{});var oe=r(S);re=n(oe,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),oe.forEach(t),ke.forEach(t),A.forEach(t),te=c(m),P=a(m,"P",{});var Z=r(P);xe=n(Z,`Note that when creating models and layers with
`),O=a(Z,"A",{href:!0,rel:!0});var Qe=r(O);Le=n(Qe,"subclassing"),Qe.forEach(t),be=n(Z,` then you don\u2019t need to worry
about any of this, as you can just pass inputs like you would to any other Python function!`),Z.forEach(t),this.h()},h(){p(O,"href","https://keras.io/guides/making_new_layers_and_models_via_subclassing/"),p(O,"rel","nofollow")},m(m,w){g(m,l,w),e(l,v),e(l,u),e(u,b),e(l,T),g(m,h,w),g(m,f,w),e(f,x),e(x,ve),e(f,he),e(f,N),e(N,ae),g(m,ee,w),g(m,k,w),e(k,we),e(k,Q),e(Q,Te),e(k,pe),e(k,R),e(R,ye),e(k,ie),e(k,V),e(V,Ce),e(k,ue),e(k,W),e(W,$e),e(k,fe),e(k,U),e(U,me),e(k,Ee),g(m,ne,w),g(m,q,w),e(q,j),e(j,ge),e(j,K),e(K,le),e(j,Fe),e(j,H),e(H,Me),e(q,ze),e(q,L),e(L,se),e(L,G),e(G,de),e(L,qe),e(L,J),e(J,ce),e(q,Pe),e(q,I),e(I,_e),e(I,S),e(S,re),g(m,te,w),g(m,P,w),e(P,xe),e(P,O),e(O,Le),e(P,be)},d(m){m&&t(l),m&&t(h),m&&t(f),m&&t(ee),m&&t(k),m&&t(ne),m&&t(q),m&&t(te),m&&t(P)}}}function Qk(D){let l,v,u,b,T,h,f,x,ve,he,N,ae,ee,k,we,Q,Te,pe,R,ye,ie,V,Ce,ue,W,$e,fe,U,me,Ee,ne,q,j,ge,K,le,Fe,H,Me,ze,L,se,G,de,qe,J,ce,Pe,I,_e,S,re,te,P,xe,O,Le,be,m,w,Re,Y,Be,De,y,We,Oe,Ue,Ke,Se,A,B,Ie,Ae,X,Ne,He,ke,oe,Z,Qe,jt,Rd,wa,Bd,Wd,Ta,Ud,Kd,bn,Hd,Qd,Vd,kn,Gd,ya,Jd,Xd,Yd,Ot,vn,Zd,gr,ec,tc,wn,Ca,oc,_r,nc,sc,$a,ac,br,rc,ic,vo,Tn,lc,yn,dc,kr,cc,mc,hc,wo,Cn,pc,vr,uc,fc,Ea,$n,el,Vt,To,wr,En,gc,Tr,_c,tl,rt,Fn,bc,vt,kc,yr,vc,wc,Fa,Tc,yc,Ma,Cc,$c,Mn,Ec,Fc,Mc,zn,zc,za,qc,Pc,xc,At,qn,Lc,Cr,jc,Oc,Pn,qa,Ac,$r,Dc,Ic,Pa,Nc,Er,Sc,Rc,yo,xn,Bc,Fr,Wc,ol,Gt,Co,Mr,Ln,Uc,zr,Kc,nl,Ve,jn,Hc,qr,Qc,Vc,On,Gc,xa,Jc,Xc,Yc,An,Zc,Dn,em,tm,om,In,nm,Pr,sm,am,rm,Xe,im,xr,lm,dm,Lr,cm,mm,jr,hm,pm,Or,um,fm,Ar,gm,_m,Dr,bm,km,vm,$o,wm,Ir,Tm,ym,Nn,Cm,$m,Ct,Sn,Em,Jt,Fm,La,Mm,zm,Nr,qm,Pm,xm,Eo,Lm,Fo,sl,Xt,Mo,Sr,Rn,jm,Rr,Om,al,it,Bn,Am,Wn,Dm,Br,Im,Nm,Sm,Un,Rm,ja,Bm,Wm,Um,Kn,Km,Hn,Hm,Qm,Vm,$t,Qn,Gm,Yt,Jm,Oa,Xm,Ym,Wr,Zm,eh,th,zo,oh,qo,rl,Zt,Po,Ur,Vn,nh,Kr,sh,il,lt,Gn,ah,Jn,rh,Hr,ih,lh,dh,Xn,ch,Aa,mh,hh,ph,Yn,uh,Zn,fh,gh,_h,pt,es,bh,eo,kh,Da,vh,wh,Qr,Th,yh,Ch,xo,$h,Lo,Eh,jo,ll,to,Oo,Vr,ts,Fh,Gr,Mh,dl,dt,os,zh,Jr,qh,Ph,ns,xh,Ia,Lh,jh,Oh,ss,Ah,as,Dh,Ih,Nh,Je,rs,Sh,oo,Rh,Na,Bh,Wh,Xr,Uh,Kh,Hh,Ao,Qh,Do,Vh,Io,Gh,No,Jh,So,cl,no,Ro,Yr,is,Xh,Zr,Yh,ml,ct,ls,Zh,ei,ep,tp,ds,op,Sa,np,sp,ap,cs,rp,ms,ip,lp,dp,Et,hs,cp,so,mp,Ra,hp,pp,ti,up,fp,gp,Bo,_p,Wo,hl,ao,Uo,oi,ps,bp,ni,kp,pl,mt,us,vp,si,wp,Tp,fs,yp,Ba,Cp,$p,Ep,gs,Fp,_s,Mp,zp,qp,ut,bs,Pp,ro,xp,Wa,Lp,jp,ai,Op,Ap,Dp,Ko,Ip,Ho,Np,Qo,ul,io,Vo,ri,ks,Sp,ii,Rp,fl,ht,vs,Bp,Go,Wp,li,Up,Kp,di,Hp,Qp,ws,Vp,Ua,Gp,Jp,Xp,Ts,Yp,ys,Zp,eu,tu,ft,Cs,ou,lo,nu,Ka,su,au,ci,ru,iu,lu,Jo,du,Xo,cu,Yo,gl,co,Zo,mi,$s,mu,hi,hu,_l,Ye,Es,pu,pi,uu,fu,Fs,gu,Ha,_u,bu,ku,Ms,vu,zs,wu,Tu,yu,en,Cu,qs,$u,Qa,Eu,Fu,bl,mo,tn,ui,Ps,Mu,fi,zu,kl,Ze,xs,qu,Ls,Pu,gi,xu,Lu,ju,js,Ou,Va,Au,Du,Iu,Os,Nu,As,Su,Ru,Bu,on,Wu,Ds,Uu,Ga,Ku,Hu,vl,ho,nn,_i,Is,Qu,bi,Vu,wl,et,Ns,Gu,Ss,Ju,ki,Xu,Yu,Zu,Rs,ef,Ja,tf,of,nf,Bs,sf,Ws,af,rf,lf,sn,df,Us,cf,Xa,mf,hf,Tl,po,an,vi,Ks,pf,wi,uf,yl,tt,Hs,ff,Ti,gf,_f,Qs,bf,Ya,kf,vf,wf,Vs,Tf,Gs,yf,Cf,$f,rn,Ef,Js,Ff,Za,Mf,zf,Cl,uo,ln,yi,Xs,qf,Ci,Pf,$l,ot,Ys,xf,$i,Lf,jf,Zs,Of,er,Af,Df,If,ea,Nf,ta,Sf,Rf,Bf,dn,Wf,oa,Uf,tr,Kf,Hf,El,fo,cn,Ei,na,Qf,Fi,Vf,Fl,nt,sa,Gf,Mi,Jf,Xf,aa,Yf,or,Zf,eg,tg,ra,og,ia,ng,sg,ag,mn,rg,la,ig,nr,lg,dg,Ml,go,hn,zi,da,cg,qi,mg,zl,st,ca,hg,_o,pg,Pi,ug,fg,xi,gg,_g,bg,ma,kg,sr,vg,wg,Tg,ha,yg,pa,Cg,$g,Eg,pn,Fg,ua,Mg,ar,zg,qg,ql;return h=new Ge({}),k=new Ge({}),P=new Ge({}),w=new je({props:{name:"class transformers.CamembertConfig",anchor:"transformers.CamembertConfig",parameters:[{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/configuration_camembert.py#L39"}}),Ae=new Ge({}),Z=new je({props:{name:"class transformers.CamembertTokenizer",anchor:"transformers.CamembertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CamembertTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.CamembertTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.CamembertTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L45"}}),vn=new je({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L161",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Tn=new je({props:{name:"get_special_tokens_mask",anchor:"transformers.CamembertTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L187",returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Cn=new je({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L214",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),$n=new je({props:{name:"save_vocabulary",anchor:"transformers.CamembertTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L283"}}),En=new Ge({}),Fn=new je({props:{name:"class transformers.CamembertTokenizerFast",anchor:"transformers.CamembertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L53"}}),qn=new je({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L145",returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),xn=new je({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L171",returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ln=new Ge({}),jn=new je({props:{name:"class transformers.CamembertModel",anchor:"transformers.CamembertModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],parametersDescription:[{anchor:"transformers.CamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L738"}}),Sn=new je({props:{name:"forward",anchor:"transformers.CamembertModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[torch.Tensor] = None"},{name:"encoder_attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"past_key_values",val:": typing.Optional[typing.List[torch.FloatTensor]] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertModel.forward.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong>  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if
the model is configured as a decoder.`,name:"encoder_hidden_states"},{anchor:"transformers.CamembertModel.forward.encoder_attention_mask",description:`<strong>encoder_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in
the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>`,name:"encoder_attention_mask"},{anchor:"transformers.CamembertModel.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>) &#x2014;
Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those that
don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all
<code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.CamembertModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L783",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"
>transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> and <code>config.add_cross_attention=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax, used to compute the
weighted average in the cross-attention heads.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>tuple(torch.FloatTensor)</code> of length <code>config.n_layers</code>, with each tuple having 2 tensors of shape
<code>(batch_size, num_heads, sequence_length, embed_size_per_head)</code>) and optionally if
<code>config.is_encoder_decoder=True</code> 2 additional tensors of shape <code>(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the self-attention blocks and optionally if
<code>config.is_encoder_decoder=True</code> in the cross-attention blocks) that can be used (see <code>past_key_values</code>
input) to speed up sequential decoding.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions"
>transformers.modeling_outputs.BaseModelOutputWithPoolingAndCrossAttentions</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Eo=new kt({props:{$$slots:{default:[vk]},$$scope:{ctx:D}}}),Fo=new wt({props:{anchor:"transformers.CamembertModel.forward.example",$$slots:{default:[wk]},$$scope:{ctx:D}}}),Rn=new Ge({}),Bn=new je({props:{name:"class transformers.CamembertForCausalLM",anchor:"transformers.CamembertForCausalLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1418"}}),Qn=new je({props:{name:"forward",anchor:"transformers.CamembertForCausalLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"past_key_values",val:": typing.Tuple[typing.Tuple[torch.FloatTensor]] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForCausalLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForCausalLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForCausalLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForCausalLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForCausalLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForCausalLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForCausalLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForCausalLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForCausalLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForCausalLM.forward.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong>  (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder. Used in the cross-attention if
the model is configured as a decoder.`,name:"encoder_hidden_states"},{anchor:"transformers.CamembertForCausalLM.forward.encoder_attention_mask",description:`<strong>encoder_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on the padding token indices of the encoder input. This mask is used in
the cross-attention if the model is configured as a decoder. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>`,name:"encoder_attention_mask"},{anchor:"transformers.CamembertForCausalLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the left-to-right language modeling loss (next word prediction). Indices should be in
<code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are
ignored (masked), the loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"},{anchor:"transformers.CamembertForCausalLM.forward.past_key_values",description:`<strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code> of length <code>config.n_layers</code> with each tuple having 4 tensors of shape <code>(batch_size, num_heads, sequence_length - 1, embed_size_per_head)</code>) &#x2014;
Contains precomputed key and value hidden states of the attention blocks. Can be used to speed up decoding.</p>
<p>If <code>past_key_values</code> are used, the user can optionally input only the last <code>decoder_input_ids</code> (those that
don&#x2019;t have their past key value states given to this model) of shape <code>(batch_size, 1)</code> instead of all
<code>decoder_input_ids</code> of shape <code>(batch_size, sequence_length)</code>.`,name:"past_key_values"},{anchor:"transformers.CamembertForCausalLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1444",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>transformers.modeling_outputs.CausalLMOutputWithCrossAttentions</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
<li>
<p><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Cross attentions weights after the attention softmax, used to compute the weighted average in the
cross-attention heads.</p>
</li>
<li>
<p><strong>past_key_values</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> tuples of length <code>config.n_layers</code>, with each tuple containing the cached key,
value states of the self-attention and the cross-attention layers if model is used in encoder-decoder
setting. Only relevant if <code>config.is_decoder = True</code>.</p>
<p>Contains pre-computed hidden-states (key and values in the attention blocks) that can be used (see
<code>past_key_values</code> input) to speed up sequential decoding.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.CausalLMOutputWithCrossAttentions"
>transformers.modeling_outputs.CausalLMOutputWithCrossAttentions</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),zo=new kt({props:{$$slots:{default:[Tk]},$$scope:{ctx:D}}}),qo=new wt({props:{anchor:"transformers.CamembertForCausalLM.forward.example",$$slots:{default:[yk]},$$scope:{ctx:D}}}),Vn=new Ge({}),Gn=new je({props:{name:"class transformers.CamembertForMaskedLM",anchor:"transformers.CamembertForMaskedLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L926"}}),es=new je({props:{name:"forward",anchor:"transformers.CamembertForMaskedLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForMaskedLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForMaskedLM.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForMaskedLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForMaskedLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForMaskedLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked), the
loss is only computed for the tokens with labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"},{anchor:"transformers.CamembertForMaskedLM.forward.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, any]</code>, optional, defaults to <em>{}</em>) &#x2014;
Used to hide legacy arguments that have been deprecated.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L955",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),xo=new kt({props:{$$slots:{default:[Ck]},$$scope:{ctx:D}}}),Lo=new wt({props:{anchor:"transformers.CamembertForMaskedLM.forward.example",$$slots:{default:[$k]},$$scope:{ctx:D}}}),jo=new wt({props:{anchor:"transformers.CamembertForMaskedLM.forward.example-2",$$slots:{default:[Ek]},$$scope:{ctx:D}}}),ts=new Ge({}),os=new je({props:{name:"class transformers.CamembertForSequenceClassification",anchor:"transformers.CamembertForSequenceClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1031"}}),rs=new je({props:{name:"forward",anchor:"transformers.CamembertForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForSequenceClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForSequenceClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1045",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ao=new kt({props:{$$slots:{default:[Fk]},$$scope:{ctx:D}}}),Do=new wt({props:{anchor:"transformers.CamembertForSequenceClassification.forward.example",$$slots:{default:[Mk]},$$scope:{ctx:D}}}),Io=new wt({props:{anchor:"transformers.CamembertForSequenceClassification.forward.example-2",$$slots:{default:[zk]},$$scope:{ctx:D}}}),No=new wt({props:{anchor:"transformers.CamembertForSequenceClassification.forward.example-3",$$slots:{default:[qk]},$$scope:{ctx:D}}}),So=new wt({props:{anchor:"transformers.CamembertForSequenceClassification.forward.example-4",$$slots:{default:[Pk]},$$scope:{ctx:D}}}),is=new Ge({}),ls=new je({props:{name:"class transformers.CamembertForMultipleChoice",anchor:"transformers.CamembertForMultipleChoice",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1132"}}),hs=new je({props:{name:"forward",anchor:"transformers.CamembertForMultipleChoice.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForMultipleChoice.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForMultipleChoice.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForMultipleChoice.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForMultipleChoice.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_choices, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForMultipleChoice.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForMultipleChoice.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForMultipleChoice.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForMultipleChoice.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForMultipleChoice.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForMultipleChoice.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the multiple choice classification loss. Indices should be in <code>[0, ..., num_choices-1]</code> where <code>num_choices</code> is the size of the second dimension of the input tensors. (See
<code>input_ids</code> above)`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1145",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MultipleChoiceModelOutput"
>transformers.modeling_outputs.MultipleChoiceModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <em>(1,)</em>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_choices)</code>) \u2014 <em>num_choices</em> is the second dimension of the input tensors. (see <em>input_ids</em> above).</p>
<p>Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.MultipleChoiceModelOutput"
>transformers.modeling_outputs.MultipleChoiceModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Bo=new kt({props:{$$slots:{default:[xk]},$$scope:{ctx:D}}}),Wo=new wt({props:{anchor:"transformers.CamembertForMultipleChoice.forward.example",$$slots:{default:[Lk]},$$scope:{ctx:D}}}),ps=new Ge({}),us=new je({props:{name:"class transformers.CamembertForTokenClassification",anchor:"transformers.CamembertForTokenClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1228"}}),bs=new je({props:{name:"forward",anchor:"transformers.CamembertForTokenClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"labels",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForTokenClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForTokenClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForTokenClassification.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForTokenClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForTokenClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForTokenClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForTokenClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForTokenClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForTokenClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForTokenClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the token classification loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1246",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided)  \u2014 Classification loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.num_labels)</code>) \u2014 Classification scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.TokenClassifierOutput"
>transformers.modeling_outputs.TokenClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Ko=new kt({props:{$$slots:{default:[jk]},$$scope:{ctx:D}}}),Ho=new wt({props:{anchor:"transformers.CamembertForTokenClassification.forward.example",$$slots:{default:[Ok]},$$scope:{ctx:D}}}),Qo=new wt({props:{anchor:"transformers.CamembertForTokenClassification.forward.example-2",$$slots:{default:[Ak]},$$scope:{ctx:D}}}),ks=new Ge({}),vs=new je({props:{name:"class transformers.CamembertForQuestionAnswering",anchor:"transformers.CamembertForQuestionAnswering",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.CamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1316"}}),Cs=new je({props:{name:"forward",anchor:"transformers.CamembertForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"head_mask",val:": typing.Optional[torch.FloatTensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.FloatTensor] = None"},{name:"start_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"end_positions",val:": typing.Optional[torch.LongTensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.CamembertForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer">CamembertTokenizer</a>. See <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.CamembertForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.CamembertForQuestionAnswering.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.CamembertForQuestionAnswering.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.CamembertForQuestionAnswering.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.CamembertForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.CamembertForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.CamembertForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.CamembertForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.CamembertForQuestionAnswering.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.CamembertForQuestionAnswering.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L1330",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"
>CamembertConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Jo=new kt({props:{$$slots:{default:[Dk]},$$scope:{ctx:D}}}),Xo=new wt({props:{anchor:"transformers.CamembertForQuestionAnswering.forward.example",$$slots:{default:[Ik]},$$scope:{ctx:D}}}),Yo=new wt({props:{anchor:"transformers.CamembertForQuestionAnswering.forward.example-2",$$slots:{default:[Nk]},$$scope:{ctx:D}}}),$s=new Ge({}),Es=new je({props:{name:"class transformers.TFCamembertModel",anchor:"transformers.TFCamembertModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L85"}}),en=new kt({props:{$$slots:{default:[Sk]},$$scope:{ctx:D}}}),Ps=new Ge({}),xs=new je({props:{name:"class transformers.TFCamembertForCausalLM",anchor:"transformers.TFCamembertForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L174"}}),on=new kt({props:{$$slots:{default:[Rk]},$$scope:{ctx:D}}}),Is=new Ge({}),Ns=new je({props:{name:"class transformers.TFCamembertForMaskedLM",anchor:"transformers.TFCamembertForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L98"}}),sn=new kt({props:{$$slots:{default:[Bk]},$$scope:{ctx:D}}}),Ks=new Ge({}),Hs=new je({props:{name:"class transformers.TFCamembertForSequenceClassification",anchor:"transformers.TFCamembertForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L114"}}),rn=new kt({props:{$$slots:{default:[Wk]},$$scope:{ctx:D}}}),Xs=new Ge({}),Ys=new je({props:{name:"class transformers.TFCamembertForMultipleChoice",anchor:"transformers.TFCamembertForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L146"}}),dn=new kt({props:{$$slots:{default:[Uk]},$$scope:{ctx:D}}}),na=new Ge({}),sa=new je({props:{name:"class transformers.TFCamembertForTokenClassification",anchor:"transformers.TFCamembertForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L130"}}),mn=new kt({props:{$$slots:{default:[Kk]},$$scope:{ctx:D}}}),da=new Ge({}),ca=new je({props:{name:"class transformers.TFCamembertForQuestionAnswering",anchor:"transformers.TFCamembertForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFCamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L162"}}),pn=new kt({props:{$$slots:{default:[Hk]},$$scope:{ctx:D}}}),{c(){l=s("meta"),v=d(),u=s("h1"),b=s("a"),T=s("span"),C(h.$$.fragment),f=d(),x=s("span"),ve=o("CamemBERT"),he=d(),N=s("h2"),ae=s("a"),ee=s("span"),C(k.$$.fragment),we=d(),Q=s("span"),Te=o("Overview"),pe=d(),R=s("p"),ye=o("The CamemBERT model was proposed in "),ie=s("a"),V=o("CamemBERT: a Tasty French Language Model"),Ce=o(` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),ue=d(),W=s("p"),$e=o("The abstract from the paper is the following:"),fe=d(),U=s("p"),me=s("em"),Ee=o(`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),ne=d(),q=s("p"),j=o("Tips:"),ge=d(),K=s("ul"),le=s("li"),Fe=o("This implementation is the same as RoBERTa. Refer to the "),H=s("a"),Me=o("documentation of RoBERTa"),ze=o(` for usage examples
as well as the information relative to the inputs and outputs.`),L=d(),se=s("p"),G=o("This model was contributed by "),de=s("a"),qe=o("camembert"),J=o(". The original code can be found "),ce=s("a"),Pe=o("here"),I=o("."),_e=d(),S=s("h2"),re=s("a"),te=s("span"),C(P.$$.fragment),xe=d(),O=s("span"),Le=o("CamembertConfig"),be=d(),m=s("div"),C(w.$$.fragment),Re=d(),Y=s("p"),Be=o("This class overrides "),De=s("a"),y=o("RobertaConfig"),We=o(`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
Camembert `),Oe=s("a"),Ue=o("camembert-base"),Ke=o(" architecture."),Se=d(),A=s("h2"),B=s("a"),Ie=s("span"),C(Ae.$$.fragment),X=d(),Ne=s("span"),He=o("CamembertTokenizer"),ke=d(),oe=s("div"),C(Z.$$.fragment),Qe=d(),jt=s("p"),Rd=o("Adapted from "),wa=s("a"),Bd=o("RobertaTokenizer"),Wd=o(" and "),Ta=s("a"),Ud=o("XLNetTokenizer"),Kd=o(`. Construct a CamemBERT tokenizer. Based on
`),bn=s("a"),Hd=o("SentencePiece"),Qd=o("."),Vd=d(),kn=s("p"),Gd=o("This tokenizer inherits from "),ya=s("a"),Jd=o("PreTrainedTokenizer"),Xd=o(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Yd=d(),Ot=s("div"),C(vn.$$.fragment),Zd=d(),gr=s("p"),ec=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),tc=d(),wn=s("ul"),Ca=s("li"),oc=o("single sequence: "),_r=s("code"),nc=o("<s> X </s>"),sc=d(),$a=s("li"),ac=o("pair of sequences: "),br=s("code"),rc=o("<s> A </s></s> B </s>"),ic=d(),vo=s("div"),C(Tn.$$.fragment),lc=d(),yn=s("p"),dc=o(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),kr=s("code"),cc=o("prepare_for_model"),mc=o(" method."),hc=d(),wo=s("div"),C(Cn.$$.fragment),pc=d(),vr=s("p"),uc=o(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),fc=d(),Ea=s("div"),C($n.$$.fragment),el=d(),Vt=s("h2"),To=s("a"),wr=s("span"),C(En.$$.fragment),gc=d(),Tr=s("span"),_c=o("CamembertTokenizerFast"),tl=d(),rt=s("div"),C(Fn.$$.fragment),bc=d(),vt=s("p"),kc=o("Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),yr=s("em"),vc=o("tokenizers"),wc=o(` library). Adapted from
`),Fa=s("a"),Tc=o("RobertaTokenizer"),yc=o(" and "),Ma=s("a"),Cc=o("XLNetTokenizer"),$c=o(`. Based on
`),Mn=s("a"),Ec=o("BPE"),Fc=o("."),Mc=d(),zn=s("p"),zc=o("This tokenizer inherits from "),za=s("a"),qc=o("PreTrainedTokenizerFast"),Pc=o(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),xc=d(),At=s("div"),C(qn.$$.fragment),Lc=d(),Cr=s("p"),jc=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Oc=d(),Pn=s("ul"),qa=s("li"),Ac=o("single sequence: "),$r=s("code"),Dc=o("<s> X </s>"),Ic=d(),Pa=s("li"),Nc=o("pair of sequences: "),Er=s("code"),Sc=o("<s> A </s></s> B </s>"),Rc=d(),yo=s("div"),C(xn.$$.fragment),Bc=d(),Fr=s("p"),Wc=o(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),ol=d(),Gt=s("h2"),Co=s("a"),Mr=s("span"),C(Ln.$$.fragment),Uc=d(),zr=s("span"),Kc=o("CamembertModel"),nl=d(),Ve=s("div"),C(jn.$$.fragment),Hc=d(),qr=s("p"),Qc=o("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Vc=d(),On=s("p"),Gc=o("This model inherits from "),xa=s("a"),Jc=o("PreTrainedModel"),Xc=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Yc=d(),An=s("p"),Zc=o("This model is also a PyTorch "),Dn=s("a"),em=o("torch.nn.Module"),tm=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),om=d(),In=s("p"),nm=o(`The model can behave as an encoder (with only self-attention) as well as a decoder, in which case a layer of
cross-attention is added between the self-attention layers, following the architecture described in `),Pr=s("em"),sm=o(`Attention is
all you need`),am=o(`_ by Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser and Illia Polosukhin.`),rm=d(),Xe=s("p"),im=o("To behave as a decoder the model needs to be initialized with the "),xr=s("code"),lm=o("is_decoder"),dm=o(` argument of the configuration set to
`),Lr=s("code"),cm=o("True"),mm=o(". To be used in a Seq2Seq model, the model needs to initialized with both "),jr=s("code"),hm=o("is_decoder"),pm=o(` argument and
`),Or=s("code"),um=o("add_cross_attention"),fm=o(" set to "),Ar=s("code"),gm=o("True"),_m=o("; an "),Dr=s("code"),bm=o("encoder_hidden_states"),km=o(" is then expected as an input to the forward pass."),vm=d(),$o=s("p"),wm=o(".. _"),Ir=s("em"),Tm=o("Attention is all you need"),ym=o(": "),Nn=s("a"),Cm=o("https://arxiv.org/abs/1706.03762"),$m=d(),Ct=s("div"),C(Sn.$$.fragment),Em=d(),Jt=s("p"),Fm=o("The "),La=s("a"),Mm=o("CamembertModel"),zm=o(" forward method, overrides the "),Nr=s("code"),qm=o("__call__"),Pm=o(" special method."),xm=d(),C(Eo.$$.fragment),Lm=d(),C(Fo.$$.fragment),sl=d(),Xt=s("h2"),Mo=s("a"),Sr=s("span"),C(Rn.$$.fragment),jm=d(),Rr=s("span"),Om=o("CamembertForCausalLM"),al=d(),it=s("div"),C(Bn.$$.fragment),Am=d(),Wn=s("p"),Dm=o("CamemBERT Model with a "),Br=s("code"),Im=o("language modeling"),Nm=o(" head on top for CLM fine-tuning."),Sm=d(),Un=s("p"),Rm=o("This model inherits from "),ja=s("a"),Bm=o("PreTrainedModel"),Wm=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Um=d(),Kn=s("p"),Km=o("This model is also a PyTorch "),Hn=s("a"),Hm=o("torch.nn.Module"),Qm=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vm=d(),$t=s("div"),C(Qn.$$.fragment),Gm=d(),Yt=s("p"),Jm=o("The "),Oa=s("a"),Xm=o("CamembertForCausalLM"),Ym=o(" forward method, overrides the "),Wr=s("code"),Zm=o("__call__"),eh=o(" special method."),th=d(),C(zo.$$.fragment),oh=d(),C(qo.$$.fragment),rl=d(),Zt=s("h2"),Po=s("a"),Ur=s("span"),C(Vn.$$.fragment),nh=d(),Kr=s("span"),sh=o("CamembertForMaskedLM"),il=d(),lt=s("div"),C(Gn.$$.fragment),ah=d(),Jn=s("p"),rh=o("CamemBERT Model with a "),Hr=s("code"),ih=o("language modeling"),lh=o(" head on top."),dh=d(),Xn=s("p"),ch=o("This model inherits from "),Aa=s("a"),mh=o("PreTrainedModel"),hh=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ph=d(),Yn=s("p"),uh=o("This model is also a PyTorch "),Zn=s("a"),fh=o("torch.nn.Module"),gh=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),_h=d(),pt=s("div"),C(es.$$.fragment),bh=d(),eo=s("p"),kh=o("The "),Da=s("a"),vh=o("CamembertForMaskedLM"),wh=o(" forward method, overrides the "),Qr=s("code"),Th=o("__call__"),yh=o(" special method."),Ch=d(),C(xo.$$.fragment),$h=d(),C(Lo.$$.fragment),Eh=d(),C(jo.$$.fragment),ll=d(),to=s("h2"),Oo=s("a"),Vr=s("span"),C(ts.$$.fragment),Fh=d(),Gr=s("span"),Mh=o("CamembertForSequenceClassification"),dl=d(),dt=s("div"),C(os.$$.fragment),zh=d(),Jr=s("p"),qh=o(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Ph=d(),ns=s("p"),xh=o("This model inherits from "),Ia=s("a"),Lh=o("PreTrainedModel"),jh=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Oh=d(),ss=s("p"),Ah=o("This model is also a PyTorch "),as=s("a"),Dh=o("torch.nn.Module"),Ih=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Nh=d(),Je=s("div"),C(rs.$$.fragment),Sh=d(),oo=s("p"),Rh=o("The "),Na=s("a"),Bh=o("CamembertForSequenceClassification"),Wh=o(" forward method, overrides the "),Xr=s("code"),Uh=o("__call__"),Kh=o(" special method."),Hh=d(),C(Ao.$$.fragment),Qh=d(),C(Do.$$.fragment),Vh=d(),C(Io.$$.fragment),Gh=d(),C(No.$$.fragment),Jh=d(),C(So.$$.fragment),cl=d(),no=s("h2"),Ro=s("a"),Yr=s("span"),C(is.$$.fragment),Xh=d(),Zr=s("span"),Yh=o("CamembertForMultipleChoice"),ml=d(),ct=s("div"),C(ls.$$.fragment),Zh=d(),ei=s("p"),ep=o(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),tp=d(),ds=s("p"),op=o("This model inherits from "),Sa=s("a"),np=o("PreTrainedModel"),sp=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ap=d(),cs=s("p"),rp=o("This model is also a PyTorch "),ms=s("a"),ip=o("torch.nn.Module"),lp=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),dp=d(),Et=s("div"),C(hs.$$.fragment),cp=d(),so=s("p"),mp=o("The "),Ra=s("a"),hp=o("CamembertForMultipleChoice"),pp=o(" forward method, overrides the "),ti=s("code"),up=o("__call__"),fp=o(" special method."),gp=d(),C(Bo.$$.fragment),_p=d(),C(Wo.$$.fragment),hl=d(),ao=s("h2"),Uo=s("a"),oi=s("span"),C(ps.$$.fragment),bp=d(),ni=s("span"),kp=o("CamembertForTokenClassification"),pl=d(),mt=s("div"),C(us.$$.fragment),vp=d(),si=s("p"),wp=o(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Tp=d(),fs=s("p"),yp=o("This model inherits from "),Ba=s("a"),Cp=o("PreTrainedModel"),$p=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ep=d(),gs=s("p"),Fp=o("This model is also a PyTorch "),_s=s("a"),Mp=o("torch.nn.Module"),zp=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),qp=d(),ut=s("div"),C(bs.$$.fragment),Pp=d(),ro=s("p"),xp=o("The "),Wa=s("a"),Lp=o("CamembertForTokenClassification"),jp=o(" forward method, overrides the "),ai=s("code"),Op=o("__call__"),Ap=o(" special method."),Dp=d(),C(Ko.$$.fragment),Ip=d(),C(Ho.$$.fragment),Np=d(),C(Qo.$$.fragment),ul=d(),io=s("h2"),Vo=s("a"),ri=s("span"),C(ks.$$.fragment),Sp=d(),ii=s("span"),Rp=o("CamembertForQuestionAnswering"),fl=d(),ht=s("div"),C(vs.$$.fragment),Bp=d(),Go=s("p"),Wp=o(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),li=s("code"),Up=o("span start logits"),Kp=o(" and "),di=s("code"),Hp=o("span end logits"),Qp=d(),ws=s("p"),Vp=o("This model inherits from "),Ua=s("a"),Gp=o("PreTrainedModel"),Jp=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xp=d(),Ts=s("p"),Yp=o("This model is also a PyTorch "),ys=s("a"),Zp=o("torch.nn.Module"),eu=o(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),tu=d(),ft=s("div"),C(Cs.$$.fragment),ou=d(),lo=s("p"),nu=o("The "),Ka=s("a"),su=o("CamembertForQuestionAnswering"),au=o(" forward method, overrides the "),ci=s("code"),ru=o("__call__"),iu=o(" special method."),lu=d(),C(Jo.$$.fragment),du=d(),C(Xo.$$.fragment),cu=d(),C(Yo.$$.fragment),gl=d(),co=s("h2"),Zo=s("a"),mi=s("span"),C($s.$$.fragment),mu=d(),hi=s("span"),hu=o("TFCamembertModel"),_l=d(),Ye=s("div"),C(Es.$$.fragment),pu=d(),pi=s("p"),uu=o("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),fu=d(),Fs=s("p"),gu=o("This model inherits from "),Ha=s("a"),_u=o("TFPreTrainedModel"),bu=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ku=d(),Ms=s("p"),vu=o("This model is also a "),zs=s("a"),wu=o("tf.keras.Model"),Tu=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),yu=d(),C(en.$$.fragment),Cu=d(),qs=s("p"),$u=o("This class overrides "),Qa=s("a"),Eu=o("TFRobertaModel"),Fu=o(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),bl=d(),mo=s("h2"),tn=s("a"),ui=s("span"),C(Ps.$$.fragment),Mu=d(),fi=s("span"),zu=o("TFCamembertForCasualLM"),kl=d(),Ze=s("div"),C(xs.$$.fragment),qu=d(),Ls=s("p"),Pu=o("CamemBERT Model with a "),gi=s("code"),xu=o("language modeling"),Lu=o(" head on top for CLM fine-tuning."),ju=d(),js=s("p"),Ou=o("This model inherits from "),Va=s("a"),Au=o("TFPreTrainedModel"),Du=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Iu=d(),Os=s("p"),Nu=o("This model is also a "),As=s("a"),Su=o("tf.keras.Model"),Ru=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Bu=d(),C(on.$$.fragment),Wu=d(),Ds=s("p"),Uu=o("This class overrides "),Ga=s("a"),Ku=o("TFRobertaForCausalLM"),Hu=o(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),vl=d(),ho=s("h2"),nn=s("a"),_i=s("span"),C(Is.$$.fragment),Qu=d(),bi=s("span"),Vu=o("TFCamembertForMaskedLM"),wl=d(),et=s("div"),C(Ns.$$.fragment),Gu=d(),Ss=s("p"),Ju=o("CamemBERT Model with a "),ki=s("code"),Xu=o("language modeling"),Yu=o(" head on top."),Zu=d(),Rs=s("p"),ef=o("This model inherits from "),Ja=s("a"),tf=o("TFPreTrainedModel"),of=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),nf=d(),Bs=s("p"),sf=o("This model is also a "),Ws=s("a"),af=o("tf.keras.Model"),rf=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),lf=d(),C(sn.$$.fragment),df=d(),Us=s("p"),cf=o("This class overrides "),Xa=s("a"),mf=o("TFRobertaForMaskedLM"),hf=o(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Tl=d(),po=s("h2"),an=s("a"),vi=s("span"),C(Ks.$$.fragment),pf=d(),wi=s("span"),uf=o("TFCamembertForSequenceClassification"),yl=d(),tt=s("div"),C(Hs.$$.fragment),ff=d(),Ti=s("p"),gf=o(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),_f=d(),Qs=s("p"),bf=o("This model inherits from "),Ya=s("a"),kf=o("TFPreTrainedModel"),vf=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),wf=d(),Vs=s("p"),Tf=o("This model is also a "),Gs=s("a"),yf=o("tf.keras.Model"),Cf=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),$f=d(),C(rn.$$.fragment),Ef=d(),Js=s("p"),Ff=o("This class overrides "),Za=s("a"),Mf=o("TFRobertaForSequenceClassification"),zf=o(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Cl=d(),uo=s("h2"),ln=s("a"),yi=s("span"),C(Xs.$$.fragment),qf=d(),Ci=s("span"),Pf=o("TFCamembertForMultipleChoice"),$l=d(),ot=s("div"),C(Ys.$$.fragment),xf=d(),$i=s("p"),Lf=o(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),jf=d(),Zs=s("p"),Of=o("This model inherits from "),er=s("a"),Af=o("TFPreTrainedModel"),Df=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),If=d(),ea=s("p"),Nf=o("This model is also a "),ta=s("a"),Sf=o("tf.keras.Model"),Rf=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Bf=d(),C(dn.$$.fragment),Wf=d(),oa=s("p"),Uf=o("This class overrides "),tr=s("a"),Kf=o("TFRobertaForMultipleChoice"),Hf=o(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),El=d(),fo=s("h2"),cn=s("a"),Ei=s("span"),C(na.$$.fragment),Qf=d(),Fi=s("span"),Vf=o("TFCamembertForTokenClassification"),Fl=d(),nt=s("div"),C(sa.$$.fragment),Gf=d(),Mi=s("p"),Jf=o(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Xf=d(),aa=s("p"),Yf=o("This model inherits from "),or=s("a"),Zf=o("TFPreTrainedModel"),eg=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),tg=d(),ra=s("p"),og=o("This model is also a "),ia=s("a"),ng=o("tf.keras.Model"),sg=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),ag=d(),C(mn.$$.fragment),rg=d(),la=s("p"),ig=o("This class overrides "),nr=s("a"),lg=o("TFRobertaForTokenClassification"),dg=o(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ml=d(),go=s("h2"),hn=s("a"),zi=s("span"),C(da.$$.fragment),cg=d(),qi=s("span"),mg=o("TFCamembertForQuestionAnswering"),zl=d(),st=s("div"),C(ca.$$.fragment),hg=d(),_o=s("p"),pg=o(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Pi=s("code"),ug=o("span start logits"),fg=o(" and "),xi=s("code"),gg=o("span end logits"),_g=o(")."),bg=d(),ma=s("p"),kg=o("This model inherits from "),sr=s("a"),vg=o("TFPreTrainedModel"),wg=o(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Tg=d(),ha=s("p"),yg=o("This model is also a "),pa=s("a"),Cg=o("tf.keras.Model"),$g=o(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Eg=d(),C(pn.$$.fragment),Fg=d(),ua=s("p"),Mg=o("This class overrides "),ar=s("a"),zg=o("TFRobertaForQuestionAnswering"),qg=o(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),this.h()},l(i){const _=bk('[data-svelte="svelte-1phssyn"]',document.head);l=a(_,"META",{name:!0,content:!0}),_.forEach(t),v=c(i),u=a(i,"H1",{class:!0});var fa=r(u);b=a(fa,"A",{id:!0,class:!0,href:!0});var Li=r(b);T=a(Li,"SPAN",{});var ji=r(T);$(h.$$.fragment,ji),ji.forEach(t),Li.forEach(t),f=c(fa),x=a(fa,"SPAN",{});var Oi=r(x);ve=n(Oi,"CamemBERT"),Oi.forEach(t),fa.forEach(t),he=c(i),N=a(i,"H2",{class:!0});var ga=r(N);ae=a(ga,"A",{id:!0,class:!0,href:!0});var Ai=r(ae);ee=a(Ai,"SPAN",{});var Di=r(ee);$(k.$$.fragment,Di),Di.forEach(t),Ai.forEach(t),we=c(ga),Q=a(ga,"SPAN",{});var Ii=r(Q);Te=n(Ii,"Overview"),Ii.forEach(t),ga.forEach(t),pe=c(i),R=a(i,"P",{});var _a=r(R);ye=n(_a,"The CamemBERT model was proposed in "),ie=a(_a,"A",{href:!0,rel:!0});var Ni=r(ie);V=n(Ni,"CamemBERT: a Tasty French Language Model"),Ni.forEach(t),Ce=n(_a,` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),_a.forEach(t),ue=c(i),W=a(i,"P",{});var Si=r(W);$e=n(Si,"The abstract from the paper is the following:"),Si.forEach(t),fe=c(i),U=a(i,"P",{});var Ri=r(U);me=a(Ri,"EM",{});var Bi=r(me);Ee=n(Bi,`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),Bi.forEach(t),Ri.forEach(t),ne=c(i),q=a(i,"P",{});var Wi=r(q);j=n(Wi,"Tips:"),Wi.forEach(t),ge=c(i),K=a(i,"UL",{});var Ui=r(K);le=a(Ui,"LI",{});var ba=r(le);Fe=n(ba,"This implementation is the same as RoBERTa. Refer to the "),H=a(ba,"A",{href:!0});var Ki=r(H);Me=n(Ki,"documentation of RoBERTa"),Ki.forEach(t),ze=n(ba,` for usage examples
as well as the information relative to the inputs and outputs.`),ba.forEach(t),Ui.forEach(t),L=c(i),se=a(i,"P",{});var bo=r(se);G=n(bo,"This model was contributed by "),de=a(bo,"A",{href:!0,rel:!0});var Hi=r(de);qe=n(Hi,"camembert"),Hi.forEach(t),J=n(bo,". The original code can be found "),ce=a(bo,"A",{href:!0,rel:!0});var Qi=r(ce);Pe=n(Qi,"here"),Qi.forEach(t),I=n(bo,"."),bo.forEach(t),_e=c(i),S=a(i,"H2",{class:!0});var ka=r(S);re=a(ka,"A",{id:!0,class:!0,href:!0});var Vi=r(re);te=a(Vi,"SPAN",{});var Gi=r(te);$(P.$$.fragment,Gi),Gi.forEach(t),Vi.forEach(t),xe=c(ka),O=a(ka,"SPAN",{});var Ji=r(O);Le=n(Ji,"CamembertConfig"),Ji.forEach(t),ka.forEach(t),be=c(i),m=a(i,"DIV",{class:!0});var va=r(m);$(w.$$.fragment,va),Re=c(va),Y=a(va,"P",{});var ko=r(Y);Be=n(ko,"This class overrides "),De=a(ko,"A",{href:!0});var Xi=r(De);y=n(Xi,"RobertaConfig"),Xi.forEach(t),We=n(ko,`. Please check the superclass for the appropriate documentation alongside
usage examples. Instantiating a configuration with the defaults will yield a similar configuration to that of the
Camembert `),Oe=a(ko,"A",{href:!0,rel:!0});var Og=r(Oe);Ue=n(Og,"camembert-base"),Og.forEach(t),Ke=n(ko," architecture."),ko.forEach(t),va.forEach(t),Se=c(i),A=a(i,"H2",{class:!0});var Pl=r(A);B=a(Pl,"A",{id:!0,class:!0,href:!0});var Ag=r(B);Ie=a(Ag,"SPAN",{});var Dg=r(Ie);$(Ae.$$.fragment,Dg),Dg.forEach(t),Ag.forEach(t),X=c(Pl),Ne=a(Pl,"SPAN",{});var Ig=r(Ne);He=n(Ig,"CamembertTokenizer"),Ig.forEach(t),Pl.forEach(t),ke=c(i),oe=a(i,"DIV",{class:!0});var gt=r(oe);$(Z.$$.fragment,gt),Qe=c(gt),jt=a(gt,"P",{});var un=r(jt);Rd=n(un,"Adapted from "),wa=a(un,"A",{href:!0});var Ng=r(wa);Bd=n(Ng,"RobertaTokenizer"),Ng.forEach(t),Wd=n(un," and "),Ta=a(un,"A",{href:!0});var Sg=r(Ta);Ud=n(Sg,"XLNetTokenizer"),Sg.forEach(t),Kd=n(un,`. Construct a CamemBERT tokenizer. Based on
`),bn=a(un,"A",{href:!0,rel:!0});var Rg=r(bn);Hd=n(Rg,"SentencePiece"),Rg.forEach(t),Qd=n(un,"."),un.forEach(t),Vd=c(gt),kn=a(gt,"P",{});var xl=r(kn);Gd=n(xl,"This tokenizer inherits from "),ya=a(xl,"A",{href:!0});var Bg=r(ya);Jd=n(Bg,"PreTrainedTokenizer"),Bg.forEach(t),Xd=n(xl,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),xl.forEach(t),Yd=c(gt),Ot=a(gt,"DIV",{class:!0});var rr=r(Ot);$(vn.$$.fragment,rr),Zd=c(rr),gr=a(rr,"P",{});var Wg=r(gr);ec=n(Wg,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Wg.forEach(t),tc=c(rr),wn=a(rr,"UL",{});var Ll=r(wn);Ca=a(Ll,"LI",{});var Pg=r(Ca);oc=n(Pg,"single sequence: "),_r=a(Pg,"CODE",{});var Ug=r(_r);nc=n(Ug,"<s> X </s>"),Ug.forEach(t),Pg.forEach(t),sc=c(Ll),$a=a(Ll,"LI",{});var xg=r($a);ac=n(xg,"pair of sequences: "),br=a(xg,"CODE",{});var Kg=r(br);rc=n(Kg,"<s> A </s></s> B </s>"),Kg.forEach(t),xg.forEach(t),Ll.forEach(t),rr.forEach(t),ic=c(gt),vo=a(gt,"DIV",{class:!0});var jl=r(vo);$(Tn.$$.fragment,jl),lc=c(jl),yn=a(jl,"P",{});var Ol=r(yn);dc=n(Ol,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),kr=a(Ol,"CODE",{});var Hg=r(kr);cc=n(Hg,"prepare_for_model"),Hg.forEach(t),mc=n(Ol," method."),Ol.forEach(t),jl.forEach(t),hc=c(gt),wo=a(gt,"DIV",{class:!0});var Al=r(wo);$(Cn.$$.fragment,Al),pc=c(Al),vr=a(Al,"P",{});var Qg=r(vr);uc=n(Qg,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Qg.forEach(t),Al.forEach(t),fc=c(gt),Ea=a(gt,"DIV",{class:!0});var Vg=r(Ea);$($n.$$.fragment,Vg),Vg.forEach(t),gt.forEach(t),el=c(i),Vt=a(i,"H2",{class:!0});var Dl=r(Vt);To=a(Dl,"A",{id:!0,class:!0,href:!0});var Gg=r(To);wr=a(Gg,"SPAN",{});var Jg=r(wr);$(En.$$.fragment,Jg),Jg.forEach(t),Gg.forEach(t),gc=c(Dl),Tr=a(Dl,"SPAN",{});var Xg=r(Tr);_c=n(Xg,"CamembertTokenizerFast"),Xg.forEach(t),Dl.forEach(t),tl=c(i),rt=a(i,"DIV",{class:!0});var Dt=r(rt);$(Fn.$$.fragment,Dt),bc=c(Dt),vt=a(Dt,"P",{});var It=r(vt);kc=n(It,"Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),yr=a(It,"EM",{});var Yg=r(yr);vc=n(Yg,"tokenizers"),Yg.forEach(t),wc=n(It,` library). Adapted from
`),Fa=a(It,"A",{href:!0});var Zg=r(Fa);Tc=n(Zg,"RobertaTokenizer"),Zg.forEach(t),yc=n(It," and "),Ma=a(It,"A",{href:!0});var e_=r(Ma);Cc=n(e_,"XLNetTokenizer"),e_.forEach(t),$c=n(It,`. Based on
`),Mn=a(It,"A",{href:!0,rel:!0});var t_=r(Mn);Ec=n(t_,"BPE"),t_.forEach(t),Fc=n(It,"."),It.forEach(t),Mc=c(Dt),zn=a(Dt,"P",{});var Il=r(zn);zc=n(Il,"This tokenizer inherits from "),za=a(Il,"A",{href:!0});var o_=r(za);qc=n(o_,"PreTrainedTokenizerFast"),o_.forEach(t),Pc=n(Il,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Il.forEach(t),xc=c(Dt),At=a(Dt,"DIV",{class:!0});var ir=r(At);$(qn.$$.fragment,ir),Lc=c(ir),Cr=a(ir,"P",{});var n_=r(Cr);jc=n(n_,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),n_.forEach(t),Oc=c(ir),Pn=a(ir,"UL",{});var Nl=r(Pn);qa=a(Nl,"LI",{});var Lg=r(qa);Ac=n(Lg,"single sequence: "),$r=a(Lg,"CODE",{});var s_=r($r);Dc=n(s_,"<s> X </s>"),s_.forEach(t),Lg.forEach(t),Ic=c(Nl),Pa=a(Nl,"LI",{});var jg=r(Pa);Nc=n(jg,"pair of sequences: "),Er=a(jg,"CODE",{});var a_=r(Er);Sc=n(a_,"<s> A </s></s> B </s>"),a_.forEach(t),jg.forEach(t),Nl.forEach(t),ir.forEach(t),Rc=c(Dt),yo=a(Dt,"DIV",{class:!0});var Sl=r(yo);$(xn.$$.fragment,Sl),Bc=c(Sl),Fr=a(Sl,"P",{});var r_=r(Fr);Wc=n(r_,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),r_.forEach(t),Sl.forEach(t),Dt.forEach(t),ol=c(i),Gt=a(i,"H2",{class:!0});var Rl=r(Gt);Co=a(Rl,"A",{id:!0,class:!0,href:!0});var i_=r(Co);Mr=a(i_,"SPAN",{});var l_=r(Mr);$(Ln.$$.fragment,l_),l_.forEach(t),i_.forEach(t),Uc=c(Rl),zr=a(Rl,"SPAN",{});var d_=r(zr);Kc=n(d_,"CamembertModel"),d_.forEach(t),Rl.forEach(t),nl=c(i),Ve=a(i,"DIV",{class:!0});var at=r(Ve);$(jn.$$.fragment,at),Hc=c(at),qr=a(at,"P",{});var c_=r(qr);Qc=n(c_,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),c_.forEach(t),Vc=c(at),On=a(at,"P",{});var Bl=r(On);Gc=n(Bl,"This model inherits from "),xa=a(Bl,"A",{href:!0});var m_=r(xa);Jc=n(m_,"PreTrainedModel"),m_.forEach(t),Xc=n(Bl,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Bl.forEach(t),Yc=c(at),An=a(at,"P",{});var Wl=r(An);Zc=n(Wl,"This model is also a PyTorch "),Dn=a(Wl,"A",{href:!0,rel:!0});var h_=r(Dn);em=n(h_,"torch.nn.Module"),h_.forEach(t),tm=n(Wl,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Wl.forEach(t),om=c(at),In=a(at,"P",{});var Ul=r(In);nm=n(Ul,`The model can behave as an encoder (with only self-attention) as well as a decoder, in which case a layer of
cross-attention is added between the self-attention layers, following the architecture described in `),Pr=a(Ul,"EM",{});var p_=r(Pr);sm=n(p_,`Attention is
all you need`),p_.forEach(t),am=n(Ul,`_ by Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz
Kaiser and Illia Polosukhin.`),Ul.forEach(t),rm=c(at),Xe=a(at,"P",{});var _t=r(Xe);im=n(_t,"To behave as a decoder the model needs to be initialized with the "),xr=a(_t,"CODE",{});var u_=r(xr);lm=n(u_,"is_decoder"),u_.forEach(t),dm=n(_t,` argument of the configuration set to
`),Lr=a(_t,"CODE",{});var f_=r(Lr);cm=n(f_,"True"),f_.forEach(t),mm=n(_t,". To be used in a Seq2Seq model, the model needs to initialized with both "),jr=a(_t,"CODE",{});var g_=r(jr);hm=n(g_,"is_decoder"),g_.forEach(t),pm=n(_t,` argument and
`),Or=a(_t,"CODE",{});var __=r(Or);um=n(__,"add_cross_attention"),__.forEach(t),fm=n(_t," set to "),Ar=a(_t,"CODE",{});var b_=r(Ar);gm=n(b_,"True"),b_.forEach(t),_m=n(_t,"; an "),Dr=a(_t,"CODE",{});var k_=r(Dr);bm=n(k_,"encoder_hidden_states"),k_.forEach(t),km=n(_t," is then expected as an input to the forward pass."),_t.forEach(t),vm=c(at),$o=a(at,"P",{});var Yi=r($o);wm=n(Yi,".. _"),Ir=a(Yi,"EM",{});var v_=r(Ir);Tm=n(v_,"Attention is all you need"),v_.forEach(t),ym=n(Yi,": "),Nn=a(Yi,"A",{href:!0,rel:!0});var w_=r(Nn);Cm=n(w_,"https://arxiv.org/abs/1706.03762"),w_.forEach(t),Yi.forEach(t),$m=c(at),Ct=a(at,"DIV",{class:!0});var fn=r(Ct);$(Sn.$$.fragment,fn),Em=c(fn),Jt=a(fn,"P",{});var lr=r(Jt);Fm=n(lr,"The "),La=a(lr,"A",{href:!0});var T_=r(La);Mm=n(T_,"CamembertModel"),T_.forEach(t),zm=n(lr," forward method, overrides the "),Nr=a(lr,"CODE",{});var y_=r(Nr);qm=n(y_,"__call__"),y_.forEach(t),Pm=n(lr," special method."),lr.forEach(t),xm=c(fn),$(Eo.$$.fragment,fn),Lm=c(fn),$(Fo.$$.fragment,fn),fn.forEach(t),at.forEach(t),sl=c(i),Xt=a(i,"H2",{class:!0});var Kl=r(Xt);Mo=a(Kl,"A",{id:!0,class:!0,href:!0});var C_=r(Mo);Sr=a(C_,"SPAN",{});var $_=r(Sr);$(Rn.$$.fragment,$_),$_.forEach(t),C_.forEach(t),jm=c(Kl),Rr=a(Kl,"SPAN",{});var E_=r(Rr);Om=n(E_,"CamembertForCausalLM"),E_.forEach(t),Kl.forEach(t),al=c(i),it=a(i,"DIV",{class:!0});var Nt=r(it);$(Bn.$$.fragment,Nt),Am=c(Nt),Wn=a(Nt,"P",{});var Hl=r(Wn);Dm=n(Hl,"CamemBERT Model with a "),Br=a(Hl,"CODE",{});var F_=r(Br);Im=n(F_,"language modeling"),F_.forEach(t),Nm=n(Hl," head on top for CLM fine-tuning."),Hl.forEach(t),Sm=c(Nt),Un=a(Nt,"P",{});var Ql=r(Un);Rm=n(Ql,"This model inherits from "),ja=a(Ql,"A",{href:!0});var M_=r(ja);Bm=n(M_,"PreTrainedModel"),M_.forEach(t),Wm=n(Ql,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ql.forEach(t),Um=c(Nt),Kn=a(Nt,"P",{});var Vl=r(Kn);Km=n(Vl,"This model is also a PyTorch "),Hn=a(Vl,"A",{href:!0,rel:!0});var z_=r(Hn);Hm=n(z_,"torch.nn.Module"),z_.forEach(t),Qm=n(Vl,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Vl.forEach(t),Vm=c(Nt),$t=a(Nt,"DIV",{class:!0});var gn=r($t);$(Qn.$$.fragment,gn),Gm=c(gn),Yt=a(gn,"P",{});var dr=r(Yt);Jm=n(dr,"The "),Oa=a(dr,"A",{href:!0});var q_=r(Oa);Xm=n(q_,"CamembertForCausalLM"),q_.forEach(t),Ym=n(dr," forward method, overrides the "),Wr=a(dr,"CODE",{});var P_=r(Wr);Zm=n(P_,"__call__"),P_.forEach(t),eh=n(dr," special method."),dr.forEach(t),th=c(gn),$(zo.$$.fragment,gn),oh=c(gn),$(qo.$$.fragment,gn),gn.forEach(t),Nt.forEach(t),rl=c(i),Zt=a(i,"H2",{class:!0});var Gl=r(Zt);Po=a(Gl,"A",{id:!0,class:!0,href:!0});var x_=r(Po);Ur=a(x_,"SPAN",{});var L_=r(Ur);$(Vn.$$.fragment,L_),L_.forEach(t),x_.forEach(t),nh=c(Gl),Kr=a(Gl,"SPAN",{});var j_=r(Kr);sh=n(j_,"CamembertForMaskedLM"),j_.forEach(t),Gl.forEach(t),il=c(i),lt=a(i,"DIV",{class:!0});var St=r(lt);$(Gn.$$.fragment,St),ah=c(St),Jn=a(St,"P",{});var Jl=r(Jn);rh=n(Jl,"CamemBERT Model with a "),Hr=a(Jl,"CODE",{});var O_=r(Hr);ih=n(O_,"language modeling"),O_.forEach(t),lh=n(Jl," head on top."),Jl.forEach(t),dh=c(St),Xn=a(St,"P",{});var Xl=r(Xn);ch=n(Xl,"This model inherits from "),Aa=a(Xl,"A",{href:!0});var A_=r(Aa);mh=n(A_,"PreTrainedModel"),A_.forEach(t),hh=n(Xl,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xl.forEach(t),ph=c(St),Yn=a(St,"P",{});var Yl=r(Yn);uh=n(Yl,"This model is also a PyTorch "),Zn=a(Yl,"A",{href:!0,rel:!0});var D_=r(Zn);fh=n(D_,"torch.nn.Module"),D_.forEach(t),gh=n(Yl,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Yl.forEach(t),_h=c(St),pt=a(St,"DIV",{class:!0});var Rt=r(pt);$(es.$$.fragment,Rt),bh=c(Rt),eo=a(Rt,"P",{});var cr=r(eo);kh=n(cr,"The "),Da=a(cr,"A",{href:!0});var I_=r(Da);vh=n(I_,"CamembertForMaskedLM"),I_.forEach(t),wh=n(cr," forward method, overrides the "),Qr=a(cr,"CODE",{});var N_=r(Qr);Th=n(N_,"__call__"),N_.forEach(t),yh=n(cr," special method."),cr.forEach(t),Ch=c(Rt),$(xo.$$.fragment,Rt),$h=c(Rt),$(Lo.$$.fragment,Rt),Eh=c(Rt),$(jo.$$.fragment,Rt),Rt.forEach(t),St.forEach(t),ll=c(i),to=a(i,"H2",{class:!0});var Zl=r(to);Oo=a(Zl,"A",{id:!0,class:!0,href:!0});var S_=r(Oo);Vr=a(S_,"SPAN",{});var R_=r(Vr);$(ts.$$.fragment,R_),R_.forEach(t),S_.forEach(t),Fh=c(Zl),Gr=a(Zl,"SPAN",{});var B_=r(Gr);Mh=n(B_,"CamembertForSequenceClassification"),B_.forEach(t),Zl.forEach(t),dl=c(i),dt=a(i,"DIV",{class:!0});var Bt=r(dt);$(os.$$.fragment,Bt),zh=c(Bt),Jr=a(Bt,"P",{});var W_=r(Jr);qh=n(W_,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),W_.forEach(t),Ph=c(Bt),ns=a(Bt,"P",{});var ed=r(ns);xh=n(ed,"This model inherits from "),Ia=a(ed,"A",{href:!0});var U_=r(Ia);Lh=n(U_,"PreTrainedModel"),U_.forEach(t),jh=n(ed,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ed.forEach(t),Oh=c(Bt),ss=a(Bt,"P",{});var td=r(ss);Ah=n(td,"This model is also a PyTorch "),as=a(td,"A",{href:!0,rel:!0});var K_=r(as);Dh=n(K_,"torch.nn.Module"),K_.forEach(t),Ih=n(td,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),td.forEach(t),Nh=c(Bt),Je=a(Bt,"DIV",{class:!0});var bt=r(Je);$(rs.$$.fragment,bt),Sh=c(bt),oo=a(bt,"P",{});var mr=r(oo);Rh=n(mr,"The "),Na=a(mr,"A",{href:!0});var H_=r(Na);Bh=n(H_,"CamembertForSequenceClassification"),H_.forEach(t),Wh=n(mr," forward method, overrides the "),Xr=a(mr,"CODE",{});var Q_=r(Xr);Uh=n(Q_,"__call__"),Q_.forEach(t),Kh=n(mr," special method."),mr.forEach(t),Hh=c(bt),$(Ao.$$.fragment,bt),Qh=c(bt),$(Do.$$.fragment,bt),Vh=c(bt),$(Io.$$.fragment,bt),Gh=c(bt),$(No.$$.fragment,bt),Jh=c(bt),$(So.$$.fragment,bt),bt.forEach(t),Bt.forEach(t),cl=c(i),no=a(i,"H2",{class:!0});var od=r(no);Ro=a(od,"A",{id:!0,class:!0,href:!0});var V_=r(Ro);Yr=a(V_,"SPAN",{});var G_=r(Yr);$(is.$$.fragment,G_),G_.forEach(t),V_.forEach(t),Xh=c(od),Zr=a(od,"SPAN",{});var J_=r(Zr);Yh=n(J_,"CamembertForMultipleChoice"),J_.forEach(t),od.forEach(t),ml=c(i),ct=a(i,"DIV",{class:!0});var Wt=r(ct);$(ls.$$.fragment,Wt),Zh=c(Wt),ei=a(Wt,"P",{});var X_=r(ei);ep=n(X_,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),X_.forEach(t),tp=c(Wt),ds=a(Wt,"P",{});var nd=r(ds);op=n(nd,"This model inherits from "),Sa=a(nd,"A",{href:!0});var Y_=r(Sa);np=n(Y_,"PreTrainedModel"),Y_.forEach(t),sp=n(nd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),nd.forEach(t),ap=c(Wt),cs=a(Wt,"P",{});var sd=r(cs);rp=n(sd,"This model is also a PyTorch "),ms=a(sd,"A",{href:!0,rel:!0});var Z_=r(ms);ip=n(Z_,"torch.nn.Module"),Z_.forEach(t),lp=n(sd,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),sd.forEach(t),dp=c(Wt),Et=a(Wt,"DIV",{class:!0});var _n=r(Et);$(hs.$$.fragment,_n),cp=c(_n),so=a(_n,"P",{});var hr=r(so);mp=n(hr,"The "),Ra=a(hr,"A",{href:!0});var eb=r(Ra);hp=n(eb,"CamembertForMultipleChoice"),eb.forEach(t),pp=n(hr," forward method, overrides the "),ti=a(hr,"CODE",{});var tb=r(ti);up=n(tb,"__call__"),tb.forEach(t),fp=n(hr," special method."),hr.forEach(t),gp=c(_n),$(Bo.$$.fragment,_n),_p=c(_n),$(Wo.$$.fragment,_n),_n.forEach(t),Wt.forEach(t),hl=c(i),ao=a(i,"H2",{class:!0});var ad=r(ao);Uo=a(ad,"A",{id:!0,class:!0,href:!0});var ob=r(Uo);oi=a(ob,"SPAN",{});var nb=r(oi);$(ps.$$.fragment,nb),nb.forEach(t),ob.forEach(t),bp=c(ad),ni=a(ad,"SPAN",{});var sb=r(ni);kp=n(sb,"CamembertForTokenClassification"),sb.forEach(t),ad.forEach(t),pl=c(i),mt=a(i,"DIV",{class:!0});var Ut=r(mt);$(us.$$.fragment,Ut),vp=c(Ut),si=a(Ut,"P",{});var ab=r(si);wp=n(ab,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ab.forEach(t),Tp=c(Ut),fs=a(Ut,"P",{});var rd=r(fs);yp=n(rd,"This model inherits from "),Ba=a(rd,"A",{href:!0});var rb=r(Ba);Cp=n(rb,"PreTrainedModel"),rb.forEach(t),$p=n(rd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),rd.forEach(t),Ep=c(Ut),gs=a(Ut,"P",{});var id=r(gs);Fp=n(id,"This model is also a PyTorch "),_s=a(id,"A",{href:!0,rel:!0});var ib=r(_s);Mp=n(ib,"torch.nn.Module"),ib.forEach(t),zp=n(id,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),id.forEach(t),qp=c(Ut),ut=a(Ut,"DIV",{class:!0});var Kt=r(ut);$(bs.$$.fragment,Kt),Pp=c(Kt),ro=a(Kt,"P",{});var pr=r(ro);xp=n(pr,"The "),Wa=a(pr,"A",{href:!0});var lb=r(Wa);Lp=n(lb,"CamembertForTokenClassification"),lb.forEach(t),jp=n(pr," forward method, overrides the "),ai=a(pr,"CODE",{});var db=r(ai);Op=n(db,"__call__"),db.forEach(t),Ap=n(pr," special method."),pr.forEach(t),Dp=c(Kt),$(Ko.$$.fragment,Kt),Ip=c(Kt),$(Ho.$$.fragment,Kt),Np=c(Kt),$(Qo.$$.fragment,Kt),Kt.forEach(t),Ut.forEach(t),ul=c(i),io=a(i,"H2",{class:!0});var ld=r(io);Vo=a(ld,"A",{id:!0,class:!0,href:!0});var cb=r(Vo);ri=a(cb,"SPAN",{});var mb=r(ri);$(ks.$$.fragment,mb),mb.forEach(t),cb.forEach(t),Sp=c(ld),ii=a(ld,"SPAN",{});var hb=r(ii);Rp=n(hb,"CamembertForQuestionAnswering"),hb.forEach(t),ld.forEach(t),fl=c(i),ht=a(i,"DIV",{class:!0});var Ht=r(ht);$(vs.$$.fragment,Ht),Bp=c(Ht),Go=a(Ht,"P",{});var Zi=r(Go);Wp=n(Zi,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),li=a(Zi,"CODE",{});var pb=r(li);Up=n(pb,"span start logits"),pb.forEach(t),Kp=n(Zi," and "),di=a(Zi,"CODE",{});var ub=r(di);Hp=n(ub,"span end logits"),ub.forEach(t),Zi.forEach(t),Qp=c(Ht),ws=a(Ht,"P",{});var dd=r(ws);Vp=n(dd,"This model inherits from "),Ua=a(dd,"A",{href:!0});var fb=r(Ua);Gp=n(fb,"PreTrainedModel"),fb.forEach(t),Jp=n(dd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),dd.forEach(t),Xp=c(Ht),Ts=a(Ht,"P",{});var cd=r(Ts);Yp=n(cd,"This model is also a PyTorch "),ys=a(cd,"A",{href:!0,rel:!0});var gb=r(ys);Zp=n(gb,"torch.nn.Module"),gb.forEach(t),eu=n(cd,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),cd.forEach(t),tu=c(Ht),ft=a(Ht,"DIV",{class:!0});var Qt=r(ft);$(Cs.$$.fragment,Qt),ou=c(Qt),lo=a(Qt,"P",{});var ur=r(lo);nu=n(ur,"The "),Ka=a(ur,"A",{href:!0});var _b=r(Ka);su=n(_b,"CamembertForQuestionAnswering"),_b.forEach(t),au=n(ur," forward method, overrides the "),ci=a(ur,"CODE",{});var bb=r(ci);ru=n(bb,"__call__"),bb.forEach(t),iu=n(ur," special method."),ur.forEach(t),lu=c(Qt),$(Jo.$$.fragment,Qt),du=c(Qt),$(Xo.$$.fragment,Qt),cu=c(Qt),$(Yo.$$.fragment,Qt),Qt.forEach(t),Ht.forEach(t),gl=c(i),co=a(i,"H2",{class:!0});var md=r(co);Zo=a(md,"A",{id:!0,class:!0,href:!0});var kb=r(Zo);mi=a(kb,"SPAN",{});var vb=r(mi);$($s.$$.fragment,vb),vb.forEach(t),kb.forEach(t),mu=c(md),hi=a(md,"SPAN",{});var wb=r(hi);hu=n(wb,"TFCamembertModel"),wb.forEach(t),md.forEach(t),_l=c(i),Ye=a(i,"DIV",{class:!0});var Ft=r(Ye);$(Es.$$.fragment,Ft),pu=c(Ft),pi=a(Ft,"P",{});var Tb=r(pi);uu=n(Tb,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Tb.forEach(t),fu=c(Ft),Fs=a(Ft,"P",{});var hd=r(Fs);gu=n(hd,"This model inherits from "),Ha=a(hd,"A",{href:!0});var yb=r(Ha);_u=n(yb,"TFPreTrainedModel"),yb.forEach(t),bu=n(hd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),hd.forEach(t),ku=c(Ft),Ms=a(Ft,"P",{});var pd=r(Ms);vu=n(pd,"This model is also a "),zs=a(pd,"A",{href:!0,rel:!0});var Cb=r(zs);wu=n(Cb,"tf.keras.Model"),Cb.forEach(t),Tu=n(pd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),pd.forEach(t),yu=c(Ft),$(en.$$.fragment,Ft),Cu=c(Ft),qs=a(Ft,"P",{});var ud=r(qs);$u=n(ud,"This class overrides "),Qa=a(ud,"A",{href:!0});var $b=r(Qa);Eu=n($b,"TFRobertaModel"),$b.forEach(t),Fu=n(ud,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ud.forEach(t),Ft.forEach(t),bl=c(i),mo=a(i,"H2",{class:!0});var fd=r(mo);tn=a(fd,"A",{id:!0,class:!0,href:!0});var Eb=r(tn);ui=a(Eb,"SPAN",{});var Fb=r(ui);$(Ps.$$.fragment,Fb),Fb.forEach(t),Eb.forEach(t),Mu=c(fd),fi=a(fd,"SPAN",{});var Mb=r(fi);zu=n(Mb,"TFCamembertForCasualLM"),Mb.forEach(t),fd.forEach(t),kl=c(i),Ze=a(i,"DIV",{class:!0});var Mt=r(Ze);$(xs.$$.fragment,Mt),qu=c(Mt),Ls=a(Mt,"P",{});var gd=r(Ls);Pu=n(gd,"CamemBERT Model with a "),gi=a(gd,"CODE",{});var zb=r(gi);xu=n(zb,"language modeling"),zb.forEach(t),Lu=n(gd," head on top for CLM fine-tuning."),gd.forEach(t),ju=c(Mt),js=a(Mt,"P",{});var _d=r(js);Ou=n(_d,"This model inherits from "),Va=a(_d,"A",{href:!0});var qb=r(Va);Au=n(qb,"TFPreTrainedModel"),qb.forEach(t),Du=n(_d,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),_d.forEach(t),Iu=c(Mt),Os=a(Mt,"P",{});var bd=r(Os);Nu=n(bd,"This model is also a "),As=a(bd,"A",{href:!0,rel:!0});var Pb=r(As);Su=n(Pb,"tf.keras.Model"),Pb.forEach(t),Ru=n(bd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),bd.forEach(t),Bu=c(Mt),$(on.$$.fragment,Mt),Wu=c(Mt),Ds=a(Mt,"P",{});var kd=r(Ds);Uu=n(kd,"This class overrides "),Ga=a(kd,"A",{href:!0});var xb=r(Ga);Ku=n(xb,"TFRobertaForCausalLM"),xb.forEach(t),Hu=n(kd,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),kd.forEach(t),Mt.forEach(t),vl=c(i),ho=a(i,"H2",{class:!0});var vd=r(ho);nn=a(vd,"A",{id:!0,class:!0,href:!0});var Lb=r(nn);_i=a(Lb,"SPAN",{});var jb=r(_i);$(Is.$$.fragment,jb),jb.forEach(t),Lb.forEach(t),Qu=c(vd),bi=a(vd,"SPAN",{});var Ob=r(bi);Vu=n(Ob,"TFCamembertForMaskedLM"),Ob.forEach(t),vd.forEach(t),wl=c(i),et=a(i,"DIV",{class:!0});var zt=r(et);$(Ns.$$.fragment,zt),Gu=c(zt),Ss=a(zt,"P",{});var wd=r(Ss);Ju=n(wd,"CamemBERT Model with a "),ki=a(wd,"CODE",{});var Ab=r(ki);Xu=n(Ab,"language modeling"),Ab.forEach(t),Yu=n(wd," head on top."),wd.forEach(t),Zu=c(zt),Rs=a(zt,"P",{});var Td=r(Rs);ef=n(Td,"This model inherits from "),Ja=a(Td,"A",{href:!0});var Db=r(Ja);tf=n(Db,"TFPreTrainedModel"),Db.forEach(t),of=n(Td,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Td.forEach(t),nf=c(zt),Bs=a(zt,"P",{});var yd=r(Bs);sf=n(yd,"This model is also a "),Ws=a(yd,"A",{href:!0,rel:!0});var Ib=r(Ws);af=n(Ib,"tf.keras.Model"),Ib.forEach(t),rf=n(yd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),yd.forEach(t),lf=c(zt),$(sn.$$.fragment,zt),df=c(zt),Us=a(zt,"P",{});var Cd=r(Us);cf=n(Cd,"This class overrides "),Xa=a(Cd,"A",{href:!0});var Nb=r(Xa);mf=n(Nb,"TFRobertaForMaskedLM"),Nb.forEach(t),hf=n(Cd,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Cd.forEach(t),zt.forEach(t),Tl=c(i),po=a(i,"H2",{class:!0});var $d=r(po);an=a($d,"A",{id:!0,class:!0,href:!0});var Sb=r(an);vi=a(Sb,"SPAN",{});var Rb=r(vi);$(Ks.$$.fragment,Rb),Rb.forEach(t),Sb.forEach(t),pf=c($d),wi=a($d,"SPAN",{});var Bb=r(wi);uf=n(Bb,"TFCamembertForSequenceClassification"),Bb.forEach(t),$d.forEach(t),yl=c(i),tt=a(i,"DIV",{class:!0});var qt=r(tt);$(Hs.$$.fragment,qt),ff=c(qt),Ti=a(qt,"P",{});var Wb=r(Ti);gf=n(Wb,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Wb.forEach(t),_f=c(qt),Qs=a(qt,"P",{});var Ed=r(Qs);bf=n(Ed,"This model inherits from "),Ya=a(Ed,"A",{href:!0});var Ub=r(Ya);kf=n(Ub,"TFPreTrainedModel"),Ub.forEach(t),vf=n(Ed,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ed.forEach(t),wf=c(qt),Vs=a(qt,"P",{});var Fd=r(Vs);Tf=n(Fd,"This model is also a "),Gs=a(Fd,"A",{href:!0,rel:!0});var Kb=r(Gs);yf=n(Kb,"tf.keras.Model"),Kb.forEach(t),Cf=n(Fd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Fd.forEach(t),$f=c(qt),$(rn.$$.fragment,qt),Ef=c(qt),Js=a(qt,"P",{});var Md=r(Js);Ff=n(Md,"This class overrides "),Za=a(Md,"A",{href:!0});var Hb=r(Za);Mf=n(Hb,"TFRobertaForSequenceClassification"),Hb.forEach(t),zf=n(Md,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Md.forEach(t),qt.forEach(t),Cl=c(i),uo=a(i,"H2",{class:!0});var zd=r(uo);ln=a(zd,"A",{id:!0,class:!0,href:!0});var Qb=r(ln);yi=a(Qb,"SPAN",{});var Vb=r(yi);$(Xs.$$.fragment,Vb),Vb.forEach(t),Qb.forEach(t),qf=c(zd),Ci=a(zd,"SPAN",{});var Gb=r(Ci);Pf=n(Gb,"TFCamembertForMultipleChoice"),Gb.forEach(t),zd.forEach(t),$l=c(i),ot=a(i,"DIV",{class:!0});var Pt=r(ot);$(Ys.$$.fragment,Pt),xf=c(Pt),$i=a(Pt,"P",{});var Jb=r($i);Lf=n(Jb,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),Jb.forEach(t),jf=c(Pt),Zs=a(Pt,"P",{});var qd=r(Zs);Of=n(qd,"This model inherits from "),er=a(qd,"A",{href:!0});var Xb=r(er);Af=n(Xb,"TFPreTrainedModel"),Xb.forEach(t),Df=n(qd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),qd.forEach(t),If=c(Pt),ea=a(Pt,"P",{});var Pd=r(ea);Nf=n(Pd,"This model is also a "),ta=a(Pd,"A",{href:!0,rel:!0});var Yb=r(ta);Sf=n(Yb,"tf.keras.Model"),Yb.forEach(t),Rf=n(Pd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Pd.forEach(t),Bf=c(Pt),$(dn.$$.fragment,Pt),Wf=c(Pt),oa=a(Pt,"P",{});var xd=r(oa);Uf=n(xd,"This class overrides "),tr=a(xd,"A",{href:!0});var Zb=r(tr);Kf=n(Zb,"TFRobertaForMultipleChoice"),Zb.forEach(t),Hf=n(xd,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),xd.forEach(t),Pt.forEach(t),El=c(i),fo=a(i,"H2",{class:!0});var Ld=r(fo);cn=a(Ld,"A",{id:!0,class:!0,href:!0});var ek=r(cn);Ei=a(ek,"SPAN",{});var tk=r(Ei);$(na.$$.fragment,tk),tk.forEach(t),ek.forEach(t),Qf=c(Ld),Fi=a(Ld,"SPAN",{});var ok=r(Fi);Vf=n(ok,"TFCamembertForTokenClassification"),ok.forEach(t),Ld.forEach(t),Fl=c(i),nt=a(i,"DIV",{class:!0});var xt=r(nt);$(sa.$$.fragment,xt),Gf=c(xt),Mi=a(xt,"P",{});var nk=r(Mi);Jf=n(nk,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),nk.forEach(t),Xf=c(xt),aa=a(xt,"P",{});var jd=r(aa);Yf=n(jd,"This model inherits from "),or=a(jd,"A",{href:!0});var sk=r(or);Zf=n(sk,"TFPreTrainedModel"),sk.forEach(t),eg=n(jd,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),jd.forEach(t),tg=c(xt),ra=a(xt,"P",{});var Od=r(ra);og=n(Od,"This model is also a "),ia=a(Od,"A",{href:!0,rel:!0});var ak=r(ia);ng=n(ak,"tf.keras.Model"),ak.forEach(t),sg=n(Od,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Od.forEach(t),ag=c(xt),$(mn.$$.fragment,xt),rg=c(xt),la=a(xt,"P",{});var Ad=r(la);ig=n(Ad,"This class overrides "),nr=a(Ad,"A",{href:!0});var rk=r(nr);lg=n(rk,"TFRobertaForTokenClassification"),rk.forEach(t),dg=n(Ad,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ad.forEach(t),xt.forEach(t),Ml=c(i),go=a(i,"H2",{class:!0});var Dd=r(go);hn=a(Dd,"A",{id:!0,class:!0,href:!0});var ik=r(hn);zi=a(ik,"SPAN",{});var lk=r(zi);$(da.$$.fragment,lk),lk.forEach(t),ik.forEach(t),cg=c(Dd),qi=a(Dd,"SPAN",{});var dk=r(qi);mg=n(dk,"TFCamembertForQuestionAnswering"),dk.forEach(t),Dd.forEach(t),zl=c(i),st=a(i,"DIV",{class:!0});var Lt=r(st);$(ca.$$.fragment,Lt),hg=c(Lt),_o=a(Lt,"P",{});var fr=r(_o);pg=n(fr,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),Pi=a(fr,"CODE",{});var ck=r(Pi);ug=n(ck,"span start logits"),ck.forEach(t),fg=n(fr," and "),xi=a(fr,"CODE",{});var mk=r(xi);gg=n(mk,"span end logits"),mk.forEach(t),_g=n(fr,")."),fr.forEach(t),bg=c(Lt),ma=a(Lt,"P",{});var Id=r(ma);kg=n(Id,"This model inherits from "),sr=a(Id,"A",{href:!0});var hk=r(sr);vg=n(hk,"TFPreTrainedModel"),hk.forEach(t),wg=n(Id,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Id.forEach(t),Tg=c(Lt),ha=a(Lt,"P",{});var Nd=r(ha);yg=n(Nd,"This model is also a "),pa=a(Nd,"A",{href:!0,rel:!0});var pk=r(pa);Cg=n(pk,"tf.keras.Model"),pk.forEach(t),$g=n(Nd,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Nd.forEach(t),Eg=c(Lt),$(pn.$$.fragment,Lt),Fg=c(Lt),ua=a(Lt,"P",{});var Sd=r(ua);Mg=n(Sd,"This class overrides "),ar=a(Sd,"A",{href:!0});var uk=r(ar);zg=n(uk,"TFRobertaForQuestionAnswering"),uk.forEach(t),qg=n(Sd,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Sd.forEach(t),Lt.forEach(t),this.h()},h(){p(l,"name","hf:doc:metadata"),p(l,"content",JSON.stringify(Vk)),p(b,"id","camembert"),p(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(b,"href","#camembert"),p(u,"class","relative group"),p(ae,"id","overview"),p(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ae,"href","#overview"),p(N,"class","relative group"),p(ie,"href","https://arxiv.org/abs/1911.03894"),p(ie,"rel","nofollow"),p(H,"href","roberta"),p(de,"href","https://huggingface.co/camembert"),p(de,"rel","nofollow"),p(ce,"href","https://camembert-model.fr/"),p(ce,"rel","nofollow"),p(re,"id","transformers.CamembertConfig"),p(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(re,"href","#transformers.CamembertConfig"),p(S,"class","relative group"),p(De,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),p(Oe,"href","https://huggingface.co/camembert-base"),p(Oe,"rel","nofollow"),p(m,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(B,"id","transformers.CamembertTokenizer"),p(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(B,"href","#transformers.CamembertTokenizer"),p(A,"class","relative group"),p(wa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),p(Ta,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),p(bn,"href","https://github.com/google/sentencepiece"),p(bn,"rel","nofollow"),p(ya,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),p(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(To,"id","transformers.CamembertTokenizerFast"),p(To,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(To,"href","#transformers.CamembertTokenizerFast"),p(Vt,"class","relative group"),p(Fa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),p(Ma,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),p(Mn,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),p(Mn,"rel","nofollow"),p(za,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),p(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Co,"id","transformers.CamembertModel"),p(Co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Co,"href","#transformers.CamembertModel"),p(Gt,"class","relative group"),p(xa,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(Dn,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(Dn,"rel","nofollow"),p(Nn,"href","https://arxiv.org/abs/1706.03762"),p(Nn,"rel","nofollow"),p(La,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),p(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Mo,"id","transformers.CamembertForCausalLM"),p(Mo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Mo,"href","#transformers.CamembertForCausalLM"),p(Xt,"class","relative group"),p(ja,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(Hn,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(Hn,"rel","nofollow"),p(Oa,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),p($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Po,"id","transformers.CamembertForMaskedLM"),p(Po,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Po,"href","#transformers.CamembertForMaskedLM"),p(Zt,"class","relative group"),p(Aa,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(Zn,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(Zn,"rel","nofollow"),p(Da,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),p(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Oo,"id","transformers.CamembertForSequenceClassification"),p(Oo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Oo,"href","#transformers.CamembertForSequenceClassification"),p(to,"class","relative group"),p(Ia,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(as,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(as,"rel","nofollow"),p(Na,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),p(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Ro,"id","transformers.CamembertForMultipleChoice"),p(Ro,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ro,"href","#transformers.CamembertForMultipleChoice"),p(no,"class","relative group"),p(Sa,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(ms,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(ms,"rel","nofollow"),p(Ra,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),p(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Uo,"id","transformers.CamembertForTokenClassification"),p(Uo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Uo,"href","#transformers.CamembertForTokenClassification"),p(ao,"class","relative group"),p(Ba,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(_s,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(_s,"rel","nofollow"),p(Wa,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),p(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Vo,"id","transformers.CamembertForQuestionAnswering"),p(Vo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Vo,"href","#transformers.CamembertForQuestionAnswering"),p(io,"class","relative group"),p(Ua,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),p(ys,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),p(ys,"rel","nofollow"),p(Ka,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),p(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(Zo,"id","transformers.TFCamembertModel"),p(Zo,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Zo,"href","#transformers.TFCamembertModel"),p(co,"class","relative group"),p(Ha,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(zs,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(zs,"rel","nofollow"),p(Qa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),p(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(tn,"id","transformers.TFCamembertForCausalLM"),p(tn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(tn,"href","#transformers.TFCamembertForCausalLM"),p(mo,"class","relative group"),p(Va,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(As,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(As,"rel","nofollow"),p(Ga,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),p(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(nn,"id","transformers.TFCamembertForMaskedLM"),p(nn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(nn,"href","#transformers.TFCamembertForMaskedLM"),p(ho,"class","relative group"),p(Ja,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(Ws,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(Ws,"rel","nofollow"),p(Xa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),p(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(an,"id","transformers.TFCamembertForSequenceClassification"),p(an,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(an,"href","#transformers.TFCamembertForSequenceClassification"),p(po,"class","relative group"),p(Ya,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(Gs,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(Gs,"rel","nofollow"),p(Za,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),p(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(ln,"id","transformers.TFCamembertForMultipleChoice"),p(ln,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ln,"href","#transformers.TFCamembertForMultipleChoice"),p(uo,"class","relative group"),p(er,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(ta,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(ta,"rel","nofollow"),p(tr,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),p(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(cn,"id","transformers.TFCamembertForTokenClassification"),p(cn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(cn,"href","#transformers.TFCamembertForTokenClassification"),p(fo,"class","relative group"),p(or,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(ia,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(ia,"rel","nofollow"),p(nr,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),p(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),p(hn,"id","transformers.TFCamembertForQuestionAnswering"),p(hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(hn,"href","#transformers.TFCamembertForQuestionAnswering"),p(go,"class","relative group"),p(sr,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),p(pa,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),p(pa,"rel","nofollow"),p(ar,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),p(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(i,_){e(document.head,l),g(i,v,_),g(i,u,_),e(u,b),e(b,T),E(h,T,null),e(u,f),e(u,x),e(x,ve),g(i,he,_),g(i,N,_),e(N,ae),e(ae,ee),E(k,ee,null),e(N,we),e(N,Q),e(Q,Te),g(i,pe,_),g(i,R,_),e(R,ye),e(R,ie),e(ie,V),e(R,Ce),g(i,ue,_),g(i,W,_),e(W,$e),g(i,fe,_),g(i,U,_),e(U,me),e(me,Ee),g(i,ne,_),g(i,q,_),e(q,j),g(i,ge,_),g(i,K,_),e(K,le),e(le,Fe),e(le,H),e(H,Me),e(le,ze),g(i,L,_),g(i,se,_),e(se,G),e(se,de),e(de,qe),e(se,J),e(se,ce),e(ce,Pe),e(se,I),g(i,_e,_),g(i,S,_),e(S,re),e(re,te),E(P,te,null),e(S,xe),e(S,O),e(O,Le),g(i,be,_),g(i,m,_),E(w,m,null),e(m,Re),e(m,Y),e(Y,Be),e(Y,De),e(De,y),e(Y,We),e(Y,Oe),e(Oe,Ue),e(Y,Ke),g(i,Se,_),g(i,A,_),e(A,B),e(B,Ie),E(Ae,Ie,null),e(A,X),e(A,Ne),e(Ne,He),g(i,ke,_),g(i,oe,_),E(Z,oe,null),e(oe,Qe),e(oe,jt),e(jt,Rd),e(jt,wa),e(wa,Bd),e(jt,Wd),e(jt,Ta),e(Ta,Ud),e(jt,Kd),e(jt,bn),e(bn,Hd),e(jt,Qd),e(oe,Vd),e(oe,kn),e(kn,Gd),e(kn,ya),e(ya,Jd),e(kn,Xd),e(oe,Yd),e(oe,Ot),E(vn,Ot,null),e(Ot,Zd),e(Ot,gr),e(gr,ec),e(Ot,tc),e(Ot,wn),e(wn,Ca),e(Ca,oc),e(Ca,_r),e(_r,nc),e(wn,sc),e(wn,$a),e($a,ac),e($a,br),e(br,rc),e(oe,ic),e(oe,vo),E(Tn,vo,null),e(vo,lc),e(vo,yn),e(yn,dc),e(yn,kr),e(kr,cc),e(yn,mc),e(oe,hc),e(oe,wo),E(Cn,wo,null),e(wo,pc),e(wo,vr),e(vr,uc),e(oe,fc),e(oe,Ea),E($n,Ea,null),g(i,el,_),g(i,Vt,_),e(Vt,To),e(To,wr),E(En,wr,null),e(Vt,gc),e(Vt,Tr),e(Tr,_c),g(i,tl,_),g(i,rt,_),E(Fn,rt,null),e(rt,bc),e(rt,vt),e(vt,kc),e(vt,yr),e(yr,vc),e(vt,wc),e(vt,Fa),e(Fa,Tc),e(vt,yc),e(vt,Ma),e(Ma,Cc),e(vt,$c),e(vt,Mn),e(Mn,Ec),e(vt,Fc),e(rt,Mc),e(rt,zn),e(zn,zc),e(zn,za),e(za,qc),e(zn,Pc),e(rt,xc),e(rt,At),E(qn,At,null),e(At,Lc),e(At,Cr),e(Cr,jc),e(At,Oc),e(At,Pn),e(Pn,qa),e(qa,Ac),e(qa,$r),e($r,Dc),e(Pn,Ic),e(Pn,Pa),e(Pa,Nc),e(Pa,Er),e(Er,Sc),e(rt,Rc),e(rt,yo),E(xn,yo,null),e(yo,Bc),e(yo,Fr),e(Fr,Wc),g(i,ol,_),g(i,Gt,_),e(Gt,Co),e(Co,Mr),E(Ln,Mr,null),e(Gt,Uc),e(Gt,zr),e(zr,Kc),g(i,nl,_),g(i,Ve,_),E(jn,Ve,null),e(Ve,Hc),e(Ve,qr),e(qr,Qc),e(Ve,Vc),e(Ve,On),e(On,Gc),e(On,xa),e(xa,Jc),e(On,Xc),e(Ve,Yc),e(Ve,An),e(An,Zc),e(An,Dn),e(Dn,em),e(An,tm),e(Ve,om),e(Ve,In),e(In,nm),e(In,Pr),e(Pr,sm),e(In,am),e(Ve,rm),e(Ve,Xe),e(Xe,im),e(Xe,xr),e(xr,lm),e(Xe,dm),e(Xe,Lr),e(Lr,cm),e(Xe,mm),e(Xe,jr),e(jr,hm),e(Xe,pm),e(Xe,Or),e(Or,um),e(Xe,fm),e(Xe,Ar),e(Ar,gm),e(Xe,_m),e(Xe,Dr),e(Dr,bm),e(Xe,km),e(Ve,vm),e(Ve,$o),e($o,wm),e($o,Ir),e(Ir,Tm),e($o,ym),e($o,Nn),e(Nn,Cm),e(Ve,$m),e(Ve,Ct),E(Sn,Ct,null),e(Ct,Em),e(Ct,Jt),e(Jt,Fm),e(Jt,La),e(La,Mm),e(Jt,zm),e(Jt,Nr),e(Nr,qm),e(Jt,Pm),e(Ct,xm),E(Eo,Ct,null),e(Ct,Lm),E(Fo,Ct,null),g(i,sl,_),g(i,Xt,_),e(Xt,Mo),e(Mo,Sr),E(Rn,Sr,null),e(Xt,jm),e(Xt,Rr),e(Rr,Om),g(i,al,_),g(i,it,_),E(Bn,it,null),e(it,Am),e(it,Wn),e(Wn,Dm),e(Wn,Br),e(Br,Im),e(Wn,Nm),e(it,Sm),e(it,Un),e(Un,Rm),e(Un,ja),e(ja,Bm),e(Un,Wm),e(it,Um),e(it,Kn),e(Kn,Km),e(Kn,Hn),e(Hn,Hm),e(Kn,Qm),e(it,Vm),e(it,$t),E(Qn,$t,null),e($t,Gm),e($t,Yt),e(Yt,Jm),e(Yt,Oa),e(Oa,Xm),e(Yt,Ym),e(Yt,Wr),e(Wr,Zm),e(Yt,eh),e($t,th),E(zo,$t,null),e($t,oh),E(qo,$t,null),g(i,rl,_),g(i,Zt,_),e(Zt,Po),e(Po,Ur),E(Vn,Ur,null),e(Zt,nh),e(Zt,Kr),e(Kr,sh),g(i,il,_),g(i,lt,_),E(Gn,lt,null),e(lt,ah),e(lt,Jn),e(Jn,rh),e(Jn,Hr),e(Hr,ih),e(Jn,lh),e(lt,dh),e(lt,Xn),e(Xn,ch),e(Xn,Aa),e(Aa,mh),e(Xn,hh),e(lt,ph),e(lt,Yn),e(Yn,uh),e(Yn,Zn),e(Zn,fh),e(Yn,gh),e(lt,_h),e(lt,pt),E(es,pt,null),e(pt,bh),e(pt,eo),e(eo,kh),e(eo,Da),e(Da,vh),e(eo,wh),e(eo,Qr),e(Qr,Th),e(eo,yh),e(pt,Ch),E(xo,pt,null),e(pt,$h),E(Lo,pt,null),e(pt,Eh),E(jo,pt,null),g(i,ll,_),g(i,to,_),e(to,Oo),e(Oo,Vr),E(ts,Vr,null),e(to,Fh),e(to,Gr),e(Gr,Mh),g(i,dl,_),g(i,dt,_),E(os,dt,null),e(dt,zh),e(dt,Jr),e(Jr,qh),e(dt,Ph),e(dt,ns),e(ns,xh),e(ns,Ia),e(Ia,Lh),e(ns,jh),e(dt,Oh),e(dt,ss),e(ss,Ah),e(ss,as),e(as,Dh),e(ss,Ih),e(dt,Nh),e(dt,Je),E(rs,Je,null),e(Je,Sh),e(Je,oo),e(oo,Rh),e(oo,Na),e(Na,Bh),e(oo,Wh),e(oo,Xr),e(Xr,Uh),e(oo,Kh),e(Je,Hh),E(Ao,Je,null),e(Je,Qh),E(Do,Je,null),e(Je,Vh),E(Io,Je,null),e(Je,Gh),E(No,Je,null),e(Je,Jh),E(So,Je,null),g(i,cl,_),g(i,no,_),e(no,Ro),e(Ro,Yr),E(is,Yr,null),e(no,Xh),e(no,Zr),e(Zr,Yh),g(i,ml,_),g(i,ct,_),E(ls,ct,null),e(ct,Zh),e(ct,ei),e(ei,ep),e(ct,tp),e(ct,ds),e(ds,op),e(ds,Sa),e(Sa,np),e(ds,sp),e(ct,ap),e(ct,cs),e(cs,rp),e(cs,ms),e(ms,ip),e(cs,lp),e(ct,dp),e(ct,Et),E(hs,Et,null),e(Et,cp),e(Et,so),e(so,mp),e(so,Ra),e(Ra,hp),e(so,pp),e(so,ti),e(ti,up),e(so,fp),e(Et,gp),E(Bo,Et,null),e(Et,_p),E(Wo,Et,null),g(i,hl,_),g(i,ao,_),e(ao,Uo),e(Uo,oi),E(ps,oi,null),e(ao,bp),e(ao,ni),e(ni,kp),g(i,pl,_),g(i,mt,_),E(us,mt,null),e(mt,vp),e(mt,si),e(si,wp),e(mt,Tp),e(mt,fs),e(fs,yp),e(fs,Ba),e(Ba,Cp),e(fs,$p),e(mt,Ep),e(mt,gs),e(gs,Fp),e(gs,_s),e(_s,Mp),e(gs,zp),e(mt,qp),e(mt,ut),E(bs,ut,null),e(ut,Pp),e(ut,ro),e(ro,xp),e(ro,Wa),e(Wa,Lp),e(ro,jp),e(ro,ai),e(ai,Op),e(ro,Ap),e(ut,Dp),E(Ko,ut,null),e(ut,Ip),E(Ho,ut,null),e(ut,Np),E(Qo,ut,null),g(i,ul,_),g(i,io,_),e(io,Vo),e(Vo,ri),E(ks,ri,null),e(io,Sp),e(io,ii),e(ii,Rp),g(i,fl,_),g(i,ht,_),E(vs,ht,null),e(ht,Bp),e(ht,Go),e(Go,Wp),e(Go,li),e(li,Up),e(Go,Kp),e(Go,di),e(di,Hp),e(ht,Qp),e(ht,ws),e(ws,Vp),e(ws,Ua),e(Ua,Gp),e(ws,Jp),e(ht,Xp),e(ht,Ts),e(Ts,Yp),e(Ts,ys),e(ys,Zp),e(Ts,eu),e(ht,tu),e(ht,ft),E(Cs,ft,null),e(ft,ou),e(ft,lo),e(lo,nu),e(lo,Ka),e(Ka,su),e(lo,au),e(lo,ci),e(ci,ru),e(lo,iu),e(ft,lu),E(Jo,ft,null),e(ft,du),E(Xo,ft,null),e(ft,cu),E(Yo,ft,null),g(i,gl,_),g(i,co,_),e(co,Zo),e(Zo,mi),E($s,mi,null),e(co,mu),e(co,hi),e(hi,hu),g(i,_l,_),g(i,Ye,_),E(Es,Ye,null),e(Ye,pu),e(Ye,pi),e(pi,uu),e(Ye,fu),e(Ye,Fs),e(Fs,gu),e(Fs,Ha),e(Ha,_u),e(Fs,bu),e(Ye,ku),e(Ye,Ms),e(Ms,vu),e(Ms,zs),e(zs,wu),e(Ms,Tu),e(Ye,yu),E(en,Ye,null),e(Ye,Cu),e(Ye,qs),e(qs,$u),e(qs,Qa),e(Qa,Eu),e(qs,Fu),g(i,bl,_),g(i,mo,_),e(mo,tn),e(tn,ui),E(Ps,ui,null),e(mo,Mu),e(mo,fi),e(fi,zu),g(i,kl,_),g(i,Ze,_),E(xs,Ze,null),e(Ze,qu),e(Ze,Ls),e(Ls,Pu),e(Ls,gi),e(gi,xu),e(Ls,Lu),e(Ze,ju),e(Ze,js),e(js,Ou),e(js,Va),e(Va,Au),e(js,Du),e(Ze,Iu),e(Ze,Os),e(Os,Nu),e(Os,As),e(As,Su),e(Os,Ru),e(Ze,Bu),E(on,Ze,null),e(Ze,Wu),e(Ze,Ds),e(Ds,Uu),e(Ds,Ga),e(Ga,Ku),e(Ds,Hu),g(i,vl,_),g(i,ho,_),e(ho,nn),e(nn,_i),E(Is,_i,null),e(ho,Qu),e(ho,bi),e(bi,Vu),g(i,wl,_),g(i,et,_),E(Ns,et,null),e(et,Gu),e(et,Ss),e(Ss,Ju),e(Ss,ki),e(ki,Xu),e(Ss,Yu),e(et,Zu),e(et,Rs),e(Rs,ef),e(Rs,Ja),e(Ja,tf),e(Rs,of),e(et,nf),e(et,Bs),e(Bs,sf),e(Bs,Ws),e(Ws,af),e(Bs,rf),e(et,lf),E(sn,et,null),e(et,df),e(et,Us),e(Us,cf),e(Us,Xa),e(Xa,mf),e(Us,hf),g(i,Tl,_),g(i,po,_),e(po,an),e(an,vi),E(Ks,vi,null),e(po,pf),e(po,wi),e(wi,uf),g(i,yl,_),g(i,tt,_),E(Hs,tt,null),e(tt,ff),e(tt,Ti),e(Ti,gf),e(tt,_f),e(tt,Qs),e(Qs,bf),e(Qs,Ya),e(Ya,kf),e(Qs,vf),e(tt,wf),e(tt,Vs),e(Vs,Tf),e(Vs,Gs),e(Gs,yf),e(Vs,Cf),e(tt,$f),E(rn,tt,null),e(tt,Ef),e(tt,Js),e(Js,Ff),e(Js,Za),e(Za,Mf),e(Js,zf),g(i,Cl,_),g(i,uo,_),e(uo,ln),e(ln,yi),E(Xs,yi,null),e(uo,qf),e(uo,Ci),e(Ci,Pf),g(i,$l,_),g(i,ot,_),E(Ys,ot,null),e(ot,xf),e(ot,$i),e($i,Lf),e(ot,jf),e(ot,Zs),e(Zs,Of),e(Zs,er),e(er,Af),e(Zs,Df),e(ot,If),e(ot,ea),e(ea,Nf),e(ea,ta),e(ta,Sf),e(ea,Rf),e(ot,Bf),E(dn,ot,null),e(ot,Wf),e(ot,oa),e(oa,Uf),e(oa,tr),e(tr,Kf),e(oa,Hf),g(i,El,_),g(i,fo,_),e(fo,cn),e(cn,Ei),E(na,Ei,null),e(fo,Qf),e(fo,Fi),e(Fi,Vf),g(i,Fl,_),g(i,nt,_),E(sa,nt,null),e(nt,Gf),e(nt,Mi),e(Mi,Jf),e(nt,Xf),e(nt,aa),e(aa,Yf),e(aa,or),e(or,Zf),e(aa,eg),e(nt,tg),e(nt,ra),e(ra,og),e(ra,ia),e(ia,ng),e(ra,sg),e(nt,ag),E(mn,nt,null),e(nt,rg),e(nt,la),e(la,ig),e(la,nr),e(nr,lg),e(la,dg),g(i,Ml,_),g(i,go,_),e(go,hn),e(hn,zi),E(da,zi,null),e(go,cg),e(go,qi),e(qi,mg),g(i,zl,_),g(i,st,_),E(ca,st,null),e(st,hg),e(st,_o),e(_o,pg),e(_o,Pi),e(Pi,ug),e(_o,fg),e(_o,xi),e(xi,gg),e(_o,_g),e(st,bg),e(st,ma),e(ma,kg),e(ma,sr),e(sr,vg),e(ma,wg),e(st,Tg),e(st,ha),e(ha,yg),e(ha,pa),e(pa,Cg),e(ha,$g),e(st,Eg),E(pn,st,null),e(st,Fg),e(st,ua),e(ua,Mg),e(ua,ar),e(ar,zg),e(ua,qg),ql=!0},p(i,[_]){const fa={};_&2&&(fa.$$scope={dirty:_,ctx:i}),Eo.$set(fa);const Li={};_&2&&(Li.$$scope={dirty:_,ctx:i}),Fo.$set(Li);const ji={};_&2&&(ji.$$scope={dirty:_,ctx:i}),zo.$set(ji);const Oi={};_&2&&(Oi.$$scope={dirty:_,ctx:i}),qo.$set(Oi);const ga={};_&2&&(ga.$$scope={dirty:_,ctx:i}),xo.$set(ga);const Ai={};_&2&&(Ai.$$scope={dirty:_,ctx:i}),Lo.$set(Ai);const Di={};_&2&&(Di.$$scope={dirty:_,ctx:i}),jo.$set(Di);const Ii={};_&2&&(Ii.$$scope={dirty:_,ctx:i}),Ao.$set(Ii);const _a={};_&2&&(_a.$$scope={dirty:_,ctx:i}),Do.$set(_a);const Ni={};_&2&&(Ni.$$scope={dirty:_,ctx:i}),Io.$set(Ni);const Si={};_&2&&(Si.$$scope={dirty:_,ctx:i}),No.$set(Si);const Ri={};_&2&&(Ri.$$scope={dirty:_,ctx:i}),So.$set(Ri);const Bi={};_&2&&(Bi.$$scope={dirty:_,ctx:i}),Bo.$set(Bi);const Wi={};_&2&&(Wi.$$scope={dirty:_,ctx:i}),Wo.$set(Wi);const Ui={};_&2&&(Ui.$$scope={dirty:_,ctx:i}),Ko.$set(Ui);const ba={};_&2&&(ba.$$scope={dirty:_,ctx:i}),Ho.$set(ba);const Ki={};_&2&&(Ki.$$scope={dirty:_,ctx:i}),Qo.$set(Ki);const bo={};_&2&&(bo.$$scope={dirty:_,ctx:i}),Jo.$set(bo);const Hi={};_&2&&(Hi.$$scope={dirty:_,ctx:i}),Xo.$set(Hi);const Qi={};_&2&&(Qi.$$scope={dirty:_,ctx:i}),Yo.$set(Qi);const ka={};_&2&&(ka.$$scope={dirty:_,ctx:i}),en.$set(ka);const Vi={};_&2&&(Vi.$$scope={dirty:_,ctx:i}),on.$set(Vi);const Gi={};_&2&&(Gi.$$scope={dirty:_,ctx:i}),sn.$set(Gi);const Ji={};_&2&&(Ji.$$scope={dirty:_,ctx:i}),rn.$set(Ji);const va={};_&2&&(va.$$scope={dirty:_,ctx:i}),dn.$set(va);const ko={};_&2&&(ko.$$scope={dirty:_,ctx:i}),mn.$set(ko);const Xi={};_&2&&(Xi.$$scope={dirty:_,ctx:i}),pn.$set(Xi)},i(i){ql||(F(h.$$.fragment,i),F(k.$$.fragment,i),F(P.$$.fragment,i),F(w.$$.fragment,i),F(Ae.$$.fragment,i),F(Z.$$.fragment,i),F(vn.$$.fragment,i),F(Tn.$$.fragment,i),F(Cn.$$.fragment,i),F($n.$$.fragment,i),F(En.$$.fragment,i),F(Fn.$$.fragment,i),F(qn.$$.fragment,i),F(xn.$$.fragment,i),F(Ln.$$.fragment,i),F(jn.$$.fragment,i),F(Sn.$$.fragment,i),F(Eo.$$.fragment,i),F(Fo.$$.fragment,i),F(Rn.$$.fragment,i),F(Bn.$$.fragment,i),F(Qn.$$.fragment,i),F(zo.$$.fragment,i),F(qo.$$.fragment,i),F(Vn.$$.fragment,i),F(Gn.$$.fragment,i),F(es.$$.fragment,i),F(xo.$$.fragment,i),F(Lo.$$.fragment,i),F(jo.$$.fragment,i),F(ts.$$.fragment,i),F(os.$$.fragment,i),F(rs.$$.fragment,i),F(Ao.$$.fragment,i),F(Do.$$.fragment,i),F(Io.$$.fragment,i),F(No.$$.fragment,i),F(So.$$.fragment,i),F(is.$$.fragment,i),F(ls.$$.fragment,i),F(hs.$$.fragment,i),F(Bo.$$.fragment,i),F(Wo.$$.fragment,i),F(ps.$$.fragment,i),F(us.$$.fragment,i),F(bs.$$.fragment,i),F(Ko.$$.fragment,i),F(Ho.$$.fragment,i),F(Qo.$$.fragment,i),F(ks.$$.fragment,i),F(vs.$$.fragment,i),F(Cs.$$.fragment,i),F(Jo.$$.fragment,i),F(Xo.$$.fragment,i),F(Yo.$$.fragment,i),F($s.$$.fragment,i),F(Es.$$.fragment,i),F(en.$$.fragment,i),F(Ps.$$.fragment,i),F(xs.$$.fragment,i),F(on.$$.fragment,i),F(Is.$$.fragment,i),F(Ns.$$.fragment,i),F(sn.$$.fragment,i),F(Ks.$$.fragment,i),F(Hs.$$.fragment,i),F(rn.$$.fragment,i),F(Xs.$$.fragment,i),F(Ys.$$.fragment,i),F(dn.$$.fragment,i),F(na.$$.fragment,i),F(sa.$$.fragment,i),F(mn.$$.fragment,i),F(da.$$.fragment,i),F(ca.$$.fragment,i),F(pn.$$.fragment,i),ql=!0)},o(i){M(h.$$.fragment,i),M(k.$$.fragment,i),M(P.$$.fragment,i),M(w.$$.fragment,i),M(Ae.$$.fragment,i),M(Z.$$.fragment,i),M(vn.$$.fragment,i),M(Tn.$$.fragment,i),M(Cn.$$.fragment,i),M($n.$$.fragment,i),M(En.$$.fragment,i),M(Fn.$$.fragment,i),M(qn.$$.fragment,i),M(xn.$$.fragment,i),M(Ln.$$.fragment,i),M(jn.$$.fragment,i),M(Sn.$$.fragment,i),M(Eo.$$.fragment,i),M(Fo.$$.fragment,i),M(Rn.$$.fragment,i),M(Bn.$$.fragment,i),M(Qn.$$.fragment,i),M(zo.$$.fragment,i),M(qo.$$.fragment,i),M(Vn.$$.fragment,i),M(Gn.$$.fragment,i),M(es.$$.fragment,i),M(xo.$$.fragment,i),M(Lo.$$.fragment,i),M(jo.$$.fragment,i),M(ts.$$.fragment,i),M(os.$$.fragment,i),M(rs.$$.fragment,i),M(Ao.$$.fragment,i),M(Do.$$.fragment,i),M(Io.$$.fragment,i),M(No.$$.fragment,i),M(So.$$.fragment,i),M(is.$$.fragment,i),M(ls.$$.fragment,i),M(hs.$$.fragment,i),M(Bo.$$.fragment,i),M(Wo.$$.fragment,i),M(ps.$$.fragment,i),M(us.$$.fragment,i),M(bs.$$.fragment,i),M(Ko.$$.fragment,i),M(Ho.$$.fragment,i),M(Qo.$$.fragment,i),M(ks.$$.fragment,i),M(vs.$$.fragment,i),M(Cs.$$.fragment,i),M(Jo.$$.fragment,i),M(Xo.$$.fragment,i),M(Yo.$$.fragment,i),M($s.$$.fragment,i),M(Es.$$.fragment,i),M(en.$$.fragment,i),M(Ps.$$.fragment,i),M(xs.$$.fragment,i),M(on.$$.fragment,i),M(Is.$$.fragment,i),M(Ns.$$.fragment,i),M(sn.$$.fragment,i),M(Ks.$$.fragment,i),M(Hs.$$.fragment,i),M(rn.$$.fragment,i),M(Xs.$$.fragment,i),M(Ys.$$.fragment,i),M(dn.$$.fragment,i),M(na.$$.fragment,i),M(sa.$$.fragment,i),M(mn.$$.fragment,i),M(da.$$.fragment,i),M(ca.$$.fragment,i),M(pn.$$.fragment,i),ql=!1},d(i){t(l),i&&t(v),i&&t(u),z(h),i&&t(he),i&&t(N),z(k),i&&t(pe),i&&t(R),i&&t(ue),i&&t(W),i&&t(fe),i&&t(U),i&&t(ne),i&&t(q),i&&t(ge),i&&t(K),i&&t(L),i&&t(se),i&&t(_e),i&&t(S),z(P),i&&t(be),i&&t(m),z(w),i&&t(Se),i&&t(A),z(Ae),i&&t(ke),i&&t(oe),z(Z),z(vn),z(Tn),z(Cn),z($n),i&&t(el),i&&t(Vt),z(En),i&&t(tl),i&&t(rt),z(Fn),z(qn),z(xn),i&&t(ol),i&&t(Gt),z(Ln),i&&t(nl),i&&t(Ve),z(jn),z(Sn),z(Eo),z(Fo),i&&t(sl),i&&t(Xt),z(Rn),i&&t(al),i&&t(it),z(Bn),z(Qn),z(zo),z(qo),i&&t(rl),i&&t(Zt),z(Vn),i&&t(il),i&&t(lt),z(Gn),z(es),z(xo),z(Lo),z(jo),i&&t(ll),i&&t(to),z(ts),i&&t(dl),i&&t(dt),z(os),z(rs),z(Ao),z(Do),z(Io),z(No),z(So),i&&t(cl),i&&t(no),z(is),i&&t(ml),i&&t(ct),z(ls),z(hs),z(Bo),z(Wo),i&&t(hl),i&&t(ao),z(ps),i&&t(pl),i&&t(mt),z(us),z(bs),z(Ko),z(Ho),z(Qo),i&&t(ul),i&&t(io),z(ks),i&&t(fl),i&&t(ht),z(vs),z(Cs),z(Jo),z(Xo),z(Yo),i&&t(gl),i&&t(co),z($s),i&&t(_l),i&&t(Ye),z(Es),z(en),i&&t(bl),i&&t(mo),z(Ps),i&&t(kl),i&&t(Ze),z(xs),z(on),i&&t(vl),i&&t(ho),z(Is),i&&t(wl),i&&t(et),z(Ns),z(sn),i&&t(Tl),i&&t(po),z(Ks),i&&t(yl),i&&t(tt),z(Hs),z(rn),i&&t(Cl),i&&t(uo),z(Xs),i&&t($l),i&&t(ot),z(Ys),z(dn),i&&t(El),i&&t(fo),z(na),i&&t(Fl),i&&t(nt),z(sa),z(mn),i&&t(Ml),i&&t(go),z(da),i&&t(zl),i&&t(st),z(ca),z(pn)}}}const Vk={local:"camembert",sections:[{local:"overview",title:"Overview"},{local:"transformers.CamembertConfig",title:"CamembertConfig"},{local:"transformers.CamembertTokenizer",title:"CamembertTokenizer"},{local:"transformers.CamembertTokenizerFast",title:"CamembertTokenizerFast"},{local:"transformers.CamembertModel",title:"CamembertModel"},{local:"transformers.CamembertForCausalLM",title:"CamembertForCausalLM"},{local:"transformers.CamembertForMaskedLM",title:"CamembertForMaskedLM"},{local:"transformers.CamembertForSequenceClassification",title:"CamembertForSequenceClassification"},{local:"transformers.CamembertForMultipleChoice",title:"CamembertForMultipleChoice"},{local:"transformers.CamembertForTokenClassification",title:"CamembertForTokenClassification"},{local:"transformers.CamembertForQuestionAnswering",title:"CamembertForQuestionAnswering"},{local:"transformers.TFCamembertModel",title:"TFCamembertModel"},{local:"transformers.TFCamembertForCausalLM",title:"TFCamembertForCasualLM"},{local:"transformers.TFCamembertForMaskedLM",title:"TFCamembertForMaskedLM"},{local:"transformers.TFCamembertForSequenceClassification",title:"TFCamembertForSequenceClassification"},{local:"transformers.TFCamembertForMultipleChoice",title:"TFCamembertForMultipleChoice"},{local:"transformers.TFCamembertForTokenClassification",title:"TFCamembertForTokenClassification"},{local:"transformers.TFCamembertForQuestionAnswering",title:"TFCamembertForQuestionAnswering"}],title:"CamemBERT"};function Gk(D){return kk(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ov extends fk{constructor(l){super();gk(this,l,Gk,Qk,_k,{})}}export{ov as default,Vk as metadata};
