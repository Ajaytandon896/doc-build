import{S as Lu,i as Ru,s as Au,e as r,k as d,w as E,t as n,M as zu,c as a,d as t,m,a as s,x as C,h as i,b as c,F as e,g as h,y,q as $,o as F,B as M}from"../../chunks/vendor-4833417e.js";import{T as za}from"../../chunks/Tip-fffd6df1.js";import{D as Ee}from"../../chunks/Docstring-4f315ed9.js";import{I as Me}from"../../chunks/IconCopyLink-4b81c553.js";function Du(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function xu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function Iu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function Su(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function Bu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function Ou(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue;return{c(){b=r("p"),Z=n("TF 2.0 models accepts two formats as inputs:"),A=d(),_=r("ul"),z=r("li"),G=n("having all inputs as keyword arguments (like PyTorch models), or"),le=d(),D=r("li"),de=n("having all inputs as a list, tuple or dict in the first positional arguments."),Q=d(),u=r("p"),K=n("This second option is useful when using "),x=r("code"),X=n("tf.keras.Model.fit"),me=n(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=r("code"),ce=n("model(inputs)"),ae=n("."),H=d(),P=r("p"),j=n(`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),V=d(),g=r("ul"),k=r("li"),ee=n("a single Tensor with "),O=r("code"),se=n("input_ids"),te=n(" only and nothing else: "),S=r("code"),he=n("model(inputs_ids)"),ne=d(),v=r("li"),fe=n(`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=r("code"),oe=n("model([input_ids, attention_mask])"),J=n(" or "),N=r("code"),re=n("model([input_ids, attention_mask, token_type_ids])"),pe=d(),q=r("li"),ie=n(`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=r("code"),ue=n('model({"input_ids": input_ids, "token_type_ids": token_type_ids})')},l(l){b=a(l,"P",{});var p=s(b);Z=i(p,"TF 2.0 models accepts two formats as inputs:"),p.forEach(t),A=m(l),_=a(l,"UL",{});var W=s(_);z=a(W,"LI",{});var ke=s(z);G=i(ke,"having all inputs as keyword arguments (like PyTorch models), or"),ke.forEach(t),le=m(W),D=a(W,"LI",{});var Ce=s(D);de=i(Ce,"having all inputs as a list, tuple or dict in the first positional arguments."),Ce.forEach(t),W.forEach(t),Q=m(l),u=a(l,"P",{});var L=s(u);K=i(L,"This second option is useful when using "),x=a(L,"CODE",{});var Te=s(x);X=i(Te,"tf.keras.Model.fit"),Te.forEach(t),me=i(L,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(L,"CODE",{});var ge=s(I);ce=i(ge,"model(inputs)"),ge.forEach(t),ae=i(L,"."),L.forEach(t),H=m(l),P=a(l,"P",{});var ve=s(P);j=i(ve,`If you choose this second option, there are three possibilities you can use to gather all the input Tensors in the
first positional argument :`),ve.forEach(t),V=m(l),g=a(l,"UL",{});var T=s(g);k=a(T,"LI",{});var R=s(k);ee=i(R,"a single Tensor with "),O=a(R,"CODE",{});var ye=s(O);se=i(ye,"input_ids"),ye.forEach(t),te=i(R," only and nothing else: "),S=a(R,"CODE",{});var be=s(S);he=i(be,"model(inputs_ids)"),be.forEach(t),R.forEach(t),ne=m(T),v=a(T,"LI",{});var U=s(v);fe=i(U,`a list of varying length with one or several input Tensors IN THE ORDER given in the docstring:
`),B=a(U,"CODE",{});var we=s(B);oe=i(we,"model([input_ids, attention_mask])"),we.forEach(t),J=i(U," or "),N=a(U,"CODE",{});var _e=s(N);re=i(_e,"model([input_ids, attention_mask, token_type_ids])"),_e.forEach(t),U.forEach(t),pe=m(T),q=a(T,"LI",{});var Y=s(q);ie=i(Y,`a dictionary with one or several input Tensors associated to the input names given in the docstring:
`),w=a(Y,"CODE",{});var $e=s(w);ue=i($e,'model({"input_ids": input_ids, "token_type_ids": token_type_ids})'),$e.forEach(t),Y.forEach(t),T.forEach(t)},m(l,p){h(l,b,p),e(b,Z),h(l,A,p),h(l,_,p),e(_,z),e(z,G),e(_,le),e(_,D),e(D,de),h(l,Q,p),h(l,u,p),e(u,K),e(u,x),e(x,X),e(u,me),e(u,I),e(I,ce),e(u,ae),h(l,H,p),h(l,P,p),e(P,j),h(l,V,p),h(l,g,p),e(g,k),e(k,ee),e(k,O),e(O,se),e(k,te),e(k,S),e(S,he),e(g,ne),e(g,v),e(v,fe),e(v,B),e(B,oe),e(v,J),e(v,N),e(N,re),e(g,pe),e(g,q),e(q,ie),e(q,w),e(w,ue)},d(l){l&&t(b),l&&t(A),l&&t(_),l&&t(Q),l&&t(u),l&&t(H),l&&t(P),l&&t(V),l&&t(g)}}}function Nu(De){let b,Z,A,_,z,G,le,D,de,Q,u,K,x,X,me,I,ce,ae,H,P,j,V,g,k,ee,O,se,te,S,he,ne,v,fe,B,oe,J,N,re,pe,q,ie,w,ue,l,p,W,ke,Ce,L,Te,ge,ve,T,R,ye,be,U,we,_e,Y,$e,Yt,Di,Wr,xi,Ii,Ns,mt,$t,Da,Zt,Si,xa,Bi,Us,Fe,eo,Oi,Ye,Ni,Kr,Ui,Hi,Gr,Qi,Vi,to,Wi,Ki,Gi,oo,Xi,Xr,ji,Ji,Yi,Ze,ro,Zi,Ia,el,tl,ao,jr,ol,Sa,rl,al,Jr,sl,Ba,nl,il,Ft,so,ll,no,dl,Oa,ml,cl,hl,Mt,io,fl,Na,pl,ul,Yr,lo,Hs,ct,Pt,Ua,mo,gl,Ha,_l,Qs,xe,co,vl,Ve,kl,Qa,bl,Tl,Zr,wl,El,ea,Cl,yl,ho,$l,Fl,Ml,fo,Pl,ta,ql,Ll,Rl,et,po,Al,Va,zl,Dl,uo,oa,xl,Wa,Il,Sl,ra,Bl,Ka,Ol,Nl,qt,go,Ul,Ga,Hl,Vs,ht,Lt,Xa,_o,Ql,ja,Vl,Ws,Ie,vo,Wl,Ja,Kl,Gl,ko,Xl,aa,jl,Jl,Yl,bo,Zl,To,ed,td,od,wo,rd,sa,ad,sd,Ks,ft,Rt,Ya,Eo,nd,Za,id,Gs,Se,Co,ld,yo,dd,es,md,cd,hd,$o,fd,na,pd,ud,gd,Fo,_d,Mo,vd,kd,bd,Po,Td,ia,wd,Ed,Xs,pt,At,ts,qo,Cd,os,yd,js,Be,Lo,$d,Ro,Fd,rs,Md,Pd,qd,Ao,Ld,la,Rd,Ad,zd,zo,Dd,Do,xd,Id,Sd,xo,Bd,da,Od,Nd,Js,ut,zt,as,Io,Ud,ss,Hd,Ys,Oe,So,Qd,ns,Vd,Wd,Bo,Kd,ma,Gd,Xd,jd,Oo,Jd,No,Yd,Zd,em,Uo,tm,ca,om,rm,Zs,gt,Dt,is,Ho,am,ls,sm,en,Ne,Qo,nm,ds,im,lm,Vo,dm,ha,mm,cm,hm,Wo,fm,Ko,pm,um,gm,Go,_m,fa,vm,km,tn,_t,xt,ms,Xo,bm,cs,Tm,on,Ue,jo,wm,hs,Em,Cm,Jo,ym,pa,$m,Fm,Mm,Yo,Pm,Zo,qm,Lm,Rm,er,Am,ua,zm,Dm,rn,vt,It,fs,tr,xm,ps,Im,an,He,or,Sm,St,Bm,us,Om,Nm,gs,Um,Hm,rr,Qm,ga,Vm,Wm,Km,ar,Gm,sr,Xm,jm,Jm,nr,Ym,_a,Zm,ec,sn,kt,Bt,_s,ir,tc,vs,oc,nn,Pe,lr,rc,ks,ac,sc,dr,nc,va,ic,lc,dc,mr,mc,cr,cc,hc,fc,Ot,pc,hr,uc,ka,gc,_c,ln,bt,Nt,bs,fr,vc,Ts,kc,dn,qe,pr,bc,ur,Tc,ws,wc,Ec,Cc,gr,yc,ba,$c,Fc,Mc,_r,Pc,vr,qc,Lc,Rc,Ut,Ac,kr,zc,Ta,Dc,xc,mn,Tt,Ht,Es,br,Ic,Cs,Sc,cn,Le,Tr,Bc,ys,Oc,Nc,wr,Uc,wa,Hc,Qc,Vc,Er,Wc,Cr,Kc,Gc,Xc,Qt,jc,yr,Jc,Ea,Yc,Zc,hn,wt,Vt,$s,$r,eh,Fs,th,fn,Re,Fr,oh,Ms,rh,ah,Mr,sh,Ca,nh,ih,lh,Pr,dh,qr,mh,ch,hh,Wt,fh,Lr,ph,ya,uh,gh,pn,Et,Kt,Ps,Rr,_h,qs,vh,un,Ae,Ar,kh,Ls,bh,Th,zr,wh,$a,Eh,Ch,yh,Dr,$h,xr,Fh,Mh,Ph,Gt,qh,Ir,Lh,Fa,Rh,Ah,gn,Ct,Xt,Rs,Sr,zh,As,Dh,_n,ze,Br,xh,yt,Ih,zs,Sh,Bh,Ds,Oh,Nh,Uh,Or,Hh,Ma,Qh,Vh,Wh,Nr,Kh,Ur,Gh,Xh,jh,jt,Jh,Hr,Yh,Pa,Zh,ef,vn;return G=new Me({}),X=new Me({}),R=new Me({}),Y=new Ee({props:{name:"class transformers.CamembertConfig",anchor:"transformers.CamembertConfig",parameters:[{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/configuration_camembert.py#L35"}}),Zt=new Me({}),eo=new Ee({props:{name:"class transformers.CamembertTokenizer",anchor:"transformers.CamembertTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L45",parametersDescription:[{anchor:"transformers.CamembertTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizer.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizer.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizer.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.CamembertTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.CamembertTokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}]}}),ro=new Ee({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L161",parametersDescription:[{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),so=new Ee({props:{name:"get_special_tokens_mask",anchor:"transformers.CamembertTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L187",parametersDescription:[{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.CamembertTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),io=new Ee({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L214",parametersDescription:[{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),lo=new Ee({props:{name:"save_vocabulary",anchor:"transformers.CamembertTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert.py#L283"}}),mo=new Me({}),co=new Ee({props:{name:"class transformers.CamembertTokenizerFast",anchor:"transformers.CamembertTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"sep_token",val:" = '</s>'"},{name:"cls_token",val:" = '<s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"mask_token",val:" = '<mask>'"},{name:"additional_special_tokens",val:" = ['<s>NOTUSED', '</s>NOTUSED']"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L54",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.CamembertTokenizerFast.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sequence token that was used during pretraining. Can be used a sequence classifier token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the beginning of
sequence. The token used is the <code>cls_token</code>.</p>

					</div>`,name:"bos_token"},{anchor:"transformers.CamembertTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.CamembertTokenizerFast.sep_token",description:`<strong>sep_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The separator token, which is used when building a sequence from multiple sequences, e.g. two sequences for
sequence classification or for a text and a question for question answering. It is also used as the last
token of a sequence built with special tokens.`,name:"sep_token"},{anchor:"transformers.CamembertTokenizerFast.cls_token",description:`<strong>cls_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The classifier token which is used when doing sequence classification (classification of the whole sequence
instead of per-token classification). It is the first token of the sequence when built with special tokens.`,name:"cls_token"},{anchor:"transformers.CamembertTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.CamembertTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.CamembertTokenizerFast.mask_token",description:`<strong>mask_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;mask&gt;&quot;</code>) &#x2014;
The token used for masking values. This is the token used when training this model with masked language
modeling. This is the token which the model will try to predict.`,name:"mask_token"},{anchor:"transformers.CamembertTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;&lt;s&gt;NOTUSED&quot;, &quot;&lt;/s&gt;NOTUSED&quot;]</code>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),po=new Ee({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L146",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),go=new Ee({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/tokenization_camembert_fast.py#L172",parametersDescription:[{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.CamembertTokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),_o=new Me({}),vo=new Ee({props:{name:"class transformers.CamembertModel",anchor:"transformers.CamembertModel",parameters:[{name:"config",val:""},{name:"add_pooling_layer",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L64",parametersDescription:[{anchor:"transformers.CamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Eo=new Me({}),Co=new Ee({props:{name:"class transformers.CamembertForCausalLM",anchor:"transformers.CamembertForCausalLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L153",parametersDescription:[{anchor:"transformers.CamembertForCausalLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),qo=new Me({}),Lo=new Ee({props:{name:"class transformers.CamembertForMaskedLM",anchor:"transformers.CamembertForMaskedLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L77",parametersDescription:[{anchor:"transformers.CamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Io=new Me({}),So=new Ee({props:{name:"class transformers.CamembertForSequenceClassification",anchor:"transformers.CamembertForSequenceClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L93",parametersDescription:[{anchor:"transformers.CamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ho=new Me({}),Qo=new Ee({props:{name:"class transformers.CamembertForMultipleChoice",anchor:"transformers.CamembertForMultipleChoice",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L109",parametersDescription:[{anchor:"transformers.CamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Xo=new Me({}),jo=new Ee({props:{name:"class transformers.CamembertForTokenClassification",anchor:"transformers.CamembertForTokenClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L125",parametersDescription:[{anchor:"transformers.CamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),tr=new Me({}),or=new Ee({props:{name:"class transformers.CamembertForQuestionAnswering",anchor:"transformers.CamembertForQuestionAnswering",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_camembert.py#L141",parametersDescription:[{anchor:"transformers.CamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ir=new Me({}),lr=new Ee({props:{name:"class transformers.TFCamembertModel",anchor:"transformers.TFCamembertModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L80",parametersDescription:[{anchor:"transformers.TFCamembertModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ot=new za({props:{$$slots:{default:[Du]},$$scope:{ctx:De}}}),fr=new Me({}),pr=new Ee({props:{name:"class transformers.TFCamembertForMaskedLM",anchor:"transformers.TFCamembertForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L93",parametersDescription:[{anchor:"transformers.TFCamembertForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ut=new za({props:{$$slots:{default:[xu]},$$scope:{ctx:De}}}),br=new Me({}),Tr=new Ee({props:{name:"class transformers.TFCamembertForSequenceClassification",anchor:"transformers.TFCamembertForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L109",parametersDescription:[{anchor:"transformers.TFCamembertForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Qt=new za({props:{$$slots:{default:[Iu]},$$scope:{ctx:De}}}),$r=new Me({}),Fr=new Ee({props:{name:"class transformers.TFCamembertForMultipleChoice",anchor:"transformers.TFCamembertForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L141",parametersDescription:[{anchor:"transformers.TFCamembertForMultipleChoice.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Wt=new za({props:{$$slots:{default:[Su]},$$scope:{ctx:De}}}),Rr=new Me({}),Ar=new Ee({props:{name:"class transformers.TFCamembertForTokenClassification",anchor:"transformers.TFCamembertForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L125",parametersDescription:[{anchor:"transformers.TFCamembertForTokenClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Gt=new za({props:{$$slots:{default:[Bu]},$$scope:{ctx:De}}}),Sr=new Me({}),Br=new Ee({props:{name:"class transformers.TFCamembertForQuestionAnswering",anchor:"transformers.TFCamembertForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/camembert/modeling_tf_camembert.py#L157",parametersDescription:[{anchor:"transformers.TFCamembertForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a>) &#x2014; Model configuration class with all the parameters of the
model. Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),jt=new za({props:{$$slots:{default:[Ou]},$$scope:{ctx:De}}}),{c(){b=r("meta"),Z=d(),A=r("h1"),_=r("a"),z=r("span"),E(G.$$.fragment),le=d(),D=r("span"),de=n("CamemBERT"),Q=d(),u=r("h2"),K=r("a"),x=r("span"),E(X.$$.fragment),me=d(),I=r("span"),ce=n("Overview"),ae=d(),H=r("p"),P=n("The CamemBERT model was proposed in "),j=r("a"),V=n("CamemBERT: a Tasty French Language Model"),g=n(` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),k=d(),ee=r("p"),O=n("The abstract from the paper is the following:"),se=d(),te=r("p"),S=r("em"),he=n(`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),ne=d(),v=r("p"),fe=n("Tips:"),B=d(),oe=r("ul"),J=r("li"),N=n("This implementation is the same as RoBERTa. Refer to the "),re=r("a"),pe=n("documentation of RoBERTa"),q=n(` for usage examples
as well as the information relative to the inputs and outputs.`),ie=d(),w=r("p"),ue=n("This model was contributed by "),l=r("a"),p=n("camembert"),W=n(". The original code can be found "),ke=r("a"),Ce=n("here"),L=n("."),Te=d(),ge=r("h2"),ve=r("a"),T=r("span"),E(R.$$.fragment),ye=d(),be=r("span"),U=n("CamembertConfig"),we=d(),_e=r("div"),E(Y.$$.fragment),$e=d(),Yt=r("p"),Di=n("This class overrides "),Wr=r("a"),xi=n("RobertaConfig"),Ii=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Ns=d(),mt=r("h2"),$t=r("a"),Da=r("span"),E(Zt.$$.fragment),Si=d(),xa=r("span"),Bi=n("CamembertTokenizer"),Us=d(),Fe=r("div"),E(eo.$$.fragment),Oi=d(),Ye=r("p"),Ni=n("Adapted from "),Kr=r("a"),Ui=n("RobertaTokenizer"),Hi=n(" and "),Gr=r("a"),Qi=n("XLNetTokenizer"),Vi=n(`. Construct a CamemBERT tokenizer. Based on
`),to=r("a"),Wi=n("SentencePiece"),Ki=n("."),Gi=d(),oo=r("p"),Xi=n("This tokenizer inherits from "),Xr=r("a"),ji=n("PreTrainedTokenizer"),Ji=n(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Yi=d(),Ze=r("div"),E(ro.$$.fragment),Zi=d(),Ia=r("p"),el=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),tl=d(),ao=r("ul"),jr=r("li"),ol=n("single sequence: "),Sa=r("code"),rl=n("<s> X </s>"),al=d(),Jr=r("li"),sl=n("pair of sequences: "),Ba=r("code"),nl=n("<s> A </s></s> B </s>"),il=d(),Ft=r("div"),E(so.$$.fragment),ll=d(),no=r("p"),dl=n(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Oa=r("code"),ml=n("prepare_for_model"),cl=n(" method."),hl=d(),Mt=r("div"),E(io.$$.fragment),fl=d(),Na=r("p"),pl=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),ul=d(),Yr=r("div"),E(lo.$$.fragment),Hs=d(),ct=r("h2"),Pt=r("a"),Ua=r("span"),E(mo.$$.fragment),gl=d(),Ha=r("span"),_l=n("CamembertTokenizerFast"),Qs=d(),xe=r("div"),E(co.$$.fragment),vl=d(),Ve=r("p"),kl=n("Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),Qa=r("em"),bl=n("tokenizers"),Tl=n(` library). Adapted from
`),Zr=r("a"),wl=n("RobertaTokenizer"),El=n(" and "),ea=r("a"),Cl=n("XLNetTokenizer"),yl=n(`. Based on
`),ho=r("a"),$l=n("BPE"),Fl=n("."),Ml=d(),fo=r("p"),Pl=n("This tokenizer inherits from "),ta=r("a"),ql=n("PreTrainedTokenizerFast"),Ll=n(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Rl=d(),et=r("div"),E(po.$$.fragment),Al=d(),Va=r("p"),zl=n(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Dl=d(),uo=r("ul"),oa=r("li"),xl=n("single sequence: "),Wa=r("code"),Il=n("<s> X </s>"),Sl=d(),ra=r("li"),Bl=n("pair of sequences: "),Ka=r("code"),Ol=n("<s> A </s></s> B </s>"),Nl=d(),qt=r("div"),E(go.$$.fragment),Ul=d(),Ga=r("p"),Hl=n(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Vs=d(),ht=r("h2"),Lt=r("a"),Xa=r("span"),E(_o.$$.fragment),Ql=d(),ja=r("span"),Vl=n("CamembertModel"),Ws=d(),Ie=r("div"),E(vo.$$.fragment),Wl=d(),Ja=r("p"),Kl=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Gl=d(),ko=r("p"),Xl=n("This model inherits from "),aa=r("a"),jl=n("PreTrainedModel"),Jl=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Yl=d(),bo=r("p"),Zl=n("This model is also a PyTorch "),To=r("a"),ed=n("torch.nn.Module"),td=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),od=d(),wo=r("p"),rd=n("This class overrides "),sa=r("a"),ad=n("RobertaModel"),sd=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Ks=d(),ft=r("h2"),Rt=r("a"),Ya=r("span"),E(Eo.$$.fragment),nd=d(),Za=r("span"),id=n("CamembertForCausalLM"),Gs=d(),Se=r("div"),E(Co.$$.fragment),ld=d(),yo=r("p"),dd=n("CamemBERT Model with a "),es=r("code"),md=n("language modeling"),cd=n(" head on top for CLM fine-tuning."),hd=d(),$o=r("p"),fd=n("This model inherits from "),na=r("a"),pd=n("PreTrainedModel"),ud=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gd=d(),Fo=r("p"),_d=n("This model is also a PyTorch "),Mo=r("a"),vd=n("torch.nn.Module"),kd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),bd=d(),Po=r("p"),Td=n("This class overrides "),ia=r("a"),wd=n("RobertaForCausalLM"),Ed=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Xs=d(),pt=r("h2"),At=r("a"),ts=r("span"),E(qo.$$.fragment),Cd=d(),os=r("span"),yd=n("CamembertForMaskedLM"),js=d(),Be=r("div"),E(Lo.$$.fragment),$d=d(),Ro=r("p"),Fd=n("CamemBERT Model with a "),rs=r("code"),Md=n("language modeling"),Pd=n(" head on top."),qd=d(),Ao=r("p"),Ld=n("This model inherits from "),la=r("a"),Rd=n("PreTrainedModel"),Ad=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),zd=d(),zo=r("p"),Dd=n("This model is also a PyTorch "),Do=r("a"),xd=n("torch.nn.Module"),Id=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Sd=d(),xo=r("p"),Bd=n("This class overrides "),da=r("a"),Od=n("RobertaForMaskedLM"),Nd=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Js=d(),ut=r("h2"),zt=r("a"),as=r("span"),E(Io.$$.fragment),Ud=d(),ss=r("span"),Hd=n("CamembertForSequenceClassification"),Ys=d(),Oe=r("div"),E(So.$$.fragment),Qd=d(),ns=r("p"),Vd=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Wd=d(),Bo=r("p"),Kd=n("This model inherits from "),ma=r("a"),Gd=n("PreTrainedModel"),Xd=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),jd=d(),Oo=r("p"),Jd=n("This model is also a PyTorch "),No=r("a"),Yd=n("torch.nn.Module"),Zd=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),em=d(),Uo=r("p"),tm=n("This class overrides "),ca=r("a"),om=n("RobertaForSequenceClassification"),rm=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Zs=d(),gt=r("h2"),Dt=r("a"),is=r("span"),E(Ho.$$.fragment),am=d(),ls=r("span"),sm=n("CamembertForMultipleChoice"),en=d(),Ne=r("div"),E(Qo.$$.fragment),nm=d(),ds=r("p"),im=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),lm=d(),Vo=r("p"),dm=n("This model inherits from "),ha=r("a"),mm=n("PreTrainedModel"),cm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),hm=d(),Wo=r("p"),fm=n("This model is also a PyTorch "),Ko=r("a"),pm=n("torch.nn.Module"),um=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),gm=d(),Go=r("p"),_m=n("This class overrides "),fa=r("a"),vm=n("RobertaForMultipleChoice"),km=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),tn=d(),_t=r("h2"),xt=r("a"),ms=r("span"),E(Xo.$$.fragment),bm=d(),cs=r("span"),Tm=n("CamembertForTokenClassification"),on=d(),Ue=r("div"),E(jo.$$.fragment),wm=d(),hs=r("p"),Em=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Cm=d(),Jo=r("p"),ym=n("This model inherits from "),pa=r("a"),$m=n("PreTrainedModel"),Fm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Mm=d(),Yo=r("p"),Pm=n("This model is also a PyTorch "),Zo=r("a"),qm=n("torch.nn.Module"),Lm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Rm=d(),er=r("p"),Am=n("This class overrides "),ua=r("a"),zm=n("RobertaForTokenClassification"),Dm=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),rn=d(),vt=r("h2"),It=r("a"),fs=r("span"),E(tr.$$.fragment),xm=d(),ps=r("span"),Im=n("CamembertForQuestionAnswering"),an=d(),He=r("div"),E(or.$$.fragment),Sm=d(),St=r("p"),Bm=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),us=r("code"),Om=n("span start logits"),Nm=n(" and "),gs=r("code"),Um=n("span end logits"),Hm=d(),rr=r("p"),Qm=n("This model inherits from "),ga=r("a"),Vm=n("PreTrainedModel"),Wm=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Km=d(),ar=r("p"),Gm=n("This model is also a PyTorch "),sr=r("a"),Xm=n("torch.nn.Module"),jm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Jm=d(),nr=r("p"),Ym=n("This class overrides "),_a=r("a"),Zm=n("RobertaForQuestionAnswering"),ec=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),sn=d(),kt=r("h2"),Bt=r("a"),_s=r("span"),E(ir.$$.fragment),tc=d(),vs=r("span"),oc=n("TFCamembertModel"),nn=d(),Pe=r("div"),E(lr.$$.fragment),rc=d(),ks=r("p"),ac=n("The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),sc=d(),dr=r("p"),nc=n("This model inherits from "),va=r("a"),ic=n("TFPreTrainedModel"),lc=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),dc=d(),mr=r("p"),mc=n("This model is also a "),cr=r("a"),cc=n("tf.keras.Model"),hc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),fc=d(),E(Ot.$$.fragment),pc=d(),hr=r("p"),uc=n("This class overrides "),ka=r("a"),gc=n("TFRobertaModel"),_c=n(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ln=d(),bt=r("h2"),Nt=r("a"),bs=r("span"),E(fr.$$.fragment),vc=d(),Ts=r("span"),kc=n("TFCamembertForMaskedLM"),dn=d(),qe=r("div"),E(pr.$$.fragment),bc=d(),ur=r("p"),Tc=n("CamemBERT Model with a "),ws=r("code"),wc=n("language modeling"),Ec=n(" head on top."),Cc=d(),gr=r("p"),yc=n("This model inherits from "),ba=r("a"),$c=n("TFPreTrainedModel"),Fc=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Mc=d(),_r=r("p"),Pc=n("This model is also a "),vr=r("a"),qc=n("tf.keras.Model"),Lc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Rc=d(),E(Ut.$$.fragment),Ac=d(),kr=r("p"),zc=n("This class overrides "),Ta=r("a"),Dc=n("TFRobertaForMaskedLM"),xc=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),mn=d(),Tt=r("h2"),Ht=r("a"),Es=r("span"),E(br.$$.fragment),Ic=d(),Cs=r("span"),Sc=n("TFCamembertForSequenceClassification"),cn=d(),Le=r("div"),E(Tr.$$.fragment),Bc=d(),ys=r("p"),Oc=n(`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Nc=d(),wr=r("p"),Uc=n("This model inherits from "),wa=r("a"),Hc=n("TFPreTrainedModel"),Qc=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Vc=d(),Er=r("p"),Wc=n("This model is also a "),Cr=r("a"),Kc=n("tf.keras.Model"),Gc=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Xc=d(),E(Qt.$$.fragment),jc=d(),yr=r("p"),Jc=n("This class overrides "),Ea=r("a"),Yc=n("TFRobertaForSequenceClassification"),Zc=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),hn=d(),wt=r("h2"),Vt=r("a"),$s=r("span"),E($r.$$.fragment),eh=d(),Fs=r("span"),th=n("TFCamembertForMultipleChoice"),fn=d(),Re=r("div"),E(Fr.$$.fragment),oh=d(),Ms=r("p"),rh=n(`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),ah=d(),Mr=r("p"),sh=n("This model inherits from "),Ca=r("a"),nh=n("TFPreTrainedModel"),ih=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),lh=d(),Pr=r("p"),dh=n("This model is also a "),qr=r("a"),mh=n("tf.keras.Model"),ch=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),hh=d(),E(Wt.$$.fragment),fh=d(),Lr=r("p"),ph=n("This class overrides "),ya=r("a"),uh=n("TFRobertaForMultipleChoice"),gh=n(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),pn=d(),Et=r("h2"),Kt=r("a"),Ps=r("span"),E(Rr.$$.fragment),_h=d(),qs=r("span"),vh=n("TFCamembertForTokenClassification"),un=d(),Ae=r("div"),E(Ar.$$.fragment),kh=d(),Ls=r("p"),bh=n(`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),Th=d(),zr=r("p"),wh=n("This model inherits from "),$a=r("a"),Eh=n("TFPreTrainedModel"),Ch=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),yh=d(),Dr=r("p"),$h=n("This model is also a "),xr=r("a"),Fh=n("tf.keras.Model"),Mh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ph=d(),E(Gt.$$.fragment),qh=d(),Ir=r("p"),Lh=n("This class overrides "),Fa=r("a"),Rh=n("TFRobertaForTokenClassification"),Ah=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),gn=d(),Ct=r("h2"),Xt=r("a"),Rs=r("span"),E(Sr.$$.fragment),zh=d(),As=r("span"),Dh=n("TFCamembertForQuestionAnswering"),_n=d(),ze=r("div"),E(Br.$$.fragment),xh=d(),yt=r("p"),Ih=n(`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),zs=r("code"),Sh=n("span start logits"),Bh=n(" and "),Ds=r("code"),Oh=n("span end logits"),Nh=n(")."),Uh=d(),Or=r("p"),Hh=n("This model inherits from "),Ma=r("a"),Qh=n("TFPreTrainedModel"),Vh=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Wh=d(),Nr=r("p"),Kh=n("This model is also a "),Ur=r("a"),Gh=n("tf.keras.Model"),Xh=n(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),jh=d(),E(jt.$$.fragment),Jh=d(),Hr=r("p"),Yh=n("This class overrides "),Pa=r("a"),Zh=n("TFRobertaForQuestionAnswering"),ef=n(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),this.h()},l(o){const f=zu('[data-svelte="svelte-1phssyn"]',document.head);b=a(f,"META",{name:!0,content:!0}),f.forEach(t),Z=m(o),A=a(o,"H1",{class:!0});var Qr=s(A);_=a(Qr,"A",{id:!0,class:!0,href:!0});var xs=s(_);z=a(xs,"SPAN",{});var Is=s(z);C(G.$$.fragment,Is),Is.forEach(t),xs.forEach(t),le=m(Qr),D=a(Qr,"SPAN",{});var Ss=s(D);de=i(Ss,"CamemBERT"),Ss.forEach(t),Qr.forEach(t),Q=m(o),u=a(o,"H2",{class:!0});var Vr=s(u);K=a(Vr,"A",{id:!0,class:!0,href:!0});var Bs=s(K);x=a(Bs,"SPAN",{});var sf=s(x);C(X.$$.fragment,sf),sf.forEach(t),Bs.forEach(t),me=m(Vr),I=a(Vr,"SPAN",{});var nf=s(I);ce=i(nf,"Overview"),nf.forEach(t),Vr.forEach(t),ae=m(o),H=a(o,"P",{});var kn=s(H);P=i(kn,"The CamemBERT model was proposed in "),j=a(kn,"A",{href:!0,rel:!0});var lf=s(j);V=i(lf,"CamemBERT: a Tasty French Language Model"),lf.forEach(t),g=i(kn,` by
Louis Martin, Benjamin Muller, Pedro Javier Ortiz Su\xE1rez, Yoann Dupont, Laurent Romary, \xC9ric Villemonte de la
Clergerie, Djam\xE9 Seddah, and Beno\xEEt Sagot. It is based on Facebook\u2019s RoBERTa model released in 2019. It is a model
trained on 138GB of French text.`),kn.forEach(t),k=m(o),ee=a(o,"P",{});var df=s(ee);O=i(df,"The abstract from the paper is the following:"),df.forEach(t),se=m(o),te=a(o,"P",{});var mf=s(te);S=a(mf,"EM",{});var cf=s(S);he=i(cf,`Pretrained language models are now ubiquitous in Natural Language Processing. Despite their success, most available
models have either been trained on English data or on the concatenation of data in multiple languages. This makes
practical use of such models \u2014in all languages except English\u2014 very limited. Aiming to address this issue for French,
we release CamemBERT, a French version of the Bi-directional Encoders for Transformers (BERT). We measure the
performance of CamemBERT compared to multilingual models in multiple downstream tasks, namely part-of-speech tagging,
dependency parsing, named-entity recognition, and natural language inference. CamemBERT improves the state of the art
for most of the tasks considered. We release the pretrained model for CamemBERT hoping to foster research and
downstream applications for French NLP.`),cf.forEach(t),mf.forEach(t),ne=m(o),v=a(o,"P",{});var hf=s(v);fe=i(hf,"Tips:"),hf.forEach(t),B=m(o),oe=a(o,"UL",{});var ff=s(oe);J=a(ff,"LI",{});var bn=s(J);N=i(bn,"This implementation is the same as RoBERTa. Refer to the "),re=a(bn,"A",{href:!0});var pf=s(re);pe=i(pf,"documentation of RoBERTa"),pf.forEach(t),q=i(bn,` for usage examples
as well as the information relative to the inputs and outputs.`),bn.forEach(t),ff.forEach(t),ie=m(o),w=a(o,"P",{});var qa=s(w);ue=i(qa,"This model was contributed by "),l=a(qa,"A",{href:!0,rel:!0});var uf=s(l);p=i(uf,"camembert"),uf.forEach(t),W=i(qa,". The original code can be found "),ke=a(qa,"A",{href:!0,rel:!0});var gf=s(ke);Ce=i(gf,"here"),gf.forEach(t),L=i(qa,"."),qa.forEach(t),Te=m(o),ge=a(o,"H2",{class:!0});var Tn=s(ge);ve=a(Tn,"A",{id:!0,class:!0,href:!0});var _f=s(ve);T=a(_f,"SPAN",{});var vf=s(T);C(R.$$.fragment,vf),vf.forEach(t),_f.forEach(t),ye=m(Tn),be=a(Tn,"SPAN",{});var kf=s(be);U=i(kf,"CamembertConfig"),kf.forEach(t),Tn.forEach(t),we=m(o),_e=a(o,"DIV",{class:!0});var wn=s(_e);C(Y.$$.fragment,wn),$e=m(wn),Yt=a(wn,"P",{});var En=s(Yt);Di=i(En,"This class overrides "),Wr=a(En,"A",{href:!0});var bf=s(Wr);xi=i(bf,"RobertaConfig"),bf.forEach(t),Ii=i(En,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),En.forEach(t),wn.forEach(t),Ns=m(o),mt=a(o,"H2",{class:!0});var Cn=s(mt);$t=a(Cn,"A",{id:!0,class:!0,href:!0});var Tf=s($t);Da=a(Tf,"SPAN",{});var wf=s(Da);C(Zt.$$.fragment,wf),wf.forEach(t),Tf.forEach(t),Si=m(Cn),xa=a(Cn,"SPAN",{});var Ef=s(xa);Bi=i(Ef,"CamembertTokenizer"),Ef.forEach(t),Cn.forEach(t),Us=m(o),Fe=a(o,"DIV",{class:!0});var Qe=s(Fe);C(eo.$$.fragment,Qe),Oi=m(Qe),Ye=a(Qe,"P",{});var Jt=s(Ye);Ni=i(Jt,"Adapted from "),Kr=a(Jt,"A",{href:!0});var Cf=s(Kr);Ui=i(Cf,"RobertaTokenizer"),Cf.forEach(t),Hi=i(Jt," and "),Gr=a(Jt,"A",{href:!0});var yf=s(Gr);Qi=i(yf,"XLNetTokenizer"),yf.forEach(t),Vi=i(Jt,`. Construct a CamemBERT tokenizer. Based on
`),to=a(Jt,"A",{href:!0,rel:!0});var $f=s(to);Wi=i($f,"SentencePiece"),$f.forEach(t),Ki=i(Jt,"."),Jt.forEach(t),Gi=m(Qe),oo=a(Qe,"P",{});var yn=s(oo);Xi=i(yn,"This tokenizer inherits from "),Xr=a(yn,"A",{href:!0});var Ff=s(Xr);ji=i(Ff,"PreTrainedTokenizer"),Ff.forEach(t),Ji=i(yn,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),yn.forEach(t),Yi=m(Qe),Ze=a(Qe,"DIV",{class:!0});var La=s(Ze);C(ro.$$.fragment,La),Zi=m(La),Ia=a(La,"P",{});var Mf=s(Ia);el=i(Mf,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Mf.forEach(t),tl=m(La),ao=a(La,"UL",{});var $n=s(ao);jr=a($n,"LI",{});var tf=s(jr);ol=i(tf,"single sequence: "),Sa=a(tf,"CODE",{});var Pf=s(Sa);rl=i(Pf,"<s> X </s>"),Pf.forEach(t),tf.forEach(t),al=m($n),Jr=a($n,"LI",{});var of=s(Jr);sl=i(of,"pair of sequences: "),Ba=a(of,"CODE",{});var qf=s(Ba);nl=i(qf,"<s> A </s></s> B </s>"),qf.forEach(t),of.forEach(t),$n.forEach(t),La.forEach(t),il=m(Qe),Ft=a(Qe,"DIV",{class:!0});var Fn=s(Ft);C(so.$$.fragment,Fn),ll=m(Fn),no=a(Fn,"P",{});var Mn=s(no);dl=i(Mn,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Oa=a(Mn,"CODE",{});var Lf=s(Oa);ml=i(Lf,"prepare_for_model"),Lf.forEach(t),cl=i(Mn," method."),Mn.forEach(t),Fn.forEach(t),hl=m(Qe),Mt=a(Qe,"DIV",{class:!0});var Pn=s(Mt);C(io.$$.fragment,Pn),fl=m(Pn),Na=a(Pn,"P",{});var Rf=s(Na);pl=i(Rf,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Rf.forEach(t),Pn.forEach(t),ul=m(Qe),Yr=a(Qe,"DIV",{class:!0});var Af=s(Yr);C(lo.$$.fragment,Af),Af.forEach(t),Qe.forEach(t),Hs=m(o),ct=a(o,"H2",{class:!0});var qn=s(ct);Pt=a(qn,"A",{id:!0,class:!0,href:!0});var zf=s(Pt);Ua=a(zf,"SPAN",{});var Df=s(Ua);C(mo.$$.fragment,Df),Df.forEach(t),zf.forEach(t),gl=m(qn),Ha=a(qn,"SPAN",{});var xf=s(Ha);_l=i(xf,"CamembertTokenizerFast"),xf.forEach(t),qn.forEach(t),Qs=m(o),xe=a(o,"DIV",{class:!0});var tt=s(xe);C(co.$$.fragment,tt),vl=m(tt),Ve=a(tt,"P",{});var ot=s(Ve);kl=i(ot,"Construct a \u201Cfast\u201D CamemBERT tokenizer (backed by HuggingFace\u2019s "),Qa=a(ot,"EM",{});var If=s(Qa);bl=i(If,"tokenizers"),If.forEach(t),Tl=i(ot,` library). Adapted from
`),Zr=a(ot,"A",{href:!0});var Sf=s(Zr);wl=i(Sf,"RobertaTokenizer"),Sf.forEach(t),El=i(ot," and "),ea=a(ot,"A",{href:!0});var Bf=s(ea);Cl=i(Bf,"XLNetTokenizer"),Bf.forEach(t),yl=i(ot,`. Based on
`),ho=a(ot,"A",{href:!0,rel:!0});var Of=s(ho);$l=i(Of,"BPE"),Of.forEach(t),Fl=i(ot,"."),ot.forEach(t),Ml=m(tt),fo=a(tt,"P",{});var Ln=s(fo);Pl=i(Ln,"This tokenizer inherits from "),ta=a(Ln,"A",{href:!0});var Nf=s(ta);ql=i(Nf,"PreTrainedTokenizerFast"),Nf.forEach(t),Ll=i(Ln,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Ln.forEach(t),Rl=m(tt),et=a(tt,"DIV",{class:!0});var Ra=s(et);C(po.$$.fragment,Ra),Al=m(Ra),Va=a(Ra,"P",{});var Uf=s(Va);zl=i(Uf,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. An CamemBERT sequence has the following format:`),Uf.forEach(t),Dl=m(Ra),uo=a(Ra,"UL",{});var Rn=s(uo);oa=a(Rn,"LI",{});var rf=s(oa);xl=i(rf,"single sequence: "),Wa=a(rf,"CODE",{});var Hf=s(Wa);Il=i(Hf,"<s> X </s>"),Hf.forEach(t),rf.forEach(t),Sl=m(Rn),ra=a(Rn,"LI",{});var af=s(ra);Bl=i(af,"pair of sequences: "),Ka=a(af,"CODE",{});var Qf=s(Ka);Ol=i(Qf,"<s> A </s></s> B </s>"),Qf.forEach(t),af.forEach(t),Rn.forEach(t),Ra.forEach(t),Nl=m(tt),qt=a(tt,"DIV",{class:!0});var An=s(qt);C(go.$$.fragment,An),Ul=m(An),Ga=a(An,"P",{});var Vf=s(Ga);Hl=i(Vf,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. CamemBERT, like
RoBERTa, does not make use of token type ids, therefore a list of zeros is returned.`),Vf.forEach(t),An.forEach(t),tt.forEach(t),Vs=m(o),ht=a(o,"H2",{class:!0});var zn=s(ht);Lt=a(zn,"A",{id:!0,class:!0,href:!0});var Wf=s(Lt);Xa=a(Wf,"SPAN",{});var Kf=s(Xa);C(_o.$$.fragment,Kf),Kf.forEach(t),Wf.forEach(t),Ql=m(zn),ja=a(zn,"SPAN",{});var Gf=s(ja);Vl=i(Gf,"CamembertModel"),Gf.forEach(t),zn.forEach(t),Ws=m(o),Ie=a(o,"DIV",{class:!0});var rt=s(Ie);C(vo.$$.fragment,rt),Wl=m(rt),Ja=a(rt,"P",{});var Xf=s(Ja);Kl=i(Xf,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Xf.forEach(t),Gl=m(rt),ko=a(rt,"P",{});var Dn=s(ko);Xl=i(Dn,"This model inherits from "),aa=a(Dn,"A",{href:!0});var jf=s(aa);jl=i(jf,"PreTrainedModel"),jf.forEach(t),Jl=i(Dn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Dn.forEach(t),Yl=m(rt),bo=a(rt,"P",{});var xn=s(bo);Zl=i(xn,"This model is also a PyTorch "),To=a(xn,"A",{href:!0,rel:!0});var Jf=s(To);ed=i(Jf,"torch.nn.Module"),Jf.forEach(t),td=i(xn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),xn.forEach(t),od=m(rt),wo=a(rt,"P",{});var In=s(wo);rd=i(In,"This class overrides "),sa=a(In,"A",{href:!0});var Yf=s(sa);ad=i(Yf,"RobertaModel"),Yf.forEach(t),sd=i(In,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),In.forEach(t),rt.forEach(t),Ks=m(o),ft=a(o,"H2",{class:!0});var Sn=s(ft);Rt=a(Sn,"A",{id:!0,class:!0,href:!0});var Zf=s(Rt);Ya=a(Zf,"SPAN",{});var ep=s(Ya);C(Eo.$$.fragment,ep),ep.forEach(t),Zf.forEach(t),nd=m(Sn),Za=a(Sn,"SPAN",{});var tp=s(Za);id=i(tp,"CamembertForCausalLM"),tp.forEach(t),Sn.forEach(t),Gs=m(o),Se=a(o,"DIV",{class:!0});var at=s(Se);C(Co.$$.fragment,at),ld=m(at),yo=a(at,"P",{});var Bn=s(yo);dd=i(Bn,"CamemBERT Model with a "),es=a(Bn,"CODE",{});var op=s(es);md=i(op,"language modeling"),op.forEach(t),cd=i(Bn," head on top for CLM fine-tuning."),Bn.forEach(t),hd=m(at),$o=a(at,"P",{});var On=s($o);fd=i(On,"This model inherits from "),na=a(On,"A",{href:!0});var rp=s(na);pd=i(rp,"PreTrainedModel"),rp.forEach(t),ud=i(On,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),On.forEach(t),gd=m(at),Fo=a(at,"P",{});var Nn=s(Fo);_d=i(Nn,"This model is also a PyTorch "),Mo=a(Nn,"A",{href:!0,rel:!0});var ap=s(Mo);vd=i(ap,"torch.nn.Module"),ap.forEach(t),kd=i(Nn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Nn.forEach(t),bd=m(at),Po=a(at,"P",{});var Un=s(Po);Td=i(Un,"This class overrides "),ia=a(Un,"A",{href:!0});var sp=s(ia);wd=i(sp,"RobertaForCausalLM"),sp.forEach(t),Ed=i(Un,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Un.forEach(t),at.forEach(t),Xs=m(o),pt=a(o,"H2",{class:!0});var Hn=s(pt);At=a(Hn,"A",{id:!0,class:!0,href:!0});var np=s(At);ts=a(np,"SPAN",{});var ip=s(ts);C(qo.$$.fragment,ip),ip.forEach(t),np.forEach(t),Cd=m(Hn),os=a(Hn,"SPAN",{});var lp=s(os);yd=i(lp,"CamembertForMaskedLM"),lp.forEach(t),Hn.forEach(t),js=m(o),Be=a(o,"DIV",{class:!0});var st=s(Be);C(Lo.$$.fragment,st),$d=m(st),Ro=a(st,"P",{});var Qn=s(Ro);Fd=i(Qn,"CamemBERT Model with a "),rs=a(Qn,"CODE",{});var dp=s(rs);Md=i(dp,"language modeling"),dp.forEach(t),Pd=i(Qn," head on top."),Qn.forEach(t),qd=m(st),Ao=a(st,"P",{});var Vn=s(Ao);Ld=i(Vn,"This model inherits from "),la=a(Vn,"A",{href:!0});var mp=s(la);Rd=i(mp,"PreTrainedModel"),mp.forEach(t),Ad=i(Vn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Vn.forEach(t),zd=m(st),zo=a(st,"P",{});var Wn=s(zo);Dd=i(Wn,"This model is also a PyTorch "),Do=a(Wn,"A",{href:!0,rel:!0});var cp=s(Do);xd=i(cp,"torch.nn.Module"),cp.forEach(t),Id=i(Wn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Wn.forEach(t),Sd=m(st),xo=a(st,"P",{});var Kn=s(xo);Bd=i(Kn,"This class overrides "),da=a(Kn,"A",{href:!0});var hp=s(da);Od=i(hp,"RobertaForMaskedLM"),hp.forEach(t),Nd=i(Kn,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Kn.forEach(t),st.forEach(t),Js=m(o),ut=a(o,"H2",{class:!0});var Gn=s(ut);zt=a(Gn,"A",{id:!0,class:!0,href:!0});var fp=s(zt);as=a(fp,"SPAN",{});var pp=s(as);C(Io.$$.fragment,pp),pp.forEach(t),fp.forEach(t),Ud=m(Gn),ss=a(Gn,"SPAN",{});var up=s(ss);Hd=i(up,"CamembertForSequenceClassification"),up.forEach(t),Gn.forEach(t),Ys=m(o),Oe=a(o,"DIV",{class:!0});var nt=s(Oe);C(So.$$.fragment,nt),Qd=m(nt),ns=a(nt,"P",{});var gp=s(ns);Vd=i(gp,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),gp.forEach(t),Wd=m(nt),Bo=a(nt,"P",{});var Xn=s(Bo);Kd=i(Xn,"This model inherits from "),ma=a(Xn,"A",{href:!0});var _p=s(ma);Gd=i(_p,"PreTrainedModel"),_p.forEach(t),Xd=i(Xn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xn.forEach(t),jd=m(nt),Oo=a(nt,"P",{});var jn=s(Oo);Jd=i(jn,"This model is also a PyTorch "),No=a(jn,"A",{href:!0,rel:!0});var vp=s(No);Yd=i(vp,"torch.nn.Module"),vp.forEach(t),Zd=i(jn,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),jn.forEach(t),em=m(nt),Uo=a(nt,"P",{});var Jn=s(Uo);tm=i(Jn,"This class overrides "),ca=a(Jn,"A",{href:!0});var kp=s(ca);om=i(kp,"RobertaForSequenceClassification"),kp.forEach(t),rm=i(Jn,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Jn.forEach(t),nt.forEach(t),Zs=m(o),gt=a(o,"H2",{class:!0});var Yn=s(gt);Dt=a(Yn,"A",{id:!0,class:!0,href:!0});var bp=s(Dt);is=a(bp,"SPAN",{});var Tp=s(is);C(Ho.$$.fragment,Tp),Tp.forEach(t),bp.forEach(t),am=m(Yn),ls=a(Yn,"SPAN",{});var wp=s(ls);sm=i(wp,"CamembertForMultipleChoice"),wp.forEach(t),Yn.forEach(t),en=m(o),Ne=a(o,"DIV",{class:!0});var it=s(Ne);C(Qo.$$.fragment,it),nm=m(it),ds=a(it,"P",{});var Ep=s(ds);im=i(Ep,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),Ep.forEach(t),lm=m(it),Vo=a(it,"P",{});var Zn=s(Vo);dm=i(Zn,"This model inherits from "),ha=a(Zn,"A",{href:!0});var Cp=s(ha);mm=i(Cp,"PreTrainedModel"),Cp.forEach(t),cm=i(Zn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zn.forEach(t),hm=m(it),Wo=a(it,"P",{});var ei=s(Wo);fm=i(ei,"This model is also a PyTorch "),Ko=a(ei,"A",{href:!0,rel:!0});var yp=s(Ko);pm=i(yp,"torch.nn.Module"),yp.forEach(t),um=i(ei,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ei.forEach(t),gm=m(it),Go=a(it,"P",{});var ti=s(Go);_m=i(ti,"This class overrides "),fa=a(ti,"A",{href:!0});var $p=s(fa);vm=i($p,"RobertaForMultipleChoice"),$p.forEach(t),km=i(ti,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),ti.forEach(t),it.forEach(t),tn=m(o),_t=a(o,"H2",{class:!0});var oi=s(_t);xt=a(oi,"A",{id:!0,class:!0,href:!0});var Fp=s(xt);ms=a(Fp,"SPAN",{});var Mp=s(ms);C(Xo.$$.fragment,Mp),Mp.forEach(t),Fp.forEach(t),bm=m(oi),cs=a(oi,"SPAN",{});var Pp=s(cs);Tm=i(Pp,"CamembertForTokenClassification"),Pp.forEach(t),oi.forEach(t),on=m(o),Ue=a(o,"DIV",{class:!0});var lt=s(Ue);C(jo.$$.fragment,lt),wm=m(lt),hs=a(lt,"P",{});var qp=s(hs);Em=i(qp,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),qp.forEach(t),Cm=m(lt),Jo=a(lt,"P",{});var ri=s(Jo);ym=i(ri,"This model inherits from "),pa=a(ri,"A",{href:!0});var Lp=s(pa);$m=i(Lp,"PreTrainedModel"),Lp.forEach(t),Fm=i(ri,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ri.forEach(t),Mm=m(lt),Yo=a(lt,"P",{});var ai=s(Yo);Pm=i(ai,"This model is also a PyTorch "),Zo=a(ai,"A",{href:!0,rel:!0});var Rp=s(Zo);qm=i(Rp,"torch.nn.Module"),Rp.forEach(t),Lm=i(ai,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ai.forEach(t),Rm=m(lt),er=a(lt,"P",{});var si=s(er);Am=i(si,"This class overrides "),ua=a(si,"A",{href:!0});var Ap=s(ua);zm=i(Ap,"RobertaForTokenClassification"),Ap.forEach(t),Dm=i(si,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),si.forEach(t),lt.forEach(t),rn=m(o),vt=a(o,"H2",{class:!0});var ni=s(vt);It=a(ni,"A",{id:!0,class:!0,href:!0});var zp=s(It);fs=a(zp,"SPAN",{});var Dp=s(fs);C(tr.$$.fragment,Dp),Dp.forEach(t),zp.forEach(t),xm=m(ni),ps=a(ni,"SPAN",{});var xp=s(ps);Im=i(xp,"CamembertForQuestionAnswering"),xp.forEach(t),ni.forEach(t),an=m(o),He=a(o,"DIV",{class:!0});var dt=s(He);C(or.$$.fragment,dt),Sm=m(dt),St=a(dt,"P",{});var Os=s(St);Bm=i(Os,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),us=a(Os,"CODE",{});var Ip=s(us);Om=i(Ip,"span start logits"),Ip.forEach(t),Nm=i(Os," and "),gs=a(Os,"CODE",{});var Sp=s(gs);Um=i(Sp,"span end logits"),Sp.forEach(t),Os.forEach(t),Hm=m(dt),rr=a(dt,"P",{});var ii=s(rr);Qm=i(ii,"This model inherits from "),ga=a(ii,"A",{href:!0});var Bp=s(ga);Vm=i(Bp,"PreTrainedModel"),Bp.forEach(t),Wm=i(ii,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ii.forEach(t),Km=m(dt),ar=a(dt,"P",{});var li=s(ar);Gm=i(li,"This model is also a PyTorch "),sr=a(li,"A",{href:!0,rel:!0});var Op=s(sr);Xm=i(Op,"torch.nn.Module"),Op.forEach(t),jm=i(li,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),li.forEach(t),Jm=m(dt),nr=a(dt,"P",{});var di=s(nr);Ym=i(di,"This class overrides "),_a=a(di,"A",{href:!0});var Np=s(_a);Zm=i(Np,"RobertaForQuestionAnswering"),Np.forEach(t),ec=i(di,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),di.forEach(t),dt.forEach(t),sn=m(o),kt=a(o,"H2",{class:!0});var mi=s(kt);Bt=a(mi,"A",{id:!0,class:!0,href:!0});var Up=s(Bt);_s=a(Up,"SPAN",{});var Hp=s(_s);C(ir.$$.fragment,Hp),Hp.forEach(t),Up.forEach(t),tc=m(mi),vs=a(mi,"SPAN",{});var Qp=s(vs);oc=i(Qp,"TFCamembertModel"),Qp.forEach(t),mi.forEach(t),nn=m(o),Pe=a(o,"DIV",{class:!0});var We=s(Pe);C(lr.$$.fragment,We),rc=m(We),ks=a(We,"P",{});var Vp=s(ks);ac=i(Vp,"The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top."),Vp.forEach(t),sc=m(We),dr=a(We,"P",{});var ci=s(dr);nc=i(ci,"This model inherits from "),va=a(ci,"A",{href:!0});var Wp=s(va);ic=i(Wp,"TFPreTrainedModel"),Wp.forEach(t),lc=i(ci,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ci.forEach(t),dc=m(We),mr=a(We,"P",{});var hi=s(mr);mc=i(hi,"This model is also a "),cr=a(hi,"A",{href:!0,rel:!0});var Kp=s(cr);cc=i(Kp,"tf.keras.Model"),Kp.forEach(t),hc=i(hi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),hi.forEach(t),fc=m(We),C(Ot.$$.fragment,We),pc=m(We),hr=a(We,"P",{});var fi=s(hr);uc=i(fi,"This class overrides "),ka=a(fi,"A",{href:!0});var Gp=s(ka);gc=i(Gp,"TFRobertaModel"),Gp.forEach(t),_c=i(fi,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),fi.forEach(t),We.forEach(t),ln=m(o),bt=a(o,"H2",{class:!0});var pi=s(bt);Nt=a(pi,"A",{id:!0,class:!0,href:!0});var Xp=s(Nt);bs=a(Xp,"SPAN",{});var jp=s(bs);C(fr.$$.fragment,jp),jp.forEach(t),Xp.forEach(t),vc=m(pi),Ts=a(pi,"SPAN",{});var Jp=s(Ts);kc=i(Jp,"TFCamembertForMaskedLM"),Jp.forEach(t),pi.forEach(t),dn=m(o),qe=a(o,"DIV",{class:!0});var Ke=s(qe);C(pr.$$.fragment,Ke),bc=m(Ke),ur=a(Ke,"P",{});var ui=s(ur);Tc=i(ui,"CamemBERT Model with a "),ws=a(ui,"CODE",{});var Yp=s(ws);wc=i(Yp,"language modeling"),Yp.forEach(t),Ec=i(ui," head on top."),ui.forEach(t),Cc=m(Ke),gr=a(Ke,"P",{});var gi=s(gr);yc=i(gi,"This model inherits from "),ba=a(gi,"A",{href:!0});var Zp=s(ba);$c=i(Zp,"TFPreTrainedModel"),Zp.forEach(t),Fc=i(gi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gi.forEach(t),Mc=m(Ke),_r=a(Ke,"P",{});var _i=s(_r);Pc=i(_i,"This model is also a "),vr=a(_i,"A",{href:!0,rel:!0});var eu=s(vr);qc=i(eu,"tf.keras.Model"),eu.forEach(t),Lc=i(_i,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),_i.forEach(t),Rc=m(Ke),C(Ut.$$.fragment,Ke),Ac=m(Ke),kr=a(Ke,"P",{});var vi=s(kr);zc=i(vi,"This class overrides "),Ta=a(vi,"A",{href:!0});var tu=s(Ta);Dc=i(tu,"TFRobertaForMaskedLM"),tu.forEach(t),xc=i(vi,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),vi.forEach(t),Ke.forEach(t),mn=m(o),Tt=a(o,"H2",{class:!0});var ki=s(Tt);Ht=a(ki,"A",{id:!0,class:!0,href:!0});var ou=s(Ht);Es=a(ou,"SPAN",{});var ru=s(Es);C(br.$$.fragment,ru),ru.forEach(t),ou.forEach(t),Ic=m(ki),Cs=a(ki,"SPAN",{});var au=s(Cs);Sc=i(au,"TFCamembertForSequenceClassification"),au.forEach(t),ki.forEach(t),cn=m(o),Le=a(o,"DIV",{class:!0});var Ge=s(Le);C(Tr.$$.fragment,Ge),Bc=m(Ge),ys=a(Ge,"P",{});var su=s(ys);Oc=i(su,`CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),su.forEach(t),Nc=m(Ge),wr=a(Ge,"P",{});var bi=s(wr);Uc=i(bi,"This model inherits from "),wa=a(bi,"A",{href:!0});var nu=s(wa);Hc=i(nu,"TFPreTrainedModel"),nu.forEach(t),Qc=i(bi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),bi.forEach(t),Vc=m(Ge),Er=a(Ge,"P",{});var Ti=s(Er);Wc=i(Ti,"This model is also a "),Cr=a(Ti,"A",{href:!0,rel:!0});var iu=s(Cr);Kc=i(iu,"tf.keras.Model"),iu.forEach(t),Gc=i(Ti,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ti.forEach(t),Xc=m(Ge),C(Qt.$$.fragment,Ge),jc=m(Ge),yr=a(Ge,"P",{});var wi=s(yr);Jc=i(wi,"This class overrides "),Ea=a(wi,"A",{href:!0});var lu=s(Ea);Yc=i(lu,"TFRobertaForSequenceClassification"),lu.forEach(t),Zc=i(wi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),wi.forEach(t),Ge.forEach(t),hn=m(o),wt=a(o,"H2",{class:!0});var Ei=s(wt);Vt=a(Ei,"A",{id:!0,class:!0,href:!0});var du=s(Vt);$s=a(du,"SPAN",{});var mu=s($s);C($r.$$.fragment,mu),mu.forEach(t),du.forEach(t),eh=m(Ei),Fs=a(Ei,"SPAN",{});var cu=s(Fs);th=i(cu,"TFCamembertForMultipleChoice"),cu.forEach(t),Ei.forEach(t),fn=m(o),Re=a(o,"DIV",{class:!0});var Xe=s(Re);C(Fr.$$.fragment,Xe),oh=m(Xe),Ms=a(Xe,"P",{});var hu=s(Ms);rh=i(hu,`CamemBERT Model with a multiple choice classification head on top (a linear layer on top of the pooled output and a
softmax) e.g. for RocStories/SWAG tasks.`),hu.forEach(t),ah=m(Xe),Mr=a(Xe,"P",{});var Ci=s(Mr);sh=i(Ci,"This model inherits from "),Ca=a(Ci,"A",{href:!0});var fu=s(Ca);nh=i(fu,"TFPreTrainedModel"),fu.forEach(t),ih=i(Ci,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ci.forEach(t),lh=m(Xe),Pr=a(Xe,"P",{});var yi=s(Pr);dh=i(yi,"This model is also a "),qr=a(yi,"A",{href:!0,rel:!0});var pu=s(qr);mh=i(pu,"tf.keras.Model"),pu.forEach(t),ch=i(yi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),yi.forEach(t),hh=m(Xe),C(Wt.$$.fragment,Xe),fh=m(Xe),Lr=a(Xe,"P",{});var $i=s(Lr);ph=i($i,"This class overrides "),ya=a($i,"A",{href:!0});var uu=s(ya);uh=i(uu,"TFRobertaForMultipleChoice"),uu.forEach(t),gh=i($i,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),$i.forEach(t),Xe.forEach(t),pn=m(o),Et=a(o,"H2",{class:!0});var Fi=s(Et);Kt=a(Fi,"A",{id:!0,class:!0,href:!0});var gu=s(Kt);Ps=a(gu,"SPAN",{});var _u=s(Ps);C(Rr.$$.fragment,_u),_u.forEach(t),gu.forEach(t),_h=m(Fi),qs=a(Fi,"SPAN",{});var vu=s(qs);vh=i(vu,"TFCamembertForTokenClassification"),vu.forEach(t),Fi.forEach(t),un=m(o),Ae=a(o,"DIV",{class:!0});var je=s(Ae);C(Ar.$$.fragment,je),kh=m(je),Ls=a(je,"P",{});var ku=s(Ls);bh=i(ku,`CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g.
for Named-Entity-Recognition (NER) tasks.`),ku.forEach(t),Th=m(je),zr=a(je,"P",{});var Mi=s(zr);wh=i(Mi,"This model inherits from "),$a=a(Mi,"A",{href:!0});var bu=s($a);Eh=i(bu,"TFPreTrainedModel"),bu.forEach(t),Ch=i(Mi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Mi.forEach(t),yh=m(je),Dr=a(je,"P",{});var Pi=s(Dr);$h=i(Pi,"This model is also a "),xr=a(Pi,"A",{href:!0,rel:!0});var Tu=s(xr);Fh=i(Tu,"tf.keras.Model"),Tu.forEach(t),Mh=i(Pi,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Pi.forEach(t),Ph=m(je),C(Gt.$$.fragment,je),qh=m(je),Ir=a(je,"P",{});var qi=s(Ir);Lh=i(qi,"This class overrides "),Fa=a(qi,"A",{href:!0});var wu=s(Fa);Rh=i(wu,"TFRobertaForTokenClassification"),wu.forEach(t),Ah=i(qi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),qi.forEach(t),je.forEach(t),gn=m(o),Ct=a(o,"H2",{class:!0});var Li=s(Ct);Xt=a(Li,"A",{id:!0,class:!0,href:!0});var Eu=s(Xt);Rs=a(Eu,"SPAN",{});var Cu=s(Rs);C(Sr.$$.fragment,Cu),Cu.forEach(t),Eu.forEach(t),zh=m(Li),As=a(Li,"SPAN",{});var yu=s(As);Dh=i(yu,"TFCamembertForQuestionAnswering"),yu.forEach(t),Li.forEach(t),_n=m(o),ze=a(o,"DIV",{class:!0});var Je=s(ze);C(Br.$$.fragment,Je),xh=m(Je),yt=a(Je,"P",{});var Aa=s(yt);Ih=i(Aa,`CamemBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear
layers on top of the hidden-states output to compute `),zs=a(Aa,"CODE",{});var $u=s(zs);Sh=i($u,"span start logits"),$u.forEach(t),Bh=i(Aa," and "),Ds=a(Aa,"CODE",{});var Fu=s(Ds);Oh=i(Fu,"span end logits"),Fu.forEach(t),Nh=i(Aa,")."),Aa.forEach(t),Uh=m(Je),Or=a(Je,"P",{});var Ri=s(Or);Hh=i(Ri,"This model inherits from "),Ma=a(Ri,"A",{href:!0});var Mu=s(Ma);Qh=i(Mu,"TFPreTrainedModel"),Mu.forEach(t),Vh=i(Ri,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ri.forEach(t),Wh=m(Je),Nr=a(Je,"P",{});var Ai=s(Nr);Kh=i(Ai,"This model is also a "),Ur=a(Ai,"A",{href:!0,rel:!0});var Pu=s(Ur);Gh=i(Pu,"tf.keras.Model"),Pu.forEach(t),Xh=i(Ai,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ai.forEach(t),jh=m(Je),C(jt.$$.fragment,Je),Jh=m(Je),Hr=a(Je,"P",{});var zi=s(Hr);Yh=i(zi,"This class overrides "),Pa=a(zi,"A",{href:!0});var qu=s(Pa);Zh=i(qu,"TFRobertaForQuestionAnswering"),qu.forEach(t),ef=i(zi,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),zi.forEach(t),Je.forEach(t),this.h()},h(){c(b,"name","hf:doc:metadata"),c(b,"content",JSON.stringify(Uu)),c(_,"id","camembert"),c(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_,"href","#camembert"),c(A,"class","relative group"),c(K,"id","overview"),c(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K,"href","#overview"),c(u,"class","relative group"),c(j,"href","https://arxiv.org/abs/1911.03894"),c(j,"rel","nofollow"),c(re,"href","roberta"),c(l,"href","https://huggingface.co/camembert"),c(l,"rel","nofollow"),c(ke,"href","https://camembert-model.fr/"),c(ke,"rel","nofollow"),c(ve,"id","transformers.CamembertConfig"),c(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ve,"href","#transformers.CamembertConfig"),c(ge,"class","relative group"),c(Wr,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(_e,"class","docstring"),c($t,"id","transformers.CamembertTokenizer"),c($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($t,"href","#transformers.CamembertTokenizer"),c(mt,"class","relative group"),c(Kr,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Gr,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(to,"href","https://github.com/google/sentencepiece"),c(to,"rel","nofollow"),c(Xr,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(Ze,"class","docstring"),c(Ft,"class","docstring"),c(Mt,"class","docstring"),c(Yr,"class","docstring"),c(Fe,"class","docstring"),c(Pt,"id","transformers.CamembertTokenizerFast"),c(Pt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pt,"href","#transformers.CamembertTokenizerFast"),c(ct,"class","relative group"),c(Zr,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ea,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ho,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=BPE#models"),c(ho,"rel","nofollow"),c(ta,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(et,"class","docstring"),c(qt,"class","docstring"),c(xe,"class","docstring"),c(Lt,"id","transformers.CamembertModel"),c(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lt,"href","#transformers.CamembertModel"),c(ht,"class","relative group"),c(aa,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(To,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(To,"rel","nofollow"),c(sa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Ie,"class","docstring"),c(Rt,"id","transformers.CamembertForCausalLM"),c(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rt,"href","#transformers.CamembertForCausalLM"),c(ft,"class","relative group"),c(na,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(Mo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Mo,"rel","nofollow"),c(ia,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Se,"class","docstring"),c(At,"id","transformers.CamembertForMaskedLM"),c(At,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(At,"href","#transformers.CamembertForMaskedLM"),c(pt,"class","relative group"),c(la,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(Do,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Do,"rel","nofollow"),c(da,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Be,"class","docstring"),c(zt,"id","transformers.CamembertForSequenceClassification"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#transformers.CamembertForSequenceClassification"),c(ut,"class","relative group"),c(ma,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(No,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(No,"rel","nofollow"),c(ca,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Oe,"class","docstring"),c(Dt,"id","transformers.CamembertForMultipleChoice"),c(Dt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dt,"href","#transformers.CamembertForMultipleChoice"),c(gt,"class","relative group"),c(ha,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(Ko,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Ko,"rel","nofollow"),c(fa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Ne,"class","docstring"),c(xt,"id","transformers.CamembertForTokenClassification"),c(xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xt,"href","#transformers.CamembertForTokenClassification"),c(_t,"class","relative group"),c(pa,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(Zo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Zo,"rel","nofollow"),c(ua,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Ue,"class","docstring"),c(It,"id","transformers.CamembertForQuestionAnswering"),c(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(It,"href","#transformers.CamembertForQuestionAnswering"),c(vt,"class","relative group"),c(ga,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),c(sr,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(sr,"rel","nofollow"),c(_a,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(He,"class","docstring"),c(Bt,"id","transformers.TFCamembertModel"),c(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bt,"href","#transformers.TFCamembertModel"),c(kt,"class","relative group"),c(va,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(cr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(cr,"rel","nofollow"),c(ka,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pe,"class","docstring"),c(Nt,"id","transformers.TFCamembertForMaskedLM"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#transformers.TFCamembertForMaskedLM"),c(bt,"class","relative group"),c(ba,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(vr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(vr,"rel","nofollow"),c(Ta,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(qe,"class","docstring"),c(Ht,"id","transformers.TFCamembertForSequenceClassification"),c(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ht,"href","#transformers.TFCamembertForSequenceClassification"),c(Tt,"class","relative group"),c(wa,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(Cr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Cr,"rel","nofollow"),c(Ea,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Le,"class","docstring"),c(Vt,"id","transformers.TFCamembertForMultipleChoice"),c(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vt,"href","#transformers.TFCamembertForMultipleChoice"),c(wt,"class","relative group"),c(Ca,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(qr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(qr,"rel","nofollow"),c(ya,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Re,"class","docstring"),c(Kt,"id","transformers.TFCamembertForTokenClassification"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#transformers.TFCamembertForTokenClassification"),c(Et,"class","relative group"),c($a,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(xr,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(xr,"rel","nofollow"),c(Fa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Ae,"class","docstring"),c(Xt,"id","transformers.TFCamembertForQuestionAnswering"),c(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xt,"href","#transformers.TFCamembertForQuestionAnswering"),c(Ct,"class","relative group"),c(Ma,"href","/docs/transformers/main/en/main_classes/model#transformers.TFPreTrainedModel"),c(Ur,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),c(Ur,"rel","nofollow"),c(Pa,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ze,"class","docstring")},m(o,f){e(document.head,b),h(o,Z,f),h(o,A,f),e(A,_),e(_,z),y(G,z,null),e(A,le),e(A,D),e(D,de),h(o,Q,f),h(o,u,f),e(u,K),e(K,x),y(X,x,null),e(u,me),e(u,I),e(I,ce),h(o,ae,f),h(o,H,f),e(H,P),e(H,j),e(j,V),e(H,g),h(o,k,f),h(o,ee,f),e(ee,O),h(o,se,f),h(o,te,f),e(te,S),e(S,he),h(o,ne,f),h(o,v,f),e(v,fe),h(o,B,f),h(o,oe,f),e(oe,J),e(J,N),e(J,re),e(re,pe),e(J,q),h(o,ie,f),h(o,w,f),e(w,ue),e(w,l),e(l,p),e(w,W),e(w,ke),e(ke,Ce),e(w,L),h(o,Te,f),h(o,ge,f),e(ge,ve),e(ve,T),y(R,T,null),e(ge,ye),e(ge,be),e(be,U),h(o,we,f),h(o,_e,f),y(Y,_e,null),e(_e,$e),e(_e,Yt),e(Yt,Di),e(Yt,Wr),e(Wr,xi),e(Yt,Ii),h(o,Ns,f),h(o,mt,f),e(mt,$t),e($t,Da),y(Zt,Da,null),e(mt,Si),e(mt,xa),e(xa,Bi),h(o,Us,f),h(o,Fe,f),y(eo,Fe,null),e(Fe,Oi),e(Fe,Ye),e(Ye,Ni),e(Ye,Kr),e(Kr,Ui),e(Ye,Hi),e(Ye,Gr),e(Gr,Qi),e(Ye,Vi),e(Ye,to),e(to,Wi),e(Ye,Ki),e(Fe,Gi),e(Fe,oo),e(oo,Xi),e(oo,Xr),e(Xr,ji),e(oo,Ji),e(Fe,Yi),e(Fe,Ze),y(ro,Ze,null),e(Ze,Zi),e(Ze,Ia),e(Ia,el),e(Ze,tl),e(Ze,ao),e(ao,jr),e(jr,ol),e(jr,Sa),e(Sa,rl),e(ao,al),e(ao,Jr),e(Jr,sl),e(Jr,Ba),e(Ba,nl),e(Fe,il),e(Fe,Ft),y(so,Ft,null),e(Ft,ll),e(Ft,no),e(no,dl),e(no,Oa),e(Oa,ml),e(no,cl),e(Fe,hl),e(Fe,Mt),y(io,Mt,null),e(Mt,fl),e(Mt,Na),e(Na,pl),e(Fe,ul),e(Fe,Yr),y(lo,Yr,null),h(o,Hs,f),h(o,ct,f),e(ct,Pt),e(Pt,Ua),y(mo,Ua,null),e(ct,gl),e(ct,Ha),e(Ha,_l),h(o,Qs,f),h(o,xe,f),y(co,xe,null),e(xe,vl),e(xe,Ve),e(Ve,kl),e(Ve,Qa),e(Qa,bl),e(Ve,Tl),e(Ve,Zr),e(Zr,wl),e(Ve,El),e(Ve,ea),e(ea,Cl),e(Ve,yl),e(Ve,ho),e(ho,$l),e(Ve,Fl),e(xe,Ml),e(xe,fo),e(fo,Pl),e(fo,ta),e(ta,ql),e(fo,Ll),e(xe,Rl),e(xe,et),y(po,et,null),e(et,Al),e(et,Va),e(Va,zl),e(et,Dl),e(et,uo),e(uo,oa),e(oa,xl),e(oa,Wa),e(Wa,Il),e(uo,Sl),e(uo,ra),e(ra,Bl),e(ra,Ka),e(Ka,Ol),e(xe,Nl),e(xe,qt),y(go,qt,null),e(qt,Ul),e(qt,Ga),e(Ga,Hl),h(o,Vs,f),h(o,ht,f),e(ht,Lt),e(Lt,Xa),y(_o,Xa,null),e(ht,Ql),e(ht,ja),e(ja,Vl),h(o,Ws,f),h(o,Ie,f),y(vo,Ie,null),e(Ie,Wl),e(Ie,Ja),e(Ja,Kl),e(Ie,Gl),e(Ie,ko),e(ko,Xl),e(ko,aa),e(aa,jl),e(ko,Jl),e(Ie,Yl),e(Ie,bo),e(bo,Zl),e(bo,To),e(To,ed),e(bo,td),e(Ie,od),e(Ie,wo),e(wo,rd),e(wo,sa),e(sa,ad),e(wo,sd),h(o,Ks,f),h(o,ft,f),e(ft,Rt),e(Rt,Ya),y(Eo,Ya,null),e(ft,nd),e(ft,Za),e(Za,id),h(o,Gs,f),h(o,Se,f),y(Co,Se,null),e(Se,ld),e(Se,yo),e(yo,dd),e(yo,es),e(es,md),e(yo,cd),e(Se,hd),e(Se,$o),e($o,fd),e($o,na),e(na,pd),e($o,ud),e(Se,gd),e(Se,Fo),e(Fo,_d),e(Fo,Mo),e(Mo,vd),e(Fo,kd),e(Se,bd),e(Se,Po),e(Po,Td),e(Po,ia),e(ia,wd),e(Po,Ed),h(o,Xs,f),h(o,pt,f),e(pt,At),e(At,ts),y(qo,ts,null),e(pt,Cd),e(pt,os),e(os,yd),h(o,js,f),h(o,Be,f),y(Lo,Be,null),e(Be,$d),e(Be,Ro),e(Ro,Fd),e(Ro,rs),e(rs,Md),e(Ro,Pd),e(Be,qd),e(Be,Ao),e(Ao,Ld),e(Ao,la),e(la,Rd),e(Ao,Ad),e(Be,zd),e(Be,zo),e(zo,Dd),e(zo,Do),e(Do,xd),e(zo,Id),e(Be,Sd),e(Be,xo),e(xo,Bd),e(xo,da),e(da,Od),e(xo,Nd),h(o,Js,f),h(o,ut,f),e(ut,zt),e(zt,as),y(Io,as,null),e(ut,Ud),e(ut,ss),e(ss,Hd),h(o,Ys,f),h(o,Oe,f),y(So,Oe,null),e(Oe,Qd),e(Oe,ns),e(ns,Vd),e(Oe,Wd),e(Oe,Bo),e(Bo,Kd),e(Bo,ma),e(ma,Gd),e(Bo,Xd),e(Oe,jd),e(Oe,Oo),e(Oo,Jd),e(Oo,No),e(No,Yd),e(Oo,Zd),e(Oe,em),e(Oe,Uo),e(Uo,tm),e(Uo,ca),e(ca,om),e(Uo,rm),h(o,Zs,f),h(o,gt,f),e(gt,Dt),e(Dt,is),y(Ho,is,null),e(gt,am),e(gt,ls),e(ls,sm),h(o,en,f),h(o,Ne,f),y(Qo,Ne,null),e(Ne,nm),e(Ne,ds),e(ds,im),e(Ne,lm),e(Ne,Vo),e(Vo,dm),e(Vo,ha),e(ha,mm),e(Vo,cm),e(Ne,hm),e(Ne,Wo),e(Wo,fm),e(Wo,Ko),e(Ko,pm),e(Wo,um),e(Ne,gm),e(Ne,Go),e(Go,_m),e(Go,fa),e(fa,vm),e(Go,km),h(o,tn,f),h(o,_t,f),e(_t,xt),e(xt,ms),y(Xo,ms,null),e(_t,bm),e(_t,cs),e(cs,Tm),h(o,on,f),h(o,Ue,f),y(jo,Ue,null),e(Ue,wm),e(Ue,hs),e(hs,Em),e(Ue,Cm),e(Ue,Jo),e(Jo,ym),e(Jo,pa),e(pa,$m),e(Jo,Fm),e(Ue,Mm),e(Ue,Yo),e(Yo,Pm),e(Yo,Zo),e(Zo,qm),e(Yo,Lm),e(Ue,Rm),e(Ue,er),e(er,Am),e(er,ua),e(ua,zm),e(er,Dm),h(o,rn,f),h(o,vt,f),e(vt,It),e(It,fs),y(tr,fs,null),e(vt,xm),e(vt,ps),e(ps,Im),h(o,an,f),h(o,He,f),y(or,He,null),e(He,Sm),e(He,St),e(St,Bm),e(St,us),e(us,Om),e(St,Nm),e(St,gs),e(gs,Um),e(He,Hm),e(He,rr),e(rr,Qm),e(rr,ga),e(ga,Vm),e(rr,Wm),e(He,Km),e(He,ar),e(ar,Gm),e(ar,sr),e(sr,Xm),e(ar,jm),e(He,Jm),e(He,nr),e(nr,Ym),e(nr,_a),e(_a,Zm),e(nr,ec),h(o,sn,f),h(o,kt,f),e(kt,Bt),e(Bt,_s),y(ir,_s,null),e(kt,tc),e(kt,vs),e(vs,oc),h(o,nn,f),h(o,Pe,f),y(lr,Pe,null),e(Pe,rc),e(Pe,ks),e(ks,ac),e(Pe,sc),e(Pe,dr),e(dr,nc),e(dr,va),e(va,ic),e(dr,lc),e(Pe,dc),e(Pe,mr),e(mr,mc),e(mr,cr),e(cr,cc),e(mr,hc),e(Pe,fc),y(Ot,Pe,null),e(Pe,pc),e(Pe,hr),e(hr,uc),e(hr,ka),e(ka,gc),e(hr,_c),h(o,ln,f),h(o,bt,f),e(bt,Nt),e(Nt,bs),y(fr,bs,null),e(bt,vc),e(bt,Ts),e(Ts,kc),h(o,dn,f),h(o,qe,f),y(pr,qe,null),e(qe,bc),e(qe,ur),e(ur,Tc),e(ur,ws),e(ws,wc),e(ur,Ec),e(qe,Cc),e(qe,gr),e(gr,yc),e(gr,ba),e(ba,$c),e(gr,Fc),e(qe,Mc),e(qe,_r),e(_r,Pc),e(_r,vr),e(vr,qc),e(_r,Lc),e(qe,Rc),y(Ut,qe,null),e(qe,Ac),e(qe,kr),e(kr,zc),e(kr,Ta),e(Ta,Dc),e(kr,xc),h(o,mn,f),h(o,Tt,f),e(Tt,Ht),e(Ht,Es),y(br,Es,null),e(Tt,Ic),e(Tt,Cs),e(Cs,Sc),h(o,cn,f),h(o,Le,f),y(Tr,Le,null),e(Le,Bc),e(Le,ys),e(ys,Oc),e(Le,Nc),e(Le,wr),e(wr,Uc),e(wr,wa),e(wa,Hc),e(wr,Qc),e(Le,Vc),e(Le,Er),e(Er,Wc),e(Er,Cr),e(Cr,Kc),e(Er,Gc),e(Le,Xc),y(Qt,Le,null),e(Le,jc),e(Le,yr),e(yr,Jc),e(yr,Ea),e(Ea,Yc),e(yr,Zc),h(o,hn,f),h(o,wt,f),e(wt,Vt),e(Vt,$s),y($r,$s,null),e(wt,eh),e(wt,Fs),e(Fs,th),h(o,fn,f),h(o,Re,f),y(Fr,Re,null),e(Re,oh),e(Re,Ms),e(Ms,rh),e(Re,ah),e(Re,Mr),e(Mr,sh),e(Mr,Ca),e(Ca,nh),e(Mr,ih),e(Re,lh),e(Re,Pr),e(Pr,dh),e(Pr,qr),e(qr,mh),e(Pr,ch),e(Re,hh),y(Wt,Re,null),e(Re,fh),e(Re,Lr),e(Lr,ph),e(Lr,ya),e(ya,uh),e(Lr,gh),h(o,pn,f),h(o,Et,f),e(Et,Kt),e(Kt,Ps),y(Rr,Ps,null),e(Et,_h),e(Et,qs),e(qs,vh),h(o,un,f),h(o,Ae,f),y(Ar,Ae,null),e(Ae,kh),e(Ae,Ls),e(Ls,bh),e(Ae,Th),e(Ae,zr),e(zr,wh),e(zr,$a),e($a,Eh),e(zr,Ch),e(Ae,yh),e(Ae,Dr),e(Dr,$h),e(Dr,xr),e(xr,Fh),e(Dr,Mh),e(Ae,Ph),y(Gt,Ae,null),e(Ae,qh),e(Ae,Ir),e(Ir,Lh),e(Ir,Fa),e(Fa,Rh),e(Ir,Ah),h(o,gn,f),h(o,Ct,f),e(Ct,Xt),e(Xt,Rs),y(Sr,Rs,null),e(Ct,zh),e(Ct,As),e(As,Dh),h(o,_n,f),h(o,ze,f),y(Br,ze,null),e(ze,xh),e(ze,yt),e(yt,Ih),e(yt,zs),e(zs,Sh),e(yt,Bh),e(yt,Ds),e(Ds,Oh),e(yt,Nh),e(ze,Uh),e(ze,Or),e(Or,Hh),e(Or,Ma),e(Ma,Qh),e(Or,Vh),e(ze,Wh),e(ze,Nr),e(Nr,Kh),e(Nr,Ur),e(Ur,Gh),e(Nr,Xh),e(ze,jh),y(jt,ze,null),e(ze,Jh),e(ze,Hr),e(Hr,Yh),e(Hr,Pa),e(Pa,Zh),e(Hr,ef),vn=!0},p(o,[f]){const Qr={};f&2&&(Qr.$$scope={dirty:f,ctx:o}),Ot.$set(Qr);const xs={};f&2&&(xs.$$scope={dirty:f,ctx:o}),Ut.$set(xs);const Is={};f&2&&(Is.$$scope={dirty:f,ctx:o}),Qt.$set(Is);const Ss={};f&2&&(Ss.$$scope={dirty:f,ctx:o}),Wt.$set(Ss);const Vr={};f&2&&(Vr.$$scope={dirty:f,ctx:o}),Gt.$set(Vr);const Bs={};f&2&&(Bs.$$scope={dirty:f,ctx:o}),jt.$set(Bs)},i(o){vn||($(G.$$.fragment,o),$(X.$$.fragment,o),$(R.$$.fragment,o),$(Y.$$.fragment,o),$(Zt.$$.fragment,o),$(eo.$$.fragment,o),$(ro.$$.fragment,o),$(so.$$.fragment,o),$(io.$$.fragment,o),$(lo.$$.fragment,o),$(mo.$$.fragment,o),$(co.$$.fragment,o),$(po.$$.fragment,o),$(go.$$.fragment,o),$(_o.$$.fragment,o),$(vo.$$.fragment,o),$(Eo.$$.fragment,o),$(Co.$$.fragment,o),$(qo.$$.fragment,o),$(Lo.$$.fragment,o),$(Io.$$.fragment,o),$(So.$$.fragment,o),$(Ho.$$.fragment,o),$(Qo.$$.fragment,o),$(Xo.$$.fragment,o),$(jo.$$.fragment,o),$(tr.$$.fragment,o),$(or.$$.fragment,o),$(ir.$$.fragment,o),$(lr.$$.fragment,o),$(Ot.$$.fragment,o),$(fr.$$.fragment,o),$(pr.$$.fragment,o),$(Ut.$$.fragment,o),$(br.$$.fragment,o),$(Tr.$$.fragment,o),$(Qt.$$.fragment,o),$($r.$$.fragment,o),$(Fr.$$.fragment,o),$(Wt.$$.fragment,o),$(Rr.$$.fragment,o),$(Ar.$$.fragment,o),$(Gt.$$.fragment,o),$(Sr.$$.fragment,o),$(Br.$$.fragment,o),$(jt.$$.fragment,o),vn=!0)},o(o){F(G.$$.fragment,o),F(X.$$.fragment,o),F(R.$$.fragment,o),F(Y.$$.fragment,o),F(Zt.$$.fragment,o),F(eo.$$.fragment,o),F(ro.$$.fragment,o),F(so.$$.fragment,o),F(io.$$.fragment,o),F(lo.$$.fragment,o),F(mo.$$.fragment,o),F(co.$$.fragment,o),F(po.$$.fragment,o),F(go.$$.fragment,o),F(_o.$$.fragment,o),F(vo.$$.fragment,o),F(Eo.$$.fragment,o),F(Co.$$.fragment,o),F(qo.$$.fragment,o),F(Lo.$$.fragment,o),F(Io.$$.fragment,o),F(So.$$.fragment,o),F(Ho.$$.fragment,o),F(Qo.$$.fragment,o),F(Xo.$$.fragment,o),F(jo.$$.fragment,o),F(tr.$$.fragment,o),F(or.$$.fragment,o),F(ir.$$.fragment,o),F(lr.$$.fragment,o),F(Ot.$$.fragment,o),F(fr.$$.fragment,o),F(pr.$$.fragment,o),F(Ut.$$.fragment,o),F(br.$$.fragment,o),F(Tr.$$.fragment,o),F(Qt.$$.fragment,o),F($r.$$.fragment,o),F(Fr.$$.fragment,o),F(Wt.$$.fragment,o),F(Rr.$$.fragment,o),F(Ar.$$.fragment,o),F(Gt.$$.fragment,o),F(Sr.$$.fragment,o),F(Br.$$.fragment,o),F(jt.$$.fragment,o),vn=!1},d(o){t(b),o&&t(Z),o&&t(A),M(G),o&&t(Q),o&&t(u),M(X),o&&t(ae),o&&t(H),o&&t(k),o&&t(ee),o&&t(se),o&&t(te),o&&t(ne),o&&t(v),o&&t(B),o&&t(oe),o&&t(ie),o&&t(w),o&&t(Te),o&&t(ge),M(R),o&&t(we),o&&t(_e),M(Y),o&&t(Ns),o&&t(mt),M(Zt),o&&t(Us),o&&t(Fe),M(eo),M(ro),M(so),M(io),M(lo),o&&t(Hs),o&&t(ct),M(mo),o&&t(Qs),o&&t(xe),M(co),M(po),M(go),o&&t(Vs),o&&t(ht),M(_o),o&&t(Ws),o&&t(Ie),M(vo),o&&t(Ks),o&&t(ft),M(Eo),o&&t(Gs),o&&t(Se),M(Co),o&&t(Xs),o&&t(pt),M(qo),o&&t(js),o&&t(Be),M(Lo),o&&t(Js),o&&t(ut),M(Io),o&&t(Ys),o&&t(Oe),M(So),o&&t(Zs),o&&t(gt),M(Ho),o&&t(en),o&&t(Ne),M(Qo),o&&t(tn),o&&t(_t),M(Xo),o&&t(on),o&&t(Ue),M(jo),o&&t(rn),o&&t(vt),M(tr),o&&t(an),o&&t(He),M(or),o&&t(sn),o&&t(kt),M(ir),o&&t(nn),o&&t(Pe),M(lr),M(Ot),o&&t(ln),o&&t(bt),M(fr),o&&t(dn),o&&t(qe),M(pr),M(Ut),o&&t(mn),o&&t(Tt),M(br),o&&t(cn),o&&t(Le),M(Tr),M(Qt),o&&t(hn),o&&t(wt),M($r),o&&t(fn),o&&t(Re),M(Fr),M(Wt),o&&t(pn),o&&t(Et),M(Rr),o&&t(un),o&&t(Ae),M(Ar),M(Gt),o&&t(gn),o&&t(Ct),M(Sr),o&&t(_n),o&&t(ze),M(Br),M(jt)}}}const Uu={local:"camembert",sections:[{local:"overview",title:"Overview"},{local:"transformers.CamembertConfig",title:"CamembertConfig"},{local:"transformers.CamembertTokenizer",title:"CamembertTokenizer"},{local:"transformers.CamembertTokenizerFast",title:"CamembertTokenizerFast"},{local:"transformers.CamembertModel",title:"CamembertModel"},{local:"transformers.CamembertForCausalLM",title:"CamembertForCausalLM"},{local:"transformers.CamembertForMaskedLM",title:"CamembertForMaskedLM"},{local:"transformers.CamembertForSequenceClassification",title:"CamembertForSequenceClassification"},{local:"transformers.CamembertForMultipleChoice",title:"CamembertForMultipleChoice"},{local:"transformers.CamembertForTokenClassification",title:"CamembertForTokenClassification"},{local:"transformers.CamembertForQuestionAnswering",title:"CamembertForQuestionAnswering"},{local:"transformers.TFCamembertModel",title:"TFCamembertModel"},{local:"transformers.TFCamembertForMaskedLM",title:"TFCamembertForMaskedLM"},{local:"transformers.TFCamembertForSequenceClassification",title:"TFCamembertForSequenceClassification"},{local:"transformers.TFCamembertForMultipleChoice",title:"TFCamembertForMultipleChoice"},{local:"transformers.TFCamembertForTokenClassification",title:"TFCamembertForTokenClassification"},{local:"transformers.TFCamembertForQuestionAnswering",title:"TFCamembertForQuestionAnswering"}],title:"CamemBERT"};function Hu(De,b,Z){let{fw:A}=b;return De.$$set=_=>{"fw"in _&&Z(0,A=_.fw)},[A]}class Gu extends Lu{constructor(b){super();Ru(this,b,Hu,Nu,Au,{fw:0})}}export{Gu as default,Uu as metadata};
