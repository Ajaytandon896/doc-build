import{S as q3t,i as N3t,s as j3t,e as a,k as l,w as v,t as o,M as D3t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as G3t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as KBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function O3t(L){let g,F,u,f,p,d,h,Mo,oi,om,Kr,ri,ti,_6,rm,qe,Xe,ai,Mn,b6,En,Cn,F6,ni,wn,v6,si,tm,Fa;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),om=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),_6=o(")."),rm=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),b6=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),F6=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),v6=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tm=o("NewModelConfig"),Fa=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var R9=s(u);f=r(R9,"NewModelConfig"),R9.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var B9=s(oi);om=r(B9,"model_type"),B9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var P9=s(ri);ti=r(P9,'"new-model"'),P9.forEach(t),_6=r(Ae,")."),Ae.forEach(t),rm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var va=s(ai);Mn=r(va,"NewModel"),va.forEach(t),b6=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var I9=s(En);Cn=r(I9,"PreTrainedModel"),I9.forEach(t),F6=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var am=s(ni);wn=r(am,"config_class"),am.forEach(t),v6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var q9=s(si);tm=r(q9,"NewModelConfig"),q9.forEach(t),Fa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,om),e(g,Kr),e(g,ri),e(ri,ti),e(g,_6),b(ze,rm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,b6),e(qe,En),e(En,Cn),e(qe,F6),e(qe,ni),e(ni,wn),e(qe,v6),e(qe,si),e(si,tm),e(qe,Fa)},d(ze){ze&&t(g),ze&&t(rm),ze&&t(qe)}}}function V3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z3t(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Q3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W3t(L){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function H3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z3t(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ewt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function owt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function twt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function awt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function swt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _wt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Twt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ewt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Awt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ywt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $wt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Swt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Owt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ywt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zwt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _At(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $At(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IAt(L){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qAt(L){let g,F,u,f,p,d,h,Mo,oi,om,Kr,ri,ti,_6,rm,qe,Xe,ai,Mn,b6,En,Cn,F6,ni,wn,v6,si,tm,Fa,ze,Ae,R9,li,B9,P9,Eo,va,I9,am,q9,fNe,nBe,ii,nm,eZ,T6,gNe,oZ,hNe,sBe,An,uNe,rZ,pNe,_Ne,tZ,bNe,FNe,lBe,M6,iBe,N9,vNe,dBe,sm,cBe,di,lm,aZ,E6,TNe,nZ,MNe,mBe,Co,C6,ENe,w6,CNe,j9,wNe,ANe,yNe,A6,LNe,sZ,xNe,$Ne,kNe,Mr,y6,SNe,lZ,RNe,BNe,ci,PNe,iZ,INe,qNe,dZ,NNe,jNe,DNe,A,im,cZ,GNe,ONe,D9,VNe,XNe,zNe,dm,mZ,QNe,WNe,G9,HNe,UNe,JNe,cm,fZ,YNe,KNe,O9,ZNe,eje,oje,mm,gZ,rje,tje,V9,aje,nje,sje,fm,hZ,lje,ije,X9,dje,cje,mje,gm,uZ,fje,gje,z9,hje,uje,pje,hm,pZ,_je,bje,Q9,Fje,vje,Tje,um,_Z,Mje,Eje,W9,Cje,wje,Aje,pm,bZ,yje,Lje,H9,xje,$je,kje,_m,FZ,Sje,Rje,U9,Bje,Pje,Ije,bm,vZ,qje,Nje,J9,jje,Dje,Gje,Fm,TZ,Oje,Vje,Y9,Xje,zje,Qje,vm,MZ,Wje,Hje,K9,Uje,Jje,Yje,Tm,EZ,Kje,Zje,Z9,eDe,oDe,rDe,Mm,CZ,tDe,aDe,e$,nDe,sDe,lDe,Em,wZ,iDe,dDe,o$,cDe,mDe,fDe,Cm,AZ,gDe,hDe,r$,uDe,pDe,_De,wm,yZ,bDe,FDe,t$,vDe,TDe,MDe,Am,LZ,EDe,CDe,a$,wDe,ADe,yDe,ym,xZ,LDe,xDe,n$,$De,kDe,SDe,Lm,$Z,RDe,BDe,s$,PDe,IDe,qDe,xm,kZ,NDe,jDe,l$,DDe,GDe,ODe,$m,SZ,VDe,XDe,i$,zDe,QDe,WDe,km,RZ,HDe,UDe,d$,JDe,YDe,KDe,Sm,BZ,ZDe,eGe,c$,oGe,rGe,tGe,Rm,PZ,aGe,nGe,m$,sGe,lGe,iGe,Bm,IZ,dGe,cGe,f$,mGe,fGe,gGe,Pm,qZ,hGe,uGe,g$,pGe,_Ge,bGe,Im,NZ,FGe,vGe,h$,TGe,MGe,EGe,qm,jZ,CGe,wGe,u$,AGe,yGe,LGe,Nm,DZ,xGe,$Ge,p$,kGe,SGe,RGe,jm,GZ,BGe,PGe,_$,IGe,qGe,NGe,Dm,OZ,jGe,DGe,b$,GGe,OGe,VGe,Gm,VZ,XGe,zGe,F$,QGe,WGe,HGe,Om,XZ,UGe,JGe,v$,YGe,KGe,ZGe,Vm,zZ,eOe,oOe,T$,rOe,tOe,aOe,Xm,QZ,nOe,sOe,M$,lOe,iOe,dOe,zm,WZ,cOe,mOe,E$,fOe,gOe,hOe,Qm,HZ,uOe,pOe,C$,_Oe,bOe,FOe,Wm,UZ,vOe,TOe,w$,MOe,EOe,COe,Hm,JZ,wOe,AOe,A$,yOe,LOe,xOe,Um,YZ,$Oe,kOe,y$,SOe,ROe,BOe,Jm,KZ,POe,IOe,L$,qOe,NOe,jOe,Ym,ZZ,DOe,GOe,x$,OOe,VOe,XOe,Km,eee,zOe,QOe,$$,WOe,HOe,UOe,Zm,oee,JOe,YOe,k$,KOe,ZOe,eVe,ef,ree,oVe,rVe,S$,tVe,aVe,nVe,of,tee,sVe,lVe,R$,iVe,dVe,cVe,rf,aee,mVe,fVe,B$,gVe,hVe,uVe,tf,nee,pVe,_Ve,P$,bVe,FVe,vVe,af,see,TVe,MVe,I$,EVe,CVe,wVe,nf,lee,AVe,yVe,q$,LVe,xVe,$Ve,sf,iee,kVe,SVe,N$,RVe,BVe,PVe,lf,dee,IVe,qVe,j$,NVe,jVe,DVe,df,cee,GVe,OVe,D$,VVe,XVe,zVe,cf,mee,QVe,WVe,G$,HVe,UVe,JVe,mf,fee,YVe,KVe,O$,ZVe,eXe,oXe,ff,gee,rXe,tXe,V$,aXe,nXe,sXe,gf,hee,lXe,iXe,X$,dXe,cXe,mXe,hf,uee,fXe,gXe,z$,hXe,uXe,pXe,uf,pee,_Xe,bXe,Q$,FXe,vXe,TXe,pf,_ee,MXe,EXe,W$,CXe,wXe,AXe,_f,bee,yXe,LXe,H$,xXe,$Xe,kXe,bf,Fee,SXe,RXe,U$,BXe,PXe,IXe,Ff,vee,qXe,NXe,J$,jXe,DXe,GXe,vf,Tee,OXe,VXe,Y$,XXe,zXe,QXe,Tf,Mee,WXe,HXe,K$,UXe,JXe,YXe,Mf,Eee,KXe,ZXe,Z$,eze,oze,rze,Ef,Cee,tze,aze,ek,nze,sze,lze,Cf,wee,ize,dze,ok,cze,mze,fze,wf,Aee,gze,hze,rk,uze,pze,_ze,Af,yee,bze,Fze,tk,vze,Tze,Mze,yf,Lee,Eze,Cze,ak,wze,Aze,yze,Lf,xee,Lze,xze,nk,$ze,kze,Sze,xf,$ee,Rze,Bze,sk,Pze,Ize,qze,$f,kee,Nze,jze,lk,Dze,Gze,Oze,kf,See,Vze,Xze,ik,zze,Qze,Wze,Sf,Ree,Hze,Uze,dk,Jze,Yze,Kze,Rf,Bee,Zze,eQe,ck,oQe,rQe,tQe,Bf,Pee,aQe,nQe,mk,sQe,lQe,iQe,Pf,Iee,dQe,cQe,fk,mQe,fQe,gQe,If,qee,hQe,uQe,gk,pQe,_Qe,bQe,qf,Nee,FQe,vQe,hk,TQe,MQe,EQe,Nf,jee,CQe,wQe,uk,AQe,yQe,LQe,jf,Dee,xQe,$Qe,pk,kQe,SQe,RQe,Df,Gee,BQe,PQe,_k,IQe,qQe,NQe,Gf,Oee,jQe,DQe,bk,GQe,OQe,VQe,Of,Vee,XQe,zQe,Fk,QQe,WQe,HQe,Vf,Xee,UQe,JQe,vk,YQe,KQe,ZQe,Xf,zee,eWe,oWe,Tk,rWe,tWe,aWe,zf,Qee,nWe,sWe,Mk,lWe,iWe,dWe,Qf,Wee,cWe,mWe,Ek,fWe,gWe,hWe,Wf,Hee,uWe,pWe,Ck,_We,bWe,FWe,Hf,Uee,vWe,TWe,wk,MWe,EWe,CWe,Uf,Jee,wWe,AWe,Ak,yWe,LWe,xWe,Jf,Yee,$We,kWe,yk,SWe,RWe,BWe,Yf,Kee,PWe,IWe,Lk,qWe,NWe,jWe,Kf,Zee,DWe,GWe,xk,OWe,VWe,XWe,Zf,eoe,zWe,QWe,$k,WWe,HWe,UWe,eg,ooe,JWe,YWe,kk,KWe,ZWe,eHe,og,roe,oHe,rHe,Sk,tHe,aHe,nHe,rg,toe,sHe,lHe,Rk,iHe,dHe,cHe,tg,aoe,mHe,fHe,Bk,gHe,hHe,uHe,ag,pHe,ng,L6,_He,noe,bHe,fBe,mi,sg,soe,x6,FHe,loe,vHe,gBe,wo,$6,THe,k6,MHe,Pk,EHe,CHe,wHe,S6,AHe,ioe,yHe,LHe,xHe,Er,R6,$He,doe,kHe,SHe,Ta,RHe,coe,BHe,PHe,moe,IHe,qHe,foe,NHe,jHe,DHe,k,yn,goe,GHe,OHe,Ik,VHe,XHe,qk,zHe,QHe,WHe,Ln,hoe,HHe,UHe,Nk,JHe,YHe,jk,KHe,ZHe,eUe,xn,uoe,oUe,rUe,Dk,tUe,aUe,Gk,nUe,sUe,lUe,lg,poe,iUe,dUe,Ok,cUe,mUe,fUe,$n,_oe,gUe,hUe,Vk,uUe,pUe,Xk,_Ue,bUe,FUe,ig,boe,vUe,TUe,zk,MUe,EUe,CUe,dg,Foe,wUe,AUe,Qk,yUe,LUe,xUe,cg,voe,$Ue,kUe,Wk,SUe,RUe,BUe,kn,Toe,PUe,IUe,Hk,qUe,NUe,Uk,jUe,DUe,GUe,Sn,Moe,OUe,VUe,Jk,XUe,zUe,Yk,QUe,WUe,HUe,Rn,Eoe,UUe,JUe,Kk,YUe,KUe,Zk,ZUe,eJe,oJe,mg,Coe,rJe,tJe,eS,aJe,nJe,sJe,fg,woe,lJe,iJe,oS,dJe,cJe,mJe,Bn,Aoe,fJe,gJe,rS,hJe,uJe,tS,pJe,_Je,bJe,gg,yoe,FJe,vJe,aS,TJe,MJe,EJe,Pn,Loe,CJe,wJe,nS,AJe,yJe,sS,LJe,xJe,$Je,In,xoe,kJe,SJe,lS,RJe,BJe,iS,PJe,IJe,qJe,qn,$oe,NJe,jJe,dS,DJe,GJe,cS,OJe,VJe,XJe,hg,koe,zJe,QJe,mS,WJe,HJe,UJe,Nn,Soe,JJe,YJe,fS,KJe,ZJe,gS,eYe,oYe,rYe,jn,Roe,tYe,aYe,hS,nYe,sYe,uS,lYe,iYe,dYe,Dn,Boe,cYe,mYe,pS,fYe,gYe,_S,hYe,uYe,pYe,Gn,Poe,_Ye,bYe,bS,FYe,vYe,FS,TYe,MYe,EYe,On,Ioe,CYe,wYe,vS,AYe,yYe,TS,LYe,xYe,$Ye,Vn,qoe,kYe,SYe,MS,RYe,BYe,ES,PYe,IYe,qYe,ug,Noe,NYe,jYe,CS,DYe,GYe,OYe,Xn,joe,VYe,XYe,wS,zYe,QYe,AS,WYe,HYe,UYe,pg,Doe,JYe,YYe,yS,KYe,ZYe,eKe,zn,Goe,oKe,rKe,LS,tKe,aKe,xS,nKe,sKe,lKe,Qn,Ooe,iKe,dKe,$S,cKe,mKe,kS,fKe,gKe,hKe,Wn,Voe,uKe,pKe,SS,_Ke,bKe,RS,FKe,vKe,TKe,Hn,Xoe,MKe,EKe,BS,CKe,wKe,PS,AKe,yKe,LKe,Un,zoe,xKe,$Ke,IS,kKe,SKe,qS,RKe,BKe,PKe,_g,Qoe,IKe,qKe,NS,NKe,jKe,DKe,Jn,Woe,GKe,OKe,jS,VKe,XKe,DS,zKe,QKe,WKe,Yn,Hoe,HKe,UKe,GS,JKe,YKe,OS,KKe,ZKe,eZe,Kn,Uoe,oZe,rZe,VS,tZe,aZe,XS,nZe,sZe,lZe,Zn,Joe,iZe,dZe,zS,cZe,mZe,QS,fZe,gZe,hZe,es,Yoe,uZe,pZe,WS,_Ze,bZe,HS,FZe,vZe,TZe,os,Koe,MZe,EZe,US,CZe,wZe,JS,AZe,yZe,LZe,bg,Zoe,xZe,$Ze,YS,kZe,SZe,RZe,rs,ere,BZe,PZe,KS,IZe,qZe,ZS,NZe,jZe,DZe,Fg,ore,GZe,OZe,eR,VZe,XZe,zZe,vg,rre,QZe,WZe,oR,HZe,UZe,JZe,ts,tre,YZe,KZe,rR,ZZe,eeo,tR,oeo,reo,teo,as,are,aeo,neo,aR,seo,leo,nR,ieo,deo,ceo,ns,nre,meo,feo,sR,geo,heo,lR,ueo,peo,_eo,Tg,sre,beo,Feo,iR,veo,Teo,Meo,ss,lre,Eeo,Ceo,dR,weo,Aeo,cR,yeo,Leo,xeo,ls,ire,$eo,keo,mR,Seo,Reo,fR,Beo,Peo,Ieo,is,dre,qeo,Neo,gR,jeo,Deo,hR,Geo,Oeo,Veo,ds,cre,Xeo,zeo,uR,Qeo,Weo,pR,Heo,Ueo,Jeo,cs,mre,Yeo,Keo,_R,Zeo,eoo,bR,ooo,roo,too,ms,fre,aoo,noo,FR,soo,loo,vR,ioo,doo,coo,Mg,gre,moo,foo,TR,goo,hoo,uoo,Eg,hre,poo,_oo,MR,boo,Foo,voo,Cg,ure,Too,Moo,ER,Eoo,Coo,woo,wg,pre,Aoo,yoo,CR,Loo,xoo,$oo,fs,_re,koo,Soo,wR,Roo,Boo,AR,Poo,Ioo,qoo,Ag,bre,Noo,joo,yR,Doo,Goo,Ooo,gs,Fre,Voo,Xoo,LR,zoo,Qoo,xR,Woo,Hoo,Uoo,hs,vre,Joo,Yoo,$R,Koo,Zoo,kR,ero,oro,rro,us,Tre,tro,aro,SR,nro,sro,RR,lro,iro,dro,ps,Mre,cro,mro,BR,fro,gro,PR,hro,uro,pro,_s,Ere,_ro,bro,IR,Fro,vro,qR,Tro,Mro,Ero,bs,Cre,Cro,wro,NR,Aro,yro,jR,Lro,xro,$ro,yg,wre,kro,Sro,DR,Rro,Bro,Pro,Lg,Are,Iro,qro,GR,Nro,jro,Dro,Fs,yre,Gro,Oro,OR,Vro,Xro,VR,zro,Qro,Wro,vs,Lre,Hro,Uro,XR,Jro,Yro,zR,Kro,Zro,eto,Ts,xre,oto,rto,QR,tto,ato,WR,nto,sto,lto,xg,$re,ito,dto,HR,cto,mto,fto,$g,kre,gto,hto,UR,uto,pto,_to,kg,Sre,bto,Fto,JR,vto,Tto,Mto,Ms,Rre,Eto,Cto,YR,wto,Ato,KR,yto,Lto,xto,Sg,Bre,$to,kto,ZR,Sto,Rto,Bto,Rg,Pre,Pto,Ito,eB,qto,Nto,jto,Es,Ire,Dto,Gto,oB,Oto,Vto,rB,Xto,zto,Qto,Bg,qre,Wto,Hto,tB,Uto,Jto,Yto,Pg,Nre,Kto,Zto,aB,eao,oao,rao,Cs,jre,tao,aao,nB,nao,sao,sB,lao,iao,dao,ws,Dre,cao,mao,lB,fao,gao,iB,hao,uao,pao,As,Gre,_ao,bao,dB,Fao,vao,cB,Tao,Mao,Eao,ys,Ore,Cao,wao,mB,Aao,yao,fB,Lao,xao,$ao,Ig,kao,qg,B6,Sao,Vre,Rao,hBe,fi,Ng,Xre,P6,Bao,zre,Pao,uBe,Ao,I6,Iao,q6,qao,gB,Nao,jao,Dao,N6,Gao,Qre,Oao,Vao,Xao,Qe,j6,zao,Wre,Qao,Wao,Ma,Hao,Hre,Uao,Jao,Ure,Yao,Kao,Jre,Zao,eno,ono,te,jg,Yre,rno,tno,hB,ano,nno,sno,Dg,Kre,lno,ino,uB,dno,cno,mno,Gg,Zre,fno,gno,pB,hno,uno,pno,Og,ete,_no,bno,_B,Fno,vno,Tno,Vg,ote,Mno,Eno,bB,Cno,wno,Ano,Xg,rte,yno,Lno,FB,xno,$no,kno,zg,tte,Sno,Rno,vB,Bno,Pno,Ino,Qg,ate,qno,Nno,TB,jno,Dno,Gno,Wg,nte,Ono,Vno,MB,Xno,zno,Qno,Hg,ste,Wno,Hno,EB,Uno,Jno,Yno,Ug,lte,Kno,Zno,CB,eso,oso,rso,Jg,ite,tso,aso,wB,nso,sso,lso,Yg,dte,iso,dso,AB,cso,mso,fso,Kg,cte,gso,hso,yB,uso,pso,_so,Zg,mte,bso,Fso,LB,vso,Tso,Mso,eh,fte,Eso,Cso,xB,wso,Aso,yso,oh,gte,Lso,xso,$B,$so,kso,Sso,rh,hte,Rso,Bso,kB,Pso,Iso,qso,th,ute,Nso,jso,SB,Dso,Gso,Oso,ah,pte,Vso,Xso,RB,zso,Qso,Wso,nh,_te,Hso,Uso,BB,Jso,Yso,Kso,sh,bte,Zso,elo,PB,olo,rlo,tlo,lh,Fte,alo,nlo,IB,slo,llo,ilo,ih,vte,dlo,clo,qB,mlo,flo,glo,dh,hlo,ch,ulo,mh,D6,plo,Tte,_lo,pBe,gi,fh,Mte,G6,blo,Ete,Flo,_Be,yo,O6,vlo,V6,Tlo,NB,Mlo,Elo,Clo,X6,wlo,Cte,Alo,ylo,Llo,We,z6,xlo,wte,$lo,klo,hi,Slo,Ate,Rlo,Blo,yte,Plo,Ilo,qlo,be,gh,Lte,Nlo,jlo,jB,Dlo,Glo,Olo,hh,xte,Vlo,Xlo,DB,zlo,Qlo,Wlo,uh,$te,Hlo,Ulo,GB,Jlo,Ylo,Klo,ph,kte,Zlo,eio,OB,oio,rio,tio,_h,Ste,aio,nio,VB,sio,lio,iio,bh,Rte,dio,cio,XB,mio,fio,gio,Fh,Bte,hio,uio,zB,pio,_io,bio,vh,Pte,Fio,vio,QB,Tio,Mio,Eio,Th,Ite,Cio,wio,WB,Aio,yio,Lio,Mh,qte,xio,$io,HB,kio,Sio,Rio,Eh,Nte,Bio,Pio,UB,Iio,qio,Nio,Ch,jte,jio,Dio,JB,Gio,Oio,Vio,wh,Dte,Xio,zio,YB,Qio,Wio,Hio,Ah,Gte,Uio,Jio,KB,Yio,Kio,Zio,yh,edo,Lh,odo,xh,Q6,rdo,Ote,tdo,bBe,ui,$h,Vte,W6,ado,Xte,ndo,FBe,Lo,H6,sdo,pi,ldo,ZB,ido,ddo,eP,cdo,mdo,fdo,U6,gdo,zte,hdo,udo,pdo,Zr,J6,_do,Qte,bdo,Fdo,_i,vdo,Wte,Tdo,Mdo,oP,Edo,Cdo,wdo,kh,Ado,He,Y6,ydo,Hte,Ldo,xdo,Ea,$do,Ute,kdo,Sdo,Jte,Rdo,Bdo,Yte,Pdo,Ido,qdo,x,Sh,Kte,Ndo,jdo,rP,Ddo,Gdo,Odo,Rh,Zte,Vdo,Xdo,tP,zdo,Qdo,Wdo,Bh,eae,Hdo,Udo,aP,Jdo,Ydo,Kdo,Ph,oae,Zdo,eco,nP,oco,rco,tco,Ih,rae,aco,nco,sP,sco,lco,ico,qh,tae,dco,cco,lP,mco,fco,gco,Nh,aae,hco,uco,iP,pco,_co,bco,jh,nae,Fco,vco,dP,Tco,Mco,Eco,Dh,sae,Cco,wco,cP,Aco,yco,Lco,Gh,lae,xco,$co,mP,kco,Sco,Rco,Oh,iae,Bco,Pco,fP,Ico,qco,Nco,Vh,dae,jco,Dco,gP,Gco,Oco,Vco,Xh,cae,Xco,zco,hP,Qco,Wco,Hco,zh,mae,Uco,Jco,uP,Yco,Kco,Zco,Qh,fae,emo,omo,pP,rmo,tmo,amo,Wh,gae,nmo,smo,_P,lmo,imo,dmo,Hh,hae,cmo,mmo,bP,fmo,gmo,hmo,Uh,uae,umo,pmo,FP,_mo,bmo,Fmo,Jh,pae,vmo,Tmo,vP,Mmo,Emo,Cmo,Yh,_ae,wmo,Amo,TP,ymo,Lmo,xmo,Kh,bae,$mo,kmo,MP,Smo,Rmo,Bmo,Zh,Fae,Pmo,Imo,EP,qmo,Nmo,jmo,eu,vae,Dmo,Gmo,CP,Omo,Vmo,Xmo,ou,Tae,zmo,Qmo,wP,Wmo,Hmo,Umo,ru,Mae,Jmo,Ymo,AP,Kmo,Zmo,efo,tu,Eae,ofo,rfo,yP,tfo,afo,nfo,au,Cae,sfo,lfo,LP,ifo,dfo,cfo,nu,wae,mfo,ffo,xP,gfo,hfo,ufo,su,Aae,pfo,_fo,$P,bfo,Ffo,vfo,lu,yae,Tfo,Mfo,kP,Efo,Cfo,wfo,Ls,Lae,Afo,yfo,SP,Lfo,xfo,RP,$fo,kfo,Sfo,iu,xae,Rfo,Bfo,BP,Pfo,Ifo,qfo,du,$ae,Nfo,jfo,PP,Dfo,Gfo,Ofo,cu,kae,Vfo,Xfo,IP,zfo,Qfo,Wfo,mu,Sae,Hfo,Ufo,qP,Jfo,Yfo,Kfo,fu,Rae,Zfo,ego,NP,ogo,rgo,tgo,gu,Bae,ago,ngo,jP,sgo,lgo,igo,hu,Pae,dgo,cgo,DP,mgo,fgo,ggo,uu,Iae,hgo,ugo,GP,pgo,_go,bgo,pu,qae,Fgo,vgo,OP,Tgo,Mgo,Ego,_u,Nae,Cgo,wgo,VP,Ago,ygo,Lgo,bu,jae,xgo,$go,XP,kgo,Sgo,Rgo,Fu,Dae,Bgo,Pgo,zP,Igo,qgo,Ngo,vu,Gae,jgo,Dgo,QP,Ggo,Ogo,Vgo,Tu,Oae,Xgo,zgo,WP,Qgo,Wgo,Hgo,Mu,Vae,Ugo,Jgo,HP,Ygo,Kgo,Zgo,Eu,Xae,eho,oho,UP,rho,tho,aho,Cu,zae,nho,sho,JP,lho,iho,dho,wu,Qae,cho,mho,YP,fho,gho,hho,Au,Wae,uho,pho,KP,_ho,bho,Fho,yu,Hae,vho,Tho,ZP,Mho,Eho,Cho,Lu,Uae,who,Aho,eI,yho,Lho,xho,xu,Jae,$ho,kho,oI,Sho,Rho,Bho,$u,Yae,Pho,Iho,rI,qho,Nho,jho,ku,Kae,Dho,Gho,tI,Oho,Vho,Xho,Su,Zae,zho,Qho,aI,Who,Hho,Uho,Ru,ene,Jho,Yho,nI,Kho,Zho,euo,Bu,one,ouo,ruo,sI,tuo,auo,nuo,Pu,rne,suo,luo,lI,iuo,duo,cuo,Iu,tne,muo,fuo,iI,guo,huo,uuo,qu,ane,puo,_uo,dI,buo,Fuo,vuo,Nu,nne,Tuo,Muo,cI,Euo,Cuo,wuo,ju,sne,Auo,yuo,mI,Luo,xuo,$uo,Du,lne,kuo,Suo,fI,Ruo,Buo,Puo,Gu,ine,Iuo,quo,gI,Nuo,juo,Duo,Ou,dne,Guo,Ouo,hI,Vuo,Xuo,zuo,Vu,cne,Quo,Wuo,uI,Huo,Uuo,Juo,Xu,mne,Yuo,Kuo,pI,Zuo,epo,opo,zu,fne,rpo,tpo,_I,apo,npo,spo,Qu,gne,lpo,ipo,bI,dpo,cpo,mpo,Wu,hne,fpo,gpo,FI,hpo,upo,ppo,Hu,une,_po,bpo,vI,Fpo,vpo,Tpo,Uu,pne,Mpo,Epo,TI,Cpo,wpo,Apo,Ju,_ne,ypo,Lpo,MI,xpo,$po,kpo,Yu,bne,Spo,Rpo,EI,Bpo,Ppo,Ipo,Ku,Fne,qpo,Npo,CI,jpo,Dpo,Gpo,Zu,vne,Opo,Vpo,wI,Xpo,zpo,Qpo,ep,Tne,Wpo,Hpo,AI,Upo,Jpo,Ypo,op,Mne,Kpo,Zpo,yI,e_o,o_o,r_o,rp,Ene,t_o,a_o,LI,n_o,s_o,l_o,tp,Cne,i_o,d_o,xI,c_o,m_o,f_o,ap,wne,g_o,h_o,$I,u_o,p_o,__o,np,Ane,b_o,F_o,kI,v_o,T_o,M_o,sp,yne,E_o,C_o,SI,w_o,A_o,y_o,lp,Lne,L_o,x_o,RI,$_o,k_o,S_o,ip,xne,R_o,B_o,BI,P_o,I_o,q_o,dp,$ne,N_o,j_o,PI,D_o,G_o,O_o,cp,kne,V_o,X_o,II,z_o,Q_o,W_o,mp,Sne,H_o,U_o,qI,J_o,Y_o,K_o,fp,Rne,Z_o,ebo,NI,obo,rbo,tbo,gp,Bne,abo,nbo,jI,sbo,lbo,ibo,hp,Pne,dbo,cbo,DI,mbo,fbo,gbo,up,Ine,hbo,ubo,GI,pbo,_bo,bbo,pp,qne,Fbo,vbo,OI,Tbo,Mbo,Ebo,_p,Nne,Cbo,wbo,VI,Abo,ybo,Lbo,bp,xbo,jne,$bo,kbo,Dne,Sbo,Rbo,Fp,vBe,bi,vp,Gne,K6,Bbo,One,Pbo,TBe,xo,Z6,Ibo,Fi,qbo,XI,Nbo,jbo,zI,Dbo,Gbo,Obo,ey,Vbo,Vne,Xbo,zbo,Qbo,et,oy,Wbo,Xne,Hbo,Ubo,vi,Jbo,zne,Ybo,Kbo,QI,Zbo,e2o,o2o,Tp,r2o,Ue,ry,t2o,Qne,a2o,n2o,Ca,s2o,Wne,l2o,i2o,Hne,d2o,c2o,Une,m2o,f2o,g2o,G,Mp,Jne,h2o,u2o,WI,p2o,_2o,b2o,Ep,Yne,F2o,v2o,HI,T2o,M2o,E2o,Cp,Kne,C2o,w2o,UI,A2o,y2o,L2o,wp,Zne,x2o,$2o,JI,k2o,S2o,R2o,Ap,ese,B2o,P2o,YI,I2o,q2o,N2o,yp,ose,j2o,D2o,KI,G2o,O2o,V2o,Lp,rse,X2o,z2o,ZI,Q2o,W2o,H2o,xp,tse,U2o,J2o,eq,Y2o,K2o,Z2o,$p,ase,eFo,oFo,oq,rFo,tFo,aFo,kp,nse,nFo,sFo,rq,lFo,iFo,dFo,Sp,sse,cFo,mFo,tq,fFo,gFo,hFo,Rp,lse,uFo,pFo,aq,_Fo,bFo,FFo,Bp,ise,vFo,TFo,nq,MFo,EFo,CFo,Pp,dse,wFo,AFo,sq,yFo,LFo,xFo,Ip,cse,$Fo,kFo,lq,SFo,RFo,BFo,qp,mse,PFo,IFo,iq,qFo,NFo,jFo,Np,fse,DFo,GFo,dq,OFo,VFo,XFo,jp,gse,zFo,QFo,cq,WFo,HFo,UFo,Dp,hse,JFo,YFo,mq,KFo,ZFo,evo,Gp,use,ovo,rvo,fq,tvo,avo,nvo,Op,pse,svo,lvo,gq,ivo,dvo,cvo,Vp,_se,mvo,fvo,hq,gvo,hvo,uvo,Xp,bse,pvo,_vo,uq,bvo,Fvo,vvo,zp,Fse,Tvo,Mvo,pq,Evo,Cvo,wvo,Qp,vse,Avo,yvo,_q,Lvo,xvo,$vo,Wp,Tse,kvo,Svo,bq,Rvo,Bvo,Pvo,Hp,Mse,Ivo,qvo,Fq,Nvo,jvo,Dvo,Up,Ese,Gvo,Ovo,vq,Vvo,Xvo,zvo,Jp,Cse,Qvo,Wvo,Tq,Hvo,Uvo,Jvo,Yp,wse,Yvo,Kvo,Mq,Zvo,e1o,o1o,Kp,Ase,r1o,t1o,Eq,a1o,n1o,s1o,Zp,yse,l1o,i1o,Cq,d1o,c1o,m1o,e_,Lse,f1o,g1o,wq,h1o,u1o,p1o,o_,xse,_1o,b1o,Aq,F1o,v1o,T1o,r_,$se,M1o,E1o,yq,C1o,w1o,A1o,t_,kse,y1o,L1o,Lq,x1o,$1o,k1o,a_,Sse,S1o,R1o,xq,B1o,P1o,I1o,n_,Rse,q1o,N1o,$q,j1o,D1o,G1o,s_,Bse,O1o,V1o,kq,X1o,z1o,Q1o,l_,W1o,Pse,H1o,U1o,Ise,J1o,Y1o,i_,MBe,Ti,d_,qse,ty,K1o,Nse,Z1o,EBe,$o,ay,eTo,Mi,oTo,Sq,rTo,tTo,Rq,aTo,nTo,sTo,ny,lTo,jse,iTo,dTo,cTo,ot,sy,mTo,Dse,fTo,gTo,Ei,hTo,Gse,uTo,pTo,Bq,_To,bTo,FTo,c_,vTo,Je,ly,TTo,Ose,MTo,ETo,wa,CTo,Vse,wTo,ATo,Xse,yTo,LTo,zse,xTo,$To,kTo,z,m_,Qse,STo,RTo,Pq,BTo,PTo,ITo,f_,Wse,qTo,NTo,Iq,jTo,DTo,GTo,g_,Hse,OTo,VTo,qq,XTo,zTo,QTo,h_,Use,WTo,HTo,Nq,UTo,JTo,YTo,u_,Jse,KTo,ZTo,jq,eMo,oMo,rMo,p_,Yse,tMo,aMo,Dq,nMo,sMo,lMo,__,Kse,iMo,dMo,Gq,cMo,mMo,fMo,b_,Zse,gMo,hMo,Oq,uMo,pMo,_Mo,F_,ele,bMo,FMo,Vq,vMo,TMo,MMo,v_,ole,EMo,CMo,Xq,wMo,AMo,yMo,T_,rle,LMo,xMo,zq,$Mo,kMo,SMo,M_,tle,RMo,BMo,Qq,PMo,IMo,qMo,E_,ale,NMo,jMo,Wq,DMo,GMo,OMo,C_,nle,VMo,XMo,Hq,zMo,QMo,WMo,w_,sle,HMo,UMo,Uq,JMo,YMo,KMo,A_,lle,ZMo,e4o,Jq,o4o,r4o,t4o,y_,ile,a4o,n4o,Yq,s4o,l4o,i4o,L_,dle,d4o,c4o,Kq,m4o,f4o,g4o,x_,cle,h4o,u4o,Zq,p4o,_4o,b4o,$_,mle,F4o,v4o,eN,T4o,M4o,E4o,k_,fle,C4o,w4o,oN,A4o,y4o,L4o,S_,gle,x4o,$4o,rN,k4o,S4o,R4o,R_,hle,B4o,P4o,tN,I4o,q4o,N4o,B_,ule,j4o,D4o,aN,G4o,O4o,V4o,P_,ple,X4o,z4o,nN,Q4o,W4o,H4o,I_,_le,U4o,J4o,sN,Y4o,K4o,Z4o,q_,ble,eEo,oEo,lN,rEo,tEo,aEo,N_,Fle,nEo,sEo,iN,lEo,iEo,dEo,j_,vle,cEo,mEo,dN,fEo,gEo,hEo,D_,Tle,uEo,pEo,cN,_Eo,bEo,FEo,G_,Mle,vEo,TEo,mN,MEo,EEo,CEo,O_,Ele,wEo,AEo,fN,yEo,LEo,xEo,V_,Cle,$Eo,kEo,gN,SEo,REo,BEo,X_,wle,PEo,IEo,hN,qEo,NEo,jEo,z_,Ale,DEo,GEo,uN,OEo,VEo,XEo,Q_,zEo,yle,QEo,WEo,Lle,HEo,UEo,W_,CBe,Ci,H_,xle,iy,JEo,$le,YEo,wBe,ko,dy,KEo,wi,ZEo,pN,e5o,o5o,_N,r5o,t5o,a5o,cy,n5o,kle,s5o,l5o,i5o,rt,my,d5o,Sle,c5o,m5o,Ai,f5o,Rle,g5o,h5o,bN,u5o,p5o,_5o,U_,b5o,Ye,fy,F5o,Ble,v5o,T5o,Aa,M5o,Ple,E5o,C5o,Ile,w5o,A5o,qle,y5o,L5o,x5o,Q,J_,Nle,$5o,k5o,FN,S5o,R5o,B5o,Y_,jle,P5o,I5o,vN,q5o,N5o,j5o,K_,Dle,D5o,G5o,TN,O5o,V5o,X5o,Z_,Gle,z5o,Q5o,MN,W5o,H5o,U5o,eb,Ole,J5o,Y5o,EN,K5o,Z5o,eCo,ob,Vle,oCo,rCo,CN,tCo,aCo,nCo,rb,Xle,sCo,lCo,wN,iCo,dCo,cCo,tb,zle,mCo,fCo,AN,gCo,hCo,uCo,ab,Qle,pCo,_Co,yN,bCo,FCo,vCo,nb,Wle,TCo,MCo,LN,ECo,CCo,wCo,sb,Hle,ACo,yCo,xN,LCo,xCo,$Co,lb,Ule,kCo,SCo,$N,RCo,BCo,PCo,ib,Jle,ICo,qCo,kN,NCo,jCo,DCo,db,Yle,GCo,OCo,SN,VCo,XCo,zCo,cb,Kle,QCo,WCo,RN,HCo,UCo,JCo,mb,Zle,YCo,KCo,BN,ZCo,e3o,o3o,fb,eie,r3o,t3o,PN,a3o,n3o,s3o,gb,oie,l3o,i3o,IN,d3o,c3o,m3o,hb,rie,f3o,g3o,qN,h3o,u3o,p3o,ub,tie,_3o,b3o,NN,F3o,v3o,T3o,pb,aie,M3o,E3o,jN,C3o,w3o,A3o,_b,nie,y3o,L3o,DN,x3o,$3o,k3o,bb,sie,S3o,R3o,GN,B3o,P3o,I3o,Fb,lie,q3o,N3o,ON,j3o,D3o,G3o,vb,iie,O3o,V3o,VN,X3o,z3o,Q3o,Tb,die,W3o,H3o,XN,U3o,J3o,Y3o,Mb,cie,K3o,Z3o,zN,ewo,owo,rwo,Eb,mie,two,awo,QN,nwo,swo,lwo,Cb,fie,iwo,dwo,WN,cwo,mwo,fwo,wb,gie,gwo,hwo,HN,uwo,pwo,_wo,Ab,hie,bwo,Fwo,uie,vwo,Two,Mwo,yb,pie,Ewo,Cwo,UN,wwo,Awo,ywo,Lb,_ie,Lwo,xwo,JN,$wo,kwo,Swo,xb,bie,Rwo,Bwo,YN,Pwo,Iwo,qwo,$b,Fie,Nwo,jwo,KN,Dwo,Gwo,Owo,kb,Vwo,vie,Xwo,zwo,Tie,Qwo,Wwo,Sb,ABe,yi,Rb,Mie,gy,Hwo,Eie,Uwo,yBe,So,hy,Jwo,Li,Ywo,ZN,Kwo,Zwo,ej,eAo,oAo,rAo,uy,tAo,Cie,aAo,nAo,sAo,tt,py,lAo,wie,iAo,dAo,xi,cAo,Aie,mAo,fAo,oj,gAo,hAo,uAo,Bb,pAo,Ke,_y,_Ao,yie,bAo,FAo,ya,vAo,Lie,TAo,MAo,xie,EAo,CAo,$ie,wAo,AAo,yAo,he,Pb,kie,LAo,xAo,rj,$Ao,kAo,SAo,Ib,Sie,RAo,BAo,tj,PAo,IAo,qAo,qb,Rie,NAo,jAo,aj,DAo,GAo,OAo,Nb,Bie,VAo,XAo,nj,zAo,QAo,WAo,jb,Pie,HAo,UAo,sj,JAo,YAo,KAo,Db,Iie,ZAo,e0o,lj,o0o,r0o,t0o,Gb,qie,a0o,n0o,ij,s0o,l0o,i0o,Ob,Nie,d0o,c0o,dj,m0o,f0o,g0o,Vb,jie,h0o,u0o,cj,p0o,_0o,b0o,Xb,Die,F0o,v0o,mj,T0o,M0o,E0o,zb,Gie,C0o,w0o,fj,A0o,y0o,L0o,Qb,Oie,x0o,$0o,gj,k0o,S0o,R0o,Wb,Vie,B0o,P0o,hj,I0o,q0o,N0o,Hb,Xie,j0o,D0o,uj,G0o,O0o,V0o,Ub,zie,X0o,z0o,pj,Q0o,W0o,H0o,Jb,Qie,U0o,J0o,_j,Y0o,K0o,Z0o,Yb,Wie,e6o,o6o,bj,r6o,t6o,a6o,Kb,n6o,Hie,s6o,l6o,Uie,i6o,d6o,Zb,LBe,$i,e2,Jie,by,c6o,Yie,m6o,xBe,Ro,Fy,f6o,ki,g6o,Fj,h6o,u6o,vj,p6o,_6o,b6o,vy,F6o,Kie,v6o,T6o,M6o,at,Ty,E6o,Zie,C6o,w6o,Si,A6o,ede,y6o,L6o,Tj,x6o,$6o,k6o,o2,S6o,Ze,My,R6o,ode,B6o,P6o,La,I6o,rde,q6o,N6o,tde,j6o,D6o,ade,G6o,O6o,V6o,q,r2,nde,X6o,z6o,Mj,Q6o,W6o,H6o,t2,sde,U6o,J6o,Ej,Y6o,K6o,Z6o,a2,lde,eyo,oyo,Cj,ryo,tyo,ayo,n2,ide,nyo,syo,wj,lyo,iyo,dyo,s2,dde,cyo,myo,Aj,fyo,gyo,hyo,l2,cde,uyo,pyo,yj,_yo,byo,Fyo,i2,mde,vyo,Tyo,Lj,Myo,Eyo,Cyo,d2,fde,wyo,Ayo,xj,yyo,Lyo,xyo,c2,gde,$yo,kyo,$j,Syo,Ryo,Byo,m2,hde,Pyo,Iyo,kj,qyo,Nyo,jyo,f2,ude,Dyo,Gyo,Sj,Oyo,Vyo,Xyo,g2,pde,zyo,Qyo,Rj,Wyo,Hyo,Uyo,h2,_de,Jyo,Yyo,Bj,Kyo,Zyo,eLo,u2,bde,oLo,rLo,Pj,tLo,aLo,nLo,p2,Fde,sLo,lLo,Ij,iLo,dLo,cLo,_2,vde,mLo,fLo,qj,gLo,hLo,uLo,b2,Tde,pLo,_Lo,Nj,bLo,FLo,vLo,F2,Mde,TLo,MLo,jj,ELo,CLo,wLo,v2,Ede,ALo,yLo,Dj,LLo,xLo,$Lo,T2,Cde,kLo,SLo,Gj,RLo,BLo,PLo,M2,wde,ILo,qLo,Oj,NLo,jLo,DLo,E2,Ade,GLo,OLo,Vj,VLo,XLo,zLo,C2,yde,QLo,WLo,Xj,HLo,ULo,JLo,w2,Lde,YLo,KLo,zj,ZLo,e8o,o8o,A2,xde,r8o,t8o,Qj,a8o,n8o,s8o,y2,$de,l8o,i8o,Wj,d8o,c8o,m8o,L2,kde,f8o,g8o,Hj,h8o,u8o,p8o,x2,Sde,_8o,b8o,Uj,F8o,v8o,T8o,$2,Rde,M8o,E8o,Jj,C8o,w8o,A8o,k2,Bde,y8o,L8o,Yj,x8o,$8o,k8o,S2,Pde,S8o,R8o,Kj,B8o,P8o,I8o,R2,Ide,q8o,N8o,Zj,j8o,D8o,G8o,B2,qde,O8o,V8o,eD,X8o,z8o,Q8o,P2,Nde,W8o,H8o,oD,U8o,J8o,Y8o,I2,jde,K8o,Z8o,rD,e7o,o7o,r7o,q2,Dde,t7o,a7o,tD,n7o,s7o,l7o,N2,Gde,i7o,d7o,aD,c7o,m7o,f7o,j2,Ode,g7o,h7o,nD,u7o,p7o,_7o,D2,Vde,b7o,F7o,sD,v7o,T7o,M7o,G2,Xde,E7o,C7o,lD,w7o,A7o,y7o,O2,zde,L7o,x7o,iD,$7o,k7o,S7o,V2,Qde,R7o,B7o,dD,P7o,I7o,q7o,X2,Wde,N7o,j7o,cD,D7o,G7o,O7o,z2,Hde,V7o,X7o,mD,z7o,Q7o,W7o,Q2,Ude,H7o,U7o,fD,J7o,Y7o,K7o,W2,Jde,Z7o,exo,gD,oxo,rxo,txo,H2,Yde,axo,nxo,hD,sxo,lxo,ixo,U2,dxo,Kde,cxo,mxo,Zde,fxo,gxo,J2,$Be,Ri,Y2,ece,Ey,hxo,oce,uxo,kBe,Bo,Cy,pxo,Bi,_xo,uD,bxo,Fxo,pD,vxo,Txo,Mxo,wy,Exo,rce,Cxo,wxo,Axo,nt,Ay,yxo,tce,Lxo,xxo,Pi,$xo,ace,kxo,Sxo,_D,Rxo,Bxo,Pxo,K2,Ixo,eo,yy,qxo,nce,Nxo,jxo,xa,Dxo,sce,Gxo,Oxo,lce,Vxo,Xxo,ice,zxo,Qxo,Wxo,Y,Z2,dce,Hxo,Uxo,bD,Jxo,Yxo,Kxo,eF,cce,Zxo,e9o,FD,o9o,r9o,t9o,oF,mce,a9o,n9o,vD,s9o,l9o,i9o,rF,fce,d9o,c9o,TD,m9o,f9o,g9o,tF,gce,h9o,u9o,MD,p9o,_9o,b9o,aF,hce,F9o,v9o,ED,T9o,M9o,E9o,nF,uce,C9o,w9o,CD,A9o,y9o,L9o,sF,pce,x9o,$9o,wD,k9o,S9o,R9o,lF,_ce,B9o,P9o,AD,I9o,q9o,N9o,iF,bce,j9o,D9o,yD,G9o,O9o,V9o,dF,Fce,X9o,z9o,LD,Q9o,W9o,H9o,cF,vce,U9o,J9o,xD,Y9o,K9o,Z9o,mF,Tce,e$o,o$o,$D,r$o,t$o,a$o,fF,Mce,n$o,s$o,kD,l$o,i$o,d$o,gF,Ece,c$o,m$o,SD,f$o,g$o,h$o,hF,Cce,u$o,p$o,RD,_$o,b$o,F$o,uF,wce,v$o,T$o,BD,M$o,E$o,C$o,pF,Ace,w$o,A$o,PD,y$o,L$o,x$o,_F,yce,$$o,k$o,ID,S$o,R$o,B$o,bF,Lce,P$o,I$o,qD,q$o,N$o,j$o,FF,xce,D$o,G$o,ND,O$o,V$o,X$o,vF,$ce,z$o,Q$o,jD,W$o,H$o,U$o,TF,kce,J$o,Y$o,DD,K$o,Z$o,eko,MF,Sce,oko,rko,GD,tko,ako,nko,EF,Rce,sko,lko,OD,iko,dko,cko,CF,Bce,mko,fko,VD,gko,hko,uko,wF,Pce,pko,_ko,XD,bko,Fko,vko,AF,Ice,Tko,Mko,zD,Eko,Cko,wko,yF,Ako,qce,yko,Lko,Nce,xko,$ko,LF,SBe,Ii,xF,jce,Ly,kko,Dce,Sko,RBe,Po,xy,Rko,qi,Bko,QD,Pko,Iko,WD,qko,Nko,jko,$y,Dko,Gce,Gko,Oko,Vko,st,ky,Xko,Oce,zko,Qko,Ni,Wko,Vce,Hko,Uko,HD,Jko,Yko,Kko,$F,Zko,oo,Sy,eSo,Xce,oSo,rSo,$a,tSo,zce,aSo,nSo,Qce,sSo,lSo,Wce,iSo,dSo,cSo,Ur,kF,Hce,mSo,fSo,UD,gSo,hSo,uSo,SF,Uce,pSo,_So,JD,bSo,FSo,vSo,RF,Jce,TSo,MSo,YD,ESo,CSo,wSo,BF,Yce,ASo,ySo,KD,LSo,xSo,$So,PF,Kce,kSo,SSo,ZD,RSo,BSo,PSo,IF,ISo,Zce,qSo,NSo,eme,jSo,DSo,qF,BBe,ji,NF,ome,Ry,GSo,rme,OSo,PBe,Io,By,VSo,Di,XSo,eG,zSo,QSo,oG,WSo,HSo,USo,Py,JSo,tme,YSo,KSo,ZSo,lt,Iy,eRo,ame,oRo,rRo,Gi,tRo,nme,aRo,nRo,rG,sRo,lRo,iRo,jF,dRo,ro,qy,cRo,sme,mRo,fRo,ka,gRo,lme,hRo,uRo,ime,pRo,_Ro,dme,bRo,FRo,vRo,U,DF,cme,TRo,MRo,tG,ERo,CRo,wRo,GF,mme,ARo,yRo,aG,LRo,xRo,$Ro,OF,fme,kRo,SRo,nG,RRo,BRo,PRo,VF,gme,IRo,qRo,sG,NRo,jRo,DRo,XF,hme,GRo,ORo,lG,VRo,XRo,zRo,zF,ume,QRo,WRo,iG,HRo,URo,JRo,QF,pme,YRo,KRo,dG,ZRo,eBo,oBo,WF,_me,rBo,tBo,cG,aBo,nBo,sBo,HF,bme,lBo,iBo,mG,dBo,cBo,mBo,UF,Fme,fBo,gBo,fG,hBo,uBo,pBo,JF,vme,_Bo,bBo,gG,FBo,vBo,TBo,YF,Tme,MBo,EBo,hG,CBo,wBo,ABo,KF,Mme,yBo,LBo,uG,xBo,$Bo,kBo,ZF,Eme,SBo,RBo,pG,BBo,PBo,IBo,ev,Cme,qBo,NBo,_G,jBo,DBo,GBo,ov,wme,OBo,VBo,bG,XBo,zBo,QBo,rv,Ame,WBo,HBo,FG,UBo,JBo,YBo,tv,yme,KBo,ZBo,vG,ePo,oPo,rPo,av,Lme,tPo,aPo,TG,nPo,sPo,lPo,nv,xme,iPo,dPo,MG,cPo,mPo,fPo,sv,$me,gPo,hPo,EG,uPo,pPo,_Po,lv,kme,bPo,FPo,CG,vPo,TPo,MPo,iv,Sme,EPo,CPo,wG,wPo,APo,yPo,dv,Rme,LPo,xPo,AG,$Po,kPo,SPo,cv,Bme,RPo,BPo,yG,PPo,IPo,qPo,mv,Pme,NPo,jPo,LG,DPo,GPo,OPo,fv,Ime,VPo,XPo,xG,zPo,QPo,WPo,gv,qme,HPo,UPo,$G,JPo,YPo,KPo,hv,Nme,ZPo,eIo,kG,oIo,rIo,tIo,uv,jme,aIo,nIo,SG,sIo,lIo,iIo,pv,Dme,dIo,cIo,RG,mIo,fIo,gIo,_v,Gme,hIo,uIo,BG,pIo,_Io,bIo,bv,Ome,FIo,vIo,PG,TIo,MIo,EIo,Fv,CIo,Vme,wIo,AIo,Xme,yIo,LIo,vv,IBe,Oi,Tv,zme,Ny,xIo,Qme,$Io,qBe,qo,jy,kIo,Vi,SIo,IG,RIo,BIo,qG,PIo,IIo,qIo,Dy,NIo,Wme,jIo,DIo,GIo,it,Gy,OIo,Hme,VIo,XIo,Xi,zIo,Ume,QIo,WIo,NG,HIo,UIo,JIo,Mv,YIo,to,Oy,KIo,Jme,ZIo,eqo,Sa,oqo,Yme,rqo,tqo,Kme,aqo,nqo,Zme,sqo,lqo,iqo,O,Ev,efe,dqo,cqo,jG,mqo,fqo,gqo,Cv,ofe,hqo,uqo,DG,pqo,_qo,bqo,wv,rfe,Fqo,vqo,GG,Tqo,Mqo,Eqo,Av,tfe,Cqo,wqo,OG,Aqo,yqo,Lqo,yv,afe,xqo,$qo,VG,kqo,Sqo,Rqo,Lv,nfe,Bqo,Pqo,XG,Iqo,qqo,Nqo,xv,sfe,jqo,Dqo,zG,Gqo,Oqo,Vqo,$v,lfe,Xqo,zqo,QG,Qqo,Wqo,Hqo,kv,ife,Uqo,Jqo,WG,Yqo,Kqo,Zqo,Sv,dfe,eNo,oNo,HG,rNo,tNo,aNo,Rv,cfe,nNo,sNo,UG,lNo,iNo,dNo,Bv,mfe,cNo,mNo,JG,fNo,gNo,hNo,Pv,ffe,uNo,pNo,YG,_No,bNo,FNo,Iv,gfe,vNo,TNo,KG,MNo,ENo,CNo,qv,hfe,wNo,ANo,ZG,yNo,LNo,xNo,Nv,ufe,$No,kNo,eO,SNo,RNo,BNo,jv,pfe,PNo,INo,oO,qNo,NNo,jNo,Dv,_fe,DNo,GNo,rO,ONo,VNo,XNo,Gv,bfe,zNo,QNo,tO,WNo,HNo,UNo,Ov,Ffe,JNo,YNo,aO,KNo,ZNo,ejo,Vv,vfe,ojo,rjo,nO,tjo,ajo,njo,Xv,Tfe,sjo,ljo,sO,ijo,djo,cjo,zv,Mfe,mjo,fjo,lO,gjo,hjo,ujo,Qv,Efe,pjo,_jo,iO,bjo,Fjo,vjo,Wv,Cfe,Tjo,Mjo,dO,Ejo,Cjo,wjo,Hv,wfe,Ajo,yjo,cO,Ljo,xjo,$jo,Uv,Afe,kjo,Sjo,mO,Rjo,Bjo,Pjo,Jv,yfe,Ijo,qjo,fO,Njo,jjo,Djo,Yv,Lfe,Gjo,Ojo,gO,Vjo,Xjo,zjo,Kv,xfe,Qjo,Wjo,hO,Hjo,Ujo,Jjo,Zv,$fe,Yjo,Kjo,uO,Zjo,eDo,oDo,e1,kfe,rDo,tDo,pO,aDo,nDo,sDo,o1,Sfe,lDo,iDo,_O,dDo,cDo,mDo,r1,Rfe,fDo,gDo,bO,hDo,uDo,pDo,t1,Bfe,_Do,bDo,FO,FDo,vDo,TDo,a1,Pfe,MDo,EDo,vO,CDo,wDo,ADo,n1,Ife,yDo,LDo,TO,xDo,$Do,kDo,s1,qfe,SDo,RDo,MO,BDo,PDo,IDo,l1,Nfe,qDo,NDo,EO,jDo,DDo,GDo,i1,ODo,jfe,VDo,XDo,Dfe,zDo,QDo,d1,NBe,zi,c1,Gfe,Vy,WDo,Ofe,HDo,jBe,No,Xy,UDo,Qi,JDo,CO,YDo,KDo,wO,ZDo,eGo,oGo,zy,rGo,Vfe,tGo,aGo,nGo,dt,Qy,sGo,Xfe,lGo,iGo,Wi,dGo,zfe,cGo,mGo,AO,fGo,gGo,hGo,m1,uGo,ao,Wy,pGo,Qfe,_Go,bGo,Ra,FGo,Wfe,vGo,TGo,Hfe,MGo,EGo,Ufe,CGo,wGo,AGo,Jfe,f1,Yfe,yGo,LGo,yO,xGo,$Go,kGo,g1,SGo,Kfe,RGo,BGo,Zfe,PGo,IGo,h1,DBe,Hi,u1,ege,Hy,qGo,oge,NGo,GBe,jo,Uy,jGo,Ui,DGo,LO,GGo,OGo,xO,VGo,XGo,zGo,Jy,QGo,rge,WGo,HGo,UGo,ct,Yy,JGo,tge,YGo,KGo,Ji,ZGo,age,eOo,oOo,$O,rOo,tOo,aOo,p1,nOo,no,Ky,sOo,nge,lOo,iOo,Ba,dOo,sge,cOo,mOo,lge,fOo,gOo,ige,hOo,uOo,pOo,Fe,_1,dge,_Oo,bOo,kO,FOo,vOo,TOo,b1,cge,MOo,EOo,SO,COo,wOo,AOo,F1,mge,yOo,LOo,RO,xOo,$Oo,kOo,xs,fge,SOo,ROo,BO,BOo,POo,PO,IOo,qOo,NOo,v1,gge,jOo,DOo,IO,GOo,OOo,VOo,mt,hge,XOo,zOo,qO,QOo,WOo,NO,HOo,UOo,jO,JOo,YOo,KOo,T1,uge,ZOo,eVo,DO,oVo,rVo,tVo,M1,pge,aVo,nVo,GO,sVo,lVo,iVo,E1,_ge,dVo,cVo,OO,mVo,fVo,gVo,C1,bge,hVo,uVo,VO,pVo,_Vo,bVo,w1,Fge,FVo,vVo,XO,TVo,MVo,EVo,A1,vge,CVo,wVo,zO,AVo,yVo,LVo,y1,Tge,xVo,$Vo,QO,kVo,SVo,RVo,L1,BVo,Mge,PVo,IVo,Ege,qVo,NVo,x1,OBe,Yi,$1,Cge,Zy,jVo,wge,DVo,VBe,Do,eL,GVo,Ki,OVo,WO,VVo,XVo,HO,zVo,QVo,WVo,oL,HVo,Age,UVo,JVo,YVo,ft,rL,KVo,yge,ZVo,eXo,Zi,oXo,Lge,rXo,tXo,UO,aXo,nXo,sXo,k1,lXo,so,tL,iXo,xge,dXo,cXo,Pa,mXo,$ge,fXo,gXo,kge,hXo,uXo,Sge,pXo,_Xo,bXo,Rge,S1,Bge,FXo,vXo,JO,TXo,MXo,EXo,R1,CXo,Pge,wXo,AXo,Ige,yXo,LXo,B1,XBe,ed,P1,qge,aL,xXo,Nge,$Xo,zBe,Go,nL,kXo,od,SXo,YO,RXo,BXo,KO,PXo,IXo,qXo,sL,NXo,jge,jXo,DXo,GXo,gt,lL,OXo,Dge,VXo,XXo,rd,zXo,Gge,QXo,WXo,ZO,HXo,UXo,JXo,I1,YXo,lo,iL,KXo,Oge,ZXo,ezo,Ia,ozo,Vge,rzo,tzo,Xge,azo,nzo,zge,szo,lzo,izo,Ne,q1,Qge,dzo,czo,eV,mzo,fzo,gzo,N1,Wge,hzo,uzo,oV,pzo,_zo,bzo,j1,Hge,Fzo,vzo,rV,Tzo,Mzo,Ezo,D1,Uge,Czo,wzo,tV,Azo,yzo,Lzo,G1,Jge,xzo,$zo,aV,kzo,Szo,Rzo,O1,Yge,Bzo,Pzo,nV,Izo,qzo,Nzo,V1,Kge,jzo,Dzo,sV,Gzo,Ozo,Vzo,X1,Zge,Xzo,zzo,lV,Qzo,Wzo,Hzo,z1,Uzo,ehe,Jzo,Yzo,ohe,Kzo,Zzo,Q1,QBe,td,W1,rhe,dL,eQo,the,oQo,WBe,Oo,cL,rQo,ad,tQo,iV,aQo,nQo,dV,sQo,lQo,iQo,mL,dQo,ahe,cQo,mQo,fQo,ht,fL,gQo,nhe,hQo,uQo,nd,pQo,she,_Qo,bQo,cV,FQo,vQo,TQo,H1,MQo,io,gL,EQo,lhe,CQo,wQo,qa,AQo,ihe,yQo,LQo,dhe,xQo,$Qo,che,kQo,SQo,RQo,Na,U1,mhe,BQo,PQo,mV,IQo,qQo,NQo,J1,fhe,jQo,DQo,fV,GQo,OQo,VQo,Y1,ghe,XQo,zQo,gV,QQo,WQo,HQo,K1,hhe,UQo,JQo,hV,YQo,KQo,ZQo,Z1,eWo,uhe,oWo,rWo,phe,tWo,aWo,eT,HBe,sd,oT,_he,hL,nWo,bhe,sWo,UBe,Vo,uL,lWo,ld,iWo,uV,dWo,cWo,pV,mWo,fWo,gWo,pL,hWo,Fhe,uWo,pWo,_Wo,ut,_L,bWo,vhe,FWo,vWo,id,TWo,The,MWo,EWo,_V,CWo,wWo,AWo,rT,yWo,co,bL,LWo,Mhe,xWo,$Wo,ja,kWo,Ehe,SWo,RWo,Che,BWo,PWo,whe,IWo,qWo,NWo,je,tT,Ahe,jWo,DWo,bV,GWo,OWo,VWo,aT,yhe,XWo,zWo,FV,QWo,WWo,HWo,nT,Lhe,UWo,JWo,vV,YWo,KWo,ZWo,sT,xhe,eHo,oHo,TV,rHo,tHo,aHo,lT,$he,nHo,sHo,MV,lHo,iHo,dHo,iT,khe,cHo,mHo,EV,fHo,gHo,hHo,dT,She,uHo,pHo,CV,_Ho,bHo,FHo,cT,Rhe,vHo,THo,wV,MHo,EHo,CHo,mT,wHo,Bhe,AHo,yHo,Phe,LHo,xHo,fT,JBe,dd,gT,Ihe,FL,$Ho,qhe,kHo,YBe,Xo,vL,SHo,cd,RHo,AV,BHo,PHo,yV,IHo,qHo,NHo,TL,jHo,Nhe,DHo,GHo,OHo,pt,ML,VHo,jhe,XHo,zHo,md,QHo,Dhe,WHo,HHo,LV,UHo,JHo,YHo,hT,KHo,mo,EL,ZHo,Ghe,eUo,oUo,Da,rUo,Ohe,tUo,aUo,Vhe,nUo,sUo,Xhe,lUo,iUo,dUo,CL,uT,zhe,cUo,mUo,xV,fUo,gUo,hUo,pT,Qhe,uUo,pUo,$V,_Uo,bUo,FUo,_T,vUo,Whe,TUo,MUo,Hhe,EUo,CUo,bT,KBe,fd,FT,Uhe,wL,wUo,Jhe,AUo,ZBe,zo,AL,yUo,gd,LUo,kV,xUo,$Uo,SV,kUo,SUo,RUo,yL,BUo,Yhe,PUo,IUo,qUo,_t,LL,NUo,Khe,jUo,DUo,hd,GUo,Zhe,OUo,VUo,RV,XUo,zUo,QUo,vT,WUo,fo,xL,HUo,eue,UUo,JUo,Ga,YUo,oue,KUo,ZUo,rue,eJo,oJo,tue,rJo,tJo,aJo,Oa,TT,aue,nJo,sJo,BV,lJo,iJo,dJo,MT,nue,cJo,mJo,PV,fJo,gJo,hJo,ET,sue,uJo,pJo,IV,_Jo,bJo,FJo,CT,lue,vJo,TJo,qV,MJo,EJo,CJo,wT,wJo,iue,AJo,yJo,due,LJo,xJo,AT,ePe,ud,yT,cue,$L,$Jo,mue,kJo,oPe,Qo,kL,SJo,pd,RJo,NV,BJo,PJo,jV,IJo,qJo,NJo,SL,jJo,fue,DJo,GJo,OJo,bt,RL,VJo,gue,XJo,zJo,_d,QJo,hue,WJo,HJo,DV,UJo,JJo,YJo,LT,KJo,go,BL,ZJo,uue,eYo,oYo,Va,rYo,pue,tYo,aYo,_ue,nYo,sYo,bue,lYo,iYo,dYo,bd,xT,Fue,cYo,mYo,GV,fYo,gYo,hYo,$T,vue,uYo,pYo,OV,_Yo,bYo,FYo,kT,Tue,vYo,TYo,VV,MYo,EYo,CYo,ST,wYo,Mue,AYo,yYo,Eue,LYo,xYo,RT,rPe,Fd,BT,Cue,PL,$Yo,wue,kYo,tPe,Wo,IL,SYo,vd,RYo,XV,BYo,PYo,zV,IYo,qYo,NYo,qL,jYo,Aue,DYo,GYo,OYo,Ft,NL,VYo,yue,XYo,zYo,Td,QYo,Lue,WYo,HYo,QV,UYo,JYo,YYo,PT,KYo,ho,jL,ZYo,xue,eKo,oKo,Xa,rKo,$ue,tKo,aKo,kue,nKo,sKo,Sue,lKo,iKo,dKo,DL,IT,Rue,cKo,mKo,WV,fKo,gKo,hKo,qT,Bue,uKo,pKo,HV,_Ko,bKo,FKo,NT,vKo,Pue,TKo,MKo,Iue,EKo,CKo,jT,aPe,Md,DT,que,GL,wKo,Nue,AKo,nPe,Ho,OL,yKo,Ed,LKo,UV,xKo,$Ko,JV,kKo,SKo,RKo,VL,BKo,jue,PKo,IKo,qKo,vt,XL,NKo,Due,jKo,DKo,Cd,GKo,Gue,OKo,VKo,YV,XKo,zKo,QKo,GT,WKo,uo,zL,HKo,Oue,UKo,JKo,za,YKo,Vue,KKo,ZKo,Xue,eZo,oZo,zue,rZo,tZo,aZo,Que,OT,Wue,nZo,sZo,KV,lZo,iZo,dZo,VT,cZo,Hue,mZo,fZo,Uue,gZo,hZo,XT,sPe,wd,zT,Jue,QL,uZo,Yue,pZo,lPe,Uo,WL,_Zo,Ad,bZo,ZV,FZo,vZo,eX,TZo,MZo,EZo,HL,CZo,Kue,wZo,AZo,yZo,Tt,UL,LZo,Zue,xZo,$Zo,yd,kZo,epe,SZo,RZo,oX,BZo,PZo,IZo,QT,qZo,po,JL,NZo,ope,jZo,DZo,Qa,GZo,rpe,OZo,VZo,tpe,XZo,zZo,ape,QZo,WZo,HZo,Wa,WT,npe,UZo,JZo,rX,YZo,KZo,ZZo,HT,spe,eer,oer,tX,rer,ter,aer,UT,lpe,ner,ser,aX,ler,ier,der,JT,ipe,cer,mer,nX,fer,ger,her,YT,uer,dpe,per,_er,cpe,ber,Fer,KT,iPe,Ld,ZT,mpe,YL,ver,fpe,Ter,dPe,Jo,KL,Mer,xd,Eer,sX,Cer,wer,lX,Aer,yer,Ler,ZL,xer,gpe,$er,ker,Ser,Mt,e8,Rer,hpe,Ber,Per,$d,Ier,upe,qer,Ner,iX,jer,Der,Ger,eM,Oer,_o,o8,Ver,ppe,Xer,zer,Ha,Qer,_pe,Wer,Her,bpe,Uer,Jer,Fpe,Yer,Ker,Zer,vpe,oM,Tpe,eor,oor,dX,ror,tor,aor,rM,nor,Mpe,sor,lor,Epe,ior,dor,tM,cPe,kd,aM,Cpe,r8,cor,wpe,mor,mPe,Yo,t8,gor,Sd,hor,cX,uor,por,mX,_or,bor,For,a8,vor,Ape,Tor,Mor,Eor,Et,n8,Cor,ype,wor,Aor,Rd,yor,Lpe,Lor,xor,fX,$or,kor,Sor,nM,Ror,Cr,s8,Bor,xpe,Por,Ior,Ua,qor,$pe,Nor,jor,kpe,Dor,Gor,Spe,Oor,Vor,Xor,j,sM,Rpe,zor,Qor,gX,Wor,Hor,Uor,lM,Bpe,Jor,Yor,hX,Kor,Zor,err,iM,Ppe,orr,rrr,uX,trr,arr,nrr,dM,Ipe,srr,lrr,pX,irr,drr,crr,cM,qpe,mrr,frr,_X,grr,hrr,urr,mM,Npe,prr,_rr,bX,brr,Frr,vrr,fM,jpe,Trr,Mrr,FX,Err,Crr,wrr,gM,Dpe,Arr,yrr,vX,Lrr,xrr,$rr,hM,Gpe,krr,Srr,TX,Rrr,Brr,Prr,uM,Ope,Irr,qrr,MX,Nrr,jrr,Drr,pM,Vpe,Grr,Orr,EX,Vrr,Xrr,zrr,_M,Xpe,Qrr,Wrr,CX,Hrr,Urr,Jrr,bM,zpe,Yrr,Krr,wX,Zrr,etr,otr,FM,Qpe,rtr,ttr,AX,atr,ntr,str,vM,Wpe,ltr,itr,yX,dtr,ctr,mtr,TM,Hpe,ftr,gtr,LX,htr,utr,ptr,$s,Upe,_tr,btr,xX,Ftr,vtr,$X,Ttr,Mtr,Etr,MM,Jpe,Ctr,wtr,kX,Atr,ytr,Ltr,EM,Ype,xtr,$tr,SX,ktr,Str,Rtr,CM,Kpe,Btr,Ptr,RX,Itr,qtr,Ntr,wM,Zpe,jtr,Dtr,BX,Gtr,Otr,Vtr,AM,e_e,Xtr,ztr,PX,Qtr,Wtr,Htr,yM,o_e,Utr,Jtr,IX,Ytr,Ktr,Ztr,LM,r_e,ear,oar,qX,rar,tar,aar,xM,t_e,nar,sar,NX,lar,iar,dar,$M,a_e,car,mar,jX,far,gar,har,kM,n_e,uar,par,DX,_ar,bar,Far,SM,s_e,Tar,Mar,GX,Ear,Car,war,RM,l_e,Aar,yar,OX,Lar,xar,$ar,BM,i_e,kar,Sar,VX,Rar,Bar,Par,PM,d_e,Iar,qar,XX,Nar,jar,Dar,IM,c_e,Gar,Oar,zX,Var,Xar,zar,qM,m_e,Qar,War,QX,Har,Uar,Jar,NM,f_e,Yar,Kar,WX,Zar,enr,onr,jM,g_e,rnr,tnr,HX,anr,nnr,snr,DM,h_e,lnr,inr,UX,dnr,cnr,mnr,GM,u_e,fnr,gnr,JX,hnr,unr,pnr,OM,p_e,_nr,bnr,YX,Fnr,vnr,Tnr,VM,__e,Mnr,Enr,KX,Cnr,wnr,Anr,XM,b_e,ynr,Lnr,ZX,xnr,$nr,knr,zM,F_e,Snr,Rnr,ez,Bnr,Pnr,Inr,QM,v_e,qnr,Nnr,oz,jnr,Dnr,Gnr,WM,T_e,Onr,Vnr,rz,Xnr,znr,Qnr,HM,M_e,Wnr,Hnr,tz,Unr,Jnr,Ynr,UM,fPe,Bd,JM,E_e,l8,Knr,C_e,Znr,gPe,Ko,i8,esr,Pd,osr,az,rsr,tsr,nz,asr,nsr,ssr,d8,lsr,w_e,isr,dsr,csr,Ct,c8,msr,A_e,fsr,gsr,Id,hsr,y_e,usr,psr,sz,_sr,bsr,Fsr,YM,vsr,wr,m8,Tsr,L_e,Msr,Esr,Ja,Csr,x_e,wsr,Asr,$_e,ysr,Lsr,k_e,xsr,$sr,ksr,ne,KM,S_e,Ssr,Rsr,lz,Bsr,Psr,Isr,ZM,R_e,qsr,Nsr,iz,jsr,Dsr,Gsr,e4,B_e,Osr,Vsr,dz,Xsr,zsr,Qsr,o4,P_e,Wsr,Hsr,cz,Usr,Jsr,Ysr,r4,I_e,Ksr,Zsr,mz,elr,olr,rlr,t4,q_e,tlr,alr,fz,nlr,slr,llr,a4,N_e,ilr,dlr,gz,clr,mlr,flr,n4,j_e,glr,hlr,hz,ulr,plr,_lr,s4,D_e,blr,Flr,uz,vlr,Tlr,Mlr,l4,G_e,Elr,Clr,pz,wlr,Alr,ylr,i4,O_e,Llr,xlr,_z,$lr,klr,Slr,d4,V_e,Rlr,Blr,bz,Plr,Ilr,qlr,c4,X_e,Nlr,jlr,Fz,Dlr,Glr,Olr,m4,z_e,Vlr,Xlr,vz,zlr,Qlr,Wlr,f4,Q_e,Hlr,Ulr,Tz,Jlr,Ylr,Klr,g4,W_e,Zlr,eir,Mz,oir,rir,tir,h4,H_e,air,nir,Ez,sir,lir,iir,u4,U_e,dir,cir,Cz,mir,fir,gir,p4,J_e,hir,uir,wz,pir,_ir,bir,_4,Y_e,Fir,vir,Az,Tir,Mir,Eir,b4,K_e,Cir,wir,yz,Air,yir,Lir,F4,Z_e,xir,$ir,Lz,kir,Sir,Rir,v4,ebe,Bir,Pir,xz,Iir,qir,Nir,T4,hPe,qd,M4,obe,f8,jir,rbe,Dir,uPe,Zo,g8,Gir,Nd,Oir,$z,Vir,Xir,kz,zir,Qir,Wir,h8,Hir,tbe,Uir,Jir,Yir,wt,u8,Kir,abe,Zir,edr,jd,odr,nbe,rdr,tdr,Sz,adr,ndr,sdr,E4,ldr,Ar,p8,idr,sbe,ddr,cdr,Ya,mdr,lbe,fdr,gdr,ibe,hdr,udr,dbe,pdr,_dr,bdr,Te,C4,cbe,Fdr,vdr,Rz,Tdr,Mdr,Edr,w4,mbe,Cdr,wdr,Bz,Adr,ydr,Ldr,A4,fbe,xdr,$dr,Pz,kdr,Sdr,Rdr,y4,gbe,Bdr,Pdr,Iz,Idr,qdr,Ndr,L4,hbe,jdr,Ddr,qz,Gdr,Odr,Vdr,x4,ube,Xdr,zdr,Nz,Qdr,Wdr,Hdr,$4,pbe,Udr,Jdr,jz,Ydr,Kdr,Zdr,k4,_be,ecr,ocr,Dz,rcr,tcr,acr,S4,bbe,ncr,scr,Gz,lcr,icr,dcr,R4,Fbe,ccr,mcr,Oz,fcr,gcr,hcr,B4,vbe,ucr,pcr,Vz,_cr,bcr,Fcr,P4,Tbe,vcr,Tcr,Xz,Mcr,Ecr,Ccr,I4,pPe,Dd,q4,Mbe,_8,wcr,Ebe,Acr,_Pe,er,b8,ycr,Gd,Lcr,zz,xcr,$cr,Qz,kcr,Scr,Rcr,F8,Bcr,Cbe,Pcr,Icr,qcr,At,v8,Ncr,wbe,jcr,Dcr,Od,Gcr,Abe,Ocr,Vcr,Wz,Xcr,zcr,Qcr,N4,Wcr,yr,T8,Hcr,ybe,Ucr,Jcr,Ka,Ycr,Lbe,Kcr,Zcr,xbe,emr,omr,$be,rmr,tmr,amr,M8,j4,kbe,nmr,smr,Hz,lmr,imr,dmr,D4,Sbe,cmr,mmr,Uz,fmr,gmr,hmr,G4,bPe,Vd,O4,Rbe,E8,umr,Bbe,pmr,FPe,or,C8,_mr,Xd,bmr,Jz,Fmr,vmr,Yz,Tmr,Mmr,Emr,w8,Cmr,Pbe,wmr,Amr,ymr,yt,A8,Lmr,Ibe,xmr,$mr,zd,kmr,qbe,Smr,Rmr,Kz,Bmr,Pmr,Imr,V4,qmr,Lr,y8,Nmr,Nbe,jmr,Dmr,Za,Gmr,jbe,Omr,Vmr,Dbe,Xmr,zmr,Gbe,Qmr,Wmr,Hmr,ie,X4,Obe,Umr,Jmr,Zz,Ymr,Kmr,Zmr,z4,Vbe,efr,ofr,eQ,rfr,tfr,afr,Q4,Xbe,nfr,sfr,oQ,lfr,ifr,dfr,W4,zbe,cfr,mfr,rQ,ffr,gfr,hfr,H4,Qbe,ufr,pfr,tQ,_fr,bfr,Ffr,U4,Wbe,vfr,Tfr,aQ,Mfr,Efr,Cfr,J4,Hbe,wfr,Afr,nQ,yfr,Lfr,xfr,Y4,Ube,$fr,kfr,sQ,Sfr,Rfr,Bfr,K4,Jbe,Pfr,Ifr,lQ,qfr,Nfr,jfr,Z4,Ybe,Dfr,Gfr,iQ,Ofr,Vfr,Xfr,eE,Kbe,zfr,Qfr,dQ,Wfr,Hfr,Ufr,oE,Zbe,Jfr,Yfr,cQ,Kfr,Zfr,egr,rE,e2e,ogr,rgr,mQ,tgr,agr,ngr,tE,o2e,sgr,lgr,fQ,igr,dgr,cgr,aE,r2e,mgr,fgr,gQ,ggr,hgr,ugr,nE,t2e,pgr,_gr,hQ,bgr,Fgr,vgr,sE,a2e,Tgr,Mgr,uQ,Egr,Cgr,wgr,lE,n2e,Agr,ygr,pQ,Lgr,xgr,$gr,iE,s2e,kgr,Sgr,_Q,Rgr,Bgr,Pgr,dE,l2e,Igr,qgr,bQ,Ngr,jgr,Dgr,cE,vPe,Qd,mE,i2e,L8,Ggr,d2e,Ogr,TPe,rr,x8,Vgr,Wd,Xgr,FQ,zgr,Qgr,vQ,Wgr,Hgr,Ugr,$8,Jgr,c2e,Ygr,Kgr,Zgr,Lt,k8,ehr,m2e,ohr,rhr,Hd,thr,f2e,ahr,nhr,TQ,shr,lhr,ihr,fE,dhr,xr,S8,chr,g2e,mhr,fhr,en,ghr,h2e,hhr,uhr,u2e,phr,_hr,p2e,bhr,Fhr,vhr,ye,gE,_2e,Thr,Mhr,MQ,Ehr,Chr,whr,hE,b2e,Ahr,yhr,EQ,Lhr,xhr,$hr,uE,F2e,khr,Shr,CQ,Rhr,Bhr,Phr,pE,v2e,Ihr,qhr,wQ,Nhr,jhr,Dhr,_E,T2e,Ghr,Ohr,AQ,Vhr,Xhr,zhr,bE,M2e,Qhr,Whr,yQ,Hhr,Uhr,Jhr,FE,E2e,Yhr,Khr,LQ,Zhr,eur,our,vE,C2e,rur,tur,xQ,aur,nur,sur,TE,w2e,lur,iur,$Q,dur,cur,mur,ME,A2e,fur,gur,kQ,hur,uur,pur,EE,MPe,Ud,CE,y2e,R8,_ur,L2e,bur,EPe,tr,B8,Fur,Jd,vur,SQ,Tur,Mur,RQ,Eur,Cur,wur,P8,Aur,x2e,yur,Lur,xur,xt,I8,$ur,$2e,kur,Sur,Yd,Rur,k2e,Bur,Pur,BQ,Iur,qur,Nur,wE,jur,$r,q8,Dur,S2e,Gur,Our,on,Vur,R2e,Xur,zur,B2e,Qur,Wur,P2e,Hur,Uur,Jur,Z,AE,I2e,Yur,Kur,PQ,Zur,epr,opr,yE,q2e,rpr,tpr,IQ,apr,npr,spr,LE,N2e,lpr,ipr,qQ,dpr,cpr,mpr,xE,j2e,fpr,gpr,NQ,hpr,upr,ppr,$E,D2e,_pr,bpr,jQ,Fpr,vpr,Tpr,kE,G2e,Mpr,Epr,DQ,Cpr,wpr,Apr,SE,O2e,ypr,Lpr,GQ,xpr,$pr,kpr,RE,V2e,Spr,Rpr,OQ,Bpr,Ppr,Ipr,BE,X2e,qpr,Npr,VQ,jpr,Dpr,Gpr,PE,z2e,Opr,Vpr,XQ,Xpr,zpr,Qpr,IE,Q2e,Wpr,Hpr,zQ,Upr,Jpr,Ypr,qE,W2e,Kpr,Zpr,QQ,e_r,o_r,r_r,NE,H2e,t_r,a_r,WQ,n_r,s_r,l_r,jE,U2e,i_r,d_r,HQ,c_r,m_r,f_r,DE,J2e,g_r,h_r,UQ,u_r,p_r,__r,GE,Y2e,b_r,F_r,JQ,v_r,T_r,M_r,OE,K2e,E_r,C_r,YQ,w_r,A_r,y_r,VE,Z2e,L_r,x_r,KQ,$_r,k_r,S_r,XE,eFe,R_r,B_r,ZQ,P_r,I_r,q_r,zE,oFe,N_r,j_r,eW,D_r,G_r,O_r,QE,rFe,V_r,X_r,oW,z_r,Q_r,W_r,WE,tFe,H_r,U_r,rW,J_r,Y_r,K_r,HE,aFe,Z_r,ebr,tW,obr,rbr,tbr,UE,nFe,abr,nbr,aW,sbr,lbr,ibr,JE,sFe,dbr,cbr,nW,mbr,fbr,gbr,YE,lFe,hbr,ubr,sW,pbr,_br,bbr,KE,CPe,Kd,ZE,iFe,N8,Fbr,dFe,vbr,wPe,ar,j8,Tbr,Zd,Mbr,lW,Ebr,Cbr,iW,wbr,Abr,ybr,D8,Lbr,cFe,xbr,$br,kbr,$t,G8,Sbr,mFe,Rbr,Bbr,ec,Pbr,fFe,Ibr,qbr,dW,Nbr,jbr,Dbr,e5,Gbr,kr,O8,Obr,gFe,Vbr,Xbr,rn,zbr,hFe,Qbr,Wbr,uFe,Hbr,Ubr,pFe,Jbr,Ybr,Kbr,ue,o5,_Fe,Zbr,e2r,cW,o2r,r2r,t2r,r5,bFe,a2r,n2r,mW,s2r,l2r,i2r,t5,FFe,d2r,c2r,fW,m2r,f2r,g2r,a5,vFe,h2r,u2r,gW,p2r,_2r,b2r,n5,TFe,F2r,v2r,hW,T2r,M2r,E2r,s5,MFe,C2r,w2r,uW,A2r,y2r,L2r,l5,EFe,x2r,$2r,pW,k2r,S2r,R2r,i5,CFe,B2r,P2r,_W,I2r,q2r,N2r,d5,wFe,j2r,D2r,bW,G2r,O2r,V2r,c5,AFe,X2r,z2r,FW,Q2r,W2r,H2r,m5,yFe,U2r,J2r,vW,Y2r,K2r,Z2r,f5,LFe,eFr,oFr,TW,rFr,tFr,aFr,g5,xFe,nFr,sFr,MW,lFr,iFr,dFr,h5,$Fe,cFr,mFr,EW,fFr,gFr,hFr,u5,kFe,uFr,pFr,CW,_Fr,bFr,FFr,p5,SFe,vFr,TFr,wW,MFr,EFr,CFr,_5,RFe,wFr,AFr,AW,yFr,LFr,xFr,b5,APe,oc,F5,BFe,V8,$Fr,PFe,kFr,yPe,nr,X8,SFr,rc,RFr,yW,BFr,PFr,LW,IFr,qFr,NFr,z8,jFr,IFe,DFr,GFr,OFr,kt,Q8,VFr,qFe,XFr,zFr,tc,QFr,NFe,WFr,HFr,xW,UFr,JFr,YFr,v5,KFr,Sr,W8,ZFr,jFe,evr,ovr,tn,rvr,DFe,tvr,avr,GFe,nvr,svr,OFe,lvr,ivr,dvr,VFe,T5,XFe,cvr,mvr,$W,fvr,gvr,hvr,M5,LPe,ac,E5,zFe,H8,uvr,QFe,pvr,xPe,sr,U8,_vr,nc,bvr,kW,Fvr,vvr,SW,Tvr,Mvr,Evr,J8,Cvr,WFe,wvr,Avr,yvr,St,Y8,Lvr,HFe,xvr,$vr,sc,kvr,UFe,Svr,Rvr,RW,Bvr,Pvr,Ivr,C5,qvr,Rr,K8,Nvr,JFe,jvr,Dvr,an,Gvr,YFe,Ovr,Vvr,KFe,Xvr,zvr,ZFe,Qvr,Wvr,Hvr,de,w5,eve,Uvr,Jvr,BW,Yvr,Kvr,Zvr,A5,ove,e1r,o1r,PW,r1r,t1r,a1r,y5,rve,n1r,s1r,IW,l1r,i1r,d1r,L5,tve,c1r,m1r,qW,f1r,g1r,h1r,x5,ave,u1r,p1r,NW,_1r,b1r,F1r,$5,nve,v1r,T1r,jW,M1r,E1r,C1r,k5,sve,w1r,A1r,DW,y1r,L1r,x1r,S5,lve,$1r,k1r,GW,S1r,R1r,B1r,R5,ive,P1r,I1r,OW,q1r,N1r,j1r,B5,dve,D1r,G1r,VW,O1r,V1r,X1r,P5,cve,z1r,Q1r,XW,W1r,H1r,U1r,I5,mve,J1r,Y1r,zW,K1r,Z1r,eTr,q5,fve,oTr,rTr,QW,tTr,aTr,nTr,N5,gve,sTr,lTr,WW,iTr,dTr,cTr,j5,hve,mTr,fTr,HW,gTr,hTr,uTr,D5,uve,pTr,_Tr,UW,bTr,FTr,vTr,G5,pve,TTr,MTr,JW,ETr,CTr,wTr,O5,_ve,ATr,yTr,YW,LTr,xTr,$Tr,V5,bve,kTr,STr,KW,RTr,BTr,PTr,X5,Fve,ITr,qTr,ZW,NTr,jTr,DTr,z5,$Pe,lc,Q5,vve,Z8,GTr,Tve,OTr,kPe,lr,e7,VTr,ic,XTr,eH,zTr,QTr,oH,WTr,HTr,UTr,o7,JTr,Mve,YTr,KTr,ZTr,Rt,r7,eMr,Eve,oMr,rMr,dc,tMr,Cve,aMr,nMr,rH,sMr,lMr,iMr,W5,dMr,Br,t7,cMr,wve,mMr,fMr,nn,gMr,Ave,hMr,uMr,yve,pMr,_Mr,Lve,bMr,FMr,vMr,ce,H5,xve,TMr,MMr,tH,EMr,CMr,wMr,U5,$ve,AMr,yMr,aH,LMr,xMr,$Mr,J5,kve,kMr,SMr,nH,RMr,BMr,PMr,Y5,Sve,IMr,qMr,sH,NMr,jMr,DMr,K5,Rve,GMr,OMr,lH,VMr,XMr,zMr,Z5,Bve,QMr,WMr,iH,HMr,UMr,JMr,eC,Pve,YMr,KMr,dH,ZMr,e4r,o4r,oC,Ive,r4r,t4r,cH,a4r,n4r,s4r,rC,qve,l4r,i4r,mH,d4r,c4r,m4r,tC,Nve,f4r,g4r,fH,h4r,u4r,p4r,aC,jve,_4r,b4r,gH,F4r,v4r,T4r,nC,Dve,M4r,E4r,hH,C4r,w4r,A4r,sC,Gve,y4r,L4r,uH,x4r,$4r,k4r,lC,Ove,S4r,R4r,pH,B4r,P4r,I4r,iC,Vve,q4r,N4r,_H,j4r,D4r,G4r,dC,Xve,O4r,V4r,bH,X4r,z4r,Q4r,cC,zve,W4r,H4r,FH,U4r,J4r,Y4r,mC,Qve,K4r,Z4r,vH,eEr,oEr,rEr,fC,Wve,tEr,aEr,TH,nEr,sEr,lEr,gC,Hve,iEr,dEr,MH,cEr,mEr,fEr,hC,SPe,cc,uC,Uve,a7,gEr,Jve,hEr,RPe,ir,n7,uEr,mc,pEr,EH,_Er,bEr,CH,FEr,vEr,TEr,s7,MEr,Yve,EEr,CEr,wEr,Bt,l7,AEr,Kve,yEr,LEr,fc,xEr,Zve,$Er,kEr,wH,SEr,REr,BEr,pC,PEr,Pr,i7,IEr,e1e,qEr,NEr,sn,jEr,o1e,DEr,GEr,r1e,OEr,VEr,t1e,XEr,zEr,QEr,a1e,_C,n1e,WEr,HEr,AH,UEr,JEr,YEr,bC,BPe,gc,FC,s1e,d7,KEr,l1e,ZEr,PPe,dr,c7,e5r,hc,o5r,yH,r5r,t5r,LH,a5r,n5r,s5r,m7,l5r,i1e,i5r,d5r,c5r,Pt,f7,m5r,d1e,f5r,g5r,uc,h5r,c1e,u5r,p5r,xH,_5r,b5r,F5r,vC,v5r,Ir,g7,T5r,m1e,M5r,E5r,ln,C5r,f1e,w5r,A5r,g1e,y5r,L5r,h1e,x5r,$5r,k5r,u1e,TC,p1e,S5r,R5r,$H,B5r,P5r,I5r,MC,IPe,pc,EC,_1e,h7,q5r,b1e,N5r,qPe,cr,u7,j5r,_c,D5r,kH,G5r,O5r,SH,V5r,X5r,z5r,p7,Q5r,F1e,W5r,H5r,U5r,It,_7,J5r,v1e,Y5r,K5r,bc,Z5r,T1e,eCr,oCr,RH,rCr,tCr,aCr,CC,nCr,qr,b7,sCr,M1e,lCr,iCr,dn,dCr,E1e,cCr,mCr,C1e,fCr,gCr,w1e,hCr,uCr,pCr,oe,wC,A1e,_Cr,bCr,BH,FCr,vCr,TCr,AC,y1e,MCr,ECr,PH,CCr,wCr,ACr,yC,L1e,yCr,LCr,IH,xCr,$Cr,kCr,LC,x1e,SCr,RCr,qH,BCr,PCr,ICr,xC,$1e,qCr,NCr,NH,jCr,DCr,GCr,$C,k1e,OCr,VCr,jH,XCr,zCr,QCr,kC,S1e,WCr,HCr,DH,UCr,JCr,YCr,SC,R1e,KCr,ZCr,GH,e3r,o3r,r3r,RC,B1e,t3r,a3r,OH,n3r,s3r,l3r,BC,P1e,i3r,d3r,VH,c3r,m3r,f3r,PC,I1e,g3r,h3r,XH,u3r,p3r,_3r,IC,q1e,b3r,F3r,zH,v3r,T3r,M3r,qC,N1e,E3r,C3r,QH,w3r,A3r,y3r,NC,j1e,L3r,x3r,WH,$3r,k3r,S3r,jC,D1e,R3r,B3r,HH,P3r,I3r,q3r,DC,G1e,N3r,j3r,UH,D3r,G3r,O3r,GC,O1e,V3r,X3r,JH,z3r,Q3r,W3r,OC,V1e,H3r,U3r,YH,J3r,Y3r,K3r,VC,X1e,Z3r,ewr,KH,owr,rwr,twr,XC,z1e,awr,nwr,ZH,swr,lwr,iwr,zC,Q1e,dwr,cwr,eU,mwr,fwr,gwr,QC,W1e,hwr,uwr,oU,pwr,_wr,bwr,WC,H1e,Fwr,vwr,rU,Twr,Mwr,Ewr,HC,U1e,Cwr,wwr,tU,Awr,ywr,Lwr,UC,J1e,xwr,$wr,aU,kwr,Swr,Rwr,JC,NPe,Fc,YC,Y1e,F7,Bwr,K1e,Pwr,jPe,mr,v7,Iwr,vc,qwr,nU,Nwr,jwr,sU,Dwr,Gwr,Owr,T7,Vwr,Z1e,Xwr,zwr,Qwr,qt,M7,Wwr,eTe,Hwr,Uwr,Tc,Jwr,oTe,Ywr,Kwr,lU,Zwr,eAr,oAr,KC,rAr,Nr,E7,tAr,rTe,aAr,nAr,cn,sAr,tTe,lAr,iAr,aTe,dAr,cAr,nTe,mAr,fAr,gAr,ke,ZC,sTe,hAr,uAr,iU,pAr,_Ar,bAr,e3,lTe,FAr,vAr,dU,TAr,MAr,EAr,o3,iTe,CAr,wAr,cU,AAr,yAr,LAr,r3,dTe,xAr,$Ar,mU,kAr,SAr,RAr,t3,cTe,BAr,PAr,fU,IAr,qAr,NAr,a3,mTe,jAr,DAr,gU,GAr,OAr,VAr,n3,fTe,XAr,zAr,hU,QAr,WAr,HAr,s3,gTe,UAr,JAr,uU,YAr,KAr,ZAr,l3,hTe,e0r,o0r,pU,r0r,t0r,a0r,i3,DPe,Mc,d3,uTe,C7,n0r,pTe,s0r,GPe,fr,w7,l0r,Ec,i0r,_U,d0r,c0r,bU,m0r,f0r,g0r,A7,h0r,_Te,u0r,p0r,_0r,Nt,y7,b0r,bTe,F0r,v0r,Cc,T0r,FTe,M0r,E0r,FU,C0r,w0r,A0r,c3,y0r,jr,L7,L0r,vTe,x0r,$0r,mn,k0r,TTe,S0r,R0r,MTe,B0r,P0r,ETe,I0r,q0r,N0r,Me,m3,CTe,j0r,D0r,vU,G0r,O0r,V0r,f3,wTe,X0r,z0r,TU,Q0r,W0r,H0r,g3,ATe,U0r,J0r,MU,Y0r,K0r,Z0r,h3,yTe,e6r,o6r,EU,r6r,t6r,a6r,u3,LTe,n6r,s6r,CU,l6r,i6r,d6r,p3,xTe,c6r,m6r,wU,f6r,g6r,h6r,_3,$Te,u6r,p6r,AU,_6r,b6r,F6r,b3,kTe,v6r,T6r,yU,M6r,E6r,C6r,F3,STe,w6r,A6r,LU,y6r,L6r,x6r,v3,RTe,$6r,k6r,xU,S6r,R6r,B6r,T3,BTe,P6r,I6r,$U,q6r,N6r,j6r,M3,PTe,D6r,G6r,kU,O6r,V6r,X6r,E3,OPe,wc,C3,ITe,x7,z6r,qTe,Q6r,VPe,gr,$7,W6r,Ac,H6r,SU,U6r,J6r,RU,Y6r,K6r,Z6r,k7,eyr,NTe,oyr,ryr,tyr,jt,S7,ayr,jTe,nyr,syr,yc,lyr,DTe,iyr,dyr,BU,cyr,myr,fyr,w3,gyr,Dr,R7,hyr,GTe,uyr,pyr,fn,_yr,OTe,byr,Fyr,VTe,vyr,Tyr,XTe,Myr,Eyr,Cyr,Le,A3,zTe,wyr,Ayr,PU,yyr,Lyr,xyr,y3,QTe,$yr,kyr,IU,Syr,Ryr,Byr,L3,WTe,Pyr,Iyr,qU,qyr,Nyr,jyr,x3,HTe,Dyr,Gyr,NU,Oyr,Vyr,Xyr,$3,UTe,zyr,Qyr,jU,Wyr,Hyr,Uyr,k3,JTe,Jyr,Yyr,DU,Kyr,Zyr,eLr,S3,YTe,oLr,rLr,GU,tLr,aLr,nLr,R3,KTe,sLr,lLr,OU,iLr,dLr,cLr,B3,ZTe,mLr,fLr,VU,gLr,hLr,uLr,P3,eMe,pLr,_Lr,XU,bLr,FLr,vLr,I3,XPe,Lc,q3,oMe,B7,TLr,rMe,MLr,zPe,hr,P7,ELr,xc,CLr,zU,wLr,ALr,QU,yLr,LLr,xLr,I7,$Lr,tMe,kLr,SLr,RLr,Dt,q7,BLr,aMe,PLr,ILr,$c,qLr,nMe,NLr,jLr,WU,DLr,GLr,OLr,N3,VLr,Gr,N7,XLr,sMe,zLr,QLr,gn,WLr,lMe,HLr,ULr,iMe,JLr,YLr,dMe,KLr,ZLr,e8r,Se,j3,cMe,o8r,r8r,HU,t8r,a8r,n8r,D3,mMe,s8r,l8r,UU,i8r,d8r,c8r,G3,fMe,m8r,f8r,JU,g8r,h8r,u8r,O3,gMe,p8r,_8r,YU,b8r,F8r,v8r,V3,hMe,T8r,M8r,KU,E8r,C8r,w8r,X3,uMe,A8r,y8r,ZU,L8r,x8r,$8r,z3,pMe,k8r,S8r,eJ,R8r,B8r,P8r,Q3,_Me,I8r,q8r,oJ,N8r,j8r,D8r,W3,bMe,G8r,O8r,rJ,V8r,X8r,z8r,H3,QPe,kc,U3,FMe,j7,Q8r,vMe,W8r,WPe,ur,D7,H8r,Sc,U8r,tJ,J8r,Y8r,aJ,K8r,Z8r,e7r,G7,o7r,TMe,r7r,t7r,a7r,Gt,O7,n7r,MMe,s7r,l7r,Rc,i7r,EMe,d7r,c7r,nJ,m7r,f7r,g7r,J3,h7r,Or,V7,u7r,CMe,p7r,_7r,hn,b7r,wMe,F7r,v7r,AMe,T7r,M7r,yMe,E7r,C7r,w7r,xe,Y3,LMe,A7r,y7r,sJ,L7r,x7r,$7r,K3,xMe,k7r,S7r,lJ,R7r,B7r,P7r,Z3,$Me,I7r,q7r,iJ,N7r,j7r,D7r,ew,kMe,G7r,O7r,dJ,V7r,X7r,z7r,ow,SMe,Q7r,W7r,cJ,H7r,U7r,J7r,rw,RMe,Y7r,K7r,mJ,Z7r,exr,oxr,tw,BMe,rxr,txr,fJ,axr,nxr,sxr,aw,PMe,lxr,ixr,gJ,dxr,cxr,mxr,nw,IMe,fxr,gxr,hJ,hxr,uxr,pxr,sw,qMe,_xr,bxr,uJ,Fxr,vxr,Txr,lw,HPe,Bc,iw,NMe,X7,Mxr,jMe,Exr,UPe,pr,z7,Cxr,Pc,wxr,pJ,Axr,yxr,_J,Lxr,xxr,$xr,Q7,kxr,DMe,Sxr,Rxr,Bxr,Ot,W7,Pxr,GMe,Ixr,qxr,Ic,Nxr,OMe,jxr,Dxr,bJ,Gxr,Oxr,Vxr,dw,Xxr,Vr,H7,zxr,VMe,Qxr,Wxr,un,Hxr,XMe,Uxr,Jxr,zMe,Yxr,Kxr,QMe,Zxr,e9r,o9r,$e,cw,WMe,r9r,t9r,FJ,a9r,n9r,s9r,mw,HMe,l9r,i9r,vJ,d9r,c9r,m9r,fw,UMe,f9r,g9r,TJ,h9r,u9r,p9r,gw,JMe,_9r,b9r,MJ,F9r,v9r,T9r,hw,YMe,M9r,E9r,EJ,C9r,w9r,A9r,uw,KMe,y9r,L9r,CJ,x9r,$9r,k9r,pw,ZMe,S9r,R9r,wJ,B9r,P9r,I9r,_w,e4e,q9r,N9r,AJ,j9r,D9r,G9r,bw,o4e,O9r,V9r,yJ,X9r,z9r,Q9r,Fw,r4e,W9r,H9r,LJ,U9r,J9r,Y9r,vw,JPe,qc,Tw,t4e,U7,K9r,a4e,Z9r,YPe,_r,J7,e$r,Nc,o$r,xJ,r$r,t$r,$J,a$r,n$r,s$r,Y7,l$r,n4e,i$r,d$r,c$r,Vt,K7,m$r,s4e,f$r,g$r,jc,h$r,l4e,u$r,p$r,kJ,_$r,b$r,F$r,Mw,v$r,Xr,Z7,T$r,i4e,M$r,E$r,pn,C$r,d4e,w$r,A$r,c4e,y$r,L$r,m4e,x$r,$$r,k$r,De,Ew,f4e,S$r,R$r,SJ,B$r,P$r,I$r,Cw,g4e,q$r,N$r,RJ,j$r,D$r,G$r,ww,h4e,O$r,V$r,BJ,X$r,z$r,Q$r,Aw,u4e,W$r,H$r,PJ,U$r,J$r,Y$r,yw,p4e,K$r,Z$r,IJ,ekr,okr,rkr,Lw,_4e,tkr,akr,qJ,nkr,skr,lkr,xw,b4e,ikr,dkr,NJ,ckr,mkr,fkr,$w,F4e,gkr,hkr,jJ,ukr,pkr,_kr,kw,KPe,Dc,Sw,v4e,ex,bkr,T4e,Fkr,ZPe,br,ox,vkr,Gc,Tkr,DJ,Mkr,Ekr,GJ,Ckr,wkr,Akr,rx,ykr,M4e,Lkr,xkr,$kr,Xt,tx,kkr,E4e,Skr,Rkr,Oc,Bkr,C4e,Pkr,Ikr,OJ,qkr,Nkr,jkr,Rw,Dkr,zr,ax,Gkr,w4e,Okr,Vkr,_n,Xkr,A4e,zkr,Qkr,y4e,Wkr,Hkr,L4e,Ukr,Jkr,Ykr,Ge,Bw,x4e,Kkr,Zkr,VJ,eSr,oSr,rSr,Pw,$4e,tSr,aSr,XJ,nSr,sSr,lSr,Iw,k4e,iSr,dSr,zJ,cSr,mSr,fSr,qw,S4e,gSr,hSr,QJ,uSr,pSr,_Sr,Nw,R4e,bSr,FSr,WJ,vSr,TSr,MSr,jw,B4e,ESr,CSr,HJ,wSr,ASr,ySr,Dw,P4e,LSr,xSr,UJ,$Sr,kSr,SSr,Gw,I4e,RSr,BSr,JJ,PSr,ISr,qSr,Ow,eIe,Vc,Vw,q4e,nx,NSr,N4e,jSr,oIe,Fr,sx,DSr,Xc,GSr,YJ,OSr,VSr,KJ,XSr,zSr,QSr,lx,WSr,j4e,HSr,USr,JSr,zt,ix,YSr,D4e,KSr,ZSr,zc,eRr,G4e,oRr,rRr,ZJ,tRr,aRr,nRr,Xw,sRr,Qr,dx,lRr,O4e,iRr,dRr,bn,cRr,V4e,mRr,fRr,X4e,gRr,hRr,z4e,uRr,pRr,_Rr,Q4e,zw,W4e,bRr,FRr,eY,vRr,TRr,MRr,Qw,rIe,Qc,Ww,H4e,cx,ERr,U4e,CRr,tIe,vr,mx,wRr,Wc,ARr,oY,yRr,LRr,rY,xRr,$Rr,kRr,fx,SRr,J4e,RRr,BRr,PRr,Qt,gx,IRr,Y4e,qRr,NRr,Hc,jRr,K4e,DRr,GRr,tY,ORr,VRr,XRr,Hw,zRr,Wr,hx,QRr,Z4e,WRr,HRr,Fn,URr,eEe,JRr,YRr,oEe,KRr,ZRr,rEe,eBr,oBr,rBr,ux,Uw,tEe,tBr,aBr,aY,nBr,sBr,lBr,Jw,aEe,iBr,dBr,nY,cBr,mBr,fBr,Yw,aIe,Uc,Kw,nEe,px,gBr,sEe,hBr,nIe,Tr,_x,uBr,Jc,pBr,sY,_Br,bBr,lY,FBr,vBr,TBr,bx,MBr,lEe,EBr,CBr,wBr,Wt,Fx,ABr,iEe,yBr,LBr,Yc,xBr,dEe,$Br,kBr,iY,SBr,RBr,BBr,Zw,PBr,Hr,vx,IBr,cEe,qBr,NBr,vn,jBr,mEe,DBr,GBr,fEe,OBr,VBr,gEe,XBr,zBr,QBr,hEe,eA,uEe,WBr,HBr,dY,UBr,JBr,YBr,oA,sIe;return d=new ee({}),Fa=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),T6=new ee({}),M6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sm=new KBr({props:{warning:!0,$$slots:{default:[O3t]},$$scope:{ctx:L}}}),E6=new ee({}),C6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L563"}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),L6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L708"}}),x6=new ee({}),$6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L377"}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),B6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L587"}}),P6=new ee({}),I6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),j6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),dh=new KBr({props:{$$slots:{default:[z3t]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),D6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),G6=new ee({}),O6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L76"}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new KBr({props:{$$slots:{default:[W3t]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L243"}}),W6=new ee({}),H6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L716"}}),J6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),K6=new ee({}),Z6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L723"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L738"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L745"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L752"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),by=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L761"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L795"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L802"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L788"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L770"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L811"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L857"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),hL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L864"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),FL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L889"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L896"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L818"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L834"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UM=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:L}}}),f8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),v8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Wwt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hwt]},$$scope:{ctx:L}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Uwt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Jwt]},$$scope:{ctx:L}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ywt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Kwt]},$$scope:{ctx:L}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Zwt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[eAt]},$$scope:{ctx:L}}}),N8=new ee({}),j8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oAt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:L}}}),V8=new ee({}),X8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[tAt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:L}}}),H8=new ee({}),U8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[nAt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:L}}}),Z8=new ee({}),e7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),r7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:L}}}),t7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:L}}}),a7=new ee({}),n7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),l7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:L}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:L}}}),d7=new ee({}),c7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),f7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:L}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:L}}}),h7=new ee({}),u7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),_7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:L}}}),b7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:L}}}),F7=new ee({}),v7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),M7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:L}}}),E7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:L}}}),C7=new ee({}),w7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),y7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:L}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:L}}}),x7=new ee({}),$7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),S7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:L}}}),R7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:L}}}),B7=new ee({}),P7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),q7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:L}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:L}}}),j7=new ee({}),D7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),O7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:L}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:L}}}),X7=new ee({}),z7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),W7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:L}}}),H7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:L}}}),U7=new ee({}),J7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),K7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:L}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[xAt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$At]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kAt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[SAt]},$$scope:{ctx:L}}}),cx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[RAt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:L}}}),px=new ee({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[PAt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),om=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),_6=o("from_pretrained()"),rm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),b6=o("AutoConfig"),En=o(", "),Cn=a("a"),F6=o("AutoModel"),ni=o(`, and
`),wn=a("a"),v6=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tm=l(),v(Fa.$$.fragment),ze=l(),Ae=a("p"),R9=o("will create a model that is an instance of "),li=a("a"),B9=o("BertModel"),P9=o("."),Eo=l(),va=a("p"),I9=o("There is one class of "),am=a("code"),q9=o("AutoModel"),fNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nBe=l(),ii=a("h2"),nm=a("a"),eZ=a("span"),v(T6.$$.fragment),gNe=l(),oZ=a("span"),hNe=o("Extending the Auto Classes"),sBe=l(),An=a("p"),uNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rZ=a("code"),pNe=o("NewModel"),_Ne=o(", make sure you have a "),tZ=a("code"),bNe=o("NewModelConfig"),FNe=o(` then you can add those to the auto
classes like this:`),lBe=l(),v(M6.$$.fragment),iBe=l(),N9=a("p"),vNe=o("You will then be able to use the auto classes like you would usually do!"),dBe=l(),v(sm.$$.fragment),cBe=l(),di=a("h2"),lm=a("a"),aZ=a("span"),v(E6.$$.fragment),TNe=l(),nZ=a("span"),MNe=o("AutoConfig"),mBe=l(),Co=a("div"),v(C6.$$.fragment),ENe=l(),w6=a("p"),CNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j9=a("a"),wNe=o("from_pretrained()"),ANe=o(" class method."),yNe=l(),A6=a("p"),LNe=o("This class cannot be instantiated directly using "),sZ=a("code"),xNe=o("__init__()"),$Ne=o(" (throws an error)."),kNe=l(),Mr=a("div"),v(y6.$$.fragment),SNe=l(),lZ=a("p"),RNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),BNe=l(),ci=a("p"),PNe=o("The configuration class to instantiate is selected based on the "),iZ=a("code"),INe=o("model_type"),qNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dZ=a("code"),NNe=o("pretrained_model_name_or_path"),jNe=o(":"),DNe=l(),A=a("ul"),im=a("li"),cZ=a("strong"),GNe=o("albert"),ONe=o(" \u2014 "),D9=a("a"),VNe=o("AlbertConfig"),XNe=o(" (ALBERT model)"),zNe=l(),dm=a("li"),mZ=a("strong"),QNe=o("bart"),WNe=o(" \u2014 "),G9=a("a"),HNe=o("BartConfig"),UNe=o(" (BART model)"),JNe=l(),cm=a("li"),fZ=a("strong"),YNe=o("beit"),KNe=o(" \u2014 "),O9=a("a"),ZNe=o("BeitConfig"),eje=o(" (BEiT model)"),oje=l(),mm=a("li"),gZ=a("strong"),rje=o("bert"),tje=o(" \u2014 "),V9=a("a"),aje=o("BertConfig"),nje=o(" (BERT model)"),sje=l(),fm=a("li"),hZ=a("strong"),lje=o("bert-generation"),ije=o(" \u2014 "),X9=a("a"),dje=o("BertGenerationConfig"),cje=o(" (Bert Generation model)"),mje=l(),gm=a("li"),uZ=a("strong"),fje=o("big_bird"),gje=o(" \u2014 "),z9=a("a"),hje=o("BigBirdConfig"),uje=o(" (BigBird model)"),pje=l(),hm=a("li"),pZ=a("strong"),_je=o("bigbird_pegasus"),bje=o(" \u2014 "),Q9=a("a"),Fje=o("BigBirdPegasusConfig"),vje=o(" (BigBirdPegasus model)"),Tje=l(),um=a("li"),_Z=a("strong"),Mje=o("blenderbot"),Eje=o(" \u2014 "),W9=a("a"),Cje=o("BlenderbotConfig"),wje=o(" (Blenderbot model)"),Aje=l(),pm=a("li"),bZ=a("strong"),yje=o("blenderbot-small"),Lje=o(" \u2014 "),H9=a("a"),xje=o("BlenderbotSmallConfig"),$je=o(" (BlenderbotSmall model)"),kje=l(),_m=a("li"),FZ=a("strong"),Sje=o("camembert"),Rje=o(" \u2014 "),U9=a("a"),Bje=o("CamembertConfig"),Pje=o(" (CamemBERT model)"),Ije=l(),bm=a("li"),vZ=a("strong"),qje=o("canine"),Nje=o(" \u2014 "),J9=a("a"),jje=o("CanineConfig"),Dje=o(" (Canine model)"),Gje=l(),Fm=a("li"),TZ=a("strong"),Oje=o("clip"),Vje=o(" \u2014 "),Y9=a("a"),Xje=o("CLIPConfig"),zje=o(" (CLIP model)"),Qje=l(),vm=a("li"),MZ=a("strong"),Wje=o("convbert"),Hje=o(" \u2014 "),K9=a("a"),Uje=o("ConvBertConfig"),Jje=o(" (ConvBERT model)"),Yje=l(),Tm=a("li"),EZ=a("strong"),Kje=o("convnext"),Zje=o(" \u2014 "),Z9=a("a"),eDe=o("ConvNextConfig"),oDe=o(" (ConvNext model)"),rDe=l(),Mm=a("li"),CZ=a("strong"),tDe=o("ctrl"),aDe=o(" \u2014 "),e$=a("a"),nDe=o("CTRLConfig"),sDe=o(" (CTRL model)"),lDe=l(),Em=a("li"),wZ=a("strong"),iDe=o("data2vec-audio"),dDe=o(" \u2014 "),o$=a("a"),cDe=o("Data2VecAudioConfig"),mDe=o(" (Data2VecAudio model)"),fDe=l(),Cm=a("li"),AZ=a("strong"),gDe=o("data2vec-text"),hDe=o(" \u2014 "),r$=a("a"),uDe=o("Data2VecTextConfig"),pDe=o(" (Data2VecText model)"),_De=l(),wm=a("li"),yZ=a("strong"),bDe=o("data2vec-vision"),FDe=o(" \u2014 "),t$=a("a"),vDe=o("Data2VecVisionConfig"),TDe=o(" (Data2VecVision model)"),MDe=l(),Am=a("li"),LZ=a("strong"),EDe=o("deberta"),CDe=o(" \u2014 "),a$=a("a"),wDe=o("DebertaConfig"),ADe=o(" (DeBERTa model)"),yDe=l(),ym=a("li"),xZ=a("strong"),LDe=o("deberta-v2"),xDe=o(" \u2014 "),n$=a("a"),$De=o("DebertaV2Config"),kDe=o(" (DeBERTa-v2 model)"),SDe=l(),Lm=a("li"),$Z=a("strong"),RDe=o("decision_transformer"),BDe=o(" \u2014 "),s$=a("a"),PDe=o("DecisionTransformerConfig"),IDe=o(" (Decision Transformer model)"),qDe=l(),xm=a("li"),kZ=a("strong"),NDe=o("deit"),jDe=o(" \u2014 "),l$=a("a"),DDe=o("DeiTConfig"),GDe=o(" (DeiT model)"),ODe=l(),$m=a("li"),SZ=a("strong"),VDe=o("detr"),XDe=o(" \u2014 "),i$=a("a"),zDe=o("DetrConfig"),QDe=o(" (DETR model)"),WDe=l(),km=a("li"),RZ=a("strong"),HDe=o("distilbert"),UDe=o(" \u2014 "),d$=a("a"),JDe=o("DistilBertConfig"),YDe=o(" (DistilBERT model)"),KDe=l(),Sm=a("li"),BZ=a("strong"),ZDe=o("dpr"),eGe=o(" \u2014 "),c$=a("a"),oGe=o("DPRConfig"),rGe=o(" (DPR model)"),tGe=l(),Rm=a("li"),PZ=a("strong"),aGe=o("dpt"),nGe=o(" \u2014 "),m$=a("a"),sGe=o("DPTConfig"),lGe=o(" (DPT model)"),iGe=l(),Bm=a("li"),IZ=a("strong"),dGe=o("electra"),cGe=o(" \u2014 "),f$=a("a"),mGe=o("ElectraConfig"),fGe=o(" (ELECTRA model)"),gGe=l(),Pm=a("li"),qZ=a("strong"),hGe=o("encoder-decoder"),uGe=o(" \u2014 "),g$=a("a"),pGe=o("EncoderDecoderConfig"),_Ge=o(" (Encoder decoder model)"),bGe=l(),Im=a("li"),NZ=a("strong"),FGe=o("flaubert"),vGe=o(" \u2014 "),h$=a("a"),TGe=o("FlaubertConfig"),MGe=o(" (FlauBERT model)"),EGe=l(),qm=a("li"),jZ=a("strong"),CGe=o("fnet"),wGe=o(" \u2014 "),u$=a("a"),AGe=o("FNetConfig"),yGe=o(" (FNet model)"),LGe=l(),Nm=a("li"),DZ=a("strong"),xGe=o("fsmt"),$Ge=o(" \u2014 "),p$=a("a"),kGe=o("FSMTConfig"),SGe=o(" (FairSeq Machine-Translation model)"),RGe=l(),jm=a("li"),GZ=a("strong"),BGe=o("funnel"),PGe=o(" \u2014 "),_$=a("a"),IGe=o("FunnelConfig"),qGe=o(" (Funnel Transformer model)"),NGe=l(),Dm=a("li"),OZ=a("strong"),jGe=o("glpn"),DGe=o(" \u2014 "),b$=a("a"),GGe=o("GLPNConfig"),OGe=o(" (GLPN model)"),VGe=l(),Gm=a("li"),VZ=a("strong"),XGe=o("gpt2"),zGe=o(" \u2014 "),F$=a("a"),QGe=o("GPT2Config"),WGe=o(" (OpenAI GPT-2 model)"),HGe=l(),Om=a("li"),XZ=a("strong"),UGe=o("gpt_neo"),JGe=o(" \u2014 "),v$=a("a"),YGe=o("GPTNeoConfig"),KGe=o(" (GPT Neo model)"),ZGe=l(),Vm=a("li"),zZ=a("strong"),eOe=o("gptj"),oOe=o(" \u2014 "),T$=a("a"),rOe=o("GPTJConfig"),tOe=o(" (GPT-J model)"),aOe=l(),Xm=a("li"),QZ=a("strong"),nOe=o("hubert"),sOe=o(" \u2014 "),M$=a("a"),lOe=o("HubertConfig"),iOe=o(" (Hubert model)"),dOe=l(),zm=a("li"),WZ=a("strong"),cOe=o("ibert"),mOe=o(" \u2014 "),E$=a("a"),fOe=o("IBertConfig"),gOe=o(" (I-BERT model)"),hOe=l(),Qm=a("li"),HZ=a("strong"),uOe=o("imagegpt"),pOe=o(" \u2014 "),C$=a("a"),_Oe=o("ImageGPTConfig"),bOe=o(" (ImageGPT model)"),FOe=l(),Wm=a("li"),UZ=a("strong"),vOe=o("layoutlm"),TOe=o(" \u2014 "),w$=a("a"),MOe=o("LayoutLMConfig"),EOe=o(" (LayoutLM model)"),COe=l(),Hm=a("li"),JZ=a("strong"),wOe=o("layoutlmv2"),AOe=o(" \u2014 "),A$=a("a"),yOe=o("LayoutLMv2Config"),LOe=o(" (LayoutLMv2 model)"),xOe=l(),Um=a("li"),YZ=a("strong"),$Oe=o("led"),kOe=o(" \u2014 "),y$=a("a"),SOe=o("LEDConfig"),ROe=o(" (LED model)"),BOe=l(),Jm=a("li"),KZ=a("strong"),POe=o("longformer"),IOe=o(" \u2014 "),L$=a("a"),qOe=o("LongformerConfig"),NOe=o(" (Longformer model)"),jOe=l(),Ym=a("li"),ZZ=a("strong"),DOe=o("luke"),GOe=o(" \u2014 "),x$=a("a"),OOe=o("LukeConfig"),VOe=o(" (LUKE model)"),XOe=l(),Km=a("li"),eee=a("strong"),zOe=o("lxmert"),QOe=o(" \u2014 "),$$=a("a"),WOe=o("LxmertConfig"),HOe=o(" (LXMERT model)"),UOe=l(),Zm=a("li"),oee=a("strong"),JOe=o("m2m_100"),YOe=o(" \u2014 "),k$=a("a"),KOe=o("M2M100Config"),ZOe=o(" (M2M100 model)"),eVe=l(),ef=a("li"),ree=a("strong"),oVe=o("marian"),rVe=o(" \u2014 "),S$=a("a"),tVe=o("MarianConfig"),aVe=o(" (Marian model)"),nVe=l(),of=a("li"),tee=a("strong"),sVe=o("maskformer"),lVe=o(" \u2014 "),R$=a("a"),iVe=o("MaskFormerConfig"),dVe=o(" (MaskFormer model)"),cVe=l(),rf=a("li"),aee=a("strong"),mVe=o("mbart"),fVe=o(" \u2014 "),B$=a("a"),gVe=o("MBartConfig"),hVe=o(" (mBART model)"),uVe=l(),tf=a("li"),nee=a("strong"),pVe=o("megatron-bert"),_Ve=o(" \u2014 "),P$=a("a"),bVe=o("MegatronBertConfig"),FVe=o(" (MegatronBert model)"),vVe=l(),af=a("li"),see=a("strong"),TVe=o("mobilebert"),MVe=o(" \u2014 "),I$=a("a"),EVe=o("MobileBertConfig"),CVe=o(" (MobileBERT model)"),wVe=l(),nf=a("li"),lee=a("strong"),AVe=o("mpnet"),yVe=o(" \u2014 "),q$=a("a"),LVe=o("MPNetConfig"),xVe=o(" (MPNet model)"),$Ve=l(),sf=a("li"),iee=a("strong"),kVe=o("mt5"),SVe=o(" \u2014 "),N$=a("a"),RVe=o("MT5Config"),BVe=o(" (mT5 model)"),PVe=l(),lf=a("li"),dee=a("strong"),IVe=o("nystromformer"),qVe=o(" \u2014 "),j$=a("a"),NVe=o("NystromformerConfig"),jVe=o(" (Nystromformer model)"),DVe=l(),df=a("li"),cee=a("strong"),GVe=o("openai-gpt"),OVe=o(" \u2014 "),D$=a("a"),VVe=o("OpenAIGPTConfig"),XVe=o(" (OpenAI GPT model)"),zVe=l(),cf=a("li"),mee=a("strong"),QVe=o("pegasus"),WVe=o(" \u2014 "),G$=a("a"),HVe=o("PegasusConfig"),UVe=o(" (Pegasus model)"),JVe=l(),mf=a("li"),fee=a("strong"),YVe=o("perceiver"),KVe=o(" \u2014 "),O$=a("a"),ZVe=o("PerceiverConfig"),eXe=o(" (Perceiver model)"),oXe=l(),ff=a("li"),gee=a("strong"),rXe=o("plbart"),tXe=o(" \u2014 "),V$=a("a"),aXe=o("PLBartConfig"),nXe=o(" (PLBart model)"),sXe=l(),gf=a("li"),hee=a("strong"),lXe=o("poolformer"),iXe=o(" \u2014 "),X$=a("a"),dXe=o("PoolFormerConfig"),cXe=o(" (PoolFormer model)"),mXe=l(),hf=a("li"),uee=a("strong"),fXe=o("prophetnet"),gXe=o(" \u2014 "),z$=a("a"),hXe=o("ProphetNetConfig"),uXe=o(" (ProphetNet model)"),pXe=l(),uf=a("li"),pee=a("strong"),_Xe=o("qdqbert"),bXe=o(" \u2014 "),Q$=a("a"),FXe=o("QDQBertConfig"),vXe=o(" (QDQBert model)"),TXe=l(),pf=a("li"),_ee=a("strong"),MXe=o("rag"),EXe=o(" \u2014 "),W$=a("a"),CXe=o("RagConfig"),wXe=o(" (RAG model)"),AXe=l(),_f=a("li"),bee=a("strong"),yXe=o("realm"),LXe=o(" \u2014 "),H$=a("a"),xXe=o("RealmConfig"),$Xe=o(" (Realm model)"),kXe=l(),bf=a("li"),Fee=a("strong"),SXe=o("reformer"),RXe=o(" \u2014 "),U$=a("a"),BXe=o("ReformerConfig"),PXe=o(" (Reformer model)"),IXe=l(),Ff=a("li"),vee=a("strong"),qXe=o("regnet"),NXe=o(" \u2014 "),J$=a("a"),jXe=o("RegNetConfig"),DXe=o(" (RegNet model)"),GXe=l(),vf=a("li"),Tee=a("strong"),OXe=o("rembert"),VXe=o(" \u2014 "),Y$=a("a"),XXe=o("RemBertConfig"),zXe=o(" (RemBERT model)"),QXe=l(),Tf=a("li"),Mee=a("strong"),WXe=o("resnet"),HXe=o(" \u2014 "),K$=a("a"),UXe=o("ResNetConfig"),JXe=o(" (ResNet model)"),YXe=l(),Mf=a("li"),Eee=a("strong"),KXe=o("retribert"),ZXe=o(" \u2014 "),Z$=a("a"),eze=o("RetriBertConfig"),oze=o(" (RetriBERT model)"),rze=l(),Ef=a("li"),Cee=a("strong"),tze=o("roberta"),aze=o(" \u2014 "),ek=a("a"),nze=o("RobertaConfig"),sze=o(" (RoBERTa model)"),lze=l(),Cf=a("li"),wee=a("strong"),ize=o("roformer"),dze=o(" \u2014 "),ok=a("a"),cze=o("RoFormerConfig"),mze=o(" (RoFormer model)"),fze=l(),wf=a("li"),Aee=a("strong"),gze=o("segformer"),hze=o(" \u2014 "),rk=a("a"),uze=o("SegformerConfig"),pze=o(" (SegFormer model)"),_ze=l(),Af=a("li"),yee=a("strong"),bze=o("sew"),Fze=o(" \u2014 "),tk=a("a"),vze=o("SEWConfig"),Tze=o(" (SEW model)"),Mze=l(),yf=a("li"),Lee=a("strong"),Eze=o("sew-d"),Cze=o(" \u2014 "),ak=a("a"),wze=o("SEWDConfig"),Aze=o(" (SEW-D model)"),yze=l(),Lf=a("li"),xee=a("strong"),Lze=o("speech-encoder-decoder"),xze=o(" \u2014 "),nk=a("a"),$ze=o("SpeechEncoderDecoderConfig"),kze=o(" (Speech Encoder decoder model)"),Sze=l(),xf=a("li"),$ee=a("strong"),Rze=o("speech_to_text"),Bze=o(" \u2014 "),sk=a("a"),Pze=o("Speech2TextConfig"),Ize=o(" (Speech2Text model)"),qze=l(),$f=a("li"),kee=a("strong"),Nze=o("speech_to_text_2"),jze=o(" \u2014 "),lk=a("a"),Dze=o("Speech2Text2Config"),Gze=o(" (Speech2Text2 model)"),Oze=l(),kf=a("li"),See=a("strong"),Vze=o("splinter"),Xze=o(" \u2014 "),ik=a("a"),zze=o("SplinterConfig"),Qze=o(" (Splinter model)"),Wze=l(),Sf=a("li"),Ree=a("strong"),Hze=o("squeezebert"),Uze=o(" \u2014 "),dk=a("a"),Jze=o("SqueezeBertConfig"),Yze=o(" (SqueezeBERT model)"),Kze=l(),Rf=a("li"),Bee=a("strong"),Zze=o("swin"),eQe=o(" \u2014 "),ck=a("a"),oQe=o("SwinConfig"),rQe=o(" (Swin model)"),tQe=l(),Bf=a("li"),Pee=a("strong"),aQe=o("t5"),nQe=o(" \u2014 "),mk=a("a"),sQe=o("T5Config"),lQe=o(" (T5 model)"),iQe=l(),Pf=a("li"),Iee=a("strong"),dQe=o("tapas"),cQe=o(" \u2014 "),fk=a("a"),mQe=o("TapasConfig"),fQe=o(" (TAPAS model)"),gQe=l(),If=a("li"),qee=a("strong"),hQe=o("tapex"),uQe=o(" \u2014 "),gk=a("a"),pQe=o("BartConfig"),_Qe=o(" (TAPEX model)"),bQe=l(),qf=a("li"),Nee=a("strong"),FQe=o("transfo-xl"),vQe=o(" \u2014 "),hk=a("a"),TQe=o("TransfoXLConfig"),MQe=o(" (Transformer-XL model)"),EQe=l(),Nf=a("li"),jee=a("strong"),CQe=o("trocr"),wQe=o(" \u2014 "),uk=a("a"),AQe=o("TrOCRConfig"),yQe=o(" (TrOCR model)"),LQe=l(),jf=a("li"),Dee=a("strong"),xQe=o("unispeech"),$Qe=o(" \u2014 "),pk=a("a"),kQe=o("UniSpeechConfig"),SQe=o(" (UniSpeech model)"),RQe=l(),Df=a("li"),Gee=a("strong"),BQe=o("unispeech-sat"),PQe=o(" \u2014 "),_k=a("a"),IQe=o("UniSpeechSatConfig"),qQe=o(" (UniSpeechSat model)"),NQe=l(),Gf=a("li"),Oee=a("strong"),jQe=o("van"),DQe=o(" \u2014 "),bk=a("a"),GQe=o("VanConfig"),OQe=o(" (VAN model)"),VQe=l(),Of=a("li"),Vee=a("strong"),XQe=o("vilt"),zQe=o(" \u2014 "),Fk=a("a"),QQe=o("ViltConfig"),WQe=o(" (ViLT model)"),HQe=l(),Vf=a("li"),Xee=a("strong"),UQe=o("vision-encoder-decoder"),JQe=o(" \u2014 "),vk=a("a"),YQe=o("VisionEncoderDecoderConfig"),KQe=o(" (Vision Encoder decoder model)"),ZQe=l(),Xf=a("li"),zee=a("strong"),eWe=o("vision-text-dual-encoder"),oWe=o(" \u2014 "),Tk=a("a"),rWe=o("VisionTextDualEncoderConfig"),tWe=o(" (VisionTextDualEncoder model)"),aWe=l(),zf=a("li"),Qee=a("strong"),nWe=o("visual_bert"),sWe=o(" \u2014 "),Mk=a("a"),lWe=o("VisualBertConfig"),iWe=o(" (VisualBert model)"),dWe=l(),Qf=a("li"),Wee=a("strong"),cWe=o("vit"),mWe=o(" \u2014 "),Ek=a("a"),fWe=o("ViTConfig"),gWe=o(" (ViT model)"),hWe=l(),Wf=a("li"),Hee=a("strong"),uWe=o("vit_mae"),pWe=o(" \u2014 "),Ck=a("a"),_We=o("ViTMAEConfig"),bWe=o(" (ViTMAE model)"),FWe=l(),Hf=a("li"),Uee=a("strong"),vWe=o("wav2vec2"),TWe=o(" \u2014 "),wk=a("a"),MWe=o("Wav2Vec2Config"),EWe=o(" (Wav2Vec2 model)"),CWe=l(),Uf=a("li"),Jee=a("strong"),wWe=o("wavlm"),AWe=o(" \u2014 "),Ak=a("a"),yWe=o("WavLMConfig"),LWe=o(" (WavLM model)"),xWe=l(),Jf=a("li"),Yee=a("strong"),$We=o("xglm"),kWe=o(" \u2014 "),yk=a("a"),SWe=o("XGLMConfig"),RWe=o(" (XGLM model)"),BWe=l(),Yf=a("li"),Kee=a("strong"),PWe=o("xlm"),IWe=o(" \u2014 "),Lk=a("a"),qWe=o("XLMConfig"),NWe=o(" (XLM model)"),jWe=l(),Kf=a("li"),Zee=a("strong"),DWe=o("xlm-prophetnet"),GWe=o(" \u2014 "),xk=a("a"),OWe=o("XLMProphetNetConfig"),VWe=o(" (XLMProphetNet model)"),XWe=l(),Zf=a("li"),eoe=a("strong"),zWe=o("xlm-roberta"),QWe=o(" \u2014 "),$k=a("a"),WWe=o("XLMRobertaConfig"),HWe=o(" (XLM-RoBERTa model)"),UWe=l(),eg=a("li"),ooe=a("strong"),JWe=o("xlm-roberta-xl"),YWe=o(" \u2014 "),kk=a("a"),KWe=o("XLMRobertaXLConfig"),ZWe=o(" (XLM-RoBERTa-XL model)"),eHe=l(),og=a("li"),roe=a("strong"),oHe=o("xlnet"),rHe=o(" \u2014 "),Sk=a("a"),tHe=o("XLNetConfig"),aHe=o(" (XLNet model)"),nHe=l(),rg=a("li"),toe=a("strong"),sHe=o("yolos"),lHe=o(" \u2014 "),Rk=a("a"),iHe=o("YolosConfig"),dHe=o(" (YOLOS model)"),cHe=l(),tg=a("li"),aoe=a("strong"),mHe=o("yoso"),fHe=o(" \u2014 "),Bk=a("a"),gHe=o("YosoConfig"),hHe=o(" (YOSO model)"),uHe=l(),v(ag.$$.fragment),pHe=l(),ng=a("div"),v(L6.$$.fragment),_He=l(),noe=a("p"),bHe=o("Register a new configuration for this class."),fBe=l(),mi=a("h2"),sg=a("a"),soe=a("span"),v(x6.$$.fragment),FHe=l(),loe=a("span"),vHe=o("AutoTokenizer"),gBe=l(),wo=a("div"),v($6.$$.fragment),THe=l(),k6=a("p"),MHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Pk=a("a"),EHe=o("AutoTokenizer.from_pretrained()"),CHe=o(" class method."),wHe=l(),S6=a("p"),AHe=o("This class cannot be instantiated directly using "),ioe=a("code"),yHe=o("__init__()"),LHe=o(" (throws an error)."),xHe=l(),Er=a("div"),v(R6.$$.fragment),$He=l(),doe=a("p"),kHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SHe=l(),Ta=a("p"),RHe=o("The tokenizer class to instantiate is selected based on the "),coe=a("code"),BHe=o("model_type"),PHe=o(` property of the config object (either
passed as an argument or loaded from `),moe=a("code"),IHe=o("pretrained_model_name_or_path"),qHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),foe=a("code"),NHe=o("pretrained_model_name_or_path"),jHe=o(":"),DHe=l(),k=a("ul"),yn=a("li"),goe=a("strong"),GHe=o("albert"),OHe=o(" \u2014 "),Ik=a("a"),VHe=o("AlbertTokenizer"),XHe=o(" or "),qk=a("a"),zHe=o("AlbertTokenizerFast"),QHe=o(" (ALBERT model)"),WHe=l(),Ln=a("li"),hoe=a("strong"),HHe=o("bart"),UHe=o(" \u2014 "),Nk=a("a"),JHe=o("BartTokenizer"),YHe=o(" or "),jk=a("a"),KHe=o("BartTokenizerFast"),ZHe=o(" (BART model)"),eUe=l(),xn=a("li"),uoe=a("strong"),oUe=o("barthez"),rUe=o(" \u2014 "),Dk=a("a"),tUe=o("BarthezTokenizer"),aUe=o(" or "),Gk=a("a"),nUe=o("BarthezTokenizerFast"),sUe=o(" (BARThez model)"),lUe=l(),lg=a("li"),poe=a("strong"),iUe=o("bartpho"),dUe=o(" \u2014 "),Ok=a("a"),cUe=o("BartphoTokenizer"),mUe=o(" (BARTpho model)"),fUe=l(),$n=a("li"),_oe=a("strong"),gUe=o("bert"),hUe=o(" \u2014 "),Vk=a("a"),uUe=o("BertTokenizer"),pUe=o(" or "),Xk=a("a"),_Ue=o("BertTokenizerFast"),bUe=o(" (BERT model)"),FUe=l(),ig=a("li"),boe=a("strong"),vUe=o("bert-generation"),TUe=o(" \u2014 "),zk=a("a"),MUe=o("BertGenerationTokenizer"),EUe=o(" (Bert Generation model)"),CUe=l(),dg=a("li"),Foe=a("strong"),wUe=o("bert-japanese"),AUe=o(" \u2014 "),Qk=a("a"),yUe=o("BertJapaneseTokenizer"),LUe=o(" (BertJapanese model)"),xUe=l(),cg=a("li"),voe=a("strong"),$Ue=o("bertweet"),kUe=o(" \u2014 "),Wk=a("a"),SUe=o("BertweetTokenizer"),RUe=o(" (Bertweet model)"),BUe=l(),kn=a("li"),Toe=a("strong"),PUe=o("big_bird"),IUe=o(" \u2014 "),Hk=a("a"),qUe=o("BigBirdTokenizer"),NUe=o(" or "),Uk=a("a"),jUe=o("BigBirdTokenizerFast"),DUe=o(" (BigBird model)"),GUe=l(),Sn=a("li"),Moe=a("strong"),OUe=o("bigbird_pegasus"),VUe=o(" \u2014 "),Jk=a("a"),XUe=o("PegasusTokenizer"),zUe=o(" or "),Yk=a("a"),QUe=o("PegasusTokenizerFast"),WUe=o(" (BigBirdPegasus model)"),HUe=l(),Rn=a("li"),Eoe=a("strong"),UUe=o("blenderbot"),JUe=o(" \u2014 "),Kk=a("a"),YUe=o("BlenderbotTokenizer"),KUe=o(" or "),Zk=a("a"),ZUe=o("BlenderbotTokenizerFast"),eJe=o(" (Blenderbot model)"),oJe=l(),mg=a("li"),Coe=a("strong"),rJe=o("blenderbot-small"),tJe=o(" \u2014 "),eS=a("a"),aJe=o("BlenderbotSmallTokenizer"),nJe=o(" (BlenderbotSmall model)"),sJe=l(),fg=a("li"),woe=a("strong"),lJe=o("byt5"),iJe=o(" \u2014 "),oS=a("a"),dJe=o("ByT5Tokenizer"),cJe=o(" (ByT5 model)"),mJe=l(),Bn=a("li"),Aoe=a("strong"),fJe=o("camembert"),gJe=o(" \u2014 "),rS=a("a"),hJe=o("CamembertTokenizer"),uJe=o(" or "),tS=a("a"),pJe=o("CamembertTokenizerFast"),_Je=o(" (CamemBERT model)"),bJe=l(),gg=a("li"),yoe=a("strong"),FJe=o("canine"),vJe=o(" \u2014 "),aS=a("a"),TJe=o("CanineTokenizer"),MJe=o(" (Canine model)"),EJe=l(),Pn=a("li"),Loe=a("strong"),CJe=o("clip"),wJe=o(" \u2014 "),nS=a("a"),AJe=o("CLIPTokenizer"),yJe=o(" or "),sS=a("a"),LJe=o("CLIPTokenizerFast"),xJe=o(" (CLIP model)"),$Je=l(),In=a("li"),xoe=a("strong"),kJe=o("convbert"),SJe=o(" \u2014 "),lS=a("a"),RJe=o("ConvBertTokenizer"),BJe=o(" or "),iS=a("a"),PJe=o("ConvBertTokenizerFast"),IJe=o(" (ConvBERT model)"),qJe=l(),qn=a("li"),$oe=a("strong"),NJe=o("cpm"),jJe=o(" \u2014 "),dS=a("a"),DJe=o("CpmTokenizer"),GJe=o(" or "),cS=a("a"),OJe=o("CpmTokenizerFast"),VJe=o(" (CPM model)"),XJe=l(),hg=a("li"),koe=a("strong"),zJe=o("ctrl"),QJe=o(" \u2014 "),mS=a("a"),WJe=o("CTRLTokenizer"),HJe=o(" (CTRL model)"),UJe=l(),Nn=a("li"),Soe=a("strong"),JJe=o("data2vec-text"),YJe=o(" \u2014 "),fS=a("a"),KJe=o("RobertaTokenizer"),ZJe=o(" or "),gS=a("a"),eYe=o("RobertaTokenizerFast"),oYe=o(" (Data2VecText model)"),rYe=l(),jn=a("li"),Roe=a("strong"),tYe=o("deberta"),aYe=o(" \u2014 "),hS=a("a"),nYe=o("DebertaTokenizer"),sYe=o(" or "),uS=a("a"),lYe=o("DebertaTokenizerFast"),iYe=o(" (DeBERTa model)"),dYe=l(),Dn=a("li"),Boe=a("strong"),cYe=o("deberta-v2"),mYe=o(" \u2014 "),pS=a("a"),fYe=o("DebertaV2Tokenizer"),gYe=o(" or "),_S=a("a"),hYe=o("DebertaV2TokenizerFast"),uYe=o(" (DeBERTa-v2 model)"),pYe=l(),Gn=a("li"),Poe=a("strong"),_Ye=o("distilbert"),bYe=o(" \u2014 "),bS=a("a"),FYe=o("DistilBertTokenizer"),vYe=o(" or "),FS=a("a"),TYe=o("DistilBertTokenizerFast"),MYe=o(" (DistilBERT model)"),EYe=l(),On=a("li"),Ioe=a("strong"),CYe=o("dpr"),wYe=o(" \u2014 "),vS=a("a"),AYe=o("DPRQuestionEncoderTokenizer"),yYe=o(" or "),TS=a("a"),LYe=o("DPRQuestionEncoderTokenizerFast"),xYe=o(" (DPR model)"),$Ye=l(),Vn=a("li"),qoe=a("strong"),kYe=o("electra"),SYe=o(" \u2014 "),MS=a("a"),RYe=o("ElectraTokenizer"),BYe=o(" or "),ES=a("a"),PYe=o("ElectraTokenizerFast"),IYe=o(" (ELECTRA model)"),qYe=l(),ug=a("li"),Noe=a("strong"),NYe=o("flaubert"),jYe=o(" \u2014 "),CS=a("a"),DYe=o("FlaubertTokenizer"),GYe=o(" (FlauBERT model)"),OYe=l(),Xn=a("li"),joe=a("strong"),VYe=o("fnet"),XYe=o(" \u2014 "),wS=a("a"),zYe=o("FNetTokenizer"),QYe=o(" or "),AS=a("a"),WYe=o("FNetTokenizerFast"),HYe=o(" (FNet model)"),UYe=l(),pg=a("li"),Doe=a("strong"),JYe=o("fsmt"),YYe=o(" \u2014 "),yS=a("a"),KYe=o("FSMTTokenizer"),ZYe=o(" (FairSeq Machine-Translation model)"),eKe=l(),zn=a("li"),Goe=a("strong"),oKe=o("funnel"),rKe=o(" \u2014 "),LS=a("a"),tKe=o("FunnelTokenizer"),aKe=o(" or "),xS=a("a"),nKe=o("FunnelTokenizerFast"),sKe=o(" (Funnel Transformer model)"),lKe=l(),Qn=a("li"),Ooe=a("strong"),iKe=o("gpt2"),dKe=o(" \u2014 "),$S=a("a"),cKe=o("GPT2Tokenizer"),mKe=o(" or "),kS=a("a"),fKe=o("GPT2TokenizerFast"),gKe=o(" (OpenAI GPT-2 model)"),hKe=l(),Wn=a("li"),Voe=a("strong"),uKe=o("gpt_neo"),pKe=o(" \u2014 "),SS=a("a"),_Ke=o("GPT2Tokenizer"),bKe=o(" or "),RS=a("a"),FKe=o("GPT2TokenizerFast"),vKe=o(" (GPT Neo model)"),TKe=l(),Hn=a("li"),Xoe=a("strong"),MKe=o("gptj"),EKe=o(" \u2014 "),BS=a("a"),CKe=o("GPT2Tokenizer"),wKe=o(" or "),PS=a("a"),AKe=o("GPT2TokenizerFast"),yKe=o(" (GPT-J model)"),LKe=l(),Un=a("li"),zoe=a("strong"),xKe=o("herbert"),$Ke=o(" \u2014 "),IS=a("a"),kKe=o("HerbertTokenizer"),SKe=o(" or "),qS=a("a"),RKe=o("HerbertTokenizerFast"),BKe=o(" (HerBERT model)"),PKe=l(),_g=a("li"),Qoe=a("strong"),IKe=o("hubert"),qKe=o(" \u2014 "),NS=a("a"),NKe=o("Wav2Vec2CTCTokenizer"),jKe=o(" (Hubert model)"),DKe=l(),Jn=a("li"),Woe=a("strong"),GKe=o("ibert"),OKe=o(" \u2014 "),jS=a("a"),VKe=o("RobertaTokenizer"),XKe=o(" or "),DS=a("a"),zKe=o("RobertaTokenizerFast"),QKe=o(" (I-BERT model)"),WKe=l(),Yn=a("li"),Hoe=a("strong"),HKe=o("layoutlm"),UKe=o(" \u2014 "),GS=a("a"),JKe=o("LayoutLMTokenizer"),YKe=o(" or "),OS=a("a"),KKe=o("LayoutLMTokenizerFast"),ZKe=o(" (LayoutLM model)"),eZe=l(),Kn=a("li"),Uoe=a("strong"),oZe=o("layoutlmv2"),rZe=o(" \u2014 "),VS=a("a"),tZe=o("LayoutLMv2Tokenizer"),aZe=o(" or "),XS=a("a"),nZe=o("LayoutLMv2TokenizerFast"),sZe=o(" (LayoutLMv2 model)"),lZe=l(),Zn=a("li"),Joe=a("strong"),iZe=o("layoutxlm"),dZe=o(" \u2014 "),zS=a("a"),cZe=o("LayoutXLMTokenizer"),mZe=o(" or "),QS=a("a"),fZe=o("LayoutXLMTokenizerFast"),gZe=o(" (LayoutXLM model)"),hZe=l(),es=a("li"),Yoe=a("strong"),uZe=o("led"),pZe=o(" \u2014 "),WS=a("a"),_Ze=o("LEDTokenizer"),bZe=o(" or "),HS=a("a"),FZe=o("LEDTokenizerFast"),vZe=o(" (LED model)"),TZe=l(),os=a("li"),Koe=a("strong"),MZe=o("longformer"),EZe=o(" \u2014 "),US=a("a"),CZe=o("LongformerTokenizer"),wZe=o(" or "),JS=a("a"),AZe=o("LongformerTokenizerFast"),yZe=o(" (Longformer model)"),LZe=l(),bg=a("li"),Zoe=a("strong"),xZe=o("luke"),$Ze=o(" \u2014 "),YS=a("a"),kZe=o("LukeTokenizer"),SZe=o(" (LUKE model)"),RZe=l(),rs=a("li"),ere=a("strong"),BZe=o("lxmert"),PZe=o(" \u2014 "),KS=a("a"),IZe=o("LxmertTokenizer"),qZe=o(" or "),ZS=a("a"),NZe=o("LxmertTokenizerFast"),jZe=o(" (LXMERT model)"),DZe=l(),Fg=a("li"),ore=a("strong"),GZe=o("m2m_100"),OZe=o(" \u2014 "),eR=a("a"),VZe=o("M2M100Tokenizer"),XZe=o(" (M2M100 model)"),zZe=l(),vg=a("li"),rre=a("strong"),QZe=o("marian"),WZe=o(" \u2014 "),oR=a("a"),HZe=o("MarianTokenizer"),UZe=o(" (Marian model)"),JZe=l(),ts=a("li"),tre=a("strong"),YZe=o("mbart"),KZe=o(" \u2014 "),rR=a("a"),ZZe=o("MBartTokenizer"),eeo=o(" or "),tR=a("a"),oeo=o("MBartTokenizerFast"),reo=o(" (mBART model)"),teo=l(),as=a("li"),are=a("strong"),aeo=o("mbart50"),neo=o(" \u2014 "),aR=a("a"),seo=o("MBart50Tokenizer"),leo=o(" or "),nR=a("a"),ieo=o("MBart50TokenizerFast"),deo=o(" (mBART-50 model)"),ceo=l(),ns=a("li"),nre=a("strong"),meo=o("megatron-bert"),feo=o(" \u2014 "),sR=a("a"),geo=o("BertTokenizer"),heo=o(" or "),lR=a("a"),ueo=o("BertTokenizerFast"),peo=o(" (MegatronBert model)"),_eo=l(),Tg=a("li"),sre=a("strong"),beo=o("mluke"),Feo=o(" \u2014 "),iR=a("a"),veo=o("MLukeTokenizer"),Teo=o(" (mLUKE model)"),Meo=l(),ss=a("li"),lre=a("strong"),Eeo=o("mobilebert"),Ceo=o(" \u2014 "),dR=a("a"),weo=o("MobileBertTokenizer"),Aeo=o(" or "),cR=a("a"),yeo=o("MobileBertTokenizerFast"),Leo=o(" (MobileBERT model)"),xeo=l(),ls=a("li"),ire=a("strong"),$eo=o("mpnet"),keo=o(" \u2014 "),mR=a("a"),Seo=o("MPNetTokenizer"),Reo=o(" or "),fR=a("a"),Beo=o("MPNetTokenizerFast"),Peo=o(" (MPNet model)"),Ieo=l(),is=a("li"),dre=a("strong"),qeo=o("mt5"),Neo=o(" \u2014 "),gR=a("a"),jeo=o("MT5Tokenizer"),Deo=o(" or "),hR=a("a"),Geo=o("MT5TokenizerFast"),Oeo=o(" (mT5 model)"),Veo=l(),ds=a("li"),cre=a("strong"),Xeo=o("nystromformer"),zeo=o(" \u2014 "),uR=a("a"),Qeo=o("AlbertTokenizer"),Weo=o(" or "),pR=a("a"),Heo=o("AlbertTokenizerFast"),Ueo=o(" (Nystromformer model)"),Jeo=l(),cs=a("li"),mre=a("strong"),Yeo=o("openai-gpt"),Keo=o(" \u2014 "),_R=a("a"),Zeo=o("OpenAIGPTTokenizer"),eoo=o(" or "),bR=a("a"),ooo=o("OpenAIGPTTokenizerFast"),roo=o(" (OpenAI GPT model)"),too=l(),ms=a("li"),fre=a("strong"),aoo=o("pegasus"),noo=o(" \u2014 "),FR=a("a"),soo=o("PegasusTokenizer"),loo=o(" or "),vR=a("a"),ioo=o("PegasusTokenizerFast"),doo=o(" (Pegasus model)"),coo=l(),Mg=a("li"),gre=a("strong"),moo=o("perceiver"),foo=o(" \u2014 "),TR=a("a"),goo=o("PerceiverTokenizer"),hoo=o(" (Perceiver model)"),uoo=l(),Eg=a("li"),hre=a("strong"),poo=o("phobert"),_oo=o(" \u2014 "),MR=a("a"),boo=o("PhobertTokenizer"),Foo=o(" (PhoBERT model)"),voo=l(),Cg=a("li"),ure=a("strong"),Too=o("plbart"),Moo=o(" \u2014 "),ER=a("a"),Eoo=o("PLBartTokenizer"),Coo=o(" (PLBart model)"),woo=l(),wg=a("li"),pre=a("strong"),Aoo=o("prophetnet"),yoo=o(" \u2014 "),CR=a("a"),Loo=o("ProphetNetTokenizer"),xoo=o(" (ProphetNet model)"),$oo=l(),fs=a("li"),_re=a("strong"),koo=o("qdqbert"),Soo=o(" \u2014 "),wR=a("a"),Roo=o("BertTokenizer"),Boo=o(" or "),AR=a("a"),Poo=o("BertTokenizerFast"),Ioo=o(" (QDQBert model)"),qoo=l(),Ag=a("li"),bre=a("strong"),Noo=o("rag"),joo=o(" \u2014 "),yR=a("a"),Doo=o("RagTokenizer"),Goo=o(" (RAG model)"),Ooo=l(),gs=a("li"),Fre=a("strong"),Voo=o("realm"),Xoo=o(" \u2014 "),LR=a("a"),zoo=o("RealmTokenizer"),Qoo=o(" or "),xR=a("a"),Woo=o("RealmTokenizerFast"),Hoo=o(" (Realm model)"),Uoo=l(),hs=a("li"),vre=a("strong"),Joo=o("reformer"),Yoo=o(" \u2014 "),$R=a("a"),Koo=o("ReformerTokenizer"),Zoo=o(" or "),kR=a("a"),ero=o("ReformerTokenizerFast"),oro=o(" (Reformer model)"),rro=l(),us=a("li"),Tre=a("strong"),tro=o("rembert"),aro=o(" \u2014 "),SR=a("a"),nro=o("RemBertTokenizer"),sro=o(" or "),RR=a("a"),lro=o("RemBertTokenizerFast"),iro=o(" (RemBERT model)"),dro=l(),ps=a("li"),Mre=a("strong"),cro=o("retribert"),mro=o(" \u2014 "),BR=a("a"),fro=o("RetriBertTokenizer"),gro=o(" or "),PR=a("a"),hro=o("RetriBertTokenizerFast"),uro=o(" (RetriBERT model)"),pro=l(),_s=a("li"),Ere=a("strong"),_ro=o("roberta"),bro=o(" \u2014 "),IR=a("a"),Fro=o("RobertaTokenizer"),vro=o(" or "),qR=a("a"),Tro=o("RobertaTokenizerFast"),Mro=o(" (RoBERTa model)"),Ero=l(),bs=a("li"),Cre=a("strong"),Cro=o("roformer"),wro=o(" \u2014 "),NR=a("a"),Aro=o("RoFormerTokenizer"),yro=o(" or "),jR=a("a"),Lro=o("RoFormerTokenizerFast"),xro=o(" (RoFormer model)"),$ro=l(),yg=a("li"),wre=a("strong"),kro=o("speech_to_text"),Sro=o(" \u2014 "),DR=a("a"),Rro=o("Speech2TextTokenizer"),Bro=o(" (Speech2Text model)"),Pro=l(),Lg=a("li"),Are=a("strong"),Iro=o("speech_to_text_2"),qro=o(" \u2014 "),GR=a("a"),Nro=o("Speech2Text2Tokenizer"),jro=o(" (Speech2Text2 model)"),Dro=l(),Fs=a("li"),yre=a("strong"),Gro=o("splinter"),Oro=o(" \u2014 "),OR=a("a"),Vro=o("SplinterTokenizer"),Xro=o(" or "),VR=a("a"),zro=o("SplinterTokenizerFast"),Qro=o(" (Splinter model)"),Wro=l(),vs=a("li"),Lre=a("strong"),Hro=o("squeezebert"),Uro=o(" \u2014 "),XR=a("a"),Jro=o("SqueezeBertTokenizer"),Yro=o(" or "),zR=a("a"),Kro=o("SqueezeBertTokenizerFast"),Zro=o(" (SqueezeBERT model)"),eto=l(),Ts=a("li"),xre=a("strong"),oto=o("t5"),rto=o(" \u2014 "),QR=a("a"),tto=o("T5Tokenizer"),ato=o(" or "),WR=a("a"),nto=o("T5TokenizerFast"),sto=o(" (T5 model)"),lto=l(),xg=a("li"),$re=a("strong"),ito=o("tapas"),dto=o(" \u2014 "),HR=a("a"),cto=o("TapasTokenizer"),mto=o(" (TAPAS model)"),fto=l(),$g=a("li"),kre=a("strong"),gto=o("tapex"),hto=o(" \u2014 "),UR=a("a"),uto=o("TapexTokenizer"),pto=o(" (TAPEX model)"),_to=l(),kg=a("li"),Sre=a("strong"),bto=o("transfo-xl"),Fto=o(" \u2014 "),JR=a("a"),vto=o("TransfoXLTokenizer"),Tto=o(" (Transformer-XL model)"),Mto=l(),Ms=a("li"),Rre=a("strong"),Eto=o("visual_bert"),Cto=o(" \u2014 "),YR=a("a"),wto=o("BertTokenizer"),Ato=o(" or "),KR=a("a"),yto=o("BertTokenizerFast"),Lto=o(" (VisualBert model)"),xto=l(),Sg=a("li"),Bre=a("strong"),$to=o("wav2vec2"),kto=o(" \u2014 "),ZR=a("a"),Sto=o("Wav2Vec2CTCTokenizer"),Rto=o(" (Wav2Vec2 model)"),Bto=l(),Rg=a("li"),Pre=a("strong"),Pto=o("wav2vec2_phoneme"),Ito=o(" \u2014 "),eB=a("a"),qto=o("Wav2Vec2PhonemeCTCTokenizer"),Nto=o(" (Wav2Vec2Phoneme model)"),jto=l(),Es=a("li"),Ire=a("strong"),Dto=o("xglm"),Gto=o(" \u2014 "),oB=a("a"),Oto=o("XGLMTokenizer"),Vto=o(" or "),rB=a("a"),Xto=o("XGLMTokenizerFast"),zto=o(" (XGLM model)"),Qto=l(),Bg=a("li"),qre=a("strong"),Wto=o("xlm"),Hto=o(" \u2014 "),tB=a("a"),Uto=o("XLMTokenizer"),Jto=o(" (XLM model)"),Yto=l(),Pg=a("li"),Nre=a("strong"),Kto=o("xlm-prophetnet"),Zto=o(" \u2014 "),aB=a("a"),eao=o("XLMProphetNetTokenizer"),oao=o(" (XLMProphetNet model)"),rao=l(),Cs=a("li"),jre=a("strong"),tao=o("xlm-roberta"),aao=o(" \u2014 "),nB=a("a"),nao=o("XLMRobertaTokenizer"),sao=o(" or "),sB=a("a"),lao=o("XLMRobertaTokenizerFast"),iao=o(" (XLM-RoBERTa model)"),dao=l(),ws=a("li"),Dre=a("strong"),cao=o("xlm-roberta-xl"),mao=o(" \u2014 "),lB=a("a"),fao=o("RobertaTokenizer"),gao=o(" or "),iB=a("a"),hao=o("RobertaTokenizerFast"),uao=o(" (XLM-RoBERTa-XL model)"),pao=l(),As=a("li"),Gre=a("strong"),_ao=o("xlnet"),bao=o(" \u2014 "),dB=a("a"),Fao=o("XLNetTokenizer"),vao=o(" or "),cB=a("a"),Tao=o("XLNetTokenizerFast"),Mao=o(" (XLNet model)"),Eao=l(),ys=a("li"),Ore=a("strong"),Cao=o("yoso"),wao=o(" \u2014 "),mB=a("a"),Aao=o("AlbertTokenizer"),yao=o(" or "),fB=a("a"),Lao=o("AlbertTokenizerFast"),xao=o(" (YOSO model)"),$ao=l(),v(Ig.$$.fragment),kao=l(),qg=a("div"),v(B6.$$.fragment),Sao=l(),Vre=a("p"),Rao=o("Register a new tokenizer in this mapping."),hBe=l(),fi=a("h2"),Ng=a("a"),Xre=a("span"),v(P6.$$.fragment),Bao=l(),zre=a("span"),Pao=o("AutoFeatureExtractor"),uBe=l(),Ao=a("div"),v(I6.$$.fragment),Iao=l(),q6=a("p"),qao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=a("a"),Nao=o("AutoFeatureExtractor.from_pretrained()"),jao=o(" class method."),Dao=l(),N6=a("p"),Gao=o("This class cannot be instantiated directly using "),Qre=a("code"),Oao=o("__init__()"),Vao=o(" (throws an error)."),Xao=l(),Qe=a("div"),v(j6.$$.fragment),zao=l(),Wre=a("p"),Qao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wao=l(),Ma=a("p"),Hao=o("The feature extractor class to instantiate is selected based on the "),Hre=a("code"),Uao=o("model_type"),Jao=o(` property of the config object
(either passed as an argument or loaded from `),Ure=a("code"),Yao=o("pretrained_model_name_or_path"),Kao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jre=a("code"),Zao=o("pretrained_model_name_or_path"),eno=o(":"),ono=l(),te=a("ul"),jg=a("li"),Yre=a("strong"),rno=o("beit"),tno=o(" \u2014 "),hB=a("a"),ano=o("BeitFeatureExtractor"),nno=o(" (BEiT model)"),sno=l(),Dg=a("li"),Kre=a("strong"),lno=o("clip"),ino=o(" \u2014 "),uB=a("a"),dno=o("CLIPFeatureExtractor"),cno=o(" (CLIP model)"),mno=l(),Gg=a("li"),Zre=a("strong"),fno=o("convnext"),gno=o(" \u2014 "),pB=a("a"),hno=o("ConvNextFeatureExtractor"),uno=o(" (ConvNext model)"),pno=l(),Og=a("li"),ete=a("strong"),_no=o("data2vec-audio"),bno=o(" \u2014 "),_B=a("a"),Fno=o("Wav2Vec2FeatureExtractor"),vno=o(" (Data2VecAudio model)"),Tno=l(),Vg=a("li"),ote=a("strong"),Mno=o("data2vec-vision"),Eno=o(" \u2014 "),bB=a("a"),Cno=o("BeitFeatureExtractor"),wno=o(" (Data2VecVision model)"),Ano=l(),Xg=a("li"),rte=a("strong"),yno=o("deit"),Lno=o(" \u2014 "),FB=a("a"),xno=o("DeiTFeatureExtractor"),$no=o(" (DeiT model)"),kno=l(),zg=a("li"),tte=a("strong"),Sno=o("detr"),Rno=o(" \u2014 "),vB=a("a"),Bno=o("DetrFeatureExtractor"),Pno=o(" (DETR model)"),Ino=l(),Qg=a("li"),ate=a("strong"),qno=o("dpt"),Nno=o(" \u2014 "),TB=a("a"),jno=o("DPTFeatureExtractor"),Dno=o(" (DPT model)"),Gno=l(),Wg=a("li"),nte=a("strong"),Ono=o("glpn"),Vno=o(" \u2014 "),MB=a("a"),Xno=o("GLPNFeatureExtractor"),zno=o(" (GLPN model)"),Qno=l(),Hg=a("li"),ste=a("strong"),Wno=o("hubert"),Hno=o(" \u2014 "),EB=a("a"),Uno=o("Wav2Vec2FeatureExtractor"),Jno=o(" (Hubert model)"),Yno=l(),Ug=a("li"),lte=a("strong"),Kno=o("layoutlmv2"),Zno=o(" \u2014 "),CB=a("a"),eso=o("LayoutLMv2FeatureExtractor"),oso=o(" (LayoutLMv2 model)"),rso=l(),Jg=a("li"),ite=a("strong"),tso=o("maskformer"),aso=o(" \u2014 "),wB=a("a"),nso=o("MaskFormerFeatureExtractor"),sso=o(" (MaskFormer model)"),lso=l(),Yg=a("li"),dte=a("strong"),iso=o("perceiver"),dso=o(" \u2014 "),AB=a("a"),cso=o("PerceiverFeatureExtractor"),mso=o(" (Perceiver model)"),fso=l(),Kg=a("li"),cte=a("strong"),gso=o("poolformer"),hso=o(" \u2014 "),yB=a("a"),uso=o("PoolFormerFeatureExtractor"),pso=o(" (PoolFormer model)"),_so=l(),Zg=a("li"),mte=a("strong"),bso=o("regnet"),Fso=o(" \u2014 "),LB=a("a"),vso=o("ConvNextFeatureExtractor"),Tso=o(" (RegNet model)"),Mso=l(),eh=a("li"),fte=a("strong"),Eso=o("resnet"),Cso=o(" \u2014 "),xB=a("a"),wso=o("ConvNextFeatureExtractor"),Aso=o(" (ResNet model)"),yso=l(),oh=a("li"),gte=a("strong"),Lso=o("segformer"),xso=o(" \u2014 "),$B=a("a"),$so=o("SegformerFeatureExtractor"),kso=o(" (SegFormer model)"),Sso=l(),rh=a("li"),hte=a("strong"),Rso=o("speech_to_text"),Bso=o(" \u2014 "),kB=a("a"),Pso=o("Speech2TextFeatureExtractor"),Iso=o(" (Speech2Text model)"),qso=l(),th=a("li"),ute=a("strong"),Nso=o("swin"),jso=o(" \u2014 "),SB=a("a"),Dso=o("ViTFeatureExtractor"),Gso=o(" (Swin model)"),Oso=l(),ah=a("li"),pte=a("strong"),Vso=o("van"),Xso=o(" \u2014 "),RB=a("a"),zso=o("ConvNextFeatureExtractor"),Qso=o(" (VAN model)"),Wso=l(),nh=a("li"),_te=a("strong"),Hso=o("vit"),Uso=o(" \u2014 "),BB=a("a"),Jso=o("ViTFeatureExtractor"),Yso=o(" (ViT model)"),Kso=l(),sh=a("li"),bte=a("strong"),Zso=o("vit_mae"),elo=o(" \u2014 "),PB=a("a"),olo=o("ViTFeatureExtractor"),rlo=o(" (ViTMAE model)"),tlo=l(),lh=a("li"),Fte=a("strong"),alo=o("wav2vec2"),nlo=o(" \u2014 "),IB=a("a"),slo=o("Wav2Vec2FeatureExtractor"),llo=o(" (Wav2Vec2 model)"),ilo=l(),ih=a("li"),vte=a("strong"),dlo=o("yolos"),clo=o(" \u2014 "),qB=a("a"),mlo=o("YolosFeatureExtractor"),flo=o(" (YOLOS model)"),glo=l(),v(dh.$$.fragment),hlo=l(),v(ch.$$.fragment),ulo=l(),mh=a("div"),v(D6.$$.fragment),plo=l(),Tte=a("p"),_lo=o("Register a new feature extractor for this class."),pBe=l(),gi=a("h2"),fh=a("a"),Mte=a("span"),v(G6.$$.fragment),blo=l(),Ete=a("span"),Flo=o("AutoProcessor"),_Be=l(),yo=a("div"),v(O6.$$.fragment),vlo=l(),V6=a("p"),Tlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NB=a("a"),Mlo=o("AutoProcessor.from_pretrained()"),Elo=o(" class method."),Clo=l(),X6=a("p"),wlo=o("This class cannot be instantiated directly using "),Cte=a("code"),Alo=o("__init__()"),ylo=o(" (throws an error)."),Llo=l(),We=a("div"),v(z6.$$.fragment),xlo=l(),wte=a("p"),$lo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),klo=l(),hi=a("p"),Slo=o("The processor class to instantiate is selected based on the "),Ate=a("code"),Rlo=o("model_type"),Blo=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),Plo=o("pretrained_model_name_or_path"),Ilo=o(" if possible):"),qlo=l(),be=a("ul"),gh=a("li"),Lte=a("strong"),Nlo=o("clip"),jlo=o(" \u2014 "),jB=a("a"),Dlo=o("CLIPProcessor"),Glo=o(" (CLIP model)"),Olo=l(),hh=a("li"),xte=a("strong"),Vlo=o("layoutlmv2"),Xlo=o(" \u2014 "),DB=a("a"),zlo=o("LayoutLMv2Processor"),Qlo=o(" (LayoutLMv2 model)"),Wlo=l(),uh=a("li"),$te=a("strong"),Hlo=o("layoutxlm"),Ulo=o(" \u2014 "),GB=a("a"),Jlo=o("LayoutXLMProcessor"),Ylo=o(" (LayoutXLM model)"),Klo=l(),ph=a("li"),kte=a("strong"),Zlo=o("sew"),eio=o(" \u2014 "),OB=a("a"),oio=o("Wav2Vec2Processor"),rio=o(" (SEW model)"),tio=l(),_h=a("li"),Ste=a("strong"),aio=o("sew-d"),nio=o(" \u2014 "),VB=a("a"),sio=o("Wav2Vec2Processor"),lio=o(" (SEW-D model)"),iio=l(),bh=a("li"),Rte=a("strong"),dio=o("speech_to_text"),cio=o(" \u2014 "),XB=a("a"),mio=o("Speech2TextProcessor"),fio=o(" (Speech2Text model)"),gio=l(),Fh=a("li"),Bte=a("strong"),hio=o("speech_to_text_2"),uio=o(" \u2014 "),zB=a("a"),pio=o("Speech2Text2Processor"),_io=o(" (Speech2Text2 model)"),bio=l(),vh=a("li"),Pte=a("strong"),Fio=o("trocr"),vio=o(" \u2014 "),QB=a("a"),Tio=o("TrOCRProcessor"),Mio=o(" (TrOCR model)"),Eio=l(),Th=a("li"),Ite=a("strong"),Cio=o("unispeech"),wio=o(" \u2014 "),WB=a("a"),Aio=o("Wav2Vec2Processor"),yio=o(" (UniSpeech model)"),Lio=l(),Mh=a("li"),qte=a("strong"),xio=o("unispeech-sat"),$io=o(" \u2014 "),HB=a("a"),kio=o("Wav2Vec2Processor"),Sio=o(" (UniSpeechSat model)"),Rio=l(),Eh=a("li"),Nte=a("strong"),Bio=o("vilt"),Pio=o(" \u2014 "),UB=a("a"),Iio=o("ViltProcessor"),qio=o(" (ViLT model)"),Nio=l(),Ch=a("li"),jte=a("strong"),jio=o("vision-text-dual-encoder"),Dio=o(" \u2014 "),JB=a("a"),Gio=o("VisionTextDualEncoderProcessor"),Oio=o(" (VisionTextDualEncoder model)"),Vio=l(),wh=a("li"),Dte=a("strong"),Xio=o("wav2vec2"),zio=o(" \u2014 "),YB=a("a"),Qio=o("Wav2Vec2Processor"),Wio=o(" (Wav2Vec2 model)"),Hio=l(),Ah=a("li"),Gte=a("strong"),Uio=o("wavlm"),Jio=o(" \u2014 "),KB=a("a"),Yio=o("Wav2Vec2Processor"),Kio=o(" (WavLM model)"),Zio=l(),v(yh.$$.fragment),edo=l(),v(Lh.$$.fragment),odo=l(),xh=a("div"),v(Q6.$$.fragment),rdo=l(),Ote=a("p"),tdo=o("Register a new processor for this class."),bBe=l(),ui=a("h2"),$h=a("a"),Vte=a("span"),v(W6.$$.fragment),ado=l(),Xte=a("span"),ndo=o("AutoModel"),FBe=l(),Lo=a("div"),v(H6.$$.fragment),sdo=l(),pi=a("p"),ldo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=a("a"),ido=o("from_pretrained()"),ddo=o(" class method or the "),eP=a("a"),cdo=o("from_config()"),mdo=o(` class
method.`),fdo=l(),U6=a("p"),gdo=o("This class cannot be instantiated directly using "),zte=a("code"),hdo=o("__init__()"),udo=o(" (throws an error)."),pdo=l(),Zr=a("div"),v(J6.$$.fragment),_do=l(),Qte=a("p"),bdo=o("Instantiates one of the base model classes of the library from a configuration."),Fdo=l(),_i=a("p"),vdo=o(`Note:
Loading a model from its configuration file does `),Wte=a("strong"),Tdo=o("not"),Mdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=a("a"),Edo=o("from_pretrained()"),Cdo=o(" to load the model weights."),wdo=l(),v(kh.$$.fragment),Ado=l(),He=a("div"),v(Y6.$$.fragment),ydo=l(),Hte=a("p"),Ldo=o("Instantiate one of the base model classes of the library from a pretrained model."),xdo=l(),Ea=a("p"),$do=o("The model class to instantiate is selected based on the "),Ute=a("code"),kdo=o("model_type"),Sdo=o(` property of the config object (either
passed as an argument or loaded from `),Jte=a("code"),Rdo=o("pretrained_model_name_or_path"),Bdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=a("code"),Pdo=o("pretrained_model_name_or_path"),Ido=o(":"),qdo=l(),x=a("ul"),Sh=a("li"),Kte=a("strong"),Ndo=o("albert"),jdo=o(" \u2014 "),rP=a("a"),Ddo=o("AlbertModel"),Gdo=o(" (ALBERT model)"),Odo=l(),Rh=a("li"),Zte=a("strong"),Vdo=o("bart"),Xdo=o(" \u2014 "),tP=a("a"),zdo=o("BartModel"),Qdo=o(" (BART model)"),Wdo=l(),Bh=a("li"),eae=a("strong"),Hdo=o("beit"),Udo=o(" \u2014 "),aP=a("a"),Jdo=o("BeitModel"),Ydo=o(" (BEiT model)"),Kdo=l(),Ph=a("li"),oae=a("strong"),Zdo=o("bert"),eco=o(" \u2014 "),nP=a("a"),oco=o("BertModel"),rco=o(" (BERT model)"),tco=l(),Ih=a("li"),rae=a("strong"),aco=o("bert-generation"),nco=o(" \u2014 "),sP=a("a"),sco=o("BertGenerationEncoder"),lco=o(" (Bert Generation model)"),ico=l(),qh=a("li"),tae=a("strong"),dco=o("big_bird"),cco=o(" \u2014 "),lP=a("a"),mco=o("BigBirdModel"),fco=o(" (BigBird model)"),gco=l(),Nh=a("li"),aae=a("strong"),hco=o("bigbird_pegasus"),uco=o(" \u2014 "),iP=a("a"),pco=o("BigBirdPegasusModel"),_co=o(" (BigBirdPegasus model)"),bco=l(),jh=a("li"),nae=a("strong"),Fco=o("blenderbot"),vco=o(" \u2014 "),dP=a("a"),Tco=o("BlenderbotModel"),Mco=o(" (Blenderbot model)"),Eco=l(),Dh=a("li"),sae=a("strong"),Cco=o("blenderbot-small"),wco=o(" \u2014 "),cP=a("a"),Aco=o("BlenderbotSmallModel"),yco=o(" (BlenderbotSmall model)"),Lco=l(),Gh=a("li"),lae=a("strong"),xco=o("camembert"),$co=o(" \u2014 "),mP=a("a"),kco=o("CamembertModel"),Sco=o(" (CamemBERT model)"),Rco=l(),Oh=a("li"),iae=a("strong"),Bco=o("canine"),Pco=o(" \u2014 "),fP=a("a"),Ico=o("CanineModel"),qco=o(" (Canine model)"),Nco=l(),Vh=a("li"),dae=a("strong"),jco=o("clip"),Dco=o(" \u2014 "),gP=a("a"),Gco=o("CLIPModel"),Oco=o(" (CLIP model)"),Vco=l(),Xh=a("li"),cae=a("strong"),Xco=o("convbert"),zco=o(" \u2014 "),hP=a("a"),Qco=o("ConvBertModel"),Wco=o(" (ConvBERT model)"),Hco=l(),zh=a("li"),mae=a("strong"),Uco=o("convnext"),Jco=o(" \u2014 "),uP=a("a"),Yco=o("ConvNextModel"),Kco=o(" (ConvNext model)"),Zco=l(),Qh=a("li"),fae=a("strong"),emo=o("ctrl"),omo=o(" \u2014 "),pP=a("a"),rmo=o("CTRLModel"),tmo=o(" (CTRL model)"),amo=l(),Wh=a("li"),gae=a("strong"),nmo=o("data2vec-audio"),smo=o(" \u2014 "),_P=a("a"),lmo=o("Data2VecAudioModel"),imo=o(" (Data2VecAudio model)"),dmo=l(),Hh=a("li"),hae=a("strong"),cmo=o("data2vec-text"),mmo=o(" \u2014 "),bP=a("a"),fmo=o("Data2VecTextModel"),gmo=o(" (Data2VecText model)"),hmo=l(),Uh=a("li"),uae=a("strong"),umo=o("data2vec-vision"),pmo=o(" \u2014 "),FP=a("a"),_mo=o("Data2VecVisionModel"),bmo=o(" (Data2VecVision model)"),Fmo=l(),Jh=a("li"),pae=a("strong"),vmo=o("deberta"),Tmo=o(" \u2014 "),vP=a("a"),Mmo=o("DebertaModel"),Emo=o(" (DeBERTa model)"),Cmo=l(),Yh=a("li"),_ae=a("strong"),wmo=o("deberta-v2"),Amo=o(" \u2014 "),TP=a("a"),ymo=o("DebertaV2Model"),Lmo=o(" (DeBERTa-v2 model)"),xmo=l(),Kh=a("li"),bae=a("strong"),$mo=o("decision_transformer"),kmo=o(" \u2014 "),MP=a("a"),Smo=o("DecisionTransformerModel"),Rmo=o(" (Decision Transformer model)"),Bmo=l(),Zh=a("li"),Fae=a("strong"),Pmo=o("deit"),Imo=o(" \u2014 "),EP=a("a"),qmo=o("DeiTModel"),Nmo=o(" (DeiT model)"),jmo=l(),eu=a("li"),vae=a("strong"),Dmo=o("detr"),Gmo=o(" \u2014 "),CP=a("a"),Omo=o("DetrModel"),Vmo=o(" (DETR model)"),Xmo=l(),ou=a("li"),Tae=a("strong"),zmo=o("distilbert"),Qmo=o(" \u2014 "),wP=a("a"),Wmo=o("DistilBertModel"),Hmo=o(" (DistilBERT model)"),Umo=l(),ru=a("li"),Mae=a("strong"),Jmo=o("dpr"),Ymo=o(" \u2014 "),AP=a("a"),Kmo=o("DPRQuestionEncoder"),Zmo=o(" (DPR model)"),efo=l(),tu=a("li"),Eae=a("strong"),ofo=o("dpt"),rfo=o(" \u2014 "),yP=a("a"),tfo=o("DPTModel"),afo=o(" (DPT model)"),nfo=l(),au=a("li"),Cae=a("strong"),sfo=o("electra"),lfo=o(" \u2014 "),LP=a("a"),ifo=o("ElectraModel"),dfo=o(" (ELECTRA model)"),cfo=l(),nu=a("li"),wae=a("strong"),mfo=o("flaubert"),ffo=o(" \u2014 "),xP=a("a"),gfo=o("FlaubertModel"),hfo=o(" (FlauBERT model)"),ufo=l(),su=a("li"),Aae=a("strong"),pfo=o("fnet"),_fo=o(" \u2014 "),$P=a("a"),bfo=o("FNetModel"),Ffo=o(" (FNet model)"),vfo=l(),lu=a("li"),yae=a("strong"),Tfo=o("fsmt"),Mfo=o(" \u2014 "),kP=a("a"),Efo=o("FSMTModel"),Cfo=o(" (FairSeq Machine-Translation model)"),wfo=l(),Ls=a("li"),Lae=a("strong"),Afo=o("funnel"),yfo=o(" \u2014 "),SP=a("a"),Lfo=o("FunnelModel"),xfo=o(" or "),RP=a("a"),$fo=o("FunnelBaseModel"),kfo=o(" (Funnel Transformer model)"),Sfo=l(),iu=a("li"),xae=a("strong"),Rfo=o("glpn"),Bfo=o(" \u2014 "),BP=a("a"),Pfo=o("GLPNModel"),Ifo=o(" (GLPN model)"),qfo=l(),du=a("li"),$ae=a("strong"),Nfo=o("gpt2"),jfo=o(" \u2014 "),PP=a("a"),Dfo=o("GPT2Model"),Gfo=o(" (OpenAI GPT-2 model)"),Ofo=l(),cu=a("li"),kae=a("strong"),Vfo=o("gpt_neo"),Xfo=o(" \u2014 "),IP=a("a"),zfo=o("GPTNeoModel"),Qfo=o(" (GPT Neo model)"),Wfo=l(),mu=a("li"),Sae=a("strong"),Hfo=o("gptj"),Ufo=o(" \u2014 "),qP=a("a"),Jfo=o("GPTJModel"),Yfo=o(" (GPT-J model)"),Kfo=l(),fu=a("li"),Rae=a("strong"),Zfo=o("hubert"),ego=o(" \u2014 "),NP=a("a"),ogo=o("HubertModel"),rgo=o(" (Hubert model)"),tgo=l(),gu=a("li"),Bae=a("strong"),ago=o("ibert"),ngo=o(" \u2014 "),jP=a("a"),sgo=o("IBertModel"),lgo=o(" (I-BERT model)"),igo=l(),hu=a("li"),Pae=a("strong"),dgo=o("imagegpt"),cgo=o(" \u2014 "),DP=a("a"),mgo=o("ImageGPTModel"),fgo=o(" (ImageGPT model)"),ggo=l(),uu=a("li"),Iae=a("strong"),hgo=o("layoutlm"),ugo=o(" \u2014 "),GP=a("a"),pgo=o("LayoutLMModel"),_go=o(" (LayoutLM model)"),bgo=l(),pu=a("li"),qae=a("strong"),Fgo=o("layoutlmv2"),vgo=o(" \u2014 "),OP=a("a"),Tgo=o("LayoutLMv2Model"),Mgo=o(" (LayoutLMv2 model)"),Ego=l(),_u=a("li"),Nae=a("strong"),Cgo=o("led"),wgo=o(" \u2014 "),VP=a("a"),Ago=o("LEDModel"),ygo=o(" (LED model)"),Lgo=l(),bu=a("li"),jae=a("strong"),xgo=o("longformer"),$go=o(" \u2014 "),XP=a("a"),kgo=o("LongformerModel"),Sgo=o(" (Longformer model)"),Rgo=l(),Fu=a("li"),Dae=a("strong"),Bgo=o("luke"),Pgo=o(" \u2014 "),zP=a("a"),Igo=o("LukeModel"),qgo=o(" (LUKE model)"),Ngo=l(),vu=a("li"),Gae=a("strong"),jgo=o("lxmert"),Dgo=o(" \u2014 "),QP=a("a"),Ggo=o("LxmertModel"),Ogo=o(" (LXMERT model)"),Vgo=l(),Tu=a("li"),Oae=a("strong"),Xgo=o("m2m_100"),zgo=o(" \u2014 "),WP=a("a"),Qgo=o("M2M100Model"),Wgo=o(" (M2M100 model)"),Hgo=l(),Mu=a("li"),Vae=a("strong"),Ugo=o("marian"),Jgo=o(" \u2014 "),HP=a("a"),Ygo=o("MarianModel"),Kgo=o(" (Marian model)"),Zgo=l(),Eu=a("li"),Xae=a("strong"),eho=o("maskformer"),oho=o(" \u2014 "),UP=a("a"),rho=o("MaskFormerModel"),tho=o(" (MaskFormer model)"),aho=l(),Cu=a("li"),zae=a("strong"),nho=o("mbart"),sho=o(" \u2014 "),JP=a("a"),lho=o("MBartModel"),iho=o(" (mBART model)"),dho=l(),wu=a("li"),Qae=a("strong"),cho=o("megatron-bert"),mho=o(" \u2014 "),YP=a("a"),fho=o("MegatronBertModel"),gho=o(" (MegatronBert model)"),hho=l(),Au=a("li"),Wae=a("strong"),uho=o("mobilebert"),pho=o(" \u2014 "),KP=a("a"),_ho=o("MobileBertModel"),bho=o(" (MobileBERT model)"),Fho=l(),yu=a("li"),Hae=a("strong"),vho=o("mpnet"),Tho=o(" \u2014 "),ZP=a("a"),Mho=o("MPNetModel"),Eho=o(" (MPNet model)"),Cho=l(),Lu=a("li"),Uae=a("strong"),who=o("mt5"),Aho=o(" \u2014 "),eI=a("a"),yho=o("MT5Model"),Lho=o(" (mT5 model)"),xho=l(),xu=a("li"),Jae=a("strong"),$ho=o("nystromformer"),kho=o(" \u2014 "),oI=a("a"),Sho=o("NystromformerModel"),Rho=o(" (Nystromformer model)"),Bho=l(),$u=a("li"),Yae=a("strong"),Pho=o("openai-gpt"),Iho=o(" \u2014 "),rI=a("a"),qho=o("OpenAIGPTModel"),Nho=o(" (OpenAI GPT model)"),jho=l(),ku=a("li"),Kae=a("strong"),Dho=o("pegasus"),Gho=o(" \u2014 "),tI=a("a"),Oho=o("PegasusModel"),Vho=o(" (Pegasus model)"),Xho=l(),Su=a("li"),Zae=a("strong"),zho=o("perceiver"),Qho=o(" \u2014 "),aI=a("a"),Who=o("PerceiverModel"),Hho=o(" (Perceiver model)"),Uho=l(),Ru=a("li"),ene=a("strong"),Jho=o("plbart"),Yho=o(" \u2014 "),nI=a("a"),Kho=o("PLBartModel"),Zho=o(" (PLBart model)"),euo=l(),Bu=a("li"),one=a("strong"),ouo=o("poolformer"),ruo=o(" \u2014 "),sI=a("a"),tuo=o("PoolFormerModel"),auo=o(" (PoolFormer model)"),nuo=l(),Pu=a("li"),rne=a("strong"),suo=o("prophetnet"),luo=o(" \u2014 "),lI=a("a"),iuo=o("ProphetNetModel"),duo=o(" (ProphetNet model)"),cuo=l(),Iu=a("li"),tne=a("strong"),muo=o("qdqbert"),fuo=o(" \u2014 "),iI=a("a"),guo=o("QDQBertModel"),huo=o(" (QDQBert model)"),uuo=l(),qu=a("li"),ane=a("strong"),puo=o("reformer"),_uo=o(" \u2014 "),dI=a("a"),buo=o("ReformerModel"),Fuo=o(" (Reformer model)"),vuo=l(),Nu=a("li"),nne=a("strong"),Tuo=o("regnet"),Muo=o(" \u2014 "),cI=a("a"),Euo=o("RegNetModel"),Cuo=o(" (RegNet model)"),wuo=l(),ju=a("li"),sne=a("strong"),Auo=o("rembert"),yuo=o(" \u2014 "),mI=a("a"),Luo=o("RemBertModel"),xuo=o(" (RemBERT model)"),$uo=l(),Du=a("li"),lne=a("strong"),kuo=o("resnet"),Suo=o(" \u2014 "),fI=a("a"),Ruo=o("ResNetModel"),Buo=o(" (ResNet model)"),Puo=l(),Gu=a("li"),ine=a("strong"),Iuo=o("retribert"),quo=o(" \u2014 "),gI=a("a"),Nuo=o("RetriBertModel"),juo=o(" (RetriBERT model)"),Duo=l(),Ou=a("li"),dne=a("strong"),Guo=o("roberta"),Ouo=o(" \u2014 "),hI=a("a"),Vuo=o("RobertaModel"),Xuo=o(" (RoBERTa model)"),zuo=l(),Vu=a("li"),cne=a("strong"),Quo=o("roformer"),Wuo=o(" \u2014 "),uI=a("a"),Huo=o("RoFormerModel"),Uuo=o(" (RoFormer model)"),Juo=l(),Xu=a("li"),mne=a("strong"),Yuo=o("segformer"),Kuo=o(" \u2014 "),pI=a("a"),Zuo=o("SegformerModel"),epo=o(" (SegFormer model)"),opo=l(),zu=a("li"),fne=a("strong"),rpo=o("sew"),tpo=o(" \u2014 "),_I=a("a"),apo=o("SEWModel"),npo=o(" (SEW model)"),spo=l(),Qu=a("li"),gne=a("strong"),lpo=o("sew-d"),ipo=o(" \u2014 "),bI=a("a"),dpo=o("SEWDModel"),cpo=o(" (SEW-D model)"),mpo=l(),Wu=a("li"),hne=a("strong"),fpo=o("speech_to_text"),gpo=o(" \u2014 "),FI=a("a"),hpo=o("Speech2TextModel"),upo=o(" (Speech2Text model)"),ppo=l(),Hu=a("li"),une=a("strong"),_po=o("splinter"),bpo=o(" \u2014 "),vI=a("a"),Fpo=o("SplinterModel"),vpo=o(" (Splinter model)"),Tpo=l(),Uu=a("li"),pne=a("strong"),Mpo=o("squeezebert"),Epo=o(" \u2014 "),TI=a("a"),Cpo=o("SqueezeBertModel"),wpo=o(" (SqueezeBERT model)"),Apo=l(),Ju=a("li"),_ne=a("strong"),ypo=o("swin"),Lpo=o(" \u2014 "),MI=a("a"),xpo=o("SwinModel"),$po=o(" (Swin model)"),kpo=l(),Yu=a("li"),bne=a("strong"),Spo=o("t5"),Rpo=o(" \u2014 "),EI=a("a"),Bpo=o("T5Model"),Ppo=o(" (T5 model)"),Ipo=l(),Ku=a("li"),Fne=a("strong"),qpo=o("tapas"),Npo=o(" \u2014 "),CI=a("a"),jpo=o("TapasModel"),Dpo=o(" (TAPAS model)"),Gpo=l(),Zu=a("li"),vne=a("strong"),Opo=o("transfo-xl"),Vpo=o(" \u2014 "),wI=a("a"),Xpo=o("TransfoXLModel"),zpo=o(" (Transformer-XL model)"),Qpo=l(),ep=a("li"),Tne=a("strong"),Wpo=o("unispeech"),Hpo=o(" \u2014 "),AI=a("a"),Upo=o("UniSpeechModel"),Jpo=o(" (UniSpeech model)"),Ypo=l(),op=a("li"),Mne=a("strong"),Kpo=o("unispeech-sat"),Zpo=o(" \u2014 "),yI=a("a"),e_o=o("UniSpeechSatModel"),o_o=o(" (UniSpeechSat model)"),r_o=l(),rp=a("li"),Ene=a("strong"),t_o=o("van"),a_o=o(" \u2014 "),LI=a("a"),n_o=o("VanModel"),s_o=o(" (VAN model)"),l_o=l(),tp=a("li"),Cne=a("strong"),i_o=o("vilt"),d_o=o(" \u2014 "),xI=a("a"),c_o=o("ViltModel"),m_o=o(" (ViLT model)"),f_o=l(),ap=a("li"),wne=a("strong"),g_o=o("vision-text-dual-encoder"),h_o=o(" \u2014 "),$I=a("a"),u_o=o("VisionTextDualEncoderModel"),p_o=o(" (VisionTextDualEncoder model)"),__o=l(),np=a("li"),Ane=a("strong"),b_o=o("visual_bert"),F_o=o(" \u2014 "),kI=a("a"),v_o=o("VisualBertModel"),T_o=o(" (VisualBert model)"),M_o=l(),sp=a("li"),yne=a("strong"),E_o=o("vit"),C_o=o(" \u2014 "),SI=a("a"),w_o=o("ViTModel"),A_o=o(" (ViT model)"),y_o=l(),lp=a("li"),Lne=a("strong"),L_o=o("vit_mae"),x_o=o(" \u2014 "),RI=a("a"),$_o=o("ViTMAEModel"),k_o=o(" (ViTMAE model)"),S_o=l(),ip=a("li"),xne=a("strong"),R_o=o("wav2vec2"),B_o=o(" \u2014 "),BI=a("a"),P_o=o("Wav2Vec2Model"),I_o=o(" (Wav2Vec2 model)"),q_o=l(),dp=a("li"),$ne=a("strong"),N_o=o("wavlm"),j_o=o(" \u2014 "),PI=a("a"),D_o=o("WavLMModel"),G_o=o(" (WavLM model)"),O_o=l(),cp=a("li"),kne=a("strong"),V_o=o("xglm"),X_o=o(" \u2014 "),II=a("a"),z_o=o("XGLMModel"),Q_o=o(" (XGLM model)"),W_o=l(),mp=a("li"),Sne=a("strong"),H_o=o("xlm"),U_o=o(" \u2014 "),qI=a("a"),J_o=o("XLMModel"),Y_o=o(" (XLM model)"),K_o=l(),fp=a("li"),Rne=a("strong"),Z_o=o("xlm-prophetnet"),ebo=o(" \u2014 "),NI=a("a"),obo=o("XLMProphetNetModel"),rbo=o(" (XLMProphetNet model)"),tbo=l(),gp=a("li"),Bne=a("strong"),abo=o("xlm-roberta"),nbo=o(" \u2014 "),jI=a("a"),sbo=o("XLMRobertaModel"),lbo=o(" (XLM-RoBERTa model)"),ibo=l(),hp=a("li"),Pne=a("strong"),dbo=o("xlm-roberta-xl"),cbo=o(" \u2014 "),DI=a("a"),mbo=o("XLMRobertaXLModel"),fbo=o(" (XLM-RoBERTa-XL model)"),gbo=l(),up=a("li"),Ine=a("strong"),hbo=o("xlnet"),ubo=o(" \u2014 "),GI=a("a"),pbo=o("XLNetModel"),_bo=o(" (XLNet model)"),bbo=l(),pp=a("li"),qne=a("strong"),Fbo=o("yolos"),vbo=o(" \u2014 "),OI=a("a"),Tbo=o("YolosModel"),Mbo=o(" (YOLOS model)"),Ebo=l(),_p=a("li"),Nne=a("strong"),Cbo=o("yoso"),wbo=o(" \u2014 "),VI=a("a"),Abo=o("YosoModel"),ybo=o(" (YOSO model)"),Lbo=l(),bp=a("p"),xbo=o("The model is set in evaluation mode by default using "),jne=a("code"),$bo=o("model.eval()"),kbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=a("code"),Sbo=o("model.train()"),Rbo=l(),v(Fp.$$.fragment),vBe=l(),bi=a("h2"),vp=a("a"),Gne=a("span"),v(K6.$$.fragment),Bbo=l(),One=a("span"),Pbo=o("AutoModelForPreTraining"),TBe=l(),xo=a("div"),v(Z6.$$.fragment),Ibo=l(),Fi=a("p"),qbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XI=a("a"),Nbo=o("from_pretrained()"),jbo=o(" class method or the "),zI=a("a"),Dbo=o("from_config()"),Gbo=o(` class
method.`),Obo=l(),ey=a("p"),Vbo=o("This class cannot be instantiated directly using "),Vne=a("code"),Xbo=o("__init__()"),zbo=o(" (throws an error)."),Qbo=l(),et=a("div"),v(oy.$$.fragment),Wbo=l(),Xne=a("p"),Hbo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ubo=l(),vi=a("p"),Jbo=o(`Note:
Loading a model from its configuration file does `),zne=a("strong"),Ybo=o("not"),Kbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=a("a"),Zbo=o("from_pretrained()"),e2o=o(" to load the model weights."),o2o=l(),v(Tp.$$.fragment),r2o=l(),Ue=a("div"),v(ry.$$.fragment),t2o=l(),Qne=a("p"),a2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n2o=l(),Ca=a("p"),s2o=o("The model class to instantiate is selected based on the "),Wne=a("code"),l2o=o("model_type"),i2o=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),d2o=o("pretrained_model_name_or_path"),c2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=a("code"),m2o=o("pretrained_model_name_or_path"),f2o=o(":"),g2o=l(),G=a("ul"),Mp=a("li"),Jne=a("strong"),h2o=o("albert"),u2o=o(" \u2014 "),WI=a("a"),p2o=o("AlbertForPreTraining"),_2o=o(" (ALBERT model)"),b2o=l(),Ep=a("li"),Yne=a("strong"),F2o=o("bart"),v2o=o(" \u2014 "),HI=a("a"),T2o=o("BartForConditionalGeneration"),M2o=o(" (BART model)"),E2o=l(),Cp=a("li"),Kne=a("strong"),C2o=o("bert"),w2o=o(" \u2014 "),UI=a("a"),A2o=o("BertForPreTraining"),y2o=o(" (BERT model)"),L2o=l(),wp=a("li"),Zne=a("strong"),x2o=o("big_bird"),$2o=o(" \u2014 "),JI=a("a"),k2o=o("BigBirdForPreTraining"),S2o=o(" (BigBird model)"),R2o=l(),Ap=a("li"),ese=a("strong"),B2o=o("camembert"),P2o=o(" \u2014 "),YI=a("a"),I2o=o("CamembertForMaskedLM"),q2o=o(" (CamemBERT model)"),N2o=l(),yp=a("li"),ose=a("strong"),j2o=o("ctrl"),D2o=o(" \u2014 "),KI=a("a"),G2o=o("CTRLLMHeadModel"),O2o=o(" (CTRL model)"),V2o=l(),Lp=a("li"),rse=a("strong"),X2o=o("data2vec-text"),z2o=o(" \u2014 "),ZI=a("a"),Q2o=o("Data2VecTextForMaskedLM"),W2o=o(" (Data2VecText model)"),H2o=l(),xp=a("li"),tse=a("strong"),U2o=o("deberta"),J2o=o(" \u2014 "),eq=a("a"),Y2o=o("DebertaForMaskedLM"),K2o=o(" (DeBERTa model)"),Z2o=l(),$p=a("li"),ase=a("strong"),eFo=o("deberta-v2"),oFo=o(" \u2014 "),oq=a("a"),rFo=o("DebertaV2ForMaskedLM"),tFo=o(" (DeBERTa-v2 model)"),aFo=l(),kp=a("li"),nse=a("strong"),nFo=o("distilbert"),sFo=o(" \u2014 "),rq=a("a"),lFo=o("DistilBertForMaskedLM"),iFo=o(" (DistilBERT model)"),dFo=l(),Sp=a("li"),sse=a("strong"),cFo=o("electra"),mFo=o(" \u2014 "),tq=a("a"),fFo=o("ElectraForPreTraining"),gFo=o(" (ELECTRA model)"),hFo=l(),Rp=a("li"),lse=a("strong"),uFo=o("flaubert"),pFo=o(" \u2014 "),aq=a("a"),_Fo=o("FlaubertWithLMHeadModel"),bFo=o(" (FlauBERT model)"),FFo=l(),Bp=a("li"),ise=a("strong"),vFo=o("fnet"),TFo=o(" \u2014 "),nq=a("a"),MFo=o("FNetForPreTraining"),EFo=o(" (FNet model)"),CFo=l(),Pp=a("li"),dse=a("strong"),wFo=o("fsmt"),AFo=o(" \u2014 "),sq=a("a"),yFo=o("FSMTForConditionalGeneration"),LFo=o(" (FairSeq Machine-Translation model)"),xFo=l(),Ip=a("li"),cse=a("strong"),$Fo=o("funnel"),kFo=o(" \u2014 "),lq=a("a"),SFo=o("FunnelForPreTraining"),RFo=o(" (Funnel Transformer model)"),BFo=l(),qp=a("li"),mse=a("strong"),PFo=o("gpt2"),IFo=o(" \u2014 "),iq=a("a"),qFo=o("GPT2LMHeadModel"),NFo=o(" (OpenAI GPT-2 model)"),jFo=l(),Np=a("li"),fse=a("strong"),DFo=o("ibert"),GFo=o(" \u2014 "),dq=a("a"),OFo=o("IBertForMaskedLM"),VFo=o(" (I-BERT model)"),XFo=l(),jp=a("li"),gse=a("strong"),zFo=o("layoutlm"),QFo=o(" \u2014 "),cq=a("a"),WFo=o("LayoutLMForMaskedLM"),HFo=o(" (LayoutLM model)"),UFo=l(),Dp=a("li"),hse=a("strong"),JFo=o("longformer"),YFo=o(" \u2014 "),mq=a("a"),KFo=o("LongformerForMaskedLM"),ZFo=o(" (Longformer model)"),evo=l(),Gp=a("li"),use=a("strong"),ovo=o("lxmert"),rvo=o(" \u2014 "),fq=a("a"),tvo=o("LxmertForPreTraining"),avo=o(" (LXMERT model)"),nvo=l(),Op=a("li"),pse=a("strong"),svo=o("megatron-bert"),lvo=o(" \u2014 "),gq=a("a"),ivo=o("MegatronBertForPreTraining"),dvo=o(" (MegatronBert model)"),cvo=l(),Vp=a("li"),_se=a("strong"),mvo=o("mobilebert"),fvo=o(" \u2014 "),hq=a("a"),gvo=o("MobileBertForPreTraining"),hvo=o(" (MobileBERT model)"),uvo=l(),Xp=a("li"),bse=a("strong"),pvo=o("mpnet"),_vo=o(" \u2014 "),uq=a("a"),bvo=o("MPNetForMaskedLM"),Fvo=o(" (MPNet model)"),vvo=l(),zp=a("li"),Fse=a("strong"),Tvo=o("openai-gpt"),Mvo=o(" \u2014 "),pq=a("a"),Evo=o("OpenAIGPTLMHeadModel"),Cvo=o(" (OpenAI GPT model)"),wvo=l(),Qp=a("li"),vse=a("strong"),Avo=o("retribert"),yvo=o(" \u2014 "),_q=a("a"),Lvo=o("RetriBertModel"),xvo=o(" (RetriBERT model)"),$vo=l(),Wp=a("li"),Tse=a("strong"),kvo=o("roberta"),Svo=o(" \u2014 "),bq=a("a"),Rvo=o("RobertaForMaskedLM"),Bvo=o(" (RoBERTa model)"),Pvo=l(),Hp=a("li"),Mse=a("strong"),Ivo=o("squeezebert"),qvo=o(" \u2014 "),Fq=a("a"),Nvo=o("SqueezeBertForMaskedLM"),jvo=o(" (SqueezeBERT model)"),Dvo=l(),Up=a("li"),Ese=a("strong"),Gvo=o("t5"),Ovo=o(" \u2014 "),vq=a("a"),Vvo=o("T5ForConditionalGeneration"),Xvo=o(" (T5 model)"),zvo=l(),Jp=a("li"),Cse=a("strong"),Qvo=o("tapas"),Wvo=o(" \u2014 "),Tq=a("a"),Hvo=o("TapasForMaskedLM"),Uvo=o(" (TAPAS model)"),Jvo=l(),Yp=a("li"),wse=a("strong"),Yvo=o("transfo-xl"),Kvo=o(" \u2014 "),Mq=a("a"),Zvo=o("TransfoXLLMHeadModel"),e1o=o(" (Transformer-XL model)"),o1o=l(),Kp=a("li"),Ase=a("strong"),r1o=o("unispeech"),t1o=o(" \u2014 "),Eq=a("a"),a1o=o("UniSpeechForPreTraining"),n1o=o(" (UniSpeech model)"),s1o=l(),Zp=a("li"),yse=a("strong"),l1o=o("unispeech-sat"),i1o=o(" \u2014 "),Cq=a("a"),d1o=o("UniSpeechSatForPreTraining"),c1o=o(" (UniSpeechSat model)"),m1o=l(),e_=a("li"),Lse=a("strong"),f1o=o("visual_bert"),g1o=o(" \u2014 "),wq=a("a"),h1o=o("VisualBertForPreTraining"),u1o=o(" (VisualBert model)"),p1o=l(),o_=a("li"),xse=a("strong"),_1o=o("vit_mae"),b1o=o(" \u2014 "),Aq=a("a"),F1o=o("ViTMAEForPreTraining"),v1o=o(" (ViTMAE model)"),T1o=l(),r_=a("li"),$se=a("strong"),M1o=o("wav2vec2"),E1o=o(" \u2014 "),yq=a("a"),C1o=o("Wav2Vec2ForPreTraining"),w1o=o(" (Wav2Vec2 model)"),A1o=l(),t_=a("li"),kse=a("strong"),y1o=o("xlm"),L1o=o(" \u2014 "),Lq=a("a"),x1o=o("XLMWithLMHeadModel"),$1o=o(" (XLM model)"),k1o=l(),a_=a("li"),Sse=a("strong"),S1o=o("xlm-roberta"),R1o=o(" \u2014 "),xq=a("a"),B1o=o("XLMRobertaForMaskedLM"),P1o=o(" (XLM-RoBERTa model)"),I1o=l(),n_=a("li"),Rse=a("strong"),q1o=o("xlm-roberta-xl"),N1o=o(" \u2014 "),$q=a("a"),j1o=o("XLMRobertaXLForMaskedLM"),D1o=o(" (XLM-RoBERTa-XL model)"),G1o=l(),s_=a("li"),Bse=a("strong"),O1o=o("xlnet"),V1o=o(" \u2014 "),kq=a("a"),X1o=o("XLNetLMHeadModel"),z1o=o(" (XLNet model)"),Q1o=l(),l_=a("p"),W1o=o("The model is set in evaluation mode by default using "),Pse=a("code"),H1o=o("model.eval()"),U1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=a("code"),J1o=o("model.train()"),Y1o=l(),v(i_.$$.fragment),MBe=l(),Ti=a("h2"),d_=a("a"),qse=a("span"),v(ty.$$.fragment),K1o=l(),Nse=a("span"),Z1o=o("AutoModelForCausalLM"),EBe=l(),$o=a("div"),v(ay.$$.fragment),eTo=l(),Mi=a("p"),oTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sq=a("a"),rTo=o("from_pretrained()"),tTo=o(" class method or the "),Rq=a("a"),aTo=o("from_config()"),nTo=o(` class
method.`),sTo=l(),ny=a("p"),lTo=o("This class cannot be instantiated directly using "),jse=a("code"),iTo=o("__init__()"),dTo=o(" (throws an error)."),cTo=l(),ot=a("div"),v(sy.$$.fragment),mTo=l(),Dse=a("p"),fTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gTo=l(),Ei=a("p"),hTo=o(`Note:
Loading a model from its configuration file does `),Gse=a("strong"),uTo=o("not"),pTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=a("a"),_To=o("from_pretrained()"),bTo=o(" to load the model weights."),FTo=l(),v(c_.$$.fragment),vTo=l(),Je=a("div"),v(ly.$$.fragment),TTo=l(),Ose=a("p"),MTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ETo=l(),wa=a("p"),CTo=o("The model class to instantiate is selected based on the "),Vse=a("code"),wTo=o("model_type"),ATo=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),yTo=o("pretrained_model_name_or_path"),LTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),xTo=o("pretrained_model_name_or_path"),$To=o(":"),kTo=l(),z=a("ul"),m_=a("li"),Qse=a("strong"),STo=o("bart"),RTo=o(" \u2014 "),Pq=a("a"),BTo=o("BartForCausalLM"),PTo=o(" (BART model)"),ITo=l(),f_=a("li"),Wse=a("strong"),qTo=o("bert"),NTo=o(" \u2014 "),Iq=a("a"),jTo=o("BertLMHeadModel"),DTo=o(" (BERT model)"),GTo=l(),g_=a("li"),Hse=a("strong"),OTo=o("bert-generation"),VTo=o(" \u2014 "),qq=a("a"),XTo=o("BertGenerationDecoder"),zTo=o(" (Bert Generation model)"),QTo=l(),h_=a("li"),Use=a("strong"),WTo=o("big_bird"),HTo=o(" \u2014 "),Nq=a("a"),UTo=o("BigBirdForCausalLM"),JTo=o(" (BigBird model)"),YTo=l(),u_=a("li"),Jse=a("strong"),KTo=o("bigbird_pegasus"),ZTo=o(" \u2014 "),jq=a("a"),eMo=o("BigBirdPegasusForCausalLM"),oMo=o(" (BigBirdPegasus model)"),rMo=l(),p_=a("li"),Yse=a("strong"),tMo=o("blenderbot"),aMo=o(" \u2014 "),Dq=a("a"),nMo=o("BlenderbotForCausalLM"),sMo=o(" (Blenderbot model)"),lMo=l(),__=a("li"),Kse=a("strong"),iMo=o("blenderbot-small"),dMo=o(" \u2014 "),Gq=a("a"),cMo=o("BlenderbotSmallForCausalLM"),mMo=o(" (BlenderbotSmall model)"),fMo=l(),b_=a("li"),Zse=a("strong"),gMo=o("camembert"),hMo=o(" \u2014 "),Oq=a("a"),uMo=o("CamembertForCausalLM"),pMo=o(" (CamemBERT model)"),_Mo=l(),F_=a("li"),ele=a("strong"),bMo=o("ctrl"),FMo=o(" \u2014 "),Vq=a("a"),vMo=o("CTRLLMHeadModel"),TMo=o(" (CTRL model)"),MMo=l(),v_=a("li"),ole=a("strong"),EMo=o("data2vec-text"),CMo=o(" \u2014 "),Xq=a("a"),wMo=o("Data2VecTextForCausalLM"),AMo=o(" (Data2VecText model)"),yMo=l(),T_=a("li"),rle=a("strong"),LMo=o("electra"),xMo=o(" \u2014 "),zq=a("a"),$Mo=o("ElectraForCausalLM"),kMo=o(" (ELECTRA model)"),SMo=l(),M_=a("li"),tle=a("strong"),RMo=o("gpt2"),BMo=o(" \u2014 "),Qq=a("a"),PMo=o("GPT2LMHeadModel"),IMo=o(" (OpenAI GPT-2 model)"),qMo=l(),E_=a("li"),ale=a("strong"),NMo=o("gpt_neo"),jMo=o(" \u2014 "),Wq=a("a"),DMo=o("GPTNeoForCausalLM"),GMo=o(" (GPT Neo model)"),OMo=l(),C_=a("li"),nle=a("strong"),VMo=o("gptj"),XMo=o(" \u2014 "),Hq=a("a"),zMo=o("GPTJForCausalLM"),QMo=o(" (GPT-J model)"),WMo=l(),w_=a("li"),sle=a("strong"),HMo=o("marian"),UMo=o(" \u2014 "),Uq=a("a"),JMo=o("MarianForCausalLM"),YMo=o(" (Marian model)"),KMo=l(),A_=a("li"),lle=a("strong"),ZMo=o("mbart"),e4o=o(" \u2014 "),Jq=a("a"),o4o=o("MBartForCausalLM"),r4o=o(" (mBART model)"),t4o=l(),y_=a("li"),ile=a("strong"),a4o=o("megatron-bert"),n4o=o(" \u2014 "),Yq=a("a"),s4o=o("MegatronBertForCausalLM"),l4o=o(" (MegatronBert model)"),i4o=l(),L_=a("li"),dle=a("strong"),d4o=o("openai-gpt"),c4o=o(" \u2014 "),Kq=a("a"),m4o=o("OpenAIGPTLMHeadModel"),f4o=o(" (OpenAI GPT model)"),g4o=l(),x_=a("li"),cle=a("strong"),h4o=o("pegasus"),u4o=o(" \u2014 "),Zq=a("a"),p4o=o("PegasusForCausalLM"),_4o=o(" (Pegasus model)"),b4o=l(),$_=a("li"),mle=a("strong"),F4o=o("plbart"),v4o=o(" \u2014 "),eN=a("a"),T4o=o("PLBartForCausalLM"),M4o=o(" (PLBart model)"),E4o=l(),k_=a("li"),fle=a("strong"),C4o=o("prophetnet"),w4o=o(" \u2014 "),oN=a("a"),A4o=o("ProphetNetForCausalLM"),y4o=o(" (ProphetNet model)"),L4o=l(),S_=a("li"),gle=a("strong"),x4o=o("qdqbert"),$4o=o(" \u2014 "),rN=a("a"),k4o=o("QDQBertLMHeadModel"),S4o=o(" (QDQBert model)"),R4o=l(),R_=a("li"),hle=a("strong"),B4o=o("reformer"),P4o=o(" \u2014 "),tN=a("a"),I4o=o("ReformerModelWithLMHead"),q4o=o(" (Reformer model)"),N4o=l(),B_=a("li"),ule=a("strong"),j4o=o("rembert"),D4o=o(" \u2014 "),aN=a("a"),G4o=o("RemBertForCausalLM"),O4o=o(" (RemBERT model)"),V4o=l(),P_=a("li"),ple=a("strong"),X4o=o("roberta"),z4o=o(" \u2014 "),nN=a("a"),Q4o=o("RobertaForCausalLM"),W4o=o(" (RoBERTa model)"),H4o=l(),I_=a("li"),_le=a("strong"),U4o=o("roformer"),J4o=o(" \u2014 "),sN=a("a"),Y4o=o("RoFormerForCausalLM"),K4o=o(" (RoFormer model)"),Z4o=l(),q_=a("li"),ble=a("strong"),eEo=o("speech_to_text_2"),oEo=o(" \u2014 "),lN=a("a"),rEo=o("Speech2Text2ForCausalLM"),tEo=o(" (Speech2Text2 model)"),aEo=l(),N_=a("li"),Fle=a("strong"),nEo=o("transfo-xl"),sEo=o(" \u2014 "),iN=a("a"),lEo=o("TransfoXLLMHeadModel"),iEo=o(" (Transformer-XL model)"),dEo=l(),j_=a("li"),vle=a("strong"),cEo=o("trocr"),mEo=o(" \u2014 "),dN=a("a"),fEo=o("TrOCRForCausalLM"),gEo=o(" (TrOCR model)"),hEo=l(),D_=a("li"),Tle=a("strong"),uEo=o("xglm"),pEo=o(" \u2014 "),cN=a("a"),_Eo=o("XGLMForCausalLM"),bEo=o(" (XGLM model)"),FEo=l(),G_=a("li"),Mle=a("strong"),vEo=o("xlm"),TEo=o(" \u2014 "),mN=a("a"),MEo=o("XLMWithLMHeadModel"),EEo=o(" (XLM model)"),CEo=l(),O_=a("li"),Ele=a("strong"),wEo=o("xlm-prophetnet"),AEo=o(" \u2014 "),fN=a("a"),yEo=o("XLMProphetNetForCausalLM"),LEo=o(" (XLMProphetNet model)"),xEo=l(),V_=a("li"),Cle=a("strong"),$Eo=o("xlm-roberta"),kEo=o(" \u2014 "),gN=a("a"),SEo=o("XLMRobertaForCausalLM"),REo=o(" (XLM-RoBERTa model)"),BEo=l(),X_=a("li"),wle=a("strong"),PEo=o("xlm-roberta-xl"),IEo=o(" \u2014 "),hN=a("a"),qEo=o("XLMRobertaXLForCausalLM"),NEo=o(" (XLM-RoBERTa-XL model)"),jEo=l(),z_=a("li"),Ale=a("strong"),DEo=o("xlnet"),GEo=o(" \u2014 "),uN=a("a"),OEo=o("XLNetLMHeadModel"),VEo=o(" (XLNet model)"),XEo=l(),Q_=a("p"),zEo=o("The model is set in evaluation mode by default using "),yle=a("code"),QEo=o("model.eval()"),WEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=a("code"),HEo=o("model.train()"),UEo=l(),v(W_.$$.fragment),CBe=l(),Ci=a("h2"),H_=a("a"),xle=a("span"),v(iy.$$.fragment),JEo=l(),$le=a("span"),YEo=o("AutoModelForMaskedLM"),wBe=l(),ko=a("div"),v(dy.$$.fragment),KEo=l(),wi=a("p"),ZEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pN=a("a"),e5o=o("from_pretrained()"),o5o=o(" class method or the "),_N=a("a"),r5o=o("from_config()"),t5o=o(` class
method.`),a5o=l(),cy=a("p"),n5o=o("This class cannot be instantiated directly using "),kle=a("code"),s5o=o("__init__()"),l5o=o(" (throws an error)."),i5o=l(),rt=a("div"),v(my.$$.fragment),d5o=l(),Sle=a("p"),c5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m5o=l(),Ai=a("p"),f5o=o(`Note:
Loading a model from its configuration file does `),Rle=a("strong"),g5o=o("not"),h5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=a("a"),u5o=o("from_pretrained()"),p5o=o(" to load the model weights."),_5o=l(),v(U_.$$.fragment),b5o=l(),Ye=a("div"),v(fy.$$.fragment),F5o=l(),Ble=a("p"),v5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T5o=l(),Aa=a("p"),M5o=o("The model class to instantiate is selected based on the "),Ple=a("code"),E5o=o("model_type"),C5o=o(` property of the config object (either
passed as an argument or loaded from `),Ile=a("code"),w5o=o("pretrained_model_name_or_path"),A5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=a("code"),y5o=o("pretrained_model_name_or_path"),L5o=o(":"),x5o=l(),Q=a("ul"),J_=a("li"),Nle=a("strong"),$5o=o("albert"),k5o=o(" \u2014 "),FN=a("a"),S5o=o("AlbertForMaskedLM"),R5o=o(" (ALBERT model)"),B5o=l(),Y_=a("li"),jle=a("strong"),P5o=o("bart"),I5o=o(" \u2014 "),vN=a("a"),q5o=o("BartForConditionalGeneration"),N5o=o(" (BART model)"),j5o=l(),K_=a("li"),Dle=a("strong"),D5o=o("bert"),G5o=o(" \u2014 "),TN=a("a"),O5o=o("BertForMaskedLM"),V5o=o(" (BERT model)"),X5o=l(),Z_=a("li"),Gle=a("strong"),z5o=o("big_bird"),Q5o=o(" \u2014 "),MN=a("a"),W5o=o("BigBirdForMaskedLM"),H5o=o(" (BigBird model)"),U5o=l(),eb=a("li"),Ole=a("strong"),J5o=o("camembert"),Y5o=o(" \u2014 "),EN=a("a"),K5o=o("CamembertForMaskedLM"),Z5o=o(" (CamemBERT model)"),eCo=l(),ob=a("li"),Vle=a("strong"),oCo=o("convbert"),rCo=o(" \u2014 "),CN=a("a"),tCo=o("ConvBertForMaskedLM"),aCo=o(" (ConvBERT model)"),nCo=l(),rb=a("li"),Xle=a("strong"),sCo=o("data2vec-text"),lCo=o(" \u2014 "),wN=a("a"),iCo=o("Data2VecTextForMaskedLM"),dCo=o(" (Data2VecText model)"),cCo=l(),tb=a("li"),zle=a("strong"),mCo=o("deberta"),fCo=o(" \u2014 "),AN=a("a"),gCo=o("DebertaForMaskedLM"),hCo=o(" (DeBERTa model)"),uCo=l(),ab=a("li"),Qle=a("strong"),pCo=o("deberta-v2"),_Co=o(" \u2014 "),yN=a("a"),bCo=o("DebertaV2ForMaskedLM"),FCo=o(" (DeBERTa-v2 model)"),vCo=l(),nb=a("li"),Wle=a("strong"),TCo=o("distilbert"),MCo=o(" \u2014 "),LN=a("a"),ECo=o("DistilBertForMaskedLM"),CCo=o(" (DistilBERT model)"),wCo=l(),sb=a("li"),Hle=a("strong"),ACo=o("electra"),yCo=o(" \u2014 "),xN=a("a"),LCo=o("ElectraForMaskedLM"),xCo=o(" (ELECTRA model)"),$Co=l(),lb=a("li"),Ule=a("strong"),kCo=o("flaubert"),SCo=o(" \u2014 "),$N=a("a"),RCo=o("FlaubertWithLMHeadModel"),BCo=o(" (FlauBERT model)"),PCo=l(),ib=a("li"),Jle=a("strong"),ICo=o("fnet"),qCo=o(" \u2014 "),kN=a("a"),NCo=o("FNetForMaskedLM"),jCo=o(" (FNet model)"),DCo=l(),db=a("li"),Yle=a("strong"),GCo=o("funnel"),OCo=o(" \u2014 "),SN=a("a"),VCo=o("FunnelForMaskedLM"),XCo=o(" (Funnel Transformer model)"),zCo=l(),cb=a("li"),Kle=a("strong"),QCo=o("ibert"),WCo=o(" \u2014 "),RN=a("a"),HCo=o("IBertForMaskedLM"),UCo=o(" (I-BERT model)"),JCo=l(),mb=a("li"),Zle=a("strong"),YCo=o("layoutlm"),KCo=o(" \u2014 "),BN=a("a"),ZCo=o("LayoutLMForMaskedLM"),e3o=o(" (LayoutLM model)"),o3o=l(),fb=a("li"),eie=a("strong"),r3o=o("longformer"),t3o=o(" \u2014 "),PN=a("a"),a3o=o("LongformerForMaskedLM"),n3o=o(" (Longformer model)"),s3o=l(),gb=a("li"),oie=a("strong"),l3o=o("mbart"),i3o=o(" \u2014 "),IN=a("a"),d3o=o("MBartForConditionalGeneration"),c3o=o(" (mBART model)"),m3o=l(),hb=a("li"),rie=a("strong"),f3o=o("megatron-bert"),g3o=o(" \u2014 "),qN=a("a"),h3o=o("MegatronBertForMaskedLM"),u3o=o(" (MegatronBert model)"),p3o=l(),ub=a("li"),tie=a("strong"),_3o=o("mobilebert"),b3o=o(" \u2014 "),NN=a("a"),F3o=o("MobileBertForMaskedLM"),v3o=o(" (MobileBERT model)"),T3o=l(),pb=a("li"),aie=a("strong"),M3o=o("mpnet"),E3o=o(" \u2014 "),jN=a("a"),C3o=o("MPNetForMaskedLM"),w3o=o(" (MPNet model)"),A3o=l(),_b=a("li"),nie=a("strong"),y3o=o("nystromformer"),L3o=o(" \u2014 "),DN=a("a"),x3o=o("NystromformerForMaskedLM"),$3o=o(" (Nystromformer model)"),k3o=l(),bb=a("li"),sie=a("strong"),S3o=o("perceiver"),R3o=o(" \u2014 "),GN=a("a"),B3o=o("PerceiverForMaskedLM"),P3o=o(" (Perceiver model)"),I3o=l(),Fb=a("li"),lie=a("strong"),q3o=o("qdqbert"),N3o=o(" \u2014 "),ON=a("a"),j3o=o("QDQBertForMaskedLM"),D3o=o(" (QDQBert model)"),G3o=l(),vb=a("li"),iie=a("strong"),O3o=o("reformer"),V3o=o(" \u2014 "),VN=a("a"),X3o=o("ReformerForMaskedLM"),z3o=o(" (Reformer model)"),Q3o=l(),Tb=a("li"),die=a("strong"),W3o=o("rembert"),H3o=o(" \u2014 "),XN=a("a"),U3o=o("RemBertForMaskedLM"),J3o=o(" (RemBERT model)"),Y3o=l(),Mb=a("li"),cie=a("strong"),K3o=o("roberta"),Z3o=o(" \u2014 "),zN=a("a"),ewo=o("RobertaForMaskedLM"),owo=o(" (RoBERTa model)"),rwo=l(),Eb=a("li"),mie=a("strong"),two=o("roformer"),awo=o(" \u2014 "),QN=a("a"),nwo=o("RoFormerForMaskedLM"),swo=o(" (RoFormer model)"),lwo=l(),Cb=a("li"),fie=a("strong"),iwo=o("squeezebert"),dwo=o(" \u2014 "),WN=a("a"),cwo=o("SqueezeBertForMaskedLM"),mwo=o(" (SqueezeBERT model)"),fwo=l(),wb=a("li"),gie=a("strong"),gwo=o("tapas"),hwo=o(" \u2014 "),HN=a("a"),uwo=o("TapasForMaskedLM"),pwo=o(" (TAPAS model)"),_wo=l(),Ab=a("li"),hie=a("strong"),bwo=o("wav2vec2"),Fwo=o(" \u2014 "),uie=a("code"),vwo=o("Wav2Vec2ForMaskedLM"),Two=o(" (Wav2Vec2 model)"),Mwo=l(),yb=a("li"),pie=a("strong"),Ewo=o("xlm"),Cwo=o(" \u2014 "),UN=a("a"),wwo=o("XLMWithLMHeadModel"),Awo=o(" (XLM model)"),ywo=l(),Lb=a("li"),_ie=a("strong"),Lwo=o("xlm-roberta"),xwo=o(" \u2014 "),JN=a("a"),$wo=o("XLMRobertaForMaskedLM"),kwo=o(" (XLM-RoBERTa model)"),Swo=l(),xb=a("li"),bie=a("strong"),Rwo=o("xlm-roberta-xl"),Bwo=o(" \u2014 "),YN=a("a"),Pwo=o("XLMRobertaXLForMaskedLM"),Iwo=o(" (XLM-RoBERTa-XL model)"),qwo=l(),$b=a("li"),Fie=a("strong"),Nwo=o("yoso"),jwo=o(" \u2014 "),KN=a("a"),Dwo=o("YosoForMaskedLM"),Gwo=o(" (YOSO model)"),Owo=l(),kb=a("p"),Vwo=o("The model is set in evaluation mode by default using "),vie=a("code"),Xwo=o("model.eval()"),zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),Qwo=o("model.train()"),Wwo=l(),v(Sb.$$.fragment),ABe=l(),yi=a("h2"),Rb=a("a"),Mie=a("span"),v(gy.$$.fragment),Hwo=l(),Eie=a("span"),Uwo=o("AutoModelForSeq2SeqLM"),yBe=l(),So=a("div"),v(hy.$$.fragment),Jwo=l(),Li=a("p"),Ywo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZN=a("a"),Kwo=o("from_pretrained()"),Zwo=o(" class method or the "),ej=a("a"),eAo=o("from_config()"),oAo=o(` class
method.`),rAo=l(),uy=a("p"),tAo=o("This class cannot be instantiated directly using "),Cie=a("code"),aAo=o("__init__()"),nAo=o(" (throws an error)."),sAo=l(),tt=a("div"),v(py.$$.fragment),lAo=l(),wie=a("p"),iAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dAo=l(),xi=a("p"),cAo=o(`Note:
Loading a model from its configuration file does `),Aie=a("strong"),mAo=o("not"),fAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=a("a"),gAo=o("from_pretrained()"),hAo=o(" to load the model weights."),uAo=l(),v(Bb.$$.fragment),pAo=l(),Ke=a("div"),v(_y.$$.fragment),_Ao=l(),yie=a("p"),bAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FAo=l(),ya=a("p"),vAo=o("The model class to instantiate is selected based on the "),Lie=a("code"),TAo=o("model_type"),MAo=o(` property of the config object (either
passed as an argument or loaded from `),xie=a("code"),EAo=o("pretrained_model_name_or_path"),CAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=a("code"),wAo=o("pretrained_model_name_or_path"),AAo=o(":"),yAo=l(),he=a("ul"),Pb=a("li"),kie=a("strong"),LAo=o("bart"),xAo=o(" \u2014 "),rj=a("a"),$Ao=o("BartForConditionalGeneration"),kAo=o(" (BART model)"),SAo=l(),Ib=a("li"),Sie=a("strong"),RAo=o("bigbird_pegasus"),BAo=o(" \u2014 "),tj=a("a"),PAo=o("BigBirdPegasusForConditionalGeneration"),IAo=o(" (BigBirdPegasus model)"),qAo=l(),qb=a("li"),Rie=a("strong"),NAo=o("blenderbot"),jAo=o(" \u2014 "),aj=a("a"),DAo=o("BlenderbotForConditionalGeneration"),GAo=o(" (Blenderbot model)"),OAo=l(),Nb=a("li"),Bie=a("strong"),VAo=o("blenderbot-small"),XAo=o(" \u2014 "),nj=a("a"),zAo=o("BlenderbotSmallForConditionalGeneration"),QAo=o(" (BlenderbotSmall model)"),WAo=l(),jb=a("li"),Pie=a("strong"),HAo=o("encoder-decoder"),UAo=o(" \u2014 "),sj=a("a"),JAo=o("EncoderDecoderModel"),YAo=o(" (Encoder decoder model)"),KAo=l(),Db=a("li"),Iie=a("strong"),ZAo=o("fsmt"),e0o=o(" \u2014 "),lj=a("a"),o0o=o("FSMTForConditionalGeneration"),r0o=o(" (FairSeq Machine-Translation model)"),t0o=l(),Gb=a("li"),qie=a("strong"),a0o=o("led"),n0o=o(" \u2014 "),ij=a("a"),s0o=o("LEDForConditionalGeneration"),l0o=o(" (LED model)"),i0o=l(),Ob=a("li"),Nie=a("strong"),d0o=o("m2m_100"),c0o=o(" \u2014 "),dj=a("a"),m0o=o("M2M100ForConditionalGeneration"),f0o=o(" (M2M100 model)"),g0o=l(),Vb=a("li"),jie=a("strong"),h0o=o("marian"),u0o=o(" \u2014 "),cj=a("a"),p0o=o("MarianMTModel"),_0o=o(" (Marian model)"),b0o=l(),Xb=a("li"),Die=a("strong"),F0o=o("mbart"),v0o=o(" \u2014 "),mj=a("a"),T0o=o("MBartForConditionalGeneration"),M0o=o(" (mBART model)"),E0o=l(),zb=a("li"),Gie=a("strong"),C0o=o("mt5"),w0o=o(" \u2014 "),fj=a("a"),A0o=o("MT5ForConditionalGeneration"),y0o=o(" (mT5 model)"),L0o=l(),Qb=a("li"),Oie=a("strong"),x0o=o("pegasus"),$0o=o(" \u2014 "),gj=a("a"),k0o=o("PegasusForConditionalGeneration"),S0o=o(" (Pegasus model)"),R0o=l(),Wb=a("li"),Vie=a("strong"),B0o=o("plbart"),P0o=o(" \u2014 "),hj=a("a"),I0o=o("PLBartForConditionalGeneration"),q0o=o(" (PLBart model)"),N0o=l(),Hb=a("li"),Xie=a("strong"),j0o=o("prophetnet"),D0o=o(" \u2014 "),uj=a("a"),G0o=o("ProphetNetForConditionalGeneration"),O0o=o(" (ProphetNet model)"),V0o=l(),Ub=a("li"),zie=a("strong"),X0o=o("t5"),z0o=o(" \u2014 "),pj=a("a"),Q0o=o("T5ForConditionalGeneration"),W0o=o(" (T5 model)"),H0o=l(),Jb=a("li"),Qie=a("strong"),U0o=o("tapex"),J0o=o(" \u2014 "),_j=a("a"),Y0o=o("BartForConditionalGeneration"),K0o=o(" (TAPEX model)"),Z0o=l(),Yb=a("li"),Wie=a("strong"),e6o=o("xlm-prophetnet"),o6o=o(" \u2014 "),bj=a("a"),r6o=o("XLMProphetNetForConditionalGeneration"),t6o=o(" (XLMProphetNet model)"),a6o=l(),Kb=a("p"),n6o=o("The model is set in evaluation mode by default using "),Hie=a("code"),s6o=o("model.eval()"),l6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=a("code"),i6o=o("model.train()"),d6o=l(),v(Zb.$$.fragment),LBe=l(),$i=a("h2"),e2=a("a"),Jie=a("span"),v(by.$$.fragment),c6o=l(),Yie=a("span"),m6o=o("AutoModelForSequenceClassification"),xBe=l(),Ro=a("div"),v(Fy.$$.fragment),f6o=l(),ki=a("p"),g6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Fj=a("a"),h6o=o("from_pretrained()"),u6o=o(" class method or the "),vj=a("a"),p6o=o("from_config()"),_6o=o(` class
method.`),b6o=l(),vy=a("p"),F6o=o("This class cannot be instantiated directly using "),Kie=a("code"),v6o=o("__init__()"),T6o=o(" (throws an error)."),M6o=l(),at=a("div"),v(Ty.$$.fragment),E6o=l(),Zie=a("p"),C6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w6o=l(),Si=a("p"),A6o=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),y6o=o("not"),L6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=a("a"),x6o=o("from_pretrained()"),$6o=o(" to load the model weights."),k6o=l(),v(o2.$$.fragment),S6o=l(),Ze=a("div"),v(My.$$.fragment),R6o=l(),ode=a("p"),B6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P6o=l(),La=a("p"),I6o=o("The model class to instantiate is selected based on the "),rde=a("code"),q6o=o("model_type"),N6o=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),G6o=o("pretrained_model_name_or_path"),O6o=o(":"),V6o=l(),q=a("ul"),r2=a("li"),nde=a("strong"),X6o=o("albert"),z6o=o(" \u2014 "),Mj=a("a"),Q6o=o("AlbertForSequenceClassification"),W6o=o(" (ALBERT model)"),H6o=l(),t2=a("li"),sde=a("strong"),U6o=o("bart"),J6o=o(" \u2014 "),Ej=a("a"),Y6o=o("BartForSequenceClassification"),K6o=o(" (BART model)"),Z6o=l(),a2=a("li"),lde=a("strong"),eyo=o("bert"),oyo=o(" \u2014 "),Cj=a("a"),ryo=o("BertForSequenceClassification"),tyo=o(" (BERT model)"),ayo=l(),n2=a("li"),ide=a("strong"),nyo=o("big_bird"),syo=o(" \u2014 "),wj=a("a"),lyo=o("BigBirdForSequenceClassification"),iyo=o(" (BigBird model)"),dyo=l(),s2=a("li"),dde=a("strong"),cyo=o("bigbird_pegasus"),myo=o(" \u2014 "),Aj=a("a"),fyo=o("BigBirdPegasusForSequenceClassification"),gyo=o(" (BigBirdPegasus model)"),hyo=l(),l2=a("li"),cde=a("strong"),uyo=o("camembert"),pyo=o(" \u2014 "),yj=a("a"),_yo=o("CamembertForSequenceClassification"),byo=o(" (CamemBERT model)"),Fyo=l(),i2=a("li"),mde=a("strong"),vyo=o("canine"),Tyo=o(" \u2014 "),Lj=a("a"),Myo=o("CanineForSequenceClassification"),Eyo=o(" (Canine model)"),Cyo=l(),d2=a("li"),fde=a("strong"),wyo=o("convbert"),Ayo=o(" \u2014 "),xj=a("a"),yyo=o("ConvBertForSequenceClassification"),Lyo=o(" (ConvBERT model)"),xyo=l(),c2=a("li"),gde=a("strong"),$yo=o("ctrl"),kyo=o(" \u2014 "),$j=a("a"),Syo=o("CTRLForSequenceClassification"),Ryo=o(" (CTRL model)"),Byo=l(),m2=a("li"),hde=a("strong"),Pyo=o("data2vec-text"),Iyo=o(" \u2014 "),kj=a("a"),qyo=o("Data2VecTextForSequenceClassification"),Nyo=o(" (Data2VecText model)"),jyo=l(),f2=a("li"),ude=a("strong"),Dyo=o("deberta"),Gyo=o(" \u2014 "),Sj=a("a"),Oyo=o("DebertaForSequenceClassification"),Vyo=o(" (DeBERTa model)"),Xyo=l(),g2=a("li"),pde=a("strong"),zyo=o("deberta-v2"),Qyo=o(" \u2014 "),Rj=a("a"),Wyo=o("DebertaV2ForSequenceClassification"),Hyo=o(" (DeBERTa-v2 model)"),Uyo=l(),h2=a("li"),_de=a("strong"),Jyo=o("distilbert"),Yyo=o(" \u2014 "),Bj=a("a"),Kyo=o("DistilBertForSequenceClassification"),Zyo=o(" (DistilBERT model)"),eLo=l(),u2=a("li"),bde=a("strong"),oLo=o("electra"),rLo=o(" \u2014 "),Pj=a("a"),tLo=o("ElectraForSequenceClassification"),aLo=o(" (ELECTRA model)"),nLo=l(),p2=a("li"),Fde=a("strong"),sLo=o("flaubert"),lLo=o(" \u2014 "),Ij=a("a"),iLo=o("FlaubertForSequenceClassification"),dLo=o(" (FlauBERT model)"),cLo=l(),_2=a("li"),vde=a("strong"),mLo=o("fnet"),fLo=o(" \u2014 "),qj=a("a"),gLo=o("FNetForSequenceClassification"),hLo=o(" (FNet model)"),uLo=l(),b2=a("li"),Tde=a("strong"),pLo=o("funnel"),_Lo=o(" \u2014 "),Nj=a("a"),bLo=o("FunnelForSequenceClassification"),FLo=o(" (Funnel Transformer model)"),vLo=l(),F2=a("li"),Mde=a("strong"),TLo=o("gpt2"),MLo=o(" \u2014 "),jj=a("a"),ELo=o("GPT2ForSequenceClassification"),CLo=o(" (OpenAI GPT-2 model)"),wLo=l(),v2=a("li"),Ede=a("strong"),ALo=o("gpt_neo"),yLo=o(" \u2014 "),Dj=a("a"),LLo=o("GPTNeoForSequenceClassification"),xLo=o(" (GPT Neo model)"),$Lo=l(),T2=a("li"),Cde=a("strong"),kLo=o("gptj"),SLo=o(" \u2014 "),Gj=a("a"),RLo=o("GPTJForSequenceClassification"),BLo=o(" (GPT-J model)"),PLo=l(),M2=a("li"),wde=a("strong"),ILo=o("ibert"),qLo=o(" \u2014 "),Oj=a("a"),NLo=o("IBertForSequenceClassification"),jLo=o(" (I-BERT model)"),DLo=l(),E2=a("li"),Ade=a("strong"),GLo=o("layoutlm"),OLo=o(" \u2014 "),Vj=a("a"),VLo=o("LayoutLMForSequenceClassification"),XLo=o(" (LayoutLM model)"),zLo=l(),C2=a("li"),yde=a("strong"),QLo=o("layoutlmv2"),WLo=o(" \u2014 "),Xj=a("a"),HLo=o("LayoutLMv2ForSequenceClassification"),ULo=o(" (LayoutLMv2 model)"),JLo=l(),w2=a("li"),Lde=a("strong"),YLo=o("led"),KLo=o(" \u2014 "),zj=a("a"),ZLo=o("LEDForSequenceClassification"),e8o=o(" (LED model)"),o8o=l(),A2=a("li"),xde=a("strong"),r8o=o("longformer"),t8o=o(" \u2014 "),Qj=a("a"),a8o=o("LongformerForSequenceClassification"),n8o=o(" (Longformer model)"),s8o=l(),y2=a("li"),$de=a("strong"),l8o=o("mbart"),i8o=o(" \u2014 "),Wj=a("a"),d8o=o("MBartForSequenceClassification"),c8o=o(" (mBART model)"),m8o=l(),L2=a("li"),kde=a("strong"),f8o=o("megatron-bert"),g8o=o(" \u2014 "),Hj=a("a"),h8o=o("MegatronBertForSequenceClassification"),u8o=o(" (MegatronBert model)"),p8o=l(),x2=a("li"),Sde=a("strong"),_8o=o("mobilebert"),b8o=o(" \u2014 "),Uj=a("a"),F8o=o("MobileBertForSequenceClassification"),v8o=o(" (MobileBERT model)"),T8o=l(),$2=a("li"),Rde=a("strong"),M8o=o("mpnet"),E8o=o(" \u2014 "),Jj=a("a"),C8o=o("MPNetForSequenceClassification"),w8o=o(" (MPNet model)"),A8o=l(),k2=a("li"),Bde=a("strong"),y8o=o("nystromformer"),L8o=o(" \u2014 "),Yj=a("a"),x8o=o("NystromformerForSequenceClassification"),$8o=o(" (Nystromformer model)"),k8o=l(),S2=a("li"),Pde=a("strong"),S8o=o("openai-gpt"),R8o=o(" \u2014 "),Kj=a("a"),B8o=o("OpenAIGPTForSequenceClassification"),P8o=o(" (OpenAI GPT model)"),I8o=l(),R2=a("li"),Ide=a("strong"),q8o=o("perceiver"),N8o=o(" \u2014 "),Zj=a("a"),j8o=o("PerceiverForSequenceClassification"),D8o=o(" (Perceiver model)"),G8o=l(),B2=a("li"),qde=a("strong"),O8o=o("plbart"),V8o=o(" \u2014 "),eD=a("a"),X8o=o("PLBartForSequenceClassification"),z8o=o(" (PLBart model)"),Q8o=l(),P2=a("li"),Nde=a("strong"),W8o=o("qdqbert"),H8o=o(" \u2014 "),oD=a("a"),U8o=o("QDQBertForSequenceClassification"),J8o=o(" (QDQBert model)"),Y8o=l(),I2=a("li"),jde=a("strong"),K8o=o("reformer"),Z8o=o(" \u2014 "),rD=a("a"),e7o=o("ReformerForSequenceClassification"),o7o=o(" (Reformer model)"),r7o=l(),q2=a("li"),Dde=a("strong"),t7o=o("rembert"),a7o=o(" \u2014 "),tD=a("a"),n7o=o("RemBertForSequenceClassification"),s7o=o(" (RemBERT model)"),l7o=l(),N2=a("li"),Gde=a("strong"),i7o=o("roberta"),d7o=o(" \u2014 "),aD=a("a"),c7o=o("RobertaForSequenceClassification"),m7o=o(" (RoBERTa model)"),f7o=l(),j2=a("li"),Ode=a("strong"),g7o=o("roformer"),h7o=o(" \u2014 "),nD=a("a"),u7o=o("RoFormerForSequenceClassification"),p7o=o(" (RoFormer model)"),_7o=l(),D2=a("li"),Vde=a("strong"),b7o=o("squeezebert"),F7o=o(" \u2014 "),sD=a("a"),v7o=o("SqueezeBertForSequenceClassification"),T7o=o(" (SqueezeBERT model)"),M7o=l(),G2=a("li"),Xde=a("strong"),E7o=o("tapas"),C7o=o(" \u2014 "),lD=a("a"),w7o=o("TapasForSequenceClassification"),A7o=o(" (TAPAS model)"),y7o=l(),O2=a("li"),zde=a("strong"),L7o=o("tapex"),x7o=o(" \u2014 "),iD=a("a"),$7o=o("BartForSequenceClassification"),k7o=o(" (TAPEX model)"),S7o=l(),V2=a("li"),Qde=a("strong"),R7o=o("transfo-xl"),B7o=o(" \u2014 "),dD=a("a"),P7o=o("TransfoXLForSequenceClassification"),I7o=o(" (Transformer-XL model)"),q7o=l(),X2=a("li"),Wde=a("strong"),N7o=o("xlm"),j7o=o(" \u2014 "),cD=a("a"),D7o=o("XLMForSequenceClassification"),G7o=o(" (XLM model)"),O7o=l(),z2=a("li"),Hde=a("strong"),V7o=o("xlm-roberta"),X7o=o(" \u2014 "),mD=a("a"),z7o=o("XLMRobertaForSequenceClassification"),Q7o=o(" (XLM-RoBERTa model)"),W7o=l(),Q2=a("li"),Ude=a("strong"),H7o=o("xlm-roberta-xl"),U7o=o(" \u2014 "),fD=a("a"),J7o=o("XLMRobertaXLForSequenceClassification"),Y7o=o(" (XLM-RoBERTa-XL model)"),K7o=l(),W2=a("li"),Jde=a("strong"),Z7o=o("xlnet"),exo=o(" \u2014 "),gD=a("a"),oxo=o("XLNetForSequenceClassification"),rxo=o(" (XLNet model)"),txo=l(),H2=a("li"),Yde=a("strong"),axo=o("yoso"),nxo=o(" \u2014 "),hD=a("a"),sxo=o("YosoForSequenceClassification"),lxo=o(" (YOSO model)"),ixo=l(),U2=a("p"),dxo=o("The model is set in evaluation mode by default using "),Kde=a("code"),cxo=o("model.eval()"),mxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=a("code"),fxo=o("model.train()"),gxo=l(),v(J2.$$.fragment),$Be=l(),Ri=a("h2"),Y2=a("a"),ece=a("span"),v(Ey.$$.fragment),hxo=l(),oce=a("span"),uxo=o("AutoModelForMultipleChoice"),kBe=l(),Bo=a("div"),v(Cy.$$.fragment),pxo=l(),Bi=a("p"),_xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uD=a("a"),bxo=o("from_pretrained()"),Fxo=o(" class method or the "),pD=a("a"),vxo=o("from_config()"),Txo=o(` class
method.`),Mxo=l(),wy=a("p"),Exo=o("This class cannot be instantiated directly using "),rce=a("code"),Cxo=o("__init__()"),wxo=o(" (throws an error)."),Axo=l(),nt=a("div"),v(Ay.$$.fragment),yxo=l(),tce=a("p"),Lxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xxo=l(),Pi=a("p"),$xo=o(`Note:
Loading a model from its configuration file does `),ace=a("strong"),kxo=o("not"),Sxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),Rxo=o("from_pretrained()"),Bxo=o(" to load the model weights."),Pxo=l(),v(K2.$$.fragment),Ixo=l(),eo=a("div"),v(yy.$$.fragment),qxo=l(),nce=a("p"),Nxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jxo=l(),xa=a("p"),Dxo=o("The model class to instantiate is selected based on the "),sce=a("code"),Gxo=o("model_type"),Oxo=o(` property of the config object (either
passed as an argument or loaded from `),lce=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(":"),Wxo=l(),Y=a("ul"),Z2=a("li"),dce=a("strong"),Hxo=o("albert"),Uxo=o(" \u2014 "),bD=a("a"),Jxo=o("AlbertForMultipleChoice"),Yxo=o(" (ALBERT model)"),Kxo=l(),eF=a("li"),cce=a("strong"),Zxo=o("bert"),e9o=o(" \u2014 "),FD=a("a"),o9o=o("BertForMultipleChoice"),r9o=o(" (BERT model)"),t9o=l(),oF=a("li"),mce=a("strong"),a9o=o("big_bird"),n9o=o(" \u2014 "),vD=a("a"),s9o=o("BigBirdForMultipleChoice"),l9o=o(" (BigBird model)"),i9o=l(),rF=a("li"),fce=a("strong"),d9o=o("camembert"),c9o=o(" \u2014 "),TD=a("a"),m9o=o("CamembertForMultipleChoice"),f9o=o(" (CamemBERT model)"),g9o=l(),tF=a("li"),gce=a("strong"),h9o=o("canine"),u9o=o(" \u2014 "),MD=a("a"),p9o=o("CanineForMultipleChoice"),_9o=o(" (Canine model)"),b9o=l(),aF=a("li"),hce=a("strong"),F9o=o("convbert"),v9o=o(" \u2014 "),ED=a("a"),T9o=o("ConvBertForMultipleChoice"),M9o=o(" (ConvBERT model)"),E9o=l(),nF=a("li"),uce=a("strong"),C9o=o("data2vec-text"),w9o=o(" \u2014 "),CD=a("a"),A9o=o("Data2VecTextForMultipleChoice"),y9o=o(" (Data2VecText model)"),L9o=l(),sF=a("li"),pce=a("strong"),x9o=o("distilbert"),$9o=o(" \u2014 "),wD=a("a"),k9o=o("DistilBertForMultipleChoice"),S9o=o(" (DistilBERT model)"),R9o=l(),lF=a("li"),_ce=a("strong"),B9o=o("electra"),P9o=o(" \u2014 "),AD=a("a"),I9o=o("ElectraForMultipleChoice"),q9o=o(" (ELECTRA model)"),N9o=l(),iF=a("li"),bce=a("strong"),j9o=o("flaubert"),D9o=o(" \u2014 "),yD=a("a"),G9o=o("FlaubertForMultipleChoice"),O9o=o(" (FlauBERT model)"),V9o=l(),dF=a("li"),Fce=a("strong"),X9o=o("fnet"),z9o=o(" \u2014 "),LD=a("a"),Q9o=o("FNetForMultipleChoice"),W9o=o(" (FNet model)"),H9o=l(),cF=a("li"),vce=a("strong"),U9o=o("funnel"),J9o=o(" \u2014 "),xD=a("a"),Y9o=o("FunnelForMultipleChoice"),K9o=o(" (Funnel Transformer model)"),Z9o=l(),mF=a("li"),Tce=a("strong"),e$o=o("ibert"),o$o=o(" \u2014 "),$D=a("a"),r$o=o("IBertForMultipleChoice"),t$o=o(" (I-BERT model)"),a$o=l(),fF=a("li"),Mce=a("strong"),n$o=o("longformer"),s$o=o(" \u2014 "),kD=a("a"),l$o=o("LongformerForMultipleChoice"),i$o=o(" (Longformer model)"),d$o=l(),gF=a("li"),Ece=a("strong"),c$o=o("megatron-bert"),m$o=o(" \u2014 "),SD=a("a"),f$o=o("MegatronBertForMultipleChoice"),g$o=o(" (MegatronBert model)"),h$o=l(),hF=a("li"),Cce=a("strong"),u$o=o("mobilebert"),p$o=o(" \u2014 "),RD=a("a"),_$o=o("MobileBertForMultipleChoice"),b$o=o(" (MobileBERT model)"),F$o=l(),uF=a("li"),wce=a("strong"),v$o=o("mpnet"),T$o=o(" \u2014 "),BD=a("a"),M$o=o("MPNetForMultipleChoice"),E$o=o(" (MPNet model)"),C$o=l(),pF=a("li"),Ace=a("strong"),w$o=o("nystromformer"),A$o=o(" \u2014 "),PD=a("a"),y$o=o("NystromformerForMultipleChoice"),L$o=o(" (Nystromformer model)"),x$o=l(),_F=a("li"),yce=a("strong"),$$o=o("qdqbert"),k$o=o(" \u2014 "),ID=a("a"),S$o=o("QDQBertForMultipleChoice"),R$o=o(" (QDQBert model)"),B$o=l(),bF=a("li"),Lce=a("strong"),P$o=o("rembert"),I$o=o(" \u2014 "),qD=a("a"),q$o=o("RemBertForMultipleChoice"),N$o=o(" (RemBERT model)"),j$o=l(),FF=a("li"),xce=a("strong"),D$o=o("roberta"),G$o=o(" \u2014 "),ND=a("a"),O$o=o("RobertaForMultipleChoice"),V$o=o(" (RoBERTa model)"),X$o=l(),vF=a("li"),$ce=a("strong"),z$o=o("roformer"),Q$o=o(" \u2014 "),jD=a("a"),W$o=o("RoFormerForMultipleChoice"),H$o=o(" (RoFormer model)"),U$o=l(),TF=a("li"),kce=a("strong"),J$o=o("squeezebert"),Y$o=o(" \u2014 "),DD=a("a"),K$o=o("SqueezeBertForMultipleChoice"),Z$o=o(" (SqueezeBERT model)"),eko=l(),MF=a("li"),Sce=a("strong"),oko=o("xlm"),rko=o(" \u2014 "),GD=a("a"),tko=o("XLMForMultipleChoice"),ako=o(" (XLM model)"),nko=l(),EF=a("li"),Rce=a("strong"),sko=o("xlm-roberta"),lko=o(" \u2014 "),OD=a("a"),iko=o("XLMRobertaForMultipleChoice"),dko=o(" (XLM-RoBERTa model)"),cko=l(),CF=a("li"),Bce=a("strong"),mko=o("xlm-roberta-xl"),fko=o(" \u2014 "),VD=a("a"),gko=o("XLMRobertaXLForMultipleChoice"),hko=o(" (XLM-RoBERTa-XL model)"),uko=l(),wF=a("li"),Pce=a("strong"),pko=o("xlnet"),_ko=o(" \u2014 "),XD=a("a"),bko=o("XLNetForMultipleChoice"),Fko=o(" (XLNet model)"),vko=l(),AF=a("li"),Ice=a("strong"),Tko=o("yoso"),Mko=o(" \u2014 "),zD=a("a"),Eko=o("YosoForMultipleChoice"),Cko=o(" (YOSO model)"),wko=l(),yF=a("p"),Ako=o("The model is set in evaluation mode by default using "),qce=a("code"),yko=o("model.eval()"),Lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),xko=o("model.train()"),$ko=l(),v(LF.$$.fragment),SBe=l(),Ii=a("h2"),xF=a("a"),jce=a("span"),v(Ly.$$.fragment),kko=l(),Dce=a("span"),Sko=o("AutoModelForNextSentencePrediction"),RBe=l(),Po=a("div"),v(xy.$$.fragment),Rko=l(),qi=a("p"),Bko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QD=a("a"),Pko=o("from_pretrained()"),Iko=o(" class method or the "),WD=a("a"),qko=o("from_config()"),Nko=o(` class
method.`),jko=l(),$y=a("p"),Dko=o("This class cannot be instantiated directly using "),Gce=a("code"),Gko=o("__init__()"),Oko=o(" (throws an error)."),Vko=l(),st=a("div"),v(ky.$$.fragment),Xko=l(),Oce=a("p"),zko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qko=l(),Ni=a("p"),Wko=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),Hko=o("not"),Uko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Jko=o("from_pretrained()"),Yko=o(" to load the model weights."),Kko=l(),v($F.$$.fragment),Zko=l(),oo=a("div"),v(Sy.$$.fragment),eSo=l(),Xce=a("p"),oSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rSo=l(),$a=a("p"),tSo=o("The model class to instantiate is selected based on the "),zce=a("code"),aSo=o("model_type"),nSo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),sSo=o("pretrained_model_name_or_path"),lSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),iSo=o("pretrained_model_name_or_path"),dSo=o(":"),cSo=l(),Ur=a("ul"),kF=a("li"),Hce=a("strong"),mSo=o("bert"),fSo=o(" \u2014 "),UD=a("a"),gSo=o("BertForNextSentencePrediction"),hSo=o(" (BERT model)"),uSo=l(),SF=a("li"),Uce=a("strong"),pSo=o("fnet"),_So=o(" \u2014 "),JD=a("a"),bSo=o("FNetForNextSentencePrediction"),FSo=o(" (FNet model)"),vSo=l(),RF=a("li"),Jce=a("strong"),TSo=o("megatron-bert"),MSo=o(" \u2014 "),YD=a("a"),ESo=o("MegatronBertForNextSentencePrediction"),CSo=o(" (MegatronBert model)"),wSo=l(),BF=a("li"),Yce=a("strong"),ASo=o("mobilebert"),ySo=o(" \u2014 "),KD=a("a"),LSo=o("MobileBertForNextSentencePrediction"),xSo=o(" (MobileBERT model)"),$So=l(),PF=a("li"),Kce=a("strong"),kSo=o("qdqbert"),SSo=o(" \u2014 "),ZD=a("a"),RSo=o("QDQBertForNextSentencePrediction"),BSo=o(" (QDQBert model)"),PSo=l(),IF=a("p"),ISo=o("The model is set in evaluation mode by default using "),Zce=a("code"),qSo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),jSo=o("model.train()"),DSo=l(),v(qF.$$.fragment),BBe=l(),ji=a("h2"),NF=a("a"),ome=a("span"),v(Ry.$$.fragment),GSo=l(),rme=a("span"),OSo=o("AutoModelForTokenClassification"),PBe=l(),Io=a("div"),v(By.$$.fragment),VSo=l(),Di=a("p"),XSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eG=a("a"),zSo=o("from_pretrained()"),QSo=o(" class method or the "),oG=a("a"),WSo=o("from_config()"),HSo=o(` class
method.`),USo=l(),Py=a("p"),JSo=o("This class cannot be instantiated directly using "),tme=a("code"),YSo=o("__init__()"),KSo=o(" (throws an error)."),ZSo=l(),lt=a("div"),v(Iy.$$.fragment),eRo=l(),ame=a("p"),oRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rRo=l(),Gi=a("p"),tRo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),aRo=o("not"),nRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=a("a"),sRo=o("from_pretrained()"),lRo=o(" to load the model weights."),iRo=l(),v(jF.$$.fragment),dRo=l(),ro=a("div"),v(qy.$$.fragment),cRo=l(),sme=a("p"),mRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fRo=l(),ka=a("p"),gRo=o("The model class to instantiate is selected based on the "),lme=a("code"),hRo=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),pRo=o("pretrained_model_name_or_path"),_Ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),bRo=o("pretrained_model_name_or_path"),FRo=o(":"),vRo=l(),U=a("ul"),DF=a("li"),cme=a("strong"),TRo=o("albert"),MRo=o(" \u2014 "),tG=a("a"),ERo=o("AlbertForTokenClassification"),CRo=o(" (ALBERT model)"),wRo=l(),GF=a("li"),mme=a("strong"),ARo=o("bert"),yRo=o(" \u2014 "),aG=a("a"),LRo=o("BertForTokenClassification"),xRo=o(" (BERT model)"),$Ro=l(),OF=a("li"),fme=a("strong"),kRo=o("big_bird"),SRo=o(" \u2014 "),nG=a("a"),RRo=o("BigBirdForTokenClassification"),BRo=o(" (BigBird model)"),PRo=l(),VF=a("li"),gme=a("strong"),IRo=o("camembert"),qRo=o(" \u2014 "),sG=a("a"),NRo=o("CamembertForTokenClassification"),jRo=o(" (CamemBERT model)"),DRo=l(),XF=a("li"),hme=a("strong"),GRo=o("canine"),ORo=o(" \u2014 "),lG=a("a"),VRo=o("CanineForTokenClassification"),XRo=o(" (Canine model)"),zRo=l(),zF=a("li"),ume=a("strong"),QRo=o("convbert"),WRo=o(" \u2014 "),iG=a("a"),HRo=o("ConvBertForTokenClassification"),URo=o(" (ConvBERT model)"),JRo=l(),QF=a("li"),pme=a("strong"),YRo=o("data2vec-text"),KRo=o(" \u2014 "),dG=a("a"),ZRo=o("Data2VecTextForTokenClassification"),eBo=o(" (Data2VecText model)"),oBo=l(),WF=a("li"),_me=a("strong"),rBo=o("deberta"),tBo=o(" \u2014 "),cG=a("a"),aBo=o("DebertaForTokenClassification"),nBo=o(" (DeBERTa model)"),sBo=l(),HF=a("li"),bme=a("strong"),lBo=o("deberta-v2"),iBo=o(" \u2014 "),mG=a("a"),dBo=o("DebertaV2ForTokenClassification"),cBo=o(" (DeBERTa-v2 model)"),mBo=l(),UF=a("li"),Fme=a("strong"),fBo=o("distilbert"),gBo=o(" \u2014 "),fG=a("a"),hBo=o("DistilBertForTokenClassification"),uBo=o(" (DistilBERT model)"),pBo=l(),JF=a("li"),vme=a("strong"),_Bo=o("electra"),bBo=o(" \u2014 "),gG=a("a"),FBo=o("ElectraForTokenClassification"),vBo=o(" (ELECTRA model)"),TBo=l(),YF=a("li"),Tme=a("strong"),MBo=o("flaubert"),EBo=o(" \u2014 "),hG=a("a"),CBo=o("FlaubertForTokenClassification"),wBo=o(" (FlauBERT model)"),ABo=l(),KF=a("li"),Mme=a("strong"),yBo=o("fnet"),LBo=o(" \u2014 "),uG=a("a"),xBo=o("FNetForTokenClassification"),$Bo=o(" (FNet model)"),kBo=l(),ZF=a("li"),Eme=a("strong"),SBo=o("funnel"),RBo=o(" \u2014 "),pG=a("a"),BBo=o("FunnelForTokenClassification"),PBo=o(" (Funnel Transformer model)"),IBo=l(),ev=a("li"),Cme=a("strong"),qBo=o("gpt2"),NBo=o(" \u2014 "),_G=a("a"),jBo=o("GPT2ForTokenClassification"),DBo=o(" (OpenAI GPT-2 model)"),GBo=l(),ov=a("li"),wme=a("strong"),OBo=o("ibert"),VBo=o(" \u2014 "),bG=a("a"),XBo=o("IBertForTokenClassification"),zBo=o(" (I-BERT model)"),QBo=l(),rv=a("li"),Ame=a("strong"),WBo=o("layoutlm"),HBo=o(" \u2014 "),FG=a("a"),UBo=o("LayoutLMForTokenClassification"),JBo=o(" (LayoutLM model)"),YBo=l(),tv=a("li"),yme=a("strong"),KBo=o("layoutlmv2"),ZBo=o(" \u2014 "),vG=a("a"),ePo=o("LayoutLMv2ForTokenClassification"),oPo=o(" (LayoutLMv2 model)"),rPo=l(),av=a("li"),Lme=a("strong"),tPo=o("longformer"),aPo=o(" \u2014 "),TG=a("a"),nPo=o("LongformerForTokenClassification"),sPo=o(" (Longformer model)"),lPo=l(),nv=a("li"),xme=a("strong"),iPo=o("megatron-bert"),dPo=o(" \u2014 "),MG=a("a"),cPo=o("MegatronBertForTokenClassification"),mPo=o(" (MegatronBert model)"),fPo=l(),sv=a("li"),$me=a("strong"),gPo=o("mobilebert"),hPo=o(" \u2014 "),EG=a("a"),uPo=o("MobileBertForTokenClassification"),pPo=o(" (MobileBERT model)"),_Po=l(),lv=a("li"),kme=a("strong"),bPo=o("mpnet"),FPo=o(" \u2014 "),CG=a("a"),vPo=o("MPNetForTokenClassification"),TPo=o(" (MPNet model)"),MPo=l(),iv=a("li"),Sme=a("strong"),EPo=o("nystromformer"),CPo=o(" \u2014 "),wG=a("a"),wPo=o("NystromformerForTokenClassification"),APo=o(" (Nystromformer model)"),yPo=l(),dv=a("li"),Rme=a("strong"),LPo=o("qdqbert"),xPo=o(" \u2014 "),AG=a("a"),$Po=o("QDQBertForTokenClassification"),kPo=o(" (QDQBert model)"),SPo=l(),cv=a("li"),Bme=a("strong"),RPo=o("rembert"),BPo=o(" \u2014 "),yG=a("a"),PPo=o("RemBertForTokenClassification"),IPo=o(" (RemBERT model)"),qPo=l(),mv=a("li"),Pme=a("strong"),NPo=o("roberta"),jPo=o(" \u2014 "),LG=a("a"),DPo=o("RobertaForTokenClassification"),GPo=o(" (RoBERTa model)"),OPo=l(),fv=a("li"),Ime=a("strong"),VPo=o("roformer"),XPo=o(" \u2014 "),xG=a("a"),zPo=o("RoFormerForTokenClassification"),QPo=o(" (RoFormer model)"),WPo=l(),gv=a("li"),qme=a("strong"),HPo=o("squeezebert"),UPo=o(" \u2014 "),$G=a("a"),JPo=o("SqueezeBertForTokenClassification"),YPo=o(" (SqueezeBERT model)"),KPo=l(),hv=a("li"),Nme=a("strong"),ZPo=o("xlm"),eIo=o(" \u2014 "),kG=a("a"),oIo=o("XLMForTokenClassification"),rIo=o(" (XLM model)"),tIo=l(),uv=a("li"),jme=a("strong"),aIo=o("xlm-roberta"),nIo=o(" \u2014 "),SG=a("a"),sIo=o("XLMRobertaForTokenClassification"),lIo=o(" (XLM-RoBERTa model)"),iIo=l(),pv=a("li"),Dme=a("strong"),dIo=o("xlm-roberta-xl"),cIo=o(" \u2014 "),RG=a("a"),mIo=o("XLMRobertaXLForTokenClassification"),fIo=o(" (XLM-RoBERTa-XL model)"),gIo=l(),_v=a("li"),Gme=a("strong"),hIo=o("xlnet"),uIo=o(" \u2014 "),BG=a("a"),pIo=o("XLNetForTokenClassification"),_Io=o(" (XLNet model)"),bIo=l(),bv=a("li"),Ome=a("strong"),FIo=o("yoso"),vIo=o(" \u2014 "),PG=a("a"),TIo=o("YosoForTokenClassification"),MIo=o(" (YOSO model)"),EIo=l(),Fv=a("p"),CIo=o("The model is set in evaluation mode by default using "),Vme=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),yIo=o("model.train()"),LIo=l(),v(vv.$$.fragment),IBe=l(),Oi=a("h2"),Tv=a("a"),zme=a("span"),v(Ny.$$.fragment),xIo=l(),Qme=a("span"),$Io=o("AutoModelForQuestionAnswering"),qBe=l(),qo=a("div"),v(jy.$$.fragment),kIo=l(),Vi=a("p"),SIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IG=a("a"),RIo=o("from_pretrained()"),BIo=o(" class method or the "),qG=a("a"),PIo=o("from_config()"),IIo=o(` class
method.`),qIo=l(),Dy=a("p"),NIo=o("This class cannot be instantiated directly using "),Wme=a("code"),jIo=o("__init__()"),DIo=o(" (throws an error)."),GIo=l(),it=a("div"),v(Gy.$$.fragment),OIo=l(),Hme=a("p"),VIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XIo=l(),Xi=a("p"),zIo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),QIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),HIo=o("from_pretrained()"),UIo=o(" to load the model weights."),JIo=l(),v(Mv.$$.fragment),YIo=l(),to=a("div"),v(Oy.$$.fragment),KIo=l(),Jme=a("p"),ZIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eqo=l(),Sa=a("p"),oqo=o("The model class to instantiate is selected based on the "),Yme=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),O=a("ul"),Ev=a("li"),efe=a("strong"),dqo=o("albert"),cqo=o(" \u2014 "),jG=a("a"),mqo=o("AlbertForQuestionAnswering"),fqo=o(" (ALBERT model)"),gqo=l(),Cv=a("li"),ofe=a("strong"),hqo=o("bart"),uqo=o(" \u2014 "),DG=a("a"),pqo=o("BartForQuestionAnswering"),_qo=o(" (BART model)"),bqo=l(),wv=a("li"),rfe=a("strong"),Fqo=o("bert"),vqo=o(" \u2014 "),GG=a("a"),Tqo=o("BertForQuestionAnswering"),Mqo=o(" (BERT model)"),Eqo=l(),Av=a("li"),tfe=a("strong"),Cqo=o("big_bird"),wqo=o(" \u2014 "),OG=a("a"),Aqo=o("BigBirdForQuestionAnswering"),yqo=o(" (BigBird model)"),Lqo=l(),yv=a("li"),afe=a("strong"),xqo=o("bigbird_pegasus"),$qo=o(" \u2014 "),VG=a("a"),kqo=o("BigBirdPegasusForQuestionAnswering"),Sqo=o(" (BigBirdPegasus model)"),Rqo=l(),Lv=a("li"),nfe=a("strong"),Bqo=o("camembert"),Pqo=o(" \u2014 "),XG=a("a"),Iqo=o("CamembertForQuestionAnswering"),qqo=o(" (CamemBERT model)"),Nqo=l(),xv=a("li"),sfe=a("strong"),jqo=o("canine"),Dqo=o(" \u2014 "),zG=a("a"),Gqo=o("CanineForQuestionAnswering"),Oqo=o(" (Canine model)"),Vqo=l(),$v=a("li"),lfe=a("strong"),Xqo=o("convbert"),zqo=o(" \u2014 "),QG=a("a"),Qqo=o("ConvBertForQuestionAnswering"),Wqo=o(" (ConvBERT model)"),Hqo=l(),kv=a("li"),ife=a("strong"),Uqo=o("data2vec-text"),Jqo=o(" \u2014 "),WG=a("a"),Yqo=o("Data2VecTextForQuestionAnswering"),Kqo=o(" (Data2VecText model)"),Zqo=l(),Sv=a("li"),dfe=a("strong"),eNo=o("deberta"),oNo=o(" \u2014 "),HG=a("a"),rNo=o("DebertaForQuestionAnswering"),tNo=o(" (DeBERTa model)"),aNo=l(),Rv=a("li"),cfe=a("strong"),nNo=o("deberta-v2"),sNo=o(" \u2014 "),UG=a("a"),lNo=o("DebertaV2ForQuestionAnswering"),iNo=o(" (DeBERTa-v2 model)"),dNo=l(),Bv=a("li"),mfe=a("strong"),cNo=o("distilbert"),mNo=o(" \u2014 "),JG=a("a"),fNo=o("DistilBertForQuestionAnswering"),gNo=o(" (DistilBERT model)"),hNo=l(),Pv=a("li"),ffe=a("strong"),uNo=o("electra"),pNo=o(" \u2014 "),YG=a("a"),_No=o("ElectraForQuestionAnswering"),bNo=o(" (ELECTRA model)"),FNo=l(),Iv=a("li"),gfe=a("strong"),vNo=o("flaubert"),TNo=o(" \u2014 "),KG=a("a"),MNo=o("FlaubertForQuestionAnsweringSimple"),ENo=o(" (FlauBERT model)"),CNo=l(),qv=a("li"),hfe=a("strong"),wNo=o("fnet"),ANo=o(" \u2014 "),ZG=a("a"),yNo=o("FNetForQuestionAnswering"),LNo=o(" (FNet model)"),xNo=l(),Nv=a("li"),ufe=a("strong"),$No=o("funnel"),kNo=o(" \u2014 "),eO=a("a"),SNo=o("FunnelForQuestionAnswering"),RNo=o(" (Funnel Transformer model)"),BNo=l(),jv=a("li"),pfe=a("strong"),PNo=o("gptj"),INo=o(" \u2014 "),oO=a("a"),qNo=o("GPTJForQuestionAnswering"),NNo=o(" (GPT-J model)"),jNo=l(),Dv=a("li"),_fe=a("strong"),DNo=o("ibert"),GNo=o(" \u2014 "),rO=a("a"),ONo=o("IBertForQuestionAnswering"),VNo=o(" (I-BERT model)"),XNo=l(),Gv=a("li"),bfe=a("strong"),zNo=o("layoutlmv2"),QNo=o(" \u2014 "),tO=a("a"),WNo=o("LayoutLMv2ForQuestionAnswering"),HNo=o(" (LayoutLMv2 model)"),UNo=l(),Ov=a("li"),Ffe=a("strong"),JNo=o("led"),YNo=o(" \u2014 "),aO=a("a"),KNo=o("LEDForQuestionAnswering"),ZNo=o(" (LED model)"),ejo=l(),Vv=a("li"),vfe=a("strong"),ojo=o("longformer"),rjo=o(" \u2014 "),nO=a("a"),tjo=o("LongformerForQuestionAnswering"),ajo=o(" (Longformer model)"),njo=l(),Xv=a("li"),Tfe=a("strong"),sjo=o("lxmert"),ljo=o(" \u2014 "),sO=a("a"),ijo=o("LxmertForQuestionAnswering"),djo=o(" (LXMERT model)"),cjo=l(),zv=a("li"),Mfe=a("strong"),mjo=o("mbart"),fjo=o(" \u2014 "),lO=a("a"),gjo=o("MBartForQuestionAnswering"),hjo=o(" (mBART model)"),ujo=l(),Qv=a("li"),Efe=a("strong"),pjo=o("megatron-bert"),_jo=o(" \u2014 "),iO=a("a"),bjo=o("MegatronBertForQuestionAnswering"),Fjo=o(" (MegatronBert model)"),vjo=l(),Wv=a("li"),Cfe=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),dO=a("a"),Ejo=o("MobileBertForQuestionAnswering"),Cjo=o(" (MobileBERT model)"),wjo=l(),Hv=a("li"),wfe=a("strong"),Ajo=o("mpnet"),yjo=o(" \u2014 "),cO=a("a"),Ljo=o("MPNetForQuestionAnswering"),xjo=o(" (MPNet model)"),$jo=l(),Uv=a("li"),Afe=a("strong"),kjo=o("nystromformer"),Sjo=o(" \u2014 "),mO=a("a"),Rjo=o("NystromformerForQuestionAnswering"),Bjo=o(" (Nystromformer model)"),Pjo=l(),Jv=a("li"),yfe=a("strong"),Ijo=o("qdqbert"),qjo=o(" \u2014 "),fO=a("a"),Njo=o("QDQBertForQuestionAnswering"),jjo=o(" (QDQBert model)"),Djo=l(),Yv=a("li"),Lfe=a("strong"),Gjo=o("reformer"),Ojo=o(" \u2014 "),gO=a("a"),Vjo=o("ReformerForQuestionAnswering"),Xjo=o(" (Reformer model)"),zjo=l(),Kv=a("li"),xfe=a("strong"),Qjo=o("rembert"),Wjo=o(" \u2014 "),hO=a("a"),Hjo=o("RemBertForQuestionAnswering"),Ujo=o(" (RemBERT model)"),Jjo=l(),Zv=a("li"),$fe=a("strong"),Yjo=o("roberta"),Kjo=o(" \u2014 "),uO=a("a"),Zjo=o("RobertaForQuestionAnswering"),eDo=o(" (RoBERTa model)"),oDo=l(),e1=a("li"),kfe=a("strong"),rDo=o("roformer"),tDo=o(" \u2014 "),pO=a("a"),aDo=o("RoFormerForQuestionAnswering"),nDo=o(" (RoFormer model)"),sDo=l(),o1=a("li"),Sfe=a("strong"),lDo=o("splinter"),iDo=o(" \u2014 "),_O=a("a"),dDo=o("SplinterForQuestionAnswering"),cDo=o(" (Splinter model)"),mDo=l(),r1=a("li"),Rfe=a("strong"),fDo=o("squeezebert"),gDo=o(" \u2014 "),bO=a("a"),hDo=o("SqueezeBertForQuestionAnswering"),uDo=o(" (SqueezeBERT model)"),pDo=l(),t1=a("li"),Bfe=a("strong"),_Do=o("xlm"),bDo=o(" \u2014 "),FO=a("a"),FDo=o("XLMForQuestionAnsweringSimple"),vDo=o(" (XLM model)"),TDo=l(),a1=a("li"),Pfe=a("strong"),MDo=o("xlm-roberta"),EDo=o(" \u2014 "),vO=a("a"),CDo=o("XLMRobertaForQuestionAnswering"),wDo=o(" (XLM-RoBERTa model)"),ADo=l(),n1=a("li"),Ife=a("strong"),yDo=o("xlm-roberta-xl"),LDo=o(" \u2014 "),TO=a("a"),xDo=o("XLMRobertaXLForQuestionAnswering"),$Do=o(" (XLM-RoBERTa-XL model)"),kDo=l(),s1=a("li"),qfe=a("strong"),SDo=o("xlnet"),RDo=o(" \u2014 "),MO=a("a"),BDo=o("XLNetForQuestionAnsweringSimple"),PDo=o(" (XLNet model)"),IDo=l(),l1=a("li"),Nfe=a("strong"),qDo=o("yoso"),NDo=o(" \u2014 "),EO=a("a"),jDo=o("YosoForQuestionAnswering"),DDo=o(" (YOSO model)"),GDo=l(),i1=a("p"),ODo=o("The model is set in evaluation mode by default using "),jfe=a("code"),VDo=o("model.eval()"),XDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=a("code"),zDo=o("model.train()"),QDo=l(),v(d1.$$.fragment),NBe=l(),zi=a("h2"),c1=a("a"),Gfe=a("span"),v(Vy.$$.fragment),WDo=l(),Ofe=a("span"),HDo=o("AutoModelForTableQuestionAnswering"),jBe=l(),No=a("div"),v(Xy.$$.fragment),UDo=l(),Qi=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CO=a("a"),YDo=o("from_pretrained()"),KDo=o(" class method or the "),wO=a("a"),ZDo=o("from_config()"),eGo=o(` class
method.`),oGo=l(),zy=a("p"),rGo=o("This class cannot be instantiated directly using "),Vfe=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),dt=a("div"),v(Qy.$$.fragment),sGo=l(),Xfe=a("p"),lGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iGo=l(),Wi=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),cGo=o("not"),mGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),fGo=o("from_pretrained()"),gGo=o(" to load the model weights."),hGo=l(),v(m1.$$.fragment),uGo=l(),ao=a("div"),v(Wy.$$.fragment),pGo=l(),Qfe=a("p"),_Go=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bGo=l(),Ra=a("p"),FGo=o("The model class to instantiate is selected based on the "),Wfe=a("code"),vGo=o("model_type"),TGo=o(` property of the config object (either
passed as an argument or loaded from `),Hfe=a("code"),MGo=o("pretrained_model_name_or_path"),EGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(":"),AGo=l(),Jfe=a("ul"),f1=a("li"),Yfe=a("strong"),yGo=o("tapas"),LGo=o(" \u2014 "),yO=a("a"),xGo=o("TapasForQuestionAnswering"),$Go=o(" (TAPAS model)"),kGo=l(),g1=a("p"),SGo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),RGo=o("model.eval()"),BGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),PGo=o("model.train()"),IGo=l(),v(h1.$$.fragment),DBe=l(),Hi=a("h2"),u1=a("a"),ege=a("span"),v(Hy.$$.fragment),qGo=l(),oge=a("span"),NGo=o("AutoModelForImageClassification"),GBe=l(),jo=a("div"),v(Uy.$$.fragment),jGo=l(),Ui=a("p"),DGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LO=a("a"),GGo=o("from_pretrained()"),OGo=o(" class method or the "),xO=a("a"),VGo=o("from_config()"),XGo=o(` class
method.`),zGo=l(),Jy=a("p"),QGo=o("This class cannot be instantiated directly using "),rge=a("code"),WGo=o("__init__()"),HGo=o(" (throws an error)."),UGo=l(),ct=a("div"),v(Yy.$$.fragment),JGo=l(),tge=a("p"),YGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KGo=l(),Ji=a("p"),ZGo=o(`Note:
Loading a model from its configuration file does `),age=a("strong"),eOo=o("not"),oOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),rOo=o("from_pretrained()"),tOo=o(" to load the model weights."),aOo=l(),v(p1.$$.fragment),nOo=l(),no=a("div"),v(Ky.$$.fragment),sOo=l(),nge=a("p"),lOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iOo=l(),Ba=a("p"),dOo=o("The model class to instantiate is selected based on the "),sge=a("code"),cOo=o("model_type"),mOo=o(` property of the config object (either
passed as an argument or loaded from `),lge=a("code"),fOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=a("code"),hOo=o("pretrained_model_name_or_path"),uOo=o(":"),pOo=l(),Fe=a("ul"),_1=a("li"),dge=a("strong"),_Oo=o("beit"),bOo=o(" \u2014 "),kO=a("a"),FOo=o("BeitForImageClassification"),vOo=o(" (BEiT model)"),TOo=l(),b1=a("li"),cge=a("strong"),MOo=o("convnext"),EOo=o(" \u2014 "),SO=a("a"),COo=o("ConvNextForImageClassification"),wOo=o(" (ConvNext model)"),AOo=l(),F1=a("li"),mge=a("strong"),yOo=o("data2vec-vision"),LOo=o(" \u2014 "),RO=a("a"),xOo=o("Data2VecVisionForImageClassification"),$Oo=o(" (Data2VecVision model)"),kOo=l(),xs=a("li"),fge=a("strong"),SOo=o("deit"),ROo=o(" \u2014 "),BO=a("a"),BOo=o("DeiTForImageClassification"),POo=o(" or "),PO=a("a"),IOo=o("DeiTForImageClassificationWithTeacher"),qOo=o(" (DeiT model)"),NOo=l(),v1=a("li"),gge=a("strong"),jOo=o("imagegpt"),DOo=o(" \u2014 "),IO=a("a"),GOo=o("ImageGPTForImageClassification"),OOo=o(" (ImageGPT model)"),VOo=l(),mt=a("li"),hge=a("strong"),XOo=o("perceiver"),zOo=o(" \u2014 "),qO=a("a"),QOo=o("PerceiverForImageClassificationLearned"),WOo=o(" or "),NO=a("a"),HOo=o("PerceiverForImageClassificationFourier"),UOo=o(" or "),jO=a("a"),JOo=o("PerceiverForImageClassificationConvProcessing"),YOo=o(" (Perceiver model)"),KOo=l(),T1=a("li"),uge=a("strong"),ZOo=o("poolformer"),eVo=o(" \u2014 "),DO=a("a"),oVo=o("PoolFormerForImageClassification"),rVo=o(" (PoolFormer model)"),tVo=l(),M1=a("li"),pge=a("strong"),aVo=o("regnet"),nVo=o(" \u2014 "),GO=a("a"),sVo=o("RegNetForImageClassification"),lVo=o(" (RegNet model)"),iVo=l(),E1=a("li"),_ge=a("strong"),dVo=o("resnet"),cVo=o(" \u2014 "),OO=a("a"),mVo=o("ResNetForImageClassification"),fVo=o(" (ResNet model)"),gVo=l(),C1=a("li"),bge=a("strong"),hVo=o("segformer"),uVo=o(" \u2014 "),VO=a("a"),pVo=o("SegformerForImageClassification"),_Vo=o(" (SegFormer model)"),bVo=l(),w1=a("li"),Fge=a("strong"),FVo=o("swin"),vVo=o(" \u2014 "),XO=a("a"),TVo=o("SwinForImageClassification"),MVo=o(" (Swin model)"),EVo=l(),A1=a("li"),vge=a("strong"),CVo=o("van"),wVo=o(" \u2014 "),zO=a("a"),AVo=o("VanForImageClassification"),yVo=o(" (VAN model)"),LVo=l(),y1=a("li"),Tge=a("strong"),xVo=o("vit"),$Vo=o(" \u2014 "),QO=a("a"),kVo=o("ViTForImageClassification"),SVo=o(" (ViT model)"),RVo=l(),L1=a("p"),BVo=o("The model is set in evaluation mode by default using "),Mge=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),qVo=o("model.train()"),NVo=l(),v(x1.$$.fragment),OBe=l(),Yi=a("h2"),$1=a("a"),Cge=a("span"),v(Zy.$$.fragment),jVo=l(),wge=a("span"),DVo=o("AutoModelForVision2Seq"),VBe=l(),Do=a("div"),v(eL.$$.fragment),GVo=l(),Ki=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WO=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),HO=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),oL=a("p"),HVo=o("This class cannot be instantiated directly using "),Age=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),ft=a("div"),v(rL.$$.fragment),KVo=l(),yge=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eXo=l(),Zi=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),v(k1.$$.fragment),lXo=l(),so=a("div"),v(tL.$$.fragment),iXo=l(),xge=a("p"),dXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cXo=l(),Pa=a("p"),mXo=o("The model class to instantiate is selected based on the "),$ge=a("code"),fXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),hXo=o("pretrained_model_name_or_path"),uXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=a("code"),pXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),Rge=a("ul"),S1=a("li"),Bge=a("strong"),FXo=o("vision-encoder-decoder"),vXo=o(" \u2014 "),JO=a("a"),TXo=o("VisionEncoderDecoderModel"),MXo=o(" (Vision Encoder decoder model)"),EXo=l(),R1=a("p"),CXo=o("The model is set in evaluation mode by default using "),Pge=a("code"),wXo=o("model.eval()"),AXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),yXo=o("model.train()"),LXo=l(),v(B1.$$.fragment),XBe=l(),ed=a("h2"),P1=a("a"),qge=a("span"),v(aL.$$.fragment),xXo=l(),Nge=a("span"),$Xo=o("AutoModelForAudioClassification"),zBe=l(),Go=a("div"),v(nL.$$.fragment),kXo=l(),od=a("p"),SXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YO=a("a"),RXo=o("from_pretrained()"),BXo=o(" class method or the "),KO=a("a"),PXo=o("from_config()"),IXo=o(` class
method.`),qXo=l(),sL=a("p"),NXo=o("This class cannot be instantiated directly using "),jge=a("code"),jXo=o("__init__()"),DXo=o(" (throws an error)."),GXo=l(),gt=a("div"),v(lL.$$.fragment),OXo=l(),Dge=a("p"),VXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),XXo=l(),rd=a("p"),zXo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),QXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),HXo=o("from_pretrained()"),UXo=o(" to load the model weights."),JXo=l(),v(I1.$$.fragment),YXo=l(),lo=a("div"),v(iL.$$.fragment),KXo=l(),Oge=a("p"),ZXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ezo=l(),Ia=a("p"),ozo=o("The model class to instantiate is selected based on the "),Vge=a("code"),rzo=o("model_type"),tzo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(":"),izo=l(),Ne=a("ul"),q1=a("li"),Qge=a("strong"),dzo=o("data2vec-audio"),czo=o(" \u2014 "),eV=a("a"),mzo=o("Data2VecAudioForSequenceClassification"),fzo=o(" (Data2VecAudio model)"),gzo=l(),N1=a("li"),Wge=a("strong"),hzo=o("hubert"),uzo=o(" \u2014 "),oV=a("a"),pzo=o("HubertForSequenceClassification"),_zo=o(" (Hubert model)"),bzo=l(),j1=a("li"),Hge=a("strong"),Fzo=o("sew"),vzo=o(" \u2014 "),rV=a("a"),Tzo=o("SEWForSequenceClassification"),Mzo=o(" (SEW model)"),Ezo=l(),D1=a("li"),Uge=a("strong"),Czo=o("sew-d"),wzo=o(" \u2014 "),tV=a("a"),Azo=o("SEWDForSequenceClassification"),yzo=o(" (SEW-D model)"),Lzo=l(),G1=a("li"),Jge=a("strong"),xzo=o("unispeech"),$zo=o(" \u2014 "),aV=a("a"),kzo=o("UniSpeechForSequenceClassification"),Szo=o(" (UniSpeech model)"),Rzo=l(),O1=a("li"),Yge=a("strong"),Bzo=o("unispeech-sat"),Pzo=o(" \u2014 "),nV=a("a"),Izo=o("UniSpeechSatForSequenceClassification"),qzo=o(" (UniSpeechSat model)"),Nzo=l(),V1=a("li"),Kge=a("strong"),jzo=o("wav2vec2"),Dzo=o(" \u2014 "),sV=a("a"),Gzo=o("Wav2Vec2ForSequenceClassification"),Ozo=o(" (Wav2Vec2 model)"),Vzo=l(),X1=a("li"),Zge=a("strong"),Xzo=o("wavlm"),zzo=o(" \u2014 "),lV=a("a"),Qzo=o("WavLMForSequenceClassification"),Wzo=o(" (WavLM model)"),Hzo=l(),z1=a("p"),Uzo=o("The model is set in evaluation mode by default using "),ehe=a("code"),Jzo=o("model.eval()"),Yzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),Kzo=o("model.train()"),Zzo=l(),v(Q1.$$.fragment),QBe=l(),td=a("h2"),W1=a("a"),rhe=a("span"),v(dL.$$.fragment),eQo=l(),the=a("span"),oQo=o("AutoModelForAudioFrameClassification"),WBe=l(),Oo=a("div"),v(cL.$$.fragment),rQo=l(),ad=a("p"),tQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iV=a("a"),aQo=o("from_pretrained()"),nQo=o(" class method or the "),dV=a("a"),sQo=o("from_config()"),lQo=o(` class
method.`),iQo=l(),mL=a("p"),dQo=o("This class cannot be instantiated directly using "),ahe=a("code"),cQo=o("__init__()"),mQo=o(" (throws an error)."),fQo=l(),ht=a("div"),v(fL.$$.fragment),gQo=l(),nhe=a("p"),hQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),uQo=l(),nd=a("p"),pQo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),_Qo=o("not"),bQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),FQo=o("from_pretrained()"),vQo=o(" to load the model weights."),TQo=l(),v(H1.$$.fragment),MQo=l(),io=a("div"),v(gL.$$.fragment),EQo=l(),lhe=a("p"),CQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wQo=l(),qa=a("p"),AQo=o("The model class to instantiate is selected based on the "),ihe=a("code"),yQo=o("model_type"),LQo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),xQo=o("pretrained_model_name_or_path"),$Qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),kQo=o("pretrained_model_name_or_path"),SQo=o(":"),RQo=l(),Na=a("ul"),U1=a("li"),mhe=a("strong"),BQo=o("data2vec-audio"),PQo=o(" \u2014 "),mV=a("a"),IQo=o("Data2VecAudioForAudioFrameClassification"),qQo=o(" (Data2VecAudio model)"),NQo=l(),J1=a("li"),fhe=a("strong"),jQo=o("unispeech-sat"),DQo=o(" \u2014 "),fV=a("a"),GQo=o("UniSpeechSatForAudioFrameClassification"),OQo=o(" (UniSpeechSat model)"),VQo=l(),Y1=a("li"),ghe=a("strong"),XQo=o("wav2vec2"),zQo=o(" \u2014 "),gV=a("a"),QQo=o("Wav2Vec2ForAudioFrameClassification"),WQo=o(" (Wav2Vec2 model)"),HQo=l(),K1=a("li"),hhe=a("strong"),UQo=o("wavlm"),JQo=o(" \u2014 "),hV=a("a"),YQo=o("WavLMForAudioFrameClassification"),KQo=o(" (WavLM model)"),ZQo=l(),Z1=a("p"),eWo=o("The model is set in evaluation mode by default using "),uhe=a("code"),oWo=o("model.eval()"),rWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),tWo=o("model.train()"),aWo=l(),v(eT.$$.fragment),HBe=l(),sd=a("h2"),oT=a("a"),_he=a("span"),v(hL.$$.fragment),nWo=l(),bhe=a("span"),sWo=o("AutoModelForCTC"),UBe=l(),Vo=a("div"),v(uL.$$.fragment),lWo=l(),ld=a("p"),iWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uV=a("a"),dWo=o("from_pretrained()"),cWo=o(" class method or the "),pV=a("a"),mWo=o("from_config()"),fWo=o(` class
method.`),gWo=l(),pL=a("p"),hWo=o("This class cannot be instantiated directly using "),Fhe=a("code"),uWo=o("__init__()"),pWo=o(" (throws an error)."),_Wo=l(),ut=a("div"),v(_L.$$.fragment),bWo=l(),vhe=a("p"),FWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vWo=l(),id=a("p"),TWo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),MWo=o("not"),EWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),CWo=o("from_pretrained()"),wWo=o(" to load the model weights."),AWo=l(),v(rT.$$.fragment),yWo=l(),co=a("div"),v(bL.$$.fragment),LWo=l(),Mhe=a("p"),xWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Wo=l(),ja=a("p"),kWo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),SWo=o("model_type"),RWo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),BWo=o("pretrained_model_name_or_path"),PWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),IWo=o("pretrained_model_name_or_path"),qWo=o(":"),NWo=l(),je=a("ul"),tT=a("li"),Ahe=a("strong"),jWo=o("data2vec-audio"),DWo=o(" \u2014 "),bV=a("a"),GWo=o("Data2VecAudioForCTC"),OWo=o(" (Data2VecAudio model)"),VWo=l(),aT=a("li"),yhe=a("strong"),XWo=o("hubert"),zWo=o(" \u2014 "),FV=a("a"),QWo=o("HubertForCTC"),WWo=o(" (Hubert model)"),HWo=l(),nT=a("li"),Lhe=a("strong"),UWo=o("sew"),JWo=o(" \u2014 "),vV=a("a"),YWo=o("SEWForCTC"),KWo=o(" (SEW model)"),ZWo=l(),sT=a("li"),xhe=a("strong"),eHo=o("sew-d"),oHo=o(" \u2014 "),TV=a("a"),rHo=o("SEWDForCTC"),tHo=o(" (SEW-D model)"),aHo=l(),lT=a("li"),$he=a("strong"),nHo=o("unispeech"),sHo=o(" \u2014 "),MV=a("a"),lHo=o("UniSpeechForCTC"),iHo=o(" (UniSpeech model)"),dHo=l(),iT=a("li"),khe=a("strong"),cHo=o("unispeech-sat"),mHo=o(" \u2014 "),EV=a("a"),fHo=o("UniSpeechSatForCTC"),gHo=o(" (UniSpeechSat model)"),hHo=l(),dT=a("li"),She=a("strong"),uHo=o("wav2vec2"),pHo=o(" \u2014 "),CV=a("a"),_Ho=o("Wav2Vec2ForCTC"),bHo=o(" (Wav2Vec2 model)"),FHo=l(),cT=a("li"),Rhe=a("strong"),vHo=o("wavlm"),THo=o(" \u2014 "),wV=a("a"),MHo=o("WavLMForCTC"),EHo=o(" (WavLM model)"),CHo=l(),mT=a("p"),wHo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),AHo=o("model.eval()"),yHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),LHo=o("model.train()"),xHo=l(),v(fT.$$.fragment),JBe=l(),dd=a("h2"),gT=a("a"),Ihe=a("span"),v(FL.$$.fragment),$Ho=l(),qhe=a("span"),kHo=o("AutoModelForSpeechSeq2Seq"),YBe=l(),Xo=a("div"),v(vL.$$.fragment),SHo=l(),cd=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AV=a("a"),BHo=o("from_pretrained()"),PHo=o(" class method or the "),yV=a("a"),IHo=o("from_config()"),qHo=o(` class
method.`),NHo=l(),TL=a("p"),jHo=o("This class cannot be instantiated directly using "),Nhe=a("code"),DHo=o("__init__()"),GHo=o(" (throws an error)."),OHo=l(),pt=a("div"),v(ML.$$.fragment),VHo=l(),jhe=a("p"),XHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zHo=l(),md=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),Dhe=a("strong"),WHo=o("not"),HHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),UHo=o("from_pretrained()"),JHo=o(" to load the model weights."),YHo=l(),v(hT.$$.fragment),KHo=l(),mo=a("div"),v(EL.$$.fragment),ZHo=l(),Ghe=a("p"),eUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),oUo=l(),Da=a("p"),rUo=o("The model class to instantiate is selected based on the "),Ohe=a("code"),tUo=o("model_type"),aUo=o(` property of the config object (either
passed as an argument or loaded from `),Vhe=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=a("code"),lUo=o("pretrained_model_name_or_path"),iUo=o(":"),dUo=l(),CL=a("ul"),uT=a("li"),zhe=a("strong"),cUo=o("speech-encoder-decoder"),mUo=o(" \u2014 "),xV=a("a"),fUo=o("SpeechEncoderDecoderModel"),gUo=o(" (Speech Encoder decoder model)"),hUo=l(),pT=a("li"),Qhe=a("strong"),uUo=o("speech_to_text"),pUo=o(" \u2014 "),$V=a("a"),_Uo=o("Speech2TextForConditionalGeneration"),bUo=o(" (Speech2Text model)"),FUo=l(),_T=a("p"),vUo=o("The model is set in evaluation mode by default using "),Whe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=a("code"),EUo=o("model.train()"),CUo=l(),v(bT.$$.fragment),KBe=l(),fd=a("h2"),FT=a("a"),Uhe=a("span"),v(wL.$$.fragment),wUo=l(),Jhe=a("span"),AUo=o("AutoModelForAudioXVector"),ZBe=l(),zo=a("div"),v(AL.$$.fragment),yUo=l(),gd=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kV=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),SV=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),yL=a("p"),BUo=o("This class cannot be instantiated directly using "),Yhe=a("code"),PUo=o("__init__()"),IUo=o(" (throws an error)."),qUo=l(),_t=a("div"),v(LL.$$.fragment),NUo=l(),Khe=a("p"),jUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),DUo=l(),hd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),QUo=l(),v(vT.$$.fragment),WUo=l(),fo=a("div"),v(xL.$$.fragment),HUo=l(),eue=a("p"),UUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),JUo=l(),Ga=a("p"),YUo=o("The model class to instantiate is selected based on the "),oue=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),Oa=a("ul"),TT=a("li"),aue=a("strong"),nJo=o("data2vec-audio"),sJo=o(" \u2014 "),BV=a("a"),lJo=o("Data2VecAudioForXVector"),iJo=o(" (Data2VecAudio model)"),dJo=l(),MT=a("li"),nue=a("strong"),cJo=o("unispeech-sat"),mJo=o(" \u2014 "),PV=a("a"),fJo=o("UniSpeechSatForXVector"),gJo=o(" (UniSpeechSat model)"),hJo=l(),ET=a("li"),sue=a("strong"),uJo=o("wav2vec2"),pJo=o(" \u2014 "),IV=a("a"),_Jo=o("Wav2Vec2ForXVector"),bJo=o(" (Wav2Vec2 model)"),FJo=l(),CT=a("li"),lue=a("strong"),vJo=o("wavlm"),TJo=o(" \u2014 "),qV=a("a"),MJo=o("WavLMForXVector"),EJo=o(" (WavLM model)"),CJo=l(),wT=a("p"),wJo=o("The model is set in evaluation mode by default using "),iue=a("code"),AJo=o("model.eval()"),yJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),LJo=o("model.train()"),xJo=l(),v(AT.$$.fragment),ePe=l(),ud=a("h2"),yT=a("a"),cue=a("span"),v($L.$$.fragment),$Jo=l(),mue=a("span"),kJo=o("AutoModelForMaskedImageModeling"),oPe=l(),Qo=a("div"),v(kL.$$.fragment),SJo=l(),pd=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NV=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),jV=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),SL=a("p"),jJo=o("This class cannot be instantiated directly using "),fue=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),bt=a("div"),v(RL.$$.fragment),VJo=l(),gue=a("p"),XJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),zJo=l(),_d=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),v(LT.$$.fragment),KJo=l(),go=a("div"),v(BL.$$.fragment),ZJo=l(),uue=a("p"),eYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oYo=l(),Va=a("p"),rYo=o("The model class to instantiate is selected based on the "),pue=a("code"),tYo=o("model_type"),aYo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),nYo=o("pretrained_model_name_or_path"),sYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(":"),dYo=l(),bd=a("ul"),xT=a("li"),Fue=a("strong"),cYo=o("deit"),mYo=o(" \u2014 "),GV=a("a"),fYo=o("DeiTForMaskedImageModeling"),gYo=o(" (DeiT model)"),hYo=l(),$T=a("li"),vue=a("strong"),uYo=o("swin"),pYo=o(" \u2014 "),OV=a("a"),_Yo=o("SwinForMaskedImageModeling"),bYo=o(" (Swin model)"),FYo=l(),kT=a("li"),Tue=a("strong"),vYo=o("vit"),TYo=o(" \u2014 "),VV=a("a"),MYo=o("ViTForMaskedImageModeling"),EYo=o(" (ViT model)"),CYo=l(),ST=a("p"),wYo=o("The model is set in evaluation mode by default using "),Mue=a("code"),AYo=o("model.eval()"),yYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),LYo=o("model.train()"),xYo=l(),v(RT.$$.fragment),rPe=l(),Fd=a("h2"),BT=a("a"),Cue=a("span"),v(PL.$$.fragment),$Yo=l(),wue=a("span"),kYo=o("AutoModelForObjectDetection"),tPe=l(),Wo=a("div"),v(IL.$$.fragment),SYo=l(),vd=a("p"),RYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XV=a("a"),BYo=o("from_pretrained()"),PYo=o(" class method or the "),zV=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),qL=a("p"),jYo=o("This class cannot be instantiated directly using "),Aue=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),Ft=a("div"),v(NL.$$.fragment),VYo=l(),yue=a("p"),XYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zYo=l(),Td=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),v(PT.$$.fragment),KYo=l(),ho=a("div"),v(jL.$$.fragment),ZYo=l(),xue=a("p"),eKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),oKo=l(),Xa=a("p"),rKo=o("The model class to instantiate is selected based on the "),$ue=a("code"),tKo=o("model_type"),aKo=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),nKo=o("pretrained_model_name_or_path"),sKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(":"),dKo=l(),DL=a("ul"),IT=a("li"),Rue=a("strong"),cKo=o("detr"),mKo=o(" \u2014 "),WV=a("a"),fKo=o("DetrForObjectDetection"),gKo=o(" (DETR model)"),hKo=l(),qT=a("li"),Bue=a("strong"),uKo=o("yolos"),pKo=o(" \u2014 "),HV=a("a"),_Ko=o("YolosForObjectDetection"),bKo=o(" (YOLOS model)"),FKo=l(),NT=a("p"),vKo=o("The model is set in evaluation mode by default using "),Pue=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=a("code"),EKo=o("model.train()"),CKo=l(),v(jT.$$.fragment),aPe=l(),Md=a("h2"),DT=a("a"),que=a("span"),v(GL.$$.fragment),wKo=l(),Nue=a("span"),AKo=o("AutoModelForImageSegmentation"),nPe=l(),Ho=a("div"),v(OL.$$.fragment),yKo=l(),Ed=a("p"),LKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UV=a("a"),xKo=o("from_pretrained()"),$Ko=o(" class method or the "),JV=a("a"),kKo=o("from_config()"),SKo=o(` class
method.`),RKo=l(),VL=a("p"),BKo=o("This class cannot be instantiated directly using "),jue=a("code"),PKo=o("__init__()"),IKo=o(" (throws an error)."),qKo=l(),vt=a("div"),v(XL.$$.fragment),NKo=l(),Due=a("p"),jKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),DKo=l(),Cd=a("p"),GKo=o(`Note:
Loading a model from its configuration file does `),Gue=a("strong"),OKo=o("not"),VKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),XKo=o("from_pretrained()"),zKo=o(" to load the model weights."),QKo=l(),v(GT.$$.fragment),WKo=l(),uo=a("div"),v(zL.$$.fragment),HKo=l(),Oue=a("p"),UKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),JKo=l(),za=a("p"),YKo=o("The model class to instantiate is selected based on the "),Vue=a("code"),KKo=o("model_type"),ZKo=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(":"),aZo=l(),Que=a("ul"),OT=a("li"),Wue=a("strong"),nZo=o("detr"),sZo=o(" \u2014 "),KV=a("a"),lZo=o("DetrForSegmentation"),iZo=o(" (DETR model)"),dZo=l(),VT=a("p"),cZo=o("The model is set in evaluation mode by default using "),Hue=a("code"),mZo=o("model.eval()"),fZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),gZo=o("model.train()"),hZo=l(),v(XT.$$.fragment),sPe=l(),wd=a("h2"),zT=a("a"),Jue=a("span"),v(QL.$$.fragment),uZo=l(),Yue=a("span"),pZo=o("AutoModelForSemanticSegmentation"),lPe=l(),Uo=a("div"),v(WL.$$.fragment),_Zo=l(),Ad=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZV=a("a"),FZo=o("from_pretrained()"),vZo=o(" class method or the "),eX=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),HL=a("p"),CZo=o("This class cannot be instantiated directly using "),Kue=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),Tt=a("div"),v(UL.$$.fragment),LZo=l(),Zue=a("p"),xZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$Zo=l(),yd=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),BZo=o("from_pretrained()"),PZo=o(" to load the model weights."),IZo=l(),v(QT.$$.fragment),qZo=l(),po=a("div"),v(JL.$$.fragment),NZo=l(),ope=a("p"),jZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DZo=l(),Qa=a("p"),GZo=o("The model class to instantiate is selected based on the "),rpe=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),QZo=o("pretrained_model_name_or_path"),WZo=o(":"),HZo=l(),Wa=a("ul"),WT=a("li"),npe=a("strong"),UZo=o("beit"),JZo=o(" \u2014 "),rX=a("a"),YZo=o("BeitForSemanticSegmentation"),KZo=o(" (BEiT model)"),ZZo=l(),HT=a("li"),spe=a("strong"),eer=o("data2vec-vision"),oer=o(" \u2014 "),tX=a("a"),rer=o("Data2VecVisionForSemanticSegmentation"),ter=o(" (Data2VecVision model)"),aer=l(),UT=a("li"),lpe=a("strong"),ner=o("dpt"),ser=o(" \u2014 "),aX=a("a"),ler=o("DPTForSemanticSegmentation"),ier=o(" (DPT model)"),der=l(),JT=a("li"),ipe=a("strong"),cer=o("segformer"),mer=o(" \u2014 "),nX=a("a"),fer=o("SegformerForSemanticSegmentation"),ger=o(" (SegFormer model)"),her=l(),YT=a("p"),uer=o("The model is set in evaluation mode by default using "),dpe=a("code"),per=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),ber=o("model.train()"),Fer=l(),v(KT.$$.fragment),iPe=l(),Ld=a("h2"),ZT=a("a"),mpe=a("span"),v(YL.$$.fragment),ver=l(),fpe=a("span"),Ter=o("AutoModelForInstanceSegmentation"),dPe=l(),Jo=a("div"),v(KL.$$.fragment),Mer=l(),xd=a("p"),Eer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sX=a("a"),Cer=o("from_pretrained()"),wer=o(" class method or the "),lX=a("a"),Aer=o("from_config()"),yer=o(` class
method.`),Ler=l(),ZL=a("p"),xer=o("This class cannot be instantiated directly using "),gpe=a("code"),$er=o("__init__()"),ker=o(" (throws an error)."),Ser=l(),Mt=a("div"),v(e8.$$.fragment),Rer=l(),hpe=a("p"),Ber=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Per=l(),$d=a("p"),Ier=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),qer=o("not"),Ner=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),jer=o("from_pretrained()"),Der=o(" to load the model weights."),Ger=l(),v(eM.$$.fragment),Oer=l(),_o=a("div"),v(o8.$$.fragment),Ver=l(),ppe=a("p"),Xer=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zer=l(),Ha=a("p"),Qer=o("The model class to instantiate is selected based on the "),_pe=a("code"),Wer=o("model_type"),Her=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(":"),Zer=l(),vpe=a("ul"),oM=a("li"),Tpe=a("strong"),eor=o("maskformer"),oor=o(" \u2014 "),dX=a("a"),ror=o("MaskFormerForInstanceSegmentation"),tor=o(" (MaskFormer model)"),aor=l(),rM=a("p"),nor=o("The model is set in evaluation mode by default using "),Mpe=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),ior=o("model.train()"),dor=l(),v(tM.$$.fragment),cPe=l(),kd=a("h2"),aM=a("a"),Cpe=a("span"),v(r8.$$.fragment),cor=l(),wpe=a("span"),mor=o("TFAutoModel"),mPe=l(),Yo=a("div"),v(t8.$$.fragment),gor=l(),Sd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cX=a("a"),uor=o("from_pretrained()"),por=o(" class method or the "),mX=a("a"),_or=o("from_config()"),bor=o(` class
method.`),For=l(),a8=a("p"),vor=o("This class cannot be instantiated directly using "),Ape=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),Et=a("div"),v(n8.$$.fragment),Cor=l(),ype=a("p"),wor=o("Instantiates one of the base model classes of the library from a configuration."),Aor=l(),Rd=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),Lpe=a("strong"),Lor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),v(nM.$$.fragment),Ror=l(),Cr=a("div"),v(s8.$$.fragment),Bor=l(),xpe=a("p"),Por=o("Instantiate one of the base model classes of the library from a pretrained model."),Ior=l(),Ua=a("p"),qor=o("The model class to instantiate is selected based on the "),$pe=a("code"),Nor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),j=a("ul"),sM=a("li"),Rpe=a("strong"),zor=o("albert"),Qor=o(" \u2014 "),gX=a("a"),Wor=o("TFAlbertModel"),Hor=o(" (ALBERT model)"),Uor=l(),lM=a("li"),Bpe=a("strong"),Jor=o("bart"),Yor=o(" \u2014 "),hX=a("a"),Kor=o("TFBartModel"),Zor=o(" (BART model)"),err=l(),iM=a("li"),Ppe=a("strong"),orr=o("bert"),rrr=o(" \u2014 "),uX=a("a"),trr=o("TFBertModel"),arr=o(" (BERT model)"),nrr=l(),dM=a("li"),Ipe=a("strong"),srr=o("blenderbot"),lrr=o(" \u2014 "),pX=a("a"),irr=o("TFBlenderbotModel"),drr=o(" (Blenderbot model)"),crr=l(),cM=a("li"),qpe=a("strong"),mrr=o("blenderbot-small"),frr=o(" \u2014 "),_X=a("a"),grr=o("TFBlenderbotSmallModel"),hrr=o(" (BlenderbotSmall model)"),urr=l(),mM=a("li"),Npe=a("strong"),prr=o("camembert"),_rr=o(" \u2014 "),bX=a("a"),brr=o("TFCamembertModel"),Frr=o(" (CamemBERT model)"),vrr=l(),fM=a("li"),jpe=a("strong"),Trr=o("clip"),Mrr=o(" \u2014 "),FX=a("a"),Err=o("TFCLIPModel"),Crr=o(" (CLIP model)"),wrr=l(),gM=a("li"),Dpe=a("strong"),Arr=o("convbert"),yrr=o(" \u2014 "),vX=a("a"),Lrr=o("TFConvBertModel"),xrr=o(" (ConvBERT model)"),$rr=l(),hM=a("li"),Gpe=a("strong"),krr=o("convnext"),Srr=o(" \u2014 "),TX=a("a"),Rrr=o("TFConvNextModel"),Brr=o(" (ConvNext model)"),Prr=l(),uM=a("li"),Ope=a("strong"),Irr=o("ctrl"),qrr=o(" \u2014 "),MX=a("a"),Nrr=o("TFCTRLModel"),jrr=o(" (CTRL model)"),Drr=l(),pM=a("li"),Vpe=a("strong"),Grr=o("deberta"),Orr=o(" \u2014 "),EX=a("a"),Vrr=o("TFDebertaModel"),Xrr=o(" (DeBERTa model)"),zrr=l(),_M=a("li"),Xpe=a("strong"),Qrr=o("deberta-v2"),Wrr=o(" \u2014 "),CX=a("a"),Hrr=o("TFDebertaV2Model"),Urr=o(" (DeBERTa-v2 model)"),Jrr=l(),bM=a("li"),zpe=a("strong"),Yrr=o("distilbert"),Krr=o(" \u2014 "),wX=a("a"),Zrr=o("TFDistilBertModel"),etr=o(" (DistilBERT model)"),otr=l(),FM=a("li"),Qpe=a("strong"),rtr=o("dpr"),ttr=o(" \u2014 "),AX=a("a"),atr=o("TFDPRQuestionEncoder"),ntr=o(" (DPR model)"),str=l(),vM=a("li"),Wpe=a("strong"),ltr=o("electra"),itr=o(" \u2014 "),yX=a("a"),dtr=o("TFElectraModel"),ctr=o(" (ELECTRA model)"),mtr=l(),TM=a("li"),Hpe=a("strong"),ftr=o("flaubert"),gtr=o(" \u2014 "),LX=a("a"),htr=o("TFFlaubertModel"),utr=o(" (FlauBERT model)"),ptr=l(),$s=a("li"),Upe=a("strong"),_tr=o("funnel"),btr=o(" \u2014 "),xX=a("a"),Ftr=o("TFFunnelModel"),vtr=o(" or "),$X=a("a"),Ttr=o("TFFunnelBaseModel"),Mtr=o(" (Funnel Transformer model)"),Etr=l(),MM=a("li"),Jpe=a("strong"),Ctr=o("gpt2"),wtr=o(" \u2014 "),kX=a("a"),Atr=o("TFGPT2Model"),ytr=o(" (OpenAI GPT-2 model)"),Ltr=l(),EM=a("li"),Ype=a("strong"),xtr=o("gptj"),$tr=o(" \u2014 "),SX=a("a"),ktr=o("TFGPTJModel"),Str=o(" (GPT-J model)"),Rtr=l(),CM=a("li"),Kpe=a("strong"),Btr=o("hubert"),Ptr=o(" \u2014 "),RX=a("a"),Itr=o("TFHubertModel"),qtr=o(" (Hubert model)"),Ntr=l(),wM=a("li"),Zpe=a("strong"),jtr=o("layoutlm"),Dtr=o(" \u2014 "),BX=a("a"),Gtr=o("TFLayoutLMModel"),Otr=o(" (LayoutLM model)"),Vtr=l(),AM=a("li"),e_e=a("strong"),Xtr=o("led"),ztr=o(" \u2014 "),PX=a("a"),Qtr=o("TFLEDModel"),Wtr=o(" (LED model)"),Htr=l(),yM=a("li"),o_e=a("strong"),Utr=o("longformer"),Jtr=o(" \u2014 "),IX=a("a"),Ytr=o("TFLongformerModel"),Ktr=o(" (Longformer model)"),Ztr=l(),LM=a("li"),r_e=a("strong"),ear=o("lxmert"),oar=o(" \u2014 "),qX=a("a"),rar=o("TFLxmertModel"),tar=o(" (LXMERT model)"),aar=l(),xM=a("li"),t_e=a("strong"),nar=o("marian"),sar=o(" \u2014 "),NX=a("a"),lar=o("TFMarianModel"),iar=o(" (Marian model)"),dar=l(),$M=a("li"),a_e=a("strong"),car=o("mbart"),mar=o(" \u2014 "),jX=a("a"),far=o("TFMBartModel"),gar=o(" (mBART model)"),har=l(),kM=a("li"),n_e=a("strong"),uar=o("mobilebert"),par=o(" \u2014 "),DX=a("a"),_ar=o("TFMobileBertModel"),bar=o(" (MobileBERT model)"),Far=l(),SM=a("li"),s_e=a("strong"),Tar=o("mpnet"),Mar=o(" \u2014 "),GX=a("a"),Ear=o("TFMPNetModel"),Car=o(" (MPNet model)"),war=l(),RM=a("li"),l_e=a("strong"),Aar=o("mt5"),yar=o(" \u2014 "),OX=a("a"),Lar=o("TFMT5Model"),xar=o(" (mT5 model)"),$ar=l(),BM=a("li"),i_e=a("strong"),kar=o("openai-gpt"),Sar=o(" \u2014 "),VX=a("a"),Rar=o("TFOpenAIGPTModel"),Bar=o(" (OpenAI GPT model)"),Par=l(),PM=a("li"),d_e=a("strong"),Iar=o("pegasus"),qar=o(" \u2014 "),XX=a("a"),Nar=o("TFPegasusModel"),jar=o(" (Pegasus model)"),Dar=l(),IM=a("li"),c_e=a("strong"),Gar=o("rembert"),Oar=o(" \u2014 "),zX=a("a"),Var=o("TFRemBertModel"),Xar=o(" (RemBERT model)"),zar=l(),qM=a("li"),m_e=a("strong"),Qar=o("roberta"),War=o(" \u2014 "),QX=a("a"),Har=o("TFRobertaModel"),Uar=o(" (RoBERTa model)"),Jar=l(),NM=a("li"),f_e=a("strong"),Yar=o("roformer"),Kar=o(" \u2014 "),WX=a("a"),Zar=o("TFRoFormerModel"),enr=o(" (RoFormer model)"),onr=l(),jM=a("li"),g_e=a("strong"),rnr=o("speech_to_text"),tnr=o(" \u2014 "),HX=a("a"),anr=o("TFSpeech2TextModel"),nnr=o(" (Speech2Text model)"),snr=l(),DM=a("li"),h_e=a("strong"),lnr=o("t5"),inr=o(" \u2014 "),UX=a("a"),dnr=o("TFT5Model"),cnr=o(" (T5 model)"),mnr=l(),GM=a("li"),u_e=a("strong"),fnr=o("tapas"),gnr=o(" \u2014 "),JX=a("a"),hnr=o("TFTapasModel"),unr=o(" (TAPAS model)"),pnr=l(),OM=a("li"),p_e=a("strong"),_nr=o("transfo-xl"),bnr=o(" \u2014 "),YX=a("a"),Fnr=o("TFTransfoXLModel"),vnr=o(" (Transformer-XL model)"),Tnr=l(),VM=a("li"),__e=a("strong"),Mnr=o("vit"),Enr=o(" \u2014 "),KX=a("a"),Cnr=o("TFViTModel"),wnr=o(" (ViT model)"),Anr=l(),XM=a("li"),b_e=a("strong"),ynr=o("vit_mae"),Lnr=o(" \u2014 "),ZX=a("a"),xnr=o("TFViTMAEModel"),$nr=o(" (ViTMAE model)"),knr=l(),zM=a("li"),F_e=a("strong"),Snr=o("wav2vec2"),Rnr=o(" \u2014 "),ez=a("a"),Bnr=o("TFWav2Vec2Model"),Pnr=o(" (Wav2Vec2 model)"),Inr=l(),QM=a("li"),v_e=a("strong"),qnr=o("xlm"),Nnr=o(" \u2014 "),oz=a("a"),jnr=o("TFXLMModel"),Dnr=o(" (XLM model)"),Gnr=l(),WM=a("li"),T_e=a("strong"),Onr=o("xlm-roberta"),Vnr=o(" \u2014 "),rz=a("a"),Xnr=o("TFXLMRobertaModel"),znr=o(" (XLM-RoBERTa model)"),Qnr=l(),HM=a("li"),M_e=a("strong"),Wnr=o("xlnet"),Hnr=o(" \u2014 "),tz=a("a"),Unr=o("TFXLNetModel"),Jnr=o(" (XLNet model)"),Ynr=l(),v(UM.$$.fragment),fPe=l(),Bd=a("h2"),JM=a("a"),E_e=a("span"),v(l8.$$.fragment),Knr=l(),C_e=a("span"),Znr=o("TFAutoModelForPreTraining"),gPe=l(),Ko=a("div"),v(i8.$$.fragment),esr=l(),Pd=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),az=a("a"),rsr=o("from_pretrained()"),tsr=o(" class method or the "),nz=a("a"),asr=o("from_config()"),nsr=o(` class
method.`),ssr=l(),d8=a("p"),lsr=o("This class cannot be instantiated directly using "),w_e=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),Ct=a("div"),v(c8.$$.fragment),msr=l(),A_e=a("p"),fsr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gsr=l(),Id=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),usr=o("not"),psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),_sr=o("from_pretrained()"),bsr=o(" to load the model weights."),Fsr=l(),v(YM.$$.fragment),vsr=l(),wr=a("div"),v(m8.$$.fragment),Tsr=l(),L_e=a("p"),Msr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Esr=l(),Ja=a("p"),Csr=o("The model class to instantiate is selected based on the "),x_e=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),ysr=o("pretrained_model_name_or_path"),Lsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(":"),ksr=l(),ne=a("ul"),KM=a("li"),S_e=a("strong"),Ssr=o("albert"),Rsr=o(" \u2014 "),lz=a("a"),Bsr=o("TFAlbertForPreTraining"),Psr=o(" (ALBERT model)"),Isr=l(),ZM=a("li"),R_e=a("strong"),qsr=o("bart"),Nsr=o(" \u2014 "),iz=a("a"),jsr=o("TFBartForConditionalGeneration"),Dsr=o(" (BART model)"),Gsr=l(),e4=a("li"),B_e=a("strong"),Osr=o("bert"),Vsr=o(" \u2014 "),dz=a("a"),Xsr=o("TFBertForPreTraining"),zsr=o(" (BERT model)"),Qsr=l(),o4=a("li"),P_e=a("strong"),Wsr=o("camembert"),Hsr=o(" \u2014 "),cz=a("a"),Usr=o("TFCamembertForMaskedLM"),Jsr=o(" (CamemBERT model)"),Ysr=l(),r4=a("li"),I_e=a("strong"),Ksr=o("ctrl"),Zsr=o(" \u2014 "),mz=a("a"),elr=o("TFCTRLLMHeadModel"),olr=o(" (CTRL model)"),rlr=l(),t4=a("li"),q_e=a("strong"),tlr=o("distilbert"),alr=o(" \u2014 "),fz=a("a"),nlr=o("TFDistilBertForMaskedLM"),slr=o(" (DistilBERT model)"),llr=l(),a4=a("li"),N_e=a("strong"),ilr=o("electra"),dlr=o(" \u2014 "),gz=a("a"),clr=o("TFElectraForPreTraining"),mlr=o(" (ELECTRA model)"),flr=l(),n4=a("li"),j_e=a("strong"),glr=o("flaubert"),hlr=o(" \u2014 "),hz=a("a"),ulr=o("TFFlaubertWithLMHeadModel"),plr=o(" (FlauBERT model)"),_lr=l(),s4=a("li"),D_e=a("strong"),blr=o("funnel"),Flr=o(" \u2014 "),uz=a("a"),vlr=o("TFFunnelForPreTraining"),Tlr=o(" (Funnel Transformer model)"),Mlr=l(),l4=a("li"),G_e=a("strong"),Elr=o("gpt2"),Clr=o(" \u2014 "),pz=a("a"),wlr=o("TFGPT2LMHeadModel"),Alr=o(" (OpenAI GPT-2 model)"),ylr=l(),i4=a("li"),O_e=a("strong"),Llr=o("layoutlm"),xlr=o(" \u2014 "),_z=a("a"),$lr=o("TFLayoutLMForMaskedLM"),klr=o(" (LayoutLM model)"),Slr=l(),d4=a("li"),V_e=a("strong"),Rlr=o("lxmert"),Blr=o(" \u2014 "),bz=a("a"),Plr=o("TFLxmertForPreTraining"),Ilr=o(" (LXMERT model)"),qlr=l(),c4=a("li"),X_e=a("strong"),Nlr=o("mobilebert"),jlr=o(" \u2014 "),Fz=a("a"),Dlr=o("TFMobileBertForPreTraining"),Glr=o(" (MobileBERT model)"),Olr=l(),m4=a("li"),z_e=a("strong"),Vlr=o("mpnet"),Xlr=o(" \u2014 "),vz=a("a"),zlr=o("TFMPNetForMaskedLM"),Qlr=o(" (MPNet model)"),Wlr=l(),f4=a("li"),Q_e=a("strong"),Hlr=o("openai-gpt"),Ulr=o(" \u2014 "),Tz=a("a"),Jlr=o("TFOpenAIGPTLMHeadModel"),Ylr=o(" (OpenAI GPT model)"),Klr=l(),g4=a("li"),W_e=a("strong"),Zlr=o("roberta"),eir=o(" \u2014 "),Mz=a("a"),oir=o("TFRobertaForMaskedLM"),rir=o(" (RoBERTa model)"),tir=l(),h4=a("li"),H_e=a("strong"),air=o("t5"),nir=o(" \u2014 "),Ez=a("a"),sir=o("TFT5ForConditionalGeneration"),lir=o(" (T5 model)"),iir=l(),u4=a("li"),U_e=a("strong"),dir=o("tapas"),cir=o(" \u2014 "),Cz=a("a"),mir=o("TFTapasForMaskedLM"),fir=o(" (TAPAS model)"),gir=l(),p4=a("li"),J_e=a("strong"),hir=o("transfo-xl"),uir=o(" \u2014 "),wz=a("a"),pir=o("TFTransfoXLLMHeadModel"),_ir=o(" (Transformer-XL model)"),bir=l(),_4=a("li"),Y_e=a("strong"),Fir=o("vit_mae"),vir=o(" \u2014 "),Az=a("a"),Tir=o("TFViTMAEForPreTraining"),Mir=o(" (ViTMAE model)"),Eir=l(),b4=a("li"),K_e=a("strong"),Cir=o("xlm"),wir=o(" \u2014 "),yz=a("a"),Air=o("TFXLMWithLMHeadModel"),yir=o(" (XLM model)"),Lir=l(),F4=a("li"),Z_e=a("strong"),xir=o("xlm-roberta"),$ir=o(" \u2014 "),Lz=a("a"),kir=o("TFXLMRobertaForMaskedLM"),Sir=o(" (XLM-RoBERTa model)"),Rir=l(),v4=a("li"),ebe=a("strong"),Bir=o("xlnet"),Pir=o(" \u2014 "),xz=a("a"),Iir=o("TFXLNetLMHeadModel"),qir=o(" (XLNet model)"),Nir=l(),v(T4.$$.fragment),hPe=l(),qd=a("h2"),M4=a("a"),obe=a("span"),v(f8.$$.fragment),jir=l(),rbe=a("span"),Dir=o("TFAutoModelForCausalLM"),uPe=l(),Zo=a("div"),v(g8.$$.fragment),Gir=l(),Nd=a("p"),Oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$z=a("a"),Vir=o("from_pretrained()"),Xir=o(" class method or the "),kz=a("a"),zir=o("from_config()"),Qir=o(` class
method.`),Wir=l(),h8=a("p"),Hir=o("This class cannot be instantiated directly using "),tbe=a("code"),Uir=o("__init__()"),Jir=o(" (throws an error)."),Yir=l(),wt=a("div"),v(u8.$$.fragment),Kir=l(),abe=a("p"),Zir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),edr=l(),jd=a("p"),odr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),rdr=o("not"),tdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),adr=o("from_pretrained()"),ndr=o(" to load the model weights."),sdr=l(),v(E4.$$.fragment),ldr=l(),Ar=a("div"),v(p8.$$.fragment),idr=l(),sbe=a("p"),ddr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cdr=l(),Ya=a("p"),mdr=o("The model class to instantiate is selected based on the "),lbe=a("code"),fdr=o("model_type"),gdr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),hdr=o("pretrained_model_name_or_path"),udr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(":"),bdr=l(),Te=a("ul"),C4=a("li"),cbe=a("strong"),Fdr=o("bert"),vdr=o(" \u2014 "),Rz=a("a"),Tdr=o("TFBertLMHeadModel"),Mdr=o(" (BERT model)"),Edr=l(),w4=a("li"),mbe=a("strong"),Cdr=o("camembert"),wdr=o(" \u2014 "),Bz=a("a"),Adr=o("TFCamembertForCausalLM"),ydr=o(" (CamemBERT model)"),Ldr=l(),A4=a("li"),fbe=a("strong"),xdr=o("ctrl"),$dr=o(" \u2014 "),Pz=a("a"),kdr=o("TFCTRLLMHeadModel"),Sdr=o(" (CTRL model)"),Rdr=l(),y4=a("li"),gbe=a("strong"),Bdr=o("gpt2"),Pdr=o(" \u2014 "),Iz=a("a"),Idr=o("TFGPT2LMHeadModel"),qdr=o(" (OpenAI GPT-2 model)"),Ndr=l(),L4=a("li"),hbe=a("strong"),jdr=o("gptj"),Ddr=o(" \u2014 "),qz=a("a"),Gdr=o("TFGPTJForCausalLM"),Odr=o(" (GPT-J model)"),Vdr=l(),x4=a("li"),ube=a("strong"),Xdr=o("openai-gpt"),zdr=o(" \u2014 "),Nz=a("a"),Qdr=o("TFOpenAIGPTLMHeadModel"),Wdr=o(" (OpenAI GPT model)"),Hdr=l(),$4=a("li"),pbe=a("strong"),Udr=o("rembert"),Jdr=o(" \u2014 "),jz=a("a"),Ydr=o("TFRemBertForCausalLM"),Kdr=o(" (RemBERT model)"),Zdr=l(),k4=a("li"),_be=a("strong"),ecr=o("roberta"),ocr=o(" \u2014 "),Dz=a("a"),rcr=o("TFRobertaForCausalLM"),tcr=o(" (RoBERTa model)"),acr=l(),S4=a("li"),bbe=a("strong"),ncr=o("roformer"),scr=o(" \u2014 "),Gz=a("a"),lcr=o("TFRoFormerForCausalLM"),icr=o(" (RoFormer model)"),dcr=l(),R4=a("li"),Fbe=a("strong"),ccr=o("transfo-xl"),mcr=o(" \u2014 "),Oz=a("a"),fcr=o("TFTransfoXLLMHeadModel"),gcr=o(" (Transformer-XL model)"),hcr=l(),B4=a("li"),vbe=a("strong"),ucr=o("xlm"),pcr=o(" \u2014 "),Vz=a("a"),_cr=o("TFXLMWithLMHeadModel"),bcr=o(" (XLM model)"),Fcr=l(),P4=a("li"),Tbe=a("strong"),vcr=o("xlnet"),Tcr=o(" \u2014 "),Xz=a("a"),Mcr=o("TFXLNetLMHeadModel"),Ecr=o(" (XLNet model)"),Ccr=l(),v(I4.$$.fragment),pPe=l(),Dd=a("h2"),q4=a("a"),Mbe=a("span"),v(_8.$$.fragment),wcr=l(),Ebe=a("span"),Acr=o("TFAutoModelForImageClassification"),_Pe=l(),er=a("div"),v(b8.$$.fragment),ycr=l(),Gd=a("p"),Lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zz=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),Qz=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),F8=a("p"),Bcr=o("This class cannot be instantiated directly using "),Cbe=a("code"),Pcr=o("__init__()"),Icr=o(" (throws an error)."),qcr=l(),At=a("div"),v(v8.$$.fragment),Ncr=l(),wbe=a("p"),jcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dcr=l(),Od=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Qcr=l(),v(N4.$$.fragment),Wcr=l(),yr=a("div"),v(T8.$$.fragment),Hcr=l(),ybe=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jcr=l(),Ka=a("p"),Ycr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),emr=o("pretrained_model_name_or_path"),omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(":"),amr=l(),M8=a("ul"),j4=a("li"),kbe=a("strong"),nmr=o("convnext"),smr=o(" \u2014 "),Hz=a("a"),lmr=o("TFConvNextForImageClassification"),imr=o(" (ConvNext model)"),dmr=l(),D4=a("li"),Sbe=a("strong"),cmr=o("vit"),mmr=o(" \u2014 "),Uz=a("a"),fmr=o("TFViTForImageClassification"),gmr=o(" (ViT model)"),hmr=l(),v(G4.$$.fragment),bPe=l(),Vd=a("h2"),O4=a("a"),Rbe=a("span"),v(E8.$$.fragment),umr=l(),Bbe=a("span"),pmr=o("TFAutoModelForMaskedLM"),FPe=l(),or=a("div"),v(C8.$$.fragment),_mr=l(),Xd=a("p"),bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jz=a("a"),Fmr=o("from_pretrained()"),vmr=o(" class method or the "),Yz=a("a"),Tmr=o("from_config()"),Mmr=o(` class
method.`),Emr=l(),w8=a("p"),Cmr=o("This class cannot be instantiated directly using "),Pbe=a("code"),wmr=o("__init__()"),Amr=o(" (throws an error)."),ymr=l(),yt=a("div"),v(A8.$$.fragment),Lmr=l(),Ibe=a("p"),xmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$mr=l(),zd=a("p"),kmr=o(`Note:
Loading a model from its configuration file does `),qbe=a("strong"),Smr=o("not"),Rmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),Bmr=o("from_pretrained()"),Pmr=o(" to load the model weights."),Imr=l(),v(V4.$$.fragment),qmr=l(),Lr=a("div"),v(y8.$$.fragment),Nmr=l(),Nbe=a("p"),jmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dmr=l(),Za=a("p"),Gmr=o("The model class to instantiate is selected based on the "),jbe=a("code"),Omr=o("model_type"),Vmr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),Qmr=o("pretrained_model_name_or_path"),Wmr=o(":"),Hmr=l(),ie=a("ul"),X4=a("li"),Obe=a("strong"),Umr=o("albert"),Jmr=o(" \u2014 "),Zz=a("a"),Ymr=o("TFAlbertForMaskedLM"),Kmr=o(" (ALBERT model)"),Zmr=l(),z4=a("li"),Vbe=a("strong"),efr=o("bert"),ofr=o(" \u2014 "),eQ=a("a"),rfr=o("TFBertForMaskedLM"),tfr=o(" (BERT model)"),afr=l(),Q4=a("li"),Xbe=a("strong"),nfr=o("camembert"),sfr=o(" \u2014 "),oQ=a("a"),lfr=o("TFCamembertForMaskedLM"),ifr=o(" (CamemBERT model)"),dfr=l(),W4=a("li"),zbe=a("strong"),cfr=o("convbert"),mfr=o(" \u2014 "),rQ=a("a"),ffr=o("TFConvBertForMaskedLM"),gfr=o(" (ConvBERT model)"),hfr=l(),H4=a("li"),Qbe=a("strong"),ufr=o("deberta"),pfr=o(" \u2014 "),tQ=a("a"),_fr=o("TFDebertaForMaskedLM"),bfr=o(" (DeBERTa model)"),Ffr=l(),U4=a("li"),Wbe=a("strong"),vfr=o("deberta-v2"),Tfr=o(" \u2014 "),aQ=a("a"),Mfr=o("TFDebertaV2ForMaskedLM"),Efr=o(" (DeBERTa-v2 model)"),Cfr=l(),J4=a("li"),Hbe=a("strong"),wfr=o("distilbert"),Afr=o(" \u2014 "),nQ=a("a"),yfr=o("TFDistilBertForMaskedLM"),Lfr=o(" (DistilBERT model)"),xfr=l(),Y4=a("li"),Ube=a("strong"),$fr=o("electra"),kfr=o(" \u2014 "),sQ=a("a"),Sfr=o("TFElectraForMaskedLM"),Rfr=o(" (ELECTRA model)"),Bfr=l(),K4=a("li"),Jbe=a("strong"),Pfr=o("flaubert"),Ifr=o(" \u2014 "),lQ=a("a"),qfr=o("TFFlaubertWithLMHeadModel"),Nfr=o(" (FlauBERT model)"),jfr=l(),Z4=a("li"),Ybe=a("strong"),Dfr=o("funnel"),Gfr=o(" \u2014 "),iQ=a("a"),Ofr=o("TFFunnelForMaskedLM"),Vfr=o(" (Funnel Transformer model)"),Xfr=l(),eE=a("li"),Kbe=a("strong"),zfr=o("layoutlm"),Qfr=o(" \u2014 "),dQ=a("a"),Wfr=o("TFLayoutLMForMaskedLM"),Hfr=o(" (LayoutLM model)"),Ufr=l(),oE=a("li"),Zbe=a("strong"),Jfr=o("longformer"),Yfr=o(" \u2014 "),cQ=a("a"),Kfr=o("TFLongformerForMaskedLM"),Zfr=o(" (Longformer model)"),egr=l(),rE=a("li"),e2e=a("strong"),ogr=o("mobilebert"),rgr=o(" \u2014 "),mQ=a("a"),tgr=o("TFMobileBertForMaskedLM"),agr=o(" (MobileBERT model)"),ngr=l(),tE=a("li"),o2e=a("strong"),sgr=o("mpnet"),lgr=o(" \u2014 "),fQ=a("a"),igr=o("TFMPNetForMaskedLM"),dgr=o(" (MPNet model)"),cgr=l(),aE=a("li"),r2e=a("strong"),mgr=o("rembert"),fgr=o(" \u2014 "),gQ=a("a"),ggr=o("TFRemBertForMaskedLM"),hgr=o(" (RemBERT model)"),ugr=l(),nE=a("li"),t2e=a("strong"),pgr=o("roberta"),_gr=o(" \u2014 "),hQ=a("a"),bgr=o("TFRobertaForMaskedLM"),Fgr=o(" (RoBERTa model)"),vgr=l(),sE=a("li"),a2e=a("strong"),Tgr=o("roformer"),Mgr=o(" \u2014 "),uQ=a("a"),Egr=o("TFRoFormerForMaskedLM"),Cgr=o(" (RoFormer model)"),wgr=l(),lE=a("li"),n2e=a("strong"),Agr=o("tapas"),ygr=o(" \u2014 "),pQ=a("a"),Lgr=o("TFTapasForMaskedLM"),xgr=o(" (TAPAS model)"),$gr=l(),iE=a("li"),s2e=a("strong"),kgr=o("xlm"),Sgr=o(" \u2014 "),_Q=a("a"),Rgr=o("TFXLMWithLMHeadModel"),Bgr=o(" (XLM model)"),Pgr=l(),dE=a("li"),l2e=a("strong"),Igr=o("xlm-roberta"),qgr=o(" \u2014 "),bQ=a("a"),Ngr=o("TFXLMRobertaForMaskedLM"),jgr=o(" (XLM-RoBERTa model)"),Dgr=l(),v(cE.$$.fragment),vPe=l(),Qd=a("h2"),mE=a("a"),i2e=a("span"),v(L8.$$.fragment),Ggr=l(),d2e=a("span"),Ogr=o("TFAutoModelForSeq2SeqLM"),TPe=l(),rr=a("div"),v(x8.$$.fragment),Vgr=l(),Wd=a("p"),Xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FQ=a("a"),zgr=o("from_pretrained()"),Qgr=o(" class method or the "),vQ=a("a"),Wgr=o("from_config()"),Hgr=o(` class
method.`),Ugr=l(),$8=a("p"),Jgr=o("This class cannot be instantiated directly using "),c2e=a("code"),Ygr=o("__init__()"),Kgr=o(" (throws an error)."),Zgr=l(),Lt=a("div"),v(k8.$$.fragment),ehr=l(),m2e=a("p"),ohr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rhr=l(),Hd=a("p"),thr=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),ahr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),shr=o("from_pretrained()"),lhr=o(" to load the model weights."),ihr=l(),v(fE.$$.fragment),dhr=l(),xr=a("div"),v(S8.$$.fragment),chr=l(),g2e=a("p"),mhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fhr=l(),en=a("p"),ghr=o("The model class to instantiate is selected based on the "),h2e=a("code"),hhr=o("model_type"),uhr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=a("code"),bhr=o("pretrained_model_name_or_path"),Fhr=o(":"),vhr=l(),ye=a("ul"),gE=a("li"),_2e=a("strong"),Thr=o("bart"),Mhr=o(" \u2014 "),MQ=a("a"),Ehr=o("TFBartForConditionalGeneration"),Chr=o(" (BART model)"),whr=l(),hE=a("li"),b2e=a("strong"),Ahr=o("blenderbot"),yhr=o(" \u2014 "),EQ=a("a"),Lhr=o("TFBlenderbotForConditionalGeneration"),xhr=o(" (Blenderbot model)"),$hr=l(),uE=a("li"),F2e=a("strong"),khr=o("blenderbot-small"),Shr=o(" \u2014 "),CQ=a("a"),Rhr=o("TFBlenderbotSmallForConditionalGeneration"),Bhr=o(" (BlenderbotSmall model)"),Phr=l(),pE=a("li"),v2e=a("strong"),Ihr=o("encoder-decoder"),qhr=o(" \u2014 "),wQ=a("a"),Nhr=o("TFEncoderDecoderModel"),jhr=o(" (Encoder decoder model)"),Dhr=l(),_E=a("li"),T2e=a("strong"),Ghr=o("led"),Ohr=o(" \u2014 "),AQ=a("a"),Vhr=o("TFLEDForConditionalGeneration"),Xhr=o(" (LED model)"),zhr=l(),bE=a("li"),M2e=a("strong"),Qhr=o("marian"),Whr=o(" \u2014 "),yQ=a("a"),Hhr=o("TFMarianMTModel"),Uhr=o(" (Marian model)"),Jhr=l(),FE=a("li"),E2e=a("strong"),Yhr=o("mbart"),Khr=o(" \u2014 "),LQ=a("a"),Zhr=o("TFMBartForConditionalGeneration"),eur=o(" (mBART model)"),our=l(),vE=a("li"),C2e=a("strong"),rur=o("mt5"),tur=o(" \u2014 "),xQ=a("a"),aur=o("TFMT5ForConditionalGeneration"),nur=o(" (mT5 model)"),sur=l(),TE=a("li"),w2e=a("strong"),lur=o("pegasus"),iur=o(" \u2014 "),$Q=a("a"),dur=o("TFPegasusForConditionalGeneration"),cur=o(" (Pegasus model)"),mur=l(),ME=a("li"),A2e=a("strong"),fur=o("t5"),gur=o(" \u2014 "),kQ=a("a"),hur=o("TFT5ForConditionalGeneration"),uur=o(" (T5 model)"),pur=l(),v(EE.$$.fragment),MPe=l(),Ud=a("h2"),CE=a("a"),y2e=a("span"),v(R8.$$.fragment),_ur=l(),L2e=a("span"),bur=o("TFAutoModelForSequenceClassification"),EPe=l(),tr=a("div"),v(B8.$$.fragment),Fur=l(),Jd=a("p"),vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),RQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),P8=a("p"),Aur=o("This class cannot be instantiated directly using "),x2e=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),xt=a("div"),v(I8.$$.fragment),$ur=l(),$2e=a("p"),kur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sur=l(),Yd=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),Bur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),v(wE.$$.fragment),jur=l(),$r=a("div"),v(q8.$$.fragment),Dur=l(),S2e=a("p"),Gur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Our=l(),on=a("p"),Vur=o("The model class to instantiate is selected based on the "),R2e=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),Z=a("ul"),AE=a("li"),I2e=a("strong"),Yur=o("albert"),Kur=o(" \u2014 "),PQ=a("a"),Zur=o("TFAlbertForSequenceClassification"),epr=o(" (ALBERT model)"),opr=l(),yE=a("li"),q2e=a("strong"),rpr=o("bert"),tpr=o(" \u2014 "),IQ=a("a"),apr=o("TFBertForSequenceClassification"),npr=o(" (BERT model)"),spr=l(),LE=a("li"),N2e=a("strong"),lpr=o("camembert"),ipr=o(" \u2014 "),qQ=a("a"),dpr=o("TFCamembertForSequenceClassification"),cpr=o(" (CamemBERT model)"),mpr=l(),xE=a("li"),j2e=a("strong"),fpr=o("convbert"),gpr=o(" \u2014 "),NQ=a("a"),hpr=o("TFConvBertForSequenceClassification"),upr=o(" (ConvBERT model)"),ppr=l(),$E=a("li"),D2e=a("strong"),_pr=o("ctrl"),bpr=o(" \u2014 "),jQ=a("a"),Fpr=o("TFCTRLForSequenceClassification"),vpr=o(" (CTRL model)"),Tpr=l(),kE=a("li"),G2e=a("strong"),Mpr=o("deberta"),Epr=o(" \u2014 "),DQ=a("a"),Cpr=o("TFDebertaForSequenceClassification"),wpr=o(" (DeBERTa model)"),Apr=l(),SE=a("li"),O2e=a("strong"),ypr=o("deberta-v2"),Lpr=o(" \u2014 "),GQ=a("a"),xpr=o("TFDebertaV2ForSequenceClassification"),$pr=o(" (DeBERTa-v2 model)"),kpr=l(),RE=a("li"),V2e=a("strong"),Spr=o("distilbert"),Rpr=o(" \u2014 "),OQ=a("a"),Bpr=o("TFDistilBertForSequenceClassification"),Ppr=o(" (DistilBERT model)"),Ipr=l(),BE=a("li"),X2e=a("strong"),qpr=o("electra"),Npr=o(" \u2014 "),VQ=a("a"),jpr=o("TFElectraForSequenceClassification"),Dpr=o(" (ELECTRA model)"),Gpr=l(),PE=a("li"),z2e=a("strong"),Opr=o("flaubert"),Vpr=o(" \u2014 "),XQ=a("a"),Xpr=o("TFFlaubertForSequenceClassification"),zpr=o(" (FlauBERT model)"),Qpr=l(),IE=a("li"),Q2e=a("strong"),Wpr=o("funnel"),Hpr=o(" \u2014 "),zQ=a("a"),Upr=o("TFFunnelForSequenceClassification"),Jpr=o(" (Funnel Transformer model)"),Ypr=l(),qE=a("li"),W2e=a("strong"),Kpr=o("gpt2"),Zpr=o(" \u2014 "),QQ=a("a"),e_r=o("TFGPT2ForSequenceClassification"),o_r=o(" (OpenAI GPT-2 model)"),r_r=l(),NE=a("li"),H2e=a("strong"),t_r=o("gptj"),a_r=o(" \u2014 "),WQ=a("a"),n_r=o("TFGPTJForSequenceClassification"),s_r=o(" (GPT-J model)"),l_r=l(),jE=a("li"),U2e=a("strong"),i_r=o("layoutlm"),d_r=o(" \u2014 "),HQ=a("a"),c_r=o("TFLayoutLMForSequenceClassification"),m_r=o(" (LayoutLM model)"),f_r=l(),DE=a("li"),J2e=a("strong"),g_r=o("longformer"),h_r=o(" \u2014 "),UQ=a("a"),u_r=o("TFLongformerForSequenceClassification"),p_r=o(" (Longformer model)"),__r=l(),GE=a("li"),Y2e=a("strong"),b_r=o("mobilebert"),F_r=o(" \u2014 "),JQ=a("a"),v_r=o("TFMobileBertForSequenceClassification"),T_r=o(" (MobileBERT model)"),M_r=l(),OE=a("li"),K2e=a("strong"),E_r=o("mpnet"),C_r=o(" \u2014 "),YQ=a("a"),w_r=o("TFMPNetForSequenceClassification"),A_r=o(" (MPNet model)"),y_r=l(),VE=a("li"),Z2e=a("strong"),L_r=o("openai-gpt"),x_r=o(" \u2014 "),KQ=a("a"),$_r=o("TFOpenAIGPTForSequenceClassification"),k_r=o(" (OpenAI GPT model)"),S_r=l(),XE=a("li"),eFe=a("strong"),R_r=o("rembert"),B_r=o(" \u2014 "),ZQ=a("a"),P_r=o("TFRemBertForSequenceClassification"),I_r=o(" (RemBERT model)"),q_r=l(),zE=a("li"),oFe=a("strong"),N_r=o("roberta"),j_r=o(" \u2014 "),eW=a("a"),D_r=o("TFRobertaForSequenceClassification"),G_r=o(" (RoBERTa model)"),O_r=l(),QE=a("li"),rFe=a("strong"),V_r=o("roformer"),X_r=o(" \u2014 "),oW=a("a"),z_r=o("TFRoFormerForSequenceClassification"),Q_r=o(" (RoFormer model)"),W_r=l(),WE=a("li"),tFe=a("strong"),H_r=o("tapas"),U_r=o(" \u2014 "),rW=a("a"),J_r=o("TFTapasForSequenceClassification"),Y_r=o(" (TAPAS model)"),K_r=l(),HE=a("li"),aFe=a("strong"),Z_r=o("transfo-xl"),ebr=o(" \u2014 "),tW=a("a"),obr=o("TFTransfoXLForSequenceClassification"),rbr=o(" (Transformer-XL model)"),tbr=l(),UE=a("li"),nFe=a("strong"),abr=o("xlm"),nbr=o(" \u2014 "),aW=a("a"),sbr=o("TFXLMForSequenceClassification"),lbr=o(" (XLM model)"),ibr=l(),JE=a("li"),sFe=a("strong"),dbr=o("xlm-roberta"),cbr=o(" \u2014 "),nW=a("a"),mbr=o("TFXLMRobertaForSequenceClassification"),fbr=o(" (XLM-RoBERTa model)"),gbr=l(),YE=a("li"),lFe=a("strong"),hbr=o("xlnet"),ubr=o(" \u2014 "),sW=a("a"),pbr=o("TFXLNetForSequenceClassification"),_br=o(" (XLNet model)"),bbr=l(),v(KE.$$.fragment),CPe=l(),Kd=a("h2"),ZE=a("a"),iFe=a("span"),v(N8.$$.fragment),Fbr=l(),dFe=a("span"),vbr=o("TFAutoModelForMultipleChoice"),wPe=l(),ar=a("div"),v(j8.$$.fragment),Tbr=l(),Zd=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" class method or the "),iW=a("a"),wbr=o("from_config()"),Abr=o(` class
method.`),ybr=l(),D8=a("p"),Lbr=o("This class cannot be instantiated directly using "),cFe=a("code"),xbr=o("__init__()"),$br=o(" (throws an error)."),kbr=l(),$t=a("div"),v(G8.$$.fragment),Sbr=l(),mFe=a("p"),Rbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bbr=l(),ec=a("p"),Pbr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),Ibr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),Nbr=o("from_pretrained()"),jbr=o(" to load the model weights."),Dbr=l(),v(e5.$$.fragment),Gbr=l(),kr=a("div"),v(O8.$$.fragment),Obr=l(),gFe=a("p"),Vbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xbr=l(),rn=a("p"),zbr=o("The model class to instantiate is selected based on the "),hFe=a("code"),Qbr=o("model_type"),Wbr=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),Hbr=o("pretrained_model_name_or_path"),Ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(":"),Kbr=l(),ue=a("ul"),o5=a("li"),_Fe=a("strong"),Zbr=o("albert"),e2r=o(" \u2014 "),cW=a("a"),o2r=o("TFAlbertForMultipleChoice"),r2r=o(" (ALBERT model)"),t2r=l(),r5=a("li"),bFe=a("strong"),a2r=o("bert"),n2r=o(" \u2014 "),mW=a("a"),s2r=o("TFBertForMultipleChoice"),l2r=o(" (BERT model)"),i2r=l(),t5=a("li"),FFe=a("strong"),d2r=o("camembert"),c2r=o(" \u2014 "),fW=a("a"),m2r=o("TFCamembertForMultipleChoice"),f2r=o(" (CamemBERT model)"),g2r=l(),a5=a("li"),vFe=a("strong"),h2r=o("convbert"),u2r=o(" \u2014 "),gW=a("a"),p2r=o("TFConvBertForMultipleChoice"),_2r=o(" (ConvBERT model)"),b2r=l(),n5=a("li"),TFe=a("strong"),F2r=o("distilbert"),v2r=o(" \u2014 "),hW=a("a"),T2r=o("TFDistilBertForMultipleChoice"),M2r=o(" (DistilBERT model)"),E2r=l(),s5=a("li"),MFe=a("strong"),C2r=o("electra"),w2r=o(" \u2014 "),uW=a("a"),A2r=o("TFElectraForMultipleChoice"),y2r=o(" (ELECTRA model)"),L2r=l(),l5=a("li"),EFe=a("strong"),x2r=o("flaubert"),$2r=o(" \u2014 "),pW=a("a"),k2r=o("TFFlaubertForMultipleChoice"),S2r=o(" (FlauBERT model)"),R2r=l(),i5=a("li"),CFe=a("strong"),B2r=o("funnel"),P2r=o(" \u2014 "),_W=a("a"),I2r=o("TFFunnelForMultipleChoice"),q2r=o(" (Funnel Transformer model)"),N2r=l(),d5=a("li"),wFe=a("strong"),j2r=o("longformer"),D2r=o(" \u2014 "),bW=a("a"),G2r=o("TFLongformerForMultipleChoice"),O2r=o(" (Longformer model)"),V2r=l(),c5=a("li"),AFe=a("strong"),X2r=o("mobilebert"),z2r=o(" \u2014 "),FW=a("a"),Q2r=o("TFMobileBertForMultipleChoice"),W2r=o(" (MobileBERT model)"),H2r=l(),m5=a("li"),yFe=a("strong"),U2r=o("mpnet"),J2r=o(" \u2014 "),vW=a("a"),Y2r=o("TFMPNetForMultipleChoice"),K2r=o(" (MPNet model)"),Z2r=l(),f5=a("li"),LFe=a("strong"),eFr=o("rembert"),oFr=o(" \u2014 "),TW=a("a"),rFr=o("TFRemBertForMultipleChoice"),tFr=o(" (RemBERT model)"),aFr=l(),g5=a("li"),xFe=a("strong"),nFr=o("roberta"),sFr=o(" \u2014 "),MW=a("a"),lFr=o("TFRobertaForMultipleChoice"),iFr=o(" (RoBERTa model)"),dFr=l(),h5=a("li"),$Fe=a("strong"),cFr=o("roformer"),mFr=o(" \u2014 "),EW=a("a"),fFr=o("TFRoFormerForMultipleChoice"),gFr=o(" (RoFormer model)"),hFr=l(),u5=a("li"),kFe=a("strong"),uFr=o("xlm"),pFr=o(" \u2014 "),CW=a("a"),_Fr=o("TFXLMForMultipleChoice"),bFr=o(" (XLM model)"),FFr=l(),p5=a("li"),SFe=a("strong"),vFr=o("xlm-roberta"),TFr=o(" \u2014 "),wW=a("a"),MFr=o("TFXLMRobertaForMultipleChoice"),EFr=o(" (XLM-RoBERTa model)"),CFr=l(),_5=a("li"),RFe=a("strong"),wFr=o("xlnet"),AFr=o(" \u2014 "),AW=a("a"),yFr=o("TFXLNetForMultipleChoice"),LFr=o(" (XLNet model)"),xFr=l(),v(b5.$$.fragment),APe=l(),oc=a("h2"),F5=a("a"),BFe=a("span"),v(V8.$$.fragment),$Fr=l(),PFe=a("span"),kFr=o("TFAutoModelForTableQuestionAnswering"),yPe=l(),nr=a("div"),v(X8.$$.fragment),SFr=l(),rc=a("p"),RFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yW=a("a"),BFr=o("from_pretrained()"),PFr=o(" class method or the "),LW=a("a"),IFr=o("from_config()"),qFr=o(` class
method.`),NFr=l(),z8=a("p"),jFr=o("This class cannot be instantiated directly using "),IFe=a("code"),DFr=o("__init__()"),GFr=o(" (throws an error)."),OFr=l(),kt=a("div"),v(Q8.$$.fragment),VFr=l(),qFe=a("p"),XFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zFr=l(),tc=a("p"),QFr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),WFr=o("not"),HFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),UFr=o("from_pretrained()"),JFr=o(" to load the model weights."),YFr=l(),v(v5.$$.fragment),KFr=l(),Sr=a("div"),v(W8.$$.fragment),ZFr=l(),jFe=a("p"),evr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ovr=l(),tn=a("p"),rvr=o("The model class to instantiate is selected based on the "),DFe=a("code"),tvr=o("model_type"),avr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(":"),dvr=l(),VFe=a("ul"),T5=a("li"),XFe=a("strong"),cvr=o("tapas"),mvr=o(" \u2014 "),$W=a("a"),fvr=o("TFTapasForQuestionAnswering"),gvr=o(" (TAPAS model)"),hvr=l(),v(M5.$$.fragment),LPe=l(),ac=a("h2"),E5=a("a"),zFe=a("span"),v(H8.$$.fragment),uvr=l(),QFe=a("span"),pvr=o("TFAutoModelForTokenClassification"),xPe=l(),sr=a("div"),v(U8.$$.fragment),_vr=l(),nc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kW=a("a"),Fvr=o("from_pretrained()"),vvr=o(" class method or the "),SW=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),J8=a("p"),Cvr=o("This class cannot be instantiated directly using "),WFe=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),yvr=l(),St=a("div"),v(Y8.$$.fragment),Lvr=l(),HFe=a("p"),xvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$vr=l(),sc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Bvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Ivr=l(),v(C5.$$.fragment),qvr=l(),Rr=a("div"),v(K8.$$.fragment),Nvr=l(),JFe=a("p"),jvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dvr=l(),an=a("p"),Gvr=o("The model class to instantiate is selected based on the "),YFe=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),Qvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Hvr=l(),de=a("ul"),w5=a("li"),eve=a("strong"),Uvr=o("albert"),Jvr=o(" \u2014 "),BW=a("a"),Yvr=o("TFAlbertForTokenClassification"),Kvr=o(" (ALBERT model)"),Zvr=l(),A5=a("li"),ove=a("strong"),e1r=o("bert"),o1r=o(" \u2014 "),PW=a("a"),r1r=o("TFBertForTokenClassification"),t1r=o(" (BERT model)"),a1r=l(),y5=a("li"),rve=a("strong"),n1r=o("camembert"),s1r=o(" \u2014 "),IW=a("a"),l1r=o("TFCamembertForTokenClassification"),i1r=o(" (CamemBERT model)"),d1r=l(),L5=a("li"),tve=a("strong"),c1r=o("convbert"),m1r=o(" \u2014 "),qW=a("a"),f1r=o("TFConvBertForTokenClassification"),g1r=o(" (ConvBERT model)"),h1r=l(),x5=a("li"),ave=a("strong"),u1r=o("deberta"),p1r=o(" \u2014 "),NW=a("a"),_1r=o("TFDebertaForTokenClassification"),b1r=o(" (DeBERTa model)"),F1r=l(),$5=a("li"),nve=a("strong"),v1r=o("deberta-v2"),T1r=o(" \u2014 "),jW=a("a"),M1r=o("TFDebertaV2ForTokenClassification"),E1r=o(" (DeBERTa-v2 model)"),C1r=l(),k5=a("li"),sve=a("strong"),w1r=o("distilbert"),A1r=o(" \u2014 "),DW=a("a"),y1r=o("TFDistilBertForTokenClassification"),L1r=o(" (DistilBERT model)"),x1r=l(),S5=a("li"),lve=a("strong"),$1r=o("electra"),k1r=o(" \u2014 "),GW=a("a"),S1r=o("TFElectraForTokenClassification"),R1r=o(" (ELECTRA model)"),B1r=l(),R5=a("li"),ive=a("strong"),P1r=o("flaubert"),I1r=o(" \u2014 "),OW=a("a"),q1r=o("TFFlaubertForTokenClassification"),N1r=o(" (FlauBERT model)"),j1r=l(),B5=a("li"),dve=a("strong"),D1r=o("funnel"),G1r=o(" \u2014 "),VW=a("a"),O1r=o("TFFunnelForTokenClassification"),V1r=o(" (Funnel Transformer model)"),X1r=l(),P5=a("li"),cve=a("strong"),z1r=o("layoutlm"),Q1r=o(" \u2014 "),XW=a("a"),W1r=o("TFLayoutLMForTokenClassification"),H1r=o(" (LayoutLM model)"),U1r=l(),I5=a("li"),mve=a("strong"),J1r=o("longformer"),Y1r=o(" \u2014 "),zW=a("a"),K1r=o("TFLongformerForTokenClassification"),Z1r=o(" (Longformer model)"),eTr=l(),q5=a("li"),fve=a("strong"),oTr=o("mobilebert"),rTr=o(" \u2014 "),QW=a("a"),tTr=o("TFMobileBertForTokenClassification"),aTr=o(" (MobileBERT model)"),nTr=l(),N5=a("li"),gve=a("strong"),sTr=o("mpnet"),lTr=o(" \u2014 "),WW=a("a"),iTr=o("TFMPNetForTokenClassification"),dTr=o(" (MPNet model)"),cTr=l(),j5=a("li"),hve=a("strong"),mTr=o("rembert"),fTr=o(" \u2014 "),HW=a("a"),gTr=o("TFRemBertForTokenClassification"),hTr=o(" (RemBERT model)"),uTr=l(),D5=a("li"),uve=a("strong"),pTr=o("roberta"),_Tr=o(" \u2014 "),UW=a("a"),bTr=o("TFRobertaForTokenClassification"),FTr=o(" (RoBERTa model)"),vTr=l(),G5=a("li"),pve=a("strong"),TTr=o("roformer"),MTr=o(" \u2014 "),JW=a("a"),ETr=o("TFRoFormerForTokenClassification"),CTr=o(" (RoFormer model)"),wTr=l(),O5=a("li"),_ve=a("strong"),ATr=o("xlm"),yTr=o(" \u2014 "),YW=a("a"),LTr=o("TFXLMForTokenClassification"),xTr=o(" (XLM model)"),$Tr=l(),V5=a("li"),bve=a("strong"),kTr=o("xlm-roberta"),STr=o(" \u2014 "),KW=a("a"),RTr=o("TFXLMRobertaForTokenClassification"),BTr=o(" (XLM-RoBERTa model)"),PTr=l(),X5=a("li"),Fve=a("strong"),ITr=o("xlnet"),qTr=o(" \u2014 "),ZW=a("a"),NTr=o("TFXLNetForTokenClassification"),jTr=o(" (XLNet model)"),DTr=l(),v(z5.$$.fragment),$Pe=l(),lc=a("h2"),Q5=a("a"),vve=a("span"),v(Z8.$$.fragment),GTr=l(),Tve=a("span"),OTr=o("TFAutoModelForQuestionAnswering"),kPe=l(),lr=a("div"),v(e7.$$.fragment),VTr=l(),ic=a("p"),XTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=a("a"),zTr=o("from_pretrained()"),QTr=o(" class method or the "),oH=a("a"),WTr=o("from_config()"),HTr=o(` class
method.`),UTr=l(),o7=a("p"),JTr=o("This class cannot be instantiated directly using "),Mve=a("code"),YTr=o("__init__()"),KTr=o(" (throws an error)."),ZTr=l(),Rt=a("div"),v(r7.$$.fragment),eMr=l(),Eve=a("p"),oMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rMr=l(),dc=a("p"),tMr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),aMr=o("not"),nMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),sMr=o("from_pretrained()"),lMr=o(" to load the model weights."),iMr=l(),v(W5.$$.fragment),dMr=l(),Br=a("div"),v(t7.$$.fragment),cMr=l(),wve=a("p"),mMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fMr=l(),nn=a("p"),gMr=o("The model class to instantiate is selected based on the "),Ave=a("code"),hMr=o("model_type"),uMr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),bMr=o("pretrained_model_name_or_path"),FMr=o(":"),vMr=l(),ce=a("ul"),H5=a("li"),xve=a("strong"),TMr=o("albert"),MMr=o(" \u2014 "),tH=a("a"),EMr=o("TFAlbertForQuestionAnswering"),CMr=o(" (ALBERT model)"),wMr=l(),U5=a("li"),$ve=a("strong"),AMr=o("bert"),yMr=o(" \u2014 "),aH=a("a"),LMr=o("TFBertForQuestionAnswering"),xMr=o(" (BERT model)"),$Mr=l(),J5=a("li"),kve=a("strong"),kMr=o("camembert"),SMr=o(" \u2014 "),nH=a("a"),RMr=o("TFCamembertForQuestionAnswering"),BMr=o(" (CamemBERT model)"),PMr=l(),Y5=a("li"),Sve=a("strong"),IMr=o("convbert"),qMr=o(" \u2014 "),sH=a("a"),NMr=o("TFConvBertForQuestionAnswering"),jMr=o(" (ConvBERT model)"),DMr=l(),K5=a("li"),Rve=a("strong"),GMr=o("deberta"),OMr=o(" \u2014 "),lH=a("a"),VMr=o("TFDebertaForQuestionAnswering"),XMr=o(" (DeBERTa model)"),zMr=l(),Z5=a("li"),Bve=a("strong"),QMr=o("deberta-v2"),WMr=o(" \u2014 "),iH=a("a"),HMr=o("TFDebertaV2ForQuestionAnswering"),UMr=o(" (DeBERTa-v2 model)"),JMr=l(),eC=a("li"),Pve=a("strong"),YMr=o("distilbert"),KMr=o(" \u2014 "),dH=a("a"),ZMr=o("TFDistilBertForQuestionAnswering"),e4r=o(" (DistilBERT model)"),o4r=l(),oC=a("li"),Ive=a("strong"),r4r=o("electra"),t4r=o(" \u2014 "),cH=a("a"),a4r=o("TFElectraForQuestionAnswering"),n4r=o(" (ELECTRA model)"),s4r=l(),rC=a("li"),qve=a("strong"),l4r=o("flaubert"),i4r=o(" \u2014 "),mH=a("a"),d4r=o("TFFlaubertForQuestionAnsweringSimple"),c4r=o(" (FlauBERT model)"),m4r=l(),tC=a("li"),Nve=a("strong"),f4r=o("funnel"),g4r=o(" \u2014 "),fH=a("a"),h4r=o("TFFunnelForQuestionAnswering"),u4r=o(" (Funnel Transformer model)"),p4r=l(),aC=a("li"),jve=a("strong"),_4r=o("gptj"),b4r=o(" \u2014 "),gH=a("a"),F4r=o("TFGPTJForQuestionAnswering"),v4r=o(" (GPT-J model)"),T4r=l(),nC=a("li"),Dve=a("strong"),M4r=o("longformer"),E4r=o(" \u2014 "),hH=a("a"),C4r=o("TFLongformerForQuestionAnswering"),w4r=o(" (Longformer model)"),A4r=l(),sC=a("li"),Gve=a("strong"),y4r=o("mobilebert"),L4r=o(" \u2014 "),uH=a("a"),x4r=o("TFMobileBertForQuestionAnswering"),$4r=o(" (MobileBERT model)"),k4r=l(),lC=a("li"),Ove=a("strong"),S4r=o("mpnet"),R4r=o(" \u2014 "),pH=a("a"),B4r=o("TFMPNetForQuestionAnswering"),P4r=o(" (MPNet model)"),I4r=l(),iC=a("li"),Vve=a("strong"),q4r=o("rembert"),N4r=o(" \u2014 "),_H=a("a"),j4r=o("TFRemBertForQuestionAnswering"),D4r=o(" (RemBERT model)"),G4r=l(),dC=a("li"),Xve=a("strong"),O4r=o("roberta"),V4r=o(" \u2014 "),bH=a("a"),X4r=o("TFRobertaForQuestionAnswering"),z4r=o(" (RoBERTa model)"),Q4r=l(),cC=a("li"),zve=a("strong"),W4r=o("roformer"),H4r=o(" \u2014 "),FH=a("a"),U4r=o("TFRoFormerForQuestionAnswering"),J4r=o(" (RoFormer model)"),Y4r=l(),mC=a("li"),Qve=a("strong"),K4r=o("xlm"),Z4r=o(" \u2014 "),vH=a("a"),eEr=o("TFXLMForQuestionAnsweringSimple"),oEr=o(" (XLM model)"),rEr=l(),fC=a("li"),Wve=a("strong"),tEr=o("xlm-roberta"),aEr=o(" \u2014 "),TH=a("a"),nEr=o("TFXLMRobertaForQuestionAnswering"),sEr=o(" (XLM-RoBERTa model)"),lEr=l(),gC=a("li"),Hve=a("strong"),iEr=o("xlnet"),dEr=o(" \u2014 "),MH=a("a"),cEr=o("TFXLNetForQuestionAnsweringSimple"),mEr=o(" (XLNet model)"),fEr=l(),v(hC.$$.fragment),SPe=l(),cc=a("h2"),uC=a("a"),Uve=a("span"),v(a7.$$.fragment),gEr=l(),Jve=a("span"),hEr=o("TFAutoModelForVision2Seq"),RPe=l(),ir=a("div"),v(n7.$$.fragment),uEr=l(),mc=a("p"),pEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EH=a("a"),_Er=o("from_pretrained()"),bEr=o(" class method or the "),CH=a("a"),FEr=o("from_config()"),vEr=o(` class
method.`),TEr=l(),s7=a("p"),MEr=o("This class cannot be instantiated directly using "),Yve=a("code"),EEr=o("__init__()"),CEr=o(" (throws an error)."),wEr=l(),Bt=a("div"),v(l7.$$.fragment),AEr=l(),Kve=a("p"),yEr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LEr=l(),fc=a("p"),xEr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),$Er=o("not"),kEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),SEr=o("from_pretrained()"),REr=o(" to load the model weights."),BEr=l(),v(pC.$$.fragment),PEr=l(),Pr=a("div"),v(i7.$$.fragment),IEr=l(),e1e=a("p"),qEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NEr=l(),sn=a("p"),jEr=o("The model class to instantiate is selected based on the "),o1e=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),a1e=a("ul"),_C=a("li"),n1e=a("strong"),WEr=o("vision-encoder-decoder"),HEr=o(" \u2014 "),AH=a("a"),UEr=o("TFVisionEncoderDecoderModel"),JEr=o(" (Vision Encoder decoder model)"),YEr=l(),v(bC.$$.fragment),BPe=l(),gc=a("h2"),FC=a("a"),s1e=a("span"),v(d7.$$.fragment),KEr=l(),l1e=a("span"),ZEr=o("TFAutoModelForSpeechSeq2Seq"),PPe=l(),dr=a("div"),v(c7.$$.fragment),e5r=l(),hc=a("p"),o5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=a("a"),r5r=o("from_pretrained()"),t5r=o(" class method or the "),LH=a("a"),a5r=o("from_config()"),n5r=o(` class
method.`),s5r=l(),m7=a("p"),l5r=o("This class cannot be instantiated directly using "),i1e=a("code"),i5r=o("__init__()"),d5r=o(" (throws an error)."),c5r=l(),Pt=a("div"),v(f7.$$.fragment),m5r=l(),d1e=a("p"),f5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),g5r=l(),uc=a("p"),h5r=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),u5r=o("not"),p5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),_5r=o("from_pretrained()"),b5r=o(" to load the model weights."),F5r=l(),v(vC.$$.fragment),v5r=l(),Ir=a("div"),v(g7.$$.fragment),T5r=l(),m1e=a("p"),M5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),E5r=l(),ln=a("p"),C5r=o("The model class to instantiate is selected based on the "),f1e=a("code"),w5r=o("model_type"),A5r=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),y5r=o("pretrained_model_name_or_path"),L5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(":"),k5r=l(),u1e=a("ul"),TC=a("li"),p1e=a("strong"),S5r=o("speech_to_text"),R5r=o(" \u2014 "),$H=a("a"),B5r=o("TFSpeech2TextForConditionalGeneration"),P5r=o(" (Speech2Text model)"),I5r=l(),v(MC.$$.fragment),IPe=l(),pc=a("h2"),EC=a("a"),_1e=a("span"),v(h7.$$.fragment),q5r=l(),b1e=a("span"),N5r=o("FlaxAutoModel"),qPe=l(),cr=a("div"),v(u7.$$.fragment),j5r=l(),_c=a("p"),D5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kH=a("a"),G5r=o("from_pretrained()"),O5r=o(" class method or the "),SH=a("a"),V5r=o("from_config()"),X5r=o(` class
method.`),z5r=l(),p7=a("p"),Q5r=o("This class cannot be instantiated directly using "),F1e=a("code"),W5r=o("__init__()"),H5r=o(" (throws an error)."),U5r=l(),It=a("div"),v(_7.$$.fragment),J5r=l(),v1e=a("p"),Y5r=o("Instantiates one of the base model classes of the library from a configuration."),K5r=l(),bc=a("p"),Z5r=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),eCr=o("not"),oCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),rCr=o("from_pretrained()"),tCr=o(" to load the model weights."),aCr=l(),v(CC.$$.fragment),nCr=l(),qr=a("div"),v(b7.$$.fragment),sCr=l(),M1e=a("p"),lCr=o("Instantiate one of the base model classes of the library from a pretrained model."),iCr=l(),dn=a("p"),dCr=o("The model class to instantiate is selected based on the "),E1e=a("code"),cCr=o("model_type"),mCr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),fCr=o("pretrained_model_name_or_path"),gCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),hCr=o("pretrained_model_name_or_path"),uCr=o(":"),pCr=l(),oe=a("ul"),wC=a("li"),A1e=a("strong"),_Cr=o("albert"),bCr=o(" \u2014 "),BH=a("a"),FCr=o("FlaxAlbertModel"),vCr=o(" (ALBERT model)"),TCr=l(),AC=a("li"),y1e=a("strong"),MCr=o("bart"),ECr=o(" \u2014 "),PH=a("a"),CCr=o("FlaxBartModel"),wCr=o(" (BART model)"),ACr=l(),yC=a("li"),L1e=a("strong"),yCr=o("beit"),LCr=o(" \u2014 "),IH=a("a"),xCr=o("FlaxBeitModel"),$Cr=o(" (BEiT model)"),kCr=l(),LC=a("li"),x1e=a("strong"),SCr=o("bert"),RCr=o(" \u2014 "),qH=a("a"),BCr=o("FlaxBertModel"),PCr=o(" (BERT model)"),ICr=l(),xC=a("li"),$1e=a("strong"),qCr=o("big_bird"),NCr=o(" \u2014 "),NH=a("a"),jCr=o("FlaxBigBirdModel"),DCr=o(" (BigBird model)"),GCr=l(),$C=a("li"),k1e=a("strong"),OCr=o("blenderbot"),VCr=o(" \u2014 "),jH=a("a"),XCr=o("FlaxBlenderbotModel"),zCr=o(" (Blenderbot model)"),QCr=l(),kC=a("li"),S1e=a("strong"),WCr=o("blenderbot-small"),HCr=o(" \u2014 "),DH=a("a"),UCr=o("FlaxBlenderbotSmallModel"),JCr=o(" (BlenderbotSmall model)"),YCr=l(),SC=a("li"),R1e=a("strong"),KCr=o("clip"),ZCr=o(" \u2014 "),GH=a("a"),e3r=o("FlaxCLIPModel"),o3r=o(" (CLIP model)"),r3r=l(),RC=a("li"),B1e=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),OH=a("a"),n3r=o("FlaxDistilBertModel"),s3r=o(" (DistilBERT model)"),l3r=l(),BC=a("li"),P1e=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),VH=a("a"),c3r=o("FlaxElectraModel"),m3r=o(" (ELECTRA model)"),f3r=l(),PC=a("li"),I1e=a("strong"),g3r=o("gpt2"),h3r=o(" \u2014 "),XH=a("a"),u3r=o("FlaxGPT2Model"),p3r=o(" (OpenAI GPT-2 model)"),_3r=l(),IC=a("li"),q1e=a("strong"),b3r=o("gpt_neo"),F3r=o(" \u2014 "),zH=a("a"),v3r=o("FlaxGPTNeoModel"),T3r=o(" (GPT Neo model)"),M3r=l(),qC=a("li"),N1e=a("strong"),E3r=o("gptj"),C3r=o(" \u2014 "),QH=a("a"),w3r=o("FlaxGPTJModel"),A3r=o(" (GPT-J model)"),y3r=l(),NC=a("li"),j1e=a("strong"),L3r=o("marian"),x3r=o(" \u2014 "),WH=a("a"),$3r=o("FlaxMarianModel"),k3r=o(" (Marian model)"),S3r=l(),jC=a("li"),D1e=a("strong"),R3r=o("mbart"),B3r=o(" \u2014 "),HH=a("a"),P3r=o("FlaxMBartModel"),I3r=o(" (mBART model)"),q3r=l(),DC=a("li"),G1e=a("strong"),N3r=o("mt5"),j3r=o(" \u2014 "),UH=a("a"),D3r=o("FlaxMT5Model"),G3r=o(" (mT5 model)"),O3r=l(),GC=a("li"),O1e=a("strong"),V3r=o("pegasus"),X3r=o(" \u2014 "),JH=a("a"),z3r=o("FlaxPegasusModel"),Q3r=o(" (Pegasus model)"),W3r=l(),OC=a("li"),V1e=a("strong"),H3r=o("roberta"),U3r=o(" \u2014 "),YH=a("a"),J3r=o("FlaxRobertaModel"),Y3r=o(" (RoBERTa model)"),K3r=l(),VC=a("li"),X1e=a("strong"),Z3r=o("roformer"),ewr=o(" \u2014 "),KH=a("a"),owr=o("FlaxRoFormerModel"),rwr=o(" (RoFormer model)"),twr=l(),XC=a("li"),z1e=a("strong"),awr=o("t5"),nwr=o(" \u2014 "),ZH=a("a"),swr=o("FlaxT5Model"),lwr=o(" (T5 model)"),iwr=l(),zC=a("li"),Q1e=a("strong"),dwr=o("vision-text-dual-encoder"),cwr=o(" \u2014 "),eU=a("a"),mwr=o("FlaxVisionTextDualEncoderModel"),fwr=o(" (VisionTextDualEncoder model)"),gwr=l(),QC=a("li"),W1e=a("strong"),hwr=o("vit"),uwr=o(" \u2014 "),oU=a("a"),pwr=o("FlaxViTModel"),_wr=o(" (ViT model)"),bwr=l(),WC=a("li"),H1e=a("strong"),Fwr=o("wav2vec2"),vwr=o(" \u2014 "),rU=a("a"),Twr=o("FlaxWav2Vec2Model"),Mwr=o(" (Wav2Vec2 model)"),Ewr=l(),HC=a("li"),U1e=a("strong"),Cwr=o("xglm"),wwr=o(" \u2014 "),tU=a("a"),Awr=o("FlaxXGLMModel"),ywr=o(" (XGLM model)"),Lwr=l(),UC=a("li"),J1e=a("strong"),xwr=o("xlm-roberta"),$wr=o(" \u2014 "),aU=a("a"),kwr=o("FlaxXLMRobertaModel"),Swr=o(" (XLM-RoBERTa model)"),Rwr=l(),v(JC.$$.fragment),NPe=l(),Fc=a("h2"),YC=a("a"),Y1e=a("span"),v(F7.$$.fragment),Bwr=l(),K1e=a("span"),Pwr=o("FlaxAutoModelForCausalLM"),jPe=l(),mr=a("div"),v(v7.$$.fragment),Iwr=l(),vc=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nU=a("a"),Nwr=o("from_pretrained()"),jwr=o(" class method or the "),sU=a("a"),Dwr=o("from_config()"),Gwr=o(` class
method.`),Owr=l(),T7=a("p"),Vwr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Xwr=o("__init__()"),zwr=o(" (throws an error)."),Qwr=l(),qt=a("div"),v(M7.$$.fragment),Wwr=l(),eTe=a("p"),Hwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Uwr=l(),Tc=a("p"),Jwr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Ywr=o("not"),Kwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),Zwr=o("from_pretrained()"),eAr=o(" to load the model weights."),oAr=l(),v(KC.$$.fragment),rAr=l(),Nr=a("div"),v(E7.$$.fragment),tAr=l(),rTe=a("p"),aAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nAr=l(),cn=a("p"),sAr=o("The model class to instantiate is selected based on the "),tTe=a("code"),lAr=o("model_type"),iAr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),dAr=o("pretrained_model_name_or_path"),cAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),mAr=o("pretrained_model_name_or_path"),fAr=o(":"),gAr=l(),ke=a("ul"),ZC=a("li"),sTe=a("strong"),hAr=o("bart"),uAr=o(" \u2014 "),iU=a("a"),pAr=o("FlaxBartForCausalLM"),_Ar=o(" (BART model)"),bAr=l(),e3=a("li"),lTe=a("strong"),FAr=o("bert"),vAr=o(" \u2014 "),dU=a("a"),TAr=o("FlaxBertForCausalLM"),MAr=o(" (BERT model)"),EAr=l(),o3=a("li"),iTe=a("strong"),CAr=o("big_bird"),wAr=o(" \u2014 "),cU=a("a"),AAr=o("FlaxBigBirdForCausalLM"),yAr=o(" (BigBird model)"),LAr=l(),r3=a("li"),dTe=a("strong"),xAr=o("electra"),$Ar=o(" \u2014 "),mU=a("a"),kAr=o("FlaxElectraForCausalLM"),SAr=o(" (ELECTRA model)"),RAr=l(),t3=a("li"),cTe=a("strong"),BAr=o("gpt2"),PAr=o(" \u2014 "),fU=a("a"),IAr=o("FlaxGPT2LMHeadModel"),qAr=o(" (OpenAI GPT-2 model)"),NAr=l(),a3=a("li"),mTe=a("strong"),jAr=o("gpt_neo"),DAr=o(" \u2014 "),gU=a("a"),GAr=o("FlaxGPTNeoForCausalLM"),OAr=o(" (GPT Neo model)"),VAr=l(),n3=a("li"),fTe=a("strong"),XAr=o("gptj"),zAr=o(" \u2014 "),hU=a("a"),QAr=o("FlaxGPTJForCausalLM"),WAr=o(" (GPT-J model)"),HAr=l(),s3=a("li"),gTe=a("strong"),UAr=o("roberta"),JAr=o(" \u2014 "),uU=a("a"),YAr=o("FlaxRobertaForCausalLM"),KAr=o(" (RoBERTa model)"),ZAr=l(),l3=a("li"),hTe=a("strong"),e0r=o("xglm"),o0r=o(" \u2014 "),pU=a("a"),r0r=o("FlaxXGLMForCausalLM"),t0r=o(" (XGLM model)"),a0r=l(),v(i3.$$.fragment),DPe=l(),Mc=a("h2"),d3=a("a"),uTe=a("span"),v(C7.$$.fragment),n0r=l(),pTe=a("span"),s0r=o("FlaxAutoModelForPreTraining"),GPe=l(),fr=a("div"),v(w7.$$.fragment),l0r=l(),Ec=a("p"),i0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_U=a("a"),d0r=o("from_pretrained()"),c0r=o(" class method or the "),bU=a("a"),m0r=o("from_config()"),f0r=o(` class
method.`),g0r=l(),A7=a("p"),h0r=o("This class cannot be instantiated directly using "),_Te=a("code"),u0r=o("__init__()"),p0r=o(" (throws an error)."),_0r=l(),Nt=a("div"),v(y7.$$.fragment),b0r=l(),bTe=a("p"),F0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v0r=l(),Cc=a("p"),T0r=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),M0r=o("not"),E0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),C0r=o("from_pretrained()"),w0r=o(" to load the model weights."),A0r=l(),v(c3.$$.fragment),y0r=l(),jr=a("div"),v(L7.$$.fragment),L0r=l(),vTe=a("p"),x0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$0r=l(),mn=a("p"),k0r=o("The model class to instantiate is selected based on the "),TTe=a("code"),S0r=o("model_type"),R0r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),B0r=o("pretrained_model_name_or_path"),P0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),I0r=o("pretrained_model_name_or_path"),q0r=o(":"),N0r=l(),Me=a("ul"),m3=a("li"),CTe=a("strong"),j0r=o("albert"),D0r=o(" \u2014 "),vU=a("a"),G0r=o("FlaxAlbertForPreTraining"),O0r=o(" (ALBERT model)"),V0r=l(),f3=a("li"),wTe=a("strong"),X0r=o("bart"),z0r=o(" \u2014 "),TU=a("a"),Q0r=o("FlaxBartForConditionalGeneration"),W0r=o(" (BART model)"),H0r=l(),g3=a("li"),ATe=a("strong"),U0r=o("bert"),J0r=o(" \u2014 "),MU=a("a"),Y0r=o("FlaxBertForPreTraining"),K0r=o(" (BERT model)"),Z0r=l(),h3=a("li"),yTe=a("strong"),e6r=o("big_bird"),o6r=o(" \u2014 "),EU=a("a"),r6r=o("FlaxBigBirdForPreTraining"),t6r=o(" (BigBird model)"),a6r=l(),u3=a("li"),LTe=a("strong"),n6r=o("electra"),s6r=o(" \u2014 "),CU=a("a"),l6r=o("FlaxElectraForPreTraining"),i6r=o(" (ELECTRA model)"),d6r=l(),p3=a("li"),xTe=a("strong"),c6r=o("mbart"),m6r=o(" \u2014 "),wU=a("a"),f6r=o("FlaxMBartForConditionalGeneration"),g6r=o(" (mBART model)"),h6r=l(),_3=a("li"),$Te=a("strong"),u6r=o("mt5"),p6r=o(" \u2014 "),AU=a("a"),_6r=o("FlaxMT5ForConditionalGeneration"),b6r=o(" (mT5 model)"),F6r=l(),b3=a("li"),kTe=a("strong"),v6r=o("roberta"),T6r=o(" \u2014 "),yU=a("a"),M6r=o("FlaxRobertaForMaskedLM"),E6r=o(" (RoBERTa model)"),C6r=l(),F3=a("li"),STe=a("strong"),w6r=o("roformer"),A6r=o(" \u2014 "),LU=a("a"),y6r=o("FlaxRoFormerForMaskedLM"),L6r=o(" (RoFormer model)"),x6r=l(),v3=a("li"),RTe=a("strong"),$6r=o("t5"),k6r=o(" \u2014 "),xU=a("a"),S6r=o("FlaxT5ForConditionalGeneration"),R6r=o(" (T5 model)"),B6r=l(),T3=a("li"),BTe=a("strong"),P6r=o("wav2vec2"),I6r=o(" \u2014 "),$U=a("a"),q6r=o("FlaxWav2Vec2ForPreTraining"),N6r=o(" (Wav2Vec2 model)"),j6r=l(),M3=a("li"),PTe=a("strong"),D6r=o("xlm-roberta"),G6r=o(" \u2014 "),kU=a("a"),O6r=o("FlaxXLMRobertaForMaskedLM"),V6r=o(" (XLM-RoBERTa model)"),X6r=l(),v(E3.$$.fragment),OPe=l(),wc=a("h2"),C3=a("a"),ITe=a("span"),v(x7.$$.fragment),z6r=l(),qTe=a("span"),Q6r=o("FlaxAutoModelForMaskedLM"),VPe=l(),gr=a("div"),v($7.$$.fragment),W6r=l(),Ac=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=a("a"),U6r=o("from_pretrained()"),J6r=o(" class method or the "),RU=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),k7=a("p"),eyr=o("This class cannot be instantiated directly using "),NTe=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),jt=a("div"),v(S7.$$.fragment),ayr=l(),jTe=a("p"),nyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),syr=l(),yc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=a("a"),cyr=o("from_pretrained()"),myr=o(" to load the model weights."),fyr=l(),v(w3.$$.fragment),gyr=l(),Dr=a("div"),v(R7.$$.fragment),hyr=l(),GTe=a("p"),uyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pyr=l(),fn=a("p"),_yr=o("The model class to instantiate is selected based on the "),OTe=a("code"),byr=o("model_type"),Fyr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),vyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),Le=a("ul"),A3=a("li"),zTe=a("strong"),wyr=o("albert"),Ayr=o(" \u2014 "),PU=a("a"),yyr=o("FlaxAlbertForMaskedLM"),Lyr=o(" (ALBERT model)"),xyr=l(),y3=a("li"),QTe=a("strong"),$yr=o("bart"),kyr=o(" \u2014 "),IU=a("a"),Syr=o("FlaxBartForConditionalGeneration"),Ryr=o(" (BART model)"),Byr=l(),L3=a("li"),WTe=a("strong"),Pyr=o("bert"),Iyr=o(" \u2014 "),qU=a("a"),qyr=o("FlaxBertForMaskedLM"),Nyr=o(" (BERT model)"),jyr=l(),x3=a("li"),HTe=a("strong"),Dyr=o("big_bird"),Gyr=o(" \u2014 "),NU=a("a"),Oyr=o("FlaxBigBirdForMaskedLM"),Vyr=o(" (BigBird model)"),Xyr=l(),$3=a("li"),UTe=a("strong"),zyr=o("distilbert"),Qyr=o(" \u2014 "),jU=a("a"),Wyr=o("FlaxDistilBertForMaskedLM"),Hyr=o(" (DistilBERT model)"),Uyr=l(),k3=a("li"),JTe=a("strong"),Jyr=o("electra"),Yyr=o(" \u2014 "),DU=a("a"),Kyr=o("FlaxElectraForMaskedLM"),Zyr=o(" (ELECTRA model)"),eLr=l(),S3=a("li"),YTe=a("strong"),oLr=o("mbart"),rLr=o(" \u2014 "),GU=a("a"),tLr=o("FlaxMBartForConditionalGeneration"),aLr=o(" (mBART model)"),nLr=l(),R3=a("li"),KTe=a("strong"),sLr=o("roberta"),lLr=o(" \u2014 "),OU=a("a"),iLr=o("FlaxRobertaForMaskedLM"),dLr=o(" (RoBERTa model)"),cLr=l(),B3=a("li"),ZTe=a("strong"),mLr=o("roformer"),fLr=o(" \u2014 "),VU=a("a"),gLr=o("FlaxRoFormerForMaskedLM"),hLr=o(" (RoFormer model)"),uLr=l(),P3=a("li"),eMe=a("strong"),pLr=o("xlm-roberta"),_Lr=o(" \u2014 "),XU=a("a"),bLr=o("FlaxXLMRobertaForMaskedLM"),FLr=o(" (XLM-RoBERTa model)"),vLr=l(),v(I3.$$.fragment),XPe=l(),Lc=a("h2"),q3=a("a"),oMe=a("span"),v(B7.$$.fragment),TLr=l(),rMe=a("span"),MLr=o("FlaxAutoModelForSeq2SeqLM"),zPe=l(),hr=a("div"),v(P7.$$.fragment),ELr=l(),xc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),QU=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),I7=a("p"),$Lr=o("This class cannot be instantiated directly using "),tMe=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Dt=a("div"),v(q7.$$.fragment),BLr=l(),aMe=a("p"),PLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ILr=l(),$c=a("p"),qLr=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),NLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),v(N3.$$.fragment),VLr=l(),Gr=a("div"),v(N7.$$.fragment),XLr=l(),sMe=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QLr=l(),gn=a("p"),WLr=o("The model class to instantiate is selected based on the "),lMe=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),Se=a("ul"),j3=a("li"),cMe=a("strong"),o8r=o("bart"),r8r=o(" \u2014 "),HU=a("a"),t8r=o("FlaxBartForConditionalGeneration"),a8r=o(" (BART model)"),n8r=l(),D3=a("li"),mMe=a("strong"),s8r=o("blenderbot"),l8r=o(" \u2014 "),UU=a("a"),i8r=o("FlaxBlenderbotForConditionalGeneration"),d8r=o(" (Blenderbot model)"),c8r=l(),G3=a("li"),fMe=a("strong"),m8r=o("blenderbot-small"),f8r=o(" \u2014 "),JU=a("a"),g8r=o("FlaxBlenderbotSmallForConditionalGeneration"),h8r=o(" (BlenderbotSmall model)"),u8r=l(),O3=a("li"),gMe=a("strong"),p8r=o("encoder-decoder"),_8r=o(" \u2014 "),YU=a("a"),b8r=o("FlaxEncoderDecoderModel"),F8r=o(" (Encoder decoder model)"),v8r=l(),V3=a("li"),hMe=a("strong"),T8r=o("marian"),M8r=o(" \u2014 "),KU=a("a"),E8r=o("FlaxMarianMTModel"),C8r=o(" (Marian model)"),w8r=l(),X3=a("li"),uMe=a("strong"),A8r=o("mbart"),y8r=o(" \u2014 "),ZU=a("a"),L8r=o("FlaxMBartForConditionalGeneration"),x8r=o(" (mBART model)"),$8r=l(),z3=a("li"),pMe=a("strong"),k8r=o("mt5"),S8r=o(" \u2014 "),eJ=a("a"),R8r=o("FlaxMT5ForConditionalGeneration"),B8r=o(" (mT5 model)"),P8r=l(),Q3=a("li"),_Me=a("strong"),I8r=o("pegasus"),q8r=o(" \u2014 "),oJ=a("a"),N8r=o("FlaxPegasusForConditionalGeneration"),j8r=o(" (Pegasus model)"),D8r=l(),W3=a("li"),bMe=a("strong"),G8r=o("t5"),O8r=o(" \u2014 "),rJ=a("a"),V8r=o("FlaxT5ForConditionalGeneration"),X8r=o(" (T5 model)"),z8r=l(),v(H3.$$.fragment),QPe=l(),kc=a("h2"),U3=a("a"),FMe=a("span"),v(j7.$$.fragment),Q8r=l(),vMe=a("span"),W8r=o("FlaxAutoModelForSequenceClassification"),WPe=l(),ur=a("div"),v(D7.$$.fragment),H8r=l(),Sc=a("p"),U8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tJ=a("a"),J8r=o("from_pretrained()"),Y8r=o(" class method or the "),aJ=a("a"),K8r=o("from_config()"),Z8r=o(` class
method.`),e7r=l(),G7=a("p"),o7r=o("This class cannot be instantiated directly using "),TMe=a("code"),r7r=o("__init__()"),t7r=o(" (throws an error)."),a7r=l(),Gt=a("div"),v(O7.$$.fragment),n7r=l(),MMe=a("p"),s7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l7r=l(),Rc=a("p"),i7r=o(`Note:
Loading a model from its configuration file does `),EMe=a("strong"),d7r=o("not"),c7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),m7r=o("from_pretrained()"),f7r=o(" to load the model weights."),g7r=l(),v(J3.$$.fragment),h7r=l(),Or=a("div"),v(V7.$$.fragment),u7r=l(),CMe=a("p"),p7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_7r=l(),hn=a("p"),b7r=o("The model class to instantiate is selected based on the "),wMe=a("code"),F7r=o("model_type"),v7r=o(` property of the config object (either
passed as an argument or loaded from `),AMe=a("code"),T7r=o("pretrained_model_name_or_path"),M7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(":"),w7r=l(),xe=a("ul"),Y3=a("li"),LMe=a("strong"),A7r=o("albert"),y7r=o(" \u2014 "),sJ=a("a"),L7r=o("FlaxAlbertForSequenceClassification"),x7r=o(" (ALBERT model)"),$7r=l(),K3=a("li"),xMe=a("strong"),k7r=o("bart"),S7r=o(" \u2014 "),lJ=a("a"),R7r=o("FlaxBartForSequenceClassification"),B7r=o(" (BART model)"),P7r=l(),Z3=a("li"),$Me=a("strong"),I7r=o("bert"),q7r=o(" \u2014 "),iJ=a("a"),N7r=o("FlaxBertForSequenceClassification"),j7r=o(" (BERT model)"),D7r=l(),ew=a("li"),kMe=a("strong"),G7r=o("big_bird"),O7r=o(" \u2014 "),dJ=a("a"),V7r=o("FlaxBigBirdForSequenceClassification"),X7r=o(" (BigBird model)"),z7r=l(),ow=a("li"),SMe=a("strong"),Q7r=o("distilbert"),W7r=o(" \u2014 "),cJ=a("a"),H7r=o("FlaxDistilBertForSequenceClassification"),U7r=o(" (DistilBERT model)"),J7r=l(),rw=a("li"),RMe=a("strong"),Y7r=o("electra"),K7r=o(" \u2014 "),mJ=a("a"),Z7r=o("FlaxElectraForSequenceClassification"),exr=o(" (ELECTRA model)"),oxr=l(),tw=a("li"),BMe=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),fJ=a("a"),axr=o("FlaxMBartForSequenceClassification"),nxr=o(" (mBART model)"),sxr=l(),aw=a("li"),PMe=a("strong"),lxr=o("roberta"),ixr=o(" \u2014 "),gJ=a("a"),dxr=o("FlaxRobertaForSequenceClassification"),cxr=o(" (RoBERTa model)"),mxr=l(),nw=a("li"),IMe=a("strong"),fxr=o("roformer"),gxr=o(" \u2014 "),hJ=a("a"),hxr=o("FlaxRoFormerForSequenceClassification"),uxr=o(" (RoFormer model)"),pxr=l(),sw=a("li"),qMe=a("strong"),_xr=o("xlm-roberta"),bxr=o(" \u2014 "),uJ=a("a"),Fxr=o("FlaxXLMRobertaForSequenceClassification"),vxr=o(" (XLM-RoBERTa model)"),Txr=l(),v(lw.$$.fragment),HPe=l(),Bc=a("h2"),iw=a("a"),NMe=a("span"),v(X7.$$.fragment),Mxr=l(),jMe=a("span"),Exr=o("FlaxAutoModelForQuestionAnswering"),UPe=l(),pr=a("div"),v(z7.$$.fragment),Cxr=l(),Pc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pJ=a("a"),Axr=o("from_pretrained()"),yxr=o(" class method or the "),_J=a("a"),Lxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),Q7=a("p"),kxr=o("This class cannot be instantiated directly using "),DMe=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Bxr=l(),Ot=a("div"),v(W7.$$.fragment),Pxr=l(),GMe=a("p"),Ixr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qxr=l(),Ic=a("p"),Nxr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),v(dw.$$.fragment),Xxr=l(),Vr=a("div"),v(H7.$$.fragment),zxr=l(),VMe=a("p"),Qxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wxr=l(),un=a("p"),Hxr=o("The model class to instantiate is selected based on the "),XMe=a("code"),Uxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),Zxr=o("pretrained_model_name_or_path"),e9r=o(":"),o9r=l(),$e=a("ul"),cw=a("li"),WMe=a("strong"),r9r=o("albert"),t9r=o(" \u2014 "),FJ=a("a"),a9r=o("FlaxAlbertForQuestionAnswering"),n9r=o(" (ALBERT model)"),s9r=l(),mw=a("li"),HMe=a("strong"),l9r=o("bart"),i9r=o(" \u2014 "),vJ=a("a"),d9r=o("FlaxBartForQuestionAnswering"),c9r=o(" (BART model)"),m9r=l(),fw=a("li"),UMe=a("strong"),f9r=o("bert"),g9r=o(" \u2014 "),TJ=a("a"),h9r=o("FlaxBertForQuestionAnswering"),u9r=o(" (BERT model)"),p9r=l(),gw=a("li"),JMe=a("strong"),_9r=o("big_bird"),b9r=o(" \u2014 "),MJ=a("a"),F9r=o("FlaxBigBirdForQuestionAnswering"),v9r=o(" (BigBird model)"),T9r=l(),hw=a("li"),YMe=a("strong"),M9r=o("distilbert"),E9r=o(" \u2014 "),EJ=a("a"),C9r=o("FlaxDistilBertForQuestionAnswering"),w9r=o(" (DistilBERT model)"),A9r=l(),uw=a("li"),KMe=a("strong"),y9r=o("electra"),L9r=o(" \u2014 "),CJ=a("a"),x9r=o("FlaxElectraForQuestionAnswering"),$9r=o(" (ELECTRA model)"),k9r=l(),pw=a("li"),ZMe=a("strong"),S9r=o("mbart"),R9r=o(" \u2014 "),wJ=a("a"),B9r=o("FlaxMBartForQuestionAnswering"),P9r=o(" (mBART model)"),I9r=l(),_w=a("li"),e4e=a("strong"),q9r=o("roberta"),N9r=o(" \u2014 "),AJ=a("a"),j9r=o("FlaxRobertaForQuestionAnswering"),D9r=o(" (RoBERTa model)"),G9r=l(),bw=a("li"),o4e=a("strong"),O9r=o("roformer"),V9r=o(" \u2014 "),yJ=a("a"),X9r=o("FlaxRoFormerForQuestionAnswering"),z9r=o(" (RoFormer model)"),Q9r=l(),Fw=a("li"),r4e=a("strong"),W9r=o("xlm-roberta"),H9r=o(" \u2014 "),LJ=a("a"),U9r=o("FlaxXLMRobertaForQuestionAnswering"),J9r=o(" (XLM-RoBERTa model)"),Y9r=l(),v(vw.$$.fragment),JPe=l(),qc=a("h2"),Tw=a("a"),t4e=a("span"),v(U7.$$.fragment),K9r=l(),a4e=a("span"),Z9r=o("FlaxAutoModelForTokenClassification"),YPe=l(),_r=a("div"),v(J7.$$.fragment),e$r=l(),Nc=a("p"),o$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xJ=a("a"),r$r=o("from_pretrained()"),t$r=o(" class method or the "),$J=a("a"),a$r=o("from_config()"),n$r=o(` class
method.`),s$r=l(),Y7=a("p"),l$r=o("This class cannot be instantiated directly using "),n4e=a("code"),i$r=o("__init__()"),d$r=o(" (throws an error)."),c$r=l(),Vt=a("div"),v(K7.$$.fragment),m$r=l(),s4e=a("p"),f$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g$r=l(),jc=a("p"),h$r=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),u$r=o("not"),p$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),_$r=o("from_pretrained()"),b$r=o(" to load the model weights."),F$r=l(),v(Mw.$$.fragment),v$r=l(),Xr=a("div"),v(Z7.$$.fragment),T$r=l(),i4e=a("p"),M$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E$r=l(),pn=a("p"),C$r=o("The model class to instantiate is selected based on the "),d4e=a("code"),w$r=o("model_type"),A$r=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),x$r=o("pretrained_model_name_or_path"),$$r=o(":"),k$r=l(),De=a("ul"),Ew=a("li"),f4e=a("strong"),S$r=o("albert"),R$r=o(" \u2014 "),SJ=a("a"),B$r=o("FlaxAlbertForTokenClassification"),P$r=o(" (ALBERT model)"),I$r=l(),Cw=a("li"),g4e=a("strong"),q$r=o("bert"),N$r=o(" \u2014 "),RJ=a("a"),j$r=o("FlaxBertForTokenClassification"),D$r=o(" (BERT model)"),G$r=l(),ww=a("li"),h4e=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),BJ=a("a"),X$r=o("FlaxBigBirdForTokenClassification"),z$r=o(" (BigBird model)"),Q$r=l(),Aw=a("li"),u4e=a("strong"),W$r=o("distilbert"),H$r=o(" \u2014 "),PJ=a("a"),U$r=o("FlaxDistilBertForTokenClassification"),J$r=o(" (DistilBERT model)"),Y$r=l(),yw=a("li"),p4e=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),IJ=a("a"),ekr=o("FlaxElectraForTokenClassification"),okr=o(" (ELECTRA model)"),rkr=l(),Lw=a("li"),_4e=a("strong"),tkr=o("roberta"),akr=o(" \u2014 "),qJ=a("a"),nkr=o("FlaxRobertaForTokenClassification"),skr=o(" (RoBERTa model)"),lkr=l(),xw=a("li"),b4e=a("strong"),ikr=o("roformer"),dkr=o(" \u2014 "),NJ=a("a"),ckr=o("FlaxRoFormerForTokenClassification"),mkr=o(" (RoFormer model)"),fkr=l(),$w=a("li"),F4e=a("strong"),gkr=o("xlm-roberta"),hkr=o(" \u2014 "),jJ=a("a"),ukr=o("FlaxXLMRobertaForTokenClassification"),pkr=o(" (XLM-RoBERTa model)"),_kr=l(),v(kw.$$.fragment),KPe=l(),Dc=a("h2"),Sw=a("a"),v4e=a("span"),v(ex.$$.fragment),bkr=l(),T4e=a("span"),Fkr=o("FlaxAutoModelForMultipleChoice"),ZPe=l(),br=a("div"),v(ox.$$.fragment),vkr=l(),Gc=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DJ=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),GJ=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),rx=a("p"),ykr=o("This class cannot be instantiated directly using "),M4e=a("code"),Lkr=o("__init__()"),xkr=o(" (throws an error)."),$kr=l(),Xt=a("div"),v(tx.$$.fragment),kkr=l(),E4e=a("p"),Skr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rkr=l(),Oc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),C4e=a("strong"),Pkr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),qkr=o("from_pretrained()"),Nkr=o(" to load the model weights."),jkr=l(),v(Rw.$$.fragment),Dkr=l(),zr=a("div"),v(ax.$$.fragment),Gkr=l(),w4e=a("p"),Okr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vkr=l(),_n=a("p"),Xkr=o("The model class to instantiate is selected based on the "),A4e=a("code"),zkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),Wkr=o("pretrained_model_name_or_path"),Hkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(":"),Ykr=l(),Ge=a("ul"),Bw=a("li"),x4e=a("strong"),Kkr=o("albert"),Zkr=o(" \u2014 "),VJ=a("a"),eSr=o("FlaxAlbertForMultipleChoice"),oSr=o(" (ALBERT model)"),rSr=l(),Pw=a("li"),$4e=a("strong"),tSr=o("bert"),aSr=o(" \u2014 "),XJ=a("a"),nSr=o("FlaxBertForMultipleChoice"),sSr=o(" (BERT model)"),lSr=l(),Iw=a("li"),k4e=a("strong"),iSr=o("big_bird"),dSr=o(" \u2014 "),zJ=a("a"),cSr=o("FlaxBigBirdForMultipleChoice"),mSr=o(" (BigBird model)"),fSr=l(),qw=a("li"),S4e=a("strong"),gSr=o("distilbert"),hSr=o(" \u2014 "),QJ=a("a"),uSr=o("FlaxDistilBertForMultipleChoice"),pSr=o(" (DistilBERT model)"),_Sr=l(),Nw=a("li"),R4e=a("strong"),bSr=o("electra"),FSr=o(" \u2014 "),WJ=a("a"),vSr=o("FlaxElectraForMultipleChoice"),TSr=o(" (ELECTRA model)"),MSr=l(),jw=a("li"),B4e=a("strong"),ESr=o("roberta"),CSr=o(" \u2014 "),HJ=a("a"),wSr=o("FlaxRobertaForMultipleChoice"),ASr=o(" (RoBERTa model)"),ySr=l(),Dw=a("li"),P4e=a("strong"),LSr=o("roformer"),xSr=o(" \u2014 "),UJ=a("a"),$Sr=o("FlaxRoFormerForMultipleChoice"),kSr=o(" (RoFormer model)"),SSr=l(),Gw=a("li"),I4e=a("strong"),RSr=o("xlm-roberta"),BSr=o(" \u2014 "),JJ=a("a"),PSr=o("FlaxXLMRobertaForMultipleChoice"),ISr=o(" (XLM-RoBERTa model)"),qSr=l(),v(Ow.$$.fragment),eIe=l(),Vc=a("h2"),Vw=a("a"),q4e=a("span"),v(nx.$$.fragment),NSr=l(),N4e=a("span"),jSr=o("FlaxAutoModelForNextSentencePrediction"),oIe=l(),Fr=a("div"),v(sx.$$.fragment),DSr=l(),Xc=a("p"),GSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=a("a"),OSr=o("from_pretrained()"),VSr=o(" class method or the "),KJ=a("a"),XSr=o("from_config()"),zSr=o(` class
method.`),QSr=l(),lx=a("p"),WSr=o("This class cannot be instantiated directly using "),j4e=a("code"),HSr=o("__init__()"),USr=o(" (throws an error)."),JSr=l(),zt=a("div"),v(ix.$$.fragment),YSr=l(),D4e=a("p"),KSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZSr=l(),zc=a("p"),eRr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),oRr=o("not"),rRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),tRr=o("from_pretrained()"),aRr=o(" to load the model weights."),nRr=l(),v(Xw.$$.fragment),sRr=l(),Qr=a("div"),v(dx.$$.fragment),lRr=l(),O4e=a("p"),iRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dRr=l(),bn=a("p"),cRr=o("The model class to instantiate is selected based on the "),V4e=a("code"),mRr=o("model_type"),fRr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),uRr=o("pretrained_model_name_or_path"),pRr=o(":"),_Rr=l(),Q4e=a("ul"),zw=a("li"),W4e=a("strong"),bRr=o("bert"),FRr=o(" \u2014 "),eY=a("a"),vRr=o("FlaxBertForNextSentencePrediction"),TRr=o(" (BERT model)"),MRr=l(),v(Qw.$$.fragment),rIe=l(),Qc=a("h2"),Ww=a("a"),H4e=a("span"),v(cx.$$.fragment),ERr=l(),U4e=a("span"),CRr=o("FlaxAutoModelForImageClassification"),tIe=l(),vr=a("div"),v(mx.$$.fragment),wRr=l(),Wc=a("p"),ARr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oY=a("a"),yRr=o("from_pretrained()"),LRr=o(" class method or the "),rY=a("a"),xRr=o("from_config()"),$Rr=o(` class
method.`),kRr=l(),fx=a("p"),SRr=o("This class cannot be instantiated directly using "),J4e=a("code"),RRr=o("__init__()"),BRr=o(" (throws an error)."),PRr=l(),Qt=a("div"),v(gx.$$.fragment),IRr=l(),Y4e=a("p"),qRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NRr=l(),Hc=a("p"),jRr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),DRr=o("not"),GRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),ORr=o("from_pretrained()"),VRr=o(" to load the model weights."),XRr=l(),v(Hw.$$.fragment),zRr=l(),Wr=a("div"),v(hx.$$.fragment),QRr=l(),Z4e=a("p"),WRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HRr=l(),Fn=a("p"),URr=o("The model class to instantiate is selected based on the "),eEe=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),ux=a("ul"),Uw=a("li"),tEe=a("strong"),tBr=o("beit"),aBr=o(" \u2014 "),aY=a("a"),nBr=o("FlaxBeitForImageClassification"),sBr=o(" (BEiT model)"),lBr=l(),Jw=a("li"),aEe=a("strong"),iBr=o("vit"),dBr=o(" \u2014 "),nY=a("a"),cBr=o("FlaxViTForImageClassification"),mBr=o(" (ViT model)"),fBr=l(),v(Yw.$$.fragment),aIe=l(),Uc=a("h2"),Kw=a("a"),nEe=a("span"),v(px.$$.fragment),gBr=l(),sEe=a("span"),hBr=o("FlaxAutoModelForVision2Seq"),nIe=l(),Tr=a("div"),v(_x.$$.fragment),uBr=l(),Jc=a("p"),pBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sY=a("a"),_Br=o("from_pretrained()"),bBr=o(" class method or the "),lY=a("a"),FBr=o("from_config()"),vBr=o(` class
method.`),TBr=l(),bx=a("p"),MBr=o("This class cannot be instantiated directly using "),lEe=a("code"),EBr=o("__init__()"),CBr=o(" (throws an error)."),wBr=l(),Wt=a("div"),v(Fx.$$.fragment),ABr=l(),iEe=a("p"),yBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LBr=l(),Yc=a("p"),xBr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),$Br=o("not"),kBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),SBr=o("from_pretrained()"),RBr=o(" to load the model weights."),BBr=l(),v(Zw.$$.fragment),PBr=l(),Hr=a("div"),v(vx.$$.fragment),IBr=l(),cEe=a("p"),qBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NBr=l(),vn=a("p"),jBr=o("The model class to instantiate is selected based on the "),mEe=a("code"),DBr=o("model_type"),GBr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),OBr=o("pretrained_model_name_or_path"),VBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(":"),QBr=l(),hEe=a("ul"),eA=a("li"),uEe=a("strong"),WBr=o("vision-encoder-decoder"),HBr=o(" \u2014 "),dY=a("a"),UBr=o("FlaxVisionEncoderDecoderModel"),JBr=o(" (Vision Encoder decoder model)"),YBr=l(),v(oA.$$.fragment),this.h()},l(m){const _=D3t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var Tx=s(u);f=n(Tx,"A",{id:!0,class:!0,href:!0});var pEe=s(f);p=n(pEe,"SPAN",{});var _Ee=s(p);T(d.$$.fragment,_Ee),_Ee.forEach(t),pEe.forEach(t),h=i(Tx),Mo=n(Tx,"SPAN",{});var bEe=s(Mo);oi=r(bEe,"Auto Classes"),bEe.forEach(t),Tx.forEach(t),om=i(m),Kr=n(m,"P",{});var Mx=s(Kr);ri=r(Mx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(Mx,"CODE",{});var FEe=s(ti);_6=r(FEe,"from_pretrained()"),FEe.forEach(t),rm=r(Mx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Mx.forEach(t),qe=i(m),Xe=n(m,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var vEe=s(Mn);b6=r(vEe,"AutoConfig"),vEe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var TEe=s(Cn);F6=r(TEe,"AutoModel"),TEe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var MEe=s(wn);v6=r(MEe,"AutoTokenizer"),MEe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),tm=i(m),T(Fa.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var Ex=s(Ae);R9=r(Ex,"will create a model that is an instance of "),li=n(Ex,"A",{href:!0});var EEe=s(li);B9=r(EEe,"BertModel"),EEe.forEach(t),P9=r(Ex,"."),Ex.forEach(t),Eo=i(m),va=n(m,"P",{});var Cx=s(va);I9=r(Cx,"There is one class of "),am=n(Cx,"CODE",{});var CEe=s(am);q9=r(CEe,"AutoModel"),CEe.forEach(t),fNe=r(Cx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Cx.forEach(t),nBe=i(m),ii=n(m,"H2",{class:!0});var wx=s(ii);nm=n(wx,"A",{id:!0,class:!0,href:!0});var wEe=s(nm);eZ=n(wEe,"SPAN",{});var AEe=s(eZ);T(T6.$$.fragment,AEe),AEe.forEach(t),wEe.forEach(t),gNe=i(wx),oZ=n(wx,"SPAN",{});var yEe=s(oZ);hNe=r(yEe,"Extending the Auto Classes"),yEe.forEach(t),wx.forEach(t),sBe=i(m),An=n(m,"P",{});var Kc=s(An);uNe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),rZ=n(Kc,"CODE",{});var LEe=s(rZ);pNe=r(LEe,"NewModel"),LEe.forEach(t),_Ne=r(Kc,", make sure you have a "),tZ=n(Kc,"CODE",{});var xEe=s(tZ);bNe=r(xEe,"NewModelConfig"),xEe.forEach(t),FNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),lBe=i(m),T(M6.$$.fragment,m),iBe=i(m),N9=n(m,"P",{});var $Ee=s(N9);vNe=r($Ee,"You will then be able to use the auto classes like you would usually do!"),$Ee.forEach(t),dBe=i(m),T(sm.$$.fragment,m),cBe=i(m),di=n(m,"H2",{class:!0});var Ax=s(di);lm=n(Ax,"A",{id:!0,class:!0,href:!0});var kEe=s(lm);aZ=n(kEe,"SPAN",{});var SEe=s(aZ);T(E6.$$.fragment,SEe),SEe.forEach(t),kEe.forEach(t),TNe=i(Ax),nZ=n(Ax,"SPAN",{});var REe=s(nZ);MNe=r(REe,"AutoConfig"),REe.forEach(t),Ax.forEach(t),mBe=i(m),Co=n(m,"DIV",{class:!0});var Jr=s(Co);T(C6.$$.fragment,Jr),ENe=i(Jr),w6=n(Jr,"P",{});var yx=s(w6);CNe=r(yx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),j9=n(yx,"A",{href:!0});var BEe=s(j9);wNe=r(BEe,"from_pretrained()"),BEe.forEach(t),ANe=r(yx," class method."),yx.forEach(t),yNe=i(Jr),A6=n(Jr,"P",{});var Lx=s(A6);LNe=r(Lx,"This class cannot be instantiated directly using "),sZ=n(Lx,"CODE",{});var PEe=s(sZ);xNe=r(PEe,"__init__()"),PEe.forEach(t),$Ne=r(Lx," (throws an error)."),Lx.forEach(t),kNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(y6.$$.fragment,Yr),SNe=i(Yr),lZ=n(Yr,"P",{});var IEe=s(lZ);RNe=r(IEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IEe.forEach(t),BNe=i(Yr),ci=n(Yr,"P",{});var Zc=s(ci);PNe=r(Zc,"The configuration class to instantiate is selected based on the "),iZ=n(Zc,"CODE",{});var qEe=s(iZ);INe=r(qEe,"model_type"),qEe.forEach(t),qNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),dZ=n(Zc,"CODE",{});var NEe=s(dZ);NNe=r(NEe,"pretrained_model_name_or_path"),NEe.forEach(t),jNe=r(Zc,":"),Zc.forEach(t),DNe=i(Yr),A=n(Yr,"UL",{});var y=s(A);im=n(y,"LI",{});var rA=s(im);cZ=n(rA,"STRONG",{});var jEe=s(cZ);GNe=r(jEe,"albert"),jEe.forEach(t),ONe=r(rA," \u2014 "),D9=n(rA,"A",{href:!0});var DEe=s(D9);VNe=r(DEe,"AlbertConfig"),DEe.forEach(t),XNe=r(rA," (ALBERT model)"),rA.forEach(t),zNe=i(y),dm=n(y,"LI",{});var tA=s(dm);mZ=n(tA,"STRONG",{});var GEe=s(mZ);QNe=r(GEe,"bart"),GEe.forEach(t),WNe=r(tA," \u2014 "),G9=n(tA,"A",{href:!0});var OEe=s(G9);HNe=r(OEe,"BartConfig"),OEe.forEach(t),UNe=r(tA," (BART model)"),tA.forEach(t),JNe=i(y),cm=n(y,"LI",{});var aA=s(cm);fZ=n(aA,"STRONG",{});var VEe=s(fZ);YNe=r(VEe,"beit"),VEe.forEach(t),KNe=r(aA," \u2014 "),O9=n(aA,"A",{href:!0});var XEe=s(O9);ZNe=r(XEe,"BeitConfig"),XEe.forEach(t),eje=r(aA," (BEiT model)"),aA.forEach(t),oje=i(y),mm=n(y,"LI",{});var nA=s(mm);gZ=n(nA,"STRONG",{});var zEe=s(gZ);rje=r(zEe,"bert"),zEe.forEach(t),tje=r(nA," \u2014 "),V9=n(nA,"A",{href:!0});var QEe=s(V9);aje=r(QEe,"BertConfig"),QEe.forEach(t),nje=r(nA," (BERT model)"),nA.forEach(t),sje=i(y),fm=n(y,"LI",{});var sA=s(fm);hZ=n(sA,"STRONG",{});var WEe=s(hZ);lje=r(WEe,"bert-generation"),WEe.forEach(t),ije=r(sA," \u2014 "),X9=n(sA,"A",{href:!0});var HEe=s(X9);dje=r(HEe,"BertGenerationConfig"),HEe.forEach(t),cje=r(sA," (Bert Generation model)"),sA.forEach(t),mje=i(y),gm=n(y,"LI",{});var lA=s(gm);uZ=n(lA,"STRONG",{});var UEe=s(uZ);fje=r(UEe,"big_bird"),UEe.forEach(t),gje=r(lA," \u2014 "),z9=n(lA,"A",{href:!0});var JEe=s(z9);hje=r(JEe,"BigBirdConfig"),JEe.forEach(t),uje=r(lA," (BigBird model)"),lA.forEach(t),pje=i(y),hm=n(y,"LI",{});var iA=s(hm);pZ=n(iA,"STRONG",{});var YEe=s(pZ);_je=r(YEe,"bigbird_pegasus"),YEe.forEach(t),bje=r(iA," \u2014 "),Q9=n(iA,"A",{href:!0});var KEe=s(Q9);Fje=r(KEe,"BigBirdPegasusConfig"),KEe.forEach(t),vje=r(iA," (BigBirdPegasus model)"),iA.forEach(t),Tje=i(y),um=n(y,"LI",{});var dA=s(um);_Z=n(dA,"STRONG",{});var ZEe=s(_Z);Mje=r(ZEe,"blenderbot"),ZEe.forEach(t),Eje=r(dA," \u2014 "),W9=n(dA,"A",{href:!0});var e5e=s(W9);Cje=r(e5e,"BlenderbotConfig"),e5e.forEach(t),wje=r(dA," (Blenderbot model)"),dA.forEach(t),Aje=i(y),pm=n(y,"LI",{});var cA=s(pm);bZ=n(cA,"STRONG",{});var o5e=s(bZ);yje=r(o5e,"blenderbot-small"),o5e.forEach(t),Lje=r(cA," \u2014 "),H9=n(cA,"A",{href:!0});var r5e=s(H9);xje=r(r5e,"BlenderbotSmallConfig"),r5e.forEach(t),$je=r(cA," (BlenderbotSmall model)"),cA.forEach(t),kje=i(y),_m=n(y,"LI",{});var mA=s(_m);FZ=n(mA,"STRONG",{});var t5e=s(FZ);Sje=r(t5e,"camembert"),t5e.forEach(t),Rje=r(mA," \u2014 "),U9=n(mA,"A",{href:!0});var a5e=s(U9);Bje=r(a5e,"CamembertConfig"),a5e.forEach(t),Pje=r(mA," (CamemBERT model)"),mA.forEach(t),Ije=i(y),bm=n(y,"LI",{});var fA=s(bm);vZ=n(fA,"STRONG",{});var n5e=s(vZ);qje=r(n5e,"canine"),n5e.forEach(t),Nje=r(fA," \u2014 "),J9=n(fA,"A",{href:!0});var s5e=s(J9);jje=r(s5e,"CanineConfig"),s5e.forEach(t),Dje=r(fA," (Canine model)"),fA.forEach(t),Gje=i(y),Fm=n(y,"LI",{});var gA=s(Fm);TZ=n(gA,"STRONG",{});var l5e=s(TZ);Oje=r(l5e,"clip"),l5e.forEach(t),Vje=r(gA," \u2014 "),Y9=n(gA,"A",{href:!0});var i5e=s(Y9);Xje=r(i5e,"CLIPConfig"),i5e.forEach(t),zje=r(gA," (CLIP model)"),gA.forEach(t),Qje=i(y),vm=n(y,"LI",{});var hA=s(vm);MZ=n(hA,"STRONG",{});var d5e=s(MZ);Wje=r(d5e,"convbert"),d5e.forEach(t),Hje=r(hA," \u2014 "),K9=n(hA,"A",{href:!0});var c5e=s(K9);Uje=r(c5e,"ConvBertConfig"),c5e.forEach(t),Jje=r(hA," (ConvBERT model)"),hA.forEach(t),Yje=i(y),Tm=n(y,"LI",{});var uA=s(Tm);EZ=n(uA,"STRONG",{});var m5e=s(EZ);Kje=r(m5e,"convnext"),m5e.forEach(t),Zje=r(uA," \u2014 "),Z9=n(uA,"A",{href:!0});var f5e=s(Z9);eDe=r(f5e,"ConvNextConfig"),f5e.forEach(t),oDe=r(uA," (ConvNext model)"),uA.forEach(t),rDe=i(y),Mm=n(y,"LI",{});var pA=s(Mm);CZ=n(pA,"STRONG",{});var g5e=s(CZ);tDe=r(g5e,"ctrl"),g5e.forEach(t),aDe=r(pA," \u2014 "),e$=n(pA,"A",{href:!0});var h5e=s(e$);nDe=r(h5e,"CTRLConfig"),h5e.forEach(t),sDe=r(pA," (CTRL model)"),pA.forEach(t),lDe=i(y),Em=n(y,"LI",{});var _A=s(Em);wZ=n(_A,"STRONG",{});var u5e=s(wZ);iDe=r(u5e,"data2vec-audio"),u5e.forEach(t),dDe=r(_A," \u2014 "),o$=n(_A,"A",{href:!0});var p5e=s(o$);cDe=r(p5e,"Data2VecAudioConfig"),p5e.forEach(t),mDe=r(_A," (Data2VecAudio model)"),_A.forEach(t),fDe=i(y),Cm=n(y,"LI",{});var bA=s(Cm);AZ=n(bA,"STRONG",{});var _5e=s(AZ);gDe=r(_5e,"data2vec-text"),_5e.forEach(t),hDe=r(bA," \u2014 "),r$=n(bA,"A",{href:!0});var b5e=s(r$);uDe=r(b5e,"Data2VecTextConfig"),b5e.forEach(t),pDe=r(bA," (Data2VecText model)"),bA.forEach(t),_De=i(y),wm=n(y,"LI",{});var FA=s(wm);yZ=n(FA,"STRONG",{});var F5e=s(yZ);bDe=r(F5e,"data2vec-vision"),F5e.forEach(t),FDe=r(FA," \u2014 "),t$=n(FA,"A",{href:!0});var v5e=s(t$);vDe=r(v5e,"Data2VecVisionConfig"),v5e.forEach(t),TDe=r(FA," (Data2VecVision model)"),FA.forEach(t),MDe=i(y),Am=n(y,"LI",{});var vA=s(Am);LZ=n(vA,"STRONG",{});var T5e=s(LZ);EDe=r(T5e,"deberta"),T5e.forEach(t),CDe=r(vA," \u2014 "),a$=n(vA,"A",{href:!0});var M5e=s(a$);wDe=r(M5e,"DebertaConfig"),M5e.forEach(t),ADe=r(vA," (DeBERTa model)"),vA.forEach(t),yDe=i(y),ym=n(y,"LI",{});var TA=s(ym);xZ=n(TA,"STRONG",{});var E5e=s(xZ);LDe=r(E5e,"deberta-v2"),E5e.forEach(t),xDe=r(TA," \u2014 "),n$=n(TA,"A",{href:!0});var C5e=s(n$);$De=r(C5e,"DebertaV2Config"),C5e.forEach(t),kDe=r(TA," (DeBERTa-v2 model)"),TA.forEach(t),SDe=i(y),Lm=n(y,"LI",{});var MA=s(Lm);$Z=n(MA,"STRONG",{});var w5e=s($Z);RDe=r(w5e,"decision_transformer"),w5e.forEach(t),BDe=r(MA," \u2014 "),s$=n(MA,"A",{href:!0});var A5e=s(s$);PDe=r(A5e,"DecisionTransformerConfig"),A5e.forEach(t),IDe=r(MA," (Decision Transformer model)"),MA.forEach(t),qDe=i(y),xm=n(y,"LI",{});var EA=s(xm);kZ=n(EA,"STRONG",{});var y5e=s(kZ);NDe=r(y5e,"deit"),y5e.forEach(t),jDe=r(EA," \u2014 "),l$=n(EA,"A",{href:!0});var L5e=s(l$);DDe=r(L5e,"DeiTConfig"),L5e.forEach(t),GDe=r(EA," (DeiT model)"),EA.forEach(t),ODe=i(y),$m=n(y,"LI",{});var x5e=s($m);SZ=n(x5e,"STRONG",{});var ZBr=s(SZ);VDe=r(ZBr,"detr"),ZBr.forEach(t),XDe=r(x5e," \u2014 "),i$=n(x5e,"A",{href:!0});var ePr=s(i$);zDe=r(ePr,"DetrConfig"),ePr.forEach(t),QDe=r(x5e," (DETR model)"),x5e.forEach(t),WDe=i(y),km=n(y,"LI",{});var $5e=s(km);RZ=n($5e,"STRONG",{});var oPr=s(RZ);HDe=r(oPr,"distilbert"),oPr.forEach(t),UDe=r($5e," \u2014 "),d$=n($5e,"A",{href:!0});var rPr=s(d$);JDe=r(rPr,"DistilBertConfig"),rPr.forEach(t),YDe=r($5e," (DistilBERT model)"),$5e.forEach(t),KDe=i(y),Sm=n(y,"LI",{});var k5e=s(Sm);BZ=n(k5e,"STRONG",{});var tPr=s(BZ);ZDe=r(tPr,"dpr"),tPr.forEach(t),eGe=r(k5e," \u2014 "),c$=n(k5e,"A",{href:!0});var aPr=s(c$);oGe=r(aPr,"DPRConfig"),aPr.forEach(t),rGe=r(k5e," (DPR model)"),k5e.forEach(t),tGe=i(y),Rm=n(y,"LI",{});var S5e=s(Rm);PZ=n(S5e,"STRONG",{});var nPr=s(PZ);aGe=r(nPr,"dpt"),nPr.forEach(t),nGe=r(S5e," \u2014 "),m$=n(S5e,"A",{href:!0});var sPr=s(m$);sGe=r(sPr,"DPTConfig"),sPr.forEach(t),lGe=r(S5e," (DPT model)"),S5e.forEach(t),iGe=i(y),Bm=n(y,"LI",{});var R5e=s(Bm);IZ=n(R5e,"STRONG",{});var lPr=s(IZ);dGe=r(lPr,"electra"),lPr.forEach(t),cGe=r(R5e," \u2014 "),f$=n(R5e,"A",{href:!0});var iPr=s(f$);mGe=r(iPr,"ElectraConfig"),iPr.forEach(t),fGe=r(R5e," (ELECTRA model)"),R5e.forEach(t),gGe=i(y),Pm=n(y,"LI",{});var B5e=s(Pm);qZ=n(B5e,"STRONG",{});var dPr=s(qZ);hGe=r(dPr,"encoder-decoder"),dPr.forEach(t),uGe=r(B5e," \u2014 "),g$=n(B5e,"A",{href:!0});var cPr=s(g$);pGe=r(cPr,"EncoderDecoderConfig"),cPr.forEach(t),_Ge=r(B5e," (Encoder decoder model)"),B5e.forEach(t),bGe=i(y),Im=n(y,"LI",{});var P5e=s(Im);NZ=n(P5e,"STRONG",{});var mPr=s(NZ);FGe=r(mPr,"flaubert"),mPr.forEach(t),vGe=r(P5e," \u2014 "),h$=n(P5e,"A",{href:!0});var fPr=s(h$);TGe=r(fPr,"FlaubertConfig"),fPr.forEach(t),MGe=r(P5e," (FlauBERT model)"),P5e.forEach(t),EGe=i(y),qm=n(y,"LI",{});var I5e=s(qm);jZ=n(I5e,"STRONG",{});var gPr=s(jZ);CGe=r(gPr,"fnet"),gPr.forEach(t),wGe=r(I5e," \u2014 "),u$=n(I5e,"A",{href:!0});var hPr=s(u$);AGe=r(hPr,"FNetConfig"),hPr.forEach(t),yGe=r(I5e," (FNet model)"),I5e.forEach(t),LGe=i(y),Nm=n(y,"LI",{});var q5e=s(Nm);DZ=n(q5e,"STRONG",{});var uPr=s(DZ);xGe=r(uPr,"fsmt"),uPr.forEach(t),$Ge=r(q5e," \u2014 "),p$=n(q5e,"A",{href:!0});var pPr=s(p$);kGe=r(pPr,"FSMTConfig"),pPr.forEach(t),SGe=r(q5e," (FairSeq Machine-Translation model)"),q5e.forEach(t),RGe=i(y),jm=n(y,"LI",{});var N5e=s(jm);GZ=n(N5e,"STRONG",{});var _Pr=s(GZ);BGe=r(_Pr,"funnel"),_Pr.forEach(t),PGe=r(N5e," \u2014 "),_$=n(N5e,"A",{href:!0});var bPr=s(_$);IGe=r(bPr,"FunnelConfig"),bPr.forEach(t),qGe=r(N5e," (Funnel Transformer model)"),N5e.forEach(t),NGe=i(y),Dm=n(y,"LI",{});var j5e=s(Dm);OZ=n(j5e,"STRONG",{});var FPr=s(OZ);jGe=r(FPr,"glpn"),FPr.forEach(t),DGe=r(j5e," \u2014 "),b$=n(j5e,"A",{href:!0});var vPr=s(b$);GGe=r(vPr,"GLPNConfig"),vPr.forEach(t),OGe=r(j5e," (GLPN model)"),j5e.forEach(t),VGe=i(y),Gm=n(y,"LI",{});var D5e=s(Gm);VZ=n(D5e,"STRONG",{});var TPr=s(VZ);XGe=r(TPr,"gpt2"),TPr.forEach(t),zGe=r(D5e," \u2014 "),F$=n(D5e,"A",{href:!0});var MPr=s(F$);QGe=r(MPr,"GPT2Config"),MPr.forEach(t),WGe=r(D5e," (OpenAI GPT-2 model)"),D5e.forEach(t),HGe=i(y),Om=n(y,"LI",{});var G5e=s(Om);XZ=n(G5e,"STRONG",{});var EPr=s(XZ);UGe=r(EPr,"gpt_neo"),EPr.forEach(t),JGe=r(G5e," \u2014 "),v$=n(G5e,"A",{href:!0});var CPr=s(v$);YGe=r(CPr,"GPTNeoConfig"),CPr.forEach(t),KGe=r(G5e," (GPT Neo model)"),G5e.forEach(t),ZGe=i(y),Vm=n(y,"LI",{});var O5e=s(Vm);zZ=n(O5e,"STRONG",{});var wPr=s(zZ);eOe=r(wPr,"gptj"),wPr.forEach(t),oOe=r(O5e," \u2014 "),T$=n(O5e,"A",{href:!0});var APr=s(T$);rOe=r(APr,"GPTJConfig"),APr.forEach(t),tOe=r(O5e," (GPT-J model)"),O5e.forEach(t),aOe=i(y),Xm=n(y,"LI",{});var V5e=s(Xm);QZ=n(V5e,"STRONG",{});var yPr=s(QZ);nOe=r(yPr,"hubert"),yPr.forEach(t),sOe=r(V5e," \u2014 "),M$=n(V5e,"A",{href:!0});var LPr=s(M$);lOe=r(LPr,"HubertConfig"),LPr.forEach(t),iOe=r(V5e," (Hubert model)"),V5e.forEach(t),dOe=i(y),zm=n(y,"LI",{});var X5e=s(zm);WZ=n(X5e,"STRONG",{});var xPr=s(WZ);cOe=r(xPr,"ibert"),xPr.forEach(t),mOe=r(X5e," \u2014 "),E$=n(X5e,"A",{href:!0});var $Pr=s(E$);fOe=r($Pr,"IBertConfig"),$Pr.forEach(t),gOe=r(X5e," (I-BERT model)"),X5e.forEach(t),hOe=i(y),Qm=n(y,"LI",{});var z5e=s(Qm);HZ=n(z5e,"STRONG",{});var kPr=s(HZ);uOe=r(kPr,"imagegpt"),kPr.forEach(t),pOe=r(z5e," \u2014 "),C$=n(z5e,"A",{href:!0});var SPr=s(C$);_Oe=r(SPr,"ImageGPTConfig"),SPr.forEach(t),bOe=r(z5e," (ImageGPT model)"),z5e.forEach(t),FOe=i(y),Wm=n(y,"LI",{});var Q5e=s(Wm);UZ=n(Q5e,"STRONG",{});var RPr=s(UZ);vOe=r(RPr,"layoutlm"),RPr.forEach(t),TOe=r(Q5e," \u2014 "),w$=n(Q5e,"A",{href:!0});var BPr=s(w$);MOe=r(BPr,"LayoutLMConfig"),BPr.forEach(t),EOe=r(Q5e," (LayoutLM model)"),Q5e.forEach(t),COe=i(y),Hm=n(y,"LI",{});var W5e=s(Hm);JZ=n(W5e,"STRONG",{});var PPr=s(JZ);wOe=r(PPr,"layoutlmv2"),PPr.forEach(t),AOe=r(W5e," \u2014 "),A$=n(W5e,"A",{href:!0});var IPr=s(A$);yOe=r(IPr,"LayoutLMv2Config"),IPr.forEach(t),LOe=r(W5e," (LayoutLMv2 model)"),W5e.forEach(t),xOe=i(y),Um=n(y,"LI",{});var H5e=s(Um);YZ=n(H5e,"STRONG",{});var qPr=s(YZ);$Oe=r(qPr,"led"),qPr.forEach(t),kOe=r(H5e," \u2014 "),y$=n(H5e,"A",{href:!0});var NPr=s(y$);SOe=r(NPr,"LEDConfig"),NPr.forEach(t),ROe=r(H5e," (LED model)"),H5e.forEach(t),BOe=i(y),Jm=n(y,"LI",{});var U5e=s(Jm);KZ=n(U5e,"STRONG",{});var jPr=s(KZ);POe=r(jPr,"longformer"),jPr.forEach(t),IOe=r(U5e," \u2014 "),L$=n(U5e,"A",{href:!0});var DPr=s(L$);qOe=r(DPr,"LongformerConfig"),DPr.forEach(t),NOe=r(U5e," (Longformer model)"),U5e.forEach(t),jOe=i(y),Ym=n(y,"LI",{});var J5e=s(Ym);ZZ=n(J5e,"STRONG",{});var GPr=s(ZZ);DOe=r(GPr,"luke"),GPr.forEach(t),GOe=r(J5e," \u2014 "),x$=n(J5e,"A",{href:!0});var OPr=s(x$);OOe=r(OPr,"LukeConfig"),OPr.forEach(t),VOe=r(J5e," (LUKE model)"),J5e.forEach(t),XOe=i(y),Km=n(y,"LI",{});var Y5e=s(Km);eee=n(Y5e,"STRONG",{});var VPr=s(eee);zOe=r(VPr,"lxmert"),VPr.forEach(t),QOe=r(Y5e," \u2014 "),$$=n(Y5e,"A",{href:!0});var XPr=s($$);WOe=r(XPr,"LxmertConfig"),XPr.forEach(t),HOe=r(Y5e," (LXMERT model)"),Y5e.forEach(t),UOe=i(y),Zm=n(y,"LI",{});var K5e=s(Zm);oee=n(K5e,"STRONG",{});var zPr=s(oee);JOe=r(zPr,"m2m_100"),zPr.forEach(t),YOe=r(K5e," \u2014 "),k$=n(K5e,"A",{href:!0});var QPr=s(k$);KOe=r(QPr,"M2M100Config"),QPr.forEach(t),ZOe=r(K5e," (M2M100 model)"),K5e.forEach(t),eVe=i(y),ef=n(y,"LI",{});var Z5e=s(ef);ree=n(Z5e,"STRONG",{});var WPr=s(ree);oVe=r(WPr,"marian"),WPr.forEach(t),rVe=r(Z5e," \u2014 "),S$=n(Z5e,"A",{href:!0});var HPr=s(S$);tVe=r(HPr,"MarianConfig"),HPr.forEach(t),aVe=r(Z5e," (Marian model)"),Z5e.forEach(t),nVe=i(y),of=n(y,"LI",{});var eCe=s(of);tee=n(eCe,"STRONG",{});var UPr=s(tee);sVe=r(UPr,"maskformer"),UPr.forEach(t),lVe=r(eCe," \u2014 "),R$=n(eCe,"A",{href:!0});var JPr=s(R$);iVe=r(JPr,"MaskFormerConfig"),JPr.forEach(t),dVe=r(eCe," (MaskFormer model)"),eCe.forEach(t),cVe=i(y),rf=n(y,"LI",{});var oCe=s(rf);aee=n(oCe,"STRONG",{});var YPr=s(aee);mVe=r(YPr,"mbart"),YPr.forEach(t),fVe=r(oCe," \u2014 "),B$=n(oCe,"A",{href:!0});var KPr=s(B$);gVe=r(KPr,"MBartConfig"),KPr.forEach(t),hVe=r(oCe," (mBART model)"),oCe.forEach(t),uVe=i(y),tf=n(y,"LI",{});var rCe=s(tf);nee=n(rCe,"STRONG",{});var ZPr=s(nee);pVe=r(ZPr,"megatron-bert"),ZPr.forEach(t),_Ve=r(rCe," \u2014 "),P$=n(rCe,"A",{href:!0});var eIr=s(P$);bVe=r(eIr,"MegatronBertConfig"),eIr.forEach(t),FVe=r(rCe," (MegatronBert model)"),rCe.forEach(t),vVe=i(y),af=n(y,"LI",{});var tCe=s(af);see=n(tCe,"STRONG",{});var oIr=s(see);TVe=r(oIr,"mobilebert"),oIr.forEach(t),MVe=r(tCe," \u2014 "),I$=n(tCe,"A",{href:!0});var rIr=s(I$);EVe=r(rIr,"MobileBertConfig"),rIr.forEach(t),CVe=r(tCe," (MobileBERT model)"),tCe.forEach(t),wVe=i(y),nf=n(y,"LI",{});var aCe=s(nf);lee=n(aCe,"STRONG",{});var tIr=s(lee);AVe=r(tIr,"mpnet"),tIr.forEach(t),yVe=r(aCe," \u2014 "),q$=n(aCe,"A",{href:!0});var aIr=s(q$);LVe=r(aIr,"MPNetConfig"),aIr.forEach(t),xVe=r(aCe," (MPNet model)"),aCe.forEach(t),$Ve=i(y),sf=n(y,"LI",{});var nCe=s(sf);iee=n(nCe,"STRONG",{});var nIr=s(iee);kVe=r(nIr,"mt5"),nIr.forEach(t),SVe=r(nCe," \u2014 "),N$=n(nCe,"A",{href:!0});var sIr=s(N$);RVe=r(sIr,"MT5Config"),sIr.forEach(t),BVe=r(nCe," (mT5 model)"),nCe.forEach(t),PVe=i(y),lf=n(y,"LI",{});var sCe=s(lf);dee=n(sCe,"STRONG",{});var lIr=s(dee);IVe=r(lIr,"nystromformer"),lIr.forEach(t),qVe=r(sCe," \u2014 "),j$=n(sCe,"A",{href:!0});var iIr=s(j$);NVe=r(iIr,"NystromformerConfig"),iIr.forEach(t),jVe=r(sCe," (Nystromformer model)"),sCe.forEach(t),DVe=i(y),df=n(y,"LI",{});var lCe=s(df);cee=n(lCe,"STRONG",{});var dIr=s(cee);GVe=r(dIr,"openai-gpt"),dIr.forEach(t),OVe=r(lCe," \u2014 "),D$=n(lCe,"A",{href:!0});var cIr=s(D$);VVe=r(cIr,"OpenAIGPTConfig"),cIr.forEach(t),XVe=r(lCe," (OpenAI GPT model)"),lCe.forEach(t),zVe=i(y),cf=n(y,"LI",{});var iCe=s(cf);mee=n(iCe,"STRONG",{});var mIr=s(mee);QVe=r(mIr,"pegasus"),mIr.forEach(t),WVe=r(iCe," \u2014 "),G$=n(iCe,"A",{href:!0});var fIr=s(G$);HVe=r(fIr,"PegasusConfig"),fIr.forEach(t),UVe=r(iCe," (Pegasus model)"),iCe.forEach(t),JVe=i(y),mf=n(y,"LI",{});var dCe=s(mf);fee=n(dCe,"STRONG",{});var gIr=s(fee);YVe=r(gIr,"perceiver"),gIr.forEach(t),KVe=r(dCe," \u2014 "),O$=n(dCe,"A",{href:!0});var hIr=s(O$);ZVe=r(hIr,"PerceiverConfig"),hIr.forEach(t),eXe=r(dCe," (Perceiver model)"),dCe.forEach(t),oXe=i(y),ff=n(y,"LI",{});var cCe=s(ff);gee=n(cCe,"STRONG",{});var uIr=s(gee);rXe=r(uIr,"plbart"),uIr.forEach(t),tXe=r(cCe," \u2014 "),V$=n(cCe,"A",{href:!0});var pIr=s(V$);aXe=r(pIr,"PLBartConfig"),pIr.forEach(t),nXe=r(cCe," (PLBart model)"),cCe.forEach(t),sXe=i(y),gf=n(y,"LI",{});var mCe=s(gf);hee=n(mCe,"STRONG",{});var _Ir=s(hee);lXe=r(_Ir,"poolformer"),_Ir.forEach(t),iXe=r(mCe," \u2014 "),X$=n(mCe,"A",{href:!0});var bIr=s(X$);dXe=r(bIr,"PoolFormerConfig"),bIr.forEach(t),cXe=r(mCe," (PoolFormer model)"),mCe.forEach(t),mXe=i(y),hf=n(y,"LI",{});var fCe=s(hf);uee=n(fCe,"STRONG",{});var FIr=s(uee);fXe=r(FIr,"prophetnet"),FIr.forEach(t),gXe=r(fCe," \u2014 "),z$=n(fCe,"A",{href:!0});var vIr=s(z$);hXe=r(vIr,"ProphetNetConfig"),vIr.forEach(t),uXe=r(fCe," (ProphetNet model)"),fCe.forEach(t),pXe=i(y),uf=n(y,"LI",{});var gCe=s(uf);pee=n(gCe,"STRONG",{});var TIr=s(pee);_Xe=r(TIr,"qdqbert"),TIr.forEach(t),bXe=r(gCe," \u2014 "),Q$=n(gCe,"A",{href:!0});var MIr=s(Q$);FXe=r(MIr,"QDQBertConfig"),MIr.forEach(t),vXe=r(gCe," (QDQBert model)"),gCe.forEach(t),TXe=i(y),pf=n(y,"LI",{});var hCe=s(pf);_ee=n(hCe,"STRONG",{});var EIr=s(_ee);MXe=r(EIr,"rag"),EIr.forEach(t),EXe=r(hCe," \u2014 "),W$=n(hCe,"A",{href:!0});var CIr=s(W$);CXe=r(CIr,"RagConfig"),CIr.forEach(t),wXe=r(hCe," (RAG model)"),hCe.forEach(t),AXe=i(y),_f=n(y,"LI",{});var uCe=s(_f);bee=n(uCe,"STRONG",{});var wIr=s(bee);yXe=r(wIr,"realm"),wIr.forEach(t),LXe=r(uCe," \u2014 "),H$=n(uCe,"A",{href:!0});var AIr=s(H$);xXe=r(AIr,"RealmConfig"),AIr.forEach(t),$Xe=r(uCe," (Realm model)"),uCe.forEach(t),kXe=i(y),bf=n(y,"LI",{});var pCe=s(bf);Fee=n(pCe,"STRONG",{});var yIr=s(Fee);SXe=r(yIr,"reformer"),yIr.forEach(t),RXe=r(pCe," \u2014 "),U$=n(pCe,"A",{href:!0});var LIr=s(U$);BXe=r(LIr,"ReformerConfig"),LIr.forEach(t),PXe=r(pCe," (Reformer model)"),pCe.forEach(t),IXe=i(y),Ff=n(y,"LI",{});var _Ce=s(Ff);vee=n(_Ce,"STRONG",{});var xIr=s(vee);qXe=r(xIr,"regnet"),xIr.forEach(t),NXe=r(_Ce," \u2014 "),J$=n(_Ce,"A",{href:!0});var $Ir=s(J$);jXe=r($Ir,"RegNetConfig"),$Ir.forEach(t),DXe=r(_Ce," (RegNet model)"),_Ce.forEach(t),GXe=i(y),vf=n(y,"LI",{});var bCe=s(vf);Tee=n(bCe,"STRONG",{});var kIr=s(Tee);OXe=r(kIr,"rembert"),kIr.forEach(t),VXe=r(bCe," \u2014 "),Y$=n(bCe,"A",{href:!0});var SIr=s(Y$);XXe=r(SIr,"RemBertConfig"),SIr.forEach(t),zXe=r(bCe," (RemBERT model)"),bCe.forEach(t),QXe=i(y),Tf=n(y,"LI",{});var FCe=s(Tf);Mee=n(FCe,"STRONG",{});var RIr=s(Mee);WXe=r(RIr,"resnet"),RIr.forEach(t),HXe=r(FCe," \u2014 "),K$=n(FCe,"A",{href:!0});var BIr=s(K$);UXe=r(BIr,"ResNetConfig"),BIr.forEach(t),JXe=r(FCe," (ResNet model)"),FCe.forEach(t),YXe=i(y),Mf=n(y,"LI",{});var vCe=s(Mf);Eee=n(vCe,"STRONG",{});var PIr=s(Eee);KXe=r(PIr,"retribert"),PIr.forEach(t),ZXe=r(vCe," \u2014 "),Z$=n(vCe,"A",{href:!0});var IIr=s(Z$);eze=r(IIr,"RetriBertConfig"),IIr.forEach(t),oze=r(vCe," (RetriBERT model)"),vCe.forEach(t),rze=i(y),Ef=n(y,"LI",{});var TCe=s(Ef);Cee=n(TCe,"STRONG",{});var qIr=s(Cee);tze=r(qIr,"roberta"),qIr.forEach(t),aze=r(TCe," \u2014 "),ek=n(TCe,"A",{href:!0});var NIr=s(ek);nze=r(NIr,"RobertaConfig"),NIr.forEach(t),sze=r(TCe," (RoBERTa model)"),TCe.forEach(t),lze=i(y),Cf=n(y,"LI",{});var MCe=s(Cf);wee=n(MCe,"STRONG",{});var jIr=s(wee);ize=r(jIr,"roformer"),jIr.forEach(t),dze=r(MCe," \u2014 "),ok=n(MCe,"A",{href:!0});var DIr=s(ok);cze=r(DIr,"RoFormerConfig"),DIr.forEach(t),mze=r(MCe," (RoFormer model)"),MCe.forEach(t),fze=i(y),wf=n(y,"LI",{});var ECe=s(wf);Aee=n(ECe,"STRONG",{});var GIr=s(Aee);gze=r(GIr,"segformer"),GIr.forEach(t),hze=r(ECe," \u2014 "),rk=n(ECe,"A",{href:!0});var OIr=s(rk);uze=r(OIr,"SegformerConfig"),OIr.forEach(t),pze=r(ECe," (SegFormer model)"),ECe.forEach(t),_ze=i(y),Af=n(y,"LI",{});var CCe=s(Af);yee=n(CCe,"STRONG",{});var VIr=s(yee);bze=r(VIr,"sew"),VIr.forEach(t),Fze=r(CCe," \u2014 "),tk=n(CCe,"A",{href:!0});var XIr=s(tk);vze=r(XIr,"SEWConfig"),XIr.forEach(t),Tze=r(CCe," (SEW model)"),CCe.forEach(t),Mze=i(y),yf=n(y,"LI",{});var wCe=s(yf);Lee=n(wCe,"STRONG",{});var zIr=s(Lee);Eze=r(zIr,"sew-d"),zIr.forEach(t),Cze=r(wCe," \u2014 "),ak=n(wCe,"A",{href:!0});var QIr=s(ak);wze=r(QIr,"SEWDConfig"),QIr.forEach(t),Aze=r(wCe," (SEW-D model)"),wCe.forEach(t),yze=i(y),Lf=n(y,"LI",{});var ACe=s(Lf);xee=n(ACe,"STRONG",{});var WIr=s(xee);Lze=r(WIr,"speech-encoder-decoder"),WIr.forEach(t),xze=r(ACe," \u2014 "),nk=n(ACe,"A",{href:!0});var HIr=s(nk);$ze=r(HIr,"SpeechEncoderDecoderConfig"),HIr.forEach(t),kze=r(ACe," (Speech Encoder decoder model)"),ACe.forEach(t),Sze=i(y),xf=n(y,"LI",{});var yCe=s(xf);$ee=n(yCe,"STRONG",{});var UIr=s($ee);Rze=r(UIr,"speech_to_text"),UIr.forEach(t),Bze=r(yCe," \u2014 "),sk=n(yCe,"A",{href:!0});var JIr=s(sk);Pze=r(JIr,"Speech2TextConfig"),JIr.forEach(t),Ize=r(yCe," (Speech2Text model)"),yCe.forEach(t),qze=i(y),$f=n(y,"LI",{});var LCe=s($f);kee=n(LCe,"STRONG",{});var YIr=s(kee);Nze=r(YIr,"speech_to_text_2"),YIr.forEach(t),jze=r(LCe," \u2014 "),lk=n(LCe,"A",{href:!0});var KIr=s(lk);Dze=r(KIr,"Speech2Text2Config"),KIr.forEach(t),Gze=r(LCe," (Speech2Text2 model)"),LCe.forEach(t),Oze=i(y),kf=n(y,"LI",{});var xCe=s(kf);See=n(xCe,"STRONG",{});var ZIr=s(See);Vze=r(ZIr,"splinter"),ZIr.forEach(t),Xze=r(xCe," \u2014 "),ik=n(xCe,"A",{href:!0});var eqr=s(ik);zze=r(eqr,"SplinterConfig"),eqr.forEach(t),Qze=r(xCe," (Splinter model)"),xCe.forEach(t),Wze=i(y),Sf=n(y,"LI",{});var $Ce=s(Sf);Ree=n($Ce,"STRONG",{});var oqr=s(Ree);Hze=r(oqr,"squeezebert"),oqr.forEach(t),Uze=r($Ce," \u2014 "),dk=n($Ce,"A",{href:!0});var rqr=s(dk);Jze=r(rqr,"SqueezeBertConfig"),rqr.forEach(t),Yze=r($Ce," (SqueezeBERT model)"),$Ce.forEach(t),Kze=i(y),Rf=n(y,"LI",{});var kCe=s(Rf);Bee=n(kCe,"STRONG",{});var tqr=s(Bee);Zze=r(tqr,"swin"),tqr.forEach(t),eQe=r(kCe," \u2014 "),ck=n(kCe,"A",{href:!0});var aqr=s(ck);oQe=r(aqr,"SwinConfig"),aqr.forEach(t),rQe=r(kCe," (Swin model)"),kCe.forEach(t),tQe=i(y),Bf=n(y,"LI",{});var SCe=s(Bf);Pee=n(SCe,"STRONG",{});var nqr=s(Pee);aQe=r(nqr,"t5"),nqr.forEach(t),nQe=r(SCe," \u2014 "),mk=n(SCe,"A",{href:!0});var sqr=s(mk);sQe=r(sqr,"T5Config"),sqr.forEach(t),lQe=r(SCe," (T5 model)"),SCe.forEach(t),iQe=i(y),Pf=n(y,"LI",{});var RCe=s(Pf);Iee=n(RCe,"STRONG",{});var lqr=s(Iee);dQe=r(lqr,"tapas"),lqr.forEach(t),cQe=r(RCe," \u2014 "),fk=n(RCe,"A",{href:!0});var iqr=s(fk);mQe=r(iqr,"TapasConfig"),iqr.forEach(t),fQe=r(RCe," (TAPAS model)"),RCe.forEach(t),gQe=i(y),If=n(y,"LI",{});var BCe=s(If);qee=n(BCe,"STRONG",{});var dqr=s(qee);hQe=r(dqr,"tapex"),dqr.forEach(t),uQe=r(BCe," \u2014 "),gk=n(BCe,"A",{href:!0});var cqr=s(gk);pQe=r(cqr,"BartConfig"),cqr.forEach(t),_Qe=r(BCe," (TAPEX model)"),BCe.forEach(t),bQe=i(y),qf=n(y,"LI",{});var PCe=s(qf);Nee=n(PCe,"STRONG",{});var mqr=s(Nee);FQe=r(mqr,"transfo-xl"),mqr.forEach(t),vQe=r(PCe," \u2014 "),hk=n(PCe,"A",{href:!0});var fqr=s(hk);TQe=r(fqr,"TransfoXLConfig"),fqr.forEach(t),MQe=r(PCe," (Transformer-XL model)"),PCe.forEach(t),EQe=i(y),Nf=n(y,"LI",{});var ICe=s(Nf);jee=n(ICe,"STRONG",{});var gqr=s(jee);CQe=r(gqr,"trocr"),gqr.forEach(t),wQe=r(ICe," \u2014 "),uk=n(ICe,"A",{href:!0});var hqr=s(uk);AQe=r(hqr,"TrOCRConfig"),hqr.forEach(t),yQe=r(ICe," (TrOCR model)"),ICe.forEach(t),LQe=i(y),jf=n(y,"LI",{});var qCe=s(jf);Dee=n(qCe,"STRONG",{});var uqr=s(Dee);xQe=r(uqr,"unispeech"),uqr.forEach(t),$Qe=r(qCe," \u2014 "),pk=n(qCe,"A",{href:!0});var pqr=s(pk);kQe=r(pqr,"UniSpeechConfig"),pqr.forEach(t),SQe=r(qCe," (UniSpeech model)"),qCe.forEach(t),RQe=i(y),Df=n(y,"LI",{});var NCe=s(Df);Gee=n(NCe,"STRONG",{});var _qr=s(Gee);BQe=r(_qr,"unispeech-sat"),_qr.forEach(t),PQe=r(NCe," \u2014 "),_k=n(NCe,"A",{href:!0});var bqr=s(_k);IQe=r(bqr,"UniSpeechSatConfig"),bqr.forEach(t),qQe=r(NCe," (UniSpeechSat model)"),NCe.forEach(t),NQe=i(y),Gf=n(y,"LI",{});var jCe=s(Gf);Oee=n(jCe,"STRONG",{});var Fqr=s(Oee);jQe=r(Fqr,"van"),Fqr.forEach(t),DQe=r(jCe," \u2014 "),bk=n(jCe,"A",{href:!0});var vqr=s(bk);GQe=r(vqr,"VanConfig"),vqr.forEach(t),OQe=r(jCe," (VAN model)"),jCe.forEach(t),VQe=i(y),Of=n(y,"LI",{});var DCe=s(Of);Vee=n(DCe,"STRONG",{});var Tqr=s(Vee);XQe=r(Tqr,"vilt"),Tqr.forEach(t),zQe=r(DCe," \u2014 "),Fk=n(DCe,"A",{href:!0});var Mqr=s(Fk);QQe=r(Mqr,"ViltConfig"),Mqr.forEach(t),WQe=r(DCe," (ViLT model)"),DCe.forEach(t),HQe=i(y),Vf=n(y,"LI",{});var GCe=s(Vf);Xee=n(GCe,"STRONG",{});var Eqr=s(Xee);UQe=r(Eqr,"vision-encoder-decoder"),Eqr.forEach(t),JQe=r(GCe," \u2014 "),vk=n(GCe,"A",{href:!0});var Cqr=s(vk);YQe=r(Cqr,"VisionEncoderDecoderConfig"),Cqr.forEach(t),KQe=r(GCe," (Vision Encoder decoder model)"),GCe.forEach(t),ZQe=i(y),Xf=n(y,"LI",{});var OCe=s(Xf);zee=n(OCe,"STRONG",{});var wqr=s(zee);eWe=r(wqr,"vision-text-dual-encoder"),wqr.forEach(t),oWe=r(OCe," \u2014 "),Tk=n(OCe,"A",{href:!0});var Aqr=s(Tk);rWe=r(Aqr,"VisionTextDualEncoderConfig"),Aqr.forEach(t),tWe=r(OCe," (VisionTextDualEncoder model)"),OCe.forEach(t),aWe=i(y),zf=n(y,"LI",{});var VCe=s(zf);Qee=n(VCe,"STRONG",{});var yqr=s(Qee);nWe=r(yqr,"visual_bert"),yqr.forEach(t),sWe=r(VCe," \u2014 "),Mk=n(VCe,"A",{href:!0});var Lqr=s(Mk);lWe=r(Lqr,"VisualBertConfig"),Lqr.forEach(t),iWe=r(VCe," (VisualBert model)"),VCe.forEach(t),dWe=i(y),Qf=n(y,"LI",{});var XCe=s(Qf);Wee=n(XCe,"STRONG",{});var xqr=s(Wee);cWe=r(xqr,"vit"),xqr.forEach(t),mWe=r(XCe," \u2014 "),Ek=n(XCe,"A",{href:!0});var $qr=s(Ek);fWe=r($qr,"ViTConfig"),$qr.forEach(t),gWe=r(XCe," (ViT model)"),XCe.forEach(t),hWe=i(y),Wf=n(y,"LI",{});var zCe=s(Wf);Hee=n(zCe,"STRONG",{});var kqr=s(Hee);uWe=r(kqr,"vit_mae"),kqr.forEach(t),pWe=r(zCe," \u2014 "),Ck=n(zCe,"A",{href:!0});var Sqr=s(Ck);_We=r(Sqr,"ViTMAEConfig"),Sqr.forEach(t),bWe=r(zCe," (ViTMAE model)"),zCe.forEach(t),FWe=i(y),Hf=n(y,"LI",{});var QCe=s(Hf);Uee=n(QCe,"STRONG",{});var Rqr=s(Uee);vWe=r(Rqr,"wav2vec2"),Rqr.forEach(t),TWe=r(QCe," \u2014 "),wk=n(QCe,"A",{href:!0});var Bqr=s(wk);MWe=r(Bqr,"Wav2Vec2Config"),Bqr.forEach(t),EWe=r(QCe," (Wav2Vec2 model)"),QCe.forEach(t),CWe=i(y),Uf=n(y,"LI",{});var WCe=s(Uf);Jee=n(WCe,"STRONG",{});var Pqr=s(Jee);wWe=r(Pqr,"wavlm"),Pqr.forEach(t),AWe=r(WCe," \u2014 "),Ak=n(WCe,"A",{href:!0});var Iqr=s(Ak);yWe=r(Iqr,"WavLMConfig"),Iqr.forEach(t),LWe=r(WCe," (WavLM model)"),WCe.forEach(t),xWe=i(y),Jf=n(y,"LI",{});var HCe=s(Jf);Yee=n(HCe,"STRONG",{});var qqr=s(Yee);$We=r(qqr,"xglm"),qqr.forEach(t),kWe=r(HCe," \u2014 "),yk=n(HCe,"A",{href:!0});var Nqr=s(yk);SWe=r(Nqr,"XGLMConfig"),Nqr.forEach(t),RWe=r(HCe," (XGLM model)"),HCe.forEach(t),BWe=i(y),Yf=n(y,"LI",{});var UCe=s(Yf);Kee=n(UCe,"STRONG",{});var jqr=s(Kee);PWe=r(jqr,"xlm"),jqr.forEach(t),IWe=r(UCe," \u2014 "),Lk=n(UCe,"A",{href:!0});var Dqr=s(Lk);qWe=r(Dqr,"XLMConfig"),Dqr.forEach(t),NWe=r(UCe," (XLM model)"),UCe.forEach(t),jWe=i(y),Kf=n(y,"LI",{});var JCe=s(Kf);Zee=n(JCe,"STRONG",{});var Gqr=s(Zee);DWe=r(Gqr,"xlm-prophetnet"),Gqr.forEach(t),GWe=r(JCe," \u2014 "),xk=n(JCe,"A",{href:!0});var Oqr=s(xk);OWe=r(Oqr,"XLMProphetNetConfig"),Oqr.forEach(t),VWe=r(JCe," (XLMProphetNet model)"),JCe.forEach(t),XWe=i(y),Zf=n(y,"LI",{});var YCe=s(Zf);eoe=n(YCe,"STRONG",{});var Vqr=s(eoe);zWe=r(Vqr,"xlm-roberta"),Vqr.forEach(t),QWe=r(YCe," \u2014 "),$k=n(YCe,"A",{href:!0});var Xqr=s($k);WWe=r(Xqr,"XLMRobertaConfig"),Xqr.forEach(t),HWe=r(YCe," (XLM-RoBERTa model)"),YCe.forEach(t),UWe=i(y),eg=n(y,"LI",{});var KCe=s(eg);ooe=n(KCe,"STRONG",{});var zqr=s(ooe);JWe=r(zqr,"xlm-roberta-xl"),zqr.forEach(t),YWe=r(KCe," \u2014 "),kk=n(KCe,"A",{href:!0});var Qqr=s(kk);KWe=r(Qqr,"XLMRobertaXLConfig"),Qqr.forEach(t),ZWe=r(KCe," (XLM-RoBERTa-XL model)"),KCe.forEach(t),eHe=i(y),og=n(y,"LI",{});var ZCe=s(og);roe=n(ZCe,"STRONG",{});var Wqr=s(roe);oHe=r(Wqr,"xlnet"),Wqr.forEach(t),rHe=r(ZCe," \u2014 "),Sk=n(ZCe,"A",{href:!0});var Hqr=s(Sk);tHe=r(Hqr,"XLNetConfig"),Hqr.forEach(t),aHe=r(ZCe," (XLNet model)"),ZCe.forEach(t),nHe=i(y),rg=n(y,"LI",{});var e3e=s(rg);toe=n(e3e,"STRONG",{});var Uqr=s(toe);sHe=r(Uqr,"yolos"),Uqr.forEach(t),lHe=r(e3e," \u2014 "),Rk=n(e3e,"A",{href:!0});var Jqr=s(Rk);iHe=r(Jqr,"YolosConfig"),Jqr.forEach(t),dHe=r(e3e," (YOLOS model)"),e3e.forEach(t),cHe=i(y),tg=n(y,"LI",{});var o3e=s(tg);aoe=n(o3e,"STRONG",{});var Yqr=s(aoe);mHe=r(Yqr,"yoso"),Yqr.forEach(t),fHe=r(o3e," \u2014 "),Bk=n(o3e,"A",{href:!0});var Kqr=s(Bk);gHe=r(Kqr,"YosoConfig"),Kqr.forEach(t),hHe=r(o3e," (YOSO model)"),o3e.forEach(t),y.forEach(t),uHe=i(Yr),T(ag.$$.fragment,Yr),Yr.forEach(t),pHe=i(Jr),ng=n(Jr,"DIV",{class:!0});var lIe=s(ng);T(L6.$$.fragment,lIe),_He=i(lIe),noe=n(lIe,"P",{});var Zqr=s(noe);bHe=r(Zqr,"Register a new configuration for this class."),Zqr.forEach(t),lIe.forEach(t),Jr.forEach(t),fBe=i(m),mi=n(m,"H2",{class:!0});var iIe=s(mi);sg=n(iIe,"A",{id:!0,class:!0,href:!0});var eNr=s(sg);soe=n(eNr,"SPAN",{});var oNr=s(soe);T(x6.$$.fragment,oNr),oNr.forEach(t),eNr.forEach(t),FHe=i(iIe),loe=n(iIe,"SPAN",{});var rNr=s(loe);vHe=r(rNr,"AutoTokenizer"),rNr.forEach(t),iIe.forEach(t),gBe=i(m),wo=n(m,"DIV",{class:!0});var ks=s(wo);T($6.$$.fragment,ks),THe=i(ks),k6=n(ks,"P",{});var dIe=s(k6);MHe=r(dIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Pk=n(dIe,"A",{href:!0});var tNr=s(Pk);EHe=r(tNr,"AutoTokenizer.from_pretrained()"),tNr.forEach(t),CHe=r(dIe," class method."),dIe.forEach(t),wHe=i(ks),S6=n(ks,"P",{});var cIe=s(S6);AHe=r(cIe,"This class cannot be instantiated directly using "),ioe=n(cIe,"CODE",{});var aNr=s(ioe);yHe=r(aNr,"__init__()"),aNr.forEach(t),LHe=r(cIe," (throws an error)."),cIe.forEach(t),xHe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(R6.$$.fragment,Ss),$He=i(Ss),doe=n(Ss,"P",{});var nNr=s(doe);kHe=r(nNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nNr.forEach(t),SHe=i(Ss),Ta=n(Ss,"P",{});var CA=s(Ta);RHe=r(CA,"The tokenizer class to instantiate is selected based on the "),coe=n(CA,"CODE",{});var sNr=s(coe);BHe=r(sNr,"model_type"),sNr.forEach(t),PHe=r(CA,` property of the config object (either
passed as an argument or loaded from `),moe=n(CA,"CODE",{});var lNr=s(moe);IHe=r(lNr,"pretrained_model_name_or_path"),lNr.forEach(t),qHe=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),foe=n(CA,"CODE",{});var iNr=s(foe);NHe=r(iNr,"pretrained_model_name_or_path"),iNr.forEach(t),jHe=r(CA,":"),CA.forEach(t),DHe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var xx=s(yn);goe=n(xx,"STRONG",{});var dNr=s(goe);GHe=r(dNr,"albert"),dNr.forEach(t),OHe=r(xx," \u2014 "),Ik=n(xx,"A",{href:!0});var cNr=s(Ik);VHe=r(cNr,"AlbertTokenizer"),cNr.forEach(t),XHe=r(xx," or "),qk=n(xx,"A",{href:!0});var mNr=s(qk);zHe=r(mNr,"AlbertTokenizerFast"),mNr.forEach(t),QHe=r(xx," (ALBERT model)"),xx.forEach(t),WHe=i(S),Ln=n(S,"LI",{});var $x=s(Ln);hoe=n($x,"STRONG",{});var fNr=s(hoe);HHe=r(fNr,"bart"),fNr.forEach(t),UHe=r($x," \u2014 "),Nk=n($x,"A",{href:!0});var gNr=s(Nk);JHe=r(gNr,"BartTokenizer"),gNr.forEach(t),YHe=r($x," or "),jk=n($x,"A",{href:!0});var hNr=s(jk);KHe=r(hNr,"BartTokenizerFast"),hNr.forEach(t),ZHe=r($x," (BART model)"),$x.forEach(t),eUe=i(S),xn=n(S,"LI",{});var kx=s(xn);uoe=n(kx,"STRONG",{});var uNr=s(uoe);oUe=r(uNr,"barthez"),uNr.forEach(t),rUe=r(kx," \u2014 "),Dk=n(kx,"A",{href:!0});var pNr=s(Dk);tUe=r(pNr,"BarthezTokenizer"),pNr.forEach(t),aUe=r(kx," or "),Gk=n(kx,"A",{href:!0});var _Nr=s(Gk);nUe=r(_Nr,"BarthezTokenizerFast"),_Nr.forEach(t),sUe=r(kx," (BARThez model)"),kx.forEach(t),lUe=i(S),lg=n(S,"LI",{});var r3e=s(lg);poe=n(r3e,"STRONG",{});var bNr=s(poe);iUe=r(bNr,"bartpho"),bNr.forEach(t),dUe=r(r3e," \u2014 "),Ok=n(r3e,"A",{href:!0});var FNr=s(Ok);cUe=r(FNr,"BartphoTokenizer"),FNr.forEach(t),mUe=r(r3e," (BARTpho model)"),r3e.forEach(t),fUe=i(S),$n=n(S,"LI",{});var Sx=s($n);_oe=n(Sx,"STRONG",{});var vNr=s(_oe);gUe=r(vNr,"bert"),vNr.forEach(t),hUe=r(Sx," \u2014 "),Vk=n(Sx,"A",{href:!0});var TNr=s(Vk);uUe=r(TNr,"BertTokenizer"),TNr.forEach(t),pUe=r(Sx," or "),Xk=n(Sx,"A",{href:!0});var MNr=s(Xk);_Ue=r(MNr,"BertTokenizerFast"),MNr.forEach(t),bUe=r(Sx," (BERT model)"),Sx.forEach(t),FUe=i(S),ig=n(S,"LI",{});var t3e=s(ig);boe=n(t3e,"STRONG",{});var ENr=s(boe);vUe=r(ENr,"bert-generation"),ENr.forEach(t),TUe=r(t3e," \u2014 "),zk=n(t3e,"A",{href:!0});var CNr=s(zk);MUe=r(CNr,"BertGenerationTokenizer"),CNr.forEach(t),EUe=r(t3e," (Bert Generation model)"),t3e.forEach(t),CUe=i(S),dg=n(S,"LI",{});var a3e=s(dg);Foe=n(a3e,"STRONG",{});var wNr=s(Foe);wUe=r(wNr,"bert-japanese"),wNr.forEach(t),AUe=r(a3e," \u2014 "),Qk=n(a3e,"A",{href:!0});var ANr=s(Qk);yUe=r(ANr,"BertJapaneseTokenizer"),ANr.forEach(t),LUe=r(a3e," (BertJapanese model)"),a3e.forEach(t),xUe=i(S),cg=n(S,"LI",{});var n3e=s(cg);voe=n(n3e,"STRONG",{});var yNr=s(voe);$Ue=r(yNr,"bertweet"),yNr.forEach(t),kUe=r(n3e," \u2014 "),Wk=n(n3e,"A",{href:!0});var LNr=s(Wk);SUe=r(LNr,"BertweetTokenizer"),LNr.forEach(t),RUe=r(n3e," (Bertweet model)"),n3e.forEach(t),BUe=i(S),kn=n(S,"LI",{});var Rx=s(kn);Toe=n(Rx,"STRONG",{});var xNr=s(Toe);PUe=r(xNr,"big_bird"),xNr.forEach(t),IUe=r(Rx," \u2014 "),Hk=n(Rx,"A",{href:!0});var $Nr=s(Hk);qUe=r($Nr,"BigBirdTokenizer"),$Nr.forEach(t),NUe=r(Rx," or "),Uk=n(Rx,"A",{href:!0});var kNr=s(Uk);jUe=r(kNr,"BigBirdTokenizerFast"),kNr.forEach(t),DUe=r(Rx," (BigBird model)"),Rx.forEach(t),GUe=i(S),Sn=n(S,"LI",{});var Bx=s(Sn);Moe=n(Bx,"STRONG",{});var SNr=s(Moe);OUe=r(SNr,"bigbird_pegasus"),SNr.forEach(t),VUe=r(Bx," \u2014 "),Jk=n(Bx,"A",{href:!0});var RNr=s(Jk);XUe=r(RNr,"PegasusTokenizer"),RNr.forEach(t),zUe=r(Bx," or "),Yk=n(Bx,"A",{href:!0});var BNr=s(Yk);QUe=r(BNr,"PegasusTokenizerFast"),BNr.forEach(t),WUe=r(Bx," (BigBirdPegasus model)"),Bx.forEach(t),HUe=i(S),Rn=n(S,"LI",{});var Px=s(Rn);Eoe=n(Px,"STRONG",{});var PNr=s(Eoe);UUe=r(PNr,"blenderbot"),PNr.forEach(t),JUe=r(Px," \u2014 "),Kk=n(Px,"A",{href:!0});var INr=s(Kk);YUe=r(INr,"BlenderbotTokenizer"),INr.forEach(t),KUe=r(Px," or "),Zk=n(Px,"A",{href:!0});var qNr=s(Zk);ZUe=r(qNr,"BlenderbotTokenizerFast"),qNr.forEach(t),eJe=r(Px," (Blenderbot model)"),Px.forEach(t),oJe=i(S),mg=n(S,"LI",{});var s3e=s(mg);Coe=n(s3e,"STRONG",{});var NNr=s(Coe);rJe=r(NNr,"blenderbot-small"),NNr.forEach(t),tJe=r(s3e," \u2014 "),eS=n(s3e,"A",{href:!0});var jNr=s(eS);aJe=r(jNr,"BlenderbotSmallTokenizer"),jNr.forEach(t),nJe=r(s3e," (BlenderbotSmall model)"),s3e.forEach(t),sJe=i(S),fg=n(S,"LI",{});var l3e=s(fg);woe=n(l3e,"STRONG",{});var DNr=s(woe);lJe=r(DNr,"byt5"),DNr.forEach(t),iJe=r(l3e," \u2014 "),oS=n(l3e,"A",{href:!0});var GNr=s(oS);dJe=r(GNr,"ByT5Tokenizer"),GNr.forEach(t),cJe=r(l3e," (ByT5 model)"),l3e.forEach(t),mJe=i(S),Bn=n(S,"LI",{});var Ix=s(Bn);Aoe=n(Ix,"STRONG",{});var ONr=s(Aoe);fJe=r(ONr,"camembert"),ONr.forEach(t),gJe=r(Ix," \u2014 "),rS=n(Ix,"A",{href:!0});var VNr=s(rS);hJe=r(VNr,"CamembertTokenizer"),VNr.forEach(t),uJe=r(Ix," or "),tS=n(Ix,"A",{href:!0});var XNr=s(tS);pJe=r(XNr,"CamembertTokenizerFast"),XNr.forEach(t),_Je=r(Ix," (CamemBERT model)"),Ix.forEach(t),bJe=i(S),gg=n(S,"LI",{});var i3e=s(gg);yoe=n(i3e,"STRONG",{});var zNr=s(yoe);FJe=r(zNr,"canine"),zNr.forEach(t),vJe=r(i3e," \u2014 "),aS=n(i3e,"A",{href:!0});var QNr=s(aS);TJe=r(QNr,"CanineTokenizer"),QNr.forEach(t),MJe=r(i3e," (Canine model)"),i3e.forEach(t),EJe=i(S),Pn=n(S,"LI",{});var qx=s(Pn);Loe=n(qx,"STRONG",{});var WNr=s(Loe);CJe=r(WNr,"clip"),WNr.forEach(t),wJe=r(qx," \u2014 "),nS=n(qx,"A",{href:!0});var HNr=s(nS);AJe=r(HNr,"CLIPTokenizer"),HNr.forEach(t),yJe=r(qx," or "),sS=n(qx,"A",{href:!0});var UNr=s(sS);LJe=r(UNr,"CLIPTokenizerFast"),UNr.forEach(t),xJe=r(qx," (CLIP model)"),qx.forEach(t),$Je=i(S),In=n(S,"LI",{});var Nx=s(In);xoe=n(Nx,"STRONG",{});var JNr=s(xoe);kJe=r(JNr,"convbert"),JNr.forEach(t),SJe=r(Nx," \u2014 "),lS=n(Nx,"A",{href:!0});var YNr=s(lS);RJe=r(YNr,"ConvBertTokenizer"),YNr.forEach(t),BJe=r(Nx," or "),iS=n(Nx,"A",{href:!0});var KNr=s(iS);PJe=r(KNr,"ConvBertTokenizerFast"),KNr.forEach(t),IJe=r(Nx," (ConvBERT model)"),Nx.forEach(t),qJe=i(S),qn=n(S,"LI",{});var jx=s(qn);$oe=n(jx,"STRONG",{});var ZNr=s($oe);NJe=r(ZNr,"cpm"),ZNr.forEach(t),jJe=r(jx," \u2014 "),dS=n(jx,"A",{href:!0});var ejr=s(dS);DJe=r(ejr,"CpmTokenizer"),ejr.forEach(t),GJe=r(jx," or "),cS=n(jx,"A",{href:!0});var ojr=s(cS);OJe=r(ojr,"CpmTokenizerFast"),ojr.forEach(t),VJe=r(jx," (CPM model)"),jx.forEach(t),XJe=i(S),hg=n(S,"LI",{});var d3e=s(hg);koe=n(d3e,"STRONG",{});var rjr=s(koe);zJe=r(rjr,"ctrl"),rjr.forEach(t),QJe=r(d3e," \u2014 "),mS=n(d3e,"A",{href:!0});var tjr=s(mS);WJe=r(tjr,"CTRLTokenizer"),tjr.forEach(t),HJe=r(d3e," (CTRL model)"),d3e.forEach(t),UJe=i(S),Nn=n(S,"LI",{});var Dx=s(Nn);Soe=n(Dx,"STRONG",{});var ajr=s(Soe);JJe=r(ajr,"data2vec-text"),ajr.forEach(t),YJe=r(Dx," \u2014 "),fS=n(Dx,"A",{href:!0});var njr=s(fS);KJe=r(njr,"RobertaTokenizer"),njr.forEach(t),ZJe=r(Dx," or "),gS=n(Dx,"A",{href:!0});var sjr=s(gS);eYe=r(sjr,"RobertaTokenizerFast"),sjr.forEach(t),oYe=r(Dx," (Data2VecText model)"),Dx.forEach(t),rYe=i(S),jn=n(S,"LI",{});var Gx=s(jn);Roe=n(Gx,"STRONG",{});var ljr=s(Roe);tYe=r(ljr,"deberta"),ljr.forEach(t),aYe=r(Gx," \u2014 "),hS=n(Gx,"A",{href:!0});var ijr=s(hS);nYe=r(ijr,"DebertaTokenizer"),ijr.forEach(t),sYe=r(Gx," or "),uS=n(Gx,"A",{href:!0});var djr=s(uS);lYe=r(djr,"DebertaTokenizerFast"),djr.forEach(t),iYe=r(Gx," (DeBERTa model)"),Gx.forEach(t),dYe=i(S),Dn=n(S,"LI",{});var Ox=s(Dn);Boe=n(Ox,"STRONG",{});var cjr=s(Boe);cYe=r(cjr,"deberta-v2"),cjr.forEach(t),mYe=r(Ox," \u2014 "),pS=n(Ox,"A",{href:!0});var mjr=s(pS);fYe=r(mjr,"DebertaV2Tokenizer"),mjr.forEach(t),gYe=r(Ox," or "),_S=n(Ox,"A",{href:!0});var fjr=s(_S);hYe=r(fjr,"DebertaV2TokenizerFast"),fjr.forEach(t),uYe=r(Ox," (DeBERTa-v2 model)"),Ox.forEach(t),pYe=i(S),Gn=n(S,"LI",{});var Vx=s(Gn);Poe=n(Vx,"STRONG",{});var gjr=s(Poe);_Ye=r(gjr,"distilbert"),gjr.forEach(t),bYe=r(Vx," \u2014 "),bS=n(Vx,"A",{href:!0});var hjr=s(bS);FYe=r(hjr,"DistilBertTokenizer"),hjr.forEach(t),vYe=r(Vx," or "),FS=n(Vx,"A",{href:!0});var ujr=s(FS);TYe=r(ujr,"DistilBertTokenizerFast"),ujr.forEach(t),MYe=r(Vx," (DistilBERT model)"),Vx.forEach(t),EYe=i(S),On=n(S,"LI",{});var Xx=s(On);Ioe=n(Xx,"STRONG",{});var pjr=s(Ioe);CYe=r(pjr,"dpr"),pjr.forEach(t),wYe=r(Xx," \u2014 "),vS=n(Xx,"A",{href:!0});var _jr=s(vS);AYe=r(_jr,"DPRQuestionEncoderTokenizer"),_jr.forEach(t),yYe=r(Xx," or "),TS=n(Xx,"A",{href:!0});var bjr=s(TS);LYe=r(bjr,"DPRQuestionEncoderTokenizerFast"),bjr.forEach(t),xYe=r(Xx," (DPR model)"),Xx.forEach(t),$Ye=i(S),Vn=n(S,"LI",{});var zx=s(Vn);qoe=n(zx,"STRONG",{});var Fjr=s(qoe);kYe=r(Fjr,"electra"),Fjr.forEach(t),SYe=r(zx," \u2014 "),MS=n(zx,"A",{href:!0});var vjr=s(MS);RYe=r(vjr,"ElectraTokenizer"),vjr.forEach(t),BYe=r(zx," or "),ES=n(zx,"A",{href:!0});var Tjr=s(ES);PYe=r(Tjr,"ElectraTokenizerFast"),Tjr.forEach(t),IYe=r(zx," (ELECTRA model)"),zx.forEach(t),qYe=i(S),ug=n(S,"LI",{});var c3e=s(ug);Noe=n(c3e,"STRONG",{});var Mjr=s(Noe);NYe=r(Mjr,"flaubert"),Mjr.forEach(t),jYe=r(c3e," \u2014 "),CS=n(c3e,"A",{href:!0});var Ejr=s(CS);DYe=r(Ejr,"FlaubertTokenizer"),Ejr.forEach(t),GYe=r(c3e," (FlauBERT model)"),c3e.forEach(t),OYe=i(S),Xn=n(S,"LI",{});var Qx=s(Xn);joe=n(Qx,"STRONG",{});var Cjr=s(joe);VYe=r(Cjr,"fnet"),Cjr.forEach(t),XYe=r(Qx," \u2014 "),wS=n(Qx,"A",{href:!0});var wjr=s(wS);zYe=r(wjr,"FNetTokenizer"),wjr.forEach(t),QYe=r(Qx," or "),AS=n(Qx,"A",{href:!0});var Ajr=s(AS);WYe=r(Ajr,"FNetTokenizerFast"),Ajr.forEach(t),HYe=r(Qx," (FNet model)"),Qx.forEach(t),UYe=i(S),pg=n(S,"LI",{});var m3e=s(pg);Doe=n(m3e,"STRONG",{});var yjr=s(Doe);JYe=r(yjr,"fsmt"),yjr.forEach(t),YYe=r(m3e," \u2014 "),yS=n(m3e,"A",{href:!0});var Ljr=s(yS);KYe=r(Ljr,"FSMTTokenizer"),Ljr.forEach(t),ZYe=r(m3e," (FairSeq Machine-Translation model)"),m3e.forEach(t),eKe=i(S),zn=n(S,"LI",{});var Wx=s(zn);Goe=n(Wx,"STRONG",{});var xjr=s(Goe);oKe=r(xjr,"funnel"),xjr.forEach(t),rKe=r(Wx," \u2014 "),LS=n(Wx,"A",{href:!0});var $jr=s(LS);tKe=r($jr,"FunnelTokenizer"),$jr.forEach(t),aKe=r(Wx," or "),xS=n(Wx,"A",{href:!0});var kjr=s(xS);nKe=r(kjr,"FunnelTokenizerFast"),kjr.forEach(t),sKe=r(Wx," (Funnel Transformer model)"),Wx.forEach(t),lKe=i(S),Qn=n(S,"LI",{});var Hx=s(Qn);Ooe=n(Hx,"STRONG",{});var Sjr=s(Ooe);iKe=r(Sjr,"gpt2"),Sjr.forEach(t),dKe=r(Hx," \u2014 "),$S=n(Hx,"A",{href:!0});var Rjr=s($S);cKe=r(Rjr,"GPT2Tokenizer"),Rjr.forEach(t),mKe=r(Hx," or "),kS=n(Hx,"A",{href:!0});var Bjr=s(kS);fKe=r(Bjr,"GPT2TokenizerFast"),Bjr.forEach(t),gKe=r(Hx," (OpenAI GPT-2 model)"),Hx.forEach(t),hKe=i(S),Wn=n(S,"LI",{});var Ux=s(Wn);Voe=n(Ux,"STRONG",{});var Pjr=s(Voe);uKe=r(Pjr,"gpt_neo"),Pjr.forEach(t),pKe=r(Ux," \u2014 "),SS=n(Ux,"A",{href:!0});var Ijr=s(SS);_Ke=r(Ijr,"GPT2Tokenizer"),Ijr.forEach(t),bKe=r(Ux," or "),RS=n(Ux,"A",{href:!0});var qjr=s(RS);FKe=r(qjr,"GPT2TokenizerFast"),qjr.forEach(t),vKe=r(Ux," (GPT Neo model)"),Ux.forEach(t),TKe=i(S),Hn=n(S,"LI",{});var Jx=s(Hn);Xoe=n(Jx,"STRONG",{});var Njr=s(Xoe);MKe=r(Njr,"gptj"),Njr.forEach(t),EKe=r(Jx," \u2014 "),BS=n(Jx,"A",{href:!0});var jjr=s(BS);CKe=r(jjr,"GPT2Tokenizer"),jjr.forEach(t),wKe=r(Jx," or "),PS=n(Jx,"A",{href:!0});var Djr=s(PS);AKe=r(Djr,"GPT2TokenizerFast"),Djr.forEach(t),yKe=r(Jx," (GPT-J model)"),Jx.forEach(t),LKe=i(S),Un=n(S,"LI",{});var Yx=s(Un);zoe=n(Yx,"STRONG",{});var Gjr=s(zoe);xKe=r(Gjr,"herbert"),Gjr.forEach(t),$Ke=r(Yx," \u2014 "),IS=n(Yx,"A",{href:!0});var Ojr=s(IS);kKe=r(Ojr,"HerbertTokenizer"),Ojr.forEach(t),SKe=r(Yx," or "),qS=n(Yx,"A",{href:!0});var Vjr=s(qS);RKe=r(Vjr,"HerbertTokenizerFast"),Vjr.forEach(t),BKe=r(Yx," (HerBERT model)"),Yx.forEach(t),PKe=i(S),_g=n(S,"LI",{});var f3e=s(_g);Qoe=n(f3e,"STRONG",{});var Xjr=s(Qoe);IKe=r(Xjr,"hubert"),Xjr.forEach(t),qKe=r(f3e," \u2014 "),NS=n(f3e,"A",{href:!0});var zjr=s(NS);NKe=r(zjr,"Wav2Vec2CTCTokenizer"),zjr.forEach(t),jKe=r(f3e," (Hubert model)"),f3e.forEach(t),DKe=i(S),Jn=n(S,"LI",{});var Kx=s(Jn);Woe=n(Kx,"STRONG",{});var Qjr=s(Woe);GKe=r(Qjr,"ibert"),Qjr.forEach(t),OKe=r(Kx," \u2014 "),jS=n(Kx,"A",{href:!0});var Wjr=s(jS);VKe=r(Wjr,"RobertaTokenizer"),Wjr.forEach(t),XKe=r(Kx," or "),DS=n(Kx,"A",{href:!0});var Hjr=s(DS);zKe=r(Hjr,"RobertaTokenizerFast"),Hjr.forEach(t),QKe=r(Kx," (I-BERT model)"),Kx.forEach(t),WKe=i(S),Yn=n(S,"LI",{});var Zx=s(Yn);Hoe=n(Zx,"STRONG",{});var Ujr=s(Hoe);HKe=r(Ujr,"layoutlm"),Ujr.forEach(t),UKe=r(Zx," \u2014 "),GS=n(Zx,"A",{href:!0});var Jjr=s(GS);JKe=r(Jjr,"LayoutLMTokenizer"),Jjr.forEach(t),YKe=r(Zx," or "),OS=n(Zx,"A",{href:!0});var Yjr=s(OS);KKe=r(Yjr,"LayoutLMTokenizerFast"),Yjr.forEach(t),ZKe=r(Zx," (LayoutLM model)"),Zx.forEach(t),eZe=i(S),Kn=n(S,"LI",{});var e9=s(Kn);Uoe=n(e9,"STRONG",{});var Kjr=s(Uoe);oZe=r(Kjr,"layoutlmv2"),Kjr.forEach(t),rZe=r(e9," \u2014 "),VS=n(e9,"A",{href:!0});var Zjr=s(VS);tZe=r(Zjr,"LayoutLMv2Tokenizer"),Zjr.forEach(t),aZe=r(e9," or "),XS=n(e9,"A",{href:!0});var eDr=s(XS);nZe=r(eDr,"LayoutLMv2TokenizerFast"),eDr.forEach(t),sZe=r(e9," (LayoutLMv2 model)"),e9.forEach(t),lZe=i(S),Zn=n(S,"LI",{});var o9=s(Zn);Joe=n(o9,"STRONG",{});var oDr=s(Joe);iZe=r(oDr,"layoutxlm"),oDr.forEach(t),dZe=r(o9," \u2014 "),zS=n(o9,"A",{href:!0});var rDr=s(zS);cZe=r(rDr,"LayoutXLMTokenizer"),rDr.forEach(t),mZe=r(o9," or "),QS=n(o9,"A",{href:!0});var tDr=s(QS);fZe=r(tDr,"LayoutXLMTokenizerFast"),tDr.forEach(t),gZe=r(o9," (LayoutXLM model)"),o9.forEach(t),hZe=i(S),es=n(S,"LI",{});var r9=s(es);Yoe=n(r9,"STRONG",{});var aDr=s(Yoe);uZe=r(aDr,"led"),aDr.forEach(t),pZe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var nDr=s(WS);_Ze=r(nDr,"LEDTokenizer"),nDr.forEach(t),bZe=r(r9," or "),HS=n(r9,"A",{href:!0});var sDr=s(HS);FZe=r(sDr,"LEDTokenizerFast"),sDr.forEach(t),vZe=r(r9," (LED model)"),r9.forEach(t),TZe=i(S),os=n(S,"LI",{});var t9=s(os);Koe=n(t9,"STRONG",{});var lDr=s(Koe);MZe=r(lDr,"longformer"),lDr.forEach(t),EZe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var iDr=s(US);CZe=r(iDr,"LongformerTokenizer"),iDr.forEach(t),wZe=r(t9," or "),JS=n(t9,"A",{href:!0});var dDr=s(JS);AZe=r(dDr,"LongformerTokenizerFast"),dDr.forEach(t),yZe=r(t9," (Longformer model)"),t9.forEach(t),LZe=i(S),bg=n(S,"LI",{});var g3e=s(bg);Zoe=n(g3e,"STRONG",{});var cDr=s(Zoe);xZe=r(cDr,"luke"),cDr.forEach(t),$Ze=r(g3e," \u2014 "),YS=n(g3e,"A",{href:!0});var mDr=s(YS);kZe=r(mDr,"LukeTokenizer"),mDr.forEach(t),SZe=r(g3e," (LUKE model)"),g3e.forEach(t),RZe=i(S),rs=n(S,"LI",{});var a9=s(rs);ere=n(a9,"STRONG",{});var fDr=s(ere);BZe=r(fDr,"lxmert"),fDr.forEach(t),PZe=r(a9," \u2014 "),KS=n(a9,"A",{href:!0});var gDr=s(KS);IZe=r(gDr,"LxmertTokenizer"),gDr.forEach(t),qZe=r(a9," or "),ZS=n(a9,"A",{href:!0});var hDr=s(ZS);NZe=r(hDr,"LxmertTokenizerFast"),hDr.forEach(t),jZe=r(a9," (LXMERT model)"),a9.forEach(t),DZe=i(S),Fg=n(S,"LI",{});var h3e=s(Fg);ore=n(h3e,"STRONG",{});var uDr=s(ore);GZe=r(uDr,"m2m_100"),uDr.forEach(t),OZe=r(h3e," \u2014 "),eR=n(h3e,"A",{href:!0});var pDr=s(eR);VZe=r(pDr,"M2M100Tokenizer"),pDr.forEach(t),XZe=r(h3e," (M2M100 model)"),h3e.forEach(t),zZe=i(S),vg=n(S,"LI",{});var u3e=s(vg);rre=n(u3e,"STRONG",{});var _Dr=s(rre);QZe=r(_Dr,"marian"),_Dr.forEach(t),WZe=r(u3e," \u2014 "),oR=n(u3e,"A",{href:!0});var bDr=s(oR);HZe=r(bDr,"MarianTokenizer"),bDr.forEach(t),UZe=r(u3e," (Marian model)"),u3e.forEach(t),JZe=i(S),ts=n(S,"LI",{});var n9=s(ts);tre=n(n9,"STRONG",{});var FDr=s(tre);YZe=r(FDr,"mbart"),FDr.forEach(t),KZe=r(n9," \u2014 "),rR=n(n9,"A",{href:!0});var vDr=s(rR);ZZe=r(vDr,"MBartTokenizer"),vDr.forEach(t),eeo=r(n9," or "),tR=n(n9,"A",{href:!0});var TDr=s(tR);oeo=r(TDr,"MBartTokenizerFast"),TDr.forEach(t),reo=r(n9," (mBART model)"),n9.forEach(t),teo=i(S),as=n(S,"LI",{});var s9=s(as);are=n(s9,"STRONG",{});var MDr=s(are);aeo=r(MDr,"mbart50"),MDr.forEach(t),neo=r(s9," \u2014 "),aR=n(s9,"A",{href:!0});var EDr=s(aR);seo=r(EDr,"MBart50Tokenizer"),EDr.forEach(t),leo=r(s9," or "),nR=n(s9,"A",{href:!0});var CDr=s(nR);ieo=r(CDr,"MBart50TokenizerFast"),CDr.forEach(t),deo=r(s9," (mBART-50 model)"),s9.forEach(t),ceo=i(S),ns=n(S,"LI",{});var l9=s(ns);nre=n(l9,"STRONG",{});var wDr=s(nre);meo=r(wDr,"megatron-bert"),wDr.forEach(t),feo=r(l9," \u2014 "),sR=n(l9,"A",{href:!0});var ADr=s(sR);geo=r(ADr,"BertTokenizer"),ADr.forEach(t),heo=r(l9," or "),lR=n(l9,"A",{href:!0});var yDr=s(lR);ueo=r(yDr,"BertTokenizerFast"),yDr.forEach(t),peo=r(l9," (MegatronBert model)"),l9.forEach(t),_eo=i(S),Tg=n(S,"LI",{});var p3e=s(Tg);sre=n(p3e,"STRONG",{});var LDr=s(sre);beo=r(LDr,"mluke"),LDr.forEach(t),Feo=r(p3e," \u2014 "),iR=n(p3e,"A",{href:!0});var xDr=s(iR);veo=r(xDr,"MLukeTokenizer"),xDr.forEach(t),Teo=r(p3e," (mLUKE model)"),p3e.forEach(t),Meo=i(S),ss=n(S,"LI",{});var i9=s(ss);lre=n(i9,"STRONG",{});var $Dr=s(lre);Eeo=r($Dr,"mobilebert"),$Dr.forEach(t),Ceo=r(i9," \u2014 "),dR=n(i9,"A",{href:!0});var kDr=s(dR);weo=r(kDr,"MobileBertTokenizer"),kDr.forEach(t),Aeo=r(i9," or "),cR=n(i9,"A",{href:!0});var SDr=s(cR);yeo=r(SDr,"MobileBertTokenizerFast"),SDr.forEach(t),Leo=r(i9," (MobileBERT model)"),i9.forEach(t),xeo=i(S),ls=n(S,"LI",{});var d9=s(ls);ire=n(d9,"STRONG",{});var RDr=s(ire);$eo=r(RDr,"mpnet"),RDr.forEach(t),keo=r(d9," \u2014 "),mR=n(d9,"A",{href:!0});var BDr=s(mR);Seo=r(BDr,"MPNetTokenizer"),BDr.forEach(t),Reo=r(d9," or "),fR=n(d9,"A",{href:!0});var PDr=s(fR);Beo=r(PDr,"MPNetTokenizerFast"),PDr.forEach(t),Peo=r(d9," (MPNet model)"),d9.forEach(t),Ieo=i(S),is=n(S,"LI",{});var c9=s(is);dre=n(c9,"STRONG",{});var IDr=s(dre);qeo=r(IDr,"mt5"),IDr.forEach(t),Neo=r(c9," \u2014 "),gR=n(c9,"A",{href:!0});var qDr=s(gR);jeo=r(qDr,"MT5Tokenizer"),qDr.forEach(t),Deo=r(c9," or "),hR=n(c9,"A",{href:!0});var NDr=s(hR);Geo=r(NDr,"MT5TokenizerFast"),NDr.forEach(t),Oeo=r(c9," (mT5 model)"),c9.forEach(t),Veo=i(S),ds=n(S,"LI",{});var m9=s(ds);cre=n(m9,"STRONG",{});var jDr=s(cre);Xeo=r(jDr,"nystromformer"),jDr.forEach(t),zeo=r(m9," \u2014 "),uR=n(m9,"A",{href:!0});var DDr=s(uR);Qeo=r(DDr,"AlbertTokenizer"),DDr.forEach(t),Weo=r(m9," or "),pR=n(m9,"A",{href:!0});var GDr=s(pR);Heo=r(GDr,"AlbertTokenizerFast"),GDr.forEach(t),Ueo=r(m9," (Nystromformer model)"),m9.forEach(t),Jeo=i(S),cs=n(S,"LI",{});var f9=s(cs);mre=n(f9,"STRONG",{});var ODr=s(mre);Yeo=r(ODr,"openai-gpt"),ODr.forEach(t),Keo=r(f9," \u2014 "),_R=n(f9,"A",{href:!0});var VDr=s(_R);Zeo=r(VDr,"OpenAIGPTTokenizer"),VDr.forEach(t),eoo=r(f9," or "),bR=n(f9,"A",{href:!0});var XDr=s(bR);ooo=r(XDr,"OpenAIGPTTokenizerFast"),XDr.forEach(t),roo=r(f9," (OpenAI GPT model)"),f9.forEach(t),too=i(S),ms=n(S,"LI",{});var g9=s(ms);fre=n(g9,"STRONG",{});var zDr=s(fre);aoo=r(zDr,"pegasus"),zDr.forEach(t),noo=r(g9," \u2014 "),FR=n(g9,"A",{href:!0});var QDr=s(FR);soo=r(QDr,"PegasusTokenizer"),QDr.forEach(t),loo=r(g9," or "),vR=n(g9,"A",{href:!0});var WDr=s(vR);ioo=r(WDr,"PegasusTokenizerFast"),WDr.forEach(t),doo=r(g9," (Pegasus model)"),g9.forEach(t),coo=i(S),Mg=n(S,"LI",{});var _3e=s(Mg);gre=n(_3e,"STRONG",{});var HDr=s(gre);moo=r(HDr,"perceiver"),HDr.forEach(t),foo=r(_3e," \u2014 "),TR=n(_3e,"A",{href:!0});var UDr=s(TR);goo=r(UDr,"PerceiverTokenizer"),UDr.forEach(t),hoo=r(_3e," (Perceiver model)"),_3e.forEach(t),uoo=i(S),Eg=n(S,"LI",{});var b3e=s(Eg);hre=n(b3e,"STRONG",{});var JDr=s(hre);poo=r(JDr,"phobert"),JDr.forEach(t),_oo=r(b3e," \u2014 "),MR=n(b3e,"A",{href:!0});var YDr=s(MR);boo=r(YDr,"PhobertTokenizer"),YDr.forEach(t),Foo=r(b3e," (PhoBERT model)"),b3e.forEach(t),voo=i(S),Cg=n(S,"LI",{});var F3e=s(Cg);ure=n(F3e,"STRONG",{});var KDr=s(ure);Too=r(KDr,"plbart"),KDr.forEach(t),Moo=r(F3e," \u2014 "),ER=n(F3e,"A",{href:!0});var ZDr=s(ER);Eoo=r(ZDr,"PLBartTokenizer"),ZDr.forEach(t),Coo=r(F3e," (PLBart model)"),F3e.forEach(t),woo=i(S),wg=n(S,"LI",{});var v3e=s(wg);pre=n(v3e,"STRONG",{});var eGr=s(pre);Aoo=r(eGr,"prophetnet"),eGr.forEach(t),yoo=r(v3e," \u2014 "),CR=n(v3e,"A",{href:!0});var oGr=s(CR);Loo=r(oGr,"ProphetNetTokenizer"),oGr.forEach(t),xoo=r(v3e," (ProphetNet model)"),v3e.forEach(t),$oo=i(S),fs=n(S,"LI",{});var h9=s(fs);_re=n(h9,"STRONG",{});var rGr=s(_re);koo=r(rGr,"qdqbert"),rGr.forEach(t),Soo=r(h9," \u2014 "),wR=n(h9,"A",{href:!0});var tGr=s(wR);Roo=r(tGr,"BertTokenizer"),tGr.forEach(t),Boo=r(h9," or "),AR=n(h9,"A",{href:!0});var aGr=s(AR);Poo=r(aGr,"BertTokenizerFast"),aGr.forEach(t),Ioo=r(h9," (QDQBert model)"),h9.forEach(t),qoo=i(S),Ag=n(S,"LI",{});var T3e=s(Ag);bre=n(T3e,"STRONG",{});var nGr=s(bre);Noo=r(nGr,"rag"),nGr.forEach(t),joo=r(T3e," \u2014 "),yR=n(T3e,"A",{href:!0});var sGr=s(yR);Doo=r(sGr,"RagTokenizer"),sGr.forEach(t),Goo=r(T3e," (RAG model)"),T3e.forEach(t),Ooo=i(S),gs=n(S,"LI",{});var u9=s(gs);Fre=n(u9,"STRONG",{});var lGr=s(Fre);Voo=r(lGr,"realm"),lGr.forEach(t),Xoo=r(u9," \u2014 "),LR=n(u9,"A",{href:!0});var iGr=s(LR);zoo=r(iGr,"RealmTokenizer"),iGr.forEach(t),Qoo=r(u9," or "),xR=n(u9,"A",{href:!0});var dGr=s(xR);Woo=r(dGr,"RealmTokenizerFast"),dGr.forEach(t),Hoo=r(u9," (Realm model)"),u9.forEach(t),Uoo=i(S),hs=n(S,"LI",{});var p9=s(hs);vre=n(p9,"STRONG",{});var cGr=s(vre);Joo=r(cGr,"reformer"),cGr.forEach(t),Yoo=r(p9," \u2014 "),$R=n(p9,"A",{href:!0});var mGr=s($R);Koo=r(mGr,"ReformerTokenizer"),mGr.forEach(t),Zoo=r(p9," or "),kR=n(p9,"A",{href:!0});var fGr=s(kR);ero=r(fGr,"ReformerTokenizerFast"),fGr.forEach(t),oro=r(p9," (Reformer model)"),p9.forEach(t),rro=i(S),us=n(S,"LI",{});var _9=s(us);Tre=n(_9,"STRONG",{});var gGr=s(Tre);tro=r(gGr,"rembert"),gGr.forEach(t),aro=r(_9," \u2014 "),SR=n(_9,"A",{href:!0});var hGr=s(SR);nro=r(hGr,"RemBertTokenizer"),hGr.forEach(t),sro=r(_9," or "),RR=n(_9,"A",{href:!0});var uGr=s(RR);lro=r(uGr,"RemBertTokenizerFast"),uGr.forEach(t),iro=r(_9," (RemBERT model)"),_9.forEach(t),dro=i(S),ps=n(S,"LI",{});var b9=s(ps);Mre=n(b9,"STRONG",{});var pGr=s(Mre);cro=r(pGr,"retribert"),pGr.forEach(t),mro=r(b9," \u2014 "),BR=n(b9,"A",{href:!0});var _Gr=s(BR);fro=r(_Gr,"RetriBertTokenizer"),_Gr.forEach(t),gro=r(b9," or "),PR=n(b9,"A",{href:!0});var bGr=s(PR);hro=r(bGr,"RetriBertTokenizerFast"),bGr.forEach(t),uro=r(b9," (RetriBERT model)"),b9.forEach(t),pro=i(S),_s=n(S,"LI",{});var F9=s(_s);Ere=n(F9,"STRONG",{});var FGr=s(Ere);_ro=r(FGr,"roberta"),FGr.forEach(t),bro=r(F9," \u2014 "),IR=n(F9,"A",{href:!0});var vGr=s(IR);Fro=r(vGr,"RobertaTokenizer"),vGr.forEach(t),vro=r(F9," or "),qR=n(F9,"A",{href:!0});var TGr=s(qR);Tro=r(TGr,"RobertaTokenizerFast"),TGr.forEach(t),Mro=r(F9," (RoBERTa model)"),F9.forEach(t),Ero=i(S),bs=n(S,"LI",{});var v9=s(bs);Cre=n(v9,"STRONG",{});var MGr=s(Cre);Cro=r(MGr,"roformer"),MGr.forEach(t),wro=r(v9," \u2014 "),NR=n(v9,"A",{href:!0});var EGr=s(NR);Aro=r(EGr,"RoFormerTokenizer"),EGr.forEach(t),yro=r(v9," or "),jR=n(v9,"A",{href:!0});var CGr=s(jR);Lro=r(CGr,"RoFormerTokenizerFast"),CGr.forEach(t),xro=r(v9," (RoFormer model)"),v9.forEach(t),$ro=i(S),yg=n(S,"LI",{});var M3e=s(yg);wre=n(M3e,"STRONG",{});var wGr=s(wre);kro=r(wGr,"speech_to_text"),wGr.forEach(t),Sro=r(M3e," \u2014 "),DR=n(M3e,"A",{href:!0});var AGr=s(DR);Rro=r(AGr,"Speech2TextTokenizer"),AGr.forEach(t),Bro=r(M3e," (Speech2Text model)"),M3e.forEach(t),Pro=i(S),Lg=n(S,"LI",{});var E3e=s(Lg);Are=n(E3e,"STRONG",{});var yGr=s(Are);Iro=r(yGr,"speech_to_text_2"),yGr.forEach(t),qro=r(E3e," \u2014 "),GR=n(E3e,"A",{href:!0});var LGr=s(GR);Nro=r(LGr,"Speech2Text2Tokenizer"),LGr.forEach(t),jro=r(E3e," (Speech2Text2 model)"),E3e.forEach(t),Dro=i(S),Fs=n(S,"LI",{});var T9=s(Fs);yre=n(T9,"STRONG",{});var xGr=s(yre);Gro=r(xGr,"splinter"),xGr.forEach(t),Oro=r(T9," \u2014 "),OR=n(T9,"A",{href:!0});var $Gr=s(OR);Vro=r($Gr,"SplinterTokenizer"),$Gr.forEach(t),Xro=r(T9," or "),VR=n(T9,"A",{href:!0});var kGr=s(VR);zro=r(kGr,"SplinterTokenizerFast"),kGr.forEach(t),Qro=r(T9," (Splinter model)"),T9.forEach(t),Wro=i(S),vs=n(S,"LI",{});var M9=s(vs);Lre=n(M9,"STRONG",{});var SGr=s(Lre);Hro=r(SGr,"squeezebert"),SGr.forEach(t),Uro=r(M9," \u2014 "),XR=n(M9,"A",{href:!0});var RGr=s(XR);Jro=r(RGr,"SqueezeBertTokenizer"),RGr.forEach(t),Yro=r(M9," or "),zR=n(M9,"A",{href:!0});var BGr=s(zR);Kro=r(BGr,"SqueezeBertTokenizerFast"),BGr.forEach(t),Zro=r(M9," (SqueezeBERT model)"),M9.forEach(t),eto=i(S),Ts=n(S,"LI",{});var E9=s(Ts);xre=n(E9,"STRONG",{});var PGr=s(xre);oto=r(PGr,"t5"),PGr.forEach(t),rto=r(E9," \u2014 "),QR=n(E9,"A",{href:!0});var IGr=s(QR);tto=r(IGr,"T5Tokenizer"),IGr.forEach(t),ato=r(E9," or "),WR=n(E9,"A",{href:!0});var qGr=s(WR);nto=r(qGr,"T5TokenizerFast"),qGr.forEach(t),sto=r(E9," (T5 model)"),E9.forEach(t),lto=i(S),xg=n(S,"LI",{});var C3e=s(xg);$re=n(C3e,"STRONG",{});var NGr=s($re);ito=r(NGr,"tapas"),NGr.forEach(t),dto=r(C3e," \u2014 "),HR=n(C3e,"A",{href:!0});var jGr=s(HR);cto=r(jGr,"TapasTokenizer"),jGr.forEach(t),mto=r(C3e," (TAPAS model)"),C3e.forEach(t),fto=i(S),$g=n(S,"LI",{});var w3e=s($g);kre=n(w3e,"STRONG",{});var DGr=s(kre);gto=r(DGr,"tapex"),DGr.forEach(t),hto=r(w3e," \u2014 "),UR=n(w3e,"A",{href:!0});var GGr=s(UR);uto=r(GGr,"TapexTokenizer"),GGr.forEach(t),pto=r(w3e," (TAPEX model)"),w3e.forEach(t),_to=i(S),kg=n(S,"LI",{});var A3e=s(kg);Sre=n(A3e,"STRONG",{});var OGr=s(Sre);bto=r(OGr,"transfo-xl"),OGr.forEach(t),Fto=r(A3e," \u2014 "),JR=n(A3e,"A",{href:!0});var VGr=s(JR);vto=r(VGr,"TransfoXLTokenizer"),VGr.forEach(t),Tto=r(A3e," (Transformer-XL model)"),A3e.forEach(t),Mto=i(S),Ms=n(S,"LI",{});var C9=s(Ms);Rre=n(C9,"STRONG",{});var XGr=s(Rre);Eto=r(XGr,"visual_bert"),XGr.forEach(t),Cto=r(C9," \u2014 "),YR=n(C9,"A",{href:!0});var zGr=s(YR);wto=r(zGr,"BertTokenizer"),zGr.forEach(t),Ato=r(C9," or "),KR=n(C9,"A",{href:!0});var QGr=s(KR);yto=r(QGr,"BertTokenizerFast"),QGr.forEach(t),Lto=r(C9," (VisualBert model)"),C9.forEach(t),xto=i(S),Sg=n(S,"LI",{});var y3e=s(Sg);Bre=n(y3e,"STRONG",{});var WGr=s(Bre);$to=r(WGr,"wav2vec2"),WGr.forEach(t),kto=r(y3e," \u2014 "),ZR=n(y3e,"A",{href:!0});var HGr=s(ZR);Sto=r(HGr,"Wav2Vec2CTCTokenizer"),HGr.forEach(t),Rto=r(y3e," (Wav2Vec2 model)"),y3e.forEach(t),Bto=i(S),Rg=n(S,"LI",{});var L3e=s(Rg);Pre=n(L3e,"STRONG",{});var UGr=s(Pre);Pto=r(UGr,"wav2vec2_phoneme"),UGr.forEach(t),Ito=r(L3e," \u2014 "),eB=n(L3e,"A",{href:!0});var JGr=s(eB);qto=r(JGr,"Wav2Vec2PhonemeCTCTokenizer"),JGr.forEach(t),Nto=r(L3e," (Wav2Vec2Phoneme model)"),L3e.forEach(t),jto=i(S),Es=n(S,"LI",{});var w9=s(Es);Ire=n(w9,"STRONG",{});var YGr=s(Ire);Dto=r(YGr,"xglm"),YGr.forEach(t),Gto=r(w9," \u2014 "),oB=n(w9,"A",{href:!0});var KGr=s(oB);Oto=r(KGr,"XGLMTokenizer"),KGr.forEach(t),Vto=r(w9," or "),rB=n(w9,"A",{href:!0});var ZGr=s(rB);Xto=r(ZGr,"XGLMTokenizerFast"),ZGr.forEach(t),zto=r(w9," (XGLM model)"),w9.forEach(t),Qto=i(S),Bg=n(S,"LI",{});var x3e=s(Bg);qre=n(x3e,"STRONG",{});var eOr=s(qre);Wto=r(eOr,"xlm"),eOr.forEach(t),Hto=r(x3e," \u2014 "),tB=n(x3e,"A",{href:!0});var oOr=s(tB);Uto=r(oOr,"XLMTokenizer"),oOr.forEach(t),Jto=r(x3e," (XLM model)"),x3e.forEach(t),Yto=i(S),Pg=n(S,"LI",{});var $3e=s(Pg);Nre=n($3e,"STRONG",{});var rOr=s(Nre);Kto=r(rOr,"xlm-prophetnet"),rOr.forEach(t),Zto=r($3e," \u2014 "),aB=n($3e,"A",{href:!0});var tOr=s(aB);eao=r(tOr,"XLMProphetNetTokenizer"),tOr.forEach(t),oao=r($3e," (XLMProphetNet model)"),$3e.forEach(t),rao=i(S),Cs=n(S,"LI",{});var A9=s(Cs);jre=n(A9,"STRONG",{});var aOr=s(jre);tao=r(aOr,"xlm-roberta"),aOr.forEach(t),aao=r(A9," \u2014 "),nB=n(A9,"A",{href:!0});var nOr=s(nB);nao=r(nOr,"XLMRobertaTokenizer"),nOr.forEach(t),sao=r(A9," or "),sB=n(A9,"A",{href:!0});var sOr=s(sB);lao=r(sOr,"XLMRobertaTokenizerFast"),sOr.forEach(t),iao=r(A9," (XLM-RoBERTa model)"),A9.forEach(t),dao=i(S),ws=n(S,"LI",{});var y9=s(ws);Dre=n(y9,"STRONG",{});var lOr=s(Dre);cao=r(lOr,"xlm-roberta-xl"),lOr.forEach(t),mao=r(y9," \u2014 "),lB=n(y9,"A",{href:!0});var iOr=s(lB);fao=r(iOr,"RobertaTokenizer"),iOr.forEach(t),gao=r(y9," or "),iB=n(y9,"A",{href:!0});var dOr=s(iB);hao=r(dOr,"RobertaTokenizerFast"),dOr.forEach(t),uao=r(y9," (XLM-RoBERTa-XL model)"),y9.forEach(t),pao=i(S),As=n(S,"LI",{});var L9=s(As);Gre=n(L9,"STRONG",{});var cOr=s(Gre);_ao=r(cOr,"xlnet"),cOr.forEach(t),bao=r(L9," \u2014 "),dB=n(L9,"A",{href:!0});var mOr=s(dB);Fao=r(mOr,"XLNetTokenizer"),mOr.forEach(t),vao=r(L9," or "),cB=n(L9,"A",{href:!0});var fOr=s(cB);Tao=r(fOr,"XLNetTokenizerFast"),fOr.forEach(t),Mao=r(L9," (XLNet model)"),L9.forEach(t),Eao=i(S),ys=n(S,"LI",{});var x9=s(ys);Ore=n(x9,"STRONG",{});var gOr=s(Ore);Cao=r(gOr,"yoso"),gOr.forEach(t),wao=r(x9," \u2014 "),mB=n(x9,"A",{href:!0});var hOr=s(mB);Aao=r(hOr,"AlbertTokenizer"),hOr.forEach(t),yao=r(x9," or "),fB=n(x9,"A",{href:!0});var uOr=s(fB);Lao=r(uOr,"AlbertTokenizerFast"),uOr.forEach(t),xao=r(x9," (YOSO model)"),x9.forEach(t),S.forEach(t),$ao=i(Ss),T(Ig.$$.fragment,Ss),Ss.forEach(t),kao=i(ks),qg=n(ks,"DIV",{class:!0});var mIe=s(qg);T(B6.$$.fragment,mIe),Sao=i(mIe),Vre=n(mIe,"P",{});var pOr=s(Vre);Rao=r(pOr,"Register a new tokenizer in this mapping."),pOr.forEach(t),mIe.forEach(t),ks.forEach(t),hBe=i(m),fi=n(m,"H2",{class:!0});var fIe=s(fi);Ng=n(fIe,"A",{id:!0,class:!0,href:!0});var _Or=s(Ng);Xre=n(_Or,"SPAN",{});var bOr=s(Xre);T(P6.$$.fragment,bOr),bOr.forEach(t),_Or.forEach(t),Bao=i(fIe),zre=n(fIe,"SPAN",{});var FOr=s(zre);Pao=r(FOr,"AutoFeatureExtractor"),FOr.forEach(t),fIe.forEach(t),uBe=i(m),Ao=n(m,"DIV",{class:!0});var Rs=s(Ao);T(I6.$$.fragment,Rs),Iao=i(Rs),q6=n(Rs,"P",{});var gIe=s(q6);qao=r(gIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gB=n(gIe,"A",{href:!0});var vOr=s(gB);Nao=r(vOr,"AutoFeatureExtractor.from_pretrained()"),vOr.forEach(t),jao=r(gIe," class method."),gIe.forEach(t),Dao=i(Rs),N6=n(Rs,"P",{});var hIe=s(N6);Gao=r(hIe,"This class cannot be instantiated directly using "),Qre=n(hIe,"CODE",{});var TOr=s(Qre);Oao=r(TOr,"__init__()"),TOr.forEach(t),Vao=r(hIe," (throws an error)."),hIe.forEach(t),Xao=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(j6.$$.fragment,Ht),zao=i(Ht),Wre=n(Ht,"P",{});var MOr=s(Wre);Qao=r(MOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),MOr.forEach(t),Wao=i(Ht),Ma=n(Ht,"P",{});var wA=s(Ma);Hao=r(wA,"The feature extractor class to instantiate is selected based on the "),Hre=n(wA,"CODE",{});var EOr=s(Hre);Uao=r(EOr,"model_type"),EOr.forEach(t),Jao=r(wA,` property of the config object
(either passed as an argument or loaded from `),Ure=n(wA,"CODE",{});var COr=s(Ure);Yao=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),Kao=r(wA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jre=n(wA,"CODE",{});var wOr=s(Jre);Zao=r(wOr,"pretrained_model_name_or_path"),wOr.forEach(t),eno=r(wA,":"),wA.forEach(t),ono=i(Ht),te=n(Ht,"UL",{});var se=s(te);jg=n(se,"LI",{});var k3e=s(jg);Yre=n(k3e,"STRONG",{});var AOr=s(Yre);rno=r(AOr,"beit"),AOr.forEach(t),tno=r(k3e," \u2014 "),hB=n(k3e,"A",{href:!0});var yOr=s(hB);ano=r(yOr,"BeitFeatureExtractor"),yOr.forEach(t),nno=r(k3e," (BEiT model)"),k3e.forEach(t),sno=i(se),Dg=n(se,"LI",{});var S3e=s(Dg);Kre=n(S3e,"STRONG",{});var LOr=s(Kre);lno=r(LOr,"clip"),LOr.forEach(t),ino=r(S3e," \u2014 "),uB=n(S3e,"A",{href:!0});var xOr=s(uB);dno=r(xOr,"CLIPFeatureExtractor"),xOr.forEach(t),cno=r(S3e," (CLIP model)"),S3e.forEach(t),mno=i(se),Gg=n(se,"LI",{});var R3e=s(Gg);Zre=n(R3e,"STRONG",{});var $Or=s(Zre);fno=r($Or,"convnext"),$Or.forEach(t),gno=r(R3e," \u2014 "),pB=n(R3e,"A",{href:!0});var kOr=s(pB);hno=r(kOr,"ConvNextFeatureExtractor"),kOr.forEach(t),uno=r(R3e," (ConvNext model)"),R3e.forEach(t),pno=i(se),Og=n(se,"LI",{});var B3e=s(Og);ete=n(B3e,"STRONG",{});var SOr=s(ete);_no=r(SOr,"data2vec-audio"),SOr.forEach(t),bno=r(B3e," \u2014 "),_B=n(B3e,"A",{href:!0});var ROr=s(_B);Fno=r(ROr,"Wav2Vec2FeatureExtractor"),ROr.forEach(t),vno=r(B3e," (Data2VecAudio model)"),B3e.forEach(t),Tno=i(se),Vg=n(se,"LI",{});var P3e=s(Vg);ote=n(P3e,"STRONG",{});var BOr=s(ote);Mno=r(BOr,"data2vec-vision"),BOr.forEach(t),Eno=r(P3e," \u2014 "),bB=n(P3e,"A",{href:!0});var POr=s(bB);Cno=r(POr,"BeitFeatureExtractor"),POr.forEach(t),wno=r(P3e," (Data2VecVision model)"),P3e.forEach(t),Ano=i(se),Xg=n(se,"LI",{});var I3e=s(Xg);rte=n(I3e,"STRONG",{});var IOr=s(rte);yno=r(IOr,"deit"),IOr.forEach(t),Lno=r(I3e," \u2014 "),FB=n(I3e,"A",{href:!0});var qOr=s(FB);xno=r(qOr,"DeiTFeatureExtractor"),qOr.forEach(t),$no=r(I3e," (DeiT model)"),I3e.forEach(t),kno=i(se),zg=n(se,"LI",{});var q3e=s(zg);tte=n(q3e,"STRONG",{});var NOr=s(tte);Sno=r(NOr,"detr"),NOr.forEach(t),Rno=r(q3e," \u2014 "),vB=n(q3e,"A",{href:!0});var jOr=s(vB);Bno=r(jOr,"DetrFeatureExtractor"),jOr.forEach(t),Pno=r(q3e," (DETR model)"),q3e.forEach(t),Ino=i(se),Qg=n(se,"LI",{});var N3e=s(Qg);ate=n(N3e,"STRONG",{});var DOr=s(ate);qno=r(DOr,"dpt"),DOr.forEach(t),Nno=r(N3e," \u2014 "),TB=n(N3e,"A",{href:!0});var GOr=s(TB);jno=r(GOr,"DPTFeatureExtractor"),GOr.forEach(t),Dno=r(N3e," (DPT model)"),N3e.forEach(t),Gno=i(se),Wg=n(se,"LI",{});var j3e=s(Wg);nte=n(j3e,"STRONG",{});var OOr=s(nte);Ono=r(OOr,"glpn"),OOr.forEach(t),Vno=r(j3e," \u2014 "),MB=n(j3e,"A",{href:!0});var VOr=s(MB);Xno=r(VOr,"GLPNFeatureExtractor"),VOr.forEach(t),zno=r(j3e," (GLPN model)"),j3e.forEach(t),Qno=i(se),Hg=n(se,"LI",{});var D3e=s(Hg);ste=n(D3e,"STRONG",{});var XOr=s(ste);Wno=r(XOr,"hubert"),XOr.forEach(t),Hno=r(D3e," \u2014 "),EB=n(D3e,"A",{href:!0});var zOr=s(EB);Uno=r(zOr,"Wav2Vec2FeatureExtractor"),zOr.forEach(t),Jno=r(D3e," (Hubert model)"),D3e.forEach(t),Yno=i(se),Ug=n(se,"LI",{});var G3e=s(Ug);lte=n(G3e,"STRONG",{});var QOr=s(lte);Kno=r(QOr,"layoutlmv2"),QOr.forEach(t),Zno=r(G3e," \u2014 "),CB=n(G3e,"A",{href:!0});var WOr=s(CB);eso=r(WOr,"LayoutLMv2FeatureExtractor"),WOr.forEach(t),oso=r(G3e," (LayoutLMv2 model)"),G3e.forEach(t),rso=i(se),Jg=n(se,"LI",{});var O3e=s(Jg);ite=n(O3e,"STRONG",{});var HOr=s(ite);tso=r(HOr,"maskformer"),HOr.forEach(t),aso=r(O3e," \u2014 "),wB=n(O3e,"A",{href:!0});var UOr=s(wB);nso=r(UOr,"MaskFormerFeatureExtractor"),UOr.forEach(t),sso=r(O3e," (MaskFormer model)"),O3e.forEach(t),lso=i(se),Yg=n(se,"LI",{});var V3e=s(Yg);dte=n(V3e,"STRONG",{});var JOr=s(dte);iso=r(JOr,"perceiver"),JOr.forEach(t),dso=r(V3e," \u2014 "),AB=n(V3e,"A",{href:!0});var YOr=s(AB);cso=r(YOr,"PerceiverFeatureExtractor"),YOr.forEach(t),mso=r(V3e," (Perceiver model)"),V3e.forEach(t),fso=i(se),Kg=n(se,"LI",{});var X3e=s(Kg);cte=n(X3e,"STRONG",{});var KOr=s(cte);gso=r(KOr,"poolformer"),KOr.forEach(t),hso=r(X3e," \u2014 "),yB=n(X3e,"A",{href:!0});var ZOr=s(yB);uso=r(ZOr,"PoolFormerFeatureExtractor"),ZOr.forEach(t),pso=r(X3e," (PoolFormer model)"),X3e.forEach(t),_so=i(se),Zg=n(se,"LI",{});var z3e=s(Zg);mte=n(z3e,"STRONG",{});var eVr=s(mte);bso=r(eVr,"regnet"),eVr.forEach(t),Fso=r(z3e," \u2014 "),LB=n(z3e,"A",{href:!0});var oVr=s(LB);vso=r(oVr,"ConvNextFeatureExtractor"),oVr.forEach(t),Tso=r(z3e," (RegNet model)"),z3e.forEach(t),Mso=i(se),eh=n(se,"LI",{});var Q3e=s(eh);fte=n(Q3e,"STRONG",{});var rVr=s(fte);Eso=r(rVr,"resnet"),rVr.forEach(t),Cso=r(Q3e," \u2014 "),xB=n(Q3e,"A",{href:!0});var tVr=s(xB);wso=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Aso=r(Q3e," (ResNet model)"),Q3e.forEach(t),yso=i(se),oh=n(se,"LI",{});var W3e=s(oh);gte=n(W3e,"STRONG",{});var aVr=s(gte);Lso=r(aVr,"segformer"),aVr.forEach(t),xso=r(W3e," \u2014 "),$B=n(W3e,"A",{href:!0});var nVr=s($B);$so=r(nVr,"SegformerFeatureExtractor"),nVr.forEach(t),kso=r(W3e," (SegFormer model)"),W3e.forEach(t),Sso=i(se),rh=n(se,"LI",{});var H3e=s(rh);hte=n(H3e,"STRONG",{});var sVr=s(hte);Rso=r(sVr,"speech_to_text"),sVr.forEach(t),Bso=r(H3e," \u2014 "),kB=n(H3e,"A",{href:!0});var lVr=s(kB);Pso=r(lVr,"Speech2TextFeatureExtractor"),lVr.forEach(t),Iso=r(H3e," (Speech2Text model)"),H3e.forEach(t),qso=i(se),th=n(se,"LI",{});var U3e=s(th);ute=n(U3e,"STRONG",{});var iVr=s(ute);Nso=r(iVr,"swin"),iVr.forEach(t),jso=r(U3e," \u2014 "),SB=n(U3e,"A",{href:!0});var dVr=s(SB);Dso=r(dVr,"ViTFeatureExtractor"),dVr.forEach(t),Gso=r(U3e," (Swin model)"),U3e.forEach(t),Oso=i(se),ah=n(se,"LI",{});var J3e=s(ah);pte=n(J3e,"STRONG",{});var cVr=s(pte);Vso=r(cVr,"van"),cVr.forEach(t),Xso=r(J3e," \u2014 "),RB=n(J3e,"A",{href:!0});var mVr=s(RB);zso=r(mVr,"ConvNextFeatureExtractor"),mVr.forEach(t),Qso=r(J3e," (VAN model)"),J3e.forEach(t),Wso=i(se),nh=n(se,"LI",{});var Y3e=s(nh);_te=n(Y3e,"STRONG",{});var fVr=s(_te);Hso=r(fVr,"vit"),fVr.forEach(t),Uso=r(Y3e," \u2014 "),BB=n(Y3e,"A",{href:!0});var gVr=s(BB);Jso=r(gVr,"ViTFeatureExtractor"),gVr.forEach(t),Yso=r(Y3e," (ViT model)"),Y3e.forEach(t),Kso=i(se),sh=n(se,"LI",{});var K3e=s(sh);bte=n(K3e,"STRONG",{});var hVr=s(bte);Zso=r(hVr,"vit_mae"),hVr.forEach(t),elo=r(K3e," \u2014 "),PB=n(K3e,"A",{href:!0});var uVr=s(PB);olo=r(uVr,"ViTFeatureExtractor"),uVr.forEach(t),rlo=r(K3e," (ViTMAE model)"),K3e.forEach(t),tlo=i(se),lh=n(se,"LI",{});var Z3e=s(lh);Fte=n(Z3e,"STRONG",{});var pVr=s(Fte);alo=r(pVr,"wav2vec2"),pVr.forEach(t),nlo=r(Z3e," \u2014 "),IB=n(Z3e,"A",{href:!0});var _Vr=s(IB);slo=r(_Vr,"Wav2Vec2FeatureExtractor"),_Vr.forEach(t),llo=r(Z3e," (Wav2Vec2 model)"),Z3e.forEach(t),ilo=i(se),ih=n(se,"LI",{});var ewe=s(ih);vte=n(ewe,"STRONG",{});var bVr=s(vte);dlo=r(bVr,"yolos"),bVr.forEach(t),clo=r(ewe," \u2014 "),qB=n(ewe,"A",{href:!0});var FVr=s(qB);mlo=r(FVr,"YolosFeatureExtractor"),FVr.forEach(t),flo=r(ewe," (YOLOS model)"),ewe.forEach(t),se.forEach(t),glo=i(Ht),T(dh.$$.fragment,Ht),hlo=i(Ht),T(ch.$$.fragment,Ht),Ht.forEach(t),ulo=i(Rs),mh=n(Rs,"DIV",{class:!0});var uIe=s(mh);T(D6.$$.fragment,uIe),plo=i(uIe),Tte=n(uIe,"P",{});var vVr=s(Tte);_lo=r(vVr,"Register a new feature extractor for this class."),vVr.forEach(t),uIe.forEach(t),Rs.forEach(t),pBe=i(m),gi=n(m,"H2",{class:!0});var pIe=s(gi);fh=n(pIe,"A",{id:!0,class:!0,href:!0});var TVr=s(fh);Mte=n(TVr,"SPAN",{});var MVr=s(Mte);T(G6.$$.fragment,MVr),MVr.forEach(t),TVr.forEach(t),blo=i(pIe),Ete=n(pIe,"SPAN",{});var EVr=s(Ete);Flo=r(EVr,"AutoProcessor"),EVr.forEach(t),pIe.forEach(t),_Be=i(m),yo=n(m,"DIV",{class:!0});var Bs=s(yo);T(O6.$$.fragment,Bs),vlo=i(Bs),V6=n(Bs,"P",{});var _Ie=s(V6);Tlo=r(_Ie,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NB=n(_Ie,"A",{href:!0});var CVr=s(NB);Mlo=r(CVr,"AutoProcessor.from_pretrained()"),CVr.forEach(t),Elo=r(_Ie," class method."),_Ie.forEach(t),Clo=i(Bs),X6=n(Bs,"P",{});var bIe=s(X6);wlo=r(bIe,"This class cannot be instantiated directly using "),Cte=n(bIe,"CODE",{});var wVr=s(Cte);Alo=r(wVr,"__init__()"),wVr.forEach(t),ylo=r(bIe," (throws an error)."),bIe.forEach(t),Llo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(z6.$$.fragment,Ut),xlo=i(Ut),wte=n(Ut,"P",{});var AVr=s(wte);$lo=r(AVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),AVr.forEach(t),klo=i(Ut),hi=n(Ut,"P",{});var cY=s(hi);Slo=r(cY,"The processor class to instantiate is selected based on the "),Ate=n(cY,"CODE",{});var yVr=s(Ate);Rlo=r(yVr,"model_type"),yVr.forEach(t),Blo=r(cY,` property of the config object (either
passed as an argument or loaded from `),yte=n(cY,"CODE",{});var LVr=s(yte);Plo=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),Ilo=r(cY," if possible):"),cY.forEach(t),qlo=i(Ut),be=n(Ut,"UL",{});var ve=s(be);gh=n(ve,"LI",{});var owe=s(gh);Lte=n(owe,"STRONG",{});var xVr=s(Lte);Nlo=r(xVr,"clip"),xVr.forEach(t),jlo=r(owe," \u2014 "),jB=n(owe,"A",{href:!0});var $Vr=s(jB);Dlo=r($Vr,"CLIPProcessor"),$Vr.forEach(t),Glo=r(owe," (CLIP model)"),owe.forEach(t),Olo=i(ve),hh=n(ve,"LI",{});var rwe=s(hh);xte=n(rwe,"STRONG",{});var kVr=s(xte);Vlo=r(kVr,"layoutlmv2"),kVr.forEach(t),Xlo=r(rwe," \u2014 "),DB=n(rwe,"A",{href:!0});var SVr=s(DB);zlo=r(SVr,"LayoutLMv2Processor"),SVr.forEach(t),Qlo=r(rwe," (LayoutLMv2 model)"),rwe.forEach(t),Wlo=i(ve),uh=n(ve,"LI",{});var twe=s(uh);$te=n(twe,"STRONG",{});var RVr=s($te);Hlo=r(RVr,"layoutxlm"),RVr.forEach(t),Ulo=r(twe," \u2014 "),GB=n(twe,"A",{href:!0});var BVr=s(GB);Jlo=r(BVr,"LayoutXLMProcessor"),BVr.forEach(t),Ylo=r(twe," (LayoutXLM model)"),twe.forEach(t),Klo=i(ve),ph=n(ve,"LI",{});var awe=s(ph);kte=n(awe,"STRONG",{});var PVr=s(kte);Zlo=r(PVr,"sew"),PVr.forEach(t),eio=r(awe," \u2014 "),OB=n(awe,"A",{href:!0});var IVr=s(OB);oio=r(IVr,"Wav2Vec2Processor"),IVr.forEach(t),rio=r(awe," (SEW model)"),awe.forEach(t),tio=i(ve),_h=n(ve,"LI",{});var nwe=s(_h);Ste=n(nwe,"STRONG",{});var qVr=s(Ste);aio=r(qVr,"sew-d"),qVr.forEach(t),nio=r(nwe," \u2014 "),VB=n(nwe,"A",{href:!0});var NVr=s(VB);sio=r(NVr,"Wav2Vec2Processor"),NVr.forEach(t),lio=r(nwe," (SEW-D model)"),nwe.forEach(t),iio=i(ve),bh=n(ve,"LI",{});var swe=s(bh);Rte=n(swe,"STRONG",{});var jVr=s(Rte);dio=r(jVr,"speech_to_text"),jVr.forEach(t),cio=r(swe," \u2014 "),XB=n(swe,"A",{href:!0});var DVr=s(XB);mio=r(DVr,"Speech2TextProcessor"),DVr.forEach(t),fio=r(swe," (Speech2Text model)"),swe.forEach(t),gio=i(ve),Fh=n(ve,"LI",{});var lwe=s(Fh);Bte=n(lwe,"STRONG",{});var GVr=s(Bte);hio=r(GVr,"speech_to_text_2"),GVr.forEach(t),uio=r(lwe," \u2014 "),zB=n(lwe,"A",{href:!0});var OVr=s(zB);pio=r(OVr,"Speech2Text2Processor"),OVr.forEach(t),_io=r(lwe," (Speech2Text2 model)"),lwe.forEach(t),bio=i(ve),vh=n(ve,"LI",{});var iwe=s(vh);Pte=n(iwe,"STRONG",{});var VVr=s(Pte);Fio=r(VVr,"trocr"),VVr.forEach(t),vio=r(iwe," \u2014 "),QB=n(iwe,"A",{href:!0});var XVr=s(QB);Tio=r(XVr,"TrOCRProcessor"),XVr.forEach(t),Mio=r(iwe," (TrOCR model)"),iwe.forEach(t),Eio=i(ve),Th=n(ve,"LI",{});var dwe=s(Th);Ite=n(dwe,"STRONG",{});var zVr=s(Ite);Cio=r(zVr,"unispeech"),zVr.forEach(t),wio=r(dwe," \u2014 "),WB=n(dwe,"A",{href:!0});var QVr=s(WB);Aio=r(QVr,"Wav2Vec2Processor"),QVr.forEach(t),yio=r(dwe," (UniSpeech model)"),dwe.forEach(t),Lio=i(ve),Mh=n(ve,"LI",{});var cwe=s(Mh);qte=n(cwe,"STRONG",{});var WVr=s(qte);xio=r(WVr,"unispeech-sat"),WVr.forEach(t),$io=r(cwe," \u2014 "),HB=n(cwe,"A",{href:!0});var HVr=s(HB);kio=r(HVr,"Wav2Vec2Processor"),HVr.forEach(t),Sio=r(cwe," (UniSpeechSat model)"),cwe.forEach(t),Rio=i(ve),Eh=n(ve,"LI",{});var mwe=s(Eh);Nte=n(mwe,"STRONG",{});var UVr=s(Nte);Bio=r(UVr,"vilt"),UVr.forEach(t),Pio=r(mwe," \u2014 "),UB=n(mwe,"A",{href:!0});var JVr=s(UB);Iio=r(JVr,"ViltProcessor"),JVr.forEach(t),qio=r(mwe," (ViLT model)"),mwe.forEach(t),Nio=i(ve),Ch=n(ve,"LI",{});var fwe=s(Ch);jte=n(fwe,"STRONG",{});var YVr=s(jte);jio=r(YVr,"vision-text-dual-encoder"),YVr.forEach(t),Dio=r(fwe," \u2014 "),JB=n(fwe,"A",{href:!0});var KVr=s(JB);Gio=r(KVr,"VisionTextDualEncoderProcessor"),KVr.forEach(t),Oio=r(fwe," (VisionTextDualEncoder model)"),fwe.forEach(t),Vio=i(ve),wh=n(ve,"LI",{});var gwe=s(wh);Dte=n(gwe,"STRONG",{});var ZVr=s(Dte);Xio=r(ZVr,"wav2vec2"),ZVr.forEach(t),zio=r(gwe," \u2014 "),YB=n(gwe,"A",{href:!0});var eXr=s(YB);Qio=r(eXr,"Wav2Vec2Processor"),eXr.forEach(t),Wio=r(gwe," (Wav2Vec2 model)"),gwe.forEach(t),Hio=i(ve),Ah=n(ve,"LI",{});var hwe=s(Ah);Gte=n(hwe,"STRONG",{});var oXr=s(Gte);Uio=r(oXr,"wavlm"),oXr.forEach(t),Jio=r(hwe," \u2014 "),KB=n(hwe,"A",{href:!0});var rXr=s(KB);Yio=r(rXr,"Wav2Vec2Processor"),rXr.forEach(t),Kio=r(hwe," (WavLM model)"),hwe.forEach(t),ve.forEach(t),Zio=i(Ut),T(yh.$$.fragment,Ut),edo=i(Ut),T(Lh.$$.fragment,Ut),Ut.forEach(t),odo=i(Bs),xh=n(Bs,"DIV",{class:!0});var FIe=s(xh);T(Q6.$$.fragment,FIe),rdo=i(FIe),Ote=n(FIe,"P",{});var tXr=s(Ote);tdo=r(tXr,"Register a new processor for this class."),tXr.forEach(t),FIe.forEach(t),Bs.forEach(t),bBe=i(m),ui=n(m,"H2",{class:!0});var vIe=s(ui);$h=n(vIe,"A",{id:!0,class:!0,href:!0});var aXr=s($h);Vte=n(aXr,"SPAN",{});var nXr=s(Vte);T(W6.$$.fragment,nXr),nXr.forEach(t),aXr.forEach(t),ado=i(vIe),Xte=n(vIe,"SPAN",{});var sXr=s(Xte);ndo=r(sXr,"AutoModel"),sXr.forEach(t),vIe.forEach(t),FBe=i(m),Lo=n(m,"DIV",{class:!0});var Ps=s(Lo);T(H6.$$.fragment,Ps),sdo=i(Ps),pi=n(Ps,"P",{});var mY=s(pi);ldo=r(mY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZB=n(mY,"A",{href:!0});var lXr=s(ZB);ido=r(lXr,"from_pretrained()"),lXr.forEach(t),ddo=r(mY," class method or the "),eP=n(mY,"A",{href:!0});var iXr=s(eP);cdo=r(iXr,"from_config()"),iXr.forEach(t),mdo=r(mY,` class
method.`),mY.forEach(t),fdo=i(Ps),U6=n(Ps,"P",{});var TIe=s(U6);gdo=r(TIe,"This class cannot be instantiated directly using "),zte=n(TIe,"CODE",{});var dXr=s(zte);hdo=r(dXr,"__init__()"),dXr.forEach(t),udo=r(TIe," (throws an error)."),TIe.forEach(t),pdo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var AA=s(Zr);T(J6.$$.fragment,AA),_do=i(AA),Qte=n(AA,"P",{});var cXr=s(Qte);bdo=r(cXr,"Instantiates one of the base model classes of the library from a configuration."),cXr.forEach(t),Fdo=i(AA),_i=n(AA,"P",{});var fY=s(_i);vdo=r(fY,`Note:
Loading a model from its configuration file does `),Wte=n(fY,"STRONG",{});var mXr=s(Wte);Tdo=r(mXr,"not"),mXr.forEach(t),Mdo=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oP=n(fY,"A",{href:!0});var fXr=s(oP);Edo=r(fXr,"from_pretrained()"),fXr.forEach(t),Cdo=r(fY," to load the model weights."),fY.forEach(t),wdo=i(AA),T(kh.$$.fragment,AA),AA.forEach(t),Ado=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(Y6.$$.fragment,Jt),ydo=i(Jt),Hte=n(Jt,"P",{});var gXr=s(Hte);Ldo=r(gXr,"Instantiate one of the base model classes of the library from a pretrained model."),gXr.forEach(t),xdo=i(Jt),Ea=n(Jt,"P",{});var yA=s(Ea);$do=r(yA,"The model class to instantiate is selected based on the "),Ute=n(yA,"CODE",{});var hXr=s(Ute);kdo=r(hXr,"model_type"),hXr.forEach(t),Sdo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Jte=n(yA,"CODE",{});var uXr=s(Jte);Rdo=r(uXr,"pretrained_model_name_or_path"),uXr.forEach(t),Bdo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=n(yA,"CODE",{});var pXr=s(Yte);Pdo=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),Ido=r(yA,":"),yA.forEach(t),qdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);Sh=n($,"LI",{});var uwe=s(Sh);Kte=n(uwe,"STRONG",{});var _Xr=s(Kte);Ndo=r(_Xr,"albert"),_Xr.forEach(t),jdo=r(uwe," \u2014 "),rP=n(uwe,"A",{href:!0});var bXr=s(rP);Ddo=r(bXr,"AlbertModel"),bXr.forEach(t),Gdo=r(uwe," (ALBERT model)"),uwe.forEach(t),Odo=i($),Rh=n($,"LI",{});var pwe=s(Rh);Zte=n(pwe,"STRONG",{});var FXr=s(Zte);Vdo=r(FXr,"bart"),FXr.forEach(t),Xdo=r(pwe," \u2014 "),tP=n(pwe,"A",{href:!0});var vXr=s(tP);zdo=r(vXr,"BartModel"),vXr.forEach(t),Qdo=r(pwe," (BART model)"),pwe.forEach(t),Wdo=i($),Bh=n($,"LI",{});var _we=s(Bh);eae=n(_we,"STRONG",{});var TXr=s(eae);Hdo=r(TXr,"beit"),TXr.forEach(t),Udo=r(_we," \u2014 "),aP=n(_we,"A",{href:!0});var MXr=s(aP);Jdo=r(MXr,"BeitModel"),MXr.forEach(t),Ydo=r(_we," (BEiT model)"),_we.forEach(t),Kdo=i($),Ph=n($,"LI",{});var bwe=s(Ph);oae=n(bwe,"STRONG",{});var EXr=s(oae);Zdo=r(EXr,"bert"),EXr.forEach(t),eco=r(bwe," \u2014 "),nP=n(bwe,"A",{href:!0});var CXr=s(nP);oco=r(CXr,"BertModel"),CXr.forEach(t),rco=r(bwe," (BERT model)"),bwe.forEach(t),tco=i($),Ih=n($,"LI",{});var Fwe=s(Ih);rae=n(Fwe,"STRONG",{});var wXr=s(rae);aco=r(wXr,"bert-generation"),wXr.forEach(t),nco=r(Fwe," \u2014 "),sP=n(Fwe,"A",{href:!0});var AXr=s(sP);sco=r(AXr,"BertGenerationEncoder"),AXr.forEach(t),lco=r(Fwe," (Bert Generation model)"),Fwe.forEach(t),ico=i($),qh=n($,"LI",{});var vwe=s(qh);tae=n(vwe,"STRONG",{});var yXr=s(tae);dco=r(yXr,"big_bird"),yXr.forEach(t),cco=r(vwe," \u2014 "),lP=n(vwe,"A",{href:!0});var LXr=s(lP);mco=r(LXr,"BigBirdModel"),LXr.forEach(t),fco=r(vwe," (BigBird model)"),vwe.forEach(t),gco=i($),Nh=n($,"LI",{});var Twe=s(Nh);aae=n(Twe,"STRONG",{});var xXr=s(aae);hco=r(xXr,"bigbird_pegasus"),xXr.forEach(t),uco=r(Twe," \u2014 "),iP=n(Twe,"A",{href:!0});var $Xr=s(iP);pco=r($Xr,"BigBirdPegasusModel"),$Xr.forEach(t),_co=r(Twe," (BigBirdPegasus model)"),Twe.forEach(t),bco=i($),jh=n($,"LI",{});var Mwe=s(jh);nae=n(Mwe,"STRONG",{});var kXr=s(nae);Fco=r(kXr,"blenderbot"),kXr.forEach(t),vco=r(Mwe," \u2014 "),dP=n(Mwe,"A",{href:!0});var SXr=s(dP);Tco=r(SXr,"BlenderbotModel"),SXr.forEach(t),Mco=r(Mwe," (Blenderbot model)"),Mwe.forEach(t),Eco=i($),Dh=n($,"LI",{});var Ewe=s(Dh);sae=n(Ewe,"STRONG",{});var RXr=s(sae);Cco=r(RXr,"blenderbot-small"),RXr.forEach(t),wco=r(Ewe," \u2014 "),cP=n(Ewe,"A",{href:!0});var BXr=s(cP);Aco=r(BXr,"BlenderbotSmallModel"),BXr.forEach(t),yco=r(Ewe," (BlenderbotSmall model)"),Ewe.forEach(t),Lco=i($),Gh=n($,"LI",{});var Cwe=s(Gh);lae=n(Cwe,"STRONG",{});var PXr=s(lae);xco=r(PXr,"camembert"),PXr.forEach(t),$co=r(Cwe," \u2014 "),mP=n(Cwe,"A",{href:!0});var IXr=s(mP);kco=r(IXr,"CamembertModel"),IXr.forEach(t),Sco=r(Cwe," (CamemBERT model)"),Cwe.forEach(t),Rco=i($),Oh=n($,"LI",{});var wwe=s(Oh);iae=n(wwe,"STRONG",{});var qXr=s(iae);Bco=r(qXr,"canine"),qXr.forEach(t),Pco=r(wwe," \u2014 "),fP=n(wwe,"A",{href:!0});var NXr=s(fP);Ico=r(NXr,"CanineModel"),NXr.forEach(t),qco=r(wwe," (Canine model)"),wwe.forEach(t),Nco=i($),Vh=n($,"LI",{});var Awe=s(Vh);dae=n(Awe,"STRONG",{});var jXr=s(dae);jco=r(jXr,"clip"),jXr.forEach(t),Dco=r(Awe," \u2014 "),gP=n(Awe,"A",{href:!0});var DXr=s(gP);Gco=r(DXr,"CLIPModel"),DXr.forEach(t),Oco=r(Awe," (CLIP model)"),Awe.forEach(t),Vco=i($),Xh=n($,"LI",{});var ywe=s(Xh);cae=n(ywe,"STRONG",{});var GXr=s(cae);Xco=r(GXr,"convbert"),GXr.forEach(t),zco=r(ywe," \u2014 "),hP=n(ywe,"A",{href:!0});var OXr=s(hP);Qco=r(OXr,"ConvBertModel"),OXr.forEach(t),Wco=r(ywe," (ConvBERT model)"),ywe.forEach(t),Hco=i($),zh=n($,"LI",{});var Lwe=s(zh);mae=n(Lwe,"STRONG",{});var VXr=s(mae);Uco=r(VXr,"convnext"),VXr.forEach(t),Jco=r(Lwe," \u2014 "),uP=n(Lwe,"A",{href:!0});var XXr=s(uP);Yco=r(XXr,"ConvNextModel"),XXr.forEach(t),Kco=r(Lwe," (ConvNext model)"),Lwe.forEach(t),Zco=i($),Qh=n($,"LI",{});var xwe=s(Qh);fae=n(xwe,"STRONG",{});var zXr=s(fae);emo=r(zXr,"ctrl"),zXr.forEach(t),omo=r(xwe," \u2014 "),pP=n(xwe,"A",{href:!0});var QXr=s(pP);rmo=r(QXr,"CTRLModel"),QXr.forEach(t),tmo=r(xwe," (CTRL model)"),xwe.forEach(t),amo=i($),Wh=n($,"LI",{});var $we=s(Wh);gae=n($we,"STRONG",{});var WXr=s(gae);nmo=r(WXr,"data2vec-audio"),WXr.forEach(t),smo=r($we," \u2014 "),_P=n($we,"A",{href:!0});var HXr=s(_P);lmo=r(HXr,"Data2VecAudioModel"),HXr.forEach(t),imo=r($we," (Data2VecAudio model)"),$we.forEach(t),dmo=i($),Hh=n($,"LI",{});var kwe=s(Hh);hae=n(kwe,"STRONG",{});var UXr=s(hae);cmo=r(UXr,"data2vec-text"),UXr.forEach(t),mmo=r(kwe," \u2014 "),bP=n(kwe,"A",{href:!0});var JXr=s(bP);fmo=r(JXr,"Data2VecTextModel"),JXr.forEach(t),gmo=r(kwe," (Data2VecText model)"),kwe.forEach(t),hmo=i($),Uh=n($,"LI",{});var Swe=s(Uh);uae=n(Swe,"STRONG",{});var YXr=s(uae);umo=r(YXr,"data2vec-vision"),YXr.forEach(t),pmo=r(Swe," \u2014 "),FP=n(Swe,"A",{href:!0});var KXr=s(FP);_mo=r(KXr,"Data2VecVisionModel"),KXr.forEach(t),bmo=r(Swe," (Data2VecVision model)"),Swe.forEach(t),Fmo=i($),Jh=n($,"LI",{});var Rwe=s(Jh);pae=n(Rwe,"STRONG",{});var ZXr=s(pae);vmo=r(ZXr,"deberta"),ZXr.forEach(t),Tmo=r(Rwe," \u2014 "),vP=n(Rwe,"A",{href:!0});var ezr=s(vP);Mmo=r(ezr,"DebertaModel"),ezr.forEach(t),Emo=r(Rwe," (DeBERTa model)"),Rwe.forEach(t),Cmo=i($),Yh=n($,"LI",{});var Bwe=s(Yh);_ae=n(Bwe,"STRONG",{});var ozr=s(_ae);wmo=r(ozr,"deberta-v2"),ozr.forEach(t),Amo=r(Bwe," \u2014 "),TP=n(Bwe,"A",{href:!0});var rzr=s(TP);ymo=r(rzr,"DebertaV2Model"),rzr.forEach(t),Lmo=r(Bwe," (DeBERTa-v2 model)"),Bwe.forEach(t),xmo=i($),Kh=n($,"LI",{});var Pwe=s(Kh);bae=n(Pwe,"STRONG",{});var tzr=s(bae);$mo=r(tzr,"decision_transformer"),tzr.forEach(t),kmo=r(Pwe," \u2014 "),MP=n(Pwe,"A",{href:!0});var azr=s(MP);Smo=r(azr,"DecisionTransformerModel"),azr.forEach(t),Rmo=r(Pwe," (Decision Transformer model)"),Pwe.forEach(t),Bmo=i($),Zh=n($,"LI",{});var Iwe=s(Zh);Fae=n(Iwe,"STRONG",{});var nzr=s(Fae);Pmo=r(nzr,"deit"),nzr.forEach(t),Imo=r(Iwe," \u2014 "),EP=n(Iwe,"A",{href:!0});var szr=s(EP);qmo=r(szr,"DeiTModel"),szr.forEach(t),Nmo=r(Iwe," (DeiT model)"),Iwe.forEach(t),jmo=i($),eu=n($,"LI",{});var qwe=s(eu);vae=n(qwe,"STRONG",{});var lzr=s(vae);Dmo=r(lzr,"detr"),lzr.forEach(t),Gmo=r(qwe," \u2014 "),CP=n(qwe,"A",{href:!0});var izr=s(CP);Omo=r(izr,"DetrModel"),izr.forEach(t),Vmo=r(qwe," (DETR model)"),qwe.forEach(t),Xmo=i($),ou=n($,"LI",{});var Nwe=s(ou);Tae=n(Nwe,"STRONG",{});var dzr=s(Tae);zmo=r(dzr,"distilbert"),dzr.forEach(t),Qmo=r(Nwe," \u2014 "),wP=n(Nwe,"A",{href:!0});var czr=s(wP);Wmo=r(czr,"DistilBertModel"),czr.forEach(t),Hmo=r(Nwe," (DistilBERT model)"),Nwe.forEach(t),Umo=i($),ru=n($,"LI",{});var jwe=s(ru);Mae=n(jwe,"STRONG",{});var mzr=s(Mae);Jmo=r(mzr,"dpr"),mzr.forEach(t),Ymo=r(jwe," \u2014 "),AP=n(jwe,"A",{href:!0});var fzr=s(AP);Kmo=r(fzr,"DPRQuestionEncoder"),fzr.forEach(t),Zmo=r(jwe," (DPR model)"),jwe.forEach(t),efo=i($),tu=n($,"LI",{});var Dwe=s(tu);Eae=n(Dwe,"STRONG",{});var gzr=s(Eae);ofo=r(gzr,"dpt"),gzr.forEach(t),rfo=r(Dwe," \u2014 "),yP=n(Dwe,"A",{href:!0});var hzr=s(yP);tfo=r(hzr,"DPTModel"),hzr.forEach(t),afo=r(Dwe," (DPT model)"),Dwe.forEach(t),nfo=i($),au=n($,"LI",{});var Gwe=s(au);Cae=n(Gwe,"STRONG",{});var uzr=s(Cae);sfo=r(uzr,"electra"),uzr.forEach(t),lfo=r(Gwe," \u2014 "),LP=n(Gwe,"A",{href:!0});var pzr=s(LP);ifo=r(pzr,"ElectraModel"),pzr.forEach(t),dfo=r(Gwe," (ELECTRA model)"),Gwe.forEach(t),cfo=i($),nu=n($,"LI",{});var Owe=s(nu);wae=n(Owe,"STRONG",{});var _zr=s(wae);mfo=r(_zr,"flaubert"),_zr.forEach(t),ffo=r(Owe," \u2014 "),xP=n(Owe,"A",{href:!0});var bzr=s(xP);gfo=r(bzr,"FlaubertModel"),bzr.forEach(t),hfo=r(Owe," (FlauBERT model)"),Owe.forEach(t),ufo=i($),su=n($,"LI",{});var Vwe=s(su);Aae=n(Vwe,"STRONG",{});var Fzr=s(Aae);pfo=r(Fzr,"fnet"),Fzr.forEach(t),_fo=r(Vwe," \u2014 "),$P=n(Vwe,"A",{href:!0});var vzr=s($P);bfo=r(vzr,"FNetModel"),vzr.forEach(t),Ffo=r(Vwe," (FNet model)"),Vwe.forEach(t),vfo=i($),lu=n($,"LI",{});var Xwe=s(lu);yae=n(Xwe,"STRONG",{});var Tzr=s(yae);Tfo=r(Tzr,"fsmt"),Tzr.forEach(t),Mfo=r(Xwe," \u2014 "),kP=n(Xwe,"A",{href:!0});var Mzr=s(kP);Efo=r(Mzr,"FSMTModel"),Mzr.forEach(t),Cfo=r(Xwe," (FairSeq Machine-Translation model)"),Xwe.forEach(t),wfo=i($),Ls=n($,"LI",{});var $9=s(Ls);Lae=n($9,"STRONG",{});var Ezr=s(Lae);Afo=r(Ezr,"funnel"),Ezr.forEach(t),yfo=r($9," \u2014 "),SP=n($9,"A",{href:!0});var Czr=s(SP);Lfo=r(Czr,"FunnelModel"),Czr.forEach(t),xfo=r($9," or "),RP=n($9,"A",{href:!0});var wzr=s(RP);$fo=r(wzr,"FunnelBaseModel"),wzr.forEach(t),kfo=r($9," (Funnel Transformer model)"),$9.forEach(t),Sfo=i($),iu=n($,"LI",{});var zwe=s(iu);xae=n(zwe,"STRONG",{});var Azr=s(xae);Rfo=r(Azr,"glpn"),Azr.forEach(t),Bfo=r(zwe," \u2014 "),BP=n(zwe,"A",{href:!0});var yzr=s(BP);Pfo=r(yzr,"GLPNModel"),yzr.forEach(t),Ifo=r(zwe," (GLPN model)"),zwe.forEach(t),qfo=i($),du=n($,"LI",{});var Qwe=s(du);$ae=n(Qwe,"STRONG",{});var Lzr=s($ae);Nfo=r(Lzr,"gpt2"),Lzr.forEach(t),jfo=r(Qwe," \u2014 "),PP=n(Qwe,"A",{href:!0});var xzr=s(PP);Dfo=r(xzr,"GPT2Model"),xzr.forEach(t),Gfo=r(Qwe," (OpenAI GPT-2 model)"),Qwe.forEach(t),Ofo=i($),cu=n($,"LI",{});var Wwe=s(cu);kae=n(Wwe,"STRONG",{});var $zr=s(kae);Vfo=r($zr,"gpt_neo"),$zr.forEach(t),Xfo=r(Wwe," \u2014 "),IP=n(Wwe,"A",{href:!0});var kzr=s(IP);zfo=r(kzr,"GPTNeoModel"),kzr.forEach(t),Qfo=r(Wwe," (GPT Neo model)"),Wwe.forEach(t),Wfo=i($),mu=n($,"LI",{});var Hwe=s(mu);Sae=n(Hwe,"STRONG",{});var Szr=s(Sae);Hfo=r(Szr,"gptj"),Szr.forEach(t),Ufo=r(Hwe," \u2014 "),qP=n(Hwe,"A",{href:!0});var Rzr=s(qP);Jfo=r(Rzr,"GPTJModel"),Rzr.forEach(t),Yfo=r(Hwe," (GPT-J model)"),Hwe.forEach(t),Kfo=i($),fu=n($,"LI",{});var Uwe=s(fu);Rae=n(Uwe,"STRONG",{});var Bzr=s(Rae);Zfo=r(Bzr,"hubert"),Bzr.forEach(t),ego=r(Uwe," \u2014 "),NP=n(Uwe,"A",{href:!0});var Pzr=s(NP);ogo=r(Pzr,"HubertModel"),Pzr.forEach(t),rgo=r(Uwe," (Hubert model)"),Uwe.forEach(t),tgo=i($),gu=n($,"LI",{});var Jwe=s(gu);Bae=n(Jwe,"STRONG",{});var Izr=s(Bae);ago=r(Izr,"ibert"),Izr.forEach(t),ngo=r(Jwe," \u2014 "),jP=n(Jwe,"A",{href:!0});var qzr=s(jP);sgo=r(qzr,"IBertModel"),qzr.forEach(t),lgo=r(Jwe," (I-BERT model)"),Jwe.forEach(t),igo=i($),hu=n($,"LI",{});var Ywe=s(hu);Pae=n(Ywe,"STRONG",{});var Nzr=s(Pae);dgo=r(Nzr,"imagegpt"),Nzr.forEach(t),cgo=r(Ywe," \u2014 "),DP=n(Ywe,"A",{href:!0});var jzr=s(DP);mgo=r(jzr,"ImageGPTModel"),jzr.forEach(t),fgo=r(Ywe," (ImageGPT model)"),Ywe.forEach(t),ggo=i($),uu=n($,"LI",{});var Kwe=s(uu);Iae=n(Kwe,"STRONG",{});var Dzr=s(Iae);hgo=r(Dzr,"layoutlm"),Dzr.forEach(t),ugo=r(Kwe," \u2014 "),GP=n(Kwe,"A",{href:!0});var Gzr=s(GP);pgo=r(Gzr,"LayoutLMModel"),Gzr.forEach(t),_go=r(Kwe," (LayoutLM model)"),Kwe.forEach(t),bgo=i($),pu=n($,"LI",{});var Zwe=s(pu);qae=n(Zwe,"STRONG",{});var Ozr=s(qae);Fgo=r(Ozr,"layoutlmv2"),Ozr.forEach(t),vgo=r(Zwe," \u2014 "),OP=n(Zwe,"A",{href:!0});var Vzr=s(OP);Tgo=r(Vzr,"LayoutLMv2Model"),Vzr.forEach(t),Mgo=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),Ego=i($),_u=n($,"LI",{});var eAe=s(_u);Nae=n(eAe,"STRONG",{});var Xzr=s(Nae);Cgo=r(Xzr,"led"),Xzr.forEach(t),wgo=r(eAe," \u2014 "),VP=n(eAe,"A",{href:!0});var zzr=s(VP);Ago=r(zzr,"LEDModel"),zzr.forEach(t),ygo=r(eAe," (LED model)"),eAe.forEach(t),Lgo=i($),bu=n($,"LI",{});var oAe=s(bu);jae=n(oAe,"STRONG",{});var Qzr=s(jae);xgo=r(Qzr,"longformer"),Qzr.forEach(t),$go=r(oAe," \u2014 "),XP=n(oAe,"A",{href:!0});var Wzr=s(XP);kgo=r(Wzr,"LongformerModel"),Wzr.forEach(t),Sgo=r(oAe," (Longformer model)"),oAe.forEach(t),Rgo=i($),Fu=n($,"LI",{});var rAe=s(Fu);Dae=n(rAe,"STRONG",{});var Hzr=s(Dae);Bgo=r(Hzr,"luke"),Hzr.forEach(t),Pgo=r(rAe," \u2014 "),zP=n(rAe,"A",{href:!0});var Uzr=s(zP);Igo=r(Uzr,"LukeModel"),Uzr.forEach(t),qgo=r(rAe," (LUKE model)"),rAe.forEach(t),Ngo=i($),vu=n($,"LI",{});var tAe=s(vu);Gae=n(tAe,"STRONG",{});var Jzr=s(Gae);jgo=r(Jzr,"lxmert"),Jzr.forEach(t),Dgo=r(tAe," \u2014 "),QP=n(tAe,"A",{href:!0});var Yzr=s(QP);Ggo=r(Yzr,"LxmertModel"),Yzr.forEach(t),Ogo=r(tAe," (LXMERT model)"),tAe.forEach(t),Vgo=i($),Tu=n($,"LI",{});var aAe=s(Tu);Oae=n(aAe,"STRONG",{});var Kzr=s(Oae);Xgo=r(Kzr,"m2m_100"),Kzr.forEach(t),zgo=r(aAe," \u2014 "),WP=n(aAe,"A",{href:!0});var Zzr=s(WP);Qgo=r(Zzr,"M2M100Model"),Zzr.forEach(t),Wgo=r(aAe," (M2M100 model)"),aAe.forEach(t),Hgo=i($),Mu=n($,"LI",{});var nAe=s(Mu);Vae=n(nAe,"STRONG",{});var eQr=s(Vae);Ugo=r(eQr,"marian"),eQr.forEach(t),Jgo=r(nAe," \u2014 "),HP=n(nAe,"A",{href:!0});var oQr=s(HP);Ygo=r(oQr,"MarianModel"),oQr.forEach(t),Kgo=r(nAe," (Marian model)"),nAe.forEach(t),Zgo=i($),Eu=n($,"LI",{});var sAe=s(Eu);Xae=n(sAe,"STRONG",{});var rQr=s(Xae);eho=r(rQr,"maskformer"),rQr.forEach(t),oho=r(sAe," \u2014 "),UP=n(sAe,"A",{href:!0});var tQr=s(UP);rho=r(tQr,"MaskFormerModel"),tQr.forEach(t),tho=r(sAe," (MaskFormer model)"),sAe.forEach(t),aho=i($),Cu=n($,"LI",{});var lAe=s(Cu);zae=n(lAe,"STRONG",{});var aQr=s(zae);nho=r(aQr,"mbart"),aQr.forEach(t),sho=r(lAe," \u2014 "),JP=n(lAe,"A",{href:!0});var nQr=s(JP);lho=r(nQr,"MBartModel"),nQr.forEach(t),iho=r(lAe," (mBART model)"),lAe.forEach(t),dho=i($),wu=n($,"LI",{});var iAe=s(wu);Qae=n(iAe,"STRONG",{});var sQr=s(Qae);cho=r(sQr,"megatron-bert"),sQr.forEach(t),mho=r(iAe," \u2014 "),YP=n(iAe,"A",{href:!0});var lQr=s(YP);fho=r(lQr,"MegatronBertModel"),lQr.forEach(t),gho=r(iAe," (MegatronBert model)"),iAe.forEach(t),hho=i($),Au=n($,"LI",{});var dAe=s(Au);Wae=n(dAe,"STRONG",{});var iQr=s(Wae);uho=r(iQr,"mobilebert"),iQr.forEach(t),pho=r(dAe," \u2014 "),KP=n(dAe,"A",{href:!0});var dQr=s(KP);_ho=r(dQr,"MobileBertModel"),dQr.forEach(t),bho=r(dAe," (MobileBERT model)"),dAe.forEach(t),Fho=i($),yu=n($,"LI",{});var cAe=s(yu);Hae=n(cAe,"STRONG",{});var cQr=s(Hae);vho=r(cQr,"mpnet"),cQr.forEach(t),Tho=r(cAe," \u2014 "),ZP=n(cAe,"A",{href:!0});var mQr=s(ZP);Mho=r(mQr,"MPNetModel"),mQr.forEach(t),Eho=r(cAe," (MPNet model)"),cAe.forEach(t),Cho=i($),Lu=n($,"LI",{});var mAe=s(Lu);Uae=n(mAe,"STRONG",{});var fQr=s(Uae);who=r(fQr,"mt5"),fQr.forEach(t),Aho=r(mAe," \u2014 "),eI=n(mAe,"A",{href:!0});var gQr=s(eI);yho=r(gQr,"MT5Model"),gQr.forEach(t),Lho=r(mAe," (mT5 model)"),mAe.forEach(t),xho=i($),xu=n($,"LI",{});var fAe=s(xu);Jae=n(fAe,"STRONG",{});var hQr=s(Jae);$ho=r(hQr,"nystromformer"),hQr.forEach(t),kho=r(fAe," \u2014 "),oI=n(fAe,"A",{href:!0});var uQr=s(oI);Sho=r(uQr,"NystromformerModel"),uQr.forEach(t),Rho=r(fAe," (Nystromformer model)"),fAe.forEach(t),Bho=i($),$u=n($,"LI",{});var gAe=s($u);Yae=n(gAe,"STRONG",{});var pQr=s(Yae);Pho=r(pQr,"openai-gpt"),pQr.forEach(t),Iho=r(gAe," \u2014 "),rI=n(gAe,"A",{href:!0});var _Qr=s(rI);qho=r(_Qr,"OpenAIGPTModel"),_Qr.forEach(t),Nho=r(gAe," (OpenAI GPT model)"),gAe.forEach(t),jho=i($),ku=n($,"LI",{});var hAe=s(ku);Kae=n(hAe,"STRONG",{});var bQr=s(Kae);Dho=r(bQr,"pegasus"),bQr.forEach(t),Gho=r(hAe," \u2014 "),tI=n(hAe,"A",{href:!0});var FQr=s(tI);Oho=r(FQr,"PegasusModel"),FQr.forEach(t),Vho=r(hAe," (Pegasus model)"),hAe.forEach(t),Xho=i($),Su=n($,"LI",{});var uAe=s(Su);Zae=n(uAe,"STRONG",{});var vQr=s(Zae);zho=r(vQr,"perceiver"),vQr.forEach(t),Qho=r(uAe," \u2014 "),aI=n(uAe,"A",{href:!0});var TQr=s(aI);Who=r(TQr,"PerceiverModel"),TQr.forEach(t),Hho=r(uAe," (Perceiver model)"),uAe.forEach(t),Uho=i($),Ru=n($,"LI",{});var pAe=s(Ru);ene=n(pAe,"STRONG",{});var MQr=s(ene);Jho=r(MQr,"plbart"),MQr.forEach(t),Yho=r(pAe," \u2014 "),nI=n(pAe,"A",{href:!0});var EQr=s(nI);Kho=r(EQr,"PLBartModel"),EQr.forEach(t),Zho=r(pAe," (PLBart model)"),pAe.forEach(t),euo=i($),Bu=n($,"LI",{});var _Ae=s(Bu);one=n(_Ae,"STRONG",{});var CQr=s(one);ouo=r(CQr,"poolformer"),CQr.forEach(t),ruo=r(_Ae," \u2014 "),sI=n(_Ae,"A",{href:!0});var wQr=s(sI);tuo=r(wQr,"PoolFormerModel"),wQr.forEach(t),auo=r(_Ae," (PoolFormer model)"),_Ae.forEach(t),nuo=i($),Pu=n($,"LI",{});var bAe=s(Pu);rne=n(bAe,"STRONG",{});var AQr=s(rne);suo=r(AQr,"prophetnet"),AQr.forEach(t),luo=r(bAe," \u2014 "),lI=n(bAe,"A",{href:!0});var yQr=s(lI);iuo=r(yQr,"ProphetNetModel"),yQr.forEach(t),duo=r(bAe," (ProphetNet model)"),bAe.forEach(t),cuo=i($),Iu=n($,"LI",{});var FAe=s(Iu);tne=n(FAe,"STRONG",{});var LQr=s(tne);muo=r(LQr,"qdqbert"),LQr.forEach(t),fuo=r(FAe," \u2014 "),iI=n(FAe,"A",{href:!0});var xQr=s(iI);guo=r(xQr,"QDQBertModel"),xQr.forEach(t),huo=r(FAe," (QDQBert model)"),FAe.forEach(t),uuo=i($),qu=n($,"LI",{});var vAe=s(qu);ane=n(vAe,"STRONG",{});var $Qr=s(ane);puo=r($Qr,"reformer"),$Qr.forEach(t),_uo=r(vAe," \u2014 "),dI=n(vAe,"A",{href:!0});var kQr=s(dI);buo=r(kQr,"ReformerModel"),kQr.forEach(t),Fuo=r(vAe," (Reformer model)"),vAe.forEach(t),vuo=i($),Nu=n($,"LI",{});var TAe=s(Nu);nne=n(TAe,"STRONG",{});var SQr=s(nne);Tuo=r(SQr,"regnet"),SQr.forEach(t),Muo=r(TAe," \u2014 "),cI=n(TAe,"A",{href:!0});var RQr=s(cI);Euo=r(RQr,"RegNetModel"),RQr.forEach(t),Cuo=r(TAe," (RegNet model)"),TAe.forEach(t),wuo=i($),ju=n($,"LI",{});var MAe=s(ju);sne=n(MAe,"STRONG",{});var BQr=s(sne);Auo=r(BQr,"rembert"),BQr.forEach(t),yuo=r(MAe," \u2014 "),mI=n(MAe,"A",{href:!0});var PQr=s(mI);Luo=r(PQr,"RemBertModel"),PQr.forEach(t),xuo=r(MAe," (RemBERT model)"),MAe.forEach(t),$uo=i($),Du=n($,"LI",{});var EAe=s(Du);lne=n(EAe,"STRONG",{});var IQr=s(lne);kuo=r(IQr,"resnet"),IQr.forEach(t),Suo=r(EAe," \u2014 "),fI=n(EAe,"A",{href:!0});var qQr=s(fI);Ruo=r(qQr,"ResNetModel"),qQr.forEach(t),Buo=r(EAe," (ResNet model)"),EAe.forEach(t),Puo=i($),Gu=n($,"LI",{});var CAe=s(Gu);ine=n(CAe,"STRONG",{});var NQr=s(ine);Iuo=r(NQr,"retribert"),NQr.forEach(t),quo=r(CAe," \u2014 "),gI=n(CAe,"A",{href:!0});var jQr=s(gI);Nuo=r(jQr,"RetriBertModel"),jQr.forEach(t),juo=r(CAe," (RetriBERT model)"),CAe.forEach(t),Duo=i($),Ou=n($,"LI",{});var wAe=s(Ou);dne=n(wAe,"STRONG",{});var DQr=s(dne);Guo=r(DQr,"roberta"),DQr.forEach(t),Ouo=r(wAe," \u2014 "),hI=n(wAe,"A",{href:!0});var GQr=s(hI);Vuo=r(GQr,"RobertaModel"),GQr.forEach(t),Xuo=r(wAe," (RoBERTa model)"),wAe.forEach(t),zuo=i($),Vu=n($,"LI",{});var AAe=s(Vu);cne=n(AAe,"STRONG",{});var OQr=s(cne);Quo=r(OQr,"roformer"),OQr.forEach(t),Wuo=r(AAe," \u2014 "),uI=n(AAe,"A",{href:!0});var VQr=s(uI);Huo=r(VQr,"RoFormerModel"),VQr.forEach(t),Uuo=r(AAe," (RoFormer model)"),AAe.forEach(t),Juo=i($),Xu=n($,"LI",{});var yAe=s(Xu);mne=n(yAe,"STRONG",{});var XQr=s(mne);Yuo=r(XQr,"segformer"),XQr.forEach(t),Kuo=r(yAe," \u2014 "),pI=n(yAe,"A",{href:!0});var zQr=s(pI);Zuo=r(zQr,"SegformerModel"),zQr.forEach(t),epo=r(yAe," (SegFormer model)"),yAe.forEach(t),opo=i($),zu=n($,"LI",{});var LAe=s(zu);fne=n(LAe,"STRONG",{});var QQr=s(fne);rpo=r(QQr,"sew"),QQr.forEach(t),tpo=r(LAe," \u2014 "),_I=n(LAe,"A",{href:!0});var WQr=s(_I);apo=r(WQr,"SEWModel"),WQr.forEach(t),npo=r(LAe," (SEW model)"),LAe.forEach(t),spo=i($),Qu=n($,"LI",{});var xAe=s(Qu);gne=n(xAe,"STRONG",{});var HQr=s(gne);lpo=r(HQr,"sew-d"),HQr.forEach(t),ipo=r(xAe," \u2014 "),bI=n(xAe,"A",{href:!0});var UQr=s(bI);dpo=r(UQr,"SEWDModel"),UQr.forEach(t),cpo=r(xAe," (SEW-D model)"),xAe.forEach(t),mpo=i($),Wu=n($,"LI",{});var $Ae=s(Wu);hne=n($Ae,"STRONG",{});var JQr=s(hne);fpo=r(JQr,"speech_to_text"),JQr.forEach(t),gpo=r($Ae," \u2014 "),FI=n($Ae,"A",{href:!0});var YQr=s(FI);hpo=r(YQr,"Speech2TextModel"),YQr.forEach(t),upo=r($Ae," (Speech2Text model)"),$Ae.forEach(t),ppo=i($),Hu=n($,"LI",{});var kAe=s(Hu);une=n(kAe,"STRONG",{});var KQr=s(une);_po=r(KQr,"splinter"),KQr.forEach(t),bpo=r(kAe," \u2014 "),vI=n(kAe,"A",{href:!0});var ZQr=s(vI);Fpo=r(ZQr,"SplinterModel"),ZQr.forEach(t),vpo=r(kAe," (Splinter model)"),kAe.forEach(t),Tpo=i($),Uu=n($,"LI",{});var SAe=s(Uu);pne=n(SAe,"STRONG",{});var eWr=s(pne);Mpo=r(eWr,"squeezebert"),eWr.forEach(t),Epo=r(SAe," \u2014 "),TI=n(SAe,"A",{href:!0});var oWr=s(TI);Cpo=r(oWr,"SqueezeBertModel"),oWr.forEach(t),wpo=r(SAe," (SqueezeBERT model)"),SAe.forEach(t),Apo=i($),Ju=n($,"LI",{});var RAe=s(Ju);_ne=n(RAe,"STRONG",{});var rWr=s(_ne);ypo=r(rWr,"swin"),rWr.forEach(t),Lpo=r(RAe," \u2014 "),MI=n(RAe,"A",{href:!0});var tWr=s(MI);xpo=r(tWr,"SwinModel"),tWr.forEach(t),$po=r(RAe," (Swin model)"),RAe.forEach(t),kpo=i($),Yu=n($,"LI",{});var BAe=s(Yu);bne=n(BAe,"STRONG",{});var aWr=s(bne);Spo=r(aWr,"t5"),aWr.forEach(t),Rpo=r(BAe," \u2014 "),EI=n(BAe,"A",{href:!0});var nWr=s(EI);Bpo=r(nWr,"T5Model"),nWr.forEach(t),Ppo=r(BAe," (T5 model)"),BAe.forEach(t),Ipo=i($),Ku=n($,"LI",{});var PAe=s(Ku);Fne=n(PAe,"STRONG",{});var sWr=s(Fne);qpo=r(sWr,"tapas"),sWr.forEach(t),Npo=r(PAe," \u2014 "),CI=n(PAe,"A",{href:!0});var lWr=s(CI);jpo=r(lWr,"TapasModel"),lWr.forEach(t),Dpo=r(PAe," (TAPAS model)"),PAe.forEach(t),Gpo=i($),Zu=n($,"LI",{});var IAe=s(Zu);vne=n(IAe,"STRONG",{});var iWr=s(vne);Opo=r(iWr,"transfo-xl"),iWr.forEach(t),Vpo=r(IAe," \u2014 "),wI=n(IAe,"A",{href:!0});var dWr=s(wI);Xpo=r(dWr,"TransfoXLModel"),dWr.forEach(t),zpo=r(IAe," (Transformer-XL model)"),IAe.forEach(t),Qpo=i($),ep=n($,"LI",{});var qAe=s(ep);Tne=n(qAe,"STRONG",{});var cWr=s(Tne);Wpo=r(cWr,"unispeech"),cWr.forEach(t),Hpo=r(qAe," \u2014 "),AI=n(qAe,"A",{href:!0});var mWr=s(AI);Upo=r(mWr,"UniSpeechModel"),mWr.forEach(t),Jpo=r(qAe," (UniSpeech model)"),qAe.forEach(t),Ypo=i($),op=n($,"LI",{});var NAe=s(op);Mne=n(NAe,"STRONG",{});var fWr=s(Mne);Kpo=r(fWr,"unispeech-sat"),fWr.forEach(t),Zpo=r(NAe," \u2014 "),yI=n(NAe,"A",{href:!0});var gWr=s(yI);e_o=r(gWr,"UniSpeechSatModel"),gWr.forEach(t),o_o=r(NAe," (UniSpeechSat model)"),NAe.forEach(t),r_o=i($),rp=n($,"LI",{});var jAe=s(rp);Ene=n(jAe,"STRONG",{});var hWr=s(Ene);t_o=r(hWr,"van"),hWr.forEach(t),a_o=r(jAe," \u2014 "),LI=n(jAe,"A",{href:!0});var uWr=s(LI);n_o=r(uWr,"VanModel"),uWr.forEach(t),s_o=r(jAe," (VAN model)"),jAe.forEach(t),l_o=i($),tp=n($,"LI",{});var DAe=s(tp);Cne=n(DAe,"STRONG",{});var pWr=s(Cne);i_o=r(pWr,"vilt"),pWr.forEach(t),d_o=r(DAe," \u2014 "),xI=n(DAe,"A",{href:!0});var _Wr=s(xI);c_o=r(_Wr,"ViltModel"),_Wr.forEach(t),m_o=r(DAe," (ViLT model)"),DAe.forEach(t),f_o=i($),ap=n($,"LI",{});var GAe=s(ap);wne=n(GAe,"STRONG",{});var bWr=s(wne);g_o=r(bWr,"vision-text-dual-encoder"),bWr.forEach(t),h_o=r(GAe," \u2014 "),$I=n(GAe,"A",{href:!0});var FWr=s($I);u_o=r(FWr,"VisionTextDualEncoderModel"),FWr.forEach(t),p_o=r(GAe," (VisionTextDualEncoder model)"),GAe.forEach(t),__o=i($),np=n($,"LI",{});var OAe=s(np);Ane=n(OAe,"STRONG",{});var vWr=s(Ane);b_o=r(vWr,"visual_bert"),vWr.forEach(t),F_o=r(OAe," \u2014 "),kI=n(OAe,"A",{href:!0});var TWr=s(kI);v_o=r(TWr,"VisualBertModel"),TWr.forEach(t),T_o=r(OAe," (VisualBert model)"),OAe.forEach(t),M_o=i($),sp=n($,"LI",{});var VAe=s(sp);yne=n(VAe,"STRONG",{});var MWr=s(yne);E_o=r(MWr,"vit"),MWr.forEach(t),C_o=r(VAe," \u2014 "),SI=n(VAe,"A",{href:!0});var EWr=s(SI);w_o=r(EWr,"ViTModel"),EWr.forEach(t),A_o=r(VAe," (ViT model)"),VAe.forEach(t),y_o=i($),lp=n($,"LI",{});var XAe=s(lp);Lne=n(XAe,"STRONG",{});var CWr=s(Lne);L_o=r(CWr,"vit_mae"),CWr.forEach(t),x_o=r(XAe," \u2014 "),RI=n(XAe,"A",{href:!0});var wWr=s(RI);$_o=r(wWr,"ViTMAEModel"),wWr.forEach(t),k_o=r(XAe," (ViTMAE model)"),XAe.forEach(t),S_o=i($),ip=n($,"LI",{});var zAe=s(ip);xne=n(zAe,"STRONG",{});var AWr=s(xne);R_o=r(AWr,"wav2vec2"),AWr.forEach(t),B_o=r(zAe," \u2014 "),BI=n(zAe,"A",{href:!0});var yWr=s(BI);P_o=r(yWr,"Wav2Vec2Model"),yWr.forEach(t),I_o=r(zAe," (Wav2Vec2 model)"),zAe.forEach(t),q_o=i($),dp=n($,"LI",{});var QAe=s(dp);$ne=n(QAe,"STRONG",{});var LWr=s($ne);N_o=r(LWr,"wavlm"),LWr.forEach(t),j_o=r(QAe," \u2014 "),PI=n(QAe,"A",{href:!0});var xWr=s(PI);D_o=r(xWr,"WavLMModel"),xWr.forEach(t),G_o=r(QAe," (WavLM model)"),QAe.forEach(t),O_o=i($),cp=n($,"LI",{});var WAe=s(cp);kne=n(WAe,"STRONG",{});var $Wr=s(kne);V_o=r($Wr,"xglm"),$Wr.forEach(t),X_o=r(WAe," \u2014 "),II=n(WAe,"A",{href:!0});var kWr=s(II);z_o=r(kWr,"XGLMModel"),kWr.forEach(t),Q_o=r(WAe," (XGLM model)"),WAe.forEach(t),W_o=i($),mp=n($,"LI",{});var HAe=s(mp);Sne=n(HAe,"STRONG",{});var SWr=s(Sne);H_o=r(SWr,"xlm"),SWr.forEach(t),U_o=r(HAe," \u2014 "),qI=n(HAe,"A",{href:!0});var RWr=s(qI);J_o=r(RWr,"XLMModel"),RWr.forEach(t),Y_o=r(HAe," (XLM model)"),HAe.forEach(t),K_o=i($),fp=n($,"LI",{});var UAe=s(fp);Rne=n(UAe,"STRONG",{});var BWr=s(Rne);Z_o=r(BWr,"xlm-prophetnet"),BWr.forEach(t),ebo=r(UAe," \u2014 "),NI=n(UAe,"A",{href:!0});var PWr=s(NI);obo=r(PWr,"XLMProphetNetModel"),PWr.forEach(t),rbo=r(UAe," (XLMProphetNet model)"),UAe.forEach(t),tbo=i($),gp=n($,"LI",{});var JAe=s(gp);Bne=n(JAe,"STRONG",{});var IWr=s(Bne);abo=r(IWr,"xlm-roberta"),IWr.forEach(t),nbo=r(JAe," \u2014 "),jI=n(JAe,"A",{href:!0});var qWr=s(jI);sbo=r(qWr,"XLMRobertaModel"),qWr.forEach(t),lbo=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),ibo=i($),hp=n($,"LI",{});var YAe=s(hp);Pne=n(YAe,"STRONG",{});var NWr=s(Pne);dbo=r(NWr,"xlm-roberta-xl"),NWr.forEach(t),cbo=r(YAe," \u2014 "),DI=n(YAe,"A",{href:!0});var jWr=s(DI);mbo=r(jWr,"XLMRobertaXLModel"),jWr.forEach(t),fbo=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),gbo=i($),up=n($,"LI",{});var KAe=s(up);Ine=n(KAe,"STRONG",{});var DWr=s(Ine);hbo=r(DWr,"xlnet"),DWr.forEach(t),ubo=r(KAe," \u2014 "),GI=n(KAe,"A",{href:!0});var GWr=s(GI);pbo=r(GWr,"XLNetModel"),GWr.forEach(t),_bo=r(KAe," (XLNet model)"),KAe.forEach(t),bbo=i($),pp=n($,"LI",{});var ZAe=s(pp);qne=n(ZAe,"STRONG",{});var OWr=s(qne);Fbo=r(OWr,"yolos"),OWr.forEach(t),vbo=r(ZAe," \u2014 "),OI=n(ZAe,"A",{href:!0});var VWr=s(OI);Tbo=r(VWr,"YolosModel"),VWr.forEach(t),Mbo=r(ZAe," (YOLOS model)"),ZAe.forEach(t),Ebo=i($),_p=n($,"LI",{});var e0e=s(_p);Nne=n(e0e,"STRONG",{});var XWr=s(Nne);Cbo=r(XWr,"yoso"),XWr.forEach(t),wbo=r(e0e," \u2014 "),VI=n(e0e,"A",{href:!0});var zWr=s(VI);Abo=r(zWr,"YosoModel"),zWr.forEach(t),ybo=r(e0e," (YOSO model)"),e0e.forEach(t),$.forEach(t),Lbo=i(Jt),bp=n(Jt,"P",{});var o0e=s(bp);xbo=r(o0e,"The model is set in evaluation mode by default using "),jne=n(o0e,"CODE",{});var QWr=s(jne);$bo=r(QWr,"model.eval()"),QWr.forEach(t),kbo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dne=n(o0e,"CODE",{});var WWr=s(Dne);Sbo=r(WWr,"model.train()"),WWr.forEach(t),o0e.forEach(t),Rbo=i(Jt),T(Fp.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),vBe=i(m),bi=n(m,"H2",{class:!0});var MIe=s(bi);vp=n(MIe,"A",{id:!0,class:!0,href:!0});var HWr=s(vp);Gne=n(HWr,"SPAN",{});var UWr=s(Gne);T(K6.$$.fragment,UWr),UWr.forEach(t),HWr.forEach(t),Bbo=i(MIe),One=n(MIe,"SPAN",{});var JWr=s(One);Pbo=r(JWr,"AutoModelForPreTraining"),JWr.forEach(t),MIe.forEach(t),TBe=i(m),xo=n(m,"DIV",{class:!0});var Is=s(xo);T(Z6.$$.fragment,Is),Ibo=i(Is),Fi=n(Is,"P",{});var gY=s(Fi);qbo=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XI=n(gY,"A",{href:!0});var YWr=s(XI);Nbo=r(YWr,"from_pretrained()"),YWr.forEach(t),jbo=r(gY," class method or the "),zI=n(gY,"A",{href:!0});var KWr=s(zI);Dbo=r(KWr,"from_config()"),KWr.forEach(t),Gbo=r(gY,` class
method.`),gY.forEach(t),Obo=i(Is),ey=n(Is,"P",{});var EIe=s(ey);Vbo=r(EIe,"This class cannot be instantiated directly using "),Vne=n(EIe,"CODE",{});var ZWr=s(Vne);Xbo=r(ZWr,"__init__()"),ZWr.forEach(t),zbo=r(EIe," (throws an error)."),EIe.forEach(t),Qbo=i(Is),et=n(Is,"DIV",{class:!0});var LA=s(et);T(oy.$$.fragment,LA),Wbo=i(LA),Xne=n(LA,"P",{});var eHr=s(Xne);Hbo=r(eHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eHr.forEach(t),Ubo=i(LA),vi=n(LA,"P",{});var hY=s(vi);Jbo=r(hY,`Note:
Loading a model from its configuration file does `),zne=n(hY,"STRONG",{});var oHr=s(zne);Ybo=r(oHr,"not"),oHr.forEach(t),Kbo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=n(hY,"A",{href:!0});var rHr=s(QI);Zbo=r(rHr,"from_pretrained()"),rHr.forEach(t),e2o=r(hY," to load the model weights."),hY.forEach(t),o2o=i(LA),T(Tp.$$.fragment,LA),LA.forEach(t),r2o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(ry.$$.fragment,Yt),t2o=i(Yt),Qne=n(Yt,"P",{});var tHr=s(Qne);a2o=r(tHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tHr.forEach(t),n2o=i(Yt),Ca=n(Yt,"P",{});var xA=s(Ca);s2o=r(xA,"The model class to instantiate is selected based on the "),Wne=n(xA,"CODE",{});var aHr=s(Wne);l2o=r(aHr,"model_type"),aHr.forEach(t),i2o=r(xA,` property of the config object (either
passed as an argument or loaded from `),Hne=n(xA,"CODE",{});var nHr=s(Hne);d2o=r(nHr,"pretrained_model_name_or_path"),nHr.forEach(t),c2o=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Une=n(xA,"CODE",{});var sHr=s(Une);m2o=r(sHr,"pretrained_model_name_or_path"),sHr.forEach(t),f2o=r(xA,":"),xA.forEach(t),g2o=i(Yt),G=n(Yt,"UL",{});var V=s(G);Mp=n(V,"LI",{});var r0e=s(Mp);Jne=n(r0e,"STRONG",{});var lHr=s(Jne);h2o=r(lHr,"albert"),lHr.forEach(t),u2o=r(r0e," \u2014 "),WI=n(r0e,"A",{href:!0});var iHr=s(WI);p2o=r(iHr,"AlbertForPreTraining"),iHr.forEach(t),_2o=r(r0e," (ALBERT model)"),r0e.forEach(t),b2o=i(V),Ep=n(V,"LI",{});var t0e=s(Ep);Yne=n(t0e,"STRONG",{});var dHr=s(Yne);F2o=r(dHr,"bart"),dHr.forEach(t),v2o=r(t0e," \u2014 "),HI=n(t0e,"A",{href:!0});var cHr=s(HI);T2o=r(cHr,"BartForConditionalGeneration"),cHr.forEach(t),M2o=r(t0e," (BART model)"),t0e.forEach(t),E2o=i(V),Cp=n(V,"LI",{});var a0e=s(Cp);Kne=n(a0e,"STRONG",{});var mHr=s(Kne);C2o=r(mHr,"bert"),mHr.forEach(t),w2o=r(a0e," \u2014 "),UI=n(a0e,"A",{href:!0});var fHr=s(UI);A2o=r(fHr,"BertForPreTraining"),fHr.forEach(t),y2o=r(a0e," (BERT model)"),a0e.forEach(t),L2o=i(V),wp=n(V,"LI",{});var n0e=s(wp);Zne=n(n0e,"STRONG",{});var gHr=s(Zne);x2o=r(gHr,"big_bird"),gHr.forEach(t),$2o=r(n0e," \u2014 "),JI=n(n0e,"A",{href:!0});var hHr=s(JI);k2o=r(hHr,"BigBirdForPreTraining"),hHr.forEach(t),S2o=r(n0e," (BigBird model)"),n0e.forEach(t),R2o=i(V),Ap=n(V,"LI",{});var s0e=s(Ap);ese=n(s0e,"STRONG",{});var uHr=s(ese);B2o=r(uHr,"camembert"),uHr.forEach(t),P2o=r(s0e," \u2014 "),YI=n(s0e,"A",{href:!0});var pHr=s(YI);I2o=r(pHr,"CamembertForMaskedLM"),pHr.forEach(t),q2o=r(s0e," (CamemBERT model)"),s0e.forEach(t),N2o=i(V),yp=n(V,"LI",{});var l0e=s(yp);ose=n(l0e,"STRONG",{});var _Hr=s(ose);j2o=r(_Hr,"ctrl"),_Hr.forEach(t),D2o=r(l0e," \u2014 "),KI=n(l0e,"A",{href:!0});var bHr=s(KI);G2o=r(bHr,"CTRLLMHeadModel"),bHr.forEach(t),O2o=r(l0e," (CTRL model)"),l0e.forEach(t),V2o=i(V),Lp=n(V,"LI",{});var i0e=s(Lp);rse=n(i0e,"STRONG",{});var FHr=s(rse);X2o=r(FHr,"data2vec-text"),FHr.forEach(t),z2o=r(i0e," \u2014 "),ZI=n(i0e,"A",{href:!0});var vHr=s(ZI);Q2o=r(vHr,"Data2VecTextForMaskedLM"),vHr.forEach(t),W2o=r(i0e," (Data2VecText model)"),i0e.forEach(t),H2o=i(V),xp=n(V,"LI",{});var d0e=s(xp);tse=n(d0e,"STRONG",{});var THr=s(tse);U2o=r(THr,"deberta"),THr.forEach(t),J2o=r(d0e," \u2014 "),eq=n(d0e,"A",{href:!0});var MHr=s(eq);Y2o=r(MHr,"DebertaForMaskedLM"),MHr.forEach(t),K2o=r(d0e," (DeBERTa model)"),d0e.forEach(t),Z2o=i(V),$p=n(V,"LI",{});var c0e=s($p);ase=n(c0e,"STRONG",{});var EHr=s(ase);eFo=r(EHr,"deberta-v2"),EHr.forEach(t),oFo=r(c0e," \u2014 "),oq=n(c0e,"A",{href:!0});var CHr=s(oq);rFo=r(CHr,"DebertaV2ForMaskedLM"),CHr.forEach(t),tFo=r(c0e," (DeBERTa-v2 model)"),c0e.forEach(t),aFo=i(V),kp=n(V,"LI",{});var m0e=s(kp);nse=n(m0e,"STRONG",{});var wHr=s(nse);nFo=r(wHr,"distilbert"),wHr.forEach(t),sFo=r(m0e," \u2014 "),rq=n(m0e,"A",{href:!0});var AHr=s(rq);lFo=r(AHr,"DistilBertForMaskedLM"),AHr.forEach(t),iFo=r(m0e," (DistilBERT model)"),m0e.forEach(t),dFo=i(V),Sp=n(V,"LI",{});var f0e=s(Sp);sse=n(f0e,"STRONG",{});var yHr=s(sse);cFo=r(yHr,"electra"),yHr.forEach(t),mFo=r(f0e," \u2014 "),tq=n(f0e,"A",{href:!0});var LHr=s(tq);fFo=r(LHr,"ElectraForPreTraining"),LHr.forEach(t),gFo=r(f0e," (ELECTRA model)"),f0e.forEach(t),hFo=i(V),Rp=n(V,"LI",{});var g0e=s(Rp);lse=n(g0e,"STRONG",{});var xHr=s(lse);uFo=r(xHr,"flaubert"),xHr.forEach(t),pFo=r(g0e," \u2014 "),aq=n(g0e,"A",{href:!0});var $Hr=s(aq);_Fo=r($Hr,"FlaubertWithLMHeadModel"),$Hr.forEach(t),bFo=r(g0e," (FlauBERT model)"),g0e.forEach(t),FFo=i(V),Bp=n(V,"LI",{});var h0e=s(Bp);ise=n(h0e,"STRONG",{});var kHr=s(ise);vFo=r(kHr,"fnet"),kHr.forEach(t),TFo=r(h0e," \u2014 "),nq=n(h0e,"A",{href:!0});var SHr=s(nq);MFo=r(SHr,"FNetForPreTraining"),SHr.forEach(t),EFo=r(h0e," (FNet model)"),h0e.forEach(t),CFo=i(V),Pp=n(V,"LI",{});var u0e=s(Pp);dse=n(u0e,"STRONG",{});var RHr=s(dse);wFo=r(RHr,"fsmt"),RHr.forEach(t),AFo=r(u0e," \u2014 "),sq=n(u0e,"A",{href:!0});var BHr=s(sq);yFo=r(BHr,"FSMTForConditionalGeneration"),BHr.forEach(t),LFo=r(u0e," (FairSeq Machine-Translation model)"),u0e.forEach(t),xFo=i(V),Ip=n(V,"LI",{});var p0e=s(Ip);cse=n(p0e,"STRONG",{});var PHr=s(cse);$Fo=r(PHr,"funnel"),PHr.forEach(t),kFo=r(p0e," \u2014 "),lq=n(p0e,"A",{href:!0});var IHr=s(lq);SFo=r(IHr,"FunnelForPreTraining"),IHr.forEach(t),RFo=r(p0e," (Funnel Transformer model)"),p0e.forEach(t),BFo=i(V),qp=n(V,"LI",{});var _0e=s(qp);mse=n(_0e,"STRONG",{});var qHr=s(mse);PFo=r(qHr,"gpt2"),qHr.forEach(t),IFo=r(_0e," \u2014 "),iq=n(_0e,"A",{href:!0});var NHr=s(iq);qFo=r(NHr,"GPT2LMHeadModel"),NHr.forEach(t),NFo=r(_0e," (OpenAI GPT-2 model)"),_0e.forEach(t),jFo=i(V),Np=n(V,"LI",{});var b0e=s(Np);fse=n(b0e,"STRONG",{});var jHr=s(fse);DFo=r(jHr,"ibert"),jHr.forEach(t),GFo=r(b0e," \u2014 "),dq=n(b0e,"A",{href:!0});var DHr=s(dq);OFo=r(DHr,"IBertForMaskedLM"),DHr.forEach(t),VFo=r(b0e," (I-BERT model)"),b0e.forEach(t),XFo=i(V),jp=n(V,"LI",{});var F0e=s(jp);gse=n(F0e,"STRONG",{});var GHr=s(gse);zFo=r(GHr,"layoutlm"),GHr.forEach(t),QFo=r(F0e," \u2014 "),cq=n(F0e,"A",{href:!0});var OHr=s(cq);WFo=r(OHr,"LayoutLMForMaskedLM"),OHr.forEach(t),HFo=r(F0e," (LayoutLM model)"),F0e.forEach(t),UFo=i(V),Dp=n(V,"LI",{});var v0e=s(Dp);hse=n(v0e,"STRONG",{});var VHr=s(hse);JFo=r(VHr,"longformer"),VHr.forEach(t),YFo=r(v0e," \u2014 "),mq=n(v0e,"A",{href:!0});var XHr=s(mq);KFo=r(XHr,"LongformerForMaskedLM"),XHr.forEach(t),ZFo=r(v0e," (Longformer model)"),v0e.forEach(t),evo=i(V),Gp=n(V,"LI",{});var T0e=s(Gp);use=n(T0e,"STRONG",{});var zHr=s(use);ovo=r(zHr,"lxmert"),zHr.forEach(t),rvo=r(T0e," \u2014 "),fq=n(T0e,"A",{href:!0});var QHr=s(fq);tvo=r(QHr,"LxmertForPreTraining"),QHr.forEach(t),avo=r(T0e," (LXMERT model)"),T0e.forEach(t),nvo=i(V),Op=n(V,"LI",{});var M0e=s(Op);pse=n(M0e,"STRONG",{});var WHr=s(pse);svo=r(WHr,"megatron-bert"),WHr.forEach(t),lvo=r(M0e," \u2014 "),gq=n(M0e,"A",{href:!0});var HHr=s(gq);ivo=r(HHr,"MegatronBertForPreTraining"),HHr.forEach(t),dvo=r(M0e," (MegatronBert model)"),M0e.forEach(t),cvo=i(V),Vp=n(V,"LI",{});var E0e=s(Vp);_se=n(E0e,"STRONG",{});var UHr=s(_se);mvo=r(UHr,"mobilebert"),UHr.forEach(t),fvo=r(E0e," \u2014 "),hq=n(E0e,"A",{href:!0});var JHr=s(hq);gvo=r(JHr,"MobileBertForPreTraining"),JHr.forEach(t),hvo=r(E0e," (MobileBERT model)"),E0e.forEach(t),uvo=i(V),Xp=n(V,"LI",{});var C0e=s(Xp);bse=n(C0e,"STRONG",{});var YHr=s(bse);pvo=r(YHr,"mpnet"),YHr.forEach(t),_vo=r(C0e," \u2014 "),uq=n(C0e,"A",{href:!0});var KHr=s(uq);bvo=r(KHr,"MPNetForMaskedLM"),KHr.forEach(t),Fvo=r(C0e," (MPNet model)"),C0e.forEach(t),vvo=i(V),zp=n(V,"LI",{});var w0e=s(zp);Fse=n(w0e,"STRONG",{});var ZHr=s(Fse);Tvo=r(ZHr,"openai-gpt"),ZHr.forEach(t),Mvo=r(w0e," \u2014 "),pq=n(w0e,"A",{href:!0});var eUr=s(pq);Evo=r(eUr,"OpenAIGPTLMHeadModel"),eUr.forEach(t),Cvo=r(w0e," (OpenAI GPT model)"),w0e.forEach(t),wvo=i(V),Qp=n(V,"LI",{});var A0e=s(Qp);vse=n(A0e,"STRONG",{});var oUr=s(vse);Avo=r(oUr,"retribert"),oUr.forEach(t),yvo=r(A0e," \u2014 "),_q=n(A0e,"A",{href:!0});var rUr=s(_q);Lvo=r(rUr,"RetriBertModel"),rUr.forEach(t),xvo=r(A0e," (RetriBERT model)"),A0e.forEach(t),$vo=i(V),Wp=n(V,"LI",{});var y0e=s(Wp);Tse=n(y0e,"STRONG",{});var tUr=s(Tse);kvo=r(tUr,"roberta"),tUr.forEach(t),Svo=r(y0e," \u2014 "),bq=n(y0e,"A",{href:!0});var aUr=s(bq);Rvo=r(aUr,"RobertaForMaskedLM"),aUr.forEach(t),Bvo=r(y0e," (RoBERTa model)"),y0e.forEach(t),Pvo=i(V),Hp=n(V,"LI",{});var L0e=s(Hp);Mse=n(L0e,"STRONG",{});var nUr=s(Mse);Ivo=r(nUr,"squeezebert"),nUr.forEach(t),qvo=r(L0e," \u2014 "),Fq=n(L0e,"A",{href:!0});var sUr=s(Fq);Nvo=r(sUr,"SqueezeBertForMaskedLM"),sUr.forEach(t),jvo=r(L0e," (SqueezeBERT model)"),L0e.forEach(t),Dvo=i(V),Up=n(V,"LI",{});var x0e=s(Up);Ese=n(x0e,"STRONG",{});var lUr=s(Ese);Gvo=r(lUr,"t5"),lUr.forEach(t),Ovo=r(x0e," \u2014 "),vq=n(x0e,"A",{href:!0});var iUr=s(vq);Vvo=r(iUr,"T5ForConditionalGeneration"),iUr.forEach(t),Xvo=r(x0e," (T5 model)"),x0e.forEach(t),zvo=i(V),Jp=n(V,"LI",{});var $0e=s(Jp);Cse=n($0e,"STRONG",{});var dUr=s(Cse);Qvo=r(dUr,"tapas"),dUr.forEach(t),Wvo=r($0e," \u2014 "),Tq=n($0e,"A",{href:!0});var cUr=s(Tq);Hvo=r(cUr,"TapasForMaskedLM"),cUr.forEach(t),Uvo=r($0e," (TAPAS model)"),$0e.forEach(t),Jvo=i(V),Yp=n(V,"LI",{});var k0e=s(Yp);wse=n(k0e,"STRONG",{});var mUr=s(wse);Yvo=r(mUr,"transfo-xl"),mUr.forEach(t),Kvo=r(k0e," \u2014 "),Mq=n(k0e,"A",{href:!0});var fUr=s(Mq);Zvo=r(fUr,"TransfoXLLMHeadModel"),fUr.forEach(t),e1o=r(k0e," (Transformer-XL model)"),k0e.forEach(t),o1o=i(V),Kp=n(V,"LI",{});var S0e=s(Kp);Ase=n(S0e,"STRONG",{});var gUr=s(Ase);r1o=r(gUr,"unispeech"),gUr.forEach(t),t1o=r(S0e," \u2014 "),Eq=n(S0e,"A",{href:!0});var hUr=s(Eq);a1o=r(hUr,"UniSpeechForPreTraining"),hUr.forEach(t),n1o=r(S0e," (UniSpeech model)"),S0e.forEach(t),s1o=i(V),Zp=n(V,"LI",{});var R0e=s(Zp);yse=n(R0e,"STRONG",{});var uUr=s(yse);l1o=r(uUr,"unispeech-sat"),uUr.forEach(t),i1o=r(R0e," \u2014 "),Cq=n(R0e,"A",{href:!0});var pUr=s(Cq);d1o=r(pUr,"UniSpeechSatForPreTraining"),pUr.forEach(t),c1o=r(R0e," (UniSpeechSat model)"),R0e.forEach(t),m1o=i(V),e_=n(V,"LI",{});var B0e=s(e_);Lse=n(B0e,"STRONG",{});var _Ur=s(Lse);f1o=r(_Ur,"visual_bert"),_Ur.forEach(t),g1o=r(B0e," \u2014 "),wq=n(B0e,"A",{href:!0});var bUr=s(wq);h1o=r(bUr,"VisualBertForPreTraining"),bUr.forEach(t),u1o=r(B0e," (VisualBert model)"),B0e.forEach(t),p1o=i(V),o_=n(V,"LI",{});var P0e=s(o_);xse=n(P0e,"STRONG",{});var FUr=s(xse);_1o=r(FUr,"vit_mae"),FUr.forEach(t),b1o=r(P0e," \u2014 "),Aq=n(P0e,"A",{href:!0});var vUr=s(Aq);F1o=r(vUr,"ViTMAEForPreTraining"),vUr.forEach(t),v1o=r(P0e," (ViTMAE model)"),P0e.forEach(t),T1o=i(V),r_=n(V,"LI",{});var I0e=s(r_);$se=n(I0e,"STRONG",{});var TUr=s($se);M1o=r(TUr,"wav2vec2"),TUr.forEach(t),E1o=r(I0e," \u2014 "),yq=n(I0e,"A",{href:!0});var MUr=s(yq);C1o=r(MUr,"Wav2Vec2ForPreTraining"),MUr.forEach(t),w1o=r(I0e," (Wav2Vec2 model)"),I0e.forEach(t),A1o=i(V),t_=n(V,"LI",{});var q0e=s(t_);kse=n(q0e,"STRONG",{});var EUr=s(kse);y1o=r(EUr,"xlm"),EUr.forEach(t),L1o=r(q0e," \u2014 "),Lq=n(q0e,"A",{href:!0});var CUr=s(Lq);x1o=r(CUr,"XLMWithLMHeadModel"),CUr.forEach(t),$1o=r(q0e," (XLM model)"),q0e.forEach(t),k1o=i(V),a_=n(V,"LI",{});var N0e=s(a_);Sse=n(N0e,"STRONG",{});var wUr=s(Sse);S1o=r(wUr,"xlm-roberta"),wUr.forEach(t),R1o=r(N0e," \u2014 "),xq=n(N0e,"A",{href:!0});var AUr=s(xq);B1o=r(AUr,"XLMRobertaForMaskedLM"),AUr.forEach(t),P1o=r(N0e," (XLM-RoBERTa model)"),N0e.forEach(t),I1o=i(V),n_=n(V,"LI",{});var j0e=s(n_);Rse=n(j0e,"STRONG",{});var yUr=s(Rse);q1o=r(yUr,"xlm-roberta-xl"),yUr.forEach(t),N1o=r(j0e," \u2014 "),$q=n(j0e,"A",{href:!0});var LUr=s($q);j1o=r(LUr,"XLMRobertaXLForMaskedLM"),LUr.forEach(t),D1o=r(j0e," (XLM-RoBERTa-XL model)"),j0e.forEach(t),G1o=i(V),s_=n(V,"LI",{});var D0e=s(s_);Bse=n(D0e,"STRONG",{});var xUr=s(Bse);O1o=r(xUr,"xlnet"),xUr.forEach(t),V1o=r(D0e," \u2014 "),kq=n(D0e,"A",{href:!0});var $Ur=s(kq);X1o=r($Ur,"XLNetLMHeadModel"),$Ur.forEach(t),z1o=r(D0e," (XLNet model)"),D0e.forEach(t),V.forEach(t),Q1o=i(Yt),l_=n(Yt,"P",{});var G0e=s(l_);W1o=r(G0e,"The model is set in evaluation mode by default using "),Pse=n(G0e,"CODE",{});var kUr=s(Pse);H1o=r(kUr,"model.eval()"),kUr.forEach(t),U1o=r(G0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ise=n(G0e,"CODE",{});var SUr=s(Ise);J1o=r(SUr,"model.train()"),SUr.forEach(t),G0e.forEach(t),Y1o=i(Yt),T(i_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),MBe=i(m),Ti=n(m,"H2",{class:!0});var CIe=s(Ti);d_=n(CIe,"A",{id:!0,class:!0,href:!0});var RUr=s(d_);qse=n(RUr,"SPAN",{});var BUr=s(qse);T(ty.$$.fragment,BUr),BUr.forEach(t),RUr.forEach(t),K1o=i(CIe),Nse=n(CIe,"SPAN",{});var PUr=s(Nse);Z1o=r(PUr,"AutoModelForCausalLM"),PUr.forEach(t),CIe.forEach(t),EBe=i(m),$o=n(m,"DIV",{class:!0});var qs=s($o);T(ay.$$.fragment,qs),eTo=i(qs),Mi=n(qs,"P",{});var uY=s(Mi);oTo=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Sq=n(uY,"A",{href:!0});var IUr=s(Sq);rTo=r(IUr,"from_pretrained()"),IUr.forEach(t),tTo=r(uY," class method or the "),Rq=n(uY,"A",{href:!0});var qUr=s(Rq);aTo=r(qUr,"from_config()"),qUr.forEach(t),nTo=r(uY,` class
method.`),uY.forEach(t),sTo=i(qs),ny=n(qs,"P",{});var wIe=s(ny);lTo=r(wIe,"This class cannot be instantiated directly using "),jse=n(wIe,"CODE",{});var NUr=s(jse);iTo=r(NUr,"__init__()"),NUr.forEach(t),dTo=r(wIe," (throws an error)."),wIe.forEach(t),cTo=i(qs),ot=n(qs,"DIV",{class:!0});var $A=s(ot);T(sy.$$.fragment,$A),mTo=i($A),Dse=n($A,"P",{});var jUr=s(Dse);fTo=r(jUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),jUr.forEach(t),gTo=i($A),Ei=n($A,"P",{});var pY=s(Ei);hTo=r(pY,`Note:
Loading a model from its configuration file does `),Gse=n(pY,"STRONG",{});var DUr=s(Gse);uTo=r(DUr,"not"),DUr.forEach(t),pTo=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=n(pY,"A",{href:!0});var GUr=s(Bq);_To=r(GUr,"from_pretrained()"),GUr.forEach(t),bTo=r(pY," to load the model weights."),pY.forEach(t),FTo=i($A),T(c_.$$.fragment,$A),$A.forEach(t),vTo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(ly.$$.fragment,Kt),TTo=i(Kt),Ose=n(Kt,"P",{});var OUr=s(Ose);MTo=r(OUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OUr.forEach(t),ETo=i(Kt),wa=n(Kt,"P",{});var kA=s(wa);CTo=r(kA,"The model class to instantiate is selected based on the "),Vse=n(kA,"CODE",{});var VUr=s(Vse);wTo=r(VUr,"model_type"),VUr.forEach(t),ATo=r(kA,` property of the config object (either
passed as an argument or loaded from `),Xse=n(kA,"CODE",{});var XUr=s(Xse);yTo=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),LTo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(kA,"CODE",{});var zUr=s(zse);xTo=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),$To=r(kA,":"),kA.forEach(t),kTo=i(Kt),z=n(Kt,"UL",{});var W=s(z);m_=n(W,"LI",{});var O0e=s(m_);Qse=n(O0e,"STRONG",{});var QUr=s(Qse);STo=r(QUr,"bart"),QUr.forEach(t),RTo=r(O0e," \u2014 "),Pq=n(O0e,"A",{href:!0});var WUr=s(Pq);BTo=r(WUr,"BartForCausalLM"),WUr.forEach(t),PTo=r(O0e," (BART model)"),O0e.forEach(t),ITo=i(W),f_=n(W,"LI",{});var V0e=s(f_);Wse=n(V0e,"STRONG",{});var HUr=s(Wse);qTo=r(HUr,"bert"),HUr.forEach(t),NTo=r(V0e," \u2014 "),Iq=n(V0e,"A",{href:!0});var UUr=s(Iq);jTo=r(UUr,"BertLMHeadModel"),UUr.forEach(t),DTo=r(V0e," (BERT model)"),V0e.forEach(t),GTo=i(W),g_=n(W,"LI",{});var X0e=s(g_);Hse=n(X0e,"STRONG",{});var JUr=s(Hse);OTo=r(JUr,"bert-generation"),JUr.forEach(t),VTo=r(X0e," \u2014 "),qq=n(X0e,"A",{href:!0});var YUr=s(qq);XTo=r(YUr,"BertGenerationDecoder"),YUr.forEach(t),zTo=r(X0e," (Bert Generation model)"),X0e.forEach(t),QTo=i(W),h_=n(W,"LI",{});var z0e=s(h_);Use=n(z0e,"STRONG",{});var KUr=s(Use);WTo=r(KUr,"big_bird"),KUr.forEach(t),HTo=r(z0e," \u2014 "),Nq=n(z0e,"A",{href:!0});var ZUr=s(Nq);UTo=r(ZUr,"BigBirdForCausalLM"),ZUr.forEach(t),JTo=r(z0e," (BigBird model)"),z0e.forEach(t),YTo=i(W),u_=n(W,"LI",{});var Q0e=s(u_);Jse=n(Q0e,"STRONG",{});var eJr=s(Jse);KTo=r(eJr,"bigbird_pegasus"),eJr.forEach(t),ZTo=r(Q0e," \u2014 "),jq=n(Q0e,"A",{href:!0});var oJr=s(jq);eMo=r(oJr,"BigBirdPegasusForCausalLM"),oJr.forEach(t),oMo=r(Q0e," (BigBirdPegasus model)"),Q0e.forEach(t),rMo=i(W),p_=n(W,"LI",{});var W0e=s(p_);Yse=n(W0e,"STRONG",{});var rJr=s(Yse);tMo=r(rJr,"blenderbot"),rJr.forEach(t),aMo=r(W0e," \u2014 "),Dq=n(W0e,"A",{href:!0});var tJr=s(Dq);nMo=r(tJr,"BlenderbotForCausalLM"),tJr.forEach(t),sMo=r(W0e," (Blenderbot model)"),W0e.forEach(t),lMo=i(W),__=n(W,"LI",{});var H0e=s(__);Kse=n(H0e,"STRONG",{});var aJr=s(Kse);iMo=r(aJr,"blenderbot-small"),aJr.forEach(t),dMo=r(H0e," \u2014 "),Gq=n(H0e,"A",{href:!0});var nJr=s(Gq);cMo=r(nJr,"BlenderbotSmallForCausalLM"),nJr.forEach(t),mMo=r(H0e," (BlenderbotSmall model)"),H0e.forEach(t),fMo=i(W),b_=n(W,"LI",{});var U0e=s(b_);Zse=n(U0e,"STRONG",{});var sJr=s(Zse);gMo=r(sJr,"camembert"),sJr.forEach(t),hMo=r(U0e," \u2014 "),Oq=n(U0e,"A",{href:!0});var lJr=s(Oq);uMo=r(lJr,"CamembertForCausalLM"),lJr.forEach(t),pMo=r(U0e," (CamemBERT model)"),U0e.forEach(t),_Mo=i(W),F_=n(W,"LI",{});var J0e=s(F_);ele=n(J0e,"STRONG",{});var iJr=s(ele);bMo=r(iJr,"ctrl"),iJr.forEach(t),FMo=r(J0e," \u2014 "),Vq=n(J0e,"A",{href:!0});var dJr=s(Vq);vMo=r(dJr,"CTRLLMHeadModel"),dJr.forEach(t),TMo=r(J0e," (CTRL model)"),J0e.forEach(t),MMo=i(W),v_=n(W,"LI",{});var Y0e=s(v_);ole=n(Y0e,"STRONG",{});var cJr=s(ole);EMo=r(cJr,"data2vec-text"),cJr.forEach(t),CMo=r(Y0e," \u2014 "),Xq=n(Y0e,"A",{href:!0});var mJr=s(Xq);wMo=r(mJr,"Data2VecTextForCausalLM"),mJr.forEach(t),AMo=r(Y0e," (Data2VecText model)"),Y0e.forEach(t),yMo=i(W),T_=n(W,"LI",{});var K0e=s(T_);rle=n(K0e,"STRONG",{});var fJr=s(rle);LMo=r(fJr,"electra"),fJr.forEach(t),xMo=r(K0e," \u2014 "),zq=n(K0e,"A",{href:!0});var gJr=s(zq);$Mo=r(gJr,"ElectraForCausalLM"),gJr.forEach(t),kMo=r(K0e," (ELECTRA model)"),K0e.forEach(t),SMo=i(W),M_=n(W,"LI",{});var Z0e=s(M_);tle=n(Z0e,"STRONG",{});var hJr=s(tle);RMo=r(hJr,"gpt2"),hJr.forEach(t),BMo=r(Z0e," \u2014 "),Qq=n(Z0e,"A",{href:!0});var uJr=s(Qq);PMo=r(uJr,"GPT2LMHeadModel"),uJr.forEach(t),IMo=r(Z0e," (OpenAI GPT-2 model)"),Z0e.forEach(t),qMo=i(W),E_=n(W,"LI",{});var e6e=s(E_);ale=n(e6e,"STRONG",{});var pJr=s(ale);NMo=r(pJr,"gpt_neo"),pJr.forEach(t),jMo=r(e6e," \u2014 "),Wq=n(e6e,"A",{href:!0});var _Jr=s(Wq);DMo=r(_Jr,"GPTNeoForCausalLM"),_Jr.forEach(t),GMo=r(e6e," (GPT Neo model)"),e6e.forEach(t),OMo=i(W),C_=n(W,"LI",{});var o6e=s(C_);nle=n(o6e,"STRONG",{});var bJr=s(nle);VMo=r(bJr,"gptj"),bJr.forEach(t),XMo=r(o6e," \u2014 "),Hq=n(o6e,"A",{href:!0});var FJr=s(Hq);zMo=r(FJr,"GPTJForCausalLM"),FJr.forEach(t),QMo=r(o6e," (GPT-J model)"),o6e.forEach(t),WMo=i(W),w_=n(W,"LI",{});var r6e=s(w_);sle=n(r6e,"STRONG",{});var vJr=s(sle);HMo=r(vJr,"marian"),vJr.forEach(t),UMo=r(r6e," \u2014 "),Uq=n(r6e,"A",{href:!0});var TJr=s(Uq);JMo=r(TJr,"MarianForCausalLM"),TJr.forEach(t),YMo=r(r6e," (Marian model)"),r6e.forEach(t),KMo=i(W),A_=n(W,"LI",{});var t6e=s(A_);lle=n(t6e,"STRONG",{});var MJr=s(lle);ZMo=r(MJr,"mbart"),MJr.forEach(t),e4o=r(t6e," \u2014 "),Jq=n(t6e,"A",{href:!0});var EJr=s(Jq);o4o=r(EJr,"MBartForCausalLM"),EJr.forEach(t),r4o=r(t6e," (mBART model)"),t6e.forEach(t),t4o=i(W),y_=n(W,"LI",{});var a6e=s(y_);ile=n(a6e,"STRONG",{});var CJr=s(ile);a4o=r(CJr,"megatron-bert"),CJr.forEach(t),n4o=r(a6e," \u2014 "),Yq=n(a6e,"A",{href:!0});var wJr=s(Yq);s4o=r(wJr,"MegatronBertForCausalLM"),wJr.forEach(t),l4o=r(a6e," (MegatronBert model)"),a6e.forEach(t),i4o=i(W),L_=n(W,"LI",{});var n6e=s(L_);dle=n(n6e,"STRONG",{});var AJr=s(dle);d4o=r(AJr,"openai-gpt"),AJr.forEach(t),c4o=r(n6e," \u2014 "),Kq=n(n6e,"A",{href:!0});var yJr=s(Kq);m4o=r(yJr,"OpenAIGPTLMHeadModel"),yJr.forEach(t),f4o=r(n6e," (OpenAI GPT model)"),n6e.forEach(t),g4o=i(W),x_=n(W,"LI",{});var s6e=s(x_);cle=n(s6e,"STRONG",{});var LJr=s(cle);h4o=r(LJr,"pegasus"),LJr.forEach(t),u4o=r(s6e," \u2014 "),Zq=n(s6e,"A",{href:!0});var xJr=s(Zq);p4o=r(xJr,"PegasusForCausalLM"),xJr.forEach(t),_4o=r(s6e," (Pegasus model)"),s6e.forEach(t),b4o=i(W),$_=n(W,"LI",{});var l6e=s($_);mle=n(l6e,"STRONG",{});var $Jr=s(mle);F4o=r($Jr,"plbart"),$Jr.forEach(t),v4o=r(l6e," \u2014 "),eN=n(l6e,"A",{href:!0});var kJr=s(eN);T4o=r(kJr,"PLBartForCausalLM"),kJr.forEach(t),M4o=r(l6e," (PLBart model)"),l6e.forEach(t),E4o=i(W),k_=n(W,"LI",{});var i6e=s(k_);fle=n(i6e,"STRONG",{});var SJr=s(fle);C4o=r(SJr,"prophetnet"),SJr.forEach(t),w4o=r(i6e," \u2014 "),oN=n(i6e,"A",{href:!0});var RJr=s(oN);A4o=r(RJr,"ProphetNetForCausalLM"),RJr.forEach(t),y4o=r(i6e," (ProphetNet model)"),i6e.forEach(t),L4o=i(W),S_=n(W,"LI",{});var d6e=s(S_);gle=n(d6e,"STRONG",{});var BJr=s(gle);x4o=r(BJr,"qdqbert"),BJr.forEach(t),$4o=r(d6e," \u2014 "),rN=n(d6e,"A",{href:!0});var PJr=s(rN);k4o=r(PJr,"QDQBertLMHeadModel"),PJr.forEach(t),S4o=r(d6e," (QDQBert model)"),d6e.forEach(t),R4o=i(W),R_=n(W,"LI",{});var c6e=s(R_);hle=n(c6e,"STRONG",{});var IJr=s(hle);B4o=r(IJr,"reformer"),IJr.forEach(t),P4o=r(c6e," \u2014 "),tN=n(c6e,"A",{href:!0});var qJr=s(tN);I4o=r(qJr,"ReformerModelWithLMHead"),qJr.forEach(t),q4o=r(c6e," (Reformer model)"),c6e.forEach(t),N4o=i(W),B_=n(W,"LI",{});var m6e=s(B_);ule=n(m6e,"STRONG",{});var NJr=s(ule);j4o=r(NJr,"rembert"),NJr.forEach(t),D4o=r(m6e," \u2014 "),aN=n(m6e,"A",{href:!0});var jJr=s(aN);G4o=r(jJr,"RemBertForCausalLM"),jJr.forEach(t),O4o=r(m6e," (RemBERT model)"),m6e.forEach(t),V4o=i(W),P_=n(W,"LI",{});var f6e=s(P_);ple=n(f6e,"STRONG",{});var DJr=s(ple);X4o=r(DJr,"roberta"),DJr.forEach(t),z4o=r(f6e," \u2014 "),nN=n(f6e,"A",{href:!0});var GJr=s(nN);Q4o=r(GJr,"RobertaForCausalLM"),GJr.forEach(t),W4o=r(f6e," (RoBERTa model)"),f6e.forEach(t),H4o=i(W),I_=n(W,"LI",{});var g6e=s(I_);_le=n(g6e,"STRONG",{});var OJr=s(_le);U4o=r(OJr,"roformer"),OJr.forEach(t),J4o=r(g6e," \u2014 "),sN=n(g6e,"A",{href:!0});var VJr=s(sN);Y4o=r(VJr,"RoFormerForCausalLM"),VJr.forEach(t),K4o=r(g6e," (RoFormer model)"),g6e.forEach(t),Z4o=i(W),q_=n(W,"LI",{});var h6e=s(q_);ble=n(h6e,"STRONG",{});var XJr=s(ble);eEo=r(XJr,"speech_to_text_2"),XJr.forEach(t),oEo=r(h6e," \u2014 "),lN=n(h6e,"A",{href:!0});var zJr=s(lN);rEo=r(zJr,"Speech2Text2ForCausalLM"),zJr.forEach(t),tEo=r(h6e," (Speech2Text2 model)"),h6e.forEach(t),aEo=i(W),N_=n(W,"LI",{});var u6e=s(N_);Fle=n(u6e,"STRONG",{});var QJr=s(Fle);nEo=r(QJr,"transfo-xl"),QJr.forEach(t),sEo=r(u6e," \u2014 "),iN=n(u6e,"A",{href:!0});var WJr=s(iN);lEo=r(WJr,"TransfoXLLMHeadModel"),WJr.forEach(t),iEo=r(u6e," (Transformer-XL model)"),u6e.forEach(t),dEo=i(W),j_=n(W,"LI",{});var p6e=s(j_);vle=n(p6e,"STRONG",{});var HJr=s(vle);cEo=r(HJr,"trocr"),HJr.forEach(t),mEo=r(p6e," \u2014 "),dN=n(p6e,"A",{href:!0});var UJr=s(dN);fEo=r(UJr,"TrOCRForCausalLM"),UJr.forEach(t),gEo=r(p6e," (TrOCR model)"),p6e.forEach(t),hEo=i(W),D_=n(W,"LI",{});var _6e=s(D_);Tle=n(_6e,"STRONG",{});var JJr=s(Tle);uEo=r(JJr,"xglm"),JJr.forEach(t),pEo=r(_6e," \u2014 "),cN=n(_6e,"A",{href:!0});var YJr=s(cN);_Eo=r(YJr,"XGLMForCausalLM"),YJr.forEach(t),bEo=r(_6e," (XGLM model)"),_6e.forEach(t),FEo=i(W),G_=n(W,"LI",{});var b6e=s(G_);Mle=n(b6e,"STRONG",{});var KJr=s(Mle);vEo=r(KJr,"xlm"),KJr.forEach(t),TEo=r(b6e," \u2014 "),mN=n(b6e,"A",{href:!0});var ZJr=s(mN);MEo=r(ZJr,"XLMWithLMHeadModel"),ZJr.forEach(t),EEo=r(b6e," (XLM model)"),b6e.forEach(t),CEo=i(W),O_=n(W,"LI",{});var F6e=s(O_);Ele=n(F6e,"STRONG",{});var eYr=s(Ele);wEo=r(eYr,"xlm-prophetnet"),eYr.forEach(t),AEo=r(F6e," \u2014 "),fN=n(F6e,"A",{href:!0});var oYr=s(fN);yEo=r(oYr,"XLMProphetNetForCausalLM"),oYr.forEach(t),LEo=r(F6e," (XLMProphetNet model)"),F6e.forEach(t),xEo=i(W),V_=n(W,"LI",{});var v6e=s(V_);Cle=n(v6e,"STRONG",{});var rYr=s(Cle);$Eo=r(rYr,"xlm-roberta"),rYr.forEach(t),kEo=r(v6e," \u2014 "),gN=n(v6e,"A",{href:!0});var tYr=s(gN);SEo=r(tYr,"XLMRobertaForCausalLM"),tYr.forEach(t),REo=r(v6e," (XLM-RoBERTa model)"),v6e.forEach(t),BEo=i(W),X_=n(W,"LI",{});var T6e=s(X_);wle=n(T6e,"STRONG",{});var aYr=s(wle);PEo=r(aYr,"xlm-roberta-xl"),aYr.forEach(t),IEo=r(T6e," \u2014 "),hN=n(T6e,"A",{href:!0});var nYr=s(hN);qEo=r(nYr,"XLMRobertaXLForCausalLM"),nYr.forEach(t),NEo=r(T6e," (XLM-RoBERTa-XL model)"),T6e.forEach(t),jEo=i(W),z_=n(W,"LI",{});var M6e=s(z_);Ale=n(M6e,"STRONG",{});var sYr=s(Ale);DEo=r(sYr,"xlnet"),sYr.forEach(t),GEo=r(M6e," \u2014 "),uN=n(M6e,"A",{href:!0});var lYr=s(uN);OEo=r(lYr,"XLNetLMHeadModel"),lYr.forEach(t),VEo=r(M6e," (XLNet model)"),M6e.forEach(t),W.forEach(t),XEo=i(Kt),Q_=n(Kt,"P",{});var E6e=s(Q_);zEo=r(E6e,"The model is set in evaluation mode by default using "),yle=n(E6e,"CODE",{});var iYr=s(yle);QEo=r(iYr,"model.eval()"),iYr.forEach(t),WEo=r(E6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=n(E6e,"CODE",{});var dYr=s(Lle);HEo=r(dYr,"model.train()"),dYr.forEach(t),E6e.forEach(t),UEo=i(Kt),T(W_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),CBe=i(m),Ci=n(m,"H2",{class:!0});var AIe=s(Ci);H_=n(AIe,"A",{id:!0,class:!0,href:!0});var cYr=s(H_);xle=n(cYr,"SPAN",{});var mYr=s(xle);T(iy.$$.fragment,mYr),mYr.forEach(t),cYr.forEach(t),JEo=i(AIe),$le=n(AIe,"SPAN",{});var fYr=s($le);YEo=r(fYr,"AutoModelForMaskedLM"),fYr.forEach(t),AIe.forEach(t),wBe=i(m),ko=n(m,"DIV",{class:!0});var Ns=s(ko);T(dy.$$.fragment,Ns),KEo=i(Ns),wi=n(Ns,"P",{});var _Y=s(wi);ZEo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pN=n(_Y,"A",{href:!0});var gYr=s(pN);e5o=r(gYr,"from_pretrained()"),gYr.forEach(t),o5o=r(_Y," class method or the "),_N=n(_Y,"A",{href:!0});var hYr=s(_N);r5o=r(hYr,"from_config()"),hYr.forEach(t),t5o=r(_Y,` class
method.`),_Y.forEach(t),a5o=i(Ns),cy=n(Ns,"P",{});var yIe=s(cy);n5o=r(yIe,"This class cannot be instantiated directly using "),kle=n(yIe,"CODE",{});var uYr=s(kle);s5o=r(uYr,"__init__()"),uYr.forEach(t),l5o=r(yIe," (throws an error)."),yIe.forEach(t),i5o=i(Ns),rt=n(Ns,"DIV",{class:!0});var SA=s(rt);T(my.$$.fragment,SA),d5o=i(SA),Sle=n(SA,"P",{});var pYr=s(Sle);c5o=r(pYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pYr.forEach(t),m5o=i(SA),Ai=n(SA,"P",{});var bY=s(Ai);f5o=r(bY,`Note:
Loading a model from its configuration file does `),Rle=n(bY,"STRONG",{});var _Yr=s(Rle);g5o=r(_Yr,"not"),_Yr.forEach(t),h5o=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bN=n(bY,"A",{href:!0});var bYr=s(bN);u5o=r(bYr,"from_pretrained()"),bYr.forEach(t),p5o=r(bY," to load the model weights."),bY.forEach(t),_5o=i(SA),T(U_.$$.fragment,SA),SA.forEach(t),b5o=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(fy.$$.fragment,Zt),F5o=i(Zt),Ble=n(Zt,"P",{});var FYr=s(Ble);v5o=r(FYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FYr.forEach(t),T5o=i(Zt),Aa=n(Zt,"P",{});var RA=s(Aa);M5o=r(RA,"The model class to instantiate is selected based on the "),Ple=n(RA,"CODE",{});var vYr=s(Ple);E5o=r(vYr,"model_type"),vYr.forEach(t),C5o=r(RA,` property of the config object (either
passed as an argument or loaded from `),Ile=n(RA,"CODE",{});var TYr=s(Ile);w5o=r(TYr,"pretrained_model_name_or_path"),TYr.forEach(t),A5o=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qle=n(RA,"CODE",{});var MYr=s(qle);y5o=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),L5o=r(RA,":"),RA.forEach(t),x5o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);J_=n(H,"LI",{});var C6e=s(J_);Nle=n(C6e,"STRONG",{});var EYr=s(Nle);$5o=r(EYr,"albert"),EYr.forEach(t),k5o=r(C6e," \u2014 "),FN=n(C6e,"A",{href:!0});var CYr=s(FN);S5o=r(CYr,"AlbertForMaskedLM"),CYr.forEach(t),R5o=r(C6e," (ALBERT model)"),C6e.forEach(t),B5o=i(H),Y_=n(H,"LI",{});var w6e=s(Y_);jle=n(w6e,"STRONG",{});var wYr=s(jle);P5o=r(wYr,"bart"),wYr.forEach(t),I5o=r(w6e," \u2014 "),vN=n(w6e,"A",{href:!0});var AYr=s(vN);q5o=r(AYr,"BartForConditionalGeneration"),AYr.forEach(t),N5o=r(w6e," (BART model)"),w6e.forEach(t),j5o=i(H),K_=n(H,"LI",{});var A6e=s(K_);Dle=n(A6e,"STRONG",{});var yYr=s(Dle);D5o=r(yYr,"bert"),yYr.forEach(t),G5o=r(A6e," \u2014 "),TN=n(A6e,"A",{href:!0});var LYr=s(TN);O5o=r(LYr,"BertForMaskedLM"),LYr.forEach(t),V5o=r(A6e," (BERT model)"),A6e.forEach(t),X5o=i(H),Z_=n(H,"LI",{});var y6e=s(Z_);Gle=n(y6e,"STRONG",{});var xYr=s(Gle);z5o=r(xYr,"big_bird"),xYr.forEach(t),Q5o=r(y6e," \u2014 "),MN=n(y6e,"A",{href:!0});var $Yr=s(MN);W5o=r($Yr,"BigBirdForMaskedLM"),$Yr.forEach(t),H5o=r(y6e," (BigBird model)"),y6e.forEach(t),U5o=i(H),eb=n(H,"LI",{});var L6e=s(eb);Ole=n(L6e,"STRONG",{});var kYr=s(Ole);J5o=r(kYr,"camembert"),kYr.forEach(t),Y5o=r(L6e," \u2014 "),EN=n(L6e,"A",{href:!0});var SYr=s(EN);K5o=r(SYr,"CamembertForMaskedLM"),SYr.forEach(t),Z5o=r(L6e," (CamemBERT model)"),L6e.forEach(t),eCo=i(H),ob=n(H,"LI",{});var x6e=s(ob);Vle=n(x6e,"STRONG",{});var RYr=s(Vle);oCo=r(RYr,"convbert"),RYr.forEach(t),rCo=r(x6e," \u2014 "),CN=n(x6e,"A",{href:!0});var BYr=s(CN);tCo=r(BYr,"ConvBertForMaskedLM"),BYr.forEach(t),aCo=r(x6e," (ConvBERT model)"),x6e.forEach(t),nCo=i(H),rb=n(H,"LI",{});var $6e=s(rb);Xle=n($6e,"STRONG",{});var PYr=s(Xle);sCo=r(PYr,"data2vec-text"),PYr.forEach(t),lCo=r($6e," \u2014 "),wN=n($6e,"A",{href:!0});var IYr=s(wN);iCo=r(IYr,"Data2VecTextForMaskedLM"),IYr.forEach(t),dCo=r($6e," (Data2VecText model)"),$6e.forEach(t),cCo=i(H),tb=n(H,"LI",{});var k6e=s(tb);zle=n(k6e,"STRONG",{});var qYr=s(zle);mCo=r(qYr,"deberta"),qYr.forEach(t),fCo=r(k6e," \u2014 "),AN=n(k6e,"A",{href:!0});var NYr=s(AN);gCo=r(NYr,"DebertaForMaskedLM"),NYr.forEach(t),hCo=r(k6e," (DeBERTa model)"),k6e.forEach(t),uCo=i(H),ab=n(H,"LI",{});var S6e=s(ab);Qle=n(S6e,"STRONG",{});var jYr=s(Qle);pCo=r(jYr,"deberta-v2"),jYr.forEach(t),_Co=r(S6e," \u2014 "),yN=n(S6e,"A",{href:!0});var DYr=s(yN);bCo=r(DYr,"DebertaV2ForMaskedLM"),DYr.forEach(t),FCo=r(S6e," (DeBERTa-v2 model)"),S6e.forEach(t),vCo=i(H),nb=n(H,"LI",{});var R6e=s(nb);Wle=n(R6e,"STRONG",{});var GYr=s(Wle);TCo=r(GYr,"distilbert"),GYr.forEach(t),MCo=r(R6e," \u2014 "),LN=n(R6e,"A",{href:!0});var OYr=s(LN);ECo=r(OYr,"DistilBertForMaskedLM"),OYr.forEach(t),CCo=r(R6e," (DistilBERT model)"),R6e.forEach(t),wCo=i(H),sb=n(H,"LI",{});var B6e=s(sb);Hle=n(B6e,"STRONG",{});var VYr=s(Hle);ACo=r(VYr,"electra"),VYr.forEach(t),yCo=r(B6e," \u2014 "),xN=n(B6e,"A",{href:!0});var XYr=s(xN);LCo=r(XYr,"ElectraForMaskedLM"),XYr.forEach(t),xCo=r(B6e," (ELECTRA model)"),B6e.forEach(t),$Co=i(H),lb=n(H,"LI",{});var P6e=s(lb);Ule=n(P6e,"STRONG",{});var zYr=s(Ule);kCo=r(zYr,"flaubert"),zYr.forEach(t),SCo=r(P6e," \u2014 "),$N=n(P6e,"A",{href:!0});var QYr=s($N);RCo=r(QYr,"FlaubertWithLMHeadModel"),QYr.forEach(t),BCo=r(P6e," (FlauBERT model)"),P6e.forEach(t),PCo=i(H),ib=n(H,"LI",{});var I6e=s(ib);Jle=n(I6e,"STRONG",{});var WYr=s(Jle);ICo=r(WYr,"fnet"),WYr.forEach(t),qCo=r(I6e," \u2014 "),kN=n(I6e,"A",{href:!0});var HYr=s(kN);NCo=r(HYr,"FNetForMaskedLM"),HYr.forEach(t),jCo=r(I6e," (FNet model)"),I6e.forEach(t),DCo=i(H),db=n(H,"LI",{});var q6e=s(db);Yle=n(q6e,"STRONG",{});var UYr=s(Yle);GCo=r(UYr,"funnel"),UYr.forEach(t),OCo=r(q6e," \u2014 "),SN=n(q6e,"A",{href:!0});var JYr=s(SN);VCo=r(JYr,"FunnelForMaskedLM"),JYr.forEach(t),XCo=r(q6e," (Funnel Transformer model)"),q6e.forEach(t),zCo=i(H),cb=n(H,"LI",{});var N6e=s(cb);Kle=n(N6e,"STRONG",{});var YYr=s(Kle);QCo=r(YYr,"ibert"),YYr.forEach(t),WCo=r(N6e," \u2014 "),RN=n(N6e,"A",{href:!0});var KYr=s(RN);HCo=r(KYr,"IBertForMaskedLM"),KYr.forEach(t),UCo=r(N6e," (I-BERT model)"),N6e.forEach(t),JCo=i(H),mb=n(H,"LI",{});var j6e=s(mb);Zle=n(j6e,"STRONG",{});var ZYr=s(Zle);YCo=r(ZYr,"layoutlm"),ZYr.forEach(t),KCo=r(j6e," \u2014 "),BN=n(j6e,"A",{href:!0});var eKr=s(BN);ZCo=r(eKr,"LayoutLMForMaskedLM"),eKr.forEach(t),e3o=r(j6e," (LayoutLM model)"),j6e.forEach(t),o3o=i(H),fb=n(H,"LI",{});var D6e=s(fb);eie=n(D6e,"STRONG",{});var oKr=s(eie);r3o=r(oKr,"longformer"),oKr.forEach(t),t3o=r(D6e," \u2014 "),PN=n(D6e,"A",{href:!0});var rKr=s(PN);a3o=r(rKr,"LongformerForMaskedLM"),rKr.forEach(t),n3o=r(D6e," (Longformer model)"),D6e.forEach(t),s3o=i(H),gb=n(H,"LI",{});var G6e=s(gb);oie=n(G6e,"STRONG",{});var tKr=s(oie);l3o=r(tKr,"mbart"),tKr.forEach(t),i3o=r(G6e," \u2014 "),IN=n(G6e,"A",{href:!0});var aKr=s(IN);d3o=r(aKr,"MBartForConditionalGeneration"),aKr.forEach(t),c3o=r(G6e," (mBART model)"),G6e.forEach(t),m3o=i(H),hb=n(H,"LI",{});var O6e=s(hb);rie=n(O6e,"STRONG",{});var nKr=s(rie);f3o=r(nKr,"megatron-bert"),nKr.forEach(t),g3o=r(O6e," \u2014 "),qN=n(O6e,"A",{href:!0});var sKr=s(qN);h3o=r(sKr,"MegatronBertForMaskedLM"),sKr.forEach(t),u3o=r(O6e," (MegatronBert model)"),O6e.forEach(t),p3o=i(H),ub=n(H,"LI",{});var V6e=s(ub);tie=n(V6e,"STRONG",{});var lKr=s(tie);_3o=r(lKr,"mobilebert"),lKr.forEach(t),b3o=r(V6e," \u2014 "),NN=n(V6e,"A",{href:!0});var iKr=s(NN);F3o=r(iKr,"MobileBertForMaskedLM"),iKr.forEach(t),v3o=r(V6e," (MobileBERT model)"),V6e.forEach(t),T3o=i(H),pb=n(H,"LI",{});var X6e=s(pb);aie=n(X6e,"STRONG",{});var dKr=s(aie);M3o=r(dKr,"mpnet"),dKr.forEach(t),E3o=r(X6e," \u2014 "),jN=n(X6e,"A",{href:!0});var cKr=s(jN);C3o=r(cKr,"MPNetForMaskedLM"),cKr.forEach(t),w3o=r(X6e," (MPNet model)"),X6e.forEach(t),A3o=i(H),_b=n(H,"LI",{});var z6e=s(_b);nie=n(z6e,"STRONG",{});var mKr=s(nie);y3o=r(mKr,"nystromformer"),mKr.forEach(t),L3o=r(z6e," \u2014 "),DN=n(z6e,"A",{href:!0});var fKr=s(DN);x3o=r(fKr,"NystromformerForMaskedLM"),fKr.forEach(t),$3o=r(z6e," (Nystromformer model)"),z6e.forEach(t),k3o=i(H),bb=n(H,"LI",{});var Q6e=s(bb);sie=n(Q6e,"STRONG",{});var gKr=s(sie);S3o=r(gKr,"perceiver"),gKr.forEach(t),R3o=r(Q6e," \u2014 "),GN=n(Q6e,"A",{href:!0});var hKr=s(GN);B3o=r(hKr,"PerceiverForMaskedLM"),hKr.forEach(t),P3o=r(Q6e," (Perceiver model)"),Q6e.forEach(t),I3o=i(H),Fb=n(H,"LI",{});var W6e=s(Fb);lie=n(W6e,"STRONG",{});var uKr=s(lie);q3o=r(uKr,"qdqbert"),uKr.forEach(t),N3o=r(W6e," \u2014 "),ON=n(W6e,"A",{href:!0});var pKr=s(ON);j3o=r(pKr,"QDQBertForMaskedLM"),pKr.forEach(t),D3o=r(W6e," (QDQBert model)"),W6e.forEach(t),G3o=i(H),vb=n(H,"LI",{});var H6e=s(vb);iie=n(H6e,"STRONG",{});var _Kr=s(iie);O3o=r(_Kr,"reformer"),_Kr.forEach(t),V3o=r(H6e," \u2014 "),VN=n(H6e,"A",{href:!0});var bKr=s(VN);X3o=r(bKr,"ReformerForMaskedLM"),bKr.forEach(t),z3o=r(H6e," (Reformer model)"),H6e.forEach(t),Q3o=i(H),Tb=n(H,"LI",{});var U6e=s(Tb);die=n(U6e,"STRONG",{});var FKr=s(die);W3o=r(FKr,"rembert"),FKr.forEach(t),H3o=r(U6e," \u2014 "),XN=n(U6e,"A",{href:!0});var vKr=s(XN);U3o=r(vKr,"RemBertForMaskedLM"),vKr.forEach(t),J3o=r(U6e," (RemBERT model)"),U6e.forEach(t),Y3o=i(H),Mb=n(H,"LI",{});var J6e=s(Mb);cie=n(J6e,"STRONG",{});var TKr=s(cie);K3o=r(TKr,"roberta"),TKr.forEach(t),Z3o=r(J6e," \u2014 "),zN=n(J6e,"A",{href:!0});var MKr=s(zN);ewo=r(MKr,"RobertaForMaskedLM"),MKr.forEach(t),owo=r(J6e," (RoBERTa model)"),J6e.forEach(t),rwo=i(H),Eb=n(H,"LI",{});var Y6e=s(Eb);mie=n(Y6e,"STRONG",{});var EKr=s(mie);two=r(EKr,"roformer"),EKr.forEach(t),awo=r(Y6e," \u2014 "),QN=n(Y6e,"A",{href:!0});var CKr=s(QN);nwo=r(CKr,"RoFormerForMaskedLM"),CKr.forEach(t),swo=r(Y6e," (RoFormer model)"),Y6e.forEach(t),lwo=i(H),Cb=n(H,"LI",{});var K6e=s(Cb);fie=n(K6e,"STRONG",{});var wKr=s(fie);iwo=r(wKr,"squeezebert"),wKr.forEach(t),dwo=r(K6e," \u2014 "),WN=n(K6e,"A",{href:!0});var AKr=s(WN);cwo=r(AKr,"SqueezeBertForMaskedLM"),AKr.forEach(t),mwo=r(K6e," (SqueezeBERT model)"),K6e.forEach(t),fwo=i(H),wb=n(H,"LI",{});var Z6e=s(wb);gie=n(Z6e,"STRONG",{});var yKr=s(gie);gwo=r(yKr,"tapas"),yKr.forEach(t),hwo=r(Z6e," \u2014 "),HN=n(Z6e,"A",{href:!0});var LKr=s(HN);uwo=r(LKr,"TapasForMaskedLM"),LKr.forEach(t),pwo=r(Z6e," (TAPAS model)"),Z6e.forEach(t),_wo=i(H),Ab=n(H,"LI",{});var eye=s(Ab);hie=n(eye,"STRONG",{});var xKr=s(hie);bwo=r(xKr,"wav2vec2"),xKr.forEach(t),Fwo=r(eye," \u2014 "),uie=n(eye,"CODE",{});var $Kr=s(uie);vwo=r($Kr,"Wav2Vec2ForMaskedLM"),$Kr.forEach(t),Two=r(eye," (Wav2Vec2 model)"),eye.forEach(t),Mwo=i(H),yb=n(H,"LI",{});var oye=s(yb);pie=n(oye,"STRONG",{});var kKr=s(pie);Ewo=r(kKr,"xlm"),kKr.forEach(t),Cwo=r(oye," \u2014 "),UN=n(oye,"A",{href:!0});var SKr=s(UN);wwo=r(SKr,"XLMWithLMHeadModel"),SKr.forEach(t),Awo=r(oye," (XLM model)"),oye.forEach(t),ywo=i(H),Lb=n(H,"LI",{});var rye=s(Lb);_ie=n(rye,"STRONG",{});var RKr=s(_ie);Lwo=r(RKr,"xlm-roberta"),RKr.forEach(t),xwo=r(rye," \u2014 "),JN=n(rye,"A",{href:!0});var BKr=s(JN);$wo=r(BKr,"XLMRobertaForMaskedLM"),BKr.forEach(t),kwo=r(rye," (XLM-RoBERTa model)"),rye.forEach(t),Swo=i(H),xb=n(H,"LI",{});var tye=s(xb);bie=n(tye,"STRONG",{});var PKr=s(bie);Rwo=r(PKr,"xlm-roberta-xl"),PKr.forEach(t),Bwo=r(tye," \u2014 "),YN=n(tye,"A",{href:!0});var IKr=s(YN);Pwo=r(IKr,"XLMRobertaXLForMaskedLM"),IKr.forEach(t),Iwo=r(tye," (XLM-RoBERTa-XL model)"),tye.forEach(t),qwo=i(H),$b=n(H,"LI",{});var aye=s($b);Fie=n(aye,"STRONG",{});var qKr=s(Fie);Nwo=r(qKr,"yoso"),qKr.forEach(t),jwo=r(aye," \u2014 "),KN=n(aye,"A",{href:!0});var NKr=s(KN);Dwo=r(NKr,"YosoForMaskedLM"),NKr.forEach(t),Gwo=r(aye," (YOSO model)"),aye.forEach(t),H.forEach(t),Owo=i(Zt),kb=n(Zt,"P",{});var nye=s(kb);Vwo=r(nye,"The model is set in evaluation mode by default using "),vie=n(nye,"CODE",{});var jKr=s(vie);Xwo=r(jKr,"model.eval()"),jKr.forEach(t),zwo=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(nye,"CODE",{});var DKr=s(Tie);Qwo=r(DKr,"model.train()"),DKr.forEach(t),nye.forEach(t),Wwo=i(Zt),T(Sb.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),ABe=i(m),yi=n(m,"H2",{class:!0});var LIe=s(yi);Rb=n(LIe,"A",{id:!0,class:!0,href:!0});var GKr=s(Rb);Mie=n(GKr,"SPAN",{});var OKr=s(Mie);T(gy.$$.fragment,OKr),OKr.forEach(t),GKr.forEach(t),Hwo=i(LIe),Eie=n(LIe,"SPAN",{});var VKr=s(Eie);Uwo=r(VKr,"AutoModelForSeq2SeqLM"),VKr.forEach(t),LIe.forEach(t),yBe=i(m),So=n(m,"DIV",{class:!0});var js=s(So);T(hy.$$.fragment,js),Jwo=i(js),Li=n(js,"P",{});var FY=s(Li);Ywo=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZN=n(FY,"A",{href:!0});var XKr=s(ZN);Kwo=r(XKr,"from_pretrained()"),XKr.forEach(t),Zwo=r(FY," class method or the "),ej=n(FY,"A",{href:!0});var zKr=s(ej);eAo=r(zKr,"from_config()"),zKr.forEach(t),oAo=r(FY,` class
method.`),FY.forEach(t),rAo=i(js),uy=n(js,"P",{});var xIe=s(uy);tAo=r(xIe,"This class cannot be instantiated directly using "),Cie=n(xIe,"CODE",{});var QKr=s(Cie);aAo=r(QKr,"__init__()"),QKr.forEach(t),nAo=r(xIe," (throws an error)."),xIe.forEach(t),sAo=i(js),tt=n(js,"DIV",{class:!0});var BA=s(tt);T(py.$$.fragment,BA),lAo=i(BA),wie=n(BA,"P",{});var WKr=s(wie);iAo=r(WKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WKr.forEach(t),dAo=i(BA),xi=n(BA,"P",{});var vY=s(xi);cAo=r(vY,`Note:
Loading a model from its configuration file does `),Aie=n(vY,"STRONG",{});var HKr=s(Aie);mAo=r(HKr,"not"),HKr.forEach(t),fAo=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oj=n(vY,"A",{href:!0});var UKr=s(oj);gAo=r(UKr,"from_pretrained()"),UKr.forEach(t),hAo=r(vY," to load the model weights."),vY.forEach(t),uAo=i(BA),T(Bb.$$.fragment,BA),BA.forEach(t),pAo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(_y.$$.fragment,ea),_Ao=i(ea),yie=n(ea,"P",{});var JKr=s(yie);bAo=r(JKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JKr.forEach(t),FAo=i(ea),ya=n(ea,"P",{});var PA=s(ya);vAo=r(PA,"The model class to instantiate is selected based on the "),Lie=n(PA,"CODE",{});var YKr=s(Lie);TAo=r(YKr,"model_type"),YKr.forEach(t),MAo=r(PA,` property of the config object (either
passed as an argument or loaded from `),xie=n(PA,"CODE",{});var KKr=s(xie);EAo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),CAo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ie=n(PA,"CODE",{});var ZKr=s($ie);wAo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),AAo=r(PA,":"),PA.forEach(t),yAo=i(ea),he=n(ea,"UL",{});var pe=s(he);Pb=n(pe,"LI",{});var sye=s(Pb);kie=n(sye,"STRONG",{});var eZr=s(kie);LAo=r(eZr,"bart"),eZr.forEach(t),xAo=r(sye," \u2014 "),rj=n(sye,"A",{href:!0});var oZr=s(rj);$Ao=r(oZr,"BartForConditionalGeneration"),oZr.forEach(t),kAo=r(sye," (BART model)"),sye.forEach(t),SAo=i(pe),Ib=n(pe,"LI",{});var lye=s(Ib);Sie=n(lye,"STRONG",{});var rZr=s(Sie);RAo=r(rZr,"bigbird_pegasus"),rZr.forEach(t),BAo=r(lye," \u2014 "),tj=n(lye,"A",{href:!0});var tZr=s(tj);PAo=r(tZr,"BigBirdPegasusForConditionalGeneration"),tZr.forEach(t),IAo=r(lye," (BigBirdPegasus model)"),lye.forEach(t),qAo=i(pe),qb=n(pe,"LI",{});var iye=s(qb);Rie=n(iye,"STRONG",{});var aZr=s(Rie);NAo=r(aZr,"blenderbot"),aZr.forEach(t),jAo=r(iye," \u2014 "),aj=n(iye,"A",{href:!0});var nZr=s(aj);DAo=r(nZr,"BlenderbotForConditionalGeneration"),nZr.forEach(t),GAo=r(iye," (Blenderbot model)"),iye.forEach(t),OAo=i(pe),Nb=n(pe,"LI",{});var dye=s(Nb);Bie=n(dye,"STRONG",{});var sZr=s(Bie);VAo=r(sZr,"blenderbot-small"),sZr.forEach(t),XAo=r(dye," \u2014 "),nj=n(dye,"A",{href:!0});var lZr=s(nj);zAo=r(lZr,"BlenderbotSmallForConditionalGeneration"),lZr.forEach(t),QAo=r(dye," (BlenderbotSmall model)"),dye.forEach(t),WAo=i(pe),jb=n(pe,"LI",{});var cye=s(jb);Pie=n(cye,"STRONG",{});var iZr=s(Pie);HAo=r(iZr,"encoder-decoder"),iZr.forEach(t),UAo=r(cye," \u2014 "),sj=n(cye,"A",{href:!0});var dZr=s(sj);JAo=r(dZr,"EncoderDecoderModel"),dZr.forEach(t),YAo=r(cye," (Encoder decoder model)"),cye.forEach(t),KAo=i(pe),Db=n(pe,"LI",{});var mye=s(Db);Iie=n(mye,"STRONG",{});var cZr=s(Iie);ZAo=r(cZr,"fsmt"),cZr.forEach(t),e0o=r(mye," \u2014 "),lj=n(mye,"A",{href:!0});var mZr=s(lj);o0o=r(mZr,"FSMTForConditionalGeneration"),mZr.forEach(t),r0o=r(mye," (FairSeq Machine-Translation model)"),mye.forEach(t),t0o=i(pe),Gb=n(pe,"LI",{});var fye=s(Gb);qie=n(fye,"STRONG",{});var fZr=s(qie);a0o=r(fZr,"led"),fZr.forEach(t),n0o=r(fye," \u2014 "),ij=n(fye,"A",{href:!0});var gZr=s(ij);s0o=r(gZr,"LEDForConditionalGeneration"),gZr.forEach(t),l0o=r(fye," (LED model)"),fye.forEach(t),i0o=i(pe),Ob=n(pe,"LI",{});var gye=s(Ob);Nie=n(gye,"STRONG",{});var hZr=s(Nie);d0o=r(hZr,"m2m_100"),hZr.forEach(t),c0o=r(gye," \u2014 "),dj=n(gye,"A",{href:!0});var uZr=s(dj);m0o=r(uZr,"M2M100ForConditionalGeneration"),uZr.forEach(t),f0o=r(gye," (M2M100 model)"),gye.forEach(t),g0o=i(pe),Vb=n(pe,"LI",{});var hye=s(Vb);jie=n(hye,"STRONG",{});var pZr=s(jie);h0o=r(pZr,"marian"),pZr.forEach(t),u0o=r(hye," \u2014 "),cj=n(hye,"A",{href:!0});var _Zr=s(cj);p0o=r(_Zr,"MarianMTModel"),_Zr.forEach(t),_0o=r(hye," (Marian model)"),hye.forEach(t),b0o=i(pe),Xb=n(pe,"LI",{});var uye=s(Xb);Die=n(uye,"STRONG",{});var bZr=s(Die);F0o=r(bZr,"mbart"),bZr.forEach(t),v0o=r(uye," \u2014 "),mj=n(uye,"A",{href:!0});var FZr=s(mj);T0o=r(FZr,"MBartForConditionalGeneration"),FZr.forEach(t),M0o=r(uye," (mBART model)"),uye.forEach(t),E0o=i(pe),zb=n(pe,"LI",{});var pye=s(zb);Gie=n(pye,"STRONG",{});var vZr=s(Gie);C0o=r(vZr,"mt5"),vZr.forEach(t),w0o=r(pye," \u2014 "),fj=n(pye,"A",{href:!0});var TZr=s(fj);A0o=r(TZr,"MT5ForConditionalGeneration"),TZr.forEach(t),y0o=r(pye," (mT5 model)"),pye.forEach(t),L0o=i(pe),Qb=n(pe,"LI",{});var _ye=s(Qb);Oie=n(_ye,"STRONG",{});var MZr=s(Oie);x0o=r(MZr,"pegasus"),MZr.forEach(t),$0o=r(_ye," \u2014 "),gj=n(_ye,"A",{href:!0});var EZr=s(gj);k0o=r(EZr,"PegasusForConditionalGeneration"),EZr.forEach(t),S0o=r(_ye," (Pegasus model)"),_ye.forEach(t),R0o=i(pe),Wb=n(pe,"LI",{});var bye=s(Wb);Vie=n(bye,"STRONG",{});var CZr=s(Vie);B0o=r(CZr,"plbart"),CZr.forEach(t),P0o=r(bye," \u2014 "),hj=n(bye,"A",{href:!0});var wZr=s(hj);I0o=r(wZr,"PLBartForConditionalGeneration"),wZr.forEach(t),q0o=r(bye," (PLBart model)"),bye.forEach(t),N0o=i(pe),Hb=n(pe,"LI",{});var Fye=s(Hb);Xie=n(Fye,"STRONG",{});var AZr=s(Xie);j0o=r(AZr,"prophetnet"),AZr.forEach(t),D0o=r(Fye," \u2014 "),uj=n(Fye,"A",{href:!0});var yZr=s(uj);G0o=r(yZr,"ProphetNetForConditionalGeneration"),yZr.forEach(t),O0o=r(Fye," (ProphetNet model)"),Fye.forEach(t),V0o=i(pe),Ub=n(pe,"LI",{});var vye=s(Ub);zie=n(vye,"STRONG",{});var LZr=s(zie);X0o=r(LZr,"t5"),LZr.forEach(t),z0o=r(vye," \u2014 "),pj=n(vye,"A",{href:!0});var xZr=s(pj);Q0o=r(xZr,"T5ForConditionalGeneration"),xZr.forEach(t),W0o=r(vye," (T5 model)"),vye.forEach(t),H0o=i(pe),Jb=n(pe,"LI",{});var Tye=s(Jb);Qie=n(Tye,"STRONG",{});var $Zr=s(Qie);U0o=r($Zr,"tapex"),$Zr.forEach(t),J0o=r(Tye," \u2014 "),_j=n(Tye,"A",{href:!0});var kZr=s(_j);Y0o=r(kZr,"BartForConditionalGeneration"),kZr.forEach(t),K0o=r(Tye," (TAPEX model)"),Tye.forEach(t),Z0o=i(pe),Yb=n(pe,"LI",{});var Mye=s(Yb);Wie=n(Mye,"STRONG",{});var SZr=s(Wie);e6o=r(SZr,"xlm-prophetnet"),SZr.forEach(t),o6o=r(Mye," \u2014 "),bj=n(Mye,"A",{href:!0});var RZr=s(bj);r6o=r(RZr,"XLMProphetNetForConditionalGeneration"),RZr.forEach(t),t6o=r(Mye," (XLMProphetNet model)"),Mye.forEach(t),pe.forEach(t),a6o=i(ea),Kb=n(ea,"P",{});var Eye=s(Kb);n6o=r(Eye,"The model is set in evaluation mode by default using "),Hie=n(Eye,"CODE",{});var BZr=s(Hie);s6o=r(BZr,"model.eval()"),BZr.forEach(t),l6o=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uie=n(Eye,"CODE",{});var PZr=s(Uie);i6o=r(PZr,"model.train()"),PZr.forEach(t),Eye.forEach(t),d6o=i(ea),T(Zb.$$.fragment,ea),ea.forEach(t),js.forEach(t),LBe=i(m),$i=n(m,"H2",{class:!0});var $Ie=s($i);e2=n($Ie,"A",{id:!0,class:!0,href:!0});var IZr=s(e2);Jie=n(IZr,"SPAN",{});var qZr=s(Jie);T(by.$$.fragment,qZr),qZr.forEach(t),IZr.forEach(t),c6o=i($Ie),Yie=n($Ie,"SPAN",{});var NZr=s(Yie);m6o=r(NZr,"AutoModelForSequenceClassification"),NZr.forEach(t),$Ie.forEach(t),xBe=i(m),Ro=n(m,"DIV",{class:!0});var Ds=s(Ro);T(Fy.$$.fragment,Ds),f6o=i(Ds),ki=n(Ds,"P",{});var TY=s(ki);g6o=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Fj=n(TY,"A",{href:!0});var jZr=s(Fj);h6o=r(jZr,"from_pretrained()"),jZr.forEach(t),u6o=r(TY," class method or the "),vj=n(TY,"A",{href:!0});var DZr=s(vj);p6o=r(DZr,"from_config()"),DZr.forEach(t),_6o=r(TY,` class
method.`),TY.forEach(t),b6o=i(Ds),vy=n(Ds,"P",{});var kIe=s(vy);F6o=r(kIe,"This class cannot be instantiated directly using "),Kie=n(kIe,"CODE",{});var GZr=s(Kie);v6o=r(GZr,"__init__()"),GZr.forEach(t),T6o=r(kIe," (throws an error)."),kIe.forEach(t),M6o=i(Ds),at=n(Ds,"DIV",{class:!0});var IA=s(at);T(Ty.$$.fragment,IA),E6o=i(IA),Zie=n(IA,"P",{});var OZr=s(Zie);C6o=r(OZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OZr.forEach(t),w6o=i(IA),Si=n(IA,"P",{});var MY=s(Si);A6o=r(MY,`Note:
Loading a model from its configuration file does `),ede=n(MY,"STRONG",{});var VZr=s(ede);y6o=r(VZr,"not"),VZr.forEach(t),L6o=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tj=n(MY,"A",{href:!0});var XZr=s(Tj);x6o=r(XZr,"from_pretrained()"),XZr.forEach(t),$6o=r(MY," to load the model weights."),MY.forEach(t),k6o=i(IA),T(o2.$$.fragment,IA),IA.forEach(t),S6o=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(My.$$.fragment,oa),R6o=i(oa),ode=n(oa,"P",{});var zZr=s(ode);B6o=r(zZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zZr.forEach(t),P6o=i(oa),La=n(oa,"P",{});var qA=s(La);I6o=r(qA,"The model class to instantiate is selected based on the "),rde=n(qA,"CODE",{});var QZr=s(rde);q6o=r(QZr,"model_type"),QZr.forEach(t),N6o=r(qA,` property of the config object (either
passed as an argument or loaded from `),tde=n(qA,"CODE",{});var WZr=s(tde);j6o=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),D6o=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(qA,"CODE",{});var HZr=s(ade);G6o=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),O6o=r(qA,":"),qA.forEach(t),V6o=i(oa),q=n(oa,"UL",{});var N=s(q);r2=n(N,"LI",{});var Cye=s(r2);nde=n(Cye,"STRONG",{});var UZr=s(nde);X6o=r(UZr,"albert"),UZr.forEach(t),z6o=r(Cye," \u2014 "),Mj=n(Cye,"A",{href:!0});var JZr=s(Mj);Q6o=r(JZr,"AlbertForSequenceClassification"),JZr.forEach(t),W6o=r(Cye," (ALBERT model)"),Cye.forEach(t),H6o=i(N),t2=n(N,"LI",{});var wye=s(t2);sde=n(wye,"STRONG",{});var YZr=s(sde);U6o=r(YZr,"bart"),YZr.forEach(t),J6o=r(wye," \u2014 "),Ej=n(wye,"A",{href:!0});var KZr=s(Ej);Y6o=r(KZr,"BartForSequenceClassification"),KZr.forEach(t),K6o=r(wye," (BART model)"),wye.forEach(t),Z6o=i(N),a2=n(N,"LI",{});var Aye=s(a2);lde=n(Aye,"STRONG",{});var ZZr=s(lde);eyo=r(ZZr,"bert"),ZZr.forEach(t),oyo=r(Aye," \u2014 "),Cj=n(Aye,"A",{href:!0});var eet=s(Cj);ryo=r(eet,"BertForSequenceClassification"),eet.forEach(t),tyo=r(Aye," (BERT model)"),Aye.forEach(t),ayo=i(N),n2=n(N,"LI",{});var yye=s(n2);ide=n(yye,"STRONG",{});var oet=s(ide);nyo=r(oet,"big_bird"),oet.forEach(t),syo=r(yye," \u2014 "),wj=n(yye,"A",{href:!0});var ret=s(wj);lyo=r(ret,"BigBirdForSequenceClassification"),ret.forEach(t),iyo=r(yye," (BigBird model)"),yye.forEach(t),dyo=i(N),s2=n(N,"LI",{});var Lye=s(s2);dde=n(Lye,"STRONG",{});var tet=s(dde);cyo=r(tet,"bigbird_pegasus"),tet.forEach(t),myo=r(Lye," \u2014 "),Aj=n(Lye,"A",{href:!0});var aet=s(Aj);fyo=r(aet,"BigBirdPegasusForSequenceClassification"),aet.forEach(t),gyo=r(Lye," (BigBirdPegasus model)"),Lye.forEach(t),hyo=i(N),l2=n(N,"LI",{});var xye=s(l2);cde=n(xye,"STRONG",{});var net=s(cde);uyo=r(net,"camembert"),net.forEach(t),pyo=r(xye," \u2014 "),yj=n(xye,"A",{href:!0});var set=s(yj);_yo=r(set,"CamembertForSequenceClassification"),set.forEach(t),byo=r(xye," (CamemBERT model)"),xye.forEach(t),Fyo=i(N),i2=n(N,"LI",{});var $ye=s(i2);mde=n($ye,"STRONG",{});var iet=s(mde);vyo=r(iet,"canine"),iet.forEach(t),Tyo=r($ye," \u2014 "),Lj=n($ye,"A",{href:!0});var det=s(Lj);Myo=r(det,"CanineForSequenceClassification"),det.forEach(t),Eyo=r($ye," (Canine model)"),$ye.forEach(t),Cyo=i(N),d2=n(N,"LI",{});var kye=s(d2);fde=n(kye,"STRONG",{});var cet=s(fde);wyo=r(cet,"convbert"),cet.forEach(t),Ayo=r(kye," \u2014 "),xj=n(kye,"A",{href:!0});var met=s(xj);yyo=r(met,"ConvBertForSequenceClassification"),met.forEach(t),Lyo=r(kye," (ConvBERT model)"),kye.forEach(t),xyo=i(N),c2=n(N,"LI",{});var Sye=s(c2);gde=n(Sye,"STRONG",{});var fet=s(gde);$yo=r(fet,"ctrl"),fet.forEach(t),kyo=r(Sye," \u2014 "),$j=n(Sye,"A",{href:!0});var get=s($j);Syo=r(get,"CTRLForSequenceClassification"),get.forEach(t),Ryo=r(Sye," (CTRL model)"),Sye.forEach(t),Byo=i(N),m2=n(N,"LI",{});var Rye=s(m2);hde=n(Rye,"STRONG",{});var het=s(hde);Pyo=r(het,"data2vec-text"),het.forEach(t),Iyo=r(Rye," \u2014 "),kj=n(Rye,"A",{href:!0});var uet=s(kj);qyo=r(uet,"Data2VecTextForSequenceClassification"),uet.forEach(t),Nyo=r(Rye," (Data2VecText model)"),Rye.forEach(t),jyo=i(N),f2=n(N,"LI",{});var Bye=s(f2);ude=n(Bye,"STRONG",{});var pet=s(ude);Dyo=r(pet,"deberta"),pet.forEach(t),Gyo=r(Bye," \u2014 "),Sj=n(Bye,"A",{href:!0});var _et=s(Sj);Oyo=r(_et,"DebertaForSequenceClassification"),_et.forEach(t),Vyo=r(Bye," (DeBERTa model)"),Bye.forEach(t),Xyo=i(N),g2=n(N,"LI",{});var Pye=s(g2);pde=n(Pye,"STRONG",{});var bet=s(pde);zyo=r(bet,"deberta-v2"),bet.forEach(t),Qyo=r(Pye," \u2014 "),Rj=n(Pye,"A",{href:!0});var Fet=s(Rj);Wyo=r(Fet,"DebertaV2ForSequenceClassification"),Fet.forEach(t),Hyo=r(Pye," (DeBERTa-v2 model)"),Pye.forEach(t),Uyo=i(N),h2=n(N,"LI",{});var Iye=s(h2);_de=n(Iye,"STRONG",{});var vet=s(_de);Jyo=r(vet,"distilbert"),vet.forEach(t),Yyo=r(Iye," \u2014 "),Bj=n(Iye,"A",{href:!0});var Tet=s(Bj);Kyo=r(Tet,"DistilBertForSequenceClassification"),Tet.forEach(t),Zyo=r(Iye," (DistilBERT model)"),Iye.forEach(t),eLo=i(N),u2=n(N,"LI",{});var qye=s(u2);bde=n(qye,"STRONG",{});var Met=s(bde);oLo=r(Met,"electra"),Met.forEach(t),rLo=r(qye," \u2014 "),Pj=n(qye,"A",{href:!0});var Eet=s(Pj);tLo=r(Eet,"ElectraForSequenceClassification"),Eet.forEach(t),aLo=r(qye," (ELECTRA model)"),qye.forEach(t),nLo=i(N),p2=n(N,"LI",{});var Nye=s(p2);Fde=n(Nye,"STRONG",{});var Cet=s(Fde);sLo=r(Cet,"flaubert"),Cet.forEach(t),lLo=r(Nye," \u2014 "),Ij=n(Nye,"A",{href:!0});var wet=s(Ij);iLo=r(wet,"FlaubertForSequenceClassification"),wet.forEach(t),dLo=r(Nye," (FlauBERT model)"),Nye.forEach(t),cLo=i(N),_2=n(N,"LI",{});var jye=s(_2);vde=n(jye,"STRONG",{});var Aet=s(vde);mLo=r(Aet,"fnet"),Aet.forEach(t),fLo=r(jye," \u2014 "),qj=n(jye,"A",{href:!0});var yet=s(qj);gLo=r(yet,"FNetForSequenceClassification"),yet.forEach(t),hLo=r(jye," (FNet model)"),jye.forEach(t),uLo=i(N),b2=n(N,"LI",{});var Dye=s(b2);Tde=n(Dye,"STRONG",{});var Let=s(Tde);pLo=r(Let,"funnel"),Let.forEach(t),_Lo=r(Dye," \u2014 "),Nj=n(Dye,"A",{href:!0});var xet=s(Nj);bLo=r(xet,"FunnelForSequenceClassification"),xet.forEach(t),FLo=r(Dye," (Funnel Transformer model)"),Dye.forEach(t),vLo=i(N),F2=n(N,"LI",{});var Gye=s(F2);Mde=n(Gye,"STRONG",{});var $et=s(Mde);TLo=r($et,"gpt2"),$et.forEach(t),MLo=r(Gye," \u2014 "),jj=n(Gye,"A",{href:!0});var ket=s(jj);ELo=r(ket,"GPT2ForSequenceClassification"),ket.forEach(t),CLo=r(Gye," (OpenAI GPT-2 model)"),Gye.forEach(t),wLo=i(N),v2=n(N,"LI",{});var Oye=s(v2);Ede=n(Oye,"STRONG",{});var Set=s(Ede);ALo=r(Set,"gpt_neo"),Set.forEach(t),yLo=r(Oye," \u2014 "),Dj=n(Oye,"A",{href:!0});var Ret=s(Dj);LLo=r(Ret,"GPTNeoForSequenceClassification"),Ret.forEach(t),xLo=r(Oye," (GPT Neo model)"),Oye.forEach(t),$Lo=i(N),T2=n(N,"LI",{});var Vye=s(T2);Cde=n(Vye,"STRONG",{});var Bet=s(Cde);kLo=r(Bet,"gptj"),Bet.forEach(t),SLo=r(Vye," \u2014 "),Gj=n(Vye,"A",{href:!0});var Pet=s(Gj);RLo=r(Pet,"GPTJForSequenceClassification"),Pet.forEach(t),BLo=r(Vye," (GPT-J model)"),Vye.forEach(t),PLo=i(N),M2=n(N,"LI",{});var Xye=s(M2);wde=n(Xye,"STRONG",{});var Iet=s(wde);ILo=r(Iet,"ibert"),Iet.forEach(t),qLo=r(Xye," \u2014 "),Oj=n(Xye,"A",{href:!0});var qet=s(Oj);NLo=r(qet,"IBertForSequenceClassification"),qet.forEach(t),jLo=r(Xye," (I-BERT model)"),Xye.forEach(t),DLo=i(N),E2=n(N,"LI",{});var zye=s(E2);Ade=n(zye,"STRONG",{});var Net=s(Ade);GLo=r(Net,"layoutlm"),Net.forEach(t),OLo=r(zye," \u2014 "),Vj=n(zye,"A",{href:!0});var jet=s(Vj);VLo=r(jet,"LayoutLMForSequenceClassification"),jet.forEach(t),XLo=r(zye," (LayoutLM model)"),zye.forEach(t),zLo=i(N),C2=n(N,"LI",{});var Qye=s(C2);yde=n(Qye,"STRONG",{});var Det=s(yde);QLo=r(Det,"layoutlmv2"),Det.forEach(t),WLo=r(Qye," \u2014 "),Xj=n(Qye,"A",{href:!0});var Get=s(Xj);HLo=r(Get,"LayoutLMv2ForSequenceClassification"),Get.forEach(t),ULo=r(Qye," (LayoutLMv2 model)"),Qye.forEach(t),JLo=i(N),w2=n(N,"LI",{});var Wye=s(w2);Lde=n(Wye,"STRONG",{});var Oet=s(Lde);YLo=r(Oet,"led"),Oet.forEach(t),KLo=r(Wye," \u2014 "),zj=n(Wye,"A",{href:!0});var Vet=s(zj);ZLo=r(Vet,"LEDForSequenceClassification"),Vet.forEach(t),e8o=r(Wye," (LED model)"),Wye.forEach(t),o8o=i(N),A2=n(N,"LI",{});var Hye=s(A2);xde=n(Hye,"STRONG",{});var Xet=s(xde);r8o=r(Xet,"longformer"),Xet.forEach(t),t8o=r(Hye," \u2014 "),Qj=n(Hye,"A",{href:!0});var zet=s(Qj);a8o=r(zet,"LongformerForSequenceClassification"),zet.forEach(t),n8o=r(Hye," (Longformer model)"),Hye.forEach(t),s8o=i(N),y2=n(N,"LI",{});var Uye=s(y2);$de=n(Uye,"STRONG",{});var Qet=s($de);l8o=r(Qet,"mbart"),Qet.forEach(t),i8o=r(Uye," \u2014 "),Wj=n(Uye,"A",{href:!0});var Wet=s(Wj);d8o=r(Wet,"MBartForSequenceClassification"),Wet.forEach(t),c8o=r(Uye," (mBART model)"),Uye.forEach(t),m8o=i(N),L2=n(N,"LI",{});var Jye=s(L2);kde=n(Jye,"STRONG",{});var Het=s(kde);f8o=r(Het,"megatron-bert"),Het.forEach(t),g8o=r(Jye," \u2014 "),Hj=n(Jye,"A",{href:!0});var Uet=s(Hj);h8o=r(Uet,"MegatronBertForSequenceClassification"),Uet.forEach(t),u8o=r(Jye," (MegatronBert model)"),Jye.forEach(t),p8o=i(N),x2=n(N,"LI",{});var Yye=s(x2);Sde=n(Yye,"STRONG",{});var Jet=s(Sde);_8o=r(Jet,"mobilebert"),Jet.forEach(t),b8o=r(Yye," \u2014 "),Uj=n(Yye,"A",{href:!0});var Yet=s(Uj);F8o=r(Yet,"MobileBertForSequenceClassification"),Yet.forEach(t),v8o=r(Yye," (MobileBERT model)"),Yye.forEach(t),T8o=i(N),$2=n(N,"LI",{});var Kye=s($2);Rde=n(Kye,"STRONG",{});var Ket=s(Rde);M8o=r(Ket,"mpnet"),Ket.forEach(t),E8o=r(Kye," \u2014 "),Jj=n(Kye,"A",{href:!0});var Zet=s(Jj);C8o=r(Zet,"MPNetForSequenceClassification"),Zet.forEach(t),w8o=r(Kye," (MPNet model)"),Kye.forEach(t),A8o=i(N),k2=n(N,"LI",{});var Zye=s(k2);Bde=n(Zye,"STRONG",{});var eot=s(Bde);y8o=r(eot,"nystromformer"),eot.forEach(t),L8o=r(Zye," \u2014 "),Yj=n(Zye,"A",{href:!0});var oot=s(Yj);x8o=r(oot,"NystromformerForSequenceClassification"),oot.forEach(t),$8o=r(Zye," (Nystromformer model)"),Zye.forEach(t),k8o=i(N),S2=n(N,"LI",{});var eLe=s(S2);Pde=n(eLe,"STRONG",{});var rot=s(Pde);S8o=r(rot,"openai-gpt"),rot.forEach(t),R8o=r(eLe," \u2014 "),Kj=n(eLe,"A",{href:!0});var tot=s(Kj);B8o=r(tot,"OpenAIGPTForSequenceClassification"),tot.forEach(t),P8o=r(eLe," (OpenAI GPT model)"),eLe.forEach(t),I8o=i(N),R2=n(N,"LI",{});var oLe=s(R2);Ide=n(oLe,"STRONG",{});var aot=s(Ide);q8o=r(aot,"perceiver"),aot.forEach(t),N8o=r(oLe," \u2014 "),Zj=n(oLe,"A",{href:!0});var not=s(Zj);j8o=r(not,"PerceiverForSequenceClassification"),not.forEach(t),D8o=r(oLe," (Perceiver model)"),oLe.forEach(t),G8o=i(N),B2=n(N,"LI",{});var rLe=s(B2);qde=n(rLe,"STRONG",{});var sot=s(qde);O8o=r(sot,"plbart"),sot.forEach(t),V8o=r(rLe," \u2014 "),eD=n(rLe,"A",{href:!0});var lot=s(eD);X8o=r(lot,"PLBartForSequenceClassification"),lot.forEach(t),z8o=r(rLe," (PLBart model)"),rLe.forEach(t),Q8o=i(N),P2=n(N,"LI",{});var tLe=s(P2);Nde=n(tLe,"STRONG",{});var iot=s(Nde);W8o=r(iot,"qdqbert"),iot.forEach(t),H8o=r(tLe," \u2014 "),oD=n(tLe,"A",{href:!0});var dot=s(oD);U8o=r(dot,"QDQBertForSequenceClassification"),dot.forEach(t),J8o=r(tLe," (QDQBert model)"),tLe.forEach(t),Y8o=i(N),I2=n(N,"LI",{});var aLe=s(I2);jde=n(aLe,"STRONG",{});var cot=s(jde);K8o=r(cot,"reformer"),cot.forEach(t),Z8o=r(aLe," \u2014 "),rD=n(aLe,"A",{href:!0});var mot=s(rD);e7o=r(mot,"ReformerForSequenceClassification"),mot.forEach(t),o7o=r(aLe," (Reformer model)"),aLe.forEach(t),r7o=i(N),q2=n(N,"LI",{});var nLe=s(q2);Dde=n(nLe,"STRONG",{});var fot=s(Dde);t7o=r(fot,"rembert"),fot.forEach(t),a7o=r(nLe," \u2014 "),tD=n(nLe,"A",{href:!0});var got=s(tD);n7o=r(got,"RemBertForSequenceClassification"),got.forEach(t),s7o=r(nLe," (RemBERT model)"),nLe.forEach(t),l7o=i(N),N2=n(N,"LI",{});var sLe=s(N2);Gde=n(sLe,"STRONG",{});var hot=s(Gde);i7o=r(hot,"roberta"),hot.forEach(t),d7o=r(sLe," \u2014 "),aD=n(sLe,"A",{href:!0});var uot=s(aD);c7o=r(uot,"RobertaForSequenceClassification"),uot.forEach(t),m7o=r(sLe," (RoBERTa model)"),sLe.forEach(t),f7o=i(N),j2=n(N,"LI",{});var lLe=s(j2);Ode=n(lLe,"STRONG",{});var pot=s(Ode);g7o=r(pot,"roformer"),pot.forEach(t),h7o=r(lLe," \u2014 "),nD=n(lLe,"A",{href:!0});var _ot=s(nD);u7o=r(_ot,"RoFormerForSequenceClassification"),_ot.forEach(t),p7o=r(lLe," (RoFormer model)"),lLe.forEach(t),_7o=i(N),D2=n(N,"LI",{});var iLe=s(D2);Vde=n(iLe,"STRONG",{});var bot=s(Vde);b7o=r(bot,"squeezebert"),bot.forEach(t),F7o=r(iLe," \u2014 "),sD=n(iLe,"A",{href:!0});var Fot=s(sD);v7o=r(Fot,"SqueezeBertForSequenceClassification"),Fot.forEach(t),T7o=r(iLe," (SqueezeBERT model)"),iLe.forEach(t),M7o=i(N),G2=n(N,"LI",{});var dLe=s(G2);Xde=n(dLe,"STRONG",{});var vot=s(Xde);E7o=r(vot,"tapas"),vot.forEach(t),C7o=r(dLe," \u2014 "),lD=n(dLe,"A",{href:!0});var Tot=s(lD);w7o=r(Tot,"TapasForSequenceClassification"),Tot.forEach(t),A7o=r(dLe," (TAPAS model)"),dLe.forEach(t),y7o=i(N),O2=n(N,"LI",{});var cLe=s(O2);zde=n(cLe,"STRONG",{});var Mot=s(zde);L7o=r(Mot,"tapex"),Mot.forEach(t),x7o=r(cLe," \u2014 "),iD=n(cLe,"A",{href:!0});var Eot=s(iD);$7o=r(Eot,"BartForSequenceClassification"),Eot.forEach(t),k7o=r(cLe," (TAPEX model)"),cLe.forEach(t),S7o=i(N),V2=n(N,"LI",{});var mLe=s(V2);Qde=n(mLe,"STRONG",{});var Cot=s(Qde);R7o=r(Cot,"transfo-xl"),Cot.forEach(t),B7o=r(mLe," \u2014 "),dD=n(mLe,"A",{href:!0});var wot=s(dD);P7o=r(wot,"TransfoXLForSequenceClassification"),wot.forEach(t),I7o=r(mLe," (Transformer-XL model)"),mLe.forEach(t),q7o=i(N),X2=n(N,"LI",{});var fLe=s(X2);Wde=n(fLe,"STRONG",{});var Aot=s(Wde);N7o=r(Aot,"xlm"),Aot.forEach(t),j7o=r(fLe," \u2014 "),cD=n(fLe,"A",{href:!0});var yot=s(cD);D7o=r(yot,"XLMForSequenceClassification"),yot.forEach(t),G7o=r(fLe," (XLM model)"),fLe.forEach(t),O7o=i(N),z2=n(N,"LI",{});var gLe=s(z2);Hde=n(gLe,"STRONG",{});var Lot=s(Hde);V7o=r(Lot,"xlm-roberta"),Lot.forEach(t),X7o=r(gLe," \u2014 "),mD=n(gLe,"A",{href:!0});var xot=s(mD);z7o=r(xot,"XLMRobertaForSequenceClassification"),xot.forEach(t),Q7o=r(gLe," (XLM-RoBERTa model)"),gLe.forEach(t),W7o=i(N),Q2=n(N,"LI",{});var hLe=s(Q2);Ude=n(hLe,"STRONG",{});var $ot=s(Ude);H7o=r($ot,"xlm-roberta-xl"),$ot.forEach(t),U7o=r(hLe," \u2014 "),fD=n(hLe,"A",{href:!0});var kot=s(fD);J7o=r(kot,"XLMRobertaXLForSequenceClassification"),kot.forEach(t),Y7o=r(hLe," (XLM-RoBERTa-XL model)"),hLe.forEach(t),K7o=i(N),W2=n(N,"LI",{});var uLe=s(W2);Jde=n(uLe,"STRONG",{});var Sot=s(Jde);Z7o=r(Sot,"xlnet"),Sot.forEach(t),exo=r(uLe," \u2014 "),gD=n(uLe,"A",{href:!0});var Rot=s(gD);oxo=r(Rot,"XLNetForSequenceClassification"),Rot.forEach(t),rxo=r(uLe," (XLNet model)"),uLe.forEach(t),txo=i(N),H2=n(N,"LI",{});var pLe=s(H2);Yde=n(pLe,"STRONG",{});var Bot=s(Yde);axo=r(Bot,"yoso"),Bot.forEach(t),nxo=r(pLe," \u2014 "),hD=n(pLe,"A",{href:!0});var Pot=s(hD);sxo=r(Pot,"YosoForSequenceClassification"),Pot.forEach(t),lxo=r(pLe," (YOSO model)"),pLe.forEach(t),N.forEach(t),ixo=i(oa),U2=n(oa,"P",{});var _Le=s(U2);dxo=r(_Le,"The model is set in evaluation mode by default using "),Kde=n(_Le,"CODE",{});var Iot=s(Kde);cxo=r(Iot,"model.eval()"),Iot.forEach(t),mxo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zde=n(_Le,"CODE",{});var qot=s(Zde);fxo=r(qot,"model.train()"),qot.forEach(t),_Le.forEach(t),gxo=i(oa),T(J2.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),$Be=i(m),Ri=n(m,"H2",{class:!0});var SIe=s(Ri);Y2=n(SIe,"A",{id:!0,class:!0,href:!0});var Not=s(Y2);ece=n(Not,"SPAN",{});var jot=s(ece);T(Ey.$$.fragment,jot),jot.forEach(t),Not.forEach(t),hxo=i(SIe),oce=n(SIe,"SPAN",{});var Dot=s(oce);uxo=r(Dot,"AutoModelForMultipleChoice"),Dot.forEach(t),SIe.forEach(t),kBe=i(m),Bo=n(m,"DIV",{class:!0});var Gs=s(Bo);T(Cy.$$.fragment,Gs),pxo=i(Gs),Bi=n(Gs,"P",{});var EY=s(Bi);_xo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uD=n(EY,"A",{href:!0});var Got=s(uD);bxo=r(Got,"from_pretrained()"),Got.forEach(t),Fxo=r(EY," class method or the "),pD=n(EY,"A",{href:!0});var Oot=s(pD);vxo=r(Oot,"from_config()"),Oot.forEach(t),Txo=r(EY,` class
method.`),EY.forEach(t),Mxo=i(Gs),wy=n(Gs,"P",{});var RIe=s(wy);Exo=r(RIe,"This class cannot be instantiated directly using "),rce=n(RIe,"CODE",{});var Vot=s(rce);Cxo=r(Vot,"__init__()"),Vot.forEach(t),wxo=r(RIe," (throws an error)."),RIe.forEach(t),Axo=i(Gs),nt=n(Gs,"DIV",{class:!0});var NA=s(nt);T(Ay.$$.fragment,NA),yxo=i(NA),tce=n(NA,"P",{});var Xot=s(tce);Lxo=r(Xot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xot.forEach(t),xxo=i(NA),Pi=n(NA,"P",{});var CY=s(Pi);$xo=r(CY,`Note:
Loading a model from its configuration file does `),ace=n(CY,"STRONG",{});var zot=s(ace);kxo=r(zot,"not"),zot.forEach(t),Sxo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(CY,"A",{href:!0});var Qot=s(_D);Rxo=r(Qot,"from_pretrained()"),Qot.forEach(t),Bxo=r(CY," to load the model weights."),CY.forEach(t),Pxo=i(NA),T(K2.$$.fragment,NA),NA.forEach(t),Ixo=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(yy.$$.fragment,ra),qxo=i(ra),nce=n(ra,"P",{});var Wot=s(nce);Nxo=r(Wot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wot.forEach(t),jxo=i(ra),xa=n(ra,"P",{});var jA=s(xa);Dxo=r(jA,"The model class to instantiate is selected based on the "),sce=n(jA,"CODE",{});var Hot=s(sce);Gxo=r(Hot,"model_type"),Hot.forEach(t),Oxo=r(jA,` property of the config object (either
passed as an argument or loaded from `),lce=n(jA,"CODE",{});var Uot=s(lce);Vxo=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),Xxo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ice=n(jA,"CODE",{});var Jot=s(ice);zxo=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),Qxo=r(jA,":"),jA.forEach(t),Wxo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Z2=n(K,"LI",{});var bLe=s(Z2);dce=n(bLe,"STRONG",{});var Yot=s(dce);Hxo=r(Yot,"albert"),Yot.forEach(t),Uxo=r(bLe," \u2014 "),bD=n(bLe,"A",{href:!0});var Kot=s(bD);Jxo=r(Kot,"AlbertForMultipleChoice"),Kot.forEach(t),Yxo=r(bLe," (ALBERT model)"),bLe.forEach(t),Kxo=i(K),eF=n(K,"LI",{});var FLe=s(eF);cce=n(FLe,"STRONG",{});var Zot=s(cce);Zxo=r(Zot,"bert"),Zot.forEach(t),e9o=r(FLe," \u2014 "),FD=n(FLe,"A",{href:!0});var ert=s(FD);o9o=r(ert,"BertForMultipleChoice"),ert.forEach(t),r9o=r(FLe," (BERT model)"),FLe.forEach(t),t9o=i(K),oF=n(K,"LI",{});var vLe=s(oF);mce=n(vLe,"STRONG",{});var ort=s(mce);a9o=r(ort,"big_bird"),ort.forEach(t),n9o=r(vLe," \u2014 "),vD=n(vLe,"A",{href:!0});var rrt=s(vD);s9o=r(rrt,"BigBirdForMultipleChoice"),rrt.forEach(t),l9o=r(vLe," (BigBird model)"),vLe.forEach(t),i9o=i(K),rF=n(K,"LI",{});var TLe=s(rF);fce=n(TLe,"STRONG",{});var trt=s(fce);d9o=r(trt,"camembert"),trt.forEach(t),c9o=r(TLe," \u2014 "),TD=n(TLe,"A",{href:!0});var art=s(TD);m9o=r(art,"CamembertForMultipleChoice"),art.forEach(t),f9o=r(TLe," (CamemBERT model)"),TLe.forEach(t),g9o=i(K),tF=n(K,"LI",{});var MLe=s(tF);gce=n(MLe,"STRONG",{});var nrt=s(gce);h9o=r(nrt,"canine"),nrt.forEach(t),u9o=r(MLe," \u2014 "),MD=n(MLe,"A",{href:!0});var srt=s(MD);p9o=r(srt,"CanineForMultipleChoice"),srt.forEach(t),_9o=r(MLe," (Canine model)"),MLe.forEach(t),b9o=i(K),aF=n(K,"LI",{});var ELe=s(aF);hce=n(ELe,"STRONG",{});var lrt=s(hce);F9o=r(lrt,"convbert"),lrt.forEach(t),v9o=r(ELe," \u2014 "),ED=n(ELe,"A",{href:!0});var irt=s(ED);T9o=r(irt,"ConvBertForMultipleChoice"),irt.forEach(t),M9o=r(ELe," (ConvBERT model)"),ELe.forEach(t),E9o=i(K),nF=n(K,"LI",{});var CLe=s(nF);uce=n(CLe,"STRONG",{});var drt=s(uce);C9o=r(drt,"data2vec-text"),drt.forEach(t),w9o=r(CLe," \u2014 "),CD=n(CLe,"A",{href:!0});var crt=s(CD);A9o=r(crt,"Data2VecTextForMultipleChoice"),crt.forEach(t),y9o=r(CLe," (Data2VecText model)"),CLe.forEach(t),L9o=i(K),sF=n(K,"LI",{});var wLe=s(sF);pce=n(wLe,"STRONG",{});var mrt=s(pce);x9o=r(mrt,"distilbert"),mrt.forEach(t),$9o=r(wLe," \u2014 "),wD=n(wLe,"A",{href:!0});var frt=s(wD);k9o=r(frt,"DistilBertForMultipleChoice"),frt.forEach(t),S9o=r(wLe," (DistilBERT model)"),wLe.forEach(t),R9o=i(K),lF=n(K,"LI",{});var ALe=s(lF);_ce=n(ALe,"STRONG",{});var grt=s(_ce);B9o=r(grt,"electra"),grt.forEach(t),P9o=r(ALe," \u2014 "),AD=n(ALe,"A",{href:!0});var hrt=s(AD);I9o=r(hrt,"ElectraForMultipleChoice"),hrt.forEach(t),q9o=r(ALe," (ELECTRA model)"),ALe.forEach(t),N9o=i(K),iF=n(K,"LI",{});var yLe=s(iF);bce=n(yLe,"STRONG",{});var urt=s(bce);j9o=r(urt,"flaubert"),urt.forEach(t),D9o=r(yLe," \u2014 "),yD=n(yLe,"A",{href:!0});var prt=s(yD);G9o=r(prt,"FlaubertForMultipleChoice"),prt.forEach(t),O9o=r(yLe," (FlauBERT model)"),yLe.forEach(t),V9o=i(K),dF=n(K,"LI",{});var LLe=s(dF);Fce=n(LLe,"STRONG",{});var _rt=s(Fce);X9o=r(_rt,"fnet"),_rt.forEach(t),z9o=r(LLe," \u2014 "),LD=n(LLe,"A",{href:!0});var brt=s(LD);Q9o=r(brt,"FNetForMultipleChoice"),brt.forEach(t),W9o=r(LLe," (FNet model)"),LLe.forEach(t),H9o=i(K),cF=n(K,"LI",{});var xLe=s(cF);vce=n(xLe,"STRONG",{});var Frt=s(vce);U9o=r(Frt,"funnel"),Frt.forEach(t),J9o=r(xLe," \u2014 "),xD=n(xLe,"A",{href:!0});var vrt=s(xD);Y9o=r(vrt,"FunnelForMultipleChoice"),vrt.forEach(t),K9o=r(xLe," (Funnel Transformer model)"),xLe.forEach(t),Z9o=i(K),mF=n(K,"LI",{});var $Le=s(mF);Tce=n($Le,"STRONG",{});var Trt=s(Tce);e$o=r(Trt,"ibert"),Trt.forEach(t),o$o=r($Le," \u2014 "),$D=n($Le,"A",{href:!0});var Mrt=s($D);r$o=r(Mrt,"IBertForMultipleChoice"),Mrt.forEach(t),t$o=r($Le," (I-BERT model)"),$Le.forEach(t),a$o=i(K),fF=n(K,"LI",{});var kLe=s(fF);Mce=n(kLe,"STRONG",{});var Ert=s(Mce);n$o=r(Ert,"longformer"),Ert.forEach(t),s$o=r(kLe," \u2014 "),kD=n(kLe,"A",{href:!0});var Crt=s(kD);l$o=r(Crt,"LongformerForMultipleChoice"),Crt.forEach(t),i$o=r(kLe," (Longformer model)"),kLe.forEach(t),d$o=i(K),gF=n(K,"LI",{});var SLe=s(gF);Ece=n(SLe,"STRONG",{});var wrt=s(Ece);c$o=r(wrt,"megatron-bert"),wrt.forEach(t),m$o=r(SLe," \u2014 "),SD=n(SLe,"A",{href:!0});var Art=s(SD);f$o=r(Art,"MegatronBertForMultipleChoice"),Art.forEach(t),g$o=r(SLe," (MegatronBert model)"),SLe.forEach(t),h$o=i(K),hF=n(K,"LI",{});var RLe=s(hF);Cce=n(RLe,"STRONG",{});var yrt=s(Cce);u$o=r(yrt,"mobilebert"),yrt.forEach(t),p$o=r(RLe," \u2014 "),RD=n(RLe,"A",{href:!0});var Lrt=s(RD);_$o=r(Lrt,"MobileBertForMultipleChoice"),Lrt.forEach(t),b$o=r(RLe," (MobileBERT model)"),RLe.forEach(t),F$o=i(K),uF=n(K,"LI",{});var BLe=s(uF);wce=n(BLe,"STRONG",{});var xrt=s(wce);v$o=r(xrt,"mpnet"),xrt.forEach(t),T$o=r(BLe," \u2014 "),BD=n(BLe,"A",{href:!0});var $rt=s(BD);M$o=r($rt,"MPNetForMultipleChoice"),$rt.forEach(t),E$o=r(BLe," (MPNet model)"),BLe.forEach(t),C$o=i(K),pF=n(K,"LI",{});var PLe=s(pF);Ace=n(PLe,"STRONG",{});var krt=s(Ace);w$o=r(krt,"nystromformer"),krt.forEach(t),A$o=r(PLe," \u2014 "),PD=n(PLe,"A",{href:!0});var Srt=s(PD);y$o=r(Srt,"NystromformerForMultipleChoice"),Srt.forEach(t),L$o=r(PLe," (Nystromformer model)"),PLe.forEach(t),x$o=i(K),_F=n(K,"LI",{});var ILe=s(_F);yce=n(ILe,"STRONG",{});var Rrt=s(yce);$$o=r(Rrt,"qdqbert"),Rrt.forEach(t),k$o=r(ILe," \u2014 "),ID=n(ILe,"A",{href:!0});var Brt=s(ID);S$o=r(Brt,"QDQBertForMultipleChoice"),Brt.forEach(t),R$o=r(ILe," (QDQBert model)"),ILe.forEach(t),B$o=i(K),bF=n(K,"LI",{});var qLe=s(bF);Lce=n(qLe,"STRONG",{});var Prt=s(Lce);P$o=r(Prt,"rembert"),Prt.forEach(t),I$o=r(qLe," \u2014 "),qD=n(qLe,"A",{href:!0});var Irt=s(qD);q$o=r(Irt,"RemBertForMultipleChoice"),Irt.forEach(t),N$o=r(qLe," (RemBERT model)"),qLe.forEach(t),j$o=i(K),FF=n(K,"LI",{});var NLe=s(FF);xce=n(NLe,"STRONG",{});var qrt=s(xce);D$o=r(qrt,"roberta"),qrt.forEach(t),G$o=r(NLe," \u2014 "),ND=n(NLe,"A",{href:!0});var Nrt=s(ND);O$o=r(Nrt,"RobertaForMultipleChoice"),Nrt.forEach(t),V$o=r(NLe," (RoBERTa model)"),NLe.forEach(t),X$o=i(K),vF=n(K,"LI",{});var jLe=s(vF);$ce=n(jLe,"STRONG",{});var jrt=s($ce);z$o=r(jrt,"roformer"),jrt.forEach(t),Q$o=r(jLe," \u2014 "),jD=n(jLe,"A",{href:!0});var Drt=s(jD);W$o=r(Drt,"RoFormerForMultipleChoice"),Drt.forEach(t),H$o=r(jLe," (RoFormer model)"),jLe.forEach(t),U$o=i(K),TF=n(K,"LI",{});var DLe=s(TF);kce=n(DLe,"STRONG",{});var Grt=s(kce);J$o=r(Grt,"squeezebert"),Grt.forEach(t),Y$o=r(DLe," \u2014 "),DD=n(DLe,"A",{href:!0});var Ort=s(DD);K$o=r(Ort,"SqueezeBertForMultipleChoice"),Ort.forEach(t),Z$o=r(DLe," (SqueezeBERT model)"),DLe.forEach(t),eko=i(K),MF=n(K,"LI",{});var GLe=s(MF);Sce=n(GLe,"STRONG",{});var Vrt=s(Sce);oko=r(Vrt,"xlm"),Vrt.forEach(t),rko=r(GLe," \u2014 "),GD=n(GLe,"A",{href:!0});var Xrt=s(GD);tko=r(Xrt,"XLMForMultipleChoice"),Xrt.forEach(t),ako=r(GLe," (XLM model)"),GLe.forEach(t),nko=i(K),EF=n(K,"LI",{});var OLe=s(EF);Rce=n(OLe,"STRONG",{});var zrt=s(Rce);sko=r(zrt,"xlm-roberta"),zrt.forEach(t),lko=r(OLe," \u2014 "),OD=n(OLe,"A",{href:!0});var Qrt=s(OD);iko=r(Qrt,"XLMRobertaForMultipleChoice"),Qrt.forEach(t),dko=r(OLe," (XLM-RoBERTa model)"),OLe.forEach(t),cko=i(K),CF=n(K,"LI",{});var VLe=s(CF);Bce=n(VLe,"STRONG",{});var Wrt=s(Bce);mko=r(Wrt,"xlm-roberta-xl"),Wrt.forEach(t),fko=r(VLe," \u2014 "),VD=n(VLe,"A",{href:!0});var Hrt=s(VD);gko=r(Hrt,"XLMRobertaXLForMultipleChoice"),Hrt.forEach(t),hko=r(VLe," (XLM-RoBERTa-XL model)"),VLe.forEach(t),uko=i(K),wF=n(K,"LI",{});var XLe=s(wF);Pce=n(XLe,"STRONG",{});var Urt=s(Pce);pko=r(Urt,"xlnet"),Urt.forEach(t),_ko=r(XLe," \u2014 "),XD=n(XLe,"A",{href:!0});var Jrt=s(XD);bko=r(Jrt,"XLNetForMultipleChoice"),Jrt.forEach(t),Fko=r(XLe," (XLNet model)"),XLe.forEach(t),vko=i(K),AF=n(K,"LI",{});var zLe=s(AF);Ice=n(zLe,"STRONG",{});var Yrt=s(Ice);Tko=r(Yrt,"yoso"),Yrt.forEach(t),Mko=r(zLe," \u2014 "),zD=n(zLe,"A",{href:!0});var Krt=s(zD);Eko=r(Krt,"YosoForMultipleChoice"),Krt.forEach(t),Cko=r(zLe," (YOSO model)"),zLe.forEach(t),K.forEach(t),wko=i(ra),yF=n(ra,"P",{});var QLe=s(yF);Ako=r(QLe,"The model is set in evaluation mode by default using "),qce=n(QLe,"CODE",{});var Zrt=s(qce);yko=r(Zrt,"model.eval()"),Zrt.forEach(t),Lko=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(QLe,"CODE",{});var ett=s(Nce);xko=r(ett,"model.train()"),ett.forEach(t),QLe.forEach(t),$ko=i(ra),T(LF.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),SBe=i(m),Ii=n(m,"H2",{class:!0});var BIe=s(Ii);xF=n(BIe,"A",{id:!0,class:!0,href:!0});var ott=s(xF);jce=n(ott,"SPAN",{});var rtt=s(jce);T(Ly.$$.fragment,rtt),rtt.forEach(t),ott.forEach(t),kko=i(BIe),Dce=n(BIe,"SPAN",{});var ttt=s(Dce);Sko=r(ttt,"AutoModelForNextSentencePrediction"),ttt.forEach(t),BIe.forEach(t),RBe=i(m),Po=n(m,"DIV",{class:!0});var Os=s(Po);T(xy.$$.fragment,Os),Rko=i(Os),qi=n(Os,"P",{});var wY=s(qi);Bko=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QD=n(wY,"A",{href:!0});var att=s(QD);Pko=r(att,"from_pretrained()"),att.forEach(t),Iko=r(wY," class method or the "),WD=n(wY,"A",{href:!0});var ntt=s(WD);qko=r(ntt,"from_config()"),ntt.forEach(t),Nko=r(wY,` class
method.`),wY.forEach(t),jko=i(Os),$y=n(Os,"P",{});var PIe=s($y);Dko=r(PIe,"This class cannot be instantiated directly using "),Gce=n(PIe,"CODE",{});var stt=s(Gce);Gko=r(stt,"__init__()"),stt.forEach(t),Oko=r(PIe," (throws an error)."),PIe.forEach(t),Vko=i(Os),st=n(Os,"DIV",{class:!0});var DA=s(st);T(ky.$$.fragment,DA),Xko=i(DA),Oce=n(DA,"P",{});var ltt=s(Oce);zko=r(ltt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ltt.forEach(t),Qko=i(DA),Ni=n(DA,"P",{});var AY=s(Ni);Wko=r(AY,`Note:
Loading a model from its configuration file does `),Vce=n(AY,"STRONG",{});var itt=s(Vce);Hko=r(itt,"not"),itt.forEach(t),Uko=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(AY,"A",{href:!0});var dtt=s(HD);Jko=r(dtt,"from_pretrained()"),dtt.forEach(t),Yko=r(AY," to load the model weights."),AY.forEach(t),Kko=i(DA),T($F.$$.fragment,DA),DA.forEach(t),Zko=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(Sy.$$.fragment,ta),eSo=i(ta),Xce=n(ta,"P",{});var ctt=s(Xce);oSo=r(ctt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ctt.forEach(t),rSo=i(ta),$a=n(ta,"P",{});var GA=s($a);tSo=r(GA,"The model class to instantiate is selected based on the "),zce=n(GA,"CODE",{});var mtt=s(zce);aSo=r(mtt,"model_type"),mtt.forEach(t),nSo=r(GA,` property of the config object (either
passed as an argument or loaded from `),Qce=n(GA,"CODE",{});var ftt=s(Qce);sSo=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),lSo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(GA,"CODE",{});var gtt=s(Wce);iSo=r(gtt,"pretrained_model_name_or_path"),gtt.forEach(t),dSo=r(GA,":"),GA.forEach(t),cSo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);kF=n(Vs,"LI",{});var WLe=s(kF);Hce=n(WLe,"STRONG",{});var htt=s(Hce);mSo=r(htt,"bert"),htt.forEach(t),fSo=r(WLe," \u2014 "),UD=n(WLe,"A",{href:!0});var utt=s(UD);gSo=r(utt,"BertForNextSentencePrediction"),utt.forEach(t),hSo=r(WLe," (BERT model)"),WLe.forEach(t),uSo=i(Vs),SF=n(Vs,"LI",{});var HLe=s(SF);Uce=n(HLe,"STRONG",{});var ptt=s(Uce);pSo=r(ptt,"fnet"),ptt.forEach(t),_So=r(HLe," \u2014 "),JD=n(HLe,"A",{href:!0});var _tt=s(JD);bSo=r(_tt,"FNetForNextSentencePrediction"),_tt.forEach(t),FSo=r(HLe," (FNet model)"),HLe.forEach(t),vSo=i(Vs),RF=n(Vs,"LI",{});var ULe=s(RF);Jce=n(ULe,"STRONG",{});var btt=s(Jce);TSo=r(btt,"megatron-bert"),btt.forEach(t),MSo=r(ULe," \u2014 "),YD=n(ULe,"A",{href:!0});var Ftt=s(YD);ESo=r(Ftt,"MegatronBertForNextSentencePrediction"),Ftt.forEach(t),CSo=r(ULe," (MegatronBert model)"),ULe.forEach(t),wSo=i(Vs),BF=n(Vs,"LI",{});var JLe=s(BF);Yce=n(JLe,"STRONG",{});var vtt=s(Yce);ASo=r(vtt,"mobilebert"),vtt.forEach(t),ySo=r(JLe," \u2014 "),KD=n(JLe,"A",{href:!0});var Ttt=s(KD);LSo=r(Ttt,"MobileBertForNextSentencePrediction"),Ttt.forEach(t),xSo=r(JLe," (MobileBERT model)"),JLe.forEach(t),$So=i(Vs),PF=n(Vs,"LI",{});var YLe=s(PF);Kce=n(YLe,"STRONG",{});var Mtt=s(Kce);kSo=r(Mtt,"qdqbert"),Mtt.forEach(t),SSo=r(YLe," \u2014 "),ZD=n(YLe,"A",{href:!0});var Ett=s(ZD);RSo=r(Ett,"QDQBertForNextSentencePrediction"),Ett.forEach(t),BSo=r(YLe," (QDQBert model)"),YLe.forEach(t),Vs.forEach(t),PSo=i(ta),IF=n(ta,"P",{});var KLe=s(IF);ISo=r(KLe,"The model is set in evaluation mode by default using "),Zce=n(KLe,"CODE",{});var Ctt=s(Zce);qSo=r(Ctt,"model.eval()"),Ctt.forEach(t),NSo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(KLe,"CODE",{});var wtt=s(eme);jSo=r(wtt,"model.train()"),wtt.forEach(t),KLe.forEach(t),DSo=i(ta),T(qF.$$.fragment,ta),ta.forEach(t),Os.forEach(t),BBe=i(m),ji=n(m,"H2",{class:!0});var IIe=s(ji);NF=n(IIe,"A",{id:!0,class:!0,href:!0});var Att=s(NF);ome=n(Att,"SPAN",{});var ytt=s(ome);T(Ry.$$.fragment,ytt),ytt.forEach(t),Att.forEach(t),GSo=i(IIe),rme=n(IIe,"SPAN",{});var Ltt=s(rme);OSo=r(Ltt,"AutoModelForTokenClassification"),Ltt.forEach(t),IIe.forEach(t),PBe=i(m),Io=n(m,"DIV",{class:!0});var Xs=s(Io);T(By.$$.fragment,Xs),VSo=i(Xs),Di=n(Xs,"P",{});var yY=s(Di);XSo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eG=n(yY,"A",{href:!0});var xtt=s(eG);zSo=r(xtt,"from_pretrained()"),xtt.forEach(t),QSo=r(yY," class method or the "),oG=n(yY,"A",{href:!0});var $tt=s(oG);WSo=r($tt,"from_config()"),$tt.forEach(t),HSo=r(yY,` class
method.`),yY.forEach(t),USo=i(Xs),Py=n(Xs,"P",{});var qIe=s(Py);JSo=r(qIe,"This class cannot be instantiated directly using "),tme=n(qIe,"CODE",{});var ktt=s(tme);YSo=r(ktt,"__init__()"),ktt.forEach(t),KSo=r(qIe," (throws an error)."),qIe.forEach(t),ZSo=i(Xs),lt=n(Xs,"DIV",{class:!0});var OA=s(lt);T(Iy.$$.fragment,OA),eRo=i(OA),ame=n(OA,"P",{});var Stt=s(ame);oRo=r(Stt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Stt.forEach(t),rRo=i(OA),Gi=n(OA,"P",{});var LY=s(Gi);tRo=r(LY,`Note:
Loading a model from its configuration file does `),nme=n(LY,"STRONG",{});var Rtt=s(nme);aRo=r(Rtt,"not"),Rtt.forEach(t),nRo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rG=n(LY,"A",{href:!0});var Btt=s(rG);sRo=r(Btt,"from_pretrained()"),Btt.forEach(t),lRo=r(LY," to load the model weights."),LY.forEach(t),iRo=i(OA),T(jF.$$.fragment,OA),OA.forEach(t),dRo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(qy.$$.fragment,aa),cRo=i(aa),sme=n(aa,"P",{});var Ptt=s(sme);mRo=r(Ptt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ptt.forEach(t),fRo=i(aa),ka=n(aa,"P",{});var VA=s(ka);gRo=r(VA,"The model class to instantiate is selected based on the "),lme=n(VA,"CODE",{});var Itt=s(lme);hRo=r(Itt,"model_type"),Itt.forEach(t),uRo=r(VA,` property of the config object (either
passed as an argument or loaded from `),ime=n(VA,"CODE",{});var qtt=s(ime);pRo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),_Ro=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(VA,"CODE",{});var Ntt=s(dme);bRo=r(Ntt,"pretrained_model_name_or_path"),Ntt.forEach(t),FRo=r(VA,":"),VA.forEach(t),vRo=i(aa),U=n(aa,"UL",{});var J=s(U);DF=n(J,"LI",{});var ZLe=s(DF);cme=n(ZLe,"STRONG",{});var jtt=s(cme);TRo=r(jtt,"albert"),jtt.forEach(t),MRo=r(ZLe," \u2014 "),tG=n(ZLe,"A",{href:!0});var Dtt=s(tG);ERo=r(Dtt,"AlbertForTokenClassification"),Dtt.forEach(t),CRo=r(ZLe," (ALBERT model)"),ZLe.forEach(t),wRo=i(J),GF=n(J,"LI",{});var e8e=s(GF);mme=n(e8e,"STRONG",{});var Gtt=s(mme);ARo=r(Gtt,"bert"),Gtt.forEach(t),yRo=r(e8e," \u2014 "),aG=n(e8e,"A",{href:!0});var Ott=s(aG);LRo=r(Ott,"BertForTokenClassification"),Ott.forEach(t),xRo=r(e8e," (BERT model)"),e8e.forEach(t),$Ro=i(J),OF=n(J,"LI",{});var o8e=s(OF);fme=n(o8e,"STRONG",{});var Vtt=s(fme);kRo=r(Vtt,"big_bird"),Vtt.forEach(t),SRo=r(o8e," \u2014 "),nG=n(o8e,"A",{href:!0});var Xtt=s(nG);RRo=r(Xtt,"BigBirdForTokenClassification"),Xtt.forEach(t),BRo=r(o8e," (BigBird model)"),o8e.forEach(t),PRo=i(J),VF=n(J,"LI",{});var r8e=s(VF);gme=n(r8e,"STRONG",{});var ztt=s(gme);IRo=r(ztt,"camembert"),ztt.forEach(t),qRo=r(r8e," \u2014 "),sG=n(r8e,"A",{href:!0});var Qtt=s(sG);NRo=r(Qtt,"CamembertForTokenClassification"),Qtt.forEach(t),jRo=r(r8e," (CamemBERT model)"),r8e.forEach(t),DRo=i(J),XF=n(J,"LI",{});var t8e=s(XF);hme=n(t8e,"STRONG",{});var Wtt=s(hme);GRo=r(Wtt,"canine"),Wtt.forEach(t),ORo=r(t8e," \u2014 "),lG=n(t8e,"A",{href:!0});var Htt=s(lG);VRo=r(Htt,"CanineForTokenClassification"),Htt.forEach(t),XRo=r(t8e," (Canine model)"),t8e.forEach(t),zRo=i(J),zF=n(J,"LI",{});var a8e=s(zF);ume=n(a8e,"STRONG",{});var Utt=s(ume);QRo=r(Utt,"convbert"),Utt.forEach(t),WRo=r(a8e," \u2014 "),iG=n(a8e,"A",{href:!0});var Jtt=s(iG);HRo=r(Jtt,"ConvBertForTokenClassification"),Jtt.forEach(t),URo=r(a8e," (ConvBERT model)"),a8e.forEach(t),JRo=i(J),QF=n(J,"LI",{});var n8e=s(QF);pme=n(n8e,"STRONG",{});var Ytt=s(pme);YRo=r(Ytt,"data2vec-text"),Ytt.forEach(t),KRo=r(n8e," \u2014 "),dG=n(n8e,"A",{href:!0});var Ktt=s(dG);ZRo=r(Ktt,"Data2VecTextForTokenClassification"),Ktt.forEach(t),eBo=r(n8e," (Data2VecText model)"),n8e.forEach(t),oBo=i(J),WF=n(J,"LI",{});var s8e=s(WF);_me=n(s8e,"STRONG",{});var Ztt=s(_me);rBo=r(Ztt,"deberta"),Ztt.forEach(t),tBo=r(s8e," \u2014 "),cG=n(s8e,"A",{href:!0});var eat=s(cG);aBo=r(eat,"DebertaForTokenClassification"),eat.forEach(t),nBo=r(s8e," (DeBERTa model)"),s8e.forEach(t),sBo=i(J),HF=n(J,"LI",{});var l8e=s(HF);bme=n(l8e,"STRONG",{});var oat=s(bme);lBo=r(oat,"deberta-v2"),oat.forEach(t),iBo=r(l8e," \u2014 "),mG=n(l8e,"A",{href:!0});var rat=s(mG);dBo=r(rat,"DebertaV2ForTokenClassification"),rat.forEach(t),cBo=r(l8e," (DeBERTa-v2 model)"),l8e.forEach(t),mBo=i(J),UF=n(J,"LI",{});var i8e=s(UF);Fme=n(i8e,"STRONG",{});var tat=s(Fme);fBo=r(tat,"distilbert"),tat.forEach(t),gBo=r(i8e," \u2014 "),fG=n(i8e,"A",{href:!0});var aat=s(fG);hBo=r(aat,"DistilBertForTokenClassification"),aat.forEach(t),uBo=r(i8e," (DistilBERT model)"),i8e.forEach(t),pBo=i(J),JF=n(J,"LI",{});var d8e=s(JF);vme=n(d8e,"STRONG",{});var nat=s(vme);_Bo=r(nat,"electra"),nat.forEach(t),bBo=r(d8e," \u2014 "),gG=n(d8e,"A",{href:!0});var sat=s(gG);FBo=r(sat,"ElectraForTokenClassification"),sat.forEach(t),vBo=r(d8e," (ELECTRA model)"),d8e.forEach(t),TBo=i(J),YF=n(J,"LI",{});var c8e=s(YF);Tme=n(c8e,"STRONG",{});var lat=s(Tme);MBo=r(lat,"flaubert"),lat.forEach(t),EBo=r(c8e," \u2014 "),hG=n(c8e,"A",{href:!0});var iat=s(hG);CBo=r(iat,"FlaubertForTokenClassification"),iat.forEach(t),wBo=r(c8e," (FlauBERT model)"),c8e.forEach(t),ABo=i(J),KF=n(J,"LI",{});var m8e=s(KF);Mme=n(m8e,"STRONG",{});var dat=s(Mme);yBo=r(dat,"fnet"),dat.forEach(t),LBo=r(m8e," \u2014 "),uG=n(m8e,"A",{href:!0});var cat=s(uG);xBo=r(cat,"FNetForTokenClassification"),cat.forEach(t),$Bo=r(m8e," (FNet model)"),m8e.forEach(t),kBo=i(J),ZF=n(J,"LI",{});var f8e=s(ZF);Eme=n(f8e,"STRONG",{});var mat=s(Eme);SBo=r(mat,"funnel"),mat.forEach(t),RBo=r(f8e," \u2014 "),pG=n(f8e,"A",{href:!0});var fat=s(pG);BBo=r(fat,"FunnelForTokenClassification"),fat.forEach(t),PBo=r(f8e," (Funnel Transformer model)"),f8e.forEach(t),IBo=i(J),ev=n(J,"LI",{});var g8e=s(ev);Cme=n(g8e,"STRONG",{});var gat=s(Cme);qBo=r(gat,"gpt2"),gat.forEach(t),NBo=r(g8e," \u2014 "),_G=n(g8e,"A",{href:!0});var hat=s(_G);jBo=r(hat,"GPT2ForTokenClassification"),hat.forEach(t),DBo=r(g8e," (OpenAI GPT-2 model)"),g8e.forEach(t),GBo=i(J),ov=n(J,"LI",{});var h8e=s(ov);wme=n(h8e,"STRONG",{});var uat=s(wme);OBo=r(uat,"ibert"),uat.forEach(t),VBo=r(h8e," \u2014 "),bG=n(h8e,"A",{href:!0});var pat=s(bG);XBo=r(pat,"IBertForTokenClassification"),pat.forEach(t),zBo=r(h8e," (I-BERT model)"),h8e.forEach(t),QBo=i(J),rv=n(J,"LI",{});var u8e=s(rv);Ame=n(u8e,"STRONG",{});var _at=s(Ame);WBo=r(_at,"layoutlm"),_at.forEach(t),HBo=r(u8e," \u2014 "),FG=n(u8e,"A",{href:!0});var bat=s(FG);UBo=r(bat,"LayoutLMForTokenClassification"),bat.forEach(t),JBo=r(u8e," (LayoutLM model)"),u8e.forEach(t),YBo=i(J),tv=n(J,"LI",{});var p8e=s(tv);yme=n(p8e,"STRONG",{});var Fat=s(yme);KBo=r(Fat,"layoutlmv2"),Fat.forEach(t),ZBo=r(p8e," \u2014 "),vG=n(p8e,"A",{href:!0});var vat=s(vG);ePo=r(vat,"LayoutLMv2ForTokenClassification"),vat.forEach(t),oPo=r(p8e," (LayoutLMv2 model)"),p8e.forEach(t),rPo=i(J),av=n(J,"LI",{});var _8e=s(av);Lme=n(_8e,"STRONG",{});var Tat=s(Lme);tPo=r(Tat,"longformer"),Tat.forEach(t),aPo=r(_8e," \u2014 "),TG=n(_8e,"A",{href:!0});var Mat=s(TG);nPo=r(Mat,"LongformerForTokenClassification"),Mat.forEach(t),sPo=r(_8e," (Longformer model)"),_8e.forEach(t),lPo=i(J),nv=n(J,"LI",{});var b8e=s(nv);xme=n(b8e,"STRONG",{});var Eat=s(xme);iPo=r(Eat,"megatron-bert"),Eat.forEach(t),dPo=r(b8e," \u2014 "),MG=n(b8e,"A",{href:!0});var Cat=s(MG);cPo=r(Cat,"MegatronBertForTokenClassification"),Cat.forEach(t),mPo=r(b8e," (MegatronBert model)"),b8e.forEach(t),fPo=i(J),sv=n(J,"LI",{});var F8e=s(sv);$me=n(F8e,"STRONG",{});var wat=s($me);gPo=r(wat,"mobilebert"),wat.forEach(t),hPo=r(F8e," \u2014 "),EG=n(F8e,"A",{href:!0});var Aat=s(EG);uPo=r(Aat,"MobileBertForTokenClassification"),Aat.forEach(t),pPo=r(F8e," (MobileBERT model)"),F8e.forEach(t),_Po=i(J),lv=n(J,"LI",{});var v8e=s(lv);kme=n(v8e,"STRONG",{});var yat=s(kme);bPo=r(yat,"mpnet"),yat.forEach(t),FPo=r(v8e," \u2014 "),CG=n(v8e,"A",{href:!0});var Lat=s(CG);vPo=r(Lat,"MPNetForTokenClassification"),Lat.forEach(t),TPo=r(v8e," (MPNet model)"),v8e.forEach(t),MPo=i(J),iv=n(J,"LI",{});var T8e=s(iv);Sme=n(T8e,"STRONG",{});var xat=s(Sme);EPo=r(xat,"nystromformer"),xat.forEach(t),CPo=r(T8e," \u2014 "),wG=n(T8e,"A",{href:!0});var $at=s(wG);wPo=r($at,"NystromformerForTokenClassification"),$at.forEach(t),APo=r(T8e," (Nystromformer model)"),T8e.forEach(t),yPo=i(J),dv=n(J,"LI",{});var M8e=s(dv);Rme=n(M8e,"STRONG",{});var kat=s(Rme);LPo=r(kat,"qdqbert"),kat.forEach(t),xPo=r(M8e," \u2014 "),AG=n(M8e,"A",{href:!0});var Sat=s(AG);$Po=r(Sat,"QDQBertForTokenClassification"),Sat.forEach(t),kPo=r(M8e," (QDQBert model)"),M8e.forEach(t),SPo=i(J),cv=n(J,"LI",{});var E8e=s(cv);Bme=n(E8e,"STRONG",{});var Rat=s(Bme);RPo=r(Rat,"rembert"),Rat.forEach(t),BPo=r(E8e," \u2014 "),yG=n(E8e,"A",{href:!0});var Bat=s(yG);PPo=r(Bat,"RemBertForTokenClassification"),Bat.forEach(t),IPo=r(E8e," (RemBERT model)"),E8e.forEach(t),qPo=i(J),mv=n(J,"LI",{});var C8e=s(mv);Pme=n(C8e,"STRONG",{});var Pat=s(Pme);NPo=r(Pat,"roberta"),Pat.forEach(t),jPo=r(C8e," \u2014 "),LG=n(C8e,"A",{href:!0});var Iat=s(LG);DPo=r(Iat,"RobertaForTokenClassification"),Iat.forEach(t),GPo=r(C8e," (RoBERTa model)"),C8e.forEach(t),OPo=i(J),fv=n(J,"LI",{});var w8e=s(fv);Ime=n(w8e,"STRONG",{});var qat=s(Ime);VPo=r(qat,"roformer"),qat.forEach(t),XPo=r(w8e," \u2014 "),xG=n(w8e,"A",{href:!0});var Nat=s(xG);zPo=r(Nat,"RoFormerForTokenClassification"),Nat.forEach(t),QPo=r(w8e," (RoFormer model)"),w8e.forEach(t),WPo=i(J),gv=n(J,"LI",{});var A8e=s(gv);qme=n(A8e,"STRONG",{});var jat=s(qme);HPo=r(jat,"squeezebert"),jat.forEach(t),UPo=r(A8e," \u2014 "),$G=n(A8e,"A",{href:!0});var Dat=s($G);JPo=r(Dat,"SqueezeBertForTokenClassification"),Dat.forEach(t),YPo=r(A8e," (SqueezeBERT model)"),A8e.forEach(t),KPo=i(J),hv=n(J,"LI",{});var y8e=s(hv);Nme=n(y8e,"STRONG",{});var Gat=s(Nme);ZPo=r(Gat,"xlm"),Gat.forEach(t),eIo=r(y8e," \u2014 "),kG=n(y8e,"A",{href:!0});var Oat=s(kG);oIo=r(Oat,"XLMForTokenClassification"),Oat.forEach(t),rIo=r(y8e," (XLM model)"),y8e.forEach(t),tIo=i(J),uv=n(J,"LI",{});var L8e=s(uv);jme=n(L8e,"STRONG",{});var Vat=s(jme);aIo=r(Vat,"xlm-roberta"),Vat.forEach(t),nIo=r(L8e," \u2014 "),SG=n(L8e,"A",{href:!0});var Xat=s(SG);sIo=r(Xat,"XLMRobertaForTokenClassification"),Xat.forEach(t),lIo=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),iIo=i(J),pv=n(J,"LI",{});var x8e=s(pv);Dme=n(x8e,"STRONG",{});var zat=s(Dme);dIo=r(zat,"xlm-roberta-xl"),zat.forEach(t),cIo=r(x8e," \u2014 "),RG=n(x8e,"A",{href:!0});var Qat=s(RG);mIo=r(Qat,"XLMRobertaXLForTokenClassification"),Qat.forEach(t),fIo=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),gIo=i(J),_v=n(J,"LI",{});var $8e=s(_v);Gme=n($8e,"STRONG",{});var Wat=s(Gme);hIo=r(Wat,"xlnet"),Wat.forEach(t),uIo=r($8e," \u2014 "),BG=n($8e,"A",{href:!0});var Hat=s(BG);pIo=r(Hat,"XLNetForTokenClassification"),Hat.forEach(t),_Io=r($8e," (XLNet model)"),$8e.forEach(t),bIo=i(J),bv=n(J,"LI",{});var k8e=s(bv);Ome=n(k8e,"STRONG",{});var Uat=s(Ome);FIo=r(Uat,"yoso"),Uat.forEach(t),vIo=r(k8e," \u2014 "),PG=n(k8e,"A",{href:!0});var Jat=s(PG);TIo=r(Jat,"YosoForTokenClassification"),Jat.forEach(t),MIo=r(k8e," (YOSO model)"),k8e.forEach(t),J.forEach(t),EIo=i(aa),Fv=n(aa,"P",{});var S8e=s(Fv);CIo=r(S8e,"The model is set in evaluation mode by default using "),Vme=n(S8e,"CODE",{});var Yat=s(Vme);wIo=r(Yat,"model.eval()"),Yat.forEach(t),AIo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(S8e,"CODE",{});var Kat=s(Xme);yIo=r(Kat,"model.train()"),Kat.forEach(t),S8e.forEach(t),LIo=i(aa),T(vv.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),IBe=i(m),Oi=n(m,"H2",{class:!0});var NIe=s(Oi);Tv=n(NIe,"A",{id:!0,class:!0,href:!0});var Zat=s(Tv);zme=n(Zat,"SPAN",{});var ent=s(zme);T(Ny.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),xIo=i(NIe),Qme=n(NIe,"SPAN",{});var ont=s(Qme);$Io=r(ont,"AutoModelForQuestionAnswering"),ont.forEach(t),NIe.forEach(t),qBe=i(m),qo=n(m,"DIV",{class:!0});var zs=s(qo);T(jy.$$.fragment,zs),kIo=i(zs),Vi=n(zs,"P",{});var xY=s(Vi);SIo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IG=n(xY,"A",{href:!0});var rnt=s(IG);RIo=r(rnt,"from_pretrained()"),rnt.forEach(t),BIo=r(xY," class method or the "),qG=n(xY,"A",{href:!0});var tnt=s(qG);PIo=r(tnt,"from_config()"),tnt.forEach(t),IIo=r(xY,` class
method.`),xY.forEach(t),qIo=i(zs),Dy=n(zs,"P",{});var jIe=s(Dy);NIo=r(jIe,"This class cannot be instantiated directly using "),Wme=n(jIe,"CODE",{});var ant=s(Wme);jIo=r(ant,"__init__()"),ant.forEach(t),DIo=r(jIe," (throws an error)."),jIe.forEach(t),GIo=i(zs),it=n(zs,"DIV",{class:!0});var XA=s(it);T(Gy.$$.fragment,XA),OIo=i(XA),Hme=n(XA,"P",{});var nnt=s(Hme);VIo=r(nnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nnt.forEach(t),XIo=i(XA),Xi=n(XA,"P",{});var $Y=s(Xi);zIo=r($Y,`Note:
Loading a model from its configuration file does `),Ume=n($Y,"STRONG",{});var snt=s(Ume);QIo=r(snt,"not"),snt.forEach(t),WIo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n($Y,"A",{href:!0});var lnt=s(NG);HIo=r(lnt,"from_pretrained()"),lnt.forEach(t),UIo=r($Y," to load the model weights."),$Y.forEach(t),JIo=i(XA),T(Mv.$$.fragment,XA),XA.forEach(t),YIo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(Oy.$$.fragment,na),KIo=i(na),Jme=n(na,"P",{});var int=s(Jme);ZIo=r(int,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),int.forEach(t),eqo=i(na),Sa=n(na,"P",{});var zA=s(Sa);oqo=r(zA,"The model class to instantiate is selected based on the "),Yme=n(zA,"CODE",{});var dnt=s(Yme);rqo=r(dnt,"model_type"),dnt.forEach(t),tqo=r(zA,` property of the config object (either
passed as an argument or loaded from `),Kme=n(zA,"CODE",{});var cnt=s(Kme);aqo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),nqo=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(zA,"CODE",{});var mnt=s(Zme);sqo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),lqo=r(zA,":"),zA.forEach(t),iqo=i(na),O=n(na,"UL",{});var X=s(O);Ev=n(X,"LI",{});var R8e=s(Ev);efe=n(R8e,"STRONG",{});var fnt=s(efe);dqo=r(fnt,"albert"),fnt.forEach(t),cqo=r(R8e," \u2014 "),jG=n(R8e,"A",{href:!0});var gnt=s(jG);mqo=r(gnt,"AlbertForQuestionAnswering"),gnt.forEach(t),fqo=r(R8e," (ALBERT model)"),R8e.forEach(t),gqo=i(X),Cv=n(X,"LI",{});var B8e=s(Cv);ofe=n(B8e,"STRONG",{});var hnt=s(ofe);hqo=r(hnt,"bart"),hnt.forEach(t),uqo=r(B8e," \u2014 "),DG=n(B8e,"A",{href:!0});var unt=s(DG);pqo=r(unt,"BartForQuestionAnswering"),unt.forEach(t),_qo=r(B8e," (BART model)"),B8e.forEach(t),bqo=i(X),wv=n(X,"LI",{});var P8e=s(wv);rfe=n(P8e,"STRONG",{});var pnt=s(rfe);Fqo=r(pnt,"bert"),pnt.forEach(t),vqo=r(P8e," \u2014 "),GG=n(P8e,"A",{href:!0});var _nt=s(GG);Tqo=r(_nt,"BertForQuestionAnswering"),_nt.forEach(t),Mqo=r(P8e," (BERT model)"),P8e.forEach(t),Eqo=i(X),Av=n(X,"LI",{});var I8e=s(Av);tfe=n(I8e,"STRONG",{});var bnt=s(tfe);Cqo=r(bnt,"big_bird"),bnt.forEach(t),wqo=r(I8e," \u2014 "),OG=n(I8e,"A",{href:!0});var Fnt=s(OG);Aqo=r(Fnt,"BigBirdForQuestionAnswering"),Fnt.forEach(t),yqo=r(I8e," (BigBird model)"),I8e.forEach(t),Lqo=i(X),yv=n(X,"LI",{});var q8e=s(yv);afe=n(q8e,"STRONG",{});var vnt=s(afe);xqo=r(vnt,"bigbird_pegasus"),vnt.forEach(t),$qo=r(q8e," \u2014 "),VG=n(q8e,"A",{href:!0});var Tnt=s(VG);kqo=r(Tnt,"BigBirdPegasusForQuestionAnswering"),Tnt.forEach(t),Sqo=r(q8e," (BigBirdPegasus model)"),q8e.forEach(t),Rqo=i(X),Lv=n(X,"LI",{});var N8e=s(Lv);nfe=n(N8e,"STRONG",{});var Mnt=s(nfe);Bqo=r(Mnt,"camembert"),Mnt.forEach(t),Pqo=r(N8e," \u2014 "),XG=n(N8e,"A",{href:!0});var Ent=s(XG);Iqo=r(Ent,"CamembertForQuestionAnswering"),Ent.forEach(t),qqo=r(N8e," (CamemBERT model)"),N8e.forEach(t),Nqo=i(X),xv=n(X,"LI",{});var j8e=s(xv);sfe=n(j8e,"STRONG",{});var Cnt=s(sfe);jqo=r(Cnt,"canine"),Cnt.forEach(t),Dqo=r(j8e," \u2014 "),zG=n(j8e,"A",{href:!0});var wnt=s(zG);Gqo=r(wnt,"CanineForQuestionAnswering"),wnt.forEach(t),Oqo=r(j8e," (Canine model)"),j8e.forEach(t),Vqo=i(X),$v=n(X,"LI",{});var D8e=s($v);lfe=n(D8e,"STRONG",{});var Ant=s(lfe);Xqo=r(Ant,"convbert"),Ant.forEach(t),zqo=r(D8e," \u2014 "),QG=n(D8e,"A",{href:!0});var ynt=s(QG);Qqo=r(ynt,"ConvBertForQuestionAnswering"),ynt.forEach(t),Wqo=r(D8e," (ConvBERT model)"),D8e.forEach(t),Hqo=i(X),kv=n(X,"LI",{});var G8e=s(kv);ife=n(G8e,"STRONG",{});var Lnt=s(ife);Uqo=r(Lnt,"data2vec-text"),Lnt.forEach(t),Jqo=r(G8e," \u2014 "),WG=n(G8e,"A",{href:!0});var xnt=s(WG);Yqo=r(xnt,"Data2VecTextForQuestionAnswering"),xnt.forEach(t),Kqo=r(G8e," (Data2VecText model)"),G8e.forEach(t),Zqo=i(X),Sv=n(X,"LI",{});var O8e=s(Sv);dfe=n(O8e,"STRONG",{});var $nt=s(dfe);eNo=r($nt,"deberta"),$nt.forEach(t),oNo=r(O8e," \u2014 "),HG=n(O8e,"A",{href:!0});var knt=s(HG);rNo=r(knt,"DebertaForQuestionAnswering"),knt.forEach(t),tNo=r(O8e," (DeBERTa model)"),O8e.forEach(t),aNo=i(X),Rv=n(X,"LI",{});var V8e=s(Rv);cfe=n(V8e,"STRONG",{});var Snt=s(cfe);nNo=r(Snt,"deberta-v2"),Snt.forEach(t),sNo=r(V8e," \u2014 "),UG=n(V8e,"A",{href:!0});var Rnt=s(UG);lNo=r(Rnt,"DebertaV2ForQuestionAnswering"),Rnt.forEach(t),iNo=r(V8e," (DeBERTa-v2 model)"),V8e.forEach(t),dNo=i(X),Bv=n(X,"LI",{});var X8e=s(Bv);mfe=n(X8e,"STRONG",{});var Bnt=s(mfe);cNo=r(Bnt,"distilbert"),Bnt.forEach(t),mNo=r(X8e," \u2014 "),JG=n(X8e,"A",{href:!0});var Pnt=s(JG);fNo=r(Pnt,"DistilBertForQuestionAnswering"),Pnt.forEach(t),gNo=r(X8e," (DistilBERT model)"),X8e.forEach(t),hNo=i(X),Pv=n(X,"LI",{});var z8e=s(Pv);ffe=n(z8e,"STRONG",{});var Int=s(ffe);uNo=r(Int,"electra"),Int.forEach(t),pNo=r(z8e," \u2014 "),YG=n(z8e,"A",{href:!0});var qnt=s(YG);_No=r(qnt,"ElectraForQuestionAnswering"),qnt.forEach(t),bNo=r(z8e," (ELECTRA model)"),z8e.forEach(t),FNo=i(X),Iv=n(X,"LI",{});var Q8e=s(Iv);gfe=n(Q8e,"STRONG",{});var Nnt=s(gfe);vNo=r(Nnt,"flaubert"),Nnt.forEach(t),TNo=r(Q8e," \u2014 "),KG=n(Q8e,"A",{href:!0});var jnt=s(KG);MNo=r(jnt,"FlaubertForQuestionAnsweringSimple"),jnt.forEach(t),ENo=r(Q8e," (FlauBERT model)"),Q8e.forEach(t),CNo=i(X),qv=n(X,"LI",{});var W8e=s(qv);hfe=n(W8e,"STRONG",{});var Dnt=s(hfe);wNo=r(Dnt,"fnet"),Dnt.forEach(t),ANo=r(W8e," \u2014 "),ZG=n(W8e,"A",{href:!0});var Gnt=s(ZG);yNo=r(Gnt,"FNetForQuestionAnswering"),Gnt.forEach(t),LNo=r(W8e," (FNet model)"),W8e.forEach(t),xNo=i(X),Nv=n(X,"LI",{});var H8e=s(Nv);ufe=n(H8e,"STRONG",{});var Ont=s(ufe);$No=r(Ont,"funnel"),Ont.forEach(t),kNo=r(H8e," \u2014 "),eO=n(H8e,"A",{href:!0});var Vnt=s(eO);SNo=r(Vnt,"FunnelForQuestionAnswering"),Vnt.forEach(t),RNo=r(H8e," (Funnel Transformer model)"),H8e.forEach(t),BNo=i(X),jv=n(X,"LI",{});var U8e=s(jv);pfe=n(U8e,"STRONG",{});var Xnt=s(pfe);PNo=r(Xnt,"gptj"),Xnt.forEach(t),INo=r(U8e," \u2014 "),oO=n(U8e,"A",{href:!0});var znt=s(oO);qNo=r(znt,"GPTJForQuestionAnswering"),znt.forEach(t),NNo=r(U8e," (GPT-J model)"),U8e.forEach(t),jNo=i(X),Dv=n(X,"LI",{});var J8e=s(Dv);_fe=n(J8e,"STRONG",{});var Qnt=s(_fe);DNo=r(Qnt,"ibert"),Qnt.forEach(t),GNo=r(J8e," \u2014 "),rO=n(J8e,"A",{href:!0});var Wnt=s(rO);ONo=r(Wnt,"IBertForQuestionAnswering"),Wnt.forEach(t),VNo=r(J8e," (I-BERT model)"),J8e.forEach(t),XNo=i(X),Gv=n(X,"LI",{});var Y8e=s(Gv);bfe=n(Y8e,"STRONG",{});var Hnt=s(bfe);zNo=r(Hnt,"layoutlmv2"),Hnt.forEach(t),QNo=r(Y8e," \u2014 "),tO=n(Y8e,"A",{href:!0});var Unt=s(tO);WNo=r(Unt,"LayoutLMv2ForQuestionAnswering"),Unt.forEach(t),HNo=r(Y8e," (LayoutLMv2 model)"),Y8e.forEach(t),UNo=i(X),Ov=n(X,"LI",{});var K8e=s(Ov);Ffe=n(K8e,"STRONG",{});var Jnt=s(Ffe);JNo=r(Jnt,"led"),Jnt.forEach(t),YNo=r(K8e," \u2014 "),aO=n(K8e,"A",{href:!0});var Ynt=s(aO);KNo=r(Ynt,"LEDForQuestionAnswering"),Ynt.forEach(t),ZNo=r(K8e," (LED model)"),K8e.forEach(t),ejo=i(X),Vv=n(X,"LI",{});var Z8e=s(Vv);vfe=n(Z8e,"STRONG",{});var Knt=s(vfe);ojo=r(Knt,"longformer"),Knt.forEach(t),rjo=r(Z8e," \u2014 "),nO=n(Z8e,"A",{href:!0});var Znt=s(nO);tjo=r(Znt,"LongformerForQuestionAnswering"),Znt.forEach(t),ajo=r(Z8e," (Longformer model)"),Z8e.forEach(t),njo=i(X),Xv=n(X,"LI",{});var e7e=s(Xv);Tfe=n(e7e,"STRONG",{});var est=s(Tfe);sjo=r(est,"lxmert"),est.forEach(t),ljo=r(e7e," \u2014 "),sO=n(e7e,"A",{href:!0});var ost=s(sO);ijo=r(ost,"LxmertForQuestionAnswering"),ost.forEach(t),djo=r(e7e," (LXMERT model)"),e7e.forEach(t),cjo=i(X),zv=n(X,"LI",{});var o7e=s(zv);Mfe=n(o7e,"STRONG",{});var rst=s(Mfe);mjo=r(rst,"mbart"),rst.forEach(t),fjo=r(o7e," \u2014 "),lO=n(o7e,"A",{href:!0});var tst=s(lO);gjo=r(tst,"MBartForQuestionAnswering"),tst.forEach(t),hjo=r(o7e," (mBART model)"),o7e.forEach(t),ujo=i(X),Qv=n(X,"LI",{});var r7e=s(Qv);Efe=n(r7e,"STRONG",{});var ast=s(Efe);pjo=r(ast,"megatron-bert"),ast.forEach(t),_jo=r(r7e," \u2014 "),iO=n(r7e,"A",{href:!0});var nst=s(iO);bjo=r(nst,"MegatronBertForQuestionAnswering"),nst.forEach(t),Fjo=r(r7e," (MegatronBert model)"),r7e.forEach(t),vjo=i(X),Wv=n(X,"LI",{});var t7e=s(Wv);Cfe=n(t7e,"STRONG",{});var sst=s(Cfe);Tjo=r(sst,"mobilebert"),sst.forEach(t),Mjo=r(t7e," \u2014 "),dO=n(t7e,"A",{href:!0});var lst=s(dO);Ejo=r(lst,"MobileBertForQuestionAnswering"),lst.forEach(t),Cjo=r(t7e," (MobileBERT model)"),t7e.forEach(t),wjo=i(X),Hv=n(X,"LI",{});var a7e=s(Hv);wfe=n(a7e,"STRONG",{});var ist=s(wfe);Ajo=r(ist,"mpnet"),ist.forEach(t),yjo=r(a7e," \u2014 "),cO=n(a7e,"A",{href:!0});var dst=s(cO);Ljo=r(dst,"MPNetForQuestionAnswering"),dst.forEach(t),xjo=r(a7e," (MPNet model)"),a7e.forEach(t),$jo=i(X),Uv=n(X,"LI",{});var n7e=s(Uv);Afe=n(n7e,"STRONG",{});var cst=s(Afe);kjo=r(cst,"nystromformer"),cst.forEach(t),Sjo=r(n7e," \u2014 "),mO=n(n7e,"A",{href:!0});var mst=s(mO);Rjo=r(mst,"NystromformerForQuestionAnswering"),mst.forEach(t),Bjo=r(n7e," (Nystromformer model)"),n7e.forEach(t),Pjo=i(X),Jv=n(X,"LI",{});var s7e=s(Jv);yfe=n(s7e,"STRONG",{});var fst=s(yfe);Ijo=r(fst,"qdqbert"),fst.forEach(t),qjo=r(s7e," \u2014 "),fO=n(s7e,"A",{href:!0});var gst=s(fO);Njo=r(gst,"QDQBertForQuestionAnswering"),gst.forEach(t),jjo=r(s7e," (QDQBert model)"),s7e.forEach(t),Djo=i(X),Yv=n(X,"LI",{});var l7e=s(Yv);Lfe=n(l7e,"STRONG",{});var hst=s(Lfe);Gjo=r(hst,"reformer"),hst.forEach(t),Ojo=r(l7e," \u2014 "),gO=n(l7e,"A",{href:!0});var ust=s(gO);Vjo=r(ust,"ReformerForQuestionAnswering"),ust.forEach(t),Xjo=r(l7e," (Reformer model)"),l7e.forEach(t),zjo=i(X),Kv=n(X,"LI",{});var i7e=s(Kv);xfe=n(i7e,"STRONG",{});var pst=s(xfe);Qjo=r(pst,"rembert"),pst.forEach(t),Wjo=r(i7e," \u2014 "),hO=n(i7e,"A",{href:!0});var _st=s(hO);Hjo=r(_st,"RemBertForQuestionAnswering"),_st.forEach(t),Ujo=r(i7e," (RemBERT model)"),i7e.forEach(t),Jjo=i(X),Zv=n(X,"LI",{});var d7e=s(Zv);$fe=n(d7e,"STRONG",{});var bst=s($fe);Yjo=r(bst,"roberta"),bst.forEach(t),Kjo=r(d7e," \u2014 "),uO=n(d7e,"A",{href:!0});var Fst=s(uO);Zjo=r(Fst,"RobertaForQuestionAnswering"),Fst.forEach(t),eDo=r(d7e," (RoBERTa model)"),d7e.forEach(t),oDo=i(X),e1=n(X,"LI",{});var c7e=s(e1);kfe=n(c7e,"STRONG",{});var vst=s(kfe);rDo=r(vst,"roformer"),vst.forEach(t),tDo=r(c7e," \u2014 "),pO=n(c7e,"A",{href:!0});var Tst=s(pO);aDo=r(Tst,"RoFormerForQuestionAnswering"),Tst.forEach(t),nDo=r(c7e," (RoFormer model)"),c7e.forEach(t),sDo=i(X),o1=n(X,"LI",{});var m7e=s(o1);Sfe=n(m7e,"STRONG",{});var Mst=s(Sfe);lDo=r(Mst,"splinter"),Mst.forEach(t),iDo=r(m7e," \u2014 "),_O=n(m7e,"A",{href:!0});var Est=s(_O);dDo=r(Est,"SplinterForQuestionAnswering"),Est.forEach(t),cDo=r(m7e," (Splinter model)"),m7e.forEach(t),mDo=i(X),r1=n(X,"LI",{});var f7e=s(r1);Rfe=n(f7e,"STRONG",{});var Cst=s(Rfe);fDo=r(Cst,"squeezebert"),Cst.forEach(t),gDo=r(f7e," \u2014 "),bO=n(f7e,"A",{href:!0});var wst=s(bO);hDo=r(wst,"SqueezeBertForQuestionAnswering"),wst.forEach(t),uDo=r(f7e," (SqueezeBERT model)"),f7e.forEach(t),pDo=i(X),t1=n(X,"LI",{});var g7e=s(t1);Bfe=n(g7e,"STRONG",{});var Ast=s(Bfe);_Do=r(Ast,"xlm"),Ast.forEach(t),bDo=r(g7e," \u2014 "),FO=n(g7e,"A",{href:!0});var yst=s(FO);FDo=r(yst,"XLMForQuestionAnsweringSimple"),yst.forEach(t),vDo=r(g7e," (XLM model)"),g7e.forEach(t),TDo=i(X),a1=n(X,"LI",{});var h7e=s(a1);Pfe=n(h7e,"STRONG",{});var Lst=s(Pfe);MDo=r(Lst,"xlm-roberta"),Lst.forEach(t),EDo=r(h7e," \u2014 "),vO=n(h7e,"A",{href:!0});var xst=s(vO);CDo=r(xst,"XLMRobertaForQuestionAnswering"),xst.forEach(t),wDo=r(h7e," (XLM-RoBERTa model)"),h7e.forEach(t),ADo=i(X),n1=n(X,"LI",{});var u7e=s(n1);Ife=n(u7e,"STRONG",{});var $st=s(Ife);yDo=r($st,"xlm-roberta-xl"),$st.forEach(t),LDo=r(u7e," \u2014 "),TO=n(u7e,"A",{href:!0});var kst=s(TO);xDo=r(kst,"XLMRobertaXLForQuestionAnswering"),kst.forEach(t),$Do=r(u7e," (XLM-RoBERTa-XL model)"),u7e.forEach(t),kDo=i(X),s1=n(X,"LI",{});var p7e=s(s1);qfe=n(p7e,"STRONG",{});var Sst=s(qfe);SDo=r(Sst,"xlnet"),Sst.forEach(t),RDo=r(p7e," \u2014 "),MO=n(p7e,"A",{href:!0});var Rst=s(MO);BDo=r(Rst,"XLNetForQuestionAnsweringSimple"),Rst.forEach(t),PDo=r(p7e," (XLNet model)"),p7e.forEach(t),IDo=i(X),l1=n(X,"LI",{});var _7e=s(l1);Nfe=n(_7e,"STRONG",{});var Bst=s(Nfe);qDo=r(Bst,"yoso"),Bst.forEach(t),NDo=r(_7e," \u2014 "),EO=n(_7e,"A",{href:!0});var Pst=s(EO);jDo=r(Pst,"YosoForQuestionAnswering"),Pst.forEach(t),DDo=r(_7e," (YOSO model)"),_7e.forEach(t),X.forEach(t),GDo=i(na),i1=n(na,"P",{});var b7e=s(i1);ODo=r(b7e,"The model is set in evaluation mode by default using "),jfe=n(b7e,"CODE",{});var Ist=s(jfe);VDo=r(Ist,"model.eval()"),Ist.forEach(t),XDo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dfe=n(b7e,"CODE",{});var qst=s(Dfe);zDo=r(qst,"model.train()"),qst.forEach(t),b7e.forEach(t),QDo=i(na),T(d1.$$.fragment,na),na.forEach(t),zs.forEach(t),NBe=i(m),zi=n(m,"H2",{class:!0});var DIe=s(zi);c1=n(DIe,"A",{id:!0,class:!0,href:!0});var Nst=s(c1);Gfe=n(Nst,"SPAN",{});var jst=s(Gfe);T(Vy.$$.fragment,jst),jst.forEach(t),Nst.forEach(t),WDo=i(DIe),Ofe=n(DIe,"SPAN",{});var Dst=s(Ofe);HDo=r(Dst,"AutoModelForTableQuestionAnswering"),Dst.forEach(t),DIe.forEach(t),jBe=i(m),No=n(m,"DIV",{class:!0});var Qs=s(No);T(Xy.$$.fragment,Qs),UDo=i(Qs),Qi=n(Qs,"P",{});var kY=s(Qi);JDo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CO=n(kY,"A",{href:!0});var Gst=s(CO);YDo=r(Gst,"from_pretrained()"),Gst.forEach(t),KDo=r(kY," class method or the "),wO=n(kY,"A",{href:!0});var Ost=s(wO);ZDo=r(Ost,"from_config()"),Ost.forEach(t),eGo=r(kY,` class
method.`),kY.forEach(t),oGo=i(Qs),zy=n(Qs,"P",{});var GIe=s(zy);rGo=r(GIe,"This class cannot be instantiated directly using "),Vfe=n(GIe,"CODE",{});var Vst=s(Vfe);tGo=r(Vst,"__init__()"),Vst.forEach(t),aGo=r(GIe," (throws an error)."),GIe.forEach(t),nGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var QA=s(dt);T(Qy.$$.fragment,QA),sGo=i(QA),Xfe=n(QA,"P",{});var Xst=s(Xfe);lGo=r(Xst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xst.forEach(t),iGo=i(QA),Wi=n(QA,"P",{});var SY=s(Wi);dGo=r(SY,`Note:
Loading a model from its configuration file does `),zfe=n(SY,"STRONG",{});var zst=s(zfe);cGo=r(zst,"not"),zst.forEach(t),mGo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(SY,"A",{href:!0});var Qst=s(AO);fGo=r(Qst,"from_pretrained()"),Qst.forEach(t),gGo=r(SY," to load the model weights."),SY.forEach(t),hGo=i(QA),T(m1.$$.fragment,QA),QA.forEach(t),uGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(Wy.$$.fragment,sa),pGo=i(sa),Qfe=n(sa,"P",{});var Wst=s(Qfe);_Go=r(Wst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wst.forEach(t),bGo=i(sa),Ra=n(sa,"P",{});var WA=s(Ra);FGo=r(WA,"The model class to instantiate is selected based on the "),Wfe=n(WA,"CODE",{});var Hst=s(Wfe);vGo=r(Hst,"model_type"),Hst.forEach(t),TGo=r(WA,` property of the config object (either
passed as an argument or loaded from `),Hfe=n(WA,"CODE",{});var Ust=s(Hfe);MGo=r(Ust,"pretrained_model_name_or_path"),Ust.forEach(t),EGo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ufe=n(WA,"CODE",{});var Jst=s(Ufe);CGo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),wGo=r(WA,":"),WA.forEach(t),AGo=i(sa),Jfe=n(sa,"UL",{});var Yst=s(Jfe);f1=n(Yst,"LI",{});var F7e=s(f1);Yfe=n(F7e,"STRONG",{});var Kst=s(Yfe);yGo=r(Kst,"tapas"),Kst.forEach(t),LGo=r(F7e," \u2014 "),yO=n(F7e,"A",{href:!0});var Zst=s(yO);xGo=r(Zst,"TapasForQuestionAnswering"),Zst.forEach(t),$Go=r(F7e," (TAPAS model)"),F7e.forEach(t),Yst.forEach(t),kGo=i(sa),g1=n(sa,"P",{});var v7e=s(g1);SGo=r(v7e,"The model is set in evaluation mode by default using "),Kfe=n(v7e,"CODE",{});var elt=s(Kfe);RGo=r(elt,"model.eval()"),elt.forEach(t),BGo=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(v7e,"CODE",{});var olt=s(Zfe);PGo=r(olt,"model.train()"),olt.forEach(t),v7e.forEach(t),IGo=i(sa),T(h1.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),DBe=i(m),Hi=n(m,"H2",{class:!0});var OIe=s(Hi);u1=n(OIe,"A",{id:!0,class:!0,href:!0});var rlt=s(u1);ege=n(rlt,"SPAN",{});var tlt=s(ege);T(Hy.$$.fragment,tlt),tlt.forEach(t),rlt.forEach(t),qGo=i(OIe),oge=n(OIe,"SPAN",{});var alt=s(oge);NGo=r(alt,"AutoModelForImageClassification"),alt.forEach(t),OIe.forEach(t),GBe=i(m),jo=n(m,"DIV",{class:!0});var Ws=s(jo);T(Uy.$$.fragment,Ws),jGo=i(Ws),Ui=n(Ws,"P",{});var RY=s(Ui);DGo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LO=n(RY,"A",{href:!0});var nlt=s(LO);GGo=r(nlt,"from_pretrained()"),nlt.forEach(t),OGo=r(RY," class method or the "),xO=n(RY,"A",{href:!0});var slt=s(xO);VGo=r(slt,"from_config()"),slt.forEach(t),XGo=r(RY,` class
method.`),RY.forEach(t),zGo=i(Ws),Jy=n(Ws,"P",{});var VIe=s(Jy);QGo=r(VIe,"This class cannot be instantiated directly using "),rge=n(VIe,"CODE",{});var llt=s(rge);WGo=r(llt,"__init__()"),llt.forEach(t),HGo=r(VIe," (throws an error)."),VIe.forEach(t),UGo=i(Ws),ct=n(Ws,"DIV",{class:!0});var HA=s(ct);T(Yy.$$.fragment,HA),JGo=i(HA),tge=n(HA,"P",{});var ilt=s(tge);YGo=r(ilt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ilt.forEach(t),KGo=i(HA),Ji=n(HA,"P",{});var BY=s(Ji);ZGo=r(BY,`Note:
Loading a model from its configuration file does `),age=n(BY,"STRONG",{});var dlt=s(age);eOo=r(dlt,"not"),dlt.forEach(t),oOo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(BY,"A",{href:!0});var clt=s($O);rOo=r(clt,"from_pretrained()"),clt.forEach(t),tOo=r(BY," to load the model weights."),BY.forEach(t),aOo=i(HA),T(p1.$$.fragment,HA),HA.forEach(t),nOo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(Ky.$$.fragment,la),sOo=i(la),nge=n(la,"P",{});var mlt=s(nge);lOo=r(mlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mlt.forEach(t),iOo=i(la),Ba=n(la,"P",{});var UA=s(Ba);dOo=r(UA,"The model class to instantiate is selected based on the "),sge=n(UA,"CODE",{});var flt=s(sge);cOo=r(flt,"model_type"),flt.forEach(t),mOo=r(UA,` property of the config object (either
passed as an argument or loaded from `),lge=n(UA,"CODE",{});var glt=s(lge);fOo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),gOo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ige=n(UA,"CODE",{});var hlt=s(ige);hOo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),uOo=r(UA,":"),UA.forEach(t),pOo=i(la),Fe=n(la,"UL",{});var Ee=s(Fe);_1=n(Ee,"LI",{});var T7e=s(_1);dge=n(T7e,"STRONG",{});var ult=s(dge);_Oo=r(ult,"beit"),ult.forEach(t),bOo=r(T7e," \u2014 "),kO=n(T7e,"A",{href:!0});var plt=s(kO);FOo=r(plt,"BeitForImageClassification"),plt.forEach(t),vOo=r(T7e," (BEiT model)"),T7e.forEach(t),TOo=i(Ee),b1=n(Ee,"LI",{});var M7e=s(b1);cge=n(M7e,"STRONG",{});var _lt=s(cge);MOo=r(_lt,"convnext"),_lt.forEach(t),EOo=r(M7e," \u2014 "),SO=n(M7e,"A",{href:!0});var blt=s(SO);COo=r(blt,"ConvNextForImageClassification"),blt.forEach(t),wOo=r(M7e," (ConvNext model)"),M7e.forEach(t),AOo=i(Ee),F1=n(Ee,"LI",{});var E7e=s(F1);mge=n(E7e,"STRONG",{});var Flt=s(mge);yOo=r(Flt,"data2vec-vision"),Flt.forEach(t),LOo=r(E7e," \u2014 "),RO=n(E7e,"A",{href:!0});var vlt=s(RO);xOo=r(vlt,"Data2VecVisionForImageClassification"),vlt.forEach(t),$Oo=r(E7e," (Data2VecVision model)"),E7e.forEach(t),kOo=i(Ee),xs=n(Ee,"LI",{});var k9=s(xs);fge=n(k9,"STRONG",{});var Tlt=s(fge);SOo=r(Tlt,"deit"),Tlt.forEach(t),ROo=r(k9," \u2014 "),BO=n(k9,"A",{href:!0});var Mlt=s(BO);BOo=r(Mlt,"DeiTForImageClassification"),Mlt.forEach(t),POo=r(k9," or "),PO=n(k9,"A",{href:!0});var Elt=s(PO);IOo=r(Elt,"DeiTForImageClassificationWithTeacher"),Elt.forEach(t),qOo=r(k9," (DeiT model)"),k9.forEach(t),NOo=i(Ee),v1=n(Ee,"LI",{});var C7e=s(v1);gge=n(C7e,"STRONG",{});var Clt=s(gge);jOo=r(Clt,"imagegpt"),Clt.forEach(t),DOo=r(C7e," \u2014 "),IO=n(C7e,"A",{href:!0});var wlt=s(IO);GOo=r(wlt,"ImageGPTForImageClassification"),wlt.forEach(t),OOo=r(C7e," (ImageGPT model)"),C7e.forEach(t),VOo=i(Ee),mt=n(Ee,"LI",{});var em=s(mt);hge=n(em,"STRONG",{});var Alt=s(hge);XOo=r(Alt,"perceiver"),Alt.forEach(t),zOo=r(em," \u2014 "),qO=n(em,"A",{href:!0});var ylt=s(qO);QOo=r(ylt,"PerceiverForImageClassificationLearned"),ylt.forEach(t),WOo=r(em," or "),NO=n(em,"A",{href:!0});var Llt=s(NO);HOo=r(Llt,"PerceiverForImageClassificationFourier"),Llt.forEach(t),UOo=r(em," or "),jO=n(em,"A",{href:!0});var xlt=s(jO);JOo=r(xlt,"PerceiverForImageClassificationConvProcessing"),xlt.forEach(t),YOo=r(em," (Perceiver model)"),em.forEach(t),KOo=i(Ee),T1=n(Ee,"LI",{});var w7e=s(T1);uge=n(w7e,"STRONG",{});var $lt=s(uge);ZOo=r($lt,"poolformer"),$lt.forEach(t),eVo=r(w7e," \u2014 "),DO=n(w7e,"A",{href:!0});var klt=s(DO);oVo=r(klt,"PoolFormerForImageClassification"),klt.forEach(t),rVo=r(w7e," (PoolFormer model)"),w7e.forEach(t),tVo=i(Ee),M1=n(Ee,"LI",{});var A7e=s(M1);pge=n(A7e,"STRONG",{});var Slt=s(pge);aVo=r(Slt,"regnet"),Slt.forEach(t),nVo=r(A7e," \u2014 "),GO=n(A7e,"A",{href:!0});var Rlt=s(GO);sVo=r(Rlt,"RegNetForImageClassification"),Rlt.forEach(t),lVo=r(A7e," (RegNet model)"),A7e.forEach(t),iVo=i(Ee),E1=n(Ee,"LI",{});var y7e=s(E1);_ge=n(y7e,"STRONG",{});var Blt=s(_ge);dVo=r(Blt,"resnet"),Blt.forEach(t),cVo=r(y7e," \u2014 "),OO=n(y7e,"A",{href:!0});var Plt=s(OO);mVo=r(Plt,"ResNetForImageClassification"),Plt.forEach(t),fVo=r(y7e," (ResNet model)"),y7e.forEach(t),gVo=i(Ee),C1=n(Ee,"LI",{});var L7e=s(C1);bge=n(L7e,"STRONG",{});var Ilt=s(bge);hVo=r(Ilt,"segformer"),Ilt.forEach(t),uVo=r(L7e," \u2014 "),VO=n(L7e,"A",{href:!0});var qlt=s(VO);pVo=r(qlt,"SegformerForImageClassification"),qlt.forEach(t),_Vo=r(L7e," (SegFormer model)"),L7e.forEach(t),bVo=i(Ee),w1=n(Ee,"LI",{});var x7e=s(w1);Fge=n(x7e,"STRONG",{});var Nlt=s(Fge);FVo=r(Nlt,"swin"),Nlt.forEach(t),vVo=r(x7e," \u2014 "),XO=n(x7e,"A",{href:!0});var jlt=s(XO);TVo=r(jlt,"SwinForImageClassification"),jlt.forEach(t),MVo=r(x7e," (Swin model)"),x7e.forEach(t),EVo=i(Ee),A1=n(Ee,"LI",{});var $7e=s(A1);vge=n($7e,"STRONG",{});var Dlt=s(vge);CVo=r(Dlt,"van"),Dlt.forEach(t),wVo=r($7e," \u2014 "),zO=n($7e,"A",{href:!0});var Glt=s(zO);AVo=r(Glt,"VanForImageClassification"),Glt.forEach(t),yVo=r($7e," (VAN model)"),$7e.forEach(t),LVo=i(Ee),y1=n(Ee,"LI",{});var k7e=s(y1);Tge=n(k7e,"STRONG",{});var Olt=s(Tge);xVo=r(Olt,"vit"),Olt.forEach(t),$Vo=r(k7e," \u2014 "),QO=n(k7e,"A",{href:!0});var Vlt=s(QO);kVo=r(Vlt,"ViTForImageClassification"),Vlt.forEach(t),SVo=r(k7e," (ViT model)"),k7e.forEach(t),Ee.forEach(t),RVo=i(la),L1=n(la,"P",{});var S7e=s(L1);BVo=r(S7e,"The model is set in evaluation mode by default using "),Mge=n(S7e,"CODE",{});var Xlt=s(Mge);PVo=r(Xlt,"model.eval()"),Xlt.forEach(t),IVo=r(S7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(S7e,"CODE",{});var zlt=s(Ege);qVo=r(zlt,"model.train()"),zlt.forEach(t),S7e.forEach(t),NVo=i(la),T(x1.$$.fragment,la),la.forEach(t),Ws.forEach(t),OBe=i(m),Yi=n(m,"H2",{class:!0});var XIe=s(Yi);$1=n(XIe,"A",{id:!0,class:!0,href:!0});var Qlt=s($1);Cge=n(Qlt,"SPAN",{});var Wlt=s(Cge);T(Zy.$$.fragment,Wlt),Wlt.forEach(t),Qlt.forEach(t),jVo=i(XIe),wge=n(XIe,"SPAN",{});var Hlt=s(wge);DVo=r(Hlt,"AutoModelForVision2Seq"),Hlt.forEach(t),XIe.forEach(t),VBe=i(m),Do=n(m,"DIV",{class:!0});var Hs=s(Do);T(eL.$$.fragment,Hs),GVo=i(Hs),Ki=n(Hs,"P",{});var PY=s(Ki);OVo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WO=n(PY,"A",{href:!0});var Ult=s(WO);VVo=r(Ult,"from_pretrained()"),Ult.forEach(t),XVo=r(PY," class method or the "),HO=n(PY,"A",{href:!0});var Jlt=s(HO);zVo=r(Jlt,"from_config()"),Jlt.forEach(t),QVo=r(PY,` class
method.`),PY.forEach(t),WVo=i(Hs),oL=n(Hs,"P",{});var zIe=s(oL);HVo=r(zIe,"This class cannot be instantiated directly using "),Age=n(zIe,"CODE",{});var Ylt=s(Age);UVo=r(Ylt,"__init__()"),Ylt.forEach(t),JVo=r(zIe," (throws an error)."),zIe.forEach(t),YVo=i(Hs),ft=n(Hs,"DIV",{class:!0});var JA=s(ft);T(rL.$$.fragment,JA),KVo=i(JA),yge=n(JA,"P",{});var Klt=s(yge);ZVo=r(Klt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Klt.forEach(t),eXo=i(JA),Zi=n(JA,"P",{});var IY=s(Zi);oXo=r(IY,`Note:
Loading a model from its configuration file does `),Lge=n(IY,"STRONG",{});var Zlt=s(Lge);rXo=r(Zlt,"not"),Zlt.forEach(t),tXo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(IY,"A",{href:!0});var eit=s(UO);aXo=r(eit,"from_pretrained()"),eit.forEach(t),nXo=r(IY," to load the model weights."),IY.forEach(t),sXo=i(JA),T(k1.$$.fragment,JA),JA.forEach(t),lXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(tL.$$.fragment,ia),iXo=i(ia),xge=n(ia,"P",{});var oit=s(xge);dXo=r(oit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oit.forEach(t),cXo=i(ia),Pa=n(ia,"P",{});var YA=s(Pa);mXo=r(YA,"The model class to instantiate is selected based on the "),$ge=n(YA,"CODE",{});var rit=s($ge);fXo=r(rit,"model_type"),rit.forEach(t),gXo=r(YA,` property of the config object (either
passed as an argument or loaded from `),kge=n(YA,"CODE",{});var tit=s(kge);hXo=r(tit,"pretrained_model_name_or_path"),tit.forEach(t),uXo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=n(YA,"CODE",{});var ait=s(Sge);pXo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),_Xo=r(YA,":"),YA.forEach(t),bXo=i(ia),Rge=n(ia,"UL",{});var nit=s(Rge);S1=n(nit,"LI",{});var R7e=s(S1);Bge=n(R7e,"STRONG",{});var sit=s(Bge);FXo=r(sit,"vision-encoder-decoder"),sit.forEach(t),vXo=r(R7e," \u2014 "),JO=n(R7e,"A",{href:!0});var lit=s(JO);TXo=r(lit,"VisionEncoderDecoderModel"),lit.forEach(t),MXo=r(R7e," (Vision Encoder decoder model)"),R7e.forEach(t),nit.forEach(t),EXo=i(ia),R1=n(ia,"P",{});var B7e=s(R1);CXo=r(B7e,"The model is set in evaluation mode by default using "),Pge=n(B7e,"CODE",{});var iit=s(Pge);wXo=r(iit,"model.eval()"),iit.forEach(t),AXo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(B7e,"CODE",{});var dit=s(Ige);yXo=r(dit,"model.train()"),dit.forEach(t),B7e.forEach(t),LXo=i(ia),T(B1.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),XBe=i(m),ed=n(m,"H2",{class:!0});var QIe=s(ed);P1=n(QIe,"A",{id:!0,class:!0,href:!0});var cit=s(P1);qge=n(cit,"SPAN",{});var mit=s(qge);T(aL.$$.fragment,mit),mit.forEach(t),cit.forEach(t),xXo=i(QIe),Nge=n(QIe,"SPAN",{});var fit=s(Nge);$Xo=r(fit,"AutoModelForAudioClassification"),fit.forEach(t),QIe.forEach(t),zBe=i(m),Go=n(m,"DIV",{class:!0});var Us=s(Go);T(nL.$$.fragment,Us),kXo=i(Us),od=n(Us,"P",{});var qY=s(od);SXo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YO=n(qY,"A",{href:!0});var git=s(YO);RXo=r(git,"from_pretrained()"),git.forEach(t),BXo=r(qY," class method or the "),KO=n(qY,"A",{href:!0});var hit=s(KO);PXo=r(hit,"from_config()"),hit.forEach(t),IXo=r(qY,` class
method.`),qY.forEach(t),qXo=i(Us),sL=n(Us,"P",{});var WIe=s(sL);NXo=r(WIe,"This class cannot be instantiated directly using "),jge=n(WIe,"CODE",{});var uit=s(jge);jXo=r(uit,"__init__()"),uit.forEach(t),DXo=r(WIe," (throws an error)."),WIe.forEach(t),GXo=i(Us),gt=n(Us,"DIV",{class:!0});var KA=s(gt);T(lL.$$.fragment,KA),OXo=i(KA),Dge=n(KA,"P",{});var pit=s(Dge);VXo=r(pit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pit.forEach(t),XXo=i(KA),rd=n(KA,"P",{});var NY=s(rd);zXo=r(NY,`Note:
Loading a model from its configuration file does `),Gge=n(NY,"STRONG",{});var _it=s(Gge);QXo=r(_it,"not"),_it.forEach(t),WXo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(NY,"A",{href:!0});var bit=s(ZO);HXo=r(bit,"from_pretrained()"),bit.forEach(t),UXo=r(NY," to load the model weights."),NY.forEach(t),JXo=i(KA),T(I1.$$.fragment,KA),KA.forEach(t),YXo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(iL.$$.fragment,da),KXo=i(da),Oge=n(da,"P",{});var Fit=s(Oge);ZXo=r(Fit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fit.forEach(t),ezo=i(da),Ia=n(da,"P",{});var ZA=s(Ia);ozo=r(ZA,"The model class to instantiate is selected based on the "),Vge=n(ZA,"CODE",{});var vit=s(Vge);rzo=r(vit,"model_type"),vit.forEach(t),tzo=r(ZA,` property of the config object (either
passed as an argument or loaded from `),Xge=n(ZA,"CODE",{});var Tit=s(Xge);azo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),nzo=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(ZA,"CODE",{});var Mit=s(zge);szo=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),lzo=r(ZA,":"),ZA.forEach(t),izo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);q1=n(bo,"LI",{});var P7e=s(q1);Qge=n(P7e,"STRONG",{});var Eit=s(Qge);dzo=r(Eit,"data2vec-audio"),Eit.forEach(t),czo=r(P7e," \u2014 "),eV=n(P7e,"A",{href:!0});var Cit=s(eV);mzo=r(Cit,"Data2VecAudioForSequenceClassification"),Cit.forEach(t),fzo=r(P7e," (Data2VecAudio model)"),P7e.forEach(t),gzo=i(bo),N1=n(bo,"LI",{});var I7e=s(N1);Wge=n(I7e,"STRONG",{});var wit=s(Wge);hzo=r(wit,"hubert"),wit.forEach(t),uzo=r(I7e," \u2014 "),oV=n(I7e,"A",{href:!0});var Ait=s(oV);pzo=r(Ait,"HubertForSequenceClassification"),Ait.forEach(t),_zo=r(I7e," (Hubert model)"),I7e.forEach(t),bzo=i(bo),j1=n(bo,"LI",{});var q7e=s(j1);Hge=n(q7e,"STRONG",{});var yit=s(Hge);Fzo=r(yit,"sew"),yit.forEach(t),vzo=r(q7e," \u2014 "),rV=n(q7e,"A",{href:!0});var Lit=s(rV);Tzo=r(Lit,"SEWForSequenceClassification"),Lit.forEach(t),Mzo=r(q7e," (SEW model)"),q7e.forEach(t),Ezo=i(bo),D1=n(bo,"LI",{});var N7e=s(D1);Uge=n(N7e,"STRONG",{});var xit=s(Uge);Czo=r(xit,"sew-d"),xit.forEach(t),wzo=r(N7e," \u2014 "),tV=n(N7e,"A",{href:!0});var $it=s(tV);Azo=r($it,"SEWDForSequenceClassification"),$it.forEach(t),yzo=r(N7e," (SEW-D model)"),N7e.forEach(t),Lzo=i(bo),G1=n(bo,"LI",{});var j7e=s(G1);Jge=n(j7e,"STRONG",{});var kit=s(Jge);xzo=r(kit,"unispeech"),kit.forEach(t),$zo=r(j7e," \u2014 "),aV=n(j7e,"A",{href:!0});var Sit=s(aV);kzo=r(Sit,"UniSpeechForSequenceClassification"),Sit.forEach(t),Szo=r(j7e," (UniSpeech model)"),j7e.forEach(t),Rzo=i(bo),O1=n(bo,"LI",{});var D7e=s(O1);Yge=n(D7e,"STRONG",{});var Rit=s(Yge);Bzo=r(Rit,"unispeech-sat"),Rit.forEach(t),Pzo=r(D7e," \u2014 "),nV=n(D7e,"A",{href:!0});var Bit=s(nV);Izo=r(Bit,"UniSpeechSatForSequenceClassification"),Bit.forEach(t),qzo=r(D7e," (UniSpeechSat model)"),D7e.forEach(t),Nzo=i(bo),V1=n(bo,"LI",{});var G7e=s(V1);Kge=n(G7e,"STRONG",{});var Pit=s(Kge);jzo=r(Pit,"wav2vec2"),Pit.forEach(t),Dzo=r(G7e," \u2014 "),sV=n(G7e,"A",{href:!0});var Iit=s(sV);Gzo=r(Iit,"Wav2Vec2ForSequenceClassification"),Iit.forEach(t),Ozo=r(G7e," (Wav2Vec2 model)"),G7e.forEach(t),Vzo=i(bo),X1=n(bo,"LI",{});var O7e=s(X1);Zge=n(O7e,"STRONG",{});var qit=s(Zge);Xzo=r(qit,"wavlm"),qit.forEach(t),zzo=r(O7e," \u2014 "),lV=n(O7e,"A",{href:!0});var Nit=s(lV);Qzo=r(Nit,"WavLMForSequenceClassification"),Nit.forEach(t),Wzo=r(O7e," (WavLM model)"),O7e.forEach(t),bo.forEach(t),Hzo=i(da),z1=n(da,"P",{});var V7e=s(z1);Uzo=r(V7e,"The model is set in evaluation mode by default using "),ehe=n(V7e,"CODE",{});var jit=s(ehe);Jzo=r(jit,"model.eval()"),jit.forEach(t),Yzo=r(V7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(V7e,"CODE",{});var Dit=s(ohe);Kzo=r(Dit,"model.train()"),Dit.forEach(t),V7e.forEach(t),Zzo=i(da),T(Q1.$$.fragment,da),da.forEach(t),Us.forEach(t),QBe=i(m),td=n(m,"H2",{class:!0});var HIe=s(td);W1=n(HIe,"A",{id:!0,class:!0,href:!0});var Git=s(W1);rhe=n(Git,"SPAN",{});var Oit=s(rhe);T(dL.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),eQo=i(HIe),the=n(HIe,"SPAN",{});var Vit=s(the);oQo=r(Vit,"AutoModelForAudioFrameClassification"),Vit.forEach(t),HIe.forEach(t),WBe=i(m),Oo=n(m,"DIV",{class:!0});var Js=s(Oo);T(cL.$$.fragment,Js),rQo=i(Js),ad=n(Js,"P",{});var jY=s(ad);tQo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iV=n(jY,"A",{href:!0});var Xit=s(iV);aQo=r(Xit,"from_pretrained()"),Xit.forEach(t),nQo=r(jY," class method or the "),dV=n(jY,"A",{href:!0});var zit=s(dV);sQo=r(zit,"from_config()"),zit.forEach(t),lQo=r(jY,` class
method.`),jY.forEach(t),iQo=i(Js),mL=n(Js,"P",{});var UIe=s(mL);dQo=r(UIe,"This class cannot be instantiated directly using "),ahe=n(UIe,"CODE",{});var Qit=s(ahe);cQo=r(Qit,"__init__()"),Qit.forEach(t),mQo=r(UIe," (throws an error)."),UIe.forEach(t),fQo=i(Js),ht=n(Js,"DIV",{class:!0});var e0=s(ht);T(fL.$$.fragment,e0),gQo=i(e0),nhe=n(e0,"P",{});var Wit=s(nhe);hQo=r(Wit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wit.forEach(t),uQo=i(e0),nd=n(e0,"P",{});var DY=s(nd);pQo=r(DY,`Note:
Loading a model from its configuration file does `),she=n(DY,"STRONG",{});var Hit=s(she);_Qo=r(Hit,"not"),Hit.forEach(t),bQo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(DY,"A",{href:!0});var Uit=s(cV);FQo=r(Uit,"from_pretrained()"),Uit.forEach(t),vQo=r(DY," to load the model weights."),DY.forEach(t),TQo=i(e0),T(H1.$$.fragment,e0),e0.forEach(t),MQo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(gL.$$.fragment,ca),EQo=i(ca),lhe=n(ca,"P",{});var Jit=s(lhe);CQo=r(Jit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jit.forEach(t),wQo=i(ca),qa=n(ca,"P",{});var o0=s(qa);AQo=r(o0,"The model class to instantiate is selected based on the "),ihe=n(o0,"CODE",{});var Yit=s(ihe);yQo=r(Yit,"model_type"),Yit.forEach(t),LQo=r(o0,` property of the config object (either
passed as an argument or loaded from `),dhe=n(o0,"CODE",{});var Kit=s(dhe);xQo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),$Qo=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(o0,"CODE",{});var Zit=s(che);kQo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),SQo=r(o0,":"),o0.forEach(t),RQo=i(ca),Na=n(ca,"UL",{});var r0=s(Na);U1=n(r0,"LI",{});var X7e=s(U1);mhe=n(X7e,"STRONG",{});var edt=s(mhe);BQo=r(edt,"data2vec-audio"),edt.forEach(t),PQo=r(X7e," \u2014 "),mV=n(X7e,"A",{href:!0});var odt=s(mV);IQo=r(odt,"Data2VecAudioForAudioFrameClassification"),odt.forEach(t),qQo=r(X7e," (Data2VecAudio model)"),X7e.forEach(t),NQo=i(r0),J1=n(r0,"LI",{});var z7e=s(J1);fhe=n(z7e,"STRONG",{});var rdt=s(fhe);jQo=r(rdt,"unispeech-sat"),rdt.forEach(t),DQo=r(z7e," \u2014 "),fV=n(z7e,"A",{href:!0});var tdt=s(fV);GQo=r(tdt,"UniSpeechSatForAudioFrameClassification"),tdt.forEach(t),OQo=r(z7e," (UniSpeechSat model)"),z7e.forEach(t),VQo=i(r0),Y1=n(r0,"LI",{});var Q7e=s(Y1);ghe=n(Q7e,"STRONG",{});var adt=s(ghe);XQo=r(adt,"wav2vec2"),adt.forEach(t),zQo=r(Q7e," \u2014 "),gV=n(Q7e,"A",{href:!0});var ndt=s(gV);QQo=r(ndt,"Wav2Vec2ForAudioFrameClassification"),ndt.forEach(t),WQo=r(Q7e," (Wav2Vec2 model)"),Q7e.forEach(t),HQo=i(r0),K1=n(r0,"LI",{});var W7e=s(K1);hhe=n(W7e,"STRONG",{});var sdt=s(hhe);UQo=r(sdt,"wavlm"),sdt.forEach(t),JQo=r(W7e," \u2014 "),hV=n(W7e,"A",{href:!0});var ldt=s(hV);YQo=r(ldt,"WavLMForAudioFrameClassification"),ldt.forEach(t),KQo=r(W7e," (WavLM model)"),W7e.forEach(t),r0.forEach(t),ZQo=i(ca),Z1=n(ca,"P",{});var H7e=s(Z1);eWo=r(H7e,"The model is set in evaluation mode by default using "),uhe=n(H7e,"CODE",{});var idt=s(uhe);oWo=r(idt,"model.eval()"),idt.forEach(t),rWo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(H7e,"CODE",{});var ddt=s(phe);tWo=r(ddt,"model.train()"),ddt.forEach(t),H7e.forEach(t),aWo=i(ca),T(eT.$$.fragment,ca),ca.forEach(t),Js.forEach(t),HBe=i(m),sd=n(m,"H2",{class:!0});var JIe=s(sd);oT=n(JIe,"A",{id:!0,class:!0,href:!0});var cdt=s(oT);_he=n(cdt,"SPAN",{});var mdt=s(_he);T(hL.$$.fragment,mdt),mdt.forEach(t),cdt.forEach(t),nWo=i(JIe),bhe=n(JIe,"SPAN",{});var fdt=s(bhe);sWo=r(fdt,"AutoModelForCTC"),fdt.forEach(t),JIe.forEach(t),UBe=i(m),Vo=n(m,"DIV",{class:!0});var Ys=s(Vo);T(uL.$$.fragment,Ys),lWo=i(Ys),ld=n(Ys,"P",{});var GY=s(ld);iWo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uV=n(GY,"A",{href:!0});var gdt=s(uV);dWo=r(gdt,"from_pretrained()"),gdt.forEach(t),cWo=r(GY," class method or the "),pV=n(GY,"A",{href:!0});var hdt=s(pV);mWo=r(hdt,"from_config()"),hdt.forEach(t),fWo=r(GY,` class
method.`),GY.forEach(t),gWo=i(Ys),pL=n(Ys,"P",{});var YIe=s(pL);hWo=r(YIe,"This class cannot be instantiated directly using "),Fhe=n(YIe,"CODE",{});var udt=s(Fhe);uWo=r(udt,"__init__()"),udt.forEach(t),pWo=r(YIe," (throws an error)."),YIe.forEach(t),_Wo=i(Ys),ut=n(Ys,"DIV",{class:!0});var t0=s(ut);T(_L.$$.fragment,t0),bWo=i(t0),vhe=n(t0,"P",{});var pdt=s(vhe);FWo=r(pdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pdt.forEach(t),vWo=i(t0),id=n(t0,"P",{});var OY=s(id);TWo=r(OY,`Note:
Loading a model from its configuration file does `),The=n(OY,"STRONG",{});var _dt=s(The);MWo=r(_dt,"not"),_dt.forEach(t),EWo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(OY,"A",{href:!0});var bdt=s(_V);CWo=r(bdt,"from_pretrained()"),bdt.forEach(t),wWo=r(OY," to load the model weights."),OY.forEach(t),AWo=i(t0),T(rT.$$.fragment,t0),t0.forEach(t),yWo=i(Ys),co=n(Ys,"DIV",{class:!0});var ma=s(co);T(bL.$$.fragment,ma),LWo=i(ma),Mhe=n(ma,"P",{});var Fdt=s(Mhe);xWo=r(Fdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fdt.forEach(t),$Wo=i(ma),ja=n(ma,"P",{});var a0=s(ja);kWo=r(a0,"The model class to instantiate is selected based on the "),Ehe=n(a0,"CODE",{});var vdt=s(Ehe);SWo=r(vdt,"model_type"),vdt.forEach(t),RWo=r(a0,` property of the config object (either
passed as an argument or loaded from `),Che=n(a0,"CODE",{});var Tdt=s(Che);BWo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),PWo=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(a0,"CODE",{});var Mdt=s(whe);IWo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),qWo=r(a0,":"),a0.forEach(t),NWo=i(ma),je=n(ma,"UL",{});var Fo=s(je);tT=n(Fo,"LI",{});var U7e=s(tT);Ahe=n(U7e,"STRONG",{});var Edt=s(Ahe);jWo=r(Edt,"data2vec-audio"),Edt.forEach(t),DWo=r(U7e," \u2014 "),bV=n(U7e,"A",{href:!0});var Cdt=s(bV);GWo=r(Cdt,"Data2VecAudioForCTC"),Cdt.forEach(t),OWo=r(U7e," (Data2VecAudio model)"),U7e.forEach(t),VWo=i(Fo),aT=n(Fo,"LI",{});var J7e=s(aT);yhe=n(J7e,"STRONG",{});var wdt=s(yhe);XWo=r(wdt,"hubert"),wdt.forEach(t),zWo=r(J7e," \u2014 "),FV=n(J7e,"A",{href:!0});var Adt=s(FV);QWo=r(Adt,"HubertForCTC"),Adt.forEach(t),WWo=r(J7e," (Hubert model)"),J7e.forEach(t),HWo=i(Fo),nT=n(Fo,"LI",{});var Y7e=s(nT);Lhe=n(Y7e,"STRONG",{});var ydt=s(Lhe);UWo=r(ydt,"sew"),ydt.forEach(t),JWo=r(Y7e," \u2014 "),vV=n(Y7e,"A",{href:!0});var Ldt=s(vV);YWo=r(Ldt,"SEWForCTC"),Ldt.forEach(t),KWo=r(Y7e," (SEW model)"),Y7e.forEach(t),ZWo=i(Fo),sT=n(Fo,"LI",{});var K7e=s(sT);xhe=n(K7e,"STRONG",{});var xdt=s(xhe);eHo=r(xdt,"sew-d"),xdt.forEach(t),oHo=r(K7e," \u2014 "),TV=n(K7e,"A",{href:!0});var $dt=s(TV);rHo=r($dt,"SEWDForCTC"),$dt.forEach(t),tHo=r(K7e," (SEW-D model)"),K7e.forEach(t),aHo=i(Fo),lT=n(Fo,"LI",{});var Z7e=s(lT);$he=n(Z7e,"STRONG",{});var kdt=s($he);nHo=r(kdt,"unispeech"),kdt.forEach(t),sHo=r(Z7e," \u2014 "),MV=n(Z7e,"A",{href:!0});var Sdt=s(MV);lHo=r(Sdt,"UniSpeechForCTC"),Sdt.forEach(t),iHo=r(Z7e," (UniSpeech model)"),Z7e.forEach(t),dHo=i(Fo),iT=n(Fo,"LI",{});var exe=s(iT);khe=n(exe,"STRONG",{});var Rdt=s(khe);cHo=r(Rdt,"unispeech-sat"),Rdt.forEach(t),mHo=r(exe," \u2014 "),EV=n(exe,"A",{href:!0});var Bdt=s(EV);fHo=r(Bdt,"UniSpeechSatForCTC"),Bdt.forEach(t),gHo=r(exe," (UniSpeechSat model)"),exe.forEach(t),hHo=i(Fo),dT=n(Fo,"LI",{});var oxe=s(dT);She=n(oxe,"STRONG",{});var Pdt=s(She);uHo=r(Pdt,"wav2vec2"),Pdt.forEach(t),pHo=r(oxe," \u2014 "),CV=n(oxe,"A",{href:!0});var Idt=s(CV);_Ho=r(Idt,"Wav2Vec2ForCTC"),Idt.forEach(t),bHo=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),FHo=i(Fo),cT=n(Fo,"LI",{});var rxe=s(cT);Rhe=n(rxe,"STRONG",{});var qdt=s(Rhe);vHo=r(qdt,"wavlm"),qdt.forEach(t),THo=r(rxe," \u2014 "),wV=n(rxe,"A",{href:!0});var Ndt=s(wV);MHo=r(Ndt,"WavLMForCTC"),Ndt.forEach(t),EHo=r(rxe," (WavLM model)"),rxe.forEach(t),Fo.forEach(t),CHo=i(ma),mT=n(ma,"P",{});var txe=s(mT);wHo=r(txe,"The model is set in evaluation mode by default using "),Bhe=n(txe,"CODE",{});var jdt=s(Bhe);AHo=r(jdt,"model.eval()"),jdt.forEach(t),yHo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(txe,"CODE",{});var Ddt=s(Phe);LHo=r(Ddt,"model.train()"),Ddt.forEach(t),txe.forEach(t),xHo=i(ma),T(fT.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),JBe=i(m),dd=n(m,"H2",{class:!0});var KIe=s(dd);gT=n(KIe,"A",{id:!0,class:!0,href:!0});var Gdt=s(gT);Ihe=n(Gdt,"SPAN",{});var Odt=s(Ihe);T(FL.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),$Ho=i(KIe),qhe=n(KIe,"SPAN",{});var Vdt=s(qhe);kHo=r(Vdt,"AutoModelForSpeechSeq2Seq"),Vdt.forEach(t),KIe.forEach(t),YBe=i(m),Xo=n(m,"DIV",{class:!0});var Ks=s(Xo);T(vL.$$.fragment,Ks),SHo=i(Ks),cd=n(Ks,"P",{});var VY=s(cd);RHo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AV=n(VY,"A",{href:!0});var Xdt=s(AV);BHo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),PHo=r(VY," class method or the "),yV=n(VY,"A",{href:!0});var zdt=s(yV);IHo=r(zdt,"from_config()"),zdt.forEach(t),qHo=r(VY,` class
method.`),VY.forEach(t),NHo=i(Ks),TL=n(Ks,"P",{});var ZIe=s(TL);jHo=r(ZIe,"This class cannot be instantiated directly using "),Nhe=n(ZIe,"CODE",{});var Qdt=s(Nhe);DHo=r(Qdt,"__init__()"),Qdt.forEach(t),GHo=r(ZIe," (throws an error)."),ZIe.forEach(t),OHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var n0=s(pt);T(ML.$$.fragment,n0),VHo=i(n0),jhe=n(n0,"P",{});var Wdt=s(jhe);XHo=r(Wdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wdt.forEach(t),zHo=i(n0),md=n(n0,"P",{});var XY=s(md);QHo=r(XY,`Note:
Loading a model from its configuration file does `),Dhe=n(XY,"STRONG",{});var Hdt=s(Dhe);WHo=r(Hdt,"not"),Hdt.forEach(t),HHo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(XY,"A",{href:!0});var Udt=s(LV);UHo=r(Udt,"from_pretrained()"),Udt.forEach(t),JHo=r(XY," to load the model weights."),XY.forEach(t),YHo=i(n0),T(hT.$$.fragment,n0),n0.forEach(t),KHo=i(Ks),mo=n(Ks,"DIV",{class:!0});var fa=s(mo);T(EL.$$.fragment,fa),ZHo=i(fa),Ghe=n(fa,"P",{});var Jdt=s(Ghe);eUo=r(Jdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jdt.forEach(t),oUo=i(fa),Da=n(fa,"P",{});var s0=s(Da);rUo=r(s0,"The model class to instantiate is selected based on the "),Ohe=n(s0,"CODE",{});var Ydt=s(Ohe);tUo=r(Ydt,"model_type"),Ydt.forEach(t),aUo=r(s0,` property of the config object (either
passed as an argument or loaded from `),Vhe=n(s0,"CODE",{});var Kdt=s(Vhe);nUo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),sUo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xhe=n(s0,"CODE",{});var Zdt=s(Xhe);lUo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),iUo=r(s0,":"),s0.forEach(t),dUo=i(fa),CL=n(fa,"UL",{});var eqe=s(CL);uT=n(eqe,"LI",{});var axe=s(uT);zhe=n(axe,"STRONG",{});var ect=s(zhe);cUo=r(ect,"speech-encoder-decoder"),ect.forEach(t),mUo=r(axe," \u2014 "),xV=n(axe,"A",{href:!0});var oct=s(xV);fUo=r(oct,"SpeechEncoderDecoderModel"),oct.forEach(t),gUo=r(axe," (Speech Encoder decoder model)"),axe.forEach(t),hUo=i(eqe),pT=n(eqe,"LI",{});var nxe=s(pT);Qhe=n(nxe,"STRONG",{});var rct=s(Qhe);uUo=r(rct,"speech_to_text"),rct.forEach(t),pUo=r(nxe," \u2014 "),$V=n(nxe,"A",{href:!0});var tct=s($V);_Uo=r(tct,"Speech2TextForConditionalGeneration"),tct.forEach(t),bUo=r(nxe," (Speech2Text model)"),nxe.forEach(t),eqe.forEach(t),FUo=i(fa),_T=n(fa,"P",{});var sxe=s(_T);vUo=r(sxe,"The model is set in evaluation mode by default using "),Whe=n(sxe,"CODE",{});var act=s(Whe);TUo=r(act,"model.eval()"),act.forEach(t),MUo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hhe=n(sxe,"CODE",{});var nct=s(Hhe);EUo=r(nct,"model.train()"),nct.forEach(t),sxe.forEach(t),CUo=i(fa),T(bT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),KBe=i(m),fd=n(m,"H2",{class:!0});var oqe=s(fd);FT=n(oqe,"A",{id:!0,class:!0,href:!0});var sct=s(FT);Uhe=n(sct,"SPAN",{});var lct=s(Uhe);T(wL.$$.fragment,lct),lct.forEach(t),sct.forEach(t),wUo=i(oqe),Jhe=n(oqe,"SPAN",{});var ict=s(Jhe);AUo=r(ict,"AutoModelForAudioXVector"),ict.forEach(t),oqe.forEach(t),ZBe=i(m),zo=n(m,"DIV",{class:!0});var Zs=s(zo);T(AL.$$.fragment,Zs),yUo=i(Zs),gd=n(Zs,"P",{});var zY=s(gd);LUo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kV=n(zY,"A",{href:!0});var dct=s(kV);xUo=r(dct,"from_pretrained()"),dct.forEach(t),$Uo=r(zY," class method or the "),SV=n(zY,"A",{href:!0});var cct=s(SV);kUo=r(cct,"from_config()"),cct.forEach(t),SUo=r(zY,` class
method.`),zY.forEach(t),RUo=i(Zs),yL=n(Zs,"P",{});var rqe=s(yL);BUo=r(rqe,"This class cannot be instantiated directly using "),Yhe=n(rqe,"CODE",{});var mct=s(Yhe);PUo=r(mct,"__init__()"),mct.forEach(t),IUo=r(rqe," (throws an error)."),rqe.forEach(t),qUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var l0=s(_t);T(LL.$$.fragment,l0),NUo=i(l0),Khe=n(l0,"P",{});var fct=s(Khe);jUo=r(fct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fct.forEach(t),DUo=i(l0),hd=n(l0,"P",{});var QY=s(hd);GUo=r(QY,`Note:
Loading a model from its configuration file does `),Zhe=n(QY,"STRONG",{});var gct=s(Zhe);OUo=r(gct,"not"),gct.forEach(t),VUo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(QY,"A",{href:!0});var hct=s(RV);XUo=r(hct,"from_pretrained()"),hct.forEach(t),zUo=r(QY," to load the model weights."),QY.forEach(t),QUo=i(l0),T(vT.$$.fragment,l0),l0.forEach(t),WUo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ga=s(fo);T(xL.$$.fragment,ga),HUo=i(ga),eue=n(ga,"P",{});var uct=s(eue);UUo=r(uct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uct.forEach(t),JUo=i(ga),Ga=n(ga,"P",{});var i0=s(Ga);YUo=r(i0,"The model class to instantiate is selected based on the "),oue=n(i0,"CODE",{});var pct=s(oue);KUo=r(pct,"model_type"),pct.forEach(t),ZUo=r(i0,` property of the config object (either
passed as an argument or loaded from `),rue=n(i0,"CODE",{});var _ct=s(rue);eJo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),oJo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(i0,"CODE",{});var bct=s(tue);rJo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),tJo=r(i0,":"),i0.forEach(t),aJo=i(ga),Oa=n(ga,"UL",{});var d0=s(Oa);TT=n(d0,"LI",{});var lxe=s(TT);aue=n(lxe,"STRONG",{});var Fct=s(aue);nJo=r(Fct,"data2vec-audio"),Fct.forEach(t),sJo=r(lxe," \u2014 "),BV=n(lxe,"A",{href:!0});var vct=s(BV);lJo=r(vct,"Data2VecAudioForXVector"),vct.forEach(t),iJo=r(lxe," (Data2VecAudio model)"),lxe.forEach(t),dJo=i(d0),MT=n(d0,"LI",{});var ixe=s(MT);nue=n(ixe,"STRONG",{});var Tct=s(nue);cJo=r(Tct,"unispeech-sat"),Tct.forEach(t),mJo=r(ixe," \u2014 "),PV=n(ixe,"A",{href:!0});var Mct=s(PV);fJo=r(Mct,"UniSpeechSatForXVector"),Mct.forEach(t),gJo=r(ixe," (UniSpeechSat model)"),ixe.forEach(t),hJo=i(d0),ET=n(d0,"LI",{});var dxe=s(ET);sue=n(dxe,"STRONG",{});var Ect=s(sue);uJo=r(Ect,"wav2vec2"),Ect.forEach(t),pJo=r(dxe," \u2014 "),IV=n(dxe,"A",{href:!0});var Cct=s(IV);_Jo=r(Cct,"Wav2Vec2ForXVector"),Cct.forEach(t),bJo=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),FJo=i(d0),CT=n(d0,"LI",{});var cxe=s(CT);lue=n(cxe,"STRONG",{});var wct=s(lue);vJo=r(wct,"wavlm"),wct.forEach(t),TJo=r(cxe," \u2014 "),qV=n(cxe,"A",{href:!0});var Act=s(qV);MJo=r(Act,"WavLMForXVector"),Act.forEach(t),EJo=r(cxe," (WavLM model)"),cxe.forEach(t),d0.forEach(t),CJo=i(ga),wT=n(ga,"P",{});var mxe=s(wT);wJo=r(mxe,"The model is set in evaluation mode by default using "),iue=n(mxe,"CODE",{});var yct=s(iue);AJo=r(yct,"model.eval()"),yct.forEach(t),yJo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(mxe,"CODE",{});var Lct=s(due);LJo=r(Lct,"model.train()"),Lct.forEach(t),mxe.forEach(t),xJo=i(ga),T(AT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),ePe=i(m),ud=n(m,"H2",{class:!0});var tqe=s(ud);yT=n(tqe,"A",{id:!0,class:!0,href:!0});var xct=s(yT);cue=n(xct,"SPAN",{});var $ct=s(cue);T($L.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),$Jo=i(tqe),mue=n(tqe,"SPAN",{});var kct=s(mue);kJo=r(kct,"AutoModelForMaskedImageModeling"),kct.forEach(t),tqe.forEach(t),oPe=i(m),Qo=n(m,"DIV",{class:!0});var el=s(Qo);T(kL.$$.fragment,el),SJo=i(el),pd=n(el,"P",{});var WY=s(pd);RJo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NV=n(WY,"A",{href:!0});var Sct=s(NV);BJo=r(Sct,"from_pretrained()"),Sct.forEach(t),PJo=r(WY," class method or the "),jV=n(WY,"A",{href:!0});var Rct=s(jV);IJo=r(Rct,"from_config()"),Rct.forEach(t),qJo=r(WY,` class
method.`),WY.forEach(t),NJo=i(el),SL=n(el,"P",{});var aqe=s(SL);jJo=r(aqe,"This class cannot be instantiated directly using "),fue=n(aqe,"CODE",{});var Bct=s(fue);DJo=r(Bct,"__init__()"),Bct.forEach(t),GJo=r(aqe," (throws an error)."),aqe.forEach(t),OJo=i(el),bt=n(el,"DIV",{class:!0});var c0=s(bt);T(RL.$$.fragment,c0),VJo=i(c0),gue=n(c0,"P",{});var Pct=s(gue);XJo=r(Pct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pct.forEach(t),zJo=i(c0),_d=n(c0,"P",{});var HY=s(_d);QJo=r(HY,`Note:
Loading a model from its configuration file does `),hue=n(HY,"STRONG",{});var Ict=s(hue);WJo=r(Ict,"not"),Ict.forEach(t),HJo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(HY,"A",{href:!0});var qct=s(DV);UJo=r(qct,"from_pretrained()"),qct.forEach(t),JJo=r(HY," to load the model weights."),HY.forEach(t),YJo=i(c0),T(LT.$$.fragment,c0),c0.forEach(t),KJo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(BL.$$.fragment,ha),ZJo=i(ha),uue=n(ha,"P",{});var Nct=s(uue);eYo=r(Nct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nct.forEach(t),oYo=i(ha),Va=n(ha,"P",{});var m0=s(Va);rYo=r(m0,"The model class to instantiate is selected based on the "),pue=n(m0,"CODE",{});var jct=s(pue);tYo=r(jct,"model_type"),jct.forEach(t),aYo=r(m0,` property of the config object (either
passed as an argument or loaded from `),_ue=n(m0,"CODE",{});var Dct=s(_ue);nYo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),sYo=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(m0,"CODE",{});var Gct=s(bue);lYo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),iYo=r(m0,":"),m0.forEach(t),dYo=i(ha),bd=n(ha,"UL",{});var UY=s(bd);xT=n(UY,"LI",{});var fxe=s(xT);Fue=n(fxe,"STRONG",{});var Oct=s(Fue);cYo=r(Oct,"deit"),Oct.forEach(t),mYo=r(fxe," \u2014 "),GV=n(fxe,"A",{href:!0});var Vct=s(GV);fYo=r(Vct,"DeiTForMaskedImageModeling"),Vct.forEach(t),gYo=r(fxe," (DeiT model)"),fxe.forEach(t),hYo=i(UY),$T=n(UY,"LI",{});var gxe=s($T);vue=n(gxe,"STRONG",{});var Xct=s(vue);uYo=r(Xct,"swin"),Xct.forEach(t),pYo=r(gxe," \u2014 "),OV=n(gxe,"A",{href:!0});var zct=s(OV);_Yo=r(zct,"SwinForMaskedImageModeling"),zct.forEach(t),bYo=r(gxe," (Swin model)"),gxe.forEach(t),FYo=i(UY),kT=n(UY,"LI",{});var hxe=s(kT);Tue=n(hxe,"STRONG",{});var Qct=s(Tue);vYo=r(Qct,"vit"),Qct.forEach(t),TYo=r(hxe," \u2014 "),VV=n(hxe,"A",{href:!0});var Wct=s(VV);MYo=r(Wct,"ViTForMaskedImageModeling"),Wct.forEach(t),EYo=r(hxe," (ViT model)"),hxe.forEach(t),UY.forEach(t),CYo=i(ha),ST=n(ha,"P",{});var uxe=s(ST);wYo=r(uxe,"The model is set in evaluation mode by default using "),Mue=n(uxe,"CODE",{});var Hct=s(Mue);AYo=r(Hct,"model.eval()"),Hct.forEach(t),yYo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(uxe,"CODE",{});var Uct=s(Eue);LYo=r(Uct,"model.train()"),Uct.forEach(t),uxe.forEach(t),xYo=i(ha),T(RT.$$.fragment,ha),ha.forEach(t),el.forEach(t),rPe=i(m),Fd=n(m,"H2",{class:!0});var nqe=s(Fd);BT=n(nqe,"A",{id:!0,class:!0,href:!0});var Jct=s(BT);Cue=n(Jct,"SPAN",{});var Yct=s(Cue);T(PL.$$.fragment,Yct),Yct.forEach(t),Jct.forEach(t),$Yo=i(nqe),wue=n(nqe,"SPAN",{});var Kct=s(wue);kYo=r(Kct,"AutoModelForObjectDetection"),Kct.forEach(t),nqe.forEach(t),tPe=i(m),Wo=n(m,"DIV",{class:!0});var ol=s(Wo);T(IL.$$.fragment,ol),SYo=i(ol),vd=n(ol,"P",{});var JY=s(vd);RYo=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XV=n(JY,"A",{href:!0});var Zct=s(XV);BYo=r(Zct,"from_pretrained()"),Zct.forEach(t),PYo=r(JY," class method or the "),zV=n(JY,"A",{href:!0});var emt=s(zV);IYo=r(emt,"from_config()"),emt.forEach(t),qYo=r(JY,` class
method.`),JY.forEach(t),NYo=i(ol),qL=n(ol,"P",{});var sqe=s(qL);jYo=r(sqe,"This class cannot be instantiated directly using "),Aue=n(sqe,"CODE",{});var omt=s(Aue);DYo=r(omt,"__init__()"),omt.forEach(t),GYo=r(sqe," (throws an error)."),sqe.forEach(t),OYo=i(ol),Ft=n(ol,"DIV",{class:!0});var f0=s(Ft);T(NL.$$.fragment,f0),VYo=i(f0),yue=n(f0,"P",{});var rmt=s(yue);XYo=r(rmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rmt.forEach(t),zYo=i(f0),Td=n(f0,"P",{});var YY=s(Td);QYo=r(YY,`Note:
Loading a model from its configuration file does `),Lue=n(YY,"STRONG",{});var tmt=s(Lue);WYo=r(tmt,"not"),tmt.forEach(t),HYo=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(YY,"A",{href:!0});var amt=s(QV);UYo=r(amt,"from_pretrained()"),amt.forEach(t),JYo=r(YY," to load the model weights."),YY.forEach(t),YYo=i(f0),T(PT.$$.fragment,f0),f0.forEach(t),KYo=i(ol),ho=n(ol,"DIV",{class:!0});var ua=s(ho);T(jL.$$.fragment,ua),ZYo=i(ua),xue=n(ua,"P",{});var nmt=s(xue);eKo=r(nmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nmt.forEach(t),oKo=i(ua),Xa=n(ua,"P",{});var g0=s(Xa);rKo=r(g0,"The model class to instantiate is selected based on the "),$ue=n(g0,"CODE",{});var smt=s($ue);tKo=r(smt,"model_type"),smt.forEach(t),aKo=r(g0,` property of the config object (either
passed as an argument or loaded from `),kue=n(g0,"CODE",{});var lmt=s(kue);nKo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),sKo=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(g0,"CODE",{});var imt=s(Sue);lKo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),iKo=r(g0,":"),g0.forEach(t),dKo=i(ua),DL=n(ua,"UL",{});var lqe=s(DL);IT=n(lqe,"LI",{});var pxe=s(IT);Rue=n(pxe,"STRONG",{});var dmt=s(Rue);cKo=r(dmt,"detr"),dmt.forEach(t),mKo=r(pxe," \u2014 "),WV=n(pxe,"A",{href:!0});var cmt=s(WV);fKo=r(cmt,"DetrForObjectDetection"),cmt.forEach(t),gKo=r(pxe," (DETR model)"),pxe.forEach(t),hKo=i(lqe),qT=n(lqe,"LI",{});var _xe=s(qT);Bue=n(_xe,"STRONG",{});var mmt=s(Bue);uKo=r(mmt,"yolos"),mmt.forEach(t),pKo=r(_xe," \u2014 "),HV=n(_xe,"A",{href:!0});var fmt=s(HV);_Ko=r(fmt,"YolosForObjectDetection"),fmt.forEach(t),bKo=r(_xe," (YOLOS model)"),_xe.forEach(t),lqe.forEach(t),FKo=i(ua),NT=n(ua,"P",{});var bxe=s(NT);vKo=r(bxe,"The model is set in evaluation mode by default using "),Pue=n(bxe,"CODE",{});var gmt=s(Pue);TKo=r(gmt,"model.eval()"),gmt.forEach(t),MKo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iue=n(bxe,"CODE",{});var hmt=s(Iue);EKo=r(hmt,"model.train()"),hmt.forEach(t),bxe.forEach(t),CKo=i(ua),T(jT.$$.fragment,ua),ua.forEach(t),ol.forEach(t),aPe=i(m),Md=n(m,"H2",{class:!0});var iqe=s(Md);DT=n(iqe,"A",{id:!0,class:!0,href:!0});var umt=s(DT);que=n(umt,"SPAN",{});var pmt=s(que);T(GL.$$.fragment,pmt),pmt.forEach(t),umt.forEach(t),wKo=i(iqe),Nue=n(iqe,"SPAN",{});var _mt=s(Nue);AKo=r(_mt,"AutoModelForImageSegmentation"),_mt.forEach(t),iqe.forEach(t),nPe=i(m),Ho=n(m,"DIV",{class:!0});var rl=s(Ho);T(OL.$$.fragment,rl),yKo=i(rl),Ed=n(rl,"P",{});var KY=s(Ed);LKo=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UV=n(KY,"A",{href:!0});var bmt=s(UV);xKo=r(bmt,"from_pretrained()"),bmt.forEach(t),$Ko=r(KY," class method or the "),JV=n(KY,"A",{href:!0});var Fmt=s(JV);kKo=r(Fmt,"from_config()"),Fmt.forEach(t),SKo=r(KY,` class
method.`),KY.forEach(t),RKo=i(rl),VL=n(rl,"P",{});var dqe=s(VL);BKo=r(dqe,"This class cannot be instantiated directly using "),jue=n(dqe,"CODE",{});var vmt=s(jue);PKo=r(vmt,"__init__()"),vmt.forEach(t),IKo=r(dqe," (throws an error)."),dqe.forEach(t),qKo=i(rl),vt=n(rl,"DIV",{class:!0});var h0=s(vt);T(XL.$$.fragment,h0),NKo=i(h0),Due=n(h0,"P",{});var Tmt=s(Due);jKo=r(Tmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tmt.forEach(t),DKo=i(h0),Cd=n(h0,"P",{});var ZY=s(Cd);GKo=r(ZY,`Note:
Loading a model from its configuration file does `),Gue=n(ZY,"STRONG",{});var Mmt=s(Gue);OKo=r(Mmt,"not"),Mmt.forEach(t),VKo=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(ZY,"A",{href:!0});var Emt=s(YV);XKo=r(Emt,"from_pretrained()"),Emt.forEach(t),zKo=r(ZY," to load the model weights."),ZY.forEach(t),QKo=i(h0),T(GT.$$.fragment,h0),h0.forEach(t),WKo=i(rl),uo=n(rl,"DIV",{class:!0});var pa=s(uo);T(zL.$$.fragment,pa),HKo=i(pa),Oue=n(pa,"P",{});var Cmt=s(Oue);UKo=r(Cmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Cmt.forEach(t),JKo=i(pa),za=n(pa,"P",{});var u0=s(za);YKo=r(u0,"The model class to instantiate is selected based on the "),Vue=n(u0,"CODE",{});var wmt=s(Vue);KKo=r(wmt,"model_type"),wmt.forEach(t),ZKo=r(u0,` property of the config object (either
passed as an argument or loaded from `),Xue=n(u0,"CODE",{});var Amt=s(Xue);eZo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),oZo=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(u0,"CODE",{});var ymt=s(zue);rZo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),tZo=r(u0,":"),u0.forEach(t),aZo=i(pa),Que=n(pa,"UL",{});var Lmt=s(Que);OT=n(Lmt,"LI",{});var Fxe=s(OT);Wue=n(Fxe,"STRONG",{});var xmt=s(Wue);nZo=r(xmt,"detr"),xmt.forEach(t),sZo=r(Fxe," \u2014 "),KV=n(Fxe,"A",{href:!0});var $mt=s(KV);lZo=r($mt,"DetrForSegmentation"),$mt.forEach(t),iZo=r(Fxe," (DETR model)"),Fxe.forEach(t),Lmt.forEach(t),dZo=i(pa),VT=n(pa,"P",{});var vxe=s(VT);cZo=r(vxe,"The model is set in evaluation mode by default using "),Hue=n(vxe,"CODE",{});var kmt=s(Hue);mZo=r(kmt,"model.eval()"),kmt.forEach(t),fZo=r(vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(vxe,"CODE",{});var Smt=s(Uue);gZo=r(Smt,"model.train()"),Smt.forEach(t),vxe.forEach(t),hZo=i(pa),T(XT.$$.fragment,pa),pa.forEach(t),rl.forEach(t),sPe=i(m),wd=n(m,"H2",{class:!0});var cqe=s(wd);zT=n(cqe,"A",{id:!0,class:!0,href:!0});var Rmt=s(zT);Jue=n(Rmt,"SPAN",{});var Bmt=s(Jue);T(QL.$$.fragment,Bmt),Bmt.forEach(t),Rmt.forEach(t),uZo=i(cqe),Yue=n(cqe,"SPAN",{});var Pmt=s(Yue);pZo=r(Pmt,"AutoModelForSemanticSegmentation"),Pmt.forEach(t),cqe.forEach(t),lPe=i(m),Uo=n(m,"DIV",{class:!0});var tl=s(Uo);T(WL.$$.fragment,tl),_Zo=i(tl),Ad=n(tl,"P",{});var eK=s(Ad);bZo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZV=n(eK,"A",{href:!0});var Imt=s(ZV);FZo=r(Imt,"from_pretrained()"),Imt.forEach(t),vZo=r(eK," class method or the "),eX=n(eK,"A",{href:!0});var qmt=s(eX);TZo=r(qmt,"from_config()"),qmt.forEach(t),MZo=r(eK,` class
method.`),eK.forEach(t),EZo=i(tl),HL=n(tl,"P",{});var mqe=s(HL);CZo=r(mqe,"This class cannot be instantiated directly using "),Kue=n(mqe,"CODE",{});var Nmt=s(Kue);wZo=r(Nmt,"__init__()"),Nmt.forEach(t),AZo=r(mqe," (throws an error)."),mqe.forEach(t),yZo=i(tl),Tt=n(tl,"DIV",{class:!0});var p0=s(Tt);T(UL.$$.fragment,p0),LZo=i(p0),Zue=n(p0,"P",{});var jmt=s(Zue);xZo=r(jmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jmt.forEach(t),$Zo=i(p0),yd=n(p0,"P",{});var oK=s(yd);kZo=r(oK,`Note:
Loading a model from its configuration file does `),epe=n(oK,"STRONG",{});var Dmt=s(epe);SZo=r(Dmt,"not"),Dmt.forEach(t),RZo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(oK,"A",{href:!0});var Gmt=s(oX);BZo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),PZo=r(oK," to load the model weights."),oK.forEach(t),IZo=i(p0),T(QT.$$.fragment,p0),p0.forEach(t),qZo=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(JL.$$.fragment,_a),NZo=i(_a),ope=n(_a,"P",{});var Omt=s(ope);jZo=r(Omt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Omt.forEach(t),DZo=i(_a),Qa=n(_a,"P",{});var _0=s(Qa);GZo=r(_0,"The model class to instantiate is selected based on the "),rpe=n(_0,"CODE",{});var Vmt=s(rpe);OZo=r(Vmt,"model_type"),Vmt.forEach(t),VZo=r(_0,` property of the config object (either
passed as an argument or loaded from `),tpe=n(_0,"CODE",{});var Xmt=s(tpe);XZo=r(Xmt,"pretrained_model_name_or_path"),Xmt.forEach(t),zZo=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(_0,"CODE",{});var zmt=s(ape);QZo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),WZo=r(_0,":"),_0.forEach(t),HZo=i(_a),Wa=n(_a,"UL",{});var b0=s(Wa);WT=n(b0,"LI",{});var Txe=s(WT);npe=n(Txe,"STRONG",{});var Qmt=s(npe);UZo=r(Qmt,"beit"),Qmt.forEach(t),JZo=r(Txe," \u2014 "),rX=n(Txe,"A",{href:!0});var Wmt=s(rX);YZo=r(Wmt,"BeitForSemanticSegmentation"),Wmt.forEach(t),KZo=r(Txe," (BEiT model)"),Txe.forEach(t),ZZo=i(b0),HT=n(b0,"LI",{});var Mxe=s(HT);spe=n(Mxe,"STRONG",{});var Hmt=s(spe);eer=r(Hmt,"data2vec-vision"),Hmt.forEach(t),oer=r(Mxe," \u2014 "),tX=n(Mxe,"A",{href:!0});var Umt=s(tX);rer=r(Umt,"Data2VecVisionForSemanticSegmentation"),Umt.forEach(t),ter=r(Mxe," (Data2VecVision model)"),Mxe.forEach(t),aer=i(b0),UT=n(b0,"LI",{});var Exe=s(UT);lpe=n(Exe,"STRONG",{});var Jmt=s(lpe);ner=r(Jmt,"dpt"),Jmt.forEach(t),ser=r(Exe," \u2014 "),aX=n(Exe,"A",{href:!0});var Ymt=s(aX);ler=r(Ymt,"DPTForSemanticSegmentation"),Ymt.forEach(t),ier=r(Exe," (DPT model)"),Exe.forEach(t),der=i(b0),JT=n(b0,"LI",{});var Cxe=s(JT);ipe=n(Cxe,"STRONG",{});var Kmt=s(ipe);cer=r(Kmt,"segformer"),Kmt.forEach(t),mer=r(Cxe," \u2014 "),nX=n(Cxe,"A",{href:!0});var Zmt=s(nX);fer=r(Zmt,"SegformerForSemanticSegmentation"),Zmt.forEach(t),ger=r(Cxe," (SegFormer model)"),Cxe.forEach(t),b0.forEach(t),her=i(_a),YT=n(_a,"P",{});var wxe=s(YT);uer=r(wxe,"The model is set in evaluation mode by default using "),dpe=n(wxe,"CODE",{});var eft=s(dpe);per=r(eft,"model.eval()"),eft.forEach(t),_er=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(wxe,"CODE",{});var oft=s(cpe);ber=r(oft,"model.train()"),oft.forEach(t),wxe.forEach(t),Fer=i(_a),T(KT.$$.fragment,_a),_a.forEach(t),tl.forEach(t),iPe=i(m),Ld=n(m,"H2",{class:!0});var fqe=s(Ld);ZT=n(fqe,"A",{id:!0,class:!0,href:!0});var rft=s(ZT);mpe=n(rft,"SPAN",{});var tft=s(mpe);T(YL.$$.fragment,tft),tft.forEach(t),rft.forEach(t),ver=i(fqe),fpe=n(fqe,"SPAN",{});var aft=s(fpe);Ter=r(aft,"AutoModelForInstanceSegmentation"),aft.forEach(t),fqe.forEach(t),dPe=i(m),Jo=n(m,"DIV",{class:!0});var al=s(Jo);T(KL.$$.fragment,al),Mer=i(al),xd=n(al,"P",{});var rK=s(xd);Eer=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sX=n(rK,"A",{href:!0});var nft=s(sX);Cer=r(nft,"from_pretrained()"),nft.forEach(t),wer=r(rK," class method or the "),lX=n(rK,"A",{href:!0});var sft=s(lX);Aer=r(sft,"from_config()"),sft.forEach(t),yer=r(rK,` class
method.`),rK.forEach(t),Ler=i(al),ZL=n(al,"P",{});var gqe=s(ZL);xer=r(gqe,"This class cannot be instantiated directly using "),gpe=n(gqe,"CODE",{});var lft=s(gpe);$er=r(lft,"__init__()"),lft.forEach(t),ker=r(gqe," (throws an error)."),gqe.forEach(t),Ser=i(al),Mt=n(al,"DIV",{class:!0});var F0=s(Mt);T(e8.$$.fragment,F0),Rer=i(F0),hpe=n(F0,"P",{});var ift=s(hpe);Ber=r(ift,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ift.forEach(t),Per=i(F0),$d=n(F0,"P",{});var tK=s($d);Ier=r(tK,`Note:
Loading a model from its configuration file does `),upe=n(tK,"STRONG",{});var dft=s(upe);qer=r(dft,"not"),dft.forEach(t),Ner=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(tK,"A",{href:!0});var cft=s(iX);jer=r(cft,"from_pretrained()"),cft.forEach(t),Der=r(tK," to load the model weights."),tK.forEach(t),Ger=i(F0),T(eM.$$.fragment,F0),F0.forEach(t),Oer=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(o8.$$.fragment,ba),Ver=i(ba),ppe=n(ba,"P",{});var mft=s(ppe);Xer=r(mft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mft.forEach(t),zer=i(ba),Ha=n(ba,"P",{});var v0=s(Ha);Qer=r(v0,"The model class to instantiate is selected based on the "),_pe=n(v0,"CODE",{});var fft=s(_pe);Wer=r(fft,"model_type"),fft.forEach(t),Her=r(v0,` property of the config object (either
passed as an argument or loaded from `),bpe=n(v0,"CODE",{});var gft=s(bpe);Uer=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),Jer=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(v0,"CODE",{});var hft=s(Fpe);Yer=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),Ker=r(v0,":"),v0.forEach(t),Zer=i(ba),vpe=n(ba,"UL",{});var uft=s(vpe);oM=n(uft,"LI",{});var Axe=s(oM);Tpe=n(Axe,"STRONG",{});var pft=s(Tpe);eor=r(pft,"maskformer"),pft.forEach(t),oor=r(Axe," \u2014 "),dX=n(Axe,"A",{href:!0});var _ft=s(dX);ror=r(_ft,"MaskFormerForInstanceSegmentation"),_ft.forEach(t),tor=r(Axe," (MaskFormer model)"),Axe.forEach(t),uft.forEach(t),aor=i(ba),rM=n(ba,"P",{});var yxe=s(rM);nor=r(yxe,"The model is set in evaluation mode by default using "),Mpe=n(yxe,"CODE",{});var bft=s(Mpe);sor=r(bft,"model.eval()"),bft.forEach(t),lor=r(yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(yxe,"CODE",{});var Fft=s(Epe);ior=r(Fft,"model.train()"),Fft.forEach(t),yxe.forEach(t),dor=i(ba),T(tM.$$.fragment,ba),ba.forEach(t),al.forEach(t),cPe=i(m),kd=n(m,"H2",{class:!0});var hqe=s(kd);aM=n(hqe,"A",{id:!0,class:!0,href:!0});var vft=s(aM);Cpe=n(vft,"SPAN",{});var Tft=s(Cpe);T(r8.$$.fragment,Tft),Tft.forEach(t),vft.forEach(t),cor=i(hqe),wpe=n(hqe,"SPAN",{});var Mft=s(wpe);mor=r(Mft,"TFAutoModel"),Mft.forEach(t),hqe.forEach(t),mPe=i(m),Yo=n(m,"DIV",{class:!0});var nl=s(Yo);T(t8.$$.fragment,nl),gor=i(nl),Sd=n(nl,"P",{});var aK=s(Sd);hor=r(aK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cX=n(aK,"A",{href:!0});var Eft=s(cX);uor=r(Eft,"from_pretrained()"),Eft.forEach(t),por=r(aK," class method or the "),mX=n(aK,"A",{href:!0});var Cft=s(mX);_or=r(Cft,"from_config()"),Cft.forEach(t),bor=r(aK,` class
method.`),aK.forEach(t),For=i(nl),a8=n(nl,"P",{});var uqe=s(a8);vor=r(uqe,"This class cannot be instantiated directly using "),Ape=n(uqe,"CODE",{});var wft=s(Ape);Tor=r(wft,"__init__()"),wft.forEach(t),Mor=r(uqe," (throws an error)."),uqe.forEach(t),Eor=i(nl),Et=n(nl,"DIV",{class:!0});var T0=s(Et);T(n8.$$.fragment,T0),Cor=i(T0),ype=n(T0,"P",{});var Aft=s(ype);wor=r(Aft,"Instantiates one of the base model classes of the library from a configuration."),Aft.forEach(t),Aor=i(T0),Rd=n(T0,"P",{});var nK=s(Rd);yor=r(nK,`Note:
Loading a model from its configuration file does `),Lpe=n(nK,"STRONG",{});var yft=s(Lpe);Lor=r(yft,"not"),yft.forEach(t),xor=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(nK,"A",{href:!0});var Lft=s(fX);$or=r(Lft,"from_pretrained()"),Lft.forEach(t),kor=r(nK," to load the model weights."),nK.forEach(t),Sor=i(T0),T(nM.$$.fragment,T0),T0.forEach(t),Ror=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(s8.$$.fragment,sl),Bor=i(sl),xpe=n(sl,"P",{});var xft=s(xpe);Por=r(xft,"Instantiate one of the base model classes of the library from a pretrained model."),xft.forEach(t),Ior=i(sl),Ua=n(sl,"P",{});var M0=s(Ua);qor=r(M0,"The model class to instantiate is selected based on the "),$pe=n(M0,"CODE",{});var $ft=s($pe);Nor=r($ft,"model_type"),$ft.forEach(t),jor=r(M0,` property of the config object (either
passed as an argument or loaded from `),kpe=n(M0,"CODE",{});var kft=s(kpe);Dor=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Gor=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(M0,"CODE",{});var Sft=s(Spe);Oor=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Vor=r(M0,":"),M0.forEach(t),Xor=i(sl),j=n(sl,"UL",{});var D=s(j);sM=n(D,"LI",{});var Lxe=s(sM);Rpe=n(Lxe,"STRONG",{});var Rft=s(Rpe);zor=r(Rft,"albert"),Rft.forEach(t),Qor=r(Lxe," \u2014 "),gX=n(Lxe,"A",{href:!0});var Bft=s(gX);Wor=r(Bft,"TFAlbertModel"),Bft.forEach(t),Hor=r(Lxe," (ALBERT model)"),Lxe.forEach(t),Uor=i(D),lM=n(D,"LI",{});var xxe=s(lM);Bpe=n(xxe,"STRONG",{});var Pft=s(Bpe);Jor=r(Pft,"bart"),Pft.forEach(t),Yor=r(xxe," \u2014 "),hX=n(xxe,"A",{href:!0});var Ift=s(hX);Kor=r(Ift,"TFBartModel"),Ift.forEach(t),Zor=r(xxe," (BART model)"),xxe.forEach(t),err=i(D),iM=n(D,"LI",{});var $xe=s(iM);Ppe=n($xe,"STRONG",{});var qft=s(Ppe);orr=r(qft,"bert"),qft.forEach(t),rrr=r($xe," \u2014 "),uX=n($xe,"A",{href:!0});var Nft=s(uX);trr=r(Nft,"TFBertModel"),Nft.forEach(t),arr=r($xe," (BERT model)"),$xe.forEach(t),nrr=i(D),dM=n(D,"LI",{});var kxe=s(dM);Ipe=n(kxe,"STRONG",{});var jft=s(Ipe);srr=r(jft,"blenderbot"),jft.forEach(t),lrr=r(kxe," \u2014 "),pX=n(kxe,"A",{href:!0});var Dft=s(pX);irr=r(Dft,"TFBlenderbotModel"),Dft.forEach(t),drr=r(kxe," (Blenderbot model)"),kxe.forEach(t),crr=i(D),cM=n(D,"LI",{});var Sxe=s(cM);qpe=n(Sxe,"STRONG",{});var Gft=s(qpe);mrr=r(Gft,"blenderbot-small"),Gft.forEach(t),frr=r(Sxe," \u2014 "),_X=n(Sxe,"A",{href:!0});var Oft=s(_X);grr=r(Oft,"TFBlenderbotSmallModel"),Oft.forEach(t),hrr=r(Sxe," (BlenderbotSmall model)"),Sxe.forEach(t),urr=i(D),mM=n(D,"LI",{});var Rxe=s(mM);Npe=n(Rxe,"STRONG",{});var Vft=s(Npe);prr=r(Vft,"camembert"),Vft.forEach(t),_rr=r(Rxe," \u2014 "),bX=n(Rxe,"A",{href:!0});var Xft=s(bX);brr=r(Xft,"TFCamembertModel"),Xft.forEach(t),Frr=r(Rxe," (CamemBERT model)"),Rxe.forEach(t),vrr=i(D),fM=n(D,"LI",{});var Bxe=s(fM);jpe=n(Bxe,"STRONG",{});var zft=s(jpe);Trr=r(zft,"clip"),zft.forEach(t),Mrr=r(Bxe," \u2014 "),FX=n(Bxe,"A",{href:!0});var Qft=s(FX);Err=r(Qft,"TFCLIPModel"),Qft.forEach(t),Crr=r(Bxe," (CLIP model)"),Bxe.forEach(t),wrr=i(D),gM=n(D,"LI",{});var Pxe=s(gM);Dpe=n(Pxe,"STRONG",{});var Wft=s(Dpe);Arr=r(Wft,"convbert"),Wft.forEach(t),yrr=r(Pxe," \u2014 "),vX=n(Pxe,"A",{href:!0});var Hft=s(vX);Lrr=r(Hft,"TFConvBertModel"),Hft.forEach(t),xrr=r(Pxe," (ConvBERT model)"),Pxe.forEach(t),$rr=i(D),hM=n(D,"LI",{});var Ixe=s(hM);Gpe=n(Ixe,"STRONG",{});var Uft=s(Gpe);krr=r(Uft,"convnext"),Uft.forEach(t),Srr=r(Ixe," \u2014 "),TX=n(Ixe,"A",{href:!0});var Jft=s(TX);Rrr=r(Jft,"TFConvNextModel"),Jft.forEach(t),Brr=r(Ixe," (ConvNext model)"),Ixe.forEach(t),Prr=i(D),uM=n(D,"LI",{});var qxe=s(uM);Ope=n(qxe,"STRONG",{});var Yft=s(Ope);Irr=r(Yft,"ctrl"),Yft.forEach(t),qrr=r(qxe," \u2014 "),MX=n(qxe,"A",{href:!0});var Kft=s(MX);Nrr=r(Kft,"TFCTRLModel"),Kft.forEach(t),jrr=r(qxe," (CTRL model)"),qxe.forEach(t),Drr=i(D),pM=n(D,"LI",{});var Nxe=s(pM);Vpe=n(Nxe,"STRONG",{});var Zft=s(Vpe);Grr=r(Zft,"deberta"),Zft.forEach(t),Orr=r(Nxe," \u2014 "),EX=n(Nxe,"A",{href:!0});var egt=s(EX);Vrr=r(egt,"TFDebertaModel"),egt.forEach(t),Xrr=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),zrr=i(D),_M=n(D,"LI",{});var jxe=s(_M);Xpe=n(jxe,"STRONG",{});var ogt=s(Xpe);Qrr=r(ogt,"deberta-v2"),ogt.forEach(t),Wrr=r(jxe," \u2014 "),CX=n(jxe,"A",{href:!0});var rgt=s(CX);Hrr=r(rgt,"TFDebertaV2Model"),rgt.forEach(t),Urr=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),Jrr=i(D),bM=n(D,"LI",{});var Dxe=s(bM);zpe=n(Dxe,"STRONG",{});var tgt=s(zpe);Yrr=r(tgt,"distilbert"),tgt.forEach(t),Krr=r(Dxe," \u2014 "),wX=n(Dxe,"A",{href:!0});var agt=s(wX);Zrr=r(agt,"TFDistilBertModel"),agt.forEach(t),etr=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),otr=i(D),FM=n(D,"LI",{});var Gxe=s(FM);Qpe=n(Gxe,"STRONG",{});var ngt=s(Qpe);rtr=r(ngt,"dpr"),ngt.forEach(t),ttr=r(Gxe," \u2014 "),AX=n(Gxe,"A",{href:!0});var sgt=s(AX);atr=r(sgt,"TFDPRQuestionEncoder"),sgt.forEach(t),ntr=r(Gxe," (DPR model)"),Gxe.forEach(t),str=i(D),vM=n(D,"LI",{});var Oxe=s(vM);Wpe=n(Oxe,"STRONG",{});var lgt=s(Wpe);ltr=r(lgt,"electra"),lgt.forEach(t),itr=r(Oxe," \u2014 "),yX=n(Oxe,"A",{href:!0});var igt=s(yX);dtr=r(igt,"TFElectraModel"),igt.forEach(t),ctr=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),mtr=i(D),TM=n(D,"LI",{});var Vxe=s(TM);Hpe=n(Vxe,"STRONG",{});var dgt=s(Hpe);ftr=r(dgt,"flaubert"),dgt.forEach(t),gtr=r(Vxe," \u2014 "),LX=n(Vxe,"A",{href:!0});var cgt=s(LX);htr=r(cgt,"TFFlaubertModel"),cgt.forEach(t),utr=r(Vxe," (FlauBERT model)"),Vxe.forEach(t),ptr=i(D),$s=n(D,"LI",{});var S9=s($s);Upe=n(S9,"STRONG",{});var mgt=s(Upe);_tr=r(mgt,"funnel"),mgt.forEach(t),btr=r(S9," \u2014 "),xX=n(S9,"A",{href:!0});var fgt=s(xX);Ftr=r(fgt,"TFFunnelModel"),fgt.forEach(t),vtr=r(S9," or "),$X=n(S9,"A",{href:!0});var ggt=s($X);Ttr=r(ggt,"TFFunnelBaseModel"),ggt.forEach(t),Mtr=r(S9," (Funnel Transformer model)"),S9.forEach(t),Etr=i(D),MM=n(D,"LI",{});var Xxe=s(MM);Jpe=n(Xxe,"STRONG",{});var hgt=s(Jpe);Ctr=r(hgt,"gpt2"),hgt.forEach(t),wtr=r(Xxe," \u2014 "),kX=n(Xxe,"A",{href:!0});var ugt=s(kX);Atr=r(ugt,"TFGPT2Model"),ugt.forEach(t),ytr=r(Xxe," (OpenAI GPT-2 model)"),Xxe.forEach(t),Ltr=i(D),EM=n(D,"LI",{});var zxe=s(EM);Ype=n(zxe,"STRONG",{});var pgt=s(Ype);xtr=r(pgt,"gptj"),pgt.forEach(t),$tr=r(zxe," \u2014 "),SX=n(zxe,"A",{href:!0});var _gt=s(SX);ktr=r(_gt,"TFGPTJModel"),_gt.forEach(t),Str=r(zxe," (GPT-J model)"),zxe.forEach(t),Rtr=i(D),CM=n(D,"LI",{});var Qxe=s(CM);Kpe=n(Qxe,"STRONG",{});var bgt=s(Kpe);Btr=r(bgt,"hubert"),bgt.forEach(t),Ptr=r(Qxe," \u2014 "),RX=n(Qxe,"A",{href:!0});var Fgt=s(RX);Itr=r(Fgt,"TFHubertModel"),Fgt.forEach(t),qtr=r(Qxe," (Hubert model)"),Qxe.forEach(t),Ntr=i(D),wM=n(D,"LI",{});var Wxe=s(wM);Zpe=n(Wxe,"STRONG",{});var vgt=s(Zpe);jtr=r(vgt,"layoutlm"),vgt.forEach(t),Dtr=r(Wxe," \u2014 "),BX=n(Wxe,"A",{href:!0});var Tgt=s(BX);Gtr=r(Tgt,"TFLayoutLMModel"),Tgt.forEach(t),Otr=r(Wxe," (LayoutLM model)"),Wxe.forEach(t),Vtr=i(D),AM=n(D,"LI",{});var Hxe=s(AM);e_e=n(Hxe,"STRONG",{});var Mgt=s(e_e);Xtr=r(Mgt,"led"),Mgt.forEach(t),ztr=r(Hxe," \u2014 "),PX=n(Hxe,"A",{href:!0});var Egt=s(PX);Qtr=r(Egt,"TFLEDModel"),Egt.forEach(t),Wtr=r(Hxe," (LED model)"),Hxe.forEach(t),Htr=i(D),yM=n(D,"LI",{});var Uxe=s(yM);o_e=n(Uxe,"STRONG",{});var Cgt=s(o_e);Utr=r(Cgt,"longformer"),Cgt.forEach(t),Jtr=r(Uxe," \u2014 "),IX=n(Uxe,"A",{href:!0});var wgt=s(IX);Ytr=r(wgt,"TFLongformerModel"),wgt.forEach(t),Ktr=r(Uxe," (Longformer model)"),Uxe.forEach(t),Ztr=i(D),LM=n(D,"LI",{});var Jxe=s(LM);r_e=n(Jxe,"STRONG",{});var Agt=s(r_e);ear=r(Agt,"lxmert"),Agt.forEach(t),oar=r(Jxe," \u2014 "),qX=n(Jxe,"A",{href:!0});var ygt=s(qX);rar=r(ygt,"TFLxmertModel"),ygt.forEach(t),tar=r(Jxe," (LXMERT model)"),Jxe.forEach(t),aar=i(D),xM=n(D,"LI",{});var Yxe=s(xM);t_e=n(Yxe,"STRONG",{});var Lgt=s(t_e);nar=r(Lgt,"marian"),Lgt.forEach(t),sar=r(Yxe," \u2014 "),NX=n(Yxe,"A",{href:!0});var xgt=s(NX);lar=r(xgt,"TFMarianModel"),xgt.forEach(t),iar=r(Yxe," (Marian model)"),Yxe.forEach(t),dar=i(D),$M=n(D,"LI",{});var Kxe=s($M);a_e=n(Kxe,"STRONG",{});var $gt=s(a_e);car=r($gt,"mbart"),$gt.forEach(t),mar=r(Kxe," \u2014 "),jX=n(Kxe,"A",{href:!0});var kgt=s(jX);far=r(kgt,"TFMBartModel"),kgt.forEach(t),gar=r(Kxe," (mBART model)"),Kxe.forEach(t),har=i(D),kM=n(D,"LI",{});var Zxe=s(kM);n_e=n(Zxe,"STRONG",{});var Sgt=s(n_e);uar=r(Sgt,"mobilebert"),Sgt.forEach(t),par=r(Zxe," \u2014 "),DX=n(Zxe,"A",{href:!0});var Rgt=s(DX);_ar=r(Rgt,"TFMobileBertModel"),Rgt.forEach(t),bar=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),Far=i(D),SM=n(D,"LI",{});var e9e=s(SM);s_e=n(e9e,"STRONG",{});var Bgt=s(s_e);Tar=r(Bgt,"mpnet"),Bgt.forEach(t),Mar=r(e9e," \u2014 "),GX=n(e9e,"A",{href:!0});var Pgt=s(GX);Ear=r(Pgt,"TFMPNetModel"),Pgt.forEach(t),Car=r(e9e," (MPNet model)"),e9e.forEach(t),war=i(D),RM=n(D,"LI",{});var o9e=s(RM);l_e=n(o9e,"STRONG",{});var Igt=s(l_e);Aar=r(Igt,"mt5"),Igt.forEach(t),yar=r(o9e," \u2014 "),OX=n(o9e,"A",{href:!0});var qgt=s(OX);Lar=r(qgt,"TFMT5Model"),qgt.forEach(t),xar=r(o9e," (mT5 model)"),o9e.forEach(t),$ar=i(D),BM=n(D,"LI",{});var r9e=s(BM);i_e=n(r9e,"STRONG",{});var Ngt=s(i_e);kar=r(Ngt,"openai-gpt"),Ngt.forEach(t),Sar=r(r9e," \u2014 "),VX=n(r9e,"A",{href:!0});var jgt=s(VX);Rar=r(jgt,"TFOpenAIGPTModel"),jgt.forEach(t),Bar=r(r9e," (OpenAI GPT model)"),r9e.forEach(t),Par=i(D),PM=n(D,"LI",{});var t9e=s(PM);d_e=n(t9e,"STRONG",{});var Dgt=s(d_e);Iar=r(Dgt,"pegasus"),Dgt.forEach(t),qar=r(t9e," \u2014 "),XX=n(t9e,"A",{href:!0});var Ggt=s(XX);Nar=r(Ggt,"TFPegasusModel"),Ggt.forEach(t),jar=r(t9e," (Pegasus model)"),t9e.forEach(t),Dar=i(D),IM=n(D,"LI",{});var a9e=s(IM);c_e=n(a9e,"STRONG",{});var Ogt=s(c_e);Gar=r(Ogt,"rembert"),Ogt.forEach(t),Oar=r(a9e," \u2014 "),zX=n(a9e,"A",{href:!0});var Vgt=s(zX);Var=r(Vgt,"TFRemBertModel"),Vgt.forEach(t),Xar=r(a9e," (RemBERT model)"),a9e.forEach(t),zar=i(D),qM=n(D,"LI",{});var n9e=s(qM);m_e=n(n9e,"STRONG",{});var Xgt=s(m_e);Qar=r(Xgt,"roberta"),Xgt.forEach(t),War=r(n9e," \u2014 "),QX=n(n9e,"A",{href:!0});var zgt=s(QX);Har=r(zgt,"TFRobertaModel"),zgt.forEach(t),Uar=r(n9e," (RoBERTa model)"),n9e.forEach(t),Jar=i(D),NM=n(D,"LI",{});var s9e=s(NM);f_e=n(s9e,"STRONG",{});var Qgt=s(f_e);Yar=r(Qgt,"roformer"),Qgt.forEach(t),Kar=r(s9e," \u2014 "),WX=n(s9e,"A",{href:!0});var Wgt=s(WX);Zar=r(Wgt,"TFRoFormerModel"),Wgt.forEach(t),enr=r(s9e," (RoFormer model)"),s9e.forEach(t),onr=i(D),jM=n(D,"LI",{});var l9e=s(jM);g_e=n(l9e,"STRONG",{});var Hgt=s(g_e);rnr=r(Hgt,"speech_to_text"),Hgt.forEach(t),tnr=r(l9e," \u2014 "),HX=n(l9e,"A",{href:!0});var Ugt=s(HX);anr=r(Ugt,"TFSpeech2TextModel"),Ugt.forEach(t),nnr=r(l9e," (Speech2Text model)"),l9e.forEach(t),snr=i(D),DM=n(D,"LI",{});var i9e=s(DM);h_e=n(i9e,"STRONG",{});var Jgt=s(h_e);lnr=r(Jgt,"t5"),Jgt.forEach(t),inr=r(i9e," \u2014 "),UX=n(i9e,"A",{href:!0});var Ygt=s(UX);dnr=r(Ygt,"TFT5Model"),Ygt.forEach(t),cnr=r(i9e," (T5 model)"),i9e.forEach(t),mnr=i(D),GM=n(D,"LI",{});var d9e=s(GM);u_e=n(d9e,"STRONG",{});var Kgt=s(u_e);fnr=r(Kgt,"tapas"),Kgt.forEach(t),gnr=r(d9e," \u2014 "),JX=n(d9e,"A",{href:!0});var Zgt=s(JX);hnr=r(Zgt,"TFTapasModel"),Zgt.forEach(t),unr=r(d9e," (TAPAS model)"),d9e.forEach(t),pnr=i(D),OM=n(D,"LI",{});var c9e=s(OM);p_e=n(c9e,"STRONG",{});var eht=s(p_e);_nr=r(eht,"transfo-xl"),eht.forEach(t),bnr=r(c9e," \u2014 "),YX=n(c9e,"A",{href:!0});var oht=s(YX);Fnr=r(oht,"TFTransfoXLModel"),oht.forEach(t),vnr=r(c9e," (Transformer-XL model)"),c9e.forEach(t),Tnr=i(D),VM=n(D,"LI",{});var m9e=s(VM);__e=n(m9e,"STRONG",{});var rht=s(__e);Mnr=r(rht,"vit"),rht.forEach(t),Enr=r(m9e," \u2014 "),KX=n(m9e,"A",{href:!0});var tht=s(KX);Cnr=r(tht,"TFViTModel"),tht.forEach(t),wnr=r(m9e," (ViT model)"),m9e.forEach(t),Anr=i(D),XM=n(D,"LI",{});var f9e=s(XM);b_e=n(f9e,"STRONG",{});var aht=s(b_e);ynr=r(aht,"vit_mae"),aht.forEach(t),Lnr=r(f9e," \u2014 "),ZX=n(f9e,"A",{href:!0});var nht=s(ZX);xnr=r(nht,"TFViTMAEModel"),nht.forEach(t),$nr=r(f9e," (ViTMAE model)"),f9e.forEach(t),knr=i(D),zM=n(D,"LI",{});var g9e=s(zM);F_e=n(g9e,"STRONG",{});var sht=s(F_e);Snr=r(sht,"wav2vec2"),sht.forEach(t),Rnr=r(g9e," \u2014 "),ez=n(g9e,"A",{href:!0});var lht=s(ez);Bnr=r(lht,"TFWav2Vec2Model"),lht.forEach(t),Pnr=r(g9e," (Wav2Vec2 model)"),g9e.forEach(t),Inr=i(D),QM=n(D,"LI",{});var h9e=s(QM);v_e=n(h9e,"STRONG",{});var iht=s(v_e);qnr=r(iht,"xlm"),iht.forEach(t),Nnr=r(h9e," \u2014 "),oz=n(h9e,"A",{href:!0});var dht=s(oz);jnr=r(dht,"TFXLMModel"),dht.forEach(t),Dnr=r(h9e," (XLM model)"),h9e.forEach(t),Gnr=i(D),WM=n(D,"LI",{});var u9e=s(WM);T_e=n(u9e,"STRONG",{});var cht=s(T_e);Onr=r(cht,"xlm-roberta"),cht.forEach(t),Vnr=r(u9e," \u2014 "),rz=n(u9e,"A",{href:!0});var mht=s(rz);Xnr=r(mht,"TFXLMRobertaModel"),mht.forEach(t),znr=r(u9e," (XLM-RoBERTa model)"),u9e.forEach(t),Qnr=i(D),HM=n(D,"LI",{});var p9e=s(HM);M_e=n(p9e,"STRONG",{});var fht=s(M_e);Wnr=r(fht,"xlnet"),fht.forEach(t),Hnr=r(p9e," \u2014 "),tz=n(p9e,"A",{href:!0});var ght=s(tz);Unr=r(ght,"TFXLNetModel"),ght.forEach(t),Jnr=r(p9e," (XLNet model)"),p9e.forEach(t),D.forEach(t),Ynr=i(sl),T(UM.$$.fragment,sl),sl.forEach(t),nl.forEach(t),fPe=i(m),Bd=n(m,"H2",{class:!0});var pqe=s(Bd);JM=n(pqe,"A",{id:!0,class:!0,href:!0});var hht=s(JM);E_e=n(hht,"SPAN",{});var uht=s(E_e);T(l8.$$.fragment,uht),uht.forEach(t),hht.forEach(t),Knr=i(pqe),C_e=n(pqe,"SPAN",{});var pht=s(C_e);Znr=r(pht,"TFAutoModelForPreTraining"),pht.forEach(t),pqe.forEach(t),gPe=i(m),Ko=n(m,"DIV",{class:!0});var ll=s(Ko);T(i8.$$.fragment,ll),esr=i(ll),Pd=n(ll,"P",{});var sK=s(Pd);osr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),az=n(sK,"A",{href:!0});var _ht=s(az);rsr=r(_ht,"from_pretrained()"),_ht.forEach(t),tsr=r(sK," class method or the "),nz=n(sK,"A",{href:!0});var bht=s(nz);asr=r(bht,"from_config()"),bht.forEach(t),nsr=r(sK,` class
method.`),sK.forEach(t),ssr=i(ll),d8=n(ll,"P",{});var _qe=s(d8);lsr=r(_qe,"This class cannot be instantiated directly using "),w_e=n(_qe,"CODE",{});var Fht=s(w_e);isr=r(Fht,"__init__()"),Fht.forEach(t),dsr=r(_qe," (throws an error)."),_qe.forEach(t),csr=i(ll),Ct=n(ll,"DIV",{class:!0});var E0=s(Ct);T(c8.$$.fragment,E0),msr=i(E0),A_e=n(E0,"P",{});var vht=s(A_e);fsr=r(vht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vht.forEach(t),gsr=i(E0),Id=n(E0,"P",{});var lK=s(Id);hsr=r(lK,`Note:
Loading a model from its configuration file does `),y_e=n(lK,"STRONG",{});var Tht=s(y_e);usr=r(Tht,"not"),Tht.forEach(t),psr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(lK,"A",{href:!0});var Mht=s(sz);_sr=r(Mht,"from_pretrained()"),Mht.forEach(t),bsr=r(lK," to load the model weights."),lK.forEach(t),Fsr=i(E0),T(YM.$$.fragment,E0),E0.forEach(t),vsr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(m8.$$.fragment,il),Tsr=i(il),L_e=n(il,"P",{});var Eht=s(L_e);Msr=r(Eht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eht.forEach(t),Esr=i(il),Ja=n(il,"P",{});var C0=s(Ja);Csr=r(C0,"The model class to instantiate is selected based on the "),x_e=n(C0,"CODE",{});var Cht=s(x_e);wsr=r(Cht,"model_type"),Cht.forEach(t),Asr=r(C0,` property of the config object (either
passed as an argument or loaded from `),$_e=n(C0,"CODE",{});var wht=s($_e);ysr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),Lsr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(C0,"CODE",{});var Aht=s(k_e);xsr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),$sr=r(C0,":"),C0.forEach(t),ksr=i(il),ne=n(il,"UL",{});var le=s(ne);KM=n(le,"LI",{});var _9e=s(KM);S_e=n(_9e,"STRONG",{});var yht=s(S_e);Ssr=r(yht,"albert"),yht.forEach(t),Rsr=r(_9e," \u2014 "),lz=n(_9e,"A",{href:!0});var Lht=s(lz);Bsr=r(Lht,"TFAlbertForPreTraining"),Lht.forEach(t),Psr=r(_9e," (ALBERT model)"),_9e.forEach(t),Isr=i(le),ZM=n(le,"LI",{});var b9e=s(ZM);R_e=n(b9e,"STRONG",{});var xht=s(R_e);qsr=r(xht,"bart"),xht.forEach(t),Nsr=r(b9e," \u2014 "),iz=n(b9e,"A",{href:!0});var $ht=s(iz);jsr=r($ht,"TFBartForConditionalGeneration"),$ht.forEach(t),Dsr=r(b9e," (BART model)"),b9e.forEach(t),Gsr=i(le),e4=n(le,"LI",{});var F9e=s(e4);B_e=n(F9e,"STRONG",{});var kht=s(B_e);Osr=r(kht,"bert"),kht.forEach(t),Vsr=r(F9e," \u2014 "),dz=n(F9e,"A",{href:!0});var Sht=s(dz);Xsr=r(Sht,"TFBertForPreTraining"),Sht.forEach(t),zsr=r(F9e," (BERT model)"),F9e.forEach(t),Qsr=i(le),o4=n(le,"LI",{});var v9e=s(o4);P_e=n(v9e,"STRONG",{});var Rht=s(P_e);Wsr=r(Rht,"camembert"),Rht.forEach(t),Hsr=r(v9e," \u2014 "),cz=n(v9e,"A",{href:!0});var Bht=s(cz);Usr=r(Bht,"TFCamembertForMaskedLM"),Bht.forEach(t),Jsr=r(v9e," (CamemBERT model)"),v9e.forEach(t),Ysr=i(le),r4=n(le,"LI",{});var T9e=s(r4);I_e=n(T9e,"STRONG",{});var Pht=s(I_e);Ksr=r(Pht,"ctrl"),Pht.forEach(t),Zsr=r(T9e," \u2014 "),mz=n(T9e,"A",{href:!0});var Iht=s(mz);elr=r(Iht,"TFCTRLLMHeadModel"),Iht.forEach(t),olr=r(T9e," (CTRL model)"),T9e.forEach(t),rlr=i(le),t4=n(le,"LI",{});var M9e=s(t4);q_e=n(M9e,"STRONG",{});var qht=s(q_e);tlr=r(qht,"distilbert"),qht.forEach(t),alr=r(M9e," \u2014 "),fz=n(M9e,"A",{href:!0});var Nht=s(fz);nlr=r(Nht,"TFDistilBertForMaskedLM"),Nht.forEach(t),slr=r(M9e," (DistilBERT model)"),M9e.forEach(t),llr=i(le),a4=n(le,"LI",{});var E9e=s(a4);N_e=n(E9e,"STRONG",{});var jht=s(N_e);ilr=r(jht,"electra"),jht.forEach(t),dlr=r(E9e," \u2014 "),gz=n(E9e,"A",{href:!0});var Dht=s(gz);clr=r(Dht,"TFElectraForPreTraining"),Dht.forEach(t),mlr=r(E9e," (ELECTRA model)"),E9e.forEach(t),flr=i(le),n4=n(le,"LI",{});var C9e=s(n4);j_e=n(C9e,"STRONG",{});var Ght=s(j_e);glr=r(Ght,"flaubert"),Ght.forEach(t),hlr=r(C9e," \u2014 "),hz=n(C9e,"A",{href:!0});var Oht=s(hz);ulr=r(Oht,"TFFlaubertWithLMHeadModel"),Oht.forEach(t),plr=r(C9e," (FlauBERT model)"),C9e.forEach(t),_lr=i(le),s4=n(le,"LI",{});var w9e=s(s4);D_e=n(w9e,"STRONG",{});var Vht=s(D_e);blr=r(Vht,"funnel"),Vht.forEach(t),Flr=r(w9e," \u2014 "),uz=n(w9e,"A",{href:!0});var Xht=s(uz);vlr=r(Xht,"TFFunnelForPreTraining"),Xht.forEach(t),Tlr=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),Mlr=i(le),l4=n(le,"LI",{});var A9e=s(l4);G_e=n(A9e,"STRONG",{});var zht=s(G_e);Elr=r(zht,"gpt2"),zht.forEach(t),Clr=r(A9e," \u2014 "),pz=n(A9e,"A",{href:!0});var Qht=s(pz);wlr=r(Qht,"TFGPT2LMHeadModel"),Qht.forEach(t),Alr=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),ylr=i(le),i4=n(le,"LI",{});var y9e=s(i4);O_e=n(y9e,"STRONG",{});var Wht=s(O_e);Llr=r(Wht,"layoutlm"),Wht.forEach(t),xlr=r(y9e," \u2014 "),_z=n(y9e,"A",{href:!0});var Hht=s(_z);$lr=r(Hht,"TFLayoutLMForMaskedLM"),Hht.forEach(t),klr=r(y9e," (LayoutLM model)"),y9e.forEach(t),Slr=i(le),d4=n(le,"LI",{});var L9e=s(d4);V_e=n(L9e,"STRONG",{});var Uht=s(V_e);Rlr=r(Uht,"lxmert"),Uht.forEach(t),Blr=r(L9e," \u2014 "),bz=n(L9e,"A",{href:!0});var Jht=s(bz);Plr=r(Jht,"TFLxmertForPreTraining"),Jht.forEach(t),Ilr=r(L9e," (LXMERT model)"),L9e.forEach(t),qlr=i(le),c4=n(le,"LI",{});var x9e=s(c4);X_e=n(x9e,"STRONG",{});var Yht=s(X_e);Nlr=r(Yht,"mobilebert"),Yht.forEach(t),jlr=r(x9e," \u2014 "),Fz=n(x9e,"A",{href:!0});var Kht=s(Fz);Dlr=r(Kht,"TFMobileBertForPreTraining"),Kht.forEach(t),Glr=r(x9e," (MobileBERT model)"),x9e.forEach(t),Olr=i(le),m4=n(le,"LI",{});var $9e=s(m4);z_e=n($9e,"STRONG",{});var Zht=s(z_e);Vlr=r(Zht,"mpnet"),Zht.forEach(t),Xlr=r($9e," \u2014 "),vz=n($9e,"A",{href:!0});var eut=s(vz);zlr=r(eut,"TFMPNetForMaskedLM"),eut.forEach(t),Qlr=r($9e," (MPNet model)"),$9e.forEach(t),Wlr=i(le),f4=n(le,"LI",{});var k9e=s(f4);Q_e=n(k9e,"STRONG",{});var out=s(Q_e);Hlr=r(out,"openai-gpt"),out.forEach(t),Ulr=r(k9e," \u2014 "),Tz=n(k9e,"A",{href:!0});var rut=s(Tz);Jlr=r(rut,"TFOpenAIGPTLMHeadModel"),rut.forEach(t),Ylr=r(k9e," (OpenAI GPT model)"),k9e.forEach(t),Klr=i(le),g4=n(le,"LI",{});var S9e=s(g4);W_e=n(S9e,"STRONG",{});var tut=s(W_e);Zlr=r(tut,"roberta"),tut.forEach(t),eir=r(S9e," \u2014 "),Mz=n(S9e,"A",{href:!0});var aut=s(Mz);oir=r(aut,"TFRobertaForMaskedLM"),aut.forEach(t),rir=r(S9e," (RoBERTa model)"),S9e.forEach(t),tir=i(le),h4=n(le,"LI",{});var R9e=s(h4);H_e=n(R9e,"STRONG",{});var nut=s(H_e);air=r(nut,"t5"),nut.forEach(t),nir=r(R9e," \u2014 "),Ez=n(R9e,"A",{href:!0});var sut=s(Ez);sir=r(sut,"TFT5ForConditionalGeneration"),sut.forEach(t),lir=r(R9e," (T5 model)"),R9e.forEach(t),iir=i(le),u4=n(le,"LI",{});var B9e=s(u4);U_e=n(B9e,"STRONG",{});var lut=s(U_e);dir=r(lut,"tapas"),lut.forEach(t),cir=r(B9e," \u2014 "),Cz=n(B9e,"A",{href:!0});var iut=s(Cz);mir=r(iut,"TFTapasForMaskedLM"),iut.forEach(t),fir=r(B9e," (TAPAS model)"),B9e.forEach(t),gir=i(le),p4=n(le,"LI",{});var P9e=s(p4);J_e=n(P9e,"STRONG",{});var dut=s(J_e);hir=r(dut,"transfo-xl"),dut.forEach(t),uir=r(P9e," \u2014 "),wz=n(P9e,"A",{href:!0});var cut=s(wz);pir=r(cut,"TFTransfoXLLMHeadModel"),cut.forEach(t),_ir=r(P9e," (Transformer-XL model)"),P9e.forEach(t),bir=i(le),_4=n(le,"LI",{});var I9e=s(_4);Y_e=n(I9e,"STRONG",{});var mut=s(Y_e);Fir=r(mut,"vit_mae"),mut.forEach(t),vir=r(I9e," \u2014 "),Az=n(I9e,"A",{href:!0});var fut=s(Az);Tir=r(fut,"TFViTMAEForPreTraining"),fut.forEach(t),Mir=r(I9e," (ViTMAE model)"),I9e.forEach(t),Eir=i(le),b4=n(le,"LI",{});var q9e=s(b4);K_e=n(q9e,"STRONG",{});var gut=s(K_e);Cir=r(gut,"xlm"),gut.forEach(t),wir=r(q9e," \u2014 "),yz=n(q9e,"A",{href:!0});var hut=s(yz);Air=r(hut,"TFXLMWithLMHeadModel"),hut.forEach(t),yir=r(q9e," (XLM model)"),q9e.forEach(t),Lir=i(le),F4=n(le,"LI",{});var N9e=s(F4);Z_e=n(N9e,"STRONG",{});var uut=s(Z_e);xir=r(uut,"xlm-roberta"),uut.forEach(t),$ir=r(N9e," \u2014 "),Lz=n(N9e,"A",{href:!0});var put=s(Lz);kir=r(put,"TFXLMRobertaForMaskedLM"),put.forEach(t),Sir=r(N9e," (XLM-RoBERTa model)"),N9e.forEach(t),Rir=i(le),v4=n(le,"LI",{});var j9e=s(v4);ebe=n(j9e,"STRONG",{});var _ut=s(ebe);Bir=r(_ut,"xlnet"),_ut.forEach(t),Pir=r(j9e," \u2014 "),xz=n(j9e,"A",{href:!0});var but=s(xz);Iir=r(but,"TFXLNetLMHeadModel"),but.forEach(t),qir=r(j9e," (XLNet model)"),j9e.forEach(t),le.forEach(t),Nir=i(il),T(T4.$$.fragment,il),il.forEach(t),ll.forEach(t),hPe=i(m),qd=n(m,"H2",{class:!0});var bqe=s(qd);M4=n(bqe,"A",{id:!0,class:!0,href:!0});var Fut=s(M4);obe=n(Fut,"SPAN",{});var vut=s(obe);T(f8.$$.fragment,vut),vut.forEach(t),Fut.forEach(t),jir=i(bqe),rbe=n(bqe,"SPAN",{});var Tut=s(rbe);Dir=r(Tut,"TFAutoModelForCausalLM"),Tut.forEach(t),bqe.forEach(t),uPe=i(m),Zo=n(m,"DIV",{class:!0});var dl=s(Zo);T(g8.$$.fragment,dl),Gir=i(dl),Nd=n(dl,"P",{});var iK=s(Nd);Oir=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$z=n(iK,"A",{href:!0});var Mut=s($z);Vir=r(Mut,"from_pretrained()"),Mut.forEach(t),Xir=r(iK," class method or the "),kz=n(iK,"A",{href:!0});var Eut=s(kz);zir=r(Eut,"from_config()"),Eut.forEach(t),Qir=r(iK,` class
method.`),iK.forEach(t),Wir=i(dl),h8=n(dl,"P",{});var Fqe=s(h8);Hir=r(Fqe,"This class cannot be instantiated directly using "),tbe=n(Fqe,"CODE",{});var Cut=s(tbe);Uir=r(Cut,"__init__()"),Cut.forEach(t),Jir=r(Fqe," (throws an error)."),Fqe.forEach(t),Yir=i(dl),wt=n(dl,"DIV",{class:!0});var w0=s(wt);T(u8.$$.fragment,w0),Kir=i(w0),abe=n(w0,"P",{});var wut=s(abe);Zir=r(wut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wut.forEach(t),edr=i(w0),jd=n(w0,"P",{});var dK=s(jd);odr=r(dK,`Note:
Loading a model from its configuration file does `),nbe=n(dK,"STRONG",{});var Aut=s(nbe);rdr=r(Aut,"not"),Aut.forEach(t),tdr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(dK,"A",{href:!0});var yut=s(Sz);adr=r(yut,"from_pretrained()"),yut.forEach(t),ndr=r(dK," to load the model weights."),dK.forEach(t),sdr=i(w0),T(E4.$$.fragment,w0),w0.forEach(t),ldr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(p8.$$.fragment,cl),idr=i(cl),sbe=n(cl,"P",{});var Lut=s(sbe);ddr=r(Lut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lut.forEach(t),cdr=i(cl),Ya=n(cl,"P",{});var A0=s(Ya);mdr=r(A0,"The model class to instantiate is selected based on the "),lbe=n(A0,"CODE",{});var xut=s(lbe);fdr=r(xut,"model_type"),xut.forEach(t),gdr=r(A0,` property of the config object (either
passed as an argument or loaded from `),ibe=n(A0,"CODE",{});var $ut=s(ibe);hdr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),udr=r(A0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(A0,"CODE",{});var kut=s(dbe);pdr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),_dr=r(A0,":"),A0.forEach(t),bdr=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);C4=n(Ce,"LI",{});var D9e=s(C4);cbe=n(D9e,"STRONG",{});var Sut=s(cbe);Fdr=r(Sut,"bert"),Sut.forEach(t),vdr=r(D9e," \u2014 "),Rz=n(D9e,"A",{href:!0});var Rut=s(Rz);Tdr=r(Rut,"TFBertLMHeadModel"),Rut.forEach(t),Mdr=r(D9e," (BERT model)"),D9e.forEach(t),Edr=i(Ce),w4=n(Ce,"LI",{});var G9e=s(w4);mbe=n(G9e,"STRONG",{});var But=s(mbe);Cdr=r(But,"camembert"),But.forEach(t),wdr=r(G9e," \u2014 "),Bz=n(G9e,"A",{href:!0});var Put=s(Bz);Adr=r(Put,"TFCamembertForCausalLM"),Put.forEach(t),ydr=r(G9e," (CamemBERT model)"),G9e.forEach(t),Ldr=i(Ce),A4=n(Ce,"LI",{});var O9e=s(A4);fbe=n(O9e,"STRONG",{});var Iut=s(fbe);xdr=r(Iut,"ctrl"),Iut.forEach(t),$dr=r(O9e," \u2014 "),Pz=n(O9e,"A",{href:!0});var qut=s(Pz);kdr=r(qut,"TFCTRLLMHeadModel"),qut.forEach(t),Sdr=r(O9e," (CTRL model)"),O9e.forEach(t),Rdr=i(Ce),y4=n(Ce,"LI",{});var V9e=s(y4);gbe=n(V9e,"STRONG",{});var Nut=s(gbe);Bdr=r(Nut,"gpt2"),Nut.forEach(t),Pdr=r(V9e," \u2014 "),Iz=n(V9e,"A",{href:!0});var jut=s(Iz);Idr=r(jut,"TFGPT2LMHeadModel"),jut.forEach(t),qdr=r(V9e," (OpenAI GPT-2 model)"),V9e.forEach(t),Ndr=i(Ce),L4=n(Ce,"LI",{});var X9e=s(L4);hbe=n(X9e,"STRONG",{});var Dut=s(hbe);jdr=r(Dut,"gptj"),Dut.forEach(t),Ddr=r(X9e," \u2014 "),qz=n(X9e,"A",{href:!0});var Gut=s(qz);Gdr=r(Gut,"TFGPTJForCausalLM"),Gut.forEach(t),Odr=r(X9e," (GPT-J model)"),X9e.forEach(t),Vdr=i(Ce),x4=n(Ce,"LI",{});var z9e=s(x4);ube=n(z9e,"STRONG",{});var Out=s(ube);Xdr=r(Out,"openai-gpt"),Out.forEach(t),zdr=r(z9e," \u2014 "),Nz=n(z9e,"A",{href:!0});var Vut=s(Nz);Qdr=r(Vut,"TFOpenAIGPTLMHeadModel"),Vut.forEach(t),Wdr=r(z9e," (OpenAI GPT model)"),z9e.forEach(t),Hdr=i(Ce),$4=n(Ce,"LI",{});var Q9e=s($4);pbe=n(Q9e,"STRONG",{});var Xut=s(pbe);Udr=r(Xut,"rembert"),Xut.forEach(t),Jdr=r(Q9e," \u2014 "),jz=n(Q9e,"A",{href:!0});var zut=s(jz);Ydr=r(zut,"TFRemBertForCausalLM"),zut.forEach(t),Kdr=r(Q9e," (RemBERT model)"),Q9e.forEach(t),Zdr=i(Ce),k4=n(Ce,"LI",{});var W9e=s(k4);_be=n(W9e,"STRONG",{});var Qut=s(_be);ecr=r(Qut,"roberta"),Qut.forEach(t),ocr=r(W9e," \u2014 "),Dz=n(W9e,"A",{href:!0});var Wut=s(Dz);rcr=r(Wut,"TFRobertaForCausalLM"),Wut.forEach(t),tcr=r(W9e," (RoBERTa model)"),W9e.forEach(t),acr=i(Ce),S4=n(Ce,"LI",{});var H9e=s(S4);bbe=n(H9e,"STRONG",{});var Hut=s(bbe);ncr=r(Hut,"roformer"),Hut.forEach(t),scr=r(H9e," \u2014 "),Gz=n(H9e,"A",{href:!0});var Uut=s(Gz);lcr=r(Uut,"TFRoFormerForCausalLM"),Uut.forEach(t),icr=r(H9e," (RoFormer model)"),H9e.forEach(t),dcr=i(Ce),R4=n(Ce,"LI",{});var U9e=s(R4);Fbe=n(U9e,"STRONG",{});var Jut=s(Fbe);ccr=r(Jut,"transfo-xl"),Jut.forEach(t),mcr=r(U9e," \u2014 "),Oz=n(U9e,"A",{href:!0});var Yut=s(Oz);fcr=r(Yut,"TFTransfoXLLMHeadModel"),Yut.forEach(t),gcr=r(U9e," (Transformer-XL model)"),U9e.forEach(t),hcr=i(Ce),B4=n(Ce,"LI",{});var J9e=s(B4);vbe=n(J9e,"STRONG",{});var Kut=s(vbe);ucr=r(Kut,"xlm"),Kut.forEach(t),pcr=r(J9e," \u2014 "),Vz=n(J9e,"A",{href:!0});var Zut=s(Vz);_cr=r(Zut,"TFXLMWithLMHeadModel"),Zut.forEach(t),bcr=r(J9e," (XLM model)"),J9e.forEach(t),Fcr=i(Ce),P4=n(Ce,"LI",{});var Y9e=s(P4);Tbe=n(Y9e,"STRONG",{});var ept=s(Tbe);vcr=r(ept,"xlnet"),ept.forEach(t),Tcr=r(Y9e," \u2014 "),Xz=n(Y9e,"A",{href:!0});var opt=s(Xz);Mcr=r(opt,"TFXLNetLMHeadModel"),opt.forEach(t),Ecr=r(Y9e," (XLNet model)"),Y9e.forEach(t),Ce.forEach(t),Ccr=i(cl),T(I4.$$.fragment,cl),cl.forEach(t),dl.forEach(t),pPe=i(m),Dd=n(m,"H2",{class:!0});var vqe=s(Dd);q4=n(vqe,"A",{id:!0,class:!0,href:!0});var rpt=s(q4);Mbe=n(rpt,"SPAN",{});var tpt=s(Mbe);T(_8.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),wcr=i(vqe),Ebe=n(vqe,"SPAN",{});var apt=s(Ebe);Acr=r(apt,"TFAutoModelForImageClassification"),apt.forEach(t),vqe.forEach(t),_Pe=i(m),er=n(m,"DIV",{class:!0});var ml=s(er);T(b8.$$.fragment,ml),ycr=i(ml),Gd=n(ml,"P",{});var cK=s(Gd);Lcr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zz=n(cK,"A",{href:!0});var npt=s(zz);xcr=r(npt,"from_pretrained()"),npt.forEach(t),$cr=r(cK," class method or the "),Qz=n(cK,"A",{href:!0});var spt=s(Qz);kcr=r(spt,"from_config()"),spt.forEach(t),Scr=r(cK,` class
method.`),cK.forEach(t),Rcr=i(ml),F8=n(ml,"P",{});var Tqe=s(F8);Bcr=r(Tqe,"This class cannot be instantiated directly using "),Cbe=n(Tqe,"CODE",{});var lpt=s(Cbe);Pcr=r(lpt,"__init__()"),lpt.forEach(t),Icr=r(Tqe," (throws an error)."),Tqe.forEach(t),qcr=i(ml),At=n(ml,"DIV",{class:!0});var y0=s(At);T(v8.$$.fragment,y0),Ncr=i(y0),wbe=n(y0,"P",{});var ipt=s(wbe);jcr=r(ipt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ipt.forEach(t),Dcr=i(y0),Od=n(y0,"P",{});var mK=s(Od);Gcr=r(mK,`Note:
Loading a model from its configuration file does `),Abe=n(mK,"STRONG",{});var dpt=s(Abe);Ocr=r(dpt,"not"),dpt.forEach(t),Vcr=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(mK,"A",{href:!0});var cpt=s(Wz);Xcr=r(cpt,"from_pretrained()"),cpt.forEach(t),zcr=r(mK," to load the model weights."),mK.forEach(t),Qcr=i(y0),T(N4.$$.fragment,y0),y0.forEach(t),Wcr=i(ml),yr=n(ml,"DIV",{class:!0});var fl=s(yr);T(T8.$$.fragment,fl),Hcr=i(fl),ybe=n(fl,"P",{});var mpt=s(ybe);Ucr=r(mpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mpt.forEach(t),Jcr=i(fl),Ka=n(fl,"P",{});var L0=s(Ka);Ycr=r(L0,"The model class to instantiate is selected based on the "),Lbe=n(L0,"CODE",{});var fpt=s(Lbe);Kcr=r(fpt,"model_type"),fpt.forEach(t),Zcr=r(L0,` property of the config object (either
passed as an argument or loaded from `),xbe=n(L0,"CODE",{});var gpt=s(xbe);emr=r(gpt,"pretrained_model_name_or_path"),gpt.forEach(t),omr=r(L0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(L0,"CODE",{});var hpt=s($be);rmr=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),tmr=r(L0,":"),L0.forEach(t),amr=i(fl),M8=n(fl,"UL",{});var Mqe=s(M8);j4=n(Mqe,"LI",{});var K9e=s(j4);kbe=n(K9e,"STRONG",{});var upt=s(kbe);nmr=r(upt,"convnext"),upt.forEach(t),smr=r(K9e," \u2014 "),Hz=n(K9e,"A",{href:!0});var ppt=s(Hz);lmr=r(ppt,"TFConvNextForImageClassification"),ppt.forEach(t),imr=r(K9e," (ConvNext model)"),K9e.forEach(t),dmr=i(Mqe),D4=n(Mqe,"LI",{});var Z9e=s(D4);Sbe=n(Z9e,"STRONG",{});var _pt=s(Sbe);cmr=r(_pt,"vit"),_pt.forEach(t),mmr=r(Z9e," \u2014 "),Uz=n(Z9e,"A",{href:!0});var bpt=s(Uz);fmr=r(bpt,"TFViTForImageClassification"),bpt.forEach(t),gmr=r(Z9e," (ViT model)"),Z9e.forEach(t),Mqe.forEach(t),hmr=i(fl),T(G4.$$.fragment,fl),fl.forEach(t),ml.forEach(t),bPe=i(m),Vd=n(m,"H2",{class:!0});var Eqe=s(Vd);O4=n(Eqe,"A",{id:!0,class:!0,href:!0});var Fpt=s(O4);Rbe=n(Fpt,"SPAN",{});var vpt=s(Rbe);T(E8.$$.fragment,vpt),vpt.forEach(t),Fpt.forEach(t),umr=i(Eqe),Bbe=n(Eqe,"SPAN",{});var Tpt=s(Bbe);pmr=r(Tpt,"TFAutoModelForMaskedLM"),Tpt.forEach(t),Eqe.forEach(t),FPe=i(m),or=n(m,"DIV",{class:!0});var gl=s(or);T(C8.$$.fragment,gl),_mr=i(gl),Xd=n(gl,"P",{});var fK=s(Xd);bmr=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jz=n(fK,"A",{href:!0});var Mpt=s(Jz);Fmr=r(Mpt,"from_pretrained()"),Mpt.forEach(t),vmr=r(fK," class method or the "),Yz=n(fK,"A",{href:!0});var Ept=s(Yz);Tmr=r(Ept,"from_config()"),Ept.forEach(t),Mmr=r(fK,` class
method.`),fK.forEach(t),Emr=i(gl),w8=n(gl,"P",{});var Cqe=s(w8);Cmr=r(Cqe,"This class cannot be instantiated directly using "),Pbe=n(Cqe,"CODE",{});var Cpt=s(Pbe);wmr=r(Cpt,"__init__()"),Cpt.forEach(t),Amr=r(Cqe," (throws an error)."),Cqe.forEach(t),ymr=i(gl),yt=n(gl,"DIV",{class:!0});var x0=s(yt);T(A8.$$.fragment,x0),Lmr=i(x0),Ibe=n(x0,"P",{});var wpt=s(Ibe);xmr=r(wpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wpt.forEach(t),$mr=i(x0),zd=n(x0,"P",{});var gK=s(zd);kmr=r(gK,`Note:
Loading a model from its configuration file does `),qbe=n(gK,"STRONG",{});var Apt=s(qbe);Smr=r(Apt,"not"),Apt.forEach(t),Rmr=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(gK,"A",{href:!0});var ypt=s(Kz);Bmr=r(ypt,"from_pretrained()"),ypt.forEach(t),Pmr=r(gK," to load the model weights."),gK.forEach(t),Imr=i(x0),T(V4.$$.fragment,x0),x0.forEach(t),qmr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(y8.$$.fragment,hl),Nmr=i(hl),Nbe=n(hl,"P",{});var Lpt=s(Nbe);jmr=r(Lpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lpt.forEach(t),Dmr=i(hl),Za=n(hl,"P",{});var $0=s(Za);Gmr=r($0,"The model class to instantiate is selected based on the "),jbe=n($0,"CODE",{});var xpt=s(jbe);Omr=r(xpt,"model_type"),xpt.forEach(t),Vmr=r($0,` property of the config object (either
passed as an argument or loaded from `),Dbe=n($0,"CODE",{});var $pt=s(Dbe);Xmr=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),zmr=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n($0,"CODE",{});var kpt=s(Gbe);Qmr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),Wmr=r($0,":"),$0.forEach(t),Hmr=i(hl),ie=n(hl,"UL",{});var me=s(ie);X4=n(me,"LI",{});var e$e=s(X4);Obe=n(e$e,"STRONG",{});var Spt=s(Obe);Umr=r(Spt,"albert"),Spt.forEach(t),Jmr=r(e$e," \u2014 "),Zz=n(e$e,"A",{href:!0});var Rpt=s(Zz);Ymr=r(Rpt,"TFAlbertForMaskedLM"),Rpt.forEach(t),Kmr=r(e$e," (ALBERT model)"),e$e.forEach(t),Zmr=i(me),z4=n(me,"LI",{});var o$e=s(z4);Vbe=n(o$e,"STRONG",{});var Bpt=s(Vbe);efr=r(Bpt,"bert"),Bpt.forEach(t),ofr=r(o$e," \u2014 "),eQ=n(o$e,"A",{href:!0});var Ppt=s(eQ);rfr=r(Ppt,"TFBertForMaskedLM"),Ppt.forEach(t),tfr=r(o$e," (BERT model)"),o$e.forEach(t),afr=i(me),Q4=n(me,"LI",{});var r$e=s(Q4);Xbe=n(r$e,"STRONG",{});var Ipt=s(Xbe);nfr=r(Ipt,"camembert"),Ipt.forEach(t),sfr=r(r$e," \u2014 "),oQ=n(r$e,"A",{href:!0});var qpt=s(oQ);lfr=r(qpt,"TFCamembertForMaskedLM"),qpt.forEach(t),ifr=r(r$e," (CamemBERT model)"),r$e.forEach(t),dfr=i(me),W4=n(me,"LI",{});var t$e=s(W4);zbe=n(t$e,"STRONG",{});var Npt=s(zbe);cfr=r(Npt,"convbert"),Npt.forEach(t),mfr=r(t$e," \u2014 "),rQ=n(t$e,"A",{href:!0});var jpt=s(rQ);ffr=r(jpt,"TFConvBertForMaskedLM"),jpt.forEach(t),gfr=r(t$e," (ConvBERT model)"),t$e.forEach(t),hfr=i(me),H4=n(me,"LI",{});var a$e=s(H4);Qbe=n(a$e,"STRONG",{});var Dpt=s(Qbe);ufr=r(Dpt,"deberta"),Dpt.forEach(t),pfr=r(a$e," \u2014 "),tQ=n(a$e,"A",{href:!0});var Gpt=s(tQ);_fr=r(Gpt,"TFDebertaForMaskedLM"),Gpt.forEach(t),bfr=r(a$e," (DeBERTa model)"),a$e.forEach(t),Ffr=i(me),U4=n(me,"LI",{});var n$e=s(U4);Wbe=n(n$e,"STRONG",{});var Opt=s(Wbe);vfr=r(Opt,"deberta-v2"),Opt.forEach(t),Tfr=r(n$e," \u2014 "),aQ=n(n$e,"A",{href:!0});var Vpt=s(aQ);Mfr=r(Vpt,"TFDebertaV2ForMaskedLM"),Vpt.forEach(t),Efr=r(n$e," (DeBERTa-v2 model)"),n$e.forEach(t),Cfr=i(me),J4=n(me,"LI",{});var s$e=s(J4);Hbe=n(s$e,"STRONG",{});var Xpt=s(Hbe);wfr=r(Xpt,"distilbert"),Xpt.forEach(t),Afr=r(s$e," \u2014 "),nQ=n(s$e,"A",{href:!0});var zpt=s(nQ);yfr=r(zpt,"TFDistilBertForMaskedLM"),zpt.forEach(t),Lfr=r(s$e," (DistilBERT model)"),s$e.forEach(t),xfr=i(me),Y4=n(me,"LI",{});var l$e=s(Y4);Ube=n(l$e,"STRONG",{});var Qpt=s(Ube);$fr=r(Qpt,"electra"),Qpt.forEach(t),kfr=r(l$e," \u2014 "),sQ=n(l$e,"A",{href:!0});var Wpt=s(sQ);Sfr=r(Wpt,"TFElectraForMaskedLM"),Wpt.forEach(t),Rfr=r(l$e," (ELECTRA model)"),l$e.forEach(t),Bfr=i(me),K4=n(me,"LI",{});var i$e=s(K4);Jbe=n(i$e,"STRONG",{});var Hpt=s(Jbe);Pfr=r(Hpt,"flaubert"),Hpt.forEach(t),Ifr=r(i$e," \u2014 "),lQ=n(i$e,"A",{href:!0});var Upt=s(lQ);qfr=r(Upt,"TFFlaubertWithLMHeadModel"),Upt.forEach(t),Nfr=r(i$e," (FlauBERT model)"),i$e.forEach(t),jfr=i(me),Z4=n(me,"LI",{});var d$e=s(Z4);Ybe=n(d$e,"STRONG",{});var Jpt=s(Ybe);Dfr=r(Jpt,"funnel"),Jpt.forEach(t),Gfr=r(d$e," \u2014 "),iQ=n(d$e,"A",{href:!0});var Ypt=s(iQ);Ofr=r(Ypt,"TFFunnelForMaskedLM"),Ypt.forEach(t),Vfr=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),Xfr=i(me),eE=n(me,"LI",{});var c$e=s(eE);Kbe=n(c$e,"STRONG",{});var Kpt=s(Kbe);zfr=r(Kpt,"layoutlm"),Kpt.forEach(t),Qfr=r(c$e," \u2014 "),dQ=n(c$e,"A",{href:!0});var Zpt=s(dQ);Wfr=r(Zpt,"TFLayoutLMForMaskedLM"),Zpt.forEach(t),Hfr=r(c$e," (LayoutLM model)"),c$e.forEach(t),Ufr=i(me),oE=n(me,"LI",{});var m$e=s(oE);Zbe=n(m$e,"STRONG",{});var e_t=s(Zbe);Jfr=r(e_t,"longformer"),e_t.forEach(t),Yfr=r(m$e," \u2014 "),cQ=n(m$e,"A",{href:!0});var o_t=s(cQ);Kfr=r(o_t,"TFLongformerForMaskedLM"),o_t.forEach(t),Zfr=r(m$e," (Longformer model)"),m$e.forEach(t),egr=i(me),rE=n(me,"LI",{});var f$e=s(rE);e2e=n(f$e,"STRONG",{});var r_t=s(e2e);ogr=r(r_t,"mobilebert"),r_t.forEach(t),rgr=r(f$e," \u2014 "),mQ=n(f$e,"A",{href:!0});var t_t=s(mQ);tgr=r(t_t,"TFMobileBertForMaskedLM"),t_t.forEach(t),agr=r(f$e," (MobileBERT model)"),f$e.forEach(t),ngr=i(me),tE=n(me,"LI",{});var g$e=s(tE);o2e=n(g$e,"STRONG",{});var a_t=s(o2e);sgr=r(a_t,"mpnet"),a_t.forEach(t),lgr=r(g$e," \u2014 "),fQ=n(g$e,"A",{href:!0});var n_t=s(fQ);igr=r(n_t,"TFMPNetForMaskedLM"),n_t.forEach(t),dgr=r(g$e," (MPNet model)"),g$e.forEach(t),cgr=i(me),aE=n(me,"LI",{});var h$e=s(aE);r2e=n(h$e,"STRONG",{});var s_t=s(r2e);mgr=r(s_t,"rembert"),s_t.forEach(t),fgr=r(h$e," \u2014 "),gQ=n(h$e,"A",{href:!0});var l_t=s(gQ);ggr=r(l_t,"TFRemBertForMaskedLM"),l_t.forEach(t),hgr=r(h$e," (RemBERT model)"),h$e.forEach(t),ugr=i(me),nE=n(me,"LI",{});var u$e=s(nE);t2e=n(u$e,"STRONG",{});var i_t=s(t2e);pgr=r(i_t,"roberta"),i_t.forEach(t),_gr=r(u$e," \u2014 "),hQ=n(u$e,"A",{href:!0});var d_t=s(hQ);bgr=r(d_t,"TFRobertaForMaskedLM"),d_t.forEach(t),Fgr=r(u$e," (RoBERTa model)"),u$e.forEach(t),vgr=i(me),sE=n(me,"LI",{});var p$e=s(sE);a2e=n(p$e,"STRONG",{});var c_t=s(a2e);Tgr=r(c_t,"roformer"),c_t.forEach(t),Mgr=r(p$e," \u2014 "),uQ=n(p$e,"A",{href:!0});var m_t=s(uQ);Egr=r(m_t,"TFRoFormerForMaskedLM"),m_t.forEach(t),Cgr=r(p$e," (RoFormer model)"),p$e.forEach(t),wgr=i(me),lE=n(me,"LI",{});var _$e=s(lE);n2e=n(_$e,"STRONG",{});var f_t=s(n2e);Agr=r(f_t,"tapas"),f_t.forEach(t),ygr=r(_$e," \u2014 "),pQ=n(_$e,"A",{href:!0});var g_t=s(pQ);Lgr=r(g_t,"TFTapasForMaskedLM"),g_t.forEach(t),xgr=r(_$e," (TAPAS model)"),_$e.forEach(t),$gr=i(me),iE=n(me,"LI",{});var b$e=s(iE);s2e=n(b$e,"STRONG",{});var h_t=s(s2e);kgr=r(h_t,"xlm"),h_t.forEach(t),Sgr=r(b$e," \u2014 "),_Q=n(b$e,"A",{href:!0});var u_t=s(_Q);Rgr=r(u_t,"TFXLMWithLMHeadModel"),u_t.forEach(t),Bgr=r(b$e," (XLM model)"),b$e.forEach(t),Pgr=i(me),dE=n(me,"LI",{});var F$e=s(dE);l2e=n(F$e,"STRONG",{});var p_t=s(l2e);Igr=r(p_t,"xlm-roberta"),p_t.forEach(t),qgr=r(F$e," \u2014 "),bQ=n(F$e,"A",{href:!0});var __t=s(bQ);Ngr=r(__t,"TFXLMRobertaForMaskedLM"),__t.forEach(t),jgr=r(F$e," (XLM-RoBERTa model)"),F$e.forEach(t),me.forEach(t),Dgr=i(hl),T(cE.$$.fragment,hl),hl.forEach(t),gl.forEach(t),vPe=i(m),Qd=n(m,"H2",{class:!0});var wqe=s(Qd);mE=n(wqe,"A",{id:!0,class:!0,href:!0});var b_t=s(mE);i2e=n(b_t,"SPAN",{});var F_t=s(i2e);T(L8.$$.fragment,F_t),F_t.forEach(t),b_t.forEach(t),Ggr=i(wqe),d2e=n(wqe,"SPAN",{});var v_t=s(d2e);Ogr=r(v_t,"TFAutoModelForSeq2SeqLM"),v_t.forEach(t),wqe.forEach(t),TPe=i(m),rr=n(m,"DIV",{class:!0});var ul=s(rr);T(x8.$$.fragment,ul),Vgr=i(ul),Wd=n(ul,"P",{});var hK=s(Wd);Xgr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FQ=n(hK,"A",{href:!0});var T_t=s(FQ);zgr=r(T_t,"from_pretrained()"),T_t.forEach(t),Qgr=r(hK," class method or the "),vQ=n(hK,"A",{href:!0});var M_t=s(vQ);Wgr=r(M_t,"from_config()"),M_t.forEach(t),Hgr=r(hK,` class
method.`),hK.forEach(t),Ugr=i(ul),$8=n(ul,"P",{});var Aqe=s($8);Jgr=r(Aqe,"This class cannot be instantiated directly using "),c2e=n(Aqe,"CODE",{});var E_t=s(c2e);Ygr=r(E_t,"__init__()"),E_t.forEach(t),Kgr=r(Aqe," (throws an error)."),Aqe.forEach(t),Zgr=i(ul),Lt=n(ul,"DIV",{class:!0});var k0=s(Lt);T(k8.$$.fragment,k0),ehr=i(k0),m2e=n(k0,"P",{});var C_t=s(m2e);ohr=r(C_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C_t.forEach(t),rhr=i(k0),Hd=n(k0,"P",{});var uK=s(Hd);thr=r(uK,`Note:
Loading a model from its configuration file does `),f2e=n(uK,"STRONG",{});var w_t=s(f2e);ahr=r(w_t,"not"),w_t.forEach(t),nhr=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(uK,"A",{href:!0});var A_t=s(TQ);shr=r(A_t,"from_pretrained()"),A_t.forEach(t),lhr=r(uK," to load the model weights."),uK.forEach(t),ihr=i(k0),T(fE.$$.fragment,k0),k0.forEach(t),dhr=i(ul),xr=n(ul,"DIV",{class:!0});var pl=s(xr);T(S8.$$.fragment,pl),chr=i(pl),g2e=n(pl,"P",{});var y_t=s(g2e);mhr=r(y_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y_t.forEach(t),fhr=i(pl),en=n(pl,"P",{});var S0=s(en);ghr=r(S0,"The model class to instantiate is selected based on the "),h2e=n(S0,"CODE",{});var L_t=s(h2e);hhr=r(L_t,"model_type"),L_t.forEach(t),uhr=r(S0,` property of the config object (either
passed as an argument or loaded from `),u2e=n(S0,"CODE",{});var x_t=s(u2e);phr=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),_hr=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p2e=n(S0,"CODE",{});var $_t=s(p2e);bhr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Fhr=r(S0,":"),S0.forEach(t),vhr=i(pl),ye=n(pl,"UL",{});var Re=s(ye);gE=n(Re,"LI",{});var v$e=s(gE);_2e=n(v$e,"STRONG",{});var k_t=s(_2e);Thr=r(k_t,"bart"),k_t.forEach(t),Mhr=r(v$e," \u2014 "),MQ=n(v$e,"A",{href:!0});var S_t=s(MQ);Ehr=r(S_t,"TFBartForConditionalGeneration"),S_t.forEach(t),Chr=r(v$e," (BART model)"),v$e.forEach(t),whr=i(Re),hE=n(Re,"LI",{});var T$e=s(hE);b2e=n(T$e,"STRONG",{});var R_t=s(b2e);Ahr=r(R_t,"blenderbot"),R_t.forEach(t),yhr=r(T$e," \u2014 "),EQ=n(T$e,"A",{href:!0});var B_t=s(EQ);Lhr=r(B_t,"TFBlenderbotForConditionalGeneration"),B_t.forEach(t),xhr=r(T$e," (Blenderbot model)"),T$e.forEach(t),$hr=i(Re),uE=n(Re,"LI",{});var M$e=s(uE);F2e=n(M$e,"STRONG",{});var P_t=s(F2e);khr=r(P_t,"blenderbot-small"),P_t.forEach(t),Shr=r(M$e," \u2014 "),CQ=n(M$e,"A",{href:!0});var I_t=s(CQ);Rhr=r(I_t,"TFBlenderbotSmallForConditionalGeneration"),I_t.forEach(t),Bhr=r(M$e," (BlenderbotSmall model)"),M$e.forEach(t),Phr=i(Re),pE=n(Re,"LI",{});var E$e=s(pE);v2e=n(E$e,"STRONG",{});var q_t=s(v2e);Ihr=r(q_t,"encoder-decoder"),q_t.forEach(t),qhr=r(E$e," \u2014 "),wQ=n(E$e,"A",{href:!0});var N_t=s(wQ);Nhr=r(N_t,"TFEncoderDecoderModel"),N_t.forEach(t),jhr=r(E$e," (Encoder decoder model)"),E$e.forEach(t),Dhr=i(Re),_E=n(Re,"LI",{});var C$e=s(_E);T2e=n(C$e,"STRONG",{});var j_t=s(T2e);Ghr=r(j_t,"led"),j_t.forEach(t),Ohr=r(C$e," \u2014 "),AQ=n(C$e,"A",{href:!0});var D_t=s(AQ);Vhr=r(D_t,"TFLEDForConditionalGeneration"),D_t.forEach(t),Xhr=r(C$e," (LED model)"),C$e.forEach(t),zhr=i(Re),bE=n(Re,"LI",{});var w$e=s(bE);M2e=n(w$e,"STRONG",{});var G_t=s(M2e);Qhr=r(G_t,"marian"),G_t.forEach(t),Whr=r(w$e," \u2014 "),yQ=n(w$e,"A",{href:!0});var O_t=s(yQ);Hhr=r(O_t,"TFMarianMTModel"),O_t.forEach(t),Uhr=r(w$e," (Marian model)"),w$e.forEach(t),Jhr=i(Re),FE=n(Re,"LI",{});var A$e=s(FE);E2e=n(A$e,"STRONG",{});var V_t=s(E2e);Yhr=r(V_t,"mbart"),V_t.forEach(t),Khr=r(A$e," \u2014 "),LQ=n(A$e,"A",{href:!0});var X_t=s(LQ);Zhr=r(X_t,"TFMBartForConditionalGeneration"),X_t.forEach(t),eur=r(A$e," (mBART model)"),A$e.forEach(t),our=i(Re),vE=n(Re,"LI",{});var y$e=s(vE);C2e=n(y$e,"STRONG",{});var z_t=s(C2e);rur=r(z_t,"mt5"),z_t.forEach(t),tur=r(y$e," \u2014 "),xQ=n(y$e,"A",{href:!0});var Q_t=s(xQ);aur=r(Q_t,"TFMT5ForConditionalGeneration"),Q_t.forEach(t),nur=r(y$e," (mT5 model)"),y$e.forEach(t),sur=i(Re),TE=n(Re,"LI",{});var L$e=s(TE);w2e=n(L$e,"STRONG",{});var W_t=s(w2e);lur=r(W_t,"pegasus"),W_t.forEach(t),iur=r(L$e," \u2014 "),$Q=n(L$e,"A",{href:!0});var H_t=s($Q);dur=r(H_t,"TFPegasusForConditionalGeneration"),H_t.forEach(t),cur=r(L$e," (Pegasus model)"),L$e.forEach(t),mur=i(Re),ME=n(Re,"LI",{});var x$e=s(ME);A2e=n(x$e,"STRONG",{});var U_t=s(A2e);fur=r(U_t,"t5"),U_t.forEach(t),gur=r(x$e," \u2014 "),kQ=n(x$e,"A",{href:!0});var J_t=s(kQ);hur=r(J_t,"TFT5ForConditionalGeneration"),J_t.forEach(t),uur=r(x$e," (T5 model)"),x$e.forEach(t),Re.forEach(t),pur=i(pl),T(EE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),MPe=i(m),Ud=n(m,"H2",{class:!0});var yqe=s(Ud);CE=n(yqe,"A",{id:!0,class:!0,href:!0});var Y_t=s(CE);y2e=n(Y_t,"SPAN",{});var K_t=s(y2e);T(R8.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),_ur=i(yqe),L2e=n(yqe,"SPAN",{});var Z_t=s(L2e);bur=r(Z_t,"TFAutoModelForSequenceClassification"),Z_t.forEach(t),yqe.forEach(t),EPe=i(m),tr=n(m,"DIV",{class:!0});var _l=s(tr);T(B8.$$.fragment,_l),Fur=i(_l),Jd=n(_l,"P",{});var pK=s(Jd);vur=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SQ=n(pK,"A",{href:!0});var ebt=s(SQ);Tur=r(ebt,"from_pretrained()"),ebt.forEach(t),Mur=r(pK," class method or the "),RQ=n(pK,"A",{href:!0});var obt=s(RQ);Eur=r(obt,"from_config()"),obt.forEach(t),Cur=r(pK,` class
method.`),pK.forEach(t),wur=i(_l),P8=n(_l,"P",{});var Lqe=s(P8);Aur=r(Lqe,"This class cannot be instantiated directly using "),x2e=n(Lqe,"CODE",{});var rbt=s(x2e);yur=r(rbt,"__init__()"),rbt.forEach(t),Lur=r(Lqe," (throws an error)."),Lqe.forEach(t),xur=i(_l),xt=n(_l,"DIV",{class:!0});var R0=s(xt);T(I8.$$.fragment,R0),$ur=i(R0),$2e=n(R0,"P",{});var tbt=s($2e);kur=r(tbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tbt.forEach(t),Sur=i(R0),Yd=n(R0,"P",{});var _K=s(Yd);Rur=r(_K,`Note:
Loading a model from its configuration file does `),k2e=n(_K,"STRONG",{});var abt=s(k2e);Bur=r(abt,"not"),abt.forEach(t),Pur=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(_K,"A",{href:!0});var nbt=s(BQ);Iur=r(nbt,"from_pretrained()"),nbt.forEach(t),qur=r(_K," to load the model weights."),_K.forEach(t),Nur=i(R0),T(wE.$$.fragment,R0),R0.forEach(t),jur=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(q8.$$.fragment,bl),Dur=i(bl),S2e=n(bl,"P",{});var sbt=s(S2e);Gur=r(sbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sbt.forEach(t),Our=i(bl),on=n(bl,"P",{});var B0=s(on);Vur=r(B0,"The model class to instantiate is selected based on the "),R2e=n(B0,"CODE",{});var lbt=s(R2e);Xur=r(lbt,"model_type"),lbt.forEach(t),zur=r(B0,` property of the config object (either
passed as an argument or loaded from `),B2e=n(B0,"CODE",{});var ibt=s(B2e);Qur=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),Wur=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(B0,"CODE",{});var dbt=s(P2e);Hur=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),Uur=r(B0,":"),B0.forEach(t),Jur=i(bl),Z=n(bl,"UL",{});var re=s(Z);AE=n(re,"LI",{});var $$e=s(AE);I2e=n($$e,"STRONG",{});var cbt=s(I2e);Yur=r(cbt,"albert"),cbt.forEach(t),Kur=r($$e," \u2014 "),PQ=n($$e,"A",{href:!0});var mbt=s(PQ);Zur=r(mbt,"TFAlbertForSequenceClassification"),mbt.forEach(t),epr=r($$e," (ALBERT model)"),$$e.forEach(t),opr=i(re),yE=n(re,"LI",{});var k$e=s(yE);q2e=n(k$e,"STRONG",{});var fbt=s(q2e);rpr=r(fbt,"bert"),fbt.forEach(t),tpr=r(k$e," \u2014 "),IQ=n(k$e,"A",{href:!0});var gbt=s(IQ);apr=r(gbt,"TFBertForSequenceClassification"),gbt.forEach(t),npr=r(k$e," (BERT model)"),k$e.forEach(t),spr=i(re),LE=n(re,"LI",{});var S$e=s(LE);N2e=n(S$e,"STRONG",{});var hbt=s(N2e);lpr=r(hbt,"camembert"),hbt.forEach(t),ipr=r(S$e," \u2014 "),qQ=n(S$e,"A",{href:!0});var ubt=s(qQ);dpr=r(ubt,"TFCamembertForSequenceClassification"),ubt.forEach(t),cpr=r(S$e," (CamemBERT model)"),S$e.forEach(t),mpr=i(re),xE=n(re,"LI",{});var R$e=s(xE);j2e=n(R$e,"STRONG",{});var pbt=s(j2e);fpr=r(pbt,"convbert"),pbt.forEach(t),gpr=r(R$e," \u2014 "),NQ=n(R$e,"A",{href:!0});var _bt=s(NQ);hpr=r(_bt,"TFConvBertForSequenceClassification"),_bt.forEach(t),upr=r(R$e," (ConvBERT model)"),R$e.forEach(t),ppr=i(re),$E=n(re,"LI",{});var B$e=s($E);D2e=n(B$e,"STRONG",{});var bbt=s(D2e);_pr=r(bbt,"ctrl"),bbt.forEach(t),bpr=r(B$e," \u2014 "),jQ=n(B$e,"A",{href:!0});var Fbt=s(jQ);Fpr=r(Fbt,"TFCTRLForSequenceClassification"),Fbt.forEach(t),vpr=r(B$e," (CTRL model)"),B$e.forEach(t),Tpr=i(re),kE=n(re,"LI",{});var P$e=s(kE);G2e=n(P$e,"STRONG",{});var vbt=s(G2e);Mpr=r(vbt,"deberta"),vbt.forEach(t),Epr=r(P$e," \u2014 "),DQ=n(P$e,"A",{href:!0});var Tbt=s(DQ);Cpr=r(Tbt,"TFDebertaForSequenceClassification"),Tbt.forEach(t),wpr=r(P$e," (DeBERTa model)"),P$e.forEach(t),Apr=i(re),SE=n(re,"LI",{});var I$e=s(SE);O2e=n(I$e,"STRONG",{});var Mbt=s(O2e);ypr=r(Mbt,"deberta-v2"),Mbt.forEach(t),Lpr=r(I$e," \u2014 "),GQ=n(I$e,"A",{href:!0});var Ebt=s(GQ);xpr=r(Ebt,"TFDebertaV2ForSequenceClassification"),Ebt.forEach(t),$pr=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),kpr=i(re),RE=n(re,"LI",{});var q$e=s(RE);V2e=n(q$e,"STRONG",{});var Cbt=s(V2e);Spr=r(Cbt,"distilbert"),Cbt.forEach(t),Rpr=r(q$e," \u2014 "),OQ=n(q$e,"A",{href:!0});var wbt=s(OQ);Bpr=r(wbt,"TFDistilBertForSequenceClassification"),wbt.forEach(t),Ppr=r(q$e," (DistilBERT model)"),q$e.forEach(t),Ipr=i(re),BE=n(re,"LI",{});var N$e=s(BE);X2e=n(N$e,"STRONG",{});var Abt=s(X2e);qpr=r(Abt,"electra"),Abt.forEach(t),Npr=r(N$e," \u2014 "),VQ=n(N$e,"A",{href:!0});var ybt=s(VQ);jpr=r(ybt,"TFElectraForSequenceClassification"),ybt.forEach(t),Dpr=r(N$e," (ELECTRA model)"),N$e.forEach(t),Gpr=i(re),PE=n(re,"LI",{});var j$e=s(PE);z2e=n(j$e,"STRONG",{});var Lbt=s(z2e);Opr=r(Lbt,"flaubert"),Lbt.forEach(t),Vpr=r(j$e," \u2014 "),XQ=n(j$e,"A",{href:!0});var xbt=s(XQ);Xpr=r(xbt,"TFFlaubertForSequenceClassification"),xbt.forEach(t),zpr=r(j$e," (FlauBERT model)"),j$e.forEach(t),Qpr=i(re),IE=n(re,"LI",{});var D$e=s(IE);Q2e=n(D$e,"STRONG",{});var $bt=s(Q2e);Wpr=r($bt,"funnel"),$bt.forEach(t),Hpr=r(D$e," \u2014 "),zQ=n(D$e,"A",{href:!0});var kbt=s(zQ);Upr=r(kbt,"TFFunnelForSequenceClassification"),kbt.forEach(t),Jpr=r(D$e," (Funnel Transformer model)"),D$e.forEach(t),Ypr=i(re),qE=n(re,"LI",{});var G$e=s(qE);W2e=n(G$e,"STRONG",{});var Sbt=s(W2e);Kpr=r(Sbt,"gpt2"),Sbt.forEach(t),Zpr=r(G$e," \u2014 "),QQ=n(G$e,"A",{href:!0});var Rbt=s(QQ);e_r=r(Rbt,"TFGPT2ForSequenceClassification"),Rbt.forEach(t),o_r=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),r_r=i(re),NE=n(re,"LI",{});var O$e=s(NE);H2e=n(O$e,"STRONG",{});var Bbt=s(H2e);t_r=r(Bbt,"gptj"),Bbt.forEach(t),a_r=r(O$e," \u2014 "),WQ=n(O$e,"A",{href:!0});var Pbt=s(WQ);n_r=r(Pbt,"TFGPTJForSequenceClassification"),Pbt.forEach(t),s_r=r(O$e," (GPT-J model)"),O$e.forEach(t),l_r=i(re),jE=n(re,"LI",{});var V$e=s(jE);U2e=n(V$e,"STRONG",{});var Ibt=s(U2e);i_r=r(Ibt,"layoutlm"),Ibt.forEach(t),d_r=r(V$e," \u2014 "),HQ=n(V$e,"A",{href:!0});var qbt=s(HQ);c_r=r(qbt,"TFLayoutLMForSequenceClassification"),qbt.forEach(t),m_r=r(V$e," (LayoutLM model)"),V$e.forEach(t),f_r=i(re),DE=n(re,"LI",{});var X$e=s(DE);J2e=n(X$e,"STRONG",{});var Nbt=s(J2e);g_r=r(Nbt,"longformer"),Nbt.forEach(t),h_r=r(X$e," \u2014 "),UQ=n(X$e,"A",{href:!0});var jbt=s(UQ);u_r=r(jbt,"TFLongformerForSequenceClassification"),jbt.forEach(t),p_r=r(X$e," (Longformer model)"),X$e.forEach(t),__r=i(re),GE=n(re,"LI",{});var z$e=s(GE);Y2e=n(z$e,"STRONG",{});var Dbt=s(Y2e);b_r=r(Dbt,"mobilebert"),Dbt.forEach(t),F_r=r(z$e," \u2014 "),JQ=n(z$e,"A",{href:!0});var Gbt=s(JQ);v_r=r(Gbt,"TFMobileBertForSequenceClassification"),Gbt.forEach(t),T_r=r(z$e," (MobileBERT model)"),z$e.forEach(t),M_r=i(re),OE=n(re,"LI",{});var Q$e=s(OE);K2e=n(Q$e,"STRONG",{});var Obt=s(K2e);E_r=r(Obt,"mpnet"),Obt.forEach(t),C_r=r(Q$e," \u2014 "),YQ=n(Q$e,"A",{href:!0});var Vbt=s(YQ);w_r=r(Vbt,"TFMPNetForSequenceClassification"),Vbt.forEach(t),A_r=r(Q$e," (MPNet model)"),Q$e.forEach(t),y_r=i(re),VE=n(re,"LI",{});var W$e=s(VE);Z2e=n(W$e,"STRONG",{});var Xbt=s(Z2e);L_r=r(Xbt,"openai-gpt"),Xbt.forEach(t),x_r=r(W$e," \u2014 "),KQ=n(W$e,"A",{href:!0});var zbt=s(KQ);$_r=r(zbt,"TFOpenAIGPTForSequenceClassification"),zbt.forEach(t),k_r=r(W$e," (OpenAI GPT model)"),W$e.forEach(t),S_r=i(re),XE=n(re,"LI",{});var H$e=s(XE);eFe=n(H$e,"STRONG",{});var Qbt=s(eFe);R_r=r(Qbt,"rembert"),Qbt.forEach(t),B_r=r(H$e," \u2014 "),ZQ=n(H$e,"A",{href:!0});var Wbt=s(ZQ);P_r=r(Wbt,"TFRemBertForSequenceClassification"),Wbt.forEach(t),I_r=r(H$e," (RemBERT model)"),H$e.forEach(t),q_r=i(re),zE=n(re,"LI",{});var U$e=s(zE);oFe=n(U$e,"STRONG",{});var Hbt=s(oFe);N_r=r(Hbt,"roberta"),Hbt.forEach(t),j_r=r(U$e," \u2014 "),eW=n(U$e,"A",{href:!0});var Ubt=s(eW);D_r=r(Ubt,"TFRobertaForSequenceClassification"),Ubt.forEach(t),G_r=r(U$e," (RoBERTa model)"),U$e.forEach(t),O_r=i(re),QE=n(re,"LI",{});var J$e=s(QE);rFe=n(J$e,"STRONG",{});var Jbt=s(rFe);V_r=r(Jbt,"roformer"),Jbt.forEach(t),X_r=r(J$e," \u2014 "),oW=n(J$e,"A",{href:!0});var Ybt=s(oW);z_r=r(Ybt,"TFRoFormerForSequenceClassification"),Ybt.forEach(t),Q_r=r(J$e," (RoFormer model)"),J$e.forEach(t),W_r=i(re),WE=n(re,"LI",{});var Y$e=s(WE);tFe=n(Y$e,"STRONG",{});var Kbt=s(tFe);H_r=r(Kbt,"tapas"),Kbt.forEach(t),U_r=r(Y$e," \u2014 "),rW=n(Y$e,"A",{href:!0});var Zbt=s(rW);J_r=r(Zbt,"TFTapasForSequenceClassification"),Zbt.forEach(t),Y_r=r(Y$e," (TAPAS model)"),Y$e.forEach(t),K_r=i(re),HE=n(re,"LI",{});var K$e=s(HE);aFe=n(K$e,"STRONG",{});var e2t=s(aFe);Z_r=r(e2t,"transfo-xl"),e2t.forEach(t),ebr=r(K$e," \u2014 "),tW=n(K$e,"A",{href:!0});var o2t=s(tW);obr=r(o2t,"TFTransfoXLForSequenceClassification"),o2t.forEach(t),rbr=r(K$e," (Transformer-XL model)"),K$e.forEach(t),tbr=i(re),UE=n(re,"LI",{});var Z$e=s(UE);nFe=n(Z$e,"STRONG",{});var r2t=s(nFe);abr=r(r2t,"xlm"),r2t.forEach(t),nbr=r(Z$e," \u2014 "),aW=n(Z$e,"A",{href:!0});var t2t=s(aW);sbr=r(t2t,"TFXLMForSequenceClassification"),t2t.forEach(t),lbr=r(Z$e," (XLM model)"),Z$e.forEach(t),ibr=i(re),JE=n(re,"LI",{});var eke=s(JE);sFe=n(eke,"STRONG",{});var a2t=s(sFe);dbr=r(a2t,"xlm-roberta"),a2t.forEach(t),cbr=r(eke," \u2014 "),nW=n(eke,"A",{href:!0});var n2t=s(nW);mbr=r(n2t,"TFXLMRobertaForSequenceClassification"),n2t.forEach(t),fbr=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),gbr=i(re),YE=n(re,"LI",{});var oke=s(YE);lFe=n(oke,"STRONG",{});var s2t=s(lFe);hbr=r(s2t,"xlnet"),s2t.forEach(t),ubr=r(oke," \u2014 "),sW=n(oke,"A",{href:!0});var l2t=s(sW);pbr=r(l2t,"TFXLNetForSequenceClassification"),l2t.forEach(t),_br=r(oke," (XLNet model)"),oke.forEach(t),re.forEach(t),bbr=i(bl),T(KE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),CPe=i(m),Kd=n(m,"H2",{class:!0});var xqe=s(Kd);ZE=n(xqe,"A",{id:!0,class:!0,href:!0});var i2t=s(ZE);iFe=n(i2t,"SPAN",{});var d2t=s(iFe);T(N8.$$.fragment,d2t),d2t.forEach(t),i2t.forEach(t),Fbr=i(xqe),dFe=n(xqe,"SPAN",{});var c2t=s(dFe);vbr=r(c2t,"TFAutoModelForMultipleChoice"),c2t.forEach(t),xqe.forEach(t),wPe=i(m),ar=n(m,"DIV",{class:!0});var Fl=s(ar);T(j8.$$.fragment,Fl),Tbr=i(Fl),Zd=n(Fl,"P",{});var bK=s(Zd);Mbr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=n(bK,"A",{href:!0});var m2t=s(lW);Ebr=r(m2t,"from_pretrained()"),m2t.forEach(t),Cbr=r(bK," class method or the "),iW=n(bK,"A",{href:!0});var f2t=s(iW);wbr=r(f2t,"from_config()"),f2t.forEach(t),Abr=r(bK,` class
method.`),bK.forEach(t),ybr=i(Fl),D8=n(Fl,"P",{});var $qe=s(D8);Lbr=r($qe,"This class cannot be instantiated directly using "),cFe=n($qe,"CODE",{});var g2t=s(cFe);xbr=r(g2t,"__init__()"),g2t.forEach(t),$br=r($qe," (throws an error)."),$qe.forEach(t),kbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var P0=s($t);T(G8.$$.fragment,P0),Sbr=i(P0),mFe=n(P0,"P",{});var h2t=s(mFe);Rbr=r(h2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h2t.forEach(t),Bbr=i(P0),ec=n(P0,"P",{});var FK=s(ec);Pbr=r(FK,`Note:
Loading a model from its configuration file does `),fFe=n(FK,"STRONG",{});var u2t=s(fFe);Ibr=r(u2t,"not"),u2t.forEach(t),qbr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(FK,"A",{href:!0});var p2t=s(dW);Nbr=r(p2t,"from_pretrained()"),p2t.forEach(t),jbr=r(FK," to load the model weights."),FK.forEach(t),Dbr=i(P0),T(e5.$$.fragment,P0),P0.forEach(t),Gbr=i(Fl),kr=n(Fl,"DIV",{class:!0});var vl=s(kr);T(O8.$$.fragment,vl),Obr=i(vl),gFe=n(vl,"P",{});var _2t=s(gFe);Vbr=r(_2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_2t.forEach(t),Xbr=i(vl),rn=n(vl,"P",{});var I0=s(rn);zbr=r(I0,"The model class to instantiate is selected based on the "),hFe=n(I0,"CODE",{});var b2t=s(hFe);Qbr=r(b2t,"model_type"),b2t.forEach(t),Wbr=r(I0,` property of the config object (either
passed as an argument or loaded from `),uFe=n(I0,"CODE",{});var F2t=s(uFe);Hbr=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),Ubr=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(I0,"CODE",{});var v2t=s(pFe);Jbr=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),Ybr=r(I0,":"),I0.forEach(t),Kbr=i(vl),ue=n(vl,"UL",{});var _e=s(ue);o5=n(_e,"LI",{});var rke=s(o5);_Fe=n(rke,"STRONG",{});var T2t=s(_Fe);Zbr=r(T2t,"albert"),T2t.forEach(t),e2r=r(rke," \u2014 "),cW=n(rke,"A",{href:!0});var M2t=s(cW);o2r=r(M2t,"TFAlbertForMultipleChoice"),M2t.forEach(t),r2r=r(rke," (ALBERT model)"),rke.forEach(t),t2r=i(_e),r5=n(_e,"LI",{});var tke=s(r5);bFe=n(tke,"STRONG",{});var E2t=s(bFe);a2r=r(E2t,"bert"),E2t.forEach(t),n2r=r(tke," \u2014 "),mW=n(tke,"A",{href:!0});var C2t=s(mW);s2r=r(C2t,"TFBertForMultipleChoice"),C2t.forEach(t),l2r=r(tke," (BERT model)"),tke.forEach(t),i2r=i(_e),t5=n(_e,"LI",{});var ake=s(t5);FFe=n(ake,"STRONG",{});var w2t=s(FFe);d2r=r(w2t,"camembert"),w2t.forEach(t),c2r=r(ake," \u2014 "),fW=n(ake,"A",{href:!0});var A2t=s(fW);m2r=r(A2t,"TFCamembertForMultipleChoice"),A2t.forEach(t),f2r=r(ake," (CamemBERT model)"),ake.forEach(t),g2r=i(_e),a5=n(_e,"LI",{});var nke=s(a5);vFe=n(nke,"STRONG",{});var y2t=s(vFe);h2r=r(y2t,"convbert"),y2t.forEach(t),u2r=r(nke," \u2014 "),gW=n(nke,"A",{href:!0});var L2t=s(gW);p2r=r(L2t,"TFConvBertForMultipleChoice"),L2t.forEach(t),_2r=r(nke," (ConvBERT model)"),nke.forEach(t),b2r=i(_e),n5=n(_e,"LI",{});var ske=s(n5);TFe=n(ske,"STRONG",{});var x2t=s(TFe);F2r=r(x2t,"distilbert"),x2t.forEach(t),v2r=r(ske," \u2014 "),hW=n(ske,"A",{href:!0});var $2t=s(hW);T2r=r($2t,"TFDistilBertForMultipleChoice"),$2t.forEach(t),M2r=r(ske," (DistilBERT model)"),ske.forEach(t),E2r=i(_e),s5=n(_e,"LI",{});var lke=s(s5);MFe=n(lke,"STRONG",{});var k2t=s(MFe);C2r=r(k2t,"electra"),k2t.forEach(t),w2r=r(lke," \u2014 "),uW=n(lke,"A",{href:!0});var S2t=s(uW);A2r=r(S2t,"TFElectraForMultipleChoice"),S2t.forEach(t),y2r=r(lke," (ELECTRA model)"),lke.forEach(t),L2r=i(_e),l5=n(_e,"LI",{});var ike=s(l5);EFe=n(ike,"STRONG",{});var R2t=s(EFe);x2r=r(R2t,"flaubert"),R2t.forEach(t),$2r=r(ike," \u2014 "),pW=n(ike,"A",{href:!0});var B2t=s(pW);k2r=r(B2t,"TFFlaubertForMultipleChoice"),B2t.forEach(t),S2r=r(ike," (FlauBERT model)"),ike.forEach(t),R2r=i(_e),i5=n(_e,"LI",{});var dke=s(i5);CFe=n(dke,"STRONG",{});var P2t=s(CFe);B2r=r(P2t,"funnel"),P2t.forEach(t),P2r=r(dke," \u2014 "),_W=n(dke,"A",{href:!0});var I2t=s(_W);I2r=r(I2t,"TFFunnelForMultipleChoice"),I2t.forEach(t),q2r=r(dke," (Funnel Transformer model)"),dke.forEach(t),N2r=i(_e),d5=n(_e,"LI",{});var cke=s(d5);wFe=n(cke,"STRONG",{});var q2t=s(wFe);j2r=r(q2t,"longformer"),q2t.forEach(t),D2r=r(cke," \u2014 "),bW=n(cke,"A",{href:!0});var N2t=s(bW);G2r=r(N2t,"TFLongformerForMultipleChoice"),N2t.forEach(t),O2r=r(cke," (Longformer model)"),cke.forEach(t),V2r=i(_e),c5=n(_e,"LI",{});var mke=s(c5);AFe=n(mke,"STRONG",{});var j2t=s(AFe);X2r=r(j2t,"mobilebert"),j2t.forEach(t),z2r=r(mke," \u2014 "),FW=n(mke,"A",{href:!0});var D2t=s(FW);Q2r=r(D2t,"TFMobileBertForMultipleChoice"),D2t.forEach(t),W2r=r(mke," (MobileBERT model)"),mke.forEach(t),H2r=i(_e),m5=n(_e,"LI",{});var fke=s(m5);yFe=n(fke,"STRONG",{});var G2t=s(yFe);U2r=r(G2t,"mpnet"),G2t.forEach(t),J2r=r(fke," \u2014 "),vW=n(fke,"A",{href:!0});var O2t=s(vW);Y2r=r(O2t,"TFMPNetForMultipleChoice"),O2t.forEach(t),K2r=r(fke," (MPNet model)"),fke.forEach(t),Z2r=i(_e),f5=n(_e,"LI",{});var gke=s(f5);LFe=n(gke,"STRONG",{});var V2t=s(LFe);eFr=r(V2t,"rembert"),V2t.forEach(t),oFr=r(gke," \u2014 "),TW=n(gke,"A",{href:!0});var X2t=s(TW);rFr=r(X2t,"TFRemBertForMultipleChoice"),X2t.forEach(t),tFr=r(gke," (RemBERT model)"),gke.forEach(t),aFr=i(_e),g5=n(_e,"LI",{});var hke=s(g5);xFe=n(hke,"STRONG",{});var z2t=s(xFe);nFr=r(z2t,"roberta"),z2t.forEach(t),sFr=r(hke," \u2014 "),MW=n(hke,"A",{href:!0});var Q2t=s(MW);lFr=r(Q2t,"TFRobertaForMultipleChoice"),Q2t.forEach(t),iFr=r(hke," (RoBERTa model)"),hke.forEach(t),dFr=i(_e),h5=n(_e,"LI",{});var uke=s(h5);$Fe=n(uke,"STRONG",{});var W2t=s($Fe);cFr=r(W2t,"roformer"),W2t.forEach(t),mFr=r(uke," \u2014 "),EW=n(uke,"A",{href:!0});var H2t=s(EW);fFr=r(H2t,"TFRoFormerForMultipleChoice"),H2t.forEach(t),gFr=r(uke," (RoFormer model)"),uke.forEach(t),hFr=i(_e),u5=n(_e,"LI",{});var pke=s(u5);kFe=n(pke,"STRONG",{});var U2t=s(kFe);uFr=r(U2t,"xlm"),U2t.forEach(t),pFr=r(pke," \u2014 "),CW=n(pke,"A",{href:!0});var J2t=s(CW);_Fr=r(J2t,"TFXLMForMultipleChoice"),J2t.forEach(t),bFr=r(pke," (XLM model)"),pke.forEach(t),FFr=i(_e),p5=n(_e,"LI",{});var _ke=s(p5);SFe=n(_ke,"STRONG",{});var Y2t=s(SFe);vFr=r(Y2t,"xlm-roberta"),Y2t.forEach(t),TFr=r(_ke," \u2014 "),wW=n(_ke,"A",{href:!0});var K2t=s(wW);MFr=r(K2t,"TFXLMRobertaForMultipleChoice"),K2t.forEach(t),EFr=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),CFr=i(_e),_5=n(_e,"LI",{});var bke=s(_5);RFe=n(bke,"STRONG",{});var Z2t=s(RFe);wFr=r(Z2t,"xlnet"),Z2t.forEach(t),AFr=r(bke," \u2014 "),AW=n(bke,"A",{href:!0});var eFt=s(AW);yFr=r(eFt,"TFXLNetForMultipleChoice"),eFt.forEach(t),LFr=r(bke," (XLNet model)"),bke.forEach(t),_e.forEach(t),xFr=i(vl),T(b5.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),APe=i(m),oc=n(m,"H2",{class:!0});var kqe=s(oc);F5=n(kqe,"A",{id:!0,class:!0,href:!0});var oFt=s(F5);BFe=n(oFt,"SPAN",{});var rFt=s(BFe);T(V8.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),$Fr=i(kqe),PFe=n(kqe,"SPAN",{});var tFt=s(PFe);kFr=r(tFt,"TFAutoModelForTableQuestionAnswering"),tFt.forEach(t),kqe.forEach(t),yPe=i(m),nr=n(m,"DIV",{class:!0});var Tl=s(nr);T(X8.$$.fragment,Tl),SFr=i(Tl),rc=n(Tl,"P",{});var vK=s(rc);RFr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yW=n(vK,"A",{href:!0});var aFt=s(yW);BFr=r(aFt,"from_pretrained()"),aFt.forEach(t),PFr=r(vK," class method or the "),LW=n(vK,"A",{href:!0});var nFt=s(LW);IFr=r(nFt,"from_config()"),nFt.forEach(t),qFr=r(vK,` class
method.`),vK.forEach(t),NFr=i(Tl),z8=n(Tl,"P",{});var Sqe=s(z8);jFr=r(Sqe,"This class cannot be instantiated directly using "),IFe=n(Sqe,"CODE",{});var sFt=s(IFe);DFr=r(sFt,"__init__()"),sFt.forEach(t),GFr=r(Sqe," (throws an error)."),Sqe.forEach(t),OFr=i(Tl),kt=n(Tl,"DIV",{class:!0});var q0=s(kt);T(Q8.$$.fragment,q0),VFr=i(q0),qFe=n(q0,"P",{});var lFt=s(qFe);XFr=r(lFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lFt.forEach(t),zFr=i(q0),tc=n(q0,"P",{});var TK=s(tc);QFr=r(TK,`Note:
Loading a model from its configuration file does `),NFe=n(TK,"STRONG",{});var iFt=s(NFe);WFr=r(iFt,"not"),iFt.forEach(t),HFr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(TK,"A",{href:!0});var dFt=s(xW);UFr=r(dFt,"from_pretrained()"),dFt.forEach(t),JFr=r(TK," to load the model weights."),TK.forEach(t),YFr=i(q0),T(v5.$$.fragment,q0),q0.forEach(t),KFr=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(W8.$$.fragment,Ml),ZFr=i(Ml),jFe=n(Ml,"P",{});var cFt=s(jFe);evr=r(cFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cFt.forEach(t),ovr=i(Ml),tn=n(Ml,"P",{});var N0=s(tn);rvr=r(N0,"The model class to instantiate is selected based on the "),DFe=n(N0,"CODE",{});var mFt=s(DFe);tvr=r(mFt,"model_type"),mFt.forEach(t),avr=r(N0,` property of the config object (either
passed as an argument or loaded from `),GFe=n(N0,"CODE",{});var fFt=s(GFe);nvr=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),svr=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(N0,"CODE",{});var gFt=s(OFe);lvr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),ivr=r(N0,":"),N0.forEach(t),dvr=i(Ml),VFe=n(Ml,"UL",{});var hFt=s(VFe);T5=n(hFt,"LI",{});var Fke=s(T5);XFe=n(Fke,"STRONG",{});var uFt=s(XFe);cvr=r(uFt,"tapas"),uFt.forEach(t),mvr=r(Fke," \u2014 "),$W=n(Fke,"A",{href:!0});var pFt=s($W);fvr=r(pFt,"TFTapasForQuestionAnswering"),pFt.forEach(t),gvr=r(Fke," (TAPAS model)"),Fke.forEach(t),hFt.forEach(t),hvr=i(Ml),T(M5.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),LPe=i(m),ac=n(m,"H2",{class:!0});var Rqe=s(ac);E5=n(Rqe,"A",{id:!0,class:!0,href:!0});var _Ft=s(E5);zFe=n(_Ft,"SPAN",{});var bFt=s(zFe);T(H8.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),uvr=i(Rqe),QFe=n(Rqe,"SPAN",{});var FFt=s(QFe);pvr=r(FFt,"TFAutoModelForTokenClassification"),FFt.forEach(t),Rqe.forEach(t),xPe=i(m),sr=n(m,"DIV",{class:!0});var El=s(sr);T(U8.$$.fragment,El),_vr=i(El),nc=n(El,"P",{});var MK=s(nc);bvr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kW=n(MK,"A",{href:!0});var vFt=s(kW);Fvr=r(vFt,"from_pretrained()"),vFt.forEach(t),vvr=r(MK," class method or the "),SW=n(MK,"A",{href:!0});var TFt=s(SW);Tvr=r(TFt,"from_config()"),TFt.forEach(t),Mvr=r(MK,` class
method.`),MK.forEach(t),Evr=i(El),J8=n(El,"P",{});var Bqe=s(J8);Cvr=r(Bqe,"This class cannot be instantiated directly using "),WFe=n(Bqe,"CODE",{});var MFt=s(WFe);wvr=r(MFt,"__init__()"),MFt.forEach(t),Avr=r(Bqe," (throws an error)."),Bqe.forEach(t),yvr=i(El),St=n(El,"DIV",{class:!0});var j0=s(St);T(Y8.$$.fragment,j0),Lvr=i(j0),HFe=n(j0,"P",{});var EFt=s(HFe);xvr=r(EFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EFt.forEach(t),$vr=i(j0),sc=n(j0,"P",{});var EK=s(sc);kvr=r(EK,`Note:
Loading a model from its configuration file does `),UFe=n(EK,"STRONG",{});var CFt=s(UFe);Svr=r(CFt,"not"),CFt.forEach(t),Rvr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(EK,"A",{href:!0});var wFt=s(RW);Bvr=r(wFt,"from_pretrained()"),wFt.forEach(t),Pvr=r(EK," to load the model weights."),EK.forEach(t),Ivr=i(j0),T(C5.$$.fragment,j0),j0.forEach(t),qvr=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(K8.$$.fragment,Cl),Nvr=i(Cl),JFe=n(Cl,"P",{});var AFt=s(JFe);jvr=r(AFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AFt.forEach(t),Dvr=i(Cl),an=n(Cl,"P",{});var D0=s(an);Gvr=r(D0,"The model class to instantiate is selected based on the "),YFe=n(D0,"CODE",{});var yFt=s(YFe);Ovr=r(yFt,"model_type"),yFt.forEach(t),Vvr=r(D0,` property of the config object (either
passed as an argument or loaded from `),KFe=n(D0,"CODE",{});var LFt=s(KFe);Xvr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),zvr=r(D0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(D0,"CODE",{});var xFt=s(ZFe);Qvr=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),Wvr=r(D0,":"),D0.forEach(t),Hvr=i(Cl),de=n(Cl,"UL",{});var fe=s(de);w5=n(fe,"LI",{});var vke=s(w5);eve=n(vke,"STRONG",{});var $Ft=s(eve);Uvr=r($Ft,"albert"),$Ft.forEach(t),Jvr=r(vke," \u2014 "),BW=n(vke,"A",{href:!0});var kFt=s(BW);Yvr=r(kFt,"TFAlbertForTokenClassification"),kFt.forEach(t),Kvr=r(vke," (ALBERT model)"),vke.forEach(t),Zvr=i(fe),A5=n(fe,"LI",{});var Tke=s(A5);ove=n(Tke,"STRONG",{});var SFt=s(ove);e1r=r(SFt,"bert"),SFt.forEach(t),o1r=r(Tke," \u2014 "),PW=n(Tke,"A",{href:!0});var RFt=s(PW);r1r=r(RFt,"TFBertForTokenClassification"),RFt.forEach(t),t1r=r(Tke," (BERT model)"),Tke.forEach(t),a1r=i(fe),y5=n(fe,"LI",{});var Mke=s(y5);rve=n(Mke,"STRONG",{});var BFt=s(rve);n1r=r(BFt,"camembert"),BFt.forEach(t),s1r=r(Mke," \u2014 "),IW=n(Mke,"A",{href:!0});var PFt=s(IW);l1r=r(PFt,"TFCamembertForTokenClassification"),PFt.forEach(t),i1r=r(Mke," (CamemBERT model)"),Mke.forEach(t),d1r=i(fe),L5=n(fe,"LI",{});var Eke=s(L5);tve=n(Eke,"STRONG",{});var IFt=s(tve);c1r=r(IFt,"convbert"),IFt.forEach(t),m1r=r(Eke," \u2014 "),qW=n(Eke,"A",{href:!0});var qFt=s(qW);f1r=r(qFt,"TFConvBertForTokenClassification"),qFt.forEach(t),g1r=r(Eke," (ConvBERT model)"),Eke.forEach(t),h1r=i(fe),x5=n(fe,"LI",{});var Cke=s(x5);ave=n(Cke,"STRONG",{});var NFt=s(ave);u1r=r(NFt,"deberta"),NFt.forEach(t),p1r=r(Cke," \u2014 "),NW=n(Cke,"A",{href:!0});var jFt=s(NW);_1r=r(jFt,"TFDebertaForTokenClassification"),jFt.forEach(t),b1r=r(Cke," (DeBERTa model)"),Cke.forEach(t),F1r=i(fe),$5=n(fe,"LI",{});var wke=s($5);nve=n(wke,"STRONG",{});var DFt=s(nve);v1r=r(DFt,"deberta-v2"),DFt.forEach(t),T1r=r(wke," \u2014 "),jW=n(wke,"A",{href:!0});var GFt=s(jW);M1r=r(GFt,"TFDebertaV2ForTokenClassification"),GFt.forEach(t),E1r=r(wke," (DeBERTa-v2 model)"),wke.forEach(t),C1r=i(fe),k5=n(fe,"LI",{});var Ake=s(k5);sve=n(Ake,"STRONG",{});var OFt=s(sve);w1r=r(OFt,"distilbert"),OFt.forEach(t),A1r=r(Ake," \u2014 "),DW=n(Ake,"A",{href:!0});var VFt=s(DW);y1r=r(VFt,"TFDistilBertForTokenClassification"),VFt.forEach(t),L1r=r(Ake," (DistilBERT model)"),Ake.forEach(t),x1r=i(fe),S5=n(fe,"LI",{});var yke=s(S5);lve=n(yke,"STRONG",{});var XFt=s(lve);$1r=r(XFt,"electra"),XFt.forEach(t),k1r=r(yke," \u2014 "),GW=n(yke,"A",{href:!0});var zFt=s(GW);S1r=r(zFt,"TFElectraForTokenClassification"),zFt.forEach(t),R1r=r(yke," (ELECTRA model)"),yke.forEach(t),B1r=i(fe),R5=n(fe,"LI",{});var Lke=s(R5);ive=n(Lke,"STRONG",{});var QFt=s(ive);P1r=r(QFt,"flaubert"),QFt.forEach(t),I1r=r(Lke," \u2014 "),OW=n(Lke,"A",{href:!0});var WFt=s(OW);q1r=r(WFt,"TFFlaubertForTokenClassification"),WFt.forEach(t),N1r=r(Lke," (FlauBERT model)"),Lke.forEach(t),j1r=i(fe),B5=n(fe,"LI",{});var xke=s(B5);dve=n(xke,"STRONG",{});var HFt=s(dve);D1r=r(HFt,"funnel"),HFt.forEach(t),G1r=r(xke," \u2014 "),VW=n(xke,"A",{href:!0});var UFt=s(VW);O1r=r(UFt,"TFFunnelForTokenClassification"),UFt.forEach(t),V1r=r(xke," (Funnel Transformer model)"),xke.forEach(t),X1r=i(fe),P5=n(fe,"LI",{});var $ke=s(P5);cve=n($ke,"STRONG",{});var JFt=s(cve);z1r=r(JFt,"layoutlm"),JFt.forEach(t),Q1r=r($ke," \u2014 "),XW=n($ke,"A",{href:!0});var YFt=s(XW);W1r=r(YFt,"TFLayoutLMForTokenClassification"),YFt.forEach(t),H1r=r($ke," (LayoutLM model)"),$ke.forEach(t),U1r=i(fe),I5=n(fe,"LI",{});var kke=s(I5);mve=n(kke,"STRONG",{});var KFt=s(mve);J1r=r(KFt,"longformer"),KFt.forEach(t),Y1r=r(kke," \u2014 "),zW=n(kke,"A",{href:!0});var ZFt=s(zW);K1r=r(ZFt,"TFLongformerForTokenClassification"),ZFt.forEach(t),Z1r=r(kke," (Longformer model)"),kke.forEach(t),eTr=i(fe),q5=n(fe,"LI",{});var Ske=s(q5);fve=n(Ske,"STRONG",{});var evt=s(fve);oTr=r(evt,"mobilebert"),evt.forEach(t),rTr=r(Ske," \u2014 "),QW=n(Ske,"A",{href:!0});var ovt=s(QW);tTr=r(ovt,"TFMobileBertForTokenClassification"),ovt.forEach(t),aTr=r(Ske," (MobileBERT model)"),Ske.forEach(t),nTr=i(fe),N5=n(fe,"LI",{});var Rke=s(N5);gve=n(Rke,"STRONG",{});var rvt=s(gve);sTr=r(rvt,"mpnet"),rvt.forEach(t),lTr=r(Rke," \u2014 "),WW=n(Rke,"A",{href:!0});var tvt=s(WW);iTr=r(tvt,"TFMPNetForTokenClassification"),tvt.forEach(t),dTr=r(Rke," (MPNet model)"),Rke.forEach(t),cTr=i(fe),j5=n(fe,"LI",{});var Bke=s(j5);hve=n(Bke,"STRONG",{});var avt=s(hve);mTr=r(avt,"rembert"),avt.forEach(t),fTr=r(Bke," \u2014 "),HW=n(Bke,"A",{href:!0});var nvt=s(HW);gTr=r(nvt,"TFRemBertForTokenClassification"),nvt.forEach(t),hTr=r(Bke," (RemBERT model)"),Bke.forEach(t),uTr=i(fe),D5=n(fe,"LI",{});var Pke=s(D5);uve=n(Pke,"STRONG",{});var svt=s(uve);pTr=r(svt,"roberta"),svt.forEach(t),_Tr=r(Pke," \u2014 "),UW=n(Pke,"A",{href:!0});var lvt=s(UW);bTr=r(lvt,"TFRobertaForTokenClassification"),lvt.forEach(t),FTr=r(Pke," (RoBERTa model)"),Pke.forEach(t),vTr=i(fe),G5=n(fe,"LI",{});var Ike=s(G5);pve=n(Ike,"STRONG",{});var ivt=s(pve);TTr=r(ivt,"roformer"),ivt.forEach(t),MTr=r(Ike," \u2014 "),JW=n(Ike,"A",{href:!0});var dvt=s(JW);ETr=r(dvt,"TFRoFormerForTokenClassification"),dvt.forEach(t),CTr=r(Ike," (RoFormer model)"),Ike.forEach(t),wTr=i(fe),O5=n(fe,"LI",{});var qke=s(O5);_ve=n(qke,"STRONG",{});var cvt=s(_ve);ATr=r(cvt,"xlm"),cvt.forEach(t),yTr=r(qke," \u2014 "),YW=n(qke,"A",{href:!0});var mvt=s(YW);LTr=r(mvt,"TFXLMForTokenClassification"),mvt.forEach(t),xTr=r(qke," (XLM model)"),qke.forEach(t),$Tr=i(fe),V5=n(fe,"LI",{});var Nke=s(V5);bve=n(Nke,"STRONG",{});var fvt=s(bve);kTr=r(fvt,"xlm-roberta"),fvt.forEach(t),STr=r(Nke," \u2014 "),KW=n(Nke,"A",{href:!0});var gvt=s(KW);RTr=r(gvt,"TFXLMRobertaForTokenClassification"),gvt.forEach(t),BTr=r(Nke," (XLM-RoBERTa model)"),Nke.forEach(t),PTr=i(fe),X5=n(fe,"LI",{});var jke=s(X5);Fve=n(jke,"STRONG",{});var hvt=s(Fve);ITr=r(hvt,"xlnet"),hvt.forEach(t),qTr=r(jke," \u2014 "),ZW=n(jke,"A",{href:!0});var uvt=s(ZW);NTr=r(uvt,"TFXLNetForTokenClassification"),uvt.forEach(t),jTr=r(jke," (XLNet model)"),jke.forEach(t),fe.forEach(t),DTr=i(Cl),T(z5.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),$Pe=i(m),lc=n(m,"H2",{class:!0});var Pqe=s(lc);Q5=n(Pqe,"A",{id:!0,class:!0,href:!0});var pvt=s(Q5);vve=n(pvt,"SPAN",{});var _vt=s(vve);T(Z8.$$.fragment,_vt),_vt.forEach(t),pvt.forEach(t),GTr=i(Pqe),Tve=n(Pqe,"SPAN",{});var bvt=s(Tve);OTr=r(bvt,"TFAutoModelForQuestionAnswering"),bvt.forEach(t),Pqe.forEach(t),kPe=i(m),lr=n(m,"DIV",{class:!0});var wl=s(lr);T(e7.$$.fragment,wl),VTr=i(wl),ic=n(wl,"P",{});var CK=s(ic);XTr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=n(CK,"A",{href:!0});var Fvt=s(eH);zTr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),QTr=r(CK," class method or the "),oH=n(CK,"A",{href:!0});var vvt=s(oH);WTr=r(vvt,"from_config()"),vvt.forEach(t),HTr=r(CK,` class
method.`),CK.forEach(t),UTr=i(wl),o7=n(wl,"P",{});var Iqe=s(o7);JTr=r(Iqe,"This class cannot be instantiated directly using "),Mve=n(Iqe,"CODE",{});var Tvt=s(Mve);YTr=r(Tvt,"__init__()"),Tvt.forEach(t),KTr=r(Iqe," (throws an error)."),Iqe.forEach(t),ZTr=i(wl),Rt=n(wl,"DIV",{class:!0});var G0=s(Rt);T(r7.$$.fragment,G0),eMr=i(G0),Eve=n(G0,"P",{});var Mvt=s(Eve);oMr=r(Mvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mvt.forEach(t),rMr=i(G0),dc=n(G0,"P",{});var wK=s(dc);tMr=r(wK,`Note:
Loading a model from its configuration file does `),Cve=n(wK,"STRONG",{});var Evt=s(Cve);aMr=r(Evt,"not"),Evt.forEach(t),nMr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(wK,"A",{href:!0});var Cvt=s(rH);sMr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),lMr=r(wK," to load the model weights."),wK.forEach(t),iMr=i(G0),T(W5.$$.fragment,G0),G0.forEach(t),dMr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(t7.$$.fragment,Al),cMr=i(Al),wve=n(Al,"P",{});var wvt=s(wve);mMr=r(wvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wvt.forEach(t),fMr=i(Al),nn=n(Al,"P",{});var O0=s(nn);gMr=r(O0,"The model class to instantiate is selected based on the "),Ave=n(O0,"CODE",{});var Avt=s(Ave);hMr=r(Avt,"model_type"),Avt.forEach(t),uMr=r(O0,` property of the config object (either
passed as an argument or loaded from `),yve=n(O0,"CODE",{});var yvt=s(yve);pMr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),_Mr=r(O0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(O0,"CODE",{});var Lvt=s(Lve);bMr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),FMr=r(O0,":"),O0.forEach(t),vMr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);H5=n(ge,"LI",{});var Dke=s(H5);xve=n(Dke,"STRONG",{});var xvt=s(xve);TMr=r(xvt,"albert"),xvt.forEach(t),MMr=r(Dke," \u2014 "),tH=n(Dke,"A",{href:!0});var $vt=s(tH);EMr=r($vt,"TFAlbertForQuestionAnswering"),$vt.forEach(t),CMr=r(Dke," (ALBERT model)"),Dke.forEach(t),wMr=i(ge),U5=n(ge,"LI",{});var Gke=s(U5);$ve=n(Gke,"STRONG",{});var kvt=s($ve);AMr=r(kvt,"bert"),kvt.forEach(t),yMr=r(Gke," \u2014 "),aH=n(Gke,"A",{href:!0});var Svt=s(aH);LMr=r(Svt,"TFBertForQuestionAnswering"),Svt.forEach(t),xMr=r(Gke," (BERT model)"),Gke.forEach(t),$Mr=i(ge),J5=n(ge,"LI",{});var Oke=s(J5);kve=n(Oke,"STRONG",{});var Rvt=s(kve);kMr=r(Rvt,"camembert"),Rvt.forEach(t),SMr=r(Oke," \u2014 "),nH=n(Oke,"A",{href:!0});var Bvt=s(nH);RMr=r(Bvt,"TFCamembertForQuestionAnswering"),Bvt.forEach(t),BMr=r(Oke," (CamemBERT model)"),Oke.forEach(t),PMr=i(ge),Y5=n(ge,"LI",{});var Vke=s(Y5);Sve=n(Vke,"STRONG",{});var Pvt=s(Sve);IMr=r(Pvt,"convbert"),Pvt.forEach(t),qMr=r(Vke," \u2014 "),sH=n(Vke,"A",{href:!0});var Ivt=s(sH);NMr=r(Ivt,"TFConvBertForQuestionAnswering"),Ivt.forEach(t),jMr=r(Vke," (ConvBERT model)"),Vke.forEach(t),DMr=i(ge),K5=n(ge,"LI",{});var Xke=s(K5);Rve=n(Xke,"STRONG",{});var qvt=s(Rve);GMr=r(qvt,"deberta"),qvt.forEach(t),OMr=r(Xke," \u2014 "),lH=n(Xke,"A",{href:!0});var Nvt=s(lH);VMr=r(Nvt,"TFDebertaForQuestionAnswering"),Nvt.forEach(t),XMr=r(Xke," (DeBERTa model)"),Xke.forEach(t),zMr=i(ge),Z5=n(ge,"LI",{});var zke=s(Z5);Bve=n(zke,"STRONG",{});var jvt=s(Bve);QMr=r(jvt,"deberta-v2"),jvt.forEach(t),WMr=r(zke," \u2014 "),iH=n(zke,"A",{href:!0});var Dvt=s(iH);HMr=r(Dvt,"TFDebertaV2ForQuestionAnswering"),Dvt.forEach(t),UMr=r(zke," (DeBERTa-v2 model)"),zke.forEach(t),JMr=i(ge),eC=n(ge,"LI",{});var Qke=s(eC);Pve=n(Qke,"STRONG",{});var Gvt=s(Pve);YMr=r(Gvt,"distilbert"),Gvt.forEach(t),KMr=r(Qke," \u2014 "),dH=n(Qke,"A",{href:!0});var Ovt=s(dH);ZMr=r(Ovt,"TFDistilBertForQuestionAnswering"),Ovt.forEach(t),e4r=r(Qke," (DistilBERT model)"),Qke.forEach(t),o4r=i(ge),oC=n(ge,"LI",{});var Wke=s(oC);Ive=n(Wke,"STRONG",{});var Vvt=s(Ive);r4r=r(Vvt,"electra"),Vvt.forEach(t),t4r=r(Wke," \u2014 "),cH=n(Wke,"A",{href:!0});var Xvt=s(cH);a4r=r(Xvt,"TFElectraForQuestionAnswering"),Xvt.forEach(t),n4r=r(Wke," (ELECTRA model)"),Wke.forEach(t),s4r=i(ge),rC=n(ge,"LI",{});var Hke=s(rC);qve=n(Hke,"STRONG",{});var zvt=s(qve);l4r=r(zvt,"flaubert"),zvt.forEach(t),i4r=r(Hke," \u2014 "),mH=n(Hke,"A",{href:!0});var Qvt=s(mH);d4r=r(Qvt,"TFFlaubertForQuestionAnsweringSimple"),Qvt.forEach(t),c4r=r(Hke," (FlauBERT model)"),Hke.forEach(t),m4r=i(ge),tC=n(ge,"LI",{});var Uke=s(tC);Nve=n(Uke,"STRONG",{});var Wvt=s(Nve);f4r=r(Wvt,"funnel"),Wvt.forEach(t),g4r=r(Uke," \u2014 "),fH=n(Uke,"A",{href:!0});var Hvt=s(fH);h4r=r(Hvt,"TFFunnelForQuestionAnswering"),Hvt.forEach(t),u4r=r(Uke," (Funnel Transformer model)"),Uke.forEach(t),p4r=i(ge),aC=n(ge,"LI",{});var Jke=s(aC);jve=n(Jke,"STRONG",{});var Uvt=s(jve);_4r=r(Uvt,"gptj"),Uvt.forEach(t),b4r=r(Jke," \u2014 "),gH=n(Jke,"A",{href:!0});var Jvt=s(gH);F4r=r(Jvt,"TFGPTJForQuestionAnswering"),Jvt.forEach(t),v4r=r(Jke," (GPT-J model)"),Jke.forEach(t),T4r=i(ge),nC=n(ge,"LI",{});var Yke=s(nC);Dve=n(Yke,"STRONG",{});var Yvt=s(Dve);M4r=r(Yvt,"longformer"),Yvt.forEach(t),E4r=r(Yke," \u2014 "),hH=n(Yke,"A",{href:!0});var Kvt=s(hH);C4r=r(Kvt,"TFLongformerForQuestionAnswering"),Kvt.forEach(t),w4r=r(Yke," (Longformer model)"),Yke.forEach(t),A4r=i(ge),sC=n(ge,"LI",{});var Kke=s(sC);Gve=n(Kke,"STRONG",{});var Zvt=s(Gve);y4r=r(Zvt,"mobilebert"),Zvt.forEach(t),L4r=r(Kke," \u2014 "),uH=n(Kke,"A",{href:!0});var e1t=s(uH);x4r=r(e1t,"TFMobileBertForQuestionAnswering"),e1t.forEach(t),$4r=r(Kke," (MobileBERT model)"),Kke.forEach(t),k4r=i(ge),lC=n(ge,"LI",{});var Zke=s(lC);Ove=n(Zke,"STRONG",{});var o1t=s(Ove);S4r=r(o1t,"mpnet"),o1t.forEach(t),R4r=r(Zke," \u2014 "),pH=n(Zke,"A",{href:!0});var r1t=s(pH);B4r=r(r1t,"TFMPNetForQuestionAnswering"),r1t.forEach(t),P4r=r(Zke," (MPNet model)"),Zke.forEach(t),I4r=i(ge),iC=n(ge,"LI",{});var eSe=s(iC);Vve=n(eSe,"STRONG",{});var t1t=s(Vve);q4r=r(t1t,"rembert"),t1t.forEach(t),N4r=r(eSe," \u2014 "),_H=n(eSe,"A",{href:!0});var a1t=s(_H);j4r=r(a1t,"TFRemBertForQuestionAnswering"),a1t.forEach(t),D4r=r(eSe," (RemBERT model)"),eSe.forEach(t),G4r=i(ge),dC=n(ge,"LI",{});var oSe=s(dC);Xve=n(oSe,"STRONG",{});var n1t=s(Xve);O4r=r(n1t,"roberta"),n1t.forEach(t),V4r=r(oSe," \u2014 "),bH=n(oSe,"A",{href:!0});var s1t=s(bH);X4r=r(s1t,"TFRobertaForQuestionAnswering"),s1t.forEach(t),z4r=r(oSe," (RoBERTa model)"),oSe.forEach(t),Q4r=i(ge),cC=n(ge,"LI",{});var rSe=s(cC);zve=n(rSe,"STRONG",{});var l1t=s(zve);W4r=r(l1t,"roformer"),l1t.forEach(t),H4r=r(rSe," \u2014 "),FH=n(rSe,"A",{href:!0});var i1t=s(FH);U4r=r(i1t,"TFRoFormerForQuestionAnswering"),i1t.forEach(t),J4r=r(rSe," (RoFormer model)"),rSe.forEach(t),Y4r=i(ge),mC=n(ge,"LI",{});var tSe=s(mC);Qve=n(tSe,"STRONG",{});var d1t=s(Qve);K4r=r(d1t,"xlm"),d1t.forEach(t),Z4r=r(tSe," \u2014 "),vH=n(tSe,"A",{href:!0});var c1t=s(vH);eEr=r(c1t,"TFXLMForQuestionAnsweringSimple"),c1t.forEach(t),oEr=r(tSe," (XLM model)"),tSe.forEach(t),rEr=i(ge),fC=n(ge,"LI",{});var aSe=s(fC);Wve=n(aSe,"STRONG",{});var m1t=s(Wve);tEr=r(m1t,"xlm-roberta"),m1t.forEach(t),aEr=r(aSe," \u2014 "),TH=n(aSe,"A",{href:!0});var f1t=s(TH);nEr=r(f1t,"TFXLMRobertaForQuestionAnswering"),f1t.forEach(t),sEr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),lEr=i(ge),gC=n(ge,"LI",{});var nSe=s(gC);Hve=n(nSe,"STRONG",{});var g1t=s(Hve);iEr=r(g1t,"xlnet"),g1t.forEach(t),dEr=r(nSe," \u2014 "),MH=n(nSe,"A",{href:!0});var h1t=s(MH);cEr=r(h1t,"TFXLNetForQuestionAnsweringSimple"),h1t.forEach(t),mEr=r(nSe," (XLNet model)"),nSe.forEach(t),ge.forEach(t),fEr=i(Al),T(hC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),SPe=i(m),cc=n(m,"H2",{class:!0});var qqe=s(cc);uC=n(qqe,"A",{id:!0,class:!0,href:!0});var u1t=s(uC);Uve=n(u1t,"SPAN",{});var p1t=s(Uve);T(a7.$$.fragment,p1t),p1t.forEach(t),u1t.forEach(t),gEr=i(qqe),Jve=n(qqe,"SPAN",{});var _1t=s(Jve);hEr=r(_1t,"TFAutoModelForVision2Seq"),_1t.forEach(t),qqe.forEach(t),RPe=i(m),ir=n(m,"DIV",{class:!0});var yl=s(ir);T(n7.$$.fragment,yl),uEr=i(yl),mc=n(yl,"P",{});var AK=s(mc);pEr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EH=n(AK,"A",{href:!0});var b1t=s(EH);_Er=r(b1t,"from_pretrained()"),b1t.forEach(t),bEr=r(AK," class method or the "),CH=n(AK,"A",{href:!0});var F1t=s(CH);FEr=r(F1t,"from_config()"),F1t.forEach(t),vEr=r(AK,` class
method.`),AK.forEach(t),TEr=i(yl),s7=n(yl,"P",{});var Nqe=s(s7);MEr=r(Nqe,"This class cannot be instantiated directly using "),Yve=n(Nqe,"CODE",{});var v1t=s(Yve);EEr=r(v1t,"__init__()"),v1t.forEach(t),CEr=r(Nqe," (throws an error)."),Nqe.forEach(t),wEr=i(yl),Bt=n(yl,"DIV",{class:!0});var V0=s(Bt);T(l7.$$.fragment,V0),AEr=i(V0),Kve=n(V0,"P",{});var T1t=s(Kve);yEr=r(T1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T1t.forEach(t),LEr=i(V0),fc=n(V0,"P",{});var yK=s(fc);xEr=r(yK,`Note:
Loading a model from its configuration file does `),Zve=n(yK,"STRONG",{});var M1t=s(Zve);$Er=r(M1t,"not"),M1t.forEach(t),kEr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(yK,"A",{href:!0});var E1t=s(wH);SEr=r(E1t,"from_pretrained()"),E1t.forEach(t),REr=r(yK," to load the model weights."),yK.forEach(t),BEr=i(V0),T(pC.$$.fragment,V0),V0.forEach(t),PEr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(i7.$$.fragment,Ll),IEr=i(Ll),e1e=n(Ll,"P",{});var C1t=s(e1e);qEr=r(C1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C1t.forEach(t),NEr=i(Ll),sn=n(Ll,"P",{});var X0=s(sn);jEr=r(X0,"The model class to instantiate is selected based on the "),o1e=n(X0,"CODE",{});var w1t=s(o1e);DEr=r(w1t,"model_type"),w1t.forEach(t),GEr=r(X0,` property of the config object (either
passed as an argument or loaded from `),r1e=n(X0,"CODE",{});var A1t=s(r1e);OEr=r(A1t,"pretrained_model_name_or_path"),A1t.forEach(t),VEr=r(X0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(X0,"CODE",{});var y1t=s(t1e);XEr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),zEr=r(X0,":"),X0.forEach(t),QEr=i(Ll),a1e=n(Ll,"UL",{});var L1t=s(a1e);_C=n(L1t,"LI",{});var sSe=s(_C);n1e=n(sSe,"STRONG",{});var x1t=s(n1e);WEr=r(x1t,"vision-encoder-decoder"),x1t.forEach(t),HEr=r(sSe," \u2014 "),AH=n(sSe,"A",{href:!0});var $1t=s(AH);UEr=r($1t,"TFVisionEncoderDecoderModel"),$1t.forEach(t),JEr=r(sSe," (Vision Encoder decoder model)"),sSe.forEach(t),L1t.forEach(t),YEr=i(Ll),T(bC.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),BPe=i(m),gc=n(m,"H2",{class:!0});var jqe=s(gc);FC=n(jqe,"A",{id:!0,class:!0,href:!0});var k1t=s(FC);s1e=n(k1t,"SPAN",{});var S1t=s(s1e);T(d7.$$.fragment,S1t),S1t.forEach(t),k1t.forEach(t),KEr=i(jqe),l1e=n(jqe,"SPAN",{});var R1t=s(l1e);ZEr=r(R1t,"TFAutoModelForSpeechSeq2Seq"),R1t.forEach(t),jqe.forEach(t),PPe=i(m),dr=n(m,"DIV",{class:!0});var xl=s(dr);T(c7.$$.fragment,xl),e5r=i(xl),hc=n(xl,"P",{});var LK=s(hc);o5r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yH=n(LK,"A",{href:!0});var B1t=s(yH);r5r=r(B1t,"from_pretrained()"),B1t.forEach(t),t5r=r(LK," class method or the "),LH=n(LK,"A",{href:!0});var P1t=s(LH);a5r=r(P1t,"from_config()"),P1t.forEach(t),n5r=r(LK,` class
method.`),LK.forEach(t),s5r=i(xl),m7=n(xl,"P",{});var Dqe=s(m7);l5r=r(Dqe,"This class cannot be instantiated directly using "),i1e=n(Dqe,"CODE",{});var I1t=s(i1e);i5r=r(I1t,"__init__()"),I1t.forEach(t),d5r=r(Dqe," (throws an error)."),Dqe.forEach(t),c5r=i(xl),Pt=n(xl,"DIV",{class:!0});var z0=s(Pt);T(f7.$$.fragment,z0),m5r=i(z0),d1e=n(z0,"P",{});var q1t=s(d1e);f5r=r(q1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),q1t.forEach(t),g5r=i(z0),uc=n(z0,"P",{});var xK=s(uc);h5r=r(xK,`Note:
Loading a model from its configuration file does `),c1e=n(xK,"STRONG",{});var N1t=s(c1e);u5r=r(N1t,"not"),N1t.forEach(t),p5r=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(xK,"A",{href:!0});var j1t=s(xH);_5r=r(j1t,"from_pretrained()"),j1t.forEach(t),b5r=r(xK," to load the model weights."),xK.forEach(t),F5r=i(z0),T(vC.$$.fragment,z0),z0.forEach(t),v5r=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(g7.$$.fragment,$l),T5r=i($l),m1e=n($l,"P",{});var D1t=s(m1e);M5r=r(D1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D1t.forEach(t),E5r=i($l),ln=n($l,"P",{});var Q0=s(ln);C5r=r(Q0,"The model class to instantiate is selected based on the "),f1e=n(Q0,"CODE",{});var G1t=s(f1e);w5r=r(G1t,"model_type"),G1t.forEach(t),A5r=r(Q0,` property of the config object (either
passed as an argument or loaded from `),g1e=n(Q0,"CODE",{});var O1t=s(g1e);y5r=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),L5r=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(Q0,"CODE",{});var V1t=s(h1e);x5r=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),$5r=r(Q0,":"),Q0.forEach(t),k5r=i($l),u1e=n($l,"UL",{});var X1t=s(u1e);TC=n(X1t,"LI",{});var lSe=s(TC);p1e=n(lSe,"STRONG",{});var z1t=s(p1e);S5r=r(z1t,"speech_to_text"),z1t.forEach(t),R5r=r(lSe," \u2014 "),$H=n(lSe,"A",{href:!0});var Q1t=s($H);B5r=r(Q1t,"TFSpeech2TextForConditionalGeneration"),Q1t.forEach(t),P5r=r(lSe," (Speech2Text model)"),lSe.forEach(t),X1t.forEach(t),I5r=i($l),T(MC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),IPe=i(m),pc=n(m,"H2",{class:!0});var Gqe=s(pc);EC=n(Gqe,"A",{id:!0,class:!0,href:!0});var W1t=s(EC);_1e=n(W1t,"SPAN",{});var H1t=s(_1e);T(h7.$$.fragment,H1t),H1t.forEach(t),W1t.forEach(t),q5r=i(Gqe),b1e=n(Gqe,"SPAN",{});var U1t=s(b1e);N5r=r(U1t,"FlaxAutoModel"),U1t.forEach(t),Gqe.forEach(t),qPe=i(m),cr=n(m,"DIV",{class:!0});var kl=s(cr);T(u7.$$.fragment,kl),j5r=i(kl),_c=n(kl,"P",{});var $K=s(_c);D5r=r($K,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kH=n($K,"A",{href:!0});var J1t=s(kH);G5r=r(J1t,"from_pretrained()"),J1t.forEach(t),O5r=r($K," class method or the "),SH=n($K,"A",{href:!0});var Y1t=s(SH);V5r=r(Y1t,"from_config()"),Y1t.forEach(t),X5r=r($K,` class
method.`),$K.forEach(t),z5r=i(kl),p7=n(kl,"P",{});var Oqe=s(p7);Q5r=r(Oqe,"This class cannot be instantiated directly using "),F1e=n(Oqe,"CODE",{});var K1t=s(F1e);W5r=r(K1t,"__init__()"),K1t.forEach(t),H5r=r(Oqe," (throws an error)."),Oqe.forEach(t),U5r=i(kl),It=n(kl,"DIV",{class:!0});var W0=s(It);T(_7.$$.fragment,W0),J5r=i(W0),v1e=n(W0,"P",{});var Z1t=s(v1e);Y5r=r(Z1t,"Instantiates one of the base model classes of the library from a configuration."),Z1t.forEach(t),K5r=i(W0),bc=n(W0,"P",{});var kK=s(bc);Z5r=r(kK,`Note:
Loading a model from its configuration file does `),T1e=n(kK,"STRONG",{});var eTt=s(T1e);eCr=r(eTt,"not"),eTt.forEach(t),oCr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(kK,"A",{href:!0});var oTt=s(RH);rCr=r(oTt,"from_pretrained()"),oTt.forEach(t),tCr=r(kK," to load the model weights."),kK.forEach(t),aCr=i(W0),T(CC.$$.fragment,W0),W0.forEach(t),nCr=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(b7.$$.fragment,Sl),sCr=i(Sl),M1e=n(Sl,"P",{});var rTt=s(M1e);lCr=r(rTt,"Instantiate one of the base model classes of the library from a pretrained model."),rTt.forEach(t),iCr=i(Sl),dn=n(Sl,"P",{});var H0=s(dn);dCr=r(H0,"The model class to instantiate is selected based on the "),E1e=n(H0,"CODE",{});var tTt=s(E1e);cCr=r(tTt,"model_type"),tTt.forEach(t),mCr=r(H0,` property of the config object (either
passed as an argument or loaded from `),C1e=n(H0,"CODE",{});var aTt=s(C1e);fCr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),gCr=r(H0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(H0,"CODE",{});var nTt=s(w1e);hCr=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),uCr=r(H0,":"),H0.forEach(t),pCr=i(Sl),oe=n(Sl,"UL",{});var ae=s(oe);wC=n(ae,"LI",{});var iSe=s(wC);A1e=n(iSe,"STRONG",{});var sTt=s(A1e);_Cr=r(sTt,"albert"),sTt.forEach(t),bCr=r(iSe," \u2014 "),BH=n(iSe,"A",{href:!0});var lTt=s(BH);FCr=r(lTt,"FlaxAlbertModel"),lTt.forEach(t),vCr=r(iSe," (ALBERT model)"),iSe.forEach(t),TCr=i(ae),AC=n(ae,"LI",{});var dSe=s(AC);y1e=n(dSe,"STRONG",{});var iTt=s(y1e);MCr=r(iTt,"bart"),iTt.forEach(t),ECr=r(dSe," \u2014 "),PH=n(dSe,"A",{href:!0});var dTt=s(PH);CCr=r(dTt,"FlaxBartModel"),dTt.forEach(t),wCr=r(dSe," (BART model)"),dSe.forEach(t),ACr=i(ae),yC=n(ae,"LI",{});var cSe=s(yC);L1e=n(cSe,"STRONG",{});var cTt=s(L1e);yCr=r(cTt,"beit"),cTt.forEach(t),LCr=r(cSe," \u2014 "),IH=n(cSe,"A",{href:!0});var mTt=s(IH);xCr=r(mTt,"FlaxBeitModel"),mTt.forEach(t),$Cr=r(cSe," (BEiT model)"),cSe.forEach(t),kCr=i(ae),LC=n(ae,"LI",{});var mSe=s(LC);x1e=n(mSe,"STRONG",{});var fTt=s(x1e);SCr=r(fTt,"bert"),fTt.forEach(t),RCr=r(mSe," \u2014 "),qH=n(mSe,"A",{href:!0});var gTt=s(qH);BCr=r(gTt,"FlaxBertModel"),gTt.forEach(t),PCr=r(mSe," (BERT model)"),mSe.forEach(t),ICr=i(ae),xC=n(ae,"LI",{});var fSe=s(xC);$1e=n(fSe,"STRONG",{});var hTt=s($1e);qCr=r(hTt,"big_bird"),hTt.forEach(t),NCr=r(fSe," \u2014 "),NH=n(fSe,"A",{href:!0});var uTt=s(NH);jCr=r(uTt,"FlaxBigBirdModel"),uTt.forEach(t),DCr=r(fSe," (BigBird model)"),fSe.forEach(t),GCr=i(ae),$C=n(ae,"LI",{});var gSe=s($C);k1e=n(gSe,"STRONG",{});var pTt=s(k1e);OCr=r(pTt,"blenderbot"),pTt.forEach(t),VCr=r(gSe," \u2014 "),jH=n(gSe,"A",{href:!0});var _Tt=s(jH);XCr=r(_Tt,"FlaxBlenderbotModel"),_Tt.forEach(t),zCr=r(gSe," (Blenderbot model)"),gSe.forEach(t),QCr=i(ae),kC=n(ae,"LI",{});var hSe=s(kC);S1e=n(hSe,"STRONG",{});var bTt=s(S1e);WCr=r(bTt,"blenderbot-small"),bTt.forEach(t),HCr=r(hSe," \u2014 "),DH=n(hSe,"A",{href:!0});var FTt=s(DH);UCr=r(FTt,"FlaxBlenderbotSmallModel"),FTt.forEach(t),JCr=r(hSe," (BlenderbotSmall model)"),hSe.forEach(t),YCr=i(ae),SC=n(ae,"LI",{});var uSe=s(SC);R1e=n(uSe,"STRONG",{});var vTt=s(R1e);KCr=r(vTt,"clip"),vTt.forEach(t),ZCr=r(uSe," \u2014 "),GH=n(uSe,"A",{href:!0});var TTt=s(GH);e3r=r(TTt,"FlaxCLIPModel"),TTt.forEach(t),o3r=r(uSe," (CLIP model)"),uSe.forEach(t),r3r=i(ae),RC=n(ae,"LI",{});var pSe=s(RC);B1e=n(pSe,"STRONG",{});var MTt=s(B1e);t3r=r(MTt,"distilbert"),MTt.forEach(t),a3r=r(pSe," \u2014 "),OH=n(pSe,"A",{href:!0});var ETt=s(OH);n3r=r(ETt,"FlaxDistilBertModel"),ETt.forEach(t),s3r=r(pSe," (DistilBERT model)"),pSe.forEach(t),l3r=i(ae),BC=n(ae,"LI",{});var _Se=s(BC);P1e=n(_Se,"STRONG",{});var CTt=s(P1e);i3r=r(CTt,"electra"),CTt.forEach(t),d3r=r(_Se," \u2014 "),VH=n(_Se,"A",{href:!0});var wTt=s(VH);c3r=r(wTt,"FlaxElectraModel"),wTt.forEach(t),m3r=r(_Se," (ELECTRA model)"),_Se.forEach(t),f3r=i(ae),PC=n(ae,"LI",{});var bSe=s(PC);I1e=n(bSe,"STRONG",{});var ATt=s(I1e);g3r=r(ATt,"gpt2"),ATt.forEach(t),h3r=r(bSe," \u2014 "),XH=n(bSe,"A",{href:!0});var yTt=s(XH);u3r=r(yTt,"FlaxGPT2Model"),yTt.forEach(t),p3r=r(bSe," (OpenAI GPT-2 model)"),bSe.forEach(t),_3r=i(ae),IC=n(ae,"LI",{});var FSe=s(IC);q1e=n(FSe,"STRONG",{});var LTt=s(q1e);b3r=r(LTt,"gpt_neo"),LTt.forEach(t),F3r=r(FSe," \u2014 "),zH=n(FSe,"A",{href:!0});var xTt=s(zH);v3r=r(xTt,"FlaxGPTNeoModel"),xTt.forEach(t),T3r=r(FSe," (GPT Neo model)"),FSe.forEach(t),M3r=i(ae),qC=n(ae,"LI",{});var vSe=s(qC);N1e=n(vSe,"STRONG",{});var $Tt=s(N1e);E3r=r($Tt,"gptj"),$Tt.forEach(t),C3r=r(vSe," \u2014 "),QH=n(vSe,"A",{href:!0});var kTt=s(QH);w3r=r(kTt,"FlaxGPTJModel"),kTt.forEach(t),A3r=r(vSe," (GPT-J model)"),vSe.forEach(t),y3r=i(ae),NC=n(ae,"LI",{});var TSe=s(NC);j1e=n(TSe,"STRONG",{});var STt=s(j1e);L3r=r(STt,"marian"),STt.forEach(t),x3r=r(TSe," \u2014 "),WH=n(TSe,"A",{href:!0});var RTt=s(WH);$3r=r(RTt,"FlaxMarianModel"),RTt.forEach(t),k3r=r(TSe," (Marian model)"),TSe.forEach(t),S3r=i(ae),jC=n(ae,"LI",{});var MSe=s(jC);D1e=n(MSe,"STRONG",{});var BTt=s(D1e);R3r=r(BTt,"mbart"),BTt.forEach(t),B3r=r(MSe," \u2014 "),HH=n(MSe,"A",{href:!0});var PTt=s(HH);P3r=r(PTt,"FlaxMBartModel"),PTt.forEach(t),I3r=r(MSe," (mBART model)"),MSe.forEach(t),q3r=i(ae),DC=n(ae,"LI",{});var ESe=s(DC);G1e=n(ESe,"STRONG",{});var ITt=s(G1e);N3r=r(ITt,"mt5"),ITt.forEach(t),j3r=r(ESe," \u2014 "),UH=n(ESe,"A",{href:!0});var qTt=s(UH);D3r=r(qTt,"FlaxMT5Model"),qTt.forEach(t),G3r=r(ESe," (mT5 model)"),ESe.forEach(t),O3r=i(ae),GC=n(ae,"LI",{});var CSe=s(GC);O1e=n(CSe,"STRONG",{});var NTt=s(O1e);V3r=r(NTt,"pegasus"),NTt.forEach(t),X3r=r(CSe," \u2014 "),JH=n(CSe,"A",{href:!0});var jTt=s(JH);z3r=r(jTt,"FlaxPegasusModel"),jTt.forEach(t),Q3r=r(CSe," (Pegasus model)"),CSe.forEach(t),W3r=i(ae),OC=n(ae,"LI",{});var wSe=s(OC);V1e=n(wSe,"STRONG",{});var DTt=s(V1e);H3r=r(DTt,"roberta"),DTt.forEach(t),U3r=r(wSe," \u2014 "),YH=n(wSe,"A",{href:!0});var GTt=s(YH);J3r=r(GTt,"FlaxRobertaModel"),GTt.forEach(t),Y3r=r(wSe," (RoBERTa model)"),wSe.forEach(t),K3r=i(ae),VC=n(ae,"LI",{});var ASe=s(VC);X1e=n(ASe,"STRONG",{});var OTt=s(X1e);Z3r=r(OTt,"roformer"),OTt.forEach(t),ewr=r(ASe," \u2014 "),KH=n(ASe,"A",{href:!0});var VTt=s(KH);owr=r(VTt,"FlaxRoFormerModel"),VTt.forEach(t),rwr=r(ASe," (RoFormer model)"),ASe.forEach(t),twr=i(ae),XC=n(ae,"LI",{});var ySe=s(XC);z1e=n(ySe,"STRONG",{});var XTt=s(z1e);awr=r(XTt,"t5"),XTt.forEach(t),nwr=r(ySe," \u2014 "),ZH=n(ySe,"A",{href:!0});var zTt=s(ZH);swr=r(zTt,"FlaxT5Model"),zTt.forEach(t),lwr=r(ySe," (T5 model)"),ySe.forEach(t),iwr=i(ae),zC=n(ae,"LI",{});var LSe=s(zC);Q1e=n(LSe,"STRONG",{});var QTt=s(Q1e);dwr=r(QTt,"vision-text-dual-encoder"),QTt.forEach(t),cwr=r(LSe," \u2014 "),eU=n(LSe,"A",{href:!0});var WTt=s(eU);mwr=r(WTt,"FlaxVisionTextDualEncoderModel"),WTt.forEach(t),fwr=r(LSe," (VisionTextDualEncoder model)"),LSe.forEach(t),gwr=i(ae),QC=n(ae,"LI",{});var xSe=s(QC);W1e=n(xSe,"STRONG",{});var HTt=s(W1e);hwr=r(HTt,"vit"),HTt.forEach(t),uwr=r(xSe," \u2014 "),oU=n(xSe,"A",{href:!0});var UTt=s(oU);pwr=r(UTt,"FlaxViTModel"),UTt.forEach(t),_wr=r(xSe," (ViT model)"),xSe.forEach(t),bwr=i(ae),WC=n(ae,"LI",{});var $Se=s(WC);H1e=n($Se,"STRONG",{});var JTt=s(H1e);Fwr=r(JTt,"wav2vec2"),JTt.forEach(t),vwr=r($Se," \u2014 "),rU=n($Se,"A",{href:!0});var YTt=s(rU);Twr=r(YTt,"FlaxWav2Vec2Model"),YTt.forEach(t),Mwr=r($Se," (Wav2Vec2 model)"),$Se.forEach(t),Ewr=i(ae),HC=n(ae,"LI",{});var kSe=s(HC);U1e=n(kSe,"STRONG",{});var KTt=s(U1e);Cwr=r(KTt,"xglm"),KTt.forEach(t),wwr=r(kSe," \u2014 "),tU=n(kSe,"A",{href:!0});var ZTt=s(tU);Awr=r(ZTt,"FlaxXGLMModel"),ZTt.forEach(t),ywr=r(kSe," (XGLM model)"),kSe.forEach(t),Lwr=i(ae),UC=n(ae,"LI",{});var SSe=s(UC);J1e=n(SSe,"STRONG",{});var eMt=s(J1e);xwr=r(eMt,"xlm-roberta"),eMt.forEach(t),$wr=r(SSe," \u2014 "),aU=n(SSe,"A",{href:!0});var oMt=s(aU);kwr=r(oMt,"FlaxXLMRobertaModel"),oMt.forEach(t),Swr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),ae.forEach(t),Rwr=i(Sl),T(JC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),NPe=i(m),Fc=n(m,"H2",{class:!0});var Vqe=s(Fc);YC=n(Vqe,"A",{id:!0,class:!0,href:!0});var rMt=s(YC);Y1e=n(rMt,"SPAN",{});var tMt=s(Y1e);T(F7.$$.fragment,tMt),tMt.forEach(t),rMt.forEach(t),Bwr=i(Vqe),K1e=n(Vqe,"SPAN",{});var aMt=s(K1e);Pwr=r(aMt,"FlaxAutoModelForCausalLM"),aMt.forEach(t),Vqe.forEach(t),jPe=i(m),mr=n(m,"DIV",{class:!0});var Rl=s(mr);T(v7.$$.fragment,Rl),Iwr=i(Rl),vc=n(Rl,"P",{});var SK=s(vc);qwr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nU=n(SK,"A",{href:!0});var nMt=s(nU);Nwr=r(nMt,"from_pretrained()"),nMt.forEach(t),jwr=r(SK," class method or the "),sU=n(SK,"A",{href:!0});var sMt=s(sU);Dwr=r(sMt,"from_config()"),sMt.forEach(t),Gwr=r(SK,` class
method.`),SK.forEach(t),Owr=i(Rl),T7=n(Rl,"P",{});var Xqe=s(T7);Vwr=r(Xqe,"This class cannot be instantiated directly using "),Z1e=n(Xqe,"CODE",{});var lMt=s(Z1e);Xwr=r(lMt,"__init__()"),lMt.forEach(t),zwr=r(Xqe," (throws an error)."),Xqe.forEach(t),Qwr=i(Rl),qt=n(Rl,"DIV",{class:!0});var U0=s(qt);T(M7.$$.fragment,U0),Wwr=i(U0),eTe=n(U0,"P",{});var iMt=s(eTe);Hwr=r(iMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iMt.forEach(t),Uwr=i(U0),Tc=n(U0,"P",{});var RK=s(Tc);Jwr=r(RK,`Note:
Loading a model from its configuration file does `),oTe=n(RK,"STRONG",{});var dMt=s(oTe);Ywr=r(dMt,"not"),dMt.forEach(t),Kwr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(RK,"A",{href:!0});var cMt=s(lU);Zwr=r(cMt,"from_pretrained()"),cMt.forEach(t),eAr=r(RK," to load the model weights."),RK.forEach(t),oAr=i(U0),T(KC.$$.fragment,U0),U0.forEach(t),rAr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(E7.$$.fragment,Bl),tAr=i(Bl),rTe=n(Bl,"P",{});var mMt=s(rTe);aAr=r(mMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mMt.forEach(t),nAr=i(Bl),cn=n(Bl,"P",{});var J0=s(cn);sAr=r(J0,"The model class to instantiate is selected based on the "),tTe=n(J0,"CODE",{});var fMt=s(tTe);lAr=r(fMt,"model_type"),fMt.forEach(t),iAr=r(J0,` property of the config object (either
passed as an argument or loaded from `),aTe=n(J0,"CODE",{});var gMt=s(aTe);dAr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),cAr=r(J0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(J0,"CODE",{});var hMt=s(nTe);mAr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),fAr=r(J0,":"),J0.forEach(t),gAr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);ZC=n(Oe,"LI",{});var RSe=s(ZC);sTe=n(RSe,"STRONG",{});var uMt=s(sTe);hAr=r(uMt,"bart"),uMt.forEach(t),uAr=r(RSe," \u2014 "),iU=n(RSe,"A",{href:!0});var pMt=s(iU);pAr=r(pMt,"FlaxBartForCausalLM"),pMt.forEach(t),_Ar=r(RSe," (BART model)"),RSe.forEach(t),bAr=i(Oe),e3=n(Oe,"LI",{});var BSe=s(e3);lTe=n(BSe,"STRONG",{});var _Mt=s(lTe);FAr=r(_Mt,"bert"),_Mt.forEach(t),vAr=r(BSe," \u2014 "),dU=n(BSe,"A",{href:!0});var bMt=s(dU);TAr=r(bMt,"FlaxBertForCausalLM"),bMt.forEach(t),MAr=r(BSe," (BERT model)"),BSe.forEach(t),EAr=i(Oe),o3=n(Oe,"LI",{});var PSe=s(o3);iTe=n(PSe,"STRONG",{});var FMt=s(iTe);CAr=r(FMt,"big_bird"),FMt.forEach(t),wAr=r(PSe," \u2014 "),cU=n(PSe,"A",{href:!0});var vMt=s(cU);AAr=r(vMt,"FlaxBigBirdForCausalLM"),vMt.forEach(t),yAr=r(PSe," (BigBird model)"),PSe.forEach(t),LAr=i(Oe),r3=n(Oe,"LI",{});var ISe=s(r3);dTe=n(ISe,"STRONG",{});var TMt=s(dTe);xAr=r(TMt,"electra"),TMt.forEach(t),$Ar=r(ISe," \u2014 "),mU=n(ISe,"A",{href:!0});var MMt=s(mU);kAr=r(MMt,"FlaxElectraForCausalLM"),MMt.forEach(t),SAr=r(ISe," (ELECTRA model)"),ISe.forEach(t),RAr=i(Oe),t3=n(Oe,"LI",{});var qSe=s(t3);cTe=n(qSe,"STRONG",{});var EMt=s(cTe);BAr=r(EMt,"gpt2"),EMt.forEach(t),PAr=r(qSe," \u2014 "),fU=n(qSe,"A",{href:!0});var CMt=s(fU);IAr=r(CMt,"FlaxGPT2LMHeadModel"),CMt.forEach(t),qAr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),NAr=i(Oe),a3=n(Oe,"LI",{});var NSe=s(a3);mTe=n(NSe,"STRONG",{});var wMt=s(mTe);jAr=r(wMt,"gpt_neo"),wMt.forEach(t),DAr=r(NSe," \u2014 "),gU=n(NSe,"A",{href:!0});var AMt=s(gU);GAr=r(AMt,"FlaxGPTNeoForCausalLM"),AMt.forEach(t),OAr=r(NSe," (GPT Neo model)"),NSe.forEach(t),VAr=i(Oe),n3=n(Oe,"LI",{});var jSe=s(n3);fTe=n(jSe,"STRONG",{});var yMt=s(fTe);XAr=r(yMt,"gptj"),yMt.forEach(t),zAr=r(jSe," \u2014 "),hU=n(jSe,"A",{href:!0});var LMt=s(hU);QAr=r(LMt,"FlaxGPTJForCausalLM"),LMt.forEach(t),WAr=r(jSe," (GPT-J model)"),jSe.forEach(t),HAr=i(Oe),s3=n(Oe,"LI",{});var DSe=s(s3);gTe=n(DSe,"STRONG",{});var xMt=s(gTe);UAr=r(xMt,"roberta"),xMt.forEach(t),JAr=r(DSe," \u2014 "),uU=n(DSe,"A",{href:!0});var $Mt=s(uU);YAr=r($Mt,"FlaxRobertaForCausalLM"),$Mt.forEach(t),KAr=r(DSe," (RoBERTa model)"),DSe.forEach(t),ZAr=i(Oe),l3=n(Oe,"LI",{});var GSe=s(l3);hTe=n(GSe,"STRONG",{});var kMt=s(hTe);e0r=r(kMt,"xglm"),kMt.forEach(t),o0r=r(GSe," \u2014 "),pU=n(GSe,"A",{href:!0});var SMt=s(pU);r0r=r(SMt,"FlaxXGLMForCausalLM"),SMt.forEach(t),t0r=r(GSe," (XGLM model)"),GSe.forEach(t),Oe.forEach(t),a0r=i(Bl),T(i3.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),DPe=i(m),Mc=n(m,"H2",{class:!0});var zqe=s(Mc);d3=n(zqe,"A",{id:!0,class:!0,href:!0});var RMt=s(d3);uTe=n(RMt,"SPAN",{});var BMt=s(uTe);T(C7.$$.fragment,BMt),BMt.forEach(t),RMt.forEach(t),n0r=i(zqe),pTe=n(zqe,"SPAN",{});var PMt=s(pTe);s0r=r(PMt,"FlaxAutoModelForPreTraining"),PMt.forEach(t),zqe.forEach(t),GPe=i(m),fr=n(m,"DIV",{class:!0});var Pl=s(fr);T(w7.$$.fragment,Pl),l0r=i(Pl),Ec=n(Pl,"P",{});var BK=s(Ec);i0r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_U=n(BK,"A",{href:!0});var IMt=s(_U);d0r=r(IMt,"from_pretrained()"),IMt.forEach(t),c0r=r(BK," class method or the "),bU=n(BK,"A",{href:!0});var qMt=s(bU);m0r=r(qMt,"from_config()"),qMt.forEach(t),f0r=r(BK,` class
method.`),BK.forEach(t),g0r=i(Pl),A7=n(Pl,"P",{});var Qqe=s(A7);h0r=r(Qqe,"This class cannot be instantiated directly using "),_Te=n(Qqe,"CODE",{});var NMt=s(_Te);u0r=r(NMt,"__init__()"),NMt.forEach(t),p0r=r(Qqe," (throws an error)."),Qqe.forEach(t),_0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var Y0=s(Nt);T(y7.$$.fragment,Y0),b0r=i(Y0),bTe=n(Y0,"P",{});var jMt=s(bTe);F0r=r(jMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jMt.forEach(t),v0r=i(Y0),Cc=n(Y0,"P",{});var PK=s(Cc);T0r=r(PK,`Note:
Loading a model from its configuration file does `),FTe=n(PK,"STRONG",{});var DMt=s(FTe);M0r=r(DMt,"not"),DMt.forEach(t),E0r=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(PK,"A",{href:!0});var GMt=s(FU);C0r=r(GMt,"from_pretrained()"),GMt.forEach(t),w0r=r(PK," to load the model weights."),PK.forEach(t),A0r=i(Y0),T(c3.$$.fragment,Y0),Y0.forEach(t),y0r=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(L7.$$.fragment,Il),L0r=i(Il),vTe=n(Il,"P",{});var OMt=s(vTe);x0r=r(OMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OMt.forEach(t),$0r=i(Il),mn=n(Il,"P",{});var K0=s(mn);k0r=r(K0,"The model class to instantiate is selected based on the "),TTe=n(K0,"CODE",{});var VMt=s(TTe);S0r=r(VMt,"model_type"),VMt.forEach(t),R0r=r(K0,` property of the config object (either
passed as an argument or loaded from `),MTe=n(K0,"CODE",{});var XMt=s(MTe);B0r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),P0r=r(K0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(K0,"CODE",{});var zMt=s(ETe);I0r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),q0r=r(K0,":"),K0.forEach(t),N0r=i(Il),Me=n(Il,"UL",{});var we=s(Me);m3=n(we,"LI",{});var OSe=s(m3);CTe=n(OSe,"STRONG",{});var QMt=s(CTe);j0r=r(QMt,"albert"),QMt.forEach(t),D0r=r(OSe," \u2014 "),vU=n(OSe,"A",{href:!0});var WMt=s(vU);G0r=r(WMt,"FlaxAlbertForPreTraining"),WMt.forEach(t),O0r=r(OSe," (ALBERT model)"),OSe.forEach(t),V0r=i(we),f3=n(we,"LI",{});var VSe=s(f3);wTe=n(VSe,"STRONG",{});var HMt=s(wTe);X0r=r(HMt,"bart"),HMt.forEach(t),z0r=r(VSe," \u2014 "),TU=n(VSe,"A",{href:!0});var UMt=s(TU);Q0r=r(UMt,"FlaxBartForConditionalGeneration"),UMt.forEach(t),W0r=r(VSe," (BART model)"),VSe.forEach(t),H0r=i(we),g3=n(we,"LI",{});var XSe=s(g3);ATe=n(XSe,"STRONG",{});var JMt=s(ATe);U0r=r(JMt,"bert"),JMt.forEach(t),J0r=r(XSe," \u2014 "),MU=n(XSe,"A",{href:!0});var YMt=s(MU);Y0r=r(YMt,"FlaxBertForPreTraining"),YMt.forEach(t),K0r=r(XSe," (BERT model)"),XSe.forEach(t),Z0r=i(we),h3=n(we,"LI",{});var zSe=s(h3);yTe=n(zSe,"STRONG",{});var KMt=s(yTe);e6r=r(KMt,"big_bird"),KMt.forEach(t),o6r=r(zSe," \u2014 "),EU=n(zSe,"A",{href:!0});var ZMt=s(EU);r6r=r(ZMt,"FlaxBigBirdForPreTraining"),ZMt.forEach(t),t6r=r(zSe," (BigBird model)"),zSe.forEach(t),a6r=i(we),u3=n(we,"LI",{});var QSe=s(u3);LTe=n(QSe,"STRONG",{});var e4t=s(LTe);n6r=r(e4t,"electra"),e4t.forEach(t),s6r=r(QSe," \u2014 "),CU=n(QSe,"A",{href:!0});var o4t=s(CU);l6r=r(o4t,"FlaxElectraForPreTraining"),o4t.forEach(t),i6r=r(QSe," (ELECTRA model)"),QSe.forEach(t),d6r=i(we),p3=n(we,"LI",{});var WSe=s(p3);xTe=n(WSe,"STRONG",{});var r4t=s(xTe);c6r=r(r4t,"mbart"),r4t.forEach(t),m6r=r(WSe," \u2014 "),wU=n(WSe,"A",{href:!0});var t4t=s(wU);f6r=r(t4t,"FlaxMBartForConditionalGeneration"),t4t.forEach(t),g6r=r(WSe," (mBART model)"),WSe.forEach(t),h6r=i(we),_3=n(we,"LI",{});var HSe=s(_3);$Te=n(HSe,"STRONG",{});var a4t=s($Te);u6r=r(a4t,"mt5"),a4t.forEach(t),p6r=r(HSe," \u2014 "),AU=n(HSe,"A",{href:!0});var n4t=s(AU);_6r=r(n4t,"FlaxMT5ForConditionalGeneration"),n4t.forEach(t),b6r=r(HSe," (mT5 model)"),HSe.forEach(t),F6r=i(we),b3=n(we,"LI",{});var USe=s(b3);kTe=n(USe,"STRONG",{});var s4t=s(kTe);v6r=r(s4t,"roberta"),s4t.forEach(t),T6r=r(USe," \u2014 "),yU=n(USe,"A",{href:!0});var l4t=s(yU);M6r=r(l4t,"FlaxRobertaForMaskedLM"),l4t.forEach(t),E6r=r(USe," (RoBERTa model)"),USe.forEach(t),C6r=i(we),F3=n(we,"LI",{});var JSe=s(F3);STe=n(JSe,"STRONG",{});var i4t=s(STe);w6r=r(i4t,"roformer"),i4t.forEach(t),A6r=r(JSe," \u2014 "),LU=n(JSe,"A",{href:!0});var d4t=s(LU);y6r=r(d4t,"FlaxRoFormerForMaskedLM"),d4t.forEach(t),L6r=r(JSe," (RoFormer model)"),JSe.forEach(t),x6r=i(we),v3=n(we,"LI",{});var YSe=s(v3);RTe=n(YSe,"STRONG",{});var c4t=s(RTe);$6r=r(c4t,"t5"),c4t.forEach(t),k6r=r(YSe," \u2014 "),xU=n(YSe,"A",{href:!0});var m4t=s(xU);S6r=r(m4t,"FlaxT5ForConditionalGeneration"),m4t.forEach(t),R6r=r(YSe," (T5 model)"),YSe.forEach(t),B6r=i(we),T3=n(we,"LI",{});var KSe=s(T3);BTe=n(KSe,"STRONG",{});var f4t=s(BTe);P6r=r(f4t,"wav2vec2"),f4t.forEach(t),I6r=r(KSe," \u2014 "),$U=n(KSe,"A",{href:!0});var g4t=s($U);q6r=r(g4t,"FlaxWav2Vec2ForPreTraining"),g4t.forEach(t),N6r=r(KSe," (Wav2Vec2 model)"),KSe.forEach(t),j6r=i(we),M3=n(we,"LI",{});var ZSe=s(M3);PTe=n(ZSe,"STRONG",{});var h4t=s(PTe);D6r=r(h4t,"xlm-roberta"),h4t.forEach(t),G6r=r(ZSe," \u2014 "),kU=n(ZSe,"A",{href:!0});var u4t=s(kU);O6r=r(u4t,"FlaxXLMRobertaForMaskedLM"),u4t.forEach(t),V6r=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),we.forEach(t),X6r=i(Il),T(E3.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),OPe=i(m),wc=n(m,"H2",{class:!0});var Wqe=s(wc);C3=n(Wqe,"A",{id:!0,class:!0,href:!0});var p4t=s(C3);ITe=n(p4t,"SPAN",{});var _4t=s(ITe);T(x7.$$.fragment,_4t),_4t.forEach(t),p4t.forEach(t),z6r=i(Wqe),qTe=n(Wqe,"SPAN",{});var b4t=s(qTe);Q6r=r(b4t,"FlaxAutoModelForMaskedLM"),b4t.forEach(t),Wqe.forEach(t),VPe=i(m),gr=n(m,"DIV",{class:!0});var ql=s(gr);T($7.$$.fragment,ql),W6r=i(ql),Ac=n(ql,"P",{});var IK=s(Ac);H6r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SU=n(IK,"A",{href:!0});var F4t=s(SU);U6r=r(F4t,"from_pretrained()"),F4t.forEach(t),J6r=r(IK," class method or the "),RU=n(IK,"A",{href:!0});var v4t=s(RU);Y6r=r(v4t,"from_config()"),v4t.forEach(t),K6r=r(IK,` class
method.`),IK.forEach(t),Z6r=i(ql),k7=n(ql,"P",{});var Hqe=s(k7);eyr=r(Hqe,"This class cannot be instantiated directly using "),NTe=n(Hqe,"CODE",{});var T4t=s(NTe);oyr=r(T4t,"__init__()"),T4t.forEach(t),ryr=r(Hqe," (throws an error)."),Hqe.forEach(t),tyr=i(ql),jt=n(ql,"DIV",{class:!0});var Z0=s(jt);T(S7.$$.fragment,Z0),ayr=i(Z0),jTe=n(Z0,"P",{});var M4t=s(jTe);nyr=r(M4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),M4t.forEach(t),syr=i(Z0),yc=n(Z0,"P",{});var qK=s(yc);lyr=r(qK,`Note:
Loading a model from its configuration file does `),DTe=n(qK,"STRONG",{});var E4t=s(DTe);iyr=r(E4t,"not"),E4t.forEach(t),dyr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BU=n(qK,"A",{href:!0});var C4t=s(BU);cyr=r(C4t,"from_pretrained()"),C4t.forEach(t),myr=r(qK," to load the model weights."),qK.forEach(t),fyr=i(Z0),T(w3.$$.fragment,Z0),Z0.forEach(t),gyr=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(R7.$$.fragment,Nl),hyr=i(Nl),GTe=n(Nl,"P",{});var w4t=s(GTe);uyr=r(w4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w4t.forEach(t),pyr=i(Nl),fn=n(Nl,"P",{});var e6=s(fn);_yr=r(e6,"The model class to instantiate is selected based on the "),OTe=n(e6,"CODE",{});var A4t=s(OTe);byr=r(A4t,"model_type"),A4t.forEach(t),Fyr=r(e6,` property of the config object (either
passed as an argument or loaded from `),VTe=n(e6,"CODE",{});var y4t=s(VTe);vyr=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),Tyr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(e6,"CODE",{});var L4t=s(XTe);Myr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Eyr=r(e6,":"),e6.forEach(t),Cyr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);A3=n(Be,"LI",{});var eRe=s(A3);zTe=n(eRe,"STRONG",{});var x4t=s(zTe);wyr=r(x4t,"albert"),x4t.forEach(t),Ayr=r(eRe," \u2014 "),PU=n(eRe,"A",{href:!0});var $4t=s(PU);yyr=r($4t,"FlaxAlbertForMaskedLM"),$4t.forEach(t),Lyr=r(eRe," (ALBERT model)"),eRe.forEach(t),xyr=i(Be),y3=n(Be,"LI",{});var oRe=s(y3);QTe=n(oRe,"STRONG",{});var k4t=s(QTe);$yr=r(k4t,"bart"),k4t.forEach(t),kyr=r(oRe," \u2014 "),IU=n(oRe,"A",{href:!0});var S4t=s(IU);Syr=r(S4t,"FlaxBartForConditionalGeneration"),S4t.forEach(t),Ryr=r(oRe," (BART model)"),oRe.forEach(t),Byr=i(Be),L3=n(Be,"LI",{});var rRe=s(L3);WTe=n(rRe,"STRONG",{});var R4t=s(WTe);Pyr=r(R4t,"bert"),R4t.forEach(t),Iyr=r(rRe," \u2014 "),qU=n(rRe,"A",{href:!0});var B4t=s(qU);qyr=r(B4t,"FlaxBertForMaskedLM"),B4t.forEach(t),Nyr=r(rRe," (BERT model)"),rRe.forEach(t),jyr=i(Be),x3=n(Be,"LI",{});var tRe=s(x3);HTe=n(tRe,"STRONG",{});var P4t=s(HTe);Dyr=r(P4t,"big_bird"),P4t.forEach(t),Gyr=r(tRe," \u2014 "),NU=n(tRe,"A",{href:!0});var I4t=s(NU);Oyr=r(I4t,"FlaxBigBirdForMaskedLM"),I4t.forEach(t),Vyr=r(tRe," (BigBird model)"),tRe.forEach(t),Xyr=i(Be),$3=n(Be,"LI",{});var aRe=s($3);UTe=n(aRe,"STRONG",{});var q4t=s(UTe);zyr=r(q4t,"distilbert"),q4t.forEach(t),Qyr=r(aRe," \u2014 "),jU=n(aRe,"A",{href:!0});var N4t=s(jU);Wyr=r(N4t,"FlaxDistilBertForMaskedLM"),N4t.forEach(t),Hyr=r(aRe," (DistilBERT model)"),aRe.forEach(t),Uyr=i(Be),k3=n(Be,"LI",{});var nRe=s(k3);JTe=n(nRe,"STRONG",{});var j4t=s(JTe);Jyr=r(j4t,"electra"),j4t.forEach(t),Yyr=r(nRe," \u2014 "),DU=n(nRe,"A",{href:!0});var D4t=s(DU);Kyr=r(D4t,"FlaxElectraForMaskedLM"),D4t.forEach(t),Zyr=r(nRe," (ELECTRA model)"),nRe.forEach(t),eLr=i(Be),S3=n(Be,"LI",{});var sRe=s(S3);YTe=n(sRe,"STRONG",{});var G4t=s(YTe);oLr=r(G4t,"mbart"),G4t.forEach(t),rLr=r(sRe," \u2014 "),GU=n(sRe,"A",{href:!0});var O4t=s(GU);tLr=r(O4t,"FlaxMBartForConditionalGeneration"),O4t.forEach(t),aLr=r(sRe," (mBART model)"),sRe.forEach(t),nLr=i(Be),R3=n(Be,"LI",{});var lRe=s(R3);KTe=n(lRe,"STRONG",{});var V4t=s(KTe);sLr=r(V4t,"roberta"),V4t.forEach(t),lLr=r(lRe," \u2014 "),OU=n(lRe,"A",{href:!0});var X4t=s(OU);iLr=r(X4t,"FlaxRobertaForMaskedLM"),X4t.forEach(t),dLr=r(lRe," (RoBERTa model)"),lRe.forEach(t),cLr=i(Be),B3=n(Be,"LI",{});var iRe=s(B3);ZTe=n(iRe,"STRONG",{});var z4t=s(ZTe);mLr=r(z4t,"roformer"),z4t.forEach(t),fLr=r(iRe," \u2014 "),VU=n(iRe,"A",{href:!0});var Q4t=s(VU);gLr=r(Q4t,"FlaxRoFormerForMaskedLM"),Q4t.forEach(t),hLr=r(iRe," (RoFormer model)"),iRe.forEach(t),uLr=i(Be),P3=n(Be,"LI",{});var dRe=s(P3);eMe=n(dRe,"STRONG",{});var W4t=s(eMe);pLr=r(W4t,"xlm-roberta"),W4t.forEach(t),_Lr=r(dRe," \u2014 "),XU=n(dRe,"A",{href:!0});var H4t=s(XU);bLr=r(H4t,"FlaxXLMRobertaForMaskedLM"),H4t.forEach(t),FLr=r(dRe," (XLM-RoBERTa model)"),dRe.forEach(t),Be.forEach(t),vLr=i(Nl),T(I3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),XPe=i(m),Lc=n(m,"H2",{class:!0});var Uqe=s(Lc);q3=n(Uqe,"A",{id:!0,class:!0,href:!0});var U4t=s(q3);oMe=n(U4t,"SPAN",{});var J4t=s(oMe);T(B7.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),TLr=i(Uqe),rMe=n(Uqe,"SPAN",{});var Y4t=s(rMe);MLr=r(Y4t,"FlaxAutoModelForSeq2SeqLM"),Y4t.forEach(t),Uqe.forEach(t),zPe=i(m),hr=n(m,"DIV",{class:!0});var jl=s(hr);T(P7.$$.fragment,jl),ELr=i(jl),xc=n(jl,"P",{});var NK=s(xc);CLr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=n(NK,"A",{href:!0});var K4t=s(zU);wLr=r(K4t,"from_pretrained()"),K4t.forEach(t),ALr=r(NK," class method or the "),QU=n(NK,"A",{href:!0});var Z4t=s(QU);yLr=r(Z4t,"from_config()"),Z4t.forEach(t),LLr=r(NK,` class
method.`),NK.forEach(t),xLr=i(jl),I7=n(jl,"P",{});var Jqe=s(I7);$Lr=r(Jqe,"This class cannot be instantiated directly using "),tMe=n(Jqe,"CODE",{});var eEt=s(tMe);kLr=r(eEt,"__init__()"),eEt.forEach(t),SLr=r(Jqe," (throws an error)."),Jqe.forEach(t),RLr=i(jl),Dt=n(jl,"DIV",{class:!0});var o6=s(Dt);T(q7.$$.fragment,o6),BLr=i(o6),aMe=n(o6,"P",{});var oEt=s(aMe);PLr=r(oEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),oEt.forEach(t),ILr=i(o6),$c=n(o6,"P",{});var jK=s($c);qLr=r(jK,`Note:
Loading a model from its configuration file does `),nMe=n(jK,"STRONG",{});var rEt=s(nMe);NLr=r(rEt,"not"),rEt.forEach(t),jLr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(jK,"A",{href:!0});var tEt=s(WU);DLr=r(tEt,"from_pretrained()"),tEt.forEach(t),GLr=r(jK," to load the model weights."),jK.forEach(t),OLr=i(o6),T(N3.$$.fragment,o6),o6.forEach(t),VLr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(N7.$$.fragment,Dl),XLr=i(Dl),sMe=n(Dl,"P",{});var aEt=s(sMe);zLr=r(aEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aEt.forEach(t),QLr=i(Dl),gn=n(Dl,"P",{});var r6=s(gn);WLr=r(r6,"The model class to instantiate is selected based on the "),lMe=n(r6,"CODE",{});var nEt=s(lMe);HLr=r(nEt,"model_type"),nEt.forEach(t),ULr=r(r6,` property of the config object (either
passed as an argument or loaded from `),iMe=n(r6,"CODE",{});var sEt=s(iMe);JLr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),YLr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(r6,"CODE",{});var lEt=s(dMe);KLr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),ZLr=r(r6,":"),r6.forEach(t),e8r=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);j3=n(Ve,"LI",{});var cRe=s(j3);cMe=n(cRe,"STRONG",{});var iEt=s(cMe);o8r=r(iEt,"bart"),iEt.forEach(t),r8r=r(cRe," \u2014 "),HU=n(cRe,"A",{href:!0});var dEt=s(HU);t8r=r(dEt,"FlaxBartForConditionalGeneration"),dEt.forEach(t),a8r=r(cRe," (BART model)"),cRe.forEach(t),n8r=i(Ve),D3=n(Ve,"LI",{});var mRe=s(D3);mMe=n(mRe,"STRONG",{});var cEt=s(mMe);s8r=r(cEt,"blenderbot"),cEt.forEach(t),l8r=r(mRe," \u2014 "),UU=n(mRe,"A",{href:!0});var mEt=s(UU);i8r=r(mEt,"FlaxBlenderbotForConditionalGeneration"),mEt.forEach(t),d8r=r(mRe," (Blenderbot model)"),mRe.forEach(t),c8r=i(Ve),G3=n(Ve,"LI",{});var fRe=s(G3);fMe=n(fRe,"STRONG",{});var fEt=s(fMe);m8r=r(fEt,"blenderbot-small"),fEt.forEach(t),f8r=r(fRe," \u2014 "),JU=n(fRe,"A",{href:!0});var gEt=s(JU);g8r=r(gEt,"FlaxBlenderbotSmallForConditionalGeneration"),gEt.forEach(t),h8r=r(fRe," (BlenderbotSmall model)"),fRe.forEach(t),u8r=i(Ve),O3=n(Ve,"LI",{});var gRe=s(O3);gMe=n(gRe,"STRONG",{});var hEt=s(gMe);p8r=r(hEt,"encoder-decoder"),hEt.forEach(t),_8r=r(gRe," \u2014 "),YU=n(gRe,"A",{href:!0});var uEt=s(YU);b8r=r(uEt,"FlaxEncoderDecoderModel"),uEt.forEach(t),F8r=r(gRe," (Encoder decoder model)"),gRe.forEach(t),v8r=i(Ve),V3=n(Ve,"LI",{});var hRe=s(V3);hMe=n(hRe,"STRONG",{});var pEt=s(hMe);T8r=r(pEt,"marian"),pEt.forEach(t),M8r=r(hRe," \u2014 "),KU=n(hRe,"A",{href:!0});var _Et=s(KU);E8r=r(_Et,"FlaxMarianMTModel"),_Et.forEach(t),C8r=r(hRe," (Marian model)"),hRe.forEach(t),w8r=i(Ve),X3=n(Ve,"LI",{});var uRe=s(X3);uMe=n(uRe,"STRONG",{});var bEt=s(uMe);A8r=r(bEt,"mbart"),bEt.forEach(t),y8r=r(uRe," \u2014 "),ZU=n(uRe,"A",{href:!0});var FEt=s(ZU);L8r=r(FEt,"FlaxMBartForConditionalGeneration"),FEt.forEach(t),x8r=r(uRe," (mBART model)"),uRe.forEach(t),$8r=i(Ve),z3=n(Ve,"LI",{});var pRe=s(z3);pMe=n(pRe,"STRONG",{});var vEt=s(pMe);k8r=r(vEt,"mt5"),vEt.forEach(t),S8r=r(pRe," \u2014 "),eJ=n(pRe,"A",{href:!0});var TEt=s(eJ);R8r=r(TEt,"FlaxMT5ForConditionalGeneration"),TEt.forEach(t),B8r=r(pRe," (mT5 model)"),pRe.forEach(t),P8r=i(Ve),Q3=n(Ve,"LI",{});var _Re=s(Q3);_Me=n(_Re,"STRONG",{});var MEt=s(_Me);I8r=r(MEt,"pegasus"),MEt.forEach(t),q8r=r(_Re," \u2014 "),oJ=n(_Re,"A",{href:!0});var EEt=s(oJ);N8r=r(EEt,"FlaxPegasusForConditionalGeneration"),EEt.forEach(t),j8r=r(_Re," (Pegasus model)"),_Re.forEach(t),D8r=i(Ve),W3=n(Ve,"LI",{});var bRe=s(W3);bMe=n(bRe,"STRONG",{});var CEt=s(bMe);G8r=r(CEt,"t5"),CEt.forEach(t),O8r=r(bRe," \u2014 "),rJ=n(bRe,"A",{href:!0});var wEt=s(rJ);V8r=r(wEt,"FlaxT5ForConditionalGeneration"),wEt.forEach(t),X8r=r(bRe," (T5 model)"),bRe.forEach(t),Ve.forEach(t),z8r=i(Dl),T(H3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),QPe=i(m),kc=n(m,"H2",{class:!0});var Yqe=s(kc);U3=n(Yqe,"A",{id:!0,class:!0,href:!0});var AEt=s(U3);FMe=n(AEt,"SPAN",{});var yEt=s(FMe);T(j7.$$.fragment,yEt),yEt.forEach(t),AEt.forEach(t),Q8r=i(Yqe),vMe=n(Yqe,"SPAN",{});var LEt=s(vMe);W8r=r(LEt,"FlaxAutoModelForSequenceClassification"),LEt.forEach(t),Yqe.forEach(t),WPe=i(m),ur=n(m,"DIV",{class:!0});var Gl=s(ur);T(D7.$$.fragment,Gl),H8r=i(Gl),Sc=n(Gl,"P",{});var DK=s(Sc);U8r=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tJ=n(DK,"A",{href:!0});var xEt=s(tJ);J8r=r(xEt,"from_pretrained()"),xEt.forEach(t),Y8r=r(DK," class method or the "),aJ=n(DK,"A",{href:!0});var $Et=s(aJ);K8r=r($Et,"from_config()"),$Et.forEach(t),Z8r=r(DK,` class
method.`),DK.forEach(t),e7r=i(Gl),G7=n(Gl,"P",{});var Kqe=s(G7);o7r=r(Kqe,"This class cannot be instantiated directly using "),TMe=n(Kqe,"CODE",{});var kEt=s(TMe);r7r=r(kEt,"__init__()"),kEt.forEach(t),t7r=r(Kqe," (throws an error)."),Kqe.forEach(t),a7r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var t6=s(Gt);T(O7.$$.fragment,t6),n7r=i(t6),MMe=n(t6,"P",{});var SEt=s(MMe);s7r=r(SEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SEt.forEach(t),l7r=i(t6),Rc=n(t6,"P",{});var GK=s(Rc);i7r=r(GK,`Note:
Loading a model from its configuration file does `),EMe=n(GK,"STRONG",{});var REt=s(EMe);d7r=r(REt,"not"),REt.forEach(t),c7r=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(GK,"A",{href:!0});var BEt=s(nJ);m7r=r(BEt,"from_pretrained()"),BEt.forEach(t),f7r=r(GK," to load the model weights."),GK.forEach(t),g7r=i(t6),T(J3.$$.fragment,t6),t6.forEach(t),h7r=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(V7.$$.fragment,Ol),u7r=i(Ol),CMe=n(Ol,"P",{});var PEt=s(CMe);p7r=r(PEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PEt.forEach(t),_7r=i(Ol),hn=n(Ol,"P",{});var a6=s(hn);b7r=r(a6,"The model class to instantiate is selected based on the "),wMe=n(a6,"CODE",{});var IEt=s(wMe);F7r=r(IEt,"model_type"),IEt.forEach(t),v7r=r(a6,` property of the config object (either
passed as an argument or loaded from `),AMe=n(a6,"CODE",{});var qEt=s(AMe);T7r=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),M7r=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(a6,"CODE",{});var NEt=s(yMe);E7r=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),C7r=r(a6,":"),a6.forEach(t),w7r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);Y3=n(Pe,"LI",{});var FRe=s(Y3);LMe=n(FRe,"STRONG",{});var jEt=s(LMe);A7r=r(jEt,"albert"),jEt.forEach(t),y7r=r(FRe," \u2014 "),sJ=n(FRe,"A",{href:!0});var DEt=s(sJ);L7r=r(DEt,"FlaxAlbertForSequenceClassification"),DEt.forEach(t),x7r=r(FRe," (ALBERT model)"),FRe.forEach(t),$7r=i(Pe),K3=n(Pe,"LI",{});var vRe=s(K3);xMe=n(vRe,"STRONG",{});var GEt=s(xMe);k7r=r(GEt,"bart"),GEt.forEach(t),S7r=r(vRe," \u2014 "),lJ=n(vRe,"A",{href:!0});var OEt=s(lJ);R7r=r(OEt,"FlaxBartForSequenceClassification"),OEt.forEach(t),B7r=r(vRe," (BART model)"),vRe.forEach(t),P7r=i(Pe),Z3=n(Pe,"LI",{});var TRe=s(Z3);$Me=n(TRe,"STRONG",{});var VEt=s($Me);I7r=r(VEt,"bert"),VEt.forEach(t),q7r=r(TRe," \u2014 "),iJ=n(TRe,"A",{href:!0});var XEt=s(iJ);N7r=r(XEt,"FlaxBertForSequenceClassification"),XEt.forEach(t),j7r=r(TRe," (BERT model)"),TRe.forEach(t),D7r=i(Pe),ew=n(Pe,"LI",{});var MRe=s(ew);kMe=n(MRe,"STRONG",{});var zEt=s(kMe);G7r=r(zEt,"big_bird"),zEt.forEach(t),O7r=r(MRe," \u2014 "),dJ=n(MRe,"A",{href:!0});var QEt=s(dJ);V7r=r(QEt,"FlaxBigBirdForSequenceClassification"),QEt.forEach(t),X7r=r(MRe," (BigBird model)"),MRe.forEach(t),z7r=i(Pe),ow=n(Pe,"LI",{});var ERe=s(ow);SMe=n(ERe,"STRONG",{});var WEt=s(SMe);Q7r=r(WEt,"distilbert"),WEt.forEach(t),W7r=r(ERe," \u2014 "),cJ=n(ERe,"A",{href:!0});var HEt=s(cJ);H7r=r(HEt,"FlaxDistilBertForSequenceClassification"),HEt.forEach(t),U7r=r(ERe," (DistilBERT model)"),ERe.forEach(t),J7r=i(Pe),rw=n(Pe,"LI",{});var CRe=s(rw);RMe=n(CRe,"STRONG",{});var UEt=s(RMe);Y7r=r(UEt,"electra"),UEt.forEach(t),K7r=r(CRe," \u2014 "),mJ=n(CRe,"A",{href:!0});var JEt=s(mJ);Z7r=r(JEt,"FlaxElectraForSequenceClassification"),JEt.forEach(t),exr=r(CRe," (ELECTRA model)"),CRe.forEach(t),oxr=i(Pe),tw=n(Pe,"LI",{});var wRe=s(tw);BMe=n(wRe,"STRONG",{});var YEt=s(BMe);rxr=r(YEt,"mbart"),YEt.forEach(t),txr=r(wRe," \u2014 "),fJ=n(wRe,"A",{href:!0});var KEt=s(fJ);axr=r(KEt,"FlaxMBartForSequenceClassification"),KEt.forEach(t),nxr=r(wRe," (mBART model)"),wRe.forEach(t),sxr=i(Pe),aw=n(Pe,"LI",{});var ARe=s(aw);PMe=n(ARe,"STRONG",{});var ZEt=s(PMe);lxr=r(ZEt,"roberta"),ZEt.forEach(t),ixr=r(ARe," \u2014 "),gJ=n(ARe,"A",{href:!0});var e5t=s(gJ);dxr=r(e5t,"FlaxRobertaForSequenceClassification"),e5t.forEach(t),cxr=r(ARe," (RoBERTa model)"),ARe.forEach(t),mxr=i(Pe),nw=n(Pe,"LI",{});var yRe=s(nw);IMe=n(yRe,"STRONG",{});var o5t=s(IMe);fxr=r(o5t,"roformer"),o5t.forEach(t),gxr=r(yRe," \u2014 "),hJ=n(yRe,"A",{href:!0});var r5t=s(hJ);hxr=r(r5t,"FlaxRoFormerForSequenceClassification"),r5t.forEach(t),uxr=r(yRe," (RoFormer model)"),yRe.forEach(t),pxr=i(Pe),sw=n(Pe,"LI",{});var LRe=s(sw);qMe=n(LRe,"STRONG",{});var t5t=s(qMe);_xr=r(t5t,"xlm-roberta"),t5t.forEach(t),bxr=r(LRe," \u2014 "),uJ=n(LRe,"A",{href:!0});var a5t=s(uJ);Fxr=r(a5t,"FlaxXLMRobertaForSequenceClassification"),a5t.forEach(t),vxr=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),Pe.forEach(t),Txr=i(Ol),T(lw.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),HPe=i(m),Bc=n(m,"H2",{class:!0});var Zqe=s(Bc);iw=n(Zqe,"A",{id:!0,class:!0,href:!0});var n5t=s(iw);NMe=n(n5t,"SPAN",{});var s5t=s(NMe);T(X7.$$.fragment,s5t),s5t.forEach(t),n5t.forEach(t),Mxr=i(Zqe),jMe=n(Zqe,"SPAN",{});var l5t=s(jMe);Exr=r(l5t,"FlaxAutoModelForQuestionAnswering"),l5t.forEach(t),Zqe.forEach(t),UPe=i(m),pr=n(m,"DIV",{class:!0});var Vl=s(pr);T(z7.$$.fragment,Vl),Cxr=i(Vl),Pc=n(Vl,"P",{});var OK=s(Pc);wxr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pJ=n(OK,"A",{href:!0});var i5t=s(pJ);Axr=r(i5t,"from_pretrained()"),i5t.forEach(t),yxr=r(OK," class method or the "),_J=n(OK,"A",{href:!0});var d5t=s(_J);Lxr=r(d5t,"from_config()"),d5t.forEach(t),xxr=r(OK,` class
method.`),OK.forEach(t),$xr=i(Vl),Q7=n(Vl,"P",{});var eNe=s(Q7);kxr=r(eNe,"This class cannot be instantiated directly using "),DMe=n(eNe,"CODE",{});var c5t=s(DMe);Sxr=r(c5t,"__init__()"),c5t.forEach(t),Rxr=r(eNe," (throws an error)."),eNe.forEach(t),Bxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var n6=s(Ot);T(W7.$$.fragment,n6),Pxr=i(n6),GMe=n(n6,"P",{});var m5t=s(GMe);Ixr=r(m5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m5t.forEach(t),qxr=i(n6),Ic=n(n6,"P",{});var VK=s(Ic);Nxr=r(VK,`Note:
Loading a model from its configuration file does `),OMe=n(VK,"STRONG",{});var f5t=s(OMe);jxr=r(f5t,"not"),f5t.forEach(t),Dxr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(VK,"A",{href:!0});var g5t=s(bJ);Gxr=r(g5t,"from_pretrained()"),g5t.forEach(t),Oxr=r(VK," to load the model weights."),VK.forEach(t),Vxr=i(n6),T(dw.$$.fragment,n6),n6.forEach(t),Xxr=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(H7.$$.fragment,Xl),zxr=i(Xl),VMe=n(Xl,"P",{});var h5t=s(VMe);Qxr=r(h5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h5t.forEach(t),Wxr=i(Xl),un=n(Xl,"P",{});var s6=s(un);Hxr=r(s6,"The model class to instantiate is selected based on the "),XMe=n(s6,"CODE",{});var u5t=s(XMe);Uxr=r(u5t,"model_type"),u5t.forEach(t),Jxr=r(s6,` property of the config object (either
passed as an argument or loaded from `),zMe=n(s6,"CODE",{});var p5t=s(zMe);Yxr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),Kxr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(s6,"CODE",{});var _5t=s(QMe);Zxr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),e9r=r(s6,":"),s6.forEach(t),o9r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);cw=n(Ie,"LI",{});var xRe=s(cw);WMe=n(xRe,"STRONG",{});var b5t=s(WMe);r9r=r(b5t,"albert"),b5t.forEach(t),t9r=r(xRe," \u2014 "),FJ=n(xRe,"A",{href:!0});var F5t=s(FJ);a9r=r(F5t,"FlaxAlbertForQuestionAnswering"),F5t.forEach(t),n9r=r(xRe," (ALBERT model)"),xRe.forEach(t),s9r=i(Ie),mw=n(Ie,"LI",{});var $Re=s(mw);HMe=n($Re,"STRONG",{});var v5t=s(HMe);l9r=r(v5t,"bart"),v5t.forEach(t),i9r=r($Re," \u2014 "),vJ=n($Re,"A",{href:!0});var T5t=s(vJ);d9r=r(T5t,"FlaxBartForQuestionAnswering"),T5t.forEach(t),c9r=r($Re," (BART model)"),$Re.forEach(t),m9r=i(Ie),fw=n(Ie,"LI",{});var kRe=s(fw);UMe=n(kRe,"STRONG",{});var M5t=s(UMe);f9r=r(M5t,"bert"),M5t.forEach(t),g9r=r(kRe," \u2014 "),TJ=n(kRe,"A",{href:!0});var E5t=s(TJ);h9r=r(E5t,"FlaxBertForQuestionAnswering"),E5t.forEach(t),u9r=r(kRe," (BERT model)"),kRe.forEach(t),p9r=i(Ie),gw=n(Ie,"LI",{});var SRe=s(gw);JMe=n(SRe,"STRONG",{});var C5t=s(JMe);_9r=r(C5t,"big_bird"),C5t.forEach(t),b9r=r(SRe," \u2014 "),MJ=n(SRe,"A",{href:!0});var w5t=s(MJ);F9r=r(w5t,"FlaxBigBirdForQuestionAnswering"),w5t.forEach(t),v9r=r(SRe," (BigBird model)"),SRe.forEach(t),T9r=i(Ie),hw=n(Ie,"LI",{});var RRe=s(hw);YMe=n(RRe,"STRONG",{});var A5t=s(YMe);M9r=r(A5t,"distilbert"),A5t.forEach(t),E9r=r(RRe," \u2014 "),EJ=n(RRe,"A",{href:!0});var y5t=s(EJ);C9r=r(y5t,"FlaxDistilBertForQuestionAnswering"),y5t.forEach(t),w9r=r(RRe," (DistilBERT model)"),RRe.forEach(t),A9r=i(Ie),uw=n(Ie,"LI",{});var BRe=s(uw);KMe=n(BRe,"STRONG",{});var L5t=s(KMe);y9r=r(L5t,"electra"),L5t.forEach(t),L9r=r(BRe," \u2014 "),CJ=n(BRe,"A",{href:!0});var x5t=s(CJ);x9r=r(x5t,"FlaxElectraForQuestionAnswering"),x5t.forEach(t),$9r=r(BRe," (ELECTRA model)"),BRe.forEach(t),k9r=i(Ie),pw=n(Ie,"LI",{});var PRe=s(pw);ZMe=n(PRe,"STRONG",{});var $5t=s(ZMe);S9r=r($5t,"mbart"),$5t.forEach(t),R9r=r(PRe," \u2014 "),wJ=n(PRe,"A",{href:!0});var k5t=s(wJ);B9r=r(k5t,"FlaxMBartForQuestionAnswering"),k5t.forEach(t),P9r=r(PRe," (mBART model)"),PRe.forEach(t),I9r=i(Ie),_w=n(Ie,"LI",{});var IRe=s(_w);e4e=n(IRe,"STRONG",{});var S5t=s(e4e);q9r=r(S5t,"roberta"),S5t.forEach(t),N9r=r(IRe," \u2014 "),AJ=n(IRe,"A",{href:!0});var R5t=s(AJ);j9r=r(R5t,"FlaxRobertaForQuestionAnswering"),R5t.forEach(t),D9r=r(IRe," (RoBERTa model)"),IRe.forEach(t),G9r=i(Ie),bw=n(Ie,"LI",{});var qRe=s(bw);o4e=n(qRe,"STRONG",{});var B5t=s(o4e);O9r=r(B5t,"roformer"),B5t.forEach(t),V9r=r(qRe," \u2014 "),yJ=n(qRe,"A",{href:!0});var P5t=s(yJ);X9r=r(P5t,"FlaxRoFormerForQuestionAnswering"),P5t.forEach(t),z9r=r(qRe," (RoFormer model)"),qRe.forEach(t),Q9r=i(Ie),Fw=n(Ie,"LI",{});var NRe=s(Fw);r4e=n(NRe,"STRONG",{});var I5t=s(r4e);W9r=r(I5t,"xlm-roberta"),I5t.forEach(t),H9r=r(NRe," \u2014 "),LJ=n(NRe,"A",{href:!0});var q5t=s(LJ);U9r=r(q5t,"FlaxXLMRobertaForQuestionAnswering"),q5t.forEach(t),J9r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Ie.forEach(t),Y9r=i(Xl),T(vw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),JPe=i(m),qc=n(m,"H2",{class:!0});var oNe=s(qc);Tw=n(oNe,"A",{id:!0,class:!0,href:!0});var N5t=s(Tw);t4e=n(N5t,"SPAN",{});var j5t=s(t4e);T(U7.$$.fragment,j5t),j5t.forEach(t),N5t.forEach(t),K9r=i(oNe),a4e=n(oNe,"SPAN",{});var D5t=s(a4e);Z9r=r(D5t,"FlaxAutoModelForTokenClassification"),D5t.forEach(t),oNe.forEach(t),YPe=i(m),_r=n(m,"DIV",{class:!0});var zl=s(_r);T(J7.$$.fragment,zl),e$r=i(zl),Nc=n(zl,"P",{});var XK=s(Nc);o$r=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xJ=n(XK,"A",{href:!0});var G5t=s(xJ);r$r=r(G5t,"from_pretrained()"),G5t.forEach(t),t$r=r(XK," class method or the "),$J=n(XK,"A",{href:!0});var O5t=s($J);a$r=r(O5t,"from_config()"),O5t.forEach(t),n$r=r(XK,` class
method.`),XK.forEach(t),s$r=i(zl),Y7=n(zl,"P",{});var rNe=s(Y7);l$r=r(rNe,"This class cannot be instantiated directly using "),n4e=n(rNe,"CODE",{});var V5t=s(n4e);i$r=r(V5t,"__init__()"),V5t.forEach(t),d$r=r(rNe," (throws an error)."),rNe.forEach(t),c$r=i(zl),Vt=n(zl,"DIV",{class:!0});var l6=s(Vt);T(K7.$$.fragment,l6),m$r=i(l6),s4e=n(l6,"P",{});var X5t=s(s4e);f$r=r(X5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X5t.forEach(t),g$r=i(l6),jc=n(l6,"P",{});var zK=s(jc);h$r=r(zK,`Note:
Loading a model from its configuration file does `),l4e=n(zK,"STRONG",{});var z5t=s(l4e);u$r=r(z5t,"not"),z5t.forEach(t),p$r=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(zK,"A",{href:!0});var Q5t=s(kJ);_$r=r(Q5t,"from_pretrained()"),Q5t.forEach(t),b$r=r(zK," to load the model weights."),zK.forEach(t),F$r=i(l6),T(Mw.$$.fragment,l6),l6.forEach(t),v$r=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(Z7.$$.fragment,Ql),T$r=i(Ql),i4e=n(Ql,"P",{});var W5t=s(i4e);M$r=r(W5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W5t.forEach(t),E$r=i(Ql),pn=n(Ql,"P",{});var i6=s(pn);C$r=r(i6,"The model class to instantiate is selected based on the "),d4e=n(i6,"CODE",{});var H5t=s(d4e);w$r=r(H5t,"model_type"),H5t.forEach(t),A$r=r(i6,` property of the config object (either
passed as an argument or loaded from `),c4e=n(i6,"CODE",{});var U5t=s(c4e);y$r=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),L$r=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(i6,"CODE",{});var J5t=s(m4e);x$r=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),$$r=r(i6,":"),i6.forEach(t),k$r=i(Ql),De=n(Ql,"UL",{});var vo=s(De);Ew=n(vo,"LI",{});var jRe=s(Ew);f4e=n(jRe,"STRONG",{});var Y5t=s(f4e);S$r=r(Y5t,"albert"),Y5t.forEach(t),R$r=r(jRe," \u2014 "),SJ=n(jRe,"A",{href:!0});var K5t=s(SJ);B$r=r(K5t,"FlaxAlbertForTokenClassification"),K5t.forEach(t),P$r=r(jRe," (ALBERT model)"),jRe.forEach(t),I$r=i(vo),Cw=n(vo,"LI",{});var DRe=s(Cw);g4e=n(DRe,"STRONG",{});var Z5t=s(g4e);q$r=r(Z5t,"bert"),Z5t.forEach(t),N$r=r(DRe," \u2014 "),RJ=n(DRe,"A",{href:!0});var eCt=s(RJ);j$r=r(eCt,"FlaxBertForTokenClassification"),eCt.forEach(t),D$r=r(DRe," (BERT model)"),DRe.forEach(t),G$r=i(vo),ww=n(vo,"LI",{});var GRe=s(ww);h4e=n(GRe,"STRONG",{});var oCt=s(h4e);O$r=r(oCt,"big_bird"),oCt.forEach(t),V$r=r(GRe," \u2014 "),BJ=n(GRe,"A",{href:!0});var rCt=s(BJ);X$r=r(rCt,"FlaxBigBirdForTokenClassification"),rCt.forEach(t),z$r=r(GRe," (BigBird model)"),GRe.forEach(t),Q$r=i(vo),Aw=n(vo,"LI",{});var ORe=s(Aw);u4e=n(ORe,"STRONG",{});var tCt=s(u4e);W$r=r(tCt,"distilbert"),tCt.forEach(t),H$r=r(ORe," \u2014 "),PJ=n(ORe,"A",{href:!0});var aCt=s(PJ);U$r=r(aCt,"FlaxDistilBertForTokenClassification"),aCt.forEach(t),J$r=r(ORe," (DistilBERT model)"),ORe.forEach(t),Y$r=i(vo),yw=n(vo,"LI",{});var VRe=s(yw);p4e=n(VRe,"STRONG",{});var nCt=s(p4e);K$r=r(nCt,"electra"),nCt.forEach(t),Z$r=r(VRe," \u2014 "),IJ=n(VRe,"A",{href:!0});var sCt=s(IJ);ekr=r(sCt,"FlaxElectraForTokenClassification"),sCt.forEach(t),okr=r(VRe," (ELECTRA model)"),VRe.forEach(t),rkr=i(vo),Lw=n(vo,"LI",{});var XRe=s(Lw);_4e=n(XRe,"STRONG",{});var lCt=s(_4e);tkr=r(lCt,"roberta"),lCt.forEach(t),akr=r(XRe," \u2014 "),qJ=n(XRe,"A",{href:!0});var iCt=s(qJ);nkr=r(iCt,"FlaxRobertaForTokenClassification"),iCt.forEach(t),skr=r(XRe," (RoBERTa model)"),XRe.forEach(t),lkr=i(vo),xw=n(vo,"LI",{});var zRe=s(xw);b4e=n(zRe,"STRONG",{});var dCt=s(b4e);ikr=r(dCt,"roformer"),dCt.forEach(t),dkr=r(zRe," \u2014 "),NJ=n(zRe,"A",{href:!0});var cCt=s(NJ);ckr=r(cCt,"FlaxRoFormerForTokenClassification"),cCt.forEach(t),mkr=r(zRe," (RoFormer model)"),zRe.forEach(t),fkr=i(vo),$w=n(vo,"LI",{});var QRe=s($w);F4e=n(QRe,"STRONG",{});var mCt=s(F4e);gkr=r(mCt,"xlm-roberta"),mCt.forEach(t),hkr=r(QRe," \u2014 "),jJ=n(QRe,"A",{href:!0});var fCt=s(jJ);ukr=r(fCt,"FlaxXLMRobertaForTokenClassification"),fCt.forEach(t),pkr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),vo.forEach(t),_kr=i(Ql),T(kw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),KPe=i(m),Dc=n(m,"H2",{class:!0});var tNe=s(Dc);Sw=n(tNe,"A",{id:!0,class:!0,href:!0});var gCt=s(Sw);v4e=n(gCt,"SPAN",{});var hCt=s(v4e);T(ex.$$.fragment,hCt),hCt.forEach(t),gCt.forEach(t),bkr=i(tNe),T4e=n(tNe,"SPAN",{});var uCt=s(T4e);Fkr=r(uCt,"FlaxAutoModelForMultipleChoice"),uCt.forEach(t),tNe.forEach(t),ZPe=i(m),br=n(m,"DIV",{class:!0});var Wl=s(br);T(ox.$$.fragment,Wl),vkr=i(Wl),Gc=n(Wl,"P",{});var QK=s(Gc);Tkr=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DJ=n(QK,"A",{href:!0});var pCt=s(DJ);Mkr=r(pCt,"from_pretrained()"),pCt.forEach(t),Ekr=r(QK," class method or the "),GJ=n(QK,"A",{href:!0});var _Ct=s(GJ);Ckr=r(_Ct,"from_config()"),_Ct.forEach(t),wkr=r(QK,` class
method.`),QK.forEach(t),Akr=i(Wl),rx=n(Wl,"P",{});var aNe=s(rx);ykr=r(aNe,"This class cannot be instantiated directly using "),M4e=n(aNe,"CODE",{});var bCt=s(M4e);Lkr=r(bCt,"__init__()"),bCt.forEach(t),xkr=r(aNe," (throws an error)."),aNe.forEach(t),$kr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var d6=s(Xt);T(tx.$$.fragment,d6),kkr=i(d6),E4e=n(d6,"P",{});var FCt=s(E4e);Skr=r(FCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FCt.forEach(t),Rkr=i(d6),Oc=n(d6,"P",{});var WK=s(Oc);Bkr=r(WK,`Note:
Loading a model from its configuration file does `),C4e=n(WK,"STRONG",{});var vCt=s(C4e);Pkr=r(vCt,"not"),vCt.forEach(t),Ikr=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(WK,"A",{href:!0});var TCt=s(OJ);qkr=r(TCt,"from_pretrained()"),TCt.forEach(t),Nkr=r(WK," to load the model weights."),WK.forEach(t),jkr=i(d6),T(Rw.$$.fragment,d6),d6.forEach(t),Dkr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(ax.$$.fragment,Hl),Gkr=i(Hl),w4e=n(Hl,"P",{});var MCt=s(w4e);Okr=r(MCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MCt.forEach(t),Vkr=i(Hl),_n=n(Hl,"P",{});var c6=s(_n);Xkr=r(c6,"The model class to instantiate is selected based on the "),A4e=n(c6,"CODE",{});var ECt=s(A4e);zkr=r(ECt,"model_type"),ECt.forEach(t),Qkr=r(c6,` property of the config object (either
passed as an argument or loaded from `),y4e=n(c6,"CODE",{});var CCt=s(y4e);Wkr=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Hkr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L4e=n(c6,"CODE",{});var wCt=s(L4e);Ukr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Jkr=r(c6,":"),c6.forEach(t),Ykr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);Bw=n(To,"LI",{});var WRe=s(Bw);x4e=n(WRe,"STRONG",{});var ACt=s(x4e);Kkr=r(ACt,"albert"),ACt.forEach(t),Zkr=r(WRe," \u2014 "),VJ=n(WRe,"A",{href:!0});var yCt=s(VJ);eSr=r(yCt,"FlaxAlbertForMultipleChoice"),yCt.forEach(t),oSr=r(WRe," (ALBERT model)"),WRe.forEach(t),rSr=i(To),Pw=n(To,"LI",{});var HRe=s(Pw);$4e=n(HRe,"STRONG",{});var LCt=s($4e);tSr=r(LCt,"bert"),LCt.forEach(t),aSr=r(HRe," \u2014 "),XJ=n(HRe,"A",{href:!0});var xCt=s(XJ);nSr=r(xCt,"FlaxBertForMultipleChoice"),xCt.forEach(t),sSr=r(HRe," (BERT model)"),HRe.forEach(t),lSr=i(To),Iw=n(To,"LI",{});var URe=s(Iw);k4e=n(URe,"STRONG",{});var $Ct=s(k4e);iSr=r($Ct,"big_bird"),$Ct.forEach(t),dSr=r(URe," \u2014 "),zJ=n(URe,"A",{href:!0});var kCt=s(zJ);cSr=r(kCt,"FlaxBigBirdForMultipleChoice"),kCt.forEach(t),mSr=r(URe," (BigBird model)"),URe.forEach(t),fSr=i(To),qw=n(To,"LI",{});var JRe=s(qw);S4e=n(JRe,"STRONG",{});var SCt=s(S4e);gSr=r(SCt,"distilbert"),SCt.forEach(t),hSr=r(JRe," \u2014 "),QJ=n(JRe,"A",{href:!0});var RCt=s(QJ);uSr=r(RCt,"FlaxDistilBertForMultipleChoice"),RCt.forEach(t),pSr=r(JRe," (DistilBERT model)"),JRe.forEach(t),_Sr=i(To),Nw=n(To,"LI",{});var YRe=s(Nw);R4e=n(YRe,"STRONG",{});var BCt=s(R4e);bSr=r(BCt,"electra"),BCt.forEach(t),FSr=r(YRe," \u2014 "),WJ=n(YRe,"A",{href:!0});var PCt=s(WJ);vSr=r(PCt,"FlaxElectraForMultipleChoice"),PCt.forEach(t),TSr=r(YRe," (ELECTRA model)"),YRe.forEach(t),MSr=i(To),jw=n(To,"LI",{});var KRe=s(jw);B4e=n(KRe,"STRONG",{});var ICt=s(B4e);ESr=r(ICt,"roberta"),ICt.forEach(t),CSr=r(KRe," \u2014 "),HJ=n(KRe,"A",{href:!0});var qCt=s(HJ);wSr=r(qCt,"FlaxRobertaForMultipleChoice"),qCt.forEach(t),ASr=r(KRe," (RoBERTa model)"),KRe.forEach(t),ySr=i(To),Dw=n(To,"LI",{});var ZRe=s(Dw);P4e=n(ZRe,"STRONG",{});var NCt=s(P4e);LSr=r(NCt,"roformer"),NCt.forEach(t),xSr=r(ZRe," \u2014 "),UJ=n(ZRe,"A",{href:!0});var jCt=s(UJ);$Sr=r(jCt,"FlaxRoFormerForMultipleChoice"),jCt.forEach(t),kSr=r(ZRe," (RoFormer model)"),ZRe.forEach(t),SSr=i(To),Gw=n(To,"LI",{});var eBe=s(Gw);I4e=n(eBe,"STRONG",{});var DCt=s(I4e);RSr=r(DCt,"xlm-roberta"),DCt.forEach(t),BSr=r(eBe," \u2014 "),JJ=n(eBe,"A",{href:!0});var GCt=s(JJ);PSr=r(GCt,"FlaxXLMRobertaForMultipleChoice"),GCt.forEach(t),ISr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),To.forEach(t),qSr=i(Hl),T(Ow.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),eIe=i(m),Vc=n(m,"H2",{class:!0});var nNe=s(Vc);Vw=n(nNe,"A",{id:!0,class:!0,href:!0});var OCt=s(Vw);q4e=n(OCt,"SPAN",{});var VCt=s(q4e);T(nx.$$.fragment,VCt),VCt.forEach(t),OCt.forEach(t),NSr=i(nNe),N4e=n(nNe,"SPAN",{});var XCt=s(N4e);jSr=r(XCt,"FlaxAutoModelForNextSentencePrediction"),XCt.forEach(t),nNe.forEach(t),oIe=i(m),Fr=n(m,"DIV",{class:!0});var Ul=s(Fr);T(sx.$$.fragment,Ul),DSr=i(Ul),Xc=n(Ul,"P",{});var HK=s(Xc);GSr=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YJ=n(HK,"A",{href:!0});var zCt=s(YJ);OSr=r(zCt,"from_pretrained()"),zCt.forEach(t),VSr=r(HK," class method or the "),KJ=n(HK,"A",{href:!0});var QCt=s(KJ);XSr=r(QCt,"from_config()"),QCt.forEach(t),zSr=r(HK,` class
method.`),HK.forEach(t),QSr=i(Ul),lx=n(Ul,"P",{});var sNe=s(lx);WSr=r(sNe,"This class cannot be instantiated directly using "),j4e=n(sNe,"CODE",{});var WCt=s(j4e);HSr=r(WCt,"__init__()"),WCt.forEach(t),USr=r(sNe," (throws an error)."),sNe.forEach(t),JSr=i(Ul),zt=n(Ul,"DIV",{class:!0});var m6=s(zt);T(ix.$$.fragment,m6),YSr=i(m6),D4e=n(m6,"P",{});var HCt=s(D4e);KSr=r(HCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HCt.forEach(t),ZSr=i(m6),zc=n(m6,"P",{});var UK=s(zc);eRr=r(UK,`Note:
Loading a model from its configuration file does `),G4e=n(UK,"STRONG",{});var UCt=s(G4e);oRr=r(UCt,"not"),UCt.forEach(t),rRr=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(UK,"A",{href:!0});var JCt=s(ZJ);tRr=r(JCt,"from_pretrained()"),JCt.forEach(t),aRr=r(UK," to load the model weights."),UK.forEach(t),nRr=i(m6),T(Xw.$$.fragment,m6),m6.forEach(t),sRr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(dx.$$.fragment,Jl),lRr=i(Jl),O4e=n(Jl,"P",{});var YCt=s(O4e);iRr=r(YCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YCt.forEach(t),dRr=i(Jl),bn=n(Jl,"P",{});var f6=s(bn);cRr=r(f6,"The model class to instantiate is selected based on the "),V4e=n(f6,"CODE",{});var KCt=s(V4e);mRr=r(KCt,"model_type"),KCt.forEach(t),fRr=r(f6,` property of the config object (either
passed as an argument or loaded from `),X4e=n(f6,"CODE",{});var ZCt=s(X4e);gRr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),hRr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(f6,"CODE",{});var e3t=s(z4e);uRr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),pRr=r(f6,":"),f6.forEach(t),_Rr=i(Jl),Q4e=n(Jl,"UL",{});var o3t=s(Q4e);zw=n(o3t,"LI",{});var oBe=s(zw);W4e=n(oBe,"STRONG",{});var r3t=s(W4e);bRr=r(r3t,"bert"),r3t.forEach(t),FRr=r(oBe," \u2014 "),eY=n(oBe,"A",{href:!0});var t3t=s(eY);vRr=r(t3t,"FlaxBertForNextSentencePrediction"),t3t.forEach(t),TRr=r(oBe," (BERT model)"),oBe.forEach(t),o3t.forEach(t),MRr=i(Jl),T(Qw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),rIe=i(m),Qc=n(m,"H2",{class:!0});var lNe=s(Qc);Ww=n(lNe,"A",{id:!0,class:!0,href:!0});var a3t=s(Ww);H4e=n(a3t,"SPAN",{});var n3t=s(H4e);T(cx.$$.fragment,n3t),n3t.forEach(t),a3t.forEach(t),ERr=i(lNe),U4e=n(lNe,"SPAN",{});var s3t=s(U4e);CRr=r(s3t,"FlaxAutoModelForImageClassification"),s3t.forEach(t),lNe.forEach(t),tIe=i(m),vr=n(m,"DIV",{class:!0});var Yl=s(vr);T(mx.$$.fragment,Yl),wRr=i(Yl),Wc=n(Yl,"P",{});var JK=s(Wc);ARr=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oY=n(JK,"A",{href:!0});var l3t=s(oY);yRr=r(l3t,"from_pretrained()"),l3t.forEach(t),LRr=r(JK," class method or the "),rY=n(JK,"A",{href:!0});var i3t=s(rY);xRr=r(i3t,"from_config()"),i3t.forEach(t),$Rr=r(JK,` class
method.`),JK.forEach(t),kRr=i(Yl),fx=n(Yl,"P",{});var iNe=s(fx);SRr=r(iNe,"This class cannot be instantiated directly using "),J4e=n(iNe,"CODE",{});var d3t=s(J4e);RRr=r(d3t,"__init__()"),d3t.forEach(t),BRr=r(iNe," (throws an error)."),iNe.forEach(t),PRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var g6=s(Qt);T(gx.$$.fragment,g6),IRr=i(g6),Y4e=n(g6,"P",{});var c3t=s(Y4e);qRr=r(c3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),c3t.forEach(t),NRr=i(g6),Hc=n(g6,"P",{});var YK=s(Hc);jRr=r(YK,`Note:
Loading a model from its configuration file does `),K4e=n(YK,"STRONG",{});var m3t=s(K4e);DRr=r(m3t,"not"),m3t.forEach(t),GRr=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(YK,"A",{href:!0});var f3t=s(tY);ORr=r(f3t,"from_pretrained()"),f3t.forEach(t),VRr=r(YK," to load the model weights."),YK.forEach(t),XRr=i(g6),T(Hw.$$.fragment,g6),g6.forEach(t),zRr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(hx.$$.fragment,Kl),QRr=i(Kl),Z4e=n(Kl,"P",{});var g3t=s(Z4e);WRr=r(g3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),g3t.forEach(t),HRr=i(Kl),Fn=n(Kl,"P",{});var h6=s(Fn);URr=r(h6,"The model class to instantiate is selected based on the "),eEe=n(h6,"CODE",{});var h3t=s(eEe);JRr=r(h3t,"model_type"),h3t.forEach(t),YRr=r(h6,` property of the config object (either
passed as an argument or loaded from `),oEe=n(h6,"CODE",{});var u3t=s(oEe);KRr=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),ZRr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(h6,"CODE",{});var p3t=s(rEe);eBr=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),oBr=r(h6,":"),h6.forEach(t),rBr=i(Kl),ux=n(Kl,"UL",{});var dNe=s(ux);Uw=n(dNe,"LI",{});var rBe=s(Uw);tEe=n(rBe,"STRONG",{});var _3t=s(tEe);tBr=r(_3t,"beit"),_3t.forEach(t),aBr=r(rBe," \u2014 "),aY=n(rBe,"A",{href:!0});var b3t=s(aY);nBr=r(b3t,"FlaxBeitForImageClassification"),b3t.forEach(t),sBr=r(rBe," (BEiT model)"),rBe.forEach(t),lBr=i(dNe),Jw=n(dNe,"LI",{});var tBe=s(Jw);aEe=n(tBe,"STRONG",{});var F3t=s(aEe);iBr=r(F3t,"vit"),F3t.forEach(t),dBr=r(tBe," \u2014 "),nY=n(tBe,"A",{href:!0});var v3t=s(nY);cBr=r(v3t,"FlaxViTForImageClassification"),v3t.forEach(t),mBr=r(tBe," (ViT model)"),tBe.forEach(t),dNe.forEach(t),fBr=i(Kl),T(Yw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),aIe=i(m),Uc=n(m,"H2",{class:!0});var cNe=s(Uc);Kw=n(cNe,"A",{id:!0,class:!0,href:!0});var T3t=s(Kw);nEe=n(T3t,"SPAN",{});var M3t=s(nEe);T(px.$$.fragment,M3t),M3t.forEach(t),T3t.forEach(t),gBr=i(cNe),sEe=n(cNe,"SPAN",{});var E3t=s(sEe);hBr=r(E3t,"FlaxAutoModelForVision2Seq"),E3t.forEach(t),cNe.forEach(t),nIe=i(m),Tr=n(m,"DIV",{class:!0});var Zl=s(Tr);T(_x.$$.fragment,Zl),uBr=i(Zl),Jc=n(Zl,"P",{});var KK=s(Jc);pBr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sY=n(KK,"A",{href:!0});var C3t=s(sY);_Br=r(C3t,"from_pretrained()"),C3t.forEach(t),bBr=r(KK," class method or the "),lY=n(KK,"A",{href:!0});var w3t=s(lY);FBr=r(w3t,"from_config()"),w3t.forEach(t),vBr=r(KK,` class
method.`),KK.forEach(t),TBr=i(Zl),bx=n(Zl,"P",{});var mNe=s(bx);MBr=r(mNe,"This class cannot be instantiated directly using "),lEe=n(mNe,"CODE",{});var A3t=s(lEe);EBr=r(A3t,"__init__()"),A3t.forEach(t),CBr=r(mNe," (throws an error)."),mNe.forEach(t),wBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var u6=s(Wt);T(Fx.$$.fragment,u6),ABr=i(u6),iEe=n(u6,"P",{});var y3t=s(iEe);yBr=r(y3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y3t.forEach(t),LBr=i(u6),Yc=n(u6,"P",{});var ZK=s(Yc);xBr=r(ZK,`Note:
Loading a model from its configuration file does `),dEe=n(ZK,"STRONG",{});var L3t=s(dEe);$Br=r(L3t,"not"),L3t.forEach(t),kBr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(ZK,"A",{href:!0});var x3t=s(iY);SBr=r(x3t,"from_pretrained()"),x3t.forEach(t),RBr=r(ZK," to load the model weights."),ZK.forEach(t),BBr=i(u6),T(Zw.$$.fragment,u6),u6.forEach(t),PBr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(vx.$$.fragment,ei),IBr=i(ei),cEe=n(ei,"P",{});var $3t=s(cEe);qBr=r($3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$3t.forEach(t),NBr=i(ei),vn=n(ei,"P",{});var p6=s(vn);jBr=r(p6,"The model class to instantiate is selected based on the "),mEe=n(p6,"CODE",{});var k3t=s(mEe);DBr=r(k3t,"model_type"),k3t.forEach(t),GBr=r(p6,` property of the config object (either
passed as an argument or loaded from `),fEe=n(p6,"CODE",{});var S3t=s(fEe);OBr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),VBr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(p6,"CODE",{});var R3t=s(gEe);XBr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),zBr=r(p6,":"),p6.forEach(t),QBr=i(ei),hEe=n(ei,"UL",{});var B3t=s(hEe);eA=n(B3t,"LI",{});var aBe=s(eA);uEe=n(aBe,"STRONG",{});var P3t=s(uEe);WBr=r(P3t,"vision-encoder-decoder"),P3t.forEach(t),HBr=r(aBe," \u2014 "),dY=n(aBe,"A",{href:!0});var I3t=s(dY);UBr=r(I3t,"FlaxVisionEncoderDecoderModel"),I3t.forEach(t),JBr=r(aBe," (Vision Encoder decoder model)"),aBe.forEach(t),B3t.forEach(t),YBr=i(ei),T(oA.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(NAt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Mn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(nm,"id","extending-the-auto-classes"),c(nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nm,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lm,"id","transformers.AutoConfig"),c(lm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lm,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(j9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(D9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(G9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(O9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(V9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(X9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(z9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Q9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(W9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(H9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(U9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(J9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(Y9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(K9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(Z9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(e$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(o$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(r$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(t$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(a$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(n$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(s$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(l$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(i$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(d$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(c$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(m$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(f$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(g$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(h$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(u$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(p$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(_$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(b$,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(F$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(v$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(T$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(y$,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c($$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(S$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(j$,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ik,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(fk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Ak,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c($k,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Pk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Ik,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(qk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Nk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(jk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Dk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Gk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Ok,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Vk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Xk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(zk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Qk,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Wk,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Hk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Uk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Jk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Yk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Kk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Zk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(eS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(oS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(rS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(tS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(aS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(nS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(sS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(iS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(dS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(cS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(mS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(fS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(uS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(pS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_S,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(bS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(FS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(vS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(TS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(MS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(ES,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(CS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(wS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(AS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(yS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(LS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(xS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c($S,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(VS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(XS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(zS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(HS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(US,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(mR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(AR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(QR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(fi,"class","relative group"),c(gB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(pB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_B,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoProcessor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(NB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(jB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(DB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(GB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(OB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(QB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(WB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(JB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(ZB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(tP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(aP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(nP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(sP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(lP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(iP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(dP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(cP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(fP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(gP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(hP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(uP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(pP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(_P,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(FP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(TP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(MP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(EP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(CP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(wP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(AP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(yP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(LP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(xP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c($P,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(kP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(SP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(RP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(PP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(IP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(NP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(jP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(DP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(OP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(VP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(XP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(zP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(QP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(WP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(HP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(UP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(YP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(eI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(oI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(aI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(nI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(sI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(cI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(mI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(fI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(gI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(hI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(uI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(pI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(_I,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(bI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(FI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(vI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(TI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(MI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(EI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(CI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(wI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(AI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(yI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(LI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(xI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c($I,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(kI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(SI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(RI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(BI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(PI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(II,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(qI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(NI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(jI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(DI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(GI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(OI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(VI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vp,"id","transformers.AutoModelForPreTraining"),c(vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vp,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(XI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(HI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(JI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(YI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(sq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(iq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(cq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(gq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(hq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_q,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Fq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Tq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Mq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Cq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Aq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(yq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Lq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c($q,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(kq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(qq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Nq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(jq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Dq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Vq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(zq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Qq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Hq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Uq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(Jq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Yq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Kq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(eN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(oN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(rN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(tN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(aN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(nN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(sN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(lN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(iN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(dN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(cN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(mN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(gN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(uN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForMaskedLM"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(pN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_N,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(vN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(TN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(MN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(EN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(CN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(wN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(LN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(SN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(RN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(IN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(NN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(jN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(GN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ON,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(VN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(XN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(zN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(QN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(WN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(YN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(KN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForSeq2SeqLM"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(ZN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(aj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(nj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(sj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(lj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ij,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(dj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(cj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(mj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(gj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(hj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(uj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(pj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_j,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e2,"id","transformers.AutoModelForSequenceClassification"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(Fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Ej,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Cj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(wj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Aj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(yj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Lj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(xj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c($j,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(kj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Sj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Rj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Bj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Pj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Ij,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(qj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Nj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(jj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Dj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Gj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Oj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Vj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Xj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(zj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Qj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Wj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Hj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Uj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Jj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Yj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Kj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Zj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(mD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y2,"id","transformers.AutoModelForMultipleChoice"),c(Y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y2,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(uD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(FD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(TD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(MD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(ED,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(CD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(wD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($D,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(BD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(PD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ID,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(qD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(ND,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForNextSentencePrediction"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(QD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForTokenClassification"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(eG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($G,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForQuestionAnswering"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(mO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(fO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(uO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(pO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(_O,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(FO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(vO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForTableQuestionAnswering"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u1,"id","transformers.AutoModelForImageClassification"),c(u1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u1,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(IO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForVision2Seq"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForAudioClassification"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(YO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForAudioFrameClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.AutoModelForCTC"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(FV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(vV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(TV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(AV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($V,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForAudioXVector"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForAudioXVector"),c(fd,"class","relative group"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(IV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(NV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.AutoModelForObjectDetection"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(aX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModel"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(hX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(uX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(pX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_X,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(FX,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(vX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(TX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(MX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(EX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(CX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AX,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(LX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c($X,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(RX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(BX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(PX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(IX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(qX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(NX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(jX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(DX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(VX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(QX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(WX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(JX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(YX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(KX,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ez,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(oz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(rz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JM,"id","transformers.TFAutoModelForPreTraining"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_z,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Fz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Cz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Az,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForCausalLM"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Bz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Pz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Nz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Dz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Gz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Oz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForImageClassification"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForMaskedLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(CQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(wQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(yQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(xQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c($Q,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(kQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForSequenceClassification"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.TFAutoModelForMultipleChoice"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(mW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(fW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(gW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(hW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(uW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(pW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(_W,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(bW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(FW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(TW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(MW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(EW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(CW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(wW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(AW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.TFAutoModelForTokenClassification"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(kW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForQuestionAnswering"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(nH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(iH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(dH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(cH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(mH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(fH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(gH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(hH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(uH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(pH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_H,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(bH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(FH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(vH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(TH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(MH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.TFAutoModelForVision2Seq"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.FlaxAutoModel"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.FlaxAutoModel"),c(pc,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(PH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(IH,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(qH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(NH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(jH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(DH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(GH,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(OH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(VH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(XH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(zH,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(QH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(WH,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(HH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(YH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(KH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(ZH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(eU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(oU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(rU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(tU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(aU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.FlaxAutoModelForCausalLM"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(dU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(cU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(fU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(gU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(hU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(uU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(pU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForPreTraining"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(TU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(EU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(CU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(wU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c($U,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(kU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForMaskedLM"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(IU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(NU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(jU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(DU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(GU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(VU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(XU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(JU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(YU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(KU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(rJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(tJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(TJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(EJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(wJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(RJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(BJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(PJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(IJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(qJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(NJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(XJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(QJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(WJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(HJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(UJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(JJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForImageClassification"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,oi),b(m,om,_),b(m,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,_6),e(Kr,rm),b(m,qe,_),b(m,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,b6),e(Xe,En),e(Xe,Cn),e(Cn,F6),e(Xe,ni),e(Xe,wn),e(wn,v6),e(Xe,si),b(m,tm,_),M(Fa,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,R9),e(Ae,li),e(li,B9),e(Ae,P9),b(m,Eo,_),b(m,va,_),e(va,I9),e(va,am),e(am,q9),e(va,fNe),b(m,nBe,_),b(m,ii,_),e(ii,nm),e(nm,eZ),M(T6,eZ,null),e(ii,gNe),e(ii,oZ),e(oZ,hNe),b(m,sBe,_),b(m,An,_),e(An,uNe),e(An,rZ),e(rZ,pNe),e(An,_Ne),e(An,tZ),e(tZ,bNe),e(An,FNe),b(m,lBe,_),M(M6,m,_),b(m,iBe,_),b(m,N9,_),e(N9,vNe),b(m,dBe,_),M(sm,m,_),b(m,cBe,_),b(m,di,_),e(di,lm),e(lm,aZ),M(E6,aZ,null),e(di,TNe),e(di,nZ),e(nZ,MNe),b(m,mBe,_),b(m,Co,_),M(C6,Co,null),e(Co,ENe),e(Co,w6),e(w6,CNe),e(w6,j9),e(j9,wNe),e(w6,ANe),e(Co,yNe),e(Co,A6),e(A6,LNe),e(A6,sZ),e(sZ,xNe),e(A6,$Ne),e(Co,kNe),e(Co,Mr),M(y6,Mr,null),e(Mr,SNe),e(Mr,lZ),e(lZ,RNe),e(Mr,BNe),e(Mr,ci),e(ci,PNe),e(ci,iZ),e(iZ,INe),e(ci,qNe),e(ci,dZ),e(dZ,NNe),e(ci,jNe),e(Mr,DNe),e(Mr,A),e(A,im),e(im,cZ),e(cZ,GNe),e(im,ONe),e(im,D9),e(D9,VNe),e(im,XNe),e(A,zNe),e(A,dm),e(dm,mZ),e(mZ,QNe),e(dm,WNe),e(dm,G9),e(G9,HNe),e(dm,UNe),e(A,JNe),e(A,cm),e(cm,fZ),e(fZ,YNe),e(cm,KNe),e(cm,O9),e(O9,ZNe),e(cm,eje),e(A,oje),e(A,mm),e(mm,gZ),e(gZ,rje),e(mm,tje),e(mm,V9),e(V9,aje),e(mm,nje),e(A,sje),e(A,fm),e(fm,hZ),e(hZ,lje),e(fm,ije),e(fm,X9),e(X9,dje),e(fm,cje),e(A,mje),e(A,gm),e(gm,uZ),e(uZ,fje),e(gm,gje),e(gm,z9),e(z9,hje),e(gm,uje),e(A,pje),e(A,hm),e(hm,pZ),e(pZ,_je),e(hm,bje),e(hm,Q9),e(Q9,Fje),e(hm,vje),e(A,Tje),e(A,um),e(um,_Z),e(_Z,Mje),e(um,Eje),e(um,W9),e(W9,Cje),e(um,wje),e(A,Aje),e(A,pm),e(pm,bZ),e(bZ,yje),e(pm,Lje),e(pm,H9),e(H9,xje),e(pm,$je),e(A,kje),e(A,_m),e(_m,FZ),e(FZ,Sje),e(_m,Rje),e(_m,U9),e(U9,Bje),e(_m,Pje),e(A,Ije),e(A,bm),e(bm,vZ),e(vZ,qje),e(bm,Nje),e(bm,J9),e(J9,jje),e(bm,Dje),e(A,Gje),e(A,Fm),e(Fm,TZ),e(TZ,Oje),e(Fm,Vje),e(Fm,Y9),e(Y9,Xje),e(Fm,zje),e(A,Qje),e(A,vm),e(vm,MZ),e(MZ,Wje),e(vm,Hje),e(vm,K9),e(K9,Uje),e(vm,Jje),e(A,Yje),e(A,Tm),e(Tm,EZ),e(EZ,Kje),e(Tm,Zje),e(Tm,Z9),e(Z9,eDe),e(Tm,oDe),e(A,rDe),e(A,Mm),e(Mm,CZ),e(CZ,tDe),e(Mm,aDe),e(Mm,e$),e(e$,nDe),e(Mm,sDe),e(A,lDe),e(A,Em),e(Em,wZ),e(wZ,iDe),e(Em,dDe),e(Em,o$),e(o$,cDe),e(Em,mDe),e(A,fDe),e(A,Cm),e(Cm,AZ),e(AZ,gDe),e(Cm,hDe),e(Cm,r$),e(r$,uDe),e(Cm,pDe),e(A,_De),e(A,wm),e(wm,yZ),e(yZ,bDe),e(wm,FDe),e(wm,t$),e(t$,vDe),e(wm,TDe),e(A,MDe),e(A,Am),e(Am,LZ),e(LZ,EDe),e(Am,CDe),e(Am,a$),e(a$,wDe),e(Am,ADe),e(A,yDe),e(A,ym),e(ym,xZ),e(xZ,LDe),e(ym,xDe),e(ym,n$),e(n$,$De),e(ym,kDe),e(A,SDe),e(A,Lm),e(Lm,$Z),e($Z,RDe),e(Lm,BDe),e(Lm,s$),e(s$,PDe),e(Lm,IDe),e(A,qDe),e(A,xm),e(xm,kZ),e(kZ,NDe),e(xm,jDe),e(xm,l$),e(l$,DDe),e(xm,GDe),e(A,ODe),e(A,$m),e($m,SZ),e(SZ,VDe),e($m,XDe),e($m,i$),e(i$,zDe),e($m,QDe),e(A,WDe),e(A,km),e(km,RZ),e(RZ,HDe),e(km,UDe),e(km,d$),e(d$,JDe),e(km,YDe),e(A,KDe),e(A,Sm),e(Sm,BZ),e(BZ,ZDe),e(Sm,eGe),e(Sm,c$),e(c$,oGe),e(Sm,rGe),e(A,tGe),e(A,Rm),e(Rm,PZ),e(PZ,aGe),e(Rm,nGe),e(Rm,m$),e(m$,sGe),e(Rm,lGe),e(A,iGe),e(A,Bm),e(Bm,IZ),e(IZ,dGe),e(Bm,cGe),e(Bm,f$),e(f$,mGe),e(Bm,fGe),e(A,gGe),e(A,Pm),e(Pm,qZ),e(qZ,hGe),e(Pm,uGe),e(Pm,g$),e(g$,pGe),e(Pm,_Ge),e(A,bGe),e(A,Im),e(Im,NZ),e(NZ,FGe),e(Im,vGe),e(Im,h$),e(h$,TGe),e(Im,MGe),e(A,EGe),e(A,qm),e(qm,jZ),e(jZ,CGe),e(qm,wGe),e(qm,u$),e(u$,AGe),e(qm,yGe),e(A,LGe),e(A,Nm),e(Nm,DZ),e(DZ,xGe),e(Nm,$Ge),e(Nm,p$),e(p$,kGe),e(Nm,SGe),e(A,RGe),e(A,jm),e(jm,GZ),e(GZ,BGe),e(jm,PGe),e(jm,_$),e(_$,IGe),e(jm,qGe),e(A,NGe),e(A,Dm),e(Dm,OZ),e(OZ,jGe),e(Dm,DGe),e(Dm,b$),e(b$,GGe),e(Dm,OGe),e(A,VGe),e(A,Gm),e(Gm,VZ),e(VZ,XGe),e(Gm,zGe),e(Gm,F$),e(F$,QGe),e(Gm,WGe),e(A,HGe),e(A,Om),e(Om,XZ),e(XZ,UGe),e(Om,JGe),e(Om,v$),e(v$,YGe),e(Om,KGe),e(A,ZGe),e(A,Vm),e(Vm,zZ),e(zZ,eOe),e(Vm,oOe),e(Vm,T$),e(T$,rOe),e(Vm,tOe),e(A,aOe),e(A,Xm),e(Xm,QZ),e(QZ,nOe),e(Xm,sOe),e(Xm,M$),e(M$,lOe),e(Xm,iOe),e(A,dOe),e(A,zm),e(zm,WZ),e(WZ,cOe),e(zm,mOe),e(zm,E$),e(E$,fOe),e(zm,gOe),e(A,hOe),e(A,Qm),e(Qm,HZ),e(HZ,uOe),e(Qm,pOe),e(Qm,C$),e(C$,_Oe),e(Qm,bOe),e(A,FOe),e(A,Wm),e(Wm,UZ),e(UZ,vOe),e(Wm,TOe),e(Wm,w$),e(w$,MOe),e(Wm,EOe),e(A,COe),e(A,Hm),e(Hm,JZ),e(JZ,wOe),e(Hm,AOe),e(Hm,A$),e(A$,yOe),e(Hm,LOe),e(A,xOe),e(A,Um),e(Um,YZ),e(YZ,$Oe),e(Um,kOe),e(Um,y$),e(y$,SOe),e(Um,ROe),e(A,BOe),e(A,Jm),e(Jm,KZ),e(KZ,POe),e(Jm,IOe),e(Jm,L$),e(L$,qOe),e(Jm,NOe),e(A,jOe),e(A,Ym),e(Ym,ZZ),e(ZZ,DOe),e(Ym,GOe),e(Ym,x$),e(x$,OOe),e(Ym,VOe),e(A,XOe),e(A,Km),e(Km,eee),e(eee,zOe),e(Km,QOe),e(Km,$$),e($$,WOe),e(Km,HOe),e(A,UOe),e(A,Zm),e(Zm,oee),e(oee,JOe),e(Zm,YOe),e(Zm,k$),e(k$,KOe),e(Zm,ZOe),e(A,eVe),e(A,ef),e(ef,ree),e(ree,oVe),e(ef,rVe),e(ef,S$),e(S$,tVe),e(ef,aVe),e(A,nVe),e(A,of),e(of,tee),e(tee,sVe),e(of,lVe),e(of,R$),e(R$,iVe),e(of,dVe),e(A,cVe),e(A,rf),e(rf,aee),e(aee,mVe),e(rf,fVe),e(rf,B$),e(B$,gVe),e(rf,hVe),e(A,uVe),e(A,tf),e(tf,nee),e(nee,pVe),e(tf,_Ve),e(tf,P$),e(P$,bVe),e(tf,FVe),e(A,vVe),e(A,af),e(af,see),e(see,TVe),e(af,MVe),e(af,I$),e(I$,EVe),e(af,CVe),e(A,wVe),e(A,nf),e(nf,lee),e(lee,AVe),e(nf,yVe),e(nf,q$),e(q$,LVe),e(nf,xVe),e(A,$Ve),e(A,sf),e(sf,iee),e(iee,kVe),e(sf,SVe),e(sf,N$),e(N$,RVe),e(sf,BVe),e(A,PVe),e(A,lf),e(lf,dee),e(dee,IVe),e(lf,qVe),e(lf,j$),e(j$,NVe),e(lf,jVe),e(A,DVe),e(A,df),e(df,cee),e(cee,GVe),e(df,OVe),e(df,D$),e(D$,VVe),e(df,XVe),e(A,zVe),e(A,cf),e(cf,mee),e(mee,QVe),e(cf,WVe),e(cf,G$),e(G$,HVe),e(cf,UVe),e(A,JVe),e(A,mf),e(mf,fee),e(fee,YVe),e(mf,KVe),e(mf,O$),e(O$,ZVe),e(mf,eXe),e(A,oXe),e(A,ff),e(ff,gee),e(gee,rXe),e(ff,tXe),e(ff,V$),e(V$,aXe),e(ff,nXe),e(A,sXe),e(A,gf),e(gf,hee),e(hee,lXe),e(gf,iXe),e(gf,X$),e(X$,dXe),e(gf,cXe),e(A,mXe),e(A,hf),e(hf,uee),e(uee,fXe),e(hf,gXe),e(hf,z$),e(z$,hXe),e(hf,uXe),e(A,pXe),e(A,uf),e(uf,pee),e(pee,_Xe),e(uf,bXe),e(uf,Q$),e(Q$,FXe),e(uf,vXe),e(A,TXe),e(A,pf),e(pf,_ee),e(_ee,MXe),e(pf,EXe),e(pf,W$),e(W$,CXe),e(pf,wXe),e(A,AXe),e(A,_f),e(_f,bee),e(bee,yXe),e(_f,LXe),e(_f,H$),e(H$,xXe),e(_f,$Xe),e(A,kXe),e(A,bf),e(bf,Fee),e(Fee,SXe),e(bf,RXe),e(bf,U$),e(U$,BXe),e(bf,PXe),e(A,IXe),e(A,Ff),e(Ff,vee),e(vee,qXe),e(Ff,NXe),e(Ff,J$),e(J$,jXe),e(Ff,DXe),e(A,GXe),e(A,vf),e(vf,Tee),e(Tee,OXe),e(vf,VXe),e(vf,Y$),e(Y$,XXe),e(vf,zXe),e(A,QXe),e(A,Tf),e(Tf,Mee),e(Mee,WXe),e(Tf,HXe),e(Tf,K$),e(K$,UXe),e(Tf,JXe),e(A,YXe),e(A,Mf),e(Mf,Eee),e(Eee,KXe),e(Mf,ZXe),e(Mf,Z$),e(Z$,eze),e(Mf,oze),e(A,rze),e(A,Ef),e(Ef,Cee),e(Cee,tze),e(Ef,aze),e(Ef,ek),e(ek,nze),e(Ef,sze),e(A,lze),e(A,Cf),e(Cf,wee),e(wee,ize),e(Cf,dze),e(Cf,ok),e(ok,cze),e(Cf,mze),e(A,fze),e(A,wf),e(wf,Aee),e(Aee,gze),e(wf,hze),e(wf,rk),e(rk,uze),e(wf,pze),e(A,_ze),e(A,Af),e(Af,yee),e(yee,bze),e(Af,Fze),e(Af,tk),e(tk,vze),e(Af,Tze),e(A,Mze),e(A,yf),e(yf,Lee),e(Lee,Eze),e(yf,Cze),e(yf,ak),e(ak,wze),e(yf,Aze),e(A,yze),e(A,Lf),e(Lf,xee),e(xee,Lze),e(Lf,xze),e(Lf,nk),e(nk,$ze),e(Lf,kze),e(A,Sze),e(A,xf),e(xf,$ee),e($ee,Rze),e(xf,Bze),e(xf,sk),e(sk,Pze),e(xf,Ize),e(A,qze),e(A,$f),e($f,kee),e(kee,Nze),e($f,jze),e($f,lk),e(lk,Dze),e($f,Gze),e(A,Oze),e(A,kf),e(kf,See),e(See,Vze),e(kf,Xze),e(kf,ik),e(ik,zze),e(kf,Qze),e(A,Wze),e(A,Sf),e(Sf,Ree),e(Ree,Hze),e(Sf,Uze),e(Sf,dk),e(dk,Jze),e(Sf,Yze),e(A,Kze),e(A,Rf),e(Rf,Bee),e(Bee,Zze),e(Rf,eQe),e(Rf,ck),e(ck,oQe),e(Rf,rQe),e(A,tQe),e(A,Bf),e(Bf,Pee),e(Pee,aQe),e(Bf,nQe),e(Bf,mk),e(mk,sQe),e(Bf,lQe),e(A,iQe),e(A,Pf),e(Pf,Iee),e(Iee,dQe),e(Pf,cQe),e(Pf,fk),e(fk,mQe),e(Pf,fQe),e(A,gQe),e(A,If),e(If,qee),e(qee,hQe),e(If,uQe),e(If,gk),e(gk,pQe),e(If,_Qe),e(A,bQe),e(A,qf),e(qf,Nee),e(Nee,FQe),e(qf,vQe),e(qf,hk),e(hk,TQe),e(qf,MQe),e(A,EQe),e(A,Nf),e(Nf,jee),e(jee,CQe),e(Nf,wQe),e(Nf,uk),e(uk,AQe),e(Nf,yQe),e(A,LQe),e(A,jf),e(jf,Dee),e(Dee,xQe),e(jf,$Qe),e(jf,pk),e(pk,kQe),e(jf,SQe),e(A,RQe),e(A,Df),e(Df,Gee),e(Gee,BQe),e(Df,PQe),e(Df,_k),e(_k,IQe),e(Df,qQe),e(A,NQe),e(A,Gf),e(Gf,Oee),e(Oee,jQe),e(Gf,DQe),e(Gf,bk),e(bk,GQe),e(Gf,OQe),e(A,VQe),e(A,Of),e(Of,Vee),e(Vee,XQe),e(Of,zQe),e(Of,Fk),e(Fk,QQe),e(Of,WQe),e(A,HQe),e(A,Vf),e(Vf,Xee),e(Xee,UQe),e(Vf,JQe),e(Vf,vk),e(vk,YQe),e(Vf,KQe),e(A,ZQe),e(A,Xf),e(Xf,zee),e(zee,eWe),e(Xf,oWe),e(Xf,Tk),e(Tk,rWe),e(Xf,tWe),e(A,aWe),e(A,zf),e(zf,Qee),e(Qee,nWe),e(zf,sWe),e(zf,Mk),e(Mk,lWe),e(zf,iWe),e(A,dWe),e(A,Qf),e(Qf,Wee),e(Wee,cWe),e(Qf,mWe),e(Qf,Ek),e(Ek,fWe),e(Qf,gWe),e(A,hWe),e(A,Wf),e(Wf,Hee),e(Hee,uWe),e(Wf,pWe),e(Wf,Ck),e(Ck,_We),e(Wf,bWe),e(A,FWe),e(A,Hf),e(Hf,Uee),e(Uee,vWe),e(Hf,TWe),e(Hf,wk),e(wk,MWe),e(Hf,EWe),e(A,CWe),e(A,Uf),e(Uf,Jee),e(Jee,wWe),e(Uf,AWe),e(Uf,Ak),e(Ak,yWe),e(Uf,LWe),e(A,xWe),e(A,Jf),e(Jf,Yee),e(Yee,$We),e(Jf,kWe),e(Jf,yk),e(yk,SWe),e(Jf,RWe),e(A,BWe),e(A,Yf),e(Yf,Kee),e(Kee,PWe),e(Yf,IWe),e(Yf,Lk),e(Lk,qWe),e(Yf,NWe),e(A,jWe),e(A,Kf),e(Kf,Zee),e(Zee,DWe),e(Kf,GWe),e(Kf,xk),e(xk,OWe),e(Kf,VWe),e(A,XWe),e(A,Zf),e(Zf,eoe),e(eoe,zWe),e(Zf,QWe),e(Zf,$k),e($k,WWe),e(Zf,HWe),e(A,UWe),e(A,eg),e(eg,ooe),e(ooe,JWe),e(eg,YWe),e(eg,kk),e(kk,KWe),e(eg,ZWe),e(A,eHe),e(A,og),e(og,roe),e(roe,oHe),e(og,rHe),e(og,Sk),e(Sk,tHe),e(og,aHe),e(A,nHe),e(A,rg),e(rg,toe),e(toe,sHe),e(rg,lHe),e(rg,Rk),e(Rk,iHe),e(rg,dHe),e(A,cHe),e(A,tg),e(tg,aoe),e(aoe,mHe),e(tg,fHe),e(tg,Bk),e(Bk,gHe),e(tg,hHe),e(Mr,uHe),M(ag,Mr,null),e(Co,pHe),e(Co,ng),M(L6,ng,null),e(ng,_He),e(ng,noe),e(noe,bHe),b(m,fBe,_),b(m,mi,_),e(mi,sg),e(sg,soe),M(x6,soe,null),e(mi,FHe),e(mi,loe),e(loe,vHe),b(m,gBe,_),b(m,wo,_),M($6,wo,null),e(wo,THe),e(wo,k6),e(k6,MHe),e(k6,Pk),e(Pk,EHe),e(k6,CHe),e(wo,wHe),e(wo,S6),e(S6,AHe),e(S6,ioe),e(ioe,yHe),e(S6,LHe),e(wo,xHe),e(wo,Er),M(R6,Er,null),e(Er,$He),e(Er,doe),e(doe,kHe),e(Er,SHe),e(Er,Ta),e(Ta,RHe),e(Ta,coe),e(coe,BHe),e(Ta,PHe),e(Ta,moe),e(moe,IHe),e(Ta,qHe),e(Ta,foe),e(foe,NHe),e(Ta,jHe),e(Er,DHe),e(Er,k),e(k,yn),e(yn,goe),e(goe,GHe),e(yn,OHe),e(yn,Ik),e(Ik,VHe),e(yn,XHe),e(yn,qk),e(qk,zHe),e(yn,QHe),e(k,WHe),e(k,Ln),e(Ln,hoe),e(hoe,HHe),e(Ln,UHe),e(Ln,Nk),e(Nk,JHe),e(Ln,YHe),e(Ln,jk),e(jk,KHe),e(Ln,ZHe),e(k,eUe),e(k,xn),e(xn,uoe),e(uoe,oUe),e(xn,rUe),e(xn,Dk),e(Dk,tUe),e(xn,aUe),e(xn,Gk),e(Gk,nUe),e(xn,sUe),e(k,lUe),e(k,lg),e(lg,poe),e(poe,iUe),e(lg,dUe),e(lg,Ok),e(Ok,cUe),e(lg,mUe),e(k,fUe),e(k,$n),e($n,_oe),e(_oe,gUe),e($n,hUe),e($n,Vk),e(Vk,uUe),e($n,pUe),e($n,Xk),e(Xk,_Ue),e($n,bUe),e(k,FUe),e(k,ig),e(ig,boe),e(boe,vUe),e(ig,TUe),e(ig,zk),e(zk,MUe),e(ig,EUe),e(k,CUe),e(k,dg),e(dg,Foe),e(Foe,wUe),e(dg,AUe),e(dg,Qk),e(Qk,yUe),e(dg,LUe),e(k,xUe),e(k,cg),e(cg,voe),e(voe,$Ue),e(cg,kUe),e(cg,Wk),e(Wk,SUe),e(cg,RUe),e(k,BUe),e(k,kn),e(kn,Toe),e(Toe,PUe),e(kn,IUe),e(kn,Hk),e(Hk,qUe),e(kn,NUe),e(kn,Uk),e(Uk,jUe),e(kn,DUe),e(k,GUe),e(k,Sn),e(Sn,Moe),e(Moe,OUe),e(Sn,VUe),e(Sn,Jk),e(Jk,XUe),e(Sn,zUe),e(Sn,Yk),e(Yk,QUe),e(Sn,WUe),e(k,HUe),e(k,Rn),e(Rn,Eoe),e(Eoe,UUe),e(Rn,JUe),e(Rn,Kk),e(Kk,YUe),e(Rn,KUe),e(Rn,Zk),e(Zk,ZUe),e(Rn,eJe),e(k,oJe),e(k,mg),e(mg,Coe),e(Coe,rJe),e(mg,tJe),e(mg,eS),e(eS,aJe),e(mg,nJe),e(k,sJe),e(k,fg),e(fg,woe),e(woe,lJe),e(fg,iJe),e(fg,oS),e(oS,dJe),e(fg,cJe),e(k,mJe),e(k,Bn),e(Bn,Aoe),e(Aoe,fJe),e(Bn,gJe),e(Bn,rS),e(rS,hJe),e(Bn,uJe),e(Bn,tS),e(tS,pJe),e(Bn,_Je),e(k,bJe),e(k,gg),e(gg,yoe),e(yoe,FJe),e(gg,vJe),e(gg,aS),e(aS,TJe),e(gg,MJe),e(k,EJe),e(k,Pn),e(Pn,Loe),e(Loe,CJe),e(Pn,wJe),e(Pn,nS),e(nS,AJe),e(Pn,yJe),e(Pn,sS),e(sS,LJe),e(Pn,xJe),e(k,$Je),e(k,In),e(In,xoe),e(xoe,kJe),e(In,SJe),e(In,lS),e(lS,RJe),e(In,BJe),e(In,iS),e(iS,PJe),e(In,IJe),e(k,qJe),e(k,qn),e(qn,$oe),e($oe,NJe),e(qn,jJe),e(qn,dS),e(dS,DJe),e(qn,GJe),e(qn,cS),e(cS,OJe),e(qn,VJe),e(k,XJe),e(k,hg),e(hg,koe),e(koe,zJe),e(hg,QJe),e(hg,mS),e(mS,WJe),e(hg,HJe),e(k,UJe),e(k,Nn),e(Nn,Soe),e(Soe,JJe),e(Nn,YJe),e(Nn,fS),e(fS,KJe),e(Nn,ZJe),e(Nn,gS),e(gS,eYe),e(Nn,oYe),e(k,rYe),e(k,jn),e(jn,Roe),e(Roe,tYe),e(jn,aYe),e(jn,hS),e(hS,nYe),e(jn,sYe),e(jn,uS),e(uS,lYe),e(jn,iYe),e(k,dYe),e(k,Dn),e(Dn,Boe),e(Boe,cYe),e(Dn,mYe),e(Dn,pS),e(pS,fYe),e(Dn,gYe),e(Dn,_S),e(_S,hYe),e(Dn,uYe),e(k,pYe),e(k,Gn),e(Gn,Poe),e(Poe,_Ye),e(Gn,bYe),e(Gn,bS),e(bS,FYe),e(Gn,vYe),e(Gn,FS),e(FS,TYe),e(Gn,MYe),e(k,EYe),e(k,On),e(On,Ioe),e(Ioe,CYe),e(On,wYe),e(On,vS),e(vS,AYe),e(On,yYe),e(On,TS),e(TS,LYe),e(On,xYe),e(k,$Ye),e(k,Vn),e(Vn,qoe),e(qoe,kYe),e(Vn,SYe),e(Vn,MS),e(MS,RYe),e(Vn,BYe),e(Vn,ES),e(ES,PYe),e(Vn,IYe),e(k,qYe),e(k,ug),e(ug,Noe),e(Noe,NYe),e(ug,jYe),e(ug,CS),e(CS,DYe),e(ug,GYe),e(k,OYe),e(k,Xn),e(Xn,joe),e(joe,VYe),e(Xn,XYe),e(Xn,wS),e(wS,zYe),e(Xn,QYe),e(Xn,AS),e(AS,WYe),e(Xn,HYe),e(k,UYe),e(k,pg),e(pg,Doe),e(Doe,JYe),e(pg,YYe),e(pg,yS),e(yS,KYe),e(pg,ZYe),e(k,eKe),e(k,zn),e(zn,Goe),e(Goe,oKe),e(zn,rKe),e(zn,LS),e(LS,tKe),e(zn,aKe),e(zn,xS),e(xS,nKe),e(zn,sKe),e(k,lKe),e(k,Qn),e(Qn,Ooe),e(Ooe,iKe),e(Qn,dKe),e(Qn,$S),e($S,cKe),e(Qn,mKe),e(Qn,kS),e(kS,fKe),e(Qn,gKe),e(k,hKe),e(k,Wn),e(Wn,Voe),e(Voe,uKe),e(Wn,pKe),e(Wn,SS),e(SS,_Ke),e(Wn,bKe),e(Wn,RS),e(RS,FKe),e(Wn,vKe),e(k,TKe),e(k,Hn),e(Hn,Xoe),e(Xoe,MKe),e(Hn,EKe),e(Hn,BS),e(BS,CKe),e(Hn,wKe),e(Hn,PS),e(PS,AKe),e(Hn,yKe),e(k,LKe),e(k,Un),e(Un,zoe),e(zoe,xKe),e(Un,$Ke),e(Un,IS),e(IS,kKe),e(Un,SKe),e(Un,qS),e(qS,RKe),e(Un,BKe),e(k,PKe),e(k,_g),e(_g,Qoe),e(Qoe,IKe),e(_g,qKe),e(_g,NS),e(NS,NKe),e(_g,jKe),e(k,DKe),e(k,Jn),e(Jn,Woe),e(Woe,GKe),e(Jn,OKe),e(Jn,jS),e(jS,VKe),e(Jn,XKe),e(Jn,DS),e(DS,zKe),e(Jn,QKe),e(k,WKe),e(k,Yn),e(Yn,Hoe),e(Hoe,HKe),e(Yn,UKe),e(Yn,GS),e(GS,JKe),e(Yn,YKe),e(Yn,OS),e(OS,KKe),e(Yn,ZKe),e(k,eZe),e(k,Kn),e(Kn,Uoe),e(Uoe,oZe),e(Kn,rZe),e(Kn,VS),e(VS,tZe),e(Kn,aZe),e(Kn,XS),e(XS,nZe),e(Kn,sZe),e(k,lZe),e(k,Zn),e(Zn,Joe),e(Joe,iZe),e(Zn,dZe),e(Zn,zS),e(zS,cZe),e(Zn,mZe),e(Zn,QS),e(QS,fZe),e(Zn,gZe),e(k,hZe),e(k,es),e(es,Yoe),e(Yoe,uZe),e(es,pZe),e(es,WS),e(WS,_Ze),e(es,bZe),e(es,HS),e(HS,FZe),e(es,vZe),e(k,TZe),e(k,os),e(os,Koe),e(Koe,MZe),e(os,EZe),e(os,US),e(US,CZe),e(os,wZe),e(os,JS),e(JS,AZe),e(os,yZe),e(k,LZe),e(k,bg),e(bg,Zoe),e(Zoe,xZe),e(bg,$Ze),e(bg,YS),e(YS,kZe),e(bg,SZe),e(k,RZe),e(k,rs),e(rs,ere),e(ere,BZe),e(rs,PZe),e(rs,KS),e(KS,IZe),e(rs,qZe),e(rs,ZS),e(ZS,NZe),e(rs,jZe),e(k,DZe),e(k,Fg),e(Fg,ore),e(ore,GZe),e(Fg,OZe),e(Fg,eR),e(eR,VZe),e(Fg,XZe),e(k,zZe),e(k,vg),e(vg,rre),e(rre,QZe),e(vg,WZe),e(vg,oR),e(oR,HZe),e(vg,UZe),e(k,JZe),e(k,ts),e(ts,tre),e(tre,YZe),e(ts,KZe),e(ts,rR),e(rR,ZZe),e(ts,eeo),e(ts,tR),e(tR,oeo),e(ts,reo),e(k,teo),e(k,as),e(as,are),e(are,aeo),e(as,neo),e(as,aR),e(aR,seo),e(as,leo),e(as,nR),e(nR,ieo),e(as,deo),e(k,ceo),e(k,ns),e(ns,nre),e(nre,meo),e(ns,feo),e(ns,sR),e(sR,geo),e(ns,heo),e(ns,lR),e(lR,ueo),e(ns,peo),e(k,_eo),e(k,Tg),e(Tg,sre),e(sre,beo),e(Tg,Feo),e(Tg,iR),e(iR,veo),e(Tg,Teo),e(k,Meo),e(k,ss),e(ss,lre),e(lre,Eeo),e(ss,Ceo),e(ss,dR),e(dR,weo),e(ss,Aeo),e(ss,cR),e(cR,yeo),e(ss,Leo),e(k,xeo),e(k,ls),e(ls,ire),e(ire,$eo),e(ls,keo),e(ls,mR),e(mR,Seo),e(ls,Reo),e(ls,fR),e(fR,Beo),e(ls,Peo),e(k,Ieo),e(k,is),e(is,dre),e(dre,qeo),e(is,Neo),e(is,gR),e(gR,jeo),e(is,Deo),e(is,hR),e(hR,Geo),e(is,Oeo),e(k,Veo),e(k,ds),e(ds,cre),e(cre,Xeo),e(ds,zeo),e(ds,uR),e(uR,Qeo),e(ds,Weo),e(ds,pR),e(pR,Heo),e(ds,Ueo),e(k,Jeo),e(k,cs),e(cs,mre),e(mre,Yeo),e(cs,Keo),e(cs,_R),e(_R,Zeo),e(cs,eoo),e(cs,bR),e(bR,ooo),e(cs,roo),e(k,too),e(k,ms),e(ms,fre),e(fre,aoo),e(ms,noo),e(ms,FR),e(FR,soo),e(ms,loo),e(ms,vR),e(vR,ioo),e(ms,doo),e(k,coo),e(k,Mg),e(Mg,gre),e(gre,moo),e(Mg,foo),e(Mg,TR),e(TR,goo),e(Mg,hoo),e(k,uoo),e(k,Eg),e(Eg,hre),e(hre,poo),e(Eg,_oo),e(Eg,MR),e(MR,boo),e(Eg,Foo),e(k,voo),e(k,Cg),e(Cg,ure),e(ure,Too),e(Cg,Moo),e(Cg,ER),e(ER,Eoo),e(Cg,Coo),e(k,woo),e(k,wg),e(wg,pre),e(pre,Aoo),e(wg,yoo),e(wg,CR),e(CR,Loo),e(wg,xoo),e(k,$oo),e(k,fs),e(fs,_re),e(_re,koo),e(fs,Soo),e(fs,wR),e(wR,Roo),e(fs,Boo),e(fs,AR),e(AR,Poo),e(fs,Ioo),e(k,qoo),e(k,Ag),e(Ag,bre),e(bre,Noo),e(Ag,joo),e(Ag,yR),e(yR,Doo),e(Ag,Goo),e(k,Ooo),e(k,gs),e(gs,Fre),e(Fre,Voo),e(gs,Xoo),e(gs,LR),e(LR,zoo),e(gs,Qoo),e(gs,xR),e(xR,Woo),e(gs,Hoo),e(k,Uoo),e(k,hs),e(hs,vre),e(vre,Joo),e(hs,Yoo),e(hs,$R),e($R,Koo),e(hs,Zoo),e(hs,kR),e(kR,ero),e(hs,oro),e(k,rro),e(k,us),e(us,Tre),e(Tre,tro),e(us,aro),e(us,SR),e(SR,nro),e(us,sro),e(us,RR),e(RR,lro),e(us,iro),e(k,dro),e(k,ps),e(ps,Mre),e(Mre,cro),e(ps,mro),e(ps,BR),e(BR,fro),e(ps,gro),e(ps,PR),e(PR,hro),e(ps,uro),e(k,pro),e(k,_s),e(_s,Ere),e(Ere,_ro),e(_s,bro),e(_s,IR),e(IR,Fro),e(_s,vro),e(_s,qR),e(qR,Tro),e(_s,Mro),e(k,Ero),e(k,bs),e(bs,Cre),e(Cre,Cro),e(bs,wro),e(bs,NR),e(NR,Aro),e(bs,yro),e(bs,jR),e(jR,Lro),e(bs,xro),e(k,$ro),e(k,yg),e(yg,wre),e(wre,kro),e(yg,Sro),e(yg,DR),e(DR,Rro),e(yg,Bro),e(k,Pro),e(k,Lg),e(Lg,Are),e(Are,Iro),e(Lg,qro),e(Lg,GR),e(GR,Nro),e(Lg,jro),e(k,Dro),e(k,Fs),e(Fs,yre),e(yre,Gro),e(Fs,Oro),e(Fs,OR),e(OR,Vro),e(Fs,Xro),e(Fs,VR),e(VR,zro),e(Fs,Qro),e(k,Wro),e(k,vs),e(vs,Lre),e(Lre,Hro),e(vs,Uro),e(vs,XR),e(XR,Jro),e(vs,Yro),e(vs,zR),e(zR,Kro),e(vs,Zro),e(k,eto),e(k,Ts),e(Ts,xre),e(xre,oto),e(Ts,rto),e(Ts,QR),e(QR,tto),e(Ts,ato),e(Ts,WR),e(WR,nto),e(Ts,sto),e(k,lto),e(k,xg),e(xg,$re),e($re,ito),e(xg,dto),e(xg,HR),e(HR,cto),e(xg,mto),e(k,fto),e(k,$g),e($g,kre),e(kre,gto),e($g,hto),e($g,UR),e(UR,uto),e($g,pto),e(k,_to),e(k,kg),e(kg,Sre),e(Sre,bto),e(kg,Fto),e(kg,JR),e(JR,vto),e(kg,Tto),e(k,Mto),e(k,Ms),e(Ms,Rre),e(Rre,Eto),e(Ms,Cto),e(Ms,YR),e(YR,wto),e(Ms,Ato),e(Ms,KR),e(KR,yto),e(Ms,Lto),e(k,xto),e(k,Sg),e(Sg,Bre),e(Bre,$to),e(Sg,kto),e(Sg,ZR),e(ZR,Sto),e(Sg,Rto),e(k,Bto),e(k,Rg),e(Rg,Pre),e(Pre,Pto),e(Rg,Ito),e(Rg,eB),e(eB,qto),e(Rg,Nto),e(k,jto),e(k,Es),e(Es,Ire),e(Ire,Dto),e(Es,Gto),e(Es,oB),e(oB,Oto),e(Es,Vto),e(Es,rB),e(rB,Xto),e(Es,zto),e(k,Qto),e(k,Bg),e(Bg,qre),e(qre,Wto),e(Bg,Hto),e(Bg,tB),e(tB,Uto),e(Bg,Jto),e(k,Yto),e(k,Pg),e(Pg,Nre),e(Nre,Kto),e(Pg,Zto),e(Pg,aB),e(aB,eao),e(Pg,oao),e(k,rao),e(k,Cs),e(Cs,jre),e(jre,tao),e(Cs,aao),e(Cs,nB),e(nB,nao),e(Cs,sao),e(Cs,sB),e(sB,lao),e(Cs,iao),e(k,dao),e(k,ws),e(ws,Dre),e(Dre,cao),e(ws,mao),e(ws,lB),e(lB,fao),e(ws,gao),e(ws,iB),e(iB,hao),e(ws,uao),e(k,pao),e(k,As),e(As,Gre),e(Gre,_ao),e(As,bao),e(As,dB),e(dB,Fao),e(As,vao),e(As,cB),e(cB,Tao),e(As,Mao),e(k,Eao),e(k,ys),e(ys,Ore),e(Ore,Cao),e(ys,wao),e(ys,mB),e(mB,Aao),e(ys,yao),e(ys,fB),e(fB,Lao),e(ys,xao),e(Er,$ao),M(Ig,Er,null),e(wo,kao),e(wo,qg),M(B6,qg,null),e(qg,Sao),e(qg,Vre),e(Vre,Rao),b(m,hBe,_),b(m,fi,_),e(fi,Ng),e(Ng,Xre),M(P6,Xre,null),e(fi,Bao),e(fi,zre),e(zre,Pao),b(m,uBe,_),b(m,Ao,_),M(I6,Ao,null),e(Ao,Iao),e(Ao,q6),e(q6,qao),e(q6,gB),e(gB,Nao),e(q6,jao),e(Ao,Dao),e(Ao,N6),e(N6,Gao),e(N6,Qre),e(Qre,Oao),e(N6,Vao),e(Ao,Xao),e(Ao,Qe),M(j6,Qe,null),e(Qe,zao),e(Qe,Wre),e(Wre,Qao),e(Qe,Wao),e(Qe,Ma),e(Ma,Hao),e(Ma,Hre),e(Hre,Uao),e(Ma,Jao),e(Ma,Ure),e(Ure,Yao),e(Ma,Kao),e(Ma,Jre),e(Jre,Zao),e(Ma,eno),e(Qe,ono),e(Qe,te),e(te,jg),e(jg,Yre),e(Yre,rno),e(jg,tno),e(jg,hB),e(hB,ano),e(jg,nno),e(te,sno),e(te,Dg),e(Dg,Kre),e(Kre,lno),e(Dg,ino),e(Dg,uB),e(uB,dno),e(Dg,cno),e(te,mno),e(te,Gg),e(Gg,Zre),e(Zre,fno),e(Gg,gno),e(Gg,pB),e(pB,hno),e(Gg,uno),e(te,pno),e(te,Og),e(Og,ete),e(ete,_no),e(Og,bno),e(Og,_B),e(_B,Fno),e(Og,vno),e(te,Tno),e(te,Vg),e(Vg,ote),e(ote,Mno),e(Vg,Eno),e(Vg,bB),e(bB,Cno),e(Vg,wno),e(te,Ano),e(te,Xg),e(Xg,rte),e(rte,yno),e(Xg,Lno),e(Xg,FB),e(FB,xno),e(Xg,$no),e(te,kno),e(te,zg),e(zg,tte),e(tte,Sno),e(zg,Rno),e(zg,vB),e(vB,Bno),e(zg,Pno),e(te,Ino),e(te,Qg),e(Qg,ate),e(ate,qno),e(Qg,Nno),e(Qg,TB),e(TB,jno),e(Qg,Dno),e(te,Gno),e(te,Wg),e(Wg,nte),e(nte,Ono),e(Wg,Vno),e(Wg,MB),e(MB,Xno),e(Wg,zno),e(te,Qno),e(te,Hg),e(Hg,ste),e(ste,Wno),e(Hg,Hno),e(Hg,EB),e(EB,Uno),e(Hg,Jno),e(te,Yno),e(te,Ug),e(Ug,lte),e(lte,Kno),e(Ug,Zno),e(Ug,CB),e(CB,eso),e(Ug,oso),e(te,rso),e(te,Jg),e(Jg,ite),e(ite,tso),e(Jg,aso),e(Jg,wB),e(wB,nso),e(Jg,sso),e(te,lso),e(te,Yg),e(Yg,dte),e(dte,iso),e(Yg,dso),e(Yg,AB),e(AB,cso),e(Yg,mso),e(te,fso),e(te,Kg),e(Kg,cte),e(cte,gso),e(Kg,hso),e(Kg,yB),e(yB,uso),e(Kg,pso),e(te,_so),e(te,Zg),e(Zg,mte),e(mte,bso),e(Zg,Fso),e(Zg,LB),e(LB,vso),e(Zg,Tso),e(te,Mso),e(te,eh),e(eh,fte),e(fte,Eso),e(eh,Cso),e(eh,xB),e(xB,wso),e(eh,Aso),e(te,yso),e(te,oh),e(oh,gte),e(gte,Lso),e(oh,xso),e(oh,$B),e($B,$so),e(oh,kso),e(te,Sso),e(te,rh),e(rh,hte),e(hte,Rso),e(rh,Bso),e(rh,kB),e(kB,Pso),e(rh,Iso),e(te,qso),e(te,th),e(th,ute),e(ute,Nso),e(th,jso),e(th,SB),e(SB,Dso),e(th,Gso),e(te,Oso),e(te,ah),e(ah,pte),e(pte,Vso),e(ah,Xso),e(ah,RB),e(RB,zso),e(ah,Qso),e(te,Wso),e(te,nh),e(nh,_te),e(_te,Hso),e(nh,Uso),e(nh,BB),e(BB,Jso),e(nh,Yso),e(te,Kso),e(te,sh),e(sh,bte),e(bte,Zso),e(sh,elo),e(sh,PB),e(PB,olo),e(sh,rlo),e(te,tlo),e(te,lh),e(lh,Fte),e(Fte,alo),e(lh,nlo),e(lh,IB),e(IB,slo),e(lh,llo),e(te,ilo),e(te,ih),e(ih,vte),e(vte,dlo),e(ih,clo),e(ih,qB),e(qB,mlo),e(ih,flo),e(Qe,glo),M(dh,Qe,null),e(Qe,hlo),M(ch,Qe,null),e(Ao,ulo),e(Ao,mh),M(D6,mh,null),e(mh,plo),e(mh,Tte),e(Tte,_lo),b(m,pBe,_),b(m,gi,_),e(gi,fh),e(fh,Mte),M(G6,Mte,null),e(gi,blo),e(gi,Ete),e(Ete,Flo),b(m,_Be,_),b(m,yo,_),M(O6,yo,null),e(yo,vlo),e(yo,V6),e(V6,Tlo),e(V6,NB),e(NB,Mlo),e(V6,Elo),e(yo,Clo),e(yo,X6),e(X6,wlo),e(X6,Cte),e(Cte,Alo),e(X6,ylo),e(yo,Llo),e(yo,We),M(z6,We,null),e(We,xlo),e(We,wte),e(wte,$lo),e(We,klo),e(We,hi),e(hi,Slo),e(hi,Ate),e(Ate,Rlo),e(hi,Blo),e(hi,yte),e(yte,Plo),e(hi,Ilo),e(We,qlo),e(We,be),e(be,gh),e(gh,Lte),e(Lte,Nlo),e(gh,jlo),e(gh,jB),e(jB,Dlo),e(gh,Glo),e(be,Olo),e(be,hh),e(hh,xte),e(xte,Vlo),e(hh,Xlo),e(hh,DB),e(DB,zlo),e(hh,Qlo),e(be,Wlo),e(be,uh),e(uh,$te),e($te,Hlo),e(uh,Ulo),e(uh,GB),e(GB,Jlo),e(uh,Ylo),e(be,Klo),e(be,ph),e(ph,kte),e(kte,Zlo),e(ph,eio),e(ph,OB),e(OB,oio),e(ph,rio),e(be,tio),e(be,_h),e(_h,Ste),e(Ste,aio),e(_h,nio),e(_h,VB),e(VB,sio),e(_h,lio),e(be,iio),e(be,bh),e(bh,Rte),e(Rte,dio),e(bh,cio),e(bh,XB),e(XB,mio),e(bh,fio),e(be,gio),e(be,Fh),e(Fh,Bte),e(Bte,hio),e(Fh,uio),e(Fh,zB),e(zB,pio),e(Fh,_io),e(be,bio),e(be,vh),e(vh,Pte),e(Pte,Fio),e(vh,vio),e(vh,QB),e(QB,Tio),e(vh,Mio),e(be,Eio),e(be,Th),e(Th,Ite),e(Ite,Cio),e(Th,wio),e(Th,WB),e(WB,Aio),e(Th,yio),e(be,Lio),e(be,Mh),e(Mh,qte),e(qte,xio),e(Mh,$io),e(Mh,HB),e(HB,kio),e(Mh,Sio),e(be,Rio),e(be,Eh),e(Eh,Nte),e(Nte,Bio),e(Eh,Pio),e(Eh,UB),e(UB,Iio),e(Eh,qio),e(be,Nio),e(be,Ch),e(Ch,jte),e(jte,jio),e(Ch,Dio),e(Ch,JB),e(JB,Gio),e(Ch,Oio),e(be,Vio),e(be,wh),e(wh,Dte),e(Dte,Xio),e(wh,zio),e(wh,YB),e(YB,Qio),e(wh,Wio),e(be,Hio),e(be,Ah),e(Ah,Gte),e(Gte,Uio),e(Ah,Jio),e(Ah,KB),e(KB,Yio),e(Ah,Kio),e(We,Zio),M(yh,We,null),e(We,edo),M(Lh,We,null),e(yo,odo),e(yo,xh),M(Q6,xh,null),e(xh,rdo),e(xh,Ote),e(Ote,tdo),b(m,bBe,_),b(m,ui,_),e(ui,$h),e($h,Vte),M(W6,Vte,null),e(ui,ado),e(ui,Xte),e(Xte,ndo),b(m,FBe,_),b(m,Lo,_),M(H6,Lo,null),e(Lo,sdo),e(Lo,pi),e(pi,ldo),e(pi,ZB),e(ZB,ido),e(pi,ddo),e(pi,eP),e(eP,cdo),e(pi,mdo),e(Lo,fdo),e(Lo,U6),e(U6,gdo),e(U6,zte),e(zte,hdo),e(U6,udo),e(Lo,pdo),e(Lo,Zr),M(J6,Zr,null),e(Zr,_do),e(Zr,Qte),e(Qte,bdo),e(Zr,Fdo),e(Zr,_i),e(_i,vdo),e(_i,Wte),e(Wte,Tdo),e(_i,Mdo),e(_i,oP),e(oP,Edo),e(_i,Cdo),e(Zr,wdo),M(kh,Zr,null),e(Lo,Ado),e(Lo,He),M(Y6,He,null),e(He,ydo),e(He,Hte),e(Hte,Ldo),e(He,xdo),e(He,Ea),e(Ea,$do),e(Ea,Ute),e(Ute,kdo),e(Ea,Sdo),e(Ea,Jte),e(Jte,Rdo),e(Ea,Bdo),e(Ea,Yte),e(Yte,Pdo),e(Ea,Ido),e(He,qdo),e(He,x),e(x,Sh),e(Sh,Kte),e(Kte,Ndo),e(Sh,jdo),e(Sh,rP),e(rP,Ddo),e(Sh,Gdo),e(x,Odo),e(x,Rh),e(Rh,Zte),e(Zte,Vdo),e(Rh,Xdo),e(Rh,tP),e(tP,zdo),e(Rh,Qdo),e(x,Wdo),e(x,Bh),e(Bh,eae),e(eae,Hdo),e(Bh,Udo),e(Bh,aP),e(aP,Jdo),e(Bh,Ydo),e(x,Kdo),e(x,Ph),e(Ph,oae),e(oae,Zdo),e(Ph,eco),e(Ph,nP),e(nP,oco),e(Ph,rco),e(x,tco),e(x,Ih),e(Ih,rae),e(rae,aco),e(Ih,nco),e(Ih,sP),e(sP,sco),e(Ih,lco),e(x,ico),e(x,qh),e(qh,tae),e(tae,dco),e(qh,cco),e(qh,lP),e(lP,mco),e(qh,fco),e(x,gco),e(x,Nh),e(Nh,aae),e(aae,hco),e(Nh,uco),e(Nh,iP),e(iP,pco),e(Nh,_co),e(x,bco),e(x,jh),e(jh,nae),e(nae,Fco),e(jh,vco),e(jh,dP),e(dP,Tco),e(jh,Mco),e(x,Eco),e(x,Dh),e(Dh,sae),e(sae,Cco),e(Dh,wco),e(Dh,cP),e(cP,Aco),e(Dh,yco),e(x,Lco),e(x,Gh),e(Gh,lae),e(lae,xco),e(Gh,$co),e(Gh,mP),e(mP,kco),e(Gh,Sco),e(x,Rco),e(x,Oh),e(Oh,iae),e(iae,Bco),e(Oh,Pco),e(Oh,fP),e(fP,Ico),e(Oh,qco),e(x,Nco),e(x,Vh),e(Vh,dae),e(dae,jco),e(Vh,Dco),e(Vh,gP),e(gP,Gco),e(Vh,Oco),e(x,Vco),e(x,Xh),e(Xh,cae),e(cae,Xco),e(Xh,zco),e(Xh,hP),e(hP,Qco),e(Xh,Wco),e(x,Hco),e(x,zh),e(zh,mae),e(mae,Uco),e(zh,Jco),e(zh,uP),e(uP,Yco),e(zh,Kco),e(x,Zco),e(x,Qh),e(Qh,fae),e(fae,emo),e(Qh,omo),e(Qh,pP),e(pP,rmo),e(Qh,tmo),e(x,amo),e(x,Wh),e(Wh,gae),e(gae,nmo),e(Wh,smo),e(Wh,_P),e(_P,lmo),e(Wh,imo),e(x,dmo),e(x,Hh),e(Hh,hae),e(hae,cmo),e(Hh,mmo),e(Hh,bP),e(bP,fmo),e(Hh,gmo),e(x,hmo),e(x,Uh),e(Uh,uae),e(uae,umo),e(Uh,pmo),e(Uh,FP),e(FP,_mo),e(Uh,bmo),e(x,Fmo),e(x,Jh),e(Jh,pae),e(pae,vmo),e(Jh,Tmo),e(Jh,vP),e(vP,Mmo),e(Jh,Emo),e(x,Cmo),e(x,Yh),e(Yh,_ae),e(_ae,wmo),e(Yh,Amo),e(Yh,TP),e(TP,ymo),e(Yh,Lmo),e(x,xmo),e(x,Kh),e(Kh,bae),e(bae,$mo),e(Kh,kmo),e(Kh,MP),e(MP,Smo),e(Kh,Rmo),e(x,Bmo),e(x,Zh),e(Zh,Fae),e(Fae,Pmo),e(Zh,Imo),e(Zh,EP),e(EP,qmo),e(Zh,Nmo),e(x,jmo),e(x,eu),e(eu,vae),e(vae,Dmo),e(eu,Gmo),e(eu,CP),e(CP,Omo),e(eu,Vmo),e(x,Xmo),e(x,ou),e(ou,Tae),e(Tae,zmo),e(ou,Qmo),e(ou,wP),e(wP,Wmo),e(ou,Hmo),e(x,Umo),e(x,ru),e(ru,Mae),e(Mae,Jmo),e(ru,Ymo),e(ru,AP),e(AP,Kmo),e(ru,Zmo),e(x,efo),e(x,tu),e(tu,Eae),e(Eae,ofo),e(tu,rfo),e(tu,yP),e(yP,tfo),e(tu,afo),e(x,nfo),e(x,au),e(au,Cae),e(Cae,sfo),e(au,lfo),e(au,LP),e(LP,ifo),e(au,dfo),e(x,cfo),e(x,nu),e(nu,wae),e(wae,mfo),e(nu,ffo),e(nu,xP),e(xP,gfo),e(nu,hfo),e(x,ufo),e(x,su),e(su,Aae),e(Aae,pfo),e(su,_fo),e(su,$P),e($P,bfo),e(su,Ffo),e(x,vfo),e(x,lu),e(lu,yae),e(yae,Tfo),e(lu,Mfo),e(lu,kP),e(kP,Efo),e(lu,Cfo),e(x,wfo),e(x,Ls),e(Ls,Lae),e(Lae,Afo),e(Ls,yfo),e(Ls,SP),e(SP,Lfo),e(Ls,xfo),e(Ls,RP),e(RP,$fo),e(Ls,kfo),e(x,Sfo),e(x,iu),e(iu,xae),e(xae,Rfo),e(iu,Bfo),e(iu,BP),e(BP,Pfo),e(iu,Ifo),e(x,qfo),e(x,du),e(du,$ae),e($ae,Nfo),e(du,jfo),e(du,PP),e(PP,Dfo),e(du,Gfo),e(x,Ofo),e(x,cu),e(cu,kae),e(kae,Vfo),e(cu,Xfo),e(cu,IP),e(IP,zfo),e(cu,Qfo),e(x,Wfo),e(x,mu),e(mu,Sae),e(Sae,Hfo),e(mu,Ufo),e(mu,qP),e(qP,Jfo),e(mu,Yfo),e(x,Kfo),e(x,fu),e(fu,Rae),e(Rae,Zfo),e(fu,ego),e(fu,NP),e(NP,ogo),e(fu,rgo),e(x,tgo),e(x,gu),e(gu,Bae),e(Bae,ago),e(gu,ngo),e(gu,jP),e(jP,sgo),e(gu,lgo),e(x,igo),e(x,hu),e(hu,Pae),e(Pae,dgo),e(hu,cgo),e(hu,DP),e(DP,mgo),e(hu,fgo),e(x,ggo),e(x,uu),e(uu,Iae),e(Iae,hgo),e(uu,ugo),e(uu,GP),e(GP,pgo),e(uu,_go),e(x,bgo),e(x,pu),e(pu,qae),e(qae,Fgo),e(pu,vgo),e(pu,OP),e(OP,Tgo),e(pu,Mgo),e(x,Ego),e(x,_u),e(_u,Nae),e(Nae,Cgo),e(_u,wgo),e(_u,VP),e(VP,Ago),e(_u,ygo),e(x,Lgo),e(x,bu),e(bu,jae),e(jae,xgo),e(bu,$go),e(bu,XP),e(XP,kgo),e(bu,Sgo),e(x,Rgo),e(x,Fu),e(Fu,Dae),e(Dae,Bgo),e(Fu,Pgo),e(Fu,zP),e(zP,Igo),e(Fu,qgo),e(x,Ngo),e(x,vu),e(vu,Gae),e(Gae,jgo),e(vu,Dgo),e(vu,QP),e(QP,Ggo),e(vu,Ogo),e(x,Vgo),e(x,Tu),e(Tu,Oae),e(Oae,Xgo),e(Tu,zgo),e(Tu,WP),e(WP,Qgo),e(Tu,Wgo),e(x,Hgo),e(x,Mu),e(Mu,Vae),e(Vae,Ugo),e(Mu,Jgo),e(Mu,HP),e(HP,Ygo),e(Mu,Kgo),e(x,Zgo),e(x,Eu),e(Eu,Xae),e(Xae,eho),e(Eu,oho),e(Eu,UP),e(UP,rho),e(Eu,tho),e(x,aho),e(x,Cu),e(Cu,zae),e(zae,nho),e(Cu,sho),e(Cu,JP),e(JP,lho),e(Cu,iho),e(x,dho),e(x,wu),e(wu,Qae),e(Qae,cho),e(wu,mho),e(wu,YP),e(YP,fho),e(wu,gho),e(x,hho),e(x,Au),e(Au,Wae),e(Wae,uho),e(Au,pho),e(Au,KP),e(KP,_ho),e(Au,bho),e(x,Fho),e(x,yu),e(yu,Hae),e(Hae,vho),e(yu,Tho),e(yu,ZP),e(ZP,Mho),e(yu,Eho),e(x,Cho),e(x,Lu),e(Lu,Uae),e(Uae,who),e(Lu,Aho),e(Lu,eI),e(eI,yho),e(Lu,Lho),e(x,xho),e(x,xu),e(xu,Jae),e(Jae,$ho),e(xu,kho),e(xu,oI),e(oI,Sho),e(xu,Rho),e(x,Bho),e(x,$u),e($u,Yae),e(Yae,Pho),e($u,Iho),e($u,rI),e(rI,qho),e($u,Nho),e(x,jho),e(x,ku),e(ku,Kae),e(Kae,Dho),e(ku,Gho),e(ku,tI),e(tI,Oho),e(ku,Vho),e(x,Xho),e(x,Su),e(Su,Zae),e(Zae,zho),e(Su,Qho),e(Su,aI),e(aI,Who),e(Su,Hho),e(x,Uho),e(x,Ru),e(Ru,ene),e(ene,Jho),e(Ru,Yho),e(Ru,nI),e(nI,Kho),e(Ru,Zho),e(x,euo),e(x,Bu),e(Bu,one),e(one,ouo),e(Bu,ruo),e(Bu,sI),e(sI,tuo),e(Bu,auo),e(x,nuo),e(x,Pu),e(Pu,rne),e(rne,suo),e(Pu,luo),e(Pu,lI),e(lI,iuo),e(Pu,duo),e(x,cuo),e(x,Iu),e(Iu,tne),e(tne,muo),e(Iu,fuo),e(Iu,iI),e(iI,guo),e(Iu,huo),e(x,uuo),e(x,qu),e(qu,ane),e(ane,puo),e(qu,_uo),e(qu,dI),e(dI,buo),e(qu,Fuo),e(x,vuo),e(x,Nu),e(Nu,nne),e(nne,Tuo),e(Nu,Muo),e(Nu,cI),e(cI,Euo),e(Nu,Cuo),e(x,wuo),e(x,ju),e(ju,sne),e(sne,Auo),e(ju,yuo),e(ju,mI),e(mI,Luo),e(ju,xuo),e(x,$uo),e(x,Du),e(Du,lne),e(lne,kuo),e(Du,Suo),e(Du,fI),e(fI,Ruo),e(Du,Buo),e(x,Puo),e(x,Gu),e(Gu,ine),e(ine,Iuo),e(Gu,quo),e(Gu,gI),e(gI,Nuo),e(Gu,juo),e(x,Duo),e(x,Ou),e(Ou,dne),e(dne,Guo),e(Ou,Ouo),e(Ou,hI),e(hI,Vuo),e(Ou,Xuo),e(x,zuo),e(x,Vu),e(Vu,cne),e(cne,Quo),e(Vu,Wuo),e(Vu,uI),e(uI,Huo),e(Vu,Uuo),e(x,Juo),e(x,Xu),e(Xu,mne),e(mne,Yuo),e(Xu,Kuo),e(Xu,pI),e(pI,Zuo),e(Xu,epo),e(x,opo),e(x,zu),e(zu,fne),e(fne,rpo),e(zu,tpo),e(zu,_I),e(_I,apo),e(zu,npo),e(x,spo),e(x,Qu),e(Qu,gne),e(gne,lpo),e(Qu,ipo),e(Qu,bI),e(bI,dpo),e(Qu,cpo),e(x,mpo),e(x,Wu),e(Wu,hne),e(hne,fpo),e(Wu,gpo),e(Wu,FI),e(FI,hpo),e(Wu,upo),e(x,ppo),e(x,Hu),e(Hu,une),e(une,_po),e(Hu,bpo),e(Hu,vI),e(vI,Fpo),e(Hu,vpo),e(x,Tpo),e(x,Uu),e(Uu,pne),e(pne,Mpo),e(Uu,Epo),e(Uu,TI),e(TI,Cpo),e(Uu,wpo),e(x,Apo),e(x,Ju),e(Ju,_ne),e(_ne,ypo),e(Ju,Lpo),e(Ju,MI),e(MI,xpo),e(Ju,$po),e(x,kpo),e(x,Yu),e(Yu,bne),e(bne,Spo),e(Yu,Rpo),e(Yu,EI),e(EI,Bpo),e(Yu,Ppo),e(x,Ipo),e(x,Ku),e(Ku,Fne),e(Fne,qpo),e(Ku,Npo),e(Ku,CI),e(CI,jpo),e(Ku,Dpo),e(x,Gpo),e(x,Zu),e(Zu,vne),e(vne,Opo),e(Zu,Vpo),e(Zu,wI),e(wI,Xpo),e(Zu,zpo),e(x,Qpo),e(x,ep),e(ep,Tne),e(Tne,Wpo),e(ep,Hpo),e(ep,AI),e(AI,Upo),e(ep,Jpo),e(x,Ypo),e(x,op),e(op,Mne),e(Mne,Kpo),e(op,Zpo),e(op,yI),e(yI,e_o),e(op,o_o),e(x,r_o),e(x,rp),e(rp,Ene),e(Ene,t_o),e(rp,a_o),e(rp,LI),e(LI,n_o),e(rp,s_o),e(x,l_o),e(x,tp),e(tp,Cne),e(Cne,i_o),e(tp,d_o),e(tp,xI),e(xI,c_o),e(tp,m_o),e(x,f_o),e(x,ap),e(ap,wne),e(wne,g_o),e(ap,h_o),e(ap,$I),e($I,u_o),e(ap,p_o),e(x,__o),e(x,np),e(np,Ane),e(Ane,b_o),e(np,F_o),e(np,kI),e(kI,v_o),e(np,T_o),e(x,M_o),e(x,sp),e(sp,yne),e(yne,E_o),e(sp,C_o),e(sp,SI),e(SI,w_o),e(sp,A_o),e(x,y_o),e(x,lp),e(lp,Lne),e(Lne,L_o),e(lp,x_o),e(lp,RI),e(RI,$_o),e(lp,k_o),e(x,S_o),e(x,ip),e(ip,xne),e(xne,R_o),e(ip,B_o),e(ip,BI),e(BI,P_o),e(ip,I_o),e(x,q_o),e(x,dp),e(dp,$ne),e($ne,N_o),e(dp,j_o),e(dp,PI),e(PI,D_o),e(dp,G_o),e(x,O_o),e(x,cp),e(cp,kne),e(kne,V_o),e(cp,X_o),e(cp,II),e(II,z_o),e(cp,Q_o),e(x,W_o),e(x,mp),e(mp,Sne),e(Sne,H_o),e(mp,U_o),e(mp,qI),e(qI,J_o),e(mp,Y_o),e(x,K_o),e(x,fp),e(fp,Rne),e(Rne,Z_o),e(fp,ebo),e(fp,NI),e(NI,obo),e(fp,rbo),e(x,tbo),e(x,gp),e(gp,Bne),e(Bne,abo),e(gp,nbo),e(gp,jI),e(jI,sbo),e(gp,lbo),e(x,ibo),e(x,hp),e(hp,Pne),e(Pne,dbo),e(hp,cbo),e(hp,DI),e(DI,mbo),e(hp,fbo),e(x,gbo),e(x,up),e(up,Ine),e(Ine,hbo),e(up,ubo),e(up,GI),e(GI,pbo),e(up,_bo),e(x,bbo),e(x,pp),e(pp,qne),e(qne,Fbo),e(pp,vbo),e(pp,OI),e(OI,Tbo),e(pp,Mbo),e(x,Ebo),e(x,_p),e(_p,Nne),e(Nne,Cbo),e(_p,wbo),e(_p,VI),e(VI,Abo),e(_p,ybo),e(He,Lbo),e(He,bp),e(bp,xbo),e(bp,jne),e(jne,$bo),e(bp,kbo),e(bp,Dne),e(Dne,Sbo),e(He,Rbo),M(Fp,He,null),b(m,vBe,_),b(m,bi,_),e(bi,vp),e(vp,Gne),M(K6,Gne,null),e(bi,Bbo),e(bi,One),e(One,Pbo),b(m,TBe,_),b(m,xo,_),M(Z6,xo,null),e(xo,Ibo),e(xo,Fi),e(Fi,qbo),e(Fi,XI),e(XI,Nbo),e(Fi,jbo),e(Fi,zI),e(zI,Dbo),e(Fi,Gbo),e(xo,Obo),e(xo,ey),e(ey,Vbo),e(ey,Vne),e(Vne,Xbo),e(ey,zbo),e(xo,Qbo),e(xo,et),M(oy,et,null),e(et,Wbo),e(et,Xne),e(Xne,Hbo),e(et,Ubo),e(et,vi),e(vi,Jbo),e(vi,zne),e(zne,Ybo),e(vi,Kbo),e(vi,QI),e(QI,Zbo),e(vi,e2o),e(et,o2o),M(Tp,et,null),e(xo,r2o),e(xo,Ue),M(ry,Ue,null),e(Ue,t2o),e(Ue,Qne),e(Qne,a2o),e(Ue,n2o),e(Ue,Ca),e(Ca,s2o),e(Ca,Wne),e(Wne,l2o),e(Ca,i2o),e(Ca,Hne),e(Hne,d2o),e(Ca,c2o),e(Ca,Une),e(Une,m2o),e(Ca,f2o),e(Ue,g2o),e(Ue,G),e(G,Mp),e(Mp,Jne),e(Jne,h2o),e(Mp,u2o),e(Mp,WI),e(WI,p2o),e(Mp,_2o),e(G,b2o),e(G,Ep),e(Ep,Yne),e(Yne,F2o),e(Ep,v2o),e(Ep,HI),e(HI,T2o),e(Ep,M2o),e(G,E2o),e(G,Cp),e(Cp,Kne),e(Kne,C2o),e(Cp,w2o),e(Cp,UI),e(UI,A2o),e(Cp,y2o),e(G,L2o),e(G,wp),e(wp,Zne),e(Zne,x2o),e(wp,$2o),e(wp,JI),e(JI,k2o),e(wp,S2o),e(G,R2o),e(G,Ap),e(Ap,ese),e(ese,B2o),e(Ap,P2o),e(Ap,YI),e(YI,I2o),e(Ap,q2o),e(G,N2o),e(G,yp),e(yp,ose),e(ose,j2o),e(yp,D2o),e(yp,KI),e(KI,G2o),e(yp,O2o),e(G,V2o),e(G,Lp),e(Lp,rse),e(rse,X2o),e(Lp,z2o),e(Lp,ZI),e(ZI,Q2o),e(Lp,W2o),e(G,H2o),e(G,xp),e(xp,tse),e(tse,U2o),e(xp,J2o),e(xp,eq),e(eq,Y2o),e(xp,K2o),e(G,Z2o),e(G,$p),e($p,ase),e(ase,eFo),e($p,oFo),e($p,oq),e(oq,rFo),e($p,tFo),e(G,aFo),e(G,kp),e(kp,nse),e(nse,nFo),e(kp,sFo),e(kp,rq),e(rq,lFo),e(kp,iFo),e(G,dFo),e(G,Sp),e(Sp,sse),e(sse,cFo),e(Sp,mFo),e(Sp,tq),e(tq,fFo),e(Sp,gFo),e(G,hFo),e(G,Rp),e(Rp,lse),e(lse,uFo),e(Rp,pFo),e(Rp,aq),e(aq,_Fo),e(Rp,bFo),e(G,FFo),e(G,Bp),e(Bp,ise),e(ise,vFo),e(Bp,TFo),e(Bp,nq),e(nq,MFo),e(Bp,EFo),e(G,CFo),e(G,Pp),e(Pp,dse),e(dse,wFo),e(Pp,AFo),e(Pp,sq),e(sq,yFo),e(Pp,LFo),e(G,xFo),e(G,Ip),e(Ip,cse),e(cse,$Fo),e(Ip,kFo),e(Ip,lq),e(lq,SFo),e(Ip,RFo),e(G,BFo),e(G,qp),e(qp,mse),e(mse,PFo),e(qp,IFo),e(qp,iq),e(iq,qFo),e(qp,NFo),e(G,jFo),e(G,Np),e(Np,fse),e(fse,DFo),e(Np,GFo),e(Np,dq),e(dq,OFo),e(Np,VFo),e(G,XFo),e(G,jp),e(jp,gse),e(gse,zFo),e(jp,QFo),e(jp,cq),e(cq,WFo),e(jp,HFo),e(G,UFo),e(G,Dp),e(Dp,hse),e(hse,JFo),e(Dp,YFo),e(Dp,mq),e(mq,KFo),e(Dp,ZFo),e(G,evo),e(G,Gp),e(Gp,use),e(use,ovo),e(Gp,rvo),e(Gp,fq),e(fq,tvo),e(Gp,avo),e(G,nvo),e(G,Op),e(Op,pse),e(pse,svo),e(Op,lvo),e(Op,gq),e(gq,ivo),e(Op,dvo),e(G,cvo),e(G,Vp),e(Vp,_se),e(_se,mvo),e(Vp,fvo),e(Vp,hq),e(hq,gvo),e(Vp,hvo),e(G,uvo),e(G,Xp),e(Xp,bse),e(bse,pvo),e(Xp,_vo),e(Xp,uq),e(uq,bvo),e(Xp,Fvo),e(G,vvo),e(G,zp),e(zp,Fse),e(Fse,Tvo),e(zp,Mvo),e(zp,pq),e(pq,Evo),e(zp,Cvo),e(G,wvo),e(G,Qp),e(Qp,vse),e(vse,Avo),e(Qp,yvo),e(Qp,_q),e(_q,Lvo),e(Qp,xvo),e(G,$vo),e(G,Wp),e(Wp,Tse),e(Tse,kvo),e(Wp,Svo),e(Wp,bq),e(bq,Rvo),e(Wp,Bvo),e(G,Pvo),e(G,Hp),e(Hp,Mse),e(Mse,Ivo),e(Hp,qvo),e(Hp,Fq),e(Fq,Nvo),e(Hp,jvo),e(G,Dvo),e(G,Up),e(Up,Ese),e(Ese,Gvo),e(Up,Ovo),e(Up,vq),e(vq,Vvo),e(Up,Xvo),e(G,zvo),e(G,Jp),e(Jp,Cse),e(Cse,Qvo),e(Jp,Wvo),e(Jp,Tq),e(Tq,Hvo),e(Jp,Uvo),e(G,Jvo),e(G,Yp),e(Yp,wse),e(wse,Yvo),e(Yp,Kvo),e(Yp,Mq),e(Mq,Zvo),e(Yp,e1o),e(G,o1o),e(G,Kp),e(Kp,Ase),e(Ase,r1o),e(Kp,t1o),e(Kp,Eq),e(Eq,a1o),e(Kp,n1o),e(G,s1o),e(G,Zp),e(Zp,yse),e(yse,l1o),e(Zp,i1o),e(Zp,Cq),e(Cq,d1o),e(Zp,c1o),e(G,m1o),e(G,e_),e(e_,Lse),e(Lse,f1o),e(e_,g1o),e(e_,wq),e(wq,h1o),e(e_,u1o),e(G,p1o),e(G,o_),e(o_,xse),e(xse,_1o),e(o_,b1o),e(o_,Aq),e(Aq,F1o),e(o_,v1o),e(G,T1o),e(G,r_),e(r_,$se),e($se,M1o),e(r_,E1o),e(r_,yq),e(yq,C1o),e(r_,w1o),e(G,A1o),e(G,t_),e(t_,kse),e(kse,y1o),e(t_,L1o),e(t_,Lq),e(Lq,x1o),e(t_,$1o),e(G,k1o),e(G,a_),e(a_,Sse),e(Sse,S1o),e(a_,R1o),e(a_,xq),e(xq,B1o),e(a_,P1o),e(G,I1o),e(G,n_),e(n_,Rse),e(Rse,q1o),e(n_,N1o),e(n_,$q),e($q,j1o),e(n_,D1o),e(G,G1o),e(G,s_),e(s_,Bse),e(Bse,O1o),e(s_,V1o),e(s_,kq),e(kq,X1o),e(s_,z1o),e(Ue,Q1o),e(Ue,l_),e(l_,W1o),e(l_,Pse),e(Pse,H1o),e(l_,U1o),e(l_,Ise),e(Ise,J1o),e(Ue,Y1o),M(i_,Ue,null),b(m,MBe,_),b(m,Ti,_),e(Ti,d_),e(d_,qse),M(ty,qse,null),e(Ti,K1o),e(Ti,Nse),e(Nse,Z1o),b(m,EBe,_),b(m,$o,_),M(ay,$o,null),e($o,eTo),e($o,Mi),e(Mi,oTo),e(Mi,Sq),e(Sq,rTo),e(Mi,tTo),e(Mi,Rq),e(Rq,aTo),e(Mi,nTo),e($o,sTo),e($o,ny),e(ny,lTo),e(ny,jse),e(jse,iTo),e(ny,dTo),e($o,cTo),e($o,ot),M(sy,ot,null),e(ot,mTo),e(ot,Dse),e(Dse,fTo),e(ot,gTo),e(ot,Ei),e(Ei,hTo),e(Ei,Gse),e(Gse,uTo),e(Ei,pTo),e(Ei,Bq),e(Bq,_To),e(Ei,bTo),e(ot,FTo),M(c_,ot,null),e($o,vTo),e($o,Je),M(ly,Je,null),e(Je,TTo),e(Je,Ose),e(Ose,MTo),e(Je,ETo),e(Je,wa),e(wa,CTo),e(wa,Vse),e(Vse,wTo),e(wa,ATo),e(wa,Xse),e(Xse,yTo),e(wa,LTo),e(wa,zse),e(zse,xTo),e(wa,$To),e(Je,kTo),e(Je,z),e(z,m_),e(m_,Qse),e(Qse,STo),e(m_,RTo),e(m_,Pq),e(Pq,BTo),e(m_,PTo),e(z,ITo),e(z,f_),e(f_,Wse),e(Wse,qTo),e(f_,NTo),e(f_,Iq),e(Iq,jTo),e(f_,DTo),e(z,GTo),e(z,g_),e(g_,Hse),e(Hse,OTo),e(g_,VTo),e(g_,qq),e(qq,XTo),e(g_,zTo),e(z,QTo),e(z,h_),e(h_,Use),e(Use,WTo),e(h_,HTo),e(h_,Nq),e(Nq,UTo),e(h_,JTo),e(z,YTo),e(z,u_),e(u_,Jse),e(Jse,KTo),e(u_,ZTo),e(u_,jq),e(jq,eMo),e(u_,oMo),e(z,rMo),e(z,p_),e(p_,Yse),e(Yse,tMo),e(p_,aMo),e(p_,Dq),e(Dq,nMo),e(p_,sMo),e(z,lMo),e(z,__),e(__,Kse),e(Kse,iMo),e(__,dMo),e(__,Gq),e(Gq,cMo),e(__,mMo),e(z,fMo),e(z,b_),e(b_,Zse),e(Zse,gMo),e(b_,hMo),e(b_,Oq),e(Oq,uMo),e(b_,pMo),e(z,_Mo),e(z,F_),e(F_,ele),e(ele,bMo),e(F_,FMo),e(F_,Vq),e(Vq,vMo),e(F_,TMo),e(z,MMo),e(z,v_),e(v_,ole),e(ole,EMo),e(v_,CMo),e(v_,Xq),e(Xq,wMo),e(v_,AMo),e(z,yMo),e(z,T_),e(T_,rle),e(rle,LMo),e(T_,xMo),e(T_,zq),e(zq,$Mo),e(T_,kMo),e(z,SMo),e(z,M_),e(M_,tle),e(tle,RMo),e(M_,BMo),e(M_,Qq),e(Qq,PMo),e(M_,IMo),e(z,qMo),e(z,E_),e(E_,ale),e(ale,NMo),e(E_,jMo),e(E_,Wq),e(Wq,DMo),e(E_,GMo),e(z,OMo),e(z,C_),e(C_,nle),e(nle,VMo),e(C_,XMo),e(C_,Hq),e(Hq,zMo),e(C_,QMo),e(z,WMo),e(z,w_),e(w_,sle),e(sle,HMo),e(w_,UMo),e(w_,Uq),e(Uq,JMo),e(w_,YMo),e(z,KMo),e(z,A_),e(A_,lle),e(lle,ZMo),e(A_,e4o),e(A_,Jq),e(Jq,o4o),e(A_,r4o),e(z,t4o),e(z,y_),e(y_,ile),e(ile,a4o),e(y_,n4o),e(y_,Yq),e(Yq,s4o),e(y_,l4o),e(z,i4o),e(z,L_),e(L_,dle),e(dle,d4o),e(L_,c4o),e(L_,Kq),e(Kq,m4o),e(L_,f4o),e(z,g4o),e(z,x_),e(x_,cle),e(cle,h4o),e(x_,u4o),e(x_,Zq),e(Zq,p4o),e(x_,_4o),e(z,b4o),e(z,$_),e($_,mle),e(mle,F4o),e($_,v4o),e($_,eN),e(eN,T4o),e($_,M4o),e(z,E4o),e(z,k_),e(k_,fle),e(fle,C4o),e(k_,w4o),e(k_,oN),e(oN,A4o),e(k_,y4o),e(z,L4o),e(z,S_),e(S_,gle),e(gle,x4o),e(S_,$4o),e(S_,rN),e(rN,k4o),e(S_,S4o),e(z,R4o),e(z,R_),e(R_,hle),e(hle,B4o),e(R_,P4o),e(R_,tN),e(tN,I4o),e(R_,q4o),e(z,N4o),e(z,B_),e(B_,ule),e(ule,j4o),e(B_,D4o),e(B_,aN),e(aN,G4o),e(B_,O4o),e(z,V4o),e(z,P_),e(P_,ple),e(ple,X4o),e(P_,z4o),e(P_,nN),e(nN,Q4o),e(P_,W4o),e(z,H4o),e(z,I_),e(I_,_le),e(_le,U4o),e(I_,J4o),e(I_,sN),e(sN,Y4o),e(I_,K4o),e(z,Z4o),e(z,q_),e(q_,ble),e(ble,eEo),e(q_,oEo),e(q_,lN),e(lN,rEo),e(q_,tEo),e(z,aEo),e(z,N_),e(N_,Fle),e(Fle,nEo),e(N_,sEo),e(N_,iN),e(iN,lEo),e(N_,iEo),e(z,dEo),e(z,j_),e(j_,vle),e(vle,cEo),e(j_,mEo),e(j_,dN),e(dN,fEo),e(j_,gEo),e(z,hEo),e(z,D_),e(D_,Tle),e(Tle,uEo),e(D_,pEo),e(D_,cN),e(cN,_Eo),e(D_,bEo),e(z,FEo),e(z,G_),e(G_,Mle),e(Mle,vEo),e(G_,TEo),e(G_,mN),e(mN,MEo),e(G_,EEo),e(z,CEo),e(z,O_),e(O_,Ele),e(Ele,wEo),e(O_,AEo),e(O_,fN),e(fN,yEo),e(O_,LEo),e(z,xEo),e(z,V_),e(V_,Cle),e(Cle,$Eo),e(V_,kEo),e(V_,gN),e(gN,SEo),e(V_,REo),e(z,BEo),e(z,X_),e(X_,wle),e(wle,PEo),e(X_,IEo),e(X_,hN),e(hN,qEo),e(X_,NEo),e(z,jEo),e(z,z_),e(z_,Ale),e(Ale,DEo),e(z_,GEo),e(z_,uN),e(uN,OEo),e(z_,VEo),e(Je,XEo),e(Je,Q_),e(Q_,zEo),e(Q_,yle),e(yle,QEo),e(Q_,WEo),e(Q_,Lle),e(Lle,HEo),e(Je,UEo),M(W_,Je,null),b(m,CBe,_),b(m,Ci,_),e(Ci,H_),e(H_,xle),M(iy,xle,null),e(Ci,JEo),e(Ci,$le),e($le,YEo),b(m,wBe,_),b(m,ko,_),M(dy,ko,null),e(ko,KEo),e(ko,wi),e(wi,ZEo),e(wi,pN),e(pN,e5o),e(wi,o5o),e(wi,_N),e(_N,r5o),e(wi,t5o),e(ko,a5o),e(ko,cy),e(cy,n5o),e(cy,kle),e(kle,s5o),e(cy,l5o),e(ko,i5o),e(ko,rt),M(my,rt,null),e(rt,d5o),e(rt,Sle),e(Sle,c5o),e(rt,m5o),e(rt,Ai),e(Ai,f5o),e(Ai,Rle),e(Rle,g5o),e(Ai,h5o),e(Ai,bN),e(bN,u5o),e(Ai,p5o),e(rt,_5o),M(U_,rt,null),e(ko,b5o),e(ko,Ye),M(fy,Ye,null),e(Ye,F5o),e(Ye,Ble),e(Ble,v5o),e(Ye,T5o),e(Ye,Aa),e(Aa,M5o),e(Aa,Ple),e(Ple,E5o),e(Aa,C5o),e(Aa,Ile),e(Ile,w5o),e(Aa,A5o),e(Aa,qle),e(qle,y5o),e(Aa,L5o),e(Ye,x5o),e(Ye,Q),e(Q,J_),e(J_,Nle),e(Nle,$5o),e(J_,k5o),e(J_,FN),e(FN,S5o),e(J_,R5o),e(Q,B5o),e(Q,Y_),e(Y_,jle),e(jle,P5o),e(Y_,I5o),e(Y_,vN),e(vN,q5o),e(Y_,N5o),e(Q,j5o),e(Q,K_),e(K_,Dle),e(Dle,D5o),e(K_,G5o),e(K_,TN),e(TN,O5o),e(K_,V5o),e(Q,X5o),e(Q,Z_),e(Z_,Gle),e(Gle,z5o),e(Z_,Q5o),e(Z_,MN),e(MN,W5o),e(Z_,H5o),e(Q,U5o),e(Q,eb),e(eb,Ole),e(Ole,J5o),e(eb,Y5o),e(eb,EN),e(EN,K5o),e(eb,Z5o),e(Q,eCo),e(Q,ob),e(ob,Vle),e(Vle,oCo),e(ob,rCo),e(ob,CN),e(CN,tCo),e(ob,aCo),e(Q,nCo),e(Q,rb),e(rb,Xle),e(Xle,sCo),e(rb,lCo),e(rb,wN),e(wN,iCo),e(rb,dCo),e(Q,cCo),e(Q,tb),e(tb,zle),e(zle,mCo),e(tb,fCo),e(tb,AN),e(AN,gCo),e(tb,hCo),e(Q,uCo),e(Q,ab),e(ab,Qle),e(Qle,pCo),e(ab,_Co),e(ab,yN),e(yN,bCo),e(ab,FCo),e(Q,vCo),e(Q,nb),e(nb,Wle),e(Wle,TCo),e(nb,MCo),e(nb,LN),e(LN,ECo),e(nb,CCo),e(Q,wCo),e(Q,sb),e(sb,Hle),e(Hle,ACo),e(sb,yCo),e(sb,xN),e(xN,LCo),e(sb,xCo),e(Q,$Co),e(Q,lb),e(lb,Ule),e(Ule,kCo),e(lb,SCo),e(lb,$N),e($N,RCo),e(lb,BCo),e(Q,PCo),e(Q,ib),e(ib,Jle),e(Jle,ICo),e(ib,qCo),e(ib,kN),e(kN,NCo),e(ib,jCo),e(Q,DCo),e(Q,db),e(db,Yle),e(Yle,GCo),e(db,OCo),e(db,SN),e(SN,VCo),e(db,XCo),e(Q,zCo),e(Q,cb),e(cb,Kle),e(Kle,QCo),e(cb,WCo),e(cb,RN),e(RN,HCo),e(cb,UCo),e(Q,JCo),e(Q,mb),e(mb,Zle),e(Zle,YCo),e(mb,KCo),e(mb,BN),e(BN,ZCo),e(mb,e3o),e(Q,o3o),e(Q,fb),e(fb,eie),e(eie,r3o),e(fb,t3o),e(fb,PN),e(PN,a3o),e(fb,n3o),e(Q,s3o),e(Q,gb),e(gb,oie),e(oie,l3o),e(gb,i3o),e(gb,IN),e(IN,d3o),e(gb,c3o),e(Q,m3o),e(Q,hb),e(hb,rie),e(rie,f3o),e(hb,g3o),e(hb,qN),e(qN,h3o),e(hb,u3o),e(Q,p3o),e(Q,ub),e(ub,tie),e(tie,_3o),e(ub,b3o),e(ub,NN),e(NN,F3o),e(ub,v3o),e(Q,T3o),e(Q,pb),e(pb,aie),e(aie,M3o),e(pb,E3o),e(pb,jN),e(jN,C3o),e(pb,w3o),e(Q,A3o),e(Q,_b),e(_b,nie),e(nie,y3o),e(_b,L3o),e(_b,DN),e(DN,x3o),e(_b,$3o),e(Q,k3o),e(Q,bb),e(bb,sie),e(sie,S3o),e(bb,R3o),e(bb,GN),e(GN,B3o),e(bb,P3o),e(Q,I3o),e(Q,Fb),e(Fb,lie),e(lie,q3o),e(Fb,N3o),e(Fb,ON),e(ON,j3o),e(Fb,D3o),e(Q,G3o),e(Q,vb),e(vb,iie),e(iie,O3o),e(vb,V3o),e(vb,VN),e(VN,X3o),e(vb,z3o),e(Q,Q3o),e(Q,Tb),e(Tb,die),e(die,W3o),e(Tb,H3o),e(Tb,XN),e(XN,U3o),e(Tb,J3o),e(Q,Y3o),e(Q,Mb),e(Mb,cie),e(cie,K3o),e(Mb,Z3o),e(Mb,zN),e(zN,ewo),e(Mb,owo),e(Q,rwo),e(Q,Eb),e(Eb,mie),e(mie,two),e(Eb,awo),e(Eb,QN),e(QN,nwo),e(Eb,swo),e(Q,lwo),e(Q,Cb),e(Cb,fie),e(fie,iwo),e(Cb,dwo),e(Cb,WN),e(WN,cwo),e(Cb,mwo),e(Q,fwo),e(Q,wb),e(wb,gie),e(gie,gwo),e(wb,hwo),e(wb,HN),e(HN,uwo),e(wb,pwo),e(Q,_wo),e(Q,Ab),e(Ab,hie),e(hie,bwo),e(Ab,Fwo),e(Ab,uie),e(uie,vwo),e(Ab,Two),e(Q,Mwo),e(Q,yb),e(yb,pie),e(pie,Ewo),e(yb,Cwo),e(yb,UN),e(UN,wwo),e(yb,Awo),e(Q,ywo),e(Q,Lb),e(Lb,_ie),e(_ie,Lwo),e(Lb,xwo),e(Lb,JN),e(JN,$wo),e(Lb,kwo),e(Q,Swo),e(Q,xb),e(xb,bie),e(bie,Rwo),e(xb,Bwo),e(xb,YN),e(YN,Pwo),e(xb,Iwo),e(Q,qwo),e(Q,$b),e($b,Fie),e(Fie,Nwo),e($b,jwo),e($b,KN),e(KN,Dwo),e($b,Gwo),e(Ye,Owo),e(Ye,kb),e(kb,Vwo),e(kb,vie),e(vie,Xwo),e(kb,zwo),e(kb,Tie),e(Tie,Qwo),e(Ye,Wwo),M(Sb,Ye,null),b(m,ABe,_),b(m,yi,_),e(yi,Rb),e(Rb,Mie),M(gy,Mie,null),e(yi,Hwo),e(yi,Eie),e(Eie,Uwo),b(m,yBe,_),b(m,So,_),M(hy,So,null),e(So,Jwo),e(So,Li),e(Li,Ywo),e(Li,ZN),e(ZN,Kwo),e(Li,Zwo),e(Li,ej),e(ej,eAo),e(Li,oAo),e(So,rAo),e(So,uy),e(uy,tAo),e(uy,Cie),e(Cie,aAo),e(uy,nAo),e(So,sAo),e(So,tt),M(py,tt,null),e(tt,lAo),e(tt,wie),e(wie,iAo),e(tt,dAo),e(tt,xi),e(xi,cAo),e(xi,Aie),e(Aie,mAo),e(xi,fAo),e(xi,oj),e(oj,gAo),e(xi,hAo),e(tt,uAo),M(Bb,tt,null),e(So,pAo),e(So,Ke),M(_y,Ke,null),e(Ke,_Ao),e(Ke,yie),e(yie,bAo),e(Ke,FAo),e(Ke,ya),e(ya,vAo),e(ya,Lie),e(Lie,TAo),e(ya,MAo),e(ya,xie),e(xie,EAo),e(ya,CAo),e(ya,$ie),e($ie,wAo),e(ya,AAo),e(Ke,yAo),e(Ke,he),e(he,Pb),e(Pb,kie),e(kie,LAo),e(Pb,xAo),e(Pb,rj),e(rj,$Ao),e(Pb,kAo),e(he,SAo),e(he,Ib),e(Ib,Sie),e(Sie,RAo),e(Ib,BAo),e(Ib,tj),e(tj,PAo),e(Ib,IAo),e(he,qAo),e(he,qb),e(qb,Rie),e(Rie,NAo),e(qb,jAo),e(qb,aj),e(aj,DAo),e(qb,GAo),e(he,OAo),e(he,Nb),e(Nb,Bie),e(Bie,VAo),e(Nb,XAo),e(Nb,nj),e(nj,zAo),e(Nb,QAo),e(he,WAo),e(he,jb),e(jb,Pie),e(Pie,HAo),e(jb,UAo),e(jb,sj),e(sj,JAo),e(jb,YAo),e(he,KAo),e(he,Db),e(Db,Iie),e(Iie,ZAo),e(Db,e0o),e(Db,lj),e(lj,o0o),e(Db,r0o),e(he,t0o),e(he,Gb),e(Gb,qie),e(qie,a0o),e(Gb,n0o),e(Gb,ij),e(ij,s0o),e(Gb,l0o),e(he,i0o),e(he,Ob),e(Ob,Nie),e(Nie,d0o),e(Ob,c0o),e(Ob,dj),e(dj,m0o),e(Ob,f0o),e(he,g0o),e(he,Vb),e(Vb,jie),e(jie,h0o),e(Vb,u0o),e(Vb,cj),e(cj,p0o),e(Vb,_0o),e(he,b0o),e(he,Xb),e(Xb,Die),e(Die,F0o),e(Xb,v0o),e(Xb,mj),e(mj,T0o),e(Xb,M0o),e(he,E0o),e(he,zb),e(zb,Gie),e(Gie,C0o),e(zb,w0o),e(zb,fj),e(fj,A0o),e(zb,y0o),e(he,L0o),e(he,Qb),e(Qb,Oie),e(Oie,x0o),e(Qb,$0o),e(Qb,gj),e(gj,k0o),e(Qb,S0o),e(he,R0o),e(he,Wb),e(Wb,Vie),e(Vie,B0o),e(Wb,P0o),e(Wb,hj),e(hj,I0o),e(Wb,q0o),e(he,N0o),e(he,Hb),e(Hb,Xie),e(Xie,j0o),e(Hb,D0o),e(Hb,uj),e(uj,G0o),e(Hb,O0o),e(he,V0o),e(he,Ub),e(Ub,zie),e(zie,X0o),e(Ub,z0o),e(Ub,pj),e(pj,Q0o),e(Ub,W0o),e(he,H0o),e(he,Jb),e(Jb,Qie),e(Qie,U0o),e(Jb,J0o),e(Jb,_j),e(_j,Y0o),e(Jb,K0o),e(he,Z0o),e(he,Yb),e(Yb,Wie),e(Wie,e6o),e(Yb,o6o),e(Yb,bj),e(bj,r6o),e(Yb,t6o),e(Ke,a6o),e(Ke,Kb),e(Kb,n6o),e(Kb,Hie),e(Hie,s6o),e(Kb,l6o),e(Kb,Uie),e(Uie,i6o),e(Ke,d6o),M(Zb,Ke,null),b(m,LBe,_),b(m,$i,_),e($i,e2),e(e2,Jie),M(by,Jie,null),e($i,c6o),e($i,Yie),e(Yie,m6o),b(m,xBe,_),b(m,Ro,_),M(Fy,Ro,null),e(Ro,f6o),e(Ro,ki),e(ki,g6o),e(ki,Fj),e(Fj,h6o),e(ki,u6o),e(ki,vj),e(vj,p6o),e(ki,_6o),e(Ro,b6o),e(Ro,vy),e(vy,F6o),e(vy,Kie),e(Kie,v6o),e(vy,T6o),e(Ro,M6o),e(Ro,at),M(Ty,at,null),e(at,E6o),e(at,Zie),e(Zie,C6o),e(at,w6o),e(at,Si),e(Si,A6o),e(Si,ede),e(ede,y6o),e(Si,L6o),e(Si,Tj),e(Tj,x6o),e(Si,$6o),e(at,k6o),M(o2,at,null),e(Ro,S6o),e(Ro,Ze),M(My,Ze,null),e(Ze,R6o),e(Ze,ode),e(ode,B6o),e(Ze,P6o),e(Ze,La),e(La,I6o),e(La,rde),e(rde,q6o),e(La,N6o),e(La,tde),e(tde,j6o),e(La,D6o),e(La,ade),e(ade,G6o),e(La,O6o),e(Ze,V6o),e(Ze,q),e(q,r2),e(r2,nde),e(nde,X6o),e(r2,z6o),e(r2,Mj),e(Mj,Q6o),e(r2,W6o),e(q,H6o),e(q,t2),e(t2,sde),e(sde,U6o),e(t2,J6o),e(t2,Ej),e(Ej,Y6o),e(t2,K6o),e(q,Z6o),e(q,a2),e(a2,lde),e(lde,eyo),e(a2,oyo),e(a2,Cj),e(Cj,ryo),e(a2,tyo),e(q,ayo),e(q,n2),e(n2,ide),e(ide,nyo),e(n2,syo),e(n2,wj),e(wj,lyo),e(n2,iyo),e(q,dyo),e(q,s2),e(s2,dde),e(dde,cyo),e(s2,myo),e(s2,Aj),e(Aj,fyo),e(s2,gyo),e(q,hyo),e(q,l2),e(l2,cde),e(cde,uyo),e(l2,pyo),e(l2,yj),e(yj,_yo),e(l2,byo),e(q,Fyo),e(q,i2),e(i2,mde),e(mde,vyo),e(i2,Tyo),e(i2,Lj),e(Lj,Myo),e(i2,Eyo),e(q,Cyo),e(q,d2),e(d2,fde),e(fde,wyo),e(d2,Ayo),e(d2,xj),e(xj,yyo),e(d2,Lyo),e(q,xyo),e(q,c2),e(c2,gde),e(gde,$yo),e(c2,kyo),e(c2,$j),e($j,Syo),e(c2,Ryo),e(q,Byo),e(q,m2),e(m2,hde),e(hde,Pyo),e(m2,Iyo),e(m2,kj),e(kj,qyo),e(m2,Nyo),e(q,jyo),e(q,f2),e(f2,ude),e(ude,Dyo),e(f2,Gyo),e(f2,Sj),e(Sj,Oyo),e(f2,Vyo),e(q,Xyo),e(q,g2),e(g2,pde),e(pde,zyo),e(g2,Qyo),e(g2,Rj),e(Rj,Wyo),e(g2,Hyo),e(q,Uyo),e(q,h2),e(h2,_de),e(_de,Jyo),e(h2,Yyo),e(h2,Bj),e(Bj,Kyo),e(h2,Zyo),e(q,eLo),e(q,u2),e(u2,bde),e(bde,oLo),e(u2,rLo),e(u2,Pj),e(Pj,tLo),e(u2,aLo),e(q,nLo),e(q,p2),e(p2,Fde),e(Fde,sLo),e(p2,lLo),e(p2,Ij),e(Ij,iLo),e(p2,dLo),e(q,cLo),e(q,_2),e(_2,vde),e(vde,mLo),e(_2,fLo),e(_2,qj),e(qj,gLo),e(_2,hLo),e(q,uLo),e(q,b2),e(b2,Tde),e(Tde,pLo),e(b2,_Lo),e(b2,Nj),e(Nj,bLo),e(b2,FLo),e(q,vLo),e(q,F2),e(F2,Mde),e(Mde,TLo),e(F2,MLo),e(F2,jj),e(jj,ELo),e(F2,CLo),e(q,wLo),e(q,v2),e(v2,Ede),e(Ede,ALo),e(v2,yLo),e(v2,Dj),e(Dj,LLo),e(v2,xLo),e(q,$Lo),e(q,T2),e(T2,Cde),e(Cde,kLo),e(T2,SLo),e(T2,Gj),e(Gj,RLo),e(T2,BLo),e(q,PLo),e(q,M2),e(M2,wde),e(wde,ILo),e(M2,qLo),e(M2,Oj),e(Oj,NLo),e(M2,jLo),e(q,DLo),e(q,E2),e(E2,Ade),e(Ade,GLo),e(E2,OLo),e(E2,Vj),e(Vj,VLo),e(E2,XLo),e(q,zLo),e(q,C2),e(C2,yde),e(yde,QLo),e(C2,WLo),e(C2,Xj),e(Xj,HLo),e(C2,ULo),e(q,JLo),e(q,w2),e(w2,Lde),e(Lde,YLo),e(w2,KLo),e(w2,zj),e(zj,ZLo),e(w2,e8o),e(q,o8o),e(q,A2),e(A2,xde),e(xde,r8o),e(A2,t8o),e(A2,Qj),e(Qj,a8o),e(A2,n8o),e(q,s8o),e(q,y2),e(y2,$de),e($de,l8o),e(y2,i8o),e(y2,Wj),e(Wj,d8o),e(y2,c8o),e(q,m8o),e(q,L2),e(L2,kde),e(kde,f8o),e(L2,g8o),e(L2,Hj),e(Hj,h8o),e(L2,u8o),e(q,p8o),e(q,x2),e(x2,Sde),e(Sde,_8o),e(x2,b8o),e(x2,Uj),e(Uj,F8o),e(x2,v8o),e(q,T8o),e(q,$2),e($2,Rde),e(Rde,M8o),e($2,E8o),e($2,Jj),e(Jj,C8o),e($2,w8o),e(q,A8o),e(q,k2),e(k2,Bde),e(Bde,y8o),e(k2,L8o),e(k2,Yj),e(Yj,x8o),e(k2,$8o),e(q,k8o),e(q,S2),e(S2,Pde),e(Pde,S8o),e(S2,R8o),e(S2,Kj),e(Kj,B8o),e(S2,P8o),e(q,I8o),e(q,R2),e(R2,Ide),e(Ide,q8o),e(R2,N8o),e(R2,Zj),e(Zj,j8o),e(R2,D8o),e(q,G8o),e(q,B2),e(B2,qde),e(qde,O8o),e(B2,V8o),e(B2,eD),e(eD,X8o),e(B2,z8o),e(q,Q8o),e(q,P2),e(P2,Nde),e(Nde,W8o),e(P2,H8o),e(P2,oD),e(oD,U8o),e(P2,J8o),e(q,Y8o),e(q,I2),e(I2,jde),e(jde,K8o),e(I2,Z8o),e(I2,rD),e(rD,e7o),e(I2,o7o),e(q,r7o),e(q,q2),e(q2,Dde),e(Dde,t7o),e(q2,a7o),e(q2,tD),e(tD,n7o),e(q2,s7o),e(q,l7o),e(q,N2),e(N2,Gde),e(Gde,i7o),e(N2,d7o),e(N2,aD),e(aD,c7o),e(N2,m7o),e(q,f7o),e(q,j2),e(j2,Ode),e(Ode,g7o),e(j2,h7o),e(j2,nD),e(nD,u7o),e(j2,p7o),e(q,_7o),e(q,D2),e(D2,Vde),e(Vde,b7o),e(D2,F7o),e(D2,sD),e(sD,v7o),e(D2,T7o),e(q,M7o),e(q,G2),e(G2,Xde),e(Xde,E7o),e(G2,C7o),e(G2,lD),e(lD,w7o),e(G2,A7o),e(q,y7o),e(q,O2),e(O2,zde),e(zde,L7o),e(O2,x7o),e(O2,iD),e(iD,$7o),e(O2,k7o),e(q,S7o),e(q,V2),e(V2,Qde),e(Qde,R7o),e(V2,B7o),e(V2,dD),e(dD,P7o),e(V2,I7o),e(q,q7o),e(q,X2),e(X2,Wde),e(Wde,N7o),e(X2,j7o),e(X2,cD),e(cD,D7o),e(X2,G7o),e(q,O7o),e(q,z2),e(z2,Hde),e(Hde,V7o),e(z2,X7o),e(z2,mD),e(mD,z7o),e(z2,Q7o),e(q,W7o),e(q,Q2),e(Q2,Ude),e(Ude,H7o),e(Q2,U7o),e(Q2,fD),e(fD,J7o),e(Q2,Y7o),e(q,K7o),e(q,W2),e(W2,Jde),e(Jde,Z7o),e(W2,exo),e(W2,gD),e(gD,oxo),e(W2,rxo),e(q,txo),e(q,H2),e(H2,Yde),e(Yde,axo),e(H2,nxo),e(H2,hD),e(hD,sxo),e(H2,lxo),e(Ze,ixo),e(Ze,U2),e(U2,dxo),e(U2,Kde),e(Kde,cxo),e(U2,mxo),e(U2,Zde),e(Zde,fxo),e(Ze,gxo),M(J2,Ze,null),b(m,$Be,_),b(m,Ri,_),e(Ri,Y2),e(Y2,ece),M(Ey,ece,null),e(Ri,hxo),e(Ri,oce),e(oce,uxo),b(m,kBe,_),b(m,Bo,_),M(Cy,Bo,null),e(Bo,pxo),e(Bo,Bi),e(Bi,_xo),e(Bi,uD),e(uD,bxo),e(Bi,Fxo),e(Bi,pD),e(pD,vxo),e(Bi,Txo),e(Bo,Mxo),e(Bo,wy),e(wy,Exo),e(wy,rce),e(rce,Cxo),e(wy,wxo),e(Bo,Axo),e(Bo,nt),M(Ay,nt,null),e(nt,yxo),e(nt,tce),e(tce,Lxo),e(nt,xxo),e(nt,Pi),e(Pi,$xo),e(Pi,ace),e(ace,kxo),e(Pi,Sxo),e(Pi,_D),e(_D,Rxo),e(Pi,Bxo),e(nt,Pxo),M(K2,nt,null),e(Bo,Ixo),e(Bo,eo),M(yy,eo,null),e(eo,qxo),e(eo,nce),e(nce,Nxo),e(eo,jxo),e(eo,xa),e(xa,Dxo),e(xa,sce),e(sce,Gxo),e(xa,Oxo),e(xa,lce),e(lce,Vxo),e(xa,Xxo),e(xa,ice),e(ice,zxo),e(xa,Qxo),e(eo,Wxo),e(eo,Y),e(Y,Z2),e(Z2,dce),e(dce,Hxo),e(Z2,Uxo),e(Z2,bD),e(bD,Jxo),e(Z2,Yxo),e(Y,Kxo),e(Y,eF),e(eF,cce),e(cce,Zxo),e(eF,e9o),e(eF,FD),e(FD,o9o),e(eF,r9o),e(Y,t9o),e(Y,oF),e(oF,mce),e(mce,a9o),e(oF,n9o),e(oF,vD),e(vD,s9o),e(oF,l9o),e(Y,i9o),e(Y,rF),e(rF,fce),e(fce,d9o),e(rF,c9o),e(rF,TD),e(TD,m9o),e(rF,f9o),e(Y,g9o),e(Y,tF),e(tF,gce),e(gce,h9o),e(tF,u9o),e(tF,MD),e(MD,p9o),e(tF,_9o),e(Y,b9o),e(Y,aF),e(aF,hce),e(hce,F9o),e(aF,v9o),e(aF,ED),e(ED,T9o),e(aF,M9o),e(Y,E9o),e(Y,nF),e(nF,uce),e(uce,C9o),e(nF,w9o),e(nF,CD),e(CD,A9o),e(nF,y9o),e(Y,L9o),e(Y,sF),e(sF,pce),e(pce,x9o),e(sF,$9o),e(sF,wD),e(wD,k9o),e(sF,S9o),e(Y,R9o),e(Y,lF),e(lF,_ce),e(_ce,B9o),e(lF,P9o),e(lF,AD),e(AD,I9o),e(lF,q9o),e(Y,N9o),e(Y,iF),e(iF,bce),e(bce,j9o),e(iF,D9o),e(iF,yD),e(yD,G9o),e(iF,O9o),e(Y,V9o),e(Y,dF),e(dF,Fce),e(Fce,X9o),e(dF,z9o),e(dF,LD),e(LD,Q9o),e(dF,W9o),e(Y,H9o),e(Y,cF),e(cF,vce),e(vce,U9o),e(cF,J9o),e(cF,xD),e(xD,Y9o),e(cF,K9o),e(Y,Z9o),e(Y,mF),e(mF,Tce),e(Tce,e$o),e(mF,o$o),e(mF,$D),e($D,r$o),e(mF,t$o),e(Y,a$o),e(Y,fF),e(fF,Mce),e(Mce,n$o),e(fF,s$o),e(fF,kD),e(kD,l$o),e(fF,i$o),e(Y,d$o),e(Y,gF),e(gF,Ece),e(Ece,c$o),e(gF,m$o),e(gF,SD),e(SD,f$o),e(gF,g$o),e(Y,h$o),e(Y,hF),e(hF,Cce),e(Cce,u$o),e(hF,p$o),e(hF,RD),e(RD,_$o),e(hF,b$o),e(Y,F$o),e(Y,uF),e(uF,wce),e(wce,v$o),e(uF,T$o),e(uF,BD),e(BD,M$o),e(uF,E$o),e(Y,C$o),e(Y,pF),e(pF,Ace),e(Ace,w$o),e(pF,A$o),e(pF,PD),e(PD,y$o),e(pF,L$o),e(Y,x$o),e(Y,_F),e(_F,yce),e(yce,$$o),e(_F,k$o),e(_F,ID),e(ID,S$o),e(_F,R$o),e(Y,B$o),e(Y,bF),e(bF,Lce),e(Lce,P$o),e(bF,I$o),e(bF,qD),e(qD,q$o),e(bF,N$o),e(Y,j$o),e(Y,FF),e(FF,xce),e(xce,D$o),e(FF,G$o),e(FF,ND),e(ND,O$o),e(FF,V$o),e(Y,X$o),e(Y,vF),e(vF,$ce),e($ce,z$o),e(vF,Q$o),e(vF,jD),e(jD,W$o),e(vF,H$o),e(Y,U$o),e(Y,TF),e(TF,kce),e(kce,J$o),e(TF,Y$o),e(TF,DD),e(DD,K$o),e(TF,Z$o),e(Y,eko),e(Y,MF),e(MF,Sce),e(Sce,oko),e(MF,rko),e(MF,GD),e(GD,tko),e(MF,ako),e(Y,nko),e(Y,EF),e(EF,Rce),e(Rce,sko),e(EF,lko),e(EF,OD),e(OD,iko),e(EF,dko),e(Y,cko),e(Y,CF),e(CF,Bce),e(Bce,mko),e(CF,fko),e(CF,VD),e(VD,gko),e(CF,hko),e(Y,uko),e(Y,wF),e(wF,Pce),e(Pce,pko),e(wF,_ko),e(wF,XD),e(XD,bko),e(wF,Fko),e(Y,vko),e(Y,AF),e(AF,Ice),e(Ice,Tko),e(AF,Mko),e(AF,zD),e(zD,Eko),e(AF,Cko),e(eo,wko),e(eo,yF),e(yF,Ako),e(yF,qce),e(qce,yko),e(yF,Lko),e(yF,Nce),e(Nce,xko),e(eo,$ko),M(LF,eo,null),b(m,SBe,_),b(m,Ii,_),e(Ii,xF),e(xF,jce),M(Ly,jce,null),e(Ii,kko),e(Ii,Dce),e(Dce,Sko),b(m,RBe,_),b(m,Po,_),M(xy,Po,null),e(Po,Rko),e(Po,qi),e(qi,Bko),e(qi,QD),e(QD,Pko),e(qi,Iko),e(qi,WD),e(WD,qko),e(qi,Nko),e(Po,jko),e(Po,$y),e($y,Dko),e($y,Gce),e(Gce,Gko),e($y,Oko),e(Po,Vko),e(Po,st),M(ky,st,null),e(st,Xko),e(st,Oce),e(Oce,zko),e(st,Qko),e(st,Ni),e(Ni,Wko),e(Ni,Vce),e(Vce,Hko),e(Ni,Uko),e(Ni,HD),e(HD,Jko),e(Ni,Yko),e(st,Kko),M($F,st,null),e(Po,Zko),e(Po,oo),M(Sy,oo,null),e(oo,eSo),e(oo,Xce),e(Xce,oSo),e(oo,rSo),e(oo,$a),e($a,tSo),e($a,zce),e(zce,aSo),e($a,nSo),e($a,Qce),e(Qce,sSo),e($a,lSo),e($a,Wce),e(Wce,iSo),e($a,dSo),e(oo,cSo),e(oo,Ur),e(Ur,kF),e(kF,Hce),e(Hce,mSo),e(kF,fSo),e(kF,UD),e(UD,gSo),e(kF,hSo),e(Ur,uSo),e(Ur,SF),e(SF,Uce),e(Uce,pSo),e(SF,_So),e(SF,JD),e(JD,bSo),e(SF,FSo),e(Ur,vSo),e(Ur,RF),e(RF,Jce),e(Jce,TSo),e(RF,MSo),e(RF,YD),e(YD,ESo),e(RF,CSo),e(Ur,wSo),e(Ur,BF),e(BF,Yce),e(Yce,ASo),e(BF,ySo),e(BF,KD),e(KD,LSo),e(BF,xSo),e(Ur,$So),e(Ur,PF),e(PF,Kce),e(Kce,kSo),e(PF,SSo),e(PF,ZD),e(ZD,RSo),e(PF,BSo),e(oo,PSo),e(oo,IF),e(IF,ISo),e(IF,Zce),e(Zce,qSo),e(IF,NSo),e(IF,eme),e(eme,jSo),e(oo,DSo),M(qF,oo,null),b(m,BBe,_),b(m,ji,_),e(ji,NF),e(NF,ome),M(Ry,ome,null),e(ji,GSo),e(ji,rme),e(rme,OSo),b(m,PBe,_),b(m,Io,_),M(By,Io,null),e(Io,VSo),e(Io,Di),e(Di,XSo),e(Di,eG),e(eG,zSo),e(Di,QSo),e(Di,oG),e(oG,WSo),e(Di,HSo),e(Io,USo),e(Io,Py),e(Py,JSo),e(Py,tme),e(tme,YSo),e(Py,KSo),e(Io,ZSo),e(Io,lt),M(Iy,lt,null),e(lt,eRo),e(lt,ame),e(ame,oRo),e(lt,rRo),e(lt,Gi),e(Gi,tRo),e(Gi,nme),e(nme,aRo),e(Gi,nRo),e(Gi,rG),e(rG,sRo),e(Gi,lRo),e(lt,iRo),M(jF,lt,null),e(Io,dRo),e(Io,ro),M(qy,ro,null),e(ro,cRo),e(ro,sme),e(sme,mRo),e(ro,fRo),e(ro,ka),e(ka,gRo),e(ka,lme),e(lme,hRo),e(ka,uRo),e(ka,ime),e(ime,pRo),e(ka,_Ro),e(ka,dme),e(dme,bRo),e(ka,FRo),e(ro,vRo),e(ro,U),e(U,DF),e(DF,cme),e(cme,TRo),e(DF,MRo),e(DF,tG),e(tG,ERo),e(DF,CRo),e(U,wRo),e(U,GF),e(GF,mme),e(mme,ARo),e(GF,yRo),e(GF,aG),e(aG,LRo),e(GF,xRo),e(U,$Ro),e(U,OF),e(OF,fme),e(fme,kRo),e(OF,SRo),e(OF,nG),e(nG,RRo),e(OF,BRo),e(U,PRo),e(U,VF),e(VF,gme),e(gme,IRo),e(VF,qRo),e(VF,sG),e(sG,NRo),e(VF,jRo),e(U,DRo),e(U,XF),e(XF,hme),e(hme,GRo),e(XF,ORo),e(XF,lG),e(lG,VRo),e(XF,XRo),e(U,zRo),e(U,zF),e(zF,ume),e(ume,QRo),e(zF,WRo),e(zF,iG),e(iG,HRo),e(zF,URo),e(U,JRo),e(U,QF),e(QF,pme),e(pme,YRo),e(QF,KRo),e(QF,dG),e(dG,ZRo),e(QF,eBo),e(U,oBo),e(U,WF),e(WF,_me),e(_me,rBo),e(WF,tBo),e(WF,cG),e(cG,aBo),e(WF,nBo),e(U,sBo),e(U,HF),e(HF,bme),e(bme,lBo),e(HF,iBo),e(HF,mG),e(mG,dBo),e(HF,cBo),e(U,mBo),e(U,UF),e(UF,Fme),e(Fme,fBo),e(UF,gBo),e(UF,fG),e(fG,hBo),e(UF,uBo),e(U,pBo),e(U,JF),e(JF,vme),e(vme,_Bo),e(JF,bBo),e(JF,gG),e(gG,FBo),e(JF,vBo),e(U,TBo),e(U,YF),e(YF,Tme),e(Tme,MBo),e(YF,EBo),e(YF,hG),e(hG,CBo),e(YF,wBo),e(U,ABo),e(U,KF),e(KF,Mme),e(Mme,yBo),e(KF,LBo),e(KF,uG),e(uG,xBo),e(KF,$Bo),e(U,kBo),e(U,ZF),e(ZF,Eme),e(Eme,SBo),e(ZF,RBo),e(ZF,pG),e(pG,BBo),e(ZF,PBo),e(U,IBo),e(U,ev),e(ev,Cme),e(Cme,qBo),e(ev,NBo),e(ev,_G),e(_G,jBo),e(ev,DBo),e(U,GBo),e(U,ov),e(ov,wme),e(wme,OBo),e(ov,VBo),e(ov,bG),e(bG,XBo),e(ov,zBo),e(U,QBo),e(U,rv),e(rv,Ame),e(Ame,WBo),e(rv,HBo),e(rv,FG),e(FG,UBo),e(rv,JBo),e(U,YBo),e(U,tv),e(tv,yme),e(yme,KBo),e(tv,ZBo),e(tv,vG),e(vG,ePo),e(tv,oPo),e(U,rPo),e(U,av),e(av,Lme),e(Lme,tPo),e(av,aPo),e(av,TG),e(TG,nPo),e(av,sPo),e(U,lPo),e(U,nv),e(nv,xme),e(xme,iPo),e(nv,dPo),e(nv,MG),e(MG,cPo),e(nv,mPo),e(U,fPo),e(U,sv),e(sv,$me),e($me,gPo),e(sv,hPo),e(sv,EG),e(EG,uPo),e(sv,pPo),e(U,_Po),e(U,lv),e(lv,kme),e(kme,bPo),e(lv,FPo),e(lv,CG),e(CG,vPo),e(lv,TPo),e(U,MPo),e(U,iv),e(iv,Sme),e(Sme,EPo),e(iv,CPo),e(iv,wG),e(wG,wPo),e(iv,APo),e(U,yPo),e(U,dv),e(dv,Rme),e(Rme,LPo),e(dv,xPo),e(dv,AG),e(AG,$Po),e(dv,kPo),e(U,SPo),e(U,cv),e(cv,Bme),e(Bme,RPo),e(cv,BPo),e(cv,yG),e(yG,PPo),e(cv,IPo),e(U,qPo),e(U,mv),e(mv,Pme),e(Pme,NPo),e(mv,jPo),e(mv,LG),e(LG,DPo),e(mv,GPo),e(U,OPo),e(U,fv),e(fv,Ime),e(Ime,VPo),e(fv,XPo),e(fv,xG),e(xG,zPo),e(fv,QPo),e(U,WPo),e(U,gv),e(gv,qme),e(qme,HPo),e(gv,UPo),e(gv,$G),e($G,JPo),e(gv,YPo),e(U,KPo),e(U,hv),e(hv,Nme),e(Nme,ZPo),e(hv,eIo),e(hv,kG),e(kG,oIo),e(hv,rIo),e(U,tIo),e(U,uv),e(uv,jme),e(jme,aIo),e(uv,nIo),e(uv,SG),e(SG,sIo),e(uv,lIo),e(U,iIo),e(U,pv),e(pv,Dme),e(Dme,dIo),e(pv,cIo),e(pv,RG),e(RG,mIo),e(pv,fIo),e(U,gIo),e(U,_v),e(_v,Gme),e(Gme,hIo),e(_v,uIo),e(_v,BG),e(BG,pIo),e(_v,_Io),e(U,bIo),e(U,bv),e(bv,Ome),e(Ome,FIo),e(bv,vIo),e(bv,PG),e(PG,TIo),e(bv,MIo),e(ro,EIo),e(ro,Fv),e(Fv,CIo),e(Fv,Vme),e(Vme,wIo),e(Fv,AIo),e(Fv,Xme),e(Xme,yIo),e(ro,LIo),M(vv,ro,null),b(m,IBe,_),b(m,Oi,_),e(Oi,Tv),e(Tv,zme),M(Ny,zme,null),e(Oi,xIo),e(Oi,Qme),e(Qme,$Io),b(m,qBe,_),b(m,qo,_),M(jy,qo,null),e(qo,kIo),e(qo,Vi),e(Vi,SIo),e(Vi,IG),e(IG,RIo),e(Vi,BIo),e(Vi,qG),e(qG,PIo),e(Vi,IIo),e(qo,qIo),e(qo,Dy),e(Dy,NIo),e(Dy,Wme),e(Wme,jIo),e(Dy,DIo),e(qo,GIo),e(qo,it),M(Gy,it,null),e(it,OIo),e(it,Hme),e(Hme,VIo),e(it,XIo),e(it,Xi),e(Xi,zIo),e(Xi,Ume),e(Ume,QIo),e(Xi,WIo),e(Xi,NG),e(NG,HIo),e(Xi,UIo),e(it,JIo),M(Mv,it,null),e(qo,YIo),e(qo,to),M(Oy,to,null),e(to,KIo),e(to,Jme),e(Jme,ZIo),e(to,eqo),e(to,Sa),e(Sa,oqo),e(Sa,Yme),e(Yme,rqo),e(Sa,tqo),e(Sa,Kme),e(Kme,aqo),e(Sa,nqo),e(Sa,Zme),e(Zme,sqo),e(Sa,lqo),e(to,iqo),e(to,O),e(O,Ev),e(Ev,efe),e(efe,dqo),e(Ev,cqo),e(Ev,jG),e(jG,mqo),e(Ev,fqo),e(O,gqo),e(O,Cv),e(Cv,ofe),e(ofe,hqo),e(Cv,uqo),e(Cv,DG),e(DG,pqo),e(Cv,_qo),e(O,bqo),e(O,wv),e(wv,rfe),e(rfe,Fqo),e(wv,vqo),e(wv,GG),e(GG,Tqo),e(wv,Mqo),e(O,Eqo),e(O,Av),e(Av,tfe),e(tfe,Cqo),e(Av,wqo),e(Av,OG),e(OG,Aqo),e(Av,yqo),e(O,Lqo),e(O,yv),e(yv,afe),e(afe,xqo),e(yv,$qo),e(yv,VG),e(VG,kqo),e(yv,Sqo),e(O,Rqo),e(O,Lv),e(Lv,nfe),e(nfe,Bqo),e(Lv,Pqo),e(Lv,XG),e(XG,Iqo),e(Lv,qqo),e(O,Nqo),e(O,xv),e(xv,sfe),e(sfe,jqo),e(xv,Dqo),e(xv,zG),e(zG,Gqo),e(xv,Oqo),e(O,Vqo),e(O,$v),e($v,lfe),e(lfe,Xqo),e($v,zqo),e($v,QG),e(QG,Qqo),e($v,Wqo),e(O,Hqo),e(O,kv),e(kv,ife),e(ife,Uqo),e(kv,Jqo),e(kv,WG),e(WG,Yqo),e(kv,Kqo),e(O,Zqo),e(O,Sv),e(Sv,dfe),e(dfe,eNo),e(Sv,oNo),e(Sv,HG),e(HG,rNo),e(Sv,tNo),e(O,aNo),e(O,Rv),e(Rv,cfe),e(cfe,nNo),e(Rv,sNo),e(Rv,UG),e(UG,lNo),e(Rv,iNo),e(O,dNo),e(O,Bv),e(Bv,mfe),e(mfe,cNo),e(Bv,mNo),e(Bv,JG),e(JG,fNo),e(Bv,gNo),e(O,hNo),e(O,Pv),e(Pv,ffe),e(ffe,uNo),e(Pv,pNo),e(Pv,YG),e(YG,_No),e(Pv,bNo),e(O,FNo),e(O,Iv),e(Iv,gfe),e(gfe,vNo),e(Iv,TNo),e(Iv,KG),e(KG,MNo),e(Iv,ENo),e(O,CNo),e(O,qv),e(qv,hfe),e(hfe,wNo),e(qv,ANo),e(qv,ZG),e(ZG,yNo),e(qv,LNo),e(O,xNo),e(O,Nv),e(Nv,ufe),e(ufe,$No),e(Nv,kNo),e(Nv,eO),e(eO,SNo),e(Nv,RNo),e(O,BNo),e(O,jv),e(jv,pfe),e(pfe,PNo),e(jv,INo),e(jv,oO),e(oO,qNo),e(jv,NNo),e(O,jNo),e(O,Dv),e(Dv,_fe),e(_fe,DNo),e(Dv,GNo),e(Dv,rO),e(rO,ONo),e(Dv,VNo),e(O,XNo),e(O,Gv),e(Gv,bfe),e(bfe,zNo),e(Gv,QNo),e(Gv,tO),e(tO,WNo),e(Gv,HNo),e(O,UNo),e(O,Ov),e(Ov,Ffe),e(Ffe,JNo),e(Ov,YNo),e(Ov,aO),e(aO,KNo),e(Ov,ZNo),e(O,ejo),e(O,Vv),e(Vv,vfe),e(vfe,ojo),e(Vv,rjo),e(Vv,nO),e(nO,tjo),e(Vv,ajo),e(O,njo),e(O,Xv),e(Xv,Tfe),e(Tfe,sjo),e(Xv,ljo),e(Xv,sO),e(sO,ijo),e(Xv,djo),e(O,cjo),e(O,zv),e(zv,Mfe),e(Mfe,mjo),e(zv,fjo),e(zv,lO),e(lO,gjo),e(zv,hjo),e(O,ujo),e(O,Qv),e(Qv,Efe),e(Efe,pjo),e(Qv,_jo),e(Qv,iO),e(iO,bjo),e(Qv,Fjo),e(O,vjo),e(O,Wv),e(Wv,Cfe),e(Cfe,Tjo),e(Wv,Mjo),e(Wv,dO),e(dO,Ejo),e(Wv,Cjo),e(O,wjo),e(O,Hv),e(Hv,wfe),e(wfe,Ajo),e(Hv,yjo),e(Hv,cO),e(cO,Ljo),e(Hv,xjo),e(O,$jo),e(O,Uv),e(Uv,Afe),e(Afe,kjo),e(Uv,Sjo),e(Uv,mO),e(mO,Rjo),e(Uv,Bjo),e(O,Pjo),e(O,Jv),e(Jv,yfe),e(yfe,Ijo),e(Jv,qjo),e(Jv,fO),e(fO,Njo),e(Jv,jjo),e(O,Djo),e(O,Yv),e(Yv,Lfe),e(Lfe,Gjo),e(Yv,Ojo),e(Yv,gO),e(gO,Vjo),e(Yv,Xjo),e(O,zjo),e(O,Kv),e(Kv,xfe),e(xfe,Qjo),e(Kv,Wjo),e(Kv,hO),e(hO,Hjo),e(Kv,Ujo),e(O,Jjo),e(O,Zv),e(Zv,$fe),e($fe,Yjo),e(Zv,Kjo),e(Zv,uO),e(uO,Zjo),e(Zv,eDo),e(O,oDo),e(O,e1),e(e1,kfe),e(kfe,rDo),e(e1,tDo),e(e1,pO),e(pO,aDo),e(e1,nDo),e(O,sDo),e(O,o1),e(o1,Sfe),e(Sfe,lDo),e(o1,iDo),e(o1,_O),e(_O,dDo),e(o1,cDo),e(O,mDo),e(O,r1),e(r1,Rfe),e(Rfe,fDo),e(r1,gDo),e(r1,bO),e(bO,hDo),e(r1,uDo),e(O,pDo),e(O,t1),e(t1,Bfe),e(Bfe,_Do),e(t1,bDo),e(t1,FO),e(FO,FDo),e(t1,vDo),e(O,TDo),e(O,a1),e(a1,Pfe),e(Pfe,MDo),e(a1,EDo),e(a1,vO),e(vO,CDo),e(a1,wDo),e(O,ADo),e(O,n1),e(n1,Ife),e(Ife,yDo),e(n1,LDo),e(n1,TO),e(TO,xDo),e(n1,$Do),e(O,kDo),e(O,s1),e(s1,qfe),e(qfe,SDo),e(s1,RDo),e(s1,MO),e(MO,BDo),e(s1,PDo),e(O,IDo),e(O,l1),e(l1,Nfe),e(Nfe,qDo),e(l1,NDo),e(l1,EO),e(EO,jDo),e(l1,DDo),e(to,GDo),e(to,i1),e(i1,ODo),e(i1,jfe),e(jfe,VDo),e(i1,XDo),e(i1,Dfe),e(Dfe,zDo),e(to,QDo),M(d1,to,null),b(m,NBe,_),b(m,zi,_),e(zi,c1),e(c1,Gfe),M(Vy,Gfe,null),e(zi,WDo),e(zi,Ofe),e(Ofe,HDo),b(m,jBe,_),b(m,No,_),M(Xy,No,null),e(No,UDo),e(No,Qi),e(Qi,JDo),e(Qi,CO),e(CO,YDo),e(Qi,KDo),e(Qi,wO),e(wO,ZDo),e(Qi,eGo),e(No,oGo),e(No,zy),e(zy,rGo),e(zy,Vfe),e(Vfe,tGo),e(zy,aGo),e(No,nGo),e(No,dt),M(Qy,dt,null),e(dt,sGo),e(dt,Xfe),e(Xfe,lGo),e(dt,iGo),e(dt,Wi),e(Wi,dGo),e(Wi,zfe),e(zfe,cGo),e(Wi,mGo),e(Wi,AO),e(AO,fGo),e(Wi,gGo),e(dt,hGo),M(m1,dt,null),e(No,uGo),e(No,ao),M(Wy,ao,null),e(ao,pGo),e(ao,Qfe),e(Qfe,_Go),e(ao,bGo),e(ao,Ra),e(Ra,FGo),e(Ra,Wfe),e(Wfe,vGo),e(Ra,TGo),e(Ra,Hfe),e(Hfe,MGo),e(Ra,EGo),e(Ra,Ufe),e(Ufe,CGo),e(Ra,wGo),e(ao,AGo),e(ao,Jfe),e(Jfe,f1),e(f1,Yfe),e(Yfe,yGo),e(f1,LGo),e(f1,yO),e(yO,xGo),e(f1,$Go),e(ao,kGo),e(ao,g1),e(g1,SGo),e(g1,Kfe),e(Kfe,RGo),e(g1,BGo),e(g1,Zfe),e(Zfe,PGo),e(ao,IGo),M(h1,ao,null),b(m,DBe,_),b(m,Hi,_),e(Hi,u1),e(u1,ege),M(Hy,ege,null),e(Hi,qGo),e(Hi,oge),e(oge,NGo),b(m,GBe,_),b(m,jo,_),M(Uy,jo,null),e(jo,jGo),e(jo,Ui),e(Ui,DGo),e(Ui,LO),e(LO,GGo),e(Ui,OGo),e(Ui,xO),e(xO,VGo),e(Ui,XGo),e(jo,zGo),e(jo,Jy),e(Jy,QGo),e(Jy,rge),e(rge,WGo),e(Jy,HGo),e(jo,UGo),e(jo,ct),M(Yy,ct,null),e(ct,JGo),e(ct,tge),e(tge,YGo),e(ct,KGo),e(ct,Ji),e(Ji,ZGo),e(Ji,age),e(age,eOo),e(Ji,oOo),e(Ji,$O),e($O,rOo),e(Ji,tOo),e(ct,aOo),M(p1,ct,null),e(jo,nOo),e(jo,no),M(Ky,no,null),e(no,sOo),e(no,nge),e(nge,lOo),e(no,iOo),e(no,Ba),e(Ba,dOo),e(Ba,sge),e(sge,cOo),e(Ba,mOo),e(Ba,lge),e(lge,fOo),e(Ba,gOo),e(Ba,ige),e(ige,hOo),e(Ba,uOo),e(no,pOo),e(no,Fe),e(Fe,_1),e(_1,dge),e(dge,_Oo),e(_1,bOo),e(_1,kO),e(kO,FOo),e(_1,vOo),e(Fe,TOo),e(Fe,b1),e(b1,cge),e(cge,MOo),e(b1,EOo),e(b1,SO),e(SO,COo),e(b1,wOo),e(Fe,AOo),e(Fe,F1),e(F1,mge),e(mge,yOo),e(F1,LOo),e(F1,RO),e(RO,xOo),e(F1,$Oo),e(Fe,kOo),e(Fe,xs),e(xs,fge),e(fge,SOo),e(xs,ROo),e(xs,BO),e(BO,BOo),e(xs,POo),e(xs,PO),e(PO,IOo),e(xs,qOo),e(Fe,NOo),e(Fe,v1),e(v1,gge),e(gge,jOo),e(v1,DOo),e(v1,IO),e(IO,GOo),e(v1,OOo),e(Fe,VOo),e(Fe,mt),e(mt,hge),e(hge,XOo),e(mt,zOo),e(mt,qO),e(qO,QOo),e(mt,WOo),e(mt,NO),e(NO,HOo),e(mt,UOo),e(mt,jO),e(jO,JOo),e(mt,YOo),e(Fe,KOo),e(Fe,T1),e(T1,uge),e(uge,ZOo),e(T1,eVo),e(T1,DO),e(DO,oVo),e(T1,rVo),e(Fe,tVo),e(Fe,M1),e(M1,pge),e(pge,aVo),e(M1,nVo),e(M1,GO),e(GO,sVo),e(M1,lVo),e(Fe,iVo),e(Fe,E1),e(E1,_ge),e(_ge,dVo),e(E1,cVo),e(E1,OO),e(OO,mVo),e(E1,fVo),e(Fe,gVo),e(Fe,C1),e(C1,bge),e(bge,hVo),e(C1,uVo),e(C1,VO),e(VO,pVo),e(C1,_Vo),e(Fe,bVo),e(Fe,w1),e(w1,Fge),e(Fge,FVo),e(w1,vVo),e(w1,XO),e(XO,TVo),e(w1,MVo),e(Fe,EVo),e(Fe,A1),e(A1,vge),e(vge,CVo),e(A1,wVo),e(A1,zO),e(zO,AVo),e(A1,yVo),e(Fe,LVo),e(Fe,y1),e(y1,Tge),e(Tge,xVo),e(y1,$Vo),e(y1,QO),e(QO,kVo),e(y1,SVo),e(no,RVo),e(no,L1),e(L1,BVo),e(L1,Mge),e(Mge,PVo),e(L1,IVo),e(L1,Ege),e(Ege,qVo),e(no,NVo),M(x1,no,null),b(m,OBe,_),b(m,Yi,_),e(Yi,$1),e($1,Cge),M(Zy,Cge,null),e(Yi,jVo),e(Yi,wge),e(wge,DVo),b(m,VBe,_),b(m,Do,_),M(eL,Do,null),e(Do,GVo),e(Do,Ki),e(Ki,OVo),e(Ki,WO),e(WO,VVo),e(Ki,XVo),e(Ki,HO),e(HO,zVo),e(Ki,QVo),e(Do,WVo),e(Do,oL),e(oL,HVo),e(oL,Age),e(Age,UVo),e(oL,JVo),e(Do,YVo),e(Do,ft),M(rL,ft,null),e(ft,KVo),e(ft,yge),e(yge,ZVo),e(ft,eXo),e(ft,Zi),e(Zi,oXo),e(Zi,Lge),e(Lge,rXo),e(Zi,tXo),e(Zi,UO),e(UO,aXo),e(Zi,nXo),e(ft,sXo),M(k1,ft,null),e(Do,lXo),e(Do,so),M(tL,so,null),e(so,iXo),e(so,xge),e(xge,dXo),e(so,cXo),e(so,Pa),e(Pa,mXo),e(Pa,$ge),e($ge,fXo),e(Pa,gXo),e(Pa,kge),e(kge,hXo),e(Pa,uXo),e(Pa,Sge),e(Sge,pXo),e(Pa,_Xo),e(so,bXo),e(so,Rge),e(Rge,S1),e(S1,Bge),e(Bge,FXo),e(S1,vXo),e(S1,JO),e(JO,TXo),e(S1,MXo),e(so,EXo),e(so,R1),e(R1,CXo),e(R1,Pge),e(Pge,wXo),e(R1,AXo),e(R1,Ige),e(Ige,yXo),e(so,LXo),M(B1,so,null),b(m,XBe,_),b(m,ed,_),e(ed,P1),e(P1,qge),M(aL,qge,null),e(ed,xXo),e(ed,Nge),e(Nge,$Xo),b(m,zBe,_),b(m,Go,_),M(nL,Go,null),e(Go,kXo),e(Go,od),e(od,SXo),e(od,YO),e(YO,RXo),e(od,BXo),e(od,KO),e(KO,PXo),e(od,IXo),e(Go,qXo),e(Go,sL),e(sL,NXo),e(sL,jge),e(jge,jXo),e(sL,DXo),e(Go,GXo),e(Go,gt),M(lL,gt,null),e(gt,OXo),e(gt,Dge),e(Dge,VXo),e(gt,XXo),e(gt,rd),e(rd,zXo),e(rd,Gge),e(Gge,QXo),e(rd,WXo),e(rd,ZO),e(ZO,HXo),e(rd,UXo),e(gt,JXo),M(I1,gt,null),e(Go,YXo),e(Go,lo),M(iL,lo,null),e(lo,KXo),e(lo,Oge),e(Oge,ZXo),e(lo,ezo),e(lo,Ia),e(Ia,ozo),e(Ia,Vge),e(Vge,rzo),e(Ia,tzo),e(Ia,Xge),e(Xge,azo),e(Ia,nzo),e(Ia,zge),e(zge,szo),e(Ia,lzo),e(lo,izo),e(lo,Ne),e(Ne,q1),e(q1,Qge),e(Qge,dzo),e(q1,czo),e(q1,eV),e(eV,mzo),e(q1,fzo),e(Ne,gzo),e(Ne,N1),e(N1,Wge),e(Wge,hzo),e(N1,uzo),e(N1,oV),e(oV,pzo),e(N1,_zo),e(Ne,bzo),e(Ne,j1),e(j1,Hge),e(Hge,Fzo),e(j1,vzo),e(j1,rV),e(rV,Tzo),e(j1,Mzo),e(Ne,Ezo),e(Ne,D1),e(D1,Uge),e(Uge,Czo),e(D1,wzo),e(D1,tV),e(tV,Azo),e(D1,yzo),e(Ne,Lzo),e(Ne,G1),e(G1,Jge),e(Jge,xzo),e(G1,$zo),e(G1,aV),e(aV,kzo),e(G1,Szo),e(Ne,Rzo),e(Ne,O1),e(O1,Yge),e(Yge,Bzo),e(O1,Pzo),e(O1,nV),e(nV,Izo),e(O1,qzo),e(Ne,Nzo),e(Ne,V1),e(V1,Kge),e(Kge,jzo),e(V1,Dzo),e(V1,sV),e(sV,Gzo),e(V1,Ozo),e(Ne,Vzo),e(Ne,X1),e(X1,Zge),e(Zge,Xzo),e(X1,zzo),e(X1,lV),e(lV,Qzo),e(X1,Wzo),e(lo,Hzo),e(lo,z1),e(z1,Uzo),e(z1,ehe),e(ehe,Jzo),e(z1,Yzo),e(z1,ohe),e(ohe,Kzo),e(lo,Zzo),M(Q1,lo,null),b(m,QBe,_),b(m,td,_),e(td,W1),e(W1,rhe),M(dL,rhe,null),e(td,eQo),e(td,the),e(the,oQo),b(m,WBe,_),b(m,Oo,_),M(cL,Oo,null),e(Oo,rQo),e(Oo,ad),e(ad,tQo),e(ad,iV),e(iV,aQo),e(ad,nQo),e(ad,dV),e(dV,sQo),e(ad,lQo),e(Oo,iQo),e(Oo,mL),e(mL,dQo),e(mL,ahe),e(ahe,cQo),e(mL,mQo),e(Oo,fQo),e(Oo,ht),M(fL,ht,null),e(ht,gQo),e(ht,nhe),e(nhe,hQo),e(ht,uQo),e(ht,nd),e(nd,pQo),e(nd,she),e(she,_Qo),e(nd,bQo),e(nd,cV),e(cV,FQo),e(nd,vQo),e(ht,TQo),M(H1,ht,null),e(Oo,MQo),e(Oo,io),M(gL,io,null),e(io,EQo),e(io,lhe),e(lhe,CQo),e(io,wQo),e(io,qa),e(qa,AQo),e(qa,ihe),e(ihe,yQo),e(qa,LQo),e(qa,dhe),e(dhe,xQo),e(qa,$Qo),e(qa,che),e(che,kQo),e(qa,SQo),e(io,RQo),e(io,Na),e(Na,U1),e(U1,mhe),e(mhe,BQo),e(U1,PQo),e(U1,mV),e(mV,IQo),e(U1,qQo),e(Na,NQo),e(Na,J1),e(J1,fhe),e(fhe,jQo),e(J1,DQo),e(J1,fV),e(fV,GQo),e(J1,OQo),e(Na,VQo),e(Na,Y1),e(Y1,ghe),e(ghe,XQo),e(Y1,zQo),e(Y1,gV),e(gV,QQo),e(Y1,WQo),e(Na,HQo),e(Na,K1),e(K1,hhe),e(hhe,UQo),e(K1,JQo),e(K1,hV),e(hV,YQo),e(K1,KQo),e(io,ZQo),e(io,Z1),e(Z1,eWo),e(Z1,uhe),e(uhe,oWo),e(Z1,rWo),e(Z1,phe),e(phe,tWo),e(io,aWo),M(eT,io,null),b(m,HBe,_),b(m,sd,_),e(sd,oT),e(oT,_he),M(hL,_he,null),e(sd,nWo),e(sd,bhe),e(bhe,sWo),b(m,UBe,_),b(m,Vo,_),M(uL,Vo,null),e(Vo,lWo),e(Vo,ld),e(ld,iWo),e(ld,uV),e(uV,dWo),e(ld,cWo),e(ld,pV),e(pV,mWo),e(ld,fWo),e(Vo,gWo),e(Vo,pL),e(pL,hWo),e(pL,Fhe),e(Fhe,uWo),e(pL,pWo),e(Vo,_Wo),e(Vo,ut),M(_L,ut,null),e(ut,bWo),e(ut,vhe),e(vhe,FWo),e(ut,vWo),e(ut,id),e(id,TWo),e(id,The),e(The,MWo),e(id,EWo),e(id,_V),e(_V,CWo),e(id,wWo),e(ut,AWo),M(rT,ut,null),e(Vo,yWo),e(Vo,co),M(bL,co,null),e(co,LWo),e(co,Mhe),e(Mhe,xWo),e(co,$Wo),e(co,ja),e(ja,kWo),e(ja,Ehe),e(Ehe,SWo),e(ja,RWo),e(ja,Che),e(Che,BWo),e(ja,PWo),e(ja,whe),e(whe,IWo),e(ja,qWo),e(co,NWo),e(co,je),e(je,tT),e(tT,Ahe),e(Ahe,jWo),e(tT,DWo),e(tT,bV),e(bV,GWo),e(tT,OWo),e(je,VWo),e(je,aT),e(aT,yhe),e(yhe,XWo),e(aT,zWo),e(aT,FV),e(FV,QWo),e(aT,WWo),e(je,HWo),e(je,nT),e(nT,Lhe),e(Lhe,UWo),e(nT,JWo),e(nT,vV),e(vV,YWo),e(nT,KWo),e(je,ZWo),e(je,sT),e(sT,xhe),e(xhe,eHo),e(sT,oHo),e(sT,TV),e(TV,rHo),e(sT,tHo),e(je,aHo),e(je,lT),e(lT,$he),e($he,nHo),e(lT,sHo),e(lT,MV),e(MV,lHo),e(lT,iHo),e(je,dHo),e(je,iT),e(iT,khe),e(khe,cHo),e(iT,mHo),e(iT,EV),e(EV,fHo),e(iT,gHo),e(je,hHo),e(je,dT),e(dT,She),e(She,uHo),e(dT,pHo),e(dT,CV),e(CV,_Ho),e(dT,bHo),e(je,FHo),e(je,cT),e(cT,Rhe),e(Rhe,vHo),e(cT,THo),e(cT,wV),e(wV,MHo),e(cT,EHo),e(co,CHo),e(co,mT),e(mT,wHo),e(mT,Bhe),e(Bhe,AHo),e(mT,yHo),e(mT,Phe),e(Phe,LHo),e(co,xHo),M(fT,co,null),b(m,JBe,_),b(m,dd,_),e(dd,gT),e(gT,Ihe),M(FL,Ihe,null),e(dd,$Ho),e(dd,qhe),e(qhe,kHo),b(m,YBe,_),b(m,Xo,_),M(vL,Xo,null),e(Xo,SHo),e(Xo,cd),e(cd,RHo),e(cd,AV),e(AV,BHo),e(cd,PHo),e(cd,yV),e(yV,IHo),e(cd,qHo),e(Xo,NHo),e(Xo,TL),e(TL,jHo),e(TL,Nhe),e(Nhe,DHo),e(TL,GHo),e(Xo,OHo),e(Xo,pt),M(ML,pt,null),e(pt,VHo),e(pt,jhe),e(jhe,XHo),e(pt,zHo),e(pt,md),e(md,QHo),e(md,Dhe),e(Dhe,WHo),e(md,HHo),e(md,LV),e(LV,UHo),e(md,JHo),e(pt,YHo),M(hT,pt,null),e(Xo,KHo),e(Xo,mo),M(EL,mo,null),e(mo,ZHo),e(mo,Ghe),e(Ghe,eUo),e(mo,oUo),e(mo,Da),e(Da,rUo),e(Da,Ohe),e(Ohe,tUo),e(Da,aUo),e(Da,Vhe),e(Vhe,nUo),e(Da,sUo),e(Da,Xhe),e(Xhe,lUo),e(Da,iUo),e(mo,dUo),e(mo,CL),e(CL,uT),e(uT,zhe),e(zhe,cUo),e(uT,mUo),e(uT,xV),e(xV,fUo),e(uT,gUo),e(CL,hUo),e(CL,pT),e(pT,Qhe),e(Qhe,uUo),e(pT,pUo),e(pT,$V),e($V,_Uo),e(pT,bUo),e(mo,FUo),e(mo,_T),e(_T,vUo),e(_T,Whe),e(Whe,TUo),e(_T,MUo),e(_T,Hhe),e(Hhe,EUo),e(mo,CUo),M(bT,mo,null),b(m,KBe,_),b(m,fd,_),e(fd,FT),e(FT,Uhe),M(wL,Uhe,null),e(fd,wUo),e(fd,Jhe),e(Jhe,AUo),b(m,ZBe,_),b(m,zo,_),M(AL,zo,null),e(zo,yUo),e(zo,gd),e(gd,LUo),e(gd,kV),e(kV,xUo),e(gd,$Uo),e(gd,SV),e(SV,kUo),e(gd,SUo),e(zo,RUo),e(zo,yL),e(yL,BUo),e(yL,Yhe),e(Yhe,PUo),e(yL,IUo),e(zo,qUo),e(zo,_t),M(LL,_t,null),e(_t,NUo),e(_t,Khe),e(Khe,jUo),e(_t,DUo),e(_t,hd),e(hd,GUo),e(hd,Zhe),e(Zhe,OUo),e(hd,VUo),e(hd,RV),e(RV,XUo),e(hd,zUo),e(_t,QUo),M(vT,_t,null),e(zo,WUo),e(zo,fo),M(xL,fo,null),e(fo,HUo),e(fo,eue),e(eue,UUo),e(fo,JUo),e(fo,Ga),e(Ga,YUo),e(Ga,oue),e(oue,KUo),e(Ga,ZUo),e(Ga,rue),e(rue,eJo),e(Ga,oJo),e(Ga,tue),e(tue,rJo),e(Ga,tJo),e(fo,aJo),e(fo,Oa),e(Oa,TT),e(TT,aue),e(aue,nJo),e(TT,sJo),e(TT,BV),e(BV,lJo),e(TT,iJo),e(Oa,dJo),e(Oa,MT),e(MT,nue),e(nue,cJo),e(MT,mJo),e(MT,PV),e(PV,fJo),e(MT,gJo),e(Oa,hJo),e(Oa,ET),e(ET,sue),e(sue,uJo),e(ET,pJo),e(ET,IV),e(IV,_Jo),e(ET,bJo),e(Oa,FJo),e(Oa,CT),e(CT,lue),e(lue,vJo),e(CT,TJo),e(CT,qV),e(qV,MJo),e(CT,EJo),e(fo,CJo),e(fo,wT),e(wT,wJo),e(wT,iue),e(iue,AJo),e(wT,yJo),e(wT,due),e(due,LJo),e(fo,xJo),M(AT,fo,null),b(m,ePe,_),b(m,ud,_),e(ud,yT),e(yT,cue),M($L,cue,null),e(ud,$Jo),e(ud,mue),e(mue,kJo),b(m,oPe,_),b(m,Qo,_),M(kL,Qo,null),e(Qo,SJo),e(Qo,pd),e(pd,RJo),e(pd,NV),e(NV,BJo),e(pd,PJo),e(pd,jV),e(jV,IJo),e(pd,qJo),e(Qo,NJo),e(Qo,SL),e(SL,jJo),e(SL,fue),e(fue,DJo),e(SL,GJo),e(Qo,OJo),e(Qo,bt),M(RL,bt,null),e(bt,VJo),e(bt,gue),e(gue,XJo),e(bt,zJo),e(bt,_d),e(_d,QJo),e(_d,hue),e(hue,WJo),e(_d,HJo),e(_d,DV),e(DV,UJo),e(_d,JJo),e(bt,YJo),M(LT,bt,null),e(Qo,KJo),e(Qo,go),M(BL,go,null),e(go,ZJo),e(go,uue),e(uue,eYo),e(go,oYo),e(go,Va),e(Va,rYo),e(Va,pue),e(pue,tYo),e(Va,aYo),e(Va,_ue),e(_ue,nYo),e(Va,sYo),e(Va,bue),e(bue,lYo),e(Va,iYo),e(go,dYo),e(go,bd),e(bd,xT),e(xT,Fue),e(Fue,cYo),e(xT,mYo),e(xT,GV),e(GV,fYo),e(xT,gYo),e(bd,hYo),e(bd,$T),e($T,vue),e(vue,uYo),e($T,pYo),e($T,OV),e(OV,_Yo),e($T,bYo),e(bd,FYo),e(bd,kT),e(kT,Tue),e(Tue,vYo),e(kT,TYo),e(kT,VV),e(VV,MYo),e(kT,EYo),e(go,CYo),e(go,ST),e(ST,wYo),e(ST,Mue),e(Mue,AYo),e(ST,yYo),e(ST,Eue),e(Eue,LYo),e(go,xYo),M(RT,go,null),b(m,rPe,_),b(m,Fd,_),e(Fd,BT),e(BT,Cue),M(PL,Cue,null),e(Fd,$Yo),e(Fd,wue),e(wue,kYo),b(m,tPe,_),b(m,Wo,_),M(IL,Wo,null),e(Wo,SYo),e(Wo,vd),e(vd,RYo),e(vd,XV),e(XV,BYo),e(vd,PYo),e(vd,zV),e(zV,IYo),e(vd,qYo),e(Wo,NYo),e(Wo,qL),e(qL,jYo),e(qL,Aue),e(Aue,DYo),e(qL,GYo),e(Wo,OYo),e(Wo,Ft),M(NL,Ft,null),e(Ft,VYo),e(Ft,yue),e(yue,XYo),e(Ft,zYo),e(Ft,Td),e(Td,QYo),e(Td,Lue),e(Lue,WYo),e(Td,HYo),e(Td,QV),e(QV,UYo),e(Td,JYo),e(Ft,YYo),M(PT,Ft,null),e(Wo,KYo),e(Wo,ho),M(jL,ho,null),e(ho,ZYo),e(ho,xue),e(xue,eKo),e(ho,oKo),e(ho,Xa),e(Xa,rKo),e(Xa,$ue),e($ue,tKo),e(Xa,aKo),e(Xa,kue),e(kue,nKo),e(Xa,sKo),e(Xa,Sue),e(Sue,lKo),e(Xa,iKo),e(ho,dKo),e(ho,DL),e(DL,IT),e(IT,Rue),e(Rue,cKo),e(IT,mKo),e(IT,WV),e(WV,fKo),e(IT,gKo),e(DL,hKo),e(DL,qT),e(qT,Bue),e(Bue,uKo),e(qT,pKo),e(qT,HV),e(HV,_Ko),e(qT,bKo),e(ho,FKo),e(ho,NT),e(NT,vKo),e(NT,Pue),e(Pue,TKo),e(NT,MKo),e(NT,Iue),e(Iue,EKo),e(ho,CKo),M(jT,ho,null),b(m,aPe,_),b(m,Md,_),e(Md,DT),e(DT,que),M(GL,que,null),e(Md,wKo),e(Md,Nue),e(Nue,AKo),b(m,nPe,_),b(m,Ho,_),M(OL,Ho,null),e(Ho,yKo),e(Ho,Ed),e(Ed,LKo),e(Ed,UV),e(UV,xKo),e(Ed,$Ko),e(Ed,JV),e(JV,kKo),e(Ed,SKo),e(Ho,RKo),e(Ho,VL),e(VL,BKo),e(VL,jue),e(jue,PKo),e(VL,IKo),e(Ho,qKo),e(Ho,vt),M(XL,vt,null),e(vt,NKo),e(vt,Due),e(Due,jKo),e(vt,DKo),e(vt,Cd),e(Cd,GKo),e(Cd,Gue),e(Gue,OKo),e(Cd,VKo),e(Cd,YV),e(YV,XKo),e(Cd,zKo),e(vt,QKo),M(GT,vt,null),e(Ho,WKo),e(Ho,uo),M(zL,uo,null),e(uo,HKo),e(uo,Oue),e(Oue,UKo),e(uo,JKo),e(uo,za),e(za,YKo),e(za,Vue),e(Vue,KKo),e(za,ZKo),e(za,Xue),e(Xue,eZo),e(za,oZo),e(za,zue),e(zue,rZo),e(za,tZo),e(uo,aZo),e(uo,Que),e(Que,OT),e(OT,Wue),e(Wue,nZo),e(OT,sZo),e(OT,KV),e(KV,lZo),e(OT,iZo),e(uo,dZo),e(uo,VT),e(VT,cZo),e(VT,Hue),e(Hue,mZo),e(VT,fZo),e(VT,Uue),e(Uue,gZo),e(uo,hZo),M(XT,uo,null),b(m,sPe,_),b(m,wd,_),e(wd,zT),e(zT,Jue),M(QL,Jue,null),e(wd,uZo),e(wd,Yue),e(Yue,pZo),b(m,lPe,_),b(m,Uo,_),M(WL,Uo,null),e(Uo,_Zo),e(Uo,Ad),e(Ad,bZo),e(Ad,ZV),e(ZV,FZo),e(Ad,vZo),e(Ad,eX),e(eX,TZo),e(Ad,MZo),e(Uo,EZo),e(Uo,HL),e(HL,CZo),e(HL,Kue),e(Kue,wZo),e(HL,AZo),e(Uo,yZo),e(Uo,Tt),M(UL,Tt,null),e(Tt,LZo),e(Tt,Zue),e(Zue,xZo),e(Tt,$Zo),e(Tt,yd),e(yd,kZo),e(yd,epe),e(epe,SZo),e(yd,RZo),e(yd,oX),e(oX,BZo),e(yd,PZo),e(Tt,IZo),M(QT,Tt,null),e(Uo,qZo),e(Uo,po),M(JL,po,null),e(po,NZo),e(po,ope),e(ope,jZo),e(po,DZo),e(po,Qa),e(Qa,GZo),e(Qa,rpe),e(rpe,OZo),e(Qa,VZo),e(Qa,tpe),e(tpe,XZo),e(Qa,zZo),e(Qa,ape),e(ape,QZo),e(Qa,WZo),e(po,HZo),e(po,Wa),e(Wa,WT),e(WT,npe),e(npe,UZo),e(WT,JZo),e(WT,rX),e(rX,YZo),e(WT,KZo),e(Wa,ZZo),e(Wa,HT),e(HT,spe),e(spe,eer),e(HT,oer),e(HT,tX),e(tX,rer),e(HT,ter),e(Wa,aer),e(Wa,UT),e(UT,lpe),e(lpe,ner),e(UT,ser),e(UT,aX),e(aX,ler),e(UT,ier),e(Wa,der),e(Wa,JT),e(JT,ipe),e(ipe,cer),e(JT,mer),e(JT,nX),e(nX,fer),e(JT,ger),e(po,her),e(po,YT),e(YT,uer),e(YT,dpe),e(dpe,per),e(YT,_er),e(YT,cpe),e(cpe,ber),e(po,Fer),M(KT,po,null),b(m,iPe,_),b(m,Ld,_),e(Ld,ZT),e(ZT,mpe),M(YL,mpe,null),e(Ld,ver),e(Ld,fpe),e(fpe,Ter),b(m,dPe,_),b(m,Jo,_),M(KL,Jo,null),e(Jo,Mer),e(Jo,xd),e(xd,Eer),e(xd,sX),e(sX,Cer),e(xd,wer),e(xd,lX),e(lX,Aer),e(xd,yer),e(Jo,Ler),e(Jo,ZL),e(ZL,xer),e(ZL,gpe),e(gpe,$er),e(ZL,ker),e(Jo,Ser),e(Jo,Mt),M(e8,Mt,null),e(Mt,Rer),e(Mt,hpe),e(hpe,Ber),e(Mt,Per),e(Mt,$d),e($d,Ier),e($d,upe),e(upe,qer),e($d,Ner),e($d,iX),e(iX,jer),e($d,Der),e(Mt,Ger),M(eM,Mt,null),e(Jo,Oer),e(Jo,_o),M(o8,_o,null),e(_o,Ver),e(_o,ppe),e(ppe,Xer),e(_o,zer),e(_o,Ha),e(Ha,Qer),e(Ha,_pe),e(_pe,Wer),e(Ha,Her),e(Ha,bpe),e(bpe,Uer),e(Ha,Jer),e(Ha,Fpe),e(Fpe,Yer),e(Ha,Ker),e(_o,Zer),e(_o,vpe),e(vpe,oM),e(oM,Tpe),e(Tpe,eor),e(oM,oor),e(oM,dX),e(dX,ror),e(oM,tor),e(_o,aor),e(_o,rM),e(rM,nor),e(rM,Mpe),e(Mpe,sor),e(rM,lor),e(rM,Epe),e(Epe,ior),e(_o,dor),M(tM,_o,null),b(m,cPe,_),b(m,kd,_),e(kd,aM),e(aM,Cpe),M(r8,Cpe,null),e(kd,cor),e(kd,wpe),e(wpe,mor),b(m,mPe,_),b(m,Yo,_),M(t8,Yo,null),e(Yo,gor),e(Yo,Sd),e(Sd,hor),e(Sd,cX),e(cX,uor),e(Sd,por),e(Sd,mX),e(mX,_or),e(Sd,bor),e(Yo,For),e(Yo,a8),e(a8,vor),e(a8,Ape),e(Ape,Tor),e(a8,Mor),e(Yo,Eor),e(Yo,Et),M(n8,Et,null),e(Et,Cor),e(Et,ype),e(ype,wor),e(Et,Aor),e(Et,Rd),e(Rd,yor),e(Rd,Lpe),e(Lpe,Lor),e(Rd,xor),e(Rd,fX),e(fX,$or),e(Rd,kor),e(Et,Sor),M(nM,Et,null),e(Yo,Ror),e(Yo,Cr),M(s8,Cr,null),e(Cr,Bor),e(Cr,xpe),e(xpe,Por),e(Cr,Ior),e(Cr,Ua),e(Ua,qor),e(Ua,$pe),e($pe,Nor),e(Ua,jor),e(Ua,kpe),e(kpe,Dor),e(Ua,Gor),e(Ua,Spe),e(Spe,Oor),e(Ua,Vor),e(Cr,Xor),e(Cr,j),e(j,sM),e(sM,Rpe),e(Rpe,zor),e(sM,Qor),e(sM,gX),e(gX,Wor),e(sM,Hor),e(j,Uor),e(j,lM),e(lM,Bpe),e(Bpe,Jor),e(lM,Yor),e(lM,hX),e(hX,Kor),e(lM,Zor),e(j,err),e(j,iM),e(iM,Ppe),e(Ppe,orr),e(iM,rrr),e(iM,uX),e(uX,trr),e(iM,arr),e(j,nrr),e(j,dM),e(dM,Ipe),e(Ipe,srr),e(dM,lrr),e(dM,pX),e(pX,irr),e(dM,drr),e(j,crr),e(j,cM),e(cM,qpe),e(qpe,mrr),e(cM,frr),e(cM,_X),e(_X,grr),e(cM,hrr),e(j,urr),e(j,mM),e(mM,Npe),e(Npe,prr),e(mM,_rr),e(mM,bX),e(bX,brr),e(mM,Frr),e(j,vrr),e(j,fM),e(fM,jpe),e(jpe,Trr),e(fM,Mrr),e(fM,FX),e(FX,Err),e(fM,Crr),e(j,wrr),e(j,gM),e(gM,Dpe),e(Dpe,Arr),e(gM,yrr),e(gM,vX),e(vX,Lrr),e(gM,xrr),e(j,$rr),e(j,hM),e(hM,Gpe),e(Gpe,krr),e(hM,Srr),e(hM,TX),e(TX,Rrr),e(hM,Brr),e(j,Prr),e(j,uM),e(uM,Ope),e(Ope,Irr),e(uM,qrr),e(uM,MX),e(MX,Nrr),e(uM,jrr),e(j,Drr),e(j,pM),e(pM,Vpe),e(Vpe,Grr),e(pM,Orr),e(pM,EX),e(EX,Vrr),e(pM,Xrr),e(j,zrr),e(j,_M),e(_M,Xpe),e(Xpe,Qrr),e(_M,Wrr),e(_M,CX),e(CX,Hrr),e(_M,Urr),e(j,Jrr),e(j,bM),e(bM,zpe),e(zpe,Yrr),e(bM,Krr),e(bM,wX),e(wX,Zrr),e(bM,etr),e(j,otr),e(j,FM),e(FM,Qpe),e(Qpe,rtr),e(FM,ttr),e(FM,AX),e(AX,atr),e(FM,ntr),e(j,str),e(j,vM),e(vM,Wpe),e(Wpe,ltr),e(vM,itr),e(vM,yX),e(yX,dtr),e(vM,ctr),e(j,mtr),e(j,TM),e(TM,Hpe),e(Hpe,ftr),e(TM,gtr),e(TM,LX),e(LX,htr),e(TM,utr),e(j,ptr),e(j,$s),e($s,Upe),e(Upe,_tr),e($s,btr),e($s,xX),e(xX,Ftr),e($s,vtr),e($s,$X),e($X,Ttr),e($s,Mtr),e(j,Etr),e(j,MM),e(MM,Jpe),e(Jpe,Ctr),e(MM,wtr),e(MM,kX),e(kX,Atr),e(MM,ytr),e(j,Ltr),e(j,EM),e(EM,Ype),e(Ype,xtr),e(EM,$tr),e(EM,SX),e(SX,ktr),e(EM,Str),e(j,Rtr),e(j,CM),e(CM,Kpe),e(Kpe,Btr),e(CM,Ptr),e(CM,RX),e(RX,Itr),e(CM,qtr),e(j,Ntr),e(j,wM),e(wM,Zpe),e(Zpe,jtr),e(wM,Dtr),e(wM,BX),e(BX,Gtr),e(wM,Otr),e(j,Vtr),e(j,AM),e(AM,e_e),e(e_e,Xtr),e(AM,ztr),e(AM,PX),e(PX,Qtr),e(AM,Wtr),e(j,Htr),e(j,yM),e(yM,o_e),e(o_e,Utr),e(yM,Jtr),e(yM,IX),e(IX,Ytr),e(yM,Ktr),e(j,Ztr),e(j,LM),e(LM,r_e),e(r_e,ear),e(LM,oar),e(LM,qX),e(qX,rar),e(LM,tar),e(j,aar),e(j,xM),e(xM,t_e),e(t_e,nar),e(xM,sar),e(xM,NX),e(NX,lar),e(xM,iar),e(j,dar),e(j,$M),e($M,a_e),e(a_e,car),e($M,mar),e($M,jX),e(jX,far),e($M,gar),e(j,har),e(j,kM),e(kM,n_e),e(n_e,uar),e(kM,par),e(kM,DX),e(DX,_ar),e(kM,bar),e(j,Far),e(j,SM),e(SM,s_e),e(s_e,Tar),e(SM,Mar),e(SM,GX),e(GX,Ear),e(SM,Car),e(j,war),e(j,RM),e(RM,l_e),e(l_e,Aar),e(RM,yar),e(RM,OX),e(OX,Lar),e(RM,xar),e(j,$ar),e(j,BM),e(BM,i_e),e(i_e,kar),e(BM,Sar),e(BM,VX),e(VX,Rar),e(BM,Bar),e(j,Par),e(j,PM),e(PM,d_e),e(d_e,Iar),e(PM,qar),e(PM,XX),e(XX,Nar),e(PM,jar),e(j,Dar),e(j,IM),e(IM,c_e),e(c_e,Gar),e(IM,Oar),e(IM,zX),e(zX,Var),e(IM,Xar),e(j,zar),e(j,qM),e(qM,m_e),e(m_e,Qar),e(qM,War),e(qM,QX),e(QX,Har),e(qM,Uar),e(j,Jar),e(j,NM),e(NM,f_e),e(f_e,Yar),e(NM,Kar),e(NM,WX),e(WX,Zar),e(NM,enr),e(j,onr),e(j,jM),e(jM,g_e),e(g_e,rnr),e(jM,tnr),e(jM,HX),e(HX,anr),e(jM,nnr),e(j,snr),e(j,DM),e(DM,h_e),e(h_e,lnr),e(DM,inr),e(DM,UX),e(UX,dnr),e(DM,cnr),e(j,mnr),e(j,GM),e(GM,u_e),e(u_e,fnr),e(GM,gnr),e(GM,JX),e(JX,hnr),e(GM,unr),e(j,pnr),e(j,OM),e(OM,p_e),e(p_e,_nr),e(OM,bnr),e(OM,YX),e(YX,Fnr),e(OM,vnr),e(j,Tnr),e(j,VM),e(VM,__e),e(__e,Mnr),e(VM,Enr),e(VM,KX),e(KX,Cnr),e(VM,wnr),e(j,Anr),e(j,XM),e(XM,b_e),e(b_e,ynr),e(XM,Lnr),e(XM,ZX),e(ZX,xnr),e(XM,$nr),e(j,knr),e(j,zM),e(zM,F_e),e(F_e,Snr),e(zM,Rnr),e(zM,ez),e(ez,Bnr),e(zM,Pnr),e(j,Inr),e(j,QM),e(QM,v_e),e(v_e,qnr),e(QM,Nnr),e(QM,oz),e(oz,jnr),e(QM,Dnr),e(j,Gnr),e(j,WM),e(WM,T_e),e(T_e,Onr),e(WM,Vnr),e(WM,rz),e(rz,Xnr),e(WM,znr),e(j,Qnr),e(j,HM),e(HM,M_e),e(M_e,Wnr),e(HM,Hnr),e(HM,tz),e(tz,Unr),e(HM,Jnr),e(Cr,Ynr),M(UM,Cr,null),b(m,fPe,_),b(m,Bd,_),e(Bd,JM),e(JM,E_e),M(l8,E_e,null),e(Bd,Knr),e(Bd,C_e),e(C_e,Znr),b(m,gPe,_),b(m,Ko,_),M(i8,Ko,null),e(Ko,esr),e(Ko,Pd),e(Pd,osr),e(Pd,az),e(az,rsr),e(Pd,tsr),e(Pd,nz),e(nz,asr),e(Pd,nsr),e(Ko,ssr),e(Ko,d8),e(d8,lsr),e(d8,w_e),e(w_e,isr),e(d8,dsr),e(Ko,csr),e(Ko,Ct),M(c8,Ct,null),e(Ct,msr),e(Ct,A_e),e(A_e,fsr),e(Ct,gsr),e(Ct,Id),e(Id,hsr),e(Id,y_e),e(y_e,usr),e(Id,psr),e(Id,sz),e(sz,_sr),e(Id,bsr),e(Ct,Fsr),M(YM,Ct,null),e(Ko,vsr),e(Ko,wr),M(m8,wr,null),e(wr,Tsr),e(wr,L_e),e(L_e,Msr),e(wr,Esr),e(wr,Ja),e(Ja,Csr),e(Ja,x_e),e(x_e,wsr),e(Ja,Asr),e(Ja,$_e),e($_e,ysr),e(Ja,Lsr),e(Ja,k_e),e(k_e,xsr),e(Ja,$sr),e(wr,ksr),e(wr,ne),e(ne,KM),e(KM,S_e),e(S_e,Ssr),e(KM,Rsr),e(KM,lz),e(lz,Bsr),e(KM,Psr),e(ne,Isr),e(ne,ZM),e(ZM,R_e),e(R_e,qsr),e(ZM,Nsr),e(ZM,iz),e(iz,jsr),e(ZM,Dsr),e(ne,Gsr),e(ne,e4),e(e4,B_e),e(B_e,Osr),e(e4,Vsr),e(e4,dz),e(dz,Xsr),e(e4,zsr),e(ne,Qsr),e(ne,o4),e(o4,P_e),e(P_e,Wsr),e(o4,Hsr),e(o4,cz),e(cz,Usr),e(o4,Jsr),e(ne,Ysr),e(ne,r4),e(r4,I_e),e(I_e,Ksr),e(r4,Zsr),e(r4,mz),e(mz,elr),e(r4,olr),e(ne,rlr),e(ne,t4),e(t4,q_e),e(q_e,tlr),e(t4,alr),e(t4,fz),e(fz,nlr),e(t4,slr),e(ne,llr),e(ne,a4),e(a4,N_e),e(N_e,ilr),e(a4,dlr),e(a4,gz),e(gz,clr),e(a4,mlr),e(ne,flr),e(ne,n4),e(n4,j_e),e(j_e,glr),e(n4,hlr),e(n4,hz),e(hz,ulr),e(n4,plr),e(ne,_lr),e(ne,s4),e(s4,D_e),e(D_e,blr),e(s4,Flr),e(s4,uz),e(uz,vlr),e(s4,Tlr),e(ne,Mlr),e(ne,l4),e(l4,G_e),e(G_e,Elr),e(l4,Clr),e(l4,pz),e(pz,wlr),e(l4,Alr),e(ne,ylr),e(ne,i4),e(i4,O_e),e(O_e,Llr),e(i4,xlr),e(i4,_z),e(_z,$lr),e(i4,klr),e(ne,Slr),e(ne,d4),e(d4,V_e),e(V_e,Rlr),e(d4,Blr),e(d4,bz),e(bz,Plr),e(d4,Ilr),e(ne,qlr),e(ne,c4),e(c4,X_e),e(X_e,Nlr),e(c4,jlr),e(c4,Fz),e(Fz,Dlr),e(c4,Glr),e(ne,Olr),e(ne,m4),e(m4,z_e),e(z_e,Vlr),e(m4,Xlr),e(m4,vz),e(vz,zlr),e(m4,Qlr),e(ne,Wlr),e(ne,f4),e(f4,Q_e),e(Q_e,Hlr),e(f4,Ulr),e(f4,Tz),e(Tz,Jlr),e(f4,Ylr),e(ne,Klr),e(ne,g4),e(g4,W_e),e(W_e,Zlr),e(g4,eir),e(g4,Mz),e(Mz,oir),e(g4,rir),e(ne,tir),e(ne,h4),e(h4,H_e),e(H_e,air),e(h4,nir),e(h4,Ez),e(Ez,sir),e(h4,lir),e(ne,iir),e(ne,u4),e(u4,U_e),e(U_e,dir),e(u4,cir),e(u4,Cz),e(Cz,mir),e(u4,fir),e(ne,gir),e(ne,p4),e(p4,J_e),e(J_e,hir),e(p4,uir),e(p4,wz),e(wz,pir),e(p4,_ir),e(ne,bir),e(ne,_4),e(_4,Y_e),e(Y_e,Fir),e(_4,vir),e(_4,Az),e(Az,Tir),e(_4,Mir),e(ne,Eir),e(ne,b4),e(b4,K_e),e(K_e,Cir),e(b4,wir),e(b4,yz),e(yz,Air),e(b4,yir),e(ne,Lir),e(ne,F4),e(F4,Z_e),e(Z_e,xir),e(F4,$ir),e(F4,Lz),e(Lz,kir),e(F4,Sir),e(ne,Rir),e(ne,v4),e(v4,ebe),e(ebe,Bir),e(v4,Pir),e(v4,xz),e(xz,Iir),e(v4,qir),e(wr,Nir),M(T4,wr,null),b(m,hPe,_),b(m,qd,_),e(qd,M4),e(M4,obe),M(f8,obe,null),e(qd,jir),e(qd,rbe),e(rbe,Dir),b(m,uPe,_),b(m,Zo,_),M(g8,Zo,null),e(Zo,Gir),e(Zo,Nd),e(Nd,Oir),e(Nd,$z),e($z,Vir),e(Nd,Xir),e(Nd,kz),e(kz,zir),e(Nd,Qir),e(Zo,Wir),e(Zo,h8),e(h8,Hir),e(h8,tbe),e(tbe,Uir),e(h8,Jir),e(Zo,Yir),e(Zo,wt),M(u8,wt,null),e(wt,Kir),e(wt,abe),e(abe,Zir),e(wt,edr),e(wt,jd),e(jd,odr),e(jd,nbe),e(nbe,rdr),e(jd,tdr),e(jd,Sz),e(Sz,adr),e(jd,ndr),e(wt,sdr),M(E4,wt,null),e(Zo,ldr),e(Zo,Ar),M(p8,Ar,null),e(Ar,idr),e(Ar,sbe),e(sbe,ddr),e(Ar,cdr),e(Ar,Ya),e(Ya,mdr),e(Ya,lbe),e(lbe,fdr),e(Ya,gdr),e(Ya,ibe),e(ibe,hdr),e(Ya,udr),e(Ya,dbe),e(dbe,pdr),e(Ya,_dr),e(Ar,bdr),e(Ar,Te),e(Te,C4),e(C4,cbe),e(cbe,Fdr),e(C4,vdr),e(C4,Rz),e(Rz,Tdr),e(C4,Mdr),e(Te,Edr),e(Te,w4),e(w4,mbe),e(mbe,Cdr),e(w4,wdr),e(w4,Bz),e(Bz,Adr),e(w4,ydr),e(Te,Ldr),e(Te,A4),e(A4,fbe),e(fbe,xdr),e(A4,$dr),e(A4,Pz),e(Pz,kdr),e(A4,Sdr),e(Te,Rdr),e(Te,y4),e(y4,gbe),e(gbe,Bdr),e(y4,Pdr),e(y4,Iz),e(Iz,Idr),e(y4,qdr),e(Te,Ndr),e(Te,L4),e(L4,hbe),e(hbe,jdr),e(L4,Ddr),e(L4,qz),e(qz,Gdr),e(L4,Odr),e(Te,Vdr),e(Te,x4),e(x4,ube),e(ube,Xdr),e(x4,zdr),e(x4,Nz),e(Nz,Qdr),e(x4,Wdr),e(Te,Hdr),e(Te,$4),e($4,pbe),e(pbe,Udr),e($4,Jdr),e($4,jz),e(jz,Ydr),e($4,Kdr),e(Te,Zdr),e(Te,k4),e(k4,_be),e(_be,ecr),e(k4,ocr),e(k4,Dz),e(Dz,rcr),e(k4,tcr),e(Te,acr),e(Te,S4),e(S4,bbe),e(bbe,ncr),e(S4,scr),e(S4,Gz),e(Gz,lcr),e(S4,icr),e(Te,dcr),e(Te,R4),e(R4,Fbe),e(Fbe,ccr),e(R4,mcr),e(R4,Oz),e(Oz,fcr),e(R4,gcr),e(Te,hcr),e(Te,B4),e(B4,vbe),e(vbe,ucr),e(B4,pcr),e(B4,Vz),e(Vz,_cr),e(B4,bcr),e(Te,Fcr),e(Te,P4),e(P4,Tbe),e(Tbe,vcr),e(P4,Tcr),e(P4,Xz),e(Xz,Mcr),e(P4,Ecr),e(Ar,Ccr),M(I4,Ar,null),b(m,pPe,_),b(m,Dd,_),e(Dd,q4),e(q4,Mbe),M(_8,Mbe,null),e(Dd,wcr),e(Dd,Ebe),e(Ebe,Acr),b(m,_Pe,_),b(m,er,_),M(b8,er,null),e(er,ycr),e(er,Gd),e(Gd,Lcr),e(Gd,zz),e(zz,xcr),e(Gd,$cr),e(Gd,Qz),e(Qz,kcr),e(Gd,Scr),e(er,Rcr),e(er,F8),e(F8,Bcr),e(F8,Cbe),e(Cbe,Pcr),e(F8,Icr),e(er,qcr),e(er,At),M(v8,At,null),e(At,Ncr),e(At,wbe),e(wbe,jcr),e(At,Dcr),e(At,Od),e(Od,Gcr),e(Od,Abe),e(Abe,Ocr),e(Od,Vcr),e(Od,Wz),e(Wz,Xcr),e(Od,zcr),e(At,Qcr),M(N4,At,null),e(er,Wcr),e(er,yr),M(T8,yr,null),e(yr,Hcr),e(yr,ybe),e(ybe,Ucr),e(yr,Jcr),e(yr,Ka),e(Ka,Ycr),e(Ka,Lbe),e(Lbe,Kcr),e(Ka,Zcr),e(Ka,xbe),e(xbe,emr),e(Ka,omr),e(Ka,$be),e($be,rmr),e(Ka,tmr),e(yr,amr),e(yr,M8),e(M8,j4),e(j4,kbe),e(kbe,nmr),e(j4,smr),e(j4,Hz),e(Hz,lmr),e(j4,imr),e(M8,dmr),e(M8,D4),e(D4,Sbe),e(Sbe,cmr),e(D4,mmr),e(D4,Uz),e(Uz,fmr),e(D4,gmr),e(yr,hmr),M(G4,yr,null),b(m,bPe,_),b(m,Vd,_),e(Vd,O4),e(O4,Rbe),M(E8,Rbe,null),e(Vd,umr),e(Vd,Bbe),e(Bbe,pmr),b(m,FPe,_),b(m,or,_),M(C8,or,null),e(or,_mr),e(or,Xd),e(Xd,bmr),e(Xd,Jz),e(Jz,Fmr),e(Xd,vmr),e(Xd,Yz),e(Yz,Tmr),e(Xd,Mmr),e(or,Emr),e(or,w8),e(w8,Cmr),e(w8,Pbe),e(Pbe,wmr),e(w8,Amr),e(or,ymr),e(or,yt),M(A8,yt,null),e(yt,Lmr),e(yt,Ibe),e(Ibe,xmr),e(yt,$mr),e(yt,zd),e(zd,kmr),e(zd,qbe),e(qbe,Smr),e(zd,Rmr),e(zd,Kz),e(Kz,Bmr),e(zd,Pmr),e(yt,Imr),M(V4,yt,null),e(or,qmr),e(or,Lr),M(y8,Lr,null),e(Lr,Nmr),e(Lr,Nbe),e(Nbe,jmr),e(Lr,Dmr),e(Lr,Za),e(Za,Gmr),e(Za,jbe),e(jbe,Omr),e(Za,Vmr),e(Za,Dbe),e(Dbe,Xmr),e(Za,zmr),e(Za,Gbe),e(Gbe,Qmr),e(Za,Wmr),e(Lr,Hmr),e(Lr,ie),e(ie,X4),e(X4,Obe),e(Obe,Umr),e(X4,Jmr),e(X4,Zz),e(Zz,Ymr),e(X4,Kmr),e(ie,Zmr),e(ie,z4),e(z4,Vbe),e(Vbe,efr),e(z4,ofr),e(z4,eQ),e(eQ,rfr),e(z4,tfr),e(ie,afr),e(ie,Q4),e(Q4,Xbe),e(Xbe,nfr),e(Q4,sfr),e(Q4,oQ),e(oQ,lfr),e(Q4,ifr),e(ie,dfr),e(ie,W4),e(W4,zbe),e(zbe,cfr),e(W4,mfr),e(W4,rQ),e(rQ,ffr),e(W4,gfr),e(ie,hfr),e(ie,H4),e(H4,Qbe),e(Qbe,ufr),e(H4,pfr),e(H4,tQ),e(tQ,_fr),e(H4,bfr),e(ie,Ffr),e(ie,U4),e(U4,Wbe),e(Wbe,vfr),e(U4,Tfr),e(U4,aQ),e(aQ,Mfr),e(U4,Efr),e(ie,Cfr),e(ie,J4),e(J4,Hbe),e(Hbe,wfr),e(J4,Afr),e(J4,nQ),e(nQ,yfr),e(J4,Lfr),e(ie,xfr),e(ie,Y4),e(Y4,Ube),e(Ube,$fr),e(Y4,kfr),e(Y4,sQ),e(sQ,Sfr),e(Y4,Rfr),e(ie,Bfr),e(ie,K4),e(K4,Jbe),e(Jbe,Pfr),e(K4,Ifr),e(K4,lQ),e(lQ,qfr),e(K4,Nfr),e(ie,jfr),e(ie,Z4),e(Z4,Ybe),e(Ybe,Dfr),e(Z4,Gfr),e(Z4,iQ),e(iQ,Ofr),e(Z4,Vfr),e(ie,Xfr),e(ie,eE),e(eE,Kbe),e(Kbe,zfr),e(eE,Qfr),e(eE,dQ),e(dQ,Wfr),e(eE,Hfr),e(ie,Ufr),e(ie,oE),e(oE,Zbe),e(Zbe,Jfr),e(oE,Yfr),e(oE,cQ),e(cQ,Kfr),e(oE,Zfr),e(ie,egr),e(ie,rE),e(rE,e2e),e(e2e,ogr),e(rE,rgr),e(rE,mQ),e(mQ,tgr),e(rE,agr),e(ie,ngr),e(ie,tE),e(tE,o2e),e(o2e,sgr),e(tE,lgr),e(tE,fQ),e(fQ,igr),e(tE,dgr),e(ie,cgr),e(ie,aE),e(aE,r2e),e(r2e,mgr),e(aE,fgr),e(aE,gQ),e(gQ,ggr),e(aE,hgr),e(ie,ugr),e(ie,nE),e(nE,t2e),e(t2e,pgr),e(nE,_gr),e(nE,hQ),e(hQ,bgr),e(nE,Fgr),e(ie,vgr),e(ie,sE),e(sE,a2e),e(a2e,Tgr),e(sE,Mgr),e(sE,uQ),e(uQ,Egr),e(sE,Cgr),e(ie,wgr),e(ie,lE),e(lE,n2e),e(n2e,Agr),e(lE,ygr),e(lE,pQ),e(pQ,Lgr),e(lE,xgr),e(ie,$gr),e(ie,iE),e(iE,s2e),e(s2e,kgr),e(iE,Sgr),e(iE,_Q),e(_Q,Rgr),e(iE,Bgr),e(ie,Pgr),e(ie,dE),e(dE,l2e),e(l2e,Igr),e(dE,qgr),e(dE,bQ),e(bQ,Ngr),e(dE,jgr),e(Lr,Dgr),M(cE,Lr,null),b(m,vPe,_),b(m,Qd,_),e(Qd,mE),e(mE,i2e),M(L8,i2e,null),e(Qd,Ggr),e(Qd,d2e),e(d2e,Ogr),b(m,TPe,_),b(m,rr,_),M(x8,rr,null),e(rr,Vgr),e(rr,Wd),e(Wd,Xgr),e(Wd,FQ),e(FQ,zgr),e(Wd,Qgr),e(Wd,vQ),e(vQ,Wgr),e(Wd,Hgr),e(rr,Ugr),e(rr,$8),e($8,Jgr),e($8,c2e),e(c2e,Ygr),e($8,Kgr),e(rr,Zgr),e(rr,Lt),M(k8,Lt,null),e(Lt,ehr),e(Lt,m2e),e(m2e,ohr),e(Lt,rhr),e(Lt,Hd),e(Hd,thr),e(Hd,f2e),e(f2e,ahr),e(Hd,nhr),e(Hd,TQ),e(TQ,shr),e(Hd,lhr),e(Lt,ihr),M(fE,Lt,null),e(rr,dhr),e(rr,xr),M(S8,xr,null),e(xr,chr),e(xr,g2e),e(g2e,mhr),e(xr,fhr),e(xr,en),e(en,ghr),e(en,h2e),e(h2e,hhr),e(en,uhr),e(en,u2e),e(u2e,phr),e(en,_hr),e(en,p2e),e(p2e,bhr),e(en,Fhr),e(xr,vhr),e(xr,ye),e(ye,gE),e(gE,_2e),e(_2e,Thr),e(gE,Mhr),e(gE,MQ),e(MQ,Ehr),e(gE,Chr),e(ye,whr),e(ye,hE),e(hE,b2e),e(b2e,Ahr),e(hE,yhr),e(hE,EQ),e(EQ,Lhr),e(hE,xhr),e(ye,$hr),e(ye,uE),e(uE,F2e),e(F2e,khr),e(uE,Shr),e(uE,CQ),e(CQ,Rhr),e(uE,Bhr),e(ye,Phr),e(ye,pE),e(pE,v2e),e(v2e,Ihr),e(pE,qhr),e(pE,wQ),e(wQ,Nhr),e(pE,jhr),e(ye,Dhr),e(ye,_E),e(_E,T2e),e(T2e,Ghr),e(_E,Ohr),e(_E,AQ),e(AQ,Vhr),e(_E,Xhr),e(ye,zhr),e(ye,bE),e(bE,M2e),e(M2e,Qhr),e(bE,Whr),e(bE,yQ),e(yQ,Hhr),e(bE,Uhr),e(ye,Jhr),e(ye,FE),e(FE,E2e),e(E2e,Yhr),e(FE,Khr),e(FE,LQ),e(LQ,Zhr),e(FE,eur),e(ye,our),e(ye,vE),e(vE,C2e),e(C2e,rur),e(vE,tur),e(vE,xQ),e(xQ,aur),e(vE,nur),e(ye,sur),e(ye,TE),e(TE,w2e),e(w2e,lur),e(TE,iur),e(TE,$Q),e($Q,dur),e(TE,cur),e(ye,mur),e(ye,ME),e(ME,A2e),e(A2e,fur),e(ME,gur),e(ME,kQ),e(kQ,hur),e(ME,uur),e(xr,pur),M(EE,xr,null),b(m,MPe,_),b(m,Ud,_),e(Ud,CE),e(CE,y2e),M(R8,y2e,null),e(Ud,_ur),e(Ud,L2e),e(L2e,bur),b(m,EPe,_),b(m,tr,_),M(B8,tr,null),e(tr,Fur),e(tr,Jd),e(Jd,vur),e(Jd,SQ),e(SQ,Tur),e(Jd,Mur),e(Jd,RQ),e(RQ,Eur),e(Jd,Cur),e(tr,wur),e(tr,P8),e(P8,Aur),e(P8,x2e),e(x2e,yur),e(P8,Lur),e(tr,xur),e(tr,xt),M(I8,xt,null),e(xt,$ur),e(xt,$2e),e($2e,kur),e(xt,Sur),e(xt,Yd),e(Yd,Rur),e(Yd,k2e),e(k2e,Bur),e(Yd,Pur),e(Yd,BQ),e(BQ,Iur),e(Yd,qur),e(xt,Nur),M(wE,xt,null),e(tr,jur),e(tr,$r),M(q8,$r,null),e($r,Dur),e($r,S2e),e(S2e,Gur),e($r,Our),e($r,on),e(on,Vur),e(on,R2e),e(R2e,Xur),e(on,zur),e(on,B2e),e(B2e,Qur),e(on,Wur),e(on,P2e),e(P2e,Hur),e(on,Uur),e($r,Jur),e($r,Z),e(Z,AE),e(AE,I2e),e(I2e,Yur),e(AE,Kur),e(AE,PQ),e(PQ,Zur),e(AE,epr),e(Z,opr),e(Z,yE),e(yE,q2e),e(q2e,rpr),e(yE,tpr),e(yE,IQ),e(IQ,apr),e(yE,npr),e(Z,spr),e(Z,LE),e(LE,N2e),e(N2e,lpr),e(LE,ipr),e(LE,qQ),e(qQ,dpr),e(LE,cpr),e(Z,mpr),e(Z,xE),e(xE,j2e),e(j2e,fpr),e(xE,gpr),e(xE,NQ),e(NQ,hpr),e(xE,upr),e(Z,ppr),e(Z,$E),e($E,D2e),e(D2e,_pr),e($E,bpr),e($E,jQ),e(jQ,Fpr),e($E,vpr),e(Z,Tpr),e(Z,kE),e(kE,G2e),e(G2e,Mpr),e(kE,Epr),e(kE,DQ),e(DQ,Cpr),e(kE,wpr),e(Z,Apr),e(Z,SE),e(SE,O2e),e(O2e,ypr),e(SE,Lpr),e(SE,GQ),e(GQ,xpr),e(SE,$pr),e(Z,kpr),e(Z,RE),e(RE,V2e),e(V2e,Spr),e(RE,Rpr),e(RE,OQ),e(OQ,Bpr),e(RE,Ppr),e(Z,Ipr),e(Z,BE),e(BE,X2e),e(X2e,qpr),e(BE,Npr),e(BE,VQ),e(VQ,jpr),e(BE,Dpr),e(Z,Gpr),e(Z,PE),e(PE,z2e),e(z2e,Opr),e(PE,Vpr),e(PE,XQ),e(XQ,Xpr),e(PE,zpr),e(Z,Qpr),e(Z,IE),e(IE,Q2e),e(Q2e,Wpr),e(IE,Hpr),e(IE,zQ),e(zQ,Upr),e(IE,Jpr),e(Z,Ypr),e(Z,qE),e(qE,W2e),e(W2e,Kpr),e(qE,Zpr),e(qE,QQ),e(QQ,e_r),e(qE,o_r),e(Z,r_r),e(Z,NE),e(NE,H2e),e(H2e,t_r),e(NE,a_r),e(NE,WQ),e(WQ,n_r),e(NE,s_r),e(Z,l_r),e(Z,jE),e(jE,U2e),e(U2e,i_r),e(jE,d_r),e(jE,HQ),e(HQ,c_r),e(jE,m_r),e(Z,f_r),e(Z,DE),e(DE,J2e),e(J2e,g_r),e(DE,h_r),e(DE,UQ),e(UQ,u_r),e(DE,p_r),e(Z,__r),e(Z,GE),e(GE,Y2e),e(Y2e,b_r),e(GE,F_r),e(GE,JQ),e(JQ,v_r),e(GE,T_r),e(Z,M_r),e(Z,OE),e(OE,K2e),e(K2e,E_r),e(OE,C_r),e(OE,YQ),e(YQ,w_r),e(OE,A_r),e(Z,y_r),e(Z,VE),e(VE,Z2e),e(Z2e,L_r),e(VE,x_r),e(VE,KQ),e(KQ,$_r),e(VE,k_r),e(Z,S_r),e(Z,XE),e(XE,eFe),e(eFe,R_r),e(XE,B_r),e(XE,ZQ),e(ZQ,P_r),e(XE,I_r),e(Z,q_r),e(Z,zE),e(zE,oFe),e(oFe,N_r),e(zE,j_r),e(zE,eW),e(eW,D_r),e(zE,G_r),e(Z,O_r),e(Z,QE),e(QE,rFe),e(rFe,V_r),e(QE,X_r),e(QE,oW),e(oW,z_r),e(QE,Q_r),e(Z,W_r),e(Z,WE),e(WE,tFe),e(tFe,H_r),e(WE,U_r),e(WE,rW),e(rW,J_r),e(WE,Y_r),e(Z,K_r),e(Z,HE),e(HE,aFe),e(aFe,Z_r),e(HE,ebr),e(HE,tW),e(tW,obr),e(HE,rbr),e(Z,tbr),e(Z,UE),e(UE,nFe),e(nFe,abr),e(UE,nbr),e(UE,aW),e(aW,sbr),e(UE,lbr),e(Z,ibr),e(Z,JE),e(JE,sFe),e(sFe,dbr),e(JE,cbr),e(JE,nW),e(nW,mbr),e(JE,fbr),e(Z,gbr),e(Z,YE),e(YE,lFe),e(lFe,hbr),e(YE,ubr),e(YE,sW),e(sW,pbr),e(YE,_br),e($r,bbr),M(KE,$r,null),b(m,CPe,_),b(m,Kd,_),e(Kd,ZE),e(ZE,iFe),M(N8,iFe,null),e(Kd,Fbr),e(Kd,dFe),e(dFe,vbr),b(m,wPe,_),b(m,ar,_),M(j8,ar,null),e(ar,Tbr),e(ar,Zd),e(Zd,Mbr),e(Zd,lW),e(lW,Ebr),e(Zd,Cbr),e(Zd,iW),e(iW,wbr),e(Zd,Abr),e(ar,ybr),e(ar,D8),e(D8,Lbr),e(D8,cFe),e(cFe,xbr),e(D8,$br),e(ar,kbr),e(ar,$t),M(G8,$t,null),e($t,Sbr),e($t,mFe),e(mFe,Rbr),e($t,Bbr),e($t,ec),e(ec,Pbr),e(ec,fFe),e(fFe,Ibr),e(ec,qbr),e(ec,dW),e(dW,Nbr),e(ec,jbr),e($t,Dbr),M(e5,$t,null),e(ar,Gbr),e(ar,kr),M(O8,kr,null),e(kr,Obr),e(kr,gFe),e(gFe,Vbr),e(kr,Xbr),e(kr,rn),e(rn,zbr),e(rn,hFe),e(hFe,Qbr),e(rn,Wbr),e(rn,uFe),e(uFe,Hbr),e(rn,Ubr),e(rn,pFe),e(pFe,Jbr),e(rn,Ybr),e(kr,Kbr),e(kr,ue),e(ue,o5),e(o5,_Fe),e(_Fe,Zbr),e(o5,e2r),e(o5,cW),e(cW,o2r),e(o5,r2r),e(ue,t2r),e(ue,r5),e(r5,bFe),e(bFe,a2r),e(r5,n2r),e(r5,mW),e(mW,s2r),e(r5,l2r),e(ue,i2r),e(ue,t5),e(t5,FFe),e(FFe,d2r),e(t5,c2r),e(t5,fW),e(fW,m2r),e(t5,f2r),e(ue,g2r),e(ue,a5),e(a5,vFe),e(vFe,h2r),e(a5,u2r),e(a5,gW),e(gW,p2r),e(a5,_2r),e(ue,b2r),e(ue,n5),e(n5,TFe),e(TFe,F2r),e(n5,v2r),e(n5,hW),e(hW,T2r),e(n5,M2r),e(ue,E2r),e(ue,s5),e(s5,MFe),e(MFe,C2r),e(s5,w2r),e(s5,uW),e(uW,A2r),e(s5,y2r),e(ue,L2r),e(ue,l5),e(l5,EFe),e(EFe,x2r),e(l5,$2r),e(l5,pW),e(pW,k2r),e(l5,S2r),e(ue,R2r),e(ue,i5),e(i5,CFe),e(CFe,B2r),e(i5,P2r),e(i5,_W),e(_W,I2r),e(i5,q2r),e(ue,N2r),e(ue,d5),e(d5,wFe),e(wFe,j2r),e(d5,D2r),e(d5,bW),e(bW,G2r),e(d5,O2r),e(ue,V2r),e(ue,c5),e(c5,AFe),e(AFe,X2r),e(c5,z2r),e(c5,FW),e(FW,Q2r),e(c5,W2r),e(ue,H2r),e(ue,m5),e(m5,yFe),e(yFe,U2r),e(m5,J2r),e(m5,vW),e(vW,Y2r),e(m5,K2r),e(ue,Z2r),e(ue,f5),e(f5,LFe),e(LFe,eFr),e(f5,oFr),e(f5,TW),e(TW,rFr),e(f5,tFr),e(ue,aFr),e(ue,g5),e(g5,xFe),e(xFe,nFr),e(g5,sFr),e(g5,MW),e(MW,lFr),e(g5,iFr),e(ue,dFr),e(ue,h5),e(h5,$Fe),e($Fe,cFr),e(h5,mFr),e(h5,EW),e(EW,fFr),e(h5,gFr),e(ue,hFr),e(ue,u5),e(u5,kFe),e(kFe,uFr),e(u5,pFr),e(u5,CW),e(CW,_Fr),e(u5,bFr),e(ue,FFr),e(ue,p5),e(p5,SFe),e(SFe,vFr),e(p5,TFr),e(p5,wW),e(wW,MFr),e(p5,EFr),e(ue,CFr),e(ue,_5),e(_5,RFe),e(RFe,wFr),e(_5,AFr),e(_5,AW),e(AW,yFr),e(_5,LFr),e(kr,xFr),M(b5,kr,null),b(m,APe,_),b(m,oc,_),e(oc,F5),e(F5,BFe),M(V8,BFe,null),e(oc,$Fr),e(oc,PFe),e(PFe,kFr),b(m,yPe,_),b(m,nr,_),M(X8,nr,null),e(nr,SFr),e(nr,rc),e(rc,RFr),e(rc,yW),e(yW,BFr),e(rc,PFr),e(rc,LW),e(LW,IFr),e(rc,qFr),e(nr,NFr),e(nr,z8),e(z8,jFr),e(z8,IFe),e(IFe,DFr),e(z8,GFr),e(nr,OFr),e(nr,kt),M(Q8,kt,null),e(kt,VFr),e(kt,qFe),e(qFe,XFr),e(kt,zFr),e(kt,tc),e(tc,QFr),e(tc,NFe),e(NFe,WFr),e(tc,HFr),e(tc,xW),e(xW,UFr),e(tc,JFr),e(kt,YFr),M(v5,kt,null),e(nr,KFr),e(nr,Sr),M(W8,Sr,null),e(Sr,ZFr),e(Sr,jFe),e(jFe,evr),e(Sr,ovr),e(Sr,tn),e(tn,rvr),e(tn,DFe),e(DFe,tvr),e(tn,avr),e(tn,GFe),e(GFe,nvr),e(tn,svr),e(tn,OFe),e(OFe,lvr),e(tn,ivr),e(Sr,dvr),e(Sr,VFe),e(VFe,T5),e(T5,XFe),e(XFe,cvr),e(T5,mvr),e(T5,$W),e($W,fvr),e(T5,gvr),e(Sr,hvr),M(M5,Sr,null),b(m,LPe,_),b(m,ac,_),e(ac,E5),e(E5,zFe),M(H8,zFe,null),e(ac,uvr),e(ac,QFe),e(QFe,pvr),b(m,xPe,_),b(m,sr,_),M(U8,sr,null),e(sr,_vr),e(sr,nc),e(nc,bvr),e(nc,kW),e(kW,Fvr),e(nc,vvr),e(nc,SW),e(SW,Tvr),e(nc,Mvr),e(sr,Evr),e(sr,J8),e(J8,Cvr),e(J8,WFe),e(WFe,wvr),e(J8,Avr),e(sr,yvr),e(sr,St),M(Y8,St,null),e(St,Lvr),e(St,HFe),e(HFe,xvr),e(St,$vr),e(St,sc),e(sc,kvr),e(sc,UFe),e(UFe,Svr),e(sc,Rvr),e(sc,RW),e(RW,Bvr),e(sc,Pvr),e(St,Ivr),M(C5,St,null),e(sr,qvr),e(sr,Rr),M(K8,Rr,null),e(Rr,Nvr),e(Rr,JFe),e(JFe,jvr),e(Rr,Dvr),e(Rr,an),e(an,Gvr),e(an,YFe),e(YFe,Ovr),e(an,Vvr),e(an,KFe),e(KFe,Xvr),e(an,zvr),e(an,ZFe),e(ZFe,Qvr),e(an,Wvr),e(Rr,Hvr),e(Rr,de),e(de,w5),e(w5,eve),e(eve,Uvr),e(w5,Jvr),e(w5,BW),e(BW,Yvr),e(w5,Kvr),e(de,Zvr),e(de,A5),e(A5,ove),e(ove,e1r),e(A5,o1r),e(A5,PW),e(PW,r1r),e(A5,t1r),e(de,a1r),e(de,y5),e(y5,rve),e(rve,n1r),e(y5,s1r),e(y5,IW),e(IW,l1r),e(y5,i1r),e(de,d1r),e(de,L5),e(L5,tve),e(tve,c1r),e(L5,m1r),e(L5,qW),e(qW,f1r),e(L5,g1r),e(de,h1r),e(de,x5),e(x5,ave),e(ave,u1r),e(x5,p1r),e(x5,NW),e(NW,_1r),e(x5,b1r),e(de,F1r),e(de,$5),e($5,nve),e(nve,v1r),e($5,T1r),e($5,jW),e(jW,M1r),e($5,E1r),e(de,C1r),e(de,k5),e(k5,sve),e(sve,w1r),e(k5,A1r),e(k5,DW),e(DW,y1r),e(k5,L1r),e(de,x1r),e(de,S5),e(S5,lve),e(lve,$1r),e(S5,k1r),e(S5,GW),e(GW,S1r),e(S5,R1r),e(de,B1r),e(de,R5),e(R5,ive),e(ive,P1r),e(R5,I1r),e(R5,OW),e(OW,q1r),e(R5,N1r),e(de,j1r),e(de,B5),e(B5,dve),e(dve,D1r),e(B5,G1r),e(B5,VW),e(VW,O1r),e(B5,V1r),e(de,X1r),e(de,P5),e(P5,cve),e(cve,z1r),e(P5,Q1r),e(P5,XW),e(XW,W1r),e(P5,H1r),e(de,U1r),e(de,I5),e(I5,mve),e(mve,J1r),e(I5,Y1r),e(I5,zW),e(zW,K1r),e(I5,Z1r),e(de,eTr),e(de,q5),e(q5,fve),e(fve,oTr),e(q5,rTr),e(q5,QW),e(QW,tTr),e(q5,aTr),e(de,nTr),e(de,N5),e(N5,gve),e(gve,sTr),e(N5,lTr),e(N5,WW),e(WW,iTr),e(N5,dTr),e(de,cTr),e(de,j5),e(j5,hve),e(hve,mTr),e(j5,fTr),e(j5,HW),e(HW,gTr),e(j5,hTr),e(de,uTr),e(de,D5),e(D5,uve),e(uve,pTr),e(D5,_Tr),e(D5,UW),e(UW,bTr),e(D5,FTr),e(de,vTr),e(de,G5),e(G5,pve),e(pve,TTr),e(G5,MTr),e(G5,JW),e(JW,ETr),e(G5,CTr),e(de,wTr),e(de,O5),e(O5,_ve),e(_ve,ATr),e(O5,yTr),e(O5,YW),e(YW,LTr),e(O5,xTr),e(de,$Tr),e(de,V5),e(V5,bve),e(bve,kTr),e(V5,STr),e(V5,KW),e(KW,RTr),e(V5,BTr),e(de,PTr),e(de,X5),e(X5,Fve),e(Fve,ITr),e(X5,qTr),e(X5,ZW),e(ZW,NTr),e(X5,jTr),e(Rr,DTr),M(z5,Rr,null),b(m,$Pe,_),b(m,lc,_),e(lc,Q5),e(Q5,vve),M(Z8,vve,null),e(lc,GTr),e(lc,Tve),e(Tve,OTr),b(m,kPe,_),b(m,lr,_),M(e7,lr,null),e(lr,VTr),e(lr,ic),e(ic,XTr),e(ic,eH),e(eH,zTr),e(ic,QTr),e(ic,oH),e(oH,WTr),e(ic,HTr),e(lr,UTr),e(lr,o7),e(o7,JTr),e(o7,Mve),e(Mve,YTr),e(o7,KTr),e(lr,ZTr),e(lr,Rt),M(r7,Rt,null),e(Rt,eMr),e(Rt,Eve),e(Eve,oMr),e(Rt,rMr),e(Rt,dc),e(dc,tMr),e(dc,Cve),e(Cve,aMr),e(dc,nMr),e(dc,rH),e(rH,sMr),e(dc,lMr),e(Rt,iMr),M(W5,Rt,null),e(lr,dMr),e(lr,Br),M(t7,Br,null),e(Br,cMr),e(Br,wve),e(wve,mMr),e(Br,fMr),e(Br,nn),e(nn,gMr),e(nn,Ave),e(Ave,hMr),e(nn,uMr),e(nn,yve),e(yve,pMr),e(nn,_Mr),e(nn,Lve),e(Lve,bMr),e(nn,FMr),e(Br,vMr),e(Br,ce),e(ce,H5),e(H5,xve),e(xve,TMr),e(H5,MMr),e(H5,tH),e(tH,EMr),e(H5,CMr),e(ce,wMr),e(ce,U5),e(U5,$ve),e($ve,AMr),e(U5,yMr),e(U5,aH),e(aH,LMr),e(U5,xMr),e(ce,$Mr),e(ce,J5),e(J5,kve),e(kve,kMr),e(J5,SMr),e(J5,nH),e(nH,RMr),e(J5,BMr),e(ce,PMr),e(ce,Y5),e(Y5,Sve),e(Sve,IMr),e(Y5,qMr),e(Y5,sH),e(sH,NMr),e(Y5,jMr),e(ce,DMr),e(ce,K5),e(K5,Rve),e(Rve,GMr),e(K5,OMr),e(K5,lH),e(lH,VMr),e(K5,XMr),e(ce,zMr),e(ce,Z5),e(Z5,Bve),e(Bve,QMr),e(Z5,WMr),e(Z5,iH),e(iH,HMr),e(Z5,UMr),e(ce,JMr),e(ce,eC),e(eC,Pve),e(Pve,YMr),e(eC,KMr),e(eC,dH),e(dH,ZMr),e(eC,e4r),e(ce,o4r),e(ce,oC),e(oC,Ive),e(Ive,r4r),e(oC,t4r),e(oC,cH),e(cH,a4r),e(oC,n4r),e(ce,s4r),e(ce,rC),e(rC,qve),e(qve,l4r),e(rC,i4r),e(rC,mH),e(mH,d4r),e(rC,c4r),e(ce,m4r),e(ce,tC),e(tC,Nve),e(Nve,f4r),e(tC,g4r),e(tC,fH),e(fH,h4r),e(tC,u4r),e(ce,p4r),e(ce,aC),e(aC,jve),e(jve,_4r),e(aC,b4r),e(aC,gH),e(gH,F4r),e(aC,v4r),e(ce,T4r),e(ce,nC),e(nC,Dve),e(Dve,M4r),e(nC,E4r),e(nC,hH),e(hH,C4r),e(nC,w4r),e(ce,A4r),e(ce,sC),e(sC,Gve),e(Gve,y4r),e(sC,L4r),e(sC,uH),e(uH,x4r),e(sC,$4r),e(ce,k4r),e(ce,lC),e(lC,Ove),e(Ove,S4r),e(lC,R4r),e(lC,pH),e(pH,B4r),e(lC,P4r),e(ce,I4r),e(ce,iC),e(iC,Vve),e(Vve,q4r),e(iC,N4r),e(iC,_H),e(_H,j4r),e(iC,D4r),e(ce,G4r),e(ce,dC),e(dC,Xve),e(Xve,O4r),e(dC,V4r),e(dC,bH),e(bH,X4r),e(dC,z4r),e(ce,Q4r),e(ce,cC),e(cC,zve),e(zve,W4r),e(cC,H4r),e(cC,FH),e(FH,U4r),e(cC,J4r),e(ce,Y4r),e(ce,mC),e(mC,Qve),e(Qve,K4r),e(mC,Z4r),e(mC,vH),e(vH,eEr),e(mC,oEr),e(ce,rEr),e(ce,fC),e(fC,Wve),e(Wve,tEr),e(fC,aEr),e(fC,TH),e(TH,nEr),e(fC,sEr),e(ce,lEr),e(ce,gC),e(gC,Hve),e(Hve,iEr),e(gC,dEr),e(gC,MH),e(MH,cEr),e(gC,mEr),e(Br,fEr),M(hC,Br,null),b(m,SPe,_),b(m,cc,_),e(cc,uC),e(uC,Uve),M(a7,Uve,null),e(cc,gEr),e(cc,Jve),e(Jve,hEr),b(m,RPe,_),b(m,ir,_),M(n7,ir,null),e(ir,uEr),e(ir,mc),e(mc,pEr),e(mc,EH),e(EH,_Er),e(mc,bEr),e(mc,CH),e(CH,FEr),e(mc,vEr),e(ir,TEr),e(ir,s7),e(s7,MEr),e(s7,Yve),e(Yve,EEr),e(s7,CEr),e(ir,wEr),e(ir,Bt),M(l7,Bt,null),e(Bt,AEr),e(Bt,Kve),e(Kve,yEr),e(Bt,LEr),e(Bt,fc),e(fc,xEr),e(fc,Zve),e(Zve,$Er),e(fc,kEr),e(fc,wH),e(wH,SEr),e(fc,REr),e(Bt,BEr),M(pC,Bt,null),e(ir,PEr),e(ir,Pr),M(i7,Pr,null),e(Pr,IEr),e(Pr,e1e),e(e1e,qEr),e(Pr,NEr),e(Pr,sn),e(sn,jEr),e(sn,o1e),e(o1e,DEr),e(sn,GEr),e(sn,r1e),e(r1e,OEr),e(sn,VEr),e(sn,t1e),e(t1e,XEr),e(sn,zEr),e(Pr,QEr),e(Pr,a1e),e(a1e,_C),e(_C,n1e),e(n1e,WEr),e(_C,HEr),e(_C,AH),e(AH,UEr),e(_C,JEr),e(Pr,YEr),M(bC,Pr,null),b(m,BPe,_),b(m,gc,_),e(gc,FC),e(FC,s1e),M(d7,s1e,null),e(gc,KEr),e(gc,l1e),e(l1e,ZEr),b(m,PPe,_),b(m,dr,_),M(c7,dr,null),e(dr,e5r),e(dr,hc),e(hc,o5r),e(hc,yH),e(yH,r5r),e(hc,t5r),e(hc,LH),e(LH,a5r),e(hc,n5r),e(dr,s5r),e(dr,m7),e(m7,l5r),e(m7,i1e),e(i1e,i5r),e(m7,d5r),e(dr,c5r),e(dr,Pt),M(f7,Pt,null),e(Pt,m5r),e(Pt,d1e),e(d1e,f5r),e(Pt,g5r),e(Pt,uc),e(uc,h5r),e(uc,c1e),e(c1e,u5r),e(uc,p5r),e(uc,xH),e(xH,_5r),e(uc,b5r),e(Pt,F5r),M(vC,Pt,null),e(dr,v5r),e(dr,Ir),M(g7,Ir,null),e(Ir,T5r),e(Ir,m1e),e(m1e,M5r),e(Ir,E5r),e(Ir,ln),e(ln,C5r),e(ln,f1e),e(f1e,w5r),e(ln,A5r),e(ln,g1e),e(g1e,y5r),e(ln,L5r),e(ln,h1e),e(h1e,x5r),e(ln,$5r),e(Ir,k5r),e(Ir,u1e),e(u1e,TC),e(TC,p1e),e(p1e,S5r),e(TC,R5r),e(TC,$H),e($H,B5r),e(TC,P5r),e(Ir,I5r),M(MC,Ir,null),b(m,IPe,_),b(m,pc,_),e(pc,EC),e(EC,_1e),M(h7,_1e,null),e(pc,q5r),e(pc,b1e),e(b1e,N5r),b(m,qPe,_),b(m,cr,_),M(u7,cr,null),e(cr,j5r),e(cr,_c),e(_c,D5r),e(_c,kH),e(kH,G5r),e(_c,O5r),e(_c,SH),e(SH,V5r),e(_c,X5r),e(cr,z5r),e(cr,p7),e(p7,Q5r),e(p7,F1e),e(F1e,W5r),e(p7,H5r),e(cr,U5r),e(cr,It),M(_7,It,null),e(It,J5r),e(It,v1e),e(v1e,Y5r),e(It,K5r),e(It,bc),e(bc,Z5r),e(bc,T1e),e(T1e,eCr),e(bc,oCr),e(bc,RH),e(RH,rCr),e(bc,tCr),e(It,aCr),M(CC,It,null),e(cr,nCr),e(cr,qr),M(b7,qr,null),e(qr,sCr),e(qr,M1e),e(M1e,lCr),e(qr,iCr),e(qr,dn),e(dn,dCr),e(dn,E1e),e(E1e,cCr),e(dn,mCr),e(dn,C1e),e(C1e,fCr),e(dn,gCr),e(dn,w1e),e(w1e,hCr),e(dn,uCr),e(qr,pCr),e(qr,oe),e(oe,wC),e(wC,A1e),e(A1e,_Cr),e(wC,bCr),e(wC,BH),e(BH,FCr),e(wC,vCr),e(oe,TCr),e(oe,AC),e(AC,y1e),e(y1e,MCr),e(AC,ECr),e(AC,PH),e(PH,CCr),e(AC,wCr),e(oe,ACr),e(oe,yC),e(yC,L1e),e(L1e,yCr),e(yC,LCr),e(yC,IH),e(IH,xCr),e(yC,$Cr),e(oe,kCr),e(oe,LC),e(LC,x1e),e(x1e,SCr),e(LC,RCr),e(LC,qH),e(qH,BCr),e(LC,PCr),e(oe,ICr),e(oe,xC),e(xC,$1e),e($1e,qCr),e(xC,NCr),e(xC,NH),e(NH,jCr),e(xC,DCr),e(oe,GCr),e(oe,$C),e($C,k1e),e(k1e,OCr),e($C,VCr),e($C,jH),e(jH,XCr),e($C,zCr),e(oe,QCr),e(oe,kC),e(kC,S1e),e(S1e,WCr),e(kC,HCr),e(kC,DH),e(DH,UCr),e(kC,JCr),e(oe,YCr),e(oe,SC),e(SC,R1e),e(R1e,KCr),e(SC,ZCr),e(SC,GH),e(GH,e3r),e(SC,o3r),e(oe,r3r),e(oe,RC),e(RC,B1e),e(B1e,t3r),e(RC,a3r),e(RC,OH),e(OH,n3r),e(RC,s3r),e(oe,l3r),e(oe,BC),e(BC,P1e),e(P1e,i3r),e(BC,d3r),e(BC,VH),e(VH,c3r),e(BC,m3r),e(oe,f3r),e(oe,PC),e(PC,I1e),e(I1e,g3r),e(PC,h3r),e(PC,XH),e(XH,u3r),e(PC,p3r),e(oe,_3r),e(oe,IC),e(IC,q1e),e(q1e,b3r),e(IC,F3r),e(IC,zH),e(zH,v3r),e(IC,T3r),e(oe,M3r),e(oe,qC),e(qC,N1e),e(N1e,E3r),e(qC,C3r),e(qC,QH),e(QH,w3r),e(qC,A3r),e(oe,y3r),e(oe,NC),e(NC,j1e),e(j1e,L3r),e(NC,x3r),e(NC,WH),e(WH,$3r),e(NC,k3r),e(oe,S3r),e(oe,jC),e(jC,D1e),e(D1e,R3r),e(jC,B3r),e(jC,HH),e(HH,P3r),e(jC,I3r),e(oe,q3r),e(oe,DC),e(DC,G1e),e(G1e,N3r),e(DC,j3r),e(DC,UH),e(UH,D3r),e(DC,G3r),e(oe,O3r),e(oe,GC),e(GC,O1e),e(O1e,V3r),e(GC,X3r),e(GC,JH),e(JH,z3r),e(GC,Q3r),e(oe,W3r),e(oe,OC),e(OC,V1e),e(V1e,H3r),e(OC,U3r),e(OC,YH),e(YH,J3r),e(OC,Y3r),e(oe,K3r),e(oe,VC),e(VC,X1e),e(X1e,Z3r),e(VC,ewr),e(VC,KH),e(KH,owr),e(VC,rwr),e(oe,twr),e(oe,XC),e(XC,z1e),e(z1e,awr),e(XC,nwr),e(XC,ZH),e(ZH,swr),e(XC,lwr),e(oe,iwr),e(oe,zC),e(zC,Q1e),e(Q1e,dwr),e(zC,cwr),e(zC,eU),e(eU,mwr),e(zC,fwr),e(oe,gwr),e(oe,QC),e(QC,W1e),e(W1e,hwr),e(QC,uwr),e(QC,oU),e(oU,pwr),e(QC,_wr),e(oe,bwr),e(oe,WC),e(WC,H1e),e(H1e,Fwr),e(WC,vwr),e(WC,rU),e(rU,Twr),e(WC,Mwr),e(oe,Ewr),e(oe,HC),e(HC,U1e),e(U1e,Cwr),e(HC,wwr),e(HC,tU),e(tU,Awr),e(HC,ywr),e(oe,Lwr),e(oe,UC),e(UC,J1e),e(J1e,xwr),e(UC,$wr),e(UC,aU),e(aU,kwr),e(UC,Swr),e(qr,Rwr),M(JC,qr,null),b(m,NPe,_),b(m,Fc,_),e(Fc,YC),e(YC,Y1e),M(F7,Y1e,null),e(Fc,Bwr),e(Fc,K1e),e(K1e,Pwr),b(m,jPe,_),b(m,mr,_),M(v7,mr,null),e(mr,Iwr),e(mr,vc),e(vc,qwr),e(vc,nU),e(nU,Nwr),e(vc,jwr),e(vc,sU),e(sU,Dwr),e(vc,Gwr),e(mr,Owr),e(mr,T7),e(T7,Vwr),e(T7,Z1e),e(Z1e,Xwr),e(T7,zwr),e(mr,Qwr),e(mr,qt),M(M7,qt,null),e(qt,Wwr),e(qt,eTe),e(eTe,Hwr),e(qt,Uwr),e(qt,Tc),e(Tc,Jwr),e(Tc,oTe),e(oTe,Ywr),e(Tc,Kwr),e(Tc,lU),e(lU,Zwr),e(Tc,eAr),e(qt,oAr),M(KC,qt,null),e(mr,rAr),e(mr,Nr),M(E7,Nr,null),e(Nr,tAr),e(Nr,rTe),e(rTe,aAr),e(Nr,nAr),e(Nr,cn),e(cn,sAr),e(cn,tTe),e(tTe,lAr),e(cn,iAr),e(cn,aTe),e(aTe,dAr),e(cn,cAr),e(cn,nTe),e(nTe,mAr),e(cn,fAr),e(Nr,gAr),e(Nr,ke),e(ke,ZC),e(ZC,sTe),e(sTe,hAr),e(ZC,uAr),e(ZC,iU),e(iU,pAr),e(ZC,_Ar),e(ke,bAr),e(ke,e3),e(e3,lTe),e(lTe,FAr),e(e3,vAr),e(e3,dU),e(dU,TAr),e(e3,MAr),e(ke,EAr),e(ke,o3),e(o3,iTe),e(iTe,CAr),e(o3,wAr),e(o3,cU),e(cU,AAr),e(o3,yAr),e(ke,LAr),e(ke,r3),e(r3,dTe),e(dTe,xAr),e(r3,$Ar),e(r3,mU),e(mU,kAr),e(r3,SAr),e(ke,RAr),e(ke,t3),e(t3,cTe),e(cTe,BAr),e(t3,PAr),e(t3,fU),e(fU,IAr),e(t3,qAr),e(ke,NAr),e(ke,a3),e(a3,mTe),e(mTe,jAr),e(a3,DAr),e(a3,gU),e(gU,GAr),e(a3,OAr),e(ke,VAr),e(ke,n3),e(n3,fTe),e(fTe,XAr),e(n3,zAr),e(n3,hU),e(hU,QAr),e(n3,WAr),e(ke,HAr),e(ke,s3),e(s3,gTe),e(gTe,UAr),e(s3,JAr),e(s3,uU),e(uU,YAr),e(s3,KAr),e(ke,ZAr),e(ke,l3),e(l3,hTe),e(hTe,e0r),e(l3,o0r),e(l3,pU),e(pU,r0r),e(l3,t0r),e(Nr,a0r),M(i3,Nr,null),b(m,DPe,_),b(m,Mc,_),e(Mc,d3),e(d3,uTe),M(C7,uTe,null),e(Mc,n0r),e(Mc,pTe),e(pTe,s0r),b(m,GPe,_),b(m,fr,_),M(w7,fr,null),e(fr,l0r),e(fr,Ec),e(Ec,i0r),e(Ec,_U),e(_U,d0r),e(Ec,c0r),e(Ec,bU),e(bU,m0r),e(Ec,f0r),e(fr,g0r),e(fr,A7),e(A7,h0r),e(A7,_Te),e(_Te,u0r),e(A7,p0r),e(fr,_0r),e(fr,Nt),M(y7,Nt,null),e(Nt,b0r),e(Nt,bTe),e(bTe,F0r),e(Nt,v0r),e(Nt,Cc),e(Cc,T0r),e(Cc,FTe),e(FTe,M0r),e(Cc,E0r),e(Cc,FU),e(FU,C0r),e(Cc,w0r),e(Nt,A0r),M(c3,Nt,null),e(fr,y0r),e(fr,jr),M(L7,jr,null),e(jr,L0r),e(jr,vTe),e(vTe,x0r),e(jr,$0r),e(jr,mn),e(mn,k0r),e(mn,TTe),e(TTe,S0r),e(mn,R0r),e(mn,MTe),e(MTe,B0r),e(mn,P0r),e(mn,ETe),e(ETe,I0r),e(mn,q0r),e(jr,N0r),e(jr,Me),e(Me,m3),e(m3,CTe),e(CTe,j0r),e(m3,D0r),e(m3,vU),e(vU,G0r),e(m3,O0r),e(Me,V0r),e(Me,f3),e(f3,wTe),e(wTe,X0r),e(f3,z0r),e(f3,TU),e(TU,Q0r),e(f3,W0r),e(Me,H0r),e(Me,g3),e(g3,ATe),e(ATe,U0r),e(g3,J0r),e(g3,MU),e(MU,Y0r),e(g3,K0r),e(Me,Z0r),e(Me,h3),e(h3,yTe),e(yTe,e6r),e(h3,o6r),e(h3,EU),e(EU,r6r),e(h3,t6r),e(Me,a6r),e(Me,u3),e(u3,LTe),e(LTe,n6r),e(u3,s6r),e(u3,CU),e(CU,l6r),e(u3,i6r),e(Me,d6r),e(Me,p3),e(p3,xTe),e(xTe,c6r),e(p3,m6r),e(p3,wU),e(wU,f6r),e(p3,g6r),e(Me,h6r),e(Me,_3),e(_3,$Te),e($Te,u6r),e(_3,p6r),e(_3,AU),e(AU,_6r),e(_3,b6r),e(Me,F6r),e(Me,b3),e(b3,kTe),e(kTe,v6r),e(b3,T6r),e(b3,yU),e(yU,M6r),e(b3,E6r),e(Me,C6r),e(Me,F3),e(F3,STe),e(STe,w6r),e(F3,A6r),e(F3,LU),e(LU,y6r),e(F3,L6r),e(Me,x6r),e(Me,v3),e(v3,RTe),e(RTe,$6r),e(v3,k6r),e(v3,xU),e(xU,S6r),e(v3,R6r),e(Me,B6r),e(Me,T3),e(T3,BTe),e(BTe,P6r),e(T3,I6r),e(T3,$U),e($U,q6r),e(T3,N6r),e(Me,j6r),e(Me,M3),e(M3,PTe),e(PTe,D6r),e(M3,G6r),e(M3,kU),e(kU,O6r),e(M3,V6r),e(jr,X6r),M(E3,jr,null),b(m,OPe,_),b(m,wc,_),e(wc,C3),e(C3,ITe),M(x7,ITe,null),e(wc,z6r),e(wc,qTe),e(qTe,Q6r),b(m,VPe,_),b(m,gr,_),M($7,gr,null),e(gr,W6r),e(gr,Ac),e(Ac,H6r),e(Ac,SU),e(SU,U6r),e(Ac,J6r),e(Ac,RU),e(RU,Y6r),e(Ac,K6r),e(gr,Z6r),e(gr,k7),e(k7,eyr),e(k7,NTe),e(NTe,oyr),e(k7,ryr),e(gr,tyr),e(gr,jt),M(S7,jt,null),e(jt,ayr),e(jt,jTe),e(jTe,nyr),e(jt,syr),e(jt,yc),e(yc,lyr),e(yc,DTe),e(DTe,iyr),e(yc,dyr),e(yc,BU),e(BU,cyr),e(yc,myr),e(jt,fyr),M(w3,jt,null),e(gr,gyr),e(gr,Dr),M(R7,Dr,null),e(Dr,hyr),e(Dr,GTe),e(GTe,uyr),e(Dr,pyr),e(Dr,fn),e(fn,_yr),e(fn,OTe),e(OTe,byr),e(fn,Fyr),e(fn,VTe),e(VTe,vyr),e(fn,Tyr),e(fn,XTe),e(XTe,Myr),e(fn,Eyr),e(Dr,Cyr),e(Dr,Le),e(Le,A3),e(A3,zTe),e(zTe,wyr),e(A3,Ayr),e(A3,PU),e(PU,yyr),e(A3,Lyr),e(Le,xyr),e(Le,y3),e(y3,QTe),e(QTe,$yr),e(y3,kyr),e(y3,IU),e(IU,Syr),e(y3,Ryr),e(Le,Byr),e(Le,L3),e(L3,WTe),e(WTe,Pyr),e(L3,Iyr),e(L3,qU),e(qU,qyr),e(L3,Nyr),e(Le,jyr),e(Le,x3),e(x3,HTe),e(HTe,Dyr),e(x3,Gyr),e(x3,NU),e(NU,Oyr),e(x3,Vyr),e(Le,Xyr),e(Le,$3),e($3,UTe),e(UTe,zyr),e($3,Qyr),e($3,jU),e(jU,Wyr),e($3,Hyr),e(Le,Uyr),e(Le,k3),e(k3,JTe),e(JTe,Jyr),e(k3,Yyr),e(k3,DU),e(DU,Kyr),e(k3,Zyr),e(Le,eLr),e(Le,S3),e(S3,YTe),e(YTe,oLr),e(S3,rLr),e(S3,GU),e(GU,tLr),e(S3,aLr),e(Le,nLr),e(Le,R3),e(R3,KTe),e(KTe,sLr),e(R3,lLr),e(R3,OU),e(OU,iLr),e(R3,dLr),e(Le,cLr),e(Le,B3),e(B3,ZTe),e(ZTe,mLr),e(B3,fLr),e(B3,VU),e(VU,gLr),e(B3,hLr),e(Le,uLr),e(Le,P3),e(P3,eMe),e(eMe,pLr),e(P3,_Lr),e(P3,XU),e(XU,bLr),e(P3,FLr),e(Dr,vLr),M(I3,Dr,null),b(m,XPe,_),b(m,Lc,_),e(Lc,q3),e(q3,oMe),M(B7,oMe,null),e(Lc,TLr),e(Lc,rMe),e(rMe,MLr),b(m,zPe,_),b(m,hr,_),M(P7,hr,null),e(hr,ELr),e(hr,xc),e(xc,CLr),e(xc,zU),e(zU,wLr),e(xc,ALr),e(xc,QU),e(QU,yLr),e(xc,LLr),e(hr,xLr),e(hr,I7),e(I7,$Lr),e(I7,tMe),e(tMe,kLr),e(I7,SLr),e(hr,RLr),e(hr,Dt),M(q7,Dt,null),e(Dt,BLr),e(Dt,aMe),e(aMe,PLr),e(Dt,ILr),e(Dt,$c),e($c,qLr),e($c,nMe),e(nMe,NLr),e($c,jLr),e($c,WU),e(WU,DLr),e($c,GLr),e(Dt,OLr),M(N3,Dt,null),e(hr,VLr),e(hr,Gr),M(N7,Gr,null),e(Gr,XLr),e(Gr,sMe),e(sMe,zLr),e(Gr,QLr),e(Gr,gn),e(gn,WLr),e(gn,lMe),e(lMe,HLr),e(gn,ULr),e(gn,iMe),e(iMe,JLr),e(gn,YLr),e(gn,dMe),e(dMe,KLr),e(gn,ZLr),e(Gr,e8r),e(Gr,Se),e(Se,j3),e(j3,cMe),e(cMe,o8r),e(j3,r8r),e(j3,HU),e(HU,t8r),e(j3,a8r),e(Se,n8r),e(Se,D3),e(D3,mMe),e(mMe,s8r),e(D3,l8r),e(D3,UU),e(UU,i8r),e(D3,d8r),e(Se,c8r),e(Se,G3),e(G3,fMe),e(fMe,m8r),e(G3,f8r),e(G3,JU),e(JU,g8r),e(G3,h8r),e(Se,u8r),e(Se,O3),e(O3,gMe),e(gMe,p8r),e(O3,_8r),e(O3,YU),e(YU,b8r),e(O3,F8r),e(Se,v8r),e(Se,V3),e(V3,hMe),e(hMe,T8r),e(V3,M8r),e(V3,KU),e(KU,E8r),e(V3,C8r),e(Se,w8r),e(Se,X3),e(X3,uMe),e(uMe,A8r),e(X3,y8r),e(X3,ZU),e(ZU,L8r),e(X3,x8r),e(Se,$8r),e(Se,z3),e(z3,pMe),e(pMe,k8r),e(z3,S8r),e(z3,eJ),e(eJ,R8r),e(z3,B8r),e(Se,P8r),e(Se,Q3),e(Q3,_Me),e(_Me,I8r),e(Q3,q8r),e(Q3,oJ),e(oJ,N8r),e(Q3,j8r),e(Se,D8r),e(Se,W3),e(W3,bMe),e(bMe,G8r),e(W3,O8r),e(W3,rJ),e(rJ,V8r),e(W3,X8r),e(Gr,z8r),M(H3,Gr,null),b(m,QPe,_),b(m,kc,_),e(kc,U3),e(U3,FMe),M(j7,FMe,null),e(kc,Q8r),e(kc,vMe),e(vMe,W8r),b(m,WPe,_),b(m,ur,_),M(D7,ur,null),e(ur,H8r),e(ur,Sc),e(Sc,U8r),e(Sc,tJ),e(tJ,J8r),e(Sc,Y8r),e(Sc,aJ),e(aJ,K8r),e(Sc,Z8r),e(ur,e7r),e(ur,G7),e(G7,o7r),e(G7,TMe),e(TMe,r7r),e(G7,t7r),e(ur,a7r),e(ur,Gt),M(O7,Gt,null),e(Gt,n7r),e(Gt,MMe),e(MMe,s7r),e(Gt,l7r),e(Gt,Rc),e(Rc,i7r),e(Rc,EMe),e(EMe,d7r),e(Rc,c7r),e(Rc,nJ),e(nJ,m7r),e(Rc,f7r),e(Gt,g7r),M(J3,Gt,null),e(ur,h7r),e(ur,Or),M(V7,Or,null),e(Or,u7r),e(Or,CMe),e(CMe,p7r),e(Or,_7r),e(Or,hn),e(hn,b7r),e(hn,wMe),e(wMe,F7r),e(hn,v7r),e(hn,AMe),e(AMe,T7r),e(hn,M7r),e(hn,yMe),e(yMe,E7r),e(hn,C7r),e(Or,w7r),e(Or,xe),e(xe,Y3),e(Y3,LMe),e(LMe,A7r),e(Y3,y7r),e(Y3,sJ),e(sJ,L7r),e(Y3,x7r),e(xe,$7r),e(xe,K3),e(K3,xMe),e(xMe,k7r),e(K3,S7r),e(K3,lJ),e(lJ,R7r),e(K3,B7r),e(xe,P7r),e(xe,Z3),e(Z3,$Me),e($Me,I7r),e(Z3,q7r),e(Z3,iJ),e(iJ,N7r),e(Z3,j7r),e(xe,D7r),e(xe,ew),e(ew,kMe),e(kMe,G7r),e(ew,O7r),e(ew,dJ),e(dJ,V7r),e(ew,X7r),e(xe,z7r),e(xe,ow),e(ow,SMe),e(SMe,Q7r),e(ow,W7r),e(ow,cJ),e(cJ,H7r),e(ow,U7r),e(xe,J7r),e(xe,rw),e(rw,RMe),e(RMe,Y7r),e(rw,K7r),e(rw,mJ),e(mJ,Z7r),e(rw,exr),e(xe,oxr),e(xe,tw),e(tw,BMe),e(BMe,rxr),e(tw,txr),e(tw,fJ),e(fJ,axr),e(tw,nxr),e(xe,sxr),e(xe,aw),e(aw,PMe),e(PMe,lxr),e(aw,ixr),e(aw,gJ),e(gJ,dxr),e(aw,cxr),e(xe,mxr),e(xe,nw),e(nw,IMe),e(IMe,fxr),e(nw,gxr),e(nw,hJ),e(hJ,hxr),e(nw,uxr),e(xe,pxr),e(xe,sw),e(sw,qMe),e(qMe,_xr),e(sw,bxr),e(sw,uJ),e(uJ,Fxr),e(sw,vxr),e(Or,Txr),M(lw,Or,null),b(m,HPe,_),b(m,Bc,_),e(Bc,iw),e(iw,NMe),M(X7,NMe,null),e(Bc,Mxr),e(Bc,jMe),e(jMe,Exr),b(m,UPe,_),b(m,pr,_),M(z7,pr,null),e(pr,Cxr),e(pr,Pc),e(Pc,wxr),e(Pc,pJ),e(pJ,Axr),e(Pc,yxr),e(Pc,_J),e(_J,Lxr),e(Pc,xxr),e(pr,$xr),e(pr,Q7),e(Q7,kxr),e(Q7,DMe),e(DMe,Sxr),e(Q7,Rxr),e(pr,Bxr),e(pr,Ot),M(W7,Ot,null),e(Ot,Pxr),e(Ot,GMe),e(GMe,Ixr),e(Ot,qxr),e(Ot,Ic),e(Ic,Nxr),e(Ic,OMe),e(OMe,jxr),e(Ic,Dxr),e(Ic,bJ),e(bJ,Gxr),e(Ic,Oxr),e(Ot,Vxr),M(dw,Ot,null),e(pr,Xxr),e(pr,Vr),M(H7,Vr,null),e(Vr,zxr),e(Vr,VMe),e(VMe,Qxr),e(Vr,Wxr),e(Vr,un),e(un,Hxr),e(un,XMe),e(XMe,Uxr),e(un,Jxr),e(un,zMe),e(zMe,Yxr),e(un,Kxr),e(un,QMe),e(QMe,Zxr),e(un,e9r),e(Vr,o9r),e(Vr,$e),e($e,cw),e(cw,WMe),e(WMe,r9r),e(cw,t9r),e(cw,FJ),e(FJ,a9r),e(cw,n9r),e($e,s9r),e($e,mw),e(mw,HMe),e(HMe,l9r),e(mw,i9r),e(mw,vJ),e(vJ,d9r),e(mw,c9r),e($e,m9r),e($e,fw),e(fw,UMe),e(UMe,f9r),e(fw,g9r),e(fw,TJ),e(TJ,h9r),e(fw,u9r),e($e,p9r),e($e,gw),e(gw,JMe),e(JMe,_9r),e(gw,b9r),e(gw,MJ),e(MJ,F9r),e(gw,v9r),e($e,T9r),e($e,hw),e(hw,YMe),e(YMe,M9r),e(hw,E9r),e(hw,EJ),e(EJ,C9r),e(hw,w9r),e($e,A9r),e($e,uw),e(uw,KMe),e(KMe,y9r),e(uw,L9r),e(uw,CJ),e(CJ,x9r),e(uw,$9r),e($e,k9r),e($e,pw),e(pw,ZMe),e(ZMe,S9r),e(pw,R9r),e(pw,wJ),e(wJ,B9r),e(pw,P9r),e($e,I9r),e($e,_w),e(_w,e4e),e(e4e,q9r),e(_w,N9r),e(_w,AJ),e(AJ,j9r),e(_w,D9r),e($e,G9r),e($e,bw),e(bw,o4e),e(o4e,O9r),e(bw,V9r),e(bw,yJ),e(yJ,X9r),e(bw,z9r),e($e,Q9r),e($e,Fw),e(Fw,r4e),e(r4e,W9r),e(Fw,H9r),e(Fw,LJ),e(LJ,U9r),e(Fw,J9r),e(Vr,Y9r),M(vw,Vr,null),b(m,JPe,_),b(m,qc,_),e(qc,Tw),e(Tw,t4e),M(U7,t4e,null),e(qc,K9r),e(qc,a4e),e(a4e,Z9r),b(m,YPe,_),b(m,_r,_),M(J7,_r,null),e(_r,e$r),e(_r,Nc),e(Nc,o$r),e(Nc,xJ),e(xJ,r$r),e(Nc,t$r),e(Nc,$J),e($J,a$r),e(Nc,n$r),e(_r,s$r),e(_r,Y7),e(Y7,l$r),e(Y7,n4e),e(n4e,i$r),e(Y7,d$r),e(_r,c$r),e(_r,Vt),M(K7,Vt,null),e(Vt,m$r),e(Vt,s4e),e(s4e,f$r),e(Vt,g$r),e(Vt,jc),e(jc,h$r),e(jc,l4e),e(l4e,u$r),e(jc,p$r),e(jc,kJ),e(kJ,_$r),e(jc,b$r),e(Vt,F$r),M(Mw,Vt,null),e(_r,v$r),e(_r,Xr),M(Z7,Xr,null),e(Xr,T$r),e(Xr,i4e),e(i4e,M$r),e(Xr,E$r),e(Xr,pn),e(pn,C$r),e(pn,d4e),e(d4e,w$r),e(pn,A$r),e(pn,c4e),e(c4e,y$r),e(pn,L$r),e(pn,m4e),e(m4e,x$r),e(pn,$$r),e(Xr,k$r),e(Xr,De),e(De,Ew),e(Ew,f4e),e(f4e,S$r),e(Ew,R$r),e(Ew,SJ),e(SJ,B$r),e(Ew,P$r),e(De,I$r),e(De,Cw),e(Cw,g4e),e(g4e,q$r),e(Cw,N$r),e(Cw,RJ),e(RJ,j$r),e(Cw,D$r),e(De,G$r),e(De,ww),e(ww,h4e),e(h4e,O$r),e(ww,V$r),e(ww,BJ),e(BJ,X$r),e(ww,z$r),e(De,Q$r),e(De,Aw),e(Aw,u4e),e(u4e,W$r),e(Aw,H$r),e(Aw,PJ),e(PJ,U$r),e(Aw,J$r),e(De,Y$r),e(De,yw),e(yw,p4e),e(p4e,K$r),e(yw,Z$r),e(yw,IJ),e(IJ,ekr),e(yw,okr),e(De,rkr),e(De,Lw),e(Lw,_4e),e(_4e,tkr),e(Lw,akr),e(Lw,qJ),e(qJ,nkr),e(Lw,skr),e(De,lkr),e(De,xw),e(xw,b4e),e(b4e,ikr),e(xw,dkr),e(xw,NJ),e(NJ,ckr),e(xw,mkr),e(De,fkr),e(De,$w),e($w,F4e),e(F4e,gkr),e($w,hkr),e($w,jJ),e(jJ,ukr),e($w,pkr),e(Xr,_kr),M(kw,Xr,null),b(m,KPe,_),b(m,Dc,_),e(Dc,Sw),e(Sw,v4e),M(ex,v4e,null),e(Dc,bkr),e(Dc,T4e),e(T4e,Fkr),b(m,ZPe,_),b(m,br,_),M(ox,br,null),e(br,vkr),e(br,Gc),e(Gc,Tkr),e(Gc,DJ),e(DJ,Mkr),e(Gc,Ekr),e(Gc,GJ),e(GJ,Ckr),e(Gc,wkr),e(br,Akr),e(br,rx),e(rx,ykr),e(rx,M4e),e(M4e,Lkr),e(rx,xkr),e(br,$kr),e(br,Xt),M(tx,Xt,null),e(Xt,kkr),e(Xt,E4e),e(E4e,Skr),e(Xt,Rkr),e(Xt,Oc),e(Oc,Bkr),e(Oc,C4e),e(C4e,Pkr),e(Oc,Ikr),e(Oc,OJ),e(OJ,qkr),e(Oc,Nkr),e(Xt,jkr),M(Rw,Xt,null),e(br,Dkr),e(br,zr),M(ax,zr,null),e(zr,Gkr),e(zr,w4e),e(w4e,Okr),e(zr,Vkr),e(zr,_n),e(_n,Xkr),e(_n,A4e),e(A4e,zkr),e(_n,Qkr),e(_n,y4e),e(y4e,Wkr),e(_n,Hkr),e(_n,L4e),e(L4e,Ukr),e(_n,Jkr),e(zr,Ykr),e(zr,Ge),e(Ge,Bw),e(Bw,x4e),e(x4e,Kkr),e(Bw,Zkr),e(Bw,VJ),e(VJ,eSr),e(Bw,oSr),e(Ge,rSr),e(Ge,Pw),e(Pw,$4e),e($4e,tSr),e(Pw,aSr),e(Pw,XJ),e(XJ,nSr),e(Pw,sSr),e(Ge,lSr),e(Ge,Iw),e(Iw,k4e),e(k4e,iSr),e(Iw,dSr),e(Iw,zJ),e(zJ,cSr),e(Iw,mSr),e(Ge,fSr),e(Ge,qw),e(qw,S4e),e(S4e,gSr),e(qw,hSr),e(qw,QJ),e(QJ,uSr),e(qw,pSr),e(Ge,_Sr),e(Ge,Nw),e(Nw,R4e),e(R4e,bSr),e(Nw,FSr),e(Nw,WJ),e(WJ,vSr),e(Nw,TSr),e(Ge,MSr),e(Ge,jw),e(jw,B4e),e(B4e,ESr),e(jw,CSr),e(jw,HJ),e(HJ,wSr),e(jw,ASr),e(Ge,ySr),e(Ge,Dw),e(Dw,P4e),e(P4e,LSr),e(Dw,xSr),e(Dw,UJ),e(UJ,$Sr),e(Dw,kSr),e(Ge,SSr),e(Ge,Gw),e(Gw,I4e),e(I4e,RSr),e(Gw,BSr),e(Gw,JJ),e(JJ,PSr),e(Gw,ISr),e(zr,qSr),M(Ow,zr,null),b(m,eIe,_),b(m,Vc,_),e(Vc,Vw),e(Vw,q4e),M(nx,q4e,null),e(Vc,NSr),e(Vc,N4e),e(N4e,jSr),b(m,oIe,_),b(m,Fr,_),M(sx,Fr,null),e(Fr,DSr),e(Fr,Xc),e(Xc,GSr),e(Xc,YJ),e(YJ,OSr),e(Xc,VSr),e(Xc,KJ),e(KJ,XSr),e(Xc,zSr),e(Fr,QSr),e(Fr,lx),e(lx,WSr),e(lx,j4e),e(j4e,HSr),e(lx,USr),e(Fr,JSr),e(Fr,zt),M(ix,zt,null),e(zt,YSr),e(zt,D4e),e(D4e,KSr),e(zt,ZSr),e(zt,zc),e(zc,eRr),e(zc,G4e),e(G4e,oRr),e(zc,rRr),e(zc,ZJ),e(ZJ,tRr),e(zc,aRr),e(zt,nRr),M(Xw,zt,null),e(Fr,sRr),e(Fr,Qr),M(dx,Qr,null),e(Qr,lRr),e(Qr,O4e),e(O4e,iRr),e(Qr,dRr),e(Qr,bn),e(bn,cRr),e(bn,V4e),e(V4e,mRr),e(bn,fRr),e(bn,X4e),e(X4e,gRr),e(bn,hRr),e(bn,z4e),e(z4e,uRr),e(bn,pRr),e(Qr,_Rr),e(Qr,Q4e),e(Q4e,zw),e(zw,W4e),e(W4e,bRr),e(zw,FRr),e(zw,eY),e(eY,vRr),e(zw,TRr),e(Qr,MRr),M(Qw,Qr,null),b(m,rIe,_),b(m,Qc,_),e(Qc,Ww),e(Ww,H4e),M(cx,H4e,null),e(Qc,ERr),e(Qc,U4e),e(U4e,CRr),b(m,tIe,_),b(m,vr,_),M(mx,vr,null),e(vr,wRr),e(vr,Wc),e(Wc,ARr),e(Wc,oY),e(oY,yRr),e(Wc,LRr),e(Wc,rY),e(rY,xRr),e(Wc,$Rr),e(vr,kRr),e(vr,fx),e(fx,SRr),e(fx,J4e),e(J4e,RRr),e(fx,BRr),e(vr,PRr),e(vr,Qt),M(gx,Qt,null),e(Qt,IRr),e(Qt,Y4e),e(Y4e,qRr),e(Qt,NRr),e(Qt,Hc),e(Hc,jRr),e(Hc,K4e),e(K4e,DRr),e(Hc,GRr),e(Hc,tY),e(tY,ORr),e(Hc,VRr),e(Qt,XRr),M(Hw,Qt,null),e(vr,zRr),e(vr,Wr),M(hx,Wr,null),e(Wr,QRr),e(Wr,Z4e),e(Z4e,WRr),e(Wr,HRr),e(Wr,Fn),e(Fn,URr),e(Fn,eEe),e(eEe,JRr),e(Fn,YRr),e(Fn,oEe),e(oEe,KRr),e(Fn,ZRr),e(Fn,rEe),e(rEe,eBr),e(Fn,oBr),e(Wr,rBr),e(Wr,ux),e(ux,Uw),e(Uw,tEe),e(tEe,tBr),e(Uw,aBr),e(Uw,aY),e(aY,nBr),e(Uw,sBr),e(ux,lBr),e(ux,Jw),e(Jw,aEe),e(aEe,iBr),e(Jw,dBr),e(Jw,nY),e(nY,cBr),e(Jw,mBr),e(Wr,fBr),M(Yw,Wr,null),b(m,aIe,_),b(m,Uc,_),e(Uc,Kw),e(Kw,nEe),M(px,nEe,null),e(Uc,gBr),e(Uc,sEe),e(sEe,hBr),b(m,nIe,_),b(m,Tr,_),M(_x,Tr,null),e(Tr,uBr),e(Tr,Jc),e(Jc,pBr),e(Jc,sY),e(sY,_Br),e(Jc,bBr),e(Jc,lY),e(lY,FBr),e(Jc,vBr),e(Tr,TBr),e(Tr,bx),e(bx,MBr),e(bx,lEe),e(lEe,EBr),e(bx,CBr),e(Tr,wBr),e(Tr,Wt),M(Fx,Wt,null),e(Wt,ABr),e(Wt,iEe),e(iEe,yBr),e(Wt,LBr),e(Wt,Yc),e(Yc,xBr),e(Yc,dEe),e(dEe,$Br),e(Yc,kBr),e(Yc,iY),e(iY,SBr),e(Yc,RBr),e(Wt,BBr),M(Zw,Wt,null),e(Tr,PBr),e(Tr,Hr),M(vx,Hr,null),e(Hr,IBr),e(Hr,cEe),e(cEe,qBr),e(Hr,NBr),e(Hr,vn),e(vn,jBr),e(vn,mEe),e(mEe,DBr),e(vn,GBr),e(vn,fEe),e(fEe,OBr),e(vn,VBr),e(vn,gEe),e(gEe,XBr),e(vn,zBr),e(Hr,QBr),e(Hr,hEe),e(hEe,eA),e(eA,uEe),e(uEe,WBr),e(eA,HBr),e(eA,dY),e(dY,UBr),e(eA,JBr),e(Hr,YBr),M(oA,Hr,null),sIe=!0},p(m,[_]){const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:m}),sm.$set(Tx);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:m}),ag.$set(pEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:m}),Ig.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:m}),dh.$set(bEe);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:m}),ch.$set(Mx);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:m}),yh.$set(FEe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:m}),Lh.$set(Tn);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:m}),kh.$set(vEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:m}),Fp.$set(TEe);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:m}),Tp.$set(MEe);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:m}),i_.$set(Ex);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:m}),c_.$set(EEe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:m}),W_.$set(Cx);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:m}),U_.$set(CEe);const wx={};_&2&&(wx.$$scope={dirty:_,ctx:m}),Sb.$set(wx);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:m}),Bb.$set(wEe);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:m}),Zb.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:m}),o2.$set(yEe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:m}),J2.$set(Kc);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:m}),K2.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:m}),LF.$set(xEe);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:m}),$F.$set($Ee);const Ax={};_&2&&(Ax.$$scope={dirty:_,ctx:m}),qF.$set(Ax);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:m}),jF.$set(kEe);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:m}),vv.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:m}),Mv.$set(REe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:m}),d1.$set(Jr);const yx={};_&2&&(yx.$$scope={dirty:_,ctx:m}),m1.$set(yx);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:m}),h1.$set(BEe);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:m}),p1.$set(Lx);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:m}),x1.$set(PEe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:m}),k1.$set(Yr);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:m}),B1.$set(IEe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:m}),I1.$set(Zc);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:m}),Q1.$set(qEe);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:m}),H1.$set(NEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),eT.$set(y);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:m}),rT.$set(rA);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:m}),fT.$set(jEe);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:m}),hT.$set(DEe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:m}),bT.$set(tA);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:m}),vT.$set(GEe);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:m}),AT.$set(OEe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:m}),LT.$set(aA);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:m}),RT.$set(VEe);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:m}),PT.$set(XEe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:m}),jT.$set(nA);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:m}),GT.$set(zEe);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:m}),XT.$set(QEe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),QT.$set(sA);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:m}),KT.$set(WEe);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:m}),eM.$set(HEe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),tM.$set(lA);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:m}),nM.$set(UEe);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:m}),UM.$set(JEe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),YM.$set(iA);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:m}),T4.$set(YEe);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:m}),E4.$set(KEe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),I4.$set(dA);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:m}),N4.$set(ZEe);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:m}),G4.$set(e5e);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),V4.$set(cA);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:m}),cE.$set(o5e);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:m}),fE.$set(r5e);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),EE.$set(mA);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:m}),wE.$set(t5e);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:m}),KE.$set(a5e);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),e5.$set(fA);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:m}),b5.$set(n5e);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:m}),v5.$set(s5e);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),M5.$set(gA);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:m}),C5.$set(l5e);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:m}),z5.$set(i5e);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),W5.$set(hA);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:m}),hC.$set(d5e);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:m}),pC.$set(c5e);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),bC.$set(uA);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:m}),vC.$set(m5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:m}),MC.$set(f5e);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:m}),CC.$set(pA);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:m}),JC.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:m}),KC.$set(h5e);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:m}),i3.$set(_A);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:m}),c3.$set(u5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),E3.$set(p5e);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:m}),w3.$set(bA);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:m}),I3.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:m}),N3.$set(b5e);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),H3.$set(FA);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:m}),J3.$set(F5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:m}),lw.$set(v5e);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),dw.$set(vA);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:m}),vw.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),Mw.$set(M5e);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),kw.$set(TA);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),Rw.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),Ow.$set(C5e);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),Xw.$set(MA);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),Qw.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),Hw.$set(A5e);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),Yw.$set(EA);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),Zw.$set(y5e);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),oA.$set(L5e)},i(m){sIe||(E(d.$$.fragment,m),E(Fa.$$.fragment,m),E(T6.$$.fragment,m),E(M6.$$.fragment,m),E(sm.$$.fragment,m),E(E6.$$.fragment,m),E(C6.$$.fragment,m),E(y6.$$.fragment,m),E(ag.$$.fragment,m),E(L6.$$.fragment,m),E(x6.$$.fragment,m),E($6.$$.fragment,m),E(R6.$$.fragment,m),E(Ig.$$.fragment,m),E(B6.$$.fragment,m),E(P6.$$.fragment,m),E(I6.$$.fragment,m),E(j6.$$.fragment,m),E(dh.$$.fragment,m),E(ch.$$.fragment,m),E(D6.$$.fragment,m),E(G6.$$.fragment,m),E(O6.$$.fragment,m),E(z6.$$.fragment,m),E(yh.$$.fragment,m),E(Lh.$$.fragment,m),E(Q6.$$.fragment,m),E(W6.$$.fragment,m),E(H6.$$.fragment,m),E(J6.$$.fragment,m),E(kh.$$.fragment,m),E(Y6.$$.fragment,m),E(Fp.$$.fragment,m),E(K6.$$.fragment,m),E(Z6.$$.fragment,m),E(oy.$$.fragment,m),E(Tp.$$.fragment,m),E(ry.$$.fragment,m),E(i_.$$.fragment,m),E(ty.$$.fragment,m),E(ay.$$.fragment,m),E(sy.$$.fragment,m),E(c_.$$.fragment,m),E(ly.$$.fragment,m),E(W_.$$.fragment,m),E(iy.$$.fragment,m),E(dy.$$.fragment,m),E(my.$$.fragment,m),E(U_.$$.fragment,m),E(fy.$$.fragment,m),E(Sb.$$.fragment,m),E(gy.$$.fragment,m),E(hy.$$.fragment,m),E(py.$$.fragment,m),E(Bb.$$.fragment,m),E(_y.$$.fragment,m),E(Zb.$$.fragment,m),E(by.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(o2.$$.fragment,m),E(My.$$.fragment,m),E(J2.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ay.$$.fragment,m),E(K2.$$.fragment,m),E(yy.$$.fragment,m),E(LF.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(ky.$$.fragment,m),E($F.$$.fragment,m),E(Sy.$$.fragment,m),E(qF.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(jF.$$.fragment,m),E(qy.$$.fragment,m),E(vv.$$.fragment,m),E(Ny.$$.fragment,m),E(jy.$$.fragment,m),E(Gy.$$.fragment,m),E(Mv.$$.fragment,m),E(Oy.$$.fragment,m),E(d1.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qy.$$.fragment,m),E(m1.$$.fragment,m),E(Wy.$$.fragment,m),E(h1.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(p1.$$.fragment,m),E(Ky.$$.fragment,m),E(x1.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(k1.$$.fragment,m),E(tL.$$.fragment,m),E(B1.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(I1.$$.fragment,m),E(iL.$$.fragment,m),E(Q1.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(H1.$$.fragment,m),E(gL.$$.fragment,m),E(eT.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(rT.$$.fragment,m),E(bL.$$.fragment,m),E(fT.$$.fragment,m),E(FL.$$.fragment,m),E(vL.$$.fragment,m),E(ML.$$.fragment,m),E(hT.$$.fragment,m),E(EL.$$.fragment,m),E(bT.$$.fragment,m),E(wL.$$.fragment,m),E(AL.$$.fragment,m),E(LL.$$.fragment,m),E(vT.$$.fragment,m),E(xL.$$.fragment,m),E(AT.$$.fragment,m),E($L.$$.fragment,m),E(kL.$$.fragment,m),E(RL.$$.fragment,m),E(LT.$$.fragment,m),E(BL.$$.fragment,m),E(RT.$$.fragment,m),E(PL.$$.fragment,m),E(IL.$$.fragment,m),E(NL.$$.fragment,m),E(PT.$$.fragment,m),E(jL.$$.fragment,m),E(jT.$$.fragment,m),E(GL.$$.fragment,m),E(OL.$$.fragment,m),E(XL.$$.fragment,m),E(GT.$$.fragment,m),E(zL.$$.fragment,m),E(XT.$$.fragment,m),E(QL.$$.fragment,m),E(WL.$$.fragment,m),E(UL.$$.fragment,m),E(QT.$$.fragment,m),E(JL.$$.fragment,m),E(KT.$$.fragment,m),E(YL.$$.fragment,m),E(KL.$$.fragment,m),E(e8.$$.fragment,m),E(eM.$$.fragment,m),E(o8.$$.fragment,m),E(tM.$$.fragment,m),E(r8.$$.fragment,m),E(t8.$$.fragment,m),E(n8.$$.fragment,m),E(nM.$$.fragment,m),E(s8.$$.fragment,m),E(UM.$$.fragment,m),E(l8.$$.fragment,m),E(i8.$$.fragment,m),E(c8.$$.fragment,m),E(YM.$$.fragment,m),E(m8.$$.fragment,m),E(T4.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(E4.$$.fragment,m),E(p8.$$.fragment,m),E(I4.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(N4.$$.fragment,m),E(T8.$$.fragment,m),E(G4.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(V4.$$.fragment,m),E(y8.$$.fragment,m),E(cE.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(fE.$$.fragment,m),E(S8.$$.fragment,m),E(EE.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(wE.$$.fragment,m),E(q8.$$.fragment,m),E(KE.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(e5.$$.fragment,m),E(O8.$$.fragment,m),E(b5.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(Q8.$$.fragment,m),E(v5.$$.fragment,m),E(W8.$$.fragment,m),E(M5.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(C5.$$.fragment,m),E(K8.$$.fragment,m),E(z5.$$.fragment,m),E(Z8.$$.fragment,m),E(e7.$$.fragment,m),E(r7.$$.fragment,m),E(W5.$$.fragment,m),E(t7.$$.fragment,m),E(hC.$$.fragment,m),E(a7.$$.fragment,m),E(n7.$$.fragment,m),E(l7.$$.fragment,m),E(pC.$$.fragment,m),E(i7.$$.fragment,m),E(bC.$$.fragment,m),E(d7.$$.fragment,m),E(c7.$$.fragment,m),E(f7.$$.fragment,m),E(vC.$$.fragment,m),E(g7.$$.fragment,m),E(MC.$$.fragment,m),E(h7.$$.fragment,m),E(u7.$$.fragment,m),E(_7.$$.fragment,m),E(CC.$$.fragment,m),E(b7.$$.fragment,m),E(JC.$$.fragment,m),E(F7.$$.fragment,m),E(v7.$$.fragment,m),E(M7.$$.fragment,m),E(KC.$$.fragment,m),E(E7.$$.fragment,m),E(i3.$$.fragment,m),E(C7.$$.fragment,m),E(w7.$$.fragment,m),E(y7.$$.fragment,m),E(c3.$$.fragment,m),E(L7.$$.fragment,m),E(E3.$$.fragment,m),E(x7.$$.fragment,m),E($7.$$.fragment,m),E(S7.$$.fragment,m),E(w3.$$.fragment,m),E(R7.$$.fragment,m),E(I3.$$.fragment,m),E(B7.$$.fragment,m),E(P7.$$.fragment,m),E(q7.$$.fragment,m),E(N3.$$.fragment,m),E(N7.$$.fragment,m),E(H3.$$.fragment,m),E(j7.$$.fragment,m),E(D7.$$.fragment,m),E(O7.$$.fragment,m),E(J3.$$.fragment,m),E(V7.$$.fragment,m),E(lw.$$.fragment,m),E(X7.$$.fragment,m),E(z7.$$.fragment,m),E(W7.$$.fragment,m),E(dw.$$.fragment,m),E(H7.$$.fragment,m),E(vw.$$.fragment,m),E(U7.$$.fragment,m),E(J7.$$.fragment,m),E(K7.$$.fragment,m),E(Mw.$$.fragment,m),E(Z7.$$.fragment,m),E(kw.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(Rw.$$.fragment,m),E(ax.$$.fragment,m),E(Ow.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(Xw.$$.fragment,m),E(dx.$$.fragment,m),E(Qw.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E(Hw.$$.fragment,m),E(hx.$$.fragment,m),E(Yw.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(Fx.$$.fragment,m),E(Zw.$$.fragment,m),E(vx.$$.fragment,m),E(oA.$$.fragment,m),sIe=!0)},o(m){C(d.$$.fragment,m),C(Fa.$$.fragment,m),C(T6.$$.fragment,m),C(M6.$$.fragment,m),C(sm.$$.fragment,m),C(E6.$$.fragment,m),C(C6.$$.fragment,m),C(y6.$$.fragment,m),C(ag.$$.fragment,m),C(L6.$$.fragment,m),C(x6.$$.fragment,m),C($6.$$.fragment,m),C(R6.$$.fragment,m),C(Ig.$$.fragment,m),C(B6.$$.fragment,m),C(P6.$$.fragment,m),C(I6.$$.fragment,m),C(j6.$$.fragment,m),C(dh.$$.fragment,m),C(ch.$$.fragment,m),C(D6.$$.fragment,m),C(G6.$$.fragment,m),C(O6.$$.fragment,m),C(z6.$$.fragment,m),C(yh.$$.fragment,m),C(Lh.$$.fragment,m),C(Q6.$$.fragment,m),C(W6.$$.fragment,m),C(H6.$$.fragment,m),C(J6.$$.fragment,m),C(kh.$$.fragment,m),C(Y6.$$.fragment,m),C(Fp.$$.fragment,m),C(K6.$$.fragment,m),C(Z6.$$.fragment,m),C(oy.$$.fragment,m),C(Tp.$$.fragment,m),C(ry.$$.fragment,m),C(i_.$$.fragment,m),C(ty.$$.fragment,m),C(ay.$$.fragment,m),C(sy.$$.fragment,m),C(c_.$$.fragment,m),C(ly.$$.fragment,m),C(W_.$$.fragment,m),C(iy.$$.fragment,m),C(dy.$$.fragment,m),C(my.$$.fragment,m),C(U_.$$.fragment,m),C(fy.$$.fragment,m),C(Sb.$$.fragment,m),C(gy.$$.fragment,m),C(hy.$$.fragment,m),C(py.$$.fragment,m),C(Bb.$$.fragment,m),C(_y.$$.fragment,m),C(Zb.$$.fragment,m),C(by.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(o2.$$.fragment,m),C(My.$$.fragment,m),C(J2.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ay.$$.fragment,m),C(K2.$$.fragment,m),C(yy.$$.fragment,m),C(LF.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(ky.$$.fragment,m),C($F.$$.fragment,m),C(Sy.$$.fragment,m),C(qF.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(jF.$$.fragment,m),C(qy.$$.fragment,m),C(vv.$$.fragment,m),C(Ny.$$.fragment,m),C(jy.$$.fragment,m),C(Gy.$$.fragment,m),C(Mv.$$.fragment,m),C(Oy.$$.fragment,m),C(d1.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qy.$$.fragment,m),C(m1.$$.fragment,m),C(Wy.$$.fragment,m),C(h1.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(p1.$$.fragment,m),C(Ky.$$.fragment,m),C(x1.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(k1.$$.fragment,m),C(tL.$$.fragment,m),C(B1.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(I1.$$.fragment,m),C(iL.$$.fragment,m),C(Q1.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(H1.$$.fragment,m),C(gL.$$.fragment,m),C(eT.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(rT.$$.fragment,m),C(bL.$$.fragment,m),C(fT.$$.fragment,m),C(FL.$$.fragment,m),C(vL.$$.fragment,m),C(ML.$$.fragment,m),C(hT.$$.fragment,m),C(EL.$$.fragment,m),C(bT.$$.fragment,m),C(wL.$$.fragment,m),C(AL.$$.fragment,m),C(LL.$$.fragment,m),C(vT.$$.fragment,m),C(xL.$$.fragment,m),C(AT.$$.fragment,m),C($L.$$.fragment,m),C(kL.$$.fragment,m),C(RL.$$.fragment,m),C(LT.$$.fragment,m),C(BL.$$.fragment,m),C(RT.$$.fragment,m),C(PL.$$.fragment,m),C(IL.$$.fragment,m),C(NL.$$.fragment,m),C(PT.$$.fragment,m),C(jL.$$.fragment,m),C(jT.$$.fragment,m),C(GL.$$.fragment,m),C(OL.$$.fragment,m),C(XL.$$.fragment,m),C(GT.$$.fragment,m),C(zL.$$.fragment,m),C(XT.$$.fragment,m),C(QL.$$.fragment,m),C(WL.$$.fragment,m),C(UL.$$.fragment,m),C(QT.$$.fragment,m),C(JL.$$.fragment,m),C(KT.$$.fragment,m),C(YL.$$.fragment,m),C(KL.$$.fragment,m),C(e8.$$.fragment,m),C(eM.$$.fragment,m),C(o8.$$.fragment,m),C(tM.$$.fragment,m),C(r8.$$.fragment,m),C(t8.$$.fragment,m),C(n8.$$.fragment,m),C(nM.$$.fragment,m),C(s8.$$.fragment,m),C(UM.$$.fragment,m),C(l8.$$.fragment,m),C(i8.$$.fragment,m),C(c8.$$.fragment,m),C(YM.$$.fragment,m),C(m8.$$.fragment,m),C(T4.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(E4.$$.fragment,m),C(p8.$$.fragment,m),C(I4.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(N4.$$.fragment,m),C(T8.$$.fragment,m),C(G4.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(V4.$$.fragment,m),C(y8.$$.fragment,m),C(cE.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(fE.$$.fragment,m),C(S8.$$.fragment,m),C(EE.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(wE.$$.fragment,m),C(q8.$$.fragment,m),C(KE.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(e5.$$.fragment,m),C(O8.$$.fragment,m),C(b5.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(Q8.$$.fragment,m),C(v5.$$.fragment,m),C(W8.$$.fragment,m),C(M5.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(C5.$$.fragment,m),C(K8.$$.fragment,m),C(z5.$$.fragment,m),C(Z8.$$.fragment,m),C(e7.$$.fragment,m),C(r7.$$.fragment,m),C(W5.$$.fragment,m),C(t7.$$.fragment,m),C(hC.$$.fragment,m),C(a7.$$.fragment,m),C(n7.$$.fragment,m),C(l7.$$.fragment,m),C(pC.$$.fragment,m),C(i7.$$.fragment,m),C(bC.$$.fragment,m),C(d7.$$.fragment,m),C(c7.$$.fragment,m),C(f7.$$.fragment,m),C(vC.$$.fragment,m),C(g7.$$.fragment,m),C(MC.$$.fragment,m),C(h7.$$.fragment,m),C(u7.$$.fragment,m),C(_7.$$.fragment,m),C(CC.$$.fragment,m),C(b7.$$.fragment,m),C(JC.$$.fragment,m),C(F7.$$.fragment,m),C(v7.$$.fragment,m),C(M7.$$.fragment,m),C(KC.$$.fragment,m),C(E7.$$.fragment,m),C(i3.$$.fragment,m),C(C7.$$.fragment,m),C(w7.$$.fragment,m),C(y7.$$.fragment,m),C(c3.$$.fragment,m),C(L7.$$.fragment,m),C(E3.$$.fragment,m),C(x7.$$.fragment,m),C($7.$$.fragment,m),C(S7.$$.fragment,m),C(w3.$$.fragment,m),C(R7.$$.fragment,m),C(I3.$$.fragment,m),C(B7.$$.fragment,m),C(P7.$$.fragment,m),C(q7.$$.fragment,m),C(N3.$$.fragment,m),C(N7.$$.fragment,m),C(H3.$$.fragment,m),C(j7.$$.fragment,m),C(D7.$$.fragment,m),C(O7.$$.fragment,m),C(J3.$$.fragment,m),C(V7.$$.fragment,m),C(lw.$$.fragment,m),C(X7.$$.fragment,m),C(z7.$$.fragment,m),C(W7.$$.fragment,m),C(dw.$$.fragment,m),C(H7.$$.fragment,m),C(vw.$$.fragment,m),C(U7.$$.fragment,m),C(J7.$$.fragment,m),C(K7.$$.fragment,m),C(Mw.$$.fragment,m),C(Z7.$$.fragment,m),C(kw.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(Rw.$$.fragment,m),C(ax.$$.fragment,m),C(Ow.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(Xw.$$.fragment,m),C(dx.$$.fragment,m),C(Qw.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C(Hw.$$.fragment,m),C(hx.$$.fragment,m),C(Yw.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(Fx.$$.fragment,m),C(Zw.$$.fragment,m),C(vx.$$.fragment,m),C(oA.$$.fragment,m),sIe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(om),m&&t(Kr),m&&t(qe),m&&t(Xe),m&&t(tm),w(Fa,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(va),m&&t(nBe),m&&t(ii),w(T6),m&&t(sBe),m&&t(An),m&&t(lBe),w(M6,m),m&&t(iBe),m&&t(N9),m&&t(dBe),w(sm,m),m&&t(cBe),m&&t(di),w(E6),m&&t(mBe),m&&t(Co),w(C6),w(y6),w(ag),w(L6),m&&t(fBe),m&&t(mi),w(x6),m&&t(gBe),m&&t(wo),w($6),w(R6),w(Ig),w(B6),m&&t(hBe),m&&t(fi),w(P6),m&&t(uBe),m&&t(Ao),w(I6),w(j6),w(dh),w(ch),w(D6),m&&t(pBe),m&&t(gi),w(G6),m&&t(_Be),m&&t(yo),w(O6),w(z6),w(yh),w(Lh),w(Q6),m&&t(bBe),m&&t(ui),w(W6),m&&t(FBe),m&&t(Lo),w(H6),w(J6),w(kh),w(Y6),w(Fp),m&&t(vBe),m&&t(bi),w(K6),m&&t(TBe),m&&t(xo),w(Z6),w(oy),w(Tp),w(ry),w(i_),m&&t(MBe),m&&t(Ti),w(ty),m&&t(EBe),m&&t($o),w(ay),w(sy),w(c_),w(ly),w(W_),m&&t(CBe),m&&t(Ci),w(iy),m&&t(wBe),m&&t(ko),w(dy),w(my),w(U_),w(fy),w(Sb),m&&t(ABe),m&&t(yi),w(gy),m&&t(yBe),m&&t(So),w(hy),w(py),w(Bb),w(_y),w(Zb),m&&t(LBe),m&&t($i),w(by),m&&t(xBe),m&&t(Ro),w(Fy),w(Ty),w(o2),w(My),w(J2),m&&t($Be),m&&t(Ri),w(Ey),m&&t(kBe),m&&t(Bo),w(Cy),w(Ay),w(K2),w(yy),w(LF),m&&t(SBe),m&&t(Ii),w(Ly),m&&t(RBe),m&&t(Po),w(xy),w(ky),w($F),w(Sy),w(qF),m&&t(BBe),m&&t(ji),w(Ry),m&&t(PBe),m&&t(Io),w(By),w(Iy),w(jF),w(qy),w(vv),m&&t(IBe),m&&t(Oi),w(Ny),m&&t(qBe),m&&t(qo),w(jy),w(Gy),w(Mv),w(Oy),w(d1),m&&t(NBe),m&&t(zi),w(Vy),m&&t(jBe),m&&t(No),w(Xy),w(Qy),w(m1),w(Wy),w(h1),m&&t(DBe),m&&t(Hi),w(Hy),m&&t(GBe),m&&t(jo),w(Uy),w(Yy),w(p1),w(Ky),w(x1),m&&t(OBe),m&&t(Yi),w(Zy),m&&t(VBe),m&&t(Do),w(eL),w(rL),w(k1),w(tL),w(B1),m&&t(XBe),m&&t(ed),w(aL),m&&t(zBe),m&&t(Go),w(nL),w(lL),w(I1),w(iL),w(Q1),m&&t(QBe),m&&t(td),w(dL),m&&t(WBe),m&&t(Oo),w(cL),w(fL),w(H1),w(gL),w(eT),m&&t(HBe),m&&t(sd),w(hL),m&&t(UBe),m&&t(Vo),w(uL),w(_L),w(rT),w(bL),w(fT),m&&t(JBe),m&&t(dd),w(FL),m&&t(YBe),m&&t(Xo),w(vL),w(ML),w(hT),w(EL),w(bT),m&&t(KBe),m&&t(fd),w(wL),m&&t(ZBe),m&&t(zo),w(AL),w(LL),w(vT),w(xL),w(AT),m&&t(ePe),m&&t(ud),w($L),m&&t(oPe),m&&t(Qo),w(kL),w(RL),w(LT),w(BL),w(RT),m&&t(rPe),m&&t(Fd),w(PL),m&&t(tPe),m&&t(Wo),w(IL),w(NL),w(PT),w(jL),w(jT),m&&t(aPe),m&&t(Md),w(GL),m&&t(nPe),m&&t(Ho),w(OL),w(XL),w(GT),w(zL),w(XT),m&&t(sPe),m&&t(wd),w(QL),m&&t(lPe),m&&t(Uo),w(WL),w(UL),w(QT),w(JL),w(KT),m&&t(iPe),m&&t(Ld),w(YL),m&&t(dPe),m&&t(Jo),w(KL),w(e8),w(eM),w(o8),w(tM),m&&t(cPe),m&&t(kd),w(r8),m&&t(mPe),m&&t(Yo),w(t8),w(n8),w(nM),w(s8),w(UM),m&&t(fPe),m&&t(Bd),w(l8),m&&t(gPe),m&&t(Ko),w(i8),w(c8),w(YM),w(m8),w(T4),m&&t(hPe),m&&t(qd),w(f8),m&&t(uPe),m&&t(Zo),w(g8),w(u8),w(E4),w(p8),w(I4),m&&t(pPe),m&&t(Dd),w(_8),m&&t(_Pe),m&&t(er),w(b8),w(v8),w(N4),w(T8),w(G4),m&&t(bPe),m&&t(Vd),w(E8),m&&t(FPe),m&&t(or),w(C8),w(A8),w(V4),w(y8),w(cE),m&&t(vPe),m&&t(Qd),w(L8),m&&t(TPe),m&&t(rr),w(x8),w(k8),w(fE),w(S8),w(EE),m&&t(MPe),m&&t(Ud),w(R8),m&&t(EPe),m&&t(tr),w(B8),w(I8),w(wE),w(q8),w(KE),m&&t(CPe),m&&t(Kd),w(N8),m&&t(wPe),m&&t(ar),w(j8),w(G8),w(e5),w(O8),w(b5),m&&t(APe),m&&t(oc),w(V8),m&&t(yPe),m&&t(nr),w(X8),w(Q8),w(v5),w(W8),w(M5),m&&t(LPe),m&&t(ac),w(H8),m&&t(xPe),m&&t(sr),w(U8),w(Y8),w(C5),w(K8),w(z5),m&&t($Pe),m&&t(lc),w(Z8),m&&t(kPe),m&&t(lr),w(e7),w(r7),w(W5),w(t7),w(hC),m&&t(SPe),m&&t(cc),w(a7),m&&t(RPe),m&&t(ir),w(n7),w(l7),w(pC),w(i7),w(bC),m&&t(BPe),m&&t(gc),w(d7),m&&t(PPe),m&&t(dr),w(c7),w(f7),w(vC),w(g7),w(MC),m&&t(IPe),m&&t(pc),w(h7),m&&t(qPe),m&&t(cr),w(u7),w(_7),w(CC),w(b7),w(JC),m&&t(NPe),m&&t(Fc),w(F7),m&&t(jPe),m&&t(mr),w(v7),w(M7),w(KC),w(E7),w(i3),m&&t(DPe),m&&t(Mc),w(C7),m&&t(GPe),m&&t(fr),w(w7),w(y7),w(c3),w(L7),w(E3),m&&t(OPe),m&&t(wc),w(x7),m&&t(VPe),m&&t(gr),w($7),w(S7),w(w3),w(R7),w(I3),m&&t(XPe),m&&t(Lc),w(B7),m&&t(zPe),m&&t(hr),w(P7),w(q7),w(N3),w(N7),w(H3),m&&t(QPe),m&&t(kc),w(j7),m&&t(WPe),m&&t(ur),w(D7),w(O7),w(J3),w(V7),w(lw),m&&t(HPe),m&&t(Bc),w(X7),m&&t(UPe),m&&t(pr),w(z7),w(W7),w(dw),w(H7),w(vw),m&&t(JPe),m&&t(qc),w(U7),m&&t(YPe),m&&t(_r),w(J7),w(K7),w(Mw),w(Z7),w(kw),m&&t(KPe),m&&t(Dc),w(ex),m&&t(ZPe),m&&t(br),w(ox),w(tx),w(Rw),w(ax),w(Ow),m&&t(eIe),m&&t(Vc),w(nx),m&&t(oIe),m&&t(Fr),w(sx),w(ix),w(Xw),w(dx),w(Qw),m&&t(rIe),m&&t(Qc),w(cx),m&&t(tIe),m&&t(vr),w(mx),w(gx),w(Hw),w(hx),w(Yw),m&&t(aIe),m&&t(Uc),w(px),m&&t(nIe),m&&t(Tr),w(_x),w(Fx),w(Zw),w(vx),w(oA)}}}const NAt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function jAt(L){return G3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class QAt extends q3t{constructor(g){super();N3t(this,g,jAt,qAt,j3t,{})}}export{QAt as default,NAt as metadata};
