import{S as nEt,i as sEt,s as lEt,e as a,k as l,w as m,t as o,M as iEt,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as dEt}from"../../chunks/vendor-6b77c823.js";import{T as ikr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function cEt(Pm){let K,io,de,Ee,lo,me,Ce,Vo,Ii,$m,ma,Ni,Di,ny,Im,Be,co,ji,Gn,sy,On,Xn,ly,qi,Vn,iy,Gi,Nm,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),ny=o(")."),Im=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),sy=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),ly=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),iy=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Nm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){K=n(mo,"P",{});var ue=s(K);io=r(ue,"If your "),de=n(ue,"CODE",{});var K8=s(de);Ee=r(K8,"NewModelConfig"),K8.forEach(t),lo=r(ue," is a subclass of "),me=n(ue,"CODE",{});var Oi=s(me);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var Z8=s(Ii);$m=r(Z8,"model_type"),Z8.forEach(t),ma=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var e9=s(Ni);Di=r(e9,'"new-model"'),e9.forEach(t),ny=r(ue,")."),ue.forEach(t),Im=i(mo),Be=n(mo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),sy=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var o9=s(On);Xn=r(o9,"PreTrainedModel"),o9.forEach(t),ly=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var Dm=s(qi);Vn=r(Dm,"config_class"),Dm.forEach(t),iy=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var r9=s(Gi);Nm=r(r9,"NewModelConfig"),r9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,K,ue),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,me),e(me,Ce),e(K,Vo),e(K,Ii),e(Ii,$m),e(K,ma),e(K,Ni),e(Ni,Di),e(K,ny),b(mo,Im,ue),b(mo,Be,ue),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,sy),e(Be,On),e(On,Xn),e(Be,ly),e(Be,qi),e(qi,Vn),e(Be,iy),e(Be,Gi),e(Gi,Nm),e(Be,qa)},d(mo){mo&&t(K),mo&&t(Im),mo&&t(Be)}}}function mEt(Pm){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function fEt(Pm){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){K=n(me,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(me,Ce){b(me,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(me){me&&t(K)}}}function gEt(Pm){let K,io,de,Ee,lo,me,Ce,Vo,Ii,$m,ma,Ni,Di,ny,Im,Be,co,ji,Gn,sy,On,Xn,ly,qi,Vn,iy,Gi,Nm,qa,mo,ue,K8,Oi,Z8,e9,zo,Ga,o9,Dm,r9,h$e,eke,Xi,jm,DQ,dy,u$e,jQ,p$e,oke,zn,_$e,qQ,b$e,v$e,GQ,T$e,F$e,rke,cy,tke,t9,C$e,ake,qm,nke,Vi,Gm,OQ,my,M$e,XQ,E$e,ske,Wo,fy,y$e,gy,w$e,a9,A$e,L$e,B$e,hy,x$e,VQ,k$e,R$e,S$e,fo,uy,P$e,zQ,$$e,I$e,zi,N$e,WQ,D$e,j$e,QQ,q$e,G$e,O$e,v,Om,HQ,X$e,V$e,n9,z$e,W$e,Q$e,Xm,UQ,H$e,U$e,s9,J$e,Y$e,K$e,Vm,JQ,Z$e,eIe,l9,oIe,rIe,tIe,zm,YQ,aIe,nIe,i9,sIe,lIe,iIe,Wm,KQ,dIe,cIe,d9,mIe,fIe,gIe,Qm,ZQ,hIe,uIe,c9,pIe,_Ie,bIe,Hm,eH,vIe,TIe,m9,FIe,CIe,MIe,Um,oH,EIe,yIe,f9,wIe,AIe,LIe,Jm,rH,BIe,xIe,g9,kIe,RIe,SIe,Ym,tH,PIe,$Ie,h9,IIe,NIe,DIe,Km,aH,jIe,qIe,u9,GIe,OIe,XIe,Zm,nH,VIe,zIe,p9,WIe,QIe,HIe,ef,sH,UIe,JIe,_9,YIe,KIe,ZIe,of,lH,eNe,oNe,b9,rNe,tNe,aNe,rf,iH,nNe,sNe,v9,lNe,iNe,dNe,tf,dH,cNe,mNe,T9,fNe,gNe,hNe,af,cH,uNe,pNe,F9,_Ne,bNe,vNe,nf,mH,TNe,FNe,C9,CNe,MNe,ENe,sf,fH,yNe,wNe,M9,ANe,LNe,BNe,lf,gH,xNe,kNe,E9,RNe,SNe,PNe,df,hH,$Ne,INe,y9,NNe,DNe,jNe,cf,uH,qNe,GNe,w9,ONe,XNe,VNe,mf,pH,zNe,WNe,A9,QNe,HNe,UNe,ff,_H,JNe,YNe,L9,KNe,ZNe,eDe,gf,bH,oDe,rDe,B9,tDe,aDe,nDe,hf,vH,sDe,lDe,x9,iDe,dDe,cDe,uf,TH,mDe,fDe,k9,gDe,hDe,uDe,pf,FH,pDe,_De,R9,bDe,vDe,TDe,_f,CH,FDe,CDe,S9,MDe,EDe,yDe,bf,MH,wDe,ADe,P9,LDe,BDe,xDe,vf,EH,kDe,RDe,$9,SDe,PDe,$De,Tf,yH,IDe,NDe,I9,DDe,jDe,qDe,Ff,wH,GDe,ODe,N9,XDe,VDe,zDe,Cf,AH,WDe,QDe,D9,HDe,UDe,JDe,Mf,LH,YDe,KDe,j9,ZDe,eje,oje,Ef,BH,rje,tje,q9,aje,nje,sje,yf,xH,lje,ije,G9,dje,cje,mje,wf,kH,fje,gje,O9,hje,uje,pje,Af,RH,_je,bje,X9,vje,Tje,Fje,Lf,SH,Cje,Mje,V9,Eje,yje,wje,Bf,PH,Aje,Lje,z9,Bje,xje,kje,xf,$H,Rje,Sje,W9,Pje,$je,Ije,kf,IH,Nje,Dje,Q9,jje,qje,Gje,Rf,NH,Oje,Xje,H9,Vje,zje,Wje,Sf,DH,Qje,Hje,U9,Uje,Jje,Yje,Pf,jH,Kje,Zje,J9,eqe,oqe,rqe,$f,qH,tqe,aqe,Y9,nqe,sqe,lqe,If,GH,iqe,dqe,K9,cqe,mqe,fqe,Nf,OH,gqe,hqe,Z9,uqe,pqe,_qe,Df,XH,bqe,vqe,eB,Tqe,Fqe,Cqe,jf,VH,Mqe,Eqe,oB,yqe,wqe,Aqe,qf,zH,Lqe,Bqe,rB,xqe,kqe,Rqe,Gf,WH,Sqe,Pqe,tB,$qe,Iqe,Nqe,Of,QH,Dqe,jqe,aB,qqe,Gqe,Oqe,Xf,HH,Xqe,Vqe,nB,zqe,Wqe,Qqe,Vf,UH,Hqe,Uqe,sB,Jqe,Yqe,Kqe,zf,JH,Zqe,eGe,lB,oGe,rGe,tGe,Wf,YH,aGe,nGe,iB,sGe,lGe,iGe,Qf,KH,dGe,cGe,dB,mGe,fGe,gGe,Hf,ZH,hGe,uGe,cB,pGe,_Ge,bGe,Uf,eU,vGe,TGe,mB,FGe,CGe,MGe,Jf,oU,EGe,yGe,fB,wGe,AGe,LGe,Yf,rU,BGe,xGe,gB,kGe,RGe,SGe,Kf,tU,PGe,$Ge,hB,IGe,NGe,DGe,Zf,aU,jGe,qGe,uB,GGe,OGe,XGe,eg,nU,VGe,zGe,pB,WGe,QGe,HGe,og,sU,UGe,JGe,_B,YGe,KGe,ZGe,rg,lU,eOe,oOe,bB,rOe,tOe,aOe,tg,iU,nOe,sOe,vB,lOe,iOe,dOe,ag,dU,cOe,mOe,TB,fOe,gOe,hOe,ng,cU,uOe,pOe,FB,_Oe,bOe,vOe,sg,mU,TOe,FOe,CB,COe,MOe,EOe,lg,fU,yOe,wOe,MB,AOe,LOe,BOe,ig,gU,xOe,kOe,EB,ROe,SOe,POe,dg,hU,$Oe,IOe,yB,NOe,DOe,jOe,cg,uU,qOe,GOe,wB,OOe,XOe,VOe,mg,pU,zOe,WOe,AB,QOe,HOe,UOe,fg,_U,JOe,YOe,LB,KOe,ZOe,eXe,gg,bU,oXe,rXe,BB,tXe,aXe,nXe,hg,vU,sXe,lXe,xB,iXe,dXe,cXe,ug,TU,mXe,fXe,kB,gXe,hXe,uXe,pg,FU,pXe,_Xe,RB,bXe,vXe,TXe,_g,CU,FXe,CXe,SB,MXe,EXe,yXe,bg,MU,wXe,AXe,PB,LXe,BXe,xXe,vg,EU,kXe,RXe,$B,SXe,PXe,$Xe,Tg,yU,IXe,NXe,IB,DXe,jXe,qXe,Fg,wU,GXe,OXe,NB,XXe,VXe,zXe,Cg,AU,WXe,QXe,DB,HXe,UXe,JXe,Mg,LU,YXe,KXe,jB,ZXe,eVe,oVe,Eg,BU,rVe,tVe,qB,aVe,nVe,sVe,yg,xU,lVe,iVe,GB,dVe,cVe,mVe,wg,kU,fVe,gVe,OB,hVe,uVe,pVe,Ag,RU,_Ve,bVe,XB,vVe,TVe,FVe,Lg,SU,CVe,MVe,VB,EVe,yVe,wVe,Bg,PU,AVe,LVe,zB,BVe,xVe,kVe,xg,$U,RVe,SVe,WB,PVe,$Ve,IVe,kg,IU,NVe,DVe,QB,jVe,qVe,GVe,Rg,NU,OVe,XVe,HB,VVe,zVe,WVe,DU,QVe,HVe,py,UVe,Sg,_y,JVe,jU,YVe,lke,Wi,Pg,qU,by,KVe,GU,ZVe,ike,Qo,vy,eze,Ty,oze,UB,rze,tze,aze,Fy,nze,OU,sze,lze,ize,go,Cy,dze,XU,cze,mze,Oa,fze,VU,gze,hze,zU,uze,pze,WU,_ze,bze,vze,E,Wn,QU,Tze,Fze,JB,Cze,Mze,YB,Eze,yze,wze,Qn,HU,Aze,Lze,KB,Bze,xze,ZB,kze,Rze,Sze,Hn,UU,Pze,$ze,ex,Ize,Nze,ox,Dze,jze,qze,$g,JU,Gze,Oze,rx,Xze,Vze,zze,Un,YU,Wze,Qze,tx,Hze,Uze,ax,Jze,Yze,Kze,Ig,KU,Zze,eWe,nx,oWe,rWe,tWe,Ng,ZU,aWe,nWe,sx,sWe,lWe,iWe,Dg,eJ,dWe,cWe,lx,mWe,fWe,gWe,Jn,oJ,hWe,uWe,ix,pWe,_We,dx,bWe,vWe,TWe,Yn,rJ,FWe,CWe,cx,MWe,EWe,mx,yWe,wWe,AWe,Kn,tJ,LWe,BWe,fx,xWe,kWe,gx,RWe,SWe,PWe,jg,aJ,$We,IWe,hx,NWe,DWe,jWe,qg,nJ,qWe,GWe,ux,OWe,XWe,VWe,Zn,sJ,zWe,WWe,px,QWe,HWe,_x,UWe,JWe,YWe,Gg,lJ,KWe,ZWe,bx,eQe,oQe,rQe,es,iJ,tQe,aQe,vx,nQe,sQe,Tx,lQe,iQe,dQe,os,dJ,cQe,mQe,Fx,fQe,gQe,Cx,hQe,uQe,pQe,rs,cJ,_Qe,bQe,Mx,vQe,TQe,mJ,FQe,CQe,MQe,Og,fJ,EQe,yQe,Ex,wQe,AQe,LQe,ts,gJ,BQe,xQe,yx,kQe,RQe,wx,SQe,PQe,$Qe,Xg,hJ,IQe,NQe,Ax,DQe,jQe,qQe,as,uJ,GQe,OQe,Lx,XQe,VQe,Bx,zQe,WQe,QQe,ns,pJ,HQe,UQe,xx,JQe,YQe,kx,KQe,ZQe,eHe,ss,_J,oHe,rHe,Rx,tHe,aHe,Sx,nHe,sHe,lHe,Vg,bJ,iHe,dHe,Px,cHe,mHe,fHe,ls,vJ,gHe,hHe,$x,uHe,pHe,Ix,_He,bHe,vHe,zg,TJ,THe,FHe,Nx,CHe,MHe,EHe,is,FJ,yHe,wHe,Dx,AHe,LHe,jx,BHe,xHe,kHe,ds,CJ,RHe,SHe,qx,PHe,$He,Gx,IHe,NHe,DHe,cs,MJ,jHe,qHe,Ox,GHe,OHe,Xx,XHe,VHe,zHe,ms,EJ,WHe,QHe,Vx,HHe,UHe,zx,JHe,YHe,KHe,Wg,yJ,ZHe,eUe,Wx,oUe,rUe,tUe,fs,wJ,aUe,nUe,Qx,sUe,lUe,Hx,iUe,dUe,cUe,gs,AJ,mUe,fUe,Ux,gUe,hUe,Jx,uUe,pUe,_Ue,hs,LJ,bUe,vUe,Yx,TUe,FUe,Kx,CUe,MUe,EUe,us,BJ,yUe,wUe,Zx,AUe,LUe,ek,BUe,xUe,kUe,ps,xJ,RUe,SUe,ok,PUe,$Ue,rk,IUe,NUe,DUe,_s,kJ,jUe,qUe,tk,GUe,OUe,ak,XUe,VUe,zUe,Qg,RJ,WUe,QUe,nk,HUe,UUe,JUe,bs,SJ,YUe,KUe,sk,ZUe,eJe,lk,oJe,rJe,tJe,Hg,PJ,aJe,nJe,ik,sJe,lJe,iJe,Ug,$J,dJe,cJe,dk,mJe,fJe,gJe,vs,IJ,hJe,uJe,ck,pJe,_Je,mk,bJe,vJe,TJe,Ts,NJ,FJe,CJe,fk,MJe,EJe,gk,yJe,wJe,AJe,Jg,DJ,LJe,BJe,hk,xJe,kJe,RJe,Fs,jJ,SJe,PJe,uk,$Je,IJe,pk,NJe,DJe,jJe,Cs,qJ,qJe,GJe,_k,OJe,XJe,bk,VJe,zJe,WJe,Ms,GJ,QJe,HJe,vk,UJe,JJe,Tk,YJe,KJe,ZJe,Es,OJ,eYe,oYe,Fk,rYe,tYe,Ck,aYe,nYe,sYe,ys,XJ,lYe,iYe,Mk,dYe,cYe,Ek,mYe,fYe,gYe,Yg,VJ,hYe,uYe,yk,pYe,_Ye,bYe,Kg,zJ,vYe,TYe,wk,FYe,CYe,MYe,Zg,WJ,EYe,yYe,Ak,wYe,AYe,LYe,eh,QJ,BYe,xYe,Lk,kYe,RYe,SYe,ws,HJ,PYe,$Ye,Bk,IYe,NYe,xk,DYe,jYe,qYe,oh,UJ,GYe,OYe,kk,XYe,VYe,zYe,As,JJ,WYe,QYe,Rk,HYe,UYe,Sk,JYe,YYe,KYe,Ls,YJ,ZYe,eKe,Pk,oKe,rKe,$k,tKe,aKe,nKe,Bs,KJ,sKe,lKe,Ik,iKe,dKe,Nk,cKe,mKe,fKe,xs,ZJ,gKe,hKe,Dk,uKe,pKe,jk,_Ke,bKe,vKe,ks,eY,TKe,FKe,qk,CKe,MKe,Gk,EKe,yKe,wKe,Rs,oY,AKe,LKe,Ok,BKe,xKe,Xk,kKe,RKe,SKe,rh,rY,PKe,$Ke,Vk,IKe,NKe,DKe,th,tY,jKe,qKe,zk,GKe,OKe,XKe,Ss,aY,VKe,zKe,Wk,WKe,QKe,Qk,HKe,UKe,JKe,Ps,nY,YKe,KKe,Hk,ZKe,eZe,Uk,oZe,rZe,tZe,$s,sY,aZe,nZe,Jk,sZe,lZe,Yk,iZe,dZe,cZe,ah,lY,mZe,fZe,Kk,gZe,hZe,uZe,nh,iY,pZe,_Ze,Zk,bZe,vZe,TZe,sh,dY,FZe,CZe,eR,MZe,EZe,yZe,lh,cY,wZe,AZe,oR,LZe,BZe,xZe,Is,mY,kZe,RZe,rR,SZe,PZe,tR,$Ze,IZe,NZe,ih,fY,DZe,jZe,aR,qZe,GZe,OZe,dh,gY,XZe,VZe,nR,zZe,WZe,QZe,Ns,hY,HZe,UZe,sR,JZe,YZe,lR,KZe,ZZe,eeo,Ds,uY,oeo,reo,iR,teo,aeo,dR,neo,seo,leo,pY,ieo,deo,My,ceo,ch,Ey,meo,_Y,feo,dke,Qi,mh,bY,yy,geo,vY,heo,cke,Ho,wy,ueo,Ay,peo,cR,_eo,beo,veo,Ly,Teo,TY,Feo,Ceo,Meo,$e,By,Eeo,FY,yeo,weo,Xa,Aeo,CY,Leo,Beo,MY,xeo,keo,EY,Reo,Seo,Peo,re,fh,yY,$eo,Ieo,mR,Neo,Deo,jeo,gh,wY,qeo,Geo,fR,Oeo,Xeo,Veo,hh,AY,zeo,Weo,gR,Qeo,Heo,Ueo,uh,LY,Jeo,Yeo,hR,Keo,Zeo,eoo,ph,BY,ooo,roo,uR,too,aoo,noo,_h,xY,soo,loo,pR,ioo,doo,coo,bh,kY,moo,foo,_R,goo,hoo,uoo,vh,RY,poo,_oo,bR,boo,voo,Too,Th,SY,Foo,Coo,vR,Moo,Eoo,yoo,Fh,PY,woo,Aoo,TR,Loo,Boo,xoo,Ch,$Y,koo,Roo,FR,Soo,Poo,$oo,Mh,IY,Ioo,Noo,CR,Doo,joo,qoo,Eh,NY,Goo,Ooo,MR,Xoo,Voo,zoo,yh,DY,Woo,Qoo,ER,Hoo,Uoo,Joo,wh,jY,Yoo,Koo,yR,Zoo,ero,oro,Ah,qY,rro,tro,wR,aro,nro,sro,Lh,GY,lro,iro,AR,dro,cro,mro,Bh,OY,fro,gro,LR,hro,uro,pro,xh,_ro,XY,bro,vro,xy,Tro,kh,ky,Fro,VY,Cro,mke,Hi,Rh,zY,Ry,Mro,WY,Ero,fke,Uo,Sy,yro,Py,wro,BR,Aro,Lro,Bro,$y,xro,QY,kro,Rro,Sro,Ie,Iy,Pro,HY,$ro,Iro,Ui,Nro,UY,Dro,jro,JY,qro,Gro,Oro,xe,Sh,YY,Xro,Vro,xR,zro,Wro,Qro,Ph,KY,Hro,Uro,kR,Jro,Yro,Kro,$h,ZY,Zro,eto,RR,oto,rto,tto,Ih,eK,ato,nto,SR,sto,lto,ito,Nh,oK,dto,cto,PR,mto,fto,gto,Dh,rK,hto,uto,$R,pto,_to,bto,jh,tK,vto,Tto,IR,Fto,Cto,Mto,qh,aK,Eto,yto,NR,wto,Ato,Lto,Gh,Bto,nK,xto,kto,Ny,Rto,Oh,Dy,Sto,sK,Pto,gke,Ji,Xh,lK,jy,$to,iK,Ito,hke,Jo,qy,Nto,Yi,Dto,dK,jto,qto,cK,Gto,Oto,Xto,Gy,Vto,mK,zto,Wto,Qto,Vr,Oy,Hto,fK,Uto,Jto,Ki,Yto,gK,Kto,Zto,hK,eao,oao,rao,uK,tao,aao,Xy,nao,Ne,Vy,sao,pK,lao,iao,Va,dao,_K,cao,mao,bK,fao,gao,vK,hao,uao,pao,F,Vh,TK,_ao,bao,DR,vao,Tao,Fao,zh,FK,Cao,Mao,jR,Eao,yao,wao,Wh,CK,Aao,Lao,qR,Bao,xao,kao,Qh,MK,Rao,Sao,GR,Pao,$ao,Iao,Hh,EK,Nao,Dao,OR,jao,qao,Gao,Uh,yK,Oao,Xao,XR,Vao,zao,Wao,Jh,wK,Qao,Hao,VR,Uao,Jao,Yao,Yh,AK,Kao,Zao,zR,eno,ono,rno,Kh,LK,tno,ano,WR,nno,sno,lno,Zh,BK,ino,dno,QR,cno,mno,fno,eu,xK,gno,hno,HR,uno,pno,_no,ou,kK,bno,vno,UR,Tno,Fno,Cno,ru,RK,Mno,Eno,JR,yno,wno,Ano,tu,SK,Lno,Bno,YR,xno,kno,Rno,au,PK,Sno,Pno,KR,$no,Ino,Nno,nu,$K,Dno,jno,ZR,qno,Gno,Ono,su,IK,Xno,Vno,eS,zno,Wno,Qno,lu,NK,Hno,Uno,oS,Jno,Yno,Kno,iu,DK,Zno,eso,rS,oso,rso,tso,du,jK,aso,nso,tS,sso,lso,iso,cu,qK,dso,cso,aS,mso,fso,gso,mu,GK,hso,uso,nS,pso,_so,bso,fu,OK,vso,Tso,sS,Fso,Cso,Mso,gu,XK,Eso,yso,lS,wso,Aso,Lso,hu,VK,Bso,xso,iS,kso,Rso,Sso,uu,zK,Pso,$so,dS,Iso,Nso,Dso,pu,WK,jso,qso,cS,Gso,Oso,Xso,_u,QK,Vso,zso,mS,Wso,Qso,Hso,js,HK,Uso,Jso,fS,Yso,Kso,gS,Zso,elo,olo,bu,UK,rlo,tlo,hS,alo,nlo,slo,vu,JK,llo,ilo,uS,dlo,clo,mlo,Tu,YK,flo,glo,pS,hlo,ulo,plo,Fu,KK,_lo,blo,_S,vlo,Tlo,Flo,Cu,ZK,Clo,Mlo,bS,Elo,ylo,wlo,Mu,eZ,Alo,Llo,vS,Blo,xlo,klo,Eu,oZ,Rlo,Slo,TS,Plo,$lo,Ilo,yu,rZ,Nlo,Dlo,FS,jlo,qlo,Glo,wu,tZ,Olo,Xlo,CS,Vlo,zlo,Wlo,Au,aZ,Qlo,Hlo,MS,Ulo,Jlo,Ylo,Lu,nZ,Klo,Zlo,ES,eio,oio,rio,Bu,sZ,tio,aio,yS,nio,sio,lio,xu,lZ,iio,dio,wS,cio,mio,fio,ku,iZ,gio,hio,AS,uio,pio,_io,Ru,dZ,bio,vio,LS,Tio,Fio,Cio,Su,cZ,Mio,Eio,BS,yio,wio,Aio,Pu,mZ,Lio,Bio,xS,xio,kio,Rio,$u,fZ,Sio,Pio,kS,$io,Iio,Nio,Iu,gZ,Dio,jio,RS,qio,Gio,Oio,Nu,hZ,Xio,Vio,SS,zio,Wio,Qio,Du,uZ,Hio,Uio,PS,Jio,Yio,Kio,ju,pZ,Zio,edo,$S,odo,rdo,tdo,qu,_Z,ado,ndo,IS,sdo,ldo,ido,Gu,bZ,ddo,cdo,NS,mdo,fdo,gdo,Ou,vZ,hdo,udo,DS,pdo,_do,bdo,Xu,TZ,vdo,Tdo,jS,Fdo,Cdo,Mdo,Vu,FZ,Edo,ydo,qS,wdo,Ado,Ldo,zu,CZ,Bdo,xdo,GS,kdo,Rdo,Sdo,Wu,MZ,Pdo,$do,OS,Ido,Ndo,Ddo,Qu,EZ,jdo,qdo,XS,Gdo,Odo,Xdo,Hu,yZ,Vdo,zdo,VS,Wdo,Qdo,Hdo,Uu,wZ,Udo,Jdo,zS,Ydo,Kdo,Zdo,Ju,AZ,eco,oco,WS,rco,tco,aco,Yu,LZ,nco,sco,QS,lco,ico,dco,Ku,BZ,cco,mco,HS,fco,gco,hco,Zu,xZ,uco,pco,US,_co,bco,vco,ep,kZ,Tco,Fco,JS,Cco,Mco,Eco,op,RZ,yco,wco,YS,Aco,Lco,Bco,rp,SZ,xco,kco,KS,Rco,Sco,Pco,tp,PZ,$co,Ico,ZS,Nco,Dco,jco,ap,$Z,qco,Gco,eP,Oco,Xco,Vco,np,IZ,zco,Wco,oP,Qco,Hco,Uco,sp,NZ,Jco,Yco,rP,Kco,Zco,emo,lp,DZ,omo,rmo,tP,tmo,amo,nmo,ip,jZ,smo,lmo,aP,imo,dmo,cmo,dp,qZ,mmo,fmo,nP,gmo,hmo,umo,cp,GZ,pmo,_mo,sP,bmo,vmo,Tmo,mp,OZ,Fmo,Cmo,lP,Mmo,Emo,ymo,fp,XZ,wmo,Amo,iP,Lmo,Bmo,xmo,gp,VZ,kmo,Rmo,dP,Smo,Pmo,$mo,hp,zZ,Imo,Nmo,cP,Dmo,jmo,qmo,up,WZ,Gmo,Omo,mP,Xmo,Vmo,zmo,pp,QZ,Wmo,Qmo,fP,Hmo,Umo,Jmo,_p,HZ,Ymo,Kmo,gP,Zmo,efo,ofo,bp,UZ,rfo,tfo,hP,afo,nfo,sfo,vp,JZ,lfo,ifo,uP,dfo,cfo,mfo,Tp,YZ,ffo,gfo,pP,hfo,ufo,pfo,Fp,KZ,_fo,bfo,_P,vfo,Tfo,Ffo,Cp,ZZ,Cfo,Mfo,bP,Efo,yfo,wfo,Mp,eee,Afo,Lfo,vP,Bfo,xfo,kfo,Ep,oee,Rfo,Sfo,TP,Pfo,$fo,Ifo,yp,ree,Nfo,Dfo,FP,jfo,qfo,Gfo,wp,Ofo,tee,Xfo,Vfo,aee,zfo,Wfo,nee,Qfo,Hfo,zy,uke,Zi,Ap,see,Wy,Ufo,lee,Jfo,pke,Yo,Qy,Yfo,ed,Kfo,iee,Zfo,ego,dee,ogo,rgo,tgo,Hy,ago,cee,ngo,sgo,lgo,zr,Uy,igo,mee,dgo,cgo,od,mgo,fee,fgo,ggo,gee,hgo,ugo,pgo,hee,_go,bgo,Jy,vgo,De,Yy,Tgo,uee,Fgo,Cgo,za,Mgo,pee,Ego,ygo,_ee,wgo,Ago,bee,Lgo,Bgo,xgo,k,Lp,vee,kgo,Rgo,CP,Sgo,Pgo,$go,Bp,Tee,Igo,Ngo,MP,Dgo,jgo,qgo,xp,Fee,Ggo,Ogo,EP,Xgo,Vgo,zgo,kp,Cee,Wgo,Qgo,yP,Hgo,Ugo,Jgo,Rp,Mee,Ygo,Kgo,wP,Zgo,eho,oho,Sp,Eee,rho,tho,AP,aho,nho,sho,Pp,yee,lho,iho,LP,dho,cho,mho,$p,wee,fho,gho,BP,hho,uho,pho,Ip,Aee,_ho,bho,xP,vho,Tho,Fho,Np,Lee,Cho,Mho,kP,Eho,yho,who,Dp,Bee,Aho,Lho,RP,Bho,xho,kho,jp,xee,Rho,Sho,SP,Pho,$ho,Iho,qp,kee,Nho,Dho,PP,jho,qho,Gho,Gp,Ree,Oho,Xho,$P,Vho,zho,Who,Op,See,Qho,Hho,IP,Uho,Jho,Yho,Xp,Pee,Kho,Zho,NP,euo,ouo,ruo,Vp,$ee,tuo,auo,DP,nuo,suo,luo,zp,Iee,iuo,duo,jP,cuo,muo,fuo,Wp,Nee,guo,huo,qP,uuo,puo,_uo,Qp,Dee,buo,vuo,GP,Tuo,Fuo,Cuo,Hp,jee,Muo,Euo,OP,yuo,wuo,Auo,Up,qee,Luo,Buo,XP,xuo,kuo,Ruo,Jp,Gee,Suo,Puo,VP,$uo,Iuo,Nuo,Yp,Oee,Duo,juo,zP,quo,Guo,Ouo,Kp,Xee,Xuo,Vuo,WP,zuo,Wuo,Quo,Zp,Vee,Huo,Uuo,QP,Juo,Yuo,Kuo,e_,zee,Zuo,epo,HP,opo,rpo,tpo,o_,Wee,apo,npo,UP,spo,lpo,ipo,r_,Qee,dpo,cpo,JP,mpo,fpo,gpo,t_,Hee,hpo,upo,YP,ppo,_po,bpo,a_,Uee,vpo,Tpo,KP,Fpo,Cpo,Mpo,n_,Jee,Epo,ypo,ZP,wpo,Apo,Lpo,s_,Yee,Bpo,xpo,e$,kpo,Rpo,Spo,l_,Kee,Ppo,$po,o$,Ipo,Npo,Dpo,i_,Zee,jpo,qpo,r$,Gpo,Opo,Xpo,d_,eoe,Vpo,zpo,t$,Wpo,Qpo,Hpo,c_,ooe,Upo,Jpo,a$,Ypo,Kpo,Zpo,m_,roe,e_o,o_o,n$,r_o,t_o,a_o,f_,toe,n_o,s_o,s$,l_o,i_o,d_o,g_,c_o,aoe,m_o,f_o,noe,g_o,h_o,soe,u_o,p_o,Ky,_ke,rd,h_,loe,Zy,__o,ioe,b_o,bke,Ko,ew,v_o,td,T_o,doe,F_o,C_o,coe,M_o,E_o,y_o,ow,w_o,moe,A_o,L_o,B_o,Wr,rw,x_o,foe,k_o,R_o,ad,S_o,goe,P_o,$_o,hoe,I_o,N_o,D_o,uoe,j_o,q_o,tw,G_o,je,aw,O_o,poe,X_o,V_o,Wa,z_o,_oe,W_o,Q_o,boe,H_o,U_o,voe,J_o,Y_o,K_o,$,u_,Toe,Z_o,ebo,l$,obo,rbo,tbo,p_,Foe,abo,nbo,i$,sbo,lbo,ibo,__,Coe,dbo,cbo,d$,mbo,fbo,gbo,b_,Moe,hbo,ubo,c$,pbo,_bo,bbo,v_,Eoe,vbo,Tbo,m$,Fbo,Cbo,Mbo,T_,yoe,Ebo,ybo,f$,wbo,Abo,Lbo,F_,woe,Bbo,xbo,g$,kbo,Rbo,Sbo,C_,Aoe,Pbo,$bo,h$,Ibo,Nbo,Dbo,M_,Loe,jbo,qbo,u$,Gbo,Obo,Xbo,E_,Boe,Vbo,zbo,p$,Wbo,Qbo,Hbo,y_,xoe,Ubo,Jbo,_$,Ybo,Kbo,Zbo,w_,koe,e2o,o2o,b$,r2o,t2o,a2o,A_,Roe,n2o,s2o,v$,l2o,i2o,d2o,L_,Soe,c2o,m2o,T$,f2o,g2o,h2o,B_,Poe,u2o,p2o,F$,_2o,b2o,v2o,x_,$oe,T2o,F2o,C$,C2o,M2o,E2o,k_,Ioe,y2o,w2o,M$,A2o,L2o,B2o,R_,Noe,x2o,k2o,E$,R2o,S2o,P2o,S_,Doe,$2o,I2o,y$,N2o,D2o,j2o,P_,joe,q2o,G2o,w$,O2o,X2o,V2o,$_,qoe,z2o,W2o,A$,Q2o,H2o,U2o,I_,Goe,J2o,Y2o,L$,K2o,Z2o,evo,N_,Ooe,ovo,rvo,B$,tvo,avo,nvo,D_,Xoe,svo,lvo,x$,ivo,dvo,cvo,j_,Voe,mvo,fvo,k$,gvo,hvo,uvo,q_,zoe,pvo,_vo,R$,bvo,vvo,Tvo,G_,Woe,Fvo,Cvo,S$,Mvo,Evo,yvo,O_,Qoe,wvo,Avo,P$,Lvo,Bvo,xvo,X_,Hoe,kvo,Rvo,$$,Svo,Pvo,$vo,V_,Uoe,Ivo,Nvo,I$,Dvo,jvo,qvo,z_,Joe,Gvo,Ovo,N$,Xvo,Vvo,zvo,W_,Yoe,Wvo,Qvo,D$,Hvo,Uvo,Jvo,Q_,Koe,Yvo,Kvo,j$,Zvo,eTo,oTo,H_,Zoe,rTo,tTo,q$,aTo,nTo,sTo,U_,ere,lTo,iTo,G$,dTo,cTo,mTo,J_,fTo,ore,gTo,hTo,rre,uTo,pTo,tre,_To,bTo,nw,vke,nd,Y_,are,sw,vTo,nre,TTo,Tke,Zo,lw,FTo,sd,CTo,sre,MTo,ETo,lre,yTo,wTo,ATo,iw,LTo,ire,BTo,xTo,kTo,Qr,dw,RTo,dre,STo,PTo,ld,$To,cre,ITo,NTo,mre,DTo,jTo,qTo,fre,GTo,OTo,cw,XTo,qe,mw,VTo,gre,zTo,WTo,Qa,QTo,hre,HTo,UTo,ure,JTo,YTo,pre,KTo,ZTo,e1o,I,K_,_re,o1o,r1o,O$,t1o,a1o,n1o,Z_,bre,s1o,l1o,X$,i1o,d1o,c1o,eb,vre,m1o,f1o,V$,g1o,h1o,u1o,ob,Tre,p1o,_1o,z$,b1o,v1o,T1o,rb,Fre,F1o,C1o,W$,M1o,E1o,y1o,tb,Cre,w1o,A1o,Q$,L1o,B1o,x1o,ab,Mre,k1o,R1o,H$,S1o,P1o,$1o,nb,Ere,I1o,N1o,U$,D1o,j1o,q1o,sb,yre,G1o,O1o,J$,X1o,V1o,z1o,lb,wre,W1o,Q1o,Y$,H1o,U1o,J1o,ib,Are,Y1o,K1o,K$,Z1o,eFo,oFo,db,Lre,rFo,tFo,Z$,aFo,nFo,sFo,cb,Bre,lFo,iFo,eI,dFo,cFo,mFo,mb,xre,fFo,gFo,oI,hFo,uFo,pFo,fb,kre,_Fo,bFo,rI,vFo,TFo,FFo,gb,Rre,CFo,MFo,tI,EFo,yFo,wFo,hb,Sre,AFo,LFo,aI,BFo,xFo,kFo,ub,Pre,RFo,SFo,nI,PFo,$Fo,IFo,pb,$re,NFo,DFo,sI,jFo,qFo,GFo,_b,Ire,OFo,XFo,lI,VFo,zFo,WFo,bb,Nre,QFo,HFo,iI,UFo,JFo,YFo,vb,Dre,KFo,ZFo,dI,eCo,oCo,rCo,Tb,jre,tCo,aCo,cI,nCo,sCo,lCo,Fb,qre,iCo,dCo,mI,cCo,mCo,fCo,Cb,Gre,gCo,hCo,fI,uCo,pCo,_Co,Mb,Ore,bCo,vCo,gI,TCo,FCo,CCo,Eb,Xre,MCo,ECo,hI,yCo,wCo,ACo,yb,Vre,LCo,BCo,uI,xCo,kCo,RCo,wb,zre,SCo,PCo,pI,$Co,ICo,NCo,Ab,Wre,DCo,jCo,_I,qCo,GCo,OCo,Lb,Qre,XCo,VCo,Hre,zCo,WCo,QCo,Bb,Ure,HCo,UCo,bI,JCo,YCo,KCo,xb,Jre,ZCo,eMo,vI,oMo,rMo,tMo,kb,Yre,aMo,nMo,TI,sMo,lMo,iMo,Rb,Kre,dMo,cMo,FI,mMo,fMo,gMo,Sb,hMo,Zre,uMo,pMo,ete,_Mo,bMo,ote,vMo,TMo,fw,Fke,id,Pb,rte,gw,FMo,tte,CMo,Cke,er,hw,MMo,dd,EMo,ate,yMo,wMo,nte,AMo,LMo,BMo,uw,xMo,ste,kMo,RMo,SMo,Hr,pw,PMo,lte,$Mo,IMo,cd,NMo,ite,DMo,jMo,dte,qMo,GMo,OMo,cte,XMo,VMo,_w,zMo,Ge,bw,WMo,mte,QMo,HMo,Ha,UMo,fte,JMo,YMo,gte,KMo,ZMo,hte,e4o,o4o,r4o,se,$b,ute,t4o,a4o,CI,n4o,s4o,l4o,Ib,pte,i4o,d4o,MI,c4o,m4o,f4o,Nb,_te,g4o,h4o,EI,u4o,p4o,_4o,Db,bte,b4o,v4o,yI,T4o,F4o,C4o,jb,vte,M4o,E4o,wI,y4o,w4o,A4o,qb,Tte,L4o,B4o,AI,x4o,k4o,R4o,Gb,Fte,S4o,P4o,LI,$4o,I4o,N4o,Ob,Cte,D4o,j4o,BI,q4o,G4o,O4o,Xb,Mte,X4o,V4o,xI,z4o,W4o,Q4o,Vb,Ete,H4o,U4o,kI,J4o,Y4o,K4o,zb,yte,Z4o,eEo,RI,oEo,rEo,tEo,Wb,wte,aEo,nEo,SI,sEo,lEo,iEo,Qb,Ate,dEo,cEo,PI,mEo,fEo,gEo,Hb,Lte,hEo,uEo,$I,pEo,_Eo,bEo,Ub,Bte,vEo,TEo,II,FEo,CEo,MEo,Jb,xte,EEo,yEo,NI,wEo,AEo,LEo,Yb,BEo,kte,xEo,kEo,Rte,REo,SEo,Ste,PEo,$Eo,vw,Mke,md,Kb,Pte,Tw,IEo,$te,NEo,Eke,or,Fw,DEo,fd,jEo,Ite,qEo,GEo,Nte,OEo,XEo,VEo,Cw,zEo,Dte,WEo,QEo,HEo,Ur,Mw,UEo,jte,JEo,YEo,gd,KEo,qte,ZEo,e3o,Gte,o3o,r3o,t3o,Ote,a3o,n3o,Ew,s3o,Oe,yw,l3o,Xte,i3o,d3o,Ua,c3o,Vte,m3o,f3o,zte,g3o,h3o,Wte,u3o,p3o,_3o,A,Zb,Qte,b3o,v3o,DI,T3o,F3o,C3o,e2,Hte,M3o,E3o,jI,y3o,w3o,A3o,o2,Ute,L3o,B3o,qI,x3o,k3o,R3o,r2,Jte,S3o,P3o,GI,$3o,I3o,N3o,t2,Yte,D3o,j3o,OI,q3o,G3o,O3o,a2,Kte,X3o,V3o,XI,z3o,W3o,Q3o,n2,Zte,H3o,U3o,VI,J3o,Y3o,K3o,s2,eae,Z3o,e5o,zI,o5o,r5o,t5o,l2,oae,a5o,n5o,WI,s5o,l5o,i5o,i2,rae,d5o,c5o,QI,m5o,f5o,g5o,d2,tae,h5o,u5o,HI,p5o,_5o,b5o,c2,aae,v5o,T5o,UI,F5o,C5o,M5o,m2,nae,E5o,y5o,JI,w5o,A5o,L5o,f2,sae,B5o,x5o,YI,k5o,R5o,S5o,g2,lae,P5o,$5o,KI,I5o,N5o,D5o,h2,iae,j5o,q5o,ZI,G5o,O5o,X5o,u2,dae,V5o,z5o,eN,W5o,Q5o,H5o,p2,cae,U5o,J5o,oN,Y5o,K5o,Z5o,_2,mae,eyo,oyo,rN,ryo,tyo,ayo,b2,fae,nyo,syo,tN,lyo,iyo,dyo,v2,gae,cyo,myo,aN,fyo,gyo,hyo,T2,hae,uyo,pyo,nN,_yo,byo,vyo,F2,uae,Tyo,Fyo,sN,Cyo,Myo,Eyo,C2,pae,yyo,wyo,lN,Ayo,Lyo,Byo,M2,_ae,xyo,kyo,iN,Ryo,Syo,Pyo,E2,bae,$yo,Iyo,dN,Nyo,Dyo,jyo,y2,vae,qyo,Gyo,cN,Oyo,Xyo,Vyo,w2,Tae,zyo,Wyo,mN,Qyo,Hyo,Uyo,A2,Fae,Jyo,Yyo,fN,Kyo,Zyo,ewo,L2,Cae,owo,rwo,gN,two,awo,nwo,B2,Mae,swo,lwo,hN,iwo,dwo,cwo,x2,Eae,mwo,fwo,uN,gwo,hwo,uwo,k2,yae,pwo,_wo,pN,bwo,vwo,Two,R2,wae,Fwo,Cwo,_N,Mwo,Ewo,ywo,S2,Aae,wwo,Awo,bN,Lwo,Bwo,xwo,P2,Lae,kwo,Rwo,vN,Swo,Pwo,$wo,$2,Bae,Iwo,Nwo,TN,Dwo,jwo,qwo,I2,xae,Gwo,Owo,FN,Xwo,Vwo,zwo,N2,kae,Wwo,Qwo,CN,Hwo,Uwo,Jwo,D2,Rae,Ywo,Kwo,MN,Zwo,e6o,o6o,j2,Sae,r6o,t6o,EN,a6o,n6o,s6o,q2,Pae,l6o,i6o,yN,d6o,c6o,m6o,G2,$ae,f6o,g6o,wN,h6o,u6o,p6o,O2,Iae,_6o,b6o,AN,v6o,T6o,F6o,X2,Nae,C6o,M6o,LN,E6o,y6o,w6o,V2,Dae,A6o,L6o,BN,B6o,x6o,k6o,z2,R6o,jae,S6o,P6o,qae,$6o,I6o,Gae,N6o,D6o,ww,yke,hd,W2,Oae,Aw,j6o,Xae,q6o,wke,rr,Lw,G6o,ud,O6o,Vae,X6o,V6o,zae,z6o,W6o,Q6o,Bw,H6o,Wae,U6o,J6o,Y6o,Jr,xw,K6o,Qae,Z6o,eAo,pd,oAo,Hae,rAo,tAo,Uae,aAo,nAo,sAo,Jae,lAo,iAo,kw,dAo,Xe,Rw,cAo,Yae,mAo,fAo,Ja,gAo,Kae,hAo,uAo,Zae,pAo,_Ao,ene,bAo,vAo,TAo,G,Q2,one,FAo,CAo,xN,MAo,EAo,yAo,H2,rne,wAo,AAo,kN,LAo,BAo,xAo,U2,tne,kAo,RAo,RN,SAo,PAo,$Ao,J2,ane,IAo,NAo,SN,DAo,jAo,qAo,Y2,nne,GAo,OAo,PN,XAo,VAo,zAo,K2,sne,WAo,QAo,$N,HAo,UAo,JAo,Z2,lne,YAo,KAo,IN,ZAo,e0o,o0o,ev,ine,r0o,t0o,NN,a0o,n0o,s0o,ov,dne,l0o,i0o,DN,d0o,c0o,m0o,rv,cne,f0o,g0o,jN,h0o,u0o,p0o,tv,mne,_0o,b0o,qN,v0o,T0o,F0o,av,fne,C0o,M0o,GN,E0o,y0o,w0o,nv,gne,A0o,L0o,ON,B0o,x0o,k0o,sv,hne,R0o,S0o,XN,P0o,$0o,I0o,lv,une,N0o,D0o,VN,j0o,q0o,G0o,iv,pne,O0o,X0o,zN,V0o,z0o,W0o,dv,_ne,Q0o,H0o,WN,U0o,J0o,Y0o,cv,bne,K0o,Z0o,QN,eLo,oLo,rLo,mv,vne,tLo,aLo,HN,nLo,sLo,lLo,fv,Tne,iLo,dLo,UN,cLo,mLo,fLo,gv,Fne,gLo,hLo,JN,uLo,pLo,_Lo,hv,Cne,bLo,vLo,YN,TLo,FLo,CLo,uv,Mne,MLo,ELo,KN,yLo,wLo,ALo,pv,Ene,LLo,BLo,ZN,xLo,kLo,RLo,_v,yne,SLo,PLo,eD,$Lo,ILo,NLo,bv,wne,DLo,jLo,oD,qLo,GLo,OLo,vv,Ane,XLo,VLo,rD,zLo,WLo,QLo,Tv,Lne,HLo,ULo,tD,JLo,YLo,KLo,Fv,ZLo,Bne,e7o,o7o,xne,r7o,t7o,kne,a7o,n7o,Sw,Ake,_d,Cv,Rne,Pw,s7o,Sne,l7o,Lke,tr,$w,i7o,bd,d7o,Pne,c7o,m7o,$ne,f7o,g7o,h7o,Iw,u7o,Ine,p7o,_7o,b7o,Yr,Nw,v7o,Nne,T7o,F7o,vd,C7o,Dne,M7o,E7o,jne,y7o,w7o,A7o,qne,L7o,B7o,Dw,x7o,Ve,jw,k7o,Gne,R7o,S7o,Ya,P7o,One,$7o,I7o,Xne,N7o,D7o,Vne,j7o,q7o,G7o,da,Mv,zne,O7o,X7o,aD,V7o,z7o,W7o,Ev,Wne,Q7o,H7o,nD,U7o,J7o,Y7o,yv,Qne,K7o,Z7o,sD,e8o,o8o,r8o,wv,Hne,t8o,a8o,lD,n8o,s8o,l8o,Av,Une,i8o,d8o,iD,c8o,m8o,f8o,Lv,g8o,Jne,h8o,u8o,Yne,p8o,_8o,Kne,b8o,v8o,qw,Bke,Td,Bv,Zne,Gw,T8o,ese,F8o,xke,ar,Ow,C8o,Fd,M8o,ose,E8o,y8o,rse,w8o,A8o,L8o,Xw,B8o,tse,x8o,k8o,R8o,Kr,Vw,S8o,ase,P8o,$8o,Cd,I8o,nse,N8o,D8o,sse,j8o,q8o,G8o,lse,O8o,X8o,zw,V8o,ze,Ww,z8o,ise,W8o,Q8o,Ka,H8o,dse,U8o,J8o,cse,Y8o,K8o,mse,Z8o,e9o,o9o,j,xv,fse,r9o,t9o,dD,a9o,n9o,s9o,kv,gse,l9o,i9o,cD,d9o,c9o,m9o,Rv,hse,f9o,g9o,mD,h9o,u9o,p9o,Sv,use,_9o,b9o,fD,v9o,T9o,F9o,Pv,pse,C9o,M9o,gD,E9o,y9o,w9o,$v,_se,A9o,L9o,hD,B9o,x9o,k9o,Iv,bse,R9o,S9o,uD,P9o,$9o,I9o,Nv,vse,N9o,D9o,pD,j9o,q9o,G9o,Dv,Tse,O9o,X9o,_D,V9o,z9o,W9o,jv,Fse,Q9o,H9o,bD,U9o,J9o,Y9o,qv,Cse,K9o,Z9o,vD,eBo,oBo,rBo,Gv,Mse,tBo,aBo,TD,nBo,sBo,lBo,Ov,Ese,iBo,dBo,FD,cBo,mBo,fBo,Xv,yse,gBo,hBo,CD,uBo,pBo,_Bo,Vv,wse,bBo,vBo,MD,TBo,FBo,CBo,zv,Ase,MBo,EBo,ED,yBo,wBo,ABo,Wv,Lse,LBo,BBo,yD,xBo,kBo,RBo,Qv,Bse,SBo,PBo,wD,$Bo,IBo,NBo,Hv,xse,DBo,jBo,AD,qBo,GBo,OBo,Uv,kse,XBo,VBo,LD,zBo,WBo,QBo,Jv,Rse,HBo,UBo,BD,JBo,YBo,KBo,Yv,Sse,ZBo,exo,xD,oxo,rxo,txo,Kv,Pse,axo,nxo,kD,sxo,lxo,ixo,Zv,$se,dxo,cxo,RD,mxo,fxo,gxo,eT,Ise,hxo,uxo,SD,pxo,_xo,bxo,oT,Nse,vxo,Txo,PD,Fxo,Cxo,Mxo,rT,Dse,Exo,yxo,$D,wxo,Axo,Lxo,tT,jse,Bxo,xxo,ID,kxo,Rxo,Sxo,aT,qse,Pxo,$xo,ND,Ixo,Nxo,Dxo,nT,Gse,jxo,qxo,DD,Gxo,Oxo,Xxo,sT,Ose,Vxo,zxo,jD,Wxo,Qxo,Hxo,lT,Xse,Uxo,Jxo,qD,Yxo,Kxo,Zxo,iT,Vse,eko,oko,GD,rko,tko,ako,dT,nko,zse,sko,lko,Wse,iko,dko,Qse,cko,mko,Qw,kke,Md,cT,Hse,Hw,fko,Use,gko,Rke,nr,Uw,hko,Ed,uko,Jse,pko,_ko,Yse,bko,vko,Tko,Jw,Fko,Kse,Cko,Mko,Eko,Zr,Yw,yko,Zse,wko,Ako,yd,Lko,ele,Bko,xko,ole,kko,Rko,Sko,rle,Pko,$ko,Kw,Iko,We,Zw,Nko,tle,Dko,jko,Za,qko,ale,Gko,Oko,nle,Xko,Vko,sle,zko,Wko,Qko,R,mT,lle,Hko,Uko,OD,Jko,Yko,Kko,fT,ile,Zko,eRo,XD,oRo,rRo,tRo,gT,dle,aRo,nRo,VD,sRo,lRo,iRo,hT,cle,dRo,cRo,zD,mRo,fRo,gRo,uT,mle,hRo,uRo,WD,pRo,_Ro,bRo,pT,fle,vRo,TRo,QD,FRo,CRo,MRo,_T,gle,ERo,yRo,HD,wRo,ARo,LRo,bT,hle,BRo,xRo,UD,kRo,RRo,SRo,vT,ule,PRo,$Ro,JD,IRo,NRo,DRo,TT,ple,jRo,qRo,YD,GRo,ORo,XRo,FT,_le,VRo,zRo,KD,WRo,QRo,HRo,CT,ble,URo,JRo,ZD,YRo,KRo,ZRo,MT,vle,eSo,oSo,ej,rSo,tSo,aSo,ET,Tle,nSo,sSo,oj,lSo,iSo,dSo,yT,Fle,cSo,mSo,rj,fSo,gSo,hSo,wT,Cle,uSo,pSo,tj,_So,bSo,vSo,AT,Mle,TSo,FSo,aj,CSo,MSo,ESo,LT,Ele,ySo,wSo,nj,ASo,LSo,BSo,BT,yle,xSo,kSo,sj,RSo,SSo,PSo,xT,wle,$So,ISo,lj,NSo,DSo,jSo,kT,Ale,qSo,GSo,ij,OSo,XSo,VSo,RT,Lle,zSo,WSo,dj,QSo,HSo,USo,ST,Ble,JSo,YSo,cj,KSo,ZSo,ePo,PT,xle,oPo,rPo,mj,tPo,aPo,nPo,$T,kle,sPo,lPo,fj,iPo,dPo,cPo,IT,Rle,mPo,fPo,gj,gPo,hPo,uPo,NT,Sle,pPo,_Po,hj,bPo,vPo,TPo,DT,Ple,FPo,CPo,uj,MPo,EPo,yPo,jT,$le,wPo,APo,pj,LPo,BPo,xPo,qT,Ile,kPo,RPo,_j,SPo,PPo,$Po,GT,Nle,IPo,NPo,bj,DPo,jPo,qPo,OT,Dle,GPo,OPo,vj,XPo,VPo,zPo,XT,jle,WPo,QPo,Tj,HPo,UPo,JPo,VT,qle,YPo,KPo,Fj,ZPo,e$o,o$o,zT,Gle,r$o,t$o,Cj,a$o,n$o,s$o,WT,Ole,l$o,i$o,Mj,d$o,c$o,m$o,QT,Xle,f$o,g$o,Ej,h$o,u$o,p$o,HT,Vle,_$o,b$o,yj,v$o,T$o,F$o,UT,zle,C$o,M$o,wj,E$o,y$o,w$o,JT,A$o,Wle,L$o,B$o,Qle,x$o,k$o,Hle,R$o,S$o,e6,Ske,wd,YT,Ule,o6,P$o,Jle,$$o,Pke,sr,r6,I$o,Ad,N$o,Yle,D$o,j$o,Kle,q$o,G$o,O$o,t6,X$o,Zle,V$o,z$o,W$o,et,a6,Q$o,eie,H$o,U$o,Ld,J$o,oie,Y$o,K$o,rie,Z$o,eIo,oIo,tie,rIo,tIo,n6,aIo,Qe,s6,nIo,aie,sIo,lIo,en,iIo,nie,dIo,cIo,sie,mIo,fIo,lie,gIo,hIo,uIo,iie,KT,die,pIo,_Io,Aj,bIo,vIo,TIo,ZT,FIo,cie,CIo,MIo,mie,EIo,yIo,fie,wIo,AIo,l6,$ke,Bd,e1,gie,i6,LIo,hie,BIo,Ike,lr,d6,xIo,xd,kIo,uie,RIo,SIo,pie,PIo,$Io,IIo,c6,NIo,_ie,DIo,jIo,qIo,ot,m6,GIo,bie,OIo,XIo,kd,VIo,vie,zIo,WIo,Tie,QIo,HIo,UIo,Fie,JIo,YIo,f6,KIo,He,g6,ZIo,Cie,eNo,oNo,on,rNo,Mie,tNo,aNo,Eie,nNo,sNo,yie,lNo,iNo,dNo,fe,o1,wie,cNo,mNo,Lj,fNo,gNo,hNo,r1,Aie,uNo,pNo,Bj,_No,bNo,vNo,qs,Lie,TNo,FNo,xj,CNo,MNo,kj,ENo,yNo,wNo,t1,Bie,ANo,LNo,Rj,BNo,xNo,kNo,fa,xie,RNo,SNo,Sj,PNo,$No,Pj,INo,NNo,$j,DNo,jNo,qNo,a1,kie,GNo,ONo,Ij,XNo,VNo,zNo,n1,Rie,WNo,QNo,Nj,HNo,UNo,JNo,s1,Sie,YNo,KNo,Dj,ZNo,eDo,oDo,l1,Pie,rDo,tDo,jj,aDo,nDo,sDo,i1,$ie,lDo,iDo,qj,dDo,cDo,mDo,d1,Iie,fDo,gDo,Gj,hDo,uDo,pDo,c1,_Do,Nie,bDo,vDo,Die,TDo,FDo,jie,CDo,MDo,h6,Nke,Rd,m1,qie,u6,EDo,Gie,yDo,Dke,ir,p6,wDo,Sd,ADo,Oie,LDo,BDo,Xie,xDo,kDo,RDo,_6,SDo,Vie,PDo,$Do,IDo,rt,b6,NDo,zie,DDo,jDo,Pd,qDo,Wie,GDo,ODo,Qie,XDo,VDo,zDo,Hie,WDo,QDo,v6,HDo,Ue,T6,UDo,Uie,JDo,YDo,rn,KDo,Jie,ZDo,ejo,Yie,ojo,rjo,Kie,tjo,ajo,njo,Zie,f1,ede,sjo,ljo,Oj,ijo,djo,cjo,g1,mjo,ode,fjo,gjo,rde,hjo,ujo,tde,pjo,_jo,F6,jke,$d,h1,ade,C6,bjo,nde,vjo,qke,dr,M6,Tjo,Id,Fjo,sde,Cjo,Mjo,lde,Ejo,yjo,wjo,E6,Ajo,ide,Ljo,Bjo,xjo,tt,y6,kjo,dde,Rjo,Sjo,Nd,Pjo,cde,$jo,Ijo,mde,Njo,Djo,jjo,fde,qjo,Gjo,w6,Ojo,Je,A6,Xjo,gde,Vjo,zjo,tn,Wjo,hde,Qjo,Hjo,ude,Ujo,Jjo,pde,Yjo,Kjo,Zjo,ke,u1,_de,eqo,oqo,Xj,rqo,tqo,aqo,p1,bde,nqo,sqo,Vj,lqo,iqo,dqo,_1,vde,cqo,mqo,zj,fqo,gqo,hqo,b1,Tde,uqo,pqo,Wj,_qo,bqo,vqo,v1,Fde,Tqo,Fqo,Qj,Cqo,Mqo,Eqo,T1,Cde,yqo,wqo,Hj,Aqo,Lqo,Bqo,F1,Mde,xqo,kqo,Uj,Rqo,Sqo,Pqo,C1,Ede,$qo,Iqo,Jj,Nqo,Dqo,jqo,M1,qqo,yde,Gqo,Oqo,wde,Xqo,Vqo,Ade,zqo,Wqo,L6,Gke,Dd,E1,Lde,B6,Qqo,Bde,Hqo,Oke,cr,x6,Uqo,jd,Jqo,xde,Yqo,Kqo,kde,Zqo,eGo,oGo,k6,rGo,Rde,tGo,aGo,nGo,at,R6,sGo,Sde,lGo,iGo,qd,dGo,Pde,cGo,mGo,$de,fGo,gGo,hGo,Ide,uGo,pGo,S6,_Go,Ye,P6,bGo,Nde,vGo,TGo,an,FGo,Dde,CGo,MGo,jde,EGo,yGo,qde,wGo,AGo,LGo,nn,y1,Gde,BGo,xGo,Yj,kGo,RGo,SGo,w1,Ode,PGo,$Go,Kj,IGo,NGo,DGo,A1,Xde,jGo,qGo,Zj,GGo,OGo,XGo,L1,Vde,VGo,zGo,eq,WGo,QGo,HGo,B1,UGo,zde,JGo,YGo,Wde,KGo,ZGo,Qde,eOo,oOo,$6,Xke,Gd,x1,Hde,I6,rOo,Ude,tOo,Vke,mr,N6,aOo,Od,nOo,Jde,sOo,lOo,Yde,iOo,dOo,cOo,D6,mOo,Kde,fOo,gOo,hOo,nt,j6,uOo,Zde,pOo,_Oo,Xd,bOo,ece,vOo,TOo,oce,FOo,COo,MOo,rce,EOo,yOo,q6,wOo,Ke,G6,AOo,tce,LOo,BOo,sn,xOo,ace,kOo,ROo,nce,SOo,POo,sce,$Oo,IOo,NOo,Re,k1,lce,DOo,jOo,oq,qOo,GOo,OOo,R1,ice,XOo,VOo,rq,zOo,WOo,QOo,S1,dce,HOo,UOo,tq,JOo,YOo,KOo,P1,cce,ZOo,eXo,aq,oXo,rXo,tXo,$1,mce,aXo,nXo,nq,sXo,lXo,iXo,I1,fce,dXo,cXo,sq,mXo,fXo,gXo,N1,gce,hXo,uXo,lq,pXo,_Xo,bXo,D1,hce,vXo,TXo,iq,FXo,CXo,MXo,j1,EXo,uce,yXo,wXo,pce,AXo,LXo,_ce,BXo,xXo,O6,zke,Vd,q1,bce,X6,kXo,vce,RXo,Wke,fr,V6,SXo,zd,PXo,Tce,$Xo,IXo,Fce,NXo,DXo,jXo,z6,qXo,Cce,GXo,OXo,XXo,st,W6,VXo,Mce,zXo,WXo,Wd,QXo,Ece,HXo,UXo,yce,JXo,YXo,KXo,wce,ZXo,eVo,Q6,oVo,Ze,H6,rVo,Ace,tVo,aVo,ln,nVo,Lce,sVo,lVo,Bce,iVo,dVo,xce,cVo,mVo,fVo,U6,G1,kce,gVo,hVo,dq,uVo,pVo,_Vo,O1,Rce,bVo,vVo,cq,TVo,FVo,CVo,X1,MVo,Sce,EVo,yVo,Pce,wVo,AVo,$ce,LVo,BVo,J6,Qke,Qd,V1,Ice,Y6,xVo,Nce,kVo,Hke,gr,K6,RVo,Hd,SVo,Dce,PVo,$Vo,jce,IVo,NVo,DVo,Z6,jVo,qce,qVo,GVo,OVo,lt,eA,XVo,Gce,VVo,zVo,Ud,WVo,Oce,QVo,HVo,Xce,UVo,JVo,YVo,Vce,KVo,ZVo,oA,ezo,eo,rA,ozo,zce,rzo,tzo,dn,azo,Wce,nzo,szo,Qce,lzo,izo,Hce,dzo,czo,mzo,cn,z1,Uce,fzo,gzo,mq,hzo,uzo,pzo,W1,Jce,_zo,bzo,fq,vzo,Tzo,Fzo,Q1,Yce,Czo,Mzo,gq,Ezo,yzo,wzo,H1,Kce,Azo,Lzo,hq,Bzo,xzo,kzo,U1,Rzo,Zce,Szo,Pzo,eme,$zo,Izo,ome,Nzo,Dzo,tA,Uke,Jd,J1,rme,aA,jzo,tme,qzo,Jke,hr,nA,Gzo,Yd,Ozo,ame,Xzo,Vzo,nme,zzo,Wzo,Qzo,sA,Hzo,sme,Uzo,Jzo,Yzo,it,lA,Kzo,lme,Zzo,eWo,Kd,oWo,ime,rWo,tWo,dme,aWo,nWo,sWo,cme,lWo,iWo,iA,dWo,oo,dA,cWo,mme,mWo,fWo,mn,gWo,fme,hWo,uWo,gme,pWo,_Wo,hme,bWo,vWo,TWo,Zd,Y1,ume,FWo,CWo,uq,MWo,EWo,yWo,K1,pme,wWo,AWo,pq,LWo,BWo,xWo,Z1,_me,kWo,RWo,_q,SWo,PWo,$Wo,eF,IWo,bme,NWo,DWo,vme,jWo,qWo,Tme,GWo,OWo,cA,Yke,ec,oF,Fme,mA,XWo,Cme,VWo,Kke,ur,fA,zWo,oc,WWo,Mme,QWo,HWo,Eme,UWo,JWo,YWo,gA,KWo,yme,ZWo,eQo,oQo,dt,hA,rQo,wme,tQo,aQo,rc,nQo,Ame,sQo,lQo,Lme,iQo,dQo,cQo,Bme,mQo,fQo,uA,gQo,ro,pA,hQo,xme,uQo,pQo,fn,_Qo,kme,bQo,vQo,Rme,TQo,FQo,Sme,CQo,MQo,EQo,Pme,rF,$me,yQo,wQo,bq,AQo,LQo,BQo,tF,xQo,Ime,kQo,RQo,Nme,SQo,PQo,Dme,$Qo,IQo,_A,Zke,tc,aF,jme,bA,NQo,qme,DQo,eRe,pr,vA,jQo,ac,qQo,Gme,GQo,OQo,Ome,XQo,VQo,zQo,TA,WQo,Xme,QQo,HQo,UQo,ct,FA,JQo,Vme,YQo,KQo,nc,ZQo,zme,eHo,oHo,Wme,rHo,tHo,aHo,Qme,nHo,sHo,CA,lHo,to,MA,iHo,Hme,dHo,cHo,gn,mHo,Ume,fHo,gHo,Jme,hHo,uHo,Yme,pHo,_Ho,bHo,Kme,nF,Zme,vHo,THo,vq,FHo,CHo,MHo,sF,EHo,efe,yHo,wHo,ofe,AHo,LHo,rfe,BHo,xHo,EA,oRe,sc,lF,tfe,yA,kHo,afe,RHo,rRe,_r,wA,SHo,lc,PHo,nfe,$Ho,IHo,sfe,NHo,DHo,jHo,AA,qHo,lfe,GHo,OHo,XHo,mt,LA,VHo,ife,zHo,WHo,ic,QHo,dfe,HHo,UHo,cfe,JHo,YHo,KHo,mfe,ZHo,eUo,BA,oUo,ao,xA,rUo,ffe,tUo,aUo,hn,nUo,gfe,sUo,lUo,hfe,iUo,dUo,ufe,cUo,mUo,fUo,kA,iF,pfe,gUo,hUo,Tq,uUo,pUo,_Uo,dF,_fe,bUo,vUo,Fq,TUo,FUo,CUo,cF,MUo,bfe,EUo,yUo,vfe,wUo,AUo,Tfe,LUo,BUo,RA,tRe,dc,mF,Ffe,SA,xUo,Cfe,kUo,aRe,br,PA,RUo,cc,SUo,Mfe,PUo,$Uo,Efe,IUo,NUo,DUo,$A,jUo,yfe,qUo,GUo,OUo,ft,IA,XUo,wfe,VUo,zUo,mc,WUo,Afe,QUo,HUo,Lfe,UUo,JUo,YUo,Bfe,KUo,ZUo,NA,eJo,no,DA,oJo,xfe,rJo,tJo,un,aJo,kfe,nJo,sJo,Rfe,lJo,iJo,Sfe,dJo,cJo,mJo,Pfe,fF,$fe,fJo,gJo,Cq,hJo,uJo,pJo,gF,_Jo,Ife,bJo,vJo,Nfe,TJo,FJo,Dfe,CJo,MJo,jA,nRe,fc,hF,jfe,qA,EJo,qfe,yJo,sRe,vr,GA,wJo,gc,AJo,Gfe,LJo,BJo,Ofe,xJo,kJo,RJo,OA,SJo,Xfe,PJo,$Jo,IJo,gt,XA,NJo,Vfe,DJo,jJo,hc,qJo,zfe,GJo,OJo,Wfe,XJo,VJo,zJo,Qfe,WJo,QJo,VA,HJo,ho,zA,UJo,Hfe,JJo,YJo,pn,KJo,Ufe,ZJo,eYo,Jfe,oYo,rYo,Yfe,tYo,aYo,nYo,B,uF,Kfe,sYo,lYo,Mq,iYo,dYo,cYo,pF,Zfe,mYo,fYo,Eq,gYo,hYo,uYo,_F,ege,pYo,_Yo,yq,bYo,vYo,TYo,bF,oge,FYo,CYo,wq,MYo,EYo,yYo,vF,rge,wYo,AYo,Aq,LYo,BYo,xYo,TF,tge,kYo,RYo,Lq,SYo,PYo,$Yo,FF,age,IYo,NYo,Bq,DYo,jYo,qYo,CF,nge,GYo,OYo,xq,XYo,VYo,zYo,MF,sge,WYo,QYo,kq,HYo,UYo,JYo,EF,lge,YYo,KYo,Rq,ZYo,eKo,oKo,yF,ige,rKo,tKo,Sq,aKo,nKo,sKo,wF,dge,lKo,iKo,Pq,dKo,cKo,mKo,AF,cge,fKo,gKo,$q,hKo,uKo,pKo,LF,mge,_Ko,bKo,Iq,vKo,TKo,FKo,BF,fge,CKo,MKo,Nq,EKo,yKo,wKo,xF,gge,AKo,LKo,Dq,BKo,xKo,kKo,Gs,hge,RKo,SKo,jq,PKo,$Ko,qq,IKo,NKo,DKo,kF,uge,jKo,qKo,Gq,GKo,OKo,XKo,RF,pge,VKo,zKo,Oq,WKo,QKo,HKo,SF,_ge,UKo,JKo,Xq,YKo,KKo,ZKo,PF,bge,eZo,oZo,Vq,rZo,tZo,aZo,$F,vge,nZo,sZo,zq,lZo,iZo,dZo,IF,Tge,cZo,mZo,Wq,fZo,gZo,hZo,NF,Fge,uZo,pZo,Qq,_Zo,bZo,vZo,DF,Cge,TZo,FZo,Hq,CZo,MZo,EZo,jF,Mge,yZo,wZo,Uq,AZo,LZo,BZo,qF,Ege,xZo,kZo,Jq,RZo,SZo,PZo,GF,yge,$Zo,IZo,Yq,NZo,DZo,jZo,OF,wge,qZo,GZo,Kq,OZo,XZo,VZo,XF,Age,zZo,WZo,Zq,QZo,HZo,UZo,VF,Lge,JZo,YZo,eG,KZo,ZZo,eer,zF,Bge,oer,rer,oG,ter,aer,ner,WF,xge,ser,ler,rG,ier,der,cer,QF,kge,mer,fer,tG,ger,her,uer,HF,Rge,per,_er,aG,ber,ver,Ter,UF,Sge,Fer,Cer,nG,Mer,Eer,yer,JF,Pge,wer,Aer,sG,Ler,Ber,xer,YF,$ge,ker,Rer,lG,Ser,Per,$er,KF,Ige,Ier,Ner,iG,Der,jer,qer,ZF,Nge,Ger,Oer,dG,Xer,Ver,zer,eC,Dge,Wer,Qer,cG,Her,Uer,Jer,oC,jge,Yer,Ker,mG,Zer,eor,oor,qge,ror,tor,WA,lRe,uc,rC,Gge,QA,aor,Oge,nor,iRe,Tr,HA,sor,pc,lor,Xge,ior,dor,Vge,cor,mor,gor,UA,hor,zge,uor,por,_or,ht,JA,bor,Wge,vor,Tor,_c,For,Qge,Cor,Mor,Hge,Eor,yor,wor,Uge,Aor,Lor,YA,Bor,uo,KA,xor,Jge,kor,Ror,_n,Sor,Yge,Por,$or,Kge,Ior,Nor,Zge,Dor,jor,qor,H,tC,ehe,Gor,Oor,fG,Xor,Vor,zor,aC,ohe,Wor,Qor,gG,Hor,Uor,Jor,nC,rhe,Yor,Kor,hG,Zor,err,orr,sC,the,rrr,trr,uG,arr,nrr,srr,lC,ahe,lrr,irr,pG,drr,crr,mrr,iC,nhe,frr,grr,_G,hrr,urr,prr,dC,she,_rr,brr,bG,vrr,Trr,Frr,cC,lhe,Crr,Mrr,vG,Err,yrr,wrr,mC,ihe,Arr,Lrr,TG,Brr,xrr,krr,fC,dhe,Rrr,Srr,FG,Prr,$rr,Irr,gC,che,Nrr,Drr,CG,jrr,qrr,Grr,hC,mhe,Orr,Xrr,MG,Vrr,zrr,Wrr,uC,fhe,Qrr,Hrr,EG,Urr,Jrr,Yrr,pC,ghe,Krr,Zrr,yG,etr,otr,rtr,_C,hhe,ttr,atr,wG,ntr,str,ltr,bC,uhe,itr,dtr,AG,ctr,mtr,ftr,vC,phe,gtr,htr,LG,utr,ptr,_tr,TC,_he,btr,vtr,BG,Ttr,Ftr,Ctr,FC,bhe,Mtr,Etr,xG,ytr,wtr,Atr,CC,vhe,Ltr,Btr,kG,xtr,ktr,Rtr,MC,The,Str,Ptr,RG,$tr,Itr,Ntr,EC,Fhe,Dtr,jtr,SG,qtr,Gtr,Otr,Che,Xtr,Vtr,ZA,dRe,bc,yC,Mhe,e0,ztr,Ehe,Wtr,cRe,Fr,o0,Qtr,vc,Htr,yhe,Utr,Jtr,whe,Ytr,Ktr,Ztr,r0,ear,Ahe,oar,rar,tar,ut,t0,aar,Lhe,nar,sar,Tc,lar,Bhe,iar,dar,xhe,car,mar,far,khe,gar,har,a0,uar,po,n0,par,Rhe,_ar,bar,bn,Tar,She,Far,Car,Phe,Mar,Ear,$he,yar,war,Aar,ge,wC,Ihe,Lar,Bar,PG,xar,kar,Rar,AC,Nhe,Sar,Par,$G,$ar,Iar,Nar,LC,Dhe,Dar,jar,IG,qar,Gar,Oar,BC,jhe,Xar,Var,NG,zar,War,Qar,xC,qhe,Har,Uar,DG,Jar,Yar,Kar,kC,Ghe,Zar,enr,jG,onr,rnr,tnr,RC,Ohe,anr,nnr,qG,snr,lnr,inr,SC,Xhe,dnr,cnr,GG,mnr,fnr,gnr,PC,Vhe,hnr,unr,OG,pnr,_nr,bnr,$C,zhe,vnr,Tnr,XG,Fnr,Cnr,Mnr,IC,Whe,Enr,ynr,VG,wnr,Anr,Lnr,Qhe,Bnr,xnr,s0,mRe,Fc,NC,Hhe,l0,knr,Uhe,Rnr,fRe,Cr,i0,Snr,Cc,Pnr,Jhe,$nr,Inr,Yhe,Nnr,Dnr,jnr,d0,qnr,Khe,Gnr,Onr,Xnr,pt,c0,Vnr,Zhe,znr,Wnr,Mc,Qnr,eue,Hnr,Unr,oue,Jnr,Ynr,Knr,rue,Znr,esr,m0,osr,_o,f0,rsr,tue,tsr,asr,vn,nsr,aue,ssr,lsr,nue,isr,dsr,sue,csr,msr,fsr,g0,DC,lue,gsr,hsr,zG,usr,psr,_sr,jC,iue,bsr,vsr,WG,Tsr,Fsr,Csr,due,Msr,Esr,h0,gRe,Ec,qC,cue,u0,ysr,mue,wsr,hRe,Mr,p0,Asr,yc,Lsr,fue,Bsr,xsr,gue,ksr,Rsr,Ssr,_0,Psr,hue,$sr,Isr,Nsr,_t,b0,Dsr,uue,jsr,qsr,wc,Gsr,pue,Osr,Xsr,_ue,Vsr,zsr,Wsr,bue,Qsr,Hsr,v0,Usr,bo,T0,Jsr,vue,Ysr,Ksr,Tn,Zsr,Tue,elr,olr,Fue,rlr,tlr,Cue,alr,nlr,slr,J,GC,Mue,llr,ilr,QG,dlr,clr,mlr,OC,Eue,flr,glr,HG,hlr,ulr,plr,XC,yue,_lr,blr,UG,vlr,Tlr,Flr,VC,wue,Clr,Mlr,JG,Elr,ylr,wlr,zC,Aue,Alr,Llr,YG,Blr,xlr,klr,WC,Lue,Rlr,Slr,KG,Plr,$lr,Ilr,QC,Bue,Nlr,Dlr,ZG,jlr,qlr,Glr,HC,xue,Olr,Xlr,eO,Vlr,zlr,Wlr,UC,kue,Qlr,Hlr,oO,Ulr,Jlr,Ylr,JC,Rue,Klr,Zlr,rO,eir,oir,rir,YC,Sue,tir,air,tO,nir,sir,lir,KC,Pue,iir,dir,aO,cir,mir,fir,ZC,$ue,gir,hir,nO,uir,pir,_ir,eM,Iue,bir,vir,sO,Tir,Fir,Cir,oM,Nue,Mir,Eir,lO,yir,wir,Air,rM,Due,Lir,Bir,iO,xir,kir,Rir,tM,jue,Sir,Pir,dO,$ir,Iir,Nir,aM,que,Dir,jir,cO,qir,Gir,Oir,nM,Gue,Xir,Vir,mO,zir,Wir,Qir,sM,Oue,Hir,Uir,fO,Jir,Yir,Kir,Xue,Zir,edr,F0,uRe,Ac,lM,Vue,C0,odr,zue,rdr,pRe,Er,M0,tdr,Lc,adr,Wue,ndr,sdr,Que,ldr,idr,ddr,E0,cdr,Hue,mdr,fdr,gdr,bt,y0,hdr,Uue,udr,pdr,Bc,_dr,Jue,bdr,vdr,Yue,Tdr,Fdr,Cdr,Kue,Mdr,Edr,w0,ydr,vo,A0,wdr,Zue,Adr,Ldr,Fn,Bdr,epe,xdr,kdr,ope,Rdr,Sdr,rpe,Pdr,$dr,Idr,pe,iM,tpe,Ndr,Ddr,gO,jdr,qdr,Gdr,dM,ape,Odr,Xdr,hO,Vdr,zdr,Wdr,cM,npe,Qdr,Hdr,uO,Udr,Jdr,Ydr,mM,spe,Kdr,Zdr,pO,ecr,ocr,rcr,fM,lpe,tcr,acr,_O,ncr,scr,lcr,gM,ipe,icr,dcr,bO,ccr,mcr,fcr,hM,dpe,gcr,hcr,vO,ucr,pcr,_cr,uM,cpe,bcr,vcr,TO,Tcr,Fcr,Ccr,pM,mpe,Mcr,Ecr,FO,ycr,wcr,Acr,_M,fpe,Lcr,Bcr,CO,xcr,kcr,Rcr,gpe,Scr,Pcr,L0,_Re,xc,bM,hpe,B0,$cr,upe,Icr,bRe,yr,x0,Ncr,kc,Dcr,ppe,jcr,qcr,_pe,Gcr,Ocr,Xcr,k0,Vcr,bpe,zcr,Wcr,Qcr,vt,R0,Hcr,vpe,Ucr,Jcr,Rc,Ycr,Tpe,Kcr,Zcr,Fpe,emr,omr,rmr,Cpe,tmr,amr,S0,nmr,To,P0,smr,Mpe,lmr,imr,Cn,dmr,Epe,cmr,mmr,ype,fmr,gmr,wpe,hmr,umr,pmr,V,vM,Ape,_mr,bmr,MO,vmr,Tmr,Fmr,TM,Lpe,Cmr,Mmr,EO,Emr,ymr,wmr,FM,Bpe,Amr,Lmr,yO,Bmr,xmr,kmr,CM,xpe,Rmr,Smr,wO,Pmr,$mr,Imr,MM,kpe,Nmr,Dmr,AO,jmr,qmr,Gmr,EM,Rpe,Omr,Xmr,LO,Vmr,zmr,Wmr,yM,Spe,Qmr,Hmr,BO,Umr,Jmr,Ymr,wM,Ppe,Kmr,Zmr,xO,efr,ofr,rfr,AM,$pe,tfr,afr,kO,nfr,sfr,lfr,LM,Ipe,ifr,dfr,RO,cfr,mfr,ffr,BM,Npe,gfr,hfr,SO,ufr,pfr,_fr,xM,Dpe,bfr,vfr,PO,Tfr,Ffr,Cfr,kM,jpe,Mfr,Efr,$O,yfr,wfr,Afr,RM,qpe,Lfr,Bfr,IO,xfr,kfr,Rfr,SM,Gpe,Sfr,Pfr,NO,$fr,Ifr,Nfr,PM,Ope,Dfr,jfr,DO,qfr,Gfr,Ofr,$M,Xpe,Xfr,Vfr,jO,zfr,Wfr,Qfr,IM,Vpe,Hfr,Ufr,qO,Jfr,Yfr,Kfr,NM,zpe,Zfr,egr,GO,ogr,rgr,tgr,DM,Wpe,agr,ngr,OO,sgr,lgr,igr,jM,Qpe,dgr,cgr,XO,mgr,fgr,ggr,qM,Hpe,hgr,ugr,VO,pgr,_gr,bgr,GM,Upe,vgr,Tgr,zO,Fgr,Cgr,Mgr,OM,Jpe,Egr,ygr,WO,wgr,Agr,Lgr,XM,Ype,Bgr,xgr,QO,kgr,Rgr,Sgr,Kpe,Pgr,$gr,$0,vRe,Sc,VM,Zpe,I0,Igr,e_e,Ngr,TRe,wr,N0,Dgr,Pc,jgr,o_e,qgr,Ggr,r_e,Ogr,Xgr,Vgr,D0,zgr,t_e,Wgr,Qgr,Hgr,Tt,j0,Ugr,a_e,Jgr,Ygr,$c,Kgr,n_e,Zgr,ehr,s_e,ohr,rhr,thr,l_e,ahr,nhr,q0,shr,Fo,G0,lhr,i_e,ihr,dhr,Mn,chr,d_e,mhr,fhr,c_e,ghr,hhr,m_e,uhr,phr,_hr,ae,zM,f_e,bhr,vhr,HO,Thr,Fhr,Chr,WM,g_e,Mhr,Ehr,UO,yhr,whr,Ahr,QM,h_e,Lhr,Bhr,JO,xhr,khr,Rhr,HM,u_e,Shr,Phr,YO,$hr,Ihr,Nhr,UM,p_e,Dhr,jhr,KO,qhr,Ghr,Ohr,JM,__e,Xhr,Vhr,ZO,zhr,Whr,Qhr,YM,b_e,Hhr,Uhr,eX,Jhr,Yhr,Khr,KM,v_e,Zhr,eur,oX,our,rur,tur,ZM,T_e,aur,nur,rX,sur,lur,iur,e4,F_e,dur,cur,tX,mur,fur,gur,o4,C_e,hur,uur,aX,pur,_ur,bur,r4,M_e,vur,Tur,nX,Fur,Cur,Mur,t4,E_e,Eur,yur,sX,wur,Aur,Lur,a4,y_e,Bur,xur,lX,kur,Rur,Sur,n4,w_e,Pur,$ur,iX,Iur,Nur,Dur,s4,A_e,jur,qur,dX,Gur,Our,Xur,l4,L_e,Vur,zur,cX,Wur,Qur,Hur,B_e,Uur,Jur,O0,FRe,Ic,i4,x_e,X0,Yur,k_e,Kur,CRe,Ar,V0,Zur,Nc,epr,R_e,opr,rpr,S_e,tpr,apr,npr,z0,spr,P_e,lpr,ipr,dpr,Ft,W0,cpr,$_e,mpr,fpr,Dc,gpr,I_e,hpr,upr,N_e,ppr,_pr,bpr,D_e,vpr,Tpr,Q0,Fpr,Co,H0,Cpr,j_e,Mpr,Epr,En,ypr,q_e,wpr,Apr,G_e,Lpr,Bpr,O_e,xpr,kpr,Rpr,X_e,d4,V_e,Spr,Ppr,mX,$pr,Ipr,Npr,z_e,Dpr,jpr,U0,MRe,jc,c4,W_e,J0,qpr,Q_e,Gpr,ERe,Lr,Y0,Opr,qc,Xpr,H_e,Vpr,zpr,U_e,Wpr,Qpr,Hpr,K0,Upr,J_e,Jpr,Ypr,Kpr,Ct,Z0,Zpr,Y_e,e_r,o_r,Gc,r_r,K_e,t_r,a_r,Z_e,n_r,s_r,l_r,ebe,i_r,d_r,eL,c_r,Mo,oL,m_r,obe,f_r,g_r,yn,h_r,rbe,u_r,p_r,tbe,__r,b_r,abe,v_r,T_r,F_r,Y,m4,nbe,C_r,M_r,fX,E_r,y_r,w_r,f4,sbe,A_r,L_r,gX,B_r,x_r,k_r,g4,lbe,R_r,S_r,hX,P_r,$_r,I_r,h4,ibe,N_r,D_r,uX,j_r,q_r,G_r,u4,dbe,O_r,X_r,pX,V_r,z_r,W_r,p4,cbe,Q_r,H_r,_X,U_r,J_r,Y_r,_4,mbe,K_r,Z_r,bX,ebr,obr,rbr,b4,fbe,tbr,abr,vX,nbr,sbr,lbr,v4,gbe,ibr,dbr,TX,cbr,mbr,fbr,T4,hbe,gbr,hbr,FX,ubr,pbr,_br,F4,ube,bbr,vbr,CX,Tbr,Fbr,Cbr,C4,pbe,Mbr,Ebr,MX,ybr,wbr,Abr,M4,_be,Lbr,Bbr,EX,xbr,kbr,Rbr,E4,bbe,Sbr,Pbr,yX,$br,Ibr,Nbr,y4,vbe,Dbr,jbr,wX,qbr,Gbr,Obr,w4,Tbe,Xbr,Vbr,AX,zbr,Wbr,Qbr,A4,Fbe,Hbr,Ubr,LX,Jbr,Ybr,Kbr,L4,Cbe,Zbr,e2r,BX,o2r,r2r,t2r,B4,Mbe,a2r,n2r,xX,s2r,l2r,i2r,x4,Ebe,d2r,c2r,kX,m2r,f2r,g2r,ybe,h2r,u2r,rL,yRe,Oc,k4,wbe,tL,p2r,Abe,_2r,wRe,Br,aL,b2r,Xc,v2r,Lbe,T2r,F2r,Bbe,C2r,M2r,E2r,nL,y2r,xbe,w2r,A2r,L2r,Mt,sL,B2r,kbe,x2r,k2r,Vc,R2r,Rbe,S2r,P2r,Sbe,$2r,I2r,N2r,Pbe,D2r,j2r,lL,q2r,Eo,iL,G2r,$be,O2r,X2r,wn,V2r,Ibe,z2r,W2r,Nbe,Q2r,H2r,Dbe,U2r,J2r,Y2r,Z,R4,jbe,K2r,Z2r,RX,evr,ovr,rvr,S4,qbe,tvr,avr,SX,nvr,svr,lvr,P4,Gbe,ivr,dvr,PX,cvr,mvr,fvr,$4,Obe,gvr,hvr,$X,uvr,pvr,_vr,I4,Xbe,bvr,vvr,IX,Tvr,Fvr,Cvr,N4,Vbe,Mvr,Evr,NX,yvr,wvr,Avr,D4,zbe,Lvr,Bvr,DX,xvr,kvr,Rvr,j4,Wbe,Svr,Pvr,jX,$vr,Ivr,Nvr,q4,Qbe,Dvr,jvr,qX,qvr,Gvr,Ovr,G4,Hbe,Xvr,Vvr,GX,zvr,Wvr,Qvr,O4,Ube,Hvr,Uvr,OX,Jvr,Yvr,Kvr,X4,Jbe,Zvr,eTr,XX,oTr,rTr,tTr,V4,Ybe,aTr,nTr,VX,sTr,lTr,iTr,z4,Kbe,dTr,cTr,zX,mTr,fTr,gTr,W4,Zbe,hTr,uTr,WX,pTr,_Tr,bTr,Q4,e2e,vTr,TTr,QX,FTr,CTr,MTr,H4,o2e,ETr,yTr,HX,wTr,ATr,LTr,U4,r2e,BTr,xTr,UX,kTr,RTr,STr,J4,t2e,PTr,$Tr,JX,ITr,NTr,DTr,a2e,jTr,qTr,dL,ARe,zc,Y4,n2e,cL,GTr,s2e,OTr,LRe,xr,mL,XTr,Wc,VTr,l2e,zTr,WTr,i2e,QTr,HTr,UTr,fL,JTr,d2e,YTr,KTr,ZTr,Et,gL,e1r,c2e,o1r,r1r,Qc,t1r,m2e,a1r,n1r,f2e,s1r,l1r,i1r,g2e,d1r,c1r,hL,m1r,yo,uL,f1r,h2e,g1r,h1r,An,u1r,u2e,p1r,_1r,p2e,b1r,v1r,_2e,T1r,F1r,C1r,b2e,K4,v2e,M1r,E1r,YX,y1r,w1r,A1r,T2e,L1r,B1r,pL,BRe,Hc,Z4,F2e,_L,x1r,C2e,k1r,xRe,kr,bL,R1r,Uc,S1r,M2e,P1r,$1r,E2e,I1r,N1r,D1r,vL,j1r,y2e,q1r,G1r,O1r,yt,TL,X1r,w2e,V1r,z1r,Jc,W1r,A2e,Q1r,H1r,L2e,U1r,J1r,Y1r,B2e,K1r,Z1r,FL,eFr,wo,CL,oFr,x2e,rFr,tFr,Ln,aFr,k2e,nFr,sFr,R2e,lFr,iFr,S2e,dFr,cFr,mFr,P2e,eE,$2e,fFr,gFr,KX,hFr,uFr,pFr,I2e,_Fr,bFr,ML,kRe,Yc,oE,N2e,EL,vFr,D2e,TFr,RRe,Rr,yL,FFr,Kc,CFr,j2e,MFr,EFr,q2e,yFr,wFr,AFr,wL,LFr,G2e,BFr,xFr,kFr,wt,AL,RFr,O2e,SFr,PFr,Zc,$Fr,X2e,IFr,NFr,V2e,DFr,jFr,qFr,z2e,GFr,OFr,LL,XFr,Ao,BL,VFr,W2e,zFr,WFr,Bn,QFr,Q2e,HFr,UFr,H2e,JFr,YFr,U2e,KFr,ZFr,eCr,z,rE,J2e,oCr,rCr,ZX,tCr,aCr,nCr,tE,Y2e,sCr,lCr,eV,iCr,dCr,cCr,aE,K2e,mCr,fCr,oV,gCr,hCr,uCr,nE,Z2e,pCr,_Cr,rV,bCr,vCr,TCr,sE,eve,FCr,CCr,tV,MCr,ECr,yCr,lE,ove,wCr,ACr,aV,LCr,BCr,xCr,iE,rve,kCr,RCr,nV,SCr,PCr,$Cr,dE,tve,ICr,NCr,sV,DCr,jCr,qCr,cE,ave,GCr,OCr,lV,XCr,VCr,zCr,mE,nve,WCr,QCr,iV,HCr,UCr,JCr,fE,sve,YCr,KCr,dV,ZCr,eMr,oMr,gE,lve,rMr,tMr,cV,aMr,nMr,sMr,hE,ive,lMr,iMr,mV,dMr,cMr,mMr,uE,dve,fMr,gMr,fV,hMr,uMr,pMr,pE,cve,_Mr,bMr,gV,vMr,TMr,FMr,_E,mve,CMr,MMr,hV,EMr,yMr,wMr,bE,fve,AMr,LMr,uV,BMr,xMr,kMr,vE,gve,RMr,SMr,pV,PMr,$Mr,IMr,TE,hve,NMr,DMr,_V,jMr,qMr,GMr,FE,uve,OMr,XMr,bV,VMr,zMr,WMr,CE,pve,QMr,HMr,vV,UMr,JMr,YMr,ME,_ve,KMr,ZMr,TV,e4r,o4r,r4r,EE,bve,t4r,a4r,FV,n4r,s4r,l4r,yE,vve,i4r,d4r,CV,c4r,m4r,f4r,wE,Tve,g4r,h4r,MV,u4r,p4r,_4r,Fve,b4r,v4r,xL,SRe,em,AE,Cve,kL,T4r,Mve,F4r,PRe,Sr,RL,C4r,om,M4r,Eve,E4r,y4r,yve,w4r,A4r,L4r,SL,B4r,wve,x4r,k4r,R4r,At,PL,S4r,Ave,P4r,$4r,rm,I4r,Lve,N4r,D4r,Bve,j4r,q4r,G4r,xve,O4r,X4r,$L,V4r,Lo,IL,z4r,kve,W4r,Q4r,xn,H4r,Rve,U4r,J4r,Sve,Y4r,K4r,Pve,Z4r,eEr,oEr,ca,LE,$ve,rEr,tEr,EV,aEr,nEr,sEr,BE,Ive,lEr,iEr,yV,dEr,cEr,mEr,xE,Nve,fEr,gEr,wV,hEr,uEr,pEr,kE,Dve,_Er,bEr,AV,vEr,TEr,FEr,RE,jve,CEr,MEr,LV,EEr,yEr,wEr,qve,AEr,LEr,NL,$Re,tm,SE,Gve,DL,BEr,Ove,xEr,IRe,Pr,jL,kEr,am,REr,Xve,SEr,PEr,Vve,$Er,IEr,NEr,qL,DEr,zve,jEr,qEr,GEr,Lt,GL,OEr,Wve,XEr,VEr,nm,zEr,Qve,WEr,QEr,Hve,HEr,UEr,JEr,Uve,YEr,KEr,OL,ZEr,Bo,XL,e3r,Jve,o3r,r3r,kn,t3r,Yve,a3r,n3r,Kve,s3r,l3r,Zve,i3r,d3r,c3r,ce,PE,eTe,m3r,f3r,BV,g3r,h3r,u3r,$E,oTe,p3r,_3r,xV,b3r,v3r,T3r,IE,rTe,F3r,C3r,kV,M3r,E3r,y3r,NE,tTe,w3r,A3r,RV,L3r,B3r,x3r,DE,aTe,k3r,R3r,SV,S3r,P3r,$3r,jE,nTe,I3r,N3r,PV,D3r,j3r,q3r,qE,sTe,G3r,O3r,$V,X3r,V3r,z3r,GE,lTe,W3r,Q3r,IV,H3r,U3r,J3r,OE,iTe,Y3r,K3r,NV,Z3r,e5r,o5r,XE,dTe,r5r,t5r,DV,a5r,n5r,s5r,VE,cTe,l5r,i5r,jV,d5r,c5r,m5r,zE,mTe,f5r,g5r,qV,h5r,u5r,p5r,fTe,_5r,b5r,VL,NRe,sm,WE,gTe,zL,v5r,hTe,T5r,DRe,$r,WL,F5r,lm,C5r,uTe,M5r,E5r,pTe,y5r,w5r,A5r,QL,L5r,_Te,B5r,x5r,k5r,Bt,HL,R5r,bTe,S5r,P5r,im,$5r,vTe,I5r,N5r,TTe,D5r,j5r,q5r,FTe,G5r,O5r,UL,X5r,xo,JL,V5r,CTe,z5r,W5r,Rn,Q5r,MTe,H5r,U5r,ETe,J5r,Y5r,yTe,K5r,Z5r,eyr,_e,QE,wTe,oyr,ryr,GV,tyr,ayr,nyr,HE,ATe,syr,lyr,OV,iyr,dyr,cyr,UE,LTe,myr,fyr,XV,gyr,hyr,uyr,JE,BTe,pyr,_yr,VV,byr,vyr,Tyr,YE,xTe,Fyr,Cyr,zV,Myr,Eyr,yyr,KE,kTe,wyr,Ayr,WV,Lyr,Byr,xyr,ZE,RTe,kyr,Ryr,QV,Syr,Pyr,$yr,e3,STe,Iyr,Nyr,HV,Dyr,jyr,qyr,o3,PTe,Gyr,Oyr,UV,Xyr,Vyr,zyr,r3,$Te,Wyr,Qyr,JV,Hyr,Uyr,Jyr,ITe,Yyr,Kyr,YL,jRe,dm,t3,NTe,KL,Zyr,DTe,ewr,qRe,Ir,ZL,owr,cm,rwr,jTe,twr,awr,qTe,nwr,swr,lwr,e7,iwr,GTe,dwr,cwr,mwr,xt,o7,fwr,OTe,gwr,hwr,mm,uwr,XTe,pwr,_wr,VTe,bwr,vwr,Twr,zTe,Fwr,Cwr,r7,Mwr,ko,t7,Ewr,WTe,ywr,wwr,Sn,Awr,QTe,Lwr,Bwr,HTe,xwr,kwr,UTe,Rwr,Swr,Pwr,Me,a3,JTe,$wr,Iwr,YV,Nwr,Dwr,jwr,n3,YTe,qwr,Gwr,KV,Owr,Xwr,Vwr,s3,KTe,zwr,Wwr,ZV,Qwr,Hwr,Uwr,l3,ZTe,Jwr,Ywr,ez,Kwr,Zwr,e6r,i3,e1e,o6r,r6r,oz,t6r,a6r,n6r,d3,o1e,s6r,l6r,rz,i6r,d6r,c6r,c3,r1e,m6r,f6r,tz,g6r,h6r,u6r,m3,t1e,p6r,_6r,az,b6r,v6r,T6r,f3,a1e,F6r,C6r,nz,M6r,E6r,y6r,n1e,w6r,A6r,a7,GRe,fm,g3,s1e,n7,L6r,l1e,B6r,ORe,Nr,s7,x6r,gm,k6r,i1e,R6r,S6r,d1e,P6r,$6r,I6r,l7,N6r,c1e,D6r,j6r,q6r,kt,i7,G6r,m1e,O6r,X6r,hm,V6r,f1e,z6r,W6r,g1e,Q6r,H6r,U6r,h1e,J6r,Y6r,d7,K6r,Ro,c7,Z6r,u1e,eAr,oAr,Pn,rAr,p1e,tAr,aAr,_1e,nAr,sAr,b1e,lAr,iAr,dAr,be,h3,v1e,cAr,mAr,sz,fAr,gAr,hAr,u3,T1e,uAr,pAr,lz,_Ar,bAr,vAr,p3,F1e,TAr,FAr,iz,CAr,MAr,EAr,_3,C1e,yAr,wAr,dz,AAr,LAr,BAr,b3,M1e,xAr,kAr,cz,RAr,SAr,PAr,v3,E1e,$Ar,IAr,mz,NAr,DAr,jAr,T3,y1e,qAr,GAr,fz,OAr,XAr,VAr,F3,w1e,zAr,WAr,gz,QAr,HAr,UAr,C3,A1e,JAr,YAr,hz,KAr,ZAr,e0r,M3,L1e,o0r,r0r,uz,t0r,a0r,n0r,B1e,s0r,l0r,m7,XRe,um,E3,x1e,f7,i0r,k1e,d0r,VRe,Dr,g7,c0r,pm,m0r,R1e,f0r,g0r,S1e,h0r,u0r,p0r,h7,_0r,P1e,b0r,v0r,T0r,Rt,u7,F0r,$1e,C0r,M0r,_m,E0r,I1e,y0r,w0r,N1e,A0r,L0r,B0r,D1e,x0r,k0r,p7,R0r,So,_7,S0r,j1e,P0r,$0r,$n,I0r,q1e,N0r,D0r,G1e,j0r,q0r,O1e,G0r,O0r,X0r,ve,y3,X1e,V0r,z0r,pz,W0r,Q0r,H0r,w3,V1e,U0r,J0r,_z,Y0r,K0r,Z0r,A3,z1e,eLr,oLr,bz,rLr,tLr,aLr,L3,W1e,nLr,sLr,vz,lLr,iLr,dLr,B3,Q1e,cLr,mLr,Tz,fLr,gLr,hLr,x3,H1e,uLr,pLr,Fz,_Lr,bLr,vLr,k3,U1e,TLr,FLr,Cz,CLr,MLr,ELr,R3,J1e,yLr,wLr,Mz,ALr,LLr,BLr,S3,Y1e,xLr,kLr,Ez,RLr,SLr,PLr,P3,K1e,$Lr,ILr,yz,NLr,DLr,jLr,Z1e,qLr,GLr,b7,zRe,bm,$3,eFe,v7,OLr,oFe,XLr,WRe,jr,T7,VLr,vm,zLr,rFe,WLr,QLr,tFe,HLr,ULr,JLr,F7,YLr,aFe,KLr,ZLr,e7r,St,C7,o7r,nFe,r7r,t7r,Tm,a7r,sFe,n7r,s7r,lFe,l7r,i7r,d7r,iFe,c7r,m7r,M7,f7r,Po,E7,g7r,dFe,h7r,u7r,In,p7r,cFe,_7r,b7r,mFe,v7r,T7r,fFe,F7r,C7r,M7r,Se,I3,gFe,E7r,y7r,wz,w7r,A7r,L7r,N3,hFe,B7r,x7r,Az,k7r,R7r,S7r,D3,uFe,P7r,$7r,Lz,I7r,N7r,D7r,j3,pFe,j7r,q7r,Bz,G7r,O7r,X7r,q3,_Fe,V7r,z7r,xz,W7r,Q7r,H7r,G3,bFe,U7r,J7r,kz,Y7r,K7r,Z7r,O3,vFe,e8r,o8r,Rz,r8r,t8r,a8r,X3,TFe,n8r,s8r,Sz,l8r,i8r,d8r,FFe,c8r,m8r,y7,QRe,Fm,V3,CFe,w7,f8r,MFe,g8r,HRe,qr,A7,h8r,Cm,u8r,EFe,p8r,_8r,yFe,b8r,v8r,T8r,L7,F8r,wFe,C8r,M8r,E8r,Pt,B7,y8r,AFe,w8r,A8r,Mm,L8r,LFe,B8r,x8r,BFe,k8r,R8r,S8r,xFe,P8r,$8r,x7,I8r,$o,k7,N8r,kFe,D8r,j8r,Nn,q8r,RFe,G8r,O8r,SFe,X8r,V8r,PFe,z8r,W8r,Q8r,Pe,z3,$Fe,H8r,U8r,Pz,J8r,Y8r,K8r,W3,IFe,Z8r,e9r,$z,o9r,r9r,t9r,Q3,NFe,a9r,n9r,Iz,s9r,l9r,i9r,H3,DFe,d9r,c9r,Nz,m9r,f9r,g9r,U3,jFe,h9r,u9r,Dz,p9r,_9r,b9r,J3,qFe,v9r,T9r,jz,F9r,C9r,M9r,Y3,GFe,E9r,y9r,qz,w9r,A9r,L9r,K3,OFe,B9r,x9r,Gz,k9r,R9r,S9r,XFe,P9r,$9r,R7,URe,Em,Z3,VFe,S7,I9r,zFe,N9r,JRe,Gr,P7,D9r,ym,j9r,WFe,q9r,G9r,QFe,O9r,X9r,V9r,$7,z9r,HFe,W9r,Q9r,H9r,$t,I7,U9r,UFe,J9r,Y9r,wm,K9r,JFe,Z9r,eBr,YFe,oBr,rBr,tBr,KFe,aBr,nBr,N7,sBr,Io,D7,lBr,ZFe,iBr,dBr,Dn,cBr,eCe,mBr,fBr,oCe,gBr,hBr,rCe,uBr,pBr,_Br,tCe,e5,aCe,bBr,vBr,Oz,TBr,FBr,CBr,nCe,MBr,EBr,j7,YRe,Am,o5,sCe,q7,yBr,lCe,wBr,KRe,Or,G7,ABr,Lm,LBr,iCe,BBr,xBr,dCe,kBr,RBr,SBr,O7,PBr,cCe,$Br,IBr,NBr,It,X7,DBr,mCe,jBr,qBr,Bm,GBr,fCe,OBr,XBr,gCe,VBr,zBr,WBr,hCe,QBr,HBr,V7,UBr,No,z7,JBr,uCe,YBr,KBr,jn,ZBr,pCe,exr,oxr,_Ce,rxr,txr,bCe,axr,nxr,sxr,W7,r5,vCe,lxr,ixr,Xz,dxr,cxr,mxr,t5,TCe,fxr,gxr,Vz,hxr,uxr,pxr,FCe,_xr,bxr,Q7,ZRe,xm,a5,CCe,H7,vxr,MCe,Txr,eSe,Xr,U7,Fxr,km,Cxr,ECe,Mxr,Exr,yCe,yxr,wxr,Axr,J7,Lxr,wCe,Bxr,xxr,kxr,Nt,Y7,Rxr,ACe,Sxr,Pxr,Rm,$xr,LCe,Ixr,Nxr,BCe,Dxr,jxr,qxr,xCe,Gxr,Oxr,K7,Xxr,Do,Z7,Vxr,kCe,zxr,Wxr,qn,Qxr,RCe,Hxr,Uxr,SCe,Jxr,Yxr,PCe,Kxr,Zxr,ekr,$Ce,n5,ICe,okr,rkr,zz,tkr,akr,nkr,NCe,skr,lkr,e8,oSe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),dy=new X({}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new ikr({props:{warning:!0,$$slots:{default:[cEt]},$$scope:{ctx:Pm}}}),my=new X({}),fy=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L538"}}),uy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),py=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),_y=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),by=new X({}),vy=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L351"}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Ey=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),xh=new ikr({props:{$$slots:{default:[mEt]},$$scope:{ctx:Pm}}}),xy=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ky=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Ry=new X({}),Sy=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gh=new ikr({props:{$$slots:{default:[fEt]},$$scope:{ctx:Pm}}}),Ny=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Dy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),jy=new X({}),qy=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L705"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Qy=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L712"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L727"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L734"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),mw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L741"}}),pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),Lw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L784"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L791"}}),Nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),Vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),Yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new X({}),r6=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L766"}}),a6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),s6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new X({}),d6=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),m6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),f6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),g6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new X({}),p6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),b6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),v6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),T6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C6=new X({}),M6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),y6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),w6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),A6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B6=new X({}),x6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),R6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),S6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),P6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new X({}),N6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),j6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),G6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new X({}),V6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),W6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Q6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),H6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y6=new X({}),K6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),eA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),rA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),lA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),dA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),fA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),pA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),FA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),MA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),PA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),DA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),GA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),HA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),t0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),n0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),c0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),p0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),b0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),T0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),M0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),A0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),x0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),R0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),P0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),N0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),j0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),G0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),V0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),W0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),H0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Z0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),oL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),sL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),iL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),mL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),gL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),uL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new X({}),bL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),TL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),CL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),yL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),AL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),BL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),RL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),PL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),IL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new X({}),jL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),GL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),XL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),WL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),HL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),JL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),o7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),r7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),t7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n7=new X({}),s7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),i7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),d7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),c7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f7=new X({}),g7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),u7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),p7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),_7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v7=new X({}),T7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),C7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),M7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),E7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w7=new X({}),A7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),B7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),x7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),k7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S7=new X({}),P7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),I7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),N7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),D7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q7=new X({}),G7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),X7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),V7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),z7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H7=new X({}),U7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Y7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),K7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),Z7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),m(me.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),$m=l(),ma=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),ny=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),sy=o("AutoConfig"),On=o(", "),Xn=a("a"),ly=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),iy=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),m(qa.$$.fragment),mo=l(),ue=a("p"),K8=o("will create a model that is an instance of "),Oi=a("a"),Z8=o("BertModel"),e9=o("."),zo=l(),Ga=a("p"),o9=o("There is one class of "),Dm=a("code"),r9=o("AutoModel"),h$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eke=l(),Xi=a("h2"),jm=a("a"),DQ=a("span"),m(dy.$$.fragment),u$e=l(),jQ=a("span"),p$e=o("Extending the Auto Classes"),oke=l(),zn=a("p"),_$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=a("code"),b$e=o("NewModel"),v$e=o(", make sure you have a "),GQ=a("code"),T$e=o("NewModelConfig"),F$e=o(` then you can add those to the auto
classes like this:`),rke=l(),m(cy.$$.fragment),tke=l(),t9=a("p"),C$e=o("You will then be able to use the auto classes like you would usually do!"),ake=l(),m(qm.$$.fragment),nke=l(),Vi=a("h2"),Gm=a("a"),OQ=a("span"),m(my.$$.fragment),M$e=l(),XQ=a("span"),E$e=o("AutoConfig"),ske=l(),Wo=a("div"),m(fy.$$.fragment),y$e=l(),gy=a("p"),w$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a9=a("a"),A$e=o("from_pretrained()"),L$e=o(" class method."),B$e=l(),hy=a("p"),x$e=o("This class cannot be instantiated directly using "),VQ=a("code"),k$e=o("__init__()"),R$e=o(" (throws an error)."),S$e=l(),fo=a("div"),m(uy.$$.fragment),P$e=l(),zQ=a("p"),$$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),I$e=l(),zi=a("p"),N$e=o("The configuration class to instantiate is selected based on the "),WQ=a("code"),D$e=o("model_type"),j$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=a("code"),q$e=o("pretrained_model_name_or_path"),G$e=o(":"),O$e=l(),v=a("ul"),Om=a("li"),HQ=a("strong"),X$e=o("albert"),V$e=o(" \u2014 "),n9=a("a"),z$e=o("AlbertConfig"),W$e=o(" (ALBERT model)"),Q$e=l(),Xm=a("li"),UQ=a("strong"),H$e=o("bart"),U$e=o(" \u2014 "),s9=a("a"),J$e=o("BartConfig"),Y$e=o(" (BART model)"),K$e=l(),Vm=a("li"),JQ=a("strong"),Z$e=o("beit"),eIe=o(" \u2014 "),l9=a("a"),oIe=o("BeitConfig"),rIe=o(" (BEiT model)"),tIe=l(),zm=a("li"),YQ=a("strong"),aIe=o("bert"),nIe=o(" \u2014 "),i9=a("a"),sIe=o("BertConfig"),lIe=o(" (BERT model)"),iIe=l(),Wm=a("li"),KQ=a("strong"),dIe=o("bert-generation"),cIe=o(" \u2014 "),d9=a("a"),mIe=o("BertGenerationConfig"),fIe=o(" (Bert Generation model)"),gIe=l(),Qm=a("li"),ZQ=a("strong"),hIe=o("big_bird"),uIe=o(" \u2014 "),c9=a("a"),pIe=o("BigBirdConfig"),_Ie=o(" (BigBird model)"),bIe=l(),Hm=a("li"),eH=a("strong"),vIe=o("bigbird_pegasus"),TIe=o(" \u2014 "),m9=a("a"),FIe=o("BigBirdPegasusConfig"),CIe=o(" (BigBirdPegasus model)"),MIe=l(),Um=a("li"),oH=a("strong"),EIe=o("blenderbot"),yIe=o(" \u2014 "),f9=a("a"),wIe=o("BlenderbotConfig"),AIe=o(" (Blenderbot model)"),LIe=l(),Jm=a("li"),rH=a("strong"),BIe=o("blenderbot-small"),xIe=o(" \u2014 "),g9=a("a"),kIe=o("BlenderbotSmallConfig"),RIe=o(" (BlenderbotSmall model)"),SIe=l(),Ym=a("li"),tH=a("strong"),PIe=o("camembert"),$Ie=o(" \u2014 "),h9=a("a"),IIe=o("CamembertConfig"),NIe=o(" (CamemBERT model)"),DIe=l(),Km=a("li"),aH=a("strong"),jIe=o("canine"),qIe=o(" \u2014 "),u9=a("a"),GIe=o("CanineConfig"),OIe=o(" (Canine model)"),XIe=l(),Zm=a("li"),nH=a("strong"),VIe=o("clip"),zIe=o(" \u2014 "),p9=a("a"),WIe=o("CLIPConfig"),QIe=o(" (CLIP model)"),HIe=l(),ef=a("li"),sH=a("strong"),UIe=o("convbert"),JIe=o(" \u2014 "),_9=a("a"),YIe=o("ConvBertConfig"),KIe=o(" (ConvBERT model)"),ZIe=l(),of=a("li"),lH=a("strong"),eNe=o("convnext"),oNe=o(" \u2014 "),b9=a("a"),rNe=o("ConvNextConfig"),tNe=o(" (ConvNext model)"),aNe=l(),rf=a("li"),iH=a("strong"),nNe=o("ctrl"),sNe=o(" \u2014 "),v9=a("a"),lNe=o("CTRLConfig"),iNe=o(" (CTRL model)"),dNe=l(),tf=a("li"),dH=a("strong"),cNe=o("data2vec-audio"),mNe=o(" \u2014 "),T9=a("a"),fNe=o("Data2VecAudioConfig"),gNe=o(" (Data2VecAudio model)"),hNe=l(),af=a("li"),cH=a("strong"),uNe=o("data2vec-text"),pNe=o(" \u2014 "),F9=a("a"),_Ne=o("Data2VecTextConfig"),bNe=o(" (Data2VecText model)"),vNe=l(),nf=a("li"),mH=a("strong"),TNe=o("deberta"),FNe=o(" \u2014 "),C9=a("a"),CNe=o("DebertaConfig"),MNe=o(" (DeBERTa model)"),ENe=l(),sf=a("li"),fH=a("strong"),yNe=o("deberta-v2"),wNe=o(" \u2014 "),M9=a("a"),ANe=o("DebertaV2Config"),LNe=o(" (DeBERTa-v2 model)"),BNe=l(),lf=a("li"),gH=a("strong"),xNe=o("decision_transformer"),kNe=o(" \u2014 "),E9=a("a"),RNe=o("DecisionTransformerConfig"),SNe=o(" (Decision Transformer model)"),PNe=l(),df=a("li"),hH=a("strong"),$Ne=o("deit"),INe=o(" \u2014 "),y9=a("a"),NNe=o("DeiTConfig"),DNe=o(" (DeiT model)"),jNe=l(),cf=a("li"),uH=a("strong"),qNe=o("detr"),GNe=o(" \u2014 "),w9=a("a"),ONe=o("DetrConfig"),XNe=o(" (DETR model)"),VNe=l(),mf=a("li"),pH=a("strong"),zNe=o("distilbert"),WNe=o(" \u2014 "),A9=a("a"),QNe=o("DistilBertConfig"),HNe=o(" (DistilBERT model)"),UNe=l(),ff=a("li"),_H=a("strong"),JNe=o("dpr"),YNe=o(" \u2014 "),L9=a("a"),KNe=o("DPRConfig"),ZNe=o(" (DPR model)"),eDe=l(),gf=a("li"),bH=a("strong"),oDe=o("electra"),rDe=o(" \u2014 "),B9=a("a"),tDe=o("ElectraConfig"),aDe=o(" (ELECTRA model)"),nDe=l(),hf=a("li"),vH=a("strong"),sDe=o("encoder-decoder"),lDe=o(" \u2014 "),x9=a("a"),iDe=o("EncoderDecoderConfig"),dDe=o(" (Encoder decoder model)"),cDe=l(),uf=a("li"),TH=a("strong"),mDe=o("flaubert"),fDe=o(" \u2014 "),k9=a("a"),gDe=o("FlaubertConfig"),hDe=o(" (FlauBERT model)"),uDe=l(),pf=a("li"),FH=a("strong"),pDe=o("fnet"),_De=o(" \u2014 "),R9=a("a"),bDe=o("FNetConfig"),vDe=o(" (FNet model)"),TDe=l(),_f=a("li"),CH=a("strong"),FDe=o("fsmt"),CDe=o(" \u2014 "),S9=a("a"),MDe=o("FSMTConfig"),EDe=o(" (FairSeq Machine-Translation model)"),yDe=l(),bf=a("li"),MH=a("strong"),wDe=o("funnel"),ADe=o(" \u2014 "),P9=a("a"),LDe=o("FunnelConfig"),BDe=o(" (Funnel Transformer model)"),xDe=l(),vf=a("li"),EH=a("strong"),kDe=o("glpn"),RDe=o(" \u2014 "),$9=a("a"),SDe=o("GLPNConfig"),PDe=o(" (GLPN model)"),$De=l(),Tf=a("li"),yH=a("strong"),IDe=o("gpt2"),NDe=o(" \u2014 "),I9=a("a"),DDe=o("GPT2Config"),jDe=o(" (OpenAI GPT-2 model)"),qDe=l(),Ff=a("li"),wH=a("strong"),GDe=o("gpt_neo"),ODe=o(" \u2014 "),N9=a("a"),XDe=o("GPTNeoConfig"),VDe=o(" (GPT Neo model)"),zDe=l(),Cf=a("li"),AH=a("strong"),WDe=o("gptj"),QDe=o(" \u2014 "),D9=a("a"),HDe=o("GPTJConfig"),UDe=o(" (GPT-J model)"),JDe=l(),Mf=a("li"),LH=a("strong"),YDe=o("hubert"),KDe=o(" \u2014 "),j9=a("a"),ZDe=o("HubertConfig"),eje=o(" (Hubert model)"),oje=l(),Ef=a("li"),BH=a("strong"),rje=o("ibert"),tje=o(" \u2014 "),q9=a("a"),aje=o("IBertConfig"),nje=o(" (I-BERT model)"),sje=l(),yf=a("li"),xH=a("strong"),lje=o("imagegpt"),ije=o(" \u2014 "),G9=a("a"),dje=o("ImageGPTConfig"),cje=o(" (ImageGPT model)"),mje=l(),wf=a("li"),kH=a("strong"),fje=o("layoutlm"),gje=o(" \u2014 "),O9=a("a"),hje=o("LayoutLMConfig"),uje=o(" (LayoutLM model)"),pje=l(),Af=a("li"),RH=a("strong"),_je=o("layoutlmv2"),bje=o(" \u2014 "),X9=a("a"),vje=o("LayoutLMv2Config"),Tje=o(" (LayoutLMv2 model)"),Fje=l(),Lf=a("li"),SH=a("strong"),Cje=o("led"),Mje=o(" \u2014 "),V9=a("a"),Eje=o("LEDConfig"),yje=o(" (LED model)"),wje=l(),Bf=a("li"),PH=a("strong"),Aje=o("longformer"),Lje=o(" \u2014 "),z9=a("a"),Bje=o("LongformerConfig"),xje=o(" (Longformer model)"),kje=l(),xf=a("li"),$H=a("strong"),Rje=o("luke"),Sje=o(" \u2014 "),W9=a("a"),Pje=o("LukeConfig"),$je=o(" (LUKE model)"),Ije=l(),kf=a("li"),IH=a("strong"),Nje=o("lxmert"),Dje=o(" \u2014 "),Q9=a("a"),jje=o("LxmertConfig"),qje=o(" (LXMERT model)"),Gje=l(),Rf=a("li"),NH=a("strong"),Oje=o("m2m_100"),Xje=o(" \u2014 "),H9=a("a"),Vje=o("M2M100Config"),zje=o(" (M2M100 model)"),Wje=l(),Sf=a("li"),DH=a("strong"),Qje=o("marian"),Hje=o(" \u2014 "),U9=a("a"),Uje=o("MarianConfig"),Jje=o(" (Marian model)"),Yje=l(),Pf=a("li"),jH=a("strong"),Kje=o("maskformer"),Zje=o(" \u2014 "),J9=a("a"),eqe=o("MaskFormerConfig"),oqe=o(" (MaskFormer model)"),rqe=l(),$f=a("li"),qH=a("strong"),tqe=o("mbart"),aqe=o(" \u2014 "),Y9=a("a"),nqe=o("MBartConfig"),sqe=o(" (mBART model)"),lqe=l(),If=a("li"),GH=a("strong"),iqe=o("megatron-bert"),dqe=o(" \u2014 "),K9=a("a"),cqe=o("MegatronBertConfig"),mqe=o(" (MegatronBert model)"),fqe=l(),Nf=a("li"),OH=a("strong"),gqe=o("mobilebert"),hqe=o(" \u2014 "),Z9=a("a"),uqe=o("MobileBertConfig"),pqe=o(" (MobileBERT model)"),_qe=l(),Df=a("li"),XH=a("strong"),bqe=o("mpnet"),vqe=o(" \u2014 "),eB=a("a"),Tqe=o("MPNetConfig"),Fqe=o(" (MPNet model)"),Cqe=l(),jf=a("li"),VH=a("strong"),Mqe=o("mt5"),Eqe=o(" \u2014 "),oB=a("a"),yqe=o("MT5Config"),wqe=o(" (mT5 model)"),Aqe=l(),qf=a("li"),zH=a("strong"),Lqe=o("nystromformer"),Bqe=o(" \u2014 "),rB=a("a"),xqe=o("NystromformerConfig"),kqe=o(" (Nystromformer model)"),Rqe=l(),Gf=a("li"),WH=a("strong"),Sqe=o("openai-gpt"),Pqe=o(" \u2014 "),tB=a("a"),$qe=o("OpenAIGPTConfig"),Iqe=o(" (OpenAI GPT model)"),Nqe=l(),Of=a("li"),QH=a("strong"),Dqe=o("pegasus"),jqe=o(" \u2014 "),aB=a("a"),qqe=o("PegasusConfig"),Gqe=o(" (Pegasus model)"),Oqe=l(),Xf=a("li"),HH=a("strong"),Xqe=o("perceiver"),Vqe=o(" \u2014 "),nB=a("a"),zqe=o("PerceiverConfig"),Wqe=o(" (Perceiver model)"),Qqe=l(),Vf=a("li"),UH=a("strong"),Hqe=o("plbart"),Uqe=o(" \u2014 "),sB=a("a"),Jqe=o("PLBartConfig"),Yqe=o(" (PLBart model)"),Kqe=l(),zf=a("li"),JH=a("strong"),Zqe=o("poolformer"),eGe=o(" \u2014 "),lB=a("a"),oGe=o("PoolFormerConfig"),rGe=o(" (PoolFormer model)"),tGe=l(),Wf=a("li"),YH=a("strong"),aGe=o("prophetnet"),nGe=o(" \u2014 "),iB=a("a"),sGe=o("ProphetNetConfig"),lGe=o(" (ProphetNet model)"),iGe=l(),Qf=a("li"),KH=a("strong"),dGe=o("qdqbert"),cGe=o(" \u2014 "),dB=a("a"),mGe=o("QDQBertConfig"),fGe=o(" (QDQBert model)"),gGe=l(),Hf=a("li"),ZH=a("strong"),hGe=o("rag"),uGe=o(" \u2014 "),cB=a("a"),pGe=o("RagConfig"),_Ge=o(" (RAG model)"),bGe=l(),Uf=a("li"),eU=a("strong"),vGe=o("realm"),TGe=o(" \u2014 "),mB=a("a"),FGe=o("RealmConfig"),CGe=o(" (Realm model)"),MGe=l(),Jf=a("li"),oU=a("strong"),EGe=o("reformer"),yGe=o(" \u2014 "),fB=a("a"),wGe=o("ReformerConfig"),AGe=o(" (Reformer model)"),LGe=l(),Yf=a("li"),rU=a("strong"),BGe=o("rembert"),xGe=o(" \u2014 "),gB=a("a"),kGe=o("RemBertConfig"),RGe=o(" (RemBERT model)"),SGe=l(),Kf=a("li"),tU=a("strong"),PGe=o("resnet"),$Ge=o(" \u2014 "),hB=a("a"),IGe=o("ResNetConfig"),NGe=o(" (ResNet model)"),DGe=l(),Zf=a("li"),aU=a("strong"),jGe=o("retribert"),qGe=o(" \u2014 "),uB=a("a"),GGe=o("RetriBertConfig"),OGe=o(" (RetriBERT model)"),XGe=l(),eg=a("li"),nU=a("strong"),VGe=o("roberta"),zGe=o(" \u2014 "),pB=a("a"),WGe=o("RobertaConfig"),QGe=o(" (RoBERTa model)"),HGe=l(),og=a("li"),sU=a("strong"),UGe=o("roformer"),JGe=o(" \u2014 "),_B=a("a"),YGe=o("RoFormerConfig"),KGe=o(" (RoFormer model)"),ZGe=l(),rg=a("li"),lU=a("strong"),eOe=o("segformer"),oOe=o(" \u2014 "),bB=a("a"),rOe=o("SegformerConfig"),tOe=o(" (SegFormer model)"),aOe=l(),tg=a("li"),iU=a("strong"),nOe=o("sew"),sOe=o(" \u2014 "),vB=a("a"),lOe=o("SEWConfig"),iOe=o(" (SEW model)"),dOe=l(),ag=a("li"),dU=a("strong"),cOe=o("sew-d"),mOe=o(" \u2014 "),TB=a("a"),fOe=o("SEWDConfig"),gOe=o(" (SEW-D model)"),hOe=l(),ng=a("li"),cU=a("strong"),uOe=o("speech-encoder-decoder"),pOe=o(" \u2014 "),FB=a("a"),_Oe=o("SpeechEncoderDecoderConfig"),bOe=o(" (Speech Encoder decoder model)"),vOe=l(),sg=a("li"),mU=a("strong"),TOe=o("speech_to_text"),FOe=o(" \u2014 "),CB=a("a"),COe=o("Speech2TextConfig"),MOe=o(" (Speech2Text model)"),EOe=l(),lg=a("li"),fU=a("strong"),yOe=o("speech_to_text_2"),wOe=o(" \u2014 "),MB=a("a"),AOe=o("Speech2Text2Config"),LOe=o(" (Speech2Text2 model)"),BOe=l(),ig=a("li"),gU=a("strong"),xOe=o("splinter"),kOe=o(" \u2014 "),EB=a("a"),ROe=o("SplinterConfig"),SOe=o(" (Splinter model)"),POe=l(),dg=a("li"),hU=a("strong"),$Oe=o("squeezebert"),IOe=o(" \u2014 "),yB=a("a"),NOe=o("SqueezeBertConfig"),DOe=o(" (SqueezeBERT model)"),jOe=l(),cg=a("li"),uU=a("strong"),qOe=o("swin"),GOe=o(" \u2014 "),wB=a("a"),OOe=o("SwinConfig"),XOe=o(" (Swin model)"),VOe=l(),mg=a("li"),pU=a("strong"),zOe=o("t5"),WOe=o(" \u2014 "),AB=a("a"),QOe=o("T5Config"),HOe=o(" (T5 model)"),UOe=l(),fg=a("li"),_U=a("strong"),JOe=o("tapas"),YOe=o(" \u2014 "),LB=a("a"),KOe=o("TapasConfig"),ZOe=o(" (TAPAS model)"),eXe=l(),gg=a("li"),bU=a("strong"),oXe=o("transfo-xl"),rXe=o(" \u2014 "),BB=a("a"),tXe=o("TransfoXLConfig"),aXe=o(" (Transformer-XL model)"),nXe=l(),hg=a("li"),vU=a("strong"),sXe=o("trocr"),lXe=o(" \u2014 "),xB=a("a"),iXe=o("TrOCRConfig"),dXe=o(" (TrOCR model)"),cXe=l(),ug=a("li"),TU=a("strong"),mXe=o("unispeech"),fXe=o(" \u2014 "),kB=a("a"),gXe=o("UniSpeechConfig"),hXe=o(" (UniSpeech model)"),uXe=l(),pg=a("li"),FU=a("strong"),pXe=o("unispeech-sat"),_Xe=o(" \u2014 "),RB=a("a"),bXe=o("UniSpeechSatConfig"),vXe=o(" (UniSpeechSat model)"),TXe=l(),_g=a("li"),CU=a("strong"),FXe=o("van"),CXe=o(" \u2014 "),SB=a("a"),MXe=o("VanConfig"),EXe=o(" (VAN model)"),yXe=l(),bg=a("li"),MU=a("strong"),wXe=o("vilt"),AXe=o(" \u2014 "),PB=a("a"),LXe=o("ViltConfig"),BXe=o(" (ViLT model)"),xXe=l(),vg=a("li"),EU=a("strong"),kXe=o("vision-encoder-decoder"),RXe=o(" \u2014 "),$B=a("a"),SXe=o("VisionEncoderDecoderConfig"),PXe=o(" (Vision Encoder decoder model)"),$Xe=l(),Tg=a("li"),yU=a("strong"),IXe=o("vision-text-dual-encoder"),NXe=o(" \u2014 "),IB=a("a"),DXe=o("VisionTextDualEncoderConfig"),jXe=o(" (VisionTextDualEncoder model)"),qXe=l(),Fg=a("li"),wU=a("strong"),GXe=o("visual_bert"),OXe=o(" \u2014 "),NB=a("a"),XXe=o("VisualBertConfig"),VXe=o(" (VisualBert model)"),zXe=l(),Cg=a("li"),AU=a("strong"),WXe=o("vit"),QXe=o(" \u2014 "),DB=a("a"),HXe=o("ViTConfig"),UXe=o(" (ViT model)"),JXe=l(),Mg=a("li"),LU=a("strong"),YXe=o("vit_mae"),KXe=o(" \u2014 "),jB=a("a"),ZXe=o("ViTMAEConfig"),eVe=o(" (ViTMAE model)"),oVe=l(),Eg=a("li"),BU=a("strong"),rVe=o("wav2vec2"),tVe=o(" \u2014 "),qB=a("a"),aVe=o("Wav2Vec2Config"),nVe=o(" (Wav2Vec2 model)"),sVe=l(),yg=a("li"),xU=a("strong"),lVe=o("wavlm"),iVe=o(" \u2014 "),GB=a("a"),dVe=o("WavLMConfig"),cVe=o(" (WavLM model)"),mVe=l(),wg=a("li"),kU=a("strong"),fVe=o("xglm"),gVe=o(" \u2014 "),OB=a("a"),hVe=o("XGLMConfig"),uVe=o(" (XGLM model)"),pVe=l(),Ag=a("li"),RU=a("strong"),_Ve=o("xlm"),bVe=o(" \u2014 "),XB=a("a"),vVe=o("XLMConfig"),TVe=o(" (XLM model)"),FVe=l(),Lg=a("li"),SU=a("strong"),CVe=o("xlm-prophetnet"),MVe=o(" \u2014 "),VB=a("a"),EVe=o("XLMProphetNetConfig"),yVe=o(" (XLMProphetNet model)"),wVe=l(),Bg=a("li"),PU=a("strong"),AVe=o("xlm-roberta"),LVe=o(" \u2014 "),zB=a("a"),BVe=o("XLMRobertaConfig"),xVe=o(" (XLM-RoBERTa model)"),kVe=l(),xg=a("li"),$U=a("strong"),RVe=o("xlm-roberta-xl"),SVe=o(" \u2014 "),WB=a("a"),PVe=o("XLMRobertaXLConfig"),$Ve=o(" (XLM-RoBERTa-XL model)"),IVe=l(),kg=a("li"),IU=a("strong"),NVe=o("xlnet"),DVe=o(" \u2014 "),QB=a("a"),jVe=o("XLNetConfig"),qVe=o(" (XLNet model)"),GVe=l(),Rg=a("li"),NU=a("strong"),OVe=o("yoso"),XVe=o(" \u2014 "),HB=a("a"),VVe=o("YosoConfig"),zVe=o(" (YOSO model)"),WVe=l(),DU=a("p"),QVe=o("Examples:"),HVe=l(),m(py.$$.fragment),UVe=l(),Sg=a("div"),m(_y.$$.fragment),JVe=l(),jU=a("p"),YVe=o("Register a new configuration for this class."),lke=l(),Wi=a("h2"),Pg=a("a"),qU=a("span"),m(by.$$.fragment),KVe=l(),GU=a("span"),ZVe=o("AutoTokenizer"),ike=l(),Qo=a("div"),m(vy.$$.fragment),eze=l(),Ty=a("p"),oze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UB=a("a"),rze=o("AutoTokenizer.from_pretrained()"),tze=o(" class method."),aze=l(),Fy=a("p"),nze=o("This class cannot be instantiated directly using "),OU=a("code"),sze=o("__init__()"),lze=o(" (throws an error)."),ize=l(),go=a("div"),m(Cy.$$.fragment),dze=l(),XU=a("p"),cze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mze=l(),Oa=a("p"),fze=o("The tokenizer class to instantiate is selected based on the "),VU=a("code"),gze=o("model_type"),hze=o(` property of the config object (either
passed as an argument or loaded from `),zU=a("code"),uze=o("pretrained_model_name_or_path"),pze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WU=a("code"),_ze=o("pretrained_model_name_or_path"),bze=o(":"),vze=l(),E=a("ul"),Wn=a("li"),QU=a("strong"),Tze=o("albert"),Fze=o(" \u2014 "),JB=a("a"),Cze=o("AlbertTokenizer"),Mze=o(" or "),YB=a("a"),Eze=o("AlbertTokenizerFast"),yze=o(" (ALBERT model)"),wze=l(),Qn=a("li"),HU=a("strong"),Aze=o("bart"),Lze=o(" \u2014 "),KB=a("a"),Bze=o("BartTokenizer"),xze=o(" or "),ZB=a("a"),kze=o("BartTokenizerFast"),Rze=o(" (BART model)"),Sze=l(),Hn=a("li"),UU=a("strong"),Pze=o("barthez"),$ze=o(" \u2014 "),ex=a("a"),Ize=o("BarthezTokenizer"),Nze=o(" or "),ox=a("a"),Dze=o("BarthezTokenizerFast"),jze=o(" (BARThez model)"),qze=l(),$g=a("li"),JU=a("strong"),Gze=o("bartpho"),Oze=o(" \u2014 "),rx=a("a"),Xze=o("BartphoTokenizer"),Vze=o(" (BARTpho model)"),zze=l(),Un=a("li"),YU=a("strong"),Wze=o("bert"),Qze=o(" \u2014 "),tx=a("a"),Hze=o("BertTokenizer"),Uze=o(" or "),ax=a("a"),Jze=o("BertTokenizerFast"),Yze=o(" (BERT model)"),Kze=l(),Ig=a("li"),KU=a("strong"),Zze=o("bert-generation"),eWe=o(" \u2014 "),nx=a("a"),oWe=o("BertGenerationTokenizer"),rWe=o(" (Bert Generation model)"),tWe=l(),Ng=a("li"),ZU=a("strong"),aWe=o("bert-japanese"),nWe=o(" \u2014 "),sx=a("a"),sWe=o("BertJapaneseTokenizer"),lWe=o(" (BertJapanese model)"),iWe=l(),Dg=a("li"),eJ=a("strong"),dWe=o("bertweet"),cWe=o(" \u2014 "),lx=a("a"),mWe=o("BertweetTokenizer"),fWe=o(" (Bertweet model)"),gWe=l(),Jn=a("li"),oJ=a("strong"),hWe=o("big_bird"),uWe=o(" \u2014 "),ix=a("a"),pWe=o("BigBirdTokenizer"),_We=o(" or "),dx=a("a"),bWe=o("BigBirdTokenizerFast"),vWe=o(" (BigBird model)"),TWe=l(),Yn=a("li"),rJ=a("strong"),FWe=o("bigbird_pegasus"),CWe=o(" \u2014 "),cx=a("a"),MWe=o("PegasusTokenizer"),EWe=o(" or "),mx=a("a"),yWe=o("PegasusTokenizerFast"),wWe=o(" (BigBirdPegasus model)"),AWe=l(),Kn=a("li"),tJ=a("strong"),LWe=o("blenderbot"),BWe=o(" \u2014 "),fx=a("a"),xWe=o("BlenderbotTokenizer"),kWe=o(" or "),gx=a("a"),RWe=o("BlenderbotTokenizerFast"),SWe=o(" (Blenderbot model)"),PWe=l(),jg=a("li"),aJ=a("strong"),$We=o("blenderbot-small"),IWe=o(" \u2014 "),hx=a("a"),NWe=o("BlenderbotSmallTokenizer"),DWe=o(" (BlenderbotSmall model)"),jWe=l(),qg=a("li"),nJ=a("strong"),qWe=o("byt5"),GWe=o(" \u2014 "),ux=a("a"),OWe=o("ByT5Tokenizer"),XWe=o(" (ByT5 model)"),VWe=l(),Zn=a("li"),sJ=a("strong"),zWe=o("camembert"),WWe=o(" \u2014 "),px=a("a"),QWe=o("CamembertTokenizer"),HWe=o(" or "),_x=a("a"),UWe=o("CamembertTokenizerFast"),JWe=o(" (CamemBERT model)"),YWe=l(),Gg=a("li"),lJ=a("strong"),KWe=o("canine"),ZWe=o(" \u2014 "),bx=a("a"),eQe=o("CanineTokenizer"),oQe=o(" (Canine model)"),rQe=l(),es=a("li"),iJ=a("strong"),tQe=o("clip"),aQe=o(" \u2014 "),vx=a("a"),nQe=o("CLIPTokenizer"),sQe=o(" or "),Tx=a("a"),lQe=o("CLIPTokenizerFast"),iQe=o(" (CLIP model)"),dQe=l(),os=a("li"),dJ=a("strong"),cQe=o("convbert"),mQe=o(" \u2014 "),Fx=a("a"),fQe=o("ConvBertTokenizer"),gQe=o(" or "),Cx=a("a"),hQe=o("ConvBertTokenizerFast"),uQe=o(" (ConvBERT model)"),pQe=l(),rs=a("li"),cJ=a("strong"),_Qe=o("cpm"),bQe=o(" \u2014 "),Mx=a("a"),vQe=o("CpmTokenizer"),TQe=o(" or "),mJ=a("code"),FQe=o("CpmTokenizerFast"),CQe=o(" (CPM model)"),MQe=l(),Og=a("li"),fJ=a("strong"),EQe=o("ctrl"),yQe=o(" \u2014 "),Ex=a("a"),wQe=o("CTRLTokenizer"),AQe=o(" (CTRL model)"),LQe=l(),ts=a("li"),gJ=a("strong"),BQe=o("deberta"),xQe=o(" \u2014 "),yx=a("a"),kQe=o("DebertaTokenizer"),RQe=o(" or "),wx=a("a"),SQe=o("DebertaTokenizerFast"),PQe=o(" (DeBERTa model)"),$Qe=l(),Xg=a("li"),hJ=a("strong"),IQe=o("deberta-v2"),NQe=o(" \u2014 "),Ax=a("a"),DQe=o("DebertaV2Tokenizer"),jQe=o(" (DeBERTa-v2 model)"),qQe=l(),as=a("li"),uJ=a("strong"),GQe=o("distilbert"),OQe=o(" \u2014 "),Lx=a("a"),XQe=o("DistilBertTokenizer"),VQe=o(" or "),Bx=a("a"),zQe=o("DistilBertTokenizerFast"),WQe=o(" (DistilBERT model)"),QQe=l(),ns=a("li"),pJ=a("strong"),HQe=o("dpr"),UQe=o(" \u2014 "),xx=a("a"),JQe=o("DPRQuestionEncoderTokenizer"),YQe=o(" or "),kx=a("a"),KQe=o("DPRQuestionEncoderTokenizerFast"),ZQe=o(" (DPR model)"),eHe=l(),ss=a("li"),_J=a("strong"),oHe=o("electra"),rHe=o(" \u2014 "),Rx=a("a"),tHe=o("ElectraTokenizer"),aHe=o(" or "),Sx=a("a"),nHe=o("ElectraTokenizerFast"),sHe=o(" (ELECTRA model)"),lHe=l(),Vg=a("li"),bJ=a("strong"),iHe=o("flaubert"),dHe=o(" \u2014 "),Px=a("a"),cHe=o("FlaubertTokenizer"),mHe=o(" (FlauBERT model)"),fHe=l(),ls=a("li"),vJ=a("strong"),gHe=o("fnet"),hHe=o(" \u2014 "),$x=a("a"),uHe=o("FNetTokenizer"),pHe=o(" or "),Ix=a("a"),_He=o("FNetTokenizerFast"),bHe=o(" (FNet model)"),vHe=l(),zg=a("li"),TJ=a("strong"),THe=o("fsmt"),FHe=o(" \u2014 "),Nx=a("a"),CHe=o("FSMTTokenizer"),MHe=o(" (FairSeq Machine-Translation model)"),EHe=l(),is=a("li"),FJ=a("strong"),yHe=o("funnel"),wHe=o(" \u2014 "),Dx=a("a"),AHe=o("FunnelTokenizer"),LHe=o(" or "),jx=a("a"),BHe=o("FunnelTokenizerFast"),xHe=o(" (Funnel Transformer model)"),kHe=l(),ds=a("li"),CJ=a("strong"),RHe=o("gpt2"),SHe=o(" \u2014 "),qx=a("a"),PHe=o("GPT2Tokenizer"),$He=o(" or "),Gx=a("a"),IHe=o("GPT2TokenizerFast"),NHe=o(" (OpenAI GPT-2 model)"),DHe=l(),cs=a("li"),MJ=a("strong"),jHe=o("gpt_neo"),qHe=o(" \u2014 "),Ox=a("a"),GHe=o("GPT2Tokenizer"),OHe=o(" or "),Xx=a("a"),XHe=o("GPT2TokenizerFast"),VHe=o(" (GPT Neo model)"),zHe=l(),ms=a("li"),EJ=a("strong"),WHe=o("herbert"),QHe=o(" \u2014 "),Vx=a("a"),HHe=o("HerbertTokenizer"),UHe=o(" or "),zx=a("a"),JHe=o("HerbertTokenizerFast"),YHe=o(" (HerBERT model)"),KHe=l(),Wg=a("li"),yJ=a("strong"),ZHe=o("hubert"),eUe=o(" \u2014 "),Wx=a("a"),oUe=o("Wav2Vec2CTCTokenizer"),rUe=o(" (Hubert model)"),tUe=l(),fs=a("li"),wJ=a("strong"),aUe=o("ibert"),nUe=o(" \u2014 "),Qx=a("a"),sUe=o("RobertaTokenizer"),lUe=o(" or "),Hx=a("a"),iUe=o("RobertaTokenizerFast"),dUe=o(" (I-BERT model)"),cUe=l(),gs=a("li"),AJ=a("strong"),mUe=o("layoutlm"),fUe=o(" \u2014 "),Ux=a("a"),gUe=o("LayoutLMTokenizer"),hUe=o(" or "),Jx=a("a"),uUe=o("LayoutLMTokenizerFast"),pUe=o(" (LayoutLM model)"),_Ue=l(),hs=a("li"),LJ=a("strong"),bUe=o("layoutlmv2"),vUe=o(" \u2014 "),Yx=a("a"),TUe=o("LayoutLMv2Tokenizer"),FUe=o(" or "),Kx=a("a"),CUe=o("LayoutLMv2TokenizerFast"),MUe=o(" (LayoutLMv2 model)"),EUe=l(),us=a("li"),BJ=a("strong"),yUe=o("layoutxlm"),wUe=o(" \u2014 "),Zx=a("a"),AUe=o("LayoutXLMTokenizer"),LUe=o(" or "),ek=a("a"),BUe=o("LayoutXLMTokenizerFast"),xUe=o(" (LayoutXLM model)"),kUe=l(),ps=a("li"),xJ=a("strong"),RUe=o("led"),SUe=o(" \u2014 "),ok=a("a"),PUe=o("LEDTokenizer"),$Ue=o(" or "),rk=a("a"),IUe=o("LEDTokenizerFast"),NUe=o(" (LED model)"),DUe=l(),_s=a("li"),kJ=a("strong"),jUe=o("longformer"),qUe=o(" \u2014 "),tk=a("a"),GUe=o("LongformerTokenizer"),OUe=o(" or "),ak=a("a"),XUe=o("LongformerTokenizerFast"),VUe=o(" (Longformer model)"),zUe=l(),Qg=a("li"),RJ=a("strong"),WUe=o("luke"),QUe=o(" \u2014 "),nk=a("a"),HUe=o("LukeTokenizer"),UUe=o(" (LUKE model)"),JUe=l(),bs=a("li"),SJ=a("strong"),YUe=o("lxmert"),KUe=o(" \u2014 "),sk=a("a"),ZUe=o("LxmertTokenizer"),eJe=o(" or "),lk=a("a"),oJe=o("LxmertTokenizerFast"),rJe=o(" (LXMERT model)"),tJe=l(),Hg=a("li"),PJ=a("strong"),aJe=o("m2m_100"),nJe=o(" \u2014 "),ik=a("a"),sJe=o("M2M100Tokenizer"),lJe=o(" (M2M100 model)"),iJe=l(),Ug=a("li"),$J=a("strong"),dJe=o("marian"),cJe=o(" \u2014 "),dk=a("a"),mJe=o("MarianTokenizer"),fJe=o(" (Marian model)"),gJe=l(),vs=a("li"),IJ=a("strong"),hJe=o("mbart"),uJe=o(" \u2014 "),ck=a("a"),pJe=o("MBartTokenizer"),_Je=o(" or "),mk=a("a"),bJe=o("MBartTokenizerFast"),vJe=o(" (mBART model)"),TJe=l(),Ts=a("li"),NJ=a("strong"),FJe=o("mbart50"),CJe=o(" \u2014 "),fk=a("a"),MJe=o("MBart50Tokenizer"),EJe=o(" or "),gk=a("a"),yJe=o("MBart50TokenizerFast"),wJe=o(" (mBART-50 model)"),AJe=l(),Jg=a("li"),DJ=a("strong"),LJe=o("mluke"),BJe=o(" \u2014 "),hk=a("a"),xJe=o("MLukeTokenizer"),kJe=o(" (mLUKE model)"),RJe=l(),Fs=a("li"),jJ=a("strong"),SJe=o("mobilebert"),PJe=o(" \u2014 "),uk=a("a"),$Je=o("MobileBertTokenizer"),IJe=o(" or "),pk=a("a"),NJe=o("MobileBertTokenizerFast"),DJe=o(" (MobileBERT model)"),jJe=l(),Cs=a("li"),qJ=a("strong"),qJe=o("mpnet"),GJe=o(" \u2014 "),_k=a("a"),OJe=o("MPNetTokenizer"),XJe=o(" or "),bk=a("a"),VJe=o("MPNetTokenizerFast"),zJe=o(" (MPNet model)"),WJe=l(),Ms=a("li"),GJ=a("strong"),QJe=o("mt5"),HJe=o(" \u2014 "),vk=a("a"),UJe=o("MT5Tokenizer"),JJe=o(" or "),Tk=a("a"),YJe=o("MT5TokenizerFast"),KJe=o(" (mT5 model)"),ZJe=l(),Es=a("li"),OJ=a("strong"),eYe=o("openai-gpt"),oYe=o(" \u2014 "),Fk=a("a"),rYe=o("OpenAIGPTTokenizer"),tYe=o(" or "),Ck=a("a"),aYe=o("OpenAIGPTTokenizerFast"),nYe=o(" (OpenAI GPT model)"),sYe=l(),ys=a("li"),XJ=a("strong"),lYe=o("pegasus"),iYe=o(" \u2014 "),Mk=a("a"),dYe=o("PegasusTokenizer"),cYe=o(" or "),Ek=a("a"),mYe=o("PegasusTokenizerFast"),fYe=o(" (Pegasus model)"),gYe=l(),Yg=a("li"),VJ=a("strong"),hYe=o("perceiver"),uYe=o(" \u2014 "),yk=a("a"),pYe=o("PerceiverTokenizer"),_Ye=o(" (Perceiver model)"),bYe=l(),Kg=a("li"),zJ=a("strong"),vYe=o("phobert"),TYe=o(" \u2014 "),wk=a("a"),FYe=o("PhobertTokenizer"),CYe=o(" (PhoBERT model)"),MYe=l(),Zg=a("li"),WJ=a("strong"),EYe=o("plbart"),yYe=o(" \u2014 "),Ak=a("a"),wYe=o("PLBartTokenizer"),AYe=o(" (PLBart model)"),LYe=l(),eh=a("li"),QJ=a("strong"),BYe=o("prophetnet"),xYe=o(" \u2014 "),Lk=a("a"),kYe=o("ProphetNetTokenizer"),RYe=o(" (ProphetNet model)"),SYe=l(),ws=a("li"),HJ=a("strong"),PYe=o("qdqbert"),$Ye=o(" \u2014 "),Bk=a("a"),IYe=o("BertTokenizer"),NYe=o(" or "),xk=a("a"),DYe=o("BertTokenizerFast"),jYe=o(" (QDQBert model)"),qYe=l(),oh=a("li"),UJ=a("strong"),GYe=o("rag"),OYe=o(" \u2014 "),kk=a("a"),XYe=o("RagTokenizer"),VYe=o(" (RAG model)"),zYe=l(),As=a("li"),JJ=a("strong"),WYe=o("realm"),QYe=o(" \u2014 "),Rk=a("a"),HYe=o("RealmTokenizer"),UYe=o(" or "),Sk=a("a"),JYe=o("RealmTokenizerFast"),YYe=o(" (Realm model)"),KYe=l(),Ls=a("li"),YJ=a("strong"),ZYe=o("reformer"),eKe=o(" \u2014 "),Pk=a("a"),oKe=o("ReformerTokenizer"),rKe=o(" or "),$k=a("a"),tKe=o("ReformerTokenizerFast"),aKe=o(" (Reformer model)"),nKe=l(),Bs=a("li"),KJ=a("strong"),sKe=o("rembert"),lKe=o(" \u2014 "),Ik=a("a"),iKe=o("RemBertTokenizer"),dKe=o(" or "),Nk=a("a"),cKe=o("RemBertTokenizerFast"),mKe=o(" (RemBERT model)"),fKe=l(),xs=a("li"),ZJ=a("strong"),gKe=o("retribert"),hKe=o(" \u2014 "),Dk=a("a"),uKe=o("RetriBertTokenizer"),pKe=o(" or "),jk=a("a"),_Ke=o("RetriBertTokenizerFast"),bKe=o(" (RetriBERT model)"),vKe=l(),ks=a("li"),eY=a("strong"),TKe=o("roberta"),FKe=o(" \u2014 "),qk=a("a"),CKe=o("RobertaTokenizer"),MKe=o(" or "),Gk=a("a"),EKe=o("RobertaTokenizerFast"),yKe=o(" (RoBERTa model)"),wKe=l(),Rs=a("li"),oY=a("strong"),AKe=o("roformer"),LKe=o(" \u2014 "),Ok=a("a"),BKe=o("RoFormerTokenizer"),xKe=o(" or "),Xk=a("a"),kKe=o("RoFormerTokenizerFast"),RKe=o(" (RoFormer model)"),SKe=l(),rh=a("li"),rY=a("strong"),PKe=o("speech_to_text"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("Speech2TextTokenizer"),NKe=o(" (Speech2Text model)"),DKe=l(),th=a("li"),tY=a("strong"),jKe=o("speech_to_text_2"),qKe=o(" \u2014 "),zk=a("a"),GKe=o("Speech2Text2Tokenizer"),OKe=o(" (Speech2Text2 model)"),XKe=l(),Ss=a("li"),aY=a("strong"),VKe=o("splinter"),zKe=o(" \u2014 "),Wk=a("a"),WKe=o("SplinterTokenizer"),QKe=o(" or "),Qk=a("a"),HKe=o("SplinterTokenizerFast"),UKe=o(" (Splinter model)"),JKe=l(),Ps=a("li"),nY=a("strong"),YKe=o("squeezebert"),KKe=o(" \u2014 "),Hk=a("a"),ZKe=o("SqueezeBertTokenizer"),eZe=o(" or "),Uk=a("a"),oZe=o("SqueezeBertTokenizerFast"),rZe=o(" (SqueezeBERT model)"),tZe=l(),$s=a("li"),sY=a("strong"),aZe=o("t5"),nZe=o(" \u2014 "),Jk=a("a"),sZe=o("T5Tokenizer"),lZe=o(" or "),Yk=a("a"),iZe=o("T5TokenizerFast"),dZe=o(" (T5 model)"),cZe=l(),ah=a("li"),lY=a("strong"),mZe=o("tapas"),fZe=o(" \u2014 "),Kk=a("a"),gZe=o("TapasTokenizer"),hZe=o(" (TAPAS model)"),uZe=l(),nh=a("li"),iY=a("strong"),pZe=o("transfo-xl"),_Ze=o(" \u2014 "),Zk=a("a"),bZe=o("TransfoXLTokenizer"),vZe=o(" (Transformer-XL model)"),TZe=l(),sh=a("li"),dY=a("strong"),FZe=o("wav2vec2"),CZe=o(" \u2014 "),eR=a("a"),MZe=o("Wav2Vec2CTCTokenizer"),EZe=o(" (Wav2Vec2 model)"),yZe=l(),lh=a("li"),cY=a("strong"),wZe=o("wav2vec2_phoneme"),AZe=o(" \u2014 "),oR=a("a"),LZe=o("Wav2Vec2PhonemeCTCTokenizer"),BZe=o(" (Wav2Vec2Phoneme model)"),xZe=l(),Is=a("li"),mY=a("strong"),kZe=o("xglm"),RZe=o(" \u2014 "),rR=a("a"),SZe=o("XGLMTokenizer"),PZe=o(" or "),tR=a("a"),$Ze=o("XGLMTokenizerFast"),IZe=o(" (XGLM model)"),NZe=l(),ih=a("li"),fY=a("strong"),DZe=o("xlm"),jZe=o(" \u2014 "),aR=a("a"),qZe=o("XLMTokenizer"),GZe=o(" (XLM model)"),OZe=l(),dh=a("li"),gY=a("strong"),XZe=o("xlm-prophetnet"),VZe=o(" \u2014 "),nR=a("a"),zZe=o("XLMProphetNetTokenizer"),WZe=o(" (XLMProphetNet model)"),QZe=l(),Ns=a("li"),hY=a("strong"),HZe=o("xlm-roberta"),UZe=o(" \u2014 "),sR=a("a"),JZe=o("XLMRobertaTokenizer"),YZe=o(" or "),lR=a("a"),KZe=o("XLMRobertaTokenizerFast"),ZZe=o(" (XLM-RoBERTa model)"),eeo=l(),Ds=a("li"),uY=a("strong"),oeo=o("xlnet"),reo=o(" \u2014 "),iR=a("a"),teo=o("XLNetTokenizer"),aeo=o(" or "),dR=a("a"),neo=o("XLNetTokenizerFast"),seo=o(" (XLNet model)"),leo=l(),pY=a("p"),ieo=o("Examples:"),deo=l(),m(My.$$.fragment),ceo=l(),ch=a("div"),m(Ey.$$.fragment),meo=l(),_Y=a("p"),feo=o("Register a new tokenizer in this mapping."),dke=l(),Qi=a("h2"),mh=a("a"),bY=a("span"),m(yy.$$.fragment),geo=l(),vY=a("span"),heo=o("AutoFeatureExtractor"),cke=l(),Ho=a("div"),m(wy.$$.fragment),ueo=l(),Ay=a("p"),peo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cR=a("a"),_eo=o("AutoFeatureExtractor.from_pretrained()"),beo=o(" class method."),veo=l(),Ly=a("p"),Teo=o("This class cannot be instantiated directly using "),TY=a("code"),Feo=o("__init__()"),Ceo=o(" (throws an error)."),Meo=l(),$e=a("div"),m(By.$$.fragment),Eeo=l(),FY=a("p"),yeo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),weo=l(),Xa=a("p"),Aeo=o("The feature extractor class to instantiate is selected based on the "),CY=a("code"),Leo=o("model_type"),Beo=o(` property of the config object
(either passed as an argument or loaded from `),MY=a("code"),xeo=o("pretrained_model_name_or_path"),keo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),EY=a("code"),Reo=o("pretrained_model_name_or_path"),Seo=o(":"),Peo=l(),re=a("ul"),fh=a("li"),yY=a("strong"),$eo=o("beit"),Ieo=o(" \u2014 "),mR=a("a"),Neo=o("BeitFeatureExtractor"),Deo=o(" (BEiT model)"),jeo=l(),gh=a("li"),wY=a("strong"),qeo=o("clip"),Geo=o(" \u2014 "),fR=a("a"),Oeo=o("CLIPFeatureExtractor"),Xeo=o(" (CLIP model)"),Veo=l(),hh=a("li"),AY=a("strong"),zeo=o("convnext"),Weo=o(" \u2014 "),gR=a("a"),Qeo=o("ConvNextFeatureExtractor"),Heo=o(" (ConvNext model)"),Ueo=l(),uh=a("li"),LY=a("strong"),Jeo=o("deit"),Yeo=o(" \u2014 "),hR=a("a"),Keo=o("DeiTFeatureExtractor"),Zeo=o(" (DeiT model)"),eoo=l(),ph=a("li"),BY=a("strong"),ooo=o("detr"),roo=o(" \u2014 "),uR=a("a"),too=o("DetrFeatureExtractor"),aoo=o(" (DETR model)"),noo=l(),_h=a("li"),xY=a("strong"),soo=o("hubert"),loo=o(" \u2014 "),pR=a("a"),ioo=o("Wav2Vec2FeatureExtractor"),doo=o(" (Hubert model)"),coo=l(),bh=a("li"),kY=a("strong"),moo=o("layoutlmv2"),foo=o(" \u2014 "),_R=a("a"),goo=o("LayoutLMv2FeatureExtractor"),hoo=o(" (LayoutLMv2 model)"),uoo=l(),vh=a("li"),RY=a("strong"),poo=o("maskformer"),_oo=o(" \u2014 "),bR=a("a"),boo=o("MaskFormerFeatureExtractor"),voo=o(" (MaskFormer model)"),Too=l(),Th=a("li"),SY=a("strong"),Foo=o("perceiver"),Coo=o(" \u2014 "),vR=a("a"),Moo=o("PerceiverFeatureExtractor"),Eoo=o(" (Perceiver model)"),yoo=l(),Fh=a("li"),PY=a("strong"),woo=o("poolformer"),Aoo=o(" \u2014 "),TR=a("a"),Loo=o("PoolFormerFeatureExtractor"),Boo=o(" (PoolFormer model)"),xoo=l(),Ch=a("li"),$Y=a("strong"),koo=o("resnet"),Roo=o(" \u2014 "),FR=a("a"),Soo=o("ConvNextFeatureExtractor"),Poo=o(" (ResNet model)"),$oo=l(),Mh=a("li"),IY=a("strong"),Ioo=o("segformer"),Noo=o(" \u2014 "),CR=a("a"),Doo=o("SegformerFeatureExtractor"),joo=o(" (SegFormer model)"),qoo=l(),Eh=a("li"),NY=a("strong"),Goo=o("speech_to_text"),Ooo=o(" \u2014 "),MR=a("a"),Xoo=o("Speech2TextFeatureExtractor"),Voo=o(" (Speech2Text model)"),zoo=l(),yh=a("li"),DY=a("strong"),Woo=o("swin"),Qoo=o(" \u2014 "),ER=a("a"),Hoo=o("ViTFeatureExtractor"),Uoo=o(" (Swin model)"),Joo=l(),wh=a("li"),jY=a("strong"),Yoo=o("van"),Koo=o(" \u2014 "),yR=a("a"),Zoo=o("ConvNextFeatureExtractor"),ero=o(" (VAN model)"),oro=l(),Ah=a("li"),qY=a("strong"),rro=o("vit"),tro=o(" \u2014 "),wR=a("a"),aro=o("ViTFeatureExtractor"),nro=o(" (ViT model)"),sro=l(),Lh=a("li"),GY=a("strong"),lro=o("vit_mae"),iro=o(" \u2014 "),AR=a("a"),dro=o("ViTFeatureExtractor"),cro=o(" (ViTMAE model)"),mro=l(),Bh=a("li"),OY=a("strong"),fro=o("wav2vec2"),gro=o(" \u2014 "),LR=a("a"),hro=o("Wav2Vec2FeatureExtractor"),uro=o(" (Wav2Vec2 model)"),pro=l(),m(xh.$$.fragment),_ro=l(),XY=a("p"),bro=o("Examples:"),vro=l(),m(xy.$$.fragment),Tro=l(),kh=a("div"),m(ky.$$.fragment),Fro=l(),VY=a("p"),Cro=o("Register a new feature extractor for this class."),mke=l(),Hi=a("h2"),Rh=a("a"),zY=a("span"),m(Ry.$$.fragment),Mro=l(),WY=a("span"),Ero=o("AutoProcessor"),fke=l(),Uo=a("div"),m(Sy.$$.fragment),yro=l(),Py=a("p"),wro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BR=a("a"),Aro=o("AutoProcessor.from_pretrained()"),Lro=o(" class method."),Bro=l(),$y=a("p"),xro=o("This class cannot be instantiated directly using "),QY=a("code"),kro=o("__init__()"),Rro=o(" (throws an error)."),Sro=l(),Ie=a("div"),m(Iy.$$.fragment),Pro=l(),HY=a("p"),$ro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Iro=l(),Ui=a("p"),Nro=o("The processor class to instantiate is selected based on the "),UY=a("code"),Dro=o("model_type"),jro=o(` property of the config object (either
passed as an argument or loaded from `),JY=a("code"),qro=o("pretrained_model_name_or_path"),Gro=o(" if possible):"),Oro=l(),xe=a("ul"),Sh=a("li"),YY=a("strong"),Xro=o("clip"),Vro=o(" \u2014 "),xR=a("a"),zro=o("CLIPProcessor"),Wro=o(" (CLIP model)"),Qro=l(),Ph=a("li"),KY=a("strong"),Hro=o("layoutlmv2"),Uro=o(" \u2014 "),kR=a("a"),Jro=o("LayoutLMv2Processor"),Yro=o(" (LayoutLMv2 model)"),Kro=l(),$h=a("li"),ZY=a("strong"),Zro=o("layoutxlm"),eto=o(" \u2014 "),RR=a("a"),oto=o("LayoutXLMProcessor"),rto=o(" (LayoutXLM model)"),tto=l(),Ih=a("li"),eK=a("strong"),ato=o("speech_to_text"),nto=o(" \u2014 "),SR=a("a"),sto=o("Speech2TextProcessor"),lto=o(" (Speech2Text model)"),ito=l(),Nh=a("li"),oK=a("strong"),dto=o("speech_to_text_2"),cto=o(" \u2014 "),PR=a("a"),mto=o("Speech2Text2Processor"),fto=o(" (Speech2Text2 model)"),gto=l(),Dh=a("li"),rK=a("strong"),hto=o("trocr"),uto=o(" \u2014 "),$R=a("a"),pto=o("TrOCRProcessor"),_to=o(" (TrOCR model)"),bto=l(),jh=a("li"),tK=a("strong"),vto=o("vision-text-dual-encoder"),Tto=o(" \u2014 "),IR=a("a"),Fto=o("VisionTextDualEncoderProcessor"),Cto=o(" (VisionTextDualEncoder model)"),Mto=l(),qh=a("li"),aK=a("strong"),Eto=o("wav2vec2"),yto=o(" \u2014 "),NR=a("a"),wto=o("Wav2Vec2Processor"),Ato=o(" (Wav2Vec2 model)"),Lto=l(),m(Gh.$$.fragment),Bto=l(),nK=a("p"),xto=o("Examples:"),kto=l(),m(Ny.$$.fragment),Rto=l(),Oh=a("div"),m(Dy.$$.fragment),Sto=l(),sK=a("p"),Pto=o("Register a new processor for this class."),gke=l(),Ji=a("h2"),Xh=a("a"),lK=a("span"),m(jy.$$.fragment),$to=l(),iK=a("span"),Ito=o("AutoModel"),hke=l(),Jo=a("div"),m(qy.$$.fragment),Nto=l(),Yi=a("p"),Dto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dK=a("code"),jto=o("from_pretrained()"),qto=o("class method or the "),cK=a("code"),Gto=o("from_config()"),Oto=o(`class
method.`),Xto=l(),Gy=a("p"),Vto=o("This class cannot be instantiated directly using "),mK=a("code"),zto=o("__init__()"),Wto=o(" (throws an error)."),Qto=l(),Vr=a("div"),m(Oy.$$.fragment),Hto=l(),fK=a("p"),Uto=o("Instantiates one of the base model classes of the library from a configuration."),Jto=l(),Ki=a("p"),Yto=o(`Note:
Loading a model from its configuration file does `),gK=a("strong"),Kto=o("not"),Zto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("code"),eao=o("from_pretrained()"),oao=o("to load the model weights."),rao=l(),uK=a("p"),tao=o("Examples:"),aao=l(),m(Xy.$$.fragment),nao=l(),Ne=a("div"),m(Vy.$$.fragment),sao=l(),pK=a("p"),lao=o("Instantiate one of the base model classes of the library from a pretrained model."),iao=l(),Va=a("p"),dao=o("The model class to instantiate is selected based on the "),_K=a("code"),cao=o("model_type"),mao=o(` property of the config object (either
passed as an argument or loaded from `),bK=a("code"),fao=o("pretrained_model_name_or_path"),gao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vK=a("code"),hao=o("pretrained_model_name_or_path"),uao=o(":"),pao=l(),F=a("ul"),Vh=a("li"),TK=a("strong"),_ao=o("albert"),bao=o(" \u2014 "),DR=a("a"),vao=o("AlbertModel"),Tao=o(" (ALBERT model)"),Fao=l(),zh=a("li"),FK=a("strong"),Cao=o("bart"),Mao=o(" \u2014 "),jR=a("a"),Eao=o("BartModel"),yao=o(" (BART model)"),wao=l(),Wh=a("li"),CK=a("strong"),Aao=o("beit"),Lao=o(" \u2014 "),qR=a("a"),Bao=o("BeitModel"),xao=o(" (BEiT model)"),kao=l(),Qh=a("li"),MK=a("strong"),Rao=o("bert"),Sao=o(" \u2014 "),GR=a("a"),Pao=o("BertModel"),$ao=o(" (BERT model)"),Iao=l(),Hh=a("li"),EK=a("strong"),Nao=o("bert-generation"),Dao=o(" \u2014 "),OR=a("a"),jao=o("BertGenerationEncoder"),qao=o(" (Bert Generation model)"),Gao=l(),Uh=a("li"),yK=a("strong"),Oao=o("big_bird"),Xao=o(" \u2014 "),XR=a("a"),Vao=o("BigBirdModel"),zao=o(" (BigBird model)"),Wao=l(),Jh=a("li"),wK=a("strong"),Qao=o("bigbird_pegasus"),Hao=o(" \u2014 "),VR=a("a"),Uao=o("BigBirdPegasusModel"),Jao=o(" (BigBirdPegasus model)"),Yao=l(),Yh=a("li"),AK=a("strong"),Kao=o("blenderbot"),Zao=o(" \u2014 "),zR=a("a"),eno=o("BlenderbotModel"),ono=o(" (Blenderbot model)"),rno=l(),Kh=a("li"),LK=a("strong"),tno=o("blenderbot-small"),ano=o(" \u2014 "),WR=a("a"),nno=o("BlenderbotSmallModel"),sno=o(" (BlenderbotSmall model)"),lno=l(),Zh=a("li"),BK=a("strong"),ino=o("camembert"),dno=o(" \u2014 "),QR=a("a"),cno=o("CamembertModel"),mno=o(" (CamemBERT model)"),fno=l(),eu=a("li"),xK=a("strong"),gno=o("canine"),hno=o(" \u2014 "),HR=a("a"),uno=o("CanineModel"),pno=o(" (Canine model)"),_no=l(),ou=a("li"),kK=a("strong"),bno=o("clip"),vno=o(" \u2014 "),UR=a("a"),Tno=o("CLIPModel"),Fno=o(" (CLIP model)"),Cno=l(),ru=a("li"),RK=a("strong"),Mno=o("convbert"),Eno=o(" \u2014 "),JR=a("a"),yno=o("ConvBertModel"),wno=o(" (ConvBERT model)"),Ano=l(),tu=a("li"),SK=a("strong"),Lno=o("convnext"),Bno=o(" \u2014 "),YR=a("a"),xno=o("ConvNextModel"),kno=o(" (ConvNext model)"),Rno=l(),au=a("li"),PK=a("strong"),Sno=o("ctrl"),Pno=o(" \u2014 "),KR=a("a"),$no=o("CTRLModel"),Ino=o(" (CTRL model)"),Nno=l(),nu=a("li"),$K=a("strong"),Dno=o("data2vec-audio"),jno=o(" \u2014 "),ZR=a("a"),qno=o("Data2VecAudioModel"),Gno=o(" (Data2VecAudio model)"),Ono=l(),su=a("li"),IK=a("strong"),Xno=o("data2vec-text"),Vno=o(" \u2014 "),eS=a("a"),zno=o("Data2VecTextModel"),Wno=o(" (Data2VecText model)"),Qno=l(),lu=a("li"),NK=a("strong"),Hno=o("deberta"),Uno=o(" \u2014 "),oS=a("a"),Jno=o("DebertaModel"),Yno=o(" (DeBERTa model)"),Kno=l(),iu=a("li"),DK=a("strong"),Zno=o("deberta-v2"),eso=o(" \u2014 "),rS=a("a"),oso=o("DebertaV2Model"),rso=o(" (DeBERTa-v2 model)"),tso=l(),du=a("li"),jK=a("strong"),aso=o("decision_transformer"),nso=o(" \u2014 "),tS=a("a"),sso=o("DecisionTransformerModel"),lso=o(" (Decision Transformer model)"),iso=l(),cu=a("li"),qK=a("strong"),dso=o("deit"),cso=o(" \u2014 "),aS=a("a"),mso=o("DeiTModel"),fso=o(" (DeiT model)"),gso=l(),mu=a("li"),GK=a("strong"),hso=o("detr"),uso=o(" \u2014 "),nS=a("a"),pso=o("DetrModel"),_so=o(" (DETR model)"),bso=l(),fu=a("li"),OK=a("strong"),vso=o("distilbert"),Tso=o(" \u2014 "),sS=a("a"),Fso=o("DistilBertModel"),Cso=o(" (DistilBERT model)"),Mso=l(),gu=a("li"),XK=a("strong"),Eso=o("dpr"),yso=o(" \u2014 "),lS=a("a"),wso=o("DPRQuestionEncoder"),Aso=o(" (DPR model)"),Lso=l(),hu=a("li"),VK=a("strong"),Bso=o("electra"),xso=o(" \u2014 "),iS=a("a"),kso=o("ElectraModel"),Rso=o(" (ELECTRA model)"),Sso=l(),uu=a("li"),zK=a("strong"),Pso=o("flaubert"),$so=o(" \u2014 "),dS=a("a"),Iso=o("FlaubertModel"),Nso=o(" (FlauBERT model)"),Dso=l(),pu=a("li"),WK=a("strong"),jso=o("fnet"),qso=o(" \u2014 "),cS=a("a"),Gso=o("FNetModel"),Oso=o(" (FNet model)"),Xso=l(),_u=a("li"),QK=a("strong"),Vso=o("fsmt"),zso=o(" \u2014 "),mS=a("a"),Wso=o("FSMTModel"),Qso=o(" (FairSeq Machine-Translation model)"),Hso=l(),js=a("li"),HK=a("strong"),Uso=o("funnel"),Jso=o(" \u2014 "),fS=a("a"),Yso=o("FunnelModel"),Kso=o(" or "),gS=a("a"),Zso=o("FunnelBaseModel"),elo=o(" (Funnel Transformer model)"),olo=l(),bu=a("li"),UK=a("strong"),rlo=o("glpn"),tlo=o(" \u2014 "),hS=a("a"),alo=o("GLPNModel"),nlo=o(" (GLPN model)"),slo=l(),vu=a("li"),JK=a("strong"),llo=o("gpt2"),ilo=o(" \u2014 "),uS=a("a"),dlo=o("GPT2Model"),clo=o(" (OpenAI GPT-2 model)"),mlo=l(),Tu=a("li"),YK=a("strong"),flo=o("gpt_neo"),glo=o(" \u2014 "),pS=a("a"),hlo=o("GPTNeoModel"),ulo=o(" (GPT Neo model)"),plo=l(),Fu=a("li"),KK=a("strong"),_lo=o("gptj"),blo=o(" \u2014 "),_S=a("a"),vlo=o("GPTJModel"),Tlo=o(" (GPT-J model)"),Flo=l(),Cu=a("li"),ZK=a("strong"),Clo=o("hubert"),Mlo=o(" \u2014 "),bS=a("a"),Elo=o("HubertModel"),ylo=o(" (Hubert model)"),wlo=l(),Mu=a("li"),eZ=a("strong"),Alo=o("ibert"),Llo=o(" \u2014 "),vS=a("a"),Blo=o("IBertModel"),xlo=o(" (I-BERT model)"),klo=l(),Eu=a("li"),oZ=a("strong"),Rlo=o("imagegpt"),Slo=o(" \u2014 "),TS=a("a"),Plo=o("ImageGPTModel"),$lo=o(" (ImageGPT model)"),Ilo=l(),yu=a("li"),rZ=a("strong"),Nlo=o("layoutlm"),Dlo=o(" \u2014 "),FS=a("a"),jlo=o("LayoutLMModel"),qlo=o(" (LayoutLM model)"),Glo=l(),wu=a("li"),tZ=a("strong"),Olo=o("layoutlmv2"),Xlo=o(" \u2014 "),CS=a("a"),Vlo=o("LayoutLMv2Model"),zlo=o(" (LayoutLMv2 model)"),Wlo=l(),Au=a("li"),aZ=a("strong"),Qlo=o("led"),Hlo=o(" \u2014 "),MS=a("a"),Ulo=o("LEDModel"),Jlo=o(" (LED model)"),Ylo=l(),Lu=a("li"),nZ=a("strong"),Klo=o("longformer"),Zlo=o(" \u2014 "),ES=a("a"),eio=o("LongformerModel"),oio=o(" (Longformer model)"),rio=l(),Bu=a("li"),sZ=a("strong"),tio=o("luke"),aio=o(" \u2014 "),yS=a("a"),nio=o("LukeModel"),sio=o(" (LUKE model)"),lio=l(),xu=a("li"),lZ=a("strong"),iio=o("lxmert"),dio=o(" \u2014 "),wS=a("a"),cio=o("LxmertModel"),mio=o(" (LXMERT model)"),fio=l(),ku=a("li"),iZ=a("strong"),gio=o("m2m_100"),hio=o(" \u2014 "),AS=a("a"),uio=o("M2M100Model"),pio=o(" (M2M100 model)"),_io=l(),Ru=a("li"),dZ=a("strong"),bio=o("marian"),vio=o(" \u2014 "),LS=a("a"),Tio=o("MarianModel"),Fio=o(" (Marian model)"),Cio=l(),Su=a("li"),cZ=a("strong"),Mio=o("maskformer"),Eio=o(" \u2014 "),BS=a("a"),yio=o("MaskFormerModel"),wio=o(" (MaskFormer model)"),Aio=l(),Pu=a("li"),mZ=a("strong"),Lio=o("mbart"),Bio=o(" \u2014 "),xS=a("a"),xio=o("MBartModel"),kio=o(" (mBART model)"),Rio=l(),$u=a("li"),fZ=a("strong"),Sio=o("megatron-bert"),Pio=o(" \u2014 "),kS=a("a"),$io=o("MegatronBertModel"),Iio=o(" (MegatronBert model)"),Nio=l(),Iu=a("li"),gZ=a("strong"),Dio=o("mobilebert"),jio=o(" \u2014 "),RS=a("a"),qio=o("MobileBertModel"),Gio=o(" (MobileBERT model)"),Oio=l(),Nu=a("li"),hZ=a("strong"),Xio=o("mpnet"),Vio=o(" \u2014 "),SS=a("a"),zio=o("MPNetModel"),Wio=o(" (MPNet model)"),Qio=l(),Du=a("li"),uZ=a("strong"),Hio=o("mt5"),Uio=o(" \u2014 "),PS=a("a"),Jio=o("MT5Model"),Yio=o(" (mT5 model)"),Kio=l(),ju=a("li"),pZ=a("strong"),Zio=o("nystromformer"),edo=o(" \u2014 "),$S=a("a"),odo=o("NystromformerModel"),rdo=o(" (Nystromformer model)"),tdo=l(),qu=a("li"),_Z=a("strong"),ado=o("openai-gpt"),ndo=o(" \u2014 "),IS=a("a"),sdo=o("OpenAIGPTModel"),ldo=o(" (OpenAI GPT model)"),ido=l(),Gu=a("li"),bZ=a("strong"),ddo=o("pegasus"),cdo=o(" \u2014 "),NS=a("a"),mdo=o("PegasusModel"),fdo=o(" (Pegasus model)"),gdo=l(),Ou=a("li"),vZ=a("strong"),hdo=o("perceiver"),udo=o(" \u2014 "),DS=a("a"),pdo=o("PerceiverModel"),_do=o(" (Perceiver model)"),bdo=l(),Xu=a("li"),TZ=a("strong"),vdo=o("plbart"),Tdo=o(" \u2014 "),jS=a("a"),Fdo=o("PLBartModel"),Cdo=o(" (PLBart model)"),Mdo=l(),Vu=a("li"),FZ=a("strong"),Edo=o("poolformer"),ydo=o(" \u2014 "),qS=a("a"),wdo=o("PoolFormerModel"),Ado=o(" (PoolFormer model)"),Ldo=l(),zu=a("li"),CZ=a("strong"),Bdo=o("prophetnet"),xdo=o(" \u2014 "),GS=a("a"),kdo=o("ProphetNetModel"),Rdo=o(" (ProphetNet model)"),Sdo=l(),Wu=a("li"),MZ=a("strong"),Pdo=o("qdqbert"),$do=o(" \u2014 "),OS=a("a"),Ido=o("QDQBertModel"),Ndo=o(" (QDQBert model)"),Ddo=l(),Qu=a("li"),EZ=a("strong"),jdo=o("reformer"),qdo=o(" \u2014 "),XS=a("a"),Gdo=o("ReformerModel"),Odo=o(" (Reformer model)"),Xdo=l(),Hu=a("li"),yZ=a("strong"),Vdo=o("rembert"),zdo=o(" \u2014 "),VS=a("a"),Wdo=o("RemBertModel"),Qdo=o(" (RemBERT model)"),Hdo=l(),Uu=a("li"),wZ=a("strong"),Udo=o("resnet"),Jdo=o(" \u2014 "),zS=a("a"),Ydo=o("ResNetModel"),Kdo=o(" (ResNet model)"),Zdo=l(),Ju=a("li"),AZ=a("strong"),eco=o("retribert"),oco=o(" \u2014 "),WS=a("a"),rco=o("RetriBertModel"),tco=o(" (RetriBERT model)"),aco=l(),Yu=a("li"),LZ=a("strong"),nco=o("roberta"),sco=o(" \u2014 "),QS=a("a"),lco=o("RobertaModel"),ico=o(" (RoBERTa model)"),dco=l(),Ku=a("li"),BZ=a("strong"),cco=o("roformer"),mco=o(" \u2014 "),HS=a("a"),fco=o("RoFormerModel"),gco=o(" (RoFormer model)"),hco=l(),Zu=a("li"),xZ=a("strong"),uco=o("segformer"),pco=o(" \u2014 "),US=a("a"),_co=o("SegformerModel"),bco=o(" (SegFormer model)"),vco=l(),ep=a("li"),kZ=a("strong"),Tco=o("sew"),Fco=o(" \u2014 "),JS=a("a"),Cco=o("SEWModel"),Mco=o(" (SEW model)"),Eco=l(),op=a("li"),RZ=a("strong"),yco=o("sew-d"),wco=o(" \u2014 "),YS=a("a"),Aco=o("SEWDModel"),Lco=o(" (SEW-D model)"),Bco=l(),rp=a("li"),SZ=a("strong"),xco=o("speech_to_text"),kco=o(" \u2014 "),KS=a("a"),Rco=o("Speech2TextModel"),Sco=o(" (Speech2Text model)"),Pco=l(),tp=a("li"),PZ=a("strong"),$co=o("splinter"),Ico=o(" \u2014 "),ZS=a("a"),Nco=o("SplinterModel"),Dco=o(" (Splinter model)"),jco=l(),ap=a("li"),$Z=a("strong"),qco=o("squeezebert"),Gco=o(" \u2014 "),eP=a("a"),Oco=o("SqueezeBertModel"),Xco=o(" (SqueezeBERT model)"),Vco=l(),np=a("li"),IZ=a("strong"),zco=o("swin"),Wco=o(" \u2014 "),oP=a("a"),Qco=o("SwinModel"),Hco=o(" (Swin model)"),Uco=l(),sp=a("li"),NZ=a("strong"),Jco=o("t5"),Yco=o(" \u2014 "),rP=a("a"),Kco=o("T5Model"),Zco=o(" (T5 model)"),emo=l(),lp=a("li"),DZ=a("strong"),omo=o("tapas"),rmo=o(" \u2014 "),tP=a("a"),tmo=o("TapasModel"),amo=o(" (TAPAS model)"),nmo=l(),ip=a("li"),jZ=a("strong"),smo=o("transfo-xl"),lmo=o(" \u2014 "),aP=a("a"),imo=o("TransfoXLModel"),dmo=o(" (Transformer-XL model)"),cmo=l(),dp=a("li"),qZ=a("strong"),mmo=o("unispeech"),fmo=o(" \u2014 "),nP=a("a"),gmo=o("UniSpeechModel"),hmo=o(" (UniSpeech model)"),umo=l(),cp=a("li"),GZ=a("strong"),pmo=o("unispeech-sat"),_mo=o(" \u2014 "),sP=a("a"),bmo=o("UniSpeechSatModel"),vmo=o(" (UniSpeechSat model)"),Tmo=l(),mp=a("li"),OZ=a("strong"),Fmo=o("van"),Cmo=o(" \u2014 "),lP=a("a"),Mmo=o("VanModel"),Emo=o(" (VAN model)"),ymo=l(),fp=a("li"),XZ=a("strong"),wmo=o("vilt"),Amo=o(" \u2014 "),iP=a("a"),Lmo=o("ViltModel"),Bmo=o(" (ViLT model)"),xmo=l(),gp=a("li"),VZ=a("strong"),kmo=o("vision-text-dual-encoder"),Rmo=o(" \u2014 "),dP=a("a"),Smo=o("VisionTextDualEncoderModel"),Pmo=o(" (VisionTextDualEncoder model)"),$mo=l(),hp=a("li"),zZ=a("strong"),Imo=o("visual_bert"),Nmo=o(" \u2014 "),cP=a("a"),Dmo=o("VisualBertModel"),jmo=o(" (VisualBert model)"),qmo=l(),up=a("li"),WZ=a("strong"),Gmo=o("vit"),Omo=o(" \u2014 "),mP=a("a"),Xmo=o("ViTModel"),Vmo=o(" (ViT model)"),zmo=l(),pp=a("li"),QZ=a("strong"),Wmo=o("vit_mae"),Qmo=o(" \u2014 "),fP=a("a"),Hmo=o("ViTMAEModel"),Umo=o(" (ViTMAE model)"),Jmo=l(),_p=a("li"),HZ=a("strong"),Ymo=o("wav2vec2"),Kmo=o(" \u2014 "),gP=a("a"),Zmo=o("Wav2Vec2Model"),efo=o(" (Wav2Vec2 model)"),ofo=l(),bp=a("li"),UZ=a("strong"),rfo=o("wavlm"),tfo=o(" \u2014 "),hP=a("a"),afo=o("WavLMModel"),nfo=o(" (WavLM model)"),sfo=l(),vp=a("li"),JZ=a("strong"),lfo=o("xglm"),ifo=o(" \u2014 "),uP=a("a"),dfo=o("XGLMModel"),cfo=o(" (XGLM model)"),mfo=l(),Tp=a("li"),YZ=a("strong"),ffo=o("xlm"),gfo=o(" \u2014 "),pP=a("a"),hfo=o("XLMModel"),ufo=o(" (XLM model)"),pfo=l(),Fp=a("li"),KZ=a("strong"),_fo=o("xlm-prophetnet"),bfo=o(" \u2014 "),_P=a("a"),vfo=o("XLMProphetNetModel"),Tfo=o(" (XLMProphetNet model)"),Ffo=l(),Cp=a("li"),ZZ=a("strong"),Cfo=o("xlm-roberta"),Mfo=o(" \u2014 "),bP=a("a"),Efo=o("XLMRobertaModel"),yfo=o(" (XLM-RoBERTa model)"),wfo=l(),Mp=a("li"),eee=a("strong"),Afo=o("xlm-roberta-xl"),Lfo=o(" \u2014 "),vP=a("a"),Bfo=o("XLMRobertaXLModel"),xfo=o(" (XLM-RoBERTa-XL model)"),kfo=l(),Ep=a("li"),oee=a("strong"),Rfo=o("xlnet"),Sfo=o(" \u2014 "),TP=a("a"),Pfo=o("XLNetModel"),$fo=o(" (XLNet model)"),Ifo=l(),yp=a("li"),ree=a("strong"),Nfo=o("yoso"),Dfo=o(" \u2014 "),FP=a("a"),jfo=o("YosoModel"),qfo=o(" (YOSO model)"),Gfo=l(),wp=a("p"),Ofo=o("The model is set in evaluation mode by default using "),tee=a("code"),Xfo=o("model.eval()"),Vfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=a("code"),zfo=o("model.train()"),Wfo=l(),nee=a("p"),Qfo=o("Examples:"),Hfo=l(),m(zy.$$.fragment),uke=l(),Zi=a("h2"),Ap=a("a"),see=a("span"),m(Wy.$$.fragment),Ufo=l(),lee=a("span"),Jfo=o("AutoModelForPreTraining"),pke=l(),Yo=a("div"),m(Qy.$$.fragment),Yfo=l(),ed=a("p"),Kfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iee=a("code"),Zfo=o("from_pretrained()"),ego=o("class method or the "),dee=a("code"),ogo=o("from_config()"),rgo=o(`class
method.`),tgo=l(),Hy=a("p"),ago=o("This class cannot be instantiated directly using "),cee=a("code"),ngo=o("__init__()"),sgo=o(" (throws an error)."),lgo=l(),zr=a("div"),m(Uy.$$.fragment),igo=l(),mee=a("p"),dgo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cgo=l(),od=a("p"),mgo=o(`Note:
Loading a model from its configuration file does `),fee=a("strong"),fgo=o("not"),ggo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("code"),hgo=o("from_pretrained()"),ugo=o("to load the model weights."),pgo=l(),hee=a("p"),_go=o("Examples:"),bgo=l(),m(Jy.$$.fragment),vgo=l(),De=a("div"),m(Yy.$$.fragment),Tgo=l(),uee=a("p"),Fgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cgo=l(),za=a("p"),Mgo=o("The model class to instantiate is selected based on the "),pee=a("code"),Ego=o("model_type"),ygo=o(` property of the config object (either
passed as an argument or loaded from `),_ee=a("code"),wgo=o("pretrained_model_name_or_path"),Ago=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=a("code"),Lgo=o("pretrained_model_name_or_path"),Bgo=o(":"),xgo=l(),k=a("ul"),Lp=a("li"),vee=a("strong"),kgo=o("albert"),Rgo=o(" \u2014 "),CP=a("a"),Sgo=o("AlbertForPreTraining"),Pgo=o(" (ALBERT model)"),$go=l(),Bp=a("li"),Tee=a("strong"),Igo=o("bart"),Ngo=o(" \u2014 "),MP=a("a"),Dgo=o("BartForConditionalGeneration"),jgo=o(" (BART model)"),qgo=l(),xp=a("li"),Fee=a("strong"),Ggo=o("bert"),Ogo=o(" \u2014 "),EP=a("a"),Xgo=o("BertForPreTraining"),Vgo=o(" (BERT model)"),zgo=l(),kp=a("li"),Cee=a("strong"),Wgo=o("big_bird"),Qgo=o(" \u2014 "),yP=a("a"),Hgo=o("BigBirdForPreTraining"),Ugo=o(" (BigBird model)"),Jgo=l(),Rp=a("li"),Mee=a("strong"),Ygo=o("camembert"),Kgo=o(" \u2014 "),wP=a("a"),Zgo=o("CamembertForMaskedLM"),eho=o(" (CamemBERT model)"),oho=l(),Sp=a("li"),Eee=a("strong"),rho=o("ctrl"),tho=o(" \u2014 "),AP=a("a"),aho=o("CTRLLMHeadModel"),nho=o(" (CTRL model)"),sho=l(),Pp=a("li"),yee=a("strong"),lho=o("data2vec-text"),iho=o(" \u2014 "),LP=a("a"),dho=o("Data2VecTextForMaskedLM"),cho=o(" (Data2VecText model)"),mho=l(),$p=a("li"),wee=a("strong"),fho=o("deberta"),gho=o(" \u2014 "),BP=a("a"),hho=o("DebertaForMaskedLM"),uho=o(" (DeBERTa model)"),pho=l(),Ip=a("li"),Aee=a("strong"),_ho=o("deberta-v2"),bho=o(" \u2014 "),xP=a("a"),vho=o("DebertaV2ForMaskedLM"),Tho=o(" (DeBERTa-v2 model)"),Fho=l(),Np=a("li"),Lee=a("strong"),Cho=o("distilbert"),Mho=o(" \u2014 "),kP=a("a"),Eho=o("DistilBertForMaskedLM"),yho=o(" (DistilBERT model)"),who=l(),Dp=a("li"),Bee=a("strong"),Aho=o("electra"),Lho=o(" \u2014 "),RP=a("a"),Bho=o("ElectraForPreTraining"),xho=o(" (ELECTRA model)"),kho=l(),jp=a("li"),xee=a("strong"),Rho=o("flaubert"),Sho=o(" \u2014 "),SP=a("a"),Pho=o("FlaubertWithLMHeadModel"),$ho=o(" (FlauBERT model)"),Iho=l(),qp=a("li"),kee=a("strong"),Nho=o("fnet"),Dho=o(" \u2014 "),PP=a("a"),jho=o("FNetForPreTraining"),qho=o(" (FNet model)"),Gho=l(),Gp=a("li"),Ree=a("strong"),Oho=o("fsmt"),Xho=o(" \u2014 "),$P=a("a"),Vho=o("FSMTForConditionalGeneration"),zho=o(" (FairSeq Machine-Translation model)"),Who=l(),Op=a("li"),See=a("strong"),Qho=o("funnel"),Hho=o(" \u2014 "),IP=a("a"),Uho=o("FunnelForPreTraining"),Jho=o(" (Funnel Transformer model)"),Yho=l(),Xp=a("li"),Pee=a("strong"),Kho=o("gpt2"),Zho=o(" \u2014 "),NP=a("a"),euo=o("GPT2LMHeadModel"),ouo=o(" (OpenAI GPT-2 model)"),ruo=l(),Vp=a("li"),$ee=a("strong"),tuo=o("ibert"),auo=o(" \u2014 "),DP=a("a"),nuo=o("IBertForMaskedLM"),suo=o(" (I-BERT model)"),luo=l(),zp=a("li"),Iee=a("strong"),iuo=o("layoutlm"),duo=o(" \u2014 "),jP=a("a"),cuo=o("LayoutLMForMaskedLM"),muo=o(" (LayoutLM model)"),fuo=l(),Wp=a("li"),Nee=a("strong"),guo=o("longformer"),huo=o(" \u2014 "),qP=a("a"),uuo=o("LongformerForMaskedLM"),puo=o(" (Longformer model)"),_uo=l(),Qp=a("li"),Dee=a("strong"),buo=o("lxmert"),vuo=o(" \u2014 "),GP=a("a"),Tuo=o("LxmertForPreTraining"),Fuo=o(" (LXMERT model)"),Cuo=l(),Hp=a("li"),jee=a("strong"),Muo=o("megatron-bert"),Euo=o(" \u2014 "),OP=a("a"),yuo=o("MegatronBertForPreTraining"),wuo=o(" (MegatronBert model)"),Auo=l(),Up=a("li"),qee=a("strong"),Luo=o("mobilebert"),Buo=o(" \u2014 "),XP=a("a"),xuo=o("MobileBertForPreTraining"),kuo=o(" (MobileBERT model)"),Ruo=l(),Jp=a("li"),Gee=a("strong"),Suo=o("mpnet"),Puo=o(" \u2014 "),VP=a("a"),$uo=o("MPNetForMaskedLM"),Iuo=o(" (MPNet model)"),Nuo=l(),Yp=a("li"),Oee=a("strong"),Duo=o("openai-gpt"),juo=o(" \u2014 "),zP=a("a"),quo=o("OpenAIGPTLMHeadModel"),Guo=o(" (OpenAI GPT model)"),Ouo=l(),Kp=a("li"),Xee=a("strong"),Xuo=o("retribert"),Vuo=o(" \u2014 "),WP=a("a"),zuo=o("RetriBertModel"),Wuo=o(" (RetriBERT model)"),Quo=l(),Zp=a("li"),Vee=a("strong"),Huo=o("roberta"),Uuo=o(" \u2014 "),QP=a("a"),Juo=o("RobertaForMaskedLM"),Yuo=o(" (RoBERTa model)"),Kuo=l(),e_=a("li"),zee=a("strong"),Zuo=o("squeezebert"),epo=o(" \u2014 "),HP=a("a"),opo=o("SqueezeBertForMaskedLM"),rpo=o(" (SqueezeBERT model)"),tpo=l(),o_=a("li"),Wee=a("strong"),apo=o("t5"),npo=o(" \u2014 "),UP=a("a"),spo=o("T5ForConditionalGeneration"),lpo=o(" (T5 model)"),ipo=l(),r_=a("li"),Qee=a("strong"),dpo=o("tapas"),cpo=o(" \u2014 "),JP=a("a"),mpo=o("TapasForMaskedLM"),fpo=o(" (TAPAS model)"),gpo=l(),t_=a("li"),Hee=a("strong"),hpo=o("transfo-xl"),upo=o(" \u2014 "),YP=a("a"),ppo=o("TransfoXLLMHeadModel"),_po=o(" (Transformer-XL model)"),bpo=l(),a_=a("li"),Uee=a("strong"),vpo=o("unispeech"),Tpo=o(" \u2014 "),KP=a("a"),Fpo=o("UniSpeechForPreTraining"),Cpo=o(" (UniSpeech model)"),Mpo=l(),n_=a("li"),Jee=a("strong"),Epo=o("unispeech-sat"),ypo=o(" \u2014 "),ZP=a("a"),wpo=o("UniSpeechSatForPreTraining"),Apo=o(" (UniSpeechSat model)"),Lpo=l(),s_=a("li"),Yee=a("strong"),Bpo=o("visual_bert"),xpo=o(" \u2014 "),e$=a("a"),kpo=o("VisualBertForPreTraining"),Rpo=o(" (VisualBert model)"),Spo=l(),l_=a("li"),Kee=a("strong"),Ppo=o("vit_mae"),$po=o(" \u2014 "),o$=a("a"),Ipo=o("ViTMAEForPreTraining"),Npo=o(" (ViTMAE model)"),Dpo=l(),i_=a("li"),Zee=a("strong"),jpo=o("wav2vec2"),qpo=o(" \u2014 "),r$=a("a"),Gpo=o("Wav2Vec2ForPreTraining"),Opo=o(" (Wav2Vec2 model)"),Xpo=l(),d_=a("li"),eoe=a("strong"),Vpo=o("xlm"),zpo=o(" \u2014 "),t$=a("a"),Wpo=o("XLMWithLMHeadModel"),Qpo=o(" (XLM model)"),Hpo=l(),c_=a("li"),ooe=a("strong"),Upo=o("xlm-roberta"),Jpo=o(" \u2014 "),a$=a("a"),Ypo=o("XLMRobertaForMaskedLM"),Kpo=o(" (XLM-RoBERTa model)"),Zpo=l(),m_=a("li"),roe=a("strong"),e_o=o("xlm-roberta-xl"),o_o=o(" \u2014 "),n$=a("a"),r_o=o("XLMRobertaXLForMaskedLM"),t_o=o(" (XLM-RoBERTa-XL model)"),a_o=l(),f_=a("li"),toe=a("strong"),n_o=o("xlnet"),s_o=o(" \u2014 "),s$=a("a"),l_o=o("XLNetLMHeadModel"),i_o=o(" (XLNet model)"),d_o=l(),g_=a("p"),c_o=o("The model is set in evaluation mode by default using "),aoe=a("code"),m_o=o("model.eval()"),f_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),noe=a("code"),g_o=o("model.train()"),h_o=l(),soe=a("p"),u_o=o("Examples:"),p_o=l(),m(Ky.$$.fragment),_ke=l(),rd=a("h2"),h_=a("a"),loe=a("span"),m(Zy.$$.fragment),__o=l(),ioe=a("span"),b_o=o("AutoModelForCausalLM"),bke=l(),Ko=a("div"),m(ew.$$.fragment),v_o=l(),td=a("p"),T_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),doe=a("code"),F_o=o("from_pretrained()"),C_o=o("class method or the "),coe=a("code"),M_o=o("from_config()"),E_o=o(`class
method.`),y_o=l(),ow=a("p"),w_o=o("This class cannot be instantiated directly using "),moe=a("code"),A_o=o("__init__()"),L_o=o(" (throws an error)."),B_o=l(),Wr=a("div"),m(rw.$$.fragment),x_o=l(),foe=a("p"),k_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R_o=l(),ad=a("p"),S_o=o(`Note:
Loading a model from its configuration file does `),goe=a("strong"),P_o=o("not"),$_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=a("code"),I_o=o("from_pretrained()"),N_o=o("to load the model weights."),D_o=l(),uoe=a("p"),j_o=o("Examples:"),q_o=l(),m(tw.$$.fragment),G_o=l(),je=a("div"),m(aw.$$.fragment),O_o=l(),poe=a("p"),X_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V_o=l(),Wa=a("p"),z_o=o("The model class to instantiate is selected based on the "),_oe=a("code"),W_o=o("model_type"),Q_o=o(` property of the config object (either
passed as an argument or loaded from `),boe=a("code"),H_o=o("pretrained_model_name_or_path"),U_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=a("code"),J_o=o("pretrained_model_name_or_path"),Y_o=o(":"),K_o=l(),$=a("ul"),u_=a("li"),Toe=a("strong"),Z_o=o("bart"),ebo=o(" \u2014 "),l$=a("a"),obo=o("BartForCausalLM"),rbo=o(" (BART model)"),tbo=l(),p_=a("li"),Foe=a("strong"),abo=o("bert"),nbo=o(" \u2014 "),i$=a("a"),sbo=o("BertLMHeadModel"),lbo=o(" (BERT model)"),ibo=l(),__=a("li"),Coe=a("strong"),dbo=o("bert-generation"),cbo=o(" \u2014 "),d$=a("a"),mbo=o("BertGenerationDecoder"),fbo=o(" (Bert Generation model)"),gbo=l(),b_=a("li"),Moe=a("strong"),hbo=o("big_bird"),ubo=o(" \u2014 "),c$=a("a"),pbo=o("BigBirdForCausalLM"),_bo=o(" (BigBird model)"),bbo=l(),v_=a("li"),Eoe=a("strong"),vbo=o("bigbird_pegasus"),Tbo=o(" \u2014 "),m$=a("a"),Fbo=o("BigBirdPegasusForCausalLM"),Cbo=o(" (BigBirdPegasus model)"),Mbo=l(),T_=a("li"),yoe=a("strong"),Ebo=o("blenderbot"),ybo=o(" \u2014 "),f$=a("a"),wbo=o("BlenderbotForCausalLM"),Abo=o(" (Blenderbot model)"),Lbo=l(),F_=a("li"),woe=a("strong"),Bbo=o("blenderbot-small"),xbo=o(" \u2014 "),g$=a("a"),kbo=o("BlenderbotSmallForCausalLM"),Rbo=o(" (BlenderbotSmall model)"),Sbo=l(),C_=a("li"),Aoe=a("strong"),Pbo=o("camembert"),$bo=o(" \u2014 "),h$=a("a"),Ibo=o("CamembertForCausalLM"),Nbo=o(" (CamemBERT model)"),Dbo=l(),M_=a("li"),Loe=a("strong"),jbo=o("ctrl"),qbo=o(" \u2014 "),u$=a("a"),Gbo=o("CTRLLMHeadModel"),Obo=o(" (CTRL model)"),Xbo=l(),E_=a("li"),Boe=a("strong"),Vbo=o("data2vec-text"),zbo=o(" \u2014 "),p$=a("a"),Wbo=o("Data2VecTextForCausalLM"),Qbo=o(" (Data2VecText model)"),Hbo=l(),y_=a("li"),xoe=a("strong"),Ubo=o("electra"),Jbo=o(" \u2014 "),_$=a("a"),Ybo=o("ElectraForCausalLM"),Kbo=o(" (ELECTRA model)"),Zbo=l(),w_=a("li"),koe=a("strong"),e2o=o("gpt2"),o2o=o(" \u2014 "),b$=a("a"),r2o=o("GPT2LMHeadModel"),t2o=o(" (OpenAI GPT-2 model)"),a2o=l(),A_=a("li"),Roe=a("strong"),n2o=o("gpt_neo"),s2o=o(" \u2014 "),v$=a("a"),l2o=o("GPTNeoForCausalLM"),i2o=o(" (GPT Neo model)"),d2o=l(),L_=a("li"),Soe=a("strong"),c2o=o("gptj"),m2o=o(" \u2014 "),T$=a("a"),f2o=o("GPTJForCausalLM"),g2o=o(" (GPT-J model)"),h2o=l(),B_=a("li"),Poe=a("strong"),u2o=o("marian"),p2o=o(" \u2014 "),F$=a("a"),_2o=o("MarianForCausalLM"),b2o=o(" (Marian model)"),v2o=l(),x_=a("li"),$oe=a("strong"),T2o=o("mbart"),F2o=o(" \u2014 "),C$=a("a"),C2o=o("MBartForCausalLM"),M2o=o(" (mBART model)"),E2o=l(),k_=a("li"),Ioe=a("strong"),y2o=o("megatron-bert"),w2o=o(" \u2014 "),M$=a("a"),A2o=o("MegatronBertForCausalLM"),L2o=o(" (MegatronBert model)"),B2o=l(),R_=a("li"),Noe=a("strong"),x2o=o("openai-gpt"),k2o=o(" \u2014 "),E$=a("a"),R2o=o("OpenAIGPTLMHeadModel"),S2o=o(" (OpenAI GPT model)"),P2o=l(),S_=a("li"),Doe=a("strong"),$2o=o("pegasus"),I2o=o(" \u2014 "),y$=a("a"),N2o=o("PegasusForCausalLM"),D2o=o(" (Pegasus model)"),j2o=l(),P_=a("li"),joe=a("strong"),q2o=o("plbart"),G2o=o(" \u2014 "),w$=a("a"),O2o=o("PLBartForCausalLM"),X2o=o(" (PLBart model)"),V2o=l(),$_=a("li"),qoe=a("strong"),z2o=o("prophetnet"),W2o=o(" \u2014 "),A$=a("a"),Q2o=o("ProphetNetForCausalLM"),H2o=o(" (ProphetNet model)"),U2o=l(),I_=a("li"),Goe=a("strong"),J2o=o("qdqbert"),Y2o=o(" \u2014 "),L$=a("a"),K2o=o("QDQBertLMHeadModel"),Z2o=o(" (QDQBert model)"),evo=l(),N_=a("li"),Ooe=a("strong"),ovo=o("reformer"),rvo=o(" \u2014 "),B$=a("a"),tvo=o("ReformerModelWithLMHead"),avo=o(" (Reformer model)"),nvo=l(),D_=a("li"),Xoe=a("strong"),svo=o("rembert"),lvo=o(" \u2014 "),x$=a("a"),ivo=o("RemBertForCausalLM"),dvo=o(" (RemBERT model)"),cvo=l(),j_=a("li"),Voe=a("strong"),mvo=o("roberta"),fvo=o(" \u2014 "),k$=a("a"),gvo=o("RobertaForCausalLM"),hvo=o(" (RoBERTa model)"),uvo=l(),q_=a("li"),zoe=a("strong"),pvo=o("roformer"),_vo=o(" \u2014 "),R$=a("a"),bvo=o("RoFormerForCausalLM"),vvo=o(" (RoFormer model)"),Tvo=l(),G_=a("li"),Woe=a("strong"),Fvo=o("speech_to_text_2"),Cvo=o(" \u2014 "),S$=a("a"),Mvo=o("Speech2Text2ForCausalLM"),Evo=o(" (Speech2Text2 model)"),yvo=l(),O_=a("li"),Qoe=a("strong"),wvo=o("transfo-xl"),Avo=o(" \u2014 "),P$=a("a"),Lvo=o("TransfoXLLMHeadModel"),Bvo=o(" (Transformer-XL model)"),xvo=l(),X_=a("li"),Hoe=a("strong"),kvo=o("trocr"),Rvo=o(" \u2014 "),$$=a("a"),Svo=o("TrOCRForCausalLM"),Pvo=o(" (TrOCR model)"),$vo=l(),V_=a("li"),Uoe=a("strong"),Ivo=o("xglm"),Nvo=o(" \u2014 "),I$=a("a"),Dvo=o("XGLMForCausalLM"),jvo=o(" (XGLM model)"),qvo=l(),z_=a("li"),Joe=a("strong"),Gvo=o("xlm"),Ovo=o(" \u2014 "),N$=a("a"),Xvo=o("XLMWithLMHeadModel"),Vvo=o(" (XLM model)"),zvo=l(),W_=a("li"),Yoe=a("strong"),Wvo=o("xlm-prophetnet"),Qvo=o(" \u2014 "),D$=a("a"),Hvo=o("XLMProphetNetForCausalLM"),Uvo=o(" (XLMProphetNet model)"),Jvo=l(),Q_=a("li"),Koe=a("strong"),Yvo=o("xlm-roberta"),Kvo=o(" \u2014 "),j$=a("a"),Zvo=o("XLMRobertaForCausalLM"),eTo=o(" (XLM-RoBERTa model)"),oTo=l(),H_=a("li"),Zoe=a("strong"),rTo=o("xlm-roberta-xl"),tTo=o(" \u2014 "),q$=a("a"),aTo=o("XLMRobertaXLForCausalLM"),nTo=o(" (XLM-RoBERTa-XL model)"),sTo=l(),U_=a("li"),ere=a("strong"),lTo=o("xlnet"),iTo=o(" \u2014 "),G$=a("a"),dTo=o("XLNetLMHeadModel"),cTo=o(" (XLNet model)"),mTo=l(),J_=a("p"),fTo=o("The model is set in evaluation mode by default using "),ore=a("code"),gTo=o("model.eval()"),hTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),uTo=o("model.train()"),pTo=l(),tre=a("p"),_To=o("Examples:"),bTo=l(),m(nw.$$.fragment),vke=l(),nd=a("h2"),Y_=a("a"),are=a("span"),m(sw.$$.fragment),vTo=l(),nre=a("span"),TTo=o("AutoModelForMaskedLM"),Tke=l(),Zo=a("div"),m(lw.$$.fragment),FTo=l(),sd=a("p"),CTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sre=a("code"),MTo=o("from_pretrained()"),ETo=o("class method or the "),lre=a("code"),yTo=o("from_config()"),wTo=o(`class
method.`),ATo=l(),iw=a("p"),LTo=o("This class cannot be instantiated directly using "),ire=a("code"),BTo=o("__init__()"),xTo=o(" (throws an error)."),kTo=l(),Qr=a("div"),m(dw.$$.fragment),RTo=l(),dre=a("p"),STo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PTo=l(),ld=a("p"),$To=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),ITo=o("not"),NTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("code"),DTo=o("from_pretrained()"),jTo=o("to load the model weights."),qTo=l(),fre=a("p"),GTo=o("Examples:"),OTo=l(),m(cw.$$.fragment),XTo=l(),qe=a("div"),m(mw.$$.fragment),VTo=l(),gre=a("p"),zTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WTo=l(),Qa=a("p"),QTo=o("The model class to instantiate is selected based on the "),hre=a("code"),HTo=o("model_type"),UTo=o(` property of the config object (either
passed as an argument or loaded from `),ure=a("code"),JTo=o("pretrained_model_name_or_path"),YTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=a("code"),KTo=o("pretrained_model_name_or_path"),ZTo=o(":"),e1o=l(),I=a("ul"),K_=a("li"),_re=a("strong"),o1o=o("albert"),r1o=o(" \u2014 "),O$=a("a"),t1o=o("AlbertForMaskedLM"),a1o=o(" (ALBERT model)"),n1o=l(),Z_=a("li"),bre=a("strong"),s1o=o("bart"),l1o=o(" \u2014 "),X$=a("a"),i1o=o("BartForConditionalGeneration"),d1o=o(" (BART model)"),c1o=l(),eb=a("li"),vre=a("strong"),m1o=o("bert"),f1o=o(" \u2014 "),V$=a("a"),g1o=o("BertForMaskedLM"),h1o=o(" (BERT model)"),u1o=l(),ob=a("li"),Tre=a("strong"),p1o=o("big_bird"),_1o=o(" \u2014 "),z$=a("a"),b1o=o("BigBirdForMaskedLM"),v1o=o(" (BigBird model)"),T1o=l(),rb=a("li"),Fre=a("strong"),F1o=o("camembert"),C1o=o(" \u2014 "),W$=a("a"),M1o=o("CamembertForMaskedLM"),E1o=o(" (CamemBERT model)"),y1o=l(),tb=a("li"),Cre=a("strong"),w1o=o("convbert"),A1o=o(" \u2014 "),Q$=a("a"),L1o=o("ConvBertForMaskedLM"),B1o=o(" (ConvBERT model)"),x1o=l(),ab=a("li"),Mre=a("strong"),k1o=o("data2vec-text"),R1o=o(" \u2014 "),H$=a("a"),S1o=o("Data2VecTextForMaskedLM"),P1o=o(" (Data2VecText model)"),$1o=l(),nb=a("li"),Ere=a("strong"),I1o=o("deberta"),N1o=o(" \u2014 "),U$=a("a"),D1o=o("DebertaForMaskedLM"),j1o=o(" (DeBERTa model)"),q1o=l(),sb=a("li"),yre=a("strong"),G1o=o("deberta-v2"),O1o=o(" \u2014 "),J$=a("a"),X1o=o("DebertaV2ForMaskedLM"),V1o=o(" (DeBERTa-v2 model)"),z1o=l(),lb=a("li"),wre=a("strong"),W1o=o("distilbert"),Q1o=o(" \u2014 "),Y$=a("a"),H1o=o("DistilBertForMaskedLM"),U1o=o(" (DistilBERT model)"),J1o=l(),ib=a("li"),Are=a("strong"),Y1o=o("electra"),K1o=o(" \u2014 "),K$=a("a"),Z1o=o("ElectraForMaskedLM"),eFo=o(" (ELECTRA model)"),oFo=l(),db=a("li"),Lre=a("strong"),rFo=o("flaubert"),tFo=o(" \u2014 "),Z$=a("a"),aFo=o("FlaubertWithLMHeadModel"),nFo=o(" (FlauBERT model)"),sFo=l(),cb=a("li"),Bre=a("strong"),lFo=o("fnet"),iFo=o(" \u2014 "),eI=a("a"),dFo=o("FNetForMaskedLM"),cFo=o(" (FNet model)"),mFo=l(),mb=a("li"),xre=a("strong"),fFo=o("funnel"),gFo=o(" \u2014 "),oI=a("a"),hFo=o("FunnelForMaskedLM"),uFo=o(" (Funnel Transformer model)"),pFo=l(),fb=a("li"),kre=a("strong"),_Fo=o("ibert"),bFo=o(" \u2014 "),rI=a("a"),vFo=o("IBertForMaskedLM"),TFo=o(" (I-BERT model)"),FFo=l(),gb=a("li"),Rre=a("strong"),CFo=o("layoutlm"),MFo=o(" \u2014 "),tI=a("a"),EFo=o("LayoutLMForMaskedLM"),yFo=o(" (LayoutLM model)"),wFo=l(),hb=a("li"),Sre=a("strong"),AFo=o("longformer"),LFo=o(" \u2014 "),aI=a("a"),BFo=o("LongformerForMaskedLM"),xFo=o(" (Longformer model)"),kFo=l(),ub=a("li"),Pre=a("strong"),RFo=o("mbart"),SFo=o(" \u2014 "),nI=a("a"),PFo=o("MBartForConditionalGeneration"),$Fo=o(" (mBART model)"),IFo=l(),pb=a("li"),$re=a("strong"),NFo=o("megatron-bert"),DFo=o(" \u2014 "),sI=a("a"),jFo=o("MegatronBertForMaskedLM"),qFo=o(" (MegatronBert model)"),GFo=l(),_b=a("li"),Ire=a("strong"),OFo=o("mobilebert"),XFo=o(" \u2014 "),lI=a("a"),VFo=o("MobileBertForMaskedLM"),zFo=o(" (MobileBERT model)"),WFo=l(),bb=a("li"),Nre=a("strong"),QFo=o("mpnet"),HFo=o(" \u2014 "),iI=a("a"),UFo=o("MPNetForMaskedLM"),JFo=o(" (MPNet model)"),YFo=l(),vb=a("li"),Dre=a("strong"),KFo=o("nystromformer"),ZFo=o(" \u2014 "),dI=a("a"),eCo=o("NystromformerForMaskedLM"),oCo=o(" (Nystromformer model)"),rCo=l(),Tb=a("li"),jre=a("strong"),tCo=o("perceiver"),aCo=o(" \u2014 "),cI=a("a"),nCo=o("PerceiverForMaskedLM"),sCo=o(" (Perceiver model)"),lCo=l(),Fb=a("li"),qre=a("strong"),iCo=o("qdqbert"),dCo=o(" \u2014 "),mI=a("a"),cCo=o("QDQBertForMaskedLM"),mCo=o(" (QDQBert model)"),fCo=l(),Cb=a("li"),Gre=a("strong"),gCo=o("reformer"),hCo=o(" \u2014 "),fI=a("a"),uCo=o("ReformerForMaskedLM"),pCo=o(" (Reformer model)"),_Co=l(),Mb=a("li"),Ore=a("strong"),bCo=o("rembert"),vCo=o(" \u2014 "),gI=a("a"),TCo=o("RemBertForMaskedLM"),FCo=o(" (RemBERT model)"),CCo=l(),Eb=a("li"),Xre=a("strong"),MCo=o("roberta"),ECo=o(" \u2014 "),hI=a("a"),yCo=o("RobertaForMaskedLM"),wCo=o(" (RoBERTa model)"),ACo=l(),yb=a("li"),Vre=a("strong"),LCo=o("roformer"),BCo=o(" \u2014 "),uI=a("a"),xCo=o("RoFormerForMaskedLM"),kCo=o(" (RoFormer model)"),RCo=l(),wb=a("li"),zre=a("strong"),SCo=o("squeezebert"),PCo=o(" \u2014 "),pI=a("a"),$Co=o("SqueezeBertForMaskedLM"),ICo=o(" (SqueezeBERT model)"),NCo=l(),Ab=a("li"),Wre=a("strong"),DCo=o("tapas"),jCo=o(" \u2014 "),_I=a("a"),qCo=o("TapasForMaskedLM"),GCo=o(" (TAPAS model)"),OCo=l(),Lb=a("li"),Qre=a("strong"),XCo=o("wav2vec2"),VCo=o(" \u2014 "),Hre=a("code"),zCo=o("Wav2Vec2ForMaskedLM"),WCo=o("(Wav2Vec2 model)"),QCo=l(),Bb=a("li"),Ure=a("strong"),HCo=o("xlm"),UCo=o(" \u2014 "),bI=a("a"),JCo=o("XLMWithLMHeadModel"),YCo=o(" (XLM model)"),KCo=l(),xb=a("li"),Jre=a("strong"),ZCo=o("xlm-roberta"),eMo=o(" \u2014 "),vI=a("a"),oMo=o("XLMRobertaForMaskedLM"),rMo=o(" (XLM-RoBERTa model)"),tMo=l(),kb=a("li"),Yre=a("strong"),aMo=o("xlm-roberta-xl"),nMo=o(" \u2014 "),TI=a("a"),sMo=o("XLMRobertaXLForMaskedLM"),lMo=o(" (XLM-RoBERTa-XL model)"),iMo=l(),Rb=a("li"),Kre=a("strong"),dMo=o("yoso"),cMo=o(" \u2014 "),FI=a("a"),mMo=o("YosoForMaskedLM"),fMo=o(" (YOSO model)"),gMo=l(),Sb=a("p"),hMo=o("The model is set in evaluation mode by default using "),Zre=a("code"),uMo=o("model.eval()"),pMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=a("code"),_Mo=o("model.train()"),bMo=l(),ote=a("p"),vMo=o("Examples:"),TMo=l(),m(fw.$$.fragment),Fke=l(),id=a("h2"),Pb=a("a"),rte=a("span"),m(gw.$$.fragment),FMo=l(),tte=a("span"),CMo=o("AutoModelForSeq2SeqLM"),Cke=l(),er=a("div"),m(hw.$$.fragment),MMo=l(),dd=a("p"),EMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ate=a("code"),yMo=o("from_pretrained()"),wMo=o("class method or the "),nte=a("code"),AMo=o("from_config()"),LMo=o(`class
method.`),BMo=l(),uw=a("p"),xMo=o("This class cannot be instantiated directly using "),ste=a("code"),kMo=o("__init__()"),RMo=o(" (throws an error)."),SMo=l(),Hr=a("div"),m(pw.$$.fragment),PMo=l(),lte=a("p"),$Mo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IMo=l(),cd=a("p"),NMo=o(`Note:
Loading a model from its configuration file does `),ite=a("strong"),DMo=o("not"),jMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=a("code"),qMo=o("from_pretrained()"),GMo=o("to load the model weights."),OMo=l(),cte=a("p"),XMo=o("Examples:"),VMo=l(),m(_w.$$.fragment),zMo=l(),Ge=a("div"),m(bw.$$.fragment),WMo=l(),mte=a("p"),QMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HMo=l(),Ha=a("p"),UMo=o("The model class to instantiate is selected based on the "),fte=a("code"),JMo=o("model_type"),YMo=o(` property of the config object (either
passed as an argument or loaded from `),gte=a("code"),KMo=o("pretrained_model_name_or_path"),ZMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=a("code"),e4o=o("pretrained_model_name_or_path"),o4o=o(":"),r4o=l(),se=a("ul"),$b=a("li"),ute=a("strong"),t4o=o("bart"),a4o=o(" \u2014 "),CI=a("a"),n4o=o("BartForConditionalGeneration"),s4o=o(" (BART model)"),l4o=l(),Ib=a("li"),pte=a("strong"),i4o=o("bigbird_pegasus"),d4o=o(" \u2014 "),MI=a("a"),c4o=o("BigBirdPegasusForConditionalGeneration"),m4o=o(" (BigBirdPegasus model)"),f4o=l(),Nb=a("li"),_te=a("strong"),g4o=o("blenderbot"),h4o=o(" \u2014 "),EI=a("a"),u4o=o("BlenderbotForConditionalGeneration"),p4o=o(" (Blenderbot model)"),_4o=l(),Db=a("li"),bte=a("strong"),b4o=o("blenderbot-small"),v4o=o(" \u2014 "),yI=a("a"),T4o=o("BlenderbotSmallForConditionalGeneration"),F4o=o(" (BlenderbotSmall model)"),C4o=l(),jb=a("li"),vte=a("strong"),M4o=o("encoder-decoder"),E4o=o(" \u2014 "),wI=a("a"),y4o=o("EncoderDecoderModel"),w4o=o(" (Encoder decoder model)"),A4o=l(),qb=a("li"),Tte=a("strong"),L4o=o("fsmt"),B4o=o(" \u2014 "),AI=a("a"),x4o=o("FSMTForConditionalGeneration"),k4o=o(" (FairSeq Machine-Translation model)"),R4o=l(),Gb=a("li"),Fte=a("strong"),S4o=o("led"),P4o=o(" \u2014 "),LI=a("a"),$4o=o("LEDForConditionalGeneration"),I4o=o(" (LED model)"),N4o=l(),Ob=a("li"),Cte=a("strong"),D4o=o("m2m_100"),j4o=o(" \u2014 "),BI=a("a"),q4o=o("M2M100ForConditionalGeneration"),G4o=o(" (M2M100 model)"),O4o=l(),Xb=a("li"),Mte=a("strong"),X4o=o("marian"),V4o=o(" \u2014 "),xI=a("a"),z4o=o("MarianMTModel"),W4o=o(" (Marian model)"),Q4o=l(),Vb=a("li"),Ete=a("strong"),H4o=o("mbart"),U4o=o(" \u2014 "),kI=a("a"),J4o=o("MBartForConditionalGeneration"),Y4o=o(" (mBART model)"),K4o=l(),zb=a("li"),yte=a("strong"),Z4o=o("mt5"),eEo=o(" \u2014 "),RI=a("a"),oEo=o("MT5ForConditionalGeneration"),rEo=o(" (mT5 model)"),tEo=l(),Wb=a("li"),wte=a("strong"),aEo=o("pegasus"),nEo=o(" \u2014 "),SI=a("a"),sEo=o("PegasusForConditionalGeneration"),lEo=o(" (Pegasus model)"),iEo=l(),Qb=a("li"),Ate=a("strong"),dEo=o("plbart"),cEo=o(" \u2014 "),PI=a("a"),mEo=o("PLBartForConditionalGeneration"),fEo=o(" (PLBart model)"),gEo=l(),Hb=a("li"),Lte=a("strong"),hEo=o("prophetnet"),uEo=o(" \u2014 "),$I=a("a"),pEo=o("ProphetNetForConditionalGeneration"),_Eo=o(" (ProphetNet model)"),bEo=l(),Ub=a("li"),Bte=a("strong"),vEo=o("t5"),TEo=o(" \u2014 "),II=a("a"),FEo=o("T5ForConditionalGeneration"),CEo=o(" (T5 model)"),MEo=l(),Jb=a("li"),xte=a("strong"),EEo=o("xlm-prophetnet"),yEo=o(" \u2014 "),NI=a("a"),wEo=o("XLMProphetNetForConditionalGeneration"),AEo=o(" (XLMProphetNet model)"),LEo=l(),Yb=a("p"),BEo=o("The model is set in evaluation mode by default using "),kte=a("code"),xEo=o("model.eval()"),kEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=a("code"),REo=o("model.train()"),SEo=l(),Ste=a("p"),PEo=o("Examples:"),$Eo=l(),m(vw.$$.fragment),Mke=l(),md=a("h2"),Kb=a("a"),Pte=a("span"),m(Tw.$$.fragment),IEo=l(),$te=a("span"),NEo=o("AutoModelForSequenceClassification"),Eke=l(),or=a("div"),m(Fw.$$.fragment),DEo=l(),fd=a("p"),jEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=a("code"),qEo=o("from_pretrained()"),GEo=o("class method or the "),Nte=a("code"),OEo=o("from_config()"),XEo=o(`class
method.`),VEo=l(),Cw=a("p"),zEo=o("This class cannot be instantiated directly using "),Dte=a("code"),WEo=o("__init__()"),QEo=o(" (throws an error)."),HEo=l(),Ur=a("div"),m(Mw.$$.fragment),UEo=l(),jte=a("p"),JEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YEo=l(),gd=a("p"),KEo=o(`Note:
Loading a model from its configuration file does `),qte=a("strong"),ZEo=o("not"),e3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=a("code"),o3o=o("from_pretrained()"),r3o=o("to load the model weights."),t3o=l(),Ote=a("p"),a3o=o("Examples:"),n3o=l(),m(Ew.$$.fragment),s3o=l(),Oe=a("div"),m(yw.$$.fragment),l3o=l(),Xte=a("p"),i3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d3o=l(),Ua=a("p"),c3o=o("The model class to instantiate is selected based on the "),Vte=a("code"),m3o=o("model_type"),f3o=o(` property of the config object (either
passed as an argument or loaded from `),zte=a("code"),g3o=o("pretrained_model_name_or_path"),h3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=a("code"),u3o=o("pretrained_model_name_or_path"),p3o=o(":"),_3o=l(),A=a("ul"),Zb=a("li"),Qte=a("strong"),b3o=o("albert"),v3o=o(" \u2014 "),DI=a("a"),T3o=o("AlbertForSequenceClassification"),F3o=o(" (ALBERT model)"),C3o=l(),e2=a("li"),Hte=a("strong"),M3o=o("bart"),E3o=o(" \u2014 "),jI=a("a"),y3o=o("BartForSequenceClassification"),w3o=o(" (BART model)"),A3o=l(),o2=a("li"),Ute=a("strong"),L3o=o("bert"),B3o=o(" \u2014 "),qI=a("a"),x3o=o("BertForSequenceClassification"),k3o=o(" (BERT model)"),R3o=l(),r2=a("li"),Jte=a("strong"),S3o=o("big_bird"),P3o=o(" \u2014 "),GI=a("a"),$3o=o("BigBirdForSequenceClassification"),I3o=o(" (BigBird model)"),N3o=l(),t2=a("li"),Yte=a("strong"),D3o=o("bigbird_pegasus"),j3o=o(" \u2014 "),OI=a("a"),q3o=o("BigBirdPegasusForSequenceClassification"),G3o=o(" (BigBirdPegasus model)"),O3o=l(),a2=a("li"),Kte=a("strong"),X3o=o("camembert"),V3o=o(" \u2014 "),XI=a("a"),z3o=o("CamembertForSequenceClassification"),W3o=o(" (CamemBERT model)"),Q3o=l(),n2=a("li"),Zte=a("strong"),H3o=o("canine"),U3o=o(" \u2014 "),VI=a("a"),J3o=o("CanineForSequenceClassification"),Y3o=o(" (Canine model)"),K3o=l(),s2=a("li"),eae=a("strong"),Z3o=o("convbert"),e5o=o(" \u2014 "),zI=a("a"),o5o=o("ConvBertForSequenceClassification"),r5o=o(" (ConvBERT model)"),t5o=l(),l2=a("li"),oae=a("strong"),a5o=o("ctrl"),n5o=o(" \u2014 "),WI=a("a"),s5o=o("CTRLForSequenceClassification"),l5o=o(" (CTRL model)"),i5o=l(),i2=a("li"),rae=a("strong"),d5o=o("data2vec-text"),c5o=o(" \u2014 "),QI=a("a"),m5o=o("Data2VecTextForSequenceClassification"),f5o=o(" (Data2VecText model)"),g5o=l(),d2=a("li"),tae=a("strong"),h5o=o("deberta"),u5o=o(" \u2014 "),HI=a("a"),p5o=o("DebertaForSequenceClassification"),_5o=o(" (DeBERTa model)"),b5o=l(),c2=a("li"),aae=a("strong"),v5o=o("deberta-v2"),T5o=o(" \u2014 "),UI=a("a"),F5o=o("DebertaV2ForSequenceClassification"),C5o=o(" (DeBERTa-v2 model)"),M5o=l(),m2=a("li"),nae=a("strong"),E5o=o("distilbert"),y5o=o(" \u2014 "),JI=a("a"),w5o=o("DistilBertForSequenceClassification"),A5o=o(" (DistilBERT model)"),L5o=l(),f2=a("li"),sae=a("strong"),B5o=o("electra"),x5o=o(" \u2014 "),YI=a("a"),k5o=o("ElectraForSequenceClassification"),R5o=o(" (ELECTRA model)"),S5o=l(),g2=a("li"),lae=a("strong"),P5o=o("flaubert"),$5o=o(" \u2014 "),KI=a("a"),I5o=o("FlaubertForSequenceClassification"),N5o=o(" (FlauBERT model)"),D5o=l(),h2=a("li"),iae=a("strong"),j5o=o("fnet"),q5o=o(" \u2014 "),ZI=a("a"),G5o=o("FNetForSequenceClassification"),O5o=o(" (FNet model)"),X5o=l(),u2=a("li"),dae=a("strong"),V5o=o("funnel"),z5o=o(" \u2014 "),eN=a("a"),W5o=o("FunnelForSequenceClassification"),Q5o=o(" (Funnel Transformer model)"),H5o=l(),p2=a("li"),cae=a("strong"),U5o=o("gpt2"),J5o=o(" \u2014 "),oN=a("a"),Y5o=o("GPT2ForSequenceClassification"),K5o=o(" (OpenAI GPT-2 model)"),Z5o=l(),_2=a("li"),mae=a("strong"),eyo=o("gpt_neo"),oyo=o(" \u2014 "),rN=a("a"),ryo=o("GPTNeoForSequenceClassification"),tyo=o(" (GPT Neo model)"),ayo=l(),b2=a("li"),fae=a("strong"),nyo=o("gptj"),syo=o(" \u2014 "),tN=a("a"),lyo=o("GPTJForSequenceClassification"),iyo=o(" (GPT-J model)"),dyo=l(),v2=a("li"),gae=a("strong"),cyo=o("ibert"),myo=o(" \u2014 "),aN=a("a"),fyo=o("IBertForSequenceClassification"),gyo=o(" (I-BERT model)"),hyo=l(),T2=a("li"),hae=a("strong"),uyo=o("layoutlm"),pyo=o(" \u2014 "),nN=a("a"),_yo=o("LayoutLMForSequenceClassification"),byo=o(" (LayoutLM model)"),vyo=l(),F2=a("li"),uae=a("strong"),Tyo=o("layoutlmv2"),Fyo=o(" \u2014 "),sN=a("a"),Cyo=o("LayoutLMv2ForSequenceClassification"),Myo=o(" (LayoutLMv2 model)"),Eyo=l(),C2=a("li"),pae=a("strong"),yyo=o("led"),wyo=o(" \u2014 "),lN=a("a"),Ayo=o("LEDForSequenceClassification"),Lyo=o(" (LED model)"),Byo=l(),M2=a("li"),_ae=a("strong"),xyo=o("longformer"),kyo=o(" \u2014 "),iN=a("a"),Ryo=o("LongformerForSequenceClassification"),Syo=o(" (Longformer model)"),Pyo=l(),E2=a("li"),bae=a("strong"),$yo=o("mbart"),Iyo=o(" \u2014 "),dN=a("a"),Nyo=o("MBartForSequenceClassification"),Dyo=o(" (mBART model)"),jyo=l(),y2=a("li"),vae=a("strong"),qyo=o("megatron-bert"),Gyo=o(" \u2014 "),cN=a("a"),Oyo=o("MegatronBertForSequenceClassification"),Xyo=o(" (MegatronBert model)"),Vyo=l(),w2=a("li"),Tae=a("strong"),zyo=o("mobilebert"),Wyo=o(" \u2014 "),mN=a("a"),Qyo=o("MobileBertForSequenceClassification"),Hyo=o(" (MobileBERT model)"),Uyo=l(),A2=a("li"),Fae=a("strong"),Jyo=o("mpnet"),Yyo=o(" \u2014 "),fN=a("a"),Kyo=o("MPNetForSequenceClassification"),Zyo=o(" (MPNet model)"),ewo=l(),L2=a("li"),Cae=a("strong"),owo=o("nystromformer"),rwo=o(" \u2014 "),gN=a("a"),two=o("NystromformerForSequenceClassification"),awo=o(" (Nystromformer model)"),nwo=l(),B2=a("li"),Mae=a("strong"),swo=o("openai-gpt"),lwo=o(" \u2014 "),hN=a("a"),iwo=o("OpenAIGPTForSequenceClassification"),dwo=o(" (OpenAI GPT model)"),cwo=l(),x2=a("li"),Eae=a("strong"),mwo=o("perceiver"),fwo=o(" \u2014 "),uN=a("a"),gwo=o("PerceiverForSequenceClassification"),hwo=o(" (Perceiver model)"),uwo=l(),k2=a("li"),yae=a("strong"),pwo=o("plbart"),_wo=o(" \u2014 "),pN=a("a"),bwo=o("PLBartForSequenceClassification"),vwo=o(" (PLBart model)"),Two=l(),R2=a("li"),wae=a("strong"),Fwo=o("qdqbert"),Cwo=o(" \u2014 "),_N=a("a"),Mwo=o("QDQBertForSequenceClassification"),Ewo=o(" (QDQBert model)"),ywo=l(),S2=a("li"),Aae=a("strong"),wwo=o("reformer"),Awo=o(" \u2014 "),bN=a("a"),Lwo=o("ReformerForSequenceClassification"),Bwo=o(" (Reformer model)"),xwo=l(),P2=a("li"),Lae=a("strong"),kwo=o("rembert"),Rwo=o(" \u2014 "),vN=a("a"),Swo=o("RemBertForSequenceClassification"),Pwo=o(" (RemBERT model)"),$wo=l(),$2=a("li"),Bae=a("strong"),Iwo=o("roberta"),Nwo=o(" \u2014 "),TN=a("a"),Dwo=o("RobertaForSequenceClassification"),jwo=o(" (RoBERTa model)"),qwo=l(),I2=a("li"),xae=a("strong"),Gwo=o("roformer"),Owo=o(" \u2014 "),FN=a("a"),Xwo=o("RoFormerForSequenceClassification"),Vwo=o(" (RoFormer model)"),zwo=l(),N2=a("li"),kae=a("strong"),Wwo=o("squeezebert"),Qwo=o(" \u2014 "),CN=a("a"),Hwo=o("SqueezeBertForSequenceClassification"),Uwo=o(" (SqueezeBERT model)"),Jwo=l(),D2=a("li"),Rae=a("strong"),Ywo=o("tapas"),Kwo=o(" \u2014 "),MN=a("a"),Zwo=o("TapasForSequenceClassification"),e6o=o(" (TAPAS model)"),o6o=l(),j2=a("li"),Sae=a("strong"),r6o=o("transfo-xl"),t6o=o(" \u2014 "),EN=a("a"),a6o=o("TransfoXLForSequenceClassification"),n6o=o(" (Transformer-XL model)"),s6o=l(),q2=a("li"),Pae=a("strong"),l6o=o("xlm"),i6o=o(" \u2014 "),yN=a("a"),d6o=o("XLMForSequenceClassification"),c6o=o(" (XLM model)"),m6o=l(),G2=a("li"),$ae=a("strong"),f6o=o("xlm-roberta"),g6o=o(" \u2014 "),wN=a("a"),h6o=o("XLMRobertaForSequenceClassification"),u6o=o(" (XLM-RoBERTa model)"),p6o=l(),O2=a("li"),Iae=a("strong"),_6o=o("xlm-roberta-xl"),b6o=o(" \u2014 "),AN=a("a"),v6o=o("XLMRobertaXLForSequenceClassification"),T6o=o(" (XLM-RoBERTa-XL model)"),F6o=l(),X2=a("li"),Nae=a("strong"),C6o=o("xlnet"),M6o=o(" \u2014 "),LN=a("a"),E6o=o("XLNetForSequenceClassification"),y6o=o(" (XLNet model)"),w6o=l(),V2=a("li"),Dae=a("strong"),A6o=o("yoso"),L6o=o(" \u2014 "),BN=a("a"),B6o=o("YosoForSequenceClassification"),x6o=o(" (YOSO model)"),k6o=l(),z2=a("p"),R6o=o("The model is set in evaluation mode by default using "),jae=a("code"),S6o=o("model.eval()"),P6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qae=a("code"),$6o=o("model.train()"),I6o=l(),Gae=a("p"),N6o=o("Examples:"),D6o=l(),m(ww.$$.fragment),yke=l(),hd=a("h2"),W2=a("a"),Oae=a("span"),m(Aw.$$.fragment),j6o=l(),Xae=a("span"),q6o=o("AutoModelForMultipleChoice"),wke=l(),rr=a("div"),m(Lw.$$.fragment),G6o=l(),ud=a("p"),O6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vae=a("code"),X6o=o("from_pretrained()"),V6o=o("class method or the "),zae=a("code"),z6o=o("from_config()"),W6o=o(`class
method.`),Q6o=l(),Bw=a("p"),H6o=o("This class cannot be instantiated directly using "),Wae=a("code"),U6o=o("__init__()"),J6o=o(" (throws an error)."),Y6o=l(),Jr=a("div"),m(xw.$$.fragment),K6o=l(),Qae=a("p"),Z6o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eAo=l(),pd=a("p"),oAo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),rAo=o("not"),tAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=a("code"),aAo=o("from_pretrained()"),nAo=o("to load the model weights."),sAo=l(),Jae=a("p"),lAo=o("Examples:"),iAo=l(),m(kw.$$.fragment),dAo=l(),Xe=a("div"),m(Rw.$$.fragment),cAo=l(),Yae=a("p"),mAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fAo=l(),Ja=a("p"),gAo=o("The model class to instantiate is selected based on the "),Kae=a("code"),hAo=o("model_type"),uAo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),pAo=o("pretrained_model_name_or_path"),_Ao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),bAo=o("pretrained_model_name_or_path"),vAo=o(":"),TAo=l(),G=a("ul"),Q2=a("li"),one=a("strong"),FAo=o("albert"),CAo=o(" \u2014 "),xN=a("a"),MAo=o("AlbertForMultipleChoice"),EAo=o(" (ALBERT model)"),yAo=l(),H2=a("li"),rne=a("strong"),wAo=o("bert"),AAo=o(" \u2014 "),kN=a("a"),LAo=o("BertForMultipleChoice"),BAo=o(" (BERT model)"),xAo=l(),U2=a("li"),tne=a("strong"),kAo=o("big_bird"),RAo=o(" \u2014 "),RN=a("a"),SAo=o("BigBirdForMultipleChoice"),PAo=o(" (BigBird model)"),$Ao=l(),J2=a("li"),ane=a("strong"),IAo=o("camembert"),NAo=o(" \u2014 "),SN=a("a"),DAo=o("CamembertForMultipleChoice"),jAo=o(" (CamemBERT model)"),qAo=l(),Y2=a("li"),nne=a("strong"),GAo=o("canine"),OAo=o(" \u2014 "),PN=a("a"),XAo=o("CanineForMultipleChoice"),VAo=o(" (Canine model)"),zAo=l(),K2=a("li"),sne=a("strong"),WAo=o("convbert"),QAo=o(" \u2014 "),$N=a("a"),HAo=o("ConvBertForMultipleChoice"),UAo=o(" (ConvBERT model)"),JAo=l(),Z2=a("li"),lne=a("strong"),YAo=o("data2vec-text"),KAo=o(" \u2014 "),IN=a("a"),ZAo=o("Data2VecTextForMultipleChoice"),e0o=o(" (Data2VecText model)"),o0o=l(),ev=a("li"),ine=a("strong"),r0o=o("distilbert"),t0o=o(" \u2014 "),NN=a("a"),a0o=o("DistilBertForMultipleChoice"),n0o=o(" (DistilBERT model)"),s0o=l(),ov=a("li"),dne=a("strong"),l0o=o("electra"),i0o=o(" \u2014 "),DN=a("a"),d0o=o("ElectraForMultipleChoice"),c0o=o(" (ELECTRA model)"),m0o=l(),rv=a("li"),cne=a("strong"),f0o=o("flaubert"),g0o=o(" \u2014 "),jN=a("a"),h0o=o("FlaubertForMultipleChoice"),u0o=o(" (FlauBERT model)"),p0o=l(),tv=a("li"),mne=a("strong"),_0o=o("fnet"),b0o=o(" \u2014 "),qN=a("a"),v0o=o("FNetForMultipleChoice"),T0o=o(" (FNet model)"),F0o=l(),av=a("li"),fne=a("strong"),C0o=o("funnel"),M0o=o(" \u2014 "),GN=a("a"),E0o=o("FunnelForMultipleChoice"),y0o=o(" (Funnel Transformer model)"),w0o=l(),nv=a("li"),gne=a("strong"),A0o=o("ibert"),L0o=o(" \u2014 "),ON=a("a"),B0o=o("IBertForMultipleChoice"),x0o=o(" (I-BERT model)"),k0o=l(),sv=a("li"),hne=a("strong"),R0o=o("longformer"),S0o=o(" \u2014 "),XN=a("a"),P0o=o("LongformerForMultipleChoice"),$0o=o(" (Longformer model)"),I0o=l(),lv=a("li"),une=a("strong"),N0o=o("megatron-bert"),D0o=o(" \u2014 "),VN=a("a"),j0o=o("MegatronBertForMultipleChoice"),q0o=o(" (MegatronBert model)"),G0o=l(),iv=a("li"),pne=a("strong"),O0o=o("mobilebert"),X0o=o(" \u2014 "),zN=a("a"),V0o=o("MobileBertForMultipleChoice"),z0o=o(" (MobileBERT model)"),W0o=l(),dv=a("li"),_ne=a("strong"),Q0o=o("mpnet"),H0o=o(" \u2014 "),WN=a("a"),U0o=o("MPNetForMultipleChoice"),J0o=o(" (MPNet model)"),Y0o=l(),cv=a("li"),bne=a("strong"),K0o=o("nystromformer"),Z0o=o(" \u2014 "),QN=a("a"),eLo=o("NystromformerForMultipleChoice"),oLo=o(" (Nystromformer model)"),rLo=l(),mv=a("li"),vne=a("strong"),tLo=o("qdqbert"),aLo=o(" \u2014 "),HN=a("a"),nLo=o("QDQBertForMultipleChoice"),sLo=o(" (QDQBert model)"),lLo=l(),fv=a("li"),Tne=a("strong"),iLo=o("rembert"),dLo=o(" \u2014 "),UN=a("a"),cLo=o("RemBertForMultipleChoice"),mLo=o(" (RemBERT model)"),fLo=l(),gv=a("li"),Fne=a("strong"),gLo=o("roberta"),hLo=o(" \u2014 "),JN=a("a"),uLo=o("RobertaForMultipleChoice"),pLo=o(" (RoBERTa model)"),_Lo=l(),hv=a("li"),Cne=a("strong"),bLo=o("roformer"),vLo=o(" \u2014 "),YN=a("a"),TLo=o("RoFormerForMultipleChoice"),FLo=o(" (RoFormer model)"),CLo=l(),uv=a("li"),Mne=a("strong"),MLo=o("squeezebert"),ELo=o(" \u2014 "),KN=a("a"),yLo=o("SqueezeBertForMultipleChoice"),wLo=o(" (SqueezeBERT model)"),ALo=l(),pv=a("li"),Ene=a("strong"),LLo=o("xlm"),BLo=o(" \u2014 "),ZN=a("a"),xLo=o("XLMForMultipleChoice"),kLo=o(" (XLM model)"),RLo=l(),_v=a("li"),yne=a("strong"),SLo=o("xlm-roberta"),PLo=o(" \u2014 "),eD=a("a"),$Lo=o("XLMRobertaForMultipleChoice"),ILo=o(" (XLM-RoBERTa model)"),NLo=l(),bv=a("li"),wne=a("strong"),DLo=o("xlm-roberta-xl"),jLo=o(" \u2014 "),oD=a("a"),qLo=o("XLMRobertaXLForMultipleChoice"),GLo=o(" (XLM-RoBERTa-XL model)"),OLo=l(),vv=a("li"),Ane=a("strong"),XLo=o("xlnet"),VLo=o(" \u2014 "),rD=a("a"),zLo=o("XLNetForMultipleChoice"),WLo=o(" (XLNet model)"),QLo=l(),Tv=a("li"),Lne=a("strong"),HLo=o("yoso"),ULo=o(" \u2014 "),tD=a("a"),JLo=o("YosoForMultipleChoice"),YLo=o(" (YOSO model)"),KLo=l(),Fv=a("p"),ZLo=o("The model is set in evaluation mode by default using "),Bne=a("code"),e7o=o("model.eval()"),o7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=a("code"),r7o=o("model.train()"),t7o=l(),kne=a("p"),a7o=o("Examples:"),n7o=l(),m(Sw.$$.fragment),Ake=l(),_d=a("h2"),Cv=a("a"),Rne=a("span"),m(Pw.$$.fragment),s7o=l(),Sne=a("span"),l7o=o("AutoModelForNextSentencePrediction"),Lke=l(),tr=a("div"),m($w.$$.fragment),i7o=l(),bd=a("p"),d7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pne=a("code"),c7o=o("from_pretrained()"),m7o=o("class method or the "),$ne=a("code"),f7o=o("from_config()"),g7o=o(`class
method.`),h7o=l(),Iw=a("p"),u7o=o("This class cannot be instantiated directly using "),Ine=a("code"),p7o=o("__init__()"),_7o=o(" (throws an error)."),b7o=l(),Yr=a("div"),m(Nw.$$.fragment),v7o=l(),Nne=a("p"),T7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F7o=l(),vd=a("p"),C7o=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),M7o=o("not"),E7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=a("code"),y7o=o("from_pretrained()"),w7o=o("to load the model weights."),A7o=l(),qne=a("p"),L7o=o("Examples:"),B7o=l(),m(Dw.$$.fragment),x7o=l(),Ve=a("div"),m(jw.$$.fragment),k7o=l(),Gne=a("p"),R7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),S7o=l(),Ya=a("p"),P7o=o("The model class to instantiate is selected based on the "),One=a("code"),$7o=o("model_type"),I7o=o(` property of the config object (either
passed as an argument or loaded from `),Xne=a("code"),N7o=o("pretrained_model_name_or_path"),D7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),j7o=o("pretrained_model_name_or_path"),q7o=o(":"),G7o=l(),da=a("ul"),Mv=a("li"),zne=a("strong"),O7o=o("bert"),X7o=o(" \u2014 "),aD=a("a"),V7o=o("BertForNextSentencePrediction"),z7o=o(" (BERT model)"),W7o=l(),Ev=a("li"),Wne=a("strong"),Q7o=o("fnet"),H7o=o(" \u2014 "),nD=a("a"),U7o=o("FNetForNextSentencePrediction"),J7o=o(" (FNet model)"),Y7o=l(),yv=a("li"),Qne=a("strong"),K7o=o("megatron-bert"),Z7o=o(" \u2014 "),sD=a("a"),e8o=o("MegatronBertForNextSentencePrediction"),o8o=o(" (MegatronBert model)"),r8o=l(),wv=a("li"),Hne=a("strong"),t8o=o("mobilebert"),a8o=o(" \u2014 "),lD=a("a"),n8o=o("MobileBertForNextSentencePrediction"),s8o=o(" (MobileBERT model)"),l8o=l(),Av=a("li"),Une=a("strong"),i8o=o("qdqbert"),d8o=o(" \u2014 "),iD=a("a"),c8o=o("QDQBertForNextSentencePrediction"),m8o=o(" (QDQBert model)"),f8o=l(),Lv=a("p"),g8o=o("The model is set in evaluation mode by default using "),Jne=a("code"),h8o=o("model.eval()"),u8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=a("code"),p8o=o("model.train()"),_8o=l(),Kne=a("p"),b8o=o("Examples:"),v8o=l(),m(qw.$$.fragment),Bke=l(),Td=a("h2"),Bv=a("a"),Zne=a("span"),m(Gw.$$.fragment),T8o=l(),ese=a("span"),F8o=o("AutoModelForTokenClassification"),xke=l(),ar=a("div"),m(Ow.$$.fragment),C8o=l(),Fd=a("p"),M8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ose=a("code"),E8o=o("from_pretrained()"),y8o=o("class method or the "),rse=a("code"),w8o=o("from_config()"),A8o=o(`class
method.`),L8o=l(),Xw=a("p"),B8o=o("This class cannot be instantiated directly using "),tse=a("code"),x8o=o("__init__()"),k8o=o(" (throws an error)."),R8o=l(),Kr=a("div"),m(Vw.$$.fragment),S8o=l(),ase=a("p"),P8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$8o=l(),Cd=a("p"),I8o=o(`Note:
Loading a model from its configuration file does `),nse=a("strong"),N8o=o("not"),D8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=a("code"),j8o=o("from_pretrained()"),q8o=o("to load the model weights."),G8o=l(),lse=a("p"),O8o=o("Examples:"),X8o=l(),m(zw.$$.fragment),V8o=l(),ze=a("div"),m(Ww.$$.fragment),z8o=l(),ise=a("p"),W8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Q8o=l(),Ka=a("p"),H8o=o("The model class to instantiate is selected based on the "),dse=a("code"),U8o=o("model_type"),J8o=o(` property of the config object (either
passed as an argument or loaded from `),cse=a("code"),Y8o=o("pretrained_model_name_or_path"),K8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=a("code"),Z8o=o("pretrained_model_name_or_path"),e9o=o(":"),o9o=l(),j=a("ul"),xv=a("li"),fse=a("strong"),r9o=o("albert"),t9o=o(" \u2014 "),dD=a("a"),a9o=o("AlbertForTokenClassification"),n9o=o(" (ALBERT model)"),s9o=l(),kv=a("li"),gse=a("strong"),l9o=o("bert"),i9o=o(" \u2014 "),cD=a("a"),d9o=o("BertForTokenClassification"),c9o=o(" (BERT model)"),m9o=l(),Rv=a("li"),hse=a("strong"),f9o=o("big_bird"),g9o=o(" \u2014 "),mD=a("a"),h9o=o("BigBirdForTokenClassification"),u9o=o(" (BigBird model)"),p9o=l(),Sv=a("li"),use=a("strong"),_9o=o("camembert"),b9o=o(" \u2014 "),fD=a("a"),v9o=o("CamembertForTokenClassification"),T9o=o(" (CamemBERT model)"),F9o=l(),Pv=a("li"),pse=a("strong"),C9o=o("canine"),M9o=o(" \u2014 "),gD=a("a"),E9o=o("CanineForTokenClassification"),y9o=o(" (Canine model)"),w9o=l(),$v=a("li"),_se=a("strong"),A9o=o("convbert"),L9o=o(" \u2014 "),hD=a("a"),B9o=o("ConvBertForTokenClassification"),x9o=o(" (ConvBERT model)"),k9o=l(),Iv=a("li"),bse=a("strong"),R9o=o("data2vec-text"),S9o=o(" \u2014 "),uD=a("a"),P9o=o("Data2VecTextForTokenClassification"),$9o=o(" (Data2VecText model)"),I9o=l(),Nv=a("li"),vse=a("strong"),N9o=o("deberta"),D9o=o(" \u2014 "),pD=a("a"),j9o=o("DebertaForTokenClassification"),q9o=o(" (DeBERTa model)"),G9o=l(),Dv=a("li"),Tse=a("strong"),O9o=o("deberta-v2"),X9o=o(" \u2014 "),_D=a("a"),V9o=o("DebertaV2ForTokenClassification"),z9o=o(" (DeBERTa-v2 model)"),W9o=l(),jv=a("li"),Fse=a("strong"),Q9o=o("distilbert"),H9o=o(" \u2014 "),bD=a("a"),U9o=o("DistilBertForTokenClassification"),J9o=o(" (DistilBERT model)"),Y9o=l(),qv=a("li"),Cse=a("strong"),K9o=o("electra"),Z9o=o(" \u2014 "),vD=a("a"),eBo=o("ElectraForTokenClassification"),oBo=o(" (ELECTRA model)"),rBo=l(),Gv=a("li"),Mse=a("strong"),tBo=o("flaubert"),aBo=o(" \u2014 "),TD=a("a"),nBo=o("FlaubertForTokenClassification"),sBo=o(" (FlauBERT model)"),lBo=l(),Ov=a("li"),Ese=a("strong"),iBo=o("fnet"),dBo=o(" \u2014 "),FD=a("a"),cBo=o("FNetForTokenClassification"),mBo=o(" (FNet model)"),fBo=l(),Xv=a("li"),yse=a("strong"),gBo=o("funnel"),hBo=o(" \u2014 "),CD=a("a"),uBo=o("FunnelForTokenClassification"),pBo=o(" (Funnel Transformer model)"),_Bo=l(),Vv=a("li"),wse=a("strong"),bBo=o("gpt2"),vBo=o(" \u2014 "),MD=a("a"),TBo=o("GPT2ForTokenClassification"),FBo=o(" (OpenAI GPT-2 model)"),CBo=l(),zv=a("li"),Ase=a("strong"),MBo=o("ibert"),EBo=o(" \u2014 "),ED=a("a"),yBo=o("IBertForTokenClassification"),wBo=o(" (I-BERT model)"),ABo=l(),Wv=a("li"),Lse=a("strong"),LBo=o("layoutlm"),BBo=o(" \u2014 "),yD=a("a"),xBo=o("LayoutLMForTokenClassification"),kBo=o(" (LayoutLM model)"),RBo=l(),Qv=a("li"),Bse=a("strong"),SBo=o("layoutlmv2"),PBo=o(" \u2014 "),wD=a("a"),$Bo=o("LayoutLMv2ForTokenClassification"),IBo=o(" (LayoutLMv2 model)"),NBo=l(),Hv=a("li"),xse=a("strong"),DBo=o("longformer"),jBo=o(" \u2014 "),AD=a("a"),qBo=o("LongformerForTokenClassification"),GBo=o(" (Longformer model)"),OBo=l(),Uv=a("li"),kse=a("strong"),XBo=o("megatron-bert"),VBo=o(" \u2014 "),LD=a("a"),zBo=o("MegatronBertForTokenClassification"),WBo=o(" (MegatronBert model)"),QBo=l(),Jv=a("li"),Rse=a("strong"),HBo=o("mobilebert"),UBo=o(" \u2014 "),BD=a("a"),JBo=o("MobileBertForTokenClassification"),YBo=o(" (MobileBERT model)"),KBo=l(),Yv=a("li"),Sse=a("strong"),ZBo=o("mpnet"),exo=o(" \u2014 "),xD=a("a"),oxo=o("MPNetForTokenClassification"),rxo=o(" (MPNet model)"),txo=l(),Kv=a("li"),Pse=a("strong"),axo=o("nystromformer"),nxo=o(" \u2014 "),kD=a("a"),sxo=o("NystromformerForTokenClassification"),lxo=o(" (Nystromformer model)"),ixo=l(),Zv=a("li"),$se=a("strong"),dxo=o("qdqbert"),cxo=o(" \u2014 "),RD=a("a"),mxo=o("QDQBertForTokenClassification"),fxo=o(" (QDQBert model)"),gxo=l(),eT=a("li"),Ise=a("strong"),hxo=o("rembert"),uxo=o(" \u2014 "),SD=a("a"),pxo=o("RemBertForTokenClassification"),_xo=o(" (RemBERT model)"),bxo=l(),oT=a("li"),Nse=a("strong"),vxo=o("roberta"),Txo=o(" \u2014 "),PD=a("a"),Fxo=o("RobertaForTokenClassification"),Cxo=o(" (RoBERTa model)"),Mxo=l(),rT=a("li"),Dse=a("strong"),Exo=o("roformer"),yxo=o(" \u2014 "),$D=a("a"),wxo=o("RoFormerForTokenClassification"),Axo=o(" (RoFormer model)"),Lxo=l(),tT=a("li"),jse=a("strong"),Bxo=o("squeezebert"),xxo=o(" \u2014 "),ID=a("a"),kxo=o("SqueezeBertForTokenClassification"),Rxo=o(" (SqueezeBERT model)"),Sxo=l(),aT=a("li"),qse=a("strong"),Pxo=o("xlm"),$xo=o(" \u2014 "),ND=a("a"),Ixo=o("XLMForTokenClassification"),Nxo=o(" (XLM model)"),Dxo=l(),nT=a("li"),Gse=a("strong"),jxo=o("xlm-roberta"),qxo=o(" \u2014 "),DD=a("a"),Gxo=o("XLMRobertaForTokenClassification"),Oxo=o(" (XLM-RoBERTa model)"),Xxo=l(),sT=a("li"),Ose=a("strong"),Vxo=o("xlm-roberta-xl"),zxo=o(" \u2014 "),jD=a("a"),Wxo=o("XLMRobertaXLForTokenClassification"),Qxo=o(" (XLM-RoBERTa-XL model)"),Hxo=l(),lT=a("li"),Xse=a("strong"),Uxo=o("xlnet"),Jxo=o(" \u2014 "),qD=a("a"),Yxo=o("XLNetForTokenClassification"),Kxo=o(" (XLNet model)"),Zxo=l(),iT=a("li"),Vse=a("strong"),eko=o("yoso"),oko=o(" \u2014 "),GD=a("a"),rko=o("YosoForTokenClassification"),tko=o(" (YOSO model)"),ako=l(),dT=a("p"),nko=o("The model is set in evaluation mode by default using "),zse=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=a("code"),iko=o("model.train()"),dko=l(),Qse=a("p"),cko=o("Examples:"),mko=l(),m(Qw.$$.fragment),kke=l(),Md=a("h2"),cT=a("a"),Hse=a("span"),m(Hw.$$.fragment),fko=l(),Use=a("span"),gko=o("AutoModelForQuestionAnswering"),Rke=l(),nr=a("div"),m(Uw.$$.fragment),hko=l(),Ed=a("p"),uko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jse=a("code"),pko=o("from_pretrained()"),_ko=o("class method or the "),Yse=a("code"),bko=o("from_config()"),vko=o(`class
method.`),Tko=l(),Jw=a("p"),Fko=o("This class cannot be instantiated directly using "),Kse=a("code"),Cko=o("__init__()"),Mko=o(" (throws an error)."),Eko=l(),Zr=a("div"),m(Yw.$$.fragment),yko=l(),Zse=a("p"),wko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ako=l(),yd=a("p"),Lko=o(`Note:
Loading a model from its configuration file does `),ele=a("strong"),Bko=o("not"),xko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("code"),kko=o("from_pretrained()"),Rko=o("to load the model weights."),Sko=l(),rle=a("p"),Pko=o("Examples:"),$ko=l(),m(Kw.$$.fragment),Iko=l(),We=a("div"),m(Zw.$$.fragment),Nko=l(),tle=a("p"),Dko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jko=l(),Za=a("p"),qko=o("The model class to instantiate is selected based on the "),ale=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),nle=a("code"),Xko=o("pretrained_model_name_or_path"),Vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=a("code"),zko=o("pretrained_model_name_or_path"),Wko=o(":"),Qko=l(),R=a("ul"),mT=a("li"),lle=a("strong"),Hko=o("albert"),Uko=o(" \u2014 "),OD=a("a"),Jko=o("AlbertForQuestionAnswering"),Yko=o(" (ALBERT model)"),Kko=l(),fT=a("li"),ile=a("strong"),Zko=o("bart"),eRo=o(" \u2014 "),XD=a("a"),oRo=o("BartForQuestionAnswering"),rRo=o(" (BART model)"),tRo=l(),gT=a("li"),dle=a("strong"),aRo=o("bert"),nRo=o(" \u2014 "),VD=a("a"),sRo=o("BertForQuestionAnswering"),lRo=o(" (BERT model)"),iRo=l(),hT=a("li"),cle=a("strong"),dRo=o("big_bird"),cRo=o(" \u2014 "),zD=a("a"),mRo=o("BigBirdForQuestionAnswering"),fRo=o(" (BigBird model)"),gRo=l(),uT=a("li"),mle=a("strong"),hRo=o("bigbird_pegasus"),uRo=o(" \u2014 "),WD=a("a"),pRo=o("BigBirdPegasusForQuestionAnswering"),_Ro=o(" (BigBirdPegasus model)"),bRo=l(),pT=a("li"),fle=a("strong"),vRo=o("camembert"),TRo=o(" \u2014 "),QD=a("a"),FRo=o("CamembertForQuestionAnswering"),CRo=o(" (CamemBERT model)"),MRo=l(),_T=a("li"),gle=a("strong"),ERo=o("canine"),yRo=o(" \u2014 "),HD=a("a"),wRo=o("CanineForQuestionAnswering"),ARo=o(" (Canine model)"),LRo=l(),bT=a("li"),hle=a("strong"),BRo=o("convbert"),xRo=o(" \u2014 "),UD=a("a"),kRo=o("ConvBertForQuestionAnswering"),RRo=o(" (ConvBERT model)"),SRo=l(),vT=a("li"),ule=a("strong"),PRo=o("data2vec-text"),$Ro=o(" \u2014 "),JD=a("a"),IRo=o("Data2VecTextForQuestionAnswering"),NRo=o(" (Data2VecText model)"),DRo=l(),TT=a("li"),ple=a("strong"),jRo=o("deberta"),qRo=o(" \u2014 "),YD=a("a"),GRo=o("DebertaForQuestionAnswering"),ORo=o(" (DeBERTa model)"),XRo=l(),FT=a("li"),_le=a("strong"),VRo=o("deberta-v2"),zRo=o(" \u2014 "),KD=a("a"),WRo=o("DebertaV2ForQuestionAnswering"),QRo=o(" (DeBERTa-v2 model)"),HRo=l(),CT=a("li"),ble=a("strong"),URo=o("distilbert"),JRo=o(" \u2014 "),ZD=a("a"),YRo=o("DistilBertForQuestionAnswering"),KRo=o(" (DistilBERT model)"),ZRo=l(),MT=a("li"),vle=a("strong"),eSo=o("electra"),oSo=o(" \u2014 "),ej=a("a"),rSo=o("ElectraForQuestionAnswering"),tSo=o(" (ELECTRA model)"),aSo=l(),ET=a("li"),Tle=a("strong"),nSo=o("flaubert"),sSo=o(" \u2014 "),oj=a("a"),lSo=o("FlaubertForQuestionAnsweringSimple"),iSo=o(" (FlauBERT model)"),dSo=l(),yT=a("li"),Fle=a("strong"),cSo=o("fnet"),mSo=o(" \u2014 "),rj=a("a"),fSo=o("FNetForQuestionAnswering"),gSo=o(" (FNet model)"),hSo=l(),wT=a("li"),Cle=a("strong"),uSo=o("funnel"),pSo=o(" \u2014 "),tj=a("a"),_So=o("FunnelForQuestionAnswering"),bSo=o(" (Funnel Transformer model)"),vSo=l(),AT=a("li"),Mle=a("strong"),TSo=o("gptj"),FSo=o(" \u2014 "),aj=a("a"),CSo=o("GPTJForQuestionAnswering"),MSo=o(" (GPT-J model)"),ESo=l(),LT=a("li"),Ele=a("strong"),ySo=o("ibert"),wSo=o(" \u2014 "),nj=a("a"),ASo=o("IBertForQuestionAnswering"),LSo=o(" (I-BERT model)"),BSo=l(),BT=a("li"),yle=a("strong"),xSo=o("layoutlmv2"),kSo=o(" \u2014 "),sj=a("a"),RSo=o("LayoutLMv2ForQuestionAnswering"),SSo=o(" (LayoutLMv2 model)"),PSo=l(),xT=a("li"),wle=a("strong"),$So=o("led"),ISo=o(" \u2014 "),lj=a("a"),NSo=o("LEDForQuestionAnswering"),DSo=o(" (LED model)"),jSo=l(),kT=a("li"),Ale=a("strong"),qSo=o("longformer"),GSo=o(" \u2014 "),ij=a("a"),OSo=o("LongformerForQuestionAnswering"),XSo=o(" (Longformer model)"),VSo=l(),RT=a("li"),Lle=a("strong"),zSo=o("lxmert"),WSo=o(" \u2014 "),dj=a("a"),QSo=o("LxmertForQuestionAnswering"),HSo=o(" (LXMERT model)"),USo=l(),ST=a("li"),Ble=a("strong"),JSo=o("mbart"),YSo=o(" \u2014 "),cj=a("a"),KSo=o("MBartForQuestionAnswering"),ZSo=o(" (mBART model)"),ePo=l(),PT=a("li"),xle=a("strong"),oPo=o("megatron-bert"),rPo=o(" \u2014 "),mj=a("a"),tPo=o("MegatronBertForQuestionAnswering"),aPo=o(" (MegatronBert model)"),nPo=l(),$T=a("li"),kle=a("strong"),sPo=o("mobilebert"),lPo=o(" \u2014 "),fj=a("a"),iPo=o("MobileBertForQuestionAnswering"),dPo=o(" (MobileBERT model)"),cPo=l(),IT=a("li"),Rle=a("strong"),mPo=o("mpnet"),fPo=o(" \u2014 "),gj=a("a"),gPo=o("MPNetForQuestionAnswering"),hPo=o(" (MPNet model)"),uPo=l(),NT=a("li"),Sle=a("strong"),pPo=o("nystromformer"),_Po=o(" \u2014 "),hj=a("a"),bPo=o("NystromformerForQuestionAnswering"),vPo=o(" (Nystromformer model)"),TPo=l(),DT=a("li"),Ple=a("strong"),FPo=o("qdqbert"),CPo=o(" \u2014 "),uj=a("a"),MPo=o("QDQBertForQuestionAnswering"),EPo=o(" (QDQBert model)"),yPo=l(),jT=a("li"),$le=a("strong"),wPo=o("reformer"),APo=o(" \u2014 "),pj=a("a"),LPo=o("ReformerForQuestionAnswering"),BPo=o(" (Reformer model)"),xPo=l(),qT=a("li"),Ile=a("strong"),kPo=o("rembert"),RPo=o(" \u2014 "),_j=a("a"),SPo=o("RemBertForQuestionAnswering"),PPo=o(" (RemBERT model)"),$Po=l(),GT=a("li"),Nle=a("strong"),IPo=o("roberta"),NPo=o(" \u2014 "),bj=a("a"),DPo=o("RobertaForQuestionAnswering"),jPo=o(" (RoBERTa model)"),qPo=l(),OT=a("li"),Dle=a("strong"),GPo=o("roformer"),OPo=o(" \u2014 "),vj=a("a"),XPo=o("RoFormerForQuestionAnswering"),VPo=o(" (RoFormer model)"),zPo=l(),XT=a("li"),jle=a("strong"),WPo=o("splinter"),QPo=o(" \u2014 "),Tj=a("a"),HPo=o("SplinterForQuestionAnswering"),UPo=o(" (Splinter model)"),JPo=l(),VT=a("li"),qle=a("strong"),YPo=o("squeezebert"),KPo=o(" \u2014 "),Fj=a("a"),ZPo=o("SqueezeBertForQuestionAnswering"),e$o=o(" (SqueezeBERT model)"),o$o=l(),zT=a("li"),Gle=a("strong"),r$o=o("xlm"),t$o=o(" \u2014 "),Cj=a("a"),a$o=o("XLMForQuestionAnsweringSimple"),n$o=o(" (XLM model)"),s$o=l(),WT=a("li"),Ole=a("strong"),l$o=o("xlm-roberta"),i$o=o(" \u2014 "),Mj=a("a"),d$o=o("XLMRobertaForQuestionAnswering"),c$o=o(" (XLM-RoBERTa model)"),m$o=l(),QT=a("li"),Xle=a("strong"),f$o=o("xlm-roberta-xl"),g$o=o(" \u2014 "),Ej=a("a"),h$o=o("XLMRobertaXLForQuestionAnswering"),u$o=o(" (XLM-RoBERTa-XL model)"),p$o=l(),HT=a("li"),Vle=a("strong"),_$o=o("xlnet"),b$o=o(" \u2014 "),yj=a("a"),v$o=o("XLNetForQuestionAnsweringSimple"),T$o=o(" (XLNet model)"),F$o=l(),UT=a("li"),zle=a("strong"),C$o=o("yoso"),M$o=o(" \u2014 "),wj=a("a"),E$o=o("YosoForQuestionAnswering"),y$o=o(" (YOSO model)"),w$o=l(),JT=a("p"),A$o=o("The model is set in evaluation mode by default using "),Wle=a("code"),L$o=o("model.eval()"),B$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=a("code"),x$o=o("model.train()"),k$o=l(),Hle=a("p"),R$o=o("Examples:"),S$o=l(),m(e6.$$.fragment),Ske=l(),wd=a("h2"),YT=a("a"),Ule=a("span"),m(o6.$$.fragment),P$o=l(),Jle=a("span"),$$o=o("AutoModelForTableQuestionAnswering"),Pke=l(),sr=a("div"),m(r6.$$.fragment),I$o=l(),Ad=a("p"),N$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yle=a("code"),D$o=o("from_pretrained()"),j$o=o("class method or the "),Kle=a("code"),q$o=o("from_config()"),G$o=o(`class
method.`),O$o=l(),t6=a("p"),X$o=o("This class cannot be instantiated directly using "),Zle=a("code"),V$o=o("__init__()"),z$o=o(" (throws an error)."),W$o=l(),et=a("div"),m(a6.$$.fragment),Q$o=l(),eie=a("p"),H$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U$o=l(),Ld=a("p"),J$o=o(`Note:
Loading a model from its configuration file does `),oie=a("strong"),Y$o=o("not"),K$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=a("code"),Z$o=o("from_pretrained()"),eIo=o("to load the model weights."),oIo=l(),tie=a("p"),rIo=o("Examples:"),tIo=l(),m(n6.$$.fragment),aIo=l(),Qe=a("div"),m(s6.$$.fragment),nIo=l(),aie=a("p"),sIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lIo=l(),en=a("p"),iIo=o("The model class to instantiate is selected based on the "),nie=a("code"),dIo=o("model_type"),cIo=o(` property of the config object (either
passed as an argument or loaded from `),sie=a("code"),mIo=o("pretrained_model_name_or_path"),fIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=a("code"),gIo=o("pretrained_model_name_or_path"),hIo=o(":"),uIo=l(),iie=a("ul"),KT=a("li"),die=a("strong"),pIo=o("tapas"),_Io=o(" \u2014 "),Aj=a("a"),bIo=o("TapasForQuestionAnswering"),vIo=o(" (TAPAS model)"),TIo=l(),ZT=a("p"),FIo=o("The model is set in evaluation mode by default using "),cie=a("code"),CIo=o("model.eval()"),MIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),EIo=o("model.train()"),yIo=l(),fie=a("p"),wIo=o("Examples:"),AIo=l(),m(l6.$$.fragment),$ke=l(),Bd=a("h2"),e1=a("a"),gie=a("span"),m(i6.$$.fragment),LIo=l(),hie=a("span"),BIo=o("AutoModelForImageClassification"),Ike=l(),lr=a("div"),m(d6.$$.fragment),xIo=l(),xd=a("p"),kIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uie=a("code"),RIo=o("from_pretrained()"),SIo=o("class method or the "),pie=a("code"),PIo=o("from_config()"),$Io=o(`class
method.`),IIo=l(),c6=a("p"),NIo=o("This class cannot be instantiated directly using "),_ie=a("code"),DIo=o("__init__()"),jIo=o(" (throws an error)."),qIo=l(),ot=a("div"),m(m6.$$.fragment),GIo=l(),bie=a("p"),OIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XIo=l(),kd=a("p"),VIo=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),zIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=a("code"),QIo=o("from_pretrained()"),HIo=o("to load the model weights."),UIo=l(),Fie=a("p"),JIo=o("Examples:"),YIo=l(),m(f6.$$.fragment),KIo=l(),He=a("div"),m(g6.$$.fragment),ZIo=l(),Cie=a("p"),eNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oNo=l(),on=a("p"),rNo=o("The model class to instantiate is selected based on the "),Mie=a("code"),tNo=o("model_type"),aNo=o(` property of the config object (either
passed as an argument or loaded from `),Eie=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),lNo=o("pretrained_model_name_or_path"),iNo=o(":"),dNo=l(),fe=a("ul"),o1=a("li"),wie=a("strong"),cNo=o("beit"),mNo=o(" \u2014 "),Lj=a("a"),fNo=o("BeitForImageClassification"),gNo=o(" (BEiT model)"),hNo=l(),r1=a("li"),Aie=a("strong"),uNo=o("convnext"),pNo=o(" \u2014 "),Bj=a("a"),_No=o("ConvNextForImageClassification"),bNo=o(" (ConvNext model)"),vNo=l(),qs=a("li"),Lie=a("strong"),TNo=o("deit"),FNo=o(" \u2014 "),xj=a("a"),CNo=o("DeiTForImageClassification"),MNo=o(" or "),kj=a("a"),ENo=o("DeiTForImageClassificationWithTeacher"),yNo=o(" (DeiT model)"),wNo=l(),t1=a("li"),Bie=a("strong"),ANo=o("imagegpt"),LNo=o(" \u2014 "),Rj=a("a"),BNo=o("ImageGPTForImageClassification"),xNo=o(" (ImageGPT model)"),kNo=l(),fa=a("li"),xie=a("strong"),RNo=o("perceiver"),SNo=o(" \u2014 "),Sj=a("a"),PNo=o("PerceiverForImageClassificationLearned"),$No=o(" or "),Pj=a("a"),INo=o("PerceiverForImageClassificationFourier"),NNo=o(" or "),$j=a("a"),DNo=o("PerceiverForImageClassificationConvProcessing"),jNo=o(" (Perceiver model)"),qNo=l(),a1=a("li"),kie=a("strong"),GNo=o("poolformer"),ONo=o(" \u2014 "),Ij=a("a"),XNo=o("PoolFormerForImageClassification"),VNo=o(" (PoolFormer model)"),zNo=l(),n1=a("li"),Rie=a("strong"),WNo=o("resnet"),QNo=o(" \u2014 "),Nj=a("a"),HNo=o("ResNetForImageClassification"),UNo=o(" (ResNet model)"),JNo=l(),s1=a("li"),Sie=a("strong"),YNo=o("segformer"),KNo=o(" \u2014 "),Dj=a("a"),ZNo=o("SegformerForImageClassification"),eDo=o(" (SegFormer model)"),oDo=l(),l1=a("li"),Pie=a("strong"),rDo=o("swin"),tDo=o(" \u2014 "),jj=a("a"),aDo=o("SwinForImageClassification"),nDo=o(" (Swin model)"),sDo=l(),i1=a("li"),$ie=a("strong"),lDo=o("van"),iDo=o(" \u2014 "),qj=a("a"),dDo=o("VanForImageClassification"),cDo=o(" (VAN model)"),mDo=l(),d1=a("li"),Iie=a("strong"),fDo=o("vit"),gDo=o(" \u2014 "),Gj=a("a"),hDo=o("ViTForImageClassification"),uDo=o(" (ViT model)"),pDo=l(),c1=a("p"),_Do=o("The model is set in evaluation mode by default using "),Nie=a("code"),bDo=o("model.eval()"),vDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),TDo=o("model.train()"),FDo=l(),jie=a("p"),CDo=o("Examples:"),MDo=l(),m(h6.$$.fragment),Nke=l(),Rd=a("h2"),m1=a("a"),qie=a("span"),m(u6.$$.fragment),EDo=l(),Gie=a("span"),yDo=o("AutoModelForVision2Seq"),Dke=l(),ir=a("div"),m(p6.$$.fragment),wDo=l(),Sd=a("p"),ADo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oie=a("code"),LDo=o("from_pretrained()"),BDo=o("class method or the "),Xie=a("code"),xDo=o("from_config()"),kDo=o(`class
method.`),RDo=l(),_6=a("p"),SDo=o("This class cannot be instantiated directly using "),Vie=a("code"),PDo=o("__init__()"),$Do=o(" (throws an error)."),IDo=l(),rt=a("div"),m(b6.$$.fragment),NDo=l(),zie=a("p"),DDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jDo=l(),Pd=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),GDo=o("not"),ODo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=a("code"),XDo=o("from_pretrained()"),VDo=o("to load the model weights."),zDo=l(),Hie=a("p"),WDo=o("Examples:"),QDo=l(),m(v6.$$.fragment),HDo=l(),Ue=a("div"),m(T6.$$.fragment),UDo=l(),Uie=a("p"),JDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YDo=l(),rn=a("p"),KDo=o("The model class to instantiate is selected based on the "),Jie=a("code"),ZDo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),Zie=a("ul"),f1=a("li"),ede=a("strong"),sjo=o("vision-encoder-decoder"),ljo=o(" \u2014 "),Oj=a("a"),ijo=o("VisionEncoderDecoderModel"),djo=o(" (Vision Encoder decoder model)"),cjo=l(),g1=a("p"),mjo=o("The model is set in evaluation mode by default using "),ode=a("code"),fjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),hjo=o("model.train()"),ujo=l(),tde=a("p"),pjo=o("Examples:"),_jo=l(),m(F6.$$.fragment),jke=l(),$d=a("h2"),h1=a("a"),ade=a("span"),m(C6.$$.fragment),bjo=l(),nde=a("span"),vjo=o("AutoModelForAudioClassification"),qke=l(),dr=a("div"),m(M6.$$.fragment),Tjo=l(),Id=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sde=a("code"),Cjo=o("from_pretrained()"),Mjo=o("class method or the "),lde=a("code"),Ejo=o("from_config()"),yjo=o(`class
method.`),wjo=l(),E6=a("p"),Ajo=o("This class cannot be instantiated directly using "),ide=a("code"),Ljo=o("__init__()"),Bjo=o(" (throws an error)."),xjo=l(),tt=a("div"),m(y6.$$.fragment),kjo=l(),dde=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Sjo=l(),Nd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),$jo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=a("code"),Njo=o("from_pretrained()"),Djo=o("to load the model weights."),jjo=l(),fde=a("p"),qjo=o("Examples:"),Gjo=l(),m(w6.$$.fragment),Ojo=l(),Je=a("div"),m(A6.$$.fragment),Xjo=l(),gde=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zjo=l(),tn=a("p"),Wjo=o("The model class to instantiate is selected based on the "),hde=a("code"),Qjo=o("model_type"),Hjo=o(` property of the config object (either
passed as an argument or loaded from `),ude=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(":"),Zjo=l(),ke=a("ul"),u1=a("li"),_de=a("strong"),eqo=o("data2vec-audio"),oqo=o(" \u2014 "),Xj=a("a"),rqo=o("Data2VecAudioForSequenceClassification"),tqo=o(" (Data2VecAudio model)"),aqo=l(),p1=a("li"),bde=a("strong"),nqo=o("hubert"),sqo=o(" \u2014 "),Vj=a("a"),lqo=o("HubertForSequenceClassification"),iqo=o(" (Hubert model)"),dqo=l(),_1=a("li"),vde=a("strong"),cqo=o("sew"),mqo=o(" \u2014 "),zj=a("a"),fqo=o("SEWForSequenceClassification"),gqo=o(" (SEW model)"),hqo=l(),b1=a("li"),Tde=a("strong"),uqo=o("sew-d"),pqo=o(" \u2014 "),Wj=a("a"),_qo=o("SEWDForSequenceClassification"),bqo=o(" (SEW-D model)"),vqo=l(),v1=a("li"),Fde=a("strong"),Tqo=o("unispeech"),Fqo=o(" \u2014 "),Qj=a("a"),Cqo=o("UniSpeechForSequenceClassification"),Mqo=o(" (UniSpeech model)"),Eqo=l(),T1=a("li"),Cde=a("strong"),yqo=o("unispeech-sat"),wqo=o(" \u2014 "),Hj=a("a"),Aqo=o("UniSpeechSatForSequenceClassification"),Lqo=o(" (UniSpeechSat model)"),Bqo=l(),F1=a("li"),Mde=a("strong"),xqo=o("wav2vec2"),kqo=o(" \u2014 "),Uj=a("a"),Rqo=o("Wav2Vec2ForSequenceClassification"),Sqo=o(" (Wav2Vec2 model)"),Pqo=l(),C1=a("li"),Ede=a("strong"),$qo=o("wavlm"),Iqo=o(" \u2014 "),Jj=a("a"),Nqo=o("WavLMForSequenceClassification"),Dqo=o(" (WavLM model)"),jqo=l(),M1=a("p"),qqo=o("The model is set in evaluation mode by default using "),yde=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),Xqo=o("model.train()"),Vqo=l(),Ade=a("p"),zqo=o("Examples:"),Wqo=l(),m(L6.$$.fragment),Gke=l(),Dd=a("h2"),E1=a("a"),Lde=a("span"),m(B6.$$.fragment),Qqo=l(),Bde=a("span"),Hqo=o("AutoModelForAudioFrameClassification"),Oke=l(),cr=a("div"),m(x6.$$.fragment),Uqo=l(),jd=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xde=a("code"),Yqo=o("from_pretrained()"),Kqo=o("class method or the "),kde=a("code"),Zqo=o("from_config()"),eGo=o(`class
method.`),oGo=l(),k6=a("p"),rGo=o("This class cannot be instantiated directly using "),Rde=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),at=a("div"),m(R6.$$.fragment),sGo=l(),Sde=a("p"),lGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iGo=l(),qd=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),cGo=o("not"),mGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=a("code"),fGo=o("from_pretrained()"),gGo=o("to load the model weights."),hGo=l(),Ide=a("p"),uGo=o("Examples:"),pGo=l(),m(S6.$$.fragment),_Go=l(),Ye=a("div"),m(P6.$$.fragment),bGo=l(),Nde=a("p"),vGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TGo=l(),an=a("p"),FGo=o("The model class to instantiate is selected based on the "),Dde=a("code"),CGo=o("model_type"),MGo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),EGo=o("pretrained_model_name_or_path"),yGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),wGo=o("pretrained_model_name_or_path"),AGo=o(":"),LGo=l(),nn=a("ul"),y1=a("li"),Gde=a("strong"),BGo=o("data2vec-audio"),xGo=o(" \u2014 "),Yj=a("a"),kGo=o("Data2VecAudioForAudioFrameClassification"),RGo=o(" (Data2VecAudio model)"),SGo=l(),w1=a("li"),Ode=a("strong"),PGo=o("unispeech-sat"),$Go=o(" \u2014 "),Kj=a("a"),IGo=o("UniSpeechSatForAudioFrameClassification"),NGo=o(" (UniSpeechSat model)"),DGo=l(),A1=a("li"),Xde=a("strong"),jGo=o("wav2vec2"),qGo=o(" \u2014 "),Zj=a("a"),GGo=o("Wav2Vec2ForAudioFrameClassification"),OGo=o(" (Wav2Vec2 model)"),XGo=l(),L1=a("li"),Vde=a("strong"),VGo=o("wavlm"),zGo=o(" \u2014 "),eq=a("a"),WGo=o("WavLMForAudioFrameClassification"),QGo=o(" (WavLM model)"),HGo=l(),B1=a("p"),UGo=o("The model is set in evaluation mode by default using "),zde=a("code"),JGo=o("model.eval()"),YGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),KGo=o("model.train()"),ZGo=l(),Qde=a("p"),eOo=o("Examples:"),oOo=l(),m($6.$$.fragment),Xke=l(),Gd=a("h2"),x1=a("a"),Hde=a("span"),m(I6.$$.fragment),rOo=l(),Ude=a("span"),tOo=o("AutoModelForCTC"),Vke=l(),mr=a("div"),m(N6.$$.fragment),aOo=l(),Od=a("p"),nOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jde=a("code"),sOo=o("from_pretrained()"),lOo=o("class method or the "),Yde=a("code"),iOo=o("from_config()"),dOo=o(`class
method.`),cOo=l(),D6=a("p"),mOo=o("This class cannot be instantiated directly using "),Kde=a("code"),fOo=o("__init__()"),gOo=o(" (throws an error)."),hOo=l(),nt=a("div"),m(j6.$$.fragment),uOo=l(),Zde=a("p"),pOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_Oo=l(),Xd=a("p"),bOo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),vOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),FOo=o("from_pretrained()"),COo=o("to load the model weights."),MOo=l(),rce=a("p"),EOo=o("Examples:"),yOo=l(),m(q6.$$.fragment),wOo=l(),Ke=a("div"),m(G6.$$.fragment),AOo=l(),tce=a("p"),LOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),BOo=l(),sn=a("p"),xOo=o("The model class to instantiate is selected based on the "),ace=a("code"),kOo=o("model_type"),ROo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),SOo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),$Oo=o("pretrained_model_name_or_path"),IOo=o(":"),NOo=l(),Re=a("ul"),k1=a("li"),lce=a("strong"),DOo=o("data2vec-audio"),jOo=o(" \u2014 "),oq=a("a"),qOo=o("Data2VecAudioForCTC"),GOo=o(" (Data2VecAudio model)"),OOo=l(),R1=a("li"),ice=a("strong"),XOo=o("hubert"),VOo=o(" \u2014 "),rq=a("a"),zOo=o("HubertForCTC"),WOo=o(" (Hubert model)"),QOo=l(),S1=a("li"),dce=a("strong"),HOo=o("sew"),UOo=o(" \u2014 "),tq=a("a"),JOo=o("SEWForCTC"),YOo=o(" (SEW model)"),KOo=l(),P1=a("li"),cce=a("strong"),ZOo=o("sew-d"),eXo=o(" \u2014 "),aq=a("a"),oXo=o("SEWDForCTC"),rXo=o(" (SEW-D model)"),tXo=l(),$1=a("li"),mce=a("strong"),aXo=o("unispeech"),nXo=o(" \u2014 "),nq=a("a"),sXo=o("UniSpeechForCTC"),lXo=o(" (UniSpeech model)"),iXo=l(),I1=a("li"),fce=a("strong"),dXo=o("unispeech-sat"),cXo=o(" \u2014 "),sq=a("a"),mXo=o("UniSpeechSatForCTC"),fXo=o(" (UniSpeechSat model)"),gXo=l(),N1=a("li"),gce=a("strong"),hXo=o("wav2vec2"),uXo=o(" \u2014 "),lq=a("a"),pXo=o("Wav2Vec2ForCTC"),_Xo=o(" (Wav2Vec2 model)"),bXo=l(),D1=a("li"),hce=a("strong"),vXo=o("wavlm"),TXo=o(" \u2014 "),iq=a("a"),FXo=o("WavLMForCTC"),CXo=o(" (WavLM model)"),MXo=l(),j1=a("p"),EXo=o("The model is set in evaluation mode by default using "),uce=a("code"),yXo=o("model.eval()"),wXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),AXo=o("model.train()"),LXo=l(),_ce=a("p"),BXo=o("Examples:"),xXo=l(),m(O6.$$.fragment),zke=l(),Vd=a("h2"),q1=a("a"),bce=a("span"),m(X6.$$.fragment),kXo=l(),vce=a("span"),RXo=o("AutoModelForSpeechSeq2Seq"),Wke=l(),fr=a("div"),m(V6.$$.fragment),SXo=l(),zd=a("p"),PXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tce=a("code"),$Xo=o("from_pretrained()"),IXo=o("class method or the "),Fce=a("code"),NXo=o("from_config()"),DXo=o(`class
method.`),jXo=l(),z6=a("p"),qXo=o("This class cannot be instantiated directly using "),Cce=a("code"),GXo=o("__init__()"),OXo=o(" (throws an error)."),XXo=l(),st=a("div"),m(W6.$$.fragment),VXo=l(),Mce=a("p"),zXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WXo=l(),Wd=a("p"),QXo=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),HXo=o("not"),UXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=a("code"),JXo=o("from_pretrained()"),YXo=o("to load the model weights."),KXo=l(),wce=a("p"),ZXo=o("Examples:"),eVo=l(),m(Q6.$$.fragment),oVo=l(),Ze=a("div"),m(H6.$$.fragment),rVo=l(),Ace=a("p"),tVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aVo=l(),ln=a("p"),nVo=o("The model class to instantiate is selected based on the "),Lce=a("code"),sVo=o("model_type"),lVo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),cVo=o("pretrained_model_name_or_path"),mVo=o(":"),fVo=l(),U6=a("ul"),G1=a("li"),kce=a("strong"),gVo=o("speech-encoder-decoder"),hVo=o(" \u2014 "),dq=a("a"),uVo=o("SpeechEncoderDecoderModel"),pVo=o(" (Speech Encoder decoder model)"),_Vo=l(),O1=a("li"),Rce=a("strong"),bVo=o("speech_to_text"),vVo=o(" \u2014 "),cq=a("a"),TVo=o("Speech2TextForConditionalGeneration"),FVo=o(" (Speech2Text model)"),CVo=l(),X1=a("p"),MVo=o("The model is set in evaluation mode by default using "),Sce=a("code"),EVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),wVo=o("model.train()"),AVo=l(),$ce=a("p"),LVo=o("Examples:"),BVo=l(),m(J6.$$.fragment),Qke=l(),Qd=a("h2"),V1=a("a"),Ice=a("span"),m(Y6.$$.fragment),xVo=l(),Nce=a("span"),kVo=o("AutoModelForAudioXVector"),Hke=l(),gr=a("div"),m(K6.$$.fragment),RVo=l(),Hd=a("p"),SVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dce=a("code"),PVo=o("from_pretrained()"),$Vo=o("class method or the "),jce=a("code"),IVo=o("from_config()"),NVo=o(`class
method.`),DVo=l(),Z6=a("p"),jVo=o("This class cannot be instantiated directly using "),qce=a("code"),qVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),lt=a("div"),m(eA.$$.fragment),XVo=l(),Gce=a("p"),VVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zVo=l(),Ud=a("p"),WVo=o(`Note:
Loading a model from its configuration file does `),Oce=a("strong"),QVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=a("code"),UVo=o("from_pretrained()"),JVo=o("to load the model weights."),YVo=l(),Vce=a("p"),KVo=o("Examples:"),ZVo=l(),m(oA.$$.fragment),ezo=l(),eo=a("div"),m(rA.$$.fragment),ozo=l(),zce=a("p"),rzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tzo=l(),dn=a("p"),azo=o("The model class to instantiate is selected based on the "),Wce=a("code"),nzo=o("model_type"),szo=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),lzo=o("pretrained_model_name_or_path"),izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(":"),mzo=l(),cn=a("ul"),z1=a("li"),Uce=a("strong"),fzo=o("data2vec-audio"),gzo=o(" \u2014 "),mq=a("a"),hzo=o("Data2VecAudioForXVector"),uzo=o(" (Data2VecAudio model)"),pzo=l(),W1=a("li"),Jce=a("strong"),_zo=o("unispeech-sat"),bzo=o(" \u2014 "),fq=a("a"),vzo=o("UniSpeechSatForXVector"),Tzo=o(" (UniSpeechSat model)"),Fzo=l(),Q1=a("li"),Yce=a("strong"),Czo=o("wav2vec2"),Mzo=o(" \u2014 "),gq=a("a"),Ezo=o("Wav2Vec2ForXVector"),yzo=o(" (Wav2Vec2 model)"),wzo=l(),H1=a("li"),Kce=a("strong"),Azo=o("wavlm"),Lzo=o(" \u2014 "),hq=a("a"),Bzo=o("WavLMForXVector"),xzo=o(" (WavLM model)"),kzo=l(),U1=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Zce=a("code"),Szo=o("model.eval()"),Pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),$zo=o("model.train()"),Izo=l(),ome=a("p"),Nzo=o("Examples:"),Dzo=l(),m(tA.$$.fragment),Uke=l(),Jd=a("h2"),J1=a("a"),rme=a("span"),m(aA.$$.fragment),jzo=l(),tme=a("span"),qzo=o("AutoModelForMaskedImageModeling"),Jke=l(),hr=a("div"),m(nA.$$.fragment),Gzo=l(),Yd=a("p"),Ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ame=a("code"),Xzo=o("from_pretrained()"),Vzo=o("class method or the "),nme=a("code"),zzo=o("from_config()"),Wzo=o(`class
method.`),Qzo=l(),sA=a("p"),Hzo=o("This class cannot be instantiated directly using "),sme=a("code"),Uzo=o("__init__()"),Jzo=o(" (throws an error)."),Yzo=l(),it=a("div"),m(lA.$$.fragment),Kzo=l(),lme=a("p"),Zzo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eWo=l(),Kd=a("p"),oWo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),rWo=o("not"),tWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=a("code"),aWo=o("from_pretrained()"),nWo=o("to load the model weights."),sWo=l(),cme=a("p"),lWo=o("Examples:"),iWo=l(),m(iA.$$.fragment),dWo=l(),oo=a("div"),m(dA.$$.fragment),cWo=l(),mme=a("p"),mWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fWo=l(),mn=a("p"),gWo=o("The model class to instantiate is selected based on the "),fme=a("code"),hWo=o("model_type"),uWo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),pWo=o("pretrained_model_name_or_path"),_Wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(":"),TWo=l(),Zd=a("ul"),Y1=a("li"),ume=a("strong"),FWo=o("deit"),CWo=o(" \u2014 "),uq=a("a"),MWo=o("DeiTForMaskedImageModeling"),EWo=o(" (DeiT model)"),yWo=l(),K1=a("li"),pme=a("strong"),wWo=o("swin"),AWo=o(" \u2014 "),pq=a("a"),LWo=o("SwinForMaskedImageModeling"),BWo=o(" (Swin model)"),xWo=l(),Z1=a("li"),_me=a("strong"),kWo=o("vit"),RWo=o(" \u2014 "),_q=a("a"),SWo=o("ViTForMaskedImageModeling"),PWo=o(" (ViT model)"),$Wo=l(),eF=a("p"),IWo=o("The model is set in evaluation mode by default using "),bme=a("code"),NWo=o("model.eval()"),DWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),jWo=o("model.train()"),qWo=l(),Tme=a("p"),GWo=o("Examples:"),OWo=l(),m(cA.$$.fragment),Yke=l(),ec=a("h2"),oF=a("a"),Fme=a("span"),m(mA.$$.fragment),XWo=l(),Cme=a("span"),VWo=o("AutoModelForObjectDetection"),Kke=l(),ur=a("div"),m(fA.$$.fragment),zWo=l(),oc=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mme=a("code"),QWo=o("from_pretrained()"),HWo=o("class method or the "),Eme=a("code"),UWo=o("from_config()"),JWo=o(`class
method.`),YWo=l(),gA=a("p"),KWo=o("This class cannot be instantiated directly using "),yme=a("code"),ZWo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),dt=a("div"),m(hA.$$.fragment),rQo=l(),wme=a("p"),tQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aQo=l(),rc=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=a("code"),iQo=o("from_pretrained()"),dQo=o("to load the model weights."),cQo=l(),Bme=a("p"),mQo=o("Examples:"),fQo=l(),m(uA.$$.fragment),gQo=l(),ro=a("div"),m(pA.$$.fragment),hQo=l(),xme=a("p"),uQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pQo=l(),fn=a("p"),_Qo=o("The model class to instantiate is selected based on the "),kme=a("code"),bQo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),TQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),CQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),Pme=a("ul"),rF=a("li"),$me=a("strong"),yQo=o("detr"),wQo=o(" \u2014 "),bq=a("a"),AQo=o("DetrForObjectDetection"),LQo=o(" (DETR model)"),BQo=l(),tF=a("p"),xQo=o("The model is set in evaluation mode by default using "),Ime=a("code"),kQo=o("model.eval()"),RQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=a("code"),SQo=o("model.train()"),PQo=l(),Dme=a("p"),$Qo=o("Examples:"),IQo=l(),m(_A.$$.fragment),Zke=l(),tc=a("h2"),aF=a("a"),jme=a("span"),m(bA.$$.fragment),NQo=l(),qme=a("span"),DQo=o("AutoModelForImageSegmentation"),eRe=l(),pr=a("div"),m(vA.$$.fragment),jQo=l(),ac=a("p"),qQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Gme=a("code"),GQo=o("from_pretrained()"),OQo=o("class method or the "),Ome=a("code"),XQo=o("from_config()"),VQo=o(`class
method.`),zQo=l(),TA=a("p"),WQo=o("This class cannot be instantiated directly using "),Xme=a("code"),QQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),ct=a("div"),m(FA.$$.fragment),JQo=l(),Vme=a("p"),YQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),KQo=l(),nc=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),eHo=o("not"),oHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),rHo=o("from_pretrained()"),tHo=o("to load the model weights."),aHo=l(),Qme=a("p"),nHo=o("Examples:"),sHo=l(),m(CA.$$.fragment),lHo=l(),to=a("div"),m(MA.$$.fragment),iHo=l(),Hme=a("p"),dHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cHo=l(),gn=a("p"),mHo=o("The model class to instantiate is selected based on the "),Ume=a("code"),fHo=o("model_type"),gHo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),hHo=o("pretrained_model_name_or_path"),uHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),pHo=o("pretrained_model_name_or_path"),_Ho=o(":"),bHo=l(),Kme=a("ul"),nF=a("li"),Zme=a("strong"),vHo=o("detr"),THo=o(" \u2014 "),vq=a("a"),FHo=o("DetrForSegmentation"),CHo=o(" (DETR model)"),MHo=l(),sF=a("p"),EHo=o("The model is set in evaluation mode by default using "),efe=a("code"),yHo=o("model.eval()"),wHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),AHo=o("model.train()"),LHo=l(),rfe=a("p"),BHo=o("Examples:"),xHo=l(),m(EA.$$.fragment),oRe=l(),sc=a("h2"),lF=a("a"),tfe=a("span"),m(yA.$$.fragment),kHo=l(),afe=a("span"),RHo=o("AutoModelForSemanticSegmentation"),rRe=l(),_r=a("div"),m(wA.$$.fragment),SHo=l(),lc=a("p"),PHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nfe=a("code"),$Ho=o("from_pretrained()"),IHo=o("class method or the "),sfe=a("code"),NHo=o("from_config()"),DHo=o(`class
method.`),jHo=l(),AA=a("p"),qHo=o("This class cannot be instantiated directly using "),lfe=a("code"),GHo=o("__init__()"),OHo=o(" (throws an error)."),XHo=l(),mt=a("div"),m(LA.$$.fragment),VHo=l(),ife=a("p"),zHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WHo=l(),ic=a("p"),QHo=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),HHo=o("not"),UHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=a("code"),JHo=o("from_pretrained()"),YHo=o("to load the model weights."),KHo=l(),mfe=a("p"),ZHo=o("Examples:"),eUo=l(),m(BA.$$.fragment),oUo=l(),ao=a("div"),m(xA.$$.fragment),rUo=l(),ffe=a("p"),tUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),aUo=l(),hn=a("p"),nUo=o("The model class to instantiate is selected based on the "),gfe=a("code"),sUo=o("model_type"),lUo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),cUo=o("pretrained_model_name_or_path"),mUo=o(":"),fUo=l(),kA=a("ul"),iF=a("li"),pfe=a("strong"),gUo=o("beit"),hUo=o(" \u2014 "),Tq=a("a"),uUo=o("BeitForSemanticSegmentation"),pUo=o(" (BEiT model)"),_Uo=l(),dF=a("li"),_fe=a("strong"),bUo=o("segformer"),vUo=o(" \u2014 "),Fq=a("a"),TUo=o("SegformerForSemanticSegmentation"),FUo=o(" (SegFormer model)"),CUo=l(),cF=a("p"),MUo=o("The model is set in evaluation mode by default using "),bfe=a("code"),EUo=o("model.eval()"),yUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),wUo=o("model.train()"),AUo=l(),Tfe=a("p"),LUo=o("Examples:"),BUo=l(),m(RA.$$.fragment),tRe=l(),dc=a("h2"),mF=a("a"),Ffe=a("span"),m(SA.$$.fragment),xUo=l(),Cfe=a("span"),kUo=o("AutoModelForInstanceSegmentation"),aRe=l(),br=a("div"),m(PA.$$.fragment),RUo=l(),cc=a("p"),SUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mfe=a("code"),PUo=o("from_pretrained()"),$Uo=o("class method or the "),Efe=a("code"),IUo=o("from_config()"),NUo=o(`class
method.`),DUo=l(),$A=a("p"),jUo=o("This class cannot be instantiated directly using "),yfe=a("code"),qUo=o("__init__()"),GUo=o(" (throws an error)."),OUo=l(),ft=a("div"),m(IA.$$.fragment),XUo=l(),wfe=a("p"),VUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zUo=l(),mc=a("p"),WUo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),QUo=o("not"),HUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=a("code"),UUo=o("from_pretrained()"),JUo=o("to load the model weights."),YUo=l(),Bfe=a("p"),KUo=o("Examples:"),ZUo=l(),m(NA.$$.fragment),eJo=l(),no=a("div"),m(DA.$$.fragment),oJo=l(),xfe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tJo=l(),un=a("p"),aJo=o("The model class to instantiate is selected based on the "),kfe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),mJo=l(),Pfe=a("ul"),fF=a("li"),$fe=a("strong"),fJo=o("maskformer"),gJo=o(" \u2014 "),Cq=a("a"),hJo=o("MaskFormerForInstanceSegmentation"),uJo=o(" (MaskFormer model)"),pJo=l(),gF=a("p"),_Jo=o("The model is set in evaluation mode by default using "),Ife=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),TJo=o("model.train()"),FJo=l(),Dfe=a("p"),CJo=o("Examples:"),MJo=l(),m(jA.$$.fragment),nRe=l(),fc=a("h2"),hF=a("a"),jfe=a("span"),m(qA.$$.fragment),EJo=l(),qfe=a("span"),yJo=o("TFAutoModel"),sRe=l(),vr=a("div"),m(GA.$$.fragment),wJo=l(),gc=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gfe=a("code"),LJo=o("from_pretrained()"),BJo=o("class method or the "),Ofe=a("code"),xJo=o("from_config()"),kJo=o(`class
method.`),RJo=l(),OA=a("p"),SJo=o("This class cannot be instantiated directly using "),Xfe=a("code"),PJo=o("__init__()"),$Jo=o(" (throws an error)."),IJo=l(),gt=a("div"),m(XA.$$.fragment),NJo=l(),Vfe=a("p"),DJo=o("Instantiates one of the base model classes of the library from a configuration."),jJo=l(),hc=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),GJo=o("not"),OJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=a("code"),XJo=o("from_pretrained()"),VJo=o("to load the model weights."),zJo=l(),Qfe=a("p"),WJo=o("Examples:"),QJo=l(),m(VA.$$.fragment),HJo=l(),ho=a("div"),m(zA.$$.fragment),UJo=l(),Hfe=a("p"),JJo=o("Instantiate one of the base model classes of the library from a pretrained model."),YJo=l(),pn=a("p"),KJo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),B=a("ul"),uF=a("li"),Kfe=a("strong"),sYo=o("albert"),lYo=o(" \u2014 "),Mq=a("a"),iYo=o("TFAlbertModel"),dYo=o(" (ALBERT model)"),cYo=l(),pF=a("li"),Zfe=a("strong"),mYo=o("bart"),fYo=o(" \u2014 "),Eq=a("a"),gYo=o("TFBartModel"),hYo=o(" (BART model)"),uYo=l(),_F=a("li"),ege=a("strong"),pYo=o("bert"),_Yo=o(" \u2014 "),yq=a("a"),bYo=o("TFBertModel"),vYo=o(" (BERT model)"),TYo=l(),bF=a("li"),oge=a("strong"),FYo=o("blenderbot"),CYo=o(" \u2014 "),wq=a("a"),MYo=o("TFBlenderbotModel"),EYo=o(" (Blenderbot model)"),yYo=l(),vF=a("li"),rge=a("strong"),wYo=o("blenderbot-small"),AYo=o(" \u2014 "),Aq=a("a"),LYo=o("TFBlenderbotSmallModel"),BYo=o(" (BlenderbotSmall model)"),xYo=l(),TF=a("li"),tge=a("strong"),kYo=o("camembert"),RYo=o(" \u2014 "),Lq=a("a"),SYo=o("TFCamembertModel"),PYo=o(" (CamemBERT model)"),$Yo=l(),FF=a("li"),age=a("strong"),IYo=o("clip"),NYo=o(" \u2014 "),Bq=a("a"),DYo=o("TFCLIPModel"),jYo=o(" (CLIP model)"),qYo=l(),CF=a("li"),nge=a("strong"),GYo=o("convbert"),OYo=o(" \u2014 "),xq=a("a"),XYo=o("TFConvBertModel"),VYo=o(" (ConvBERT model)"),zYo=l(),MF=a("li"),sge=a("strong"),WYo=o("convnext"),QYo=o(" \u2014 "),kq=a("a"),HYo=o("TFConvNextModel"),UYo=o(" (ConvNext model)"),JYo=l(),EF=a("li"),lge=a("strong"),YYo=o("ctrl"),KYo=o(" \u2014 "),Rq=a("a"),ZYo=o("TFCTRLModel"),eKo=o(" (CTRL model)"),oKo=l(),yF=a("li"),ige=a("strong"),rKo=o("deberta"),tKo=o(" \u2014 "),Sq=a("a"),aKo=o("TFDebertaModel"),nKo=o(" (DeBERTa model)"),sKo=l(),wF=a("li"),dge=a("strong"),lKo=o("deberta-v2"),iKo=o(" \u2014 "),Pq=a("a"),dKo=o("TFDebertaV2Model"),cKo=o(" (DeBERTa-v2 model)"),mKo=l(),AF=a("li"),cge=a("strong"),fKo=o("distilbert"),gKo=o(" \u2014 "),$q=a("a"),hKo=o("TFDistilBertModel"),uKo=o(" (DistilBERT model)"),pKo=l(),LF=a("li"),mge=a("strong"),_Ko=o("dpr"),bKo=o(" \u2014 "),Iq=a("a"),vKo=o("TFDPRQuestionEncoder"),TKo=o(" (DPR model)"),FKo=l(),BF=a("li"),fge=a("strong"),CKo=o("electra"),MKo=o(" \u2014 "),Nq=a("a"),EKo=o("TFElectraModel"),yKo=o(" (ELECTRA model)"),wKo=l(),xF=a("li"),gge=a("strong"),AKo=o("flaubert"),LKo=o(" \u2014 "),Dq=a("a"),BKo=o("TFFlaubertModel"),xKo=o(" (FlauBERT model)"),kKo=l(),Gs=a("li"),hge=a("strong"),RKo=o("funnel"),SKo=o(" \u2014 "),jq=a("a"),PKo=o("TFFunnelModel"),$Ko=o(" or "),qq=a("a"),IKo=o("TFFunnelBaseModel"),NKo=o(" (Funnel Transformer model)"),DKo=l(),kF=a("li"),uge=a("strong"),jKo=o("gpt2"),qKo=o(" \u2014 "),Gq=a("a"),GKo=o("TFGPT2Model"),OKo=o(" (OpenAI GPT-2 model)"),XKo=l(),RF=a("li"),pge=a("strong"),VKo=o("hubert"),zKo=o(" \u2014 "),Oq=a("a"),WKo=o("TFHubertModel"),QKo=o(" (Hubert model)"),HKo=l(),SF=a("li"),_ge=a("strong"),UKo=o("layoutlm"),JKo=o(" \u2014 "),Xq=a("a"),YKo=o("TFLayoutLMModel"),KKo=o(" (LayoutLM model)"),ZKo=l(),PF=a("li"),bge=a("strong"),eZo=o("led"),oZo=o(" \u2014 "),Vq=a("a"),rZo=o("TFLEDModel"),tZo=o(" (LED model)"),aZo=l(),$F=a("li"),vge=a("strong"),nZo=o("longformer"),sZo=o(" \u2014 "),zq=a("a"),lZo=o("TFLongformerModel"),iZo=o(" (Longformer model)"),dZo=l(),IF=a("li"),Tge=a("strong"),cZo=o("lxmert"),mZo=o(" \u2014 "),Wq=a("a"),fZo=o("TFLxmertModel"),gZo=o(" (LXMERT model)"),hZo=l(),NF=a("li"),Fge=a("strong"),uZo=o("marian"),pZo=o(" \u2014 "),Qq=a("a"),_Zo=o("TFMarianModel"),bZo=o(" (Marian model)"),vZo=l(),DF=a("li"),Cge=a("strong"),TZo=o("mbart"),FZo=o(" \u2014 "),Hq=a("a"),CZo=o("TFMBartModel"),MZo=o(" (mBART model)"),EZo=l(),jF=a("li"),Mge=a("strong"),yZo=o("mobilebert"),wZo=o(" \u2014 "),Uq=a("a"),AZo=o("TFMobileBertModel"),LZo=o(" (MobileBERT model)"),BZo=l(),qF=a("li"),Ege=a("strong"),xZo=o("mpnet"),kZo=o(" \u2014 "),Jq=a("a"),RZo=o("TFMPNetModel"),SZo=o(" (MPNet model)"),PZo=l(),GF=a("li"),yge=a("strong"),$Zo=o("mt5"),IZo=o(" \u2014 "),Yq=a("a"),NZo=o("TFMT5Model"),DZo=o(" (mT5 model)"),jZo=l(),OF=a("li"),wge=a("strong"),qZo=o("openai-gpt"),GZo=o(" \u2014 "),Kq=a("a"),OZo=o("TFOpenAIGPTModel"),XZo=o(" (OpenAI GPT model)"),VZo=l(),XF=a("li"),Age=a("strong"),zZo=o("pegasus"),WZo=o(" \u2014 "),Zq=a("a"),QZo=o("TFPegasusModel"),HZo=o(" (Pegasus model)"),UZo=l(),VF=a("li"),Lge=a("strong"),JZo=o("rembert"),YZo=o(" \u2014 "),eG=a("a"),KZo=o("TFRemBertModel"),ZZo=o(" (RemBERT model)"),eer=l(),zF=a("li"),Bge=a("strong"),oer=o("roberta"),rer=o(" \u2014 "),oG=a("a"),ter=o("TFRobertaModel"),aer=o(" (RoBERTa model)"),ner=l(),WF=a("li"),xge=a("strong"),ser=o("roformer"),ler=o(" \u2014 "),rG=a("a"),ier=o("TFRoFormerModel"),der=o(" (RoFormer model)"),cer=l(),QF=a("li"),kge=a("strong"),mer=o("speech_to_text"),fer=o(" \u2014 "),tG=a("a"),ger=o("TFSpeech2TextModel"),her=o(" (Speech2Text model)"),uer=l(),HF=a("li"),Rge=a("strong"),per=o("t5"),_er=o(" \u2014 "),aG=a("a"),ber=o("TFT5Model"),ver=o(" (T5 model)"),Ter=l(),UF=a("li"),Sge=a("strong"),Fer=o("tapas"),Cer=o(" \u2014 "),nG=a("a"),Mer=o("TFTapasModel"),Eer=o(" (TAPAS model)"),yer=l(),JF=a("li"),Pge=a("strong"),wer=o("transfo-xl"),Aer=o(" \u2014 "),sG=a("a"),Ler=o("TFTransfoXLModel"),Ber=o(" (Transformer-XL model)"),xer=l(),YF=a("li"),$ge=a("strong"),ker=o("vit"),Rer=o(" \u2014 "),lG=a("a"),Ser=o("TFViTModel"),Per=o(" (ViT model)"),$er=l(),KF=a("li"),Ige=a("strong"),Ier=o("wav2vec2"),Ner=o(" \u2014 "),iG=a("a"),Der=o("TFWav2Vec2Model"),jer=o(" (Wav2Vec2 model)"),qer=l(),ZF=a("li"),Nge=a("strong"),Ger=o("xlm"),Oer=o(" \u2014 "),dG=a("a"),Xer=o("TFXLMModel"),Ver=o(" (XLM model)"),zer=l(),eC=a("li"),Dge=a("strong"),Wer=o("xlm-roberta"),Qer=o(" \u2014 "),cG=a("a"),Her=o("TFXLMRobertaModel"),Uer=o(" (XLM-RoBERTa model)"),Jer=l(),oC=a("li"),jge=a("strong"),Yer=o("xlnet"),Ker=o(" \u2014 "),mG=a("a"),Zer=o("TFXLNetModel"),eor=o(" (XLNet model)"),oor=l(),qge=a("p"),ror=o("Examples:"),tor=l(),m(WA.$$.fragment),lRe=l(),uc=a("h2"),rC=a("a"),Gge=a("span"),m(QA.$$.fragment),aor=l(),Oge=a("span"),nor=o("TFAutoModelForPreTraining"),iRe=l(),Tr=a("div"),m(HA.$$.fragment),sor=l(),pc=a("p"),lor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xge=a("code"),ior=o("from_pretrained()"),dor=o("class method or the "),Vge=a("code"),cor=o("from_config()"),mor=o(`class
method.`),gor=l(),UA=a("p"),hor=o("This class cannot be instantiated directly using "),zge=a("code"),uor=o("__init__()"),por=o(" (throws an error)."),_or=l(),ht=a("div"),m(JA.$$.fragment),bor=l(),Wge=a("p"),vor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tor=l(),_c=a("p"),For=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),Cor=o("not"),Mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=a("code"),Eor=o("from_pretrained()"),yor=o("to load the model weights."),wor=l(),Uge=a("p"),Aor=o("Examples:"),Lor=l(),m(YA.$$.fragment),Bor=l(),uo=a("div"),m(KA.$$.fragment),xor=l(),Jge=a("p"),kor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ror=l(),_n=a("p"),Sor=o("The model class to instantiate is selected based on the "),Yge=a("code"),Por=o("model_type"),$or=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Ior=o("pretrained_model_name_or_path"),Nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Dor=o("pretrained_model_name_or_path"),jor=o(":"),qor=l(),H=a("ul"),tC=a("li"),ehe=a("strong"),Gor=o("albert"),Oor=o(" \u2014 "),fG=a("a"),Xor=o("TFAlbertForPreTraining"),Vor=o(" (ALBERT model)"),zor=l(),aC=a("li"),ohe=a("strong"),Wor=o("bart"),Qor=o(" \u2014 "),gG=a("a"),Hor=o("TFBartForConditionalGeneration"),Uor=o(" (BART model)"),Jor=l(),nC=a("li"),rhe=a("strong"),Yor=o("bert"),Kor=o(" \u2014 "),hG=a("a"),Zor=o("TFBertForPreTraining"),err=o(" (BERT model)"),orr=l(),sC=a("li"),the=a("strong"),rrr=o("camembert"),trr=o(" \u2014 "),uG=a("a"),arr=o("TFCamembertForMaskedLM"),nrr=o(" (CamemBERT model)"),srr=l(),lC=a("li"),ahe=a("strong"),lrr=o("ctrl"),irr=o(" \u2014 "),pG=a("a"),drr=o("TFCTRLLMHeadModel"),crr=o(" (CTRL model)"),mrr=l(),iC=a("li"),nhe=a("strong"),frr=o("distilbert"),grr=o(" \u2014 "),_G=a("a"),hrr=o("TFDistilBertForMaskedLM"),urr=o(" (DistilBERT model)"),prr=l(),dC=a("li"),she=a("strong"),_rr=o("electra"),brr=o(" \u2014 "),bG=a("a"),vrr=o("TFElectraForPreTraining"),Trr=o(" (ELECTRA model)"),Frr=l(),cC=a("li"),lhe=a("strong"),Crr=o("flaubert"),Mrr=o(" \u2014 "),vG=a("a"),Err=o("TFFlaubertWithLMHeadModel"),yrr=o(" (FlauBERT model)"),wrr=l(),mC=a("li"),ihe=a("strong"),Arr=o("funnel"),Lrr=o(" \u2014 "),TG=a("a"),Brr=o("TFFunnelForPreTraining"),xrr=o(" (Funnel Transformer model)"),krr=l(),fC=a("li"),dhe=a("strong"),Rrr=o("gpt2"),Srr=o(" \u2014 "),FG=a("a"),Prr=o("TFGPT2LMHeadModel"),$rr=o(" (OpenAI GPT-2 model)"),Irr=l(),gC=a("li"),che=a("strong"),Nrr=o("layoutlm"),Drr=o(" \u2014 "),CG=a("a"),jrr=o("TFLayoutLMForMaskedLM"),qrr=o(" (LayoutLM model)"),Grr=l(),hC=a("li"),mhe=a("strong"),Orr=o("lxmert"),Xrr=o(" \u2014 "),MG=a("a"),Vrr=o("TFLxmertForPreTraining"),zrr=o(" (LXMERT model)"),Wrr=l(),uC=a("li"),fhe=a("strong"),Qrr=o("mobilebert"),Hrr=o(" \u2014 "),EG=a("a"),Urr=o("TFMobileBertForPreTraining"),Jrr=o(" (MobileBERT model)"),Yrr=l(),pC=a("li"),ghe=a("strong"),Krr=o("mpnet"),Zrr=o(" \u2014 "),yG=a("a"),etr=o("TFMPNetForMaskedLM"),otr=o(" (MPNet model)"),rtr=l(),_C=a("li"),hhe=a("strong"),ttr=o("openai-gpt"),atr=o(" \u2014 "),wG=a("a"),ntr=o("TFOpenAIGPTLMHeadModel"),str=o(" (OpenAI GPT model)"),ltr=l(),bC=a("li"),uhe=a("strong"),itr=o("roberta"),dtr=o(" \u2014 "),AG=a("a"),ctr=o("TFRobertaForMaskedLM"),mtr=o(" (RoBERTa model)"),ftr=l(),vC=a("li"),phe=a("strong"),gtr=o("t5"),htr=o(" \u2014 "),LG=a("a"),utr=o("TFT5ForConditionalGeneration"),ptr=o(" (T5 model)"),_tr=l(),TC=a("li"),_he=a("strong"),btr=o("tapas"),vtr=o(" \u2014 "),BG=a("a"),Ttr=o("TFTapasForMaskedLM"),Ftr=o(" (TAPAS model)"),Ctr=l(),FC=a("li"),bhe=a("strong"),Mtr=o("transfo-xl"),Etr=o(" \u2014 "),xG=a("a"),ytr=o("TFTransfoXLLMHeadModel"),wtr=o(" (Transformer-XL model)"),Atr=l(),CC=a("li"),vhe=a("strong"),Ltr=o("xlm"),Btr=o(" \u2014 "),kG=a("a"),xtr=o("TFXLMWithLMHeadModel"),ktr=o(" (XLM model)"),Rtr=l(),MC=a("li"),The=a("strong"),Str=o("xlm-roberta"),Ptr=o(" \u2014 "),RG=a("a"),$tr=o("TFXLMRobertaForMaskedLM"),Itr=o(" (XLM-RoBERTa model)"),Ntr=l(),EC=a("li"),Fhe=a("strong"),Dtr=o("xlnet"),jtr=o(" \u2014 "),SG=a("a"),qtr=o("TFXLNetLMHeadModel"),Gtr=o(" (XLNet model)"),Otr=l(),Che=a("p"),Xtr=o("Examples:"),Vtr=l(),m(ZA.$$.fragment),dRe=l(),bc=a("h2"),yC=a("a"),Mhe=a("span"),m(e0.$$.fragment),ztr=l(),Ehe=a("span"),Wtr=o("TFAutoModelForCausalLM"),cRe=l(),Fr=a("div"),m(o0.$$.fragment),Qtr=l(),vc=a("p"),Htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=a("code"),Utr=o("from_pretrained()"),Jtr=o("class method or the "),whe=a("code"),Ytr=o("from_config()"),Ktr=o(`class
method.`),Ztr=l(),r0=a("p"),ear=o("This class cannot be instantiated directly using "),Ahe=a("code"),oar=o("__init__()"),rar=o(" (throws an error)."),tar=l(),ut=a("div"),m(t0.$$.fragment),aar=l(),Lhe=a("p"),nar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sar=l(),Tc=a("p"),lar=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),iar=o("not"),dar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=a("code"),car=o("from_pretrained()"),mar=o("to load the model weights."),far=l(),khe=a("p"),gar=o("Examples:"),har=l(),m(a0.$$.fragment),uar=l(),po=a("div"),m(n0.$$.fragment),par=l(),Rhe=a("p"),_ar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bar=l(),bn=a("p"),Tar=o("The model class to instantiate is selected based on the "),She=a("code"),Far=o("model_type"),Car=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),yar=o("pretrained_model_name_or_path"),war=o(":"),Aar=l(),ge=a("ul"),wC=a("li"),Ihe=a("strong"),Lar=o("bert"),Bar=o(" \u2014 "),PG=a("a"),xar=o("TFBertLMHeadModel"),kar=o(" (BERT model)"),Rar=l(),AC=a("li"),Nhe=a("strong"),Sar=o("camembert"),Par=o(" \u2014 "),$G=a("a"),$ar=o("TFCamembertForCausalLM"),Iar=o(" (CamemBERT model)"),Nar=l(),LC=a("li"),Dhe=a("strong"),Dar=o("ctrl"),jar=o(" \u2014 "),IG=a("a"),qar=o("TFCTRLLMHeadModel"),Gar=o(" (CTRL model)"),Oar=l(),BC=a("li"),jhe=a("strong"),Xar=o("gpt2"),Var=o(" \u2014 "),NG=a("a"),zar=o("TFGPT2LMHeadModel"),War=o(" (OpenAI GPT-2 model)"),Qar=l(),xC=a("li"),qhe=a("strong"),Har=o("openai-gpt"),Uar=o(" \u2014 "),DG=a("a"),Jar=o("TFOpenAIGPTLMHeadModel"),Yar=o(" (OpenAI GPT model)"),Kar=l(),kC=a("li"),Ghe=a("strong"),Zar=o("rembert"),enr=o(" \u2014 "),jG=a("a"),onr=o("TFRemBertForCausalLM"),rnr=o(" (RemBERT model)"),tnr=l(),RC=a("li"),Ohe=a("strong"),anr=o("roberta"),nnr=o(" \u2014 "),qG=a("a"),snr=o("TFRobertaForCausalLM"),lnr=o(" (RoBERTa model)"),inr=l(),SC=a("li"),Xhe=a("strong"),dnr=o("roformer"),cnr=o(" \u2014 "),GG=a("a"),mnr=o("TFRoFormerForCausalLM"),fnr=o(" (RoFormer model)"),gnr=l(),PC=a("li"),Vhe=a("strong"),hnr=o("transfo-xl"),unr=o(" \u2014 "),OG=a("a"),pnr=o("TFTransfoXLLMHeadModel"),_nr=o(" (Transformer-XL model)"),bnr=l(),$C=a("li"),zhe=a("strong"),vnr=o("xlm"),Tnr=o(" \u2014 "),XG=a("a"),Fnr=o("TFXLMWithLMHeadModel"),Cnr=o(" (XLM model)"),Mnr=l(),IC=a("li"),Whe=a("strong"),Enr=o("xlnet"),ynr=o(" \u2014 "),VG=a("a"),wnr=o("TFXLNetLMHeadModel"),Anr=o(" (XLNet model)"),Lnr=l(),Qhe=a("p"),Bnr=o("Examples:"),xnr=l(),m(s0.$$.fragment),mRe=l(),Fc=a("h2"),NC=a("a"),Hhe=a("span"),m(l0.$$.fragment),knr=l(),Uhe=a("span"),Rnr=o("TFAutoModelForImageClassification"),fRe=l(),Cr=a("div"),m(i0.$$.fragment),Snr=l(),Cc=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=a("code"),$nr=o("from_pretrained()"),Inr=o("class method or the "),Yhe=a("code"),Nnr=o("from_config()"),Dnr=o(`class
method.`),jnr=l(),d0=a("p"),qnr=o("This class cannot be instantiated directly using "),Khe=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Xnr=l(),pt=a("div"),m(c0.$$.fragment),Vnr=l(),Zhe=a("p"),znr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wnr=l(),Mc=a("p"),Qnr=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oue=a("code"),Jnr=o("from_pretrained()"),Ynr=o("to load the model weights."),Knr=l(),rue=a("p"),Znr=o("Examples:"),esr=l(),m(m0.$$.fragment),osr=l(),_o=a("div"),m(f0.$$.fragment),rsr=l(),tue=a("p"),tsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),asr=l(),vn=a("p"),nsr=o("The model class to instantiate is selected based on the "),aue=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),csr=o("pretrained_model_name_or_path"),msr=o(":"),fsr=l(),g0=a("ul"),DC=a("li"),lue=a("strong"),gsr=o("convnext"),hsr=o(" \u2014 "),zG=a("a"),usr=o("TFConvNextForImageClassification"),psr=o(" (ConvNext model)"),_sr=l(),jC=a("li"),iue=a("strong"),bsr=o("vit"),vsr=o(" \u2014 "),WG=a("a"),Tsr=o("TFViTForImageClassification"),Fsr=o(" (ViT model)"),Csr=l(),due=a("p"),Msr=o("Examples:"),Esr=l(),m(h0.$$.fragment),gRe=l(),Ec=a("h2"),qC=a("a"),cue=a("span"),m(u0.$$.fragment),ysr=l(),mue=a("span"),wsr=o("TFAutoModelForMaskedLM"),hRe=l(),Mr=a("div"),m(p0.$$.fragment),Asr=l(),yc=a("p"),Lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fue=a("code"),Bsr=o("from_pretrained()"),xsr=o("class method or the "),gue=a("code"),ksr=o("from_config()"),Rsr=o(`class
method.`),Ssr=l(),_0=a("p"),Psr=o("This class cannot be instantiated directly using "),hue=a("code"),$sr=o("__init__()"),Isr=o(" (throws an error)."),Nsr=l(),_t=a("div"),m(b0.$$.fragment),Dsr=l(),uue=a("p"),jsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qsr=l(),wc=a("p"),Gsr=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),Osr=o("not"),Xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ue=a("code"),Vsr=o("from_pretrained()"),zsr=o("to load the model weights."),Wsr=l(),bue=a("p"),Qsr=o("Examples:"),Hsr=l(),m(v0.$$.fragment),Usr=l(),bo=a("div"),m(T0.$$.fragment),Jsr=l(),vue=a("p"),Ysr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ksr=l(),Tn=a("p"),Zsr=o("The model class to instantiate is selected based on the "),Tue=a("code"),elr=o("model_type"),olr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),rlr=o("pretrained_model_name_or_path"),tlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),alr=o("pretrained_model_name_or_path"),nlr=o(":"),slr=l(),J=a("ul"),GC=a("li"),Mue=a("strong"),llr=o("albert"),ilr=o(" \u2014 "),QG=a("a"),dlr=o("TFAlbertForMaskedLM"),clr=o(" (ALBERT model)"),mlr=l(),OC=a("li"),Eue=a("strong"),flr=o("bert"),glr=o(" \u2014 "),HG=a("a"),hlr=o("TFBertForMaskedLM"),ulr=o(" (BERT model)"),plr=l(),XC=a("li"),yue=a("strong"),_lr=o("camembert"),blr=o(" \u2014 "),UG=a("a"),vlr=o("TFCamembertForMaskedLM"),Tlr=o(" (CamemBERT model)"),Flr=l(),VC=a("li"),wue=a("strong"),Clr=o("convbert"),Mlr=o(" \u2014 "),JG=a("a"),Elr=o("TFConvBertForMaskedLM"),ylr=o(" (ConvBERT model)"),wlr=l(),zC=a("li"),Aue=a("strong"),Alr=o("deberta"),Llr=o(" \u2014 "),YG=a("a"),Blr=o("TFDebertaForMaskedLM"),xlr=o(" (DeBERTa model)"),klr=l(),WC=a("li"),Lue=a("strong"),Rlr=o("deberta-v2"),Slr=o(" \u2014 "),KG=a("a"),Plr=o("TFDebertaV2ForMaskedLM"),$lr=o(" (DeBERTa-v2 model)"),Ilr=l(),QC=a("li"),Bue=a("strong"),Nlr=o("distilbert"),Dlr=o(" \u2014 "),ZG=a("a"),jlr=o("TFDistilBertForMaskedLM"),qlr=o(" (DistilBERT model)"),Glr=l(),HC=a("li"),xue=a("strong"),Olr=o("electra"),Xlr=o(" \u2014 "),eO=a("a"),Vlr=o("TFElectraForMaskedLM"),zlr=o(" (ELECTRA model)"),Wlr=l(),UC=a("li"),kue=a("strong"),Qlr=o("flaubert"),Hlr=o(" \u2014 "),oO=a("a"),Ulr=o("TFFlaubertWithLMHeadModel"),Jlr=o(" (FlauBERT model)"),Ylr=l(),JC=a("li"),Rue=a("strong"),Klr=o("funnel"),Zlr=o(" \u2014 "),rO=a("a"),eir=o("TFFunnelForMaskedLM"),oir=o(" (Funnel Transformer model)"),rir=l(),YC=a("li"),Sue=a("strong"),tir=o("layoutlm"),air=o(" \u2014 "),tO=a("a"),nir=o("TFLayoutLMForMaskedLM"),sir=o(" (LayoutLM model)"),lir=l(),KC=a("li"),Pue=a("strong"),iir=o("longformer"),dir=o(" \u2014 "),aO=a("a"),cir=o("TFLongformerForMaskedLM"),mir=o(" (Longformer model)"),fir=l(),ZC=a("li"),$ue=a("strong"),gir=o("mobilebert"),hir=o(" \u2014 "),nO=a("a"),uir=o("TFMobileBertForMaskedLM"),pir=o(" (MobileBERT model)"),_ir=l(),eM=a("li"),Iue=a("strong"),bir=o("mpnet"),vir=o(" \u2014 "),sO=a("a"),Tir=o("TFMPNetForMaskedLM"),Fir=o(" (MPNet model)"),Cir=l(),oM=a("li"),Nue=a("strong"),Mir=o("rembert"),Eir=o(" \u2014 "),lO=a("a"),yir=o("TFRemBertForMaskedLM"),wir=o(" (RemBERT model)"),Air=l(),rM=a("li"),Due=a("strong"),Lir=o("roberta"),Bir=o(" \u2014 "),iO=a("a"),xir=o("TFRobertaForMaskedLM"),kir=o(" (RoBERTa model)"),Rir=l(),tM=a("li"),jue=a("strong"),Sir=o("roformer"),Pir=o(" \u2014 "),dO=a("a"),$ir=o("TFRoFormerForMaskedLM"),Iir=o(" (RoFormer model)"),Nir=l(),aM=a("li"),que=a("strong"),Dir=o("tapas"),jir=o(" \u2014 "),cO=a("a"),qir=o("TFTapasForMaskedLM"),Gir=o(" (TAPAS model)"),Oir=l(),nM=a("li"),Gue=a("strong"),Xir=o("xlm"),Vir=o(" \u2014 "),mO=a("a"),zir=o("TFXLMWithLMHeadModel"),Wir=o(" (XLM model)"),Qir=l(),sM=a("li"),Oue=a("strong"),Hir=o("xlm-roberta"),Uir=o(" \u2014 "),fO=a("a"),Jir=o("TFXLMRobertaForMaskedLM"),Yir=o(" (XLM-RoBERTa model)"),Kir=l(),Xue=a("p"),Zir=o("Examples:"),edr=l(),m(F0.$$.fragment),uRe=l(),Ac=a("h2"),lM=a("a"),Vue=a("span"),m(C0.$$.fragment),odr=l(),zue=a("span"),rdr=o("TFAutoModelForSeq2SeqLM"),pRe=l(),Er=a("div"),m(M0.$$.fragment),tdr=l(),Lc=a("p"),adr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wue=a("code"),ndr=o("from_pretrained()"),sdr=o("class method or the "),Que=a("code"),ldr=o("from_config()"),idr=o(`class
method.`),ddr=l(),E0=a("p"),cdr=o("This class cannot be instantiated directly using "),Hue=a("code"),mdr=o("__init__()"),fdr=o(" (throws an error)."),gdr=l(),bt=a("div"),m(y0.$$.fragment),hdr=l(),Uue=a("p"),udr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pdr=l(),Bc=a("p"),_dr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),bdr=o("not"),vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=a("code"),Tdr=o("from_pretrained()"),Fdr=o("to load the model weights."),Cdr=l(),Kue=a("p"),Mdr=o("Examples:"),Edr=l(),m(w0.$$.fragment),ydr=l(),vo=a("div"),m(A0.$$.fragment),wdr=l(),Zue=a("p"),Adr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ldr=l(),Fn=a("p"),Bdr=o("The model class to instantiate is selected based on the "),epe=a("code"),xdr=o("model_type"),kdr=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),Rdr=o("pretrained_model_name_or_path"),Sdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),Pdr=o("pretrained_model_name_or_path"),$dr=o(":"),Idr=l(),pe=a("ul"),iM=a("li"),tpe=a("strong"),Ndr=o("bart"),Ddr=o(" \u2014 "),gO=a("a"),jdr=o("TFBartForConditionalGeneration"),qdr=o(" (BART model)"),Gdr=l(),dM=a("li"),ape=a("strong"),Odr=o("blenderbot"),Xdr=o(" \u2014 "),hO=a("a"),Vdr=o("TFBlenderbotForConditionalGeneration"),zdr=o(" (Blenderbot model)"),Wdr=l(),cM=a("li"),npe=a("strong"),Qdr=o("blenderbot-small"),Hdr=o(" \u2014 "),uO=a("a"),Udr=o("TFBlenderbotSmallForConditionalGeneration"),Jdr=o(" (BlenderbotSmall model)"),Ydr=l(),mM=a("li"),spe=a("strong"),Kdr=o("encoder-decoder"),Zdr=o(" \u2014 "),pO=a("a"),ecr=o("TFEncoderDecoderModel"),ocr=o(" (Encoder decoder model)"),rcr=l(),fM=a("li"),lpe=a("strong"),tcr=o("led"),acr=o(" \u2014 "),_O=a("a"),ncr=o("TFLEDForConditionalGeneration"),scr=o(" (LED model)"),lcr=l(),gM=a("li"),ipe=a("strong"),icr=o("marian"),dcr=o(" \u2014 "),bO=a("a"),ccr=o("TFMarianMTModel"),mcr=o(" (Marian model)"),fcr=l(),hM=a("li"),dpe=a("strong"),gcr=o("mbart"),hcr=o(" \u2014 "),vO=a("a"),ucr=o("TFMBartForConditionalGeneration"),pcr=o(" (mBART model)"),_cr=l(),uM=a("li"),cpe=a("strong"),bcr=o("mt5"),vcr=o(" \u2014 "),TO=a("a"),Tcr=o("TFMT5ForConditionalGeneration"),Fcr=o(" (mT5 model)"),Ccr=l(),pM=a("li"),mpe=a("strong"),Mcr=o("pegasus"),Ecr=o(" \u2014 "),FO=a("a"),ycr=o("TFPegasusForConditionalGeneration"),wcr=o(" (Pegasus model)"),Acr=l(),_M=a("li"),fpe=a("strong"),Lcr=o("t5"),Bcr=o(" \u2014 "),CO=a("a"),xcr=o("TFT5ForConditionalGeneration"),kcr=o(" (T5 model)"),Rcr=l(),gpe=a("p"),Scr=o("Examples:"),Pcr=l(),m(L0.$$.fragment),_Re=l(),xc=a("h2"),bM=a("a"),hpe=a("span"),m(B0.$$.fragment),$cr=l(),upe=a("span"),Icr=o("TFAutoModelForSequenceClassification"),bRe=l(),yr=a("div"),m(x0.$$.fragment),Ncr=l(),kc=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ppe=a("code"),jcr=o("from_pretrained()"),qcr=o("class method or the "),_pe=a("code"),Gcr=o("from_config()"),Ocr=o(`class
method.`),Xcr=l(),k0=a("p"),Vcr=o("This class cannot be instantiated directly using "),bpe=a("code"),zcr=o("__init__()"),Wcr=o(" (throws an error)."),Qcr=l(),vt=a("div"),m(R0.$$.fragment),Hcr=l(),vpe=a("p"),Ucr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jcr=l(),Rc=a("p"),Ycr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Kcr=o("not"),Zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),emr=o("from_pretrained()"),omr=o("to load the model weights."),rmr=l(),Cpe=a("p"),tmr=o("Examples:"),amr=l(),m(S0.$$.fragment),nmr=l(),To=a("div"),m(P0.$$.fragment),smr=l(),Mpe=a("p"),lmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),imr=l(),Cn=a("p"),dmr=o("The model class to instantiate is selected based on the "),Epe=a("code"),cmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),fmr=o("pretrained_model_name_or_path"),gmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),hmr=o("pretrained_model_name_or_path"),umr=o(":"),pmr=l(),V=a("ul"),vM=a("li"),Ape=a("strong"),_mr=o("albert"),bmr=o(" \u2014 "),MO=a("a"),vmr=o("TFAlbertForSequenceClassification"),Tmr=o(" (ALBERT model)"),Fmr=l(),TM=a("li"),Lpe=a("strong"),Cmr=o("bert"),Mmr=o(" \u2014 "),EO=a("a"),Emr=o("TFBertForSequenceClassification"),ymr=o(" (BERT model)"),wmr=l(),FM=a("li"),Bpe=a("strong"),Amr=o("camembert"),Lmr=o(" \u2014 "),yO=a("a"),Bmr=o("TFCamembertForSequenceClassification"),xmr=o(" (CamemBERT model)"),kmr=l(),CM=a("li"),xpe=a("strong"),Rmr=o("convbert"),Smr=o(" \u2014 "),wO=a("a"),Pmr=o("TFConvBertForSequenceClassification"),$mr=o(" (ConvBERT model)"),Imr=l(),MM=a("li"),kpe=a("strong"),Nmr=o("ctrl"),Dmr=o(" \u2014 "),AO=a("a"),jmr=o("TFCTRLForSequenceClassification"),qmr=o(" (CTRL model)"),Gmr=l(),EM=a("li"),Rpe=a("strong"),Omr=o("deberta"),Xmr=o(" \u2014 "),LO=a("a"),Vmr=o("TFDebertaForSequenceClassification"),zmr=o(" (DeBERTa model)"),Wmr=l(),yM=a("li"),Spe=a("strong"),Qmr=o("deberta-v2"),Hmr=o(" \u2014 "),BO=a("a"),Umr=o("TFDebertaV2ForSequenceClassification"),Jmr=o(" (DeBERTa-v2 model)"),Ymr=l(),wM=a("li"),Ppe=a("strong"),Kmr=o("distilbert"),Zmr=o(" \u2014 "),xO=a("a"),efr=o("TFDistilBertForSequenceClassification"),ofr=o(" (DistilBERT model)"),rfr=l(),AM=a("li"),$pe=a("strong"),tfr=o("electra"),afr=o(" \u2014 "),kO=a("a"),nfr=o("TFElectraForSequenceClassification"),sfr=o(" (ELECTRA model)"),lfr=l(),LM=a("li"),Ipe=a("strong"),ifr=o("flaubert"),dfr=o(" \u2014 "),RO=a("a"),cfr=o("TFFlaubertForSequenceClassification"),mfr=o(" (FlauBERT model)"),ffr=l(),BM=a("li"),Npe=a("strong"),gfr=o("funnel"),hfr=o(" \u2014 "),SO=a("a"),ufr=o("TFFunnelForSequenceClassification"),pfr=o(" (Funnel Transformer model)"),_fr=l(),xM=a("li"),Dpe=a("strong"),bfr=o("gpt2"),vfr=o(" \u2014 "),PO=a("a"),Tfr=o("TFGPT2ForSequenceClassification"),Ffr=o(" (OpenAI GPT-2 model)"),Cfr=l(),kM=a("li"),jpe=a("strong"),Mfr=o("layoutlm"),Efr=o(" \u2014 "),$O=a("a"),yfr=o("TFLayoutLMForSequenceClassification"),wfr=o(" (LayoutLM model)"),Afr=l(),RM=a("li"),qpe=a("strong"),Lfr=o("longformer"),Bfr=o(" \u2014 "),IO=a("a"),xfr=o("TFLongformerForSequenceClassification"),kfr=o(" (Longformer model)"),Rfr=l(),SM=a("li"),Gpe=a("strong"),Sfr=o("mobilebert"),Pfr=o(" \u2014 "),NO=a("a"),$fr=o("TFMobileBertForSequenceClassification"),Ifr=o(" (MobileBERT model)"),Nfr=l(),PM=a("li"),Ope=a("strong"),Dfr=o("mpnet"),jfr=o(" \u2014 "),DO=a("a"),qfr=o("TFMPNetForSequenceClassification"),Gfr=o(" (MPNet model)"),Ofr=l(),$M=a("li"),Xpe=a("strong"),Xfr=o("openai-gpt"),Vfr=o(" \u2014 "),jO=a("a"),zfr=o("TFOpenAIGPTForSequenceClassification"),Wfr=o(" (OpenAI GPT model)"),Qfr=l(),IM=a("li"),Vpe=a("strong"),Hfr=o("rembert"),Ufr=o(" \u2014 "),qO=a("a"),Jfr=o("TFRemBertForSequenceClassification"),Yfr=o(" (RemBERT model)"),Kfr=l(),NM=a("li"),zpe=a("strong"),Zfr=o("roberta"),egr=o(" \u2014 "),GO=a("a"),ogr=o("TFRobertaForSequenceClassification"),rgr=o(" (RoBERTa model)"),tgr=l(),DM=a("li"),Wpe=a("strong"),agr=o("roformer"),ngr=o(" \u2014 "),OO=a("a"),sgr=o("TFRoFormerForSequenceClassification"),lgr=o(" (RoFormer model)"),igr=l(),jM=a("li"),Qpe=a("strong"),dgr=o("tapas"),cgr=o(" \u2014 "),XO=a("a"),mgr=o("TFTapasForSequenceClassification"),fgr=o(" (TAPAS model)"),ggr=l(),qM=a("li"),Hpe=a("strong"),hgr=o("transfo-xl"),ugr=o(" \u2014 "),VO=a("a"),pgr=o("TFTransfoXLForSequenceClassification"),_gr=o(" (Transformer-XL model)"),bgr=l(),GM=a("li"),Upe=a("strong"),vgr=o("xlm"),Tgr=o(" \u2014 "),zO=a("a"),Fgr=o("TFXLMForSequenceClassification"),Cgr=o(" (XLM model)"),Mgr=l(),OM=a("li"),Jpe=a("strong"),Egr=o("xlm-roberta"),ygr=o(" \u2014 "),WO=a("a"),wgr=o("TFXLMRobertaForSequenceClassification"),Agr=o(" (XLM-RoBERTa model)"),Lgr=l(),XM=a("li"),Ype=a("strong"),Bgr=o("xlnet"),xgr=o(" \u2014 "),QO=a("a"),kgr=o("TFXLNetForSequenceClassification"),Rgr=o(" (XLNet model)"),Sgr=l(),Kpe=a("p"),Pgr=o("Examples:"),$gr=l(),m($0.$$.fragment),vRe=l(),Sc=a("h2"),VM=a("a"),Zpe=a("span"),m(I0.$$.fragment),Igr=l(),e_e=a("span"),Ngr=o("TFAutoModelForMultipleChoice"),TRe=l(),wr=a("div"),m(N0.$$.fragment),Dgr=l(),Pc=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),o_e=a("code"),qgr=o("from_pretrained()"),Ggr=o("class method or the "),r_e=a("code"),Ogr=o("from_config()"),Xgr=o(`class
method.`),Vgr=l(),D0=a("p"),zgr=o("This class cannot be instantiated directly using "),t_e=a("code"),Wgr=o("__init__()"),Qgr=o(" (throws an error)."),Hgr=l(),Tt=a("div"),m(j0.$$.fragment),Ugr=l(),a_e=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ygr=l(),$c=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s_e=a("code"),ohr=o("from_pretrained()"),rhr=o("to load the model weights."),thr=l(),l_e=a("p"),ahr=o("Examples:"),nhr=l(),m(q0.$$.fragment),shr=l(),Fo=a("div"),m(G0.$$.fragment),lhr=l(),i_e=a("p"),ihr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dhr=l(),Mn=a("p"),chr=o("The model class to instantiate is selected based on the "),d_e=a("code"),mhr=o("model_type"),fhr=o(` property of the config object (either
passed as an argument or loaded from `),c_e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),uhr=o("pretrained_model_name_or_path"),phr=o(":"),_hr=l(),ae=a("ul"),zM=a("li"),f_e=a("strong"),bhr=o("albert"),vhr=o(" \u2014 "),HO=a("a"),Thr=o("TFAlbertForMultipleChoice"),Fhr=o(" (ALBERT model)"),Chr=l(),WM=a("li"),g_e=a("strong"),Mhr=o("bert"),Ehr=o(" \u2014 "),UO=a("a"),yhr=o("TFBertForMultipleChoice"),whr=o(" (BERT model)"),Ahr=l(),QM=a("li"),h_e=a("strong"),Lhr=o("camembert"),Bhr=o(" \u2014 "),JO=a("a"),xhr=o("TFCamembertForMultipleChoice"),khr=o(" (CamemBERT model)"),Rhr=l(),HM=a("li"),u_e=a("strong"),Shr=o("convbert"),Phr=o(" \u2014 "),YO=a("a"),$hr=o("TFConvBertForMultipleChoice"),Ihr=o(" (ConvBERT model)"),Nhr=l(),UM=a("li"),p_e=a("strong"),Dhr=o("distilbert"),jhr=o(" \u2014 "),KO=a("a"),qhr=o("TFDistilBertForMultipleChoice"),Ghr=o(" (DistilBERT model)"),Ohr=l(),JM=a("li"),__e=a("strong"),Xhr=o("electra"),Vhr=o(" \u2014 "),ZO=a("a"),zhr=o("TFElectraForMultipleChoice"),Whr=o(" (ELECTRA model)"),Qhr=l(),YM=a("li"),b_e=a("strong"),Hhr=o("flaubert"),Uhr=o(" \u2014 "),eX=a("a"),Jhr=o("TFFlaubertForMultipleChoice"),Yhr=o(" (FlauBERT model)"),Khr=l(),KM=a("li"),v_e=a("strong"),Zhr=o("funnel"),eur=o(" \u2014 "),oX=a("a"),our=o("TFFunnelForMultipleChoice"),rur=o(" (Funnel Transformer model)"),tur=l(),ZM=a("li"),T_e=a("strong"),aur=o("longformer"),nur=o(" \u2014 "),rX=a("a"),sur=o("TFLongformerForMultipleChoice"),lur=o(" (Longformer model)"),iur=l(),e4=a("li"),F_e=a("strong"),dur=o("mobilebert"),cur=o(" \u2014 "),tX=a("a"),mur=o("TFMobileBertForMultipleChoice"),fur=o(" (MobileBERT model)"),gur=l(),o4=a("li"),C_e=a("strong"),hur=o("mpnet"),uur=o(" \u2014 "),aX=a("a"),pur=o("TFMPNetForMultipleChoice"),_ur=o(" (MPNet model)"),bur=l(),r4=a("li"),M_e=a("strong"),vur=o("rembert"),Tur=o(" \u2014 "),nX=a("a"),Fur=o("TFRemBertForMultipleChoice"),Cur=o(" (RemBERT model)"),Mur=l(),t4=a("li"),E_e=a("strong"),Eur=o("roberta"),yur=o(" \u2014 "),sX=a("a"),wur=o("TFRobertaForMultipleChoice"),Aur=o(" (RoBERTa model)"),Lur=l(),a4=a("li"),y_e=a("strong"),Bur=o("roformer"),xur=o(" \u2014 "),lX=a("a"),kur=o("TFRoFormerForMultipleChoice"),Rur=o(" (RoFormer model)"),Sur=l(),n4=a("li"),w_e=a("strong"),Pur=o("xlm"),$ur=o(" \u2014 "),iX=a("a"),Iur=o("TFXLMForMultipleChoice"),Nur=o(" (XLM model)"),Dur=l(),s4=a("li"),A_e=a("strong"),jur=o("xlm-roberta"),qur=o(" \u2014 "),dX=a("a"),Gur=o("TFXLMRobertaForMultipleChoice"),Our=o(" (XLM-RoBERTa model)"),Xur=l(),l4=a("li"),L_e=a("strong"),Vur=o("xlnet"),zur=o(" \u2014 "),cX=a("a"),Wur=o("TFXLNetForMultipleChoice"),Qur=o(" (XLNet model)"),Hur=l(),B_e=a("p"),Uur=o("Examples:"),Jur=l(),m(O0.$$.fragment),FRe=l(),Ic=a("h2"),i4=a("a"),x_e=a("span"),m(X0.$$.fragment),Yur=l(),k_e=a("span"),Kur=o("TFAutoModelForTableQuestionAnswering"),CRe=l(),Ar=a("div"),m(V0.$$.fragment),Zur=l(),Nc=a("p"),epr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),R_e=a("code"),opr=o("from_pretrained()"),rpr=o("class method or the "),S_e=a("code"),tpr=o("from_config()"),apr=o(`class
method.`),npr=l(),z0=a("p"),spr=o("This class cannot be instantiated directly using "),P_e=a("code"),lpr=o("__init__()"),ipr=o(" (throws an error)."),dpr=l(),Ft=a("div"),m(W0.$$.fragment),cpr=l(),$_e=a("p"),mpr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fpr=l(),Dc=a("p"),gpr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),hpr=o("not"),upr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=a("code"),ppr=o("from_pretrained()"),_pr=o("to load the model weights."),bpr=l(),D_e=a("p"),vpr=o("Examples:"),Tpr=l(),m(Q0.$$.fragment),Fpr=l(),Co=a("div"),m(H0.$$.fragment),Cpr=l(),j_e=a("p"),Mpr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Epr=l(),En=a("p"),ypr=o("The model class to instantiate is selected based on the "),q_e=a("code"),wpr=o("model_type"),Apr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),Lpr=o("pretrained_model_name_or_path"),Bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),xpr=o("pretrained_model_name_or_path"),kpr=o(":"),Rpr=l(),X_e=a("ul"),d4=a("li"),V_e=a("strong"),Spr=o("tapas"),Ppr=o(" \u2014 "),mX=a("a"),$pr=o("TFTapasForQuestionAnswering"),Ipr=o(" (TAPAS model)"),Npr=l(),z_e=a("p"),Dpr=o("Examples:"),jpr=l(),m(U0.$$.fragment),MRe=l(),jc=a("h2"),c4=a("a"),W_e=a("span"),m(J0.$$.fragment),qpr=l(),Q_e=a("span"),Gpr=o("TFAutoModelForTokenClassification"),ERe=l(),Lr=a("div"),m(Y0.$$.fragment),Opr=l(),qc=a("p"),Xpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),H_e=a("code"),Vpr=o("from_pretrained()"),zpr=o("class method or the "),U_e=a("code"),Wpr=o("from_config()"),Qpr=o(`class
method.`),Hpr=l(),K0=a("p"),Upr=o("This class cannot be instantiated directly using "),J_e=a("code"),Jpr=o("__init__()"),Ypr=o(" (throws an error)."),Kpr=l(),Ct=a("div"),m(Z0.$$.fragment),Zpr=l(),Y_e=a("p"),e_r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o_r=l(),Gc=a("p"),r_r=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),t_r=o("not"),a_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Z_e=a("code"),n_r=o("from_pretrained()"),s_r=o("to load the model weights."),l_r=l(),ebe=a("p"),i_r=o("Examples:"),d_r=l(),m(eL.$$.fragment),c_r=l(),Mo=a("div"),m(oL.$$.fragment),m_r=l(),obe=a("p"),f_r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),g_r=l(),yn=a("p"),h_r=o("The model class to instantiate is selected based on the "),rbe=a("code"),u_r=o("model_type"),p_r=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),__r=o("pretrained_model_name_or_path"),b_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),v_r=o("pretrained_model_name_or_path"),T_r=o(":"),F_r=l(),Y=a("ul"),m4=a("li"),nbe=a("strong"),C_r=o("albert"),M_r=o(" \u2014 "),fX=a("a"),E_r=o("TFAlbertForTokenClassification"),y_r=o(" (ALBERT model)"),w_r=l(),f4=a("li"),sbe=a("strong"),A_r=o("bert"),L_r=o(" \u2014 "),gX=a("a"),B_r=o("TFBertForTokenClassification"),x_r=o(" (BERT model)"),k_r=l(),g4=a("li"),lbe=a("strong"),R_r=o("camembert"),S_r=o(" \u2014 "),hX=a("a"),P_r=o("TFCamembertForTokenClassification"),$_r=o(" (CamemBERT model)"),I_r=l(),h4=a("li"),ibe=a("strong"),N_r=o("convbert"),D_r=o(" \u2014 "),uX=a("a"),j_r=o("TFConvBertForTokenClassification"),q_r=o(" (ConvBERT model)"),G_r=l(),u4=a("li"),dbe=a("strong"),O_r=o("deberta"),X_r=o(" \u2014 "),pX=a("a"),V_r=o("TFDebertaForTokenClassification"),z_r=o(" (DeBERTa model)"),W_r=l(),p4=a("li"),cbe=a("strong"),Q_r=o("deberta-v2"),H_r=o(" \u2014 "),_X=a("a"),U_r=o("TFDebertaV2ForTokenClassification"),J_r=o(" (DeBERTa-v2 model)"),Y_r=l(),_4=a("li"),mbe=a("strong"),K_r=o("distilbert"),Z_r=o(" \u2014 "),bX=a("a"),ebr=o("TFDistilBertForTokenClassification"),obr=o(" (DistilBERT model)"),rbr=l(),b4=a("li"),fbe=a("strong"),tbr=o("electra"),abr=o(" \u2014 "),vX=a("a"),nbr=o("TFElectraForTokenClassification"),sbr=o(" (ELECTRA model)"),lbr=l(),v4=a("li"),gbe=a("strong"),ibr=o("flaubert"),dbr=o(" \u2014 "),TX=a("a"),cbr=o("TFFlaubertForTokenClassification"),mbr=o(" (FlauBERT model)"),fbr=l(),T4=a("li"),hbe=a("strong"),gbr=o("funnel"),hbr=o(" \u2014 "),FX=a("a"),ubr=o("TFFunnelForTokenClassification"),pbr=o(" (Funnel Transformer model)"),_br=l(),F4=a("li"),ube=a("strong"),bbr=o("layoutlm"),vbr=o(" \u2014 "),CX=a("a"),Tbr=o("TFLayoutLMForTokenClassification"),Fbr=o(" (LayoutLM model)"),Cbr=l(),C4=a("li"),pbe=a("strong"),Mbr=o("longformer"),Ebr=o(" \u2014 "),MX=a("a"),ybr=o("TFLongformerForTokenClassification"),wbr=o(" (Longformer model)"),Abr=l(),M4=a("li"),_be=a("strong"),Lbr=o("mobilebert"),Bbr=o(" \u2014 "),EX=a("a"),xbr=o("TFMobileBertForTokenClassification"),kbr=o(" (MobileBERT model)"),Rbr=l(),E4=a("li"),bbe=a("strong"),Sbr=o("mpnet"),Pbr=o(" \u2014 "),yX=a("a"),$br=o("TFMPNetForTokenClassification"),Ibr=o(" (MPNet model)"),Nbr=l(),y4=a("li"),vbe=a("strong"),Dbr=o("rembert"),jbr=o(" \u2014 "),wX=a("a"),qbr=o("TFRemBertForTokenClassification"),Gbr=o(" (RemBERT model)"),Obr=l(),w4=a("li"),Tbe=a("strong"),Xbr=o("roberta"),Vbr=o(" \u2014 "),AX=a("a"),zbr=o("TFRobertaForTokenClassification"),Wbr=o(" (RoBERTa model)"),Qbr=l(),A4=a("li"),Fbe=a("strong"),Hbr=o("roformer"),Ubr=o(" \u2014 "),LX=a("a"),Jbr=o("TFRoFormerForTokenClassification"),Ybr=o(" (RoFormer model)"),Kbr=l(),L4=a("li"),Cbe=a("strong"),Zbr=o("xlm"),e2r=o(" \u2014 "),BX=a("a"),o2r=o("TFXLMForTokenClassification"),r2r=o(" (XLM model)"),t2r=l(),B4=a("li"),Mbe=a("strong"),a2r=o("xlm-roberta"),n2r=o(" \u2014 "),xX=a("a"),s2r=o("TFXLMRobertaForTokenClassification"),l2r=o(" (XLM-RoBERTa model)"),i2r=l(),x4=a("li"),Ebe=a("strong"),d2r=o("xlnet"),c2r=o(" \u2014 "),kX=a("a"),m2r=o("TFXLNetForTokenClassification"),f2r=o(" (XLNet model)"),g2r=l(),ybe=a("p"),h2r=o("Examples:"),u2r=l(),m(rL.$$.fragment),yRe=l(),Oc=a("h2"),k4=a("a"),wbe=a("span"),m(tL.$$.fragment),p2r=l(),Abe=a("span"),_2r=o("TFAutoModelForQuestionAnswering"),wRe=l(),Br=a("div"),m(aL.$$.fragment),b2r=l(),Xc=a("p"),v2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lbe=a("code"),T2r=o("from_pretrained()"),F2r=o("class method or the "),Bbe=a("code"),C2r=o("from_config()"),M2r=o(`class
method.`),E2r=l(),nL=a("p"),y2r=o("This class cannot be instantiated directly using "),xbe=a("code"),w2r=o("__init__()"),A2r=o(" (throws an error)."),L2r=l(),Mt=a("div"),m(sL.$$.fragment),B2r=l(),kbe=a("p"),x2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k2r=l(),Vc=a("p"),R2r=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),S2r=o("not"),P2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sbe=a("code"),$2r=o("from_pretrained()"),I2r=o("to load the model weights."),N2r=l(),Pbe=a("p"),D2r=o("Examples:"),j2r=l(),m(lL.$$.fragment),q2r=l(),Eo=a("div"),m(iL.$$.fragment),G2r=l(),$be=a("p"),O2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X2r=l(),wn=a("p"),V2r=o("The model class to instantiate is selected based on the "),Ibe=a("code"),z2r=o("model_type"),W2r=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Q2r=o("pretrained_model_name_or_path"),H2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),U2r=o("pretrained_model_name_or_path"),J2r=o(":"),Y2r=l(),Z=a("ul"),R4=a("li"),jbe=a("strong"),K2r=o("albert"),Z2r=o(" \u2014 "),RX=a("a"),evr=o("TFAlbertForQuestionAnswering"),ovr=o(" (ALBERT model)"),rvr=l(),S4=a("li"),qbe=a("strong"),tvr=o("bert"),avr=o(" \u2014 "),SX=a("a"),nvr=o("TFBertForQuestionAnswering"),svr=o(" (BERT model)"),lvr=l(),P4=a("li"),Gbe=a("strong"),ivr=o("camembert"),dvr=o(" \u2014 "),PX=a("a"),cvr=o("TFCamembertForQuestionAnswering"),mvr=o(" (CamemBERT model)"),fvr=l(),$4=a("li"),Obe=a("strong"),gvr=o("convbert"),hvr=o(" \u2014 "),$X=a("a"),uvr=o("TFConvBertForQuestionAnswering"),pvr=o(" (ConvBERT model)"),_vr=l(),I4=a("li"),Xbe=a("strong"),bvr=o("deberta"),vvr=o(" \u2014 "),IX=a("a"),Tvr=o("TFDebertaForQuestionAnswering"),Fvr=o(" (DeBERTa model)"),Cvr=l(),N4=a("li"),Vbe=a("strong"),Mvr=o("deberta-v2"),Evr=o(" \u2014 "),NX=a("a"),yvr=o("TFDebertaV2ForQuestionAnswering"),wvr=o(" (DeBERTa-v2 model)"),Avr=l(),D4=a("li"),zbe=a("strong"),Lvr=o("distilbert"),Bvr=o(" \u2014 "),DX=a("a"),xvr=o("TFDistilBertForQuestionAnswering"),kvr=o(" (DistilBERT model)"),Rvr=l(),j4=a("li"),Wbe=a("strong"),Svr=o("electra"),Pvr=o(" \u2014 "),jX=a("a"),$vr=o("TFElectraForQuestionAnswering"),Ivr=o(" (ELECTRA model)"),Nvr=l(),q4=a("li"),Qbe=a("strong"),Dvr=o("flaubert"),jvr=o(" \u2014 "),qX=a("a"),qvr=o("TFFlaubertForQuestionAnsweringSimple"),Gvr=o(" (FlauBERT model)"),Ovr=l(),G4=a("li"),Hbe=a("strong"),Xvr=o("funnel"),Vvr=o(" \u2014 "),GX=a("a"),zvr=o("TFFunnelForQuestionAnswering"),Wvr=o(" (Funnel Transformer model)"),Qvr=l(),O4=a("li"),Ube=a("strong"),Hvr=o("longformer"),Uvr=o(" \u2014 "),OX=a("a"),Jvr=o("TFLongformerForQuestionAnswering"),Yvr=o(" (Longformer model)"),Kvr=l(),X4=a("li"),Jbe=a("strong"),Zvr=o("mobilebert"),eTr=o(" \u2014 "),XX=a("a"),oTr=o("TFMobileBertForQuestionAnswering"),rTr=o(" (MobileBERT model)"),tTr=l(),V4=a("li"),Ybe=a("strong"),aTr=o("mpnet"),nTr=o(" \u2014 "),VX=a("a"),sTr=o("TFMPNetForQuestionAnswering"),lTr=o(" (MPNet model)"),iTr=l(),z4=a("li"),Kbe=a("strong"),dTr=o("rembert"),cTr=o(" \u2014 "),zX=a("a"),mTr=o("TFRemBertForQuestionAnswering"),fTr=o(" (RemBERT model)"),gTr=l(),W4=a("li"),Zbe=a("strong"),hTr=o("roberta"),uTr=o(" \u2014 "),WX=a("a"),pTr=o("TFRobertaForQuestionAnswering"),_Tr=o(" (RoBERTa model)"),bTr=l(),Q4=a("li"),e2e=a("strong"),vTr=o("roformer"),TTr=o(" \u2014 "),QX=a("a"),FTr=o("TFRoFormerForQuestionAnswering"),CTr=o(" (RoFormer model)"),MTr=l(),H4=a("li"),o2e=a("strong"),ETr=o("xlm"),yTr=o(" \u2014 "),HX=a("a"),wTr=o("TFXLMForQuestionAnsweringSimple"),ATr=o(" (XLM model)"),LTr=l(),U4=a("li"),r2e=a("strong"),BTr=o("xlm-roberta"),xTr=o(" \u2014 "),UX=a("a"),kTr=o("TFXLMRobertaForQuestionAnswering"),RTr=o(" (XLM-RoBERTa model)"),STr=l(),J4=a("li"),t2e=a("strong"),PTr=o("xlnet"),$Tr=o(" \u2014 "),JX=a("a"),ITr=o("TFXLNetForQuestionAnsweringSimple"),NTr=o(" (XLNet model)"),DTr=l(),a2e=a("p"),jTr=o("Examples:"),qTr=l(),m(dL.$$.fragment),ARe=l(),zc=a("h2"),Y4=a("a"),n2e=a("span"),m(cL.$$.fragment),GTr=l(),s2e=a("span"),OTr=o("TFAutoModelForVision2Seq"),LRe=l(),xr=a("div"),m(mL.$$.fragment),XTr=l(),Wc=a("p"),VTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l2e=a("code"),zTr=o("from_pretrained()"),WTr=o("class method or the "),i2e=a("code"),QTr=o("from_config()"),HTr=o(`class
method.`),UTr=l(),fL=a("p"),JTr=o("This class cannot be instantiated directly using "),d2e=a("code"),YTr=o("__init__()"),KTr=o(" (throws an error)."),ZTr=l(),Et=a("div"),m(gL.$$.fragment),e1r=l(),c2e=a("p"),o1r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r1r=l(),Qc=a("p"),t1r=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),a1r=o("not"),n1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=a("code"),s1r=o("from_pretrained()"),l1r=o("to load the model weights."),i1r=l(),g2e=a("p"),d1r=o("Examples:"),c1r=l(),m(hL.$$.fragment),m1r=l(),yo=a("div"),m(uL.$$.fragment),f1r=l(),h2e=a("p"),g1r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h1r=l(),An=a("p"),u1r=o("The model class to instantiate is selected based on the "),u2e=a("code"),p1r=o("model_type"),_1r=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),b1r=o("pretrained_model_name_or_path"),v1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),T1r=o("pretrained_model_name_or_path"),F1r=o(":"),C1r=l(),b2e=a("ul"),K4=a("li"),v2e=a("strong"),M1r=o("vision-encoder-decoder"),E1r=o(" \u2014 "),YX=a("a"),y1r=o("TFVisionEncoderDecoderModel"),w1r=o(" (Vision Encoder decoder model)"),A1r=l(),T2e=a("p"),L1r=o("Examples:"),B1r=l(),m(pL.$$.fragment),BRe=l(),Hc=a("h2"),Z4=a("a"),F2e=a("span"),m(_L.$$.fragment),x1r=l(),C2e=a("span"),k1r=o("TFAutoModelForSpeechSeq2Seq"),xRe=l(),kr=a("div"),m(bL.$$.fragment),R1r=l(),Uc=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M2e=a("code"),P1r=o("from_pretrained()"),$1r=o("class method or the "),E2e=a("code"),I1r=o("from_config()"),N1r=o(`class
method.`),D1r=l(),vL=a("p"),j1r=o("This class cannot be instantiated directly using "),y2e=a("code"),q1r=o("__init__()"),G1r=o(" (throws an error)."),O1r=l(),yt=a("div"),m(TL.$$.fragment),X1r=l(),w2e=a("p"),V1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z1r=l(),Jc=a("p"),W1r=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),Q1r=o("not"),H1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=a("code"),U1r=o("from_pretrained()"),J1r=o("to load the model weights."),Y1r=l(),B2e=a("p"),K1r=o("Examples:"),Z1r=l(),m(FL.$$.fragment),eFr=l(),wo=a("div"),m(CL.$$.fragment),oFr=l(),x2e=a("p"),rFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tFr=l(),Ln=a("p"),aFr=o("The model class to instantiate is selected based on the "),k2e=a("code"),nFr=o("model_type"),sFr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(":"),mFr=l(),P2e=a("ul"),eE=a("li"),$2e=a("strong"),fFr=o("speech_to_text"),gFr=o(" \u2014 "),KX=a("a"),hFr=o("TFSpeech2TextForConditionalGeneration"),uFr=o(" (Speech2Text model)"),pFr=l(),I2e=a("p"),_Fr=o("Examples:"),bFr=l(),m(ML.$$.fragment),kRe=l(),Yc=a("h2"),oE=a("a"),N2e=a("span"),m(EL.$$.fragment),vFr=l(),D2e=a("span"),TFr=o("FlaxAutoModel"),RRe=l(),Rr=a("div"),m(yL.$$.fragment),FFr=l(),Kc=a("p"),CFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),j2e=a("code"),MFr=o("from_pretrained()"),EFr=o("class method or the "),q2e=a("code"),yFr=o("from_config()"),wFr=o(`class
method.`),AFr=l(),wL=a("p"),LFr=o("This class cannot be instantiated directly using "),G2e=a("code"),BFr=o("__init__()"),xFr=o(" (throws an error)."),kFr=l(),wt=a("div"),m(AL.$$.fragment),RFr=l(),O2e=a("p"),SFr=o("Instantiates one of the base model classes of the library from a configuration."),PFr=l(),Zc=a("p"),$Fr=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),IFr=o("not"),NFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=a("code"),DFr=o("from_pretrained()"),jFr=o("to load the model weights."),qFr=l(),z2e=a("p"),GFr=o("Examples:"),OFr=l(),m(LL.$$.fragment),XFr=l(),Ao=a("div"),m(BL.$$.fragment),VFr=l(),W2e=a("p"),zFr=o("Instantiate one of the base model classes of the library from a pretrained model."),WFr=l(),Bn=a("p"),QFr=o("The model class to instantiate is selected based on the "),Q2e=a("code"),HFr=o("model_type"),UFr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),JFr=o("pretrained_model_name_or_path"),YFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),KFr=o("pretrained_model_name_or_path"),ZFr=o(":"),eCr=l(),z=a("ul"),rE=a("li"),J2e=a("strong"),oCr=o("albert"),rCr=o(" \u2014 "),ZX=a("a"),tCr=o("FlaxAlbertModel"),aCr=o(" (ALBERT model)"),nCr=l(),tE=a("li"),Y2e=a("strong"),sCr=o("bart"),lCr=o(" \u2014 "),eV=a("a"),iCr=o("FlaxBartModel"),dCr=o(" (BART model)"),cCr=l(),aE=a("li"),K2e=a("strong"),mCr=o("beit"),fCr=o(" \u2014 "),oV=a("a"),gCr=o("FlaxBeitModel"),hCr=o(" (BEiT model)"),uCr=l(),nE=a("li"),Z2e=a("strong"),pCr=o("bert"),_Cr=o(" \u2014 "),rV=a("a"),bCr=o("FlaxBertModel"),vCr=o(" (BERT model)"),TCr=l(),sE=a("li"),eve=a("strong"),FCr=o("big_bird"),CCr=o(" \u2014 "),tV=a("a"),MCr=o("FlaxBigBirdModel"),ECr=o(" (BigBird model)"),yCr=l(),lE=a("li"),ove=a("strong"),wCr=o("blenderbot"),ACr=o(" \u2014 "),aV=a("a"),LCr=o("FlaxBlenderbotModel"),BCr=o(" (Blenderbot model)"),xCr=l(),iE=a("li"),rve=a("strong"),kCr=o("blenderbot-small"),RCr=o(" \u2014 "),nV=a("a"),SCr=o("FlaxBlenderbotSmallModel"),PCr=o(" (BlenderbotSmall model)"),$Cr=l(),dE=a("li"),tve=a("strong"),ICr=o("clip"),NCr=o(" \u2014 "),sV=a("a"),DCr=o("FlaxCLIPModel"),jCr=o(" (CLIP model)"),qCr=l(),cE=a("li"),ave=a("strong"),GCr=o("distilbert"),OCr=o(" \u2014 "),lV=a("a"),XCr=o("FlaxDistilBertModel"),VCr=o(" (DistilBERT model)"),zCr=l(),mE=a("li"),nve=a("strong"),WCr=o("electra"),QCr=o(" \u2014 "),iV=a("a"),HCr=o("FlaxElectraModel"),UCr=o(" (ELECTRA model)"),JCr=l(),fE=a("li"),sve=a("strong"),YCr=o("gpt2"),KCr=o(" \u2014 "),dV=a("a"),ZCr=o("FlaxGPT2Model"),eMr=o(" (OpenAI GPT-2 model)"),oMr=l(),gE=a("li"),lve=a("strong"),rMr=o("gpt_neo"),tMr=o(" \u2014 "),cV=a("a"),aMr=o("FlaxGPTNeoModel"),nMr=o(" (GPT Neo model)"),sMr=l(),hE=a("li"),ive=a("strong"),lMr=o("gptj"),iMr=o(" \u2014 "),mV=a("a"),dMr=o("FlaxGPTJModel"),cMr=o(" (GPT-J model)"),mMr=l(),uE=a("li"),dve=a("strong"),fMr=o("marian"),gMr=o(" \u2014 "),fV=a("a"),hMr=o("FlaxMarianModel"),uMr=o(" (Marian model)"),pMr=l(),pE=a("li"),cve=a("strong"),_Mr=o("mbart"),bMr=o(" \u2014 "),gV=a("a"),vMr=o("FlaxMBartModel"),TMr=o(" (mBART model)"),FMr=l(),_E=a("li"),mve=a("strong"),CMr=o("mt5"),MMr=o(" \u2014 "),hV=a("a"),EMr=o("FlaxMT5Model"),yMr=o(" (mT5 model)"),wMr=l(),bE=a("li"),fve=a("strong"),AMr=o("pegasus"),LMr=o(" \u2014 "),uV=a("a"),BMr=o("FlaxPegasusModel"),xMr=o(" (Pegasus model)"),kMr=l(),vE=a("li"),gve=a("strong"),RMr=o("roberta"),SMr=o(" \u2014 "),pV=a("a"),PMr=o("FlaxRobertaModel"),$Mr=o(" (RoBERTa model)"),IMr=l(),TE=a("li"),hve=a("strong"),NMr=o("roformer"),DMr=o(" \u2014 "),_V=a("a"),jMr=o("FlaxRoFormerModel"),qMr=o(" (RoFormer model)"),GMr=l(),FE=a("li"),uve=a("strong"),OMr=o("t5"),XMr=o(" \u2014 "),bV=a("a"),VMr=o("FlaxT5Model"),zMr=o(" (T5 model)"),WMr=l(),CE=a("li"),pve=a("strong"),QMr=o("vision-text-dual-encoder"),HMr=o(" \u2014 "),vV=a("a"),UMr=o("FlaxVisionTextDualEncoderModel"),JMr=o(" (VisionTextDualEncoder model)"),YMr=l(),ME=a("li"),_ve=a("strong"),KMr=o("vit"),ZMr=o(" \u2014 "),TV=a("a"),e4r=o("FlaxViTModel"),o4r=o(" (ViT model)"),r4r=l(),EE=a("li"),bve=a("strong"),t4r=o("wav2vec2"),a4r=o(" \u2014 "),FV=a("a"),n4r=o("FlaxWav2Vec2Model"),s4r=o(" (Wav2Vec2 model)"),l4r=l(),yE=a("li"),vve=a("strong"),i4r=o("xglm"),d4r=o(" \u2014 "),CV=a("a"),c4r=o("FlaxXGLMModel"),m4r=o(" (XGLM model)"),f4r=l(),wE=a("li"),Tve=a("strong"),g4r=o("xlm-roberta"),h4r=o(" \u2014 "),MV=a("a"),u4r=o("FlaxXLMRobertaModel"),p4r=o(" (XLM-RoBERTa model)"),_4r=l(),Fve=a("p"),b4r=o("Examples:"),v4r=l(),m(xL.$$.fragment),SRe=l(),em=a("h2"),AE=a("a"),Cve=a("span"),m(kL.$$.fragment),T4r=l(),Mve=a("span"),F4r=o("FlaxAutoModelForCausalLM"),PRe=l(),Sr=a("div"),m(RL.$$.fragment),C4r=l(),om=a("p"),M4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Eve=a("code"),E4r=o("from_pretrained()"),y4r=o("class method or the "),yve=a("code"),w4r=o("from_config()"),A4r=o(`class
method.`),L4r=l(),SL=a("p"),B4r=o("This class cannot be instantiated directly using "),wve=a("code"),x4r=o("__init__()"),k4r=o(" (throws an error)."),R4r=l(),At=a("div"),m(PL.$$.fragment),S4r=l(),Ave=a("p"),P4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$4r=l(),rm=a("p"),I4r=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),N4r=o("not"),D4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bve=a("code"),j4r=o("from_pretrained()"),q4r=o("to load the model weights."),G4r=l(),xve=a("p"),O4r=o("Examples:"),X4r=l(),m($L.$$.fragment),V4r=l(),Lo=a("div"),m(IL.$$.fragment),z4r=l(),kve=a("p"),W4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q4r=l(),xn=a("p"),H4r=o("The model class to instantiate is selected based on the "),Rve=a("code"),U4r=o("model_type"),J4r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),ca=a("ul"),LE=a("li"),$ve=a("strong"),rEr=o("bart"),tEr=o(" \u2014 "),EV=a("a"),aEr=o("FlaxBartForCausalLM"),nEr=o(" (BART model)"),sEr=l(),BE=a("li"),Ive=a("strong"),lEr=o("gpt2"),iEr=o(" \u2014 "),yV=a("a"),dEr=o("FlaxGPT2LMHeadModel"),cEr=o(" (OpenAI GPT-2 model)"),mEr=l(),xE=a("li"),Nve=a("strong"),fEr=o("gpt_neo"),gEr=o(" \u2014 "),wV=a("a"),hEr=o("FlaxGPTNeoForCausalLM"),uEr=o(" (GPT Neo model)"),pEr=l(),kE=a("li"),Dve=a("strong"),_Er=o("gptj"),bEr=o(" \u2014 "),AV=a("a"),vEr=o("FlaxGPTJForCausalLM"),TEr=o(" (GPT-J model)"),FEr=l(),RE=a("li"),jve=a("strong"),CEr=o("xglm"),MEr=o(" \u2014 "),LV=a("a"),EEr=o("FlaxXGLMForCausalLM"),yEr=o(" (XGLM model)"),wEr=l(),qve=a("p"),AEr=o("Examples:"),LEr=l(),m(NL.$$.fragment),$Re=l(),tm=a("h2"),SE=a("a"),Gve=a("span"),m(DL.$$.fragment),BEr=l(),Ove=a("span"),xEr=o("FlaxAutoModelForPreTraining"),IRe=l(),Pr=a("div"),m(jL.$$.fragment),kEr=l(),am=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xve=a("code"),SEr=o("from_pretrained()"),PEr=o("class method or the "),Vve=a("code"),$Er=o("from_config()"),IEr=o(`class
method.`),NEr=l(),qL=a("p"),DEr=o("This class cannot be instantiated directly using "),zve=a("code"),jEr=o("__init__()"),qEr=o(" (throws an error)."),GEr=l(),Lt=a("div"),m(GL.$$.fragment),OEr=l(),Wve=a("p"),XEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VEr=l(),nm=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),WEr=o("not"),QEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hve=a("code"),HEr=o("from_pretrained()"),UEr=o("to load the model weights."),JEr=l(),Uve=a("p"),YEr=o("Examples:"),KEr=l(),m(OL.$$.fragment),ZEr=l(),Bo=a("div"),m(XL.$$.fragment),e3r=l(),Jve=a("p"),o3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r3r=l(),kn=a("p"),t3r=o("The model class to instantiate is selected based on the "),Yve=a("code"),a3r=o("model_type"),n3r=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),s3r=o("pretrained_model_name_or_path"),l3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(":"),c3r=l(),ce=a("ul"),PE=a("li"),eTe=a("strong"),m3r=o("albert"),f3r=o(" \u2014 "),BV=a("a"),g3r=o("FlaxAlbertForPreTraining"),h3r=o(" (ALBERT model)"),u3r=l(),$E=a("li"),oTe=a("strong"),p3r=o("bart"),_3r=o(" \u2014 "),xV=a("a"),b3r=o("FlaxBartForConditionalGeneration"),v3r=o(" (BART model)"),T3r=l(),IE=a("li"),rTe=a("strong"),F3r=o("bert"),C3r=o(" \u2014 "),kV=a("a"),M3r=o("FlaxBertForPreTraining"),E3r=o(" (BERT model)"),y3r=l(),NE=a("li"),tTe=a("strong"),w3r=o("big_bird"),A3r=o(" \u2014 "),RV=a("a"),L3r=o("FlaxBigBirdForPreTraining"),B3r=o(" (BigBird model)"),x3r=l(),DE=a("li"),aTe=a("strong"),k3r=o("electra"),R3r=o(" \u2014 "),SV=a("a"),S3r=o("FlaxElectraForPreTraining"),P3r=o(" (ELECTRA model)"),$3r=l(),jE=a("li"),nTe=a("strong"),I3r=o("mbart"),N3r=o(" \u2014 "),PV=a("a"),D3r=o("FlaxMBartForConditionalGeneration"),j3r=o(" (mBART model)"),q3r=l(),qE=a("li"),sTe=a("strong"),G3r=o("mt5"),O3r=o(" \u2014 "),$V=a("a"),X3r=o("FlaxMT5ForConditionalGeneration"),V3r=o(" (mT5 model)"),z3r=l(),GE=a("li"),lTe=a("strong"),W3r=o("roberta"),Q3r=o(" \u2014 "),IV=a("a"),H3r=o("FlaxRobertaForMaskedLM"),U3r=o(" (RoBERTa model)"),J3r=l(),OE=a("li"),iTe=a("strong"),Y3r=o("roformer"),K3r=o(" \u2014 "),NV=a("a"),Z3r=o("FlaxRoFormerForMaskedLM"),e5r=o(" (RoFormer model)"),o5r=l(),XE=a("li"),dTe=a("strong"),r5r=o("t5"),t5r=o(" \u2014 "),DV=a("a"),a5r=o("FlaxT5ForConditionalGeneration"),n5r=o(" (T5 model)"),s5r=l(),VE=a("li"),cTe=a("strong"),l5r=o("wav2vec2"),i5r=o(" \u2014 "),jV=a("a"),d5r=o("FlaxWav2Vec2ForPreTraining"),c5r=o(" (Wav2Vec2 model)"),m5r=l(),zE=a("li"),mTe=a("strong"),f5r=o("xlm-roberta"),g5r=o(" \u2014 "),qV=a("a"),h5r=o("FlaxXLMRobertaForMaskedLM"),u5r=o(" (XLM-RoBERTa model)"),p5r=l(),fTe=a("p"),_5r=o("Examples:"),b5r=l(),m(VL.$$.fragment),NRe=l(),sm=a("h2"),WE=a("a"),gTe=a("span"),m(zL.$$.fragment),v5r=l(),hTe=a("span"),T5r=o("FlaxAutoModelForMaskedLM"),DRe=l(),$r=a("div"),m(WL.$$.fragment),F5r=l(),lm=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uTe=a("code"),M5r=o("from_pretrained()"),E5r=o("class method or the "),pTe=a("code"),y5r=o("from_config()"),w5r=o(`class
method.`),A5r=l(),QL=a("p"),L5r=o("This class cannot be instantiated directly using "),_Te=a("code"),B5r=o("__init__()"),x5r=o(" (throws an error)."),k5r=l(),Bt=a("div"),m(HL.$$.fragment),R5r=l(),bTe=a("p"),S5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5r=l(),im=a("p"),$5r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),I5r=o("not"),N5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TTe=a("code"),D5r=o("from_pretrained()"),j5r=o("to load the model weights."),q5r=l(),FTe=a("p"),G5r=o("Examples:"),O5r=l(),m(UL.$$.fragment),X5r=l(),xo=a("div"),m(JL.$$.fragment),V5r=l(),CTe=a("p"),z5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W5r=l(),Rn=a("p"),Q5r=o("The model class to instantiate is selected based on the "),MTe=a("code"),H5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),eyr=l(),_e=a("ul"),QE=a("li"),wTe=a("strong"),oyr=o("albert"),ryr=o(" \u2014 "),GV=a("a"),tyr=o("FlaxAlbertForMaskedLM"),ayr=o(" (ALBERT model)"),nyr=l(),HE=a("li"),ATe=a("strong"),syr=o("bart"),lyr=o(" \u2014 "),OV=a("a"),iyr=o("FlaxBartForConditionalGeneration"),dyr=o(" (BART model)"),cyr=l(),UE=a("li"),LTe=a("strong"),myr=o("bert"),fyr=o(" \u2014 "),XV=a("a"),gyr=o("FlaxBertForMaskedLM"),hyr=o(" (BERT model)"),uyr=l(),JE=a("li"),BTe=a("strong"),pyr=o("big_bird"),_yr=o(" \u2014 "),VV=a("a"),byr=o("FlaxBigBirdForMaskedLM"),vyr=o(" (BigBird model)"),Tyr=l(),YE=a("li"),xTe=a("strong"),Fyr=o("distilbert"),Cyr=o(" \u2014 "),zV=a("a"),Myr=o("FlaxDistilBertForMaskedLM"),Eyr=o(" (DistilBERT model)"),yyr=l(),KE=a("li"),kTe=a("strong"),wyr=o("electra"),Ayr=o(" \u2014 "),WV=a("a"),Lyr=o("FlaxElectraForMaskedLM"),Byr=o(" (ELECTRA model)"),xyr=l(),ZE=a("li"),RTe=a("strong"),kyr=o("mbart"),Ryr=o(" \u2014 "),QV=a("a"),Syr=o("FlaxMBartForConditionalGeneration"),Pyr=o(" (mBART model)"),$yr=l(),e3=a("li"),STe=a("strong"),Iyr=o("roberta"),Nyr=o(" \u2014 "),HV=a("a"),Dyr=o("FlaxRobertaForMaskedLM"),jyr=o(" (RoBERTa model)"),qyr=l(),o3=a("li"),PTe=a("strong"),Gyr=o("roformer"),Oyr=o(" \u2014 "),UV=a("a"),Xyr=o("FlaxRoFormerForMaskedLM"),Vyr=o(" (RoFormer model)"),zyr=l(),r3=a("li"),$Te=a("strong"),Wyr=o("xlm-roberta"),Qyr=o(" \u2014 "),JV=a("a"),Hyr=o("FlaxXLMRobertaForMaskedLM"),Uyr=o(" (XLM-RoBERTa model)"),Jyr=l(),ITe=a("p"),Yyr=o("Examples:"),Kyr=l(),m(YL.$$.fragment),jRe=l(),dm=a("h2"),t3=a("a"),NTe=a("span"),m(KL.$$.fragment),Zyr=l(),DTe=a("span"),ewr=o("FlaxAutoModelForSeq2SeqLM"),qRe=l(),Ir=a("div"),m(ZL.$$.fragment),owr=l(),cm=a("p"),rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jTe=a("code"),twr=o("from_pretrained()"),awr=o("class method or the "),qTe=a("code"),nwr=o("from_config()"),swr=o(`class
method.`),lwr=l(),e7=a("p"),iwr=o("This class cannot be instantiated directly using "),GTe=a("code"),dwr=o("__init__()"),cwr=o(" (throws an error)."),mwr=l(),xt=a("div"),m(o7.$$.fragment),fwr=l(),OTe=a("p"),gwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hwr=l(),mm=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),pwr=o("not"),_wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VTe=a("code"),bwr=o("from_pretrained()"),vwr=o("to load the model weights."),Twr=l(),zTe=a("p"),Fwr=o("Examples:"),Cwr=l(),m(r7.$$.fragment),Mwr=l(),ko=a("div"),m(t7.$$.fragment),Ewr=l(),WTe=a("p"),ywr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wwr=l(),Sn=a("p"),Awr=o("The model class to instantiate is selected based on the "),QTe=a("code"),Lwr=o("model_type"),Bwr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),xwr=o("pretrained_model_name_or_path"),kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),Rwr=o("pretrained_model_name_or_path"),Swr=o(":"),Pwr=l(),Me=a("ul"),a3=a("li"),JTe=a("strong"),$wr=o("bart"),Iwr=o(" \u2014 "),YV=a("a"),Nwr=o("FlaxBartForConditionalGeneration"),Dwr=o(" (BART model)"),jwr=l(),n3=a("li"),YTe=a("strong"),qwr=o("blenderbot"),Gwr=o(" \u2014 "),KV=a("a"),Owr=o("FlaxBlenderbotForConditionalGeneration"),Xwr=o(" (Blenderbot model)"),Vwr=l(),s3=a("li"),KTe=a("strong"),zwr=o("blenderbot-small"),Wwr=o(" \u2014 "),ZV=a("a"),Qwr=o("FlaxBlenderbotSmallForConditionalGeneration"),Hwr=o(" (BlenderbotSmall model)"),Uwr=l(),l3=a("li"),ZTe=a("strong"),Jwr=o("encoder-decoder"),Ywr=o(" \u2014 "),ez=a("a"),Kwr=o("FlaxEncoderDecoderModel"),Zwr=o(" (Encoder decoder model)"),e6r=l(),i3=a("li"),e1e=a("strong"),o6r=o("marian"),r6r=o(" \u2014 "),oz=a("a"),t6r=o("FlaxMarianMTModel"),a6r=o(" (Marian model)"),n6r=l(),d3=a("li"),o1e=a("strong"),s6r=o("mbart"),l6r=o(" \u2014 "),rz=a("a"),i6r=o("FlaxMBartForConditionalGeneration"),d6r=o(" (mBART model)"),c6r=l(),c3=a("li"),r1e=a("strong"),m6r=o("mt5"),f6r=o(" \u2014 "),tz=a("a"),g6r=o("FlaxMT5ForConditionalGeneration"),h6r=o(" (mT5 model)"),u6r=l(),m3=a("li"),t1e=a("strong"),p6r=o("pegasus"),_6r=o(" \u2014 "),az=a("a"),b6r=o("FlaxPegasusForConditionalGeneration"),v6r=o(" (Pegasus model)"),T6r=l(),f3=a("li"),a1e=a("strong"),F6r=o("t5"),C6r=o(" \u2014 "),nz=a("a"),M6r=o("FlaxT5ForConditionalGeneration"),E6r=o(" (T5 model)"),y6r=l(),n1e=a("p"),w6r=o("Examples:"),A6r=l(),m(a7.$$.fragment),GRe=l(),fm=a("h2"),g3=a("a"),s1e=a("span"),m(n7.$$.fragment),L6r=l(),l1e=a("span"),B6r=o("FlaxAutoModelForSequenceClassification"),ORe=l(),Nr=a("div"),m(s7.$$.fragment),x6r=l(),gm=a("p"),k6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),i1e=a("code"),R6r=o("from_pretrained()"),S6r=o("class method or the "),d1e=a("code"),P6r=o("from_config()"),$6r=o(`class
method.`),I6r=l(),l7=a("p"),N6r=o("This class cannot be instantiated directly using "),c1e=a("code"),D6r=o("__init__()"),j6r=o(" (throws an error)."),q6r=l(),kt=a("div"),m(i7.$$.fragment),G6r=l(),m1e=a("p"),O6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X6r=l(),hm=a("p"),V6r=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),z6r=o("not"),W6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g1e=a("code"),Q6r=o("from_pretrained()"),H6r=o("to load the model weights."),U6r=l(),h1e=a("p"),J6r=o("Examples:"),Y6r=l(),m(d7.$$.fragment),K6r=l(),Ro=a("div"),m(c7.$$.fragment),Z6r=l(),u1e=a("p"),eAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oAr=l(),Pn=a("p"),rAr=o("The model class to instantiate is selected based on the "),p1e=a("code"),tAr=o("model_type"),aAr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),lAr=o("pretrained_model_name_or_path"),iAr=o(":"),dAr=l(),be=a("ul"),h3=a("li"),v1e=a("strong"),cAr=o("albert"),mAr=o(" \u2014 "),sz=a("a"),fAr=o("FlaxAlbertForSequenceClassification"),gAr=o(" (ALBERT model)"),hAr=l(),u3=a("li"),T1e=a("strong"),uAr=o("bart"),pAr=o(" \u2014 "),lz=a("a"),_Ar=o("FlaxBartForSequenceClassification"),bAr=o(" (BART model)"),vAr=l(),p3=a("li"),F1e=a("strong"),TAr=o("bert"),FAr=o(" \u2014 "),iz=a("a"),CAr=o("FlaxBertForSequenceClassification"),MAr=o(" (BERT model)"),EAr=l(),_3=a("li"),C1e=a("strong"),yAr=o("big_bird"),wAr=o(" \u2014 "),dz=a("a"),AAr=o("FlaxBigBirdForSequenceClassification"),LAr=o(" (BigBird model)"),BAr=l(),b3=a("li"),M1e=a("strong"),xAr=o("distilbert"),kAr=o(" \u2014 "),cz=a("a"),RAr=o("FlaxDistilBertForSequenceClassification"),SAr=o(" (DistilBERT model)"),PAr=l(),v3=a("li"),E1e=a("strong"),$Ar=o("electra"),IAr=o(" \u2014 "),mz=a("a"),NAr=o("FlaxElectraForSequenceClassification"),DAr=o(" (ELECTRA model)"),jAr=l(),T3=a("li"),y1e=a("strong"),qAr=o("mbart"),GAr=o(" \u2014 "),fz=a("a"),OAr=o("FlaxMBartForSequenceClassification"),XAr=o(" (mBART model)"),VAr=l(),F3=a("li"),w1e=a("strong"),zAr=o("roberta"),WAr=o(" \u2014 "),gz=a("a"),QAr=o("FlaxRobertaForSequenceClassification"),HAr=o(" (RoBERTa model)"),UAr=l(),C3=a("li"),A1e=a("strong"),JAr=o("roformer"),YAr=o(" \u2014 "),hz=a("a"),KAr=o("FlaxRoFormerForSequenceClassification"),ZAr=o(" (RoFormer model)"),e0r=l(),M3=a("li"),L1e=a("strong"),o0r=o("xlm-roberta"),r0r=o(" \u2014 "),uz=a("a"),t0r=o("FlaxXLMRobertaForSequenceClassification"),a0r=o(" (XLM-RoBERTa model)"),n0r=l(),B1e=a("p"),s0r=o("Examples:"),l0r=l(),m(m7.$$.fragment),XRe=l(),um=a("h2"),E3=a("a"),x1e=a("span"),m(f7.$$.fragment),i0r=l(),k1e=a("span"),d0r=o("FlaxAutoModelForQuestionAnswering"),VRe=l(),Dr=a("div"),m(g7.$$.fragment),c0r=l(),pm=a("p"),m0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=a("code"),f0r=o("from_pretrained()"),g0r=o("class method or the "),S1e=a("code"),h0r=o("from_config()"),u0r=o(`class
method.`),p0r=l(),h7=a("p"),_0r=o("This class cannot be instantiated directly using "),P1e=a("code"),b0r=o("__init__()"),v0r=o(" (throws an error)."),T0r=l(),Rt=a("div"),m(u7.$$.fragment),F0r=l(),$1e=a("p"),C0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M0r=l(),_m=a("p"),E0r=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),y0r=o("not"),w0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=a("code"),A0r=o("from_pretrained()"),L0r=o("to load the model weights."),B0r=l(),D1e=a("p"),x0r=o("Examples:"),k0r=l(),m(p7.$$.fragment),R0r=l(),So=a("div"),m(_7.$$.fragment),S0r=l(),j1e=a("p"),P0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$0r=l(),$n=a("p"),I0r=o("The model class to instantiate is selected based on the "),q1e=a("code"),N0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),j0r=o("pretrained_model_name_or_path"),q0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(":"),X0r=l(),ve=a("ul"),y3=a("li"),X1e=a("strong"),V0r=o("albert"),z0r=o(" \u2014 "),pz=a("a"),W0r=o("FlaxAlbertForQuestionAnswering"),Q0r=o(" (ALBERT model)"),H0r=l(),w3=a("li"),V1e=a("strong"),U0r=o("bart"),J0r=o(" \u2014 "),_z=a("a"),Y0r=o("FlaxBartForQuestionAnswering"),K0r=o(" (BART model)"),Z0r=l(),A3=a("li"),z1e=a("strong"),eLr=o("bert"),oLr=o(" \u2014 "),bz=a("a"),rLr=o("FlaxBertForQuestionAnswering"),tLr=o(" (BERT model)"),aLr=l(),L3=a("li"),W1e=a("strong"),nLr=o("big_bird"),sLr=o(" \u2014 "),vz=a("a"),lLr=o("FlaxBigBirdForQuestionAnswering"),iLr=o(" (BigBird model)"),dLr=l(),B3=a("li"),Q1e=a("strong"),cLr=o("distilbert"),mLr=o(" \u2014 "),Tz=a("a"),fLr=o("FlaxDistilBertForQuestionAnswering"),gLr=o(" (DistilBERT model)"),hLr=l(),x3=a("li"),H1e=a("strong"),uLr=o("electra"),pLr=o(" \u2014 "),Fz=a("a"),_Lr=o("FlaxElectraForQuestionAnswering"),bLr=o(" (ELECTRA model)"),vLr=l(),k3=a("li"),U1e=a("strong"),TLr=o("mbart"),FLr=o(" \u2014 "),Cz=a("a"),CLr=o("FlaxMBartForQuestionAnswering"),MLr=o(" (mBART model)"),ELr=l(),R3=a("li"),J1e=a("strong"),yLr=o("roberta"),wLr=o(" \u2014 "),Mz=a("a"),ALr=o("FlaxRobertaForQuestionAnswering"),LLr=o(" (RoBERTa model)"),BLr=l(),S3=a("li"),Y1e=a("strong"),xLr=o("roformer"),kLr=o(" \u2014 "),Ez=a("a"),RLr=o("FlaxRoFormerForQuestionAnswering"),SLr=o(" (RoFormer model)"),PLr=l(),P3=a("li"),K1e=a("strong"),$Lr=o("xlm-roberta"),ILr=o(" \u2014 "),yz=a("a"),NLr=o("FlaxXLMRobertaForQuestionAnswering"),DLr=o(" (XLM-RoBERTa model)"),jLr=l(),Z1e=a("p"),qLr=o("Examples:"),GLr=l(),m(b7.$$.fragment),zRe=l(),bm=a("h2"),$3=a("a"),eFe=a("span"),m(v7.$$.fragment),OLr=l(),oFe=a("span"),XLr=o("FlaxAutoModelForTokenClassification"),WRe=l(),jr=a("div"),m(T7.$$.fragment),VLr=l(),vm=a("p"),zLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rFe=a("code"),WLr=o("from_pretrained()"),QLr=o("class method or the "),tFe=a("code"),HLr=o("from_config()"),ULr=o(`class
method.`),JLr=l(),F7=a("p"),YLr=o("This class cannot be instantiated directly using "),aFe=a("code"),KLr=o("__init__()"),ZLr=o(" (throws an error)."),e7r=l(),St=a("div"),m(C7.$$.fragment),o7r=l(),nFe=a("p"),r7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t7r=l(),Tm=a("p"),a7r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),n7r=o("not"),s7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lFe=a("code"),l7r=o("from_pretrained()"),i7r=o("to load the model weights."),d7r=l(),iFe=a("p"),c7r=o("Examples:"),m7r=l(),m(M7.$$.fragment),f7r=l(),Po=a("div"),m(E7.$$.fragment),g7r=l(),dFe=a("p"),h7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u7r=l(),In=a("p"),p7r=o("The model class to instantiate is selected based on the "),cFe=a("code"),_7r=o("model_type"),b7r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),v7r=o("pretrained_model_name_or_path"),T7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),F7r=o("pretrained_model_name_or_path"),C7r=o(":"),M7r=l(),Se=a("ul"),I3=a("li"),gFe=a("strong"),E7r=o("albert"),y7r=o(" \u2014 "),wz=a("a"),w7r=o("FlaxAlbertForTokenClassification"),A7r=o(" (ALBERT model)"),L7r=l(),N3=a("li"),hFe=a("strong"),B7r=o("bert"),x7r=o(" \u2014 "),Az=a("a"),k7r=o("FlaxBertForTokenClassification"),R7r=o(" (BERT model)"),S7r=l(),D3=a("li"),uFe=a("strong"),P7r=o("big_bird"),$7r=o(" \u2014 "),Lz=a("a"),I7r=o("FlaxBigBirdForTokenClassification"),N7r=o(" (BigBird model)"),D7r=l(),j3=a("li"),pFe=a("strong"),j7r=o("distilbert"),q7r=o(" \u2014 "),Bz=a("a"),G7r=o("FlaxDistilBertForTokenClassification"),O7r=o(" (DistilBERT model)"),X7r=l(),q3=a("li"),_Fe=a("strong"),V7r=o("electra"),z7r=o(" \u2014 "),xz=a("a"),W7r=o("FlaxElectraForTokenClassification"),Q7r=o(" (ELECTRA model)"),H7r=l(),G3=a("li"),bFe=a("strong"),U7r=o("roberta"),J7r=o(" \u2014 "),kz=a("a"),Y7r=o("FlaxRobertaForTokenClassification"),K7r=o(" (RoBERTa model)"),Z7r=l(),O3=a("li"),vFe=a("strong"),e8r=o("roformer"),o8r=o(" \u2014 "),Rz=a("a"),r8r=o("FlaxRoFormerForTokenClassification"),t8r=o(" (RoFormer model)"),a8r=l(),X3=a("li"),TFe=a("strong"),n8r=o("xlm-roberta"),s8r=o(" \u2014 "),Sz=a("a"),l8r=o("FlaxXLMRobertaForTokenClassification"),i8r=o(" (XLM-RoBERTa model)"),d8r=l(),FFe=a("p"),c8r=o("Examples:"),m8r=l(),m(y7.$$.fragment),QRe=l(),Fm=a("h2"),V3=a("a"),CFe=a("span"),m(w7.$$.fragment),f8r=l(),MFe=a("span"),g8r=o("FlaxAutoModelForMultipleChoice"),HRe=l(),qr=a("div"),m(A7.$$.fragment),h8r=l(),Cm=a("p"),u8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EFe=a("code"),p8r=o("from_pretrained()"),_8r=o("class method or the "),yFe=a("code"),b8r=o("from_config()"),v8r=o(`class
method.`),T8r=l(),L7=a("p"),F8r=o("This class cannot be instantiated directly using "),wFe=a("code"),C8r=o("__init__()"),M8r=o(" (throws an error)."),E8r=l(),Pt=a("div"),m(B7.$$.fragment),y8r=l(),AFe=a("p"),w8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A8r=l(),Mm=a("p"),L8r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),B8r=o("not"),x8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BFe=a("code"),k8r=o("from_pretrained()"),R8r=o("to load the model weights."),S8r=l(),xFe=a("p"),P8r=o("Examples:"),$8r=l(),m(x7.$$.fragment),I8r=l(),$o=a("div"),m(k7.$$.fragment),N8r=l(),kFe=a("p"),D8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j8r=l(),Nn=a("p"),q8r=o("The model class to instantiate is selected based on the "),RFe=a("code"),G8r=o("model_type"),O8r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),X8r=o("pretrained_model_name_or_path"),V8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(":"),Q8r=l(),Pe=a("ul"),z3=a("li"),$Fe=a("strong"),H8r=o("albert"),U8r=o(" \u2014 "),Pz=a("a"),J8r=o("FlaxAlbertForMultipleChoice"),Y8r=o(" (ALBERT model)"),K8r=l(),W3=a("li"),IFe=a("strong"),Z8r=o("bert"),e9r=o(" \u2014 "),$z=a("a"),o9r=o("FlaxBertForMultipleChoice"),r9r=o(" (BERT model)"),t9r=l(),Q3=a("li"),NFe=a("strong"),a9r=o("big_bird"),n9r=o(" \u2014 "),Iz=a("a"),s9r=o("FlaxBigBirdForMultipleChoice"),l9r=o(" (BigBird model)"),i9r=l(),H3=a("li"),DFe=a("strong"),d9r=o("distilbert"),c9r=o(" \u2014 "),Nz=a("a"),m9r=o("FlaxDistilBertForMultipleChoice"),f9r=o(" (DistilBERT model)"),g9r=l(),U3=a("li"),jFe=a("strong"),h9r=o("electra"),u9r=o(" \u2014 "),Dz=a("a"),p9r=o("FlaxElectraForMultipleChoice"),_9r=o(" (ELECTRA model)"),b9r=l(),J3=a("li"),qFe=a("strong"),v9r=o("roberta"),T9r=o(" \u2014 "),jz=a("a"),F9r=o("FlaxRobertaForMultipleChoice"),C9r=o(" (RoBERTa model)"),M9r=l(),Y3=a("li"),GFe=a("strong"),E9r=o("roformer"),y9r=o(" \u2014 "),qz=a("a"),w9r=o("FlaxRoFormerForMultipleChoice"),A9r=o(" (RoFormer model)"),L9r=l(),K3=a("li"),OFe=a("strong"),B9r=o("xlm-roberta"),x9r=o(" \u2014 "),Gz=a("a"),k9r=o("FlaxXLMRobertaForMultipleChoice"),R9r=o(" (XLM-RoBERTa model)"),S9r=l(),XFe=a("p"),P9r=o("Examples:"),$9r=l(),m(R7.$$.fragment),URe=l(),Em=a("h2"),Z3=a("a"),VFe=a("span"),m(S7.$$.fragment),I9r=l(),zFe=a("span"),N9r=o("FlaxAutoModelForNextSentencePrediction"),JRe=l(),Gr=a("div"),m(P7.$$.fragment),D9r=l(),ym=a("p"),j9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WFe=a("code"),q9r=o("from_pretrained()"),G9r=o("class method or the "),QFe=a("code"),O9r=o("from_config()"),X9r=o(`class
method.`),V9r=l(),$7=a("p"),z9r=o("This class cannot be instantiated directly using "),HFe=a("code"),W9r=o("__init__()"),Q9r=o(" (throws an error)."),H9r=l(),$t=a("div"),m(I7.$$.fragment),U9r=l(),UFe=a("p"),J9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y9r=l(),wm=a("p"),K9r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),Z9r=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YFe=a("code"),oBr=o("from_pretrained()"),rBr=o("to load the model weights."),tBr=l(),KFe=a("p"),aBr=o("Examples:"),nBr=l(),m(N7.$$.fragment),sBr=l(),Io=a("div"),m(D7.$$.fragment),lBr=l(),ZFe=a("p"),iBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dBr=l(),Dn=a("p"),cBr=o("The model class to instantiate is selected based on the "),eCe=a("code"),mBr=o("model_type"),fBr=o(` property of the config object (either
passed as an argument or loaded from `),oCe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=a("code"),uBr=o("pretrained_model_name_or_path"),pBr=o(":"),_Br=l(),tCe=a("ul"),e5=a("li"),aCe=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),Oz=a("a"),TBr=o("FlaxBertForNextSentencePrediction"),FBr=o(" (BERT model)"),CBr=l(),nCe=a("p"),MBr=o("Examples:"),EBr=l(),m(j7.$$.fragment),YRe=l(),Am=a("h2"),o5=a("a"),sCe=a("span"),m(q7.$$.fragment),yBr=l(),lCe=a("span"),wBr=o("FlaxAutoModelForImageClassification"),KRe=l(),Or=a("div"),m(G7.$$.fragment),ABr=l(),Lm=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iCe=a("code"),BBr=o("from_pretrained()"),xBr=o("class method or the "),dCe=a("code"),kBr=o("from_config()"),RBr=o(`class
method.`),SBr=l(),O7=a("p"),PBr=o("This class cannot be instantiated directly using "),cCe=a("code"),$Br=o("__init__()"),IBr=o(" (throws an error)."),NBr=l(),It=a("div"),m(X7.$$.fragment),DBr=l(),mCe=a("p"),jBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qBr=l(),Bm=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),fCe=a("strong"),OBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gCe=a("code"),VBr=o("from_pretrained()"),zBr=o("to load the model weights."),WBr=l(),hCe=a("p"),QBr=o("Examples:"),HBr=l(),m(V7.$$.fragment),UBr=l(),No=a("div"),m(z7.$$.fragment),JBr=l(),uCe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KBr=l(),jn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),pCe=a("code"),exr=o("model_type"),oxr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(":"),sxr=l(),W7=a("ul"),r5=a("li"),vCe=a("strong"),lxr=o("beit"),ixr=o(" \u2014 "),Xz=a("a"),dxr=o("FlaxBeitForImageClassification"),cxr=o(" (BEiT model)"),mxr=l(),t5=a("li"),TCe=a("strong"),fxr=o("vit"),gxr=o(" \u2014 "),Vz=a("a"),hxr=o("FlaxViTForImageClassification"),uxr=o(" (ViT model)"),pxr=l(),FCe=a("p"),_xr=o("Examples:"),bxr=l(),m(Q7.$$.fragment),ZRe=l(),xm=a("h2"),a5=a("a"),CCe=a("span"),m(H7.$$.fragment),vxr=l(),MCe=a("span"),Txr=o("FlaxAutoModelForVision2Seq"),eSe=l(),Xr=a("div"),m(U7.$$.fragment),Fxr=l(),km=a("p"),Cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ECe=a("code"),Mxr=o("from_pretrained()"),Exr=o("class method or the "),yCe=a("code"),yxr=o("from_config()"),wxr=o(`class
method.`),Axr=l(),J7=a("p"),Lxr=o("This class cannot be instantiated directly using "),wCe=a("code"),Bxr=o("__init__()"),xxr=o(" (throws an error)."),kxr=l(),Nt=a("div"),m(Y7.$$.fragment),Rxr=l(),ACe=a("p"),Sxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pxr=l(),Rm=a("p"),$xr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),Ixr=o("not"),Nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BCe=a("code"),Dxr=o("from_pretrained()"),jxr=o("to load the model weights."),qxr=l(),xCe=a("p"),Gxr=o("Examples:"),Oxr=l(),m(K7.$$.fragment),Xxr=l(),Do=a("div"),m(Z7.$$.fragment),Vxr=l(),kCe=a("p"),zxr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wxr=l(),qn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),RCe=a("code"),Hxr=o("model_type"),Uxr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),Jxr=o("pretrained_model_name_or_path"),Yxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(":"),ekr=l(),$Ce=a("ul"),n5=a("li"),ICe=a("strong"),okr=o("vision-encoder-decoder"),rkr=o(" \u2014 "),zz=a("a"),tkr=o("FlaxVisionEncoderDecoderModel"),akr=o(" (Vision Encoder decoder model)"),nkr=l(),NCe=a("p"),skr=o("Examples:"),lkr=l(),m(e8.$$.fragment),this.h()},l(c){const _=iEt('[data-svelte="svelte-1phssyn"]',document.head);K=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var o8=s(de);Ee=n(o8,"A",{id:!0,class:!0,href:!0});var DCe=s(Ee);lo=n(DCe,"SPAN",{});var jCe=s(lo);f(me.$$.fragment,jCe),jCe.forEach(t),DCe.forEach(t),Ce=i(o8),Vo=n(o8,"SPAN",{});var dkr=s(Vo);Ii=r(dkr,"Auto Classes"),dkr.forEach(t),o8.forEach(t),$m=i(c),ma=n(c,"P",{});var rSe=s(ma);Ni=r(rSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(rSe,"CODE",{});var ckr=s(Di);ny=r(ckr,"from_pretrained()"),ckr.forEach(t),Im=r(rSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),rSe.forEach(t),Be=i(c),co=n(c,"P",{});var s5=s(co);ji=r(s5,"Instantiating one of "),Gn=n(s5,"A",{href:!0});var mkr=s(Gn);sy=r(mkr,"AutoConfig"),mkr.forEach(t),On=r(s5,", "),Xn=n(s5,"A",{href:!0});var fkr=s(Xn);ly=r(fkr,"AutoModel"),fkr.forEach(t),qi=r(s5,`, and
`),Vn=n(s5,"A",{href:!0});var gkr=s(Vn);iy=r(gkr,"AutoTokenizer"),gkr.forEach(t),Gi=r(s5," will directly create a class of the relevant architecture. For instance"),s5.forEach(t),Nm=i(c),f(qa.$$.fragment,c),mo=i(c),ue=n(c,"P",{});var tSe=s(ue);K8=r(tSe,"will create a model that is an instance of "),Oi=n(tSe,"A",{href:!0});var hkr=s(Oi);Z8=r(hkr,"BertModel"),hkr.forEach(t),e9=r(tSe,"."),tSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var aSe=s(Ga);o9=r(aSe,"There is one class of "),Dm=n(aSe,"CODE",{});var ukr=s(Dm);r9=r(ukr,"AutoModel"),ukr.forEach(t),h$e=r(aSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),aSe.forEach(t),eke=i(c),Xi=n(c,"H2",{class:!0});var nSe=s(Xi);jm=n(nSe,"A",{id:!0,class:!0,href:!0});var pkr=s(jm);DQ=n(pkr,"SPAN",{});var _kr=s(DQ);f(dy.$$.fragment,_kr),_kr.forEach(t),pkr.forEach(t),u$e=i(nSe),jQ=n(nSe,"SPAN",{});var bkr=s(jQ);p$e=r(bkr,"Extending the Auto Classes"),bkr.forEach(t),nSe.forEach(t),oke=i(c),zn=n(c,"P",{});var Wz=s(zn);_$e=r(Wz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qQ=n(Wz,"CODE",{});var vkr=s(qQ);b$e=r(vkr,"NewModel"),vkr.forEach(t),v$e=r(Wz,", make sure you have a "),GQ=n(Wz,"CODE",{});var Tkr=s(GQ);T$e=r(Tkr,"NewModelConfig"),Tkr.forEach(t),F$e=r(Wz,` then you can add those to the auto
classes like this:`),Wz.forEach(t),rke=i(c),f(cy.$$.fragment,c),tke=i(c),t9=n(c,"P",{});var Fkr=s(t9);C$e=r(Fkr,"You will then be able to use the auto classes like you would usually do!"),Fkr.forEach(t),ake=i(c),f(qm.$$.fragment,c),nke=i(c),Vi=n(c,"H2",{class:!0});var sSe=s(Vi);Gm=n(sSe,"A",{id:!0,class:!0,href:!0});var Ckr=s(Gm);OQ=n(Ckr,"SPAN",{});var Mkr=s(OQ);f(my.$$.fragment,Mkr),Mkr.forEach(t),Ckr.forEach(t),M$e=i(sSe),XQ=n(sSe,"SPAN",{});var Ekr=s(XQ);E$e=r(Ekr,"AutoConfig"),Ekr.forEach(t),sSe.forEach(t),ske=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);f(fy.$$.fragment,Os),y$e=i(Os),gy=n(Os,"P",{});var lSe=s(gy);w$e=r(lSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),a9=n(lSe,"A",{href:!0});var ykr=s(a9);A$e=r(ykr,"from_pretrained()"),ykr.forEach(t),L$e=r(lSe," class method."),lSe.forEach(t),B$e=i(Os),hy=n(Os,"P",{});var iSe=s(hy);x$e=r(iSe,"This class cannot be instantiated directly using "),VQ=n(iSe,"CODE",{});var wkr=s(VQ);k$e=r(wkr,"__init__()"),wkr.forEach(t),R$e=r(iSe," (throws an error)."),iSe.forEach(t),S$e=i(Os),fo=n(Os,"DIV",{class:!0});var ga=s(fo);f(uy.$$.fragment,ga),P$e=i(ga),zQ=n(ga,"P",{});var Akr=s(zQ);$$e=r(Akr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Akr.forEach(t),I$e=i(ga),zi=n(ga,"P",{});var Qz=s(zi);N$e=r(Qz,"The configuration class to instantiate is selected based on the "),WQ=n(Qz,"CODE",{});var Lkr=s(WQ);D$e=r(Lkr,"model_type"),Lkr.forEach(t),j$e=r(Qz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QQ=n(Qz,"CODE",{});var Bkr=s(QQ);q$e=r(Bkr,"pretrained_model_name_or_path"),Bkr.forEach(t),G$e=r(Qz,":"),Qz.forEach(t),O$e=i(ga),v=n(ga,"UL",{});var T=s(v);Om=n(T,"LI",{});var qCe=s(Om);HQ=n(qCe,"STRONG",{});var xkr=s(HQ);X$e=r(xkr,"albert"),xkr.forEach(t),V$e=r(qCe," \u2014 "),n9=n(qCe,"A",{href:!0});var kkr=s(n9);z$e=r(kkr,"AlbertConfig"),kkr.forEach(t),W$e=r(qCe," (ALBERT model)"),qCe.forEach(t),Q$e=i(T),Xm=n(T,"LI",{});var GCe=s(Xm);UQ=n(GCe,"STRONG",{});var Rkr=s(UQ);H$e=r(Rkr,"bart"),Rkr.forEach(t),U$e=r(GCe," \u2014 "),s9=n(GCe,"A",{href:!0});var Skr=s(s9);J$e=r(Skr,"BartConfig"),Skr.forEach(t),Y$e=r(GCe," (BART model)"),GCe.forEach(t),K$e=i(T),Vm=n(T,"LI",{});var OCe=s(Vm);JQ=n(OCe,"STRONG",{});var Pkr=s(JQ);Z$e=r(Pkr,"beit"),Pkr.forEach(t),eIe=r(OCe," \u2014 "),l9=n(OCe,"A",{href:!0});var $kr=s(l9);oIe=r($kr,"BeitConfig"),$kr.forEach(t),rIe=r(OCe," (BEiT model)"),OCe.forEach(t),tIe=i(T),zm=n(T,"LI",{});var XCe=s(zm);YQ=n(XCe,"STRONG",{});var Ikr=s(YQ);aIe=r(Ikr,"bert"),Ikr.forEach(t),nIe=r(XCe," \u2014 "),i9=n(XCe,"A",{href:!0});var Nkr=s(i9);sIe=r(Nkr,"BertConfig"),Nkr.forEach(t),lIe=r(XCe," (BERT model)"),XCe.forEach(t),iIe=i(T),Wm=n(T,"LI",{});var VCe=s(Wm);KQ=n(VCe,"STRONG",{});var Dkr=s(KQ);dIe=r(Dkr,"bert-generation"),Dkr.forEach(t),cIe=r(VCe," \u2014 "),d9=n(VCe,"A",{href:!0});var jkr=s(d9);mIe=r(jkr,"BertGenerationConfig"),jkr.forEach(t),fIe=r(VCe," (Bert Generation model)"),VCe.forEach(t),gIe=i(T),Qm=n(T,"LI",{});var zCe=s(Qm);ZQ=n(zCe,"STRONG",{});var qkr=s(ZQ);hIe=r(qkr,"big_bird"),qkr.forEach(t),uIe=r(zCe," \u2014 "),c9=n(zCe,"A",{href:!0});var Gkr=s(c9);pIe=r(Gkr,"BigBirdConfig"),Gkr.forEach(t),_Ie=r(zCe," (BigBird model)"),zCe.forEach(t),bIe=i(T),Hm=n(T,"LI",{});var WCe=s(Hm);eH=n(WCe,"STRONG",{});var Okr=s(eH);vIe=r(Okr,"bigbird_pegasus"),Okr.forEach(t),TIe=r(WCe," \u2014 "),m9=n(WCe,"A",{href:!0});var Xkr=s(m9);FIe=r(Xkr,"BigBirdPegasusConfig"),Xkr.forEach(t),CIe=r(WCe," (BigBirdPegasus model)"),WCe.forEach(t),MIe=i(T),Um=n(T,"LI",{});var QCe=s(Um);oH=n(QCe,"STRONG",{});var Vkr=s(oH);EIe=r(Vkr,"blenderbot"),Vkr.forEach(t),yIe=r(QCe," \u2014 "),f9=n(QCe,"A",{href:!0});var zkr=s(f9);wIe=r(zkr,"BlenderbotConfig"),zkr.forEach(t),AIe=r(QCe," (Blenderbot model)"),QCe.forEach(t),LIe=i(T),Jm=n(T,"LI",{});var HCe=s(Jm);rH=n(HCe,"STRONG",{});var Wkr=s(rH);BIe=r(Wkr,"blenderbot-small"),Wkr.forEach(t),xIe=r(HCe," \u2014 "),g9=n(HCe,"A",{href:!0});var Qkr=s(g9);kIe=r(Qkr,"BlenderbotSmallConfig"),Qkr.forEach(t),RIe=r(HCe," (BlenderbotSmall model)"),HCe.forEach(t),SIe=i(T),Ym=n(T,"LI",{});var UCe=s(Ym);tH=n(UCe,"STRONG",{});var Hkr=s(tH);PIe=r(Hkr,"camembert"),Hkr.forEach(t),$Ie=r(UCe," \u2014 "),h9=n(UCe,"A",{href:!0});var Ukr=s(h9);IIe=r(Ukr,"CamembertConfig"),Ukr.forEach(t),NIe=r(UCe," (CamemBERT model)"),UCe.forEach(t),DIe=i(T),Km=n(T,"LI",{});var JCe=s(Km);aH=n(JCe,"STRONG",{});var Jkr=s(aH);jIe=r(Jkr,"canine"),Jkr.forEach(t),qIe=r(JCe," \u2014 "),u9=n(JCe,"A",{href:!0});var Ykr=s(u9);GIe=r(Ykr,"CanineConfig"),Ykr.forEach(t),OIe=r(JCe," (Canine model)"),JCe.forEach(t),XIe=i(T),Zm=n(T,"LI",{});var YCe=s(Zm);nH=n(YCe,"STRONG",{});var Kkr=s(nH);VIe=r(Kkr,"clip"),Kkr.forEach(t),zIe=r(YCe," \u2014 "),p9=n(YCe,"A",{href:!0});var Zkr=s(p9);WIe=r(Zkr,"CLIPConfig"),Zkr.forEach(t),QIe=r(YCe," (CLIP model)"),YCe.forEach(t),HIe=i(T),ef=n(T,"LI",{});var KCe=s(ef);sH=n(KCe,"STRONG",{});var eRr=s(sH);UIe=r(eRr,"convbert"),eRr.forEach(t),JIe=r(KCe," \u2014 "),_9=n(KCe,"A",{href:!0});var oRr=s(_9);YIe=r(oRr,"ConvBertConfig"),oRr.forEach(t),KIe=r(KCe," (ConvBERT model)"),KCe.forEach(t),ZIe=i(T),of=n(T,"LI",{});var ZCe=s(of);lH=n(ZCe,"STRONG",{});var rRr=s(lH);eNe=r(rRr,"convnext"),rRr.forEach(t),oNe=r(ZCe," \u2014 "),b9=n(ZCe,"A",{href:!0});var tRr=s(b9);rNe=r(tRr,"ConvNextConfig"),tRr.forEach(t),tNe=r(ZCe," (ConvNext model)"),ZCe.forEach(t),aNe=i(T),rf=n(T,"LI",{});var eMe=s(rf);iH=n(eMe,"STRONG",{});var aRr=s(iH);nNe=r(aRr,"ctrl"),aRr.forEach(t),sNe=r(eMe," \u2014 "),v9=n(eMe,"A",{href:!0});var nRr=s(v9);lNe=r(nRr,"CTRLConfig"),nRr.forEach(t),iNe=r(eMe," (CTRL model)"),eMe.forEach(t),dNe=i(T),tf=n(T,"LI",{});var oMe=s(tf);dH=n(oMe,"STRONG",{});var sRr=s(dH);cNe=r(sRr,"data2vec-audio"),sRr.forEach(t),mNe=r(oMe," \u2014 "),T9=n(oMe,"A",{href:!0});var lRr=s(T9);fNe=r(lRr,"Data2VecAudioConfig"),lRr.forEach(t),gNe=r(oMe," (Data2VecAudio model)"),oMe.forEach(t),hNe=i(T),af=n(T,"LI",{});var rMe=s(af);cH=n(rMe,"STRONG",{});var iRr=s(cH);uNe=r(iRr,"data2vec-text"),iRr.forEach(t),pNe=r(rMe," \u2014 "),F9=n(rMe,"A",{href:!0});var dRr=s(F9);_Ne=r(dRr,"Data2VecTextConfig"),dRr.forEach(t),bNe=r(rMe," (Data2VecText model)"),rMe.forEach(t),vNe=i(T),nf=n(T,"LI",{});var tMe=s(nf);mH=n(tMe,"STRONG",{});var cRr=s(mH);TNe=r(cRr,"deberta"),cRr.forEach(t),FNe=r(tMe," \u2014 "),C9=n(tMe,"A",{href:!0});var mRr=s(C9);CNe=r(mRr,"DebertaConfig"),mRr.forEach(t),MNe=r(tMe," (DeBERTa model)"),tMe.forEach(t),ENe=i(T),sf=n(T,"LI",{});var aMe=s(sf);fH=n(aMe,"STRONG",{});var fRr=s(fH);yNe=r(fRr,"deberta-v2"),fRr.forEach(t),wNe=r(aMe," \u2014 "),M9=n(aMe,"A",{href:!0});var gRr=s(M9);ANe=r(gRr,"DebertaV2Config"),gRr.forEach(t),LNe=r(aMe," (DeBERTa-v2 model)"),aMe.forEach(t),BNe=i(T),lf=n(T,"LI",{});var nMe=s(lf);gH=n(nMe,"STRONG",{});var hRr=s(gH);xNe=r(hRr,"decision_transformer"),hRr.forEach(t),kNe=r(nMe," \u2014 "),E9=n(nMe,"A",{href:!0});var uRr=s(E9);RNe=r(uRr,"DecisionTransformerConfig"),uRr.forEach(t),SNe=r(nMe," (Decision Transformer model)"),nMe.forEach(t),PNe=i(T),df=n(T,"LI",{});var sMe=s(df);hH=n(sMe,"STRONG",{});var pRr=s(hH);$Ne=r(pRr,"deit"),pRr.forEach(t),INe=r(sMe," \u2014 "),y9=n(sMe,"A",{href:!0});var _Rr=s(y9);NNe=r(_Rr,"DeiTConfig"),_Rr.forEach(t),DNe=r(sMe," (DeiT model)"),sMe.forEach(t),jNe=i(T),cf=n(T,"LI",{});var lMe=s(cf);uH=n(lMe,"STRONG",{});var bRr=s(uH);qNe=r(bRr,"detr"),bRr.forEach(t),GNe=r(lMe," \u2014 "),w9=n(lMe,"A",{href:!0});var vRr=s(w9);ONe=r(vRr,"DetrConfig"),vRr.forEach(t),XNe=r(lMe," (DETR model)"),lMe.forEach(t),VNe=i(T),mf=n(T,"LI",{});var iMe=s(mf);pH=n(iMe,"STRONG",{});var TRr=s(pH);zNe=r(TRr,"distilbert"),TRr.forEach(t),WNe=r(iMe," \u2014 "),A9=n(iMe,"A",{href:!0});var FRr=s(A9);QNe=r(FRr,"DistilBertConfig"),FRr.forEach(t),HNe=r(iMe," (DistilBERT model)"),iMe.forEach(t),UNe=i(T),ff=n(T,"LI",{});var dMe=s(ff);_H=n(dMe,"STRONG",{});var CRr=s(_H);JNe=r(CRr,"dpr"),CRr.forEach(t),YNe=r(dMe," \u2014 "),L9=n(dMe,"A",{href:!0});var MRr=s(L9);KNe=r(MRr,"DPRConfig"),MRr.forEach(t),ZNe=r(dMe," (DPR model)"),dMe.forEach(t),eDe=i(T),gf=n(T,"LI",{});var cMe=s(gf);bH=n(cMe,"STRONG",{});var ERr=s(bH);oDe=r(ERr,"electra"),ERr.forEach(t),rDe=r(cMe," \u2014 "),B9=n(cMe,"A",{href:!0});var yRr=s(B9);tDe=r(yRr,"ElectraConfig"),yRr.forEach(t),aDe=r(cMe," (ELECTRA model)"),cMe.forEach(t),nDe=i(T),hf=n(T,"LI",{});var mMe=s(hf);vH=n(mMe,"STRONG",{});var wRr=s(vH);sDe=r(wRr,"encoder-decoder"),wRr.forEach(t),lDe=r(mMe," \u2014 "),x9=n(mMe,"A",{href:!0});var ARr=s(x9);iDe=r(ARr,"EncoderDecoderConfig"),ARr.forEach(t),dDe=r(mMe," (Encoder decoder model)"),mMe.forEach(t),cDe=i(T),uf=n(T,"LI",{});var fMe=s(uf);TH=n(fMe,"STRONG",{});var LRr=s(TH);mDe=r(LRr,"flaubert"),LRr.forEach(t),fDe=r(fMe," \u2014 "),k9=n(fMe,"A",{href:!0});var BRr=s(k9);gDe=r(BRr,"FlaubertConfig"),BRr.forEach(t),hDe=r(fMe," (FlauBERT model)"),fMe.forEach(t),uDe=i(T),pf=n(T,"LI",{});var gMe=s(pf);FH=n(gMe,"STRONG",{});var xRr=s(FH);pDe=r(xRr,"fnet"),xRr.forEach(t),_De=r(gMe," \u2014 "),R9=n(gMe,"A",{href:!0});var kRr=s(R9);bDe=r(kRr,"FNetConfig"),kRr.forEach(t),vDe=r(gMe," (FNet model)"),gMe.forEach(t),TDe=i(T),_f=n(T,"LI",{});var hMe=s(_f);CH=n(hMe,"STRONG",{});var RRr=s(CH);FDe=r(RRr,"fsmt"),RRr.forEach(t),CDe=r(hMe," \u2014 "),S9=n(hMe,"A",{href:!0});var SRr=s(S9);MDe=r(SRr,"FSMTConfig"),SRr.forEach(t),EDe=r(hMe," (FairSeq Machine-Translation model)"),hMe.forEach(t),yDe=i(T),bf=n(T,"LI",{});var uMe=s(bf);MH=n(uMe,"STRONG",{});var PRr=s(MH);wDe=r(PRr,"funnel"),PRr.forEach(t),ADe=r(uMe," \u2014 "),P9=n(uMe,"A",{href:!0});var $Rr=s(P9);LDe=r($Rr,"FunnelConfig"),$Rr.forEach(t),BDe=r(uMe," (Funnel Transformer model)"),uMe.forEach(t),xDe=i(T),vf=n(T,"LI",{});var pMe=s(vf);EH=n(pMe,"STRONG",{});var IRr=s(EH);kDe=r(IRr,"glpn"),IRr.forEach(t),RDe=r(pMe," \u2014 "),$9=n(pMe,"A",{href:!0});var NRr=s($9);SDe=r(NRr,"GLPNConfig"),NRr.forEach(t),PDe=r(pMe," (GLPN model)"),pMe.forEach(t),$De=i(T),Tf=n(T,"LI",{});var _Me=s(Tf);yH=n(_Me,"STRONG",{});var DRr=s(yH);IDe=r(DRr,"gpt2"),DRr.forEach(t),NDe=r(_Me," \u2014 "),I9=n(_Me,"A",{href:!0});var jRr=s(I9);DDe=r(jRr,"GPT2Config"),jRr.forEach(t),jDe=r(_Me," (OpenAI GPT-2 model)"),_Me.forEach(t),qDe=i(T),Ff=n(T,"LI",{});var bMe=s(Ff);wH=n(bMe,"STRONG",{});var qRr=s(wH);GDe=r(qRr,"gpt_neo"),qRr.forEach(t),ODe=r(bMe," \u2014 "),N9=n(bMe,"A",{href:!0});var GRr=s(N9);XDe=r(GRr,"GPTNeoConfig"),GRr.forEach(t),VDe=r(bMe," (GPT Neo model)"),bMe.forEach(t),zDe=i(T),Cf=n(T,"LI",{});var vMe=s(Cf);AH=n(vMe,"STRONG",{});var ORr=s(AH);WDe=r(ORr,"gptj"),ORr.forEach(t),QDe=r(vMe," \u2014 "),D9=n(vMe,"A",{href:!0});var XRr=s(D9);HDe=r(XRr,"GPTJConfig"),XRr.forEach(t),UDe=r(vMe," (GPT-J model)"),vMe.forEach(t),JDe=i(T),Mf=n(T,"LI",{});var TMe=s(Mf);LH=n(TMe,"STRONG",{});var VRr=s(LH);YDe=r(VRr,"hubert"),VRr.forEach(t),KDe=r(TMe," \u2014 "),j9=n(TMe,"A",{href:!0});var zRr=s(j9);ZDe=r(zRr,"HubertConfig"),zRr.forEach(t),eje=r(TMe," (Hubert model)"),TMe.forEach(t),oje=i(T),Ef=n(T,"LI",{});var FMe=s(Ef);BH=n(FMe,"STRONG",{});var WRr=s(BH);rje=r(WRr,"ibert"),WRr.forEach(t),tje=r(FMe," \u2014 "),q9=n(FMe,"A",{href:!0});var QRr=s(q9);aje=r(QRr,"IBertConfig"),QRr.forEach(t),nje=r(FMe," (I-BERT model)"),FMe.forEach(t),sje=i(T),yf=n(T,"LI",{});var CMe=s(yf);xH=n(CMe,"STRONG",{});var HRr=s(xH);lje=r(HRr,"imagegpt"),HRr.forEach(t),ije=r(CMe," \u2014 "),G9=n(CMe,"A",{href:!0});var URr=s(G9);dje=r(URr,"ImageGPTConfig"),URr.forEach(t),cje=r(CMe," (ImageGPT model)"),CMe.forEach(t),mje=i(T),wf=n(T,"LI",{});var MMe=s(wf);kH=n(MMe,"STRONG",{});var JRr=s(kH);fje=r(JRr,"layoutlm"),JRr.forEach(t),gje=r(MMe," \u2014 "),O9=n(MMe,"A",{href:!0});var YRr=s(O9);hje=r(YRr,"LayoutLMConfig"),YRr.forEach(t),uje=r(MMe," (LayoutLM model)"),MMe.forEach(t),pje=i(T),Af=n(T,"LI",{});var EMe=s(Af);RH=n(EMe,"STRONG",{});var KRr=s(RH);_je=r(KRr,"layoutlmv2"),KRr.forEach(t),bje=r(EMe," \u2014 "),X9=n(EMe,"A",{href:!0});var ZRr=s(X9);vje=r(ZRr,"LayoutLMv2Config"),ZRr.forEach(t),Tje=r(EMe," (LayoutLMv2 model)"),EMe.forEach(t),Fje=i(T),Lf=n(T,"LI",{});var yMe=s(Lf);SH=n(yMe,"STRONG",{});var eSr=s(SH);Cje=r(eSr,"led"),eSr.forEach(t),Mje=r(yMe," \u2014 "),V9=n(yMe,"A",{href:!0});var oSr=s(V9);Eje=r(oSr,"LEDConfig"),oSr.forEach(t),yje=r(yMe," (LED model)"),yMe.forEach(t),wje=i(T),Bf=n(T,"LI",{});var wMe=s(Bf);PH=n(wMe,"STRONG",{});var rSr=s(PH);Aje=r(rSr,"longformer"),rSr.forEach(t),Lje=r(wMe," \u2014 "),z9=n(wMe,"A",{href:!0});var tSr=s(z9);Bje=r(tSr,"LongformerConfig"),tSr.forEach(t),xje=r(wMe," (Longformer model)"),wMe.forEach(t),kje=i(T),xf=n(T,"LI",{});var AMe=s(xf);$H=n(AMe,"STRONG",{});var aSr=s($H);Rje=r(aSr,"luke"),aSr.forEach(t),Sje=r(AMe," \u2014 "),W9=n(AMe,"A",{href:!0});var nSr=s(W9);Pje=r(nSr,"LukeConfig"),nSr.forEach(t),$je=r(AMe," (LUKE model)"),AMe.forEach(t),Ije=i(T),kf=n(T,"LI",{});var LMe=s(kf);IH=n(LMe,"STRONG",{});var sSr=s(IH);Nje=r(sSr,"lxmert"),sSr.forEach(t),Dje=r(LMe," \u2014 "),Q9=n(LMe,"A",{href:!0});var lSr=s(Q9);jje=r(lSr,"LxmertConfig"),lSr.forEach(t),qje=r(LMe," (LXMERT model)"),LMe.forEach(t),Gje=i(T),Rf=n(T,"LI",{});var BMe=s(Rf);NH=n(BMe,"STRONG",{});var iSr=s(NH);Oje=r(iSr,"m2m_100"),iSr.forEach(t),Xje=r(BMe," \u2014 "),H9=n(BMe,"A",{href:!0});var dSr=s(H9);Vje=r(dSr,"M2M100Config"),dSr.forEach(t),zje=r(BMe," (M2M100 model)"),BMe.forEach(t),Wje=i(T),Sf=n(T,"LI",{});var xMe=s(Sf);DH=n(xMe,"STRONG",{});var cSr=s(DH);Qje=r(cSr,"marian"),cSr.forEach(t),Hje=r(xMe," \u2014 "),U9=n(xMe,"A",{href:!0});var mSr=s(U9);Uje=r(mSr,"MarianConfig"),mSr.forEach(t),Jje=r(xMe," (Marian model)"),xMe.forEach(t),Yje=i(T),Pf=n(T,"LI",{});var kMe=s(Pf);jH=n(kMe,"STRONG",{});var fSr=s(jH);Kje=r(fSr,"maskformer"),fSr.forEach(t),Zje=r(kMe," \u2014 "),J9=n(kMe,"A",{href:!0});var gSr=s(J9);eqe=r(gSr,"MaskFormerConfig"),gSr.forEach(t),oqe=r(kMe," (MaskFormer model)"),kMe.forEach(t),rqe=i(T),$f=n(T,"LI",{});var RMe=s($f);qH=n(RMe,"STRONG",{});var hSr=s(qH);tqe=r(hSr,"mbart"),hSr.forEach(t),aqe=r(RMe," \u2014 "),Y9=n(RMe,"A",{href:!0});var uSr=s(Y9);nqe=r(uSr,"MBartConfig"),uSr.forEach(t),sqe=r(RMe," (mBART model)"),RMe.forEach(t),lqe=i(T),If=n(T,"LI",{});var SMe=s(If);GH=n(SMe,"STRONG",{});var pSr=s(GH);iqe=r(pSr,"megatron-bert"),pSr.forEach(t),dqe=r(SMe," \u2014 "),K9=n(SMe,"A",{href:!0});var _Sr=s(K9);cqe=r(_Sr,"MegatronBertConfig"),_Sr.forEach(t),mqe=r(SMe," (MegatronBert model)"),SMe.forEach(t),fqe=i(T),Nf=n(T,"LI",{});var PMe=s(Nf);OH=n(PMe,"STRONG",{});var bSr=s(OH);gqe=r(bSr,"mobilebert"),bSr.forEach(t),hqe=r(PMe," \u2014 "),Z9=n(PMe,"A",{href:!0});var vSr=s(Z9);uqe=r(vSr,"MobileBertConfig"),vSr.forEach(t),pqe=r(PMe," (MobileBERT model)"),PMe.forEach(t),_qe=i(T),Df=n(T,"LI",{});var $Me=s(Df);XH=n($Me,"STRONG",{});var TSr=s(XH);bqe=r(TSr,"mpnet"),TSr.forEach(t),vqe=r($Me," \u2014 "),eB=n($Me,"A",{href:!0});var FSr=s(eB);Tqe=r(FSr,"MPNetConfig"),FSr.forEach(t),Fqe=r($Me," (MPNet model)"),$Me.forEach(t),Cqe=i(T),jf=n(T,"LI",{});var IMe=s(jf);VH=n(IMe,"STRONG",{});var CSr=s(VH);Mqe=r(CSr,"mt5"),CSr.forEach(t),Eqe=r(IMe," \u2014 "),oB=n(IMe,"A",{href:!0});var MSr=s(oB);yqe=r(MSr,"MT5Config"),MSr.forEach(t),wqe=r(IMe," (mT5 model)"),IMe.forEach(t),Aqe=i(T),qf=n(T,"LI",{});var NMe=s(qf);zH=n(NMe,"STRONG",{});var ESr=s(zH);Lqe=r(ESr,"nystromformer"),ESr.forEach(t),Bqe=r(NMe," \u2014 "),rB=n(NMe,"A",{href:!0});var ySr=s(rB);xqe=r(ySr,"NystromformerConfig"),ySr.forEach(t),kqe=r(NMe," (Nystromformer model)"),NMe.forEach(t),Rqe=i(T),Gf=n(T,"LI",{});var DMe=s(Gf);WH=n(DMe,"STRONG",{});var wSr=s(WH);Sqe=r(wSr,"openai-gpt"),wSr.forEach(t),Pqe=r(DMe," \u2014 "),tB=n(DMe,"A",{href:!0});var ASr=s(tB);$qe=r(ASr,"OpenAIGPTConfig"),ASr.forEach(t),Iqe=r(DMe," (OpenAI GPT model)"),DMe.forEach(t),Nqe=i(T),Of=n(T,"LI",{});var jMe=s(Of);QH=n(jMe,"STRONG",{});var LSr=s(QH);Dqe=r(LSr,"pegasus"),LSr.forEach(t),jqe=r(jMe," \u2014 "),aB=n(jMe,"A",{href:!0});var BSr=s(aB);qqe=r(BSr,"PegasusConfig"),BSr.forEach(t),Gqe=r(jMe," (Pegasus model)"),jMe.forEach(t),Oqe=i(T),Xf=n(T,"LI",{});var qMe=s(Xf);HH=n(qMe,"STRONG",{});var xSr=s(HH);Xqe=r(xSr,"perceiver"),xSr.forEach(t),Vqe=r(qMe," \u2014 "),nB=n(qMe,"A",{href:!0});var kSr=s(nB);zqe=r(kSr,"PerceiverConfig"),kSr.forEach(t),Wqe=r(qMe," (Perceiver model)"),qMe.forEach(t),Qqe=i(T),Vf=n(T,"LI",{});var GMe=s(Vf);UH=n(GMe,"STRONG",{});var RSr=s(UH);Hqe=r(RSr,"plbart"),RSr.forEach(t),Uqe=r(GMe," \u2014 "),sB=n(GMe,"A",{href:!0});var SSr=s(sB);Jqe=r(SSr,"PLBartConfig"),SSr.forEach(t),Yqe=r(GMe," (PLBart model)"),GMe.forEach(t),Kqe=i(T),zf=n(T,"LI",{});var OMe=s(zf);JH=n(OMe,"STRONG",{});var PSr=s(JH);Zqe=r(PSr,"poolformer"),PSr.forEach(t),eGe=r(OMe," \u2014 "),lB=n(OMe,"A",{href:!0});var $Sr=s(lB);oGe=r($Sr,"PoolFormerConfig"),$Sr.forEach(t),rGe=r(OMe," (PoolFormer model)"),OMe.forEach(t),tGe=i(T),Wf=n(T,"LI",{});var XMe=s(Wf);YH=n(XMe,"STRONG",{});var ISr=s(YH);aGe=r(ISr,"prophetnet"),ISr.forEach(t),nGe=r(XMe," \u2014 "),iB=n(XMe,"A",{href:!0});var NSr=s(iB);sGe=r(NSr,"ProphetNetConfig"),NSr.forEach(t),lGe=r(XMe," (ProphetNet model)"),XMe.forEach(t),iGe=i(T),Qf=n(T,"LI",{});var VMe=s(Qf);KH=n(VMe,"STRONG",{});var DSr=s(KH);dGe=r(DSr,"qdqbert"),DSr.forEach(t),cGe=r(VMe," \u2014 "),dB=n(VMe,"A",{href:!0});var jSr=s(dB);mGe=r(jSr,"QDQBertConfig"),jSr.forEach(t),fGe=r(VMe," (QDQBert model)"),VMe.forEach(t),gGe=i(T),Hf=n(T,"LI",{});var zMe=s(Hf);ZH=n(zMe,"STRONG",{});var qSr=s(ZH);hGe=r(qSr,"rag"),qSr.forEach(t),uGe=r(zMe," \u2014 "),cB=n(zMe,"A",{href:!0});var GSr=s(cB);pGe=r(GSr,"RagConfig"),GSr.forEach(t),_Ge=r(zMe," (RAG model)"),zMe.forEach(t),bGe=i(T),Uf=n(T,"LI",{});var WMe=s(Uf);eU=n(WMe,"STRONG",{});var OSr=s(eU);vGe=r(OSr,"realm"),OSr.forEach(t),TGe=r(WMe," \u2014 "),mB=n(WMe,"A",{href:!0});var XSr=s(mB);FGe=r(XSr,"RealmConfig"),XSr.forEach(t),CGe=r(WMe," (Realm model)"),WMe.forEach(t),MGe=i(T),Jf=n(T,"LI",{});var QMe=s(Jf);oU=n(QMe,"STRONG",{});var VSr=s(oU);EGe=r(VSr,"reformer"),VSr.forEach(t),yGe=r(QMe," \u2014 "),fB=n(QMe,"A",{href:!0});var zSr=s(fB);wGe=r(zSr,"ReformerConfig"),zSr.forEach(t),AGe=r(QMe," (Reformer model)"),QMe.forEach(t),LGe=i(T),Yf=n(T,"LI",{});var HMe=s(Yf);rU=n(HMe,"STRONG",{});var WSr=s(rU);BGe=r(WSr,"rembert"),WSr.forEach(t),xGe=r(HMe," \u2014 "),gB=n(HMe,"A",{href:!0});var QSr=s(gB);kGe=r(QSr,"RemBertConfig"),QSr.forEach(t),RGe=r(HMe," (RemBERT model)"),HMe.forEach(t),SGe=i(T),Kf=n(T,"LI",{});var UMe=s(Kf);tU=n(UMe,"STRONG",{});var HSr=s(tU);PGe=r(HSr,"resnet"),HSr.forEach(t),$Ge=r(UMe," \u2014 "),hB=n(UMe,"A",{href:!0});var USr=s(hB);IGe=r(USr,"ResNetConfig"),USr.forEach(t),NGe=r(UMe," (ResNet model)"),UMe.forEach(t),DGe=i(T),Zf=n(T,"LI",{});var JMe=s(Zf);aU=n(JMe,"STRONG",{});var JSr=s(aU);jGe=r(JSr,"retribert"),JSr.forEach(t),qGe=r(JMe," \u2014 "),uB=n(JMe,"A",{href:!0});var YSr=s(uB);GGe=r(YSr,"RetriBertConfig"),YSr.forEach(t),OGe=r(JMe," (RetriBERT model)"),JMe.forEach(t),XGe=i(T),eg=n(T,"LI",{});var YMe=s(eg);nU=n(YMe,"STRONG",{});var KSr=s(nU);VGe=r(KSr,"roberta"),KSr.forEach(t),zGe=r(YMe," \u2014 "),pB=n(YMe,"A",{href:!0});var ZSr=s(pB);WGe=r(ZSr,"RobertaConfig"),ZSr.forEach(t),QGe=r(YMe," (RoBERTa model)"),YMe.forEach(t),HGe=i(T),og=n(T,"LI",{});var KMe=s(og);sU=n(KMe,"STRONG",{});var ePr=s(sU);UGe=r(ePr,"roformer"),ePr.forEach(t),JGe=r(KMe," \u2014 "),_B=n(KMe,"A",{href:!0});var oPr=s(_B);YGe=r(oPr,"RoFormerConfig"),oPr.forEach(t),KGe=r(KMe," (RoFormer model)"),KMe.forEach(t),ZGe=i(T),rg=n(T,"LI",{});var ZMe=s(rg);lU=n(ZMe,"STRONG",{});var rPr=s(lU);eOe=r(rPr,"segformer"),rPr.forEach(t),oOe=r(ZMe," \u2014 "),bB=n(ZMe,"A",{href:!0});var tPr=s(bB);rOe=r(tPr,"SegformerConfig"),tPr.forEach(t),tOe=r(ZMe," (SegFormer model)"),ZMe.forEach(t),aOe=i(T),tg=n(T,"LI",{});var e4e=s(tg);iU=n(e4e,"STRONG",{});var aPr=s(iU);nOe=r(aPr,"sew"),aPr.forEach(t),sOe=r(e4e," \u2014 "),vB=n(e4e,"A",{href:!0});var nPr=s(vB);lOe=r(nPr,"SEWConfig"),nPr.forEach(t),iOe=r(e4e," (SEW model)"),e4e.forEach(t),dOe=i(T),ag=n(T,"LI",{});var o4e=s(ag);dU=n(o4e,"STRONG",{});var sPr=s(dU);cOe=r(sPr,"sew-d"),sPr.forEach(t),mOe=r(o4e," \u2014 "),TB=n(o4e,"A",{href:!0});var lPr=s(TB);fOe=r(lPr,"SEWDConfig"),lPr.forEach(t),gOe=r(o4e," (SEW-D model)"),o4e.forEach(t),hOe=i(T),ng=n(T,"LI",{});var r4e=s(ng);cU=n(r4e,"STRONG",{});var iPr=s(cU);uOe=r(iPr,"speech-encoder-decoder"),iPr.forEach(t),pOe=r(r4e," \u2014 "),FB=n(r4e,"A",{href:!0});var dPr=s(FB);_Oe=r(dPr,"SpeechEncoderDecoderConfig"),dPr.forEach(t),bOe=r(r4e," (Speech Encoder decoder model)"),r4e.forEach(t),vOe=i(T),sg=n(T,"LI",{});var t4e=s(sg);mU=n(t4e,"STRONG",{});var cPr=s(mU);TOe=r(cPr,"speech_to_text"),cPr.forEach(t),FOe=r(t4e," \u2014 "),CB=n(t4e,"A",{href:!0});var mPr=s(CB);COe=r(mPr,"Speech2TextConfig"),mPr.forEach(t),MOe=r(t4e," (Speech2Text model)"),t4e.forEach(t),EOe=i(T),lg=n(T,"LI",{});var a4e=s(lg);fU=n(a4e,"STRONG",{});var fPr=s(fU);yOe=r(fPr,"speech_to_text_2"),fPr.forEach(t),wOe=r(a4e," \u2014 "),MB=n(a4e,"A",{href:!0});var gPr=s(MB);AOe=r(gPr,"Speech2Text2Config"),gPr.forEach(t),LOe=r(a4e," (Speech2Text2 model)"),a4e.forEach(t),BOe=i(T),ig=n(T,"LI",{});var n4e=s(ig);gU=n(n4e,"STRONG",{});var hPr=s(gU);xOe=r(hPr,"splinter"),hPr.forEach(t),kOe=r(n4e," \u2014 "),EB=n(n4e,"A",{href:!0});var uPr=s(EB);ROe=r(uPr,"SplinterConfig"),uPr.forEach(t),SOe=r(n4e," (Splinter model)"),n4e.forEach(t),POe=i(T),dg=n(T,"LI",{});var s4e=s(dg);hU=n(s4e,"STRONG",{});var pPr=s(hU);$Oe=r(pPr,"squeezebert"),pPr.forEach(t),IOe=r(s4e," \u2014 "),yB=n(s4e,"A",{href:!0});var _Pr=s(yB);NOe=r(_Pr,"SqueezeBertConfig"),_Pr.forEach(t),DOe=r(s4e," (SqueezeBERT model)"),s4e.forEach(t),jOe=i(T),cg=n(T,"LI",{});var l4e=s(cg);uU=n(l4e,"STRONG",{});var bPr=s(uU);qOe=r(bPr,"swin"),bPr.forEach(t),GOe=r(l4e," \u2014 "),wB=n(l4e,"A",{href:!0});var vPr=s(wB);OOe=r(vPr,"SwinConfig"),vPr.forEach(t),XOe=r(l4e," (Swin model)"),l4e.forEach(t),VOe=i(T),mg=n(T,"LI",{});var i4e=s(mg);pU=n(i4e,"STRONG",{});var TPr=s(pU);zOe=r(TPr,"t5"),TPr.forEach(t),WOe=r(i4e," \u2014 "),AB=n(i4e,"A",{href:!0});var FPr=s(AB);QOe=r(FPr,"T5Config"),FPr.forEach(t),HOe=r(i4e," (T5 model)"),i4e.forEach(t),UOe=i(T),fg=n(T,"LI",{});var d4e=s(fg);_U=n(d4e,"STRONG",{});var CPr=s(_U);JOe=r(CPr,"tapas"),CPr.forEach(t),YOe=r(d4e," \u2014 "),LB=n(d4e,"A",{href:!0});var MPr=s(LB);KOe=r(MPr,"TapasConfig"),MPr.forEach(t),ZOe=r(d4e," (TAPAS model)"),d4e.forEach(t),eXe=i(T),gg=n(T,"LI",{});var c4e=s(gg);bU=n(c4e,"STRONG",{});var EPr=s(bU);oXe=r(EPr,"transfo-xl"),EPr.forEach(t),rXe=r(c4e," \u2014 "),BB=n(c4e,"A",{href:!0});var yPr=s(BB);tXe=r(yPr,"TransfoXLConfig"),yPr.forEach(t),aXe=r(c4e," (Transformer-XL model)"),c4e.forEach(t),nXe=i(T),hg=n(T,"LI",{});var m4e=s(hg);vU=n(m4e,"STRONG",{});var wPr=s(vU);sXe=r(wPr,"trocr"),wPr.forEach(t),lXe=r(m4e," \u2014 "),xB=n(m4e,"A",{href:!0});var APr=s(xB);iXe=r(APr,"TrOCRConfig"),APr.forEach(t),dXe=r(m4e," (TrOCR model)"),m4e.forEach(t),cXe=i(T),ug=n(T,"LI",{});var f4e=s(ug);TU=n(f4e,"STRONG",{});var LPr=s(TU);mXe=r(LPr,"unispeech"),LPr.forEach(t),fXe=r(f4e," \u2014 "),kB=n(f4e,"A",{href:!0});var BPr=s(kB);gXe=r(BPr,"UniSpeechConfig"),BPr.forEach(t),hXe=r(f4e," (UniSpeech model)"),f4e.forEach(t),uXe=i(T),pg=n(T,"LI",{});var g4e=s(pg);FU=n(g4e,"STRONG",{});var xPr=s(FU);pXe=r(xPr,"unispeech-sat"),xPr.forEach(t),_Xe=r(g4e," \u2014 "),RB=n(g4e,"A",{href:!0});var kPr=s(RB);bXe=r(kPr,"UniSpeechSatConfig"),kPr.forEach(t),vXe=r(g4e," (UniSpeechSat model)"),g4e.forEach(t),TXe=i(T),_g=n(T,"LI",{});var h4e=s(_g);CU=n(h4e,"STRONG",{});var RPr=s(CU);FXe=r(RPr,"van"),RPr.forEach(t),CXe=r(h4e," \u2014 "),SB=n(h4e,"A",{href:!0});var SPr=s(SB);MXe=r(SPr,"VanConfig"),SPr.forEach(t),EXe=r(h4e," (VAN model)"),h4e.forEach(t),yXe=i(T),bg=n(T,"LI",{});var u4e=s(bg);MU=n(u4e,"STRONG",{});var PPr=s(MU);wXe=r(PPr,"vilt"),PPr.forEach(t),AXe=r(u4e," \u2014 "),PB=n(u4e,"A",{href:!0});var $Pr=s(PB);LXe=r($Pr,"ViltConfig"),$Pr.forEach(t),BXe=r(u4e," (ViLT model)"),u4e.forEach(t),xXe=i(T),vg=n(T,"LI",{});var p4e=s(vg);EU=n(p4e,"STRONG",{});var IPr=s(EU);kXe=r(IPr,"vision-encoder-decoder"),IPr.forEach(t),RXe=r(p4e," \u2014 "),$B=n(p4e,"A",{href:!0});var NPr=s($B);SXe=r(NPr,"VisionEncoderDecoderConfig"),NPr.forEach(t),PXe=r(p4e," (Vision Encoder decoder model)"),p4e.forEach(t),$Xe=i(T),Tg=n(T,"LI",{});var _4e=s(Tg);yU=n(_4e,"STRONG",{});var DPr=s(yU);IXe=r(DPr,"vision-text-dual-encoder"),DPr.forEach(t),NXe=r(_4e," \u2014 "),IB=n(_4e,"A",{href:!0});var jPr=s(IB);DXe=r(jPr,"VisionTextDualEncoderConfig"),jPr.forEach(t),jXe=r(_4e," (VisionTextDualEncoder model)"),_4e.forEach(t),qXe=i(T),Fg=n(T,"LI",{});var b4e=s(Fg);wU=n(b4e,"STRONG",{});var qPr=s(wU);GXe=r(qPr,"visual_bert"),qPr.forEach(t),OXe=r(b4e," \u2014 "),NB=n(b4e,"A",{href:!0});var GPr=s(NB);XXe=r(GPr,"VisualBertConfig"),GPr.forEach(t),VXe=r(b4e," (VisualBert model)"),b4e.forEach(t),zXe=i(T),Cg=n(T,"LI",{});var v4e=s(Cg);AU=n(v4e,"STRONG",{});var OPr=s(AU);WXe=r(OPr,"vit"),OPr.forEach(t),QXe=r(v4e," \u2014 "),DB=n(v4e,"A",{href:!0});var XPr=s(DB);HXe=r(XPr,"ViTConfig"),XPr.forEach(t),UXe=r(v4e," (ViT model)"),v4e.forEach(t),JXe=i(T),Mg=n(T,"LI",{});var T4e=s(Mg);LU=n(T4e,"STRONG",{});var VPr=s(LU);YXe=r(VPr,"vit_mae"),VPr.forEach(t),KXe=r(T4e," \u2014 "),jB=n(T4e,"A",{href:!0});var zPr=s(jB);ZXe=r(zPr,"ViTMAEConfig"),zPr.forEach(t),eVe=r(T4e," (ViTMAE model)"),T4e.forEach(t),oVe=i(T),Eg=n(T,"LI",{});var F4e=s(Eg);BU=n(F4e,"STRONG",{});var WPr=s(BU);rVe=r(WPr,"wav2vec2"),WPr.forEach(t),tVe=r(F4e," \u2014 "),qB=n(F4e,"A",{href:!0});var QPr=s(qB);aVe=r(QPr,"Wav2Vec2Config"),QPr.forEach(t),nVe=r(F4e," (Wav2Vec2 model)"),F4e.forEach(t),sVe=i(T),yg=n(T,"LI",{});var C4e=s(yg);xU=n(C4e,"STRONG",{});var HPr=s(xU);lVe=r(HPr,"wavlm"),HPr.forEach(t),iVe=r(C4e," \u2014 "),GB=n(C4e,"A",{href:!0});var UPr=s(GB);dVe=r(UPr,"WavLMConfig"),UPr.forEach(t),cVe=r(C4e," (WavLM model)"),C4e.forEach(t),mVe=i(T),wg=n(T,"LI",{});var M4e=s(wg);kU=n(M4e,"STRONG",{});var JPr=s(kU);fVe=r(JPr,"xglm"),JPr.forEach(t),gVe=r(M4e," \u2014 "),OB=n(M4e,"A",{href:!0});var YPr=s(OB);hVe=r(YPr,"XGLMConfig"),YPr.forEach(t),uVe=r(M4e," (XGLM model)"),M4e.forEach(t),pVe=i(T),Ag=n(T,"LI",{});var E4e=s(Ag);RU=n(E4e,"STRONG",{});var KPr=s(RU);_Ve=r(KPr,"xlm"),KPr.forEach(t),bVe=r(E4e," \u2014 "),XB=n(E4e,"A",{href:!0});var ZPr=s(XB);vVe=r(ZPr,"XLMConfig"),ZPr.forEach(t),TVe=r(E4e," (XLM model)"),E4e.forEach(t),FVe=i(T),Lg=n(T,"LI",{});var y4e=s(Lg);SU=n(y4e,"STRONG",{});var e$r=s(SU);CVe=r(e$r,"xlm-prophetnet"),e$r.forEach(t),MVe=r(y4e," \u2014 "),VB=n(y4e,"A",{href:!0});var o$r=s(VB);EVe=r(o$r,"XLMProphetNetConfig"),o$r.forEach(t),yVe=r(y4e," (XLMProphetNet model)"),y4e.forEach(t),wVe=i(T),Bg=n(T,"LI",{});var w4e=s(Bg);PU=n(w4e,"STRONG",{});var r$r=s(PU);AVe=r(r$r,"xlm-roberta"),r$r.forEach(t),LVe=r(w4e," \u2014 "),zB=n(w4e,"A",{href:!0});var t$r=s(zB);BVe=r(t$r,"XLMRobertaConfig"),t$r.forEach(t),xVe=r(w4e," (XLM-RoBERTa model)"),w4e.forEach(t),kVe=i(T),xg=n(T,"LI",{});var A4e=s(xg);$U=n(A4e,"STRONG",{});var a$r=s($U);RVe=r(a$r,"xlm-roberta-xl"),a$r.forEach(t),SVe=r(A4e," \u2014 "),WB=n(A4e,"A",{href:!0});var n$r=s(WB);PVe=r(n$r,"XLMRobertaXLConfig"),n$r.forEach(t),$Ve=r(A4e," (XLM-RoBERTa-XL model)"),A4e.forEach(t),IVe=i(T),kg=n(T,"LI",{});var L4e=s(kg);IU=n(L4e,"STRONG",{});var s$r=s(IU);NVe=r(s$r,"xlnet"),s$r.forEach(t),DVe=r(L4e," \u2014 "),QB=n(L4e,"A",{href:!0});var l$r=s(QB);jVe=r(l$r,"XLNetConfig"),l$r.forEach(t),qVe=r(L4e," (XLNet model)"),L4e.forEach(t),GVe=i(T),Rg=n(T,"LI",{});var B4e=s(Rg);NU=n(B4e,"STRONG",{});var i$r=s(NU);OVe=r(i$r,"yoso"),i$r.forEach(t),XVe=r(B4e," \u2014 "),HB=n(B4e,"A",{href:!0});var d$r=s(HB);VVe=r(d$r,"YosoConfig"),d$r.forEach(t),zVe=r(B4e," (YOSO model)"),B4e.forEach(t),T.forEach(t),WVe=i(ga),DU=n(ga,"P",{});var c$r=s(DU);QVe=r(c$r,"Examples:"),c$r.forEach(t),HVe=i(ga),f(py.$$.fragment,ga),ga.forEach(t),UVe=i(Os),Sg=n(Os,"DIV",{class:!0});var dSe=s(Sg);f(_y.$$.fragment,dSe),JVe=i(dSe),jU=n(dSe,"P",{});var m$r=s(jU);YVe=r(m$r,"Register a new configuration for this class."),m$r.forEach(t),dSe.forEach(t),Os.forEach(t),lke=i(c),Wi=n(c,"H2",{class:!0});var cSe=s(Wi);Pg=n(cSe,"A",{id:!0,class:!0,href:!0});var f$r=s(Pg);qU=n(f$r,"SPAN",{});var g$r=s(qU);f(by.$$.fragment,g$r),g$r.forEach(t),f$r.forEach(t),KVe=i(cSe),GU=n(cSe,"SPAN",{});var h$r=s(GU);ZVe=r(h$r,"AutoTokenizer"),h$r.forEach(t),cSe.forEach(t),ike=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);f(vy.$$.fragment,Xs),eze=i(Xs),Ty=n(Xs,"P",{});var mSe=s(Ty);oze=r(mSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UB=n(mSe,"A",{href:!0});var u$r=s(UB);rze=r(u$r,"AutoTokenizer.from_pretrained()"),u$r.forEach(t),tze=r(mSe," class method."),mSe.forEach(t),aze=i(Xs),Fy=n(Xs,"P",{});var fSe=s(Fy);nze=r(fSe,"This class cannot be instantiated directly using "),OU=n(fSe,"CODE",{});var p$r=s(OU);sze=r(p$r,"__init__()"),p$r.forEach(t),lze=r(fSe," (throws an error)."),fSe.forEach(t),ize=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);f(Cy.$$.fragment,ha),dze=i(ha),XU=n(ha,"P",{});var _$r=s(XU);cze=r(_$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_$r.forEach(t),mze=i(ha),Oa=n(ha,"P",{});var l5=s(Oa);fze=r(l5,"The tokenizer class to instantiate is selected based on the "),VU=n(l5,"CODE",{});var b$r=s(VU);gze=r(b$r,"model_type"),b$r.forEach(t),hze=r(l5,` property of the config object (either
passed as an argument or loaded from `),zU=n(l5,"CODE",{});var v$r=s(zU);uze=r(v$r,"pretrained_model_name_or_path"),v$r.forEach(t),pze=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WU=n(l5,"CODE",{});var T$r=s(WU);_ze=r(T$r,"pretrained_model_name_or_path"),T$r.forEach(t),bze=r(l5,":"),l5.forEach(t),vze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var r8=s(Wn);QU=n(r8,"STRONG",{});var F$r=s(QU);Tze=r(F$r,"albert"),F$r.forEach(t),Fze=r(r8," \u2014 "),JB=n(r8,"A",{href:!0});var C$r=s(JB);Cze=r(C$r,"AlbertTokenizer"),C$r.forEach(t),Mze=r(r8," or "),YB=n(r8,"A",{href:!0});var M$r=s(YB);Eze=r(M$r,"AlbertTokenizerFast"),M$r.forEach(t),yze=r(r8," (ALBERT model)"),r8.forEach(t),wze=i(y),Qn=n(y,"LI",{});var t8=s(Qn);HU=n(t8,"STRONG",{});var E$r=s(HU);Aze=r(E$r,"bart"),E$r.forEach(t),Lze=r(t8," \u2014 "),KB=n(t8,"A",{href:!0});var y$r=s(KB);Bze=r(y$r,"BartTokenizer"),y$r.forEach(t),xze=r(t8," or "),ZB=n(t8,"A",{href:!0});var w$r=s(ZB);kze=r(w$r,"BartTokenizerFast"),w$r.forEach(t),Rze=r(t8," (BART model)"),t8.forEach(t),Sze=i(y),Hn=n(y,"LI",{});var a8=s(Hn);UU=n(a8,"STRONG",{});var A$r=s(UU);Pze=r(A$r,"barthez"),A$r.forEach(t),$ze=r(a8," \u2014 "),ex=n(a8,"A",{href:!0});var L$r=s(ex);Ize=r(L$r,"BarthezTokenizer"),L$r.forEach(t),Nze=r(a8," or "),ox=n(a8,"A",{href:!0});var B$r=s(ox);Dze=r(B$r,"BarthezTokenizerFast"),B$r.forEach(t),jze=r(a8," (BARThez model)"),a8.forEach(t),qze=i(y),$g=n(y,"LI",{});var x4e=s($g);JU=n(x4e,"STRONG",{});var x$r=s(JU);Gze=r(x$r,"bartpho"),x$r.forEach(t),Oze=r(x4e," \u2014 "),rx=n(x4e,"A",{href:!0});var k$r=s(rx);Xze=r(k$r,"BartphoTokenizer"),k$r.forEach(t),Vze=r(x4e," (BARTpho model)"),x4e.forEach(t),zze=i(y),Un=n(y,"LI",{});var n8=s(Un);YU=n(n8,"STRONG",{});var R$r=s(YU);Wze=r(R$r,"bert"),R$r.forEach(t),Qze=r(n8," \u2014 "),tx=n(n8,"A",{href:!0});var S$r=s(tx);Hze=r(S$r,"BertTokenizer"),S$r.forEach(t),Uze=r(n8," or "),ax=n(n8,"A",{href:!0});var P$r=s(ax);Jze=r(P$r,"BertTokenizerFast"),P$r.forEach(t),Yze=r(n8," (BERT model)"),n8.forEach(t),Kze=i(y),Ig=n(y,"LI",{});var k4e=s(Ig);KU=n(k4e,"STRONG",{});var $$r=s(KU);Zze=r($$r,"bert-generation"),$$r.forEach(t),eWe=r(k4e," \u2014 "),nx=n(k4e,"A",{href:!0});var I$r=s(nx);oWe=r(I$r,"BertGenerationTokenizer"),I$r.forEach(t),rWe=r(k4e," (Bert Generation model)"),k4e.forEach(t),tWe=i(y),Ng=n(y,"LI",{});var R4e=s(Ng);ZU=n(R4e,"STRONG",{});var N$r=s(ZU);aWe=r(N$r,"bert-japanese"),N$r.forEach(t),nWe=r(R4e," \u2014 "),sx=n(R4e,"A",{href:!0});var D$r=s(sx);sWe=r(D$r,"BertJapaneseTokenizer"),D$r.forEach(t),lWe=r(R4e," (BertJapanese model)"),R4e.forEach(t),iWe=i(y),Dg=n(y,"LI",{});var S4e=s(Dg);eJ=n(S4e,"STRONG",{});var j$r=s(eJ);dWe=r(j$r,"bertweet"),j$r.forEach(t),cWe=r(S4e," \u2014 "),lx=n(S4e,"A",{href:!0});var q$r=s(lx);mWe=r(q$r,"BertweetTokenizer"),q$r.forEach(t),fWe=r(S4e," (Bertweet model)"),S4e.forEach(t),gWe=i(y),Jn=n(y,"LI",{});var s8=s(Jn);oJ=n(s8,"STRONG",{});var G$r=s(oJ);hWe=r(G$r,"big_bird"),G$r.forEach(t),uWe=r(s8," \u2014 "),ix=n(s8,"A",{href:!0});var O$r=s(ix);pWe=r(O$r,"BigBirdTokenizer"),O$r.forEach(t),_We=r(s8," or "),dx=n(s8,"A",{href:!0});var X$r=s(dx);bWe=r(X$r,"BigBirdTokenizerFast"),X$r.forEach(t),vWe=r(s8," (BigBird model)"),s8.forEach(t),TWe=i(y),Yn=n(y,"LI",{});var l8=s(Yn);rJ=n(l8,"STRONG",{});var V$r=s(rJ);FWe=r(V$r,"bigbird_pegasus"),V$r.forEach(t),CWe=r(l8," \u2014 "),cx=n(l8,"A",{href:!0});var z$r=s(cx);MWe=r(z$r,"PegasusTokenizer"),z$r.forEach(t),EWe=r(l8," or "),mx=n(l8,"A",{href:!0});var W$r=s(mx);yWe=r(W$r,"PegasusTokenizerFast"),W$r.forEach(t),wWe=r(l8," (BigBirdPegasus model)"),l8.forEach(t),AWe=i(y),Kn=n(y,"LI",{});var i8=s(Kn);tJ=n(i8,"STRONG",{});var Q$r=s(tJ);LWe=r(Q$r,"blenderbot"),Q$r.forEach(t),BWe=r(i8," \u2014 "),fx=n(i8,"A",{href:!0});var H$r=s(fx);xWe=r(H$r,"BlenderbotTokenizer"),H$r.forEach(t),kWe=r(i8," or "),gx=n(i8,"A",{href:!0});var U$r=s(gx);RWe=r(U$r,"BlenderbotTokenizerFast"),U$r.forEach(t),SWe=r(i8," (Blenderbot model)"),i8.forEach(t),PWe=i(y),jg=n(y,"LI",{});var P4e=s(jg);aJ=n(P4e,"STRONG",{});var J$r=s(aJ);$We=r(J$r,"blenderbot-small"),J$r.forEach(t),IWe=r(P4e," \u2014 "),hx=n(P4e,"A",{href:!0});var Y$r=s(hx);NWe=r(Y$r,"BlenderbotSmallTokenizer"),Y$r.forEach(t),DWe=r(P4e," (BlenderbotSmall model)"),P4e.forEach(t),jWe=i(y),qg=n(y,"LI",{});var $4e=s(qg);nJ=n($4e,"STRONG",{});var K$r=s(nJ);qWe=r(K$r,"byt5"),K$r.forEach(t),GWe=r($4e," \u2014 "),ux=n($4e,"A",{href:!0});var Z$r=s(ux);OWe=r(Z$r,"ByT5Tokenizer"),Z$r.forEach(t),XWe=r($4e," (ByT5 model)"),$4e.forEach(t),VWe=i(y),Zn=n(y,"LI",{});var d8=s(Zn);sJ=n(d8,"STRONG",{});var eIr=s(sJ);zWe=r(eIr,"camembert"),eIr.forEach(t),WWe=r(d8," \u2014 "),px=n(d8,"A",{href:!0});var oIr=s(px);QWe=r(oIr,"CamembertTokenizer"),oIr.forEach(t),HWe=r(d8," or "),_x=n(d8,"A",{href:!0});var rIr=s(_x);UWe=r(rIr,"CamembertTokenizerFast"),rIr.forEach(t),JWe=r(d8," (CamemBERT model)"),d8.forEach(t),YWe=i(y),Gg=n(y,"LI",{});var I4e=s(Gg);lJ=n(I4e,"STRONG",{});var tIr=s(lJ);KWe=r(tIr,"canine"),tIr.forEach(t),ZWe=r(I4e," \u2014 "),bx=n(I4e,"A",{href:!0});var aIr=s(bx);eQe=r(aIr,"CanineTokenizer"),aIr.forEach(t),oQe=r(I4e," (Canine model)"),I4e.forEach(t),rQe=i(y),es=n(y,"LI",{});var c8=s(es);iJ=n(c8,"STRONG",{});var nIr=s(iJ);tQe=r(nIr,"clip"),nIr.forEach(t),aQe=r(c8," \u2014 "),vx=n(c8,"A",{href:!0});var sIr=s(vx);nQe=r(sIr,"CLIPTokenizer"),sIr.forEach(t),sQe=r(c8," or "),Tx=n(c8,"A",{href:!0});var lIr=s(Tx);lQe=r(lIr,"CLIPTokenizerFast"),lIr.forEach(t),iQe=r(c8," (CLIP model)"),c8.forEach(t),dQe=i(y),os=n(y,"LI",{});var m8=s(os);dJ=n(m8,"STRONG",{});var iIr=s(dJ);cQe=r(iIr,"convbert"),iIr.forEach(t),mQe=r(m8," \u2014 "),Fx=n(m8,"A",{href:!0});var dIr=s(Fx);fQe=r(dIr,"ConvBertTokenizer"),dIr.forEach(t),gQe=r(m8," or "),Cx=n(m8,"A",{href:!0});var cIr=s(Cx);hQe=r(cIr,"ConvBertTokenizerFast"),cIr.forEach(t),uQe=r(m8," (ConvBERT model)"),m8.forEach(t),pQe=i(y),rs=n(y,"LI",{});var f8=s(rs);cJ=n(f8,"STRONG",{});var mIr=s(cJ);_Qe=r(mIr,"cpm"),mIr.forEach(t),bQe=r(f8," \u2014 "),Mx=n(f8,"A",{href:!0});var fIr=s(Mx);vQe=r(fIr,"CpmTokenizer"),fIr.forEach(t),TQe=r(f8," or "),mJ=n(f8,"CODE",{});var gIr=s(mJ);FQe=r(gIr,"CpmTokenizerFast"),gIr.forEach(t),CQe=r(f8," (CPM model)"),f8.forEach(t),MQe=i(y),Og=n(y,"LI",{});var N4e=s(Og);fJ=n(N4e,"STRONG",{});var hIr=s(fJ);EQe=r(hIr,"ctrl"),hIr.forEach(t),yQe=r(N4e," \u2014 "),Ex=n(N4e,"A",{href:!0});var uIr=s(Ex);wQe=r(uIr,"CTRLTokenizer"),uIr.forEach(t),AQe=r(N4e," (CTRL model)"),N4e.forEach(t),LQe=i(y),ts=n(y,"LI",{});var g8=s(ts);gJ=n(g8,"STRONG",{});var pIr=s(gJ);BQe=r(pIr,"deberta"),pIr.forEach(t),xQe=r(g8," \u2014 "),yx=n(g8,"A",{href:!0});var _Ir=s(yx);kQe=r(_Ir,"DebertaTokenizer"),_Ir.forEach(t),RQe=r(g8," or "),wx=n(g8,"A",{href:!0});var bIr=s(wx);SQe=r(bIr,"DebertaTokenizerFast"),bIr.forEach(t),PQe=r(g8," (DeBERTa model)"),g8.forEach(t),$Qe=i(y),Xg=n(y,"LI",{});var D4e=s(Xg);hJ=n(D4e,"STRONG",{});var vIr=s(hJ);IQe=r(vIr,"deberta-v2"),vIr.forEach(t),NQe=r(D4e," \u2014 "),Ax=n(D4e,"A",{href:!0});var TIr=s(Ax);DQe=r(TIr,"DebertaV2Tokenizer"),TIr.forEach(t),jQe=r(D4e," (DeBERTa-v2 model)"),D4e.forEach(t),qQe=i(y),as=n(y,"LI",{});var h8=s(as);uJ=n(h8,"STRONG",{});var FIr=s(uJ);GQe=r(FIr,"distilbert"),FIr.forEach(t),OQe=r(h8," \u2014 "),Lx=n(h8,"A",{href:!0});var CIr=s(Lx);XQe=r(CIr,"DistilBertTokenizer"),CIr.forEach(t),VQe=r(h8," or "),Bx=n(h8,"A",{href:!0});var MIr=s(Bx);zQe=r(MIr,"DistilBertTokenizerFast"),MIr.forEach(t),WQe=r(h8," (DistilBERT model)"),h8.forEach(t),QQe=i(y),ns=n(y,"LI",{});var u8=s(ns);pJ=n(u8,"STRONG",{});var EIr=s(pJ);HQe=r(EIr,"dpr"),EIr.forEach(t),UQe=r(u8," \u2014 "),xx=n(u8,"A",{href:!0});var yIr=s(xx);JQe=r(yIr,"DPRQuestionEncoderTokenizer"),yIr.forEach(t),YQe=r(u8," or "),kx=n(u8,"A",{href:!0});var wIr=s(kx);KQe=r(wIr,"DPRQuestionEncoderTokenizerFast"),wIr.forEach(t),ZQe=r(u8," (DPR model)"),u8.forEach(t),eHe=i(y),ss=n(y,"LI",{});var p8=s(ss);_J=n(p8,"STRONG",{});var AIr=s(_J);oHe=r(AIr,"electra"),AIr.forEach(t),rHe=r(p8," \u2014 "),Rx=n(p8,"A",{href:!0});var LIr=s(Rx);tHe=r(LIr,"ElectraTokenizer"),LIr.forEach(t),aHe=r(p8," or "),Sx=n(p8,"A",{href:!0});var BIr=s(Sx);nHe=r(BIr,"ElectraTokenizerFast"),BIr.forEach(t),sHe=r(p8," (ELECTRA model)"),p8.forEach(t),lHe=i(y),Vg=n(y,"LI",{});var j4e=s(Vg);bJ=n(j4e,"STRONG",{});var xIr=s(bJ);iHe=r(xIr,"flaubert"),xIr.forEach(t),dHe=r(j4e," \u2014 "),Px=n(j4e,"A",{href:!0});var kIr=s(Px);cHe=r(kIr,"FlaubertTokenizer"),kIr.forEach(t),mHe=r(j4e," (FlauBERT model)"),j4e.forEach(t),fHe=i(y),ls=n(y,"LI",{});var _8=s(ls);vJ=n(_8,"STRONG",{});var RIr=s(vJ);gHe=r(RIr,"fnet"),RIr.forEach(t),hHe=r(_8," \u2014 "),$x=n(_8,"A",{href:!0});var SIr=s($x);uHe=r(SIr,"FNetTokenizer"),SIr.forEach(t),pHe=r(_8," or "),Ix=n(_8,"A",{href:!0});var PIr=s(Ix);_He=r(PIr,"FNetTokenizerFast"),PIr.forEach(t),bHe=r(_8," (FNet model)"),_8.forEach(t),vHe=i(y),zg=n(y,"LI",{});var q4e=s(zg);TJ=n(q4e,"STRONG",{});var $Ir=s(TJ);THe=r($Ir,"fsmt"),$Ir.forEach(t),FHe=r(q4e," \u2014 "),Nx=n(q4e,"A",{href:!0});var IIr=s(Nx);CHe=r(IIr,"FSMTTokenizer"),IIr.forEach(t),MHe=r(q4e," (FairSeq Machine-Translation model)"),q4e.forEach(t),EHe=i(y),is=n(y,"LI",{});var b8=s(is);FJ=n(b8,"STRONG",{});var NIr=s(FJ);yHe=r(NIr,"funnel"),NIr.forEach(t),wHe=r(b8," \u2014 "),Dx=n(b8,"A",{href:!0});var DIr=s(Dx);AHe=r(DIr,"FunnelTokenizer"),DIr.forEach(t),LHe=r(b8," or "),jx=n(b8,"A",{href:!0});var jIr=s(jx);BHe=r(jIr,"FunnelTokenizerFast"),jIr.forEach(t),xHe=r(b8," (Funnel Transformer model)"),b8.forEach(t),kHe=i(y),ds=n(y,"LI",{});var v8=s(ds);CJ=n(v8,"STRONG",{});var qIr=s(CJ);RHe=r(qIr,"gpt2"),qIr.forEach(t),SHe=r(v8," \u2014 "),qx=n(v8,"A",{href:!0});var GIr=s(qx);PHe=r(GIr,"GPT2Tokenizer"),GIr.forEach(t),$He=r(v8," or "),Gx=n(v8,"A",{href:!0});var OIr=s(Gx);IHe=r(OIr,"GPT2TokenizerFast"),OIr.forEach(t),NHe=r(v8," (OpenAI GPT-2 model)"),v8.forEach(t),DHe=i(y),cs=n(y,"LI",{});var T8=s(cs);MJ=n(T8,"STRONG",{});var XIr=s(MJ);jHe=r(XIr,"gpt_neo"),XIr.forEach(t),qHe=r(T8," \u2014 "),Ox=n(T8,"A",{href:!0});var VIr=s(Ox);GHe=r(VIr,"GPT2Tokenizer"),VIr.forEach(t),OHe=r(T8," or "),Xx=n(T8,"A",{href:!0});var zIr=s(Xx);XHe=r(zIr,"GPT2TokenizerFast"),zIr.forEach(t),VHe=r(T8," (GPT Neo model)"),T8.forEach(t),zHe=i(y),ms=n(y,"LI",{});var F8=s(ms);EJ=n(F8,"STRONG",{});var WIr=s(EJ);WHe=r(WIr,"herbert"),WIr.forEach(t),QHe=r(F8," \u2014 "),Vx=n(F8,"A",{href:!0});var QIr=s(Vx);HHe=r(QIr,"HerbertTokenizer"),QIr.forEach(t),UHe=r(F8," or "),zx=n(F8,"A",{href:!0});var HIr=s(zx);JHe=r(HIr,"HerbertTokenizerFast"),HIr.forEach(t),YHe=r(F8," (HerBERT model)"),F8.forEach(t),KHe=i(y),Wg=n(y,"LI",{});var G4e=s(Wg);yJ=n(G4e,"STRONG",{});var UIr=s(yJ);ZHe=r(UIr,"hubert"),UIr.forEach(t),eUe=r(G4e," \u2014 "),Wx=n(G4e,"A",{href:!0});var JIr=s(Wx);oUe=r(JIr,"Wav2Vec2CTCTokenizer"),JIr.forEach(t),rUe=r(G4e," (Hubert model)"),G4e.forEach(t),tUe=i(y),fs=n(y,"LI",{});var C8=s(fs);wJ=n(C8,"STRONG",{});var YIr=s(wJ);aUe=r(YIr,"ibert"),YIr.forEach(t),nUe=r(C8," \u2014 "),Qx=n(C8,"A",{href:!0});var KIr=s(Qx);sUe=r(KIr,"RobertaTokenizer"),KIr.forEach(t),lUe=r(C8," or "),Hx=n(C8,"A",{href:!0});var ZIr=s(Hx);iUe=r(ZIr,"RobertaTokenizerFast"),ZIr.forEach(t),dUe=r(C8," (I-BERT model)"),C8.forEach(t),cUe=i(y),gs=n(y,"LI",{});var M8=s(gs);AJ=n(M8,"STRONG",{});var eNr=s(AJ);mUe=r(eNr,"layoutlm"),eNr.forEach(t),fUe=r(M8," \u2014 "),Ux=n(M8,"A",{href:!0});var oNr=s(Ux);gUe=r(oNr,"LayoutLMTokenizer"),oNr.forEach(t),hUe=r(M8," or "),Jx=n(M8,"A",{href:!0});var rNr=s(Jx);uUe=r(rNr,"LayoutLMTokenizerFast"),rNr.forEach(t),pUe=r(M8," (LayoutLM model)"),M8.forEach(t),_Ue=i(y),hs=n(y,"LI",{});var E8=s(hs);LJ=n(E8,"STRONG",{});var tNr=s(LJ);bUe=r(tNr,"layoutlmv2"),tNr.forEach(t),vUe=r(E8," \u2014 "),Yx=n(E8,"A",{href:!0});var aNr=s(Yx);TUe=r(aNr,"LayoutLMv2Tokenizer"),aNr.forEach(t),FUe=r(E8," or "),Kx=n(E8,"A",{href:!0});var nNr=s(Kx);CUe=r(nNr,"LayoutLMv2TokenizerFast"),nNr.forEach(t),MUe=r(E8," (LayoutLMv2 model)"),E8.forEach(t),EUe=i(y),us=n(y,"LI",{});var y8=s(us);BJ=n(y8,"STRONG",{});var sNr=s(BJ);yUe=r(sNr,"layoutxlm"),sNr.forEach(t),wUe=r(y8," \u2014 "),Zx=n(y8,"A",{href:!0});var lNr=s(Zx);AUe=r(lNr,"LayoutXLMTokenizer"),lNr.forEach(t),LUe=r(y8," or "),ek=n(y8,"A",{href:!0});var iNr=s(ek);BUe=r(iNr,"LayoutXLMTokenizerFast"),iNr.forEach(t),xUe=r(y8," (LayoutXLM model)"),y8.forEach(t),kUe=i(y),ps=n(y,"LI",{});var w8=s(ps);xJ=n(w8,"STRONG",{});var dNr=s(xJ);RUe=r(dNr,"led"),dNr.forEach(t),SUe=r(w8," \u2014 "),ok=n(w8,"A",{href:!0});var cNr=s(ok);PUe=r(cNr,"LEDTokenizer"),cNr.forEach(t),$Ue=r(w8," or "),rk=n(w8,"A",{href:!0});var mNr=s(rk);IUe=r(mNr,"LEDTokenizerFast"),mNr.forEach(t),NUe=r(w8," (LED model)"),w8.forEach(t),DUe=i(y),_s=n(y,"LI",{});var A8=s(_s);kJ=n(A8,"STRONG",{});var fNr=s(kJ);jUe=r(fNr,"longformer"),fNr.forEach(t),qUe=r(A8," \u2014 "),tk=n(A8,"A",{href:!0});var gNr=s(tk);GUe=r(gNr,"LongformerTokenizer"),gNr.forEach(t),OUe=r(A8," or "),ak=n(A8,"A",{href:!0});var hNr=s(ak);XUe=r(hNr,"LongformerTokenizerFast"),hNr.forEach(t),VUe=r(A8," (Longformer model)"),A8.forEach(t),zUe=i(y),Qg=n(y,"LI",{});var O4e=s(Qg);RJ=n(O4e,"STRONG",{});var uNr=s(RJ);WUe=r(uNr,"luke"),uNr.forEach(t),QUe=r(O4e," \u2014 "),nk=n(O4e,"A",{href:!0});var pNr=s(nk);HUe=r(pNr,"LukeTokenizer"),pNr.forEach(t),UUe=r(O4e," (LUKE model)"),O4e.forEach(t),JUe=i(y),bs=n(y,"LI",{});var L8=s(bs);SJ=n(L8,"STRONG",{});var _Nr=s(SJ);YUe=r(_Nr,"lxmert"),_Nr.forEach(t),KUe=r(L8," \u2014 "),sk=n(L8,"A",{href:!0});var bNr=s(sk);ZUe=r(bNr,"LxmertTokenizer"),bNr.forEach(t),eJe=r(L8," or "),lk=n(L8,"A",{href:!0});var vNr=s(lk);oJe=r(vNr,"LxmertTokenizerFast"),vNr.forEach(t),rJe=r(L8," (LXMERT model)"),L8.forEach(t),tJe=i(y),Hg=n(y,"LI",{});var X4e=s(Hg);PJ=n(X4e,"STRONG",{});var TNr=s(PJ);aJe=r(TNr,"m2m_100"),TNr.forEach(t),nJe=r(X4e," \u2014 "),ik=n(X4e,"A",{href:!0});var FNr=s(ik);sJe=r(FNr,"M2M100Tokenizer"),FNr.forEach(t),lJe=r(X4e," (M2M100 model)"),X4e.forEach(t),iJe=i(y),Ug=n(y,"LI",{});var V4e=s(Ug);$J=n(V4e,"STRONG",{});var CNr=s($J);dJe=r(CNr,"marian"),CNr.forEach(t),cJe=r(V4e," \u2014 "),dk=n(V4e,"A",{href:!0});var MNr=s(dk);mJe=r(MNr,"MarianTokenizer"),MNr.forEach(t),fJe=r(V4e," (Marian model)"),V4e.forEach(t),gJe=i(y),vs=n(y,"LI",{});var B8=s(vs);IJ=n(B8,"STRONG",{});var ENr=s(IJ);hJe=r(ENr,"mbart"),ENr.forEach(t),uJe=r(B8," \u2014 "),ck=n(B8,"A",{href:!0});var yNr=s(ck);pJe=r(yNr,"MBartTokenizer"),yNr.forEach(t),_Je=r(B8," or "),mk=n(B8,"A",{href:!0});var wNr=s(mk);bJe=r(wNr,"MBartTokenizerFast"),wNr.forEach(t),vJe=r(B8," (mBART model)"),B8.forEach(t),TJe=i(y),Ts=n(y,"LI",{});var x8=s(Ts);NJ=n(x8,"STRONG",{});var ANr=s(NJ);FJe=r(ANr,"mbart50"),ANr.forEach(t),CJe=r(x8," \u2014 "),fk=n(x8,"A",{href:!0});var LNr=s(fk);MJe=r(LNr,"MBart50Tokenizer"),LNr.forEach(t),EJe=r(x8," or "),gk=n(x8,"A",{href:!0});var BNr=s(gk);yJe=r(BNr,"MBart50TokenizerFast"),BNr.forEach(t),wJe=r(x8," (mBART-50 model)"),x8.forEach(t),AJe=i(y),Jg=n(y,"LI",{});var z4e=s(Jg);DJ=n(z4e,"STRONG",{});var xNr=s(DJ);LJe=r(xNr,"mluke"),xNr.forEach(t),BJe=r(z4e," \u2014 "),hk=n(z4e,"A",{href:!0});var kNr=s(hk);xJe=r(kNr,"MLukeTokenizer"),kNr.forEach(t),kJe=r(z4e," (mLUKE model)"),z4e.forEach(t),RJe=i(y),Fs=n(y,"LI",{});var k8=s(Fs);jJ=n(k8,"STRONG",{});var RNr=s(jJ);SJe=r(RNr,"mobilebert"),RNr.forEach(t),PJe=r(k8," \u2014 "),uk=n(k8,"A",{href:!0});var SNr=s(uk);$Je=r(SNr,"MobileBertTokenizer"),SNr.forEach(t),IJe=r(k8," or "),pk=n(k8,"A",{href:!0});var PNr=s(pk);NJe=r(PNr,"MobileBertTokenizerFast"),PNr.forEach(t),DJe=r(k8," (MobileBERT model)"),k8.forEach(t),jJe=i(y),Cs=n(y,"LI",{});var R8=s(Cs);qJ=n(R8,"STRONG",{});var $Nr=s(qJ);qJe=r($Nr,"mpnet"),$Nr.forEach(t),GJe=r(R8," \u2014 "),_k=n(R8,"A",{href:!0});var INr=s(_k);OJe=r(INr,"MPNetTokenizer"),INr.forEach(t),XJe=r(R8," or "),bk=n(R8,"A",{href:!0});var NNr=s(bk);VJe=r(NNr,"MPNetTokenizerFast"),NNr.forEach(t),zJe=r(R8," (MPNet model)"),R8.forEach(t),WJe=i(y),Ms=n(y,"LI",{});var S8=s(Ms);GJ=n(S8,"STRONG",{});var DNr=s(GJ);QJe=r(DNr,"mt5"),DNr.forEach(t),HJe=r(S8," \u2014 "),vk=n(S8,"A",{href:!0});var jNr=s(vk);UJe=r(jNr,"MT5Tokenizer"),jNr.forEach(t),JJe=r(S8," or "),Tk=n(S8,"A",{href:!0});var qNr=s(Tk);YJe=r(qNr,"MT5TokenizerFast"),qNr.forEach(t),KJe=r(S8," (mT5 model)"),S8.forEach(t),ZJe=i(y),Es=n(y,"LI",{});var P8=s(Es);OJ=n(P8,"STRONG",{});var GNr=s(OJ);eYe=r(GNr,"openai-gpt"),GNr.forEach(t),oYe=r(P8," \u2014 "),Fk=n(P8,"A",{href:!0});var ONr=s(Fk);rYe=r(ONr,"OpenAIGPTTokenizer"),ONr.forEach(t),tYe=r(P8," or "),Ck=n(P8,"A",{href:!0});var XNr=s(Ck);aYe=r(XNr,"OpenAIGPTTokenizerFast"),XNr.forEach(t),nYe=r(P8," (OpenAI GPT model)"),P8.forEach(t),sYe=i(y),ys=n(y,"LI",{});var $8=s(ys);XJ=n($8,"STRONG",{});var VNr=s(XJ);lYe=r(VNr,"pegasus"),VNr.forEach(t),iYe=r($8," \u2014 "),Mk=n($8,"A",{href:!0});var zNr=s(Mk);dYe=r(zNr,"PegasusTokenizer"),zNr.forEach(t),cYe=r($8," or "),Ek=n($8,"A",{href:!0});var WNr=s(Ek);mYe=r(WNr,"PegasusTokenizerFast"),WNr.forEach(t),fYe=r($8," (Pegasus model)"),$8.forEach(t),gYe=i(y),Yg=n(y,"LI",{});var W4e=s(Yg);VJ=n(W4e,"STRONG",{});var QNr=s(VJ);hYe=r(QNr,"perceiver"),QNr.forEach(t),uYe=r(W4e," \u2014 "),yk=n(W4e,"A",{href:!0});var HNr=s(yk);pYe=r(HNr,"PerceiverTokenizer"),HNr.forEach(t),_Ye=r(W4e," (Perceiver model)"),W4e.forEach(t),bYe=i(y),Kg=n(y,"LI",{});var Q4e=s(Kg);zJ=n(Q4e,"STRONG",{});var UNr=s(zJ);vYe=r(UNr,"phobert"),UNr.forEach(t),TYe=r(Q4e," \u2014 "),wk=n(Q4e,"A",{href:!0});var JNr=s(wk);FYe=r(JNr,"PhobertTokenizer"),JNr.forEach(t),CYe=r(Q4e," (PhoBERT model)"),Q4e.forEach(t),MYe=i(y),Zg=n(y,"LI",{});var H4e=s(Zg);WJ=n(H4e,"STRONG",{});var YNr=s(WJ);EYe=r(YNr,"plbart"),YNr.forEach(t),yYe=r(H4e," \u2014 "),Ak=n(H4e,"A",{href:!0});var KNr=s(Ak);wYe=r(KNr,"PLBartTokenizer"),KNr.forEach(t),AYe=r(H4e," (PLBart model)"),H4e.forEach(t),LYe=i(y),eh=n(y,"LI",{});var U4e=s(eh);QJ=n(U4e,"STRONG",{});var ZNr=s(QJ);BYe=r(ZNr,"prophetnet"),ZNr.forEach(t),xYe=r(U4e," \u2014 "),Lk=n(U4e,"A",{href:!0});var eDr=s(Lk);kYe=r(eDr,"ProphetNetTokenizer"),eDr.forEach(t),RYe=r(U4e," (ProphetNet model)"),U4e.forEach(t),SYe=i(y),ws=n(y,"LI",{});var I8=s(ws);HJ=n(I8,"STRONG",{});var oDr=s(HJ);PYe=r(oDr,"qdqbert"),oDr.forEach(t),$Ye=r(I8," \u2014 "),Bk=n(I8,"A",{href:!0});var rDr=s(Bk);IYe=r(rDr,"BertTokenizer"),rDr.forEach(t),NYe=r(I8," or "),xk=n(I8,"A",{href:!0});var tDr=s(xk);DYe=r(tDr,"BertTokenizerFast"),tDr.forEach(t),jYe=r(I8," (QDQBert model)"),I8.forEach(t),qYe=i(y),oh=n(y,"LI",{});var J4e=s(oh);UJ=n(J4e,"STRONG",{});var aDr=s(UJ);GYe=r(aDr,"rag"),aDr.forEach(t),OYe=r(J4e," \u2014 "),kk=n(J4e,"A",{href:!0});var nDr=s(kk);XYe=r(nDr,"RagTokenizer"),nDr.forEach(t),VYe=r(J4e," (RAG model)"),J4e.forEach(t),zYe=i(y),As=n(y,"LI",{});var N8=s(As);JJ=n(N8,"STRONG",{});var sDr=s(JJ);WYe=r(sDr,"realm"),sDr.forEach(t),QYe=r(N8," \u2014 "),Rk=n(N8,"A",{href:!0});var lDr=s(Rk);HYe=r(lDr,"RealmTokenizer"),lDr.forEach(t),UYe=r(N8," or "),Sk=n(N8,"A",{href:!0});var iDr=s(Sk);JYe=r(iDr,"RealmTokenizerFast"),iDr.forEach(t),YYe=r(N8," (Realm model)"),N8.forEach(t),KYe=i(y),Ls=n(y,"LI",{});var D8=s(Ls);YJ=n(D8,"STRONG",{});var dDr=s(YJ);ZYe=r(dDr,"reformer"),dDr.forEach(t),eKe=r(D8," \u2014 "),Pk=n(D8,"A",{href:!0});var cDr=s(Pk);oKe=r(cDr,"ReformerTokenizer"),cDr.forEach(t),rKe=r(D8," or "),$k=n(D8,"A",{href:!0});var mDr=s($k);tKe=r(mDr,"ReformerTokenizerFast"),mDr.forEach(t),aKe=r(D8," (Reformer model)"),D8.forEach(t),nKe=i(y),Bs=n(y,"LI",{});var j8=s(Bs);KJ=n(j8,"STRONG",{});var fDr=s(KJ);sKe=r(fDr,"rembert"),fDr.forEach(t),lKe=r(j8," \u2014 "),Ik=n(j8,"A",{href:!0});var gDr=s(Ik);iKe=r(gDr,"RemBertTokenizer"),gDr.forEach(t),dKe=r(j8," or "),Nk=n(j8,"A",{href:!0});var hDr=s(Nk);cKe=r(hDr,"RemBertTokenizerFast"),hDr.forEach(t),mKe=r(j8," (RemBERT model)"),j8.forEach(t),fKe=i(y),xs=n(y,"LI",{});var q8=s(xs);ZJ=n(q8,"STRONG",{});var uDr=s(ZJ);gKe=r(uDr,"retribert"),uDr.forEach(t),hKe=r(q8," \u2014 "),Dk=n(q8,"A",{href:!0});var pDr=s(Dk);uKe=r(pDr,"RetriBertTokenizer"),pDr.forEach(t),pKe=r(q8," or "),jk=n(q8,"A",{href:!0});var _Dr=s(jk);_Ke=r(_Dr,"RetriBertTokenizerFast"),_Dr.forEach(t),bKe=r(q8," (RetriBERT model)"),q8.forEach(t),vKe=i(y),ks=n(y,"LI",{});var G8=s(ks);eY=n(G8,"STRONG",{});var bDr=s(eY);TKe=r(bDr,"roberta"),bDr.forEach(t),FKe=r(G8," \u2014 "),qk=n(G8,"A",{href:!0});var vDr=s(qk);CKe=r(vDr,"RobertaTokenizer"),vDr.forEach(t),MKe=r(G8," or "),Gk=n(G8,"A",{href:!0});var TDr=s(Gk);EKe=r(TDr,"RobertaTokenizerFast"),TDr.forEach(t),yKe=r(G8," (RoBERTa model)"),G8.forEach(t),wKe=i(y),Rs=n(y,"LI",{});var O8=s(Rs);oY=n(O8,"STRONG",{});var FDr=s(oY);AKe=r(FDr,"roformer"),FDr.forEach(t),LKe=r(O8," \u2014 "),Ok=n(O8,"A",{href:!0});var CDr=s(Ok);BKe=r(CDr,"RoFormerTokenizer"),CDr.forEach(t),xKe=r(O8," or "),Xk=n(O8,"A",{href:!0});var MDr=s(Xk);kKe=r(MDr,"RoFormerTokenizerFast"),MDr.forEach(t),RKe=r(O8," (RoFormer model)"),O8.forEach(t),SKe=i(y),rh=n(y,"LI",{});var Y4e=s(rh);rY=n(Y4e,"STRONG",{});var EDr=s(rY);PKe=r(EDr,"speech_to_text"),EDr.forEach(t),$Ke=r(Y4e," \u2014 "),Vk=n(Y4e,"A",{href:!0});var yDr=s(Vk);IKe=r(yDr,"Speech2TextTokenizer"),yDr.forEach(t),NKe=r(Y4e," (Speech2Text model)"),Y4e.forEach(t),DKe=i(y),th=n(y,"LI",{});var K4e=s(th);tY=n(K4e,"STRONG",{});var wDr=s(tY);jKe=r(wDr,"speech_to_text_2"),wDr.forEach(t),qKe=r(K4e," \u2014 "),zk=n(K4e,"A",{href:!0});var ADr=s(zk);GKe=r(ADr,"Speech2Text2Tokenizer"),ADr.forEach(t),OKe=r(K4e," (Speech2Text2 model)"),K4e.forEach(t),XKe=i(y),Ss=n(y,"LI",{});var X8=s(Ss);aY=n(X8,"STRONG",{});var LDr=s(aY);VKe=r(LDr,"splinter"),LDr.forEach(t),zKe=r(X8," \u2014 "),Wk=n(X8,"A",{href:!0});var BDr=s(Wk);WKe=r(BDr,"SplinterTokenizer"),BDr.forEach(t),QKe=r(X8," or "),Qk=n(X8,"A",{href:!0});var xDr=s(Qk);HKe=r(xDr,"SplinterTokenizerFast"),xDr.forEach(t),UKe=r(X8," (Splinter model)"),X8.forEach(t),JKe=i(y),Ps=n(y,"LI",{});var V8=s(Ps);nY=n(V8,"STRONG",{});var kDr=s(nY);YKe=r(kDr,"squeezebert"),kDr.forEach(t),KKe=r(V8," \u2014 "),Hk=n(V8,"A",{href:!0});var RDr=s(Hk);ZKe=r(RDr,"SqueezeBertTokenizer"),RDr.forEach(t),eZe=r(V8," or "),Uk=n(V8,"A",{href:!0});var SDr=s(Uk);oZe=r(SDr,"SqueezeBertTokenizerFast"),SDr.forEach(t),rZe=r(V8," (SqueezeBERT model)"),V8.forEach(t),tZe=i(y),$s=n(y,"LI",{});var z8=s($s);sY=n(z8,"STRONG",{});var PDr=s(sY);aZe=r(PDr,"t5"),PDr.forEach(t),nZe=r(z8," \u2014 "),Jk=n(z8,"A",{href:!0});var $Dr=s(Jk);sZe=r($Dr,"T5Tokenizer"),$Dr.forEach(t),lZe=r(z8," or "),Yk=n(z8,"A",{href:!0});var IDr=s(Yk);iZe=r(IDr,"T5TokenizerFast"),IDr.forEach(t),dZe=r(z8," (T5 model)"),z8.forEach(t),cZe=i(y),ah=n(y,"LI",{});var Z4e=s(ah);lY=n(Z4e,"STRONG",{});var NDr=s(lY);mZe=r(NDr,"tapas"),NDr.forEach(t),fZe=r(Z4e," \u2014 "),Kk=n(Z4e,"A",{href:!0});var DDr=s(Kk);gZe=r(DDr,"TapasTokenizer"),DDr.forEach(t),hZe=r(Z4e," (TAPAS model)"),Z4e.forEach(t),uZe=i(y),nh=n(y,"LI",{});var eEe=s(nh);iY=n(eEe,"STRONG",{});var jDr=s(iY);pZe=r(jDr,"transfo-xl"),jDr.forEach(t),_Ze=r(eEe," \u2014 "),Zk=n(eEe,"A",{href:!0});var qDr=s(Zk);bZe=r(qDr,"TransfoXLTokenizer"),qDr.forEach(t),vZe=r(eEe," (Transformer-XL model)"),eEe.forEach(t),TZe=i(y),sh=n(y,"LI",{});var oEe=s(sh);dY=n(oEe,"STRONG",{});var GDr=s(dY);FZe=r(GDr,"wav2vec2"),GDr.forEach(t),CZe=r(oEe," \u2014 "),eR=n(oEe,"A",{href:!0});var ODr=s(eR);MZe=r(ODr,"Wav2Vec2CTCTokenizer"),ODr.forEach(t),EZe=r(oEe," (Wav2Vec2 model)"),oEe.forEach(t),yZe=i(y),lh=n(y,"LI",{});var rEe=s(lh);cY=n(rEe,"STRONG",{});var XDr=s(cY);wZe=r(XDr,"wav2vec2_phoneme"),XDr.forEach(t),AZe=r(rEe," \u2014 "),oR=n(rEe,"A",{href:!0});var VDr=s(oR);LZe=r(VDr,"Wav2Vec2PhonemeCTCTokenizer"),VDr.forEach(t),BZe=r(rEe," (Wav2Vec2Phoneme model)"),rEe.forEach(t),xZe=i(y),Is=n(y,"LI",{});var W8=s(Is);mY=n(W8,"STRONG",{});var zDr=s(mY);kZe=r(zDr,"xglm"),zDr.forEach(t),RZe=r(W8," \u2014 "),rR=n(W8,"A",{href:!0});var WDr=s(rR);SZe=r(WDr,"XGLMTokenizer"),WDr.forEach(t),PZe=r(W8," or "),tR=n(W8,"A",{href:!0});var QDr=s(tR);$Ze=r(QDr,"XGLMTokenizerFast"),QDr.forEach(t),IZe=r(W8," (XGLM model)"),W8.forEach(t),NZe=i(y),ih=n(y,"LI",{});var tEe=s(ih);fY=n(tEe,"STRONG",{});var HDr=s(fY);DZe=r(HDr,"xlm"),HDr.forEach(t),jZe=r(tEe," \u2014 "),aR=n(tEe,"A",{href:!0});var UDr=s(aR);qZe=r(UDr,"XLMTokenizer"),UDr.forEach(t),GZe=r(tEe," (XLM model)"),tEe.forEach(t),OZe=i(y),dh=n(y,"LI",{});var aEe=s(dh);gY=n(aEe,"STRONG",{});var JDr=s(gY);XZe=r(JDr,"xlm-prophetnet"),JDr.forEach(t),VZe=r(aEe," \u2014 "),nR=n(aEe,"A",{href:!0});var YDr=s(nR);zZe=r(YDr,"XLMProphetNetTokenizer"),YDr.forEach(t),WZe=r(aEe," (XLMProphetNet model)"),aEe.forEach(t),QZe=i(y),Ns=n(y,"LI",{});var Q8=s(Ns);hY=n(Q8,"STRONG",{});var KDr=s(hY);HZe=r(KDr,"xlm-roberta"),KDr.forEach(t),UZe=r(Q8," \u2014 "),sR=n(Q8,"A",{href:!0});var ZDr=s(sR);JZe=r(ZDr,"XLMRobertaTokenizer"),ZDr.forEach(t),YZe=r(Q8," or "),lR=n(Q8,"A",{href:!0});var ejr=s(lR);KZe=r(ejr,"XLMRobertaTokenizerFast"),ejr.forEach(t),ZZe=r(Q8," (XLM-RoBERTa model)"),Q8.forEach(t),eeo=i(y),Ds=n(y,"LI",{});var H8=s(Ds);uY=n(H8,"STRONG",{});var ojr=s(uY);oeo=r(ojr,"xlnet"),ojr.forEach(t),reo=r(H8," \u2014 "),iR=n(H8,"A",{href:!0});var rjr=s(iR);teo=r(rjr,"XLNetTokenizer"),rjr.forEach(t),aeo=r(H8," or "),dR=n(H8,"A",{href:!0});var tjr=s(dR);neo=r(tjr,"XLNetTokenizerFast"),tjr.forEach(t),seo=r(H8," (XLNet model)"),H8.forEach(t),y.forEach(t),leo=i(ha),pY=n(ha,"P",{});var ajr=s(pY);ieo=r(ajr,"Examples:"),ajr.forEach(t),deo=i(ha),f(My.$$.fragment,ha),ha.forEach(t),ceo=i(Xs),ch=n(Xs,"DIV",{class:!0});var gSe=s(ch);f(Ey.$$.fragment,gSe),meo=i(gSe),_Y=n(gSe,"P",{});var njr=s(_Y);feo=r(njr,"Register a new tokenizer in this mapping."),njr.forEach(t),gSe.forEach(t),Xs.forEach(t),dke=i(c),Qi=n(c,"H2",{class:!0});var hSe=s(Qi);mh=n(hSe,"A",{id:!0,class:!0,href:!0});var sjr=s(mh);bY=n(sjr,"SPAN",{});var ljr=s(bY);f(yy.$$.fragment,ljr),ljr.forEach(t),sjr.forEach(t),geo=i(hSe),vY=n(hSe,"SPAN",{});var ijr=s(vY);heo=r(ijr,"AutoFeatureExtractor"),ijr.forEach(t),hSe.forEach(t),cke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);f(wy.$$.fragment,Vs),ueo=i(Vs),Ay=n(Vs,"P",{});var uSe=s(Ay);peo=r(uSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),cR=n(uSe,"A",{href:!0});var djr=s(cR);_eo=r(djr,"AutoFeatureExtractor.from_pretrained()"),djr.forEach(t),beo=r(uSe," class method."),uSe.forEach(t),veo=i(Vs),Ly=n(Vs,"P",{});var pSe=s(Ly);Teo=r(pSe,"This class cannot be instantiated directly using "),TY=n(pSe,"CODE",{});var cjr=s(TY);Feo=r(cjr,"__init__()"),cjr.forEach(t),Ceo=r(pSe," (throws an error)."),pSe.forEach(t),Meo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);f(By.$$.fragment,Dt),Eeo=i(Dt),FY=n(Dt,"P",{});var mjr=s(FY);yeo=r(mjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mjr.forEach(t),weo=i(Dt),Xa=n(Dt,"P",{});var i5=s(Xa);Aeo=r(i5,"The feature extractor class to instantiate is selected based on the "),CY=n(i5,"CODE",{});var fjr=s(CY);Leo=r(fjr,"model_type"),fjr.forEach(t),Beo=r(i5,` property of the config object
(either passed as an argument or loaded from `),MY=n(i5,"CODE",{});var gjr=s(MY);xeo=r(gjr,"pretrained_model_name_or_path"),gjr.forEach(t),keo=r(i5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),EY=n(i5,"CODE",{});var hjr=s(EY);Reo=r(hjr,"pretrained_model_name_or_path"),hjr.forEach(t),Seo=r(i5,":"),i5.forEach(t),Peo=i(Dt),re=n(Dt,"UL",{});var ne=s(re);fh=n(ne,"LI",{});var nEe=s(fh);yY=n(nEe,"STRONG",{});var ujr=s(yY);$eo=r(ujr,"beit"),ujr.forEach(t),Ieo=r(nEe," \u2014 "),mR=n(nEe,"A",{href:!0});var pjr=s(mR);Neo=r(pjr,"BeitFeatureExtractor"),pjr.forEach(t),Deo=r(nEe," (BEiT model)"),nEe.forEach(t),jeo=i(ne),gh=n(ne,"LI",{});var sEe=s(gh);wY=n(sEe,"STRONG",{});var _jr=s(wY);qeo=r(_jr,"clip"),_jr.forEach(t),Geo=r(sEe," \u2014 "),fR=n(sEe,"A",{href:!0});var bjr=s(fR);Oeo=r(bjr,"CLIPFeatureExtractor"),bjr.forEach(t),Xeo=r(sEe," (CLIP model)"),sEe.forEach(t),Veo=i(ne),hh=n(ne,"LI",{});var lEe=s(hh);AY=n(lEe,"STRONG",{});var vjr=s(AY);zeo=r(vjr,"convnext"),vjr.forEach(t),Weo=r(lEe," \u2014 "),gR=n(lEe,"A",{href:!0});var Tjr=s(gR);Qeo=r(Tjr,"ConvNextFeatureExtractor"),Tjr.forEach(t),Heo=r(lEe," (ConvNext model)"),lEe.forEach(t),Ueo=i(ne),uh=n(ne,"LI",{});var iEe=s(uh);LY=n(iEe,"STRONG",{});var Fjr=s(LY);Jeo=r(Fjr,"deit"),Fjr.forEach(t),Yeo=r(iEe," \u2014 "),hR=n(iEe,"A",{href:!0});var Cjr=s(hR);Keo=r(Cjr,"DeiTFeatureExtractor"),Cjr.forEach(t),Zeo=r(iEe," (DeiT model)"),iEe.forEach(t),eoo=i(ne),ph=n(ne,"LI",{});var dEe=s(ph);BY=n(dEe,"STRONG",{});var Mjr=s(BY);ooo=r(Mjr,"detr"),Mjr.forEach(t),roo=r(dEe," \u2014 "),uR=n(dEe,"A",{href:!0});var Ejr=s(uR);too=r(Ejr,"DetrFeatureExtractor"),Ejr.forEach(t),aoo=r(dEe," (DETR model)"),dEe.forEach(t),noo=i(ne),_h=n(ne,"LI",{});var cEe=s(_h);xY=n(cEe,"STRONG",{});var yjr=s(xY);soo=r(yjr,"hubert"),yjr.forEach(t),loo=r(cEe," \u2014 "),pR=n(cEe,"A",{href:!0});var wjr=s(pR);ioo=r(wjr,"Wav2Vec2FeatureExtractor"),wjr.forEach(t),doo=r(cEe," (Hubert model)"),cEe.forEach(t),coo=i(ne),bh=n(ne,"LI",{});var mEe=s(bh);kY=n(mEe,"STRONG",{});var Ajr=s(kY);moo=r(Ajr,"layoutlmv2"),Ajr.forEach(t),foo=r(mEe," \u2014 "),_R=n(mEe,"A",{href:!0});var Ljr=s(_R);goo=r(Ljr,"LayoutLMv2FeatureExtractor"),Ljr.forEach(t),hoo=r(mEe," (LayoutLMv2 model)"),mEe.forEach(t),uoo=i(ne),vh=n(ne,"LI",{});var fEe=s(vh);RY=n(fEe,"STRONG",{});var Bjr=s(RY);poo=r(Bjr,"maskformer"),Bjr.forEach(t),_oo=r(fEe," \u2014 "),bR=n(fEe,"A",{href:!0});var xjr=s(bR);boo=r(xjr,"MaskFormerFeatureExtractor"),xjr.forEach(t),voo=r(fEe," (MaskFormer model)"),fEe.forEach(t),Too=i(ne),Th=n(ne,"LI",{});var gEe=s(Th);SY=n(gEe,"STRONG",{});var kjr=s(SY);Foo=r(kjr,"perceiver"),kjr.forEach(t),Coo=r(gEe," \u2014 "),vR=n(gEe,"A",{href:!0});var Rjr=s(vR);Moo=r(Rjr,"PerceiverFeatureExtractor"),Rjr.forEach(t),Eoo=r(gEe," (Perceiver model)"),gEe.forEach(t),yoo=i(ne),Fh=n(ne,"LI",{});var hEe=s(Fh);PY=n(hEe,"STRONG",{});var Sjr=s(PY);woo=r(Sjr,"poolformer"),Sjr.forEach(t),Aoo=r(hEe," \u2014 "),TR=n(hEe,"A",{href:!0});var Pjr=s(TR);Loo=r(Pjr,"PoolFormerFeatureExtractor"),Pjr.forEach(t),Boo=r(hEe," (PoolFormer model)"),hEe.forEach(t),xoo=i(ne),Ch=n(ne,"LI",{});var uEe=s(Ch);$Y=n(uEe,"STRONG",{});var $jr=s($Y);koo=r($jr,"resnet"),$jr.forEach(t),Roo=r(uEe," \u2014 "),FR=n(uEe,"A",{href:!0});var Ijr=s(FR);Soo=r(Ijr,"ConvNextFeatureExtractor"),Ijr.forEach(t),Poo=r(uEe," (ResNet model)"),uEe.forEach(t),$oo=i(ne),Mh=n(ne,"LI",{});var pEe=s(Mh);IY=n(pEe,"STRONG",{});var Njr=s(IY);Ioo=r(Njr,"segformer"),Njr.forEach(t),Noo=r(pEe," \u2014 "),CR=n(pEe,"A",{href:!0});var Djr=s(CR);Doo=r(Djr,"SegformerFeatureExtractor"),Djr.forEach(t),joo=r(pEe," (SegFormer model)"),pEe.forEach(t),qoo=i(ne),Eh=n(ne,"LI",{});var _Ee=s(Eh);NY=n(_Ee,"STRONG",{});var jjr=s(NY);Goo=r(jjr,"speech_to_text"),jjr.forEach(t),Ooo=r(_Ee," \u2014 "),MR=n(_Ee,"A",{href:!0});var qjr=s(MR);Xoo=r(qjr,"Speech2TextFeatureExtractor"),qjr.forEach(t),Voo=r(_Ee," (Speech2Text model)"),_Ee.forEach(t),zoo=i(ne),yh=n(ne,"LI",{});var bEe=s(yh);DY=n(bEe,"STRONG",{});var Gjr=s(DY);Woo=r(Gjr,"swin"),Gjr.forEach(t),Qoo=r(bEe," \u2014 "),ER=n(bEe,"A",{href:!0});var Ojr=s(ER);Hoo=r(Ojr,"ViTFeatureExtractor"),Ojr.forEach(t),Uoo=r(bEe," (Swin model)"),bEe.forEach(t),Joo=i(ne),wh=n(ne,"LI",{});var vEe=s(wh);jY=n(vEe,"STRONG",{});var Xjr=s(jY);Yoo=r(Xjr,"van"),Xjr.forEach(t),Koo=r(vEe," \u2014 "),yR=n(vEe,"A",{href:!0});var Vjr=s(yR);Zoo=r(Vjr,"ConvNextFeatureExtractor"),Vjr.forEach(t),ero=r(vEe," (VAN model)"),vEe.forEach(t),oro=i(ne),Ah=n(ne,"LI",{});var TEe=s(Ah);qY=n(TEe,"STRONG",{});var zjr=s(qY);rro=r(zjr,"vit"),zjr.forEach(t),tro=r(TEe," \u2014 "),wR=n(TEe,"A",{href:!0});var Wjr=s(wR);aro=r(Wjr,"ViTFeatureExtractor"),Wjr.forEach(t),nro=r(TEe," (ViT model)"),TEe.forEach(t),sro=i(ne),Lh=n(ne,"LI",{});var FEe=s(Lh);GY=n(FEe,"STRONG",{});var Qjr=s(GY);lro=r(Qjr,"vit_mae"),Qjr.forEach(t),iro=r(FEe," \u2014 "),AR=n(FEe,"A",{href:!0});var Hjr=s(AR);dro=r(Hjr,"ViTFeatureExtractor"),Hjr.forEach(t),cro=r(FEe," (ViTMAE model)"),FEe.forEach(t),mro=i(ne),Bh=n(ne,"LI",{});var CEe=s(Bh);OY=n(CEe,"STRONG",{});var Ujr=s(OY);fro=r(Ujr,"wav2vec2"),Ujr.forEach(t),gro=r(CEe," \u2014 "),LR=n(CEe,"A",{href:!0});var Jjr=s(LR);hro=r(Jjr,"Wav2Vec2FeatureExtractor"),Jjr.forEach(t),uro=r(CEe," (Wav2Vec2 model)"),CEe.forEach(t),ne.forEach(t),pro=i(Dt),f(xh.$$.fragment,Dt),_ro=i(Dt),XY=n(Dt,"P",{});var Yjr=s(XY);bro=r(Yjr,"Examples:"),Yjr.forEach(t),vro=i(Dt),f(xy.$$.fragment,Dt),Dt.forEach(t),Tro=i(Vs),kh=n(Vs,"DIV",{class:!0});var _Se=s(kh);f(ky.$$.fragment,_Se),Fro=i(_Se),VY=n(_Se,"P",{});var Kjr=s(VY);Cro=r(Kjr,"Register a new feature extractor for this class."),Kjr.forEach(t),_Se.forEach(t),Vs.forEach(t),mke=i(c),Hi=n(c,"H2",{class:!0});var bSe=s(Hi);Rh=n(bSe,"A",{id:!0,class:!0,href:!0});var Zjr=s(Rh);zY=n(Zjr,"SPAN",{});var eqr=s(zY);f(Ry.$$.fragment,eqr),eqr.forEach(t),Zjr.forEach(t),Mro=i(bSe),WY=n(bSe,"SPAN",{});var oqr=s(WY);Ero=r(oqr,"AutoProcessor"),oqr.forEach(t),bSe.forEach(t),fke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);f(Sy.$$.fragment,zs),yro=i(zs),Py=n(zs,"P",{});var vSe=s(Py);wro=r(vSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BR=n(vSe,"A",{href:!0});var rqr=s(BR);Aro=r(rqr,"AutoProcessor.from_pretrained()"),rqr.forEach(t),Lro=r(vSe," class method."),vSe.forEach(t),Bro=i(zs),$y=n(zs,"P",{});var TSe=s($y);xro=r(TSe,"This class cannot be instantiated directly using "),QY=n(TSe,"CODE",{});var tqr=s(QY);kro=r(tqr,"__init__()"),tqr.forEach(t),Rro=r(TSe," (throws an error)."),TSe.forEach(t),Sro=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);f(Iy.$$.fragment,jt),Pro=i(jt),HY=n(jt,"P",{});var aqr=s(HY);$ro=r(aqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aqr.forEach(t),Iro=i(jt),Ui=n(jt,"P",{});var Hz=s(Ui);Nro=r(Hz,"The processor class to instantiate is selected based on the "),UY=n(Hz,"CODE",{});var nqr=s(UY);Dro=r(nqr,"model_type"),nqr.forEach(t),jro=r(Hz,` property of the config object (either
passed as an argument or loaded from `),JY=n(Hz,"CODE",{});var sqr=s(JY);qro=r(sqr,"pretrained_model_name_or_path"),sqr.forEach(t),Gro=r(Hz," if possible):"),Hz.forEach(t),Oro=i(jt),xe=n(jt,"UL",{});var jo=s(xe);Sh=n(jo,"LI",{});var MEe=s(Sh);YY=n(MEe,"STRONG",{});var lqr=s(YY);Xro=r(lqr,"clip"),lqr.forEach(t),Vro=r(MEe," \u2014 "),xR=n(MEe,"A",{href:!0});var iqr=s(xR);zro=r(iqr,"CLIPProcessor"),iqr.forEach(t),Wro=r(MEe," (CLIP model)"),MEe.forEach(t),Qro=i(jo),Ph=n(jo,"LI",{});var EEe=s(Ph);KY=n(EEe,"STRONG",{});var dqr=s(KY);Hro=r(dqr,"layoutlmv2"),dqr.forEach(t),Uro=r(EEe," \u2014 "),kR=n(EEe,"A",{href:!0});var cqr=s(kR);Jro=r(cqr,"LayoutLMv2Processor"),cqr.forEach(t),Yro=r(EEe," (LayoutLMv2 model)"),EEe.forEach(t),Kro=i(jo),$h=n(jo,"LI",{});var yEe=s($h);ZY=n(yEe,"STRONG",{});var mqr=s(ZY);Zro=r(mqr,"layoutxlm"),mqr.forEach(t),eto=r(yEe," \u2014 "),RR=n(yEe,"A",{href:!0});var fqr=s(RR);oto=r(fqr,"LayoutXLMProcessor"),fqr.forEach(t),rto=r(yEe," (LayoutXLM model)"),yEe.forEach(t),tto=i(jo),Ih=n(jo,"LI",{});var wEe=s(Ih);eK=n(wEe,"STRONG",{});var gqr=s(eK);ato=r(gqr,"speech_to_text"),gqr.forEach(t),nto=r(wEe," \u2014 "),SR=n(wEe,"A",{href:!0});var hqr=s(SR);sto=r(hqr,"Speech2TextProcessor"),hqr.forEach(t),lto=r(wEe," (Speech2Text model)"),wEe.forEach(t),ito=i(jo),Nh=n(jo,"LI",{});var AEe=s(Nh);oK=n(AEe,"STRONG",{});var uqr=s(oK);dto=r(uqr,"speech_to_text_2"),uqr.forEach(t),cto=r(AEe," \u2014 "),PR=n(AEe,"A",{href:!0});var pqr=s(PR);mto=r(pqr,"Speech2Text2Processor"),pqr.forEach(t),fto=r(AEe," (Speech2Text2 model)"),AEe.forEach(t),gto=i(jo),Dh=n(jo,"LI",{});var LEe=s(Dh);rK=n(LEe,"STRONG",{});var _qr=s(rK);hto=r(_qr,"trocr"),_qr.forEach(t),uto=r(LEe," \u2014 "),$R=n(LEe,"A",{href:!0});var bqr=s($R);pto=r(bqr,"TrOCRProcessor"),bqr.forEach(t),_to=r(LEe," (TrOCR model)"),LEe.forEach(t),bto=i(jo),jh=n(jo,"LI",{});var BEe=s(jh);tK=n(BEe,"STRONG",{});var vqr=s(tK);vto=r(vqr,"vision-text-dual-encoder"),vqr.forEach(t),Tto=r(BEe," \u2014 "),IR=n(BEe,"A",{href:!0});var Tqr=s(IR);Fto=r(Tqr,"VisionTextDualEncoderProcessor"),Tqr.forEach(t),Cto=r(BEe," (VisionTextDualEncoder model)"),BEe.forEach(t),Mto=i(jo),qh=n(jo,"LI",{});var xEe=s(qh);aK=n(xEe,"STRONG",{});var Fqr=s(aK);Eto=r(Fqr,"wav2vec2"),Fqr.forEach(t),yto=r(xEe," \u2014 "),NR=n(xEe,"A",{href:!0});var Cqr=s(NR);wto=r(Cqr,"Wav2Vec2Processor"),Cqr.forEach(t),Ato=r(xEe," (Wav2Vec2 model)"),xEe.forEach(t),jo.forEach(t),Lto=i(jt),f(Gh.$$.fragment,jt),Bto=i(jt),nK=n(jt,"P",{});var Mqr=s(nK);xto=r(Mqr,"Examples:"),Mqr.forEach(t),kto=i(jt),f(Ny.$$.fragment,jt),jt.forEach(t),Rto=i(zs),Oh=n(zs,"DIV",{class:!0});var FSe=s(Oh);f(Dy.$$.fragment,FSe),Sto=i(FSe),sK=n(FSe,"P",{});var Eqr=s(sK);Pto=r(Eqr,"Register a new processor for this class."),Eqr.forEach(t),FSe.forEach(t),zs.forEach(t),gke=i(c),Ji=n(c,"H2",{class:!0});var CSe=s(Ji);Xh=n(CSe,"A",{id:!0,class:!0,href:!0});var yqr=s(Xh);lK=n(yqr,"SPAN",{});var wqr=s(lK);f(jy.$$.fragment,wqr),wqr.forEach(t),yqr.forEach(t),$to=i(CSe),iK=n(CSe,"SPAN",{});var Aqr=s(iK);Ito=r(Aqr,"AutoModel"),Aqr.forEach(t),CSe.forEach(t),hke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);f(qy.$$.fragment,Ws),Nto=i(Ws),Yi=n(Ws,"P",{});var Uz=s(Yi);Dto=r(Uz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dK=n(Uz,"CODE",{});var Lqr=s(dK);jto=r(Lqr,"from_pretrained()"),Lqr.forEach(t),qto=r(Uz,"class method or the "),cK=n(Uz,"CODE",{});var Bqr=s(cK);Gto=r(Bqr,"from_config()"),Bqr.forEach(t),Oto=r(Uz,`class
method.`),Uz.forEach(t),Xto=i(Ws),Gy=n(Ws,"P",{});var MSe=s(Gy);Vto=r(MSe,"This class cannot be instantiated directly using "),mK=n(MSe,"CODE",{});var xqr=s(mK);zto=r(xqr,"__init__()"),xqr.forEach(t),Wto=r(MSe," (throws an error)."),MSe.forEach(t),Qto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);f(Oy.$$.fragment,Qs),Hto=i(Qs),fK=n(Qs,"P",{});var kqr=s(fK);Uto=r(kqr,"Instantiates one of the base model classes of the library from a configuration."),kqr.forEach(t),Jto=i(Qs),Ki=n(Qs,"P",{});var Jz=s(Ki);Yto=r(Jz,`Note:
Loading a model from its configuration file does `),gK=n(Jz,"STRONG",{});var Rqr=s(gK);Kto=r(Rqr,"not"),Rqr.forEach(t),Zto=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Jz,"CODE",{});var Sqr=s(hK);eao=r(Sqr,"from_pretrained()"),Sqr.forEach(t),oao=r(Jz,"to load the model weights."),Jz.forEach(t),rao=i(Qs),uK=n(Qs,"P",{});var Pqr=s(uK);tao=r(Pqr,"Examples:"),Pqr.forEach(t),aao=i(Qs),f(Xy.$$.fragment,Qs),Qs.forEach(t),nao=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);f(Vy.$$.fragment,qt),sao=i(qt),pK=n(qt,"P",{});var $qr=s(pK);lao=r($qr,"Instantiate one of the base model classes of the library from a pretrained model."),$qr.forEach(t),iao=i(qt),Va=n(qt,"P",{});var d5=s(Va);dao=r(d5,"The model class to instantiate is selected based on the "),_K=n(d5,"CODE",{});var Iqr=s(_K);cao=r(Iqr,"model_type"),Iqr.forEach(t),mao=r(d5,` property of the config object (either
passed as an argument or loaded from `),bK=n(d5,"CODE",{});var Nqr=s(bK);fao=r(Nqr,"pretrained_model_name_or_path"),Nqr.forEach(t),gao=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vK=n(d5,"CODE",{});var Dqr=s(vK);hao=r(Dqr,"pretrained_model_name_or_path"),Dqr.forEach(t),uao=r(d5,":"),d5.forEach(t),pao=i(qt),F=n(qt,"UL",{});var C=s(F);Vh=n(C,"LI",{});var kEe=s(Vh);TK=n(kEe,"STRONG",{});var jqr=s(TK);_ao=r(jqr,"albert"),jqr.forEach(t),bao=r(kEe," \u2014 "),DR=n(kEe,"A",{href:!0});var qqr=s(DR);vao=r(qqr,"AlbertModel"),qqr.forEach(t),Tao=r(kEe," (ALBERT model)"),kEe.forEach(t),Fao=i(C),zh=n(C,"LI",{});var REe=s(zh);FK=n(REe,"STRONG",{});var Gqr=s(FK);Cao=r(Gqr,"bart"),Gqr.forEach(t),Mao=r(REe," \u2014 "),jR=n(REe,"A",{href:!0});var Oqr=s(jR);Eao=r(Oqr,"BartModel"),Oqr.forEach(t),yao=r(REe," (BART model)"),REe.forEach(t),wao=i(C),Wh=n(C,"LI",{});var SEe=s(Wh);CK=n(SEe,"STRONG",{});var Xqr=s(CK);Aao=r(Xqr,"beit"),Xqr.forEach(t),Lao=r(SEe," \u2014 "),qR=n(SEe,"A",{href:!0});var Vqr=s(qR);Bao=r(Vqr,"BeitModel"),Vqr.forEach(t),xao=r(SEe," (BEiT model)"),SEe.forEach(t),kao=i(C),Qh=n(C,"LI",{});var PEe=s(Qh);MK=n(PEe,"STRONG",{});var zqr=s(MK);Rao=r(zqr,"bert"),zqr.forEach(t),Sao=r(PEe," \u2014 "),GR=n(PEe,"A",{href:!0});var Wqr=s(GR);Pao=r(Wqr,"BertModel"),Wqr.forEach(t),$ao=r(PEe," (BERT model)"),PEe.forEach(t),Iao=i(C),Hh=n(C,"LI",{});var $Ee=s(Hh);EK=n($Ee,"STRONG",{});var Qqr=s(EK);Nao=r(Qqr,"bert-generation"),Qqr.forEach(t),Dao=r($Ee," \u2014 "),OR=n($Ee,"A",{href:!0});var Hqr=s(OR);jao=r(Hqr,"BertGenerationEncoder"),Hqr.forEach(t),qao=r($Ee," (Bert Generation model)"),$Ee.forEach(t),Gao=i(C),Uh=n(C,"LI",{});var IEe=s(Uh);yK=n(IEe,"STRONG",{});var Uqr=s(yK);Oao=r(Uqr,"big_bird"),Uqr.forEach(t),Xao=r(IEe," \u2014 "),XR=n(IEe,"A",{href:!0});var Jqr=s(XR);Vao=r(Jqr,"BigBirdModel"),Jqr.forEach(t),zao=r(IEe," (BigBird model)"),IEe.forEach(t),Wao=i(C),Jh=n(C,"LI",{});var NEe=s(Jh);wK=n(NEe,"STRONG",{});var Yqr=s(wK);Qao=r(Yqr,"bigbird_pegasus"),Yqr.forEach(t),Hao=r(NEe," \u2014 "),VR=n(NEe,"A",{href:!0});var Kqr=s(VR);Uao=r(Kqr,"BigBirdPegasusModel"),Kqr.forEach(t),Jao=r(NEe," (BigBirdPegasus model)"),NEe.forEach(t),Yao=i(C),Yh=n(C,"LI",{});var DEe=s(Yh);AK=n(DEe,"STRONG",{});var Zqr=s(AK);Kao=r(Zqr,"blenderbot"),Zqr.forEach(t),Zao=r(DEe," \u2014 "),zR=n(DEe,"A",{href:!0});var eGr=s(zR);eno=r(eGr,"BlenderbotModel"),eGr.forEach(t),ono=r(DEe," (Blenderbot model)"),DEe.forEach(t),rno=i(C),Kh=n(C,"LI",{});var jEe=s(Kh);LK=n(jEe,"STRONG",{});var oGr=s(LK);tno=r(oGr,"blenderbot-small"),oGr.forEach(t),ano=r(jEe," \u2014 "),WR=n(jEe,"A",{href:!0});var rGr=s(WR);nno=r(rGr,"BlenderbotSmallModel"),rGr.forEach(t),sno=r(jEe," (BlenderbotSmall model)"),jEe.forEach(t),lno=i(C),Zh=n(C,"LI",{});var qEe=s(Zh);BK=n(qEe,"STRONG",{});var tGr=s(BK);ino=r(tGr,"camembert"),tGr.forEach(t),dno=r(qEe," \u2014 "),QR=n(qEe,"A",{href:!0});var aGr=s(QR);cno=r(aGr,"CamembertModel"),aGr.forEach(t),mno=r(qEe," (CamemBERT model)"),qEe.forEach(t),fno=i(C),eu=n(C,"LI",{});var GEe=s(eu);xK=n(GEe,"STRONG",{});var nGr=s(xK);gno=r(nGr,"canine"),nGr.forEach(t),hno=r(GEe," \u2014 "),HR=n(GEe,"A",{href:!0});var sGr=s(HR);uno=r(sGr,"CanineModel"),sGr.forEach(t),pno=r(GEe," (Canine model)"),GEe.forEach(t),_no=i(C),ou=n(C,"LI",{});var OEe=s(ou);kK=n(OEe,"STRONG",{});var lGr=s(kK);bno=r(lGr,"clip"),lGr.forEach(t),vno=r(OEe," \u2014 "),UR=n(OEe,"A",{href:!0});var iGr=s(UR);Tno=r(iGr,"CLIPModel"),iGr.forEach(t),Fno=r(OEe," (CLIP model)"),OEe.forEach(t),Cno=i(C),ru=n(C,"LI",{});var XEe=s(ru);RK=n(XEe,"STRONG",{});var dGr=s(RK);Mno=r(dGr,"convbert"),dGr.forEach(t),Eno=r(XEe," \u2014 "),JR=n(XEe,"A",{href:!0});var cGr=s(JR);yno=r(cGr,"ConvBertModel"),cGr.forEach(t),wno=r(XEe," (ConvBERT model)"),XEe.forEach(t),Ano=i(C),tu=n(C,"LI",{});var VEe=s(tu);SK=n(VEe,"STRONG",{});var mGr=s(SK);Lno=r(mGr,"convnext"),mGr.forEach(t),Bno=r(VEe," \u2014 "),YR=n(VEe,"A",{href:!0});var fGr=s(YR);xno=r(fGr,"ConvNextModel"),fGr.forEach(t),kno=r(VEe," (ConvNext model)"),VEe.forEach(t),Rno=i(C),au=n(C,"LI",{});var zEe=s(au);PK=n(zEe,"STRONG",{});var gGr=s(PK);Sno=r(gGr,"ctrl"),gGr.forEach(t),Pno=r(zEe," \u2014 "),KR=n(zEe,"A",{href:!0});var hGr=s(KR);$no=r(hGr,"CTRLModel"),hGr.forEach(t),Ino=r(zEe," (CTRL model)"),zEe.forEach(t),Nno=i(C),nu=n(C,"LI",{});var WEe=s(nu);$K=n(WEe,"STRONG",{});var uGr=s($K);Dno=r(uGr,"data2vec-audio"),uGr.forEach(t),jno=r(WEe," \u2014 "),ZR=n(WEe,"A",{href:!0});var pGr=s(ZR);qno=r(pGr,"Data2VecAudioModel"),pGr.forEach(t),Gno=r(WEe," (Data2VecAudio model)"),WEe.forEach(t),Ono=i(C),su=n(C,"LI",{});var QEe=s(su);IK=n(QEe,"STRONG",{});var _Gr=s(IK);Xno=r(_Gr,"data2vec-text"),_Gr.forEach(t),Vno=r(QEe," \u2014 "),eS=n(QEe,"A",{href:!0});var bGr=s(eS);zno=r(bGr,"Data2VecTextModel"),bGr.forEach(t),Wno=r(QEe," (Data2VecText model)"),QEe.forEach(t),Qno=i(C),lu=n(C,"LI",{});var HEe=s(lu);NK=n(HEe,"STRONG",{});var vGr=s(NK);Hno=r(vGr,"deberta"),vGr.forEach(t),Uno=r(HEe," \u2014 "),oS=n(HEe,"A",{href:!0});var TGr=s(oS);Jno=r(TGr,"DebertaModel"),TGr.forEach(t),Yno=r(HEe," (DeBERTa model)"),HEe.forEach(t),Kno=i(C),iu=n(C,"LI",{});var UEe=s(iu);DK=n(UEe,"STRONG",{});var FGr=s(DK);Zno=r(FGr,"deberta-v2"),FGr.forEach(t),eso=r(UEe," \u2014 "),rS=n(UEe,"A",{href:!0});var CGr=s(rS);oso=r(CGr,"DebertaV2Model"),CGr.forEach(t),rso=r(UEe," (DeBERTa-v2 model)"),UEe.forEach(t),tso=i(C),du=n(C,"LI",{});var JEe=s(du);jK=n(JEe,"STRONG",{});var MGr=s(jK);aso=r(MGr,"decision_transformer"),MGr.forEach(t),nso=r(JEe," \u2014 "),tS=n(JEe,"A",{href:!0});var EGr=s(tS);sso=r(EGr,"DecisionTransformerModel"),EGr.forEach(t),lso=r(JEe," (Decision Transformer model)"),JEe.forEach(t),iso=i(C),cu=n(C,"LI",{});var YEe=s(cu);qK=n(YEe,"STRONG",{});var yGr=s(qK);dso=r(yGr,"deit"),yGr.forEach(t),cso=r(YEe," \u2014 "),aS=n(YEe,"A",{href:!0});var wGr=s(aS);mso=r(wGr,"DeiTModel"),wGr.forEach(t),fso=r(YEe," (DeiT model)"),YEe.forEach(t),gso=i(C),mu=n(C,"LI",{});var KEe=s(mu);GK=n(KEe,"STRONG",{});var AGr=s(GK);hso=r(AGr,"detr"),AGr.forEach(t),uso=r(KEe," \u2014 "),nS=n(KEe,"A",{href:!0});var LGr=s(nS);pso=r(LGr,"DetrModel"),LGr.forEach(t),_so=r(KEe," (DETR model)"),KEe.forEach(t),bso=i(C),fu=n(C,"LI",{});var ZEe=s(fu);OK=n(ZEe,"STRONG",{});var BGr=s(OK);vso=r(BGr,"distilbert"),BGr.forEach(t),Tso=r(ZEe," \u2014 "),sS=n(ZEe,"A",{href:!0});var xGr=s(sS);Fso=r(xGr,"DistilBertModel"),xGr.forEach(t),Cso=r(ZEe," (DistilBERT model)"),ZEe.forEach(t),Mso=i(C),gu=n(C,"LI",{});var e3e=s(gu);XK=n(e3e,"STRONG",{});var kGr=s(XK);Eso=r(kGr,"dpr"),kGr.forEach(t),yso=r(e3e," \u2014 "),lS=n(e3e,"A",{href:!0});var RGr=s(lS);wso=r(RGr,"DPRQuestionEncoder"),RGr.forEach(t),Aso=r(e3e," (DPR model)"),e3e.forEach(t),Lso=i(C),hu=n(C,"LI",{});var o3e=s(hu);VK=n(o3e,"STRONG",{});var SGr=s(VK);Bso=r(SGr,"electra"),SGr.forEach(t),xso=r(o3e," \u2014 "),iS=n(o3e,"A",{href:!0});var PGr=s(iS);kso=r(PGr,"ElectraModel"),PGr.forEach(t),Rso=r(o3e," (ELECTRA model)"),o3e.forEach(t),Sso=i(C),uu=n(C,"LI",{});var r3e=s(uu);zK=n(r3e,"STRONG",{});var $Gr=s(zK);Pso=r($Gr,"flaubert"),$Gr.forEach(t),$so=r(r3e," \u2014 "),dS=n(r3e,"A",{href:!0});var IGr=s(dS);Iso=r(IGr,"FlaubertModel"),IGr.forEach(t),Nso=r(r3e," (FlauBERT model)"),r3e.forEach(t),Dso=i(C),pu=n(C,"LI",{});var t3e=s(pu);WK=n(t3e,"STRONG",{});var NGr=s(WK);jso=r(NGr,"fnet"),NGr.forEach(t),qso=r(t3e," \u2014 "),cS=n(t3e,"A",{href:!0});var DGr=s(cS);Gso=r(DGr,"FNetModel"),DGr.forEach(t),Oso=r(t3e," (FNet model)"),t3e.forEach(t),Xso=i(C),_u=n(C,"LI",{});var a3e=s(_u);QK=n(a3e,"STRONG",{});var jGr=s(QK);Vso=r(jGr,"fsmt"),jGr.forEach(t),zso=r(a3e," \u2014 "),mS=n(a3e,"A",{href:!0});var qGr=s(mS);Wso=r(qGr,"FSMTModel"),qGr.forEach(t),Qso=r(a3e," (FairSeq Machine-Translation model)"),a3e.forEach(t),Hso=i(C),js=n(C,"LI",{});var U8=s(js);HK=n(U8,"STRONG",{});var GGr=s(HK);Uso=r(GGr,"funnel"),GGr.forEach(t),Jso=r(U8," \u2014 "),fS=n(U8,"A",{href:!0});var OGr=s(fS);Yso=r(OGr,"FunnelModel"),OGr.forEach(t),Kso=r(U8," or "),gS=n(U8,"A",{href:!0});var XGr=s(gS);Zso=r(XGr,"FunnelBaseModel"),XGr.forEach(t),elo=r(U8," (Funnel Transformer model)"),U8.forEach(t),olo=i(C),bu=n(C,"LI",{});var n3e=s(bu);UK=n(n3e,"STRONG",{});var VGr=s(UK);rlo=r(VGr,"glpn"),VGr.forEach(t),tlo=r(n3e," \u2014 "),hS=n(n3e,"A",{href:!0});var zGr=s(hS);alo=r(zGr,"GLPNModel"),zGr.forEach(t),nlo=r(n3e," (GLPN model)"),n3e.forEach(t),slo=i(C),vu=n(C,"LI",{});var s3e=s(vu);JK=n(s3e,"STRONG",{});var WGr=s(JK);llo=r(WGr,"gpt2"),WGr.forEach(t),ilo=r(s3e," \u2014 "),uS=n(s3e,"A",{href:!0});var QGr=s(uS);dlo=r(QGr,"GPT2Model"),QGr.forEach(t),clo=r(s3e," (OpenAI GPT-2 model)"),s3e.forEach(t),mlo=i(C),Tu=n(C,"LI",{});var l3e=s(Tu);YK=n(l3e,"STRONG",{});var HGr=s(YK);flo=r(HGr,"gpt_neo"),HGr.forEach(t),glo=r(l3e," \u2014 "),pS=n(l3e,"A",{href:!0});var UGr=s(pS);hlo=r(UGr,"GPTNeoModel"),UGr.forEach(t),ulo=r(l3e," (GPT Neo model)"),l3e.forEach(t),plo=i(C),Fu=n(C,"LI",{});var i3e=s(Fu);KK=n(i3e,"STRONG",{});var JGr=s(KK);_lo=r(JGr,"gptj"),JGr.forEach(t),blo=r(i3e," \u2014 "),_S=n(i3e,"A",{href:!0});var YGr=s(_S);vlo=r(YGr,"GPTJModel"),YGr.forEach(t),Tlo=r(i3e," (GPT-J model)"),i3e.forEach(t),Flo=i(C),Cu=n(C,"LI",{});var d3e=s(Cu);ZK=n(d3e,"STRONG",{});var KGr=s(ZK);Clo=r(KGr,"hubert"),KGr.forEach(t),Mlo=r(d3e," \u2014 "),bS=n(d3e,"A",{href:!0});var ZGr=s(bS);Elo=r(ZGr,"HubertModel"),ZGr.forEach(t),ylo=r(d3e," (Hubert model)"),d3e.forEach(t),wlo=i(C),Mu=n(C,"LI",{});var c3e=s(Mu);eZ=n(c3e,"STRONG",{});var eOr=s(eZ);Alo=r(eOr,"ibert"),eOr.forEach(t),Llo=r(c3e," \u2014 "),vS=n(c3e,"A",{href:!0});var oOr=s(vS);Blo=r(oOr,"IBertModel"),oOr.forEach(t),xlo=r(c3e," (I-BERT model)"),c3e.forEach(t),klo=i(C),Eu=n(C,"LI",{});var m3e=s(Eu);oZ=n(m3e,"STRONG",{});var rOr=s(oZ);Rlo=r(rOr,"imagegpt"),rOr.forEach(t),Slo=r(m3e," \u2014 "),TS=n(m3e,"A",{href:!0});var tOr=s(TS);Plo=r(tOr,"ImageGPTModel"),tOr.forEach(t),$lo=r(m3e," (ImageGPT model)"),m3e.forEach(t),Ilo=i(C),yu=n(C,"LI",{});var f3e=s(yu);rZ=n(f3e,"STRONG",{});var aOr=s(rZ);Nlo=r(aOr,"layoutlm"),aOr.forEach(t),Dlo=r(f3e," \u2014 "),FS=n(f3e,"A",{href:!0});var nOr=s(FS);jlo=r(nOr,"LayoutLMModel"),nOr.forEach(t),qlo=r(f3e," (LayoutLM model)"),f3e.forEach(t),Glo=i(C),wu=n(C,"LI",{});var g3e=s(wu);tZ=n(g3e,"STRONG",{});var sOr=s(tZ);Olo=r(sOr,"layoutlmv2"),sOr.forEach(t),Xlo=r(g3e," \u2014 "),CS=n(g3e,"A",{href:!0});var lOr=s(CS);Vlo=r(lOr,"LayoutLMv2Model"),lOr.forEach(t),zlo=r(g3e," (LayoutLMv2 model)"),g3e.forEach(t),Wlo=i(C),Au=n(C,"LI",{});var h3e=s(Au);aZ=n(h3e,"STRONG",{});var iOr=s(aZ);Qlo=r(iOr,"led"),iOr.forEach(t),Hlo=r(h3e," \u2014 "),MS=n(h3e,"A",{href:!0});var dOr=s(MS);Ulo=r(dOr,"LEDModel"),dOr.forEach(t),Jlo=r(h3e," (LED model)"),h3e.forEach(t),Ylo=i(C),Lu=n(C,"LI",{});var u3e=s(Lu);nZ=n(u3e,"STRONG",{});var cOr=s(nZ);Klo=r(cOr,"longformer"),cOr.forEach(t),Zlo=r(u3e," \u2014 "),ES=n(u3e,"A",{href:!0});var mOr=s(ES);eio=r(mOr,"LongformerModel"),mOr.forEach(t),oio=r(u3e," (Longformer model)"),u3e.forEach(t),rio=i(C),Bu=n(C,"LI",{});var p3e=s(Bu);sZ=n(p3e,"STRONG",{});var fOr=s(sZ);tio=r(fOr,"luke"),fOr.forEach(t),aio=r(p3e," \u2014 "),yS=n(p3e,"A",{href:!0});var gOr=s(yS);nio=r(gOr,"LukeModel"),gOr.forEach(t),sio=r(p3e," (LUKE model)"),p3e.forEach(t),lio=i(C),xu=n(C,"LI",{});var _3e=s(xu);lZ=n(_3e,"STRONG",{});var hOr=s(lZ);iio=r(hOr,"lxmert"),hOr.forEach(t),dio=r(_3e," \u2014 "),wS=n(_3e,"A",{href:!0});var uOr=s(wS);cio=r(uOr,"LxmertModel"),uOr.forEach(t),mio=r(_3e," (LXMERT model)"),_3e.forEach(t),fio=i(C),ku=n(C,"LI",{});var b3e=s(ku);iZ=n(b3e,"STRONG",{});var pOr=s(iZ);gio=r(pOr,"m2m_100"),pOr.forEach(t),hio=r(b3e," \u2014 "),AS=n(b3e,"A",{href:!0});var _Or=s(AS);uio=r(_Or,"M2M100Model"),_Or.forEach(t),pio=r(b3e," (M2M100 model)"),b3e.forEach(t),_io=i(C),Ru=n(C,"LI",{});var v3e=s(Ru);dZ=n(v3e,"STRONG",{});var bOr=s(dZ);bio=r(bOr,"marian"),bOr.forEach(t),vio=r(v3e," \u2014 "),LS=n(v3e,"A",{href:!0});var vOr=s(LS);Tio=r(vOr,"MarianModel"),vOr.forEach(t),Fio=r(v3e," (Marian model)"),v3e.forEach(t),Cio=i(C),Su=n(C,"LI",{});var T3e=s(Su);cZ=n(T3e,"STRONG",{});var TOr=s(cZ);Mio=r(TOr,"maskformer"),TOr.forEach(t),Eio=r(T3e," \u2014 "),BS=n(T3e,"A",{href:!0});var FOr=s(BS);yio=r(FOr,"MaskFormerModel"),FOr.forEach(t),wio=r(T3e," (MaskFormer model)"),T3e.forEach(t),Aio=i(C),Pu=n(C,"LI",{});var F3e=s(Pu);mZ=n(F3e,"STRONG",{});var COr=s(mZ);Lio=r(COr,"mbart"),COr.forEach(t),Bio=r(F3e," \u2014 "),xS=n(F3e,"A",{href:!0});var MOr=s(xS);xio=r(MOr,"MBartModel"),MOr.forEach(t),kio=r(F3e," (mBART model)"),F3e.forEach(t),Rio=i(C),$u=n(C,"LI",{});var C3e=s($u);fZ=n(C3e,"STRONG",{});var EOr=s(fZ);Sio=r(EOr,"megatron-bert"),EOr.forEach(t),Pio=r(C3e," \u2014 "),kS=n(C3e,"A",{href:!0});var yOr=s(kS);$io=r(yOr,"MegatronBertModel"),yOr.forEach(t),Iio=r(C3e," (MegatronBert model)"),C3e.forEach(t),Nio=i(C),Iu=n(C,"LI",{});var M3e=s(Iu);gZ=n(M3e,"STRONG",{});var wOr=s(gZ);Dio=r(wOr,"mobilebert"),wOr.forEach(t),jio=r(M3e," \u2014 "),RS=n(M3e,"A",{href:!0});var AOr=s(RS);qio=r(AOr,"MobileBertModel"),AOr.forEach(t),Gio=r(M3e," (MobileBERT model)"),M3e.forEach(t),Oio=i(C),Nu=n(C,"LI",{});var E3e=s(Nu);hZ=n(E3e,"STRONG",{});var LOr=s(hZ);Xio=r(LOr,"mpnet"),LOr.forEach(t),Vio=r(E3e," \u2014 "),SS=n(E3e,"A",{href:!0});var BOr=s(SS);zio=r(BOr,"MPNetModel"),BOr.forEach(t),Wio=r(E3e," (MPNet model)"),E3e.forEach(t),Qio=i(C),Du=n(C,"LI",{});var y3e=s(Du);uZ=n(y3e,"STRONG",{});var xOr=s(uZ);Hio=r(xOr,"mt5"),xOr.forEach(t),Uio=r(y3e," \u2014 "),PS=n(y3e,"A",{href:!0});var kOr=s(PS);Jio=r(kOr,"MT5Model"),kOr.forEach(t),Yio=r(y3e," (mT5 model)"),y3e.forEach(t),Kio=i(C),ju=n(C,"LI",{});var w3e=s(ju);pZ=n(w3e,"STRONG",{});var ROr=s(pZ);Zio=r(ROr,"nystromformer"),ROr.forEach(t),edo=r(w3e," \u2014 "),$S=n(w3e,"A",{href:!0});var SOr=s($S);odo=r(SOr,"NystromformerModel"),SOr.forEach(t),rdo=r(w3e," (Nystromformer model)"),w3e.forEach(t),tdo=i(C),qu=n(C,"LI",{});var A3e=s(qu);_Z=n(A3e,"STRONG",{});var POr=s(_Z);ado=r(POr,"openai-gpt"),POr.forEach(t),ndo=r(A3e," \u2014 "),IS=n(A3e,"A",{href:!0});var $Or=s(IS);sdo=r($Or,"OpenAIGPTModel"),$Or.forEach(t),ldo=r(A3e," (OpenAI GPT model)"),A3e.forEach(t),ido=i(C),Gu=n(C,"LI",{});var L3e=s(Gu);bZ=n(L3e,"STRONG",{});var IOr=s(bZ);ddo=r(IOr,"pegasus"),IOr.forEach(t),cdo=r(L3e," \u2014 "),NS=n(L3e,"A",{href:!0});var NOr=s(NS);mdo=r(NOr,"PegasusModel"),NOr.forEach(t),fdo=r(L3e," (Pegasus model)"),L3e.forEach(t),gdo=i(C),Ou=n(C,"LI",{});var B3e=s(Ou);vZ=n(B3e,"STRONG",{});var DOr=s(vZ);hdo=r(DOr,"perceiver"),DOr.forEach(t),udo=r(B3e," \u2014 "),DS=n(B3e,"A",{href:!0});var jOr=s(DS);pdo=r(jOr,"PerceiverModel"),jOr.forEach(t),_do=r(B3e," (Perceiver model)"),B3e.forEach(t),bdo=i(C),Xu=n(C,"LI",{});var x3e=s(Xu);TZ=n(x3e,"STRONG",{});var qOr=s(TZ);vdo=r(qOr,"plbart"),qOr.forEach(t),Tdo=r(x3e," \u2014 "),jS=n(x3e,"A",{href:!0});var GOr=s(jS);Fdo=r(GOr,"PLBartModel"),GOr.forEach(t),Cdo=r(x3e," (PLBart model)"),x3e.forEach(t),Mdo=i(C),Vu=n(C,"LI",{});var k3e=s(Vu);FZ=n(k3e,"STRONG",{});var OOr=s(FZ);Edo=r(OOr,"poolformer"),OOr.forEach(t),ydo=r(k3e," \u2014 "),qS=n(k3e,"A",{href:!0});var XOr=s(qS);wdo=r(XOr,"PoolFormerModel"),XOr.forEach(t),Ado=r(k3e," (PoolFormer model)"),k3e.forEach(t),Ldo=i(C),zu=n(C,"LI",{});var R3e=s(zu);CZ=n(R3e,"STRONG",{});var VOr=s(CZ);Bdo=r(VOr,"prophetnet"),VOr.forEach(t),xdo=r(R3e," \u2014 "),GS=n(R3e,"A",{href:!0});var zOr=s(GS);kdo=r(zOr,"ProphetNetModel"),zOr.forEach(t),Rdo=r(R3e," (ProphetNet model)"),R3e.forEach(t),Sdo=i(C),Wu=n(C,"LI",{});var S3e=s(Wu);MZ=n(S3e,"STRONG",{});var WOr=s(MZ);Pdo=r(WOr,"qdqbert"),WOr.forEach(t),$do=r(S3e," \u2014 "),OS=n(S3e,"A",{href:!0});var QOr=s(OS);Ido=r(QOr,"QDQBertModel"),QOr.forEach(t),Ndo=r(S3e," (QDQBert model)"),S3e.forEach(t),Ddo=i(C),Qu=n(C,"LI",{});var P3e=s(Qu);EZ=n(P3e,"STRONG",{});var HOr=s(EZ);jdo=r(HOr,"reformer"),HOr.forEach(t),qdo=r(P3e," \u2014 "),XS=n(P3e,"A",{href:!0});var UOr=s(XS);Gdo=r(UOr,"ReformerModel"),UOr.forEach(t),Odo=r(P3e," (Reformer model)"),P3e.forEach(t),Xdo=i(C),Hu=n(C,"LI",{});var $3e=s(Hu);yZ=n($3e,"STRONG",{});var JOr=s(yZ);Vdo=r(JOr,"rembert"),JOr.forEach(t),zdo=r($3e," \u2014 "),VS=n($3e,"A",{href:!0});var YOr=s(VS);Wdo=r(YOr,"RemBertModel"),YOr.forEach(t),Qdo=r($3e," (RemBERT model)"),$3e.forEach(t),Hdo=i(C),Uu=n(C,"LI",{});var I3e=s(Uu);wZ=n(I3e,"STRONG",{});var KOr=s(wZ);Udo=r(KOr,"resnet"),KOr.forEach(t),Jdo=r(I3e," \u2014 "),zS=n(I3e,"A",{href:!0});var ZOr=s(zS);Ydo=r(ZOr,"ResNetModel"),ZOr.forEach(t),Kdo=r(I3e," (ResNet model)"),I3e.forEach(t),Zdo=i(C),Ju=n(C,"LI",{});var N3e=s(Ju);AZ=n(N3e,"STRONG",{});var eXr=s(AZ);eco=r(eXr,"retribert"),eXr.forEach(t),oco=r(N3e," \u2014 "),WS=n(N3e,"A",{href:!0});var oXr=s(WS);rco=r(oXr,"RetriBertModel"),oXr.forEach(t),tco=r(N3e," (RetriBERT model)"),N3e.forEach(t),aco=i(C),Yu=n(C,"LI",{});var D3e=s(Yu);LZ=n(D3e,"STRONG",{});var rXr=s(LZ);nco=r(rXr,"roberta"),rXr.forEach(t),sco=r(D3e," \u2014 "),QS=n(D3e,"A",{href:!0});var tXr=s(QS);lco=r(tXr,"RobertaModel"),tXr.forEach(t),ico=r(D3e," (RoBERTa model)"),D3e.forEach(t),dco=i(C),Ku=n(C,"LI",{});var j3e=s(Ku);BZ=n(j3e,"STRONG",{});var aXr=s(BZ);cco=r(aXr,"roformer"),aXr.forEach(t),mco=r(j3e," \u2014 "),HS=n(j3e,"A",{href:!0});var nXr=s(HS);fco=r(nXr,"RoFormerModel"),nXr.forEach(t),gco=r(j3e," (RoFormer model)"),j3e.forEach(t),hco=i(C),Zu=n(C,"LI",{});var q3e=s(Zu);xZ=n(q3e,"STRONG",{});var sXr=s(xZ);uco=r(sXr,"segformer"),sXr.forEach(t),pco=r(q3e," \u2014 "),US=n(q3e,"A",{href:!0});var lXr=s(US);_co=r(lXr,"SegformerModel"),lXr.forEach(t),bco=r(q3e," (SegFormer model)"),q3e.forEach(t),vco=i(C),ep=n(C,"LI",{});var G3e=s(ep);kZ=n(G3e,"STRONG",{});var iXr=s(kZ);Tco=r(iXr,"sew"),iXr.forEach(t),Fco=r(G3e," \u2014 "),JS=n(G3e,"A",{href:!0});var dXr=s(JS);Cco=r(dXr,"SEWModel"),dXr.forEach(t),Mco=r(G3e," (SEW model)"),G3e.forEach(t),Eco=i(C),op=n(C,"LI",{});var O3e=s(op);RZ=n(O3e,"STRONG",{});var cXr=s(RZ);yco=r(cXr,"sew-d"),cXr.forEach(t),wco=r(O3e," \u2014 "),YS=n(O3e,"A",{href:!0});var mXr=s(YS);Aco=r(mXr,"SEWDModel"),mXr.forEach(t),Lco=r(O3e," (SEW-D model)"),O3e.forEach(t),Bco=i(C),rp=n(C,"LI",{});var X3e=s(rp);SZ=n(X3e,"STRONG",{});var fXr=s(SZ);xco=r(fXr,"speech_to_text"),fXr.forEach(t),kco=r(X3e," \u2014 "),KS=n(X3e,"A",{href:!0});var gXr=s(KS);Rco=r(gXr,"Speech2TextModel"),gXr.forEach(t),Sco=r(X3e," (Speech2Text model)"),X3e.forEach(t),Pco=i(C),tp=n(C,"LI",{});var V3e=s(tp);PZ=n(V3e,"STRONG",{});var hXr=s(PZ);$co=r(hXr,"splinter"),hXr.forEach(t),Ico=r(V3e," \u2014 "),ZS=n(V3e,"A",{href:!0});var uXr=s(ZS);Nco=r(uXr,"SplinterModel"),uXr.forEach(t),Dco=r(V3e," (Splinter model)"),V3e.forEach(t),jco=i(C),ap=n(C,"LI",{});var z3e=s(ap);$Z=n(z3e,"STRONG",{});var pXr=s($Z);qco=r(pXr,"squeezebert"),pXr.forEach(t),Gco=r(z3e," \u2014 "),eP=n(z3e,"A",{href:!0});var _Xr=s(eP);Oco=r(_Xr,"SqueezeBertModel"),_Xr.forEach(t),Xco=r(z3e," (SqueezeBERT model)"),z3e.forEach(t),Vco=i(C),np=n(C,"LI",{});var W3e=s(np);IZ=n(W3e,"STRONG",{});var bXr=s(IZ);zco=r(bXr,"swin"),bXr.forEach(t),Wco=r(W3e," \u2014 "),oP=n(W3e,"A",{href:!0});var vXr=s(oP);Qco=r(vXr,"SwinModel"),vXr.forEach(t),Hco=r(W3e," (Swin model)"),W3e.forEach(t),Uco=i(C),sp=n(C,"LI",{});var Q3e=s(sp);NZ=n(Q3e,"STRONG",{});var TXr=s(NZ);Jco=r(TXr,"t5"),TXr.forEach(t),Yco=r(Q3e," \u2014 "),rP=n(Q3e,"A",{href:!0});var FXr=s(rP);Kco=r(FXr,"T5Model"),FXr.forEach(t),Zco=r(Q3e," (T5 model)"),Q3e.forEach(t),emo=i(C),lp=n(C,"LI",{});var H3e=s(lp);DZ=n(H3e,"STRONG",{});var CXr=s(DZ);omo=r(CXr,"tapas"),CXr.forEach(t),rmo=r(H3e," \u2014 "),tP=n(H3e,"A",{href:!0});var MXr=s(tP);tmo=r(MXr,"TapasModel"),MXr.forEach(t),amo=r(H3e," (TAPAS model)"),H3e.forEach(t),nmo=i(C),ip=n(C,"LI",{});var U3e=s(ip);jZ=n(U3e,"STRONG",{});var EXr=s(jZ);smo=r(EXr,"transfo-xl"),EXr.forEach(t),lmo=r(U3e," \u2014 "),aP=n(U3e,"A",{href:!0});var yXr=s(aP);imo=r(yXr,"TransfoXLModel"),yXr.forEach(t),dmo=r(U3e," (Transformer-XL model)"),U3e.forEach(t),cmo=i(C),dp=n(C,"LI",{});var J3e=s(dp);qZ=n(J3e,"STRONG",{});var wXr=s(qZ);mmo=r(wXr,"unispeech"),wXr.forEach(t),fmo=r(J3e," \u2014 "),nP=n(J3e,"A",{href:!0});var AXr=s(nP);gmo=r(AXr,"UniSpeechModel"),AXr.forEach(t),hmo=r(J3e," (UniSpeech model)"),J3e.forEach(t),umo=i(C),cp=n(C,"LI",{});var Y3e=s(cp);GZ=n(Y3e,"STRONG",{});var LXr=s(GZ);pmo=r(LXr,"unispeech-sat"),LXr.forEach(t),_mo=r(Y3e," \u2014 "),sP=n(Y3e,"A",{href:!0});var BXr=s(sP);bmo=r(BXr,"UniSpeechSatModel"),BXr.forEach(t),vmo=r(Y3e," (UniSpeechSat model)"),Y3e.forEach(t),Tmo=i(C),mp=n(C,"LI",{});var K3e=s(mp);OZ=n(K3e,"STRONG",{});var xXr=s(OZ);Fmo=r(xXr,"van"),xXr.forEach(t),Cmo=r(K3e," \u2014 "),lP=n(K3e,"A",{href:!0});var kXr=s(lP);Mmo=r(kXr,"VanModel"),kXr.forEach(t),Emo=r(K3e," (VAN model)"),K3e.forEach(t),ymo=i(C),fp=n(C,"LI",{});var Z3e=s(fp);XZ=n(Z3e,"STRONG",{});var RXr=s(XZ);wmo=r(RXr,"vilt"),RXr.forEach(t),Amo=r(Z3e," \u2014 "),iP=n(Z3e,"A",{href:!0});var SXr=s(iP);Lmo=r(SXr,"ViltModel"),SXr.forEach(t),Bmo=r(Z3e," (ViLT model)"),Z3e.forEach(t),xmo=i(C),gp=n(C,"LI",{});var e5e=s(gp);VZ=n(e5e,"STRONG",{});var PXr=s(VZ);kmo=r(PXr,"vision-text-dual-encoder"),PXr.forEach(t),Rmo=r(e5e," \u2014 "),dP=n(e5e,"A",{href:!0});var $Xr=s(dP);Smo=r($Xr,"VisionTextDualEncoderModel"),$Xr.forEach(t),Pmo=r(e5e," (VisionTextDualEncoder model)"),e5e.forEach(t),$mo=i(C),hp=n(C,"LI",{});var o5e=s(hp);zZ=n(o5e,"STRONG",{});var IXr=s(zZ);Imo=r(IXr,"visual_bert"),IXr.forEach(t),Nmo=r(o5e," \u2014 "),cP=n(o5e,"A",{href:!0});var NXr=s(cP);Dmo=r(NXr,"VisualBertModel"),NXr.forEach(t),jmo=r(o5e," (VisualBert model)"),o5e.forEach(t),qmo=i(C),up=n(C,"LI",{});var r5e=s(up);WZ=n(r5e,"STRONG",{});var DXr=s(WZ);Gmo=r(DXr,"vit"),DXr.forEach(t),Omo=r(r5e," \u2014 "),mP=n(r5e,"A",{href:!0});var jXr=s(mP);Xmo=r(jXr,"ViTModel"),jXr.forEach(t),Vmo=r(r5e," (ViT model)"),r5e.forEach(t),zmo=i(C),pp=n(C,"LI",{});var t5e=s(pp);QZ=n(t5e,"STRONG",{});var qXr=s(QZ);Wmo=r(qXr,"vit_mae"),qXr.forEach(t),Qmo=r(t5e," \u2014 "),fP=n(t5e,"A",{href:!0});var GXr=s(fP);Hmo=r(GXr,"ViTMAEModel"),GXr.forEach(t),Umo=r(t5e," (ViTMAE model)"),t5e.forEach(t),Jmo=i(C),_p=n(C,"LI",{});var a5e=s(_p);HZ=n(a5e,"STRONG",{});var OXr=s(HZ);Ymo=r(OXr,"wav2vec2"),OXr.forEach(t),Kmo=r(a5e," \u2014 "),gP=n(a5e,"A",{href:!0});var XXr=s(gP);Zmo=r(XXr,"Wav2Vec2Model"),XXr.forEach(t),efo=r(a5e," (Wav2Vec2 model)"),a5e.forEach(t),ofo=i(C),bp=n(C,"LI",{});var n5e=s(bp);UZ=n(n5e,"STRONG",{});var VXr=s(UZ);rfo=r(VXr,"wavlm"),VXr.forEach(t),tfo=r(n5e," \u2014 "),hP=n(n5e,"A",{href:!0});var zXr=s(hP);afo=r(zXr,"WavLMModel"),zXr.forEach(t),nfo=r(n5e," (WavLM model)"),n5e.forEach(t),sfo=i(C),vp=n(C,"LI",{});var s5e=s(vp);JZ=n(s5e,"STRONG",{});var WXr=s(JZ);lfo=r(WXr,"xglm"),WXr.forEach(t),ifo=r(s5e," \u2014 "),uP=n(s5e,"A",{href:!0});var QXr=s(uP);dfo=r(QXr,"XGLMModel"),QXr.forEach(t),cfo=r(s5e," (XGLM model)"),s5e.forEach(t),mfo=i(C),Tp=n(C,"LI",{});var l5e=s(Tp);YZ=n(l5e,"STRONG",{});var HXr=s(YZ);ffo=r(HXr,"xlm"),HXr.forEach(t),gfo=r(l5e," \u2014 "),pP=n(l5e,"A",{href:!0});var UXr=s(pP);hfo=r(UXr,"XLMModel"),UXr.forEach(t),ufo=r(l5e," (XLM model)"),l5e.forEach(t),pfo=i(C),Fp=n(C,"LI",{});var i5e=s(Fp);KZ=n(i5e,"STRONG",{});var JXr=s(KZ);_fo=r(JXr,"xlm-prophetnet"),JXr.forEach(t),bfo=r(i5e," \u2014 "),_P=n(i5e,"A",{href:!0});var YXr=s(_P);vfo=r(YXr,"XLMProphetNetModel"),YXr.forEach(t),Tfo=r(i5e," (XLMProphetNet model)"),i5e.forEach(t),Ffo=i(C),Cp=n(C,"LI",{});var d5e=s(Cp);ZZ=n(d5e,"STRONG",{});var KXr=s(ZZ);Cfo=r(KXr,"xlm-roberta"),KXr.forEach(t),Mfo=r(d5e," \u2014 "),bP=n(d5e,"A",{href:!0});var ZXr=s(bP);Efo=r(ZXr,"XLMRobertaModel"),ZXr.forEach(t),yfo=r(d5e," (XLM-RoBERTa model)"),d5e.forEach(t),wfo=i(C),Mp=n(C,"LI",{});var c5e=s(Mp);eee=n(c5e,"STRONG",{});var eVr=s(eee);Afo=r(eVr,"xlm-roberta-xl"),eVr.forEach(t),Lfo=r(c5e," \u2014 "),vP=n(c5e,"A",{href:!0});var oVr=s(vP);Bfo=r(oVr,"XLMRobertaXLModel"),oVr.forEach(t),xfo=r(c5e," (XLM-RoBERTa-XL model)"),c5e.forEach(t),kfo=i(C),Ep=n(C,"LI",{});var m5e=s(Ep);oee=n(m5e,"STRONG",{});var rVr=s(oee);Rfo=r(rVr,"xlnet"),rVr.forEach(t),Sfo=r(m5e," \u2014 "),TP=n(m5e,"A",{href:!0});var tVr=s(TP);Pfo=r(tVr,"XLNetModel"),tVr.forEach(t),$fo=r(m5e," (XLNet model)"),m5e.forEach(t),Ifo=i(C),yp=n(C,"LI",{});var f5e=s(yp);ree=n(f5e,"STRONG",{});var aVr=s(ree);Nfo=r(aVr,"yoso"),aVr.forEach(t),Dfo=r(f5e," \u2014 "),FP=n(f5e,"A",{href:!0});var nVr=s(FP);jfo=r(nVr,"YosoModel"),nVr.forEach(t),qfo=r(f5e," (YOSO model)"),f5e.forEach(t),C.forEach(t),Gfo=i(qt),wp=n(qt,"P",{});var g5e=s(wp);Ofo=r(g5e,"The model is set in evaluation mode by default using "),tee=n(g5e,"CODE",{});var sVr=s(tee);Xfo=r(sVr,"model.eval()"),sVr.forEach(t),Vfo=r(g5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=n(g5e,"CODE",{});var lVr=s(aee);zfo=r(lVr,"model.train()"),lVr.forEach(t),g5e.forEach(t),Wfo=i(qt),nee=n(qt,"P",{});var iVr=s(nee);Qfo=r(iVr,"Examples:"),iVr.forEach(t),Hfo=i(qt),f(zy.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),uke=i(c),Zi=n(c,"H2",{class:!0});var ESe=s(Zi);Ap=n(ESe,"A",{id:!0,class:!0,href:!0});var dVr=s(Ap);see=n(dVr,"SPAN",{});var cVr=s(see);f(Wy.$$.fragment,cVr),cVr.forEach(t),dVr.forEach(t),Ufo=i(ESe),lee=n(ESe,"SPAN",{});var mVr=s(lee);Jfo=r(mVr,"AutoModelForPreTraining"),mVr.forEach(t),ESe.forEach(t),pke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);f(Qy.$$.fragment,Hs),Yfo=i(Hs),ed=n(Hs,"P",{});var Yz=s(ed);Kfo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),iee=n(Yz,"CODE",{});var fVr=s(iee);Zfo=r(fVr,"from_pretrained()"),fVr.forEach(t),ego=r(Yz,"class method or the "),dee=n(Yz,"CODE",{});var gVr=s(dee);ogo=r(gVr,"from_config()"),gVr.forEach(t),rgo=r(Yz,`class
method.`),Yz.forEach(t),tgo=i(Hs),Hy=n(Hs,"P",{});var ySe=s(Hy);ago=r(ySe,"This class cannot be instantiated directly using "),cee=n(ySe,"CODE",{});var hVr=s(cee);ngo=r(hVr,"__init__()"),hVr.forEach(t),sgo=r(ySe," (throws an error)."),ySe.forEach(t),lgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);f(Uy.$$.fragment,Us),igo=i(Us),mee=n(Us,"P",{});var uVr=s(mee);dgo=r(uVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uVr.forEach(t),cgo=i(Us),od=n(Us,"P",{});var Kz=s(od);mgo=r(Kz,`Note:
Loading a model from its configuration file does `),fee=n(Kz,"STRONG",{});var pVr=s(fee);fgo=r(pVr,"not"),pVr.forEach(t),ggo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Kz,"CODE",{});var _Vr=s(gee);hgo=r(_Vr,"from_pretrained()"),_Vr.forEach(t),ugo=r(Kz,"to load the model weights."),Kz.forEach(t),pgo=i(Us),hee=n(Us,"P",{});var bVr=s(hee);_go=r(bVr,"Examples:"),bVr.forEach(t),bgo=i(Us),f(Jy.$$.fragment,Us),Us.forEach(t),vgo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);f(Yy.$$.fragment,Gt),Tgo=i(Gt),uee=n(Gt,"P",{});var vVr=s(uee);Fgo=r(vVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vVr.forEach(t),Cgo=i(Gt),za=n(Gt,"P",{});var c5=s(za);Mgo=r(c5,"The model class to instantiate is selected based on the "),pee=n(c5,"CODE",{});var TVr=s(pee);Ego=r(TVr,"model_type"),TVr.forEach(t),ygo=r(c5,` property of the config object (either
passed as an argument or loaded from `),_ee=n(c5,"CODE",{});var FVr=s(_ee);wgo=r(FVr,"pretrained_model_name_or_path"),FVr.forEach(t),Ago=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=n(c5,"CODE",{});var CVr=s(bee);Lgo=r(CVr,"pretrained_model_name_or_path"),CVr.forEach(t),Bgo=r(c5,":"),c5.forEach(t),xgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);Lp=n(S,"LI",{});var h5e=s(Lp);vee=n(h5e,"STRONG",{});var MVr=s(vee);kgo=r(MVr,"albert"),MVr.forEach(t),Rgo=r(h5e," \u2014 "),CP=n(h5e,"A",{href:!0});var EVr=s(CP);Sgo=r(EVr,"AlbertForPreTraining"),EVr.forEach(t),Pgo=r(h5e," (ALBERT model)"),h5e.forEach(t),$go=i(S),Bp=n(S,"LI",{});var u5e=s(Bp);Tee=n(u5e,"STRONG",{});var yVr=s(Tee);Igo=r(yVr,"bart"),yVr.forEach(t),Ngo=r(u5e," \u2014 "),MP=n(u5e,"A",{href:!0});var wVr=s(MP);Dgo=r(wVr,"BartForConditionalGeneration"),wVr.forEach(t),jgo=r(u5e," (BART model)"),u5e.forEach(t),qgo=i(S),xp=n(S,"LI",{});var p5e=s(xp);Fee=n(p5e,"STRONG",{});var AVr=s(Fee);Ggo=r(AVr,"bert"),AVr.forEach(t),Ogo=r(p5e," \u2014 "),EP=n(p5e,"A",{href:!0});var LVr=s(EP);Xgo=r(LVr,"BertForPreTraining"),LVr.forEach(t),Vgo=r(p5e," (BERT model)"),p5e.forEach(t),zgo=i(S),kp=n(S,"LI",{});var _5e=s(kp);Cee=n(_5e,"STRONG",{});var BVr=s(Cee);Wgo=r(BVr,"big_bird"),BVr.forEach(t),Qgo=r(_5e," \u2014 "),yP=n(_5e,"A",{href:!0});var xVr=s(yP);Hgo=r(xVr,"BigBirdForPreTraining"),xVr.forEach(t),Ugo=r(_5e," (BigBird model)"),_5e.forEach(t),Jgo=i(S),Rp=n(S,"LI",{});var b5e=s(Rp);Mee=n(b5e,"STRONG",{});var kVr=s(Mee);Ygo=r(kVr,"camembert"),kVr.forEach(t),Kgo=r(b5e," \u2014 "),wP=n(b5e,"A",{href:!0});var RVr=s(wP);Zgo=r(RVr,"CamembertForMaskedLM"),RVr.forEach(t),eho=r(b5e," (CamemBERT model)"),b5e.forEach(t),oho=i(S),Sp=n(S,"LI",{});var v5e=s(Sp);Eee=n(v5e,"STRONG",{});var SVr=s(Eee);rho=r(SVr,"ctrl"),SVr.forEach(t),tho=r(v5e," \u2014 "),AP=n(v5e,"A",{href:!0});var PVr=s(AP);aho=r(PVr,"CTRLLMHeadModel"),PVr.forEach(t),nho=r(v5e," (CTRL model)"),v5e.forEach(t),sho=i(S),Pp=n(S,"LI",{});var T5e=s(Pp);yee=n(T5e,"STRONG",{});var $Vr=s(yee);lho=r($Vr,"data2vec-text"),$Vr.forEach(t),iho=r(T5e," \u2014 "),LP=n(T5e,"A",{href:!0});var IVr=s(LP);dho=r(IVr,"Data2VecTextForMaskedLM"),IVr.forEach(t),cho=r(T5e," (Data2VecText model)"),T5e.forEach(t),mho=i(S),$p=n(S,"LI",{});var F5e=s($p);wee=n(F5e,"STRONG",{});var NVr=s(wee);fho=r(NVr,"deberta"),NVr.forEach(t),gho=r(F5e," \u2014 "),BP=n(F5e,"A",{href:!0});var DVr=s(BP);hho=r(DVr,"DebertaForMaskedLM"),DVr.forEach(t),uho=r(F5e," (DeBERTa model)"),F5e.forEach(t),pho=i(S),Ip=n(S,"LI",{});var C5e=s(Ip);Aee=n(C5e,"STRONG",{});var jVr=s(Aee);_ho=r(jVr,"deberta-v2"),jVr.forEach(t),bho=r(C5e," \u2014 "),xP=n(C5e,"A",{href:!0});var qVr=s(xP);vho=r(qVr,"DebertaV2ForMaskedLM"),qVr.forEach(t),Tho=r(C5e," (DeBERTa-v2 model)"),C5e.forEach(t),Fho=i(S),Np=n(S,"LI",{});var M5e=s(Np);Lee=n(M5e,"STRONG",{});var GVr=s(Lee);Cho=r(GVr,"distilbert"),GVr.forEach(t),Mho=r(M5e," \u2014 "),kP=n(M5e,"A",{href:!0});var OVr=s(kP);Eho=r(OVr,"DistilBertForMaskedLM"),OVr.forEach(t),yho=r(M5e," (DistilBERT model)"),M5e.forEach(t),who=i(S),Dp=n(S,"LI",{});var E5e=s(Dp);Bee=n(E5e,"STRONG",{});var XVr=s(Bee);Aho=r(XVr,"electra"),XVr.forEach(t),Lho=r(E5e," \u2014 "),RP=n(E5e,"A",{href:!0});var VVr=s(RP);Bho=r(VVr,"ElectraForPreTraining"),VVr.forEach(t),xho=r(E5e," (ELECTRA model)"),E5e.forEach(t),kho=i(S),jp=n(S,"LI",{});var y5e=s(jp);xee=n(y5e,"STRONG",{});var zVr=s(xee);Rho=r(zVr,"flaubert"),zVr.forEach(t),Sho=r(y5e," \u2014 "),SP=n(y5e,"A",{href:!0});var WVr=s(SP);Pho=r(WVr,"FlaubertWithLMHeadModel"),WVr.forEach(t),$ho=r(y5e," (FlauBERT model)"),y5e.forEach(t),Iho=i(S),qp=n(S,"LI",{});var w5e=s(qp);kee=n(w5e,"STRONG",{});var QVr=s(kee);Nho=r(QVr,"fnet"),QVr.forEach(t),Dho=r(w5e," \u2014 "),PP=n(w5e,"A",{href:!0});var HVr=s(PP);jho=r(HVr,"FNetForPreTraining"),HVr.forEach(t),qho=r(w5e," (FNet model)"),w5e.forEach(t),Gho=i(S),Gp=n(S,"LI",{});var A5e=s(Gp);Ree=n(A5e,"STRONG",{});var UVr=s(Ree);Oho=r(UVr,"fsmt"),UVr.forEach(t),Xho=r(A5e," \u2014 "),$P=n(A5e,"A",{href:!0});var JVr=s($P);Vho=r(JVr,"FSMTForConditionalGeneration"),JVr.forEach(t),zho=r(A5e," (FairSeq Machine-Translation model)"),A5e.forEach(t),Who=i(S),Op=n(S,"LI",{});var L5e=s(Op);See=n(L5e,"STRONG",{});var YVr=s(See);Qho=r(YVr,"funnel"),YVr.forEach(t),Hho=r(L5e," \u2014 "),IP=n(L5e,"A",{href:!0});var KVr=s(IP);Uho=r(KVr,"FunnelForPreTraining"),KVr.forEach(t),Jho=r(L5e," (Funnel Transformer model)"),L5e.forEach(t),Yho=i(S),Xp=n(S,"LI",{});var B5e=s(Xp);Pee=n(B5e,"STRONG",{});var ZVr=s(Pee);Kho=r(ZVr,"gpt2"),ZVr.forEach(t),Zho=r(B5e," \u2014 "),NP=n(B5e,"A",{href:!0});var ezr=s(NP);euo=r(ezr,"GPT2LMHeadModel"),ezr.forEach(t),ouo=r(B5e," (OpenAI GPT-2 model)"),B5e.forEach(t),ruo=i(S),Vp=n(S,"LI",{});var x5e=s(Vp);$ee=n(x5e,"STRONG",{});var ozr=s($ee);tuo=r(ozr,"ibert"),ozr.forEach(t),auo=r(x5e," \u2014 "),DP=n(x5e,"A",{href:!0});var rzr=s(DP);nuo=r(rzr,"IBertForMaskedLM"),rzr.forEach(t),suo=r(x5e," (I-BERT model)"),x5e.forEach(t),luo=i(S),zp=n(S,"LI",{});var k5e=s(zp);Iee=n(k5e,"STRONG",{});var tzr=s(Iee);iuo=r(tzr,"layoutlm"),tzr.forEach(t),duo=r(k5e," \u2014 "),jP=n(k5e,"A",{href:!0});var azr=s(jP);cuo=r(azr,"LayoutLMForMaskedLM"),azr.forEach(t),muo=r(k5e," (LayoutLM model)"),k5e.forEach(t),fuo=i(S),Wp=n(S,"LI",{});var R5e=s(Wp);Nee=n(R5e,"STRONG",{});var nzr=s(Nee);guo=r(nzr,"longformer"),nzr.forEach(t),huo=r(R5e," \u2014 "),qP=n(R5e,"A",{href:!0});var szr=s(qP);uuo=r(szr,"LongformerForMaskedLM"),szr.forEach(t),puo=r(R5e," (Longformer model)"),R5e.forEach(t),_uo=i(S),Qp=n(S,"LI",{});var S5e=s(Qp);Dee=n(S5e,"STRONG",{});var lzr=s(Dee);buo=r(lzr,"lxmert"),lzr.forEach(t),vuo=r(S5e," \u2014 "),GP=n(S5e,"A",{href:!0});var izr=s(GP);Tuo=r(izr,"LxmertForPreTraining"),izr.forEach(t),Fuo=r(S5e," (LXMERT model)"),S5e.forEach(t),Cuo=i(S),Hp=n(S,"LI",{});var P5e=s(Hp);jee=n(P5e,"STRONG",{});var dzr=s(jee);Muo=r(dzr,"megatron-bert"),dzr.forEach(t),Euo=r(P5e," \u2014 "),OP=n(P5e,"A",{href:!0});var czr=s(OP);yuo=r(czr,"MegatronBertForPreTraining"),czr.forEach(t),wuo=r(P5e," (MegatronBert model)"),P5e.forEach(t),Auo=i(S),Up=n(S,"LI",{});var $5e=s(Up);qee=n($5e,"STRONG",{});var mzr=s(qee);Luo=r(mzr,"mobilebert"),mzr.forEach(t),Buo=r($5e," \u2014 "),XP=n($5e,"A",{href:!0});var fzr=s(XP);xuo=r(fzr,"MobileBertForPreTraining"),fzr.forEach(t),kuo=r($5e," (MobileBERT model)"),$5e.forEach(t),Ruo=i(S),Jp=n(S,"LI",{});var I5e=s(Jp);Gee=n(I5e,"STRONG",{});var gzr=s(Gee);Suo=r(gzr,"mpnet"),gzr.forEach(t),Puo=r(I5e," \u2014 "),VP=n(I5e,"A",{href:!0});var hzr=s(VP);$uo=r(hzr,"MPNetForMaskedLM"),hzr.forEach(t),Iuo=r(I5e," (MPNet model)"),I5e.forEach(t),Nuo=i(S),Yp=n(S,"LI",{});var N5e=s(Yp);Oee=n(N5e,"STRONG",{});var uzr=s(Oee);Duo=r(uzr,"openai-gpt"),uzr.forEach(t),juo=r(N5e," \u2014 "),zP=n(N5e,"A",{href:!0});var pzr=s(zP);quo=r(pzr,"OpenAIGPTLMHeadModel"),pzr.forEach(t),Guo=r(N5e," (OpenAI GPT model)"),N5e.forEach(t),Ouo=i(S),Kp=n(S,"LI",{});var D5e=s(Kp);Xee=n(D5e,"STRONG",{});var _zr=s(Xee);Xuo=r(_zr,"retribert"),_zr.forEach(t),Vuo=r(D5e," \u2014 "),WP=n(D5e,"A",{href:!0});var bzr=s(WP);zuo=r(bzr,"RetriBertModel"),bzr.forEach(t),Wuo=r(D5e," (RetriBERT model)"),D5e.forEach(t),Quo=i(S),Zp=n(S,"LI",{});var j5e=s(Zp);Vee=n(j5e,"STRONG",{});var vzr=s(Vee);Huo=r(vzr,"roberta"),vzr.forEach(t),Uuo=r(j5e," \u2014 "),QP=n(j5e,"A",{href:!0});var Tzr=s(QP);Juo=r(Tzr,"RobertaForMaskedLM"),Tzr.forEach(t),Yuo=r(j5e," (RoBERTa model)"),j5e.forEach(t),Kuo=i(S),e_=n(S,"LI",{});var q5e=s(e_);zee=n(q5e,"STRONG",{});var Fzr=s(zee);Zuo=r(Fzr,"squeezebert"),Fzr.forEach(t),epo=r(q5e," \u2014 "),HP=n(q5e,"A",{href:!0});var Czr=s(HP);opo=r(Czr,"SqueezeBertForMaskedLM"),Czr.forEach(t),rpo=r(q5e," (SqueezeBERT model)"),q5e.forEach(t),tpo=i(S),o_=n(S,"LI",{});var G5e=s(o_);Wee=n(G5e,"STRONG",{});var Mzr=s(Wee);apo=r(Mzr,"t5"),Mzr.forEach(t),npo=r(G5e," \u2014 "),UP=n(G5e,"A",{href:!0});var Ezr=s(UP);spo=r(Ezr,"T5ForConditionalGeneration"),Ezr.forEach(t),lpo=r(G5e," (T5 model)"),G5e.forEach(t),ipo=i(S),r_=n(S,"LI",{});var O5e=s(r_);Qee=n(O5e,"STRONG",{});var yzr=s(Qee);dpo=r(yzr,"tapas"),yzr.forEach(t),cpo=r(O5e," \u2014 "),JP=n(O5e,"A",{href:!0});var wzr=s(JP);mpo=r(wzr,"TapasForMaskedLM"),wzr.forEach(t),fpo=r(O5e," (TAPAS model)"),O5e.forEach(t),gpo=i(S),t_=n(S,"LI",{});var X5e=s(t_);Hee=n(X5e,"STRONG",{});var Azr=s(Hee);hpo=r(Azr,"transfo-xl"),Azr.forEach(t),upo=r(X5e," \u2014 "),YP=n(X5e,"A",{href:!0});var Lzr=s(YP);ppo=r(Lzr,"TransfoXLLMHeadModel"),Lzr.forEach(t),_po=r(X5e," (Transformer-XL model)"),X5e.forEach(t),bpo=i(S),a_=n(S,"LI",{});var V5e=s(a_);Uee=n(V5e,"STRONG",{});var Bzr=s(Uee);vpo=r(Bzr,"unispeech"),Bzr.forEach(t),Tpo=r(V5e," \u2014 "),KP=n(V5e,"A",{href:!0});var xzr=s(KP);Fpo=r(xzr,"UniSpeechForPreTraining"),xzr.forEach(t),Cpo=r(V5e," (UniSpeech model)"),V5e.forEach(t),Mpo=i(S),n_=n(S,"LI",{});var z5e=s(n_);Jee=n(z5e,"STRONG",{});var kzr=s(Jee);Epo=r(kzr,"unispeech-sat"),kzr.forEach(t),ypo=r(z5e," \u2014 "),ZP=n(z5e,"A",{href:!0});var Rzr=s(ZP);wpo=r(Rzr,"UniSpeechSatForPreTraining"),Rzr.forEach(t),Apo=r(z5e," (UniSpeechSat model)"),z5e.forEach(t),Lpo=i(S),s_=n(S,"LI",{});var W5e=s(s_);Yee=n(W5e,"STRONG",{});var Szr=s(Yee);Bpo=r(Szr,"visual_bert"),Szr.forEach(t),xpo=r(W5e," \u2014 "),e$=n(W5e,"A",{href:!0});var Pzr=s(e$);kpo=r(Pzr,"VisualBertForPreTraining"),Pzr.forEach(t),Rpo=r(W5e," (VisualBert model)"),W5e.forEach(t),Spo=i(S),l_=n(S,"LI",{});var Q5e=s(l_);Kee=n(Q5e,"STRONG",{});var $zr=s(Kee);Ppo=r($zr,"vit_mae"),$zr.forEach(t),$po=r(Q5e," \u2014 "),o$=n(Q5e,"A",{href:!0});var Izr=s(o$);Ipo=r(Izr,"ViTMAEForPreTraining"),Izr.forEach(t),Npo=r(Q5e," (ViTMAE model)"),Q5e.forEach(t),Dpo=i(S),i_=n(S,"LI",{});var H5e=s(i_);Zee=n(H5e,"STRONG",{});var Nzr=s(Zee);jpo=r(Nzr,"wav2vec2"),Nzr.forEach(t),qpo=r(H5e," \u2014 "),r$=n(H5e,"A",{href:!0});var Dzr=s(r$);Gpo=r(Dzr,"Wav2Vec2ForPreTraining"),Dzr.forEach(t),Opo=r(H5e," (Wav2Vec2 model)"),H5e.forEach(t),Xpo=i(S),d_=n(S,"LI",{});var U5e=s(d_);eoe=n(U5e,"STRONG",{});var jzr=s(eoe);Vpo=r(jzr,"xlm"),jzr.forEach(t),zpo=r(U5e," \u2014 "),t$=n(U5e,"A",{href:!0});var qzr=s(t$);Wpo=r(qzr,"XLMWithLMHeadModel"),qzr.forEach(t),Qpo=r(U5e," (XLM model)"),U5e.forEach(t),Hpo=i(S),c_=n(S,"LI",{});var J5e=s(c_);ooe=n(J5e,"STRONG",{});var Gzr=s(ooe);Upo=r(Gzr,"xlm-roberta"),Gzr.forEach(t),Jpo=r(J5e," \u2014 "),a$=n(J5e,"A",{href:!0});var Ozr=s(a$);Ypo=r(Ozr,"XLMRobertaForMaskedLM"),Ozr.forEach(t),Kpo=r(J5e," (XLM-RoBERTa model)"),J5e.forEach(t),Zpo=i(S),m_=n(S,"LI",{});var Y5e=s(m_);roe=n(Y5e,"STRONG",{});var Xzr=s(roe);e_o=r(Xzr,"xlm-roberta-xl"),Xzr.forEach(t),o_o=r(Y5e," \u2014 "),n$=n(Y5e,"A",{href:!0});var Vzr=s(n$);r_o=r(Vzr,"XLMRobertaXLForMaskedLM"),Vzr.forEach(t),t_o=r(Y5e," (XLM-RoBERTa-XL model)"),Y5e.forEach(t),a_o=i(S),f_=n(S,"LI",{});var K5e=s(f_);toe=n(K5e,"STRONG",{});var zzr=s(toe);n_o=r(zzr,"xlnet"),zzr.forEach(t),s_o=r(K5e," \u2014 "),s$=n(K5e,"A",{href:!0});var Wzr=s(s$);l_o=r(Wzr,"XLNetLMHeadModel"),Wzr.forEach(t),i_o=r(K5e," (XLNet model)"),K5e.forEach(t),S.forEach(t),d_o=i(Gt),g_=n(Gt,"P",{});var Z5e=s(g_);c_o=r(Z5e,"The model is set in evaluation mode by default using "),aoe=n(Z5e,"CODE",{});var Qzr=s(aoe);m_o=r(Qzr,"model.eval()"),Qzr.forEach(t),f_o=r(Z5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),noe=n(Z5e,"CODE",{});var Hzr=s(noe);g_o=r(Hzr,"model.train()"),Hzr.forEach(t),Z5e.forEach(t),h_o=i(Gt),soe=n(Gt,"P",{});var Uzr=s(soe);u_o=r(Uzr,"Examples:"),Uzr.forEach(t),p_o=i(Gt),f(Ky.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),_ke=i(c),rd=n(c,"H2",{class:!0});var wSe=s(rd);h_=n(wSe,"A",{id:!0,class:!0,href:!0});var Jzr=s(h_);loe=n(Jzr,"SPAN",{});var Yzr=s(loe);f(Zy.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),__o=i(wSe),ioe=n(wSe,"SPAN",{});var Kzr=s(ioe);b_o=r(Kzr,"AutoModelForCausalLM"),Kzr.forEach(t),wSe.forEach(t),bke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);f(ew.$$.fragment,Js),v_o=i(Js),td=n(Js,"P",{});var Zz=s(td);T_o=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),doe=n(Zz,"CODE",{});var Zzr=s(doe);F_o=r(Zzr,"from_pretrained()"),Zzr.forEach(t),C_o=r(Zz,"class method or the "),coe=n(Zz,"CODE",{});var eWr=s(coe);M_o=r(eWr,"from_config()"),eWr.forEach(t),E_o=r(Zz,`class
method.`),Zz.forEach(t),y_o=i(Js),ow=n(Js,"P",{});var ASe=s(ow);w_o=r(ASe,"This class cannot be instantiated directly using "),moe=n(ASe,"CODE",{});var oWr=s(moe);A_o=r(oWr,"__init__()"),oWr.forEach(t),L_o=r(ASe," (throws an error)."),ASe.forEach(t),B_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);f(rw.$$.fragment,Ys),x_o=i(Ys),foe=n(Ys,"P",{});var rWr=s(foe);k_o=r(rWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rWr.forEach(t),R_o=i(Ys),ad=n(Ys,"P",{});var eW=s(ad);S_o=r(eW,`Note:
Loading a model from its configuration file does `),goe=n(eW,"STRONG",{});var tWr=s(goe);P_o=r(tWr,"not"),tWr.forEach(t),$_o=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hoe=n(eW,"CODE",{});var aWr=s(hoe);I_o=r(aWr,"from_pretrained()"),aWr.forEach(t),N_o=r(eW,"to load the model weights."),eW.forEach(t),D_o=i(Ys),uoe=n(Ys,"P",{});var nWr=s(uoe);j_o=r(nWr,"Examples:"),nWr.forEach(t),q_o=i(Ys),f(tw.$$.fragment,Ys),Ys.forEach(t),G_o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);f(aw.$$.fragment,Ot),O_o=i(Ot),poe=n(Ot,"P",{});var sWr=s(poe);X_o=r(sWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sWr.forEach(t),V_o=i(Ot),Wa=n(Ot,"P",{});var m5=s(Wa);z_o=r(m5,"The model class to instantiate is selected based on the "),_oe=n(m5,"CODE",{});var lWr=s(_oe);W_o=r(lWr,"model_type"),lWr.forEach(t),Q_o=r(m5,` property of the config object (either
passed as an argument or loaded from `),boe=n(m5,"CODE",{});var iWr=s(boe);H_o=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),U_o=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=n(m5,"CODE",{});var dWr=s(voe);J_o=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),Y_o=r(m5,":"),m5.forEach(t),K_o=i(Ot),$=n(Ot,"UL",{});var N=s($);u_=n(N,"LI",{});var eye=s(u_);Toe=n(eye,"STRONG",{});var cWr=s(Toe);Z_o=r(cWr,"bart"),cWr.forEach(t),ebo=r(eye," \u2014 "),l$=n(eye,"A",{href:!0});var mWr=s(l$);obo=r(mWr,"BartForCausalLM"),mWr.forEach(t),rbo=r(eye," (BART model)"),eye.forEach(t),tbo=i(N),p_=n(N,"LI",{});var oye=s(p_);Foe=n(oye,"STRONG",{});var fWr=s(Foe);abo=r(fWr,"bert"),fWr.forEach(t),nbo=r(oye," \u2014 "),i$=n(oye,"A",{href:!0});var gWr=s(i$);sbo=r(gWr,"BertLMHeadModel"),gWr.forEach(t),lbo=r(oye," (BERT model)"),oye.forEach(t),ibo=i(N),__=n(N,"LI",{});var rye=s(__);Coe=n(rye,"STRONG",{});var hWr=s(Coe);dbo=r(hWr,"bert-generation"),hWr.forEach(t),cbo=r(rye," \u2014 "),d$=n(rye,"A",{href:!0});var uWr=s(d$);mbo=r(uWr,"BertGenerationDecoder"),uWr.forEach(t),fbo=r(rye," (Bert Generation model)"),rye.forEach(t),gbo=i(N),b_=n(N,"LI",{});var tye=s(b_);Moe=n(tye,"STRONG",{});var pWr=s(Moe);hbo=r(pWr,"big_bird"),pWr.forEach(t),ubo=r(tye," \u2014 "),c$=n(tye,"A",{href:!0});var _Wr=s(c$);pbo=r(_Wr,"BigBirdForCausalLM"),_Wr.forEach(t),_bo=r(tye," (BigBird model)"),tye.forEach(t),bbo=i(N),v_=n(N,"LI",{});var aye=s(v_);Eoe=n(aye,"STRONG",{});var bWr=s(Eoe);vbo=r(bWr,"bigbird_pegasus"),bWr.forEach(t),Tbo=r(aye," \u2014 "),m$=n(aye,"A",{href:!0});var vWr=s(m$);Fbo=r(vWr,"BigBirdPegasusForCausalLM"),vWr.forEach(t),Cbo=r(aye," (BigBirdPegasus model)"),aye.forEach(t),Mbo=i(N),T_=n(N,"LI",{});var nye=s(T_);yoe=n(nye,"STRONG",{});var TWr=s(yoe);Ebo=r(TWr,"blenderbot"),TWr.forEach(t),ybo=r(nye," \u2014 "),f$=n(nye,"A",{href:!0});var FWr=s(f$);wbo=r(FWr,"BlenderbotForCausalLM"),FWr.forEach(t),Abo=r(nye," (Blenderbot model)"),nye.forEach(t),Lbo=i(N),F_=n(N,"LI",{});var sye=s(F_);woe=n(sye,"STRONG",{});var CWr=s(woe);Bbo=r(CWr,"blenderbot-small"),CWr.forEach(t),xbo=r(sye," \u2014 "),g$=n(sye,"A",{href:!0});var MWr=s(g$);kbo=r(MWr,"BlenderbotSmallForCausalLM"),MWr.forEach(t),Rbo=r(sye," (BlenderbotSmall model)"),sye.forEach(t),Sbo=i(N),C_=n(N,"LI",{});var lye=s(C_);Aoe=n(lye,"STRONG",{});var EWr=s(Aoe);Pbo=r(EWr,"camembert"),EWr.forEach(t),$bo=r(lye," \u2014 "),h$=n(lye,"A",{href:!0});var yWr=s(h$);Ibo=r(yWr,"CamembertForCausalLM"),yWr.forEach(t),Nbo=r(lye," (CamemBERT model)"),lye.forEach(t),Dbo=i(N),M_=n(N,"LI",{});var iye=s(M_);Loe=n(iye,"STRONG",{});var wWr=s(Loe);jbo=r(wWr,"ctrl"),wWr.forEach(t),qbo=r(iye," \u2014 "),u$=n(iye,"A",{href:!0});var AWr=s(u$);Gbo=r(AWr,"CTRLLMHeadModel"),AWr.forEach(t),Obo=r(iye," (CTRL model)"),iye.forEach(t),Xbo=i(N),E_=n(N,"LI",{});var dye=s(E_);Boe=n(dye,"STRONG",{});var LWr=s(Boe);Vbo=r(LWr,"data2vec-text"),LWr.forEach(t),zbo=r(dye," \u2014 "),p$=n(dye,"A",{href:!0});var BWr=s(p$);Wbo=r(BWr,"Data2VecTextForCausalLM"),BWr.forEach(t),Qbo=r(dye," (Data2VecText model)"),dye.forEach(t),Hbo=i(N),y_=n(N,"LI",{});var cye=s(y_);xoe=n(cye,"STRONG",{});var xWr=s(xoe);Ubo=r(xWr,"electra"),xWr.forEach(t),Jbo=r(cye," \u2014 "),_$=n(cye,"A",{href:!0});var kWr=s(_$);Ybo=r(kWr,"ElectraForCausalLM"),kWr.forEach(t),Kbo=r(cye," (ELECTRA model)"),cye.forEach(t),Zbo=i(N),w_=n(N,"LI",{});var mye=s(w_);koe=n(mye,"STRONG",{});var RWr=s(koe);e2o=r(RWr,"gpt2"),RWr.forEach(t),o2o=r(mye," \u2014 "),b$=n(mye,"A",{href:!0});var SWr=s(b$);r2o=r(SWr,"GPT2LMHeadModel"),SWr.forEach(t),t2o=r(mye," (OpenAI GPT-2 model)"),mye.forEach(t),a2o=i(N),A_=n(N,"LI",{});var fye=s(A_);Roe=n(fye,"STRONG",{});var PWr=s(Roe);n2o=r(PWr,"gpt_neo"),PWr.forEach(t),s2o=r(fye," \u2014 "),v$=n(fye,"A",{href:!0});var $Wr=s(v$);l2o=r($Wr,"GPTNeoForCausalLM"),$Wr.forEach(t),i2o=r(fye," (GPT Neo model)"),fye.forEach(t),d2o=i(N),L_=n(N,"LI",{});var gye=s(L_);Soe=n(gye,"STRONG",{});var IWr=s(Soe);c2o=r(IWr,"gptj"),IWr.forEach(t),m2o=r(gye," \u2014 "),T$=n(gye,"A",{href:!0});var NWr=s(T$);f2o=r(NWr,"GPTJForCausalLM"),NWr.forEach(t),g2o=r(gye," (GPT-J model)"),gye.forEach(t),h2o=i(N),B_=n(N,"LI",{});var hye=s(B_);Poe=n(hye,"STRONG",{});var DWr=s(Poe);u2o=r(DWr,"marian"),DWr.forEach(t),p2o=r(hye," \u2014 "),F$=n(hye,"A",{href:!0});var jWr=s(F$);_2o=r(jWr,"MarianForCausalLM"),jWr.forEach(t),b2o=r(hye," (Marian model)"),hye.forEach(t),v2o=i(N),x_=n(N,"LI",{});var uye=s(x_);$oe=n(uye,"STRONG",{});var qWr=s($oe);T2o=r(qWr,"mbart"),qWr.forEach(t),F2o=r(uye," \u2014 "),C$=n(uye,"A",{href:!0});var GWr=s(C$);C2o=r(GWr,"MBartForCausalLM"),GWr.forEach(t),M2o=r(uye," (mBART model)"),uye.forEach(t),E2o=i(N),k_=n(N,"LI",{});var pye=s(k_);Ioe=n(pye,"STRONG",{});var OWr=s(Ioe);y2o=r(OWr,"megatron-bert"),OWr.forEach(t),w2o=r(pye," \u2014 "),M$=n(pye,"A",{href:!0});var XWr=s(M$);A2o=r(XWr,"MegatronBertForCausalLM"),XWr.forEach(t),L2o=r(pye," (MegatronBert model)"),pye.forEach(t),B2o=i(N),R_=n(N,"LI",{});var _ye=s(R_);Noe=n(_ye,"STRONG",{});var VWr=s(Noe);x2o=r(VWr,"openai-gpt"),VWr.forEach(t),k2o=r(_ye," \u2014 "),E$=n(_ye,"A",{href:!0});var zWr=s(E$);R2o=r(zWr,"OpenAIGPTLMHeadModel"),zWr.forEach(t),S2o=r(_ye," (OpenAI GPT model)"),_ye.forEach(t),P2o=i(N),S_=n(N,"LI",{});var bye=s(S_);Doe=n(bye,"STRONG",{});var WWr=s(Doe);$2o=r(WWr,"pegasus"),WWr.forEach(t),I2o=r(bye," \u2014 "),y$=n(bye,"A",{href:!0});var QWr=s(y$);N2o=r(QWr,"PegasusForCausalLM"),QWr.forEach(t),D2o=r(bye," (Pegasus model)"),bye.forEach(t),j2o=i(N),P_=n(N,"LI",{});var vye=s(P_);joe=n(vye,"STRONG",{});var HWr=s(joe);q2o=r(HWr,"plbart"),HWr.forEach(t),G2o=r(vye," \u2014 "),w$=n(vye,"A",{href:!0});var UWr=s(w$);O2o=r(UWr,"PLBartForCausalLM"),UWr.forEach(t),X2o=r(vye," (PLBart model)"),vye.forEach(t),V2o=i(N),$_=n(N,"LI",{});var Tye=s($_);qoe=n(Tye,"STRONG",{});var JWr=s(qoe);z2o=r(JWr,"prophetnet"),JWr.forEach(t),W2o=r(Tye," \u2014 "),A$=n(Tye,"A",{href:!0});var YWr=s(A$);Q2o=r(YWr,"ProphetNetForCausalLM"),YWr.forEach(t),H2o=r(Tye," (ProphetNet model)"),Tye.forEach(t),U2o=i(N),I_=n(N,"LI",{});var Fye=s(I_);Goe=n(Fye,"STRONG",{});var KWr=s(Goe);J2o=r(KWr,"qdqbert"),KWr.forEach(t),Y2o=r(Fye," \u2014 "),L$=n(Fye,"A",{href:!0});var ZWr=s(L$);K2o=r(ZWr,"QDQBertLMHeadModel"),ZWr.forEach(t),Z2o=r(Fye," (QDQBert model)"),Fye.forEach(t),evo=i(N),N_=n(N,"LI",{});var Cye=s(N_);Ooe=n(Cye,"STRONG",{});var eQr=s(Ooe);ovo=r(eQr,"reformer"),eQr.forEach(t),rvo=r(Cye," \u2014 "),B$=n(Cye,"A",{href:!0});var oQr=s(B$);tvo=r(oQr,"ReformerModelWithLMHead"),oQr.forEach(t),avo=r(Cye," (Reformer model)"),Cye.forEach(t),nvo=i(N),D_=n(N,"LI",{});var Mye=s(D_);Xoe=n(Mye,"STRONG",{});var rQr=s(Xoe);svo=r(rQr,"rembert"),rQr.forEach(t),lvo=r(Mye," \u2014 "),x$=n(Mye,"A",{href:!0});var tQr=s(x$);ivo=r(tQr,"RemBertForCausalLM"),tQr.forEach(t),dvo=r(Mye," (RemBERT model)"),Mye.forEach(t),cvo=i(N),j_=n(N,"LI",{});var Eye=s(j_);Voe=n(Eye,"STRONG",{});var aQr=s(Voe);mvo=r(aQr,"roberta"),aQr.forEach(t),fvo=r(Eye," \u2014 "),k$=n(Eye,"A",{href:!0});var nQr=s(k$);gvo=r(nQr,"RobertaForCausalLM"),nQr.forEach(t),hvo=r(Eye," (RoBERTa model)"),Eye.forEach(t),uvo=i(N),q_=n(N,"LI",{});var yye=s(q_);zoe=n(yye,"STRONG",{});var sQr=s(zoe);pvo=r(sQr,"roformer"),sQr.forEach(t),_vo=r(yye," \u2014 "),R$=n(yye,"A",{href:!0});var lQr=s(R$);bvo=r(lQr,"RoFormerForCausalLM"),lQr.forEach(t),vvo=r(yye," (RoFormer model)"),yye.forEach(t),Tvo=i(N),G_=n(N,"LI",{});var wye=s(G_);Woe=n(wye,"STRONG",{});var iQr=s(Woe);Fvo=r(iQr,"speech_to_text_2"),iQr.forEach(t),Cvo=r(wye," \u2014 "),S$=n(wye,"A",{href:!0});var dQr=s(S$);Mvo=r(dQr,"Speech2Text2ForCausalLM"),dQr.forEach(t),Evo=r(wye," (Speech2Text2 model)"),wye.forEach(t),yvo=i(N),O_=n(N,"LI",{});var Aye=s(O_);Qoe=n(Aye,"STRONG",{});var cQr=s(Qoe);wvo=r(cQr,"transfo-xl"),cQr.forEach(t),Avo=r(Aye," \u2014 "),P$=n(Aye,"A",{href:!0});var mQr=s(P$);Lvo=r(mQr,"TransfoXLLMHeadModel"),mQr.forEach(t),Bvo=r(Aye," (Transformer-XL model)"),Aye.forEach(t),xvo=i(N),X_=n(N,"LI",{});var Lye=s(X_);Hoe=n(Lye,"STRONG",{});var fQr=s(Hoe);kvo=r(fQr,"trocr"),fQr.forEach(t),Rvo=r(Lye," \u2014 "),$$=n(Lye,"A",{href:!0});var gQr=s($$);Svo=r(gQr,"TrOCRForCausalLM"),gQr.forEach(t),Pvo=r(Lye," (TrOCR model)"),Lye.forEach(t),$vo=i(N),V_=n(N,"LI",{});var Bye=s(V_);Uoe=n(Bye,"STRONG",{});var hQr=s(Uoe);Ivo=r(hQr,"xglm"),hQr.forEach(t),Nvo=r(Bye," \u2014 "),I$=n(Bye,"A",{href:!0});var uQr=s(I$);Dvo=r(uQr,"XGLMForCausalLM"),uQr.forEach(t),jvo=r(Bye," (XGLM model)"),Bye.forEach(t),qvo=i(N),z_=n(N,"LI",{});var xye=s(z_);Joe=n(xye,"STRONG",{});var pQr=s(Joe);Gvo=r(pQr,"xlm"),pQr.forEach(t),Ovo=r(xye," \u2014 "),N$=n(xye,"A",{href:!0});var _Qr=s(N$);Xvo=r(_Qr,"XLMWithLMHeadModel"),_Qr.forEach(t),Vvo=r(xye," (XLM model)"),xye.forEach(t),zvo=i(N),W_=n(N,"LI",{});var kye=s(W_);Yoe=n(kye,"STRONG",{});var bQr=s(Yoe);Wvo=r(bQr,"xlm-prophetnet"),bQr.forEach(t),Qvo=r(kye," \u2014 "),D$=n(kye,"A",{href:!0});var vQr=s(D$);Hvo=r(vQr,"XLMProphetNetForCausalLM"),vQr.forEach(t),Uvo=r(kye," (XLMProphetNet model)"),kye.forEach(t),Jvo=i(N),Q_=n(N,"LI",{});var Rye=s(Q_);Koe=n(Rye,"STRONG",{});var TQr=s(Koe);Yvo=r(TQr,"xlm-roberta"),TQr.forEach(t),Kvo=r(Rye," \u2014 "),j$=n(Rye,"A",{href:!0});var FQr=s(j$);Zvo=r(FQr,"XLMRobertaForCausalLM"),FQr.forEach(t),eTo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),oTo=i(N),H_=n(N,"LI",{});var Sye=s(H_);Zoe=n(Sye,"STRONG",{});var CQr=s(Zoe);rTo=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),tTo=r(Sye," \u2014 "),q$=n(Sye,"A",{href:!0});var MQr=s(q$);aTo=r(MQr,"XLMRobertaXLForCausalLM"),MQr.forEach(t),nTo=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),sTo=i(N),U_=n(N,"LI",{});var Pye=s(U_);ere=n(Pye,"STRONG",{});var EQr=s(ere);lTo=r(EQr,"xlnet"),EQr.forEach(t),iTo=r(Pye," \u2014 "),G$=n(Pye,"A",{href:!0});var yQr=s(G$);dTo=r(yQr,"XLNetLMHeadModel"),yQr.forEach(t),cTo=r(Pye," (XLNet model)"),Pye.forEach(t),N.forEach(t),mTo=i(Ot),J_=n(Ot,"P",{});var $ye=s(J_);fTo=r($ye,"The model is set in evaluation mode by default using "),ore=n($ye,"CODE",{});var wQr=s(ore);gTo=r(wQr,"model.eval()"),wQr.forEach(t),hTo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n($ye,"CODE",{});var AQr=s(rre);uTo=r(AQr,"model.train()"),AQr.forEach(t),$ye.forEach(t),pTo=i(Ot),tre=n(Ot,"P",{});var LQr=s(tre);_To=r(LQr,"Examples:"),LQr.forEach(t),bTo=i(Ot),f(nw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),vke=i(c),nd=n(c,"H2",{class:!0});var LSe=s(nd);Y_=n(LSe,"A",{id:!0,class:!0,href:!0});var BQr=s(Y_);are=n(BQr,"SPAN",{});var xQr=s(are);f(sw.$$.fragment,xQr),xQr.forEach(t),BQr.forEach(t),vTo=i(LSe),nre=n(LSe,"SPAN",{});var kQr=s(nre);TTo=r(kQr,"AutoModelForMaskedLM"),kQr.forEach(t),LSe.forEach(t),Tke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);f(lw.$$.fragment,Ks),FTo=i(Ks),sd=n(Ks,"P",{});var oW=s(sd);CTo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sre=n(oW,"CODE",{});var RQr=s(sre);MTo=r(RQr,"from_pretrained()"),RQr.forEach(t),ETo=r(oW,"class method or the "),lre=n(oW,"CODE",{});var SQr=s(lre);yTo=r(SQr,"from_config()"),SQr.forEach(t),wTo=r(oW,`class
method.`),oW.forEach(t),ATo=i(Ks),iw=n(Ks,"P",{});var BSe=s(iw);LTo=r(BSe,"This class cannot be instantiated directly using "),ire=n(BSe,"CODE",{});var PQr=s(ire);BTo=r(PQr,"__init__()"),PQr.forEach(t),xTo=r(BSe," (throws an error)."),BSe.forEach(t),kTo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);f(dw.$$.fragment,Zs),RTo=i(Zs),dre=n(Zs,"P",{});var $Qr=s(dre);STo=r($Qr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Qr.forEach(t),PTo=i(Zs),ld=n(Zs,"P",{});var rW=s(ld);$To=r(rW,`Note:
Loading a model from its configuration file does `),cre=n(rW,"STRONG",{});var IQr=s(cre);ITo=r(IQr,"not"),IQr.forEach(t),NTo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(rW,"CODE",{});var NQr=s(mre);DTo=r(NQr,"from_pretrained()"),NQr.forEach(t),jTo=r(rW,"to load the model weights."),rW.forEach(t),qTo=i(Zs),fre=n(Zs,"P",{});var DQr=s(fre);GTo=r(DQr,"Examples:"),DQr.forEach(t),OTo=i(Zs),f(cw.$$.fragment,Zs),Zs.forEach(t),XTo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);f(mw.$$.fragment,Xt),VTo=i(Xt),gre=n(Xt,"P",{});var jQr=s(gre);zTo=r(jQr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jQr.forEach(t),WTo=i(Xt),Qa=n(Xt,"P",{});var f5=s(Qa);QTo=r(f5,"The model class to instantiate is selected based on the "),hre=n(f5,"CODE",{});var qQr=s(hre);HTo=r(qQr,"model_type"),qQr.forEach(t),UTo=r(f5,` property of the config object (either
passed as an argument or loaded from `),ure=n(f5,"CODE",{});var GQr=s(ure);JTo=r(GQr,"pretrained_model_name_or_path"),GQr.forEach(t),YTo=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=n(f5,"CODE",{});var OQr=s(pre);KTo=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),ZTo=r(f5,":"),f5.forEach(t),e1o=i(Xt),I=n(Xt,"UL",{});var D=s(I);K_=n(D,"LI",{});var Iye=s(K_);_re=n(Iye,"STRONG",{});var XQr=s(_re);o1o=r(XQr,"albert"),XQr.forEach(t),r1o=r(Iye," \u2014 "),O$=n(Iye,"A",{href:!0});var VQr=s(O$);t1o=r(VQr,"AlbertForMaskedLM"),VQr.forEach(t),a1o=r(Iye," (ALBERT model)"),Iye.forEach(t),n1o=i(D),Z_=n(D,"LI",{});var Nye=s(Z_);bre=n(Nye,"STRONG",{});var zQr=s(bre);s1o=r(zQr,"bart"),zQr.forEach(t),l1o=r(Nye," \u2014 "),X$=n(Nye,"A",{href:!0});var WQr=s(X$);i1o=r(WQr,"BartForConditionalGeneration"),WQr.forEach(t),d1o=r(Nye," (BART model)"),Nye.forEach(t),c1o=i(D),eb=n(D,"LI",{});var Dye=s(eb);vre=n(Dye,"STRONG",{});var QQr=s(vre);m1o=r(QQr,"bert"),QQr.forEach(t),f1o=r(Dye," \u2014 "),V$=n(Dye,"A",{href:!0});var HQr=s(V$);g1o=r(HQr,"BertForMaskedLM"),HQr.forEach(t),h1o=r(Dye," (BERT model)"),Dye.forEach(t),u1o=i(D),ob=n(D,"LI",{});var jye=s(ob);Tre=n(jye,"STRONG",{});var UQr=s(Tre);p1o=r(UQr,"big_bird"),UQr.forEach(t),_1o=r(jye," \u2014 "),z$=n(jye,"A",{href:!0});var JQr=s(z$);b1o=r(JQr,"BigBirdForMaskedLM"),JQr.forEach(t),v1o=r(jye," (BigBird model)"),jye.forEach(t),T1o=i(D),rb=n(D,"LI",{});var qye=s(rb);Fre=n(qye,"STRONG",{});var YQr=s(Fre);F1o=r(YQr,"camembert"),YQr.forEach(t),C1o=r(qye," \u2014 "),W$=n(qye,"A",{href:!0});var KQr=s(W$);M1o=r(KQr,"CamembertForMaskedLM"),KQr.forEach(t),E1o=r(qye," (CamemBERT model)"),qye.forEach(t),y1o=i(D),tb=n(D,"LI",{});var Gye=s(tb);Cre=n(Gye,"STRONG",{});var ZQr=s(Cre);w1o=r(ZQr,"convbert"),ZQr.forEach(t),A1o=r(Gye," \u2014 "),Q$=n(Gye,"A",{href:!0});var eHr=s(Q$);L1o=r(eHr,"ConvBertForMaskedLM"),eHr.forEach(t),B1o=r(Gye," (ConvBERT model)"),Gye.forEach(t),x1o=i(D),ab=n(D,"LI",{});var Oye=s(ab);Mre=n(Oye,"STRONG",{});var oHr=s(Mre);k1o=r(oHr,"data2vec-text"),oHr.forEach(t),R1o=r(Oye," \u2014 "),H$=n(Oye,"A",{href:!0});var rHr=s(H$);S1o=r(rHr,"Data2VecTextForMaskedLM"),rHr.forEach(t),P1o=r(Oye," (Data2VecText model)"),Oye.forEach(t),$1o=i(D),nb=n(D,"LI",{});var Xye=s(nb);Ere=n(Xye,"STRONG",{});var tHr=s(Ere);I1o=r(tHr,"deberta"),tHr.forEach(t),N1o=r(Xye," \u2014 "),U$=n(Xye,"A",{href:!0});var aHr=s(U$);D1o=r(aHr,"DebertaForMaskedLM"),aHr.forEach(t),j1o=r(Xye," (DeBERTa model)"),Xye.forEach(t),q1o=i(D),sb=n(D,"LI",{});var Vye=s(sb);yre=n(Vye,"STRONG",{});var nHr=s(yre);G1o=r(nHr,"deberta-v2"),nHr.forEach(t),O1o=r(Vye," \u2014 "),J$=n(Vye,"A",{href:!0});var sHr=s(J$);X1o=r(sHr,"DebertaV2ForMaskedLM"),sHr.forEach(t),V1o=r(Vye," (DeBERTa-v2 model)"),Vye.forEach(t),z1o=i(D),lb=n(D,"LI",{});var zye=s(lb);wre=n(zye,"STRONG",{});var lHr=s(wre);W1o=r(lHr,"distilbert"),lHr.forEach(t),Q1o=r(zye," \u2014 "),Y$=n(zye,"A",{href:!0});var iHr=s(Y$);H1o=r(iHr,"DistilBertForMaskedLM"),iHr.forEach(t),U1o=r(zye," (DistilBERT model)"),zye.forEach(t),J1o=i(D),ib=n(D,"LI",{});var Wye=s(ib);Are=n(Wye,"STRONG",{});var dHr=s(Are);Y1o=r(dHr,"electra"),dHr.forEach(t),K1o=r(Wye," \u2014 "),K$=n(Wye,"A",{href:!0});var cHr=s(K$);Z1o=r(cHr,"ElectraForMaskedLM"),cHr.forEach(t),eFo=r(Wye," (ELECTRA model)"),Wye.forEach(t),oFo=i(D),db=n(D,"LI",{});var Qye=s(db);Lre=n(Qye,"STRONG",{});var mHr=s(Lre);rFo=r(mHr,"flaubert"),mHr.forEach(t),tFo=r(Qye," \u2014 "),Z$=n(Qye,"A",{href:!0});var fHr=s(Z$);aFo=r(fHr,"FlaubertWithLMHeadModel"),fHr.forEach(t),nFo=r(Qye," (FlauBERT model)"),Qye.forEach(t),sFo=i(D),cb=n(D,"LI",{});var Hye=s(cb);Bre=n(Hye,"STRONG",{});var gHr=s(Bre);lFo=r(gHr,"fnet"),gHr.forEach(t),iFo=r(Hye," \u2014 "),eI=n(Hye,"A",{href:!0});var hHr=s(eI);dFo=r(hHr,"FNetForMaskedLM"),hHr.forEach(t),cFo=r(Hye," (FNet model)"),Hye.forEach(t),mFo=i(D),mb=n(D,"LI",{});var Uye=s(mb);xre=n(Uye,"STRONG",{});var uHr=s(xre);fFo=r(uHr,"funnel"),uHr.forEach(t),gFo=r(Uye," \u2014 "),oI=n(Uye,"A",{href:!0});var pHr=s(oI);hFo=r(pHr,"FunnelForMaskedLM"),pHr.forEach(t),uFo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),pFo=i(D),fb=n(D,"LI",{});var Jye=s(fb);kre=n(Jye,"STRONG",{});var _Hr=s(kre);_Fo=r(_Hr,"ibert"),_Hr.forEach(t),bFo=r(Jye," \u2014 "),rI=n(Jye,"A",{href:!0});var bHr=s(rI);vFo=r(bHr,"IBertForMaskedLM"),bHr.forEach(t),TFo=r(Jye," (I-BERT model)"),Jye.forEach(t),FFo=i(D),gb=n(D,"LI",{});var Yye=s(gb);Rre=n(Yye,"STRONG",{});var vHr=s(Rre);CFo=r(vHr,"layoutlm"),vHr.forEach(t),MFo=r(Yye," \u2014 "),tI=n(Yye,"A",{href:!0});var THr=s(tI);EFo=r(THr,"LayoutLMForMaskedLM"),THr.forEach(t),yFo=r(Yye," (LayoutLM model)"),Yye.forEach(t),wFo=i(D),hb=n(D,"LI",{});var Kye=s(hb);Sre=n(Kye,"STRONG",{});var FHr=s(Sre);AFo=r(FHr,"longformer"),FHr.forEach(t),LFo=r(Kye," \u2014 "),aI=n(Kye,"A",{href:!0});var CHr=s(aI);BFo=r(CHr,"LongformerForMaskedLM"),CHr.forEach(t),xFo=r(Kye," (Longformer model)"),Kye.forEach(t),kFo=i(D),ub=n(D,"LI",{});var Zye=s(ub);Pre=n(Zye,"STRONG",{});var MHr=s(Pre);RFo=r(MHr,"mbart"),MHr.forEach(t),SFo=r(Zye," \u2014 "),nI=n(Zye,"A",{href:!0});var EHr=s(nI);PFo=r(EHr,"MBartForConditionalGeneration"),EHr.forEach(t),$Fo=r(Zye," (mBART model)"),Zye.forEach(t),IFo=i(D),pb=n(D,"LI",{});var ewe=s(pb);$re=n(ewe,"STRONG",{});var yHr=s($re);NFo=r(yHr,"megatron-bert"),yHr.forEach(t),DFo=r(ewe," \u2014 "),sI=n(ewe,"A",{href:!0});var wHr=s(sI);jFo=r(wHr,"MegatronBertForMaskedLM"),wHr.forEach(t),qFo=r(ewe," (MegatronBert model)"),ewe.forEach(t),GFo=i(D),_b=n(D,"LI",{});var owe=s(_b);Ire=n(owe,"STRONG",{});var AHr=s(Ire);OFo=r(AHr,"mobilebert"),AHr.forEach(t),XFo=r(owe," \u2014 "),lI=n(owe,"A",{href:!0});var LHr=s(lI);VFo=r(LHr,"MobileBertForMaskedLM"),LHr.forEach(t),zFo=r(owe," (MobileBERT model)"),owe.forEach(t),WFo=i(D),bb=n(D,"LI",{});var rwe=s(bb);Nre=n(rwe,"STRONG",{});var BHr=s(Nre);QFo=r(BHr,"mpnet"),BHr.forEach(t),HFo=r(rwe," \u2014 "),iI=n(rwe,"A",{href:!0});var xHr=s(iI);UFo=r(xHr,"MPNetForMaskedLM"),xHr.forEach(t),JFo=r(rwe," (MPNet model)"),rwe.forEach(t),YFo=i(D),vb=n(D,"LI",{});var twe=s(vb);Dre=n(twe,"STRONG",{});var kHr=s(Dre);KFo=r(kHr,"nystromformer"),kHr.forEach(t),ZFo=r(twe," \u2014 "),dI=n(twe,"A",{href:!0});var RHr=s(dI);eCo=r(RHr,"NystromformerForMaskedLM"),RHr.forEach(t),oCo=r(twe," (Nystromformer model)"),twe.forEach(t),rCo=i(D),Tb=n(D,"LI",{});var awe=s(Tb);jre=n(awe,"STRONG",{});var SHr=s(jre);tCo=r(SHr,"perceiver"),SHr.forEach(t),aCo=r(awe," \u2014 "),cI=n(awe,"A",{href:!0});var PHr=s(cI);nCo=r(PHr,"PerceiverForMaskedLM"),PHr.forEach(t),sCo=r(awe," (Perceiver model)"),awe.forEach(t),lCo=i(D),Fb=n(D,"LI",{});var nwe=s(Fb);qre=n(nwe,"STRONG",{});var $Hr=s(qre);iCo=r($Hr,"qdqbert"),$Hr.forEach(t),dCo=r(nwe," \u2014 "),mI=n(nwe,"A",{href:!0});var IHr=s(mI);cCo=r(IHr,"QDQBertForMaskedLM"),IHr.forEach(t),mCo=r(nwe," (QDQBert model)"),nwe.forEach(t),fCo=i(D),Cb=n(D,"LI",{});var swe=s(Cb);Gre=n(swe,"STRONG",{});var NHr=s(Gre);gCo=r(NHr,"reformer"),NHr.forEach(t),hCo=r(swe," \u2014 "),fI=n(swe,"A",{href:!0});var DHr=s(fI);uCo=r(DHr,"ReformerForMaskedLM"),DHr.forEach(t),pCo=r(swe," (Reformer model)"),swe.forEach(t),_Co=i(D),Mb=n(D,"LI",{});var lwe=s(Mb);Ore=n(lwe,"STRONG",{});var jHr=s(Ore);bCo=r(jHr,"rembert"),jHr.forEach(t),vCo=r(lwe," \u2014 "),gI=n(lwe,"A",{href:!0});var qHr=s(gI);TCo=r(qHr,"RemBertForMaskedLM"),qHr.forEach(t),FCo=r(lwe," (RemBERT model)"),lwe.forEach(t),CCo=i(D),Eb=n(D,"LI",{});var iwe=s(Eb);Xre=n(iwe,"STRONG",{});var GHr=s(Xre);MCo=r(GHr,"roberta"),GHr.forEach(t),ECo=r(iwe," \u2014 "),hI=n(iwe,"A",{href:!0});var OHr=s(hI);yCo=r(OHr,"RobertaForMaskedLM"),OHr.forEach(t),wCo=r(iwe," (RoBERTa model)"),iwe.forEach(t),ACo=i(D),yb=n(D,"LI",{});var dwe=s(yb);Vre=n(dwe,"STRONG",{});var XHr=s(Vre);LCo=r(XHr,"roformer"),XHr.forEach(t),BCo=r(dwe," \u2014 "),uI=n(dwe,"A",{href:!0});var VHr=s(uI);xCo=r(VHr,"RoFormerForMaskedLM"),VHr.forEach(t),kCo=r(dwe," (RoFormer model)"),dwe.forEach(t),RCo=i(D),wb=n(D,"LI",{});var cwe=s(wb);zre=n(cwe,"STRONG",{});var zHr=s(zre);SCo=r(zHr,"squeezebert"),zHr.forEach(t),PCo=r(cwe," \u2014 "),pI=n(cwe,"A",{href:!0});var WHr=s(pI);$Co=r(WHr,"SqueezeBertForMaskedLM"),WHr.forEach(t),ICo=r(cwe," (SqueezeBERT model)"),cwe.forEach(t),NCo=i(D),Ab=n(D,"LI",{});var mwe=s(Ab);Wre=n(mwe,"STRONG",{});var QHr=s(Wre);DCo=r(QHr,"tapas"),QHr.forEach(t),jCo=r(mwe," \u2014 "),_I=n(mwe,"A",{href:!0});var HHr=s(_I);qCo=r(HHr,"TapasForMaskedLM"),HHr.forEach(t),GCo=r(mwe," (TAPAS model)"),mwe.forEach(t),OCo=i(D),Lb=n(D,"LI",{});var fwe=s(Lb);Qre=n(fwe,"STRONG",{});var UHr=s(Qre);XCo=r(UHr,"wav2vec2"),UHr.forEach(t),VCo=r(fwe," \u2014 "),Hre=n(fwe,"CODE",{});var JHr=s(Hre);zCo=r(JHr,"Wav2Vec2ForMaskedLM"),JHr.forEach(t),WCo=r(fwe,"(Wav2Vec2 model)"),fwe.forEach(t),QCo=i(D),Bb=n(D,"LI",{});var gwe=s(Bb);Ure=n(gwe,"STRONG",{});var YHr=s(Ure);HCo=r(YHr,"xlm"),YHr.forEach(t),UCo=r(gwe," \u2014 "),bI=n(gwe,"A",{href:!0});var KHr=s(bI);JCo=r(KHr,"XLMWithLMHeadModel"),KHr.forEach(t),YCo=r(gwe," (XLM model)"),gwe.forEach(t),KCo=i(D),xb=n(D,"LI",{});var hwe=s(xb);Jre=n(hwe,"STRONG",{});var ZHr=s(Jre);ZCo=r(ZHr,"xlm-roberta"),ZHr.forEach(t),eMo=r(hwe," \u2014 "),vI=n(hwe,"A",{href:!0});var eUr=s(vI);oMo=r(eUr,"XLMRobertaForMaskedLM"),eUr.forEach(t),rMo=r(hwe," (XLM-RoBERTa model)"),hwe.forEach(t),tMo=i(D),kb=n(D,"LI",{});var uwe=s(kb);Yre=n(uwe,"STRONG",{});var oUr=s(Yre);aMo=r(oUr,"xlm-roberta-xl"),oUr.forEach(t),nMo=r(uwe," \u2014 "),TI=n(uwe,"A",{href:!0});var rUr=s(TI);sMo=r(rUr,"XLMRobertaXLForMaskedLM"),rUr.forEach(t),lMo=r(uwe," (XLM-RoBERTa-XL model)"),uwe.forEach(t),iMo=i(D),Rb=n(D,"LI",{});var pwe=s(Rb);Kre=n(pwe,"STRONG",{});var tUr=s(Kre);dMo=r(tUr,"yoso"),tUr.forEach(t),cMo=r(pwe," \u2014 "),FI=n(pwe,"A",{href:!0});var aUr=s(FI);mMo=r(aUr,"YosoForMaskedLM"),aUr.forEach(t),fMo=r(pwe," (YOSO model)"),pwe.forEach(t),D.forEach(t),gMo=i(Xt),Sb=n(Xt,"P",{});var _we=s(Sb);hMo=r(_we,"The model is set in evaluation mode by default using "),Zre=n(_we,"CODE",{});var nUr=s(Zre);uMo=r(nUr,"model.eval()"),nUr.forEach(t),pMo=r(_we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ete=n(_we,"CODE",{});var sUr=s(ete);_Mo=r(sUr,"model.train()"),sUr.forEach(t),_we.forEach(t),bMo=i(Xt),ote=n(Xt,"P",{});var lUr=s(ote);vMo=r(lUr,"Examples:"),lUr.forEach(t),TMo=i(Xt),f(fw.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Fke=i(c),id=n(c,"H2",{class:!0});var xSe=s(id);Pb=n(xSe,"A",{id:!0,class:!0,href:!0});var iUr=s(Pb);rte=n(iUr,"SPAN",{});var dUr=s(rte);f(gw.$$.fragment,dUr),dUr.forEach(t),iUr.forEach(t),FMo=i(xSe),tte=n(xSe,"SPAN",{});var cUr=s(tte);CMo=r(cUr,"AutoModelForSeq2SeqLM"),cUr.forEach(t),xSe.forEach(t),Cke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);f(hw.$$.fragment,el),MMo=i(el),dd=n(el,"P",{});var tW=s(dd);EMo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ate=n(tW,"CODE",{});var mUr=s(ate);yMo=r(mUr,"from_pretrained()"),mUr.forEach(t),wMo=r(tW,"class method or the "),nte=n(tW,"CODE",{});var fUr=s(nte);AMo=r(fUr,"from_config()"),fUr.forEach(t),LMo=r(tW,`class
method.`),tW.forEach(t),BMo=i(el),uw=n(el,"P",{});var kSe=s(uw);xMo=r(kSe,"This class cannot be instantiated directly using "),ste=n(kSe,"CODE",{});var gUr=s(ste);kMo=r(gUr,"__init__()"),gUr.forEach(t),RMo=r(kSe," (throws an error)."),kSe.forEach(t),SMo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);f(pw.$$.fragment,ol),PMo=i(ol),lte=n(ol,"P",{});var hUr=s(lte);$Mo=r(hUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hUr.forEach(t),IMo=i(ol),cd=n(ol,"P",{});var aW=s(cd);NMo=r(aW,`Note:
Loading a model from its configuration file does `),ite=n(aW,"STRONG",{});var uUr=s(ite);DMo=r(uUr,"not"),uUr.forEach(t),jMo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dte=n(aW,"CODE",{});var pUr=s(dte);qMo=r(pUr,"from_pretrained()"),pUr.forEach(t),GMo=r(aW,"to load the model weights."),aW.forEach(t),OMo=i(ol),cte=n(ol,"P",{});var _Ur=s(cte);XMo=r(_Ur,"Examples:"),_Ur.forEach(t),VMo=i(ol),f(_w.$$.fragment,ol),ol.forEach(t),zMo=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);f(bw.$$.fragment,Vt),WMo=i(Vt),mte=n(Vt,"P",{});var bUr=s(mte);QMo=r(bUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bUr.forEach(t),HMo=i(Vt),Ha=n(Vt,"P",{});var g5=s(Ha);UMo=r(g5,"The model class to instantiate is selected based on the "),fte=n(g5,"CODE",{});var vUr=s(fte);JMo=r(vUr,"model_type"),vUr.forEach(t),YMo=r(g5,` property of the config object (either
passed as an argument or loaded from `),gte=n(g5,"CODE",{});var TUr=s(gte);KMo=r(TUr,"pretrained_model_name_or_path"),TUr.forEach(t),ZMo=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hte=n(g5,"CODE",{});var FUr=s(hte);e4o=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),o4o=r(g5,":"),g5.forEach(t),r4o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);$b=n(ie,"LI",{});var bwe=s($b);ute=n(bwe,"STRONG",{});var CUr=s(ute);t4o=r(CUr,"bart"),CUr.forEach(t),a4o=r(bwe," \u2014 "),CI=n(bwe,"A",{href:!0});var MUr=s(CI);n4o=r(MUr,"BartForConditionalGeneration"),MUr.forEach(t),s4o=r(bwe," (BART model)"),bwe.forEach(t),l4o=i(ie),Ib=n(ie,"LI",{});var vwe=s(Ib);pte=n(vwe,"STRONG",{});var EUr=s(pte);i4o=r(EUr,"bigbird_pegasus"),EUr.forEach(t),d4o=r(vwe," \u2014 "),MI=n(vwe,"A",{href:!0});var yUr=s(MI);c4o=r(yUr,"BigBirdPegasusForConditionalGeneration"),yUr.forEach(t),m4o=r(vwe," (BigBirdPegasus model)"),vwe.forEach(t),f4o=i(ie),Nb=n(ie,"LI",{});var Twe=s(Nb);_te=n(Twe,"STRONG",{});var wUr=s(_te);g4o=r(wUr,"blenderbot"),wUr.forEach(t),h4o=r(Twe," \u2014 "),EI=n(Twe,"A",{href:!0});var AUr=s(EI);u4o=r(AUr,"BlenderbotForConditionalGeneration"),AUr.forEach(t),p4o=r(Twe," (Blenderbot model)"),Twe.forEach(t),_4o=i(ie),Db=n(ie,"LI",{});var Fwe=s(Db);bte=n(Fwe,"STRONG",{});var LUr=s(bte);b4o=r(LUr,"blenderbot-small"),LUr.forEach(t),v4o=r(Fwe," \u2014 "),yI=n(Fwe,"A",{href:!0});var BUr=s(yI);T4o=r(BUr,"BlenderbotSmallForConditionalGeneration"),BUr.forEach(t),F4o=r(Fwe," (BlenderbotSmall model)"),Fwe.forEach(t),C4o=i(ie),jb=n(ie,"LI",{});var Cwe=s(jb);vte=n(Cwe,"STRONG",{});var xUr=s(vte);M4o=r(xUr,"encoder-decoder"),xUr.forEach(t),E4o=r(Cwe," \u2014 "),wI=n(Cwe,"A",{href:!0});var kUr=s(wI);y4o=r(kUr,"EncoderDecoderModel"),kUr.forEach(t),w4o=r(Cwe," (Encoder decoder model)"),Cwe.forEach(t),A4o=i(ie),qb=n(ie,"LI",{});var Mwe=s(qb);Tte=n(Mwe,"STRONG",{});var RUr=s(Tte);L4o=r(RUr,"fsmt"),RUr.forEach(t),B4o=r(Mwe," \u2014 "),AI=n(Mwe,"A",{href:!0});var SUr=s(AI);x4o=r(SUr,"FSMTForConditionalGeneration"),SUr.forEach(t),k4o=r(Mwe," (FairSeq Machine-Translation model)"),Mwe.forEach(t),R4o=i(ie),Gb=n(ie,"LI",{});var Ewe=s(Gb);Fte=n(Ewe,"STRONG",{});var PUr=s(Fte);S4o=r(PUr,"led"),PUr.forEach(t),P4o=r(Ewe," \u2014 "),LI=n(Ewe,"A",{href:!0});var $Ur=s(LI);$4o=r($Ur,"LEDForConditionalGeneration"),$Ur.forEach(t),I4o=r(Ewe," (LED model)"),Ewe.forEach(t),N4o=i(ie),Ob=n(ie,"LI",{});var ywe=s(Ob);Cte=n(ywe,"STRONG",{});var IUr=s(Cte);D4o=r(IUr,"m2m_100"),IUr.forEach(t),j4o=r(ywe," \u2014 "),BI=n(ywe,"A",{href:!0});var NUr=s(BI);q4o=r(NUr,"M2M100ForConditionalGeneration"),NUr.forEach(t),G4o=r(ywe," (M2M100 model)"),ywe.forEach(t),O4o=i(ie),Xb=n(ie,"LI",{});var wwe=s(Xb);Mte=n(wwe,"STRONG",{});var DUr=s(Mte);X4o=r(DUr,"marian"),DUr.forEach(t),V4o=r(wwe," \u2014 "),xI=n(wwe,"A",{href:!0});var jUr=s(xI);z4o=r(jUr,"MarianMTModel"),jUr.forEach(t),W4o=r(wwe," (Marian model)"),wwe.forEach(t),Q4o=i(ie),Vb=n(ie,"LI",{});var Awe=s(Vb);Ete=n(Awe,"STRONG",{});var qUr=s(Ete);H4o=r(qUr,"mbart"),qUr.forEach(t),U4o=r(Awe," \u2014 "),kI=n(Awe,"A",{href:!0});var GUr=s(kI);J4o=r(GUr,"MBartForConditionalGeneration"),GUr.forEach(t),Y4o=r(Awe," (mBART model)"),Awe.forEach(t),K4o=i(ie),zb=n(ie,"LI",{});var Lwe=s(zb);yte=n(Lwe,"STRONG",{});var OUr=s(yte);Z4o=r(OUr,"mt5"),OUr.forEach(t),eEo=r(Lwe," \u2014 "),RI=n(Lwe,"A",{href:!0});var XUr=s(RI);oEo=r(XUr,"MT5ForConditionalGeneration"),XUr.forEach(t),rEo=r(Lwe," (mT5 model)"),Lwe.forEach(t),tEo=i(ie),Wb=n(ie,"LI",{});var Bwe=s(Wb);wte=n(Bwe,"STRONG",{});var VUr=s(wte);aEo=r(VUr,"pegasus"),VUr.forEach(t),nEo=r(Bwe," \u2014 "),SI=n(Bwe,"A",{href:!0});var zUr=s(SI);sEo=r(zUr,"PegasusForConditionalGeneration"),zUr.forEach(t),lEo=r(Bwe," (Pegasus model)"),Bwe.forEach(t),iEo=i(ie),Qb=n(ie,"LI",{});var xwe=s(Qb);Ate=n(xwe,"STRONG",{});var WUr=s(Ate);dEo=r(WUr,"plbart"),WUr.forEach(t),cEo=r(xwe," \u2014 "),PI=n(xwe,"A",{href:!0});var QUr=s(PI);mEo=r(QUr,"PLBartForConditionalGeneration"),QUr.forEach(t),fEo=r(xwe," (PLBart model)"),xwe.forEach(t),gEo=i(ie),Hb=n(ie,"LI",{});var kwe=s(Hb);Lte=n(kwe,"STRONG",{});var HUr=s(Lte);hEo=r(HUr,"prophetnet"),HUr.forEach(t),uEo=r(kwe," \u2014 "),$I=n(kwe,"A",{href:!0});var UUr=s($I);pEo=r(UUr,"ProphetNetForConditionalGeneration"),UUr.forEach(t),_Eo=r(kwe," (ProphetNet model)"),kwe.forEach(t),bEo=i(ie),Ub=n(ie,"LI",{});var Rwe=s(Ub);Bte=n(Rwe,"STRONG",{});var JUr=s(Bte);vEo=r(JUr,"t5"),JUr.forEach(t),TEo=r(Rwe," \u2014 "),II=n(Rwe,"A",{href:!0});var YUr=s(II);FEo=r(YUr,"T5ForConditionalGeneration"),YUr.forEach(t),CEo=r(Rwe," (T5 model)"),Rwe.forEach(t),MEo=i(ie),Jb=n(ie,"LI",{});var Swe=s(Jb);xte=n(Swe,"STRONG",{});var KUr=s(xte);EEo=r(KUr,"xlm-prophetnet"),KUr.forEach(t),yEo=r(Swe," \u2014 "),NI=n(Swe,"A",{href:!0});var ZUr=s(NI);wEo=r(ZUr,"XLMProphetNetForConditionalGeneration"),ZUr.forEach(t),AEo=r(Swe," (XLMProphetNet model)"),Swe.forEach(t),ie.forEach(t),LEo=i(Vt),Yb=n(Vt,"P",{});var Pwe=s(Yb);BEo=r(Pwe,"The model is set in evaluation mode by default using "),kte=n(Pwe,"CODE",{});var eJr=s(kte);xEo=r(eJr,"model.eval()"),eJr.forEach(t),kEo=r(Pwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rte=n(Pwe,"CODE",{});var oJr=s(Rte);REo=r(oJr,"model.train()"),oJr.forEach(t),Pwe.forEach(t),SEo=i(Vt),Ste=n(Vt,"P",{});var rJr=s(Ste);PEo=r(rJr,"Examples:"),rJr.forEach(t),$Eo=i(Vt),f(vw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Mke=i(c),md=n(c,"H2",{class:!0});var RSe=s(md);Kb=n(RSe,"A",{id:!0,class:!0,href:!0});var tJr=s(Kb);Pte=n(tJr,"SPAN",{});var aJr=s(Pte);f(Tw.$$.fragment,aJr),aJr.forEach(t),tJr.forEach(t),IEo=i(RSe),$te=n(RSe,"SPAN",{});var nJr=s($te);NEo=r(nJr,"AutoModelForSequenceClassification"),nJr.forEach(t),RSe.forEach(t),Eke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);f(Fw.$$.fragment,rl),DEo=i(rl),fd=n(rl,"P",{});var nW=s(fd);jEo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ite=n(nW,"CODE",{});var sJr=s(Ite);qEo=r(sJr,"from_pretrained()"),sJr.forEach(t),GEo=r(nW,"class method or the "),Nte=n(nW,"CODE",{});var lJr=s(Nte);OEo=r(lJr,"from_config()"),lJr.forEach(t),XEo=r(nW,`class
method.`),nW.forEach(t),VEo=i(rl),Cw=n(rl,"P",{});var SSe=s(Cw);zEo=r(SSe,"This class cannot be instantiated directly using "),Dte=n(SSe,"CODE",{});var iJr=s(Dte);WEo=r(iJr,"__init__()"),iJr.forEach(t),QEo=r(SSe," (throws an error)."),SSe.forEach(t),HEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);f(Mw.$$.fragment,tl),UEo=i(tl),jte=n(tl,"P",{});var dJr=s(jte);JEo=r(dJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dJr.forEach(t),YEo=i(tl),gd=n(tl,"P",{});var sW=s(gd);KEo=r(sW,`Note:
Loading a model from its configuration file does `),qte=n(sW,"STRONG",{});var cJr=s(qte);ZEo=r(cJr,"not"),cJr.forEach(t),e3o=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gte=n(sW,"CODE",{});var mJr=s(Gte);o3o=r(mJr,"from_pretrained()"),mJr.forEach(t),r3o=r(sW,"to load the model weights."),sW.forEach(t),t3o=i(tl),Ote=n(tl,"P",{});var fJr=s(Ote);a3o=r(fJr,"Examples:"),fJr.forEach(t),n3o=i(tl),f(Ew.$$.fragment,tl),tl.forEach(t),s3o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);f(yw.$$.fragment,zt),l3o=i(zt),Xte=n(zt,"P",{});var gJr=s(Xte);i3o=r(gJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gJr.forEach(t),d3o=i(zt),Ua=n(zt,"P",{});var h5=s(Ua);c3o=r(h5,"The model class to instantiate is selected based on the "),Vte=n(h5,"CODE",{});var hJr=s(Vte);m3o=r(hJr,"model_type"),hJr.forEach(t),f3o=r(h5,` property of the config object (either
passed as an argument or loaded from `),zte=n(h5,"CODE",{});var uJr=s(zte);g3o=r(uJr,"pretrained_model_name_or_path"),uJr.forEach(t),h3o=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wte=n(h5,"CODE",{});var pJr=s(Wte);u3o=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),p3o=r(h5,":"),h5.forEach(t),_3o=i(zt),A=n(zt,"UL",{});var L=s(A);Zb=n(L,"LI",{});var $we=s(Zb);Qte=n($we,"STRONG",{});var _Jr=s(Qte);b3o=r(_Jr,"albert"),_Jr.forEach(t),v3o=r($we," \u2014 "),DI=n($we,"A",{href:!0});var bJr=s(DI);T3o=r(bJr,"AlbertForSequenceClassification"),bJr.forEach(t),F3o=r($we," (ALBERT model)"),$we.forEach(t),C3o=i(L),e2=n(L,"LI",{});var Iwe=s(e2);Hte=n(Iwe,"STRONG",{});var vJr=s(Hte);M3o=r(vJr,"bart"),vJr.forEach(t),E3o=r(Iwe," \u2014 "),jI=n(Iwe,"A",{href:!0});var TJr=s(jI);y3o=r(TJr,"BartForSequenceClassification"),TJr.forEach(t),w3o=r(Iwe," (BART model)"),Iwe.forEach(t),A3o=i(L),o2=n(L,"LI",{});var Nwe=s(o2);Ute=n(Nwe,"STRONG",{});var FJr=s(Ute);L3o=r(FJr,"bert"),FJr.forEach(t),B3o=r(Nwe," \u2014 "),qI=n(Nwe,"A",{href:!0});var CJr=s(qI);x3o=r(CJr,"BertForSequenceClassification"),CJr.forEach(t),k3o=r(Nwe," (BERT model)"),Nwe.forEach(t),R3o=i(L),r2=n(L,"LI",{});var Dwe=s(r2);Jte=n(Dwe,"STRONG",{});var MJr=s(Jte);S3o=r(MJr,"big_bird"),MJr.forEach(t),P3o=r(Dwe," \u2014 "),GI=n(Dwe,"A",{href:!0});var EJr=s(GI);$3o=r(EJr,"BigBirdForSequenceClassification"),EJr.forEach(t),I3o=r(Dwe," (BigBird model)"),Dwe.forEach(t),N3o=i(L),t2=n(L,"LI",{});var jwe=s(t2);Yte=n(jwe,"STRONG",{});var yJr=s(Yte);D3o=r(yJr,"bigbird_pegasus"),yJr.forEach(t),j3o=r(jwe," \u2014 "),OI=n(jwe,"A",{href:!0});var wJr=s(OI);q3o=r(wJr,"BigBirdPegasusForSequenceClassification"),wJr.forEach(t),G3o=r(jwe," (BigBirdPegasus model)"),jwe.forEach(t),O3o=i(L),a2=n(L,"LI",{});var qwe=s(a2);Kte=n(qwe,"STRONG",{});var AJr=s(Kte);X3o=r(AJr,"camembert"),AJr.forEach(t),V3o=r(qwe," \u2014 "),XI=n(qwe,"A",{href:!0});var LJr=s(XI);z3o=r(LJr,"CamembertForSequenceClassification"),LJr.forEach(t),W3o=r(qwe," (CamemBERT model)"),qwe.forEach(t),Q3o=i(L),n2=n(L,"LI",{});var Gwe=s(n2);Zte=n(Gwe,"STRONG",{});var BJr=s(Zte);H3o=r(BJr,"canine"),BJr.forEach(t),U3o=r(Gwe," \u2014 "),VI=n(Gwe,"A",{href:!0});var xJr=s(VI);J3o=r(xJr,"CanineForSequenceClassification"),xJr.forEach(t),Y3o=r(Gwe," (Canine model)"),Gwe.forEach(t),K3o=i(L),s2=n(L,"LI",{});var Owe=s(s2);eae=n(Owe,"STRONG",{});var kJr=s(eae);Z3o=r(kJr,"convbert"),kJr.forEach(t),e5o=r(Owe," \u2014 "),zI=n(Owe,"A",{href:!0});var RJr=s(zI);o5o=r(RJr,"ConvBertForSequenceClassification"),RJr.forEach(t),r5o=r(Owe," (ConvBERT model)"),Owe.forEach(t),t5o=i(L),l2=n(L,"LI",{});var Xwe=s(l2);oae=n(Xwe,"STRONG",{});var SJr=s(oae);a5o=r(SJr,"ctrl"),SJr.forEach(t),n5o=r(Xwe," \u2014 "),WI=n(Xwe,"A",{href:!0});var PJr=s(WI);s5o=r(PJr,"CTRLForSequenceClassification"),PJr.forEach(t),l5o=r(Xwe," (CTRL model)"),Xwe.forEach(t),i5o=i(L),i2=n(L,"LI",{});var Vwe=s(i2);rae=n(Vwe,"STRONG",{});var $Jr=s(rae);d5o=r($Jr,"data2vec-text"),$Jr.forEach(t),c5o=r(Vwe," \u2014 "),QI=n(Vwe,"A",{href:!0});var IJr=s(QI);m5o=r(IJr,"Data2VecTextForSequenceClassification"),IJr.forEach(t),f5o=r(Vwe," (Data2VecText model)"),Vwe.forEach(t),g5o=i(L),d2=n(L,"LI",{});var zwe=s(d2);tae=n(zwe,"STRONG",{});var NJr=s(tae);h5o=r(NJr,"deberta"),NJr.forEach(t),u5o=r(zwe," \u2014 "),HI=n(zwe,"A",{href:!0});var DJr=s(HI);p5o=r(DJr,"DebertaForSequenceClassification"),DJr.forEach(t),_5o=r(zwe," (DeBERTa model)"),zwe.forEach(t),b5o=i(L),c2=n(L,"LI",{});var Wwe=s(c2);aae=n(Wwe,"STRONG",{});var jJr=s(aae);v5o=r(jJr,"deberta-v2"),jJr.forEach(t),T5o=r(Wwe," \u2014 "),UI=n(Wwe,"A",{href:!0});var qJr=s(UI);F5o=r(qJr,"DebertaV2ForSequenceClassification"),qJr.forEach(t),C5o=r(Wwe," (DeBERTa-v2 model)"),Wwe.forEach(t),M5o=i(L),m2=n(L,"LI",{});var Qwe=s(m2);nae=n(Qwe,"STRONG",{});var GJr=s(nae);E5o=r(GJr,"distilbert"),GJr.forEach(t),y5o=r(Qwe," \u2014 "),JI=n(Qwe,"A",{href:!0});var OJr=s(JI);w5o=r(OJr,"DistilBertForSequenceClassification"),OJr.forEach(t),A5o=r(Qwe," (DistilBERT model)"),Qwe.forEach(t),L5o=i(L),f2=n(L,"LI",{});var Hwe=s(f2);sae=n(Hwe,"STRONG",{});var XJr=s(sae);B5o=r(XJr,"electra"),XJr.forEach(t),x5o=r(Hwe," \u2014 "),YI=n(Hwe,"A",{href:!0});var VJr=s(YI);k5o=r(VJr,"ElectraForSequenceClassification"),VJr.forEach(t),R5o=r(Hwe," (ELECTRA model)"),Hwe.forEach(t),S5o=i(L),g2=n(L,"LI",{});var Uwe=s(g2);lae=n(Uwe,"STRONG",{});var zJr=s(lae);P5o=r(zJr,"flaubert"),zJr.forEach(t),$5o=r(Uwe," \u2014 "),KI=n(Uwe,"A",{href:!0});var WJr=s(KI);I5o=r(WJr,"FlaubertForSequenceClassification"),WJr.forEach(t),N5o=r(Uwe," (FlauBERT model)"),Uwe.forEach(t),D5o=i(L),h2=n(L,"LI",{});var Jwe=s(h2);iae=n(Jwe,"STRONG",{});var QJr=s(iae);j5o=r(QJr,"fnet"),QJr.forEach(t),q5o=r(Jwe," \u2014 "),ZI=n(Jwe,"A",{href:!0});var HJr=s(ZI);G5o=r(HJr,"FNetForSequenceClassification"),HJr.forEach(t),O5o=r(Jwe," (FNet model)"),Jwe.forEach(t),X5o=i(L),u2=n(L,"LI",{});var Ywe=s(u2);dae=n(Ywe,"STRONG",{});var UJr=s(dae);V5o=r(UJr,"funnel"),UJr.forEach(t),z5o=r(Ywe," \u2014 "),eN=n(Ywe,"A",{href:!0});var JJr=s(eN);W5o=r(JJr,"FunnelForSequenceClassification"),JJr.forEach(t),Q5o=r(Ywe," (Funnel Transformer model)"),Ywe.forEach(t),H5o=i(L),p2=n(L,"LI",{});var Kwe=s(p2);cae=n(Kwe,"STRONG",{});var YJr=s(cae);U5o=r(YJr,"gpt2"),YJr.forEach(t),J5o=r(Kwe," \u2014 "),oN=n(Kwe,"A",{href:!0});var KJr=s(oN);Y5o=r(KJr,"GPT2ForSequenceClassification"),KJr.forEach(t),K5o=r(Kwe," (OpenAI GPT-2 model)"),Kwe.forEach(t),Z5o=i(L),_2=n(L,"LI",{});var Zwe=s(_2);mae=n(Zwe,"STRONG",{});var ZJr=s(mae);eyo=r(ZJr,"gpt_neo"),ZJr.forEach(t),oyo=r(Zwe," \u2014 "),rN=n(Zwe,"A",{href:!0});var eYr=s(rN);ryo=r(eYr,"GPTNeoForSequenceClassification"),eYr.forEach(t),tyo=r(Zwe," (GPT Neo model)"),Zwe.forEach(t),ayo=i(L),b2=n(L,"LI",{});var e6e=s(b2);fae=n(e6e,"STRONG",{});var oYr=s(fae);nyo=r(oYr,"gptj"),oYr.forEach(t),syo=r(e6e," \u2014 "),tN=n(e6e,"A",{href:!0});var rYr=s(tN);lyo=r(rYr,"GPTJForSequenceClassification"),rYr.forEach(t),iyo=r(e6e," (GPT-J model)"),e6e.forEach(t),dyo=i(L),v2=n(L,"LI",{});var o6e=s(v2);gae=n(o6e,"STRONG",{});var tYr=s(gae);cyo=r(tYr,"ibert"),tYr.forEach(t),myo=r(o6e," \u2014 "),aN=n(o6e,"A",{href:!0});var aYr=s(aN);fyo=r(aYr,"IBertForSequenceClassification"),aYr.forEach(t),gyo=r(o6e," (I-BERT model)"),o6e.forEach(t),hyo=i(L),T2=n(L,"LI",{});var r6e=s(T2);hae=n(r6e,"STRONG",{});var nYr=s(hae);uyo=r(nYr,"layoutlm"),nYr.forEach(t),pyo=r(r6e," \u2014 "),nN=n(r6e,"A",{href:!0});var sYr=s(nN);_yo=r(sYr,"LayoutLMForSequenceClassification"),sYr.forEach(t),byo=r(r6e," (LayoutLM model)"),r6e.forEach(t),vyo=i(L),F2=n(L,"LI",{});var t6e=s(F2);uae=n(t6e,"STRONG",{});var lYr=s(uae);Tyo=r(lYr,"layoutlmv2"),lYr.forEach(t),Fyo=r(t6e," \u2014 "),sN=n(t6e,"A",{href:!0});var iYr=s(sN);Cyo=r(iYr,"LayoutLMv2ForSequenceClassification"),iYr.forEach(t),Myo=r(t6e," (LayoutLMv2 model)"),t6e.forEach(t),Eyo=i(L),C2=n(L,"LI",{});var a6e=s(C2);pae=n(a6e,"STRONG",{});var dYr=s(pae);yyo=r(dYr,"led"),dYr.forEach(t),wyo=r(a6e," \u2014 "),lN=n(a6e,"A",{href:!0});var cYr=s(lN);Ayo=r(cYr,"LEDForSequenceClassification"),cYr.forEach(t),Lyo=r(a6e," (LED model)"),a6e.forEach(t),Byo=i(L),M2=n(L,"LI",{});var n6e=s(M2);_ae=n(n6e,"STRONG",{});var mYr=s(_ae);xyo=r(mYr,"longformer"),mYr.forEach(t),kyo=r(n6e," \u2014 "),iN=n(n6e,"A",{href:!0});var fYr=s(iN);Ryo=r(fYr,"LongformerForSequenceClassification"),fYr.forEach(t),Syo=r(n6e," (Longformer model)"),n6e.forEach(t),Pyo=i(L),E2=n(L,"LI",{});var s6e=s(E2);bae=n(s6e,"STRONG",{});var gYr=s(bae);$yo=r(gYr,"mbart"),gYr.forEach(t),Iyo=r(s6e," \u2014 "),dN=n(s6e,"A",{href:!0});var hYr=s(dN);Nyo=r(hYr,"MBartForSequenceClassification"),hYr.forEach(t),Dyo=r(s6e," (mBART model)"),s6e.forEach(t),jyo=i(L),y2=n(L,"LI",{});var l6e=s(y2);vae=n(l6e,"STRONG",{});var uYr=s(vae);qyo=r(uYr,"megatron-bert"),uYr.forEach(t),Gyo=r(l6e," \u2014 "),cN=n(l6e,"A",{href:!0});var pYr=s(cN);Oyo=r(pYr,"MegatronBertForSequenceClassification"),pYr.forEach(t),Xyo=r(l6e," (MegatronBert model)"),l6e.forEach(t),Vyo=i(L),w2=n(L,"LI",{});var i6e=s(w2);Tae=n(i6e,"STRONG",{});var _Yr=s(Tae);zyo=r(_Yr,"mobilebert"),_Yr.forEach(t),Wyo=r(i6e," \u2014 "),mN=n(i6e,"A",{href:!0});var bYr=s(mN);Qyo=r(bYr,"MobileBertForSequenceClassification"),bYr.forEach(t),Hyo=r(i6e," (MobileBERT model)"),i6e.forEach(t),Uyo=i(L),A2=n(L,"LI",{});var d6e=s(A2);Fae=n(d6e,"STRONG",{});var vYr=s(Fae);Jyo=r(vYr,"mpnet"),vYr.forEach(t),Yyo=r(d6e," \u2014 "),fN=n(d6e,"A",{href:!0});var TYr=s(fN);Kyo=r(TYr,"MPNetForSequenceClassification"),TYr.forEach(t),Zyo=r(d6e," (MPNet model)"),d6e.forEach(t),ewo=i(L),L2=n(L,"LI",{});var c6e=s(L2);Cae=n(c6e,"STRONG",{});var FYr=s(Cae);owo=r(FYr,"nystromformer"),FYr.forEach(t),rwo=r(c6e," \u2014 "),gN=n(c6e,"A",{href:!0});var CYr=s(gN);two=r(CYr,"NystromformerForSequenceClassification"),CYr.forEach(t),awo=r(c6e," (Nystromformer model)"),c6e.forEach(t),nwo=i(L),B2=n(L,"LI",{});var m6e=s(B2);Mae=n(m6e,"STRONG",{});var MYr=s(Mae);swo=r(MYr,"openai-gpt"),MYr.forEach(t),lwo=r(m6e," \u2014 "),hN=n(m6e,"A",{href:!0});var EYr=s(hN);iwo=r(EYr,"OpenAIGPTForSequenceClassification"),EYr.forEach(t),dwo=r(m6e," (OpenAI GPT model)"),m6e.forEach(t),cwo=i(L),x2=n(L,"LI",{});var f6e=s(x2);Eae=n(f6e,"STRONG",{});var yYr=s(Eae);mwo=r(yYr,"perceiver"),yYr.forEach(t),fwo=r(f6e," \u2014 "),uN=n(f6e,"A",{href:!0});var wYr=s(uN);gwo=r(wYr,"PerceiverForSequenceClassification"),wYr.forEach(t),hwo=r(f6e," (Perceiver model)"),f6e.forEach(t),uwo=i(L),k2=n(L,"LI",{});var g6e=s(k2);yae=n(g6e,"STRONG",{});var AYr=s(yae);pwo=r(AYr,"plbart"),AYr.forEach(t),_wo=r(g6e," \u2014 "),pN=n(g6e,"A",{href:!0});var LYr=s(pN);bwo=r(LYr,"PLBartForSequenceClassification"),LYr.forEach(t),vwo=r(g6e," (PLBart model)"),g6e.forEach(t),Two=i(L),R2=n(L,"LI",{});var h6e=s(R2);wae=n(h6e,"STRONG",{});var BYr=s(wae);Fwo=r(BYr,"qdqbert"),BYr.forEach(t),Cwo=r(h6e," \u2014 "),_N=n(h6e,"A",{href:!0});var xYr=s(_N);Mwo=r(xYr,"QDQBertForSequenceClassification"),xYr.forEach(t),Ewo=r(h6e," (QDQBert model)"),h6e.forEach(t),ywo=i(L),S2=n(L,"LI",{});var u6e=s(S2);Aae=n(u6e,"STRONG",{});var kYr=s(Aae);wwo=r(kYr,"reformer"),kYr.forEach(t),Awo=r(u6e," \u2014 "),bN=n(u6e,"A",{href:!0});var RYr=s(bN);Lwo=r(RYr,"ReformerForSequenceClassification"),RYr.forEach(t),Bwo=r(u6e," (Reformer model)"),u6e.forEach(t),xwo=i(L),P2=n(L,"LI",{});var p6e=s(P2);Lae=n(p6e,"STRONG",{});var SYr=s(Lae);kwo=r(SYr,"rembert"),SYr.forEach(t),Rwo=r(p6e," \u2014 "),vN=n(p6e,"A",{href:!0});var PYr=s(vN);Swo=r(PYr,"RemBertForSequenceClassification"),PYr.forEach(t),Pwo=r(p6e," (RemBERT model)"),p6e.forEach(t),$wo=i(L),$2=n(L,"LI",{});var _6e=s($2);Bae=n(_6e,"STRONG",{});var $Yr=s(Bae);Iwo=r($Yr,"roberta"),$Yr.forEach(t),Nwo=r(_6e," \u2014 "),TN=n(_6e,"A",{href:!0});var IYr=s(TN);Dwo=r(IYr,"RobertaForSequenceClassification"),IYr.forEach(t),jwo=r(_6e," (RoBERTa model)"),_6e.forEach(t),qwo=i(L),I2=n(L,"LI",{});var b6e=s(I2);xae=n(b6e,"STRONG",{});var NYr=s(xae);Gwo=r(NYr,"roformer"),NYr.forEach(t),Owo=r(b6e," \u2014 "),FN=n(b6e,"A",{href:!0});var DYr=s(FN);Xwo=r(DYr,"RoFormerForSequenceClassification"),DYr.forEach(t),Vwo=r(b6e," (RoFormer model)"),b6e.forEach(t),zwo=i(L),N2=n(L,"LI",{});var v6e=s(N2);kae=n(v6e,"STRONG",{});var jYr=s(kae);Wwo=r(jYr,"squeezebert"),jYr.forEach(t),Qwo=r(v6e," \u2014 "),CN=n(v6e,"A",{href:!0});var qYr=s(CN);Hwo=r(qYr,"SqueezeBertForSequenceClassification"),qYr.forEach(t),Uwo=r(v6e," (SqueezeBERT model)"),v6e.forEach(t),Jwo=i(L),D2=n(L,"LI",{});var T6e=s(D2);Rae=n(T6e,"STRONG",{});var GYr=s(Rae);Ywo=r(GYr,"tapas"),GYr.forEach(t),Kwo=r(T6e," \u2014 "),MN=n(T6e,"A",{href:!0});var OYr=s(MN);Zwo=r(OYr,"TapasForSequenceClassification"),OYr.forEach(t),e6o=r(T6e," (TAPAS model)"),T6e.forEach(t),o6o=i(L),j2=n(L,"LI",{});var F6e=s(j2);Sae=n(F6e,"STRONG",{});var XYr=s(Sae);r6o=r(XYr,"transfo-xl"),XYr.forEach(t),t6o=r(F6e," \u2014 "),EN=n(F6e,"A",{href:!0});var VYr=s(EN);a6o=r(VYr,"TransfoXLForSequenceClassification"),VYr.forEach(t),n6o=r(F6e," (Transformer-XL model)"),F6e.forEach(t),s6o=i(L),q2=n(L,"LI",{});var C6e=s(q2);Pae=n(C6e,"STRONG",{});var zYr=s(Pae);l6o=r(zYr,"xlm"),zYr.forEach(t),i6o=r(C6e," \u2014 "),yN=n(C6e,"A",{href:!0});var WYr=s(yN);d6o=r(WYr,"XLMForSequenceClassification"),WYr.forEach(t),c6o=r(C6e," (XLM model)"),C6e.forEach(t),m6o=i(L),G2=n(L,"LI",{});var M6e=s(G2);$ae=n(M6e,"STRONG",{});var QYr=s($ae);f6o=r(QYr,"xlm-roberta"),QYr.forEach(t),g6o=r(M6e," \u2014 "),wN=n(M6e,"A",{href:!0});var HYr=s(wN);h6o=r(HYr,"XLMRobertaForSequenceClassification"),HYr.forEach(t),u6o=r(M6e," (XLM-RoBERTa model)"),M6e.forEach(t),p6o=i(L),O2=n(L,"LI",{});var E6e=s(O2);Iae=n(E6e,"STRONG",{});var UYr=s(Iae);_6o=r(UYr,"xlm-roberta-xl"),UYr.forEach(t),b6o=r(E6e," \u2014 "),AN=n(E6e,"A",{href:!0});var JYr=s(AN);v6o=r(JYr,"XLMRobertaXLForSequenceClassification"),JYr.forEach(t),T6o=r(E6e," (XLM-RoBERTa-XL model)"),E6e.forEach(t),F6o=i(L),X2=n(L,"LI",{});var y6e=s(X2);Nae=n(y6e,"STRONG",{});var YYr=s(Nae);C6o=r(YYr,"xlnet"),YYr.forEach(t),M6o=r(y6e," \u2014 "),LN=n(y6e,"A",{href:!0});var KYr=s(LN);E6o=r(KYr,"XLNetForSequenceClassification"),KYr.forEach(t),y6o=r(y6e," (XLNet model)"),y6e.forEach(t),w6o=i(L),V2=n(L,"LI",{});var w6e=s(V2);Dae=n(w6e,"STRONG",{});var ZYr=s(Dae);A6o=r(ZYr,"yoso"),ZYr.forEach(t),L6o=r(w6e," \u2014 "),BN=n(w6e,"A",{href:!0});var eKr=s(BN);B6o=r(eKr,"YosoForSequenceClassification"),eKr.forEach(t),x6o=r(w6e," (YOSO model)"),w6e.forEach(t),L.forEach(t),k6o=i(zt),z2=n(zt,"P",{});var A6e=s(z2);R6o=r(A6e,"The model is set in evaluation mode by default using "),jae=n(A6e,"CODE",{});var oKr=s(jae);S6o=r(oKr,"model.eval()"),oKr.forEach(t),P6o=r(A6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qae=n(A6e,"CODE",{});var rKr=s(qae);$6o=r(rKr,"model.train()"),rKr.forEach(t),A6e.forEach(t),I6o=i(zt),Gae=n(zt,"P",{});var tKr=s(Gae);N6o=r(tKr,"Examples:"),tKr.forEach(t),D6o=i(zt),f(ww.$$.fragment,zt),zt.forEach(t),rl.forEach(t),yke=i(c),hd=n(c,"H2",{class:!0});var PSe=s(hd);W2=n(PSe,"A",{id:!0,class:!0,href:!0});var aKr=s(W2);Oae=n(aKr,"SPAN",{});var nKr=s(Oae);f(Aw.$$.fragment,nKr),nKr.forEach(t),aKr.forEach(t),j6o=i(PSe),Xae=n(PSe,"SPAN",{});var sKr=s(Xae);q6o=r(sKr,"AutoModelForMultipleChoice"),sKr.forEach(t),PSe.forEach(t),wke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);f(Lw.$$.fragment,al),G6o=i(al),ud=n(al,"P",{});var lW=s(ud);O6o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Vae=n(lW,"CODE",{});var lKr=s(Vae);X6o=r(lKr,"from_pretrained()"),lKr.forEach(t),V6o=r(lW,"class method or the "),zae=n(lW,"CODE",{});var iKr=s(zae);z6o=r(iKr,"from_config()"),iKr.forEach(t),W6o=r(lW,`class
method.`),lW.forEach(t),Q6o=i(al),Bw=n(al,"P",{});var $Se=s(Bw);H6o=r($Se,"This class cannot be instantiated directly using "),Wae=n($Se,"CODE",{});var dKr=s(Wae);U6o=r(dKr,"__init__()"),dKr.forEach(t),J6o=r($Se," (throws an error)."),$Se.forEach(t),Y6o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);f(xw.$$.fragment,nl),K6o=i(nl),Qae=n(nl,"P",{});var cKr=s(Qae);Z6o=r(cKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cKr.forEach(t),eAo=i(nl),pd=n(nl,"P",{});var iW=s(pd);oAo=r(iW,`Note:
Loading a model from its configuration file does `),Hae=n(iW,"STRONG",{});var mKr=s(Hae);rAo=r(mKr,"not"),mKr.forEach(t),tAo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=n(iW,"CODE",{});var fKr=s(Uae);aAo=r(fKr,"from_pretrained()"),fKr.forEach(t),nAo=r(iW,"to load the model weights."),iW.forEach(t),sAo=i(nl),Jae=n(nl,"P",{});var gKr=s(Jae);lAo=r(gKr,"Examples:"),gKr.forEach(t),iAo=i(nl),f(kw.$$.fragment,nl),nl.forEach(t),dAo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);f(Rw.$$.fragment,Wt),cAo=i(Wt),Yae=n(Wt,"P",{});var hKr=s(Yae);mAo=r(hKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hKr.forEach(t),fAo=i(Wt),Ja=n(Wt,"P",{});var u5=s(Ja);gAo=r(u5,"The model class to instantiate is selected based on the "),Kae=n(u5,"CODE",{});var uKr=s(Kae);hAo=r(uKr,"model_type"),uKr.forEach(t),uAo=r(u5,` property of the config object (either
passed as an argument or loaded from `),Zae=n(u5,"CODE",{});var pKr=s(Zae);pAo=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),_Ao=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(u5,"CODE",{});var _Kr=s(ene);bAo=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),vAo=r(u5,":"),u5.forEach(t),TAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Q2=n(O,"LI",{});var L6e=s(Q2);one=n(L6e,"STRONG",{});var bKr=s(one);FAo=r(bKr,"albert"),bKr.forEach(t),CAo=r(L6e," \u2014 "),xN=n(L6e,"A",{href:!0});var vKr=s(xN);MAo=r(vKr,"AlbertForMultipleChoice"),vKr.forEach(t),EAo=r(L6e," (ALBERT model)"),L6e.forEach(t),yAo=i(O),H2=n(O,"LI",{});var B6e=s(H2);rne=n(B6e,"STRONG",{});var TKr=s(rne);wAo=r(TKr,"bert"),TKr.forEach(t),AAo=r(B6e," \u2014 "),kN=n(B6e,"A",{href:!0});var FKr=s(kN);LAo=r(FKr,"BertForMultipleChoice"),FKr.forEach(t),BAo=r(B6e," (BERT model)"),B6e.forEach(t),xAo=i(O),U2=n(O,"LI",{});var x6e=s(U2);tne=n(x6e,"STRONG",{});var CKr=s(tne);kAo=r(CKr,"big_bird"),CKr.forEach(t),RAo=r(x6e," \u2014 "),RN=n(x6e,"A",{href:!0});var MKr=s(RN);SAo=r(MKr,"BigBirdForMultipleChoice"),MKr.forEach(t),PAo=r(x6e," (BigBird model)"),x6e.forEach(t),$Ao=i(O),J2=n(O,"LI",{});var k6e=s(J2);ane=n(k6e,"STRONG",{});var EKr=s(ane);IAo=r(EKr,"camembert"),EKr.forEach(t),NAo=r(k6e," \u2014 "),SN=n(k6e,"A",{href:!0});var yKr=s(SN);DAo=r(yKr,"CamembertForMultipleChoice"),yKr.forEach(t),jAo=r(k6e," (CamemBERT model)"),k6e.forEach(t),qAo=i(O),Y2=n(O,"LI",{});var R6e=s(Y2);nne=n(R6e,"STRONG",{});var wKr=s(nne);GAo=r(wKr,"canine"),wKr.forEach(t),OAo=r(R6e," \u2014 "),PN=n(R6e,"A",{href:!0});var AKr=s(PN);XAo=r(AKr,"CanineForMultipleChoice"),AKr.forEach(t),VAo=r(R6e," (Canine model)"),R6e.forEach(t),zAo=i(O),K2=n(O,"LI",{});var S6e=s(K2);sne=n(S6e,"STRONG",{});var LKr=s(sne);WAo=r(LKr,"convbert"),LKr.forEach(t),QAo=r(S6e," \u2014 "),$N=n(S6e,"A",{href:!0});var BKr=s($N);HAo=r(BKr,"ConvBertForMultipleChoice"),BKr.forEach(t),UAo=r(S6e," (ConvBERT model)"),S6e.forEach(t),JAo=i(O),Z2=n(O,"LI",{});var P6e=s(Z2);lne=n(P6e,"STRONG",{});var xKr=s(lne);YAo=r(xKr,"data2vec-text"),xKr.forEach(t),KAo=r(P6e," \u2014 "),IN=n(P6e,"A",{href:!0});var kKr=s(IN);ZAo=r(kKr,"Data2VecTextForMultipleChoice"),kKr.forEach(t),e0o=r(P6e," (Data2VecText model)"),P6e.forEach(t),o0o=i(O),ev=n(O,"LI",{});var $6e=s(ev);ine=n($6e,"STRONG",{});var RKr=s(ine);r0o=r(RKr,"distilbert"),RKr.forEach(t),t0o=r($6e," \u2014 "),NN=n($6e,"A",{href:!0});var SKr=s(NN);a0o=r(SKr,"DistilBertForMultipleChoice"),SKr.forEach(t),n0o=r($6e," (DistilBERT model)"),$6e.forEach(t),s0o=i(O),ov=n(O,"LI",{});var I6e=s(ov);dne=n(I6e,"STRONG",{});var PKr=s(dne);l0o=r(PKr,"electra"),PKr.forEach(t),i0o=r(I6e," \u2014 "),DN=n(I6e,"A",{href:!0});var $Kr=s(DN);d0o=r($Kr,"ElectraForMultipleChoice"),$Kr.forEach(t),c0o=r(I6e," (ELECTRA model)"),I6e.forEach(t),m0o=i(O),rv=n(O,"LI",{});var N6e=s(rv);cne=n(N6e,"STRONG",{});var IKr=s(cne);f0o=r(IKr,"flaubert"),IKr.forEach(t),g0o=r(N6e," \u2014 "),jN=n(N6e,"A",{href:!0});var NKr=s(jN);h0o=r(NKr,"FlaubertForMultipleChoice"),NKr.forEach(t),u0o=r(N6e," (FlauBERT model)"),N6e.forEach(t),p0o=i(O),tv=n(O,"LI",{});var D6e=s(tv);mne=n(D6e,"STRONG",{});var DKr=s(mne);_0o=r(DKr,"fnet"),DKr.forEach(t),b0o=r(D6e," \u2014 "),qN=n(D6e,"A",{href:!0});var jKr=s(qN);v0o=r(jKr,"FNetForMultipleChoice"),jKr.forEach(t),T0o=r(D6e," (FNet model)"),D6e.forEach(t),F0o=i(O),av=n(O,"LI",{});var j6e=s(av);fne=n(j6e,"STRONG",{});var qKr=s(fne);C0o=r(qKr,"funnel"),qKr.forEach(t),M0o=r(j6e," \u2014 "),GN=n(j6e,"A",{href:!0});var GKr=s(GN);E0o=r(GKr,"FunnelForMultipleChoice"),GKr.forEach(t),y0o=r(j6e," (Funnel Transformer model)"),j6e.forEach(t),w0o=i(O),nv=n(O,"LI",{});var q6e=s(nv);gne=n(q6e,"STRONG",{});var OKr=s(gne);A0o=r(OKr,"ibert"),OKr.forEach(t),L0o=r(q6e," \u2014 "),ON=n(q6e,"A",{href:!0});var XKr=s(ON);B0o=r(XKr,"IBertForMultipleChoice"),XKr.forEach(t),x0o=r(q6e," (I-BERT model)"),q6e.forEach(t),k0o=i(O),sv=n(O,"LI",{});var G6e=s(sv);hne=n(G6e,"STRONG",{});var VKr=s(hne);R0o=r(VKr,"longformer"),VKr.forEach(t),S0o=r(G6e," \u2014 "),XN=n(G6e,"A",{href:!0});var zKr=s(XN);P0o=r(zKr,"LongformerForMultipleChoice"),zKr.forEach(t),$0o=r(G6e," (Longformer model)"),G6e.forEach(t),I0o=i(O),lv=n(O,"LI",{});var O6e=s(lv);une=n(O6e,"STRONG",{});var WKr=s(une);N0o=r(WKr,"megatron-bert"),WKr.forEach(t),D0o=r(O6e," \u2014 "),VN=n(O6e,"A",{href:!0});var QKr=s(VN);j0o=r(QKr,"MegatronBertForMultipleChoice"),QKr.forEach(t),q0o=r(O6e," (MegatronBert model)"),O6e.forEach(t),G0o=i(O),iv=n(O,"LI",{});var X6e=s(iv);pne=n(X6e,"STRONG",{});var HKr=s(pne);O0o=r(HKr,"mobilebert"),HKr.forEach(t),X0o=r(X6e," \u2014 "),zN=n(X6e,"A",{href:!0});var UKr=s(zN);V0o=r(UKr,"MobileBertForMultipleChoice"),UKr.forEach(t),z0o=r(X6e," (MobileBERT model)"),X6e.forEach(t),W0o=i(O),dv=n(O,"LI",{});var V6e=s(dv);_ne=n(V6e,"STRONG",{});var JKr=s(_ne);Q0o=r(JKr,"mpnet"),JKr.forEach(t),H0o=r(V6e," \u2014 "),WN=n(V6e,"A",{href:!0});var YKr=s(WN);U0o=r(YKr,"MPNetForMultipleChoice"),YKr.forEach(t),J0o=r(V6e," (MPNet model)"),V6e.forEach(t),Y0o=i(O),cv=n(O,"LI",{});var z6e=s(cv);bne=n(z6e,"STRONG",{});var KKr=s(bne);K0o=r(KKr,"nystromformer"),KKr.forEach(t),Z0o=r(z6e," \u2014 "),QN=n(z6e,"A",{href:!0});var ZKr=s(QN);eLo=r(ZKr,"NystromformerForMultipleChoice"),ZKr.forEach(t),oLo=r(z6e," (Nystromformer model)"),z6e.forEach(t),rLo=i(O),mv=n(O,"LI",{});var W6e=s(mv);vne=n(W6e,"STRONG",{});var eZr=s(vne);tLo=r(eZr,"qdqbert"),eZr.forEach(t),aLo=r(W6e," \u2014 "),HN=n(W6e,"A",{href:!0});var oZr=s(HN);nLo=r(oZr,"QDQBertForMultipleChoice"),oZr.forEach(t),sLo=r(W6e," (QDQBert model)"),W6e.forEach(t),lLo=i(O),fv=n(O,"LI",{});var Q6e=s(fv);Tne=n(Q6e,"STRONG",{});var rZr=s(Tne);iLo=r(rZr,"rembert"),rZr.forEach(t),dLo=r(Q6e," \u2014 "),UN=n(Q6e,"A",{href:!0});var tZr=s(UN);cLo=r(tZr,"RemBertForMultipleChoice"),tZr.forEach(t),mLo=r(Q6e," (RemBERT model)"),Q6e.forEach(t),fLo=i(O),gv=n(O,"LI",{});var H6e=s(gv);Fne=n(H6e,"STRONG",{});var aZr=s(Fne);gLo=r(aZr,"roberta"),aZr.forEach(t),hLo=r(H6e," \u2014 "),JN=n(H6e,"A",{href:!0});var nZr=s(JN);uLo=r(nZr,"RobertaForMultipleChoice"),nZr.forEach(t),pLo=r(H6e," (RoBERTa model)"),H6e.forEach(t),_Lo=i(O),hv=n(O,"LI",{});var U6e=s(hv);Cne=n(U6e,"STRONG",{});var sZr=s(Cne);bLo=r(sZr,"roformer"),sZr.forEach(t),vLo=r(U6e," \u2014 "),YN=n(U6e,"A",{href:!0});var lZr=s(YN);TLo=r(lZr,"RoFormerForMultipleChoice"),lZr.forEach(t),FLo=r(U6e," (RoFormer model)"),U6e.forEach(t),CLo=i(O),uv=n(O,"LI",{});var J6e=s(uv);Mne=n(J6e,"STRONG",{});var iZr=s(Mne);MLo=r(iZr,"squeezebert"),iZr.forEach(t),ELo=r(J6e," \u2014 "),KN=n(J6e,"A",{href:!0});var dZr=s(KN);yLo=r(dZr,"SqueezeBertForMultipleChoice"),dZr.forEach(t),wLo=r(J6e," (SqueezeBERT model)"),J6e.forEach(t),ALo=i(O),pv=n(O,"LI",{});var Y6e=s(pv);Ene=n(Y6e,"STRONG",{});var cZr=s(Ene);LLo=r(cZr,"xlm"),cZr.forEach(t),BLo=r(Y6e," \u2014 "),ZN=n(Y6e,"A",{href:!0});var mZr=s(ZN);xLo=r(mZr,"XLMForMultipleChoice"),mZr.forEach(t),kLo=r(Y6e," (XLM model)"),Y6e.forEach(t),RLo=i(O),_v=n(O,"LI",{});var K6e=s(_v);yne=n(K6e,"STRONG",{});var fZr=s(yne);SLo=r(fZr,"xlm-roberta"),fZr.forEach(t),PLo=r(K6e," \u2014 "),eD=n(K6e,"A",{href:!0});var gZr=s(eD);$Lo=r(gZr,"XLMRobertaForMultipleChoice"),gZr.forEach(t),ILo=r(K6e," (XLM-RoBERTa model)"),K6e.forEach(t),NLo=i(O),bv=n(O,"LI",{});var Z6e=s(bv);wne=n(Z6e,"STRONG",{});var hZr=s(wne);DLo=r(hZr,"xlm-roberta-xl"),hZr.forEach(t),jLo=r(Z6e," \u2014 "),oD=n(Z6e,"A",{href:!0});var uZr=s(oD);qLo=r(uZr,"XLMRobertaXLForMultipleChoice"),uZr.forEach(t),GLo=r(Z6e," (XLM-RoBERTa-XL model)"),Z6e.forEach(t),OLo=i(O),vv=n(O,"LI",{});var eAe=s(vv);Ane=n(eAe,"STRONG",{});var pZr=s(Ane);XLo=r(pZr,"xlnet"),pZr.forEach(t),VLo=r(eAe," \u2014 "),rD=n(eAe,"A",{href:!0});var _Zr=s(rD);zLo=r(_Zr,"XLNetForMultipleChoice"),_Zr.forEach(t),WLo=r(eAe," (XLNet model)"),eAe.forEach(t),QLo=i(O),Tv=n(O,"LI",{});var oAe=s(Tv);Lne=n(oAe,"STRONG",{});var bZr=s(Lne);HLo=r(bZr,"yoso"),bZr.forEach(t),ULo=r(oAe," \u2014 "),tD=n(oAe,"A",{href:!0});var vZr=s(tD);JLo=r(vZr,"YosoForMultipleChoice"),vZr.forEach(t),YLo=r(oAe," (YOSO model)"),oAe.forEach(t),O.forEach(t),KLo=i(Wt),Fv=n(Wt,"P",{});var rAe=s(Fv);ZLo=r(rAe,"The model is set in evaluation mode by default using "),Bne=n(rAe,"CODE",{});var TZr=s(Bne);e7o=r(TZr,"model.eval()"),TZr.forEach(t),o7o=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=n(rAe,"CODE",{});var FZr=s(xne);r7o=r(FZr,"model.train()"),FZr.forEach(t),rAe.forEach(t),t7o=i(Wt),kne=n(Wt,"P",{});var CZr=s(kne);a7o=r(CZr,"Examples:"),CZr.forEach(t),n7o=i(Wt),f(Sw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Ake=i(c),_d=n(c,"H2",{class:!0});var ISe=s(_d);Cv=n(ISe,"A",{id:!0,class:!0,href:!0});var MZr=s(Cv);Rne=n(MZr,"SPAN",{});var EZr=s(Rne);f(Pw.$$.fragment,EZr),EZr.forEach(t),MZr.forEach(t),s7o=i(ISe),Sne=n(ISe,"SPAN",{});var yZr=s(Sne);l7o=r(yZr,"AutoModelForNextSentencePrediction"),yZr.forEach(t),ISe.forEach(t),Lke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);f($w.$$.fragment,sl),i7o=i(sl),bd=n(sl,"P",{});var dW=s(bd);d7o=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Pne=n(dW,"CODE",{});var wZr=s(Pne);c7o=r(wZr,"from_pretrained()"),wZr.forEach(t),m7o=r(dW,"class method or the "),$ne=n(dW,"CODE",{});var AZr=s($ne);f7o=r(AZr,"from_config()"),AZr.forEach(t),g7o=r(dW,`class
method.`),dW.forEach(t),h7o=i(sl),Iw=n(sl,"P",{});var NSe=s(Iw);u7o=r(NSe,"This class cannot be instantiated directly using "),Ine=n(NSe,"CODE",{});var LZr=s(Ine);p7o=r(LZr,"__init__()"),LZr.forEach(t),_7o=r(NSe," (throws an error)."),NSe.forEach(t),b7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);f(Nw.$$.fragment,ll),v7o=i(ll),Nne=n(ll,"P",{});var BZr=s(Nne);T7o=r(BZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BZr.forEach(t),F7o=i(ll),vd=n(ll,"P",{});var cW=s(vd);C7o=r(cW,`Note:
Loading a model from its configuration file does `),Dne=n(cW,"STRONG",{});var xZr=s(Dne);M7o=r(xZr,"not"),xZr.forEach(t),E7o=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),jne=n(cW,"CODE",{});var kZr=s(jne);y7o=r(kZr,"from_pretrained()"),kZr.forEach(t),w7o=r(cW,"to load the model weights."),cW.forEach(t),A7o=i(ll),qne=n(ll,"P",{});var RZr=s(qne);L7o=r(RZr,"Examples:"),RZr.forEach(t),B7o=i(ll),f(Dw.$$.fragment,ll),ll.forEach(t),x7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);f(jw.$$.fragment,Qt),k7o=i(Qt),Gne=n(Qt,"P",{});var SZr=s(Gne);R7o=r(SZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SZr.forEach(t),S7o=i(Qt),Ya=n(Qt,"P",{});var p5=s(Ya);P7o=r(p5,"The model class to instantiate is selected based on the "),One=n(p5,"CODE",{});var PZr=s(One);$7o=r(PZr,"model_type"),PZr.forEach(t),I7o=r(p5,` property of the config object (either
passed as an argument or loaded from `),Xne=n(p5,"CODE",{});var $Zr=s(Xne);N7o=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),D7o=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=n(p5,"CODE",{});var IZr=s(Vne);j7o=r(IZr,"pretrained_model_name_or_path"),IZr.forEach(t),q7o=r(p5,":"),p5.forEach(t),G7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Mv=n(il,"LI",{});var tAe=s(Mv);zne=n(tAe,"STRONG",{});var NZr=s(zne);O7o=r(NZr,"bert"),NZr.forEach(t),X7o=r(tAe," \u2014 "),aD=n(tAe,"A",{href:!0});var DZr=s(aD);V7o=r(DZr,"BertForNextSentencePrediction"),DZr.forEach(t),z7o=r(tAe," (BERT model)"),tAe.forEach(t),W7o=i(il),Ev=n(il,"LI",{});var aAe=s(Ev);Wne=n(aAe,"STRONG",{});var jZr=s(Wne);Q7o=r(jZr,"fnet"),jZr.forEach(t),H7o=r(aAe," \u2014 "),nD=n(aAe,"A",{href:!0});var qZr=s(nD);U7o=r(qZr,"FNetForNextSentencePrediction"),qZr.forEach(t),J7o=r(aAe," (FNet model)"),aAe.forEach(t),Y7o=i(il),yv=n(il,"LI",{});var nAe=s(yv);Qne=n(nAe,"STRONG",{});var GZr=s(Qne);K7o=r(GZr,"megatron-bert"),GZr.forEach(t),Z7o=r(nAe," \u2014 "),sD=n(nAe,"A",{href:!0});var OZr=s(sD);e8o=r(OZr,"MegatronBertForNextSentencePrediction"),OZr.forEach(t),o8o=r(nAe," (MegatronBert model)"),nAe.forEach(t),r8o=i(il),wv=n(il,"LI",{});var sAe=s(wv);Hne=n(sAe,"STRONG",{});var XZr=s(Hne);t8o=r(XZr,"mobilebert"),XZr.forEach(t),a8o=r(sAe," \u2014 "),lD=n(sAe,"A",{href:!0});var VZr=s(lD);n8o=r(VZr,"MobileBertForNextSentencePrediction"),VZr.forEach(t),s8o=r(sAe," (MobileBERT model)"),sAe.forEach(t),l8o=i(il),Av=n(il,"LI",{});var lAe=s(Av);Une=n(lAe,"STRONG",{});var zZr=s(Une);i8o=r(zZr,"qdqbert"),zZr.forEach(t),d8o=r(lAe," \u2014 "),iD=n(lAe,"A",{href:!0});var WZr=s(iD);c8o=r(WZr,"QDQBertForNextSentencePrediction"),WZr.forEach(t),m8o=r(lAe," (QDQBert model)"),lAe.forEach(t),il.forEach(t),f8o=i(Qt),Lv=n(Qt,"P",{});var iAe=s(Lv);g8o=r(iAe,"The model is set in evaluation mode by default using "),Jne=n(iAe,"CODE",{});var QZr=s(Jne);h8o=r(QZr,"model.eval()"),QZr.forEach(t),u8o=r(iAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=n(iAe,"CODE",{});var HZr=s(Yne);p8o=r(HZr,"model.train()"),HZr.forEach(t),iAe.forEach(t),_8o=i(Qt),Kne=n(Qt,"P",{});var UZr=s(Kne);b8o=r(UZr,"Examples:"),UZr.forEach(t),v8o=i(Qt),f(qw.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Bke=i(c),Td=n(c,"H2",{class:!0});var DSe=s(Td);Bv=n(DSe,"A",{id:!0,class:!0,href:!0});var JZr=s(Bv);Zne=n(JZr,"SPAN",{});var YZr=s(Zne);f(Gw.$$.fragment,YZr),YZr.forEach(t),JZr.forEach(t),T8o=i(DSe),ese=n(DSe,"SPAN",{});var KZr=s(ese);F8o=r(KZr,"AutoModelForTokenClassification"),KZr.forEach(t),DSe.forEach(t),xke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);f(Ow.$$.fragment,dl),C8o=i(dl),Fd=n(dl,"P",{});var mW=s(Fd);M8o=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ose=n(mW,"CODE",{});var ZZr=s(ose);E8o=r(ZZr,"from_pretrained()"),ZZr.forEach(t),y8o=r(mW,"class method or the "),rse=n(mW,"CODE",{});var eet=s(rse);w8o=r(eet,"from_config()"),eet.forEach(t),A8o=r(mW,`class
method.`),mW.forEach(t),L8o=i(dl),Xw=n(dl,"P",{});var jSe=s(Xw);B8o=r(jSe,"This class cannot be instantiated directly using "),tse=n(jSe,"CODE",{});var oet=s(tse);x8o=r(oet,"__init__()"),oet.forEach(t),k8o=r(jSe," (throws an error)."),jSe.forEach(t),R8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);f(Vw.$$.fragment,cl),S8o=i(cl),ase=n(cl,"P",{});var ret=s(ase);P8o=r(ret,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ret.forEach(t),$8o=i(cl),Cd=n(cl,"P",{});var fW=s(Cd);I8o=r(fW,`Note:
Loading a model from its configuration file does `),nse=n(fW,"STRONG",{});var tet=s(nse);N8o=r(tet,"not"),tet.forEach(t),D8o=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=n(fW,"CODE",{});var aet=s(sse);j8o=r(aet,"from_pretrained()"),aet.forEach(t),q8o=r(fW,"to load the model weights."),fW.forEach(t),G8o=i(cl),lse=n(cl,"P",{});var net=s(lse);O8o=r(net,"Examples:"),net.forEach(t),X8o=i(cl),f(zw.$$.fragment,cl),cl.forEach(t),V8o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);f(Ww.$$.fragment,Ht),z8o=i(Ht),ise=n(Ht,"P",{});var set=s(ise);W8o=r(set,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),set.forEach(t),Q8o=i(Ht),Ka=n(Ht,"P",{});var _5=s(Ka);H8o=r(_5,"The model class to instantiate is selected based on the "),dse=n(_5,"CODE",{});var iet=s(dse);U8o=r(iet,"model_type"),iet.forEach(t),J8o=r(_5,` property of the config object (either
passed as an argument or loaded from `),cse=n(_5,"CODE",{});var det=s(cse);Y8o=r(det,"pretrained_model_name_or_path"),det.forEach(t),K8o=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mse=n(_5,"CODE",{});var cet=s(mse);Z8o=r(cet,"pretrained_model_name_or_path"),cet.forEach(t),e9o=r(_5,":"),_5.forEach(t),o9o=i(Ht),j=n(Ht,"UL",{});var q=s(j);xv=n(q,"LI",{});var dAe=s(xv);fse=n(dAe,"STRONG",{});var met=s(fse);r9o=r(met,"albert"),met.forEach(t),t9o=r(dAe," \u2014 "),dD=n(dAe,"A",{href:!0});var fet=s(dD);a9o=r(fet,"AlbertForTokenClassification"),fet.forEach(t),n9o=r(dAe," (ALBERT model)"),dAe.forEach(t),s9o=i(q),kv=n(q,"LI",{});var cAe=s(kv);gse=n(cAe,"STRONG",{});var get=s(gse);l9o=r(get,"bert"),get.forEach(t),i9o=r(cAe," \u2014 "),cD=n(cAe,"A",{href:!0});var het=s(cD);d9o=r(het,"BertForTokenClassification"),het.forEach(t),c9o=r(cAe," (BERT model)"),cAe.forEach(t),m9o=i(q),Rv=n(q,"LI",{});var mAe=s(Rv);hse=n(mAe,"STRONG",{});var uet=s(hse);f9o=r(uet,"big_bird"),uet.forEach(t),g9o=r(mAe," \u2014 "),mD=n(mAe,"A",{href:!0});var pet=s(mD);h9o=r(pet,"BigBirdForTokenClassification"),pet.forEach(t),u9o=r(mAe," (BigBird model)"),mAe.forEach(t),p9o=i(q),Sv=n(q,"LI",{});var fAe=s(Sv);use=n(fAe,"STRONG",{});var _et=s(use);_9o=r(_et,"camembert"),_et.forEach(t),b9o=r(fAe," \u2014 "),fD=n(fAe,"A",{href:!0});var bet=s(fD);v9o=r(bet,"CamembertForTokenClassification"),bet.forEach(t),T9o=r(fAe," (CamemBERT model)"),fAe.forEach(t),F9o=i(q),Pv=n(q,"LI",{});var gAe=s(Pv);pse=n(gAe,"STRONG",{});var vet=s(pse);C9o=r(vet,"canine"),vet.forEach(t),M9o=r(gAe," \u2014 "),gD=n(gAe,"A",{href:!0});var Tet=s(gD);E9o=r(Tet,"CanineForTokenClassification"),Tet.forEach(t),y9o=r(gAe," (Canine model)"),gAe.forEach(t),w9o=i(q),$v=n(q,"LI",{});var hAe=s($v);_se=n(hAe,"STRONG",{});var Fet=s(_se);A9o=r(Fet,"convbert"),Fet.forEach(t),L9o=r(hAe," \u2014 "),hD=n(hAe,"A",{href:!0});var Cet=s(hD);B9o=r(Cet,"ConvBertForTokenClassification"),Cet.forEach(t),x9o=r(hAe," (ConvBERT model)"),hAe.forEach(t),k9o=i(q),Iv=n(q,"LI",{});var uAe=s(Iv);bse=n(uAe,"STRONG",{});var Met=s(bse);R9o=r(Met,"data2vec-text"),Met.forEach(t),S9o=r(uAe," \u2014 "),uD=n(uAe,"A",{href:!0});var Eet=s(uD);P9o=r(Eet,"Data2VecTextForTokenClassification"),Eet.forEach(t),$9o=r(uAe," (Data2VecText model)"),uAe.forEach(t),I9o=i(q),Nv=n(q,"LI",{});var pAe=s(Nv);vse=n(pAe,"STRONG",{});var yet=s(vse);N9o=r(yet,"deberta"),yet.forEach(t),D9o=r(pAe," \u2014 "),pD=n(pAe,"A",{href:!0});var wet=s(pD);j9o=r(wet,"DebertaForTokenClassification"),wet.forEach(t),q9o=r(pAe," (DeBERTa model)"),pAe.forEach(t),G9o=i(q),Dv=n(q,"LI",{});var _Ae=s(Dv);Tse=n(_Ae,"STRONG",{});var Aet=s(Tse);O9o=r(Aet,"deberta-v2"),Aet.forEach(t),X9o=r(_Ae," \u2014 "),_D=n(_Ae,"A",{href:!0});var Let=s(_D);V9o=r(Let,"DebertaV2ForTokenClassification"),Let.forEach(t),z9o=r(_Ae," (DeBERTa-v2 model)"),_Ae.forEach(t),W9o=i(q),jv=n(q,"LI",{});var bAe=s(jv);Fse=n(bAe,"STRONG",{});var Bet=s(Fse);Q9o=r(Bet,"distilbert"),Bet.forEach(t),H9o=r(bAe," \u2014 "),bD=n(bAe,"A",{href:!0});var xet=s(bD);U9o=r(xet,"DistilBertForTokenClassification"),xet.forEach(t),J9o=r(bAe," (DistilBERT model)"),bAe.forEach(t),Y9o=i(q),qv=n(q,"LI",{});var vAe=s(qv);Cse=n(vAe,"STRONG",{});var ket=s(Cse);K9o=r(ket,"electra"),ket.forEach(t),Z9o=r(vAe," \u2014 "),vD=n(vAe,"A",{href:!0});var Ret=s(vD);eBo=r(Ret,"ElectraForTokenClassification"),Ret.forEach(t),oBo=r(vAe," (ELECTRA model)"),vAe.forEach(t),rBo=i(q),Gv=n(q,"LI",{});var TAe=s(Gv);Mse=n(TAe,"STRONG",{});var Set=s(Mse);tBo=r(Set,"flaubert"),Set.forEach(t),aBo=r(TAe," \u2014 "),TD=n(TAe,"A",{href:!0});var Pet=s(TD);nBo=r(Pet,"FlaubertForTokenClassification"),Pet.forEach(t),sBo=r(TAe," (FlauBERT model)"),TAe.forEach(t),lBo=i(q),Ov=n(q,"LI",{});var FAe=s(Ov);Ese=n(FAe,"STRONG",{});var $et=s(Ese);iBo=r($et,"fnet"),$et.forEach(t),dBo=r(FAe," \u2014 "),FD=n(FAe,"A",{href:!0});var Iet=s(FD);cBo=r(Iet,"FNetForTokenClassification"),Iet.forEach(t),mBo=r(FAe," (FNet model)"),FAe.forEach(t),fBo=i(q),Xv=n(q,"LI",{});var CAe=s(Xv);yse=n(CAe,"STRONG",{});var Net=s(yse);gBo=r(Net,"funnel"),Net.forEach(t),hBo=r(CAe," \u2014 "),CD=n(CAe,"A",{href:!0});var Det=s(CD);uBo=r(Det,"FunnelForTokenClassification"),Det.forEach(t),pBo=r(CAe," (Funnel Transformer model)"),CAe.forEach(t),_Bo=i(q),Vv=n(q,"LI",{});var MAe=s(Vv);wse=n(MAe,"STRONG",{});var jet=s(wse);bBo=r(jet,"gpt2"),jet.forEach(t),vBo=r(MAe," \u2014 "),MD=n(MAe,"A",{href:!0});var qet=s(MD);TBo=r(qet,"GPT2ForTokenClassification"),qet.forEach(t),FBo=r(MAe," (OpenAI GPT-2 model)"),MAe.forEach(t),CBo=i(q),zv=n(q,"LI",{});var EAe=s(zv);Ase=n(EAe,"STRONG",{});var Get=s(Ase);MBo=r(Get,"ibert"),Get.forEach(t),EBo=r(EAe," \u2014 "),ED=n(EAe,"A",{href:!0});var Oet=s(ED);yBo=r(Oet,"IBertForTokenClassification"),Oet.forEach(t),wBo=r(EAe," (I-BERT model)"),EAe.forEach(t),ABo=i(q),Wv=n(q,"LI",{});var yAe=s(Wv);Lse=n(yAe,"STRONG",{});var Xet=s(Lse);LBo=r(Xet,"layoutlm"),Xet.forEach(t),BBo=r(yAe," \u2014 "),yD=n(yAe,"A",{href:!0});var Vet=s(yD);xBo=r(Vet,"LayoutLMForTokenClassification"),Vet.forEach(t),kBo=r(yAe," (LayoutLM model)"),yAe.forEach(t),RBo=i(q),Qv=n(q,"LI",{});var wAe=s(Qv);Bse=n(wAe,"STRONG",{});var zet=s(Bse);SBo=r(zet,"layoutlmv2"),zet.forEach(t),PBo=r(wAe," \u2014 "),wD=n(wAe,"A",{href:!0});var Wet=s(wD);$Bo=r(Wet,"LayoutLMv2ForTokenClassification"),Wet.forEach(t),IBo=r(wAe," (LayoutLMv2 model)"),wAe.forEach(t),NBo=i(q),Hv=n(q,"LI",{});var AAe=s(Hv);xse=n(AAe,"STRONG",{});var Qet=s(xse);DBo=r(Qet,"longformer"),Qet.forEach(t),jBo=r(AAe," \u2014 "),AD=n(AAe,"A",{href:!0});var Het=s(AD);qBo=r(Het,"LongformerForTokenClassification"),Het.forEach(t),GBo=r(AAe," (Longformer model)"),AAe.forEach(t),OBo=i(q),Uv=n(q,"LI",{});var LAe=s(Uv);kse=n(LAe,"STRONG",{});var Uet=s(kse);XBo=r(Uet,"megatron-bert"),Uet.forEach(t),VBo=r(LAe," \u2014 "),LD=n(LAe,"A",{href:!0});var Jet=s(LD);zBo=r(Jet,"MegatronBertForTokenClassification"),Jet.forEach(t),WBo=r(LAe," (MegatronBert model)"),LAe.forEach(t),QBo=i(q),Jv=n(q,"LI",{});var BAe=s(Jv);Rse=n(BAe,"STRONG",{});var Yet=s(Rse);HBo=r(Yet,"mobilebert"),Yet.forEach(t),UBo=r(BAe," \u2014 "),BD=n(BAe,"A",{href:!0});var Ket=s(BD);JBo=r(Ket,"MobileBertForTokenClassification"),Ket.forEach(t),YBo=r(BAe," (MobileBERT model)"),BAe.forEach(t),KBo=i(q),Yv=n(q,"LI",{});var xAe=s(Yv);Sse=n(xAe,"STRONG",{});var Zet=s(Sse);ZBo=r(Zet,"mpnet"),Zet.forEach(t),exo=r(xAe," \u2014 "),xD=n(xAe,"A",{href:!0});var eot=s(xD);oxo=r(eot,"MPNetForTokenClassification"),eot.forEach(t),rxo=r(xAe," (MPNet model)"),xAe.forEach(t),txo=i(q),Kv=n(q,"LI",{});var kAe=s(Kv);Pse=n(kAe,"STRONG",{});var oot=s(Pse);axo=r(oot,"nystromformer"),oot.forEach(t),nxo=r(kAe," \u2014 "),kD=n(kAe,"A",{href:!0});var rot=s(kD);sxo=r(rot,"NystromformerForTokenClassification"),rot.forEach(t),lxo=r(kAe," (Nystromformer model)"),kAe.forEach(t),ixo=i(q),Zv=n(q,"LI",{});var RAe=s(Zv);$se=n(RAe,"STRONG",{});var tot=s($se);dxo=r(tot,"qdqbert"),tot.forEach(t),cxo=r(RAe," \u2014 "),RD=n(RAe,"A",{href:!0});var aot=s(RD);mxo=r(aot,"QDQBertForTokenClassification"),aot.forEach(t),fxo=r(RAe," (QDQBert model)"),RAe.forEach(t),gxo=i(q),eT=n(q,"LI",{});var SAe=s(eT);Ise=n(SAe,"STRONG",{});var not=s(Ise);hxo=r(not,"rembert"),not.forEach(t),uxo=r(SAe," \u2014 "),SD=n(SAe,"A",{href:!0});var sot=s(SD);pxo=r(sot,"RemBertForTokenClassification"),sot.forEach(t),_xo=r(SAe," (RemBERT model)"),SAe.forEach(t),bxo=i(q),oT=n(q,"LI",{});var PAe=s(oT);Nse=n(PAe,"STRONG",{});var lot=s(Nse);vxo=r(lot,"roberta"),lot.forEach(t),Txo=r(PAe," \u2014 "),PD=n(PAe,"A",{href:!0});var iot=s(PD);Fxo=r(iot,"RobertaForTokenClassification"),iot.forEach(t),Cxo=r(PAe," (RoBERTa model)"),PAe.forEach(t),Mxo=i(q),rT=n(q,"LI",{});var $Ae=s(rT);Dse=n($Ae,"STRONG",{});var dot=s(Dse);Exo=r(dot,"roformer"),dot.forEach(t),yxo=r($Ae," \u2014 "),$D=n($Ae,"A",{href:!0});var cot=s($D);wxo=r(cot,"RoFormerForTokenClassification"),cot.forEach(t),Axo=r($Ae," (RoFormer model)"),$Ae.forEach(t),Lxo=i(q),tT=n(q,"LI",{});var IAe=s(tT);jse=n(IAe,"STRONG",{});var mot=s(jse);Bxo=r(mot,"squeezebert"),mot.forEach(t),xxo=r(IAe," \u2014 "),ID=n(IAe,"A",{href:!0});var fot=s(ID);kxo=r(fot,"SqueezeBertForTokenClassification"),fot.forEach(t),Rxo=r(IAe," (SqueezeBERT model)"),IAe.forEach(t),Sxo=i(q),aT=n(q,"LI",{});var NAe=s(aT);qse=n(NAe,"STRONG",{});var got=s(qse);Pxo=r(got,"xlm"),got.forEach(t),$xo=r(NAe," \u2014 "),ND=n(NAe,"A",{href:!0});var hot=s(ND);Ixo=r(hot,"XLMForTokenClassification"),hot.forEach(t),Nxo=r(NAe," (XLM model)"),NAe.forEach(t),Dxo=i(q),nT=n(q,"LI",{});var DAe=s(nT);Gse=n(DAe,"STRONG",{});var uot=s(Gse);jxo=r(uot,"xlm-roberta"),uot.forEach(t),qxo=r(DAe," \u2014 "),DD=n(DAe,"A",{href:!0});var pot=s(DD);Gxo=r(pot,"XLMRobertaForTokenClassification"),pot.forEach(t),Oxo=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),Xxo=i(q),sT=n(q,"LI",{});var jAe=s(sT);Ose=n(jAe,"STRONG",{});var _ot=s(Ose);Vxo=r(_ot,"xlm-roberta-xl"),_ot.forEach(t),zxo=r(jAe," \u2014 "),jD=n(jAe,"A",{href:!0});var bot=s(jD);Wxo=r(bot,"XLMRobertaXLForTokenClassification"),bot.forEach(t),Qxo=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),Hxo=i(q),lT=n(q,"LI",{});var qAe=s(lT);Xse=n(qAe,"STRONG",{});var vot=s(Xse);Uxo=r(vot,"xlnet"),vot.forEach(t),Jxo=r(qAe," \u2014 "),qD=n(qAe,"A",{href:!0});var Tot=s(qD);Yxo=r(Tot,"XLNetForTokenClassification"),Tot.forEach(t),Kxo=r(qAe," (XLNet model)"),qAe.forEach(t),Zxo=i(q),iT=n(q,"LI",{});var GAe=s(iT);Vse=n(GAe,"STRONG",{});var Fot=s(Vse);eko=r(Fot,"yoso"),Fot.forEach(t),oko=r(GAe," \u2014 "),GD=n(GAe,"A",{href:!0});var Cot=s(GD);rko=r(Cot,"YosoForTokenClassification"),Cot.forEach(t),tko=r(GAe," (YOSO model)"),GAe.forEach(t),q.forEach(t),ako=i(Ht),dT=n(Ht,"P",{});var OAe=s(dT);nko=r(OAe,"The model is set in evaluation mode by default using "),zse=n(OAe,"CODE",{});var Mot=s(zse);sko=r(Mot,"model.eval()"),Mot.forEach(t),lko=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wse=n(OAe,"CODE",{});var Eot=s(Wse);iko=r(Eot,"model.train()"),Eot.forEach(t),OAe.forEach(t),dko=i(Ht),Qse=n(Ht,"P",{});var yot=s(Qse);cko=r(yot,"Examples:"),yot.forEach(t),mko=i(Ht),f(Qw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),kke=i(c),Md=n(c,"H2",{class:!0});var qSe=s(Md);cT=n(qSe,"A",{id:!0,class:!0,href:!0});var wot=s(cT);Hse=n(wot,"SPAN",{});var Aot=s(Hse);f(Hw.$$.fragment,Aot),Aot.forEach(t),wot.forEach(t),fko=i(qSe),Use=n(qSe,"SPAN",{});var Lot=s(Use);gko=r(Lot,"AutoModelForQuestionAnswering"),Lot.forEach(t),qSe.forEach(t),Rke=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);f(Uw.$$.fragment,ml),hko=i(ml),Ed=n(ml,"P",{});var gW=s(Ed);uko=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jse=n(gW,"CODE",{});var Bot=s(Jse);pko=r(Bot,"from_pretrained()"),Bot.forEach(t),_ko=r(gW,"class method or the "),Yse=n(gW,"CODE",{});var xot=s(Yse);bko=r(xot,"from_config()"),xot.forEach(t),vko=r(gW,`class
method.`),gW.forEach(t),Tko=i(ml),Jw=n(ml,"P",{});var GSe=s(Jw);Fko=r(GSe,"This class cannot be instantiated directly using "),Kse=n(GSe,"CODE",{});var kot=s(Kse);Cko=r(kot,"__init__()"),kot.forEach(t),Mko=r(GSe," (throws an error)."),GSe.forEach(t),Eko=i(ml),Zr=n(ml,"DIV",{class:!0});var fl=s(Zr);f(Yw.$$.fragment,fl),yko=i(fl),Zse=n(fl,"P",{});var Rot=s(Zse);wko=r(Rot,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rot.forEach(t),Ako=i(fl),yd=n(fl,"P",{});var hW=s(yd);Lko=r(hW,`Note:
Loading a model from its configuration file does `),ele=n(hW,"STRONG",{});var Sot=s(ele);Bko=r(Sot,"not"),Sot.forEach(t),xko=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(hW,"CODE",{});var Pot=s(ole);kko=r(Pot,"from_pretrained()"),Pot.forEach(t),Rko=r(hW,"to load the model weights."),hW.forEach(t),Sko=i(fl),rle=n(fl,"P",{});var $ot=s(rle);Pko=r($ot,"Examples:"),$ot.forEach(t),$ko=i(fl),f(Kw.$$.fragment,fl),fl.forEach(t),Iko=i(ml),We=n(ml,"DIV",{class:!0});var Ut=s(We);f(Zw.$$.fragment,Ut),Nko=i(Ut),tle=n(Ut,"P",{});var Iot=s(tle);Dko=r(Iot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Iot.forEach(t),jko=i(Ut),Za=n(Ut,"P",{});var b5=s(Za);qko=r(b5,"The model class to instantiate is selected based on the "),ale=n(b5,"CODE",{});var Not=s(ale);Gko=r(Not,"model_type"),Not.forEach(t),Oko=r(b5,` property of the config object (either
passed as an argument or loaded from `),nle=n(b5,"CODE",{});var Dot=s(nle);Xko=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),Vko=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sle=n(b5,"CODE",{});var jot=s(sle);zko=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),Wko=r(b5,":"),b5.forEach(t),Qko=i(Ut),R=n(Ut,"UL",{});var P=s(R);mT=n(P,"LI",{});var XAe=s(mT);lle=n(XAe,"STRONG",{});var qot=s(lle);Hko=r(qot,"albert"),qot.forEach(t),Uko=r(XAe," \u2014 "),OD=n(XAe,"A",{href:!0});var Got=s(OD);Jko=r(Got,"AlbertForQuestionAnswering"),Got.forEach(t),Yko=r(XAe," (ALBERT model)"),XAe.forEach(t),Kko=i(P),fT=n(P,"LI",{});var VAe=s(fT);ile=n(VAe,"STRONG",{});var Oot=s(ile);Zko=r(Oot,"bart"),Oot.forEach(t),eRo=r(VAe," \u2014 "),XD=n(VAe,"A",{href:!0});var Xot=s(XD);oRo=r(Xot,"BartForQuestionAnswering"),Xot.forEach(t),rRo=r(VAe," (BART model)"),VAe.forEach(t),tRo=i(P),gT=n(P,"LI",{});var zAe=s(gT);dle=n(zAe,"STRONG",{});var Vot=s(dle);aRo=r(Vot,"bert"),Vot.forEach(t),nRo=r(zAe," \u2014 "),VD=n(zAe,"A",{href:!0});var zot=s(VD);sRo=r(zot,"BertForQuestionAnswering"),zot.forEach(t),lRo=r(zAe," (BERT model)"),zAe.forEach(t),iRo=i(P),hT=n(P,"LI",{});var WAe=s(hT);cle=n(WAe,"STRONG",{});var Wot=s(cle);dRo=r(Wot,"big_bird"),Wot.forEach(t),cRo=r(WAe," \u2014 "),zD=n(WAe,"A",{href:!0});var Qot=s(zD);mRo=r(Qot,"BigBirdForQuestionAnswering"),Qot.forEach(t),fRo=r(WAe," (BigBird model)"),WAe.forEach(t),gRo=i(P),uT=n(P,"LI",{});var QAe=s(uT);mle=n(QAe,"STRONG",{});var Hot=s(mle);hRo=r(Hot,"bigbird_pegasus"),Hot.forEach(t),uRo=r(QAe," \u2014 "),WD=n(QAe,"A",{href:!0});var Uot=s(WD);pRo=r(Uot,"BigBirdPegasusForQuestionAnswering"),Uot.forEach(t),_Ro=r(QAe," (BigBirdPegasus model)"),QAe.forEach(t),bRo=i(P),pT=n(P,"LI",{});var HAe=s(pT);fle=n(HAe,"STRONG",{});var Jot=s(fle);vRo=r(Jot,"camembert"),Jot.forEach(t),TRo=r(HAe," \u2014 "),QD=n(HAe,"A",{href:!0});var Yot=s(QD);FRo=r(Yot,"CamembertForQuestionAnswering"),Yot.forEach(t),CRo=r(HAe," (CamemBERT model)"),HAe.forEach(t),MRo=i(P),_T=n(P,"LI",{});var UAe=s(_T);gle=n(UAe,"STRONG",{});var Kot=s(gle);ERo=r(Kot,"canine"),Kot.forEach(t),yRo=r(UAe," \u2014 "),HD=n(UAe,"A",{href:!0});var Zot=s(HD);wRo=r(Zot,"CanineForQuestionAnswering"),Zot.forEach(t),ARo=r(UAe," (Canine model)"),UAe.forEach(t),LRo=i(P),bT=n(P,"LI",{});var JAe=s(bT);hle=n(JAe,"STRONG",{});var ert=s(hle);BRo=r(ert,"convbert"),ert.forEach(t),xRo=r(JAe," \u2014 "),UD=n(JAe,"A",{href:!0});var ort=s(UD);kRo=r(ort,"ConvBertForQuestionAnswering"),ort.forEach(t),RRo=r(JAe," (ConvBERT model)"),JAe.forEach(t),SRo=i(P),vT=n(P,"LI",{});var YAe=s(vT);ule=n(YAe,"STRONG",{});var rrt=s(ule);PRo=r(rrt,"data2vec-text"),rrt.forEach(t),$Ro=r(YAe," \u2014 "),JD=n(YAe,"A",{href:!0});var trt=s(JD);IRo=r(trt,"Data2VecTextForQuestionAnswering"),trt.forEach(t),NRo=r(YAe," (Data2VecText model)"),YAe.forEach(t),DRo=i(P),TT=n(P,"LI",{});var KAe=s(TT);ple=n(KAe,"STRONG",{});var art=s(ple);jRo=r(art,"deberta"),art.forEach(t),qRo=r(KAe," \u2014 "),YD=n(KAe,"A",{href:!0});var nrt=s(YD);GRo=r(nrt,"DebertaForQuestionAnswering"),nrt.forEach(t),ORo=r(KAe," (DeBERTa model)"),KAe.forEach(t),XRo=i(P),FT=n(P,"LI",{});var ZAe=s(FT);_le=n(ZAe,"STRONG",{});var srt=s(_le);VRo=r(srt,"deberta-v2"),srt.forEach(t),zRo=r(ZAe," \u2014 "),KD=n(ZAe,"A",{href:!0});var lrt=s(KD);WRo=r(lrt,"DebertaV2ForQuestionAnswering"),lrt.forEach(t),QRo=r(ZAe," (DeBERTa-v2 model)"),ZAe.forEach(t),HRo=i(P),CT=n(P,"LI",{});var e0e=s(CT);ble=n(e0e,"STRONG",{});var irt=s(ble);URo=r(irt,"distilbert"),irt.forEach(t),JRo=r(e0e," \u2014 "),ZD=n(e0e,"A",{href:!0});var drt=s(ZD);YRo=r(drt,"DistilBertForQuestionAnswering"),drt.forEach(t),KRo=r(e0e," (DistilBERT model)"),e0e.forEach(t),ZRo=i(P),MT=n(P,"LI",{});var o0e=s(MT);vle=n(o0e,"STRONG",{});var crt=s(vle);eSo=r(crt,"electra"),crt.forEach(t),oSo=r(o0e," \u2014 "),ej=n(o0e,"A",{href:!0});var mrt=s(ej);rSo=r(mrt,"ElectraForQuestionAnswering"),mrt.forEach(t),tSo=r(o0e," (ELECTRA model)"),o0e.forEach(t),aSo=i(P),ET=n(P,"LI",{});var r0e=s(ET);Tle=n(r0e,"STRONG",{});var frt=s(Tle);nSo=r(frt,"flaubert"),frt.forEach(t),sSo=r(r0e," \u2014 "),oj=n(r0e,"A",{href:!0});var grt=s(oj);lSo=r(grt,"FlaubertForQuestionAnsweringSimple"),grt.forEach(t),iSo=r(r0e," (FlauBERT model)"),r0e.forEach(t),dSo=i(P),yT=n(P,"LI",{});var t0e=s(yT);Fle=n(t0e,"STRONG",{});var hrt=s(Fle);cSo=r(hrt,"fnet"),hrt.forEach(t),mSo=r(t0e," \u2014 "),rj=n(t0e,"A",{href:!0});var urt=s(rj);fSo=r(urt,"FNetForQuestionAnswering"),urt.forEach(t),gSo=r(t0e," (FNet model)"),t0e.forEach(t),hSo=i(P),wT=n(P,"LI",{});var a0e=s(wT);Cle=n(a0e,"STRONG",{});var prt=s(Cle);uSo=r(prt,"funnel"),prt.forEach(t),pSo=r(a0e," \u2014 "),tj=n(a0e,"A",{href:!0});var _rt=s(tj);_So=r(_rt,"FunnelForQuestionAnswering"),_rt.forEach(t),bSo=r(a0e," (Funnel Transformer model)"),a0e.forEach(t),vSo=i(P),AT=n(P,"LI",{});var n0e=s(AT);Mle=n(n0e,"STRONG",{});var brt=s(Mle);TSo=r(brt,"gptj"),brt.forEach(t),FSo=r(n0e," \u2014 "),aj=n(n0e,"A",{href:!0});var vrt=s(aj);CSo=r(vrt,"GPTJForQuestionAnswering"),vrt.forEach(t),MSo=r(n0e," (GPT-J model)"),n0e.forEach(t),ESo=i(P),LT=n(P,"LI",{});var s0e=s(LT);Ele=n(s0e,"STRONG",{});var Trt=s(Ele);ySo=r(Trt,"ibert"),Trt.forEach(t),wSo=r(s0e," \u2014 "),nj=n(s0e,"A",{href:!0});var Frt=s(nj);ASo=r(Frt,"IBertForQuestionAnswering"),Frt.forEach(t),LSo=r(s0e," (I-BERT model)"),s0e.forEach(t),BSo=i(P),BT=n(P,"LI",{});var l0e=s(BT);yle=n(l0e,"STRONG",{});var Crt=s(yle);xSo=r(Crt,"layoutlmv2"),Crt.forEach(t),kSo=r(l0e," \u2014 "),sj=n(l0e,"A",{href:!0});var Mrt=s(sj);RSo=r(Mrt,"LayoutLMv2ForQuestionAnswering"),Mrt.forEach(t),SSo=r(l0e," (LayoutLMv2 model)"),l0e.forEach(t),PSo=i(P),xT=n(P,"LI",{});var i0e=s(xT);wle=n(i0e,"STRONG",{});var Ert=s(wle);$So=r(Ert,"led"),Ert.forEach(t),ISo=r(i0e," \u2014 "),lj=n(i0e,"A",{href:!0});var yrt=s(lj);NSo=r(yrt,"LEDForQuestionAnswering"),yrt.forEach(t),DSo=r(i0e," (LED model)"),i0e.forEach(t),jSo=i(P),kT=n(P,"LI",{});var d0e=s(kT);Ale=n(d0e,"STRONG",{});var wrt=s(Ale);qSo=r(wrt,"longformer"),wrt.forEach(t),GSo=r(d0e," \u2014 "),ij=n(d0e,"A",{href:!0});var Art=s(ij);OSo=r(Art,"LongformerForQuestionAnswering"),Art.forEach(t),XSo=r(d0e," (Longformer model)"),d0e.forEach(t),VSo=i(P),RT=n(P,"LI",{});var c0e=s(RT);Lle=n(c0e,"STRONG",{});var Lrt=s(Lle);zSo=r(Lrt,"lxmert"),Lrt.forEach(t),WSo=r(c0e," \u2014 "),dj=n(c0e,"A",{href:!0});var Brt=s(dj);QSo=r(Brt,"LxmertForQuestionAnswering"),Brt.forEach(t),HSo=r(c0e," (LXMERT model)"),c0e.forEach(t),USo=i(P),ST=n(P,"LI",{});var m0e=s(ST);Ble=n(m0e,"STRONG",{});var xrt=s(Ble);JSo=r(xrt,"mbart"),xrt.forEach(t),YSo=r(m0e," \u2014 "),cj=n(m0e,"A",{href:!0});var krt=s(cj);KSo=r(krt,"MBartForQuestionAnswering"),krt.forEach(t),ZSo=r(m0e," (mBART model)"),m0e.forEach(t),ePo=i(P),PT=n(P,"LI",{});var f0e=s(PT);xle=n(f0e,"STRONG",{});var Rrt=s(xle);oPo=r(Rrt,"megatron-bert"),Rrt.forEach(t),rPo=r(f0e," \u2014 "),mj=n(f0e,"A",{href:!0});var Srt=s(mj);tPo=r(Srt,"MegatronBertForQuestionAnswering"),Srt.forEach(t),aPo=r(f0e," (MegatronBert model)"),f0e.forEach(t),nPo=i(P),$T=n(P,"LI",{});var g0e=s($T);kle=n(g0e,"STRONG",{});var Prt=s(kle);sPo=r(Prt,"mobilebert"),Prt.forEach(t),lPo=r(g0e," \u2014 "),fj=n(g0e,"A",{href:!0});var $rt=s(fj);iPo=r($rt,"MobileBertForQuestionAnswering"),$rt.forEach(t),dPo=r(g0e," (MobileBERT model)"),g0e.forEach(t),cPo=i(P),IT=n(P,"LI",{});var h0e=s(IT);Rle=n(h0e,"STRONG",{});var Irt=s(Rle);mPo=r(Irt,"mpnet"),Irt.forEach(t),fPo=r(h0e," \u2014 "),gj=n(h0e,"A",{href:!0});var Nrt=s(gj);gPo=r(Nrt,"MPNetForQuestionAnswering"),Nrt.forEach(t),hPo=r(h0e," (MPNet model)"),h0e.forEach(t),uPo=i(P),NT=n(P,"LI",{});var u0e=s(NT);Sle=n(u0e,"STRONG",{});var Drt=s(Sle);pPo=r(Drt,"nystromformer"),Drt.forEach(t),_Po=r(u0e," \u2014 "),hj=n(u0e,"A",{href:!0});var jrt=s(hj);bPo=r(jrt,"NystromformerForQuestionAnswering"),jrt.forEach(t),vPo=r(u0e," (Nystromformer model)"),u0e.forEach(t),TPo=i(P),DT=n(P,"LI",{});var p0e=s(DT);Ple=n(p0e,"STRONG",{});var qrt=s(Ple);FPo=r(qrt,"qdqbert"),qrt.forEach(t),CPo=r(p0e," \u2014 "),uj=n(p0e,"A",{href:!0});var Grt=s(uj);MPo=r(Grt,"QDQBertForQuestionAnswering"),Grt.forEach(t),EPo=r(p0e," (QDQBert model)"),p0e.forEach(t),yPo=i(P),jT=n(P,"LI",{});var _0e=s(jT);$le=n(_0e,"STRONG",{});var Ort=s($le);wPo=r(Ort,"reformer"),Ort.forEach(t),APo=r(_0e," \u2014 "),pj=n(_0e,"A",{href:!0});var Xrt=s(pj);LPo=r(Xrt,"ReformerForQuestionAnswering"),Xrt.forEach(t),BPo=r(_0e," (Reformer model)"),_0e.forEach(t),xPo=i(P),qT=n(P,"LI",{});var b0e=s(qT);Ile=n(b0e,"STRONG",{});var Vrt=s(Ile);kPo=r(Vrt,"rembert"),Vrt.forEach(t),RPo=r(b0e," \u2014 "),_j=n(b0e,"A",{href:!0});var zrt=s(_j);SPo=r(zrt,"RemBertForQuestionAnswering"),zrt.forEach(t),PPo=r(b0e," (RemBERT model)"),b0e.forEach(t),$Po=i(P),GT=n(P,"LI",{});var v0e=s(GT);Nle=n(v0e,"STRONG",{});var Wrt=s(Nle);IPo=r(Wrt,"roberta"),Wrt.forEach(t),NPo=r(v0e," \u2014 "),bj=n(v0e,"A",{href:!0});var Qrt=s(bj);DPo=r(Qrt,"RobertaForQuestionAnswering"),Qrt.forEach(t),jPo=r(v0e," (RoBERTa model)"),v0e.forEach(t),qPo=i(P),OT=n(P,"LI",{});var T0e=s(OT);Dle=n(T0e,"STRONG",{});var Hrt=s(Dle);GPo=r(Hrt,"roformer"),Hrt.forEach(t),OPo=r(T0e," \u2014 "),vj=n(T0e,"A",{href:!0});var Urt=s(vj);XPo=r(Urt,"RoFormerForQuestionAnswering"),Urt.forEach(t),VPo=r(T0e," (RoFormer model)"),T0e.forEach(t),zPo=i(P),XT=n(P,"LI",{});var F0e=s(XT);jle=n(F0e,"STRONG",{});var Jrt=s(jle);WPo=r(Jrt,"splinter"),Jrt.forEach(t),QPo=r(F0e," \u2014 "),Tj=n(F0e,"A",{href:!0});var Yrt=s(Tj);HPo=r(Yrt,"SplinterForQuestionAnswering"),Yrt.forEach(t),UPo=r(F0e," (Splinter model)"),F0e.forEach(t),JPo=i(P),VT=n(P,"LI",{});var C0e=s(VT);qle=n(C0e,"STRONG",{});var Krt=s(qle);YPo=r(Krt,"squeezebert"),Krt.forEach(t),KPo=r(C0e," \u2014 "),Fj=n(C0e,"A",{href:!0});var Zrt=s(Fj);ZPo=r(Zrt,"SqueezeBertForQuestionAnswering"),Zrt.forEach(t),e$o=r(C0e," (SqueezeBERT model)"),C0e.forEach(t),o$o=i(P),zT=n(P,"LI",{});var M0e=s(zT);Gle=n(M0e,"STRONG",{});var ett=s(Gle);r$o=r(ett,"xlm"),ett.forEach(t),t$o=r(M0e," \u2014 "),Cj=n(M0e,"A",{href:!0});var ott=s(Cj);a$o=r(ott,"XLMForQuestionAnsweringSimple"),ott.forEach(t),n$o=r(M0e," (XLM model)"),M0e.forEach(t),s$o=i(P),WT=n(P,"LI",{});var E0e=s(WT);Ole=n(E0e,"STRONG",{});var rtt=s(Ole);l$o=r(rtt,"xlm-roberta"),rtt.forEach(t),i$o=r(E0e," \u2014 "),Mj=n(E0e,"A",{href:!0});var ttt=s(Mj);d$o=r(ttt,"XLMRobertaForQuestionAnswering"),ttt.forEach(t),c$o=r(E0e," (XLM-RoBERTa model)"),E0e.forEach(t),m$o=i(P),QT=n(P,"LI",{});var y0e=s(QT);Xle=n(y0e,"STRONG",{});var att=s(Xle);f$o=r(att,"xlm-roberta-xl"),att.forEach(t),g$o=r(y0e," \u2014 "),Ej=n(y0e,"A",{href:!0});var ntt=s(Ej);h$o=r(ntt,"XLMRobertaXLForQuestionAnswering"),ntt.forEach(t),u$o=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),p$o=i(P),HT=n(P,"LI",{});var w0e=s(HT);Vle=n(w0e,"STRONG",{});var stt=s(Vle);_$o=r(stt,"xlnet"),stt.forEach(t),b$o=r(w0e," \u2014 "),yj=n(w0e,"A",{href:!0});var ltt=s(yj);v$o=r(ltt,"XLNetForQuestionAnsweringSimple"),ltt.forEach(t),T$o=r(w0e," (XLNet model)"),w0e.forEach(t),F$o=i(P),UT=n(P,"LI",{});var A0e=s(UT);zle=n(A0e,"STRONG",{});var itt=s(zle);C$o=r(itt,"yoso"),itt.forEach(t),M$o=r(A0e," \u2014 "),wj=n(A0e,"A",{href:!0});var dtt=s(wj);E$o=r(dtt,"YosoForQuestionAnswering"),dtt.forEach(t),y$o=r(A0e," (YOSO model)"),A0e.forEach(t),P.forEach(t),w$o=i(Ut),JT=n(Ut,"P",{});var L0e=s(JT);A$o=r(L0e,"The model is set in evaluation mode by default using "),Wle=n(L0e,"CODE",{});var ctt=s(Wle);L$o=r(ctt,"model.eval()"),ctt.forEach(t),B$o=r(L0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qle=n(L0e,"CODE",{});var mtt=s(Qle);x$o=r(mtt,"model.train()"),mtt.forEach(t),L0e.forEach(t),k$o=i(Ut),Hle=n(Ut,"P",{});var ftt=s(Hle);R$o=r(ftt,"Examples:"),ftt.forEach(t),S$o=i(Ut),f(e6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),Ske=i(c),wd=n(c,"H2",{class:!0});var OSe=s(wd);YT=n(OSe,"A",{id:!0,class:!0,href:!0});var gtt=s(YT);Ule=n(gtt,"SPAN",{});var htt=s(Ule);f(o6.$$.fragment,htt),htt.forEach(t),gtt.forEach(t),P$o=i(OSe),Jle=n(OSe,"SPAN",{});var utt=s(Jle);$$o=r(utt,"AutoModelForTableQuestionAnswering"),utt.forEach(t),OSe.forEach(t),Pke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);f(r6.$$.fragment,gl),I$o=i(gl),Ad=n(gl,"P",{});var uW=s(Ad);N$o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Yle=n(uW,"CODE",{});var ptt=s(Yle);D$o=r(ptt,"from_pretrained()"),ptt.forEach(t),j$o=r(uW,"class method or the "),Kle=n(uW,"CODE",{});var _tt=s(Kle);q$o=r(_tt,"from_config()"),_tt.forEach(t),G$o=r(uW,`class
method.`),uW.forEach(t),O$o=i(gl),t6=n(gl,"P",{});var XSe=s(t6);X$o=r(XSe,"This class cannot be instantiated directly using "),Zle=n(XSe,"CODE",{});var btt=s(Zle);V$o=r(btt,"__init__()"),btt.forEach(t),z$o=r(XSe," (throws an error)."),XSe.forEach(t),W$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);f(a6.$$.fragment,hl),Q$o=i(hl),eie=n(hl,"P",{});var vtt=s(eie);H$o=r(vtt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vtt.forEach(t),U$o=i(hl),Ld=n(hl,"P",{});var pW=s(Ld);J$o=r(pW,`Note:
Loading a model from its configuration file does `),oie=n(pW,"STRONG",{});var Ttt=s(oie);Y$o=r(Ttt,"not"),Ttt.forEach(t),K$o=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rie=n(pW,"CODE",{});var Ftt=s(rie);Z$o=r(Ftt,"from_pretrained()"),Ftt.forEach(t),eIo=r(pW,"to load the model weights."),pW.forEach(t),oIo=i(hl),tie=n(hl,"P",{});var Ctt=s(tie);rIo=r(Ctt,"Examples:"),Ctt.forEach(t),tIo=i(hl),f(n6.$$.fragment,hl),hl.forEach(t),aIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);f(s6.$$.fragment,Jt),nIo=i(Jt),aie=n(Jt,"P",{});var Mtt=s(aie);sIo=r(Mtt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mtt.forEach(t),lIo=i(Jt),en=n(Jt,"P",{});var v5=s(en);iIo=r(v5,"The model class to instantiate is selected based on the "),nie=n(v5,"CODE",{});var Ett=s(nie);dIo=r(Ett,"model_type"),Ett.forEach(t),cIo=r(v5,` property of the config object (either
passed as an argument or loaded from `),sie=n(v5,"CODE",{});var ytt=s(sie);mIo=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),fIo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lie=n(v5,"CODE",{});var wtt=s(lie);gIo=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),hIo=r(v5,":"),v5.forEach(t),uIo=i(Jt),iie=n(Jt,"UL",{});var Att=s(iie);KT=n(Att,"LI",{});var B0e=s(KT);die=n(B0e,"STRONG",{});var Ltt=s(die);pIo=r(Ltt,"tapas"),Ltt.forEach(t),_Io=r(B0e," \u2014 "),Aj=n(B0e,"A",{href:!0});var Btt=s(Aj);bIo=r(Btt,"TapasForQuestionAnswering"),Btt.forEach(t),vIo=r(B0e," (TAPAS model)"),B0e.forEach(t),Att.forEach(t),TIo=i(Jt),ZT=n(Jt,"P",{});var x0e=s(ZT);FIo=r(x0e,"The model is set in evaluation mode by default using "),cie=n(x0e,"CODE",{});var xtt=s(cie);CIo=r(xtt,"model.eval()"),xtt.forEach(t),MIo=r(x0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(x0e,"CODE",{});var ktt=s(mie);EIo=r(ktt,"model.train()"),ktt.forEach(t),x0e.forEach(t),yIo=i(Jt),fie=n(Jt,"P",{});var Rtt=s(fie);wIo=r(Rtt,"Examples:"),Rtt.forEach(t),AIo=i(Jt),f(l6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),$ke=i(c),Bd=n(c,"H2",{class:!0});var VSe=s(Bd);e1=n(VSe,"A",{id:!0,class:!0,href:!0});var Stt=s(e1);gie=n(Stt,"SPAN",{});var Ptt=s(gie);f(i6.$$.fragment,Ptt),Ptt.forEach(t),Stt.forEach(t),LIo=i(VSe),hie=n(VSe,"SPAN",{});var $tt=s(hie);BIo=r($tt,"AutoModelForImageClassification"),$tt.forEach(t),VSe.forEach(t),Ike=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);f(d6.$$.fragment,ul),xIo=i(ul),xd=n(ul,"P",{});var _W=s(xd);kIo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uie=n(_W,"CODE",{});var Itt=s(uie);RIo=r(Itt,"from_pretrained()"),Itt.forEach(t),SIo=r(_W,"class method or the "),pie=n(_W,"CODE",{});var Ntt=s(pie);PIo=r(Ntt,"from_config()"),Ntt.forEach(t),$Io=r(_W,`class
method.`),_W.forEach(t),IIo=i(ul),c6=n(ul,"P",{});var zSe=s(c6);NIo=r(zSe,"This class cannot be instantiated directly using "),_ie=n(zSe,"CODE",{});var Dtt=s(_ie);DIo=r(Dtt,"__init__()"),Dtt.forEach(t),jIo=r(zSe," (throws an error)."),zSe.forEach(t),qIo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);f(m6.$$.fragment,pl),GIo=i(pl),bie=n(pl,"P",{});var jtt=s(bie);OIo=r(jtt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jtt.forEach(t),XIo=i(pl),kd=n(pl,"P",{});var bW=s(kd);VIo=r(bW,`Note:
Loading a model from its configuration file does `),vie=n(bW,"STRONG",{});var qtt=s(vie);zIo=r(qtt,"not"),qtt.forEach(t),WIo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tie=n(bW,"CODE",{});var Gtt=s(Tie);QIo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),HIo=r(bW,"to load the model weights."),bW.forEach(t),UIo=i(pl),Fie=n(pl,"P",{});var Ott=s(Fie);JIo=r(Ott,"Examples:"),Ott.forEach(t),YIo=i(pl),f(f6.$$.fragment,pl),pl.forEach(t),KIo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);f(g6.$$.fragment,Yt),ZIo=i(Yt),Cie=n(Yt,"P",{});var Xtt=s(Cie);eNo=r(Xtt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xtt.forEach(t),oNo=i(Yt),on=n(Yt,"P",{});var T5=s(on);rNo=r(T5,"The model class to instantiate is selected based on the "),Mie=n(T5,"CODE",{});var Vtt=s(Mie);tNo=r(Vtt,"model_type"),Vtt.forEach(t),aNo=r(T5,` property of the config object (either
passed as an argument or loaded from `),Eie=n(T5,"CODE",{});var ztt=s(Eie);nNo=r(ztt,"pretrained_model_name_or_path"),ztt.forEach(t),sNo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(T5,"CODE",{});var Wtt=s(yie);lNo=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),iNo=r(T5,":"),T5.forEach(t),dNo=i(Yt),fe=n(Yt,"UL",{});var Te=s(fe);o1=n(Te,"LI",{});var k0e=s(o1);wie=n(k0e,"STRONG",{});var Qtt=s(wie);cNo=r(Qtt,"beit"),Qtt.forEach(t),mNo=r(k0e," \u2014 "),Lj=n(k0e,"A",{href:!0});var Htt=s(Lj);fNo=r(Htt,"BeitForImageClassification"),Htt.forEach(t),gNo=r(k0e," (BEiT model)"),k0e.forEach(t),hNo=i(Te),r1=n(Te,"LI",{});var R0e=s(r1);Aie=n(R0e,"STRONG",{});var Utt=s(Aie);uNo=r(Utt,"convnext"),Utt.forEach(t),pNo=r(R0e," \u2014 "),Bj=n(R0e,"A",{href:!0});var Jtt=s(Bj);_No=r(Jtt,"ConvNextForImageClassification"),Jtt.forEach(t),bNo=r(R0e," (ConvNext model)"),R0e.forEach(t),vNo=i(Te),qs=n(Te,"LI",{});var J8=s(qs);Lie=n(J8,"STRONG",{});var Ytt=s(Lie);TNo=r(Ytt,"deit"),Ytt.forEach(t),FNo=r(J8," \u2014 "),xj=n(J8,"A",{href:!0});var Ktt=s(xj);CNo=r(Ktt,"DeiTForImageClassification"),Ktt.forEach(t),MNo=r(J8," or "),kj=n(J8,"A",{href:!0});var Ztt=s(kj);ENo=r(Ztt,"DeiTForImageClassificationWithTeacher"),Ztt.forEach(t),yNo=r(J8," (DeiT model)"),J8.forEach(t),wNo=i(Te),t1=n(Te,"LI",{});var S0e=s(t1);Bie=n(S0e,"STRONG",{});var eat=s(Bie);ANo=r(eat,"imagegpt"),eat.forEach(t),LNo=r(S0e," \u2014 "),Rj=n(S0e,"A",{href:!0});var oat=s(Rj);BNo=r(oat,"ImageGPTForImageClassification"),oat.forEach(t),xNo=r(S0e," (ImageGPT model)"),S0e.forEach(t),kNo=i(Te),fa=n(Te,"LI",{});var Sm=s(fa);xie=n(Sm,"STRONG",{});var rat=s(xie);RNo=r(rat,"perceiver"),rat.forEach(t),SNo=r(Sm," \u2014 "),Sj=n(Sm,"A",{href:!0});var tat=s(Sj);PNo=r(tat,"PerceiverForImageClassificationLearned"),tat.forEach(t),$No=r(Sm," or "),Pj=n(Sm,"A",{href:!0});var aat=s(Pj);INo=r(aat,"PerceiverForImageClassificationFourier"),aat.forEach(t),NNo=r(Sm," or "),$j=n(Sm,"A",{href:!0});var nat=s($j);DNo=r(nat,"PerceiverForImageClassificationConvProcessing"),nat.forEach(t),jNo=r(Sm," (Perceiver model)"),Sm.forEach(t),qNo=i(Te),a1=n(Te,"LI",{});var P0e=s(a1);kie=n(P0e,"STRONG",{});var sat=s(kie);GNo=r(sat,"poolformer"),sat.forEach(t),ONo=r(P0e," \u2014 "),Ij=n(P0e,"A",{href:!0});var lat=s(Ij);XNo=r(lat,"PoolFormerForImageClassification"),lat.forEach(t),VNo=r(P0e," (PoolFormer model)"),P0e.forEach(t),zNo=i(Te),n1=n(Te,"LI",{});var $0e=s(n1);Rie=n($0e,"STRONG",{});var iat=s(Rie);WNo=r(iat,"resnet"),iat.forEach(t),QNo=r($0e," \u2014 "),Nj=n($0e,"A",{href:!0});var dat=s(Nj);HNo=r(dat,"ResNetForImageClassification"),dat.forEach(t),UNo=r($0e," (ResNet model)"),$0e.forEach(t),JNo=i(Te),s1=n(Te,"LI",{});var I0e=s(s1);Sie=n(I0e,"STRONG",{});var cat=s(Sie);YNo=r(cat,"segformer"),cat.forEach(t),KNo=r(I0e," \u2014 "),Dj=n(I0e,"A",{href:!0});var mat=s(Dj);ZNo=r(mat,"SegformerForImageClassification"),mat.forEach(t),eDo=r(I0e," (SegFormer model)"),I0e.forEach(t),oDo=i(Te),l1=n(Te,"LI",{});var N0e=s(l1);Pie=n(N0e,"STRONG",{});var fat=s(Pie);rDo=r(fat,"swin"),fat.forEach(t),tDo=r(N0e," \u2014 "),jj=n(N0e,"A",{href:!0});var gat=s(jj);aDo=r(gat,"SwinForImageClassification"),gat.forEach(t),nDo=r(N0e," (Swin model)"),N0e.forEach(t),sDo=i(Te),i1=n(Te,"LI",{});var D0e=s(i1);$ie=n(D0e,"STRONG",{});var hat=s($ie);lDo=r(hat,"van"),hat.forEach(t),iDo=r(D0e," \u2014 "),qj=n(D0e,"A",{href:!0});var uat=s(qj);dDo=r(uat,"VanForImageClassification"),uat.forEach(t),cDo=r(D0e," (VAN model)"),D0e.forEach(t),mDo=i(Te),d1=n(Te,"LI",{});var j0e=s(d1);Iie=n(j0e,"STRONG",{});var pat=s(Iie);fDo=r(pat,"vit"),pat.forEach(t),gDo=r(j0e," \u2014 "),Gj=n(j0e,"A",{href:!0});var _at=s(Gj);hDo=r(_at,"ViTForImageClassification"),_at.forEach(t),uDo=r(j0e," (ViT model)"),j0e.forEach(t),Te.forEach(t),pDo=i(Yt),c1=n(Yt,"P",{});var q0e=s(c1);_Do=r(q0e,"The model is set in evaluation mode by default using "),Nie=n(q0e,"CODE",{});var bat=s(Nie);bDo=r(bat,"model.eval()"),bat.forEach(t),vDo=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(q0e,"CODE",{});var vat=s(Die);TDo=r(vat,"model.train()"),vat.forEach(t),q0e.forEach(t),FDo=i(Yt),jie=n(Yt,"P",{});var Tat=s(jie);CDo=r(Tat,"Examples:"),Tat.forEach(t),MDo=i(Yt),f(h6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),Nke=i(c),Rd=n(c,"H2",{class:!0});var WSe=s(Rd);m1=n(WSe,"A",{id:!0,class:!0,href:!0});var Fat=s(m1);qie=n(Fat,"SPAN",{});var Cat=s(qie);f(u6.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),EDo=i(WSe),Gie=n(WSe,"SPAN",{});var Mat=s(Gie);yDo=r(Mat,"AutoModelForVision2Seq"),Mat.forEach(t),WSe.forEach(t),Dke=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);f(p6.$$.fragment,_l),wDo=i(_l),Sd=n(_l,"P",{});var vW=s(Sd);ADo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oie=n(vW,"CODE",{});var Eat=s(Oie);LDo=r(Eat,"from_pretrained()"),Eat.forEach(t),BDo=r(vW,"class method or the "),Xie=n(vW,"CODE",{});var yat=s(Xie);xDo=r(yat,"from_config()"),yat.forEach(t),kDo=r(vW,`class
method.`),vW.forEach(t),RDo=i(_l),_6=n(_l,"P",{});var QSe=s(_6);SDo=r(QSe,"This class cannot be instantiated directly using "),Vie=n(QSe,"CODE",{});var wat=s(Vie);PDo=r(wat,"__init__()"),wat.forEach(t),$Do=r(QSe," (throws an error)."),QSe.forEach(t),IDo=i(_l),rt=n(_l,"DIV",{class:!0});var bl=s(rt);f(b6.$$.fragment,bl),NDo=i(bl),zie=n(bl,"P",{});var Aat=s(zie);DDo=r(Aat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Aat.forEach(t),jDo=i(bl),Pd=n(bl,"P",{});var TW=s(Pd);qDo=r(TW,`Note:
Loading a model from its configuration file does `),Wie=n(TW,"STRONG",{});var Lat=s(Wie);GDo=r(Lat,"not"),Lat.forEach(t),ODo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qie=n(TW,"CODE",{});var Bat=s(Qie);XDo=r(Bat,"from_pretrained()"),Bat.forEach(t),VDo=r(TW,"to load the model weights."),TW.forEach(t),zDo=i(bl),Hie=n(bl,"P",{});var xat=s(Hie);WDo=r(xat,"Examples:"),xat.forEach(t),QDo=i(bl),f(v6.$$.fragment,bl),bl.forEach(t),HDo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);f(T6.$$.fragment,Kt),UDo=i(Kt),Uie=n(Kt,"P",{});var kat=s(Uie);JDo=r(kat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kat.forEach(t),YDo=i(Kt),rn=n(Kt,"P",{});var F5=s(rn);KDo=r(F5,"The model class to instantiate is selected based on the "),Jie=n(F5,"CODE",{});var Rat=s(Jie);ZDo=r(Rat,"model_type"),Rat.forEach(t),ejo=r(F5,` property of the config object (either
passed as an argument or loaded from `),Yie=n(F5,"CODE",{});var Sat=s(Yie);ojo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),rjo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(F5,"CODE",{});var Pat=s(Kie);tjo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),ajo=r(F5,":"),F5.forEach(t),njo=i(Kt),Zie=n(Kt,"UL",{});var $at=s(Zie);f1=n($at,"LI",{});var G0e=s(f1);ede=n(G0e,"STRONG",{});var Iat=s(ede);sjo=r(Iat,"vision-encoder-decoder"),Iat.forEach(t),ljo=r(G0e," \u2014 "),Oj=n(G0e,"A",{href:!0});var Nat=s(Oj);ijo=r(Nat,"VisionEncoderDecoderModel"),Nat.forEach(t),djo=r(G0e," (Vision Encoder decoder model)"),G0e.forEach(t),$at.forEach(t),cjo=i(Kt),g1=n(Kt,"P",{});var O0e=s(g1);mjo=r(O0e,"The model is set in evaluation mode by default using "),ode=n(O0e,"CODE",{});var Dat=s(ode);fjo=r(Dat,"model.eval()"),Dat.forEach(t),gjo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(O0e,"CODE",{});var jat=s(rde);hjo=r(jat,"model.train()"),jat.forEach(t),O0e.forEach(t),ujo=i(Kt),tde=n(Kt,"P",{});var qat=s(tde);pjo=r(qat,"Examples:"),qat.forEach(t),_jo=i(Kt),f(F6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),jke=i(c),$d=n(c,"H2",{class:!0});var HSe=s($d);h1=n(HSe,"A",{id:!0,class:!0,href:!0});var Gat=s(h1);ade=n(Gat,"SPAN",{});var Oat=s(ade);f(C6.$$.fragment,Oat),Oat.forEach(t),Gat.forEach(t),bjo=i(HSe),nde=n(HSe,"SPAN",{});var Xat=s(nde);vjo=r(Xat,"AutoModelForAudioClassification"),Xat.forEach(t),HSe.forEach(t),qke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);f(M6.$$.fragment,vl),Tjo=i(vl),Id=n(vl,"P",{});var FW=s(Id);Fjo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sde=n(FW,"CODE",{});var Vat=s(sde);Cjo=r(Vat,"from_pretrained()"),Vat.forEach(t),Mjo=r(FW,"class method or the "),lde=n(FW,"CODE",{});var zat=s(lde);Ejo=r(zat,"from_config()"),zat.forEach(t),yjo=r(FW,`class
method.`),FW.forEach(t),wjo=i(vl),E6=n(vl,"P",{});var USe=s(E6);Ajo=r(USe,"This class cannot be instantiated directly using "),ide=n(USe,"CODE",{});var Wat=s(ide);Ljo=r(Wat,"__init__()"),Wat.forEach(t),Bjo=r(USe," (throws an error)."),USe.forEach(t),xjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);f(y6.$$.fragment,Tl),kjo=i(Tl),dde=n(Tl,"P",{});var Qat=s(dde);Rjo=r(Qat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qat.forEach(t),Sjo=i(Tl),Nd=n(Tl,"P",{});var CW=s(Nd);Pjo=r(CW,`Note:
Loading a model from its configuration file does `),cde=n(CW,"STRONG",{});var Hat=s(cde);$jo=r(Hat,"not"),Hat.forEach(t),Ijo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mde=n(CW,"CODE",{});var Uat=s(mde);Njo=r(Uat,"from_pretrained()"),Uat.forEach(t),Djo=r(CW,"to load the model weights."),CW.forEach(t),jjo=i(Tl),fde=n(Tl,"P",{});var Jat=s(fde);qjo=r(Jat,"Examples:"),Jat.forEach(t),Gjo=i(Tl),f(w6.$$.fragment,Tl),Tl.forEach(t),Ojo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);f(A6.$$.fragment,Zt),Xjo=i(Zt),gde=n(Zt,"P",{});var Yat=s(gde);Vjo=r(Yat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Yat.forEach(t),zjo=i(Zt),tn=n(Zt,"P",{});var C5=s(tn);Wjo=r(C5,"The model class to instantiate is selected based on the "),hde=n(C5,"CODE",{});var Kat=s(hde);Qjo=r(Kat,"model_type"),Kat.forEach(t),Hjo=r(C5,` property of the config object (either
passed as an argument or loaded from `),ude=n(C5,"CODE",{});var Zat=s(ude);Ujo=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),Jjo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(C5,"CODE",{});var ent=s(pde);Yjo=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),Kjo=r(C5,":"),C5.forEach(t),Zjo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);u1=n(qo,"LI",{});var X0e=s(u1);_de=n(X0e,"STRONG",{});var ont=s(_de);eqo=r(ont,"data2vec-audio"),ont.forEach(t),oqo=r(X0e," \u2014 "),Xj=n(X0e,"A",{href:!0});var rnt=s(Xj);rqo=r(rnt,"Data2VecAudioForSequenceClassification"),rnt.forEach(t),tqo=r(X0e," (Data2VecAudio model)"),X0e.forEach(t),aqo=i(qo),p1=n(qo,"LI",{});var V0e=s(p1);bde=n(V0e,"STRONG",{});var tnt=s(bde);nqo=r(tnt,"hubert"),tnt.forEach(t),sqo=r(V0e," \u2014 "),Vj=n(V0e,"A",{href:!0});var ant=s(Vj);lqo=r(ant,"HubertForSequenceClassification"),ant.forEach(t),iqo=r(V0e," (Hubert model)"),V0e.forEach(t),dqo=i(qo),_1=n(qo,"LI",{});var z0e=s(_1);vde=n(z0e,"STRONG",{});var nnt=s(vde);cqo=r(nnt,"sew"),nnt.forEach(t),mqo=r(z0e," \u2014 "),zj=n(z0e,"A",{href:!0});var snt=s(zj);fqo=r(snt,"SEWForSequenceClassification"),snt.forEach(t),gqo=r(z0e," (SEW model)"),z0e.forEach(t),hqo=i(qo),b1=n(qo,"LI",{});var W0e=s(b1);Tde=n(W0e,"STRONG",{});var lnt=s(Tde);uqo=r(lnt,"sew-d"),lnt.forEach(t),pqo=r(W0e," \u2014 "),Wj=n(W0e,"A",{href:!0});var int=s(Wj);_qo=r(int,"SEWDForSequenceClassification"),int.forEach(t),bqo=r(W0e," (SEW-D model)"),W0e.forEach(t),vqo=i(qo),v1=n(qo,"LI",{});var Q0e=s(v1);Fde=n(Q0e,"STRONG",{});var dnt=s(Fde);Tqo=r(dnt,"unispeech"),dnt.forEach(t),Fqo=r(Q0e," \u2014 "),Qj=n(Q0e,"A",{href:!0});var cnt=s(Qj);Cqo=r(cnt,"UniSpeechForSequenceClassification"),cnt.forEach(t),Mqo=r(Q0e," (UniSpeech model)"),Q0e.forEach(t),Eqo=i(qo),T1=n(qo,"LI",{});var H0e=s(T1);Cde=n(H0e,"STRONG",{});var mnt=s(Cde);yqo=r(mnt,"unispeech-sat"),mnt.forEach(t),wqo=r(H0e," \u2014 "),Hj=n(H0e,"A",{href:!0});var fnt=s(Hj);Aqo=r(fnt,"UniSpeechSatForSequenceClassification"),fnt.forEach(t),Lqo=r(H0e," (UniSpeechSat model)"),H0e.forEach(t),Bqo=i(qo),F1=n(qo,"LI",{});var U0e=s(F1);Mde=n(U0e,"STRONG",{});var gnt=s(Mde);xqo=r(gnt,"wav2vec2"),gnt.forEach(t),kqo=r(U0e," \u2014 "),Uj=n(U0e,"A",{href:!0});var hnt=s(Uj);Rqo=r(hnt,"Wav2Vec2ForSequenceClassification"),hnt.forEach(t),Sqo=r(U0e," (Wav2Vec2 model)"),U0e.forEach(t),Pqo=i(qo),C1=n(qo,"LI",{});var J0e=s(C1);Ede=n(J0e,"STRONG",{});var unt=s(Ede);$qo=r(unt,"wavlm"),unt.forEach(t),Iqo=r(J0e," \u2014 "),Jj=n(J0e,"A",{href:!0});var pnt=s(Jj);Nqo=r(pnt,"WavLMForSequenceClassification"),pnt.forEach(t),Dqo=r(J0e," (WavLM model)"),J0e.forEach(t),qo.forEach(t),jqo=i(Zt),M1=n(Zt,"P",{});var Y0e=s(M1);qqo=r(Y0e,"The model is set in evaluation mode by default using "),yde=n(Y0e,"CODE",{});var _nt=s(yde);Gqo=r(_nt,"model.eval()"),_nt.forEach(t),Oqo=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(Y0e,"CODE",{});var bnt=s(wde);Xqo=r(bnt,"model.train()"),bnt.forEach(t),Y0e.forEach(t),Vqo=i(Zt),Ade=n(Zt,"P",{});var vnt=s(Ade);zqo=r(vnt,"Examples:"),vnt.forEach(t),Wqo=i(Zt),f(L6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Gke=i(c),Dd=n(c,"H2",{class:!0});var JSe=s(Dd);E1=n(JSe,"A",{id:!0,class:!0,href:!0});var Tnt=s(E1);Lde=n(Tnt,"SPAN",{});var Fnt=s(Lde);f(B6.$$.fragment,Fnt),Fnt.forEach(t),Tnt.forEach(t),Qqo=i(JSe),Bde=n(JSe,"SPAN",{});var Cnt=s(Bde);Hqo=r(Cnt,"AutoModelForAudioFrameClassification"),Cnt.forEach(t),JSe.forEach(t),Oke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);f(x6.$$.fragment,Fl),Uqo=i(Fl),jd=n(Fl,"P",{});var MW=s(jd);Jqo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),xde=n(MW,"CODE",{});var Mnt=s(xde);Yqo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),Kqo=r(MW,"class method or the "),kde=n(MW,"CODE",{});var Ent=s(kde);Zqo=r(Ent,"from_config()"),Ent.forEach(t),eGo=r(MW,`class
method.`),MW.forEach(t),oGo=i(Fl),k6=n(Fl,"P",{});var YSe=s(k6);rGo=r(YSe,"This class cannot be instantiated directly using "),Rde=n(YSe,"CODE",{});var ynt=s(Rde);tGo=r(ynt,"__init__()"),ynt.forEach(t),aGo=r(YSe," (throws an error)."),YSe.forEach(t),nGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);f(R6.$$.fragment,Cl),sGo=i(Cl),Sde=n(Cl,"P",{});var wnt=s(Sde);lGo=r(wnt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wnt.forEach(t),iGo=i(Cl),qd=n(Cl,"P",{});var EW=s(qd);dGo=r(EW,`Note:
Loading a model from its configuration file does `),Pde=n(EW,"STRONG",{});var Ant=s(Pde);cGo=r(Ant,"not"),Ant.forEach(t),mGo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$de=n(EW,"CODE",{});var Lnt=s($de);fGo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),gGo=r(EW,"to load the model weights."),EW.forEach(t),hGo=i(Cl),Ide=n(Cl,"P",{});var Bnt=s(Ide);uGo=r(Bnt,"Examples:"),Bnt.forEach(t),pGo=i(Cl),f(S6.$$.fragment,Cl),Cl.forEach(t),_Go=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);f(P6.$$.fragment,ea),bGo=i(ea),Nde=n(ea,"P",{});var xnt=s(Nde);vGo=r(xnt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xnt.forEach(t),TGo=i(ea),an=n(ea,"P",{});var M5=s(an);FGo=r(M5,"The model class to instantiate is selected based on the "),Dde=n(M5,"CODE",{});var knt=s(Dde);CGo=r(knt,"model_type"),knt.forEach(t),MGo=r(M5,` property of the config object (either
passed as an argument or loaded from `),jde=n(M5,"CODE",{});var Rnt=s(jde);EGo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),yGo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(M5,"CODE",{});var Snt=s(qde);wGo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),AGo=r(M5,":"),M5.forEach(t),LGo=i(ea),nn=n(ea,"UL",{});var E5=s(nn);y1=n(E5,"LI",{});var K0e=s(y1);Gde=n(K0e,"STRONG",{});var Pnt=s(Gde);BGo=r(Pnt,"data2vec-audio"),Pnt.forEach(t),xGo=r(K0e," \u2014 "),Yj=n(K0e,"A",{href:!0});var $nt=s(Yj);kGo=r($nt,"Data2VecAudioForAudioFrameClassification"),$nt.forEach(t),RGo=r(K0e," (Data2VecAudio model)"),K0e.forEach(t),SGo=i(E5),w1=n(E5,"LI",{});var Z0e=s(w1);Ode=n(Z0e,"STRONG",{});var Int=s(Ode);PGo=r(Int,"unispeech-sat"),Int.forEach(t),$Go=r(Z0e," \u2014 "),Kj=n(Z0e,"A",{href:!0});var Nnt=s(Kj);IGo=r(Nnt,"UniSpeechSatForAudioFrameClassification"),Nnt.forEach(t),NGo=r(Z0e," (UniSpeechSat model)"),Z0e.forEach(t),DGo=i(E5),A1=n(E5,"LI",{});var eLe=s(A1);Xde=n(eLe,"STRONG",{});var Dnt=s(Xde);jGo=r(Dnt,"wav2vec2"),Dnt.forEach(t),qGo=r(eLe," \u2014 "),Zj=n(eLe,"A",{href:!0});var jnt=s(Zj);GGo=r(jnt,"Wav2Vec2ForAudioFrameClassification"),jnt.forEach(t),OGo=r(eLe," (Wav2Vec2 model)"),eLe.forEach(t),XGo=i(E5),L1=n(E5,"LI",{});var oLe=s(L1);Vde=n(oLe,"STRONG",{});var qnt=s(Vde);VGo=r(qnt,"wavlm"),qnt.forEach(t),zGo=r(oLe," \u2014 "),eq=n(oLe,"A",{href:!0});var Gnt=s(eq);WGo=r(Gnt,"WavLMForAudioFrameClassification"),Gnt.forEach(t),QGo=r(oLe," (WavLM model)"),oLe.forEach(t),E5.forEach(t),HGo=i(ea),B1=n(ea,"P",{});var rLe=s(B1);UGo=r(rLe,"The model is set in evaluation mode by default using "),zde=n(rLe,"CODE",{});var Ont=s(zde);JGo=r(Ont,"model.eval()"),Ont.forEach(t),YGo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(rLe,"CODE",{});var Xnt=s(Wde);KGo=r(Xnt,"model.train()"),Xnt.forEach(t),rLe.forEach(t),ZGo=i(ea),Qde=n(ea,"P",{});var Vnt=s(Qde);eOo=r(Vnt,"Examples:"),Vnt.forEach(t),oOo=i(ea),f($6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Xke=i(c),Gd=n(c,"H2",{class:!0});var KSe=s(Gd);x1=n(KSe,"A",{id:!0,class:!0,href:!0});var znt=s(x1);Hde=n(znt,"SPAN",{});var Wnt=s(Hde);f(I6.$$.fragment,Wnt),Wnt.forEach(t),znt.forEach(t),rOo=i(KSe),Ude=n(KSe,"SPAN",{});var Qnt=s(Ude);tOo=r(Qnt,"AutoModelForCTC"),Qnt.forEach(t),KSe.forEach(t),Vke=i(c),mr=n(c,"DIV",{class:!0});var Ml=s(mr);f(N6.$$.fragment,Ml),aOo=i(Ml),Od=n(Ml,"P",{});var yW=s(Od);nOo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Jde=n(yW,"CODE",{});var Hnt=s(Jde);sOo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),lOo=r(yW,"class method or the "),Yde=n(yW,"CODE",{});var Unt=s(Yde);iOo=r(Unt,"from_config()"),Unt.forEach(t),dOo=r(yW,`class
method.`),yW.forEach(t),cOo=i(Ml),D6=n(Ml,"P",{});var ZSe=s(D6);mOo=r(ZSe,"This class cannot be instantiated directly using "),Kde=n(ZSe,"CODE",{});var Jnt=s(Kde);fOo=r(Jnt,"__init__()"),Jnt.forEach(t),gOo=r(ZSe," (throws an error)."),ZSe.forEach(t),hOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);f(j6.$$.fragment,El),uOo=i(El),Zde=n(El,"P",{});var Ynt=s(Zde);pOo=r(Ynt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ynt.forEach(t),_Oo=i(El),Xd=n(El,"P",{});var wW=s(Xd);bOo=r(wW,`Note:
Loading a model from its configuration file does `),ece=n(wW,"STRONG",{});var Knt=s(ece);vOo=r(Knt,"not"),Knt.forEach(t),TOo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(wW,"CODE",{});var Znt=s(oce);FOo=r(Znt,"from_pretrained()"),Znt.forEach(t),COo=r(wW,"to load the model weights."),wW.forEach(t),MOo=i(El),rce=n(El,"P",{});var est=s(rce);EOo=r(est,"Examples:"),est.forEach(t),yOo=i(El),f(q6.$$.fragment,El),El.forEach(t),wOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);f(G6.$$.fragment,oa),AOo=i(oa),tce=n(oa,"P",{});var ost=s(tce);LOo=r(ost,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ost.forEach(t),BOo=i(oa),sn=n(oa,"P",{});var y5=s(sn);xOo=r(y5,"The model class to instantiate is selected based on the "),ace=n(y5,"CODE",{});var rst=s(ace);kOo=r(rst,"model_type"),rst.forEach(t),ROo=r(y5,` property of the config object (either
passed as an argument or loaded from `),nce=n(y5,"CODE",{});var tst=s(nce);SOo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),POo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(y5,"CODE",{});var ast=s(sce);$Oo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),IOo=r(y5,":"),y5.forEach(t),NOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);k1=n(Go,"LI",{});var tLe=s(k1);lce=n(tLe,"STRONG",{});var nst=s(lce);DOo=r(nst,"data2vec-audio"),nst.forEach(t),jOo=r(tLe," \u2014 "),oq=n(tLe,"A",{href:!0});var sst=s(oq);qOo=r(sst,"Data2VecAudioForCTC"),sst.forEach(t),GOo=r(tLe," (Data2VecAudio model)"),tLe.forEach(t),OOo=i(Go),R1=n(Go,"LI",{});var aLe=s(R1);ice=n(aLe,"STRONG",{});var lst=s(ice);XOo=r(lst,"hubert"),lst.forEach(t),VOo=r(aLe," \u2014 "),rq=n(aLe,"A",{href:!0});var ist=s(rq);zOo=r(ist,"HubertForCTC"),ist.forEach(t),WOo=r(aLe," (Hubert model)"),aLe.forEach(t),QOo=i(Go),S1=n(Go,"LI",{});var nLe=s(S1);dce=n(nLe,"STRONG",{});var dst=s(dce);HOo=r(dst,"sew"),dst.forEach(t),UOo=r(nLe," \u2014 "),tq=n(nLe,"A",{href:!0});var cst=s(tq);JOo=r(cst,"SEWForCTC"),cst.forEach(t),YOo=r(nLe," (SEW model)"),nLe.forEach(t),KOo=i(Go),P1=n(Go,"LI",{});var sLe=s(P1);cce=n(sLe,"STRONG",{});var mst=s(cce);ZOo=r(mst,"sew-d"),mst.forEach(t),eXo=r(sLe," \u2014 "),aq=n(sLe,"A",{href:!0});var fst=s(aq);oXo=r(fst,"SEWDForCTC"),fst.forEach(t),rXo=r(sLe," (SEW-D model)"),sLe.forEach(t),tXo=i(Go),$1=n(Go,"LI",{});var lLe=s($1);mce=n(lLe,"STRONG",{});var gst=s(mce);aXo=r(gst,"unispeech"),gst.forEach(t),nXo=r(lLe," \u2014 "),nq=n(lLe,"A",{href:!0});var hst=s(nq);sXo=r(hst,"UniSpeechForCTC"),hst.forEach(t),lXo=r(lLe," (UniSpeech model)"),lLe.forEach(t),iXo=i(Go),I1=n(Go,"LI",{});var iLe=s(I1);fce=n(iLe,"STRONG",{});var ust=s(fce);dXo=r(ust,"unispeech-sat"),ust.forEach(t),cXo=r(iLe," \u2014 "),sq=n(iLe,"A",{href:!0});var pst=s(sq);mXo=r(pst,"UniSpeechSatForCTC"),pst.forEach(t),fXo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),gXo=i(Go),N1=n(Go,"LI",{});var dLe=s(N1);gce=n(dLe,"STRONG",{});var _st=s(gce);hXo=r(_st,"wav2vec2"),_st.forEach(t),uXo=r(dLe," \u2014 "),lq=n(dLe,"A",{href:!0});var bst=s(lq);pXo=r(bst,"Wav2Vec2ForCTC"),bst.forEach(t),_Xo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),bXo=i(Go),D1=n(Go,"LI",{});var cLe=s(D1);hce=n(cLe,"STRONG",{});var vst=s(hce);vXo=r(vst,"wavlm"),vst.forEach(t),TXo=r(cLe," \u2014 "),iq=n(cLe,"A",{href:!0});var Tst=s(iq);FXo=r(Tst,"WavLMForCTC"),Tst.forEach(t),CXo=r(cLe," (WavLM model)"),cLe.forEach(t),Go.forEach(t),MXo=i(oa),j1=n(oa,"P",{});var mLe=s(j1);EXo=r(mLe,"The model is set in evaluation mode by default using "),uce=n(mLe,"CODE",{});var Fst=s(uce);yXo=r(Fst,"model.eval()"),Fst.forEach(t),wXo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(mLe,"CODE",{});var Cst=s(pce);AXo=r(Cst,"model.train()"),Cst.forEach(t),mLe.forEach(t),LXo=i(oa),_ce=n(oa,"P",{});var Mst=s(_ce);BXo=r(Mst,"Examples:"),Mst.forEach(t),xXo=i(oa),f(O6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),zke=i(c),Vd=n(c,"H2",{class:!0});var ePe=s(Vd);q1=n(ePe,"A",{id:!0,class:!0,href:!0});var Est=s(q1);bce=n(Est,"SPAN",{});var yst=s(bce);f(X6.$$.fragment,yst),yst.forEach(t),Est.forEach(t),kXo=i(ePe),vce=n(ePe,"SPAN",{});var wst=s(vce);RXo=r(wst,"AutoModelForSpeechSeq2Seq"),wst.forEach(t),ePe.forEach(t),Wke=i(c),fr=n(c,"DIV",{class:!0});var yl=s(fr);f(V6.$$.fragment,yl),SXo=i(yl),zd=n(yl,"P",{});var AW=s(zd);PXo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Tce=n(AW,"CODE",{});var Ast=s(Tce);$Xo=r(Ast,"from_pretrained()"),Ast.forEach(t),IXo=r(AW,"class method or the "),Fce=n(AW,"CODE",{});var Lst=s(Fce);NXo=r(Lst,"from_config()"),Lst.forEach(t),DXo=r(AW,`class
method.`),AW.forEach(t),jXo=i(yl),z6=n(yl,"P",{});var oPe=s(z6);qXo=r(oPe,"This class cannot be instantiated directly using "),Cce=n(oPe,"CODE",{});var Bst=s(Cce);GXo=r(Bst,"__init__()"),Bst.forEach(t),OXo=r(oPe," (throws an error)."),oPe.forEach(t),XXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);f(W6.$$.fragment,wl),VXo=i(wl),Mce=n(wl,"P",{});var xst=s(Mce);zXo=r(xst,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xst.forEach(t),WXo=i(wl),Wd=n(wl,"P",{});var LW=s(Wd);QXo=r(LW,`Note:
Loading a model from its configuration file does `),Ece=n(LW,"STRONG",{});var kst=s(Ece);HXo=r(kst,"not"),kst.forEach(t),UXo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yce=n(LW,"CODE",{});var Rst=s(yce);JXo=r(Rst,"from_pretrained()"),Rst.forEach(t),YXo=r(LW,"to load the model weights."),LW.forEach(t),KXo=i(wl),wce=n(wl,"P",{});var Sst=s(wce);ZXo=r(Sst,"Examples:"),Sst.forEach(t),eVo=i(wl),f(Q6.$$.fragment,wl),wl.forEach(t),oVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);f(H6.$$.fragment,ra),rVo=i(ra),Ace=n(ra,"P",{});var Pst=s(Ace);tVo=r(Pst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pst.forEach(t),aVo=i(ra),ln=n(ra,"P",{});var w5=s(ln);nVo=r(w5,"The model class to instantiate is selected based on the "),Lce=n(w5,"CODE",{});var $st=s(Lce);sVo=r($st,"model_type"),$st.forEach(t),lVo=r(w5,` property of the config object (either
passed as an argument or loaded from `),Bce=n(w5,"CODE",{});var Ist=s(Bce);iVo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),dVo=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(w5,"CODE",{});var Nst=s(xce);cVo=r(Nst,"pretrained_model_name_or_path"),Nst.forEach(t),mVo=r(w5,":"),w5.forEach(t),fVo=i(ra),U6=n(ra,"UL",{});var rPe=s(U6);G1=n(rPe,"LI",{});var fLe=s(G1);kce=n(fLe,"STRONG",{});var Dst=s(kce);gVo=r(Dst,"speech-encoder-decoder"),Dst.forEach(t),hVo=r(fLe," \u2014 "),dq=n(fLe,"A",{href:!0});var jst=s(dq);uVo=r(jst,"SpeechEncoderDecoderModel"),jst.forEach(t),pVo=r(fLe," (Speech Encoder decoder model)"),fLe.forEach(t),_Vo=i(rPe),O1=n(rPe,"LI",{});var gLe=s(O1);Rce=n(gLe,"STRONG",{});var qst=s(Rce);bVo=r(qst,"speech_to_text"),qst.forEach(t),vVo=r(gLe," \u2014 "),cq=n(gLe,"A",{href:!0});var Gst=s(cq);TVo=r(Gst,"Speech2TextForConditionalGeneration"),Gst.forEach(t),FVo=r(gLe," (Speech2Text model)"),gLe.forEach(t),rPe.forEach(t),CVo=i(ra),X1=n(ra,"P",{});var hLe=s(X1);MVo=r(hLe,"The model is set in evaluation mode by default using "),Sce=n(hLe,"CODE",{});var Ost=s(Sce);EVo=r(Ost,"model.eval()"),Ost.forEach(t),yVo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(hLe,"CODE",{});var Xst=s(Pce);wVo=r(Xst,"model.train()"),Xst.forEach(t),hLe.forEach(t),AVo=i(ra),$ce=n(ra,"P",{});var Vst=s($ce);LVo=r(Vst,"Examples:"),Vst.forEach(t),BVo=i(ra),f(J6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Qke=i(c),Qd=n(c,"H2",{class:!0});var tPe=s(Qd);V1=n(tPe,"A",{id:!0,class:!0,href:!0});var zst=s(V1);Ice=n(zst,"SPAN",{});var Wst=s(Ice);f(Y6.$$.fragment,Wst),Wst.forEach(t),zst.forEach(t),xVo=i(tPe),Nce=n(tPe,"SPAN",{});var Qst=s(Nce);kVo=r(Qst,"AutoModelForAudioXVector"),Qst.forEach(t),tPe.forEach(t),Hke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);f(K6.$$.fragment,Al),RVo=i(Al),Hd=n(Al,"P",{});var BW=s(Hd);SVo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Dce=n(BW,"CODE",{});var Hst=s(Dce);PVo=r(Hst,"from_pretrained()"),Hst.forEach(t),$Vo=r(BW,"class method or the "),jce=n(BW,"CODE",{});var Ust=s(jce);IVo=r(Ust,"from_config()"),Ust.forEach(t),NVo=r(BW,`class
method.`),BW.forEach(t),DVo=i(Al),Z6=n(Al,"P",{});var aPe=s(Z6);jVo=r(aPe,"This class cannot be instantiated directly using "),qce=n(aPe,"CODE",{});var Jst=s(qce);qVo=r(Jst,"__init__()"),Jst.forEach(t),GVo=r(aPe," (throws an error)."),aPe.forEach(t),OVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);f(eA.$$.fragment,Ll),XVo=i(Ll),Gce=n(Ll,"P",{});var Yst=s(Gce);VVo=r(Yst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yst.forEach(t),zVo=i(Ll),Ud=n(Ll,"P",{});var xW=s(Ud);WVo=r(xW,`Note:
Loading a model from its configuration file does `),Oce=n(xW,"STRONG",{});var Kst=s(Oce);QVo=r(Kst,"not"),Kst.forEach(t),HVo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xce=n(xW,"CODE",{});var Zst=s(Xce);UVo=r(Zst,"from_pretrained()"),Zst.forEach(t),JVo=r(xW,"to load the model weights."),xW.forEach(t),YVo=i(Ll),Vce=n(Ll,"P",{});var elt=s(Vce);KVo=r(elt,"Examples:"),elt.forEach(t),ZVo=i(Ll),f(oA.$$.fragment,Ll),Ll.forEach(t),ezo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);f(rA.$$.fragment,ta),ozo=i(ta),zce=n(ta,"P",{});var olt=s(zce);rzo=r(olt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),olt.forEach(t),tzo=i(ta),dn=n(ta,"P",{});var A5=s(dn);azo=r(A5,"The model class to instantiate is selected based on the "),Wce=n(A5,"CODE",{});var rlt=s(Wce);nzo=r(rlt,"model_type"),rlt.forEach(t),szo=r(A5,` property of the config object (either
passed as an argument or loaded from `),Qce=n(A5,"CODE",{});var tlt=s(Qce);lzo=r(tlt,"pretrained_model_name_or_path"),tlt.forEach(t),izo=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=n(A5,"CODE",{});var alt=s(Hce);dzo=r(alt,"pretrained_model_name_or_path"),alt.forEach(t),czo=r(A5,":"),A5.forEach(t),mzo=i(ta),cn=n(ta,"UL",{});var L5=s(cn);z1=n(L5,"LI",{});var uLe=s(z1);Uce=n(uLe,"STRONG",{});var nlt=s(Uce);fzo=r(nlt,"data2vec-audio"),nlt.forEach(t),gzo=r(uLe," \u2014 "),mq=n(uLe,"A",{href:!0});var slt=s(mq);hzo=r(slt,"Data2VecAudioForXVector"),slt.forEach(t),uzo=r(uLe," (Data2VecAudio model)"),uLe.forEach(t),pzo=i(L5),W1=n(L5,"LI",{});var pLe=s(W1);Jce=n(pLe,"STRONG",{});var llt=s(Jce);_zo=r(llt,"unispeech-sat"),llt.forEach(t),bzo=r(pLe," \u2014 "),fq=n(pLe,"A",{href:!0});var ilt=s(fq);vzo=r(ilt,"UniSpeechSatForXVector"),ilt.forEach(t),Tzo=r(pLe," (UniSpeechSat model)"),pLe.forEach(t),Fzo=i(L5),Q1=n(L5,"LI",{});var _Le=s(Q1);Yce=n(_Le,"STRONG",{});var dlt=s(Yce);Czo=r(dlt,"wav2vec2"),dlt.forEach(t),Mzo=r(_Le," \u2014 "),gq=n(_Le,"A",{href:!0});var clt=s(gq);Ezo=r(clt,"Wav2Vec2ForXVector"),clt.forEach(t),yzo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),wzo=i(L5),H1=n(L5,"LI",{});var bLe=s(H1);Kce=n(bLe,"STRONG",{});var mlt=s(Kce);Azo=r(mlt,"wavlm"),mlt.forEach(t),Lzo=r(bLe," \u2014 "),hq=n(bLe,"A",{href:!0});var flt=s(hq);Bzo=r(flt,"WavLMForXVector"),flt.forEach(t),xzo=r(bLe," (WavLM model)"),bLe.forEach(t),L5.forEach(t),kzo=i(ta),U1=n(ta,"P",{});var vLe=s(U1);Rzo=r(vLe,"The model is set in evaluation mode by default using "),Zce=n(vLe,"CODE",{});var glt=s(Zce);Szo=r(glt,"model.eval()"),glt.forEach(t),Pzo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(vLe,"CODE",{});var hlt=s(eme);$zo=r(hlt,"model.train()"),hlt.forEach(t),vLe.forEach(t),Izo=i(ta),ome=n(ta,"P",{});var ult=s(ome);Nzo=r(ult,"Examples:"),ult.forEach(t),Dzo=i(ta),f(tA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Uke=i(c),Jd=n(c,"H2",{class:!0});var nPe=s(Jd);J1=n(nPe,"A",{id:!0,class:!0,href:!0});var plt=s(J1);rme=n(plt,"SPAN",{});var _lt=s(rme);f(aA.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),jzo=i(nPe),tme=n(nPe,"SPAN",{});var blt=s(tme);qzo=r(blt,"AutoModelForMaskedImageModeling"),blt.forEach(t),nPe.forEach(t),Jke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);f(nA.$$.fragment,Bl),Gzo=i(Bl),Yd=n(Bl,"P",{});var kW=s(Yd);Ozo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),ame=n(kW,"CODE",{});var vlt=s(ame);Xzo=r(vlt,"from_pretrained()"),vlt.forEach(t),Vzo=r(kW,"class method or the "),nme=n(kW,"CODE",{});var Tlt=s(nme);zzo=r(Tlt,"from_config()"),Tlt.forEach(t),Wzo=r(kW,`class
method.`),kW.forEach(t),Qzo=i(Bl),sA=n(Bl,"P",{});var sPe=s(sA);Hzo=r(sPe,"This class cannot be instantiated directly using "),sme=n(sPe,"CODE",{});var Flt=s(sme);Uzo=r(Flt,"__init__()"),Flt.forEach(t),Jzo=r(sPe," (throws an error)."),sPe.forEach(t),Yzo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);f(lA.$$.fragment,xl),Kzo=i(xl),lme=n(xl,"P",{});var Clt=s(lme);Zzo=r(Clt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Clt.forEach(t),eWo=i(xl),Kd=n(xl,"P",{});var RW=s(Kd);oWo=r(RW,`Note:
Loading a model from its configuration file does `),ime=n(RW,"STRONG",{});var Mlt=s(ime);rWo=r(Mlt,"not"),Mlt.forEach(t),tWo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dme=n(RW,"CODE",{});var Elt=s(dme);aWo=r(Elt,"from_pretrained()"),Elt.forEach(t),nWo=r(RW,"to load the model weights."),RW.forEach(t),sWo=i(xl),cme=n(xl,"P",{});var ylt=s(cme);lWo=r(ylt,"Examples:"),ylt.forEach(t),iWo=i(xl),f(iA.$$.fragment,xl),xl.forEach(t),dWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);f(dA.$$.fragment,aa),cWo=i(aa),mme=n(aa,"P",{});var wlt=s(mme);mWo=r(wlt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wlt.forEach(t),fWo=i(aa),mn=n(aa,"P",{});var B5=s(mn);gWo=r(B5,"The model class to instantiate is selected based on the "),fme=n(B5,"CODE",{});var Alt=s(fme);hWo=r(Alt,"model_type"),Alt.forEach(t),uWo=r(B5,` property of the config object (either
passed as an argument or loaded from `),gme=n(B5,"CODE",{});var Llt=s(gme);pWo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),_Wo=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(B5,"CODE",{});var Blt=s(hme);bWo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),vWo=r(B5,":"),B5.forEach(t),TWo=i(aa),Zd=n(aa,"UL",{});var SW=s(Zd);Y1=n(SW,"LI",{});var TLe=s(Y1);ume=n(TLe,"STRONG",{});var xlt=s(ume);FWo=r(xlt,"deit"),xlt.forEach(t),CWo=r(TLe," \u2014 "),uq=n(TLe,"A",{href:!0});var klt=s(uq);MWo=r(klt,"DeiTForMaskedImageModeling"),klt.forEach(t),EWo=r(TLe," (DeiT model)"),TLe.forEach(t),yWo=i(SW),K1=n(SW,"LI",{});var FLe=s(K1);pme=n(FLe,"STRONG",{});var Rlt=s(pme);wWo=r(Rlt,"swin"),Rlt.forEach(t),AWo=r(FLe," \u2014 "),pq=n(FLe,"A",{href:!0});var Slt=s(pq);LWo=r(Slt,"SwinForMaskedImageModeling"),Slt.forEach(t),BWo=r(FLe," (Swin model)"),FLe.forEach(t),xWo=i(SW),Z1=n(SW,"LI",{});var CLe=s(Z1);_me=n(CLe,"STRONG",{});var Plt=s(_me);kWo=r(Plt,"vit"),Plt.forEach(t),RWo=r(CLe," \u2014 "),_q=n(CLe,"A",{href:!0});var $lt=s(_q);SWo=r($lt,"ViTForMaskedImageModeling"),$lt.forEach(t),PWo=r(CLe," (ViT model)"),CLe.forEach(t),SW.forEach(t),$Wo=i(aa),eF=n(aa,"P",{});var MLe=s(eF);IWo=r(MLe,"The model is set in evaluation mode by default using "),bme=n(MLe,"CODE",{});var Ilt=s(bme);NWo=r(Ilt,"model.eval()"),Ilt.forEach(t),DWo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=n(MLe,"CODE",{});var Nlt=s(vme);jWo=r(Nlt,"model.train()"),Nlt.forEach(t),MLe.forEach(t),qWo=i(aa),Tme=n(aa,"P",{});var Dlt=s(Tme);GWo=r(Dlt,"Examples:"),Dlt.forEach(t),OWo=i(aa),f(cA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Yke=i(c),ec=n(c,"H2",{class:!0});var lPe=s(ec);oF=n(lPe,"A",{id:!0,class:!0,href:!0});var jlt=s(oF);Fme=n(jlt,"SPAN",{});var qlt=s(Fme);f(mA.$$.fragment,qlt),qlt.forEach(t),jlt.forEach(t),XWo=i(lPe),Cme=n(lPe,"SPAN",{});var Glt=s(Cme);VWo=r(Glt,"AutoModelForObjectDetection"),Glt.forEach(t),lPe.forEach(t),Kke=i(c),ur=n(c,"DIV",{class:!0});var kl=s(ur);f(fA.$$.fragment,kl),zWo=i(kl),oc=n(kl,"P",{});var PW=s(oc);WWo=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Mme=n(PW,"CODE",{});var Olt=s(Mme);QWo=r(Olt,"from_pretrained()"),Olt.forEach(t),HWo=r(PW,"class method or the "),Eme=n(PW,"CODE",{});var Xlt=s(Eme);UWo=r(Xlt,"from_config()"),Xlt.forEach(t),JWo=r(PW,`class
method.`),PW.forEach(t),YWo=i(kl),gA=n(kl,"P",{});var iPe=s(gA);KWo=r(iPe,"This class cannot be instantiated directly using "),yme=n(iPe,"CODE",{});var Vlt=s(yme);ZWo=r(Vlt,"__init__()"),Vlt.forEach(t),eQo=r(iPe," (throws an error)."),iPe.forEach(t),oQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);f(hA.$$.fragment,Rl),rQo=i(Rl),wme=n(Rl,"P",{});var zlt=s(wme);tQo=r(zlt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zlt.forEach(t),aQo=i(Rl),rc=n(Rl,"P",{});var $W=s(rc);nQo=r($W,`Note:
Loading a model from its configuration file does `),Ame=n($W,"STRONG",{});var Wlt=s(Ame);sQo=r(Wlt,"not"),Wlt.forEach(t),lQo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=n($W,"CODE",{});var Qlt=s(Lme);iQo=r(Qlt,"from_pretrained()"),Qlt.forEach(t),dQo=r($W,"to load the model weights."),$W.forEach(t),cQo=i(Rl),Bme=n(Rl,"P",{});var Hlt=s(Bme);mQo=r(Hlt,"Examples:"),Hlt.forEach(t),fQo=i(Rl),f(uA.$$.fragment,Rl),Rl.forEach(t),gQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);f(pA.$$.fragment,na),hQo=i(na),xme=n(na,"P",{});var Ult=s(xme);uQo=r(Ult,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ult.forEach(t),pQo=i(na),fn=n(na,"P",{});var x5=s(fn);_Qo=r(x5,"The model class to instantiate is selected based on the "),kme=n(x5,"CODE",{});var Jlt=s(kme);bQo=r(Jlt,"model_type"),Jlt.forEach(t),vQo=r(x5,` property of the config object (either
passed as an argument or loaded from `),Rme=n(x5,"CODE",{});var Ylt=s(Rme);TQo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),FQo=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=n(x5,"CODE",{});var Klt=s(Sme);CQo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),MQo=r(x5,":"),x5.forEach(t),EQo=i(na),Pme=n(na,"UL",{});var Zlt=s(Pme);rF=n(Zlt,"LI",{});var ELe=s(rF);$me=n(ELe,"STRONG",{});var eit=s($me);yQo=r(eit,"detr"),eit.forEach(t),wQo=r(ELe," \u2014 "),bq=n(ELe,"A",{href:!0});var oit=s(bq);AQo=r(oit,"DetrForObjectDetection"),oit.forEach(t),LQo=r(ELe," (DETR model)"),ELe.forEach(t),Zlt.forEach(t),BQo=i(na),tF=n(na,"P",{});var yLe=s(tF);xQo=r(yLe,"The model is set in evaluation mode by default using "),Ime=n(yLe,"CODE",{});var rit=s(Ime);kQo=r(rit,"model.eval()"),rit.forEach(t),RQo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=n(yLe,"CODE",{});var tit=s(Nme);SQo=r(tit,"model.train()"),tit.forEach(t),yLe.forEach(t),PQo=i(na),Dme=n(na,"P",{});var ait=s(Dme);$Qo=r(ait,"Examples:"),ait.forEach(t),IQo=i(na),f(_A.$$.fragment,na),na.forEach(t),kl.forEach(t),Zke=i(c),tc=n(c,"H2",{class:!0});var dPe=s(tc);aF=n(dPe,"A",{id:!0,class:!0,href:!0});var nit=s(aF);jme=n(nit,"SPAN",{});var sit=s(jme);f(bA.$$.fragment,sit),sit.forEach(t),nit.forEach(t),NQo=i(dPe),qme=n(dPe,"SPAN",{});var lit=s(qme);DQo=r(lit,"AutoModelForImageSegmentation"),lit.forEach(t),dPe.forEach(t),eRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);f(vA.$$.fragment,Sl),jQo=i(Sl),ac=n(Sl,"P",{});var IW=s(ac);qQo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Gme=n(IW,"CODE",{});var iit=s(Gme);GQo=r(iit,"from_pretrained()"),iit.forEach(t),OQo=r(IW,"class method or the "),Ome=n(IW,"CODE",{});var dit=s(Ome);XQo=r(dit,"from_config()"),dit.forEach(t),VQo=r(IW,`class
method.`),IW.forEach(t),zQo=i(Sl),TA=n(Sl,"P",{});var cPe=s(TA);WQo=r(cPe,"This class cannot be instantiated directly using "),Xme=n(cPe,"CODE",{});var cit=s(Xme);QQo=r(cit,"__init__()"),cit.forEach(t),HQo=r(cPe," (throws an error)."),cPe.forEach(t),UQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);f(FA.$$.fragment,Pl),JQo=i(Pl),Vme=n(Pl,"P",{});var mit=s(Vme);YQo=r(mit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mit.forEach(t),KQo=i(Pl),nc=n(Pl,"P",{});var NW=s(nc);ZQo=r(NW,`Note:
Loading a model from its configuration file does `),zme=n(NW,"STRONG",{});var fit=s(zme);eHo=r(fit,"not"),fit.forEach(t),oHo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=n(NW,"CODE",{});var git=s(Wme);rHo=r(git,"from_pretrained()"),git.forEach(t),tHo=r(NW,"to load the model weights."),NW.forEach(t),aHo=i(Pl),Qme=n(Pl,"P",{});var hit=s(Qme);nHo=r(hit,"Examples:"),hit.forEach(t),sHo=i(Pl),f(CA.$$.fragment,Pl),Pl.forEach(t),lHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);f(MA.$$.fragment,sa),iHo=i(sa),Hme=n(sa,"P",{});var uit=s(Hme);dHo=r(uit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uit.forEach(t),cHo=i(sa),gn=n(sa,"P",{});var k5=s(gn);mHo=r(k5,"The model class to instantiate is selected based on the "),Ume=n(k5,"CODE",{});var pit=s(Ume);fHo=r(pit,"model_type"),pit.forEach(t),gHo=r(k5,` property of the config object (either
passed as an argument or loaded from `),Jme=n(k5,"CODE",{});var _it=s(Jme);hHo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),uHo=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(k5,"CODE",{});var bit=s(Yme);pHo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),_Ho=r(k5,":"),k5.forEach(t),bHo=i(sa),Kme=n(sa,"UL",{});var vit=s(Kme);nF=n(vit,"LI",{});var wLe=s(nF);Zme=n(wLe,"STRONG",{});var Tit=s(Zme);vHo=r(Tit,"detr"),Tit.forEach(t),THo=r(wLe," \u2014 "),vq=n(wLe,"A",{href:!0});var Fit=s(vq);FHo=r(Fit,"DetrForSegmentation"),Fit.forEach(t),CHo=r(wLe," (DETR model)"),wLe.forEach(t),vit.forEach(t),MHo=i(sa),sF=n(sa,"P",{});var ALe=s(sF);EHo=r(ALe,"The model is set in evaluation mode by default using "),efe=n(ALe,"CODE",{});var Cit=s(efe);yHo=r(Cit,"model.eval()"),Cit.forEach(t),wHo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(ALe,"CODE",{});var Mit=s(ofe);AHo=r(Mit,"model.train()"),Mit.forEach(t),ALe.forEach(t),LHo=i(sa),rfe=n(sa,"P",{});var Eit=s(rfe);BHo=r(Eit,"Examples:"),Eit.forEach(t),xHo=i(sa),f(EA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),oRe=i(c),sc=n(c,"H2",{class:!0});var mPe=s(sc);lF=n(mPe,"A",{id:!0,class:!0,href:!0});var yit=s(lF);tfe=n(yit,"SPAN",{});var wit=s(tfe);f(yA.$$.fragment,wit),wit.forEach(t),yit.forEach(t),kHo=i(mPe),afe=n(mPe,"SPAN",{});var Ait=s(afe);RHo=r(Ait,"AutoModelForSemanticSegmentation"),Ait.forEach(t),mPe.forEach(t),rRe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);f(wA.$$.fragment,$l),SHo=i($l),lc=n($l,"P",{});var DW=s(lc);PHo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),nfe=n(DW,"CODE",{});var Lit=s(nfe);$Ho=r(Lit,"from_pretrained()"),Lit.forEach(t),IHo=r(DW,"class method or the "),sfe=n(DW,"CODE",{});var Bit=s(sfe);NHo=r(Bit,"from_config()"),Bit.forEach(t),DHo=r(DW,`class
method.`),DW.forEach(t),jHo=i($l),AA=n($l,"P",{});var fPe=s(AA);qHo=r(fPe,"This class cannot be instantiated directly using "),lfe=n(fPe,"CODE",{});var xit=s(lfe);GHo=r(xit,"__init__()"),xit.forEach(t),OHo=r(fPe," (throws an error)."),fPe.forEach(t),XHo=i($l),mt=n($l,"DIV",{class:!0});var Il=s(mt);f(LA.$$.fragment,Il),VHo=i(Il),ife=n(Il,"P",{});var kit=s(ife);zHo=r(kit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kit.forEach(t),WHo=i(Il),ic=n(Il,"P",{});var jW=s(ic);QHo=r(jW,`Note:
Loading a model from its configuration file does `),dfe=n(jW,"STRONG",{});var Rit=s(dfe);HHo=r(Rit,"not"),Rit.forEach(t),UHo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=n(jW,"CODE",{});var Sit=s(cfe);JHo=r(Sit,"from_pretrained()"),Sit.forEach(t),YHo=r(jW,"to load the model weights."),jW.forEach(t),KHo=i(Il),mfe=n(Il,"P",{});var Pit=s(mfe);ZHo=r(Pit,"Examples:"),Pit.forEach(t),eUo=i(Il),f(BA.$$.fragment,Il),Il.forEach(t),oUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);f(xA.$$.fragment,la),rUo=i(la),ffe=n(la,"P",{});var $it=s(ffe);tUo=r($it,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$it.forEach(t),aUo=i(la),hn=n(la,"P",{});var R5=s(hn);nUo=r(R5,"The model class to instantiate is selected based on the "),gfe=n(R5,"CODE",{});var Iit=s(gfe);sUo=r(Iit,"model_type"),Iit.forEach(t),lUo=r(R5,` property of the config object (either
passed as an argument or loaded from `),hfe=n(R5,"CODE",{});var Nit=s(hfe);iUo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),dUo=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(R5,"CODE",{});var Dit=s(ufe);cUo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),mUo=r(R5,":"),R5.forEach(t),fUo=i(la),kA=n(la,"UL",{});var gPe=s(kA);iF=n(gPe,"LI",{});var LLe=s(iF);pfe=n(LLe,"STRONG",{});var jit=s(pfe);gUo=r(jit,"beit"),jit.forEach(t),hUo=r(LLe," \u2014 "),Tq=n(LLe,"A",{href:!0});var qit=s(Tq);uUo=r(qit,"BeitForSemanticSegmentation"),qit.forEach(t),pUo=r(LLe," (BEiT model)"),LLe.forEach(t),_Uo=i(gPe),dF=n(gPe,"LI",{});var BLe=s(dF);_fe=n(BLe,"STRONG",{});var Git=s(_fe);bUo=r(Git,"segformer"),Git.forEach(t),vUo=r(BLe," \u2014 "),Fq=n(BLe,"A",{href:!0});var Oit=s(Fq);TUo=r(Oit,"SegformerForSemanticSegmentation"),Oit.forEach(t),FUo=r(BLe," (SegFormer model)"),BLe.forEach(t),gPe.forEach(t),CUo=i(la),cF=n(la,"P",{});var xLe=s(cF);MUo=r(xLe,"The model is set in evaluation mode by default using "),bfe=n(xLe,"CODE",{});var Xit=s(bfe);EUo=r(Xit,"model.eval()"),Xit.forEach(t),yUo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(xLe,"CODE",{});var Vit=s(vfe);wUo=r(Vit,"model.train()"),Vit.forEach(t),xLe.forEach(t),AUo=i(la),Tfe=n(la,"P",{});var zit=s(Tfe);LUo=r(zit,"Examples:"),zit.forEach(t),BUo=i(la),f(RA.$$.fragment,la),la.forEach(t),$l.forEach(t),tRe=i(c),dc=n(c,"H2",{class:!0});var hPe=s(dc);mF=n(hPe,"A",{id:!0,class:!0,href:!0});var Wit=s(mF);Ffe=n(Wit,"SPAN",{});var Qit=s(Ffe);f(SA.$$.fragment,Qit),Qit.forEach(t),Wit.forEach(t),xUo=i(hPe),Cfe=n(hPe,"SPAN",{});var Hit=s(Cfe);kUo=r(Hit,"AutoModelForInstanceSegmentation"),Hit.forEach(t),hPe.forEach(t),aRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);f(PA.$$.fragment,Nl),RUo=i(Nl),cc=n(Nl,"P",{});var qW=s(cc);SUo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Mfe=n(qW,"CODE",{});var Uit=s(Mfe);PUo=r(Uit,"from_pretrained()"),Uit.forEach(t),$Uo=r(qW,"class method or the "),Efe=n(qW,"CODE",{});var Jit=s(Efe);IUo=r(Jit,"from_config()"),Jit.forEach(t),NUo=r(qW,`class
method.`),qW.forEach(t),DUo=i(Nl),$A=n(Nl,"P",{});var uPe=s($A);jUo=r(uPe,"This class cannot be instantiated directly using "),yfe=n(uPe,"CODE",{});var Yit=s(yfe);qUo=r(Yit,"__init__()"),Yit.forEach(t),GUo=r(uPe," (throws an error)."),uPe.forEach(t),OUo=i(Nl),ft=n(Nl,"DIV",{class:!0});var Dl=s(ft);f(IA.$$.fragment,Dl),XUo=i(Dl),wfe=n(Dl,"P",{});var Kit=s(wfe);VUo=r(Kit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Kit.forEach(t),zUo=i(Dl),mc=n(Dl,"P",{});var GW=s(mc);WUo=r(GW,`Note:
Loading a model from its configuration file does `),Afe=n(GW,"STRONG",{});var Zit=s(Afe);QUo=r(Zit,"not"),Zit.forEach(t),HUo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=n(GW,"CODE",{});var edt=s(Lfe);UUo=r(edt,"from_pretrained()"),edt.forEach(t),JUo=r(GW,"to load the model weights."),GW.forEach(t),YUo=i(Dl),Bfe=n(Dl,"P",{});var odt=s(Bfe);KUo=r(odt,"Examples:"),odt.forEach(t),ZUo=i(Dl),f(NA.$$.fragment,Dl),Dl.forEach(t),eJo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);f(DA.$$.fragment,ia),oJo=i(ia),xfe=n(ia,"P",{});var rdt=s(xfe);rJo=r(rdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rdt.forEach(t),tJo=i(ia),un=n(ia,"P",{});var S5=s(un);aJo=r(S5,"The model class to instantiate is selected based on the "),kfe=n(S5,"CODE",{});var tdt=s(kfe);nJo=r(tdt,"model_type"),tdt.forEach(t),sJo=r(S5,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(S5,"CODE",{});var adt=s(Rfe);lJo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),iJo=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(S5,"CODE",{});var ndt=s(Sfe);dJo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),cJo=r(S5,":"),S5.forEach(t),mJo=i(ia),Pfe=n(ia,"UL",{});var sdt=s(Pfe);fF=n(sdt,"LI",{});var kLe=s(fF);$fe=n(kLe,"STRONG",{});var ldt=s($fe);fJo=r(ldt,"maskformer"),ldt.forEach(t),gJo=r(kLe," \u2014 "),Cq=n(kLe,"A",{href:!0});var idt=s(Cq);hJo=r(idt,"MaskFormerForInstanceSegmentation"),idt.forEach(t),uJo=r(kLe," (MaskFormer model)"),kLe.forEach(t),sdt.forEach(t),pJo=i(ia),gF=n(ia,"P",{});var RLe=s(gF);_Jo=r(RLe,"The model is set in evaluation mode by default using "),Ife=n(RLe,"CODE",{});var ddt=s(Ife);bJo=r(ddt,"model.eval()"),ddt.forEach(t),vJo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(RLe,"CODE",{});var cdt=s(Nfe);TJo=r(cdt,"model.train()"),cdt.forEach(t),RLe.forEach(t),FJo=i(ia),Dfe=n(ia,"P",{});var mdt=s(Dfe);CJo=r(mdt,"Examples:"),mdt.forEach(t),MJo=i(ia),f(jA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),nRe=i(c),fc=n(c,"H2",{class:!0});var pPe=s(fc);hF=n(pPe,"A",{id:!0,class:!0,href:!0});var fdt=s(hF);jfe=n(fdt,"SPAN",{});var gdt=s(jfe);f(qA.$$.fragment,gdt),gdt.forEach(t),fdt.forEach(t),EJo=i(pPe),qfe=n(pPe,"SPAN",{});var hdt=s(qfe);yJo=r(hdt,"TFAutoModel"),hdt.forEach(t),pPe.forEach(t),sRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);f(GA.$$.fragment,jl),wJo=i(jl),gc=n(jl,"P",{});var OW=s(gc);AJo=r(OW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gfe=n(OW,"CODE",{});var udt=s(Gfe);LJo=r(udt,"from_pretrained()"),udt.forEach(t),BJo=r(OW,"class method or the "),Ofe=n(OW,"CODE",{});var pdt=s(Ofe);xJo=r(pdt,"from_config()"),pdt.forEach(t),kJo=r(OW,`class
method.`),OW.forEach(t),RJo=i(jl),OA=n(jl,"P",{});var _Pe=s(OA);SJo=r(_Pe,"This class cannot be instantiated directly using "),Xfe=n(_Pe,"CODE",{});var _dt=s(Xfe);PJo=r(_dt,"__init__()"),_dt.forEach(t),$Jo=r(_Pe," (throws an error)."),_Pe.forEach(t),IJo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);f(XA.$$.fragment,ql),NJo=i(ql),Vfe=n(ql,"P",{});var bdt=s(Vfe);DJo=r(bdt,"Instantiates one of the base model classes of the library from a configuration."),bdt.forEach(t),jJo=i(ql),hc=n(ql,"P",{});var XW=s(hc);qJo=r(XW,`Note:
Loading a model from its configuration file does `),zfe=n(XW,"STRONG",{});var vdt=s(zfe);GJo=r(vdt,"not"),vdt.forEach(t),OJo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=n(XW,"CODE",{});var Tdt=s(Wfe);XJo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),VJo=r(XW,"to load the model weights."),XW.forEach(t),zJo=i(ql),Qfe=n(ql,"P",{});var Fdt=s(Qfe);WJo=r(Fdt,"Examples:"),Fdt.forEach(t),QJo=i(ql),f(VA.$$.fragment,ql),ql.forEach(t),HJo=i(jl),ho=n(jl,"DIV",{class:!0});var ua=s(ho);f(zA.$$.fragment,ua),UJo=i(ua),Hfe=n(ua,"P",{});var Cdt=s(Hfe);JJo=r(Cdt,"Instantiate one of the base model classes of the library from a pretrained model."),Cdt.forEach(t),YJo=i(ua),pn=n(ua,"P",{});var P5=s(pn);KJo=r(P5,"The model class to instantiate is selected based on the "),Ufe=n(P5,"CODE",{});var Mdt=s(Ufe);ZJo=r(Mdt,"model_type"),Mdt.forEach(t),eYo=r(P5,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(P5,"CODE",{});var Edt=s(Jfe);oYo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),rYo=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(P5,"CODE",{});var ydt=s(Yfe);tYo=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),aYo=r(P5,":"),P5.forEach(t),nYo=i(ua),B=n(ua,"UL",{});var x=s(B);uF=n(x,"LI",{});var SLe=s(uF);Kfe=n(SLe,"STRONG",{});var wdt=s(Kfe);sYo=r(wdt,"albert"),wdt.forEach(t),lYo=r(SLe," \u2014 "),Mq=n(SLe,"A",{href:!0});var Adt=s(Mq);iYo=r(Adt,"TFAlbertModel"),Adt.forEach(t),dYo=r(SLe," (ALBERT model)"),SLe.forEach(t),cYo=i(x),pF=n(x,"LI",{});var PLe=s(pF);Zfe=n(PLe,"STRONG",{});var Ldt=s(Zfe);mYo=r(Ldt,"bart"),Ldt.forEach(t),fYo=r(PLe," \u2014 "),Eq=n(PLe,"A",{href:!0});var Bdt=s(Eq);gYo=r(Bdt,"TFBartModel"),Bdt.forEach(t),hYo=r(PLe," (BART model)"),PLe.forEach(t),uYo=i(x),_F=n(x,"LI",{});var $Le=s(_F);ege=n($Le,"STRONG",{});var xdt=s(ege);pYo=r(xdt,"bert"),xdt.forEach(t),_Yo=r($Le," \u2014 "),yq=n($Le,"A",{href:!0});var kdt=s(yq);bYo=r(kdt,"TFBertModel"),kdt.forEach(t),vYo=r($Le," (BERT model)"),$Le.forEach(t),TYo=i(x),bF=n(x,"LI",{});var ILe=s(bF);oge=n(ILe,"STRONG",{});var Rdt=s(oge);FYo=r(Rdt,"blenderbot"),Rdt.forEach(t),CYo=r(ILe," \u2014 "),wq=n(ILe,"A",{href:!0});var Sdt=s(wq);MYo=r(Sdt,"TFBlenderbotModel"),Sdt.forEach(t),EYo=r(ILe," (Blenderbot model)"),ILe.forEach(t),yYo=i(x),vF=n(x,"LI",{});var NLe=s(vF);rge=n(NLe,"STRONG",{});var Pdt=s(rge);wYo=r(Pdt,"blenderbot-small"),Pdt.forEach(t),AYo=r(NLe," \u2014 "),Aq=n(NLe,"A",{href:!0});var $dt=s(Aq);LYo=r($dt,"TFBlenderbotSmallModel"),$dt.forEach(t),BYo=r(NLe," (BlenderbotSmall model)"),NLe.forEach(t),xYo=i(x),TF=n(x,"LI",{});var DLe=s(TF);tge=n(DLe,"STRONG",{});var Idt=s(tge);kYo=r(Idt,"camembert"),Idt.forEach(t),RYo=r(DLe," \u2014 "),Lq=n(DLe,"A",{href:!0});var Ndt=s(Lq);SYo=r(Ndt,"TFCamembertModel"),Ndt.forEach(t),PYo=r(DLe," (CamemBERT model)"),DLe.forEach(t),$Yo=i(x),FF=n(x,"LI",{});var jLe=s(FF);age=n(jLe,"STRONG",{});var Ddt=s(age);IYo=r(Ddt,"clip"),Ddt.forEach(t),NYo=r(jLe," \u2014 "),Bq=n(jLe,"A",{href:!0});var jdt=s(Bq);DYo=r(jdt,"TFCLIPModel"),jdt.forEach(t),jYo=r(jLe," (CLIP model)"),jLe.forEach(t),qYo=i(x),CF=n(x,"LI",{});var qLe=s(CF);nge=n(qLe,"STRONG",{});var qdt=s(nge);GYo=r(qdt,"convbert"),qdt.forEach(t),OYo=r(qLe," \u2014 "),xq=n(qLe,"A",{href:!0});var Gdt=s(xq);XYo=r(Gdt,"TFConvBertModel"),Gdt.forEach(t),VYo=r(qLe," (ConvBERT model)"),qLe.forEach(t),zYo=i(x),MF=n(x,"LI",{});var GLe=s(MF);sge=n(GLe,"STRONG",{});var Odt=s(sge);WYo=r(Odt,"convnext"),Odt.forEach(t),QYo=r(GLe," \u2014 "),kq=n(GLe,"A",{href:!0});var Xdt=s(kq);HYo=r(Xdt,"TFConvNextModel"),Xdt.forEach(t),UYo=r(GLe," (ConvNext model)"),GLe.forEach(t),JYo=i(x),EF=n(x,"LI",{});var OLe=s(EF);lge=n(OLe,"STRONG",{});var Vdt=s(lge);YYo=r(Vdt,"ctrl"),Vdt.forEach(t),KYo=r(OLe," \u2014 "),Rq=n(OLe,"A",{href:!0});var zdt=s(Rq);ZYo=r(zdt,"TFCTRLModel"),zdt.forEach(t),eKo=r(OLe," (CTRL model)"),OLe.forEach(t),oKo=i(x),yF=n(x,"LI",{});var XLe=s(yF);ige=n(XLe,"STRONG",{});var Wdt=s(ige);rKo=r(Wdt,"deberta"),Wdt.forEach(t),tKo=r(XLe," \u2014 "),Sq=n(XLe,"A",{href:!0});var Qdt=s(Sq);aKo=r(Qdt,"TFDebertaModel"),Qdt.forEach(t),nKo=r(XLe," (DeBERTa model)"),XLe.forEach(t),sKo=i(x),wF=n(x,"LI",{});var VLe=s(wF);dge=n(VLe,"STRONG",{});var Hdt=s(dge);lKo=r(Hdt,"deberta-v2"),Hdt.forEach(t),iKo=r(VLe," \u2014 "),Pq=n(VLe,"A",{href:!0});var Udt=s(Pq);dKo=r(Udt,"TFDebertaV2Model"),Udt.forEach(t),cKo=r(VLe," (DeBERTa-v2 model)"),VLe.forEach(t),mKo=i(x),AF=n(x,"LI",{});var zLe=s(AF);cge=n(zLe,"STRONG",{});var Jdt=s(cge);fKo=r(Jdt,"distilbert"),Jdt.forEach(t),gKo=r(zLe," \u2014 "),$q=n(zLe,"A",{href:!0});var Ydt=s($q);hKo=r(Ydt,"TFDistilBertModel"),Ydt.forEach(t),uKo=r(zLe," (DistilBERT model)"),zLe.forEach(t),pKo=i(x),LF=n(x,"LI",{});var WLe=s(LF);mge=n(WLe,"STRONG",{});var Kdt=s(mge);_Ko=r(Kdt,"dpr"),Kdt.forEach(t),bKo=r(WLe," \u2014 "),Iq=n(WLe,"A",{href:!0});var Zdt=s(Iq);vKo=r(Zdt,"TFDPRQuestionEncoder"),Zdt.forEach(t),TKo=r(WLe," (DPR model)"),WLe.forEach(t),FKo=i(x),BF=n(x,"LI",{});var QLe=s(BF);fge=n(QLe,"STRONG",{});var ect=s(fge);CKo=r(ect,"electra"),ect.forEach(t),MKo=r(QLe," \u2014 "),Nq=n(QLe,"A",{href:!0});var oct=s(Nq);EKo=r(oct,"TFElectraModel"),oct.forEach(t),yKo=r(QLe," (ELECTRA model)"),QLe.forEach(t),wKo=i(x),xF=n(x,"LI",{});var HLe=s(xF);gge=n(HLe,"STRONG",{});var rct=s(gge);AKo=r(rct,"flaubert"),rct.forEach(t),LKo=r(HLe," \u2014 "),Dq=n(HLe,"A",{href:!0});var tct=s(Dq);BKo=r(tct,"TFFlaubertModel"),tct.forEach(t),xKo=r(HLe," (FlauBERT model)"),HLe.forEach(t),kKo=i(x),Gs=n(x,"LI",{});var Y8=s(Gs);hge=n(Y8,"STRONG",{});var act=s(hge);RKo=r(act,"funnel"),act.forEach(t),SKo=r(Y8," \u2014 "),jq=n(Y8,"A",{href:!0});var nct=s(jq);PKo=r(nct,"TFFunnelModel"),nct.forEach(t),$Ko=r(Y8," or "),qq=n(Y8,"A",{href:!0});var sct=s(qq);IKo=r(sct,"TFFunnelBaseModel"),sct.forEach(t),NKo=r(Y8," (Funnel Transformer model)"),Y8.forEach(t),DKo=i(x),kF=n(x,"LI",{});var ULe=s(kF);uge=n(ULe,"STRONG",{});var lct=s(uge);jKo=r(lct,"gpt2"),lct.forEach(t),qKo=r(ULe," \u2014 "),Gq=n(ULe,"A",{href:!0});var ict=s(Gq);GKo=r(ict,"TFGPT2Model"),ict.forEach(t),OKo=r(ULe," (OpenAI GPT-2 model)"),ULe.forEach(t),XKo=i(x),RF=n(x,"LI",{});var JLe=s(RF);pge=n(JLe,"STRONG",{});var dct=s(pge);VKo=r(dct,"hubert"),dct.forEach(t),zKo=r(JLe," \u2014 "),Oq=n(JLe,"A",{href:!0});var cct=s(Oq);WKo=r(cct,"TFHubertModel"),cct.forEach(t),QKo=r(JLe," (Hubert model)"),JLe.forEach(t),HKo=i(x),SF=n(x,"LI",{});var YLe=s(SF);_ge=n(YLe,"STRONG",{});var mct=s(_ge);UKo=r(mct,"layoutlm"),mct.forEach(t),JKo=r(YLe," \u2014 "),Xq=n(YLe,"A",{href:!0});var fct=s(Xq);YKo=r(fct,"TFLayoutLMModel"),fct.forEach(t),KKo=r(YLe," (LayoutLM model)"),YLe.forEach(t),ZKo=i(x),PF=n(x,"LI",{});var KLe=s(PF);bge=n(KLe,"STRONG",{});var gct=s(bge);eZo=r(gct,"led"),gct.forEach(t),oZo=r(KLe," \u2014 "),Vq=n(KLe,"A",{href:!0});var hct=s(Vq);rZo=r(hct,"TFLEDModel"),hct.forEach(t),tZo=r(KLe," (LED model)"),KLe.forEach(t),aZo=i(x),$F=n(x,"LI",{});var ZLe=s($F);vge=n(ZLe,"STRONG",{});var uct=s(vge);nZo=r(uct,"longformer"),uct.forEach(t),sZo=r(ZLe," \u2014 "),zq=n(ZLe,"A",{href:!0});var pct=s(zq);lZo=r(pct,"TFLongformerModel"),pct.forEach(t),iZo=r(ZLe," (Longformer model)"),ZLe.forEach(t),dZo=i(x),IF=n(x,"LI",{});var e7e=s(IF);Tge=n(e7e,"STRONG",{});var _ct=s(Tge);cZo=r(_ct,"lxmert"),_ct.forEach(t),mZo=r(e7e," \u2014 "),Wq=n(e7e,"A",{href:!0});var bct=s(Wq);fZo=r(bct,"TFLxmertModel"),bct.forEach(t),gZo=r(e7e," (LXMERT model)"),e7e.forEach(t),hZo=i(x),NF=n(x,"LI",{});var o7e=s(NF);Fge=n(o7e,"STRONG",{});var vct=s(Fge);uZo=r(vct,"marian"),vct.forEach(t),pZo=r(o7e," \u2014 "),Qq=n(o7e,"A",{href:!0});var Tct=s(Qq);_Zo=r(Tct,"TFMarianModel"),Tct.forEach(t),bZo=r(o7e," (Marian model)"),o7e.forEach(t),vZo=i(x),DF=n(x,"LI",{});var r7e=s(DF);Cge=n(r7e,"STRONG",{});var Fct=s(Cge);TZo=r(Fct,"mbart"),Fct.forEach(t),FZo=r(r7e," \u2014 "),Hq=n(r7e,"A",{href:!0});var Cct=s(Hq);CZo=r(Cct,"TFMBartModel"),Cct.forEach(t),MZo=r(r7e," (mBART model)"),r7e.forEach(t),EZo=i(x),jF=n(x,"LI",{});var t7e=s(jF);Mge=n(t7e,"STRONG",{});var Mct=s(Mge);yZo=r(Mct,"mobilebert"),Mct.forEach(t),wZo=r(t7e," \u2014 "),Uq=n(t7e,"A",{href:!0});var Ect=s(Uq);AZo=r(Ect,"TFMobileBertModel"),Ect.forEach(t),LZo=r(t7e," (MobileBERT model)"),t7e.forEach(t),BZo=i(x),qF=n(x,"LI",{});var a7e=s(qF);Ege=n(a7e,"STRONG",{});var yct=s(Ege);xZo=r(yct,"mpnet"),yct.forEach(t),kZo=r(a7e," \u2014 "),Jq=n(a7e,"A",{href:!0});var wct=s(Jq);RZo=r(wct,"TFMPNetModel"),wct.forEach(t),SZo=r(a7e," (MPNet model)"),a7e.forEach(t),PZo=i(x),GF=n(x,"LI",{});var n7e=s(GF);yge=n(n7e,"STRONG",{});var Act=s(yge);$Zo=r(Act,"mt5"),Act.forEach(t),IZo=r(n7e," \u2014 "),Yq=n(n7e,"A",{href:!0});var Lct=s(Yq);NZo=r(Lct,"TFMT5Model"),Lct.forEach(t),DZo=r(n7e," (mT5 model)"),n7e.forEach(t),jZo=i(x),OF=n(x,"LI",{});var s7e=s(OF);wge=n(s7e,"STRONG",{});var Bct=s(wge);qZo=r(Bct,"openai-gpt"),Bct.forEach(t),GZo=r(s7e," \u2014 "),Kq=n(s7e,"A",{href:!0});var xct=s(Kq);OZo=r(xct,"TFOpenAIGPTModel"),xct.forEach(t),XZo=r(s7e," (OpenAI GPT model)"),s7e.forEach(t),VZo=i(x),XF=n(x,"LI",{});var l7e=s(XF);Age=n(l7e,"STRONG",{});var kct=s(Age);zZo=r(kct,"pegasus"),kct.forEach(t),WZo=r(l7e," \u2014 "),Zq=n(l7e,"A",{href:!0});var Rct=s(Zq);QZo=r(Rct,"TFPegasusModel"),Rct.forEach(t),HZo=r(l7e," (Pegasus model)"),l7e.forEach(t),UZo=i(x),VF=n(x,"LI",{});var i7e=s(VF);Lge=n(i7e,"STRONG",{});var Sct=s(Lge);JZo=r(Sct,"rembert"),Sct.forEach(t),YZo=r(i7e," \u2014 "),eG=n(i7e,"A",{href:!0});var Pct=s(eG);KZo=r(Pct,"TFRemBertModel"),Pct.forEach(t),ZZo=r(i7e," (RemBERT model)"),i7e.forEach(t),eer=i(x),zF=n(x,"LI",{});var d7e=s(zF);Bge=n(d7e,"STRONG",{});var $ct=s(Bge);oer=r($ct,"roberta"),$ct.forEach(t),rer=r(d7e," \u2014 "),oG=n(d7e,"A",{href:!0});var Ict=s(oG);ter=r(Ict,"TFRobertaModel"),Ict.forEach(t),aer=r(d7e," (RoBERTa model)"),d7e.forEach(t),ner=i(x),WF=n(x,"LI",{});var c7e=s(WF);xge=n(c7e,"STRONG",{});var Nct=s(xge);ser=r(Nct,"roformer"),Nct.forEach(t),ler=r(c7e," \u2014 "),rG=n(c7e,"A",{href:!0});var Dct=s(rG);ier=r(Dct,"TFRoFormerModel"),Dct.forEach(t),der=r(c7e," (RoFormer model)"),c7e.forEach(t),cer=i(x),QF=n(x,"LI",{});var m7e=s(QF);kge=n(m7e,"STRONG",{});var jct=s(kge);mer=r(jct,"speech_to_text"),jct.forEach(t),fer=r(m7e," \u2014 "),tG=n(m7e,"A",{href:!0});var qct=s(tG);ger=r(qct,"TFSpeech2TextModel"),qct.forEach(t),her=r(m7e," (Speech2Text model)"),m7e.forEach(t),uer=i(x),HF=n(x,"LI",{});var f7e=s(HF);Rge=n(f7e,"STRONG",{});var Gct=s(Rge);per=r(Gct,"t5"),Gct.forEach(t),_er=r(f7e," \u2014 "),aG=n(f7e,"A",{href:!0});var Oct=s(aG);ber=r(Oct,"TFT5Model"),Oct.forEach(t),ver=r(f7e," (T5 model)"),f7e.forEach(t),Ter=i(x),UF=n(x,"LI",{});var g7e=s(UF);Sge=n(g7e,"STRONG",{});var Xct=s(Sge);Fer=r(Xct,"tapas"),Xct.forEach(t),Cer=r(g7e," \u2014 "),nG=n(g7e,"A",{href:!0});var Vct=s(nG);Mer=r(Vct,"TFTapasModel"),Vct.forEach(t),Eer=r(g7e," (TAPAS model)"),g7e.forEach(t),yer=i(x),JF=n(x,"LI",{});var h7e=s(JF);Pge=n(h7e,"STRONG",{});var zct=s(Pge);wer=r(zct,"transfo-xl"),zct.forEach(t),Aer=r(h7e," \u2014 "),sG=n(h7e,"A",{href:!0});var Wct=s(sG);Ler=r(Wct,"TFTransfoXLModel"),Wct.forEach(t),Ber=r(h7e," (Transformer-XL model)"),h7e.forEach(t),xer=i(x),YF=n(x,"LI",{});var u7e=s(YF);$ge=n(u7e,"STRONG",{});var Qct=s($ge);ker=r(Qct,"vit"),Qct.forEach(t),Rer=r(u7e," \u2014 "),lG=n(u7e,"A",{href:!0});var Hct=s(lG);Ser=r(Hct,"TFViTModel"),Hct.forEach(t),Per=r(u7e," (ViT model)"),u7e.forEach(t),$er=i(x),KF=n(x,"LI",{});var p7e=s(KF);Ige=n(p7e,"STRONG",{});var Uct=s(Ige);Ier=r(Uct,"wav2vec2"),Uct.forEach(t),Ner=r(p7e," \u2014 "),iG=n(p7e,"A",{href:!0});var Jct=s(iG);Der=r(Jct,"TFWav2Vec2Model"),Jct.forEach(t),jer=r(p7e," (Wav2Vec2 model)"),p7e.forEach(t),qer=i(x),ZF=n(x,"LI",{});var _7e=s(ZF);Nge=n(_7e,"STRONG",{});var Yct=s(Nge);Ger=r(Yct,"xlm"),Yct.forEach(t),Oer=r(_7e," \u2014 "),dG=n(_7e,"A",{href:!0});var Kct=s(dG);Xer=r(Kct,"TFXLMModel"),Kct.forEach(t),Ver=r(_7e," (XLM model)"),_7e.forEach(t),zer=i(x),eC=n(x,"LI",{});var b7e=s(eC);Dge=n(b7e,"STRONG",{});var Zct=s(Dge);Wer=r(Zct,"xlm-roberta"),Zct.forEach(t),Qer=r(b7e," \u2014 "),cG=n(b7e,"A",{href:!0});var emt=s(cG);Her=r(emt,"TFXLMRobertaModel"),emt.forEach(t),Uer=r(b7e," (XLM-RoBERTa model)"),b7e.forEach(t),Jer=i(x),oC=n(x,"LI",{});var v7e=s(oC);jge=n(v7e,"STRONG",{});var omt=s(jge);Yer=r(omt,"xlnet"),omt.forEach(t),Ker=r(v7e," \u2014 "),mG=n(v7e,"A",{href:!0});var rmt=s(mG);Zer=r(rmt,"TFXLNetModel"),rmt.forEach(t),eor=r(v7e," (XLNet model)"),v7e.forEach(t),x.forEach(t),oor=i(ua),qge=n(ua,"P",{});var tmt=s(qge);ror=r(tmt,"Examples:"),tmt.forEach(t),tor=i(ua),f(WA.$$.fragment,ua),ua.forEach(t),jl.forEach(t),lRe=i(c),uc=n(c,"H2",{class:!0});var bPe=s(uc);rC=n(bPe,"A",{id:!0,class:!0,href:!0});var amt=s(rC);Gge=n(amt,"SPAN",{});var nmt=s(Gge);f(QA.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),aor=i(bPe),Oge=n(bPe,"SPAN",{});var smt=s(Oge);nor=r(smt,"TFAutoModelForPreTraining"),smt.forEach(t),bPe.forEach(t),iRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);f(HA.$$.fragment,Gl),sor=i(Gl),pc=n(Gl,"P",{});var VW=s(pc);lor=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xge=n(VW,"CODE",{});var lmt=s(Xge);ior=r(lmt,"from_pretrained()"),lmt.forEach(t),dor=r(VW,"class method or the "),Vge=n(VW,"CODE",{});var imt=s(Vge);cor=r(imt,"from_config()"),imt.forEach(t),mor=r(VW,`class
method.`),VW.forEach(t),gor=i(Gl),UA=n(Gl,"P",{});var vPe=s(UA);hor=r(vPe,"This class cannot be instantiated directly using "),zge=n(vPe,"CODE",{});var dmt=s(zge);uor=r(dmt,"__init__()"),dmt.forEach(t),por=r(vPe," (throws an error)."),vPe.forEach(t),_or=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);f(JA.$$.fragment,Ol),bor=i(Ol),Wge=n(Ol,"P",{});var cmt=s(Wge);vor=r(cmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cmt.forEach(t),Tor=i(Ol),_c=n(Ol,"P",{});var zW=s(_c);For=r(zW,`Note:
Loading a model from its configuration file does `),Qge=n(zW,"STRONG",{});var mmt=s(Qge);Cor=r(mmt,"not"),mmt.forEach(t),Mor=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=n(zW,"CODE",{});var fmt=s(Hge);Eor=r(fmt,"from_pretrained()"),fmt.forEach(t),yor=r(zW,"to load the model weights."),zW.forEach(t),wor=i(Ol),Uge=n(Ol,"P",{});var gmt=s(Uge);Aor=r(gmt,"Examples:"),gmt.forEach(t),Lor=i(Ol),f(YA.$$.fragment,Ol),Ol.forEach(t),Bor=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);f(KA.$$.fragment,pa),xor=i(pa),Jge=n(pa,"P",{});var hmt=s(Jge);kor=r(hmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hmt.forEach(t),Ror=i(pa),_n=n(pa,"P",{});var $5=s(_n);Sor=r($5,"The model class to instantiate is selected based on the "),Yge=n($5,"CODE",{});var umt=s(Yge);Por=r(umt,"model_type"),umt.forEach(t),$or=r($5,` property of the config object (either
passed as an argument or loaded from `),Kge=n($5,"CODE",{});var pmt=s(Kge);Ior=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),Nor=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n($5,"CODE",{});var _mt=s(Zge);Dor=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),jor=r($5,":"),$5.forEach(t),qor=i(pa),H=n(pa,"UL",{});var U=s(H);tC=n(U,"LI",{});var T7e=s(tC);ehe=n(T7e,"STRONG",{});var bmt=s(ehe);Gor=r(bmt,"albert"),bmt.forEach(t),Oor=r(T7e," \u2014 "),fG=n(T7e,"A",{href:!0});var vmt=s(fG);Xor=r(vmt,"TFAlbertForPreTraining"),vmt.forEach(t),Vor=r(T7e," (ALBERT model)"),T7e.forEach(t),zor=i(U),aC=n(U,"LI",{});var F7e=s(aC);ohe=n(F7e,"STRONG",{});var Tmt=s(ohe);Wor=r(Tmt,"bart"),Tmt.forEach(t),Qor=r(F7e," \u2014 "),gG=n(F7e,"A",{href:!0});var Fmt=s(gG);Hor=r(Fmt,"TFBartForConditionalGeneration"),Fmt.forEach(t),Uor=r(F7e," (BART model)"),F7e.forEach(t),Jor=i(U),nC=n(U,"LI",{});var C7e=s(nC);rhe=n(C7e,"STRONG",{});var Cmt=s(rhe);Yor=r(Cmt,"bert"),Cmt.forEach(t),Kor=r(C7e," \u2014 "),hG=n(C7e,"A",{href:!0});var Mmt=s(hG);Zor=r(Mmt,"TFBertForPreTraining"),Mmt.forEach(t),err=r(C7e," (BERT model)"),C7e.forEach(t),orr=i(U),sC=n(U,"LI",{});var M7e=s(sC);the=n(M7e,"STRONG",{});var Emt=s(the);rrr=r(Emt,"camembert"),Emt.forEach(t),trr=r(M7e," \u2014 "),uG=n(M7e,"A",{href:!0});var ymt=s(uG);arr=r(ymt,"TFCamembertForMaskedLM"),ymt.forEach(t),nrr=r(M7e," (CamemBERT model)"),M7e.forEach(t),srr=i(U),lC=n(U,"LI",{});var E7e=s(lC);ahe=n(E7e,"STRONG",{});var wmt=s(ahe);lrr=r(wmt,"ctrl"),wmt.forEach(t),irr=r(E7e," \u2014 "),pG=n(E7e,"A",{href:!0});var Amt=s(pG);drr=r(Amt,"TFCTRLLMHeadModel"),Amt.forEach(t),crr=r(E7e," (CTRL model)"),E7e.forEach(t),mrr=i(U),iC=n(U,"LI",{});var y7e=s(iC);nhe=n(y7e,"STRONG",{});var Lmt=s(nhe);frr=r(Lmt,"distilbert"),Lmt.forEach(t),grr=r(y7e," \u2014 "),_G=n(y7e,"A",{href:!0});var Bmt=s(_G);hrr=r(Bmt,"TFDistilBertForMaskedLM"),Bmt.forEach(t),urr=r(y7e," (DistilBERT model)"),y7e.forEach(t),prr=i(U),dC=n(U,"LI",{});var w7e=s(dC);she=n(w7e,"STRONG",{});var xmt=s(she);_rr=r(xmt,"electra"),xmt.forEach(t),brr=r(w7e," \u2014 "),bG=n(w7e,"A",{href:!0});var kmt=s(bG);vrr=r(kmt,"TFElectraForPreTraining"),kmt.forEach(t),Trr=r(w7e," (ELECTRA model)"),w7e.forEach(t),Frr=i(U),cC=n(U,"LI",{});var A7e=s(cC);lhe=n(A7e,"STRONG",{});var Rmt=s(lhe);Crr=r(Rmt,"flaubert"),Rmt.forEach(t),Mrr=r(A7e," \u2014 "),vG=n(A7e,"A",{href:!0});var Smt=s(vG);Err=r(Smt,"TFFlaubertWithLMHeadModel"),Smt.forEach(t),yrr=r(A7e," (FlauBERT model)"),A7e.forEach(t),wrr=i(U),mC=n(U,"LI",{});var L7e=s(mC);ihe=n(L7e,"STRONG",{});var Pmt=s(ihe);Arr=r(Pmt,"funnel"),Pmt.forEach(t),Lrr=r(L7e," \u2014 "),TG=n(L7e,"A",{href:!0});var $mt=s(TG);Brr=r($mt,"TFFunnelForPreTraining"),$mt.forEach(t),xrr=r(L7e," (Funnel Transformer model)"),L7e.forEach(t),krr=i(U),fC=n(U,"LI",{});var B7e=s(fC);dhe=n(B7e,"STRONG",{});var Imt=s(dhe);Rrr=r(Imt,"gpt2"),Imt.forEach(t),Srr=r(B7e," \u2014 "),FG=n(B7e,"A",{href:!0});var Nmt=s(FG);Prr=r(Nmt,"TFGPT2LMHeadModel"),Nmt.forEach(t),$rr=r(B7e," (OpenAI GPT-2 model)"),B7e.forEach(t),Irr=i(U),gC=n(U,"LI",{});var x7e=s(gC);che=n(x7e,"STRONG",{});var Dmt=s(che);Nrr=r(Dmt,"layoutlm"),Dmt.forEach(t),Drr=r(x7e," \u2014 "),CG=n(x7e,"A",{href:!0});var jmt=s(CG);jrr=r(jmt,"TFLayoutLMForMaskedLM"),jmt.forEach(t),qrr=r(x7e," (LayoutLM model)"),x7e.forEach(t),Grr=i(U),hC=n(U,"LI",{});var k7e=s(hC);mhe=n(k7e,"STRONG",{});var qmt=s(mhe);Orr=r(qmt,"lxmert"),qmt.forEach(t),Xrr=r(k7e," \u2014 "),MG=n(k7e,"A",{href:!0});var Gmt=s(MG);Vrr=r(Gmt,"TFLxmertForPreTraining"),Gmt.forEach(t),zrr=r(k7e," (LXMERT model)"),k7e.forEach(t),Wrr=i(U),uC=n(U,"LI",{});var R7e=s(uC);fhe=n(R7e,"STRONG",{});var Omt=s(fhe);Qrr=r(Omt,"mobilebert"),Omt.forEach(t),Hrr=r(R7e," \u2014 "),EG=n(R7e,"A",{href:!0});var Xmt=s(EG);Urr=r(Xmt,"TFMobileBertForPreTraining"),Xmt.forEach(t),Jrr=r(R7e," (MobileBERT model)"),R7e.forEach(t),Yrr=i(U),pC=n(U,"LI",{});var S7e=s(pC);ghe=n(S7e,"STRONG",{});var Vmt=s(ghe);Krr=r(Vmt,"mpnet"),Vmt.forEach(t),Zrr=r(S7e," \u2014 "),yG=n(S7e,"A",{href:!0});var zmt=s(yG);etr=r(zmt,"TFMPNetForMaskedLM"),zmt.forEach(t),otr=r(S7e," (MPNet model)"),S7e.forEach(t),rtr=i(U),_C=n(U,"LI",{});var P7e=s(_C);hhe=n(P7e,"STRONG",{});var Wmt=s(hhe);ttr=r(Wmt,"openai-gpt"),Wmt.forEach(t),atr=r(P7e," \u2014 "),wG=n(P7e,"A",{href:!0});var Qmt=s(wG);ntr=r(Qmt,"TFOpenAIGPTLMHeadModel"),Qmt.forEach(t),str=r(P7e," (OpenAI GPT model)"),P7e.forEach(t),ltr=i(U),bC=n(U,"LI",{});var $7e=s(bC);uhe=n($7e,"STRONG",{});var Hmt=s(uhe);itr=r(Hmt,"roberta"),Hmt.forEach(t),dtr=r($7e," \u2014 "),AG=n($7e,"A",{href:!0});var Umt=s(AG);ctr=r(Umt,"TFRobertaForMaskedLM"),Umt.forEach(t),mtr=r($7e," (RoBERTa model)"),$7e.forEach(t),ftr=i(U),vC=n(U,"LI",{});var I7e=s(vC);phe=n(I7e,"STRONG",{});var Jmt=s(phe);gtr=r(Jmt,"t5"),Jmt.forEach(t),htr=r(I7e," \u2014 "),LG=n(I7e,"A",{href:!0});var Ymt=s(LG);utr=r(Ymt,"TFT5ForConditionalGeneration"),Ymt.forEach(t),ptr=r(I7e," (T5 model)"),I7e.forEach(t),_tr=i(U),TC=n(U,"LI",{});var N7e=s(TC);_he=n(N7e,"STRONG",{});var Kmt=s(_he);btr=r(Kmt,"tapas"),Kmt.forEach(t),vtr=r(N7e," \u2014 "),BG=n(N7e,"A",{href:!0});var Zmt=s(BG);Ttr=r(Zmt,"TFTapasForMaskedLM"),Zmt.forEach(t),Ftr=r(N7e," (TAPAS model)"),N7e.forEach(t),Ctr=i(U),FC=n(U,"LI",{});var D7e=s(FC);bhe=n(D7e,"STRONG",{});var eft=s(bhe);Mtr=r(eft,"transfo-xl"),eft.forEach(t),Etr=r(D7e," \u2014 "),xG=n(D7e,"A",{href:!0});var oft=s(xG);ytr=r(oft,"TFTransfoXLLMHeadModel"),oft.forEach(t),wtr=r(D7e," (Transformer-XL model)"),D7e.forEach(t),Atr=i(U),CC=n(U,"LI",{});var j7e=s(CC);vhe=n(j7e,"STRONG",{});var rft=s(vhe);Ltr=r(rft,"xlm"),rft.forEach(t),Btr=r(j7e," \u2014 "),kG=n(j7e,"A",{href:!0});var tft=s(kG);xtr=r(tft,"TFXLMWithLMHeadModel"),tft.forEach(t),ktr=r(j7e," (XLM model)"),j7e.forEach(t),Rtr=i(U),MC=n(U,"LI",{});var q7e=s(MC);The=n(q7e,"STRONG",{});var aft=s(The);Str=r(aft,"xlm-roberta"),aft.forEach(t),Ptr=r(q7e," \u2014 "),RG=n(q7e,"A",{href:!0});var nft=s(RG);$tr=r(nft,"TFXLMRobertaForMaskedLM"),nft.forEach(t),Itr=r(q7e," (XLM-RoBERTa model)"),q7e.forEach(t),Ntr=i(U),EC=n(U,"LI",{});var G7e=s(EC);Fhe=n(G7e,"STRONG",{});var sft=s(Fhe);Dtr=r(sft,"xlnet"),sft.forEach(t),jtr=r(G7e," \u2014 "),SG=n(G7e,"A",{href:!0});var lft=s(SG);qtr=r(lft,"TFXLNetLMHeadModel"),lft.forEach(t),Gtr=r(G7e," (XLNet model)"),G7e.forEach(t),U.forEach(t),Otr=i(pa),Che=n(pa,"P",{});var ift=s(Che);Xtr=r(ift,"Examples:"),ift.forEach(t),Vtr=i(pa),f(ZA.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),dRe=i(c),bc=n(c,"H2",{class:!0});var TPe=s(bc);yC=n(TPe,"A",{id:!0,class:!0,href:!0});var dft=s(yC);Mhe=n(dft,"SPAN",{});var cft=s(Mhe);f(e0.$$.fragment,cft),cft.forEach(t),dft.forEach(t),ztr=i(TPe),Ehe=n(TPe,"SPAN",{});var mft=s(Ehe);Wtr=r(mft,"TFAutoModelForCausalLM"),mft.forEach(t),TPe.forEach(t),cRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);f(o0.$$.fragment,Xl),Qtr=i(Xl),vc=n(Xl,"P",{});var WW=s(vc);Htr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yhe=n(WW,"CODE",{});var fft=s(yhe);Utr=r(fft,"from_pretrained()"),fft.forEach(t),Jtr=r(WW,"class method or the "),whe=n(WW,"CODE",{});var gft=s(whe);Ytr=r(gft,"from_config()"),gft.forEach(t),Ktr=r(WW,`class
method.`),WW.forEach(t),Ztr=i(Xl),r0=n(Xl,"P",{});var FPe=s(r0);ear=r(FPe,"This class cannot be instantiated directly using "),Ahe=n(FPe,"CODE",{});var hft=s(Ahe);oar=r(hft,"__init__()"),hft.forEach(t),rar=r(FPe," (throws an error)."),FPe.forEach(t),tar=i(Xl),ut=n(Xl,"DIV",{class:!0});var Vl=s(ut);f(t0.$$.fragment,Vl),aar=i(Vl),Lhe=n(Vl,"P",{});var uft=s(Lhe);nar=r(uft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uft.forEach(t),sar=i(Vl),Tc=n(Vl,"P",{});var QW=s(Tc);lar=r(QW,`Note:
Loading a model from its configuration file does `),Bhe=n(QW,"STRONG",{});var pft=s(Bhe);iar=r(pft,"not"),pft.forEach(t),dar=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xhe=n(QW,"CODE",{});var _ft=s(xhe);car=r(_ft,"from_pretrained()"),_ft.forEach(t),mar=r(QW,"to load the model weights."),QW.forEach(t),far=i(Vl),khe=n(Vl,"P",{});var bft=s(khe);gar=r(bft,"Examples:"),bft.forEach(t),har=i(Vl),f(a0.$$.fragment,Vl),Vl.forEach(t),uar=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);f(n0.$$.fragment,_a),par=i(_a),Rhe=n(_a,"P",{});var vft=s(Rhe);_ar=r(vft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vft.forEach(t),bar=i(_a),bn=n(_a,"P",{});var I5=s(bn);Tar=r(I5,"The model class to instantiate is selected based on the "),She=n(I5,"CODE",{});var Tft=s(She);Far=r(Tft,"model_type"),Tft.forEach(t),Car=r(I5,` property of the config object (either
passed as an argument or loaded from `),Phe=n(I5,"CODE",{});var Fft=s(Phe);Mar=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),Ear=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(I5,"CODE",{});var Cft=s($he);yar=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),war=r(I5,":"),I5.forEach(t),Aar=i(_a),ge=n(_a,"UL",{});var Fe=s(ge);wC=n(Fe,"LI",{});var O7e=s(wC);Ihe=n(O7e,"STRONG",{});var Mft=s(Ihe);Lar=r(Mft,"bert"),Mft.forEach(t),Bar=r(O7e," \u2014 "),PG=n(O7e,"A",{href:!0});var Eft=s(PG);xar=r(Eft,"TFBertLMHeadModel"),Eft.forEach(t),kar=r(O7e," (BERT model)"),O7e.forEach(t),Rar=i(Fe),AC=n(Fe,"LI",{});var X7e=s(AC);Nhe=n(X7e,"STRONG",{});var yft=s(Nhe);Sar=r(yft,"camembert"),yft.forEach(t),Par=r(X7e," \u2014 "),$G=n(X7e,"A",{href:!0});var wft=s($G);$ar=r(wft,"TFCamembertForCausalLM"),wft.forEach(t),Iar=r(X7e," (CamemBERT model)"),X7e.forEach(t),Nar=i(Fe),LC=n(Fe,"LI",{});var V7e=s(LC);Dhe=n(V7e,"STRONG",{});var Aft=s(Dhe);Dar=r(Aft,"ctrl"),Aft.forEach(t),jar=r(V7e," \u2014 "),IG=n(V7e,"A",{href:!0});var Lft=s(IG);qar=r(Lft,"TFCTRLLMHeadModel"),Lft.forEach(t),Gar=r(V7e," (CTRL model)"),V7e.forEach(t),Oar=i(Fe),BC=n(Fe,"LI",{});var z7e=s(BC);jhe=n(z7e,"STRONG",{});var Bft=s(jhe);Xar=r(Bft,"gpt2"),Bft.forEach(t),Var=r(z7e," \u2014 "),NG=n(z7e,"A",{href:!0});var xft=s(NG);zar=r(xft,"TFGPT2LMHeadModel"),xft.forEach(t),War=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),Qar=i(Fe),xC=n(Fe,"LI",{});var W7e=s(xC);qhe=n(W7e,"STRONG",{});var kft=s(qhe);Har=r(kft,"openai-gpt"),kft.forEach(t),Uar=r(W7e," \u2014 "),DG=n(W7e,"A",{href:!0});var Rft=s(DG);Jar=r(Rft,"TFOpenAIGPTLMHeadModel"),Rft.forEach(t),Yar=r(W7e," (OpenAI GPT model)"),W7e.forEach(t),Kar=i(Fe),kC=n(Fe,"LI",{});var Q7e=s(kC);Ghe=n(Q7e,"STRONG",{});var Sft=s(Ghe);Zar=r(Sft,"rembert"),Sft.forEach(t),enr=r(Q7e," \u2014 "),jG=n(Q7e,"A",{href:!0});var Pft=s(jG);onr=r(Pft,"TFRemBertForCausalLM"),Pft.forEach(t),rnr=r(Q7e," (RemBERT model)"),Q7e.forEach(t),tnr=i(Fe),RC=n(Fe,"LI",{});var H7e=s(RC);Ohe=n(H7e,"STRONG",{});var $ft=s(Ohe);anr=r($ft,"roberta"),$ft.forEach(t),nnr=r(H7e," \u2014 "),qG=n(H7e,"A",{href:!0});var Ift=s(qG);snr=r(Ift,"TFRobertaForCausalLM"),Ift.forEach(t),lnr=r(H7e," (RoBERTa model)"),H7e.forEach(t),inr=i(Fe),SC=n(Fe,"LI",{});var U7e=s(SC);Xhe=n(U7e,"STRONG",{});var Nft=s(Xhe);dnr=r(Nft,"roformer"),Nft.forEach(t),cnr=r(U7e," \u2014 "),GG=n(U7e,"A",{href:!0});var Dft=s(GG);mnr=r(Dft,"TFRoFormerForCausalLM"),Dft.forEach(t),fnr=r(U7e," (RoFormer model)"),U7e.forEach(t),gnr=i(Fe),PC=n(Fe,"LI",{});var J7e=s(PC);Vhe=n(J7e,"STRONG",{});var jft=s(Vhe);hnr=r(jft,"transfo-xl"),jft.forEach(t),unr=r(J7e," \u2014 "),OG=n(J7e,"A",{href:!0});var qft=s(OG);pnr=r(qft,"TFTransfoXLLMHeadModel"),qft.forEach(t),_nr=r(J7e," (Transformer-XL model)"),J7e.forEach(t),bnr=i(Fe),$C=n(Fe,"LI",{});var Y7e=s($C);zhe=n(Y7e,"STRONG",{});var Gft=s(zhe);vnr=r(Gft,"xlm"),Gft.forEach(t),Tnr=r(Y7e," \u2014 "),XG=n(Y7e,"A",{href:!0});var Oft=s(XG);Fnr=r(Oft,"TFXLMWithLMHeadModel"),Oft.forEach(t),Cnr=r(Y7e," (XLM model)"),Y7e.forEach(t),Mnr=i(Fe),IC=n(Fe,"LI",{});var K7e=s(IC);Whe=n(K7e,"STRONG",{});var Xft=s(Whe);Enr=r(Xft,"xlnet"),Xft.forEach(t),ynr=r(K7e," \u2014 "),VG=n(K7e,"A",{href:!0});var Vft=s(VG);wnr=r(Vft,"TFXLNetLMHeadModel"),Vft.forEach(t),Anr=r(K7e," (XLNet model)"),K7e.forEach(t),Fe.forEach(t),Lnr=i(_a),Qhe=n(_a,"P",{});var zft=s(Qhe);Bnr=r(zft,"Examples:"),zft.forEach(t),xnr=i(_a),f(s0.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),mRe=i(c),Fc=n(c,"H2",{class:!0});var CPe=s(Fc);NC=n(CPe,"A",{id:!0,class:!0,href:!0});var Wft=s(NC);Hhe=n(Wft,"SPAN",{});var Qft=s(Hhe);f(l0.$$.fragment,Qft),Qft.forEach(t),Wft.forEach(t),knr=i(CPe),Uhe=n(CPe,"SPAN",{});var Hft=s(Uhe);Rnr=r(Hft,"TFAutoModelForImageClassification"),Hft.forEach(t),CPe.forEach(t),fRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);f(i0.$$.fragment,zl),Snr=i(zl),Cc=n(zl,"P",{});var HW=s(Cc);Pnr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Jhe=n(HW,"CODE",{});var Uft=s(Jhe);$nr=r(Uft,"from_pretrained()"),Uft.forEach(t),Inr=r(HW,"class method or the "),Yhe=n(HW,"CODE",{});var Jft=s(Yhe);Nnr=r(Jft,"from_config()"),Jft.forEach(t),Dnr=r(HW,`class
method.`),HW.forEach(t),jnr=i(zl),d0=n(zl,"P",{});var MPe=s(d0);qnr=r(MPe,"This class cannot be instantiated directly using "),Khe=n(MPe,"CODE",{});var Yft=s(Khe);Gnr=r(Yft,"__init__()"),Yft.forEach(t),Onr=r(MPe," (throws an error)."),MPe.forEach(t),Xnr=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);f(c0.$$.fragment,Wl),Vnr=i(Wl),Zhe=n(Wl,"P",{});var Kft=s(Zhe);znr=r(Kft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Kft.forEach(t),Wnr=i(Wl),Mc=n(Wl,"P",{});var UW=s(Mc);Qnr=r(UW,`Note:
Loading a model from its configuration file does `),eue=n(UW,"STRONG",{});var Zft=s(eue);Hnr=r(Zft,"not"),Zft.forEach(t),Unr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),oue=n(UW,"CODE",{});var egt=s(oue);Jnr=r(egt,"from_pretrained()"),egt.forEach(t),Ynr=r(UW,"to load the model weights."),UW.forEach(t),Knr=i(Wl),rue=n(Wl,"P",{});var ogt=s(rue);Znr=r(ogt,"Examples:"),ogt.forEach(t),esr=i(Wl),f(m0.$$.fragment,Wl),Wl.forEach(t),osr=i(zl),_o=n(zl,"DIV",{class:!0});var ba=s(_o);f(f0.$$.fragment,ba),rsr=i(ba),tue=n(ba,"P",{});var rgt=s(tue);tsr=r(rgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rgt.forEach(t),asr=i(ba),vn=n(ba,"P",{});var N5=s(vn);nsr=r(N5,"The model class to instantiate is selected based on the "),aue=n(N5,"CODE",{});var tgt=s(aue);ssr=r(tgt,"model_type"),tgt.forEach(t),lsr=r(N5,` property of the config object (either
passed as an argument or loaded from `),nue=n(N5,"CODE",{});var agt=s(nue);isr=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),dsr=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(N5,"CODE",{});var ngt=s(sue);csr=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),msr=r(N5,":"),N5.forEach(t),fsr=i(ba),g0=n(ba,"UL",{});var EPe=s(g0);DC=n(EPe,"LI",{});var Z7e=s(DC);lue=n(Z7e,"STRONG",{});var sgt=s(lue);gsr=r(sgt,"convnext"),sgt.forEach(t),hsr=r(Z7e," \u2014 "),zG=n(Z7e,"A",{href:!0});var lgt=s(zG);usr=r(lgt,"TFConvNextForImageClassification"),lgt.forEach(t),psr=r(Z7e," (ConvNext model)"),Z7e.forEach(t),_sr=i(EPe),jC=n(EPe,"LI",{});var e8e=s(jC);iue=n(e8e,"STRONG",{});var igt=s(iue);bsr=r(igt,"vit"),igt.forEach(t),vsr=r(e8e," \u2014 "),WG=n(e8e,"A",{href:!0});var dgt=s(WG);Tsr=r(dgt,"TFViTForImageClassification"),dgt.forEach(t),Fsr=r(e8e," (ViT model)"),e8e.forEach(t),EPe.forEach(t),Csr=i(ba),due=n(ba,"P",{});var cgt=s(due);Msr=r(cgt,"Examples:"),cgt.forEach(t),Esr=i(ba),f(h0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),gRe=i(c),Ec=n(c,"H2",{class:!0});var yPe=s(Ec);qC=n(yPe,"A",{id:!0,class:!0,href:!0});var mgt=s(qC);cue=n(mgt,"SPAN",{});var fgt=s(cue);f(u0.$$.fragment,fgt),fgt.forEach(t),mgt.forEach(t),ysr=i(yPe),mue=n(yPe,"SPAN",{});var ggt=s(mue);wsr=r(ggt,"TFAutoModelForMaskedLM"),ggt.forEach(t),yPe.forEach(t),hRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);f(p0.$$.fragment,Ql),Asr=i(Ql),yc=n(Ql,"P",{});var JW=s(yc);Lsr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fue=n(JW,"CODE",{});var hgt=s(fue);Bsr=r(hgt,"from_pretrained()"),hgt.forEach(t),xsr=r(JW,"class method or the "),gue=n(JW,"CODE",{});var ugt=s(gue);ksr=r(ugt,"from_config()"),ugt.forEach(t),Rsr=r(JW,`class
method.`),JW.forEach(t),Ssr=i(Ql),_0=n(Ql,"P",{});var wPe=s(_0);Psr=r(wPe,"This class cannot be instantiated directly using "),hue=n(wPe,"CODE",{});var pgt=s(hue);$sr=r(pgt,"__init__()"),pgt.forEach(t),Isr=r(wPe," (throws an error)."),wPe.forEach(t),Nsr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);f(b0.$$.fragment,Hl),Dsr=i(Hl),uue=n(Hl,"P",{});var _gt=s(uue);jsr=r(_gt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_gt.forEach(t),qsr=i(Hl),wc=n(Hl,"P",{});var YW=s(wc);Gsr=r(YW,`Note:
Loading a model from its configuration file does `),pue=n(YW,"STRONG",{});var bgt=s(pue);Osr=r(bgt,"not"),bgt.forEach(t),Xsr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ue=n(YW,"CODE",{});var vgt=s(_ue);Vsr=r(vgt,"from_pretrained()"),vgt.forEach(t),zsr=r(YW,"to load the model weights."),YW.forEach(t),Wsr=i(Hl),bue=n(Hl,"P",{});var Tgt=s(bue);Qsr=r(Tgt,"Examples:"),Tgt.forEach(t),Hsr=i(Hl),f(v0.$$.fragment,Hl),Hl.forEach(t),Usr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);f(T0.$$.fragment,va),Jsr=i(va),vue=n(va,"P",{});var Fgt=s(vue);Ysr=r(Fgt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fgt.forEach(t),Ksr=i(va),Tn=n(va,"P",{});var D5=s(Tn);Zsr=r(D5,"The model class to instantiate is selected based on the "),Tue=n(D5,"CODE",{});var Cgt=s(Tue);elr=r(Cgt,"model_type"),Cgt.forEach(t),olr=r(D5,` property of the config object (either
passed as an argument or loaded from `),Fue=n(D5,"CODE",{});var Mgt=s(Fue);rlr=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),tlr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(D5,"CODE",{});var Egt=s(Cue);alr=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),nlr=r(D5,":"),D5.forEach(t),slr=i(va),J=n(va,"UL",{});var ee=s(J);GC=n(ee,"LI",{});var o8e=s(GC);Mue=n(o8e,"STRONG",{});var ygt=s(Mue);llr=r(ygt,"albert"),ygt.forEach(t),ilr=r(o8e," \u2014 "),QG=n(o8e,"A",{href:!0});var wgt=s(QG);dlr=r(wgt,"TFAlbertForMaskedLM"),wgt.forEach(t),clr=r(o8e," (ALBERT model)"),o8e.forEach(t),mlr=i(ee),OC=n(ee,"LI",{});var r8e=s(OC);Eue=n(r8e,"STRONG",{});var Agt=s(Eue);flr=r(Agt,"bert"),Agt.forEach(t),glr=r(r8e," \u2014 "),HG=n(r8e,"A",{href:!0});var Lgt=s(HG);hlr=r(Lgt,"TFBertForMaskedLM"),Lgt.forEach(t),ulr=r(r8e," (BERT model)"),r8e.forEach(t),plr=i(ee),XC=n(ee,"LI",{});var t8e=s(XC);yue=n(t8e,"STRONG",{});var Bgt=s(yue);_lr=r(Bgt,"camembert"),Bgt.forEach(t),blr=r(t8e," \u2014 "),UG=n(t8e,"A",{href:!0});var xgt=s(UG);vlr=r(xgt,"TFCamembertForMaskedLM"),xgt.forEach(t),Tlr=r(t8e," (CamemBERT model)"),t8e.forEach(t),Flr=i(ee),VC=n(ee,"LI",{});var a8e=s(VC);wue=n(a8e,"STRONG",{});var kgt=s(wue);Clr=r(kgt,"convbert"),kgt.forEach(t),Mlr=r(a8e," \u2014 "),JG=n(a8e,"A",{href:!0});var Rgt=s(JG);Elr=r(Rgt,"TFConvBertForMaskedLM"),Rgt.forEach(t),ylr=r(a8e," (ConvBERT model)"),a8e.forEach(t),wlr=i(ee),zC=n(ee,"LI",{});var n8e=s(zC);Aue=n(n8e,"STRONG",{});var Sgt=s(Aue);Alr=r(Sgt,"deberta"),Sgt.forEach(t),Llr=r(n8e," \u2014 "),YG=n(n8e,"A",{href:!0});var Pgt=s(YG);Blr=r(Pgt,"TFDebertaForMaskedLM"),Pgt.forEach(t),xlr=r(n8e," (DeBERTa model)"),n8e.forEach(t),klr=i(ee),WC=n(ee,"LI",{});var s8e=s(WC);Lue=n(s8e,"STRONG",{});var $gt=s(Lue);Rlr=r($gt,"deberta-v2"),$gt.forEach(t),Slr=r(s8e," \u2014 "),KG=n(s8e,"A",{href:!0});var Igt=s(KG);Plr=r(Igt,"TFDebertaV2ForMaskedLM"),Igt.forEach(t),$lr=r(s8e," (DeBERTa-v2 model)"),s8e.forEach(t),Ilr=i(ee),QC=n(ee,"LI",{});var l8e=s(QC);Bue=n(l8e,"STRONG",{});var Ngt=s(Bue);Nlr=r(Ngt,"distilbert"),Ngt.forEach(t),Dlr=r(l8e," \u2014 "),ZG=n(l8e,"A",{href:!0});var Dgt=s(ZG);jlr=r(Dgt,"TFDistilBertForMaskedLM"),Dgt.forEach(t),qlr=r(l8e," (DistilBERT model)"),l8e.forEach(t),Glr=i(ee),HC=n(ee,"LI",{});var i8e=s(HC);xue=n(i8e,"STRONG",{});var jgt=s(xue);Olr=r(jgt,"electra"),jgt.forEach(t),Xlr=r(i8e," \u2014 "),eO=n(i8e,"A",{href:!0});var qgt=s(eO);Vlr=r(qgt,"TFElectraForMaskedLM"),qgt.forEach(t),zlr=r(i8e," (ELECTRA model)"),i8e.forEach(t),Wlr=i(ee),UC=n(ee,"LI",{});var d8e=s(UC);kue=n(d8e,"STRONG",{});var Ggt=s(kue);Qlr=r(Ggt,"flaubert"),Ggt.forEach(t),Hlr=r(d8e," \u2014 "),oO=n(d8e,"A",{href:!0});var Ogt=s(oO);Ulr=r(Ogt,"TFFlaubertWithLMHeadModel"),Ogt.forEach(t),Jlr=r(d8e," (FlauBERT model)"),d8e.forEach(t),Ylr=i(ee),JC=n(ee,"LI",{});var c8e=s(JC);Rue=n(c8e,"STRONG",{});var Xgt=s(Rue);Klr=r(Xgt,"funnel"),Xgt.forEach(t),Zlr=r(c8e," \u2014 "),rO=n(c8e,"A",{href:!0});var Vgt=s(rO);eir=r(Vgt,"TFFunnelForMaskedLM"),Vgt.forEach(t),oir=r(c8e," (Funnel Transformer model)"),c8e.forEach(t),rir=i(ee),YC=n(ee,"LI",{});var m8e=s(YC);Sue=n(m8e,"STRONG",{});var zgt=s(Sue);tir=r(zgt,"layoutlm"),zgt.forEach(t),air=r(m8e," \u2014 "),tO=n(m8e,"A",{href:!0});var Wgt=s(tO);nir=r(Wgt,"TFLayoutLMForMaskedLM"),Wgt.forEach(t),sir=r(m8e," (LayoutLM model)"),m8e.forEach(t),lir=i(ee),KC=n(ee,"LI",{});var f8e=s(KC);Pue=n(f8e,"STRONG",{});var Qgt=s(Pue);iir=r(Qgt,"longformer"),Qgt.forEach(t),dir=r(f8e," \u2014 "),aO=n(f8e,"A",{href:!0});var Hgt=s(aO);cir=r(Hgt,"TFLongformerForMaskedLM"),Hgt.forEach(t),mir=r(f8e," (Longformer model)"),f8e.forEach(t),fir=i(ee),ZC=n(ee,"LI",{});var g8e=s(ZC);$ue=n(g8e,"STRONG",{});var Ugt=s($ue);gir=r(Ugt,"mobilebert"),Ugt.forEach(t),hir=r(g8e," \u2014 "),nO=n(g8e,"A",{href:!0});var Jgt=s(nO);uir=r(Jgt,"TFMobileBertForMaskedLM"),Jgt.forEach(t),pir=r(g8e," (MobileBERT model)"),g8e.forEach(t),_ir=i(ee),eM=n(ee,"LI",{});var h8e=s(eM);Iue=n(h8e,"STRONG",{});var Ygt=s(Iue);bir=r(Ygt,"mpnet"),Ygt.forEach(t),vir=r(h8e," \u2014 "),sO=n(h8e,"A",{href:!0});var Kgt=s(sO);Tir=r(Kgt,"TFMPNetForMaskedLM"),Kgt.forEach(t),Fir=r(h8e," (MPNet model)"),h8e.forEach(t),Cir=i(ee),oM=n(ee,"LI",{});var u8e=s(oM);Nue=n(u8e,"STRONG",{});var Zgt=s(Nue);Mir=r(Zgt,"rembert"),Zgt.forEach(t),Eir=r(u8e," \u2014 "),lO=n(u8e,"A",{href:!0});var eht=s(lO);yir=r(eht,"TFRemBertForMaskedLM"),eht.forEach(t),wir=r(u8e," (RemBERT model)"),u8e.forEach(t),Air=i(ee),rM=n(ee,"LI",{});var p8e=s(rM);Due=n(p8e,"STRONG",{});var oht=s(Due);Lir=r(oht,"roberta"),oht.forEach(t),Bir=r(p8e," \u2014 "),iO=n(p8e,"A",{href:!0});var rht=s(iO);xir=r(rht,"TFRobertaForMaskedLM"),rht.forEach(t),kir=r(p8e," (RoBERTa model)"),p8e.forEach(t),Rir=i(ee),tM=n(ee,"LI",{});var _8e=s(tM);jue=n(_8e,"STRONG",{});var tht=s(jue);Sir=r(tht,"roformer"),tht.forEach(t),Pir=r(_8e," \u2014 "),dO=n(_8e,"A",{href:!0});var aht=s(dO);$ir=r(aht,"TFRoFormerForMaskedLM"),aht.forEach(t),Iir=r(_8e," (RoFormer model)"),_8e.forEach(t),Nir=i(ee),aM=n(ee,"LI",{});var b8e=s(aM);que=n(b8e,"STRONG",{});var nht=s(que);Dir=r(nht,"tapas"),nht.forEach(t),jir=r(b8e," \u2014 "),cO=n(b8e,"A",{href:!0});var sht=s(cO);qir=r(sht,"TFTapasForMaskedLM"),sht.forEach(t),Gir=r(b8e," (TAPAS model)"),b8e.forEach(t),Oir=i(ee),nM=n(ee,"LI",{});var v8e=s(nM);Gue=n(v8e,"STRONG",{});var lht=s(Gue);Xir=r(lht,"xlm"),lht.forEach(t),Vir=r(v8e," \u2014 "),mO=n(v8e,"A",{href:!0});var iht=s(mO);zir=r(iht,"TFXLMWithLMHeadModel"),iht.forEach(t),Wir=r(v8e," (XLM model)"),v8e.forEach(t),Qir=i(ee),sM=n(ee,"LI",{});var T8e=s(sM);Oue=n(T8e,"STRONG",{});var dht=s(Oue);Hir=r(dht,"xlm-roberta"),dht.forEach(t),Uir=r(T8e," \u2014 "),fO=n(T8e,"A",{href:!0});var cht=s(fO);Jir=r(cht,"TFXLMRobertaForMaskedLM"),cht.forEach(t),Yir=r(T8e," (XLM-RoBERTa model)"),T8e.forEach(t),ee.forEach(t),Kir=i(va),Xue=n(va,"P",{});var mht=s(Xue);Zir=r(mht,"Examples:"),mht.forEach(t),edr=i(va),f(F0.$$.fragment,va),va.forEach(t),Ql.forEach(t),uRe=i(c),Ac=n(c,"H2",{class:!0});var APe=s(Ac);lM=n(APe,"A",{id:!0,class:!0,href:!0});var fht=s(lM);Vue=n(fht,"SPAN",{});var ght=s(Vue);f(C0.$$.fragment,ght),ght.forEach(t),fht.forEach(t),odr=i(APe),zue=n(APe,"SPAN",{});var hht=s(zue);rdr=r(hht,"TFAutoModelForSeq2SeqLM"),hht.forEach(t),APe.forEach(t),pRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);f(M0.$$.fragment,Ul),tdr=i(Ul),Lc=n(Ul,"P",{});var KW=s(Lc);adr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Wue=n(KW,"CODE",{});var uht=s(Wue);ndr=r(uht,"from_pretrained()"),uht.forEach(t),sdr=r(KW,"class method or the "),Que=n(KW,"CODE",{});var pht=s(Que);ldr=r(pht,"from_config()"),pht.forEach(t),idr=r(KW,`class
method.`),KW.forEach(t),ddr=i(Ul),E0=n(Ul,"P",{});var LPe=s(E0);cdr=r(LPe,"This class cannot be instantiated directly using "),Hue=n(LPe,"CODE",{});var _ht=s(Hue);mdr=r(_ht,"__init__()"),_ht.forEach(t),fdr=r(LPe," (throws an error)."),LPe.forEach(t),gdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);f(y0.$$.fragment,Jl),hdr=i(Jl),Uue=n(Jl,"P",{});var bht=s(Uue);udr=r(bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bht.forEach(t),pdr=i(Jl),Bc=n(Jl,"P",{});var ZW=s(Bc);_dr=r(ZW,`Note:
Loading a model from its configuration file does `),Jue=n(ZW,"STRONG",{});var vht=s(Jue);bdr=r(vht,"not"),vht.forEach(t),vdr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=n(ZW,"CODE",{});var Tht=s(Yue);Tdr=r(Tht,"from_pretrained()"),Tht.forEach(t),Fdr=r(ZW,"to load the model weights."),ZW.forEach(t),Cdr=i(Jl),Kue=n(Jl,"P",{});var Fht=s(Kue);Mdr=r(Fht,"Examples:"),Fht.forEach(t),Edr=i(Jl),f(w0.$$.fragment,Jl),Jl.forEach(t),ydr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);f(A0.$$.fragment,Ta),wdr=i(Ta),Zue=n(Ta,"P",{});var Cht=s(Zue);Adr=r(Cht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cht.forEach(t),Ldr=i(Ta),Fn=n(Ta,"P",{});var j5=s(Fn);Bdr=r(j5,"The model class to instantiate is selected based on the "),epe=n(j5,"CODE",{});var Mht=s(epe);xdr=r(Mht,"model_type"),Mht.forEach(t),kdr=r(j5,` property of the config object (either
passed as an argument or loaded from `),ope=n(j5,"CODE",{});var Eht=s(ope);Rdr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Sdr=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(j5,"CODE",{});var yht=s(rpe);Pdr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),$dr=r(j5,":"),j5.forEach(t),Idr=i(Ta),pe=n(Ta,"UL",{});var ye=s(pe);iM=n(ye,"LI",{});var F8e=s(iM);tpe=n(F8e,"STRONG",{});var wht=s(tpe);Ndr=r(wht,"bart"),wht.forEach(t),Ddr=r(F8e," \u2014 "),gO=n(F8e,"A",{href:!0});var Aht=s(gO);jdr=r(Aht,"TFBartForConditionalGeneration"),Aht.forEach(t),qdr=r(F8e," (BART model)"),F8e.forEach(t),Gdr=i(ye),dM=n(ye,"LI",{});var C8e=s(dM);ape=n(C8e,"STRONG",{});var Lht=s(ape);Odr=r(Lht,"blenderbot"),Lht.forEach(t),Xdr=r(C8e," \u2014 "),hO=n(C8e,"A",{href:!0});var Bht=s(hO);Vdr=r(Bht,"TFBlenderbotForConditionalGeneration"),Bht.forEach(t),zdr=r(C8e," (Blenderbot model)"),C8e.forEach(t),Wdr=i(ye),cM=n(ye,"LI",{});var M8e=s(cM);npe=n(M8e,"STRONG",{});var xht=s(npe);Qdr=r(xht,"blenderbot-small"),xht.forEach(t),Hdr=r(M8e," \u2014 "),uO=n(M8e,"A",{href:!0});var kht=s(uO);Udr=r(kht,"TFBlenderbotSmallForConditionalGeneration"),kht.forEach(t),Jdr=r(M8e," (BlenderbotSmall model)"),M8e.forEach(t),Ydr=i(ye),mM=n(ye,"LI",{});var E8e=s(mM);spe=n(E8e,"STRONG",{});var Rht=s(spe);Kdr=r(Rht,"encoder-decoder"),Rht.forEach(t),Zdr=r(E8e," \u2014 "),pO=n(E8e,"A",{href:!0});var Sht=s(pO);ecr=r(Sht,"TFEncoderDecoderModel"),Sht.forEach(t),ocr=r(E8e," (Encoder decoder model)"),E8e.forEach(t),rcr=i(ye),fM=n(ye,"LI",{});var y8e=s(fM);lpe=n(y8e,"STRONG",{});var Pht=s(lpe);tcr=r(Pht,"led"),Pht.forEach(t),acr=r(y8e," \u2014 "),_O=n(y8e,"A",{href:!0});var $ht=s(_O);ncr=r($ht,"TFLEDForConditionalGeneration"),$ht.forEach(t),scr=r(y8e," (LED model)"),y8e.forEach(t),lcr=i(ye),gM=n(ye,"LI",{});var w8e=s(gM);ipe=n(w8e,"STRONG",{});var Iht=s(ipe);icr=r(Iht,"marian"),Iht.forEach(t),dcr=r(w8e," \u2014 "),bO=n(w8e,"A",{href:!0});var Nht=s(bO);ccr=r(Nht,"TFMarianMTModel"),Nht.forEach(t),mcr=r(w8e," (Marian model)"),w8e.forEach(t),fcr=i(ye),hM=n(ye,"LI",{});var A8e=s(hM);dpe=n(A8e,"STRONG",{});var Dht=s(dpe);gcr=r(Dht,"mbart"),Dht.forEach(t),hcr=r(A8e," \u2014 "),vO=n(A8e,"A",{href:!0});var jht=s(vO);ucr=r(jht,"TFMBartForConditionalGeneration"),jht.forEach(t),pcr=r(A8e," (mBART model)"),A8e.forEach(t),_cr=i(ye),uM=n(ye,"LI",{});var L8e=s(uM);cpe=n(L8e,"STRONG",{});var qht=s(cpe);bcr=r(qht,"mt5"),qht.forEach(t),vcr=r(L8e," \u2014 "),TO=n(L8e,"A",{href:!0});var Ght=s(TO);Tcr=r(Ght,"TFMT5ForConditionalGeneration"),Ght.forEach(t),Fcr=r(L8e," (mT5 model)"),L8e.forEach(t),Ccr=i(ye),pM=n(ye,"LI",{});var B8e=s(pM);mpe=n(B8e,"STRONG",{});var Oht=s(mpe);Mcr=r(Oht,"pegasus"),Oht.forEach(t),Ecr=r(B8e," \u2014 "),FO=n(B8e,"A",{href:!0});var Xht=s(FO);ycr=r(Xht,"TFPegasusForConditionalGeneration"),Xht.forEach(t),wcr=r(B8e," (Pegasus model)"),B8e.forEach(t),Acr=i(ye),_M=n(ye,"LI",{});var x8e=s(_M);fpe=n(x8e,"STRONG",{});var Vht=s(fpe);Lcr=r(Vht,"t5"),Vht.forEach(t),Bcr=r(x8e," \u2014 "),CO=n(x8e,"A",{href:!0});var zht=s(CO);xcr=r(zht,"TFT5ForConditionalGeneration"),zht.forEach(t),kcr=r(x8e," (T5 model)"),x8e.forEach(t),ye.forEach(t),Rcr=i(Ta),gpe=n(Ta,"P",{});var Wht=s(gpe);Scr=r(Wht,"Examples:"),Wht.forEach(t),Pcr=i(Ta),f(L0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),_Re=i(c),xc=n(c,"H2",{class:!0});var BPe=s(xc);bM=n(BPe,"A",{id:!0,class:!0,href:!0});var Qht=s(bM);hpe=n(Qht,"SPAN",{});var Hht=s(hpe);f(B0.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),$cr=i(BPe),upe=n(BPe,"SPAN",{});var Uht=s(upe);Icr=r(Uht,"TFAutoModelForSequenceClassification"),Uht.forEach(t),BPe.forEach(t),bRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);f(x0.$$.fragment,Yl),Ncr=i(Yl),kc=n(Yl,"P",{});var eQ=s(kc);Dcr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ppe=n(eQ,"CODE",{});var Jht=s(ppe);jcr=r(Jht,"from_pretrained()"),Jht.forEach(t),qcr=r(eQ,"class method or the "),_pe=n(eQ,"CODE",{});var Yht=s(_pe);Gcr=r(Yht,"from_config()"),Yht.forEach(t),Ocr=r(eQ,`class
method.`),eQ.forEach(t),Xcr=i(Yl),k0=n(Yl,"P",{});var xPe=s(k0);Vcr=r(xPe,"This class cannot be instantiated directly using "),bpe=n(xPe,"CODE",{});var Kht=s(bpe);zcr=r(Kht,"__init__()"),Kht.forEach(t),Wcr=r(xPe," (throws an error)."),xPe.forEach(t),Qcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);f(R0.$$.fragment,Kl),Hcr=i(Kl),vpe=n(Kl,"P",{});var Zht=s(vpe);Ucr=r(Zht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zht.forEach(t),Jcr=i(Kl),Rc=n(Kl,"P",{});var oQ=s(Rc);Ycr=r(oQ,`Note:
Loading a model from its configuration file does `),Tpe=n(oQ,"STRONG",{});var eut=s(Tpe);Kcr=r(eut,"not"),eut.forEach(t),Zcr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(oQ,"CODE",{});var out=s(Fpe);emr=r(out,"from_pretrained()"),out.forEach(t),omr=r(oQ,"to load the model weights."),oQ.forEach(t),rmr=i(Kl),Cpe=n(Kl,"P",{});var rut=s(Cpe);tmr=r(rut,"Examples:"),rut.forEach(t),amr=i(Kl),f(S0.$$.fragment,Kl),Kl.forEach(t),nmr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);f(P0.$$.fragment,Fa),smr=i(Fa),Mpe=n(Fa,"P",{});var tut=s(Mpe);lmr=r(tut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tut.forEach(t),imr=i(Fa),Cn=n(Fa,"P",{});var q5=s(Cn);dmr=r(q5,"The model class to instantiate is selected based on the "),Epe=n(q5,"CODE",{});var aut=s(Epe);cmr=r(aut,"model_type"),aut.forEach(t),mmr=r(q5,` property of the config object (either
passed as an argument or loaded from `),ype=n(q5,"CODE",{});var nut=s(ype);fmr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),gmr=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(q5,"CODE",{});var sut=s(wpe);hmr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),umr=r(q5,":"),q5.forEach(t),pmr=i(Fa),V=n(Fa,"UL",{});var W=s(V);vM=n(W,"LI",{});var k8e=s(vM);Ape=n(k8e,"STRONG",{});var lut=s(Ape);_mr=r(lut,"albert"),lut.forEach(t),bmr=r(k8e," \u2014 "),MO=n(k8e,"A",{href:!0});var iut=s(MO);vmr=r(iut,"TFAlbertForSequenceClassification"),iut.forEach(t),Tmr=r(k8e," (ALBERT model)"),k8e.forEach(t),Fmr=i(W),TM=n(W,"LI",{});var R8e=s(TM);Lpe=n(R8e,"STRONG",{});var dut=s(Lpe);Cmr=r(dut,"bert"),dut.forEach(t),Mmr=r(R8e," \u2014 "),EO=n(R8e,"A",{href:!0});var cut=s(EO);Emr=r(cut,"TFBertForSequenceClassification"),cut.forEach(t),ymr=r(R8e," (BERT model)"),R8e.forEach(t),wmr=i(W),FM=n(W,"LI",{});var S8e=s(FM);Bpe=n(S8e,"STRONG",{});var mut=s(Bpe);Amr=r(mut,"camembert"),mut.forEach(t),Lmr=r(S8e," \u2014 "),yO=n(S8e,"A",{href:!0});var fut=s(yO);Bmr=r(fut,"TFCamembertForSequenceClassification"),fut.forEach(t),xmr=r(S8e," (CamemBERT model)"),S8e.forEach(t),kmr=i(W),CM=n(W,"LI",{});var P8e=s(CM);xpe=n(P8e,"STRONG",{});var gut=s(xpe);Rmr=r(gut,"convbert"),gut.forEach(t),Smr=r(P8e," \u2014 "),wO=n(P8e,"A",{href:!0});var hut=s(wO);Pmr=r(hut,"TFConvBertForSequenceClassification"),hut.forEach(t),$mr=r(P8e," (ConvBERT model)"),P8e.forEach(t),Imr=i(W),MM=n(W,"LI",{});var $8e=s(MM);kpe=n($8e,"STRONG",{});var uut=s(kpe);Nmr=r(uut,"ctrl"),uut.forEach(t),Dmr=r($8e," \u2014 "),AO=n($8e,"A",{href:!0});var put=s(AO);jmr=r(put,"TFCTRLForSequenceClassification"),put.forEach(t),qmr=r($8e," (CTRL model)"),$8e.forEach(t),Gmr=i(W),EM=n(W,"LI",{});var I8e=s(EM);Rpe=n(I8e,"STRONG",{});var _ut=s(Rpe);Omr=r(_ut,"deberta"),_ut.forEach(t),Xmr=r(I8e," \u2014 "),LO=n(I8e,"A",{href:!0});var but=s(LO);Vmr=r(but,"TFDebertaForSequenceClassification"),but.forEach(t),zmr=r(I8e," (DeBERTa model)"),I8e.forEach(t),Wmr=i(W),yM=n(W,"LI",{});var N8e=s(yM);Spe=n(N8e,"STRONG",{});var vut=s(Spe);Qmr=r(vut,"deberta-v2"),vut.forEach(t),Hmr=r(N8e," \u2014 "),BO=n(N8e,"A",{href:!0});var Tut=s(BO);Umr=r(Tut,"TFDebertaV2ForSequenceClassification"),Tut.forEach(t),Jmr=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),Ymr=i(W),wM=n(W,"LI",{});var D8e=s(wM);Ppe=n(D8e,"STRONG",{});var Fut=s(Ppe);Kmr=r(Fut,"distilbert"),Fut.forEach(t),Zmr=r(D8e," \u2014 "),xO=n(D8e,"A",{href:!0});var Cut=s(xO);efr=r(Cut,"TFDistilBertForSequenceClassification"),Cut.forEach(t),ofr=r(D8e," (DistilBERT model)"),D8e.forEach(t),rfr=i(W),AM=n(W,"LI",{});var j8e=s(AM);$pe=n(j8e,"STRONG",{});var Mut=s($pe);tfr=r(Mut,"electra"),Mut.forEach(t),afr=r(j8e," \u2014 "),kO=n(j8e,"A",{href:!0});var Eut=s(kO);nfr=r(Eut,"TFElectraForSequenceClassification"),Eut.forEach(t),sfr=r(j8e," (ELECTRA model)"),j8e.forEach(t),lfr=i(W),LM=n(W,"LI",{});var q8e=s(LM);Ipe=n(q8e,"STRONG",{});var yut=s(Ipe);ifr=r(yut,"flaubert"),yut.forEach(t),dfr=r(q8e," \u2014 "),RO=n(q8e,"A",{href:!0});var wut=s(RO);cfr=r(wut,"TFFlaubertForSequenceClassification"),wut.forEach(t),mfr=r(q8e," (FlauBERT model)"),q8e.forEach(t),ffr=i(W),BM=n(W,"LI",{});var G8e=s(BM);Npe=n(G8e,"STRONG",{});var Aut=s(Npe);gfr=r(Aut,"funnel"),Aut.forEach(t),hfr=r(G8e," \u2014 "),SO=n(G8e,"A",{href:!0});var Lut=s(SO);ufr=r(Lut,"TFFunnelForSequenceClassification"),Lut.forEach(t),pfr=r(G8e," (Funnel Transformer model)"),G8e.forEach(t),_fr=i(W),xM=n(W,"LI",{});var O8e=s(xM);Dpe=n(O8e,"STRONG",{});var But=s(Dpe);bfr=r(But,"gpt2"),But.forEach(t),vfr=r(O8e," \u2014 "),PO=n(O8e,"A",{href:!0});var xut=s(PO);Tfr=r(xut,"TFGPT2ForSequenceClassification"),xut.forEach(t),Ffr=r(O8e," (OpenAI GPT-2 model)"),O8e.forEach(t),Cfr=i(W),kM=n(W,"LI",{});var X8e=s(kM);jpe=n(X8e,"STRONG",{});var kut=s(jpe);Mfr=r(kut,"layoutlm"),kut.forEach(t),Efr=r(X8e," \u2014 "),$O=n(X8e,"A",{href:!0});var Rut=s($O);yfr=r(Rut,"TFLayoutLMForSequenceClassification"),Rut.forEach(t),wfr=r(X8e," (LayoutLM model)"),X8e.forEach(t),Afr=i(W),RM=n(W,"LI",{});var V8e=s(RM);qpe=n(V8e,"STRONG",{});var Sut=s(qpe);Lfr=r(Sut,"longformer"),Sut.forEach(t),Bfr=r(V8e," \u2014 "),IO=n(V8e,"A",{href:!0});var Put=s(IO);xfr=r(Put,"TFLongformerForSequenceClassification"),Put.forEach(t),kfr=r(V8e," (Longformer model)"),V8e.forEach(t),Rfr=i(W),SM=n(W,"LI",{});var z8e=s(SM);Gpe=n(z8e,"STRONG",{});var $ut=s(Gpe);Sfr=r($ut,"mobilebert"),$ut.forEach(t),Pfr=r(z8e," \u2014 "),NO=n(z8e,"A",{href:!0});var Iut=s(NO);$fr=r(Iut,"TFMobileBertForSequenceClassification"),Iut.forEach(t),Ifr=r(z8e," (MobileBERT model)"),z8e.forEach(t),Nfr=i(W),PM=n(W,"LI",{});var W8e=s(PM);Ope=n(W8e,"STRONG",{});var Nut=s(Ope);Dfr=r(Nut,"mpnet"),Nut.forEach(t),jfr=r(W8e," \u2014 "),DO=n(W8e,"A",{href:!0});var Dut=s(DO);qfr=r(Dut,"TFMPNetForSequenceClassification"),Dut.forEach(t),Gfr=r(W8e," (MPNet model)"),W8e.forEach(t),Ofr=i(W),$M=n(W,"LI",{});var Q8e=s($M);Xpe=n(Q8e,"STRONG",{});var jut=s(Xpe);Xfr=r(jut,"openai-gpt"),jut.forEach(t),Vfr=r(Q8e," \u2014 "),jO=n(Q8e,"A",{href:!0});var qut=s(jO);zfr=r(qut,"TFOpenAIGPTForSequenceClassification"),qut.forEach(t),Wfr=r(Q8e," (OpenAI GPT model)"),Q8e.forEach(t),Qfr=i(W),IM=n(W,"LI",{});var H8e=s(IM);Vpe=n(H8e,"STRONG",{});var Gut=s(Vpe);Hfr=r(Gut,"rembert"),Gut.forEach(t),Ufr=r(H8e," \u2014 "),qO=n(H8e,"A",{href:!0});var Out=s(qO);Jfr=r(Out,"TFRemBertForSequenceClassification"),Out.forEach(t),Yfr=r(H8e," (RemBERT model)"),H8e.forEach(t),Kfr=i(W),NM=n(W,"LI",{});var U8e=s(NM);zpe=n(U8e,"STRONG",{});var Xut=s(zpe);Zfr=r(Xut,"roberta"),Xut.forEach(t),egr=r(U8e," \u2014 "),GO=n(U8e,"A",{href:!0});var Vut=s(GO);ogr=r(Vut,"TFRobertaForSequenceClassification"),Vut.forEach(t),rgr=r(U8e," (RoBERTa model)"),U8e.forEach(t),tgr=i(W),DM=n(W,"LI",{});var J8e=s(DM);Wpe=n(J8e,"STRONG",{});var zut=s(Wpe);agr=r(zut,"roformer"),zut.forEach(t),ngr=r(J8e," \u2014 "),OO=n(J8e,"A",{href:!0});var Wut=s(OO);sgr=r(Wut,"TFRoFormerForSequenceClassification"),Wut.forEach(t),lgr=r(J8e," (RoFormer model)"),J8e.forEach(t),igr=i(W),jM=n(W,"LI",{});var Y8e=s(jM);Qpe=n(Y8e,"STRONG",{});var Qut=s(Qpe);dgr=r(Qut,"tapas"),Qut.forEach(t),cgr=r(Y8e," \u2014 "),XO=n(Y8e,"A",{href:!0});var Hut=s(XO);mgr=r(Hut,"TFTapasForSequenceClassification"),Hut.forEach(t),fgr=r(Y8e," (TAPAS model)"),Y8e.forEach(t),ggr=i(W),qM=n(W,"LI",{});var K8e=s(qM);Hpe=n(K8e,"STRONG",{});var Uut=s(Hpe);hgr=r(Uut,"transfo-xl"),Uut.forEach(t),ugr=r(K8e," \u2014 "),VO=n(K8e,"A",{href:!0});var Jut=s(VO);pgr=r(Jut,"TFTransfoXLForSequenceClassification"),Jut.forEach(t),_gr=r(K8e," (Transformer-XL model)"),K8e.forEach(t),bgr=i(W),GM=n(W,"LI",{});var Z8e=s(GM);Upe=n(Z8e,"STRONG",{});var Yut=s(Upe);vgr=r(Yut,"xlm"),Yut.forEach(t),Tgr=r(Z8e," \u2014 "),zO=n(Z8e,"A",{href:!0});var Kut=s(zO);Fgr=r(Kut,"TFXLMForSequenceClassification"),Kut.forEach(t),Cgr=r(Z8e," (XLM model)"),Z8e.forEach(t),Mgr=i(W),OM=n(W,"LI",{});var e9e=s(OM);Jpe=n(e9e,"STRONG",{});var Zut=s(Jpe);Egr=r(Zut,"xlm-roberta"),Zut.forEach(t),ygr=r(e9e," \u2014 "),WO=n(e9e,"A",{href:!0});var ept=s(WO);wgr=r(ept,"TFXLMRobertaForSequenceClassification"),ept.forEach(t),Agr=r(e9e," (XLM-RoBERTa model)"),e9e.forEach(t),Lgr=i(W),XM=n(W,"LI",{});var o9e=s(XM);Ype=n(o9e,"STRONG",{});var opt=s(Ype);Bgr=r(opt,"xlnet"),opt.forEach(t),xgr=r(o9e," \u2014 "),QO=n(o9e,"A",{href:!0});var rpt=s(QO);kgr=r(rpt,"TFXLNetForSequenceClassification"),rpt.forEach(t),Rgr=r(o9e," (XLNet model)"),o9e.forEach(t),W.forEach(t),Sgr=i(Fa),Kpe=n(Fa,"P",{});var tpt=s(Kpe);Pgr=r(tpt,"Examples:"),tpt.forEach(t),$gr=i(Fa),f($0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),vRe=i(c),Sc=n(c,"H2",{class:!0});var kPe=s(Sc);VM=n(kPe,"A",{id:!0,class:!0,href:!0});var apt=s(VM);Zpe=n(apt,"SPAN",{});var npt=s(Zpe);f(I0.$$.fragment,npt),npt.forEach(t),apt.forEach(t),Igr=i(kPe),e_e=n(kPe,"SPAN",{});var spt=s(e_e);Ngr=r(spt,"TFAutoModelForMultipleChoice"),spt.forEach(t),kPe.forEach(t),TRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);f(N0.$$.fragment,Zl),Dgr=i(Zl),Pc=n(Zl,"P",{});var rQ=s(Pc);jgr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),o_e=n(rQ,"CODE",{});var lpt=s(o_e);qgr=r(lpt,"from_pretrained()"),lpt.forEach(t),Ggr=r(rQ,"class method or the "),r_e=n(rQ,"CODE",{});var ipt=s(r_e);Ogr=r(ipt,"from_config()"),ipt.forEach(t),Xgr=r(rQ,`class
method.`),rQ.forEach(t),Vgr=i(Zl),D0=n(Zl,"P",{});var RPe=s(D0);zgr=r(RPe,"This class cannot be instantiated directly using "),t_e=n(RPe,"CODE",{});var dpt=s(t_e);Wgr=r(dpt,"__init__()"),dpt.forEach(t),Qgr=r(RPe," (throws an error)."),RPe.forEach(t),Hgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);f(j0.$$.fragment,ei),Ugr=i(ei),a_e=n(ei,"P",{});var cpt=s(a_e);Jgr=r(cpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cpt.forEach(t),Ygr=i(ei),$c=n(ei,"P",{});var tQ=s($c);Kgr=r(tQ,`Note:
Loading a model from its configuration file does `),n_e=n(tQ,"STRONG",{});var mpt=s(n_e);Zgr=r(mpt,"not"),mpt.forEach(t),ehr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s_e=n(tQ,"CODE",{});var fpt=s(s_e);ohr=r(fpt,"from_pretrained()"),fpt.forEach(t),rhr=r(tQ,"to load the model weights."),tQ.forEach(t),thr=i(ei),l_e=n(ei,"P",{});var gpt=s(l_e);ahr=r(gpt,"Examples:"),gpt.forEach(t),nhr=i(ei),f(q0.$$.fragment,ei),ei.forEach(t),shr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);f(G0.$$.fragment,Ca),lhr=i(Ca),i_e=n(Ca,"P",{});var hpt=s(i_e);ihr=r(hpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hpt.forEach(t),dhr=i(Ca),Mn=n(Ca,"P",{});var G5=s(Mn);chr=r(G5,"The model class to instantiate is selected based on the "),d_e=n(G5,"CODE",{});var upt=s(d_e);mhr=r(upt,"model_type"),upt.forEach(t),fhr=r(G5,` property of the config object (either
passed as an argument or loaded from `),c_e=n(G5,"CODE",{});var ppt=s(c_e);ghr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),hhr=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(G5,"CODE",{});var _pt=s(m_e);uhr=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),phr=r(G5,":"),G5.forEach(t),_hr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);zM=n(le,"LI",{});var r9e=s(zM);f_e=n(r9e,"STRONG",{});var bpt=s(f_e);bhr=r(bpt,"albert"),bpt.forEach(t),vhr=r(r9e," \u2014 "),HO=n(r9e,"A",{href:!0});var vpt=s(HO);Thr=r(vpt,"TFAlbertForMultipleChoice"),vpt.forEach(t),Fhr=r(r9e," (ALBERT model)"),r9e.forEach(t),Chr=i(le),WM=n(le,"LI",{});var t9e=s(WM);g_e=n(t9e,"STRONG",{});var Tpt=s(g_e);Mhr=r(Tpt,"bert"),Tpt.forEach(t),Ehr=r(t9e," \u2014 "),UO=n(t9e,"A",{href:!0});var Fpt=s(UO);yhr=r(Fpt,"TFBertForMultipleChoice"),Fpt.forEach(t),whr=r(t9e," (BERT model)"),t9e.forEach(t),Ahr=i(le),QM=n(le,"LI",{});var a9e=s(QM);h_e=n(a9e,"STRONG",{});var Cpt=s(h_e);Lhr=r(Cpt,"camembert"),Cpt.forEach(t),Bhr=r(a9e," \u2014 "),JO=n(a9e,"A",{href:!0});var Mpt=s(JO);xhr=r(Mpt,"TFCamembertForMultipleChoice"),Mpt.forEach(t),khr=r(a9e," (CamemBERT model)"),a9e.forEach(t),Rhr=i(le),HM=n(le,"LI",{});var n9e=s(HM);u_e=n(n9e,"STRONG",{});var Ept=s(u_e);Shr=r(Ept,"convbert"),Ept.forEach(t),Phr=r(n9e," \u2014 "),YO=n(n9e,"A",{href:!0});var ypt=s(YO);$hr=r(ypt,"TFConvBertForMultipleChoice"),ypt.forEach(t),Ihr=r(n9e," (ConvBERT model)"),n9e.forEach(t),Nhr=i(le),UM=n(le,"LI",{});var s9e=s(UM);p_e=n(s9e,"STRONG",{});var wpt=s(p_e);Dhr=r(wpt,"distilbert"),wpt.forEach(t),jhr=r(s9e," \u2014 "),KO=n(s9e,"A",{href:!0});var Apt=s(KO);qhr=r(Apt,"TFDistilBertForMultipleChoice"),Apt.forEach(t),Ghr=r(s9e," (DistilBERT model)"),s9e.forEach(t),Ohr=i(le),JM=n(le,"LI",{});var l9e=s(JM);__e=n(l9e,"STRONG",{});var Lpt=s(__e);Xhr=r(Lpt,"electra"),Lpt.forEach(t),Vhr=r(l9e," \u2014 "),ZO=n(l9e,"A",{href:!0});var Bpt=s(ZO);zhr=r(Bpt,"TFElectraForMultipleChoice"),Bpt.forEach(t),Whr=r(l9e," (ELECTRA model)"),l9e.forEach(t),Qhr=i(le),YM=n(le,"LI",{});var i9e=s(YM);b_e=n(i9e,"STRONG",{});var xpt=s(b_e);Hhr=r(xpt,"flaubert"),xpt.forEach(t),Uhr=r(i9e," \u2014 "),eX=n(i9e,"A",{href:!0});var kpt=s(eX);Jhr=r(kpt,"TFFlaubertForMultipleChoice"),kpt.forEach(t),Yhr=r(i9e," (FlauBERT model)"),i9e.forEach(t),Khr=i(le),KM=n(le,"LI",{});var d9e=s(KM);v_e=n(d9e,"STRONG",{});var Rpt=s(v_e);Zhr=r(Rpt,"funnel"),Rpt.forEach(t),eur=r(d9e," \u2014 "),oX=n(d9e,"A",{href:!0});var Spt=s(oX);our=r(Spt,"TFFunnelForMultipleChoice"),Spt.forEach(t),rur=r(d9e," (Funnel Transformer model)"),d9e.forEach(t),tur=i(le),ZM=n(le,"LI",{});var c9e=s(ZM);T_e=n(c9e,"STRONG",{});var Ppt=s(T_e);aur=r(Ppt,"longformer"),Ppt.forEach(t),nur=r(c9e," \u2014 "),rX=n(c9e,"A",{href:!0});var $pt=s(rX);sur=r($pt,"TFLongformerForMultipleChoice"),$pt.forEach(t),lur=r(c9e," (Longformer model)"),c9e.forEach(t),iur=i(le),e4=n(le,"LI",{});var m9e=s(e4);F_e=n(m9e,"STRONG",{});var Ipt=s(F_e);dur=r(Ipt,"mobilebert"),Ipt.forEach(t),cur=r(m9e," \u2014 "),tX=n(m9e,"A",{href:!0});var Npt=s(tX);mur=r(Npt,"TFMobileBertForMultipleChoice"),Npt.forEach(t),fur=r(m9e," (MobileBERT model)"),m9e.forEach(t),gur=i(le),o4=n(le,"LI",{});var f9e=s(o4);C_e=n(f9e,"STRONG",{});var Dpt=s(C_e);hur=r(Dpt,"mpnet"),Dpt.forEach(t),uur=r(f9e," \u2014 "),aX=n(f9e,"A",{href:!0});var jpt=s(aX);pur=r(jpt,"TFMPNetForMultipleChoice"),jpt.forEach(t),_ur=r(f9e," (MPNet model)"),f9e.forEach(t),bur=i(le),r4=n(le,"LI",{});var g9e=s(r4);M_e=n(g9e,"STRONG",{});var qpt=s(M_e);vur=r(qpt,"rembert"),qpt.forEach(t),Tur=r(g9e," \u2014 "),nX=n(g9e,"A",{href:!0});var Gpt=s(nX);Fur=r(Gpt,"TFRemBertForMultipleChoice"),Gpt.forEach(t),Cur=r(g9e," (RemBERT model)"),g9e.forEach(t),Mur=i(le),t4=n(le,"LI",{});var h9e=s(t4);E_e=n(h9e,"STRONG",{});var Opt=s(E_e);Eur=r(Opt,"roberta"),Opt.forEach(t),yur=r(h9e," \u2014 "),sX=n(h9e,"A",{href:!0});var Xpt=s(sX);wur=r(Xpt,"TFRobertaForMultipleChoice"),Xpt.forEach(t),Aur=r(h9e," (RoBERTa model)"),h9e.forEach(t),Lur=i(le),a4=n(le,"LI",{});var u9e=s(a4);y_e=n(u9e,"STRONG",{});var Vpt=s(y_e);Bur=r(Vpt,"roformer"),Vpt.forEach(t),xur=r(u9e," \u2014 "),lX=n(u9e,"A",{href:!0});var zpt=s(lX);kur=r(zpt,"TFRoFormerForMultipleChoice"),zpt.forEach(t),Rur=r(u9e," (RoFormer model)"),u9e.forEach(t),Sur=i(le),n4=n(le,"LI",{});var p9e=s(n4);w_e=n(p9e,"STRONG",{});var Wpt=s(w_e);Pur=r(Wpt,"xlm"),Wpt.forEach(t),$ur=r(p9e," \u2014 "),iX=n(p9e,"A",{href:!0});var Qpt=s(iX);Iur=r(Qpt,"TFXLMForMultipleChoice"),Qpt.forEach(t),Nur=r(p9e," (XLM model)"),p9e.forEach(t),Dur=i(le),s4=n(le,"LI",{});var _9e=s(s4);A_e=n(_9e,"STRONG",{});var Hpt=s(A_e);jur=r(Hpt,"xlm-roberta"),Hpt.forEach(t),qur=r(_9e," \u2014 "),dX=n(_9e,"A",{href:!0});var Upt=s(dX);Gur=r(Upt,"TFXLMRobertaForMultipleChoice"),Upt.forEach(t),Our=r(_9e," (XLM-RoBERTa model)"),_9e.forEach(t),Xur=i(le),l4=n(le,"LI",{});var b9e=s(l4);L_e=n(b9e,"STRONG",{});var Jpt=s(L_e);Vur=r(Jpt,"xlnet"),Jpt.forEach(t),zur=r(b9e," \u2014 "),cX=n(b9e,"A",{href:!0});var Ypt=s(cX);Wur=r(Ypt,"TFXLNetForMultipleChoice"),Ypt.forEach(t),Qur=r(b9e," (XLNet model)"),b9e.forEach(t),le.forEach(t),Hur=i(Ca),B_e=n(Ca,"P",{});var Kpt=s(B_e);Uur=r(Kpt,"Examples:"),Kpt.forEach(t),Jur=i(Ca),f(O0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),FRe=i(c),Ic=n(c,"H2",{class:!0});var SPe=s(Ic);i4=n(SPe,"A",{id:!0,class:!0,href:!0});var Zpt=s(i4);x_e=n(Zpt,"SPAN",{});var e_t=s(x_e);f(X0.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),Yur=i(SPe),k_e=n(SPe,"SPAN",{});var o_t=s(k_e);Kur=r(o_t,"TFAutoModelForTableQuestionAnswering"),o_t.forEach(t),SPe.forEach(t),CRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);f(V0.$$.fragment,oi),Zur=i(oi),Nc=n(oi,"P",{});var aQ=s(Nc);epr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),R_e=n(aQ,"CODE",{});var r_t=s(R_e);opr=r(r_t,"from_pretrained()"),r_t.forEach(t),rpr=r(aQ,"class method or the "),S_e=n(aQ,"CODE",{});var t_t=s(S_e);tpr=r(t_t,"from_config()"),t_t.forEach(t),apr=r(aQ,`class
method.`),aQ.forEach(t),npr=i(oi),z0=n(oi,"P",{});var PPe=s(z0);spr=r(PPe,"This class cannot be instantiated directly using "),P_e=n(PPe,"CODE",{});var a_t=s(P_e);lpr=r(a_t,"__init__()"),a_t.forEach(t),ipr=r(PPe," (throws an error)."),PPe.forEach(t),dpr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);f(W0.$$.fragment,ri),cpr=i(ri),$_e=n(ri,"P",{});var n_t=s($_e);mpr=r(n_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n_t.forEach(t),fpr=i(ri),Dc=n(ri,"P",{});var nQ=s(Dc);gpr=r(nQ,`Note:
Loading a model from its configuration file does `),I_e=n(nQ,"STRONG",{});var s_t=s(I_e);hpr=r(s_t,"not"),s_t.forEach(t),upr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N_e=n(nQ,"CODE",{});var l_t=s(N_e);ppr=r(l_t,"from_pretrained()"),l_t.forEach(t),_pr=r(nQ,"to load the model weights."),nQ.forEach(t),bpr=i(ri),D_e=n(ri,"P",{});var i_t=s(D_e);vpr=r(i_t,"Examples:"),i_t.forEach(t),Tpr=i(ri),f(Q0.$$.fragment,ri),ri.forEach(t),Fpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);f(H0.$$.fragment,Ma),Cpr=i(Ma),j_e=n(Ma,"P",{});var d_t=s(j_e);Mpr=r(d_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),d_t.forEach(t),Epr=i(Ma),En=n(Ma,"P",{});var O5=s(En);ypr=r(O5,"The model class to instantiate is selected based on the "),q_e=n(O5,"CODE",{});var c_t=s(q_e);wpr=r(c_t,"model_type"),c_t.forEach(t),Apr=r(O5,` property of the config object (either
passed as an argument or loaded from `),G_e=n(O5,"CODE",{});var m_t=s(G_e);Lpr=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),Bpr=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(O5,"CODE",{});var f_t=s(O_e);xpr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),kpr=r(O5,":"),O5.forEach(t),Rpr=i(Ma),X_e=n(Ma,"UL",{});var g_t=s(X_e);d4=n(g_t,"LI",{});var v9e=s(d4);V_e=n(v9e,"STRONG",{});var h_t=s(V_e);Spr=r(h_t,"tapas"),h_t.forEach(t),Ppr=r(v9e," \u2014 "),mX=n(v9e,"A",{href:!0});var u_t=s(mX);$pr=r(u_t,"TFTapasForQuestionAnswering"),u_t.forEach(t),Ipr=r(v9e," (TAPAS model)"),v9e.forEach(t),g_t.forEach(t),Npr=i(Ma),z_e=n(Ma,"P",{});var p_t=s(z_e);Dpr=r(p_t,"Examples:"),p_t.forEach(t),jpr=i(Ma),f(U0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),MRe=i(c),jc=n(c,"H2",{class:!0});var $Pe=s(jc);c4=n($Pe,"A",{id:!0,class:!0,href:!0});var __t=s(c4);W_e=n(__t,"SPAN",{});var b_t=s(W_e);f(J0.$$.fragment,b_t),b_t.forEach(t),__t.forEach(t),qpr=i($Pe),Q_e=n($Pe,"SPAN",{});var v_t=s(Q_e);Gpr=r(v_t,"TFAutoModelForTokenClassification"),v_t.forEach(t),$Pe.forEach(t),ERe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);f(Y0.$$.fragment,ti),Opr=i(ti),qc=n(ti,"P",{});var sQ=s(qc);Xpr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),H_e=n(sQ,"CODE",{});var T_t=s(H_e);Vpr=r(T_t,"from_pretrained()"),T_t.forEach(t),zpr=r(sQ,"class method or the "),U_e=n(sQ,"CODE",{});var F_t=s(U_e);Wpr=r(F_t,"from_config()"),F_t.forEach(t),Qpr=r(sQ,`class
method.`),sQ.forEach(t),Hpr=i(ti),K0=n(ti,"P",{});var IPe=s(K0);Upr=r(IPe,"This class cannot be instantiated directly using "),J_e=n(IPe,"CODE",{});var C_t=s(J_e);Jpr=r(C_t,"__init__()"),C_t.forEach(t),Ypr=r(IPe," (throws an error)."),IPe.forEach(t),Kpr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);f(Z0.$$.fragment,ai),Zpr=i(ai),Y_e=n(ai,"P",{});var M_t=s(Y_e);e_r=r(M_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),M_t.forEach(t),o_r=i(ai),Gc=n(ai,"P",{});var lQ=s(Gc);r_r=r(lQ,`Note:
Loading a model from its configuration file does `),K_e=n(lQ,"STRONG",{});var E_t=s(K_e);t_r=r(E_t,"not"),E_t.forEach(t),a_r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Z_e=n(lQ,"CODE",{});var y_t=s(Z_e);n_r=r(y_t,"from_pretrained()"),y_t.forEach(t),s_r=r(lQ,"to load the model weights."),lQ.forEach(t),l_r=i(ai),ebe=n(ai,"P",{});var w_t=s(ebe);i_r=r(w_t,"Examples:"),w_t.forEach(t),d_r=i(ai),f(eL.$$.fragment,ai),ai.forEach(t),c_r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);f(oL.$$.fragment,Ea),m_r=i(Ea),obe=n(Ea,"P",{});var A_t=s(obe);f_r=r(A_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),A_t.forEach(t),g_r=i(Ea),yn=n(Ea,"P",{});var X5=s(yn);h_r=r(X5,"The model class to instantiate is selected based on the "),rbe=n(X5,"CODE",{});var L_t=s(rbe);u_r=r(L_t,"model_type"),L_t.forEach(t),p_r=r(X5,` property of the config object (either
passed as an argument or loaded from `),tbe=n(X5,"CODE",{});var B_t=s(tbe);__r=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),b_r=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(X5,"CODE",{});var x_t=s(abe);v_r=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),T_r=r(X5,":"),X5.forEach(t),F_r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);m4=n(oe,"LI",{});var T9e=s(m4);nbe=n(T9e,"STRONG",{});var k_t=s(nbe);C_r=r(k_t,"albert"),k_t.forEach(t),M_r=r(T9e," \u2014 "),fX=n(T9e,"A",{href:!0});var R_t=s(fX);E_r=r(R_t,"TFAlbertForTokenClassification"),R_t.forEach(t),y_r=r(T9e," (ALBERT model)"),T9e.forEach(t),w_r=i(oe),f4=n(oe,"LI",{});var F9e=s(f4);sbe=n(F9e,"STRONG",{});var S_t=s(sbe);A_r=r(S_t,"bert"),S_t.forEach(t),L_r=r(F9e," \u2014 "),gX=n(F9e,"A",{href:!0});var P_t=s(gX);B_r=r(P_t,"TFBertForTokenClassification"),P_t.forEach(t),x_r=r(F9e," (BERT model)"),F9e.forEach(t),k_r=i(oe),g4=n(oe,"LI",{});var C9e=s(g4);lbe=n(C9e,"STRONG",{});var $_t=s(lbe);R_r=r($_t,"camembert"),$_t.forEach(t),S_r=r(C9e," \u2014 "),hX=n(C9e,"A",{href:!0});var I_t=s(hX);P_r=r(I_t,"TFCamembertForTokenClassification"),I_t.forEach(t),$_r=r(C9e," (CamemBERT model)"),C9e.forEach(t),I_r=i(oe),h4=n(oe,"LI",{});var M9e=s(h4);ibe=n(M9e,"STRONG",{});var N_t=s(ibe);N_r=r(N_t,"convbert"),N_t.forEach(t),D_r=r(M9e," \u2014 "),uX=n(M9e,"A",{href:!0});var D_t=s(uX);j_r=r(D_t,"TFConvBertForTokenClassification"),D_t.forEach(t),q_r=r(M9e," (ConvBERT model)"),M9e.forEach(t),G_r=i(oe),u4=n(oe,"LI",{});var E9e=s(u4);dbe=n(E9e,"STRONG",{});var j_t=s(dbe);O_r=r(j_t,"deberta"),j_t.forEach(t),X_r=r(E9e," \u2014 "),pX=n(E9e,"A",{href:!0});var q_t=s(pX);V_r=r(q_t,"TFDebertaForTokenClassification"),q_t.forEach(t),z_r=r(E9e," (DeBERTa model)"),E9e.forEach(t),W_r=i(oe),p4=n(oe,"LI",{});var y9e=s(p4);cbe=n(y9e,"STRONG",{});var G_t=s(cbe);Q_r=r(G_t,"deberta-v2"),G_t.forEach(t),H_r=r(y9e," \u2014 "),_X=n(y9e,"A",{href:!0});var O_t=s(_X);U_r=r(O_t,"TFDebertaV2ForTokenClassification"),O_t.forEach(t),J_r=r(y9e," (DeBERTa-v2 model)"),y9e.forEach(t),Y_r=i(oe),_4=n(oe,"LI",{});var w9e=s(_4);mbe=n(w9e,"STRONG",{});var X_t=s(mbe);K_r=r(X_t,"distilbert"),X_t.forEach(t),Z_r=r(w9e," \u2014 "),bX=n(w9e,"A",{href:!0});var V_t=s(bX);ebr=r(V_t,"TFDistilBertForTokenClassification"),V_t.forEach(t),obr=r(w9e," (DistilBERT model)"),w9e.forEach(t),rbr=i(oe),b4=n(oe,"LI",{});var A9e=s(b4);fbe=n(A9e,"STRONG",{});var z_t=s(fbe);tbr=r(z_t,"electra"),z_t.forEach(t),abr=r(A9e," \u2014 "),vX=n(A9e,"A",{href:!0});var W_t=s(vX);nbr=r(W_t,"TFElectraForTokenClassification"),W_t.forEach(t),sbr=r(A9e," (ELECTRA model)"),A9e.forEach(t),lbr=i(oe),v4=n(oe,"LI",{});var L9e=s(v4);gbe=n(L9e,"STRONG",{});var Q_t=s(gbe);ibr=r(Q_t,"flaubert"),Q_t.forEach(t),dbr=r(L9e," \u2014 "),TX=n(L9e,"A",{href:!0});var H_t=s(TX);cbr=r(H_t,"TFFlaubertForTokenClassification"),H_t.forEach(t),mbr=r(L9e," (FlauBERT model)"),L9e.forEach(t),fbr=i(oe),T4=n(oe,"LI",{});var B9e=s(T4);hbe=n(B9e,"STRONG",{});var U_t=s(hbe);gbr=r(U_t,"funnel"),U_t.forEach(t),hbr=r(B9e," \u2014 "),FX=n(B9e,"A",{href:!0});var J_t=s(FX);ubr=r(J_t,"TFFunnelForTokenClassification"),J_t.forEach(t),pbr=r(B9e," (Funnel Transformer model)"),B9e.forEach(t),_br=i(oe),F4=n(oe,"LI",{});var x9e=s(F4);ube=n(x9e,"STRONG",{});var Y_t=s(ube);bbr=r(Y_t,"layoutlm"),Y_t.forEach(t),vbr=r(x9e," \u2014 "),CX=n(x9e,"A",{href:!0});var K_t=s(CX);Tbr=r(K_t,"TFLayoutLMForTokenClassification"),K_t.forEach(t),Fbr=r(x9e," (LayoutLM model)"),x9e.forEach(t),Cbr=i(oe),C4=n(oe,"LI",{});var k9e=s(C4);pbe=n(k9e,"STRONG",{});var Z_t=s(pbe);Mbr=r(Z_t,"longformer"),Z_t.forEach(t),Ebr=r(k9e," \u2014 "),MX=n(k9e,"A",{href:!0});var ebt=s(MX);ybr=r(ebt,"TFLongformerForTokenClassification"),ebt.forEach(t),wbr=r(k9e," (Longformer model)"),k9e.forEach(t),Abr=i(oe),M4=n(oe,"LI",{});var R9e=s(M4);_be=n(R9e,"STRONG",{});var obt=s(_be);Lbr=r(obt,"mobilebert"),obt.forEach(t),Bbr=r(R9e," \u2014 "),EX=n(R9e,"A",{href:!0});var rbt=s(EX);xbr=r(rbt,"TFMobileBertForTokenClassification"),rbt.forEach(t),kbr=r(R9e," (MobileBERT model)"),R9e.forEach(t),Rbr=i(oe),E4=n(oe,"LI",{});var S9e=s(E4);bbe=n(S9e,"STRONG",{});var tbt=s(bbe);Sbr=r(tbt,"mpnet"),tbt.forEach(t),Pbr=r(S9e," \u2014 "),yX=n(S9e,"A",{href:!0});var abt=s(yX);$br=r(abt,"TFMPNetForTokenClassification"),abt.forEach(t),Ibr=r(S9e," (MPNet model)"),S9e.forEach(t),Nbr=i(oe),y4=n(oe,"LI",{});var P9e=s(y4);vbe=n(P9e,"STRONG",{});var nbt=s(vbe);Dbr=r(nbt,"rembert"),nbt.forEach(t),jbr=r(P9e," \u2014 "),wX=n(P9e,"A",{href:!0});var sbt=s(wX);qbr=r(sbt,"TFRemBertForTokenClassification"),sbt.forEach(t),Gbr=r(P9e," (RemBERT model)"),P9e.forEach(t),Obr=i(oe),w4=n(oe,"LI",{});var $9e=s(w4);Tbe=n($9e,"STRONG",{});var lbt=s(Tbe);Xbr=r(lbt,"roberta"),lbt.forEach(t),Vbr=r($9e," \u2014 "),AX=n($9e,"A",{href:!0});var ibt=s(AX);zbr=r(ibt,"TFRobertaForTokenClassification"),ibt.forEach(t),Wbr=r($9e," (RoBERTa model)"),$9e.forEach(t),Qbr=i(oe),A4=n(oe,"LI",{});var I9e=s(A4);Fbe=n(I9e,"STRONG",{});var dbt=s(Fbe);Hbr=r(dbt,"roformer"),dbt.forEach(t),Ubr=r(I9e," \u2014 "),LX=n(I9e,"A",{href:!0});var cbt=s(LX);Jbr=r(cbt,"TFRoFormerForTokenClassification"),cbt.forEach(t),Ybr=r(I9e," (RoFormer model)"),I9e.forEach(t),Kbr=i(oe),L4=n(oe,"LI",{});var N9e=s(L4);Cbe=n(N9e,"STRONG",{});var mbt=s(Cbe);Zbr=r(mbt,"xlm"),mbt.forEach(t),e2r=r(N9e," \u2014 "),BX=n(N9e,"A",{href:!0});var fbt=s(BX);o2r=r(fbt,"TFXLMForTokenClassification"),fbt.forEach(t),r2r=r(N9e," (XLM model)"),N9e.forEach(t),t2r=i(oe),B4=n(oe,"LI",{});var D9e=s(B4);Mbe=n(D9e,"STRONG",{});var gbt=s(Mbe);a2r=r(gbt,"xlm-roberta"),gbt.forEach(t),n2r=r(D9e," \u2014 "),xX=n(D9e,"A",{href:!0});var hbt=s(xX);s2r=r(hbt,"TFXLMRobertaForTokenClassification"),hbt.forEach(t),l2r=r(D9e," (XLM-RoBERTa model)"),D9e.forEach(t),i2r=i(oe),x4=n(oe,"LI",{});var j9e=s(x4);Ebe=n(j9e,"STRONG",{});var ubt=s(Ebe);d2r=r(ubt,"xlnet"),ubt.forEach(t),c2r=r(j9e," \u2014 "),kX=n(j9e,"A",{href:!0});var pbt=s(kX);m2r=r(pbt,"TFXLNetForTokenClassification"),pbt.forEach(t),f2r=r(j9e," (XLNet model)"),j9e.forEach(t),oe.forEach(t),g2r=i(Ea),ybe=n(Ea,"P",{});var _bt=s(ybe);h2r=r(_bt,"Examples:"),_bt.forEach(t),u2r=i(Ea),f(rL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),yRe=i(c),Oc=n(c,"H2",{class:!0});var NPe=s(Oc);k4=n(NPe,"A",{id:!0,class:!0,href:!0});var bbt=s(k4);wbe=n(bbt,"SPAN",{});var vbt=s(wbe);f(tL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),p2r=i(NPe),Abe=n(NPe,"SPAN",{});var Tbt=s(Abe);_2r=r(Tbt,"TFAutoModelForQuestionAnswering"),Tbt.forEach(t),NPe.forEach(t),wRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);f(aL.$$.fragment,ni),b2r=i(ni),Xc=n(ni,"P",{});var iQ=s(Xc);v2r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lbe=n(iQ,"CODE",{});var Fbt=s(Lbe);T2r=r(Fbt,"from_pretrained()"),Fbt.forEach(t),F2r=r(iQ,"class method or the "),Bbe=n(iQ,"CODE",{});var Cbt=s(Bbe);C2r=r(Cbt,"from_config()"),Cbt.forEach(t),M2r=r(iQ,`class
method.`),iQ.forEach(t),E2r=i(ni),nL=n(ni,"P",{});var DPe=s(nL);y2r=r(DPe,"This class cannot be instantiated directly using "),xbe=n(DPe,"CODE",{});var Mbt=s(xbe);w2r=r(Mbt,"__init__()"),Mbt.forEach(t),A2r=r(DPe," (throws an error)."),DPe.forEach(t),L2r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);f(sL.$$.fragment,si),B2r=i(si),kbe=n(si,"P",{});var Ebt=s(kbe);x2r=r(Ebt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ebt.forEach(t),k2r=i(si),Vc=n(si,"P",{});var dQ=s(Vc);R2r=r(dQ,`Note:
Loading a model from its configuration file does `),Rbe=n(dQ,"STRONG",{});var ybt=s(Rbe);S2r=r(ybt,"not"),ybt.forEach(t),P2r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sbe=n(dQ,"CODE",{});var wbt=s(Sbe);$2r=r(wbt,"from_pretrained()"),wbt.forEach(t),I2r=r(dQ,"to load the model weights."),dQ.forEach(t),N2r=i(si),Pbe=n(si,"P",{});var Abt=s(Pbe);D2r=r(Abt,"Examples:"),Abt.forEach(t),j2r=i(si),f(lL.$$.fragment,si),si.forEach(t),q2r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);f(iL.$$.fragment,ya),G2r=i(ya),$be=n(ya,"P",{});var Lbt=s($be);O2r=r(Lbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lbt.forEach(t),X2r=i(ya),wn=n(ya,"P",{});var V5=s(wn);V2r=r(V5,"The model class to instantiate is selected based on the "),Ibe=n(V5,"CODE",{});var Bbt=s(Ibe);z2r=r(Bbt,"model_type"),Bbt.forEach(t),W2r=r(V5,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(V5,"CODE",{});var xbt=s(Nbe);Q2r=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),H2r=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(V5,"CODE",{});var kbt=s(Dbe);U2r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),J2r=r(V5,":"),V5.forEach(t),Y2r=i(ya),Z=n(ya,"UL",{});var te=s(Z);R4=n(te,"LI",{});var q9e=s(R4);jbe=n(q9e,"STRONG",{});var Rbt=s(jbe);K2r=r(Rbt,"albert"),Rbt.forEach(t),Z2r=r(q9e," \u2014 "),RX=n(q9e,"A",{href:!0});var Sbt=s(RX);evr=r(Sbt,"TFAlbertForQuestionAnswering"),Sbt.forEach(t),ovr=r(q9e," (ALBERT model)"),q9e.forEach(t),rvr=i(te),S4=n(te,"LI",{});var G9e=s(S4);qbe=n(G9e,"STRONG",{});var Pbt=s(qbe);tvr=r(Pbt,"bert"),Pbt.forEach(t),avr=r(G9e," \u2014 "),SX=n(G9e,"A",{href:!0});var $bt=s(SX);nvr=r($bt,"TFBertForQuestionAnswering"),$bt.forEach(t),svr=r(G9e," (BERT model)"),G9e.forEach(t),lvr=i(te),P4=n(te,"LI",{});var O9e=s(P4);Gbe=n(O9e,"STRONG",{});var Ibt=s(Gbe);ivr=r(Ibt,"camembert"),Ibt.forEach(t),dvr=r(O9e," \u2014 "),PX=n(O9e,"A",{href:!0});var Nbt=s(PX);cvr=r(Nbt,"TFCamembertForQuestionAnswering"),Nbt.forEach(t),mvr=r(O9e," (CamemBERT model)"),O9e.forEach(t),fvr=i(te),$4=n(te,"LI",{});var X9e=s($4);Obe=n(X9e,"STRONG",{});var Dbt=s(Obe);gvr=r(Dbt,"convbert"),Dbt.forEach(t),hvr=r(X9e," \u2014 "),$X=n(X9e,"A",{href:!0});var jbt=s($X);uvr=r(jbt,"TFConvBertForQuestionAnswering"),jbt.forEach(t),pvr=r(X9e," (ConvBERT model)"),X9e.forEach(t),_vr=i(te),I4=n(te,"LI",{});var V9e=s(I4);Xbe=n(V9e,"STRONG",{});var qbt=s(Xbe);bvr=r(qbt,"deberta"),qbt.forEach(t),vvr=r(V9e," \u2014 "),IX=n(V9e,"A",{href:!0});var Gbt=s(IX);Tvr=r(Gbt,"TFDebertaForQuestionAnswering"),Gbt.forEach(t),Fvr=r(V9e," (DeBERTa model)"),V9e.forEach(t),Cvr=i(te),N4=n(te,"LI",{});var z9e=s(N4);Vbe=n(z9e,"STRONG",{});var Obt=s(Vbe);Mvr=r(Obt,"deberta-v2"),Obt.forEach(t),Evr=r(z9e," \u2014 "),NX=n(z9e,"A",{href:!0});var Xbt=s(NX);yvr=r(Xbt,"TFDebertaV2ForQuestionAnswering"),Xbt.forEach(t),wvr=r(z9e," (DeBERTa-v2 model)"),z9e.forEach(t),Avr=i(te),D4=n(te,"LI",{});var W9e=s(D4);zbe=n(W9e,"STRONG",{});var Vbt=s(zbe);Lvr=r(Vbt,"distilbert"),Vbt.forEach(t),Bvr=r(W9e," \u2014 "),DX=n(W9e,"A",{href:!0});var zbt=s(DX);xvr=r(zbt,"TFDistilBertForQuestionAnswering"),zbt.forEach(t),kvr=r(W9e," (DistilBERT model)"),W9e.forEach(t),Rvr=i(te),j4=n(te,"LI",{});var Q9e=s(j4);Wbe=n(Q9e,"STRONG",{});var Wbt=s(Wbe);Svr=r(Wbt,"electra"),Wbt.forEach(t),Pvr=r(Q9e," \u2014 "),jX=n(Q9e,"A",{href:!0});var Qbt=s(jX);$vr=r(Qbt,"TFElectraForQuestionAnswering"),Qbt.forEach(t),Ivr=r(Q9e," (ELECTRA model)"),Q9e.forEach(t),Nvr=i(te),q4=n(te,"LI",{});var H9e=s(q4);Qbe=n(H9e,"STRONG",{});var Hbt=s(Qbe);Dvr=r(Hbt,"flaubert"),Hbt.forEach(t),jvr=r(H9e," \u2014 "),qX=n(H9e,"A",{href:!0});var Ubt=s(qX);qvr=r(Ubt,"TFFlaubertForQuestionAnsweringSimple"),Ubt.forEach(t),Gvr=r(H9e," (FlauBERT model)"),H9e.forEach(t),Ovr=i(te),G4=n(te,"LI",{});var U9e=s(G4);Hbe=n(U9e,"STRONG",{});var Jbt=s(Hbe);Xvr=r(Jbt,"funnel"),Jbt.forEach(t),Vvr=r(U9e," \u2014 "),GX=n(U9e,"A",{href:!0});var Ybt=s(GX);zvr=r(Ybt,"TFFunnelForQuestionAnswering"),Ybt.forEach(t),Wvr=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),Qvr=i(te),O4=n(te,"LI",{});var J9e=s(O4);Ube=n(J9e,"STRONG",{});var Kbt=s(Ube);Hvr=r(Kbt,"longformer"),Kbt.forEach(t),Uvr=r(J9e," \u2014 "),OX=n(J9e,"A",{href:!0});var Zbt=s(OX);Jvr=r(Zbt,"TFLongformerForQuestionAnswering"),Zbt.forEach(t),Yvr=r(J9e," (Longformer model)"),J9e.forEach(t),Kvr=i(te),X4=n(te,"LI",{});var Y9e=s(X4);Jbe=n(Y9e,"STRONG",{});var e2t=s(Jbe);Zvr=r(e2t,"mobilebert"),e2t.forEach(t),eTr=r(Y9e," \u2014 "),XX=n(Y9e,"A",{href:!0});var o2t=s(XX);oTr=r(o2t,"TFMobileBertForQuestionAnswering"),o2t.forEach(t),rTr=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),tTr=i(te),V4=n(te,"LI",{});var K9e=s(V4);Ybe=n(K9e,"STRONG",{});var r2t=s(Ybe);aTr=r(r2t,"mpnet"),r2t.forEach(t),nTr=r(K9e," \u2014 "),VX=n(K9e,"A",{href:!0});var t2t=s(VX);sTr=r(t2t,"TFMPNetForQuestionAnswering"),t2t.forEach(t),lTr=r(K9e," (MPNet model)"),K9e.forEach(t),iTr=i(te),z4=n(te,"LI",{});var Z9e=s(z4);Kbe=n(Z9e,"STRONG",{});var a2t=s(Kbe);dTr=r(a2t,"rembert"),a2t.forEach(t),cTr=r(Z9e," \u2014 "),zX=n(Z9e,"A",{href:!0});var n2t=s(zX);mTr=r(n2t,"TFRemBertForQuestionAnswering"),n2t.forEach(t),fTr=r(Z9e," (RemBERT model)"),Z9e.forEach(t),gTr=i(te),W4=n(te,"LI",{});var eBe=s(W4);Zbe=n(eBe,"STRONG",{});var s2t=s(Zbe);hTr=r(s2t,"roberta"),s2t.forEach(t),uTr=r(eBe," \u2014 "),WX=n(eBe,"A",{href:!0});var l2t=s(WX);pTr=r(l2t,"TFRobertaForQuestionAnswering"),l2t.forEach(t),_Tr=r(eBe," (RoBERTa model)"),eBe.forEach(t),bTr=i(te),Q4=n(te,"LI",{});var oBe=s(Q4);e2e=n(oBe,"STRONG",{});var i2t=s(e2e);vTr=r(i2t,"roformer"),i2t.forEach(t),TTr=r(oBe," \u2014 "),QX=n(oBe,"A",{href:!0});var d2t=s(QX);FTr=r(d2t,"TFRoFormerForQuestionAnswering"),d2t.forEach(t),CTr=r(oBe," (RoFormer model)"),oBe.forEach(t),MTr=i(te),H4=n(te,"LI",{});var rBe=s(H4);o2e=n(rBe,"STRONG",{});var c2t=s(o2e);ETr=r(c2t,"xlm"),c2t.forEach(t),yTr=r(rBe," \u2014 "),HX=n(rBe,"A",{href:!0});var m2t=s(HX);wTr=r(m2t,"TFXLMForQuestionAnsweringSimple"),m2t.forEach(t),ATr=r(rBe," (XLM model)"),rBe.forEach(t),LTr=i(te),U4=n(te,"LI",{});var tBe=s(U4);r2e=n(tBe,"STRONG",{});var f2t=s(r2e);BTr=r(f2t,"xlm-roberta"),f2t.forEach(t),xTr=r(tBe," \u2014 "),UX=n(tBe,"A",{href:!0});var g2t=s(UX);kTr=r(g2t,"TFXLMRobertaForQuestionAnswering"),g2t.forEach(t),RTr=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),STr=i(te),J4=n(te,"LI",{});var aBe=s(J4);t2e=n(aBe,"STRONG",{});var h2t=s(t2e);PTr=r(h2t,"xlnet"),h2t.forEach(t),$Tr=r(aBe," \u2014 "),JX=n(aBe,"A",{href:!0});var u2t=s(JX);ITr=r(u2t,"TFXLNetForQuestionAnsweringSimple"),u2t.forEach(t),NTr=r(aBe," (XLNet model)"),aBe.forEach(t),te.forEach(t),DTr=i(ya),a2e=n(ya,"P",{});var p2t=s(a2e);jTr=r(p2t,"Examples:"),p2t.forEach(t),qTr=i(ya),f(dL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),ARe=i(c),zc=n(c,"H2",{class:!0});var jPe=s(zc);Y4=n(jPe,"A",{id:!0,class:!0,href:!0});var _2t=s(Y4);n2e=n(_2t,"SPAN",{});var b2t=s(n2e);f(cL.$$.fragment,b2t),b2t.forEach(t),_2t.forEach(t),GTr=i(jPe),s2e=n(jPe,"SPAN",{});var v2t=s(s2e);OTr=r(v2t,"TFAutoModelForVision2Seq"),v2t.forEach(t),jPe.forEach(t),LRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);f(mL.$$.fragment,li),XTr=i(li),Wc=n(li,"P",{});var cQ=s(Wc);VTr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),l2e=n(cQ,"CODE",{});var T2t=s(l2e);zTr=r(T2t,"from_pretrained()"),T2t.forEach(t),WTr=r(cQ,"class method or the "),i2e=n(cQ,"CODE",{});var F2t=s(i2e);QTr=r(F2t,"from_config()"),F2t.forEach(t),HTr=r(cQ,`class
method.`),cQ.forEach(t),UTr=i(li),fL=n(li,"P",{});var qPe=s(fL);JTr=r(qPe,"This class cannot be instantiated directly using "),d2e=n(qPe,"CODE",{});var C2t=s(d2e);YTr=r(C2t,"__init__()"),C2t.forEach(t),KTr=r(qPe," (throws an error)."),qPe.forEach(t),ZTr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);f(gL.$$.fragment,ii),e1r=i(ii),c2e=n(ii,"P",{});var M2t=s(c2e);o1r=r(M2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M2t.forEach(t),r1r=i(ii),Qc=n(ii,"P",{});var mQ=s(Qc);t1r=r(mQ,`Note:
Loading a model from its configuration file does `),m2e=n(mQ,"STRONG",{});var E2t=s(m2e);a1r=r(E2t,"not"),E2t.forEach(t),n1r=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),f2e=n(mQ,"CODE",{});var y2t=s(f2e);s1r=r(y2t,"from_pretrained()"),y2t.forEach(t),l1r=r(mQ,"to load the model weights."),mQ.forEach(t),i1r=i(ii),g2e=n(ii,"P",{});var w2t=s(g2e);d1r=r(w2t,"Examples:"),w2t.forEach(t),c1r=i(ii),f(hL.$$.fragment,ii),ii.forEach(t),m1r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);f(uL.$$.fragment,wa),f1r=i(wa),h2e=n(wa,"P",{});var A2t=s(h2e);g1r=r(A2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A2t.forEach(t),h1r=i(wa),An=n(wa,"P",{});var z5=s(An);u1r=r(z5,"The model class to instantiate is selected based on the "),u2e=n(z5,"CODE",{});var L2t=s(u2e);p1r=r(L2t,"model_type"),L2t.forEach(t),_1r=r(z5,` property of the config object (either
passed as an argument or loaded from `),p2e=n(z5,"CODE",{});var B2t=s(p2e);b1r=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),v1r=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(z5,"CODE",{});var x2t=s(_2e);T1r=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),F1r=r(z5,":"),z5.forEach(t),C1r=i(wa),b2e=n(wa,"UL",{});var k2t=s(b2e);K4=n(k2t,"LI",{});var nBe=s(K4);v2e=n(nBe,"STRONG",{});var R2t=s(v2e);M1r=r(R2t,"vision-encoder-decoder"),R2t.forEach(t),E1r=r(nBe," \u2014 "),YX=n(nBe,"A",{href:!0});var S2t=s(YX);y1r=r(S2t,"TFVisionEncoderDecoderModel"),S2t.forEach(t),w1r=r(nBe," (Vision Encoder decoder model)"),nBe.forEach(t),k2t.forEach(t),A1r=i(wa),T2e=n(wa,"P",{});var P2t=s(T2e);L1r=r(P2t,"Examples:"),P2t.forEach(t),B1r=i(wa),f(pL.$$.fragment,wa),wa.forEach(t),li.forEach(t),BRe=i(c),Hc=n(c,"H2",{class:!0});var GPe=s(Hc);Z4=n(GPe,"A",{id:!0,class:!0,href:!0});var $2t=s(Z4);F2e=n($2t,"SPAN",{});var I2t=s(F2e);f(_L.$$.fragment,I2t),I2t.forEach(t),$2t.forEach(t),x1r=i(GPe),C2e=n(GPe,"SPAN",{});var N2t=s(C2e);k1r=r(N2t,"TFAutoModelForSpeechSeq2Seq"),N2t.forEach(t),GPe.forEach(t),xRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);f(bL.$$.fragment,di),R1r=i(di),Uc=n(di,"P",{});var fQ=s(Uc);S1r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),M2e=n(fQ,"CODE",{});var D2t=s(M2e);P1r=r(D2t,"from_pretrained()"),D2t.forEach(t),$1r=r(fQ,"class method or the "),E2e=n(fQ,"CODE",{});var j2t=s(E2e);I1r=r(j2t,"from_config()"),j2t.forEach(t),N1r=r(fQ,`class
method.`),fQ.forEach(t),D1r=i(di),vL=n(di,"P",{});var OPe=s(vL);j1r=r(OPe,"This class cannot be instantiated directly using "),y2e=n(OPe,"CODE",{});var q2t=s(y2e);q1r=r(q2t,"__init__()"),q2t.forEach(t),G1r=r(OPe," (throws an error)."),OPe.forEach(t),O1r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);f(TL.$$.fragment,ci),X1r=i(ci),w2e=n(ci,"P",{});var G2t=s(w2e);V1r=r(G2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),G2t.forEach(t),z1r=i(ci),Jc=n(ci,"P",{});var gQ=s(Jc);W1r=r(gQ,`Note:
Loading a model from its configuration file does `),A2e=n(gQ,"STRONG",{});var O2t=s(A2e);Q1r=r(O2t,"not"),O2t.forEach(t),H1r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),L2e=n(gQ,"CODE",{});var X2t=s(L2e);U1r=r(X2t,"from_pretrained()"),X2t.forEach(t),J1r=r(gQ,"to load the model weights."),gQ.forEach(t),Y1r=i(ci),B2e=n(ci,"P",{});var V2t=s(B2e);K1r=r(V2t,"Examples:"),V2t.forEach(t),Z1r=i(ci),f(FL.$$.fragment,ci),ci.forEach(t),eFr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);f(CL.$$.fragment,Aa),oFr=i(Aa),x2e=n(Aa,"P",{});var z2t=s(x2e);rFr=r(z2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z2t.forEach(t),tFr=i(Aa),Ln=n(Aa,"P",{});var W5=s(Ln);aFr=r(W5,"The model class to instantiate is selected based on the "),k2e=n(W5,"CODE",{});var W2t=s(k2e);nFr=r(W2t,"model_type"),W2t.forEach(t),sFr=r(W5,` property of the config object (either
passed as an argument or loaded from `),R2e=n(W5,"CODE",{});var Q2t=s(R2e);lFr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),iFr=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S2e=n(W5,"CODE",{});var H2t=s(S2e);dFr=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),cFr=r(W5,":"),W5.forEach(t),mFr=i(Aa),P2e=n(Aa,"UL",{});var U2t=s(P2e);eE=n(U2t,"LI",{});var sBe=s(eE);$2e=n(sBe,"STRONG",{});var J2t=s($2e);fFr=r(J2t,"speech_to_text"),J2t.forEach(t),gFr=r(sBe," \u2014 "),KX=n(sBe,"A",{href:!0});var Y2t=s(KX);hFr=r(Y2t,"TFSpeech2TextForConditionalGeneration"),Y2t.forEach(t),uFr=r(sBe," (Speech2Text model)"),sBe.forEach(t),U2t.forEach(t),pFr=i(Aa),I2e=n(Aa,"P",{});var K2t=s(I2e);_Fr=r(K2t,"Examples:"),K2t.forEach(t),bFr=i(Aa),f(ML.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),kRe=i(c),Yc=n(c,"H2",{class:!0});var XPe=s(Yc);oE=n(XPe,"A",{id:!0,class:!0,href:!0});var Z2t=s(oE);N2e=n(Z2t,"SPAN",{});var evt=s(N2e);f(EL.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),vFr=i(XPe),D2e=n(XPe,"SPAN",{});var ovt=s(D2e);TFr=r(ovt,"FlaxAutoModel"),ovt.forEach(t),XPe.forEach(t),RRe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);f(yL.$$.fragment,mi),FFr=i(mi),Kc=n(mi,"P",{});var hQ=s(Kc);CFr=r(hQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),j2e=n(hQ,"CODE",{});var rvt=s(j2e);MFr=r(rvt,"from_pretrained()"),rvt.forEach(t),EFr=r(hQ,"class method or the "),q2e=n(hQ,"CODE",{});var tvt=s(q2e);yFr=r(tvt,"from_config()"),tvt.forEach(t),wFr=r(hQ,`class
method.`),hQ.forEach(t),AFr=i(mi),wL=n(mi,"P",{});var VPe=s(wL);LFr=r(VPe,"This class cannot be instantiated directly using "),G2e=n(VPe,"CODE",{});var avt=s(G2e);BFr=r(avt,"__init__()"),avt.forEach(t),xFr=r(VPe," (throws an error)."),VPe.forEach(t),kFr=i(mi),wt=n(mi,"DIV",{class:!0});var fi=s(wt);f(AL.$$.fragment,fi),RFr=i(fi),O2e=n(fi,"P",{});var nvt=s(O2e);SFr=r(nvt,"Instantiates one of the base model classes of the library from a configuration."),nvt.forEach(t),PFr=i(fi),Zc=n(fi,"P",{});var uQ=s(Zc);$Fr=r(uQ,`Note:
Loading a model from its configuration file does `),X2e=n(uQ,"STRONG",{});var svt=s(X2e);IFr=r(svt,"not"),svt.forEach(t),NFr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),V2e=n(uQ,"CODE",{});var lvt=s(V2e);DFr=r(lvt,"from_pretrained()"),lvt.forEach(t),jFr=r(uQ,"to load the model weights."),uQ.forEach(t),qFr=i(fi),z2e=n(fi,"P",{});var ivt=s(z2e);GFr=r(ivt,"Examples:"),ivt.forEach(t),OFr=i(fi),f(LL.$$.fragment,fi),fi.forEach(t),XFr=i(mi),Ao=n(mi,"DIV",{class:!0});var La=s(Ao);f(BL.$$.fragment,La),VFr=i(La),W2e=n(La,"P",{});var dvt=s(W2e);zFr=r(dvt,"Instantiate one of the base model classes of the library from a pretrained model."),dvt.forEach(t),WFr=i(La),Bn=n(La,"P",{});var Q5=s(Bn);QFr=r(Q5,"The model class to instantiate is selected based on the "),Q2e=n(Q5,"CODE",{});var cvt=s(Q2e);HFr=r(cvt,"model_type"),cvt.forEach(t),UFr=r(Q5,` property of the config object (either
passed as an argument or loaded from `),H2e=n(Q5,"CODE",{});var mvt=s(H2e);JFr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),YFr=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(Q5,"CODE",{});var fvt=s(U2e);KFr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),ZFr=r(Q5,":"),Q5.forEach(t),eCr=i(La),z=n(La,"UL",{});var Q=s(z);rE=n(Q,"LI",{});var lBe=s(rE);J2e=n(lBe,"STRONG",{});var gvt=s(J2e);oCr=r(gvt,"albert"),gvt.forEach(t),rCr=r(lBe," \u2014 "),ZX=n(lBe,"A",{href:!0});var hvt=s(ZX);tCr=r(hvt,"FlaxAlbertModel"),hvt.forEach(t),aCr=r(lBe," (ALBERT model)"),lBe.forEach(t),nCr=i(Q),tE=n(Q,"LI",{});var iBe=s(tE);Y2e=n(iBe,"STRONG",{});var uvt=s(Y2e);sCr=r(uvt,"bart"),uvt.forEach(t),lCr=r(iBe," \u2014 "),eV=n(iBe,"A",{href:!0});var pvt=s(eV);iCr=r(pvt,"FlaxBartModel"),pvt.forEach(t),dCr=r(iBe," (BART model)"),iBe.forEach(t),cCr=i(Q),aE=n(Q,"LI",{});var dBe=s(aE);K2e=n(dBe,"STRONG",{});var _vt=s(K2e);mCr=r(_vt,"beit"),_vt.forEach(t),fCr=r(dBe," \u2014 "),oV=n(dBe,"A",{href:!0});var bvt=s(oV);gCr=r(bvt,"FlaxBeitModel"),bvt.forEach(t),hCr=r(dBe," (BEiT model)"),dBe.forEach(t),uCr=i(Q),nE=n(Q,"LI",{});var cBe=s(nE);Z2e=n(cBe,"STRONG",{});var vvt=s(Z2e);pCr=r(vvt,"bert"),vvt.forEach(t),_Cr=r(cBe," \u2014 "),rV=n(cBe,"A",{href:!0});var Tvt=s(rV);bCr=r(Tvt,"FlaxBertModel"),Tvt.forEach(t),vCr=r(cBe," (BERT model)"),cBe.forEach(t),TCr=i(Q),sE=n(Q,"LI",{});var mBe=s(sE);eve=n(mBe,"STRONG",{});var Fvt=s(eve);FCr=r(Fvt,"big_bird"),Fvt.forEach(t),CCr=r(mBe," \u2014 "),tV=n(mBe,"A",{href:!0});var Cvt=s(tV);MCr=r(Cvt,"FlaxBigBirdModel"),Cvt.forEach(t),ECr=r(mBe," (BigBird model)"),mBe.forEach(t),yCr=i(Q),lE=n(Q,"LI",{});var fBe=s(lE);ove=n(fBe,"STRONG",{});var Mvt=s(ove);wCr=r(Mvt,"blenderbot"),Mvt.forEach(t),ACr=r(fBe," \u2014 "),aV=n(fBe,"A",{href:!0});var Evt=s(aV);LCr=r(Evt,"FlaxBlenderbotModel"),Evt.forEach(t),BCr=r(fBe," (Blenderbot model)"),fBe.forEach(t),xCr=i(Q),iE=n(Q,"LI",{});var gBe=s(iE);rve=n(gBe,"STRONG",{});var yvt=s(rve);kCr=r(yvt,"blenderbot-small"),yvt.forEach(t),RCr=r(gBe," \u2014 "),nV=n(gBe,"A",{href:!0});var wvt=s(nV);SCr=r(wvt,"FlaxBlenderbotSmallModel"),wvt.forEach(t),PCr=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),$Cr=i(Q),dE=n(Q,"LI",{});var hBe=s(dE);tve=n(hBe,"STRONG",{});var Avt=s(tve);ICr=r(Avt,"clip"),Avt.forEach(t),NCr=r(hBe," \u2014 "),sV=n(hBe,"A",{href:!0});var Lvt=s(sV);DCr=r(Lvt,"FlaxCLIPModel"),Lvt.forEach(t),jCr=r(hBe," (CLIP model)"),hBe.forEach(t),qCr=i(Q),cE=n(Q,"LI",{});var uBe=s(cE);ave=n(uBe,"STRONG",{});var Bvt=s(ave);GCr=r(Bvt,"distilbert"),Bvt.forEach(t),OCr=r(uBe," \u2014 "),lV=n(uBe,"A",{href:!0});var xvt=s(lV);XCr=r(xvt,"FlaxDistilBertModel"),xvt.forEach(t),VCr=r(uBe," (DistilBERT model)"),uBe.forEach(t),zCr=i(Q),mE=n(Q,"LI",{});var pBe=s(mE);nve=n(pBe,"STRONG",{});var kvt=s(nve);WCr=r(kvt,"electra"),kvt.forEach(t),QCr=r(pBe," \u2014 "),iV=n(pBe,"A",{href:!0});var Rvt=s(iV);HCr=r(Rvt,"FlaxElectraModel"),Rvt.forEach(t),UCr=r(pBe," (ELECTRA model)"),pBe.forEach(t),JCr=i(Q),fE=n(Q,"LI",{});var _Be=s(fE);sve=n(_Be,"STRONG",{});var Svt=s(sve);YCr=r(Svt,"gpt2"),Svt.forEach(t),KCr=r(_Be," \u2014 "),dV=n(_Be,"A",{href:!0});var Pvt=s(dV);ZCr=r(Pvt,"FlaxGPT2Model"),Pvt.forEach(t),eMr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),oMr=i(Q),gE=n(Q,"LI",{});var bBe=s(gE);lve=n(bBe,"STRONG",{});var $vt=s(lve);rMr=r($vt,"gpt_neo"),$vt.forEach(t),tMr=r(bBe," \u2014 "),cV=n(bBe,"A",{href:!0});var Ivt=s(cV);aMr=r(Ivt,"FlaxGPTNeoModel"),Ivt.forEach(t),nMr=r(bBe," (GPT Neo model)"),bBe.forEach(t),sMr=i(Q),hE=n(Q,"LI",{});var vBe=s(hE);ive=n(vBe,"STRONG",{});var Nvt=s(ive);lMr=r(Nvt,"gptj"),Nvt.forEach(t),iMr=r(vBe," \u2014 "),mV=n(vBe,"A",{href:!0});var Dvt=s(mV);dMr=r(Dvt,"FlaxGPTJModel"),Dvt.forEach(t),cMr=r(vBe," (GPT-J model)"),vBe.forEach(t),mMr=i(Q),uE=n(Q,"LI",{});var TBe=s(uE);dve=n(TBe,"STRONG",{});var jvt=s(dve);fMr=r(jvt,"marian"),jvt.forEach(t),gMr=r(TBe," \u2014 "),fV=n(TBe,"A",{href:!0});var qvt=s(fV);hMr=r(qvt,"FlaxMarianModel"),qvt.forEach(t),uMr=r(TBe," (Marian model)"),TBe.forEach(t),pMr=i(Q),pE=n(Q,"LI",{});var FBe=s(pE);cve=n(FBe,"STRONG",{});var Gvt=s(cve);_Mr=r(Gvt,"mbart"),Gvt.forEach(t),bMr=r(FBe," \u2014 "),gV=n(FBe,"A",{href:!0});var Ovt=s(gV);vMr=r(Ovt,"FlaxMBartModel"),Ovt.forEach(t),TMr=r(FBe," (mBART model)"),FBe.forEach(t),FMr=i(Q),_E=n(Q,"LI",{});var CBe=s(_E);mve=n(CBe,"STRONG",{});var Xvt=s(mve);CMr=r(Xvt,"mt5"),Xvt.forEach(t),MMr=r(CBe," \u2014 "),hV=n(CBe,"A",{href:!0});var Vvt=s(hV);EMr=r(Vvt,"FlaxMT5Model"),Vvt.forEach(t),yMr=r(CBe," (mT5 model)"),CBe.forEach(t),wMr=i(Q),bE=n(Q,"LI",{});var MBe=s(bE);fve=n(MBe,"STRONG",{});var zvt=s(fve);AMr=r(zvt,"pegasus"),zvt.forEach(t),LMr=r(MBe," \u2014 "),uV=n(MBe,"A",{href:!0});var Wvt=s(uV);BMr=r(Wvt,"FlaxPegasusModel"),Wvt.forEach(t),xMr=r(MBe," (Pegasus model)"),MBe.forEach(t),kMr=i(Q),vE=n(Q,"LI",{});var EBe=s(vE);gve=n(EBe,"STRONG",{});var Qvt=s(gve);RMr=r(Qvt,"roberta"),Qvt.forEach(t),SMr=r(EBe," \u2014 "),pV=n(EBe,"A",{href:!0});var Hvt=s(pV);PMr=r(Hvt,"FlaxRobertaModel"),Hvt.forEach(t),$Mr=r(EBe," (RoBERTa model)"),EBe.forEach(t),IMr=i(Q),TE=n(Q,"LI",{});var yBe=s(TE);hve=n(yBe,"STRONG",{});var Uvt=s(hve);NMr=r(Uvt,"roformer"),Uvt.forEach(t),DMr=r(yBe," \u2014 "),_V=n(yBe,"A",{href:!0});var Jvt=s(_V);jMr=r(Jvt,"FlaxRoFormerModel"),Jvt.forEach(t),qMr=r(yBe," (RoFormer model)"),yBe.forEach(t),GMr=i(Q),FE=n(Q,"LI",{});var wBe=s(FE);uve=n(wBe,"STRONG",{});var Yvt=s(uve);OMr=r(Yvt,"t5"),Yvt.forEach(t),XMr=r(wBe," \u2014 "),bV=n(wBe,"A",{href:!0});var Kvt=s(bV);VMr=r(Kvt,"FlaxT5Model"),Kvt.forEach(t),zMr=r(wBe," (T5 model)"),wBe.forEach(t),WMr=i(Q),CE=n(Q,"LI",{});var ABe=s(CE);pve=n(ABe,"STRONG",{});var Zvt=s(pve);QMr=r(Zvt,"vision-text-dual-encoder"),Zvt.forEach(t),HMr=r(ABe," \u2014 "),vV=n(ABe,"A",{href:!0});var eTt=s(vV);UMr=r(eTt,"FlaxVisionTextDualEncoderModel"),eTt.forEach(t),JMr=r(ABe," (VisionTextDualEncoder model)"),ABe.forEach(t),YMr=i(Q),ME=n(Q,"LI",{});var LBe=s(ME);_ve=n(LBe,"STRONG",{});var oTt=s(_ve);KMr=r(oTt,"vit"),oTt.forEach(t),ZMr=r(LBe," \u2014 "),TV=n(LBe,"A",{href:!0});var rTt=s(TV);e4r=r(rTt,"FlaxViTModel"),rTt.forEach(t),o4r=r(LBe," (ViT model)"),LBe.forEach(t),r4r=i(Q),EE=n(Q,"LI",{});var BBe=s(EE);bve=n(BBe,"STRONG",{});var tTt=s(bve);t4r=r(tTt,"wav2vec2"),tTt.forEach(t),a4r=r(BBe," \u2014 "),FV=n(BBe,"A",{href:!0});var aTt=s(FV);n4r=r(aTt,"FlaxWav2Vec2Model"),aTt.forEach(t),s4r=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),l4r=i(Q),yE=n(Q,"LI",{});var xBe=s(yE);vve=n(xBe,"STRONG",{});var nTt=s(vve);i4r=r(nTt,"xglm"),nTt.forEach(t),d4r=r(xBe," \u2014 "),CV=n(xBe,"A",{href:!0});var sTt=s(CV);c4r=r(sTt,"FlaxXGLMModel"),sTt.forEach(t),m4r=r(xBe," (XGLM model)"),xBe.forEach(t),f4r=i(Q),wE=n(Q,"LI",{});var kBe=s(wE);Tve=n(kBe,"STRONG",{});var lTt=s(Tve);g4r=r(lTt,"xlm-roberta"),lTt.forEach(t),h4r=r(kBe," \u2014 "),MV=n(kBe,"A",{href:!0});var iTt=s(MV);u4r=r(iTt,"FlaxXLMRobertaModel"),iTt.forEach(t),p4r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),Q.forEach(t),_4r=i(La),Fve=n(La,"P",{});var dTt=s(Fve);b4r=r(dTt,"Examples:"),dTt.forEach(t),v4r=i(La),f(xL.$$.fragment,La),La.forEach(t),mi.forEach(t),SRe=i(c),em=n(c,"H2",{class:!0});var zPe=s(em);AE=n(zPe,"A",{id:!0,class:!0,href:!0});var cTt=s(AE);Cve=n(cTt,"SPAN",{});var mTt=s(Cve);f(kL.$$.fragment,mTt),mTt.forEach(t),cTt.forEach(t),T4r=i(zPe),Mve=n(zPe,"SPAN",{});var fTt=s(Mve);F4r=r(fTt,"FlaxAutoModelForCausalLM"),fTt.forEach(t),zPe.forEach(t),PRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);f(RL.$$.fragment,gi),C4r=i(gi),om=n(gi,"P",{});var pQ=s(om);M4r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Eve=n(pQ,"CODE",{});var gTt=s(Eve);E4r=r(gTt,"from_pretrained()"),gTt.forEach(t),y4r=r(pQ,"class method or the "),yve=n(pQ,"CODE",{});var hTt=s(yve);w4r=r(hTt,"from_config()"),hTt.forEach(t),A4r=r(pQ,`class
method.`),pQ.forEach(t),L4r=i(gi),SL=n(gi,"P",{});var WPe=s(SL);B4r=r(WPe,"This class cannot be instantiated directly using "),wve=n(WPe,"CODE",{});var uTt=s(wve);x4r=r(uTt,"__init__()"),uTt.forEach(t),k4r=r(WPe," (throws an error)."),WPe.forEach(t),R4r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);f(PL.$$.fragment,hi),S4r=i(hi),Ave=n(hi,"P",{});var pTt=s(Ave);P4r=r(pTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pTt.forEach(t),$4r=i(hi),rm=n(hi,"P",{});var _Q=s(rm);I4r=r(_Q,`Note:
Loading a model from its configuration file does `),Lve=n(_Q,"STRONG",{});var _Tt=s(Lve);N4r=r(_Tt,"not"),_Tt.forEach(t),D4r=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bve=n(_Q,"CODE",{});var bTt=s(Bve);j4r=r(bTt,"from_pretrained()"),bTt.forEach(t),q4r=r(_Q,"to load the model weights."),_Q.forEach(t),G4r=i(hi),xve=n(hi,"P",{});var vTt=s(xve);O4r=r(vTt,"Examples:"),vTt.forEach(t),X4r=i(hi),f($L.$$.fragment,hi),hi.forEach(t),V4r=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);f(IL.$$.fragment,Ba),z4r=i(Ba),kve=n(Ba,"P",{});var TTt=s(kve);W4r=r(TTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TTt.forEach(t),Q4r=i(Ba),xn=n(Ba,"P",{});var H5=s(xn);H4r=r(H5,"The model class to instantiate is selected based on the "),Rve=n(H5,"CODE",{});var FTt=s(Rve);U4r=r(FTt,"model_type"),FTt.forEach(t),J4r=r(H5,` property of the config object (either
passed as an argument or loaded from `),Sve=n(H5,"CODE",{});var CTt=s(Sve);Y4r=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),K4r=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pve=n(H5,"CODE",{});var MTt=s(Pve);Z4r=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),eEr=r(H5,":"),H5.forEach(t),oEr=i(Ba),ca=n(Ba,"UL",{});var ui=s(ca);LE=n(ui,"LI",{});var RBe=s(LE);$ve=n(RBe,"STRONG",{});var ETt=s($ve);rEr=r(ETt,"bart"),ETt.forEach(t),tEr=r(RBe," \u2014 "),EV=n(RBe,"A",{href:!0});var yTt=s(EV);aEr=r(yTt,"FlaxBartForCausalLM"),yTt.forEach(t),nEr=r(RBe," (BART model)"),RBe.forEach(t),sEr=i(ui),BE=n(ui,"LI",{});var SBe=s(BE);Ive=n(SBe,"STRONG",{});var wTt=s(Ive);lEr=r(wTt,"gpt2"),wTt.forEach(t),iEr=r(SBe," \u2014 "),yV=n(SBe,"A",{href:!0});var ATt=s(yV);dEr=r(ATt,"FlaxGPT2LMHeadModel"),ATt.forEach(t),cEr=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),mEr=i(ui),xE=n(ui,"LI",{});var PBe=s(xE);Nve=n(PBe,"STRONG",{});var LTt=s(Nve);fEr=r(LTt,"gpt_neo"),LTt.forEach(t),gEr=r(PBe," \u2014 "),wV=n(PBe,"A",{href:!0});var BTt=s(wV);hEr=r(BTt,"FlaxGPTNeoForCausalLM"),BTt.forEach(t),uEr=r(PBe," (GPT Neo model)"),PBe.forEach(t),pEr=i(ui),kE=n(ui,"LI",{});var $Be=s(kE);Dve=n($Be,"STRONG",{});var xTt=s(Dve);_Er=r(xTt,"gptj"),xTt.forEach(t),bEr=r($Be," \u2014 "),AV=n($Be,"A",{href:!0});var kTt=s(AV);vEr=r(kTt,"FlaxGPTJForCausalLM"),kTt.forEach(t),TEr=r($Be," (GPT-J model)"),$Be.forEach(t),FEr=i(ui),RE=n(ui,"LI",{});var IBe=s(RE);jve=n(IBe,"STRONG",{});var RTt=s(jve);CEr=r(RTt,"xglm"),RTt.forEach(t),MEr=r(IBe," \u2014 "),LV=n(IBe,"A",{href:!0});var STt=s(LV);EEr=r(STt,"FlaxXGLMForCausalLM"),STt.forEach(t),yEr=r(IBe," (XGLM model)"),IBe.forEach(t),ui.forEach(t),wEr=i(Ba),qve=n(Ba,"P",{});var PTt=s(qve);AEr=r(PTt,"Examples:"),PTt.forEach(t),LEr=i(Ba),f(NL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),$Re=i(c),tm=n(c,"H2",{class:!0});var QPe=s(tm);SE=n(QPe,"A",{id:!0,class:!0,href:!0});var $Tt=s(SE);Gve=n($Tt,"SPAN",{});var ITt=s(Gve);f(DL.$$.fragment,ITt),ITt.forEach(t),$Tt.forEach(t),BEr=i(QPe),Ove=n(QPe,"SPAN",{});var NTt=s(Ove);xEr=r(NTt,"FlaxAutoModelForPreTraining"),NTt.forEach(t),QPe.forEach(t),IRe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);f(jL.$$.fragment,pi),kEr=i(pi),am=n(pi,"P",{});var bQ=s(am);REr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Xve=n(bQ,"CODE",{});var DTt=s(Xve);SEr=r(DTt,"from_pretrained()"),DTt.forEach(t),PEr=r(bQ,"class method or the "),Vve=n(bQ,"CODE",{});var jTt=s(Vve);$Er=r(jTt,"from_config()"),jTt.forEach(t),IEr=r(bQ,`class
method.`),bQ.forEach(t),NEr=i(pi),qL=n(pi,"P",{});var HPe=s(qL);DEr=r(HPe,"This class cannot be instantiated directly using "),zve=n(HPe,"CODE",{});var qTt=s(zve);jEr=r(qTt,"__init__()"),qTt.forEach(t),qEr=r(HPe," (throws an error)."),HPe.forEach(t),GEr=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);f(GL.$$.fragment,_i),OEr=i(_i),Wve=n(_i,"P",{});var GTt=s(Wve);XEr=r(GTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GTt.forEach(t),VEr=i(_i),nm=n(_i,"P",{});var vQ=s(nm);zEr=r(vQ,`Note:
Loading a model from its configuration file does `),Qve=n(vQ,"STRONG",{});var OTt=s(Qve);WEr=r(OTt,"not"),OTt.forEach(t),QEr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hve=n(vQ,"CODE",{});var XTt=s(Hve);HEr=r(XTt,"from_pretrained()"),XTt.forEach(t),UEr=r(vQ,"to load the model weights."),vQ.forEach(t),JEr=i(_i),Uve=n(_i,"P",{});var VTt=s(Uve);YEr=r(VTt,"Examples:"),VTt.forEach(t),KEr=i(_i),f(OL.$$.fragment,_i),_i.forEach(t),ZEr=i(pi),Bo=n(pi,"DIV",{class:!0});var xa=s(Bo);f(XL.$$.fragment,xa),e3r=i(xa),Jve=n(xa,"P",{});var zTt=s(Jve);o3r=r(zTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zTt.forEach(t),r3r=i(xa),kn=n(xa,"P",{});var U5=s(kn);t3r=r(U5,"The model class to instantiate is selected based on the "),Yve=n(U5,"CODE",{});var WTt=s(Yve);a3r=r(WTt,"model_type"),WTt.forEach(t),n3r=r(U5,` property of the config object (either
passed as an argument or loaded from `),Kve=n(U5,"CODE",{});var QTt=s(Kve);s3r=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),l3r=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(U5,"CODE",{});var HTt=s(Zve);i3r=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),d3r=r(U5,":"),U5.forEach(t),c3r=i(xa),ce=n(xa,"UL",{});var he=s(ce);PE=n(he,"LI",{});var NBe=s(PE);eTe=n(NBe,"STRONG",{});var UTt=s(eTe);m3r=r(UTt,"albert"),UTt.forEach(t),f3r=r(NBe," \u2014 "),BV=n(NBe,"A",{href:!0});var JTt=s(BV);g3r=r(JTt,"FlaxAlbertForPreTraining"),JTt.forEach(t),h3r=r(NBe," (ALBERT model)"),NBe.forEach(t),u3r=i(he),$E=n(he,"LI",{});var DBe=s($E);oTe=n(DBe,"STRONG",{});var YTt=s(oTe);p3r=r(YTt,"bart"),YTt.forEach(t),_3r=r(DBe," \u2014 "),xV=n(DBe,"A",{href:!0});var KTt=s(xV);b3r=r(KTt,"FlaxBartForConditionalGeneration"),KTt.forEach(t),v3r=r(DBe," (BART model)"),DBe.forEach(t),T3r=i(he),IE=n(he,"LI",{});var jBe=s(IE);rTe=n(jBe,"STRONG",{});var ZTt=s(rTe);F3r=r(ZTt,"bert"),ZTt.forEach(t),C3r=r(jBe," \u2014 "),kV=n(jBe,"A",{href:!0});var e1t=s(kV);M3r=r(e1t,"FlaxBertForPreTraining"),e1t.forEach(t),E3r=r(jBe," (BERT model)"),jBe.forEach(t),y3r=i(he),NE=n(he,"LI",{});var qBe=s(NE);tTe=n(qBe,"STRONG",{});var o1t=s(tTe);w3r=r(o1t,"big_bird"),o1t.forEach(t),A3r=r(qBe," \u2014 "),RV=n(qBe,"A",{href:!0});var r1t=s(RV);L3r=r(r1t,"FlaxBigBirdForPreTraining"),r1t.forEach(t),B3r=r(qBe," (BigBird model)"),qBe.forEach(t),x3r=i(he),DE=n(he,"LI",{});var GBe=s(DE);aTe=n(GBe,"STRONG",{});var t1t=s(aTe);k3r=r(t1t,"electra"),t1t.forEach(t),R3r=r(GBe," \u2014 "),SV=n(GBe,"A",{href:!0});var a1t=s(SV);S3r=r(a1t,"FlaxElectraForPreTraining"),a1t.forEach(t),P3r=r(GBe," (ELECTRA model)"),GBe.forEach(t),$3r=i(he),jE=n(he,"LI",{});var OBe=s(jE);nTe=n(OBe,"STRONG",{});var n1t=s(nTe);I3r=r(n1t,"mbart"),n1t.forEach(t),N3r=r(OBe," \u2014 "),PV=n(OBe,"A",{href:!0});var s1t=s(PV);D3r=r(s1t,"FlaxMBartForConditionalGeneration"),s1t.forEach(t),j3r=r(OBe," (mBART model)"),OBe.forEach(t),q3r=i(he),qE=n(he,"LI",{});var XBe=s(qE);sTe=n(XBe,"STRONG",{});var l1t=s(sTe);G3r=r(l1t,"mt5"),l1t.forEach(t),O3r=r(XBe," \u2014 "),$V=n(XBe,"A",{href:!0});var i1t=s($V);X3r=r(i1t,"FlaxMT5ForConditionalGeneration"),i1t.forEach(t),V3r=r(XBe," (mT5 model)"),XBe.forEach(t),z3r=i(he),GE=n(he,"LI",{});var VBe=s(GE);lTe=n(VBe,"STRONG",{});var d1t=s(lTe);W3r=r(d1t,"roberta"),d1t.forEach(t),Q3r=r(VBe," \u2014 "),IV=n(VBe,"A",{href:!0});var c1t=s(IV);H3r=r(c1t,"FlaxRobertaForMaskedLM"),c1t.forEach(t),U3r=r(VBe," (RoBERTa model)"),VBe.forEach(t),J3r=i(he),OE=n(he,"LI",{});var zBe=s(OE);iTe=n(zBe,"STRONG",{});var m1t=s(iTe);Y3r=r(m1t,"roformer"),m1t.forEach(t),K3r=r(zBe," \u2014 "),NV=n(zBe,"A",{href:!0});var f1t=s(NV);Z3r=r(f1t,"FlaxRoFormerForMaskedLM"),f1t.forEach(t),e5r=r(zBe," (RoFormer model)"),zBe.forEach(t),o5r=i(he),XE=n(he,"LI",{});var WBe=s(XE);dTe=n(WBe,"STRONG",{});var g1t=s(dTe);r5r=r(g1t,"t5"),g1t.forEach(t),t5r=r(WBe," \u2014 "),DV=n(WBe,"A",{href:!0});var h1t=s(DV);a5r=r(h1t,"FlaxT5ForConditionalGeneration"),h1t.forEach(t),n5r=r(WBe," (T5 model)"),WBe.forEach(t),s5r=i(he),VE=n(he,"LI",{});var QBe=s(VE);cTe=n(QBe,"STRONG",{});var u1t=s(cTe);l5r=r(u1t,"wav2vec2"),u1t.forEach(t),i5r=r(QBe," \u2014 "),jV=n(QBe,"A",{href:!0});var p1t=s(jV);d5r=r(p1t,"FlaxWav2Vec2ForPreTraining"),p1t.forEach(t),c5r=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),m5r=i(he),zE=n(he,"LI",{});var HBe=s(zE);mTe=n(HBe,"STRONG",{});var _1t=s(mTe);f5r=r(_1t,"xlm-roberta"),_1t.forEach(t),g5r=r(HBe," \u2014 "),qV=n(HBe,"A",{href:!0});var b1t=s(qV);h5r=r(b1t,"FlaxXLMRobertaForMaskedLM"),b1t.forEach(t),u5r=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),he.forEach(t),p5r=i(xa),fTe=n(xa,"P",{});var v1t=s(fTe);_5r=r(v1t,"Examples:"),v1t.forEach(t),b5r=i(xa),f(VL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),NRe=i(c),sm=n(c,"H2",{class:!0});var UPe=s(sm);WE=n(UPe,"A",{id:!0,class:!0,href:!0});var T1t=s(WE);gTe=n(T1t,"SPAN",{});var F1t=s(gTe);f(zL.$$.fragment,F1t),F1t.forEach(t),T1t.forEach(t),v5r=i(UPe),hTe=n(UPe,"SPAN",{});var C1t=s(hTe);T5r=r(C1t,"FlaxAutoModelForMaskedLM"),C1t.forEach(t),UPe.forEach(t),DRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);f(WL.$$.fragment,bi),F5r=i(bi),lm=n(bi,"P",{});var TQ=s(lm);C5r=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uTe=n(TQ,"CODE",{});var M1t=s(uTe);M5r=r(M1t,"from_pretrained()"),M1t.forEach(t),E5r=r(TQ,"class method or the "),pTe=n(TQ,"CODE",{});var E1t=s(pTe);y5r=r(E1t,"from_config()"),E1t.forEach(t),w5r=r(TQ,`class
method.`),TQ.forEach(t),A5r=i(bi),QL=n(bi,"P",{});var JPe=s(QL);L5r=r(JPe,"This class cannot be instantiated directly using "),_Te=n(JPe,"CODE",{});var y1t=s(_Te);B5r=r(y1t,"__init__()"),y1t.forEach(t),x5r=r(JPe," (throws an error)."),JPe.forEach(t),k5r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);f(HL.$$.fragment,vi),R5r=i(vi),bTe=n(vi,"P",{});var w1t=s(bTe);S5r=r(w1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),w1t.forEach(t),P5r=i(vi),im=n(vi,"P",{});var FQ=s(im);$5r=r(FQ,`Note:
Loading a model from its configuration file does `),vTe=n(FQ,"STRONG",{});var A1t=s(vTe);I5r=r(A1t,"not"),A1t.forEach(t),N5r=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TTe=n(FQ,"CODE",{});var L1t=s(TTe);D5r=r(L1t,"from_pretrained()"),L1t.forEach(t),j5r=r(FQ,"to load the model weights."),FQ.forEach(t),q5r=i(vi),FTe=n(vi,"P",{});var B1t=s(FTe);G5r=r(B1t,"Examples:"),B1t.forEach(t),O5r=i(vi),f(UL.$$.fragment,vi),vi.forEach(t),X5r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);f(JL.$$.fragment,ka),V5r=i(ka),CTe=n(ka,"P",{});var x1t=s(CTe);z5r=r(x1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),x1t.forEach(t),W5r=i(ka),Rn=n(ka,"P",{});var J5=s(Rn);Q5r=r(J5,"The model class to instantiate is selected based on the "),MTe=n(J5,"CODE",{});var k1t=s(MTe);H5r=r(k1t,"model_type"),k1t.forEach(t),U5r=r(J5,` property of the config object (either
passed as an argument or loaded from `),ETe=n(J5,"CODE",{});var R1t=s(ETe);J5r=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Y5r=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(J5,"CODE",{});var S1t=s(yTe);K5r=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),Z5r=r(J5,":"),J5.forEach(t),eyr=i(ka),_e=n(ka,"UL",{});var we=s(_e);QE=n(we,"LI",{});var UBe=s(QE);wTe=n(UBe,"STRONG",{});var P1t=s(wTe);oyr=r(P1t,"albert"),P1t.forEach(t),ryr=r(UBe," \u2014 "),GV=n(UBe,"A",{href:!0});var $1t=s(GV);tyr=r($1t,"FlaxAlbertForMaskedLM"),$1t.forEach(t),ayr=r(UBe," (ALBERT model)"),UBe.forEach(t),nyr=i(we),HE=n(we,"LI",{});var JBe=s(HE);ATe=n(JBe,"STRONG",{});var I1t=s(ATe);syr=r(I1t,"bart"),I1t.forEach(t),lyr=r(JBe," \u2014 "),OV=n(JBe,"A",{href:!0});var N1t=s(OV);iyr=r(N1t,"FlaxBartForConditionalGeneration"),N1t.forEach(t),dyr=r(JBe," (BART model)"),JBe.forEach(t),cyr=i(we),UE=n(we,"LI",{});var YBe=s(UE);LTe=n(YBe,"STRONG",{});var D1t=s(LTe);myr=r(D1t,"bert"),D1t.forEach(t),fyr=r(YBe," \u2014 "),XV=n(YBe,"A",{href:!0});var j1t=s(XV);gyr=r(j1t,"FlaxBertForMaskedLM"),j1t.forEach(t),hyr=r(YBe," (BERT model)"),YBe.forEach(t),uyr=i(we),JE=n(we,"LI",{});var KBe=s(JE);BTe=n(KBe,"STRONG",{});var q1t=s(BTe);pyr=r(q1t,"big_bird"),q1t.forEach(t),_yr=r(KBe," \u2014 "),VV=n(KBe,"A",{href:!0});var G1t=s(VV);byr=r(G1t,"FlaxBigBirdForMaskedLM"),G1t.forEach(t),vyr=r(KBe," (BigBird model)"),KBe.forEach(t),Tyr=i(we),YE=n(we,"LI",{});var ZBe=s(YE);xTe=n(ZBe,"STRONG",{});var O1t=s(xTe);Fyr=r(O1t,"distilbert"),O1t.forEach(t),Cyr=r(ZBe," \u2014 "),zV=n(ZBe,"A",{href:!0});var X1t=s(zV);Myr=r(X1t,"FlaxDistilBertForMaskedLM"),X1t.forEach(t),Eyr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),yyr=i(we),KE=n(we,"LI",{});var exe=s(KE);kTe=n(exe,"STRONG",{});var V1t=s(kTe);wyr=r(V1t,"electra"),V1t.forEach(t),Ayr=r(exe," \u2014 "),WV=n(exe,"A",{href:!0});var z1t=s(WV);Lyr=r(z1t,"FlaxElectraForMaskedLM"),z1t.forEach(t),Byr=r(exe," (ELECTRA model)"),exe.forEach(t),xyr=i(we),ZE=n(we,"LI",{});var oxe=s(ZE);RTe=n(oxe,"STRONG",{});var W1t=s(RTe);kyr=r(W1t,"mbart"),W1t.forEach(t),Ryr=r(oxe," \u2014 "),QV=n(oxe,"A",{href:!0});var Q1t=s(QV);Syr=r(Q1t,"FlaxMBartForConditionalGeneration"),Q1t.forEach(t),Pyr=r(oxe," (mBART model)"),oxe.forEach(t),$yr=i(we),e3=n(we,"LI",{});var rxe=s(e3);STe=n(rxe,"STRONG",{});var H1t=s(STe);Iyr=r(H1t,"roberta"),H1t.forEach(t),Nyr=r(rxe," \u2014 "),HV=n(rxe,"A",{href:!0});var U1t=s(HV);Dyr=r(U1t,"FlaxRobertaForMaskedLM"),U1t.forEach(t),jyr=r(rxe," (RoBERTa model)"),rxe.forEach(t),qyr=i(we),o3=n(we,"LI",{});var txe=s(o3);PTe=n(txe,"STRONG",{});var J1t=s(PTe);Gyr=r(J1t,"roformer"),J1t.forEach(t),Oyr=r(txe," \u2014 "),UV=n(txe,"A",{href:!0});var Y1t=s(UV);Xyr=r(Y1t,"FlaxRoFormerForMaskedLM"),Y1t.forEach(t),Vyr=r(txe," (RoFormer model)"),txe.forEach(t),zyr=i(we),r3=n(we,"LI",{});var axe=s(r3);$Te=n(axe,"STRONG",{});var K1t=s($Te);Wyr=r(K1t,"xlm-roberta"),K1t.forEach(t),Qyr=r(axe," \u2014 "),JV=n(axe,"A",{href:!0});var Z1t=s(JV);Hyr=r(Z1t,"FlaxXLMRobertaForMaskedLM"),Z1t.forEach(t),Uyr=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),we.forEach(t),Jyr=i(ka),ITe=n(ka,"P",{});var eFt=s(ITe);Yyr=r(eFt,"Examples:"),eFt.forEach(t),Kyr=i(ka),f(YL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),jRe=i(c),dm=n(c,"H2",{class:!0});var YPe=s(dm);t3=n(YPe,"A",{id:!0,class:!0,href:!0});var oFt=s(t3);NTe=n(oFt,"SPAN",{});var rFt=s(NTe);f(KL.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),Zyr=i(YPe),DTe=n(YPe,"SPAN",{});var tFt=s(DTe);ewr=r(tFt,"FlaxAutoModelForSeq2SeqLM"),tFt.forEach(t),YPe.forEach(t),qRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);f(ZL.$$.fragment,Ti),owr=i(Ti),cm=n(Ti,"P",{});var CQ=s(cm);rwr=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jTe=n(CQ,"CODE",{});var aFt=s(jTe);twr=r(aFt,"from_pretrained()"),aFt.forEach(t),awr=r(CQ,"class method or the "),qTe=n(CQ,"CODE",{});var nFt=s(qTe);nwr=r(nFt,"from_config()"),nFt.forEach(t),swr=r(CQ,`class
method.`),CQ.forEach(t),lwr=i(Ti),e7=n(Ti,"P",{});var KPe=s(e7);iwr=r(KPe,"This class cannot be instantiated directly using "),GTe=n(KPe,"CODE",{});var sFt=s(GTe);dwr=r(sFt,"__init__()"),sFt.forEach(t),cwr=r(KPe," (throws an error)."),KPe.forEach(t),mwr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);f(o7.$$.fragment,Fi),fwr=i(Fi),OTe=n(Fi,"P",{});var lFt=s(OTe);gwr=r(lFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lFt.forEach(t),hwr=i(Fi),mm=n(Fi,"P",{});var MQ=s(mm);uwr=r(MQ,`Note:
Loading a model from its configuration file does `),XTe=n(MQ,"STRONG",{});var iFt=s(XTe);pwr=r(iFt,"not"),iFt.forEach(t),_wr=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VTe=n(MQ,"CODE",{});var dFt=s(VTe);bwr=r(dFt,"from_pretrained()"),dFt.forEach(t),vwr=r(MQ,"to load the model weights."),MQ.forEach(t),Twr=i(Fi),zTe=n(Fi,"P",{});var cFt=s(zTe);Fwr=r(cFt,"Examples:"),cFt.forEach(t),Cwr=i(Fi),f(r7.$$.fragment,Fi),Fi.forEach(t),Mwr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);f(t7.$$.fragment,Ra),Ewr=i(Ra),WTe=n(Ra,"P",{});var mFt=s(WTe);ywr=r(mFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mFt.forEach(t),wwr=i(Ra),Sn=n(Ra,"P",{});var Y5=s(Sn);Awr=r(Y5,"The model class to instantiate is selected based on the "),QTe=n(Y5,"CODE",{});var fFt=s(QTe);Lwr=r(fFt,"model_type"),fFt.forEach(t),Bwr=r(Y5,` property of the config object (either
passed as an argument or loaded from `),HTe=n(Y5,"CODE",{});var gFt=s(HTe);xwr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),kwr=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(Y5,"CODE",{});var hFt=s(UTe);Rwr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),Swr=r(Y5,":"),Y5.forEach(t),Pwr=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);a3=n(so,"LI",{});var nxe=s(a3);JTe=n(nxe,"STRONG",{});var uFt=s(JTe);$wr=r(uFt,"bart"),uFt.forEach(t),Iwr=r(nxe," \u2014 "),YV=n(nxe,"A",{href:!0});var pFt=s(YV);Nwr=r(pFt,"FlaxBartForConditionalGeneration"),pFt.forEach(t),Dwr=r(nxe," (BART model)"),nxe.forEach(t),jwr=i(so),n3=n(so,"LI",{});var sxe=s(n3);YTe=n(sxe,"STRONG",{});var _Ft=s(YTe);qwr=r(_Ft,"blenderbot"),_Ft.forEach(t),Gwr=r(sxe," \u2014 "),KV=n(sxe,"A",{href:!0});var bFt=s(KV);Owr=r(bFt,"FlaxBlenderbotForConditionalGeneration"),bFt.forEach(t),Xwr=r(sxe," (Blenderbot model)"),sxe.forEach(t),Vwr=i(so),s3=n(so,"LI",{});var lxe=s(s3);KTe=n(lxe,"STRONG",{});var vFt=s(KTe);zwr=r(vFt,"blenderbot-small"),vFt.forEach(t),Wwr=r(lxe," \u2014 "),ZV=n(lxe,"A",{href:!0});var TFt=s(ZV);Qwr=r(TFt,"FlaxBlenderbotSmallForConditionalGeneration"),TFt.forEach(t),Hwr=r(lxe," (BlenderbotSmall model)"),lxe.forEach(t),Uwr=i(so),l3=n(so,"LI",{});var ixe=s(l3);ZTe=n(ixe,"STRONG",{});var FFt=s(ZTe);Jwr=r(FFt,"encoder-decoder"),FFt.forEach(t),Ywr=r(ixe," \u2014 "),ez=n(ixe,"A",{href:!0});var CFt=s(ez);Kwr=r(CFt,"FlaxEncoderDecoderModel"),CFt.forEach(t),Zwr=r(ixe," (Encoder decoder model)"),ixe.forEach(t),e6r=i(so),i3=n(so,"LI",{});var dxe=s(i3);e1e=n(dxe,"STRONG",{});var MFt=s(e1e);o6r=r(MFt,"marian"),MFt.forEach(t),r6r=r(dxe," \u2014 "),oz=n(dxe,"A",{href:!0});var EFt=s(oz);t6r=r(EFt,"FlaxMarianMTModel"),EFt.forEach(t),a6r=r(dxe," (Marian model)"),dxe.forEach(t),n6r=i(so),d3=n(so,"LI",{});var cxe=s(d3);o1e=n(cxe,"STRONG",{});var yFt=s(o1e);s6r=r(yFt,"mbart"),yFt.forEach(t),l6r=r(cxe," \u2014 "),rz=n(cxe,"A",{href:!0});var wFt=s(rz);i6r=r(wFt,"FlaxMBartForConditionalGeneration"),wFt.forEach(t),d6r=r(cxe," (mBART model)"),cxe.forEach(t),c6r=i(so),c3=n(so,"LI",{});var mxe=s(c3);r1e=n(mxe,"STRONG",{});var AFt=s(r1e);m6r=r(AFt,"mt5"),AFt.forEach(t),f6r=r(mxe," \u2014 "),tz=n(mxe,"A",{href:!0});var LFt=s(tz);g6r=r(LFt,"FlaxMT5ForConditionalGeneration"),LFt.forEach(t),h6r=r(mxe," (mT5 model)"),mxe.forEach(t),u6r=i(so),m3=n(so,"LI",{});var fxe=s(m3);t1e=n(fxe,"STRONG",{});var BFt=s(t1e);p6r=r(BFt,"pegasus"),BFt.forEach(t),_6r=r(fxe," \u2014 "),az=n(fxe,"A",{href:!0});var xFt=s(az);b6r=r(xFt,"FlaxPegasusForConditionalGeneration"),xFt.forEach(t),v6r=r(fxe," (Pegasus model)"),fxe.forEach(t),T6r=i(so),f3=n(so,"LI",{});var gxe=s(f3);a1e=n(gxe,"STRONG",{});var kFt=s(a1e);F6r=r(kFt,"t5"),kFt.forEach(t),C6r=r(gxe," \u2014 "),nz=n(gxe,"A",{href:!0});var RFt=s(nz);M6r=r(RFt,"FlaxT5ForConditionalGeneration"),RFt.forEach(t),E6r=r(gxe," (T5 model)"),gxe.forEach(t),so.forEach(t),y6r=i(Ra),n1e=n(Ra,"P",{});var SFt=s(n1e);w6r=r(SFt,"Examples:"),SFt.forEach(t),A6r=i(Ra),f(a7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),GRe=i(c),fm=n(c,"H2",{class:!0});var ZPe=s(fm);g3=n(ZPe,"A",{id:!0,class:!0,href:!0});var PFt=s(g3);s1e=n(PFt,"SPAN",{});var $Ft=s(s1e);f(n7.$$.fragment,$Ft),$Ft.forEach(t),PFt.forEach(t),L6r=i(ZPe),l1e=n(ZPe,"SPAN",{});var IFt=s(l1e);B6r=r(IFt,"FlaxAutoModelForSequenceClassification"),IFt.forEach(t),ZPe.forEach(t),ORe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);f(s7.$$.fragment,Ci),x6r=i(Ci),gm=n(Ci,"P",{});var EQ=s(gm);k6r=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),i1e=n(EQ,"CODE",{});var NFt=s(i1e);R6r=r(NFt,"from_pretrained()"),NFt.forEach(t),S6r=r(EQ,"class method or the "),d1e=n(EQ,"CODE",{});var DFt=s(d1e);P6r=r(DFt,"from_config()"),DFt.forEach(t),$6r=r(EQ,`class
method.`),EQ.forEach(t),I6r=i(Ci),l7=n(Ci,"P",{});var e$e=s(l7);N6r=r(e$e,"This class cannot be instantiated directly using "),c1e=n(e$e,"CODE",{});var jFt=s(c1e);D6r=r(jFt,"__init__()"),jFt.forEach(t),j6r=r(e$e," (throws an error)."),e$e.forEach(t),q6r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);f(i7.$$.fragment,Mi),G6r=i(Mi),m1e=n(Mi,"P",{});var qFt=s(m1e);O6r=r(qFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qFt.forEach(t),X6r=i(Mi),hm=n(Mi,"P",{});var yQ=s(hm);V6r=r(yQ,`Note:
Loading a model from its configuration file does `),f1e=n(yQ,"STRONG",{});var GFt=s(f1e);z6r=r(GFt,"not"),GFt.forEach(t),W6r=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),g1e=n(yQ,"CODE",{});var OFt=s(g1e);Q6r=r(OFt,"from_pretrained()"),OFt.forEach(t),H6r=r(yQ,"to load the model weights."),yQ.forEach(t),U6r=i(Mi),h1e=n(Mi,"P",{});var XFt=s(h1e);J6r=r(XFt,"Examples:"),XFt.forEach(t),Y6r=i(Mi),f(d7.$$.fragment,Mi),Mi.forEach(t),K6r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);f(c7.$$.fragment,Sa),Z6r=i(Sa),u1e=n(Sa,"P",{});var VFt=s(u1e);eAr=r(VFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VFt.forEach(t),oAr=i(Sa),Pn=n(Sa,"P",{});var K5=s(Pn);rAr=r(K5,"The model class to instantiate is selected based on the "),p1e=n(K5,"CODE",{});var zFt=s(p1e);tAr=r(zFt,"model_type"),zFt.forEach(t),aAr=r(K5,` property of the config object (either
passed as an argument or loaded from `),_1e=n(K5,"CODE",{});var WFt=s(_1e);nAr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),sAr=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(K5,"CODE",{});var QFt=s(b1e);lAr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),iAr=r(K5,":"),K5.forEach(t),dAr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);h3=n(Ae,"LI",{});var hxe=s(h3);v1e=n(hxe,"STRONG",{});var HFt=s(v1e);cAr=r(HFt,"albert"),HFt.forEach(t),mAr=r(hxe," \u2014 "),sz=n(hxe,"A",{href:!0});var UFt=s(sz);fAr=r(UFt,"FlaxAlbertForSequenceClassification"),UFt.forEach(t),gAr=r(hxe," (ALBERT model)"),hxe.forEach(t),hAr=i(Ae),u3=n(Ae,"LI",{});var uxe=s(u3);T1e=n(uxe,"STRONG",{});var JFt=s(T1e);uAr=r(JFt,"bart"),JFt.forEach(t),pAr=r(uxe," \u2014 "),lz=n(uxe,"A",{href:!0});var YFt=s(lz);_Ar=r(YFt,"FlaxBartForSequenceClassification"),YFt.forEach(t),bAr=r(uxe," (BART model)"),uxe.forEach(t),vAr=i(Ae),p3=n(Ae,"LI",{});var pxe=s(p3);F1e=n(pxe,"STRONG",{});var KFt=s(F1e);TAr=r(KFt,"bert"),KFt.forEach(t),FAr=r(pxe," \u2014 "),iz=n(pxe,"A",{href:!0});var ZFt=s(iz);CAr=r(ZFt,"FlaxBertForSequenceClassification"),ZFt.forEach(t),MAr=r(pxe," (BERT model)"),pxe.forEach(t),EAr=i(Ae),_3=n(Ae,"LI",{});var _xe=s(_3);C1e=n(_xe,"STRONG",{});var eCt=s(C1e);yAr=r(eCt,"big_bird"),eCt.forEach(t),wAr=r(_xe," \u2014 "),dz=n(_xe,"A",{href:!0});var oCt=s(dz);AAr=r(oCt,"FlaxBigBirdForSequenceClassification"),oCt.forEach(t),LAr=r(_xe," (BigBird model)"),_xe.forEach(t),BAr=i(Ae),b3=n(Ae,"LI",{});var bxe=s(b3);M1e=n(bxe,"STRONG",{});var rCt=s(M1e);xAr=r(rCt,"distilbert"),rCt.forEach(t),kAr=r(bxe," \u2014 "),cz=n(bxe,"A",{href:!0});var tCt=s(cz);RAr=r(tCt,"FlaxDistilBertForSequenceClassification"),tCt.forEach(t),SAr=r(bxe," (DistilBERT model)"),bxe.forEach(t),PAr=i(Ae),v3=n(Ae,"LI",{});var vxe=s(v3);E1e=n(vxe,"STRONG",{});var aCt=s(E1e);$Ar=r(aCt,"electra"),aCt.forEach(t),IAr=r(vxe," \u2014 "),mz=n(vxe,"A",{href:!0});var nCt=s(mz);NAr=r(nCt,"FlaxElectraForSequenceClassification"),nCt.forEach(t),DAr=r(vxe," (ELECTRA model)"),vxe.forEach(t),jAr=i(Ae),T3=n(Ae,"LI",{});var Txe=s(T3);y1e=n(Txe,"STRONG",{});var sCt=s(y1e);qAr=r(sCt,"mbart"),sCt.forEach(t),GAr=r(Txe," \u2014 "),fz=n(Txe,"A",{href:!0});var lCt=s(fz);OAr=r(lCt,"FlaxMBartForSequenceClassification"),lCt.forEach(t),XAr=r(Txe," (mBART model)"),Txe.forEach(t),VAr=i(Ae),F3=n(Ae,"LI",{});var Fxe=s(F3);w1e=n(Fxe,"STRONG",{});var iCt=s(w1e);zAr=r(iCt,"roberta"),iCt.forEach(t),WAr=r(Fxe," \u2014 "),gz=n(Fxe,"A",{href:!0});var dCt=s(gz);QAr=r(dCt,"FlaxRobertaForSequenceClassification"),dCt.forEach(t),HAr=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),UAr=i(Ae),C3=n(Ae,"LI",{});var Cxe=s(C3);A1e=n(Cxe,"STRONG",{});var cCt=s(A1e);JAr=r(cCt,"roformer"),cCt.forEach(t),YAr=r(Cxe," \u2014 "),hz=n(Cxe,"A",{href:!0});var mCt=s(hz);KAr=r(mCt,"FlaxRoFormerForSequenceClassification"),mCt.forEach(t),ZAr=r(Cxe," (RoFormer model)"),Cxe.forEach(t),e0r=i(Ae),M3=n(Ae,"LI",{});var Mxe=s(M3);L1e=n(Mxe,"STRONG",{});var fCt=s(L1e);o0r=r(fCt,"xlm-roberta"),fCt.forEach(t),r0r=r(Mxe," \u2014 "),uz=n(Mxe,"A",{href:!0});var gCt=s(uz);t0r=r(gCt,"FlaxXLMRobertaForSequenceClassification"),gCt.forEach(t),a0r=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Ae.forEach(t),n0r=i(Sa),B1e=n(Sa,"P",{});var hCt=s(B1e);s0r=r(hCt,"Examples:"),hCt.forEach(t),l0r=i(Sa),f(m7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),XRe=i(c),um=n(c,"H2",{class:!0});var o$e=s(um);E3=n(o$e,"A",{id:!0,class:!0,href:!0});var uCt=s(E3);x1e=n(uCt,"SPAN",{});var pCt=s(x1e);f(f7.$$.fragment,pCt),pCt.forEach(t),uCt.forEach(t),i0r=i(o$e),k1e=n(o$e,"SPAN",{});var _Ct=s(k1e);d0r=r(_Ct,"FlaxAutoModelForQuestionAnswering"),_Ct.forEach(t),o$e.forEach(t),VRe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);f(g7.$$.fragment,Ei),c0r=i(Ei),pm=n(Ei,"P",{});var wQ=s(pm);m0r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=n(wQ,"CODE",{});var bCt=s(R1e);f0r=r(bCt,"from_pretrained()"),bCt.forEach(t),g0r=r(wQ,"class method or the "),S1e=n(wQ,"CODE",{});var vCt=s(S1e);h0r=r(vCt,"from_config()"),vCt.forEach(t),u0r=r(wQ,`class
method.`),wQ.forEach(t),p0r=i(Ei),h7=n(Ei,"P",{});var r$e=s(h7);_0r=r(r$e,"This class cannot be instantiated directly using "),P1e=n(r$e,"CODE",{});var TCt=s(P1e);b0r=r(TCt,"__init__()"),TCt.forEach(t),v0r=r(r$e," (throws an error)."),r$e.forEach(t),T0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);f(u7.$$.fragment,yi),F0r=i(yi),$1e=n(yi,"P",{});var FCt=s($1e);C0r=r(FCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FCt.forEach(t),M0r=i(yi),_m=n(yi,"P",{});var AQ=s(_m);E0r=r(AQ,`Note:
Loading a model from its configuration file does `),I1e=n(AQ,"STRONG",{});var CCt=s(I1e);y0r=r(CCt,"not"),CCt.forEach(t),w0r=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=n(AQ,"CODE",{});var MCt=s(N1e);A0r=r(MCt,"from_pretrained()"),MCt.forEach(t),L0r=r(AQ,"to load the model weights."),AQ.forEach(t),B0r=i(yi),D1e=n(yi,"P",{});var ECt=s(D1e);x0r=r(ECt,"Examples:"),ECt.forEach(t),k0r=i(yi),f(p7.$$.fragment,yi),yi.forEach(t),R0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);f(_7.$$.fragment,Pa),S0r=i(Pa),j1e=n(Pa,"P",{});var yCt=s(j1e);P0r=r(yCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yCt.forEach(t),$0r=i(Pa),$n=n(Pa,"P",{});var Z5=s($n);I0r=r(Z5,"The model class to instantiate is selected based on the "),q1e=n(Z5,"CODE",{});var wCt=s(q1e);N0r=r(wCt,"model_type"),wCt.forEach(t),D0r=r(Z5,` property of the config object (either
passed as an argument or loaded from `),G1e=n(Z5,"CODE",{});var ACt=s(G1e);j0r=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),q0r=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(Z5,"CODE",{});var LCt=s(O1e);G0r=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),O0r=r(Z5,":"),Z5.forEach(t),X0r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);y3=n(Le,"LI",{});var Exe=s(y3);X1e=n(Exe,"STRONG",{});var BCt=s(X1e);V0r=r(BCt,"albert"),BCt.forEach(t),z0r=r(Exe," \u2014 "),pz=n(Exe,"A",{href:!0});var xCt=s(pz);W0r=r(xCt,"FlaxAlbertForQuestionAnswering"),xCt.forEach(t),Q0r=r(Exe," (ALBERT model)"),Exe.forEach(t),H0r=i(Le),w3=n(Le,"LI",{});var yxe=s(w3);V1e=n(yxe,"STRONG",{});var kCt=s(V1e);U0r=r(kCt,"bart"),kCt.forEach(t),J0r=r(yxe," \u2014 "),_z=n(yxe,"A",{href:!0});var RCt=s(_z);Y0r=r(RCt,"FlaxBartForQuestionAnswering"),RCt.forEach(t),K0r=r(yxe," (BART model)"),yxe.forEach(t),Z0r=i(Le),A3=n(Le,"LI",{});var wxe=s(A3);z1e=n(wxe,"STRONG",{});var SCt=s(z1e);eLr=r(SCt,"bert"),SCt.forEach(t),oLr=r(wxe," \u2014 "),bz=n(wxe,"A",{href:!0});var PCt=s(bz);rLr=r(PCt,"FlaxBertForQuestionAnswering"),PCt.forEach(t),tLr=r(wxe," (BERT model)"),wxe.forEach(t),aLr=i(Le),L3=n(Le,"LI",{});var Axe=s(L3);W1e=n(Axe,"STRONG",{});var $Ct=s(W1e);nLr=r($Ct,"big_bird"),$Ct.forEach(t),sLr=r(Axe," \u2014 "),vz=n(Axe,"A",{href:!0});var ICt=s(vz);lLr=r(ICt,"FlaxBigBirdForQuestionAnswering"),ICt.forEach(t),iLr=r(Axe," (BigBird model)"),Axe.forEach(t),dLr=i(Le),B3=n(Le,"LI",{});var Lxe=s(B3);Q1e=n(Lxe,"STRONG",{});var NCt=s(Q1e);cLr=r(NCt,"distilbert"),NCt.forEach(t),mLr=r(Lxe," \u2014 "),Tz=n(Lxe,"A",{href:!0});var DCt=s(Tz);fLr=r(DCt,"FlaxDistilBertForQuestionAnswering"),DCt.forEach(t),gLr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),hLr=i(Le),x3=n(Le,"LI",{});var Bxe=s(x3);H1e=n(Bxe,"STRONG",{});var jCt=s(H1e);uLr=r(jCt,"electra"),jCt.forEach(t),pLr=r(Bxe," \u2014 "),Fz=n(Bxe,"A",{href:!0});var qCt=s(Fz);_Lr=r(qCt,"FlaxElectraForQuestionAnswering"),qCt.forEach(t),bLr=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),vLr=i(Le),k3=n(Le,"LI",{});var xxe=s(k3);U1e=n(xxe,"STRONG",{});var GCt=s(U1e);TLr=r(GCt,"mbart"),GCt.forEach(t),FLr=r(xxe," \u2014 "),Cz=n(xxe,"A",{href:!0});var OCt=s(Cz);CLr=r(OCt,"FlaxMBartForQuestionAnswering"),OCt.forEach(t),MLr=r(xxe," (mBART model)"),xxe.forEach(t),ELr=i(Le),R3=n(Le,"LI",{});var kxe=s(R3);J1e=n(kxe,"STRONG",{});var XCt=s(J1e);yLr=r(XCt,"roberta"),XCt.forEach(t),wLr=r(kxe," \u2014 "),Mz=n(kxe,"A",{href:!0});var VCt=s(Mz);ALr=r(VCt,"FlaxRobertaForQuestionAnswering"),VCt.forEach(t),LLr=r(kxe," (RoBERTa model)"),kxe.forEach(t),BLr=i(Le),S3=n(Le,"LI",{});var Rxe=s(S3);Y1e=n(Rxe,"STRONG",{});var zCt=s(Y1e);xLr=r(zCt,"roformer"),zCt.forEach(t),kLr=r(Rxe," \u2014 "),Ez=n(Rxe,"A",{href:!0});var WCt=s(Ez);RLr=r(WCt,"FlaxRoFormerForQuestionAnswering"),WCt.forEach(t),SLr=r(Rxe," (RoFormer model)"),Rxe.forEach(t),PLr=i(Le),P3=n(Le,"LI",{});var Sxe=s(P3);K1e=n(Sxe,"STRONG",{});var QCt=s(K1e);$Lr=r(QCt,"xlm-roberta"),QCt.forEach(t),ILr=r(Sxe," \u2014 "),yz=n(Sxe,"A",{href:!0});var HCt=s(yz);NLr=r(HCt,"FlaxXLMRobertaForQuestionAnswering"),HCt.forEach(t),DLr=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Le.forEach(t),jLr=i(Pa),Z1e=n(Pa,"P",{});var UCt=s(Z1e);qLr=r(UCt,"Examples:"),UCt.forEach(t),GLr=i(Pa),f(b7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),zRe=i(c),bm=n(c,"H2",{class:!0});var t$e=s(bm);$3=n(t$e,"A",{id:!0,class:!0,href:!0});var JCt=s($3);eFe=n(JCt,"SPAN",{});var YCt=s(eFe);f(v7.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),OLr=i(t$e),oFe=n(t$e,"SPAN",{});var KCt=s(oFe);XLr=r(KCt,"FlaxAutoModelForTokenClassification"),KCt.forEach(t),t$e.forEach(t),WRe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);f(T7.$$.fragment,wi),VLr=i(wi),vm=n(wi,"P",{});var LQ=s(vm);zLr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rFe=n(LQ,"CODE",{});var ZCt=s(rFe);WLr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),QLr=r(LQ,"class method or the "),tFe=n(LQ,"CODE",{});var eMt=s(tFe);HLr=r(eMt,"from_config()"),eMt.forEach(t),ULr=r(LQ,`class
method.`),LQ.forEach(t),JLr=i(wi),F7=n(wi,"P",{});var a$e=s(F7);YLr=r(a$e,"This class cannot be instantiated directly using "),aFe=n(a$e,"CODE",{});var oMt=s(aFe);KLr=r(oMt,"__init__()"),oMt.forEach(t),ZLr=r(a$e," (throws an error)."),a$e.forEach(t),e7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);f(C7.$$.fragment,Ai),o7r=i(Ai),nFe=n(Ai,"P",{});var rMt=s(nFe);r7r=r(rMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rMt.forEach(t),t7r=i(Ai),Tm=n(Ai,"P",{});var BQ=s(Tm);a7r=r(BQ,`Note:
Loading a model from its configuration file does `),sFe=n(BQ,"STRONG",{});var tMt=s(sFe);n7r=r(tMt,"not"),tMt.forEach(t),s7r=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lFe=n(BQ,"CODE",{});var aMt=s(lFe);l7r=r(aMt,"from_pretrained()"),aMt.forEach(t),i7r=r(BQ,"to load the model weights."),BQ.forEach(t),d7r=i(Ai),iFe=n(Ai,"P",{});var nMt=s(iFe);c7r=r(nMt,"Examples:"),nMt.forEach(t),m7r=i(Ai),f(M7.$$.fragment,Ai),Ai.forEach(t),f7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);f(E7.$$.fragment,$a),g7r=i($a),dFe=n($a,"P",{});var sMt=s(dFe);h7r=r(sMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sMt.forEach(t),u7r=i($a),In=n($a,"P",{});var ey=s(In);p7r=r(ey,"The model class to instantiate is selected based on the "),cFe=n(ey,"CODE",{});var lMt=s(cFe);_7r=r(lMt,"model_type"),lMt.forEach(t),b7r=r(ey,` property of the config object (either
passed as an argument or loaded from `),mFe=n(ey,"CODE",{});var iMt=s(mFe);v7r=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),T7r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(ey,"CODE",{});var dMt=s(fFe);F7r=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),C7r=r(ey,":"),ey.forEach(t),M7r=i($a),Se=n($a,"UL",{});var Oo=s(Se);I3=n(Oo,"LI",{});var Pxe=s(I3);gFe=n(Pxe,"STRONG",{});var cMt=s(gFe);E7r=r(cMt,"albert"),cMt.forEach(t),y7r=r(Pxe," \u2014 "),wz=n(Pxe,"A",{href:!0});var mMt=s(wz);w7r=r(mMt,"FlaxAlbertForTokenClassification"),mMt.forEach(t),A7r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),L7r=i(Oo),N3=n(Oo,"LI",{});var $xe=s(N3);hFe=n($xe,"STRONG",{});var fMt=s(hFe);B7r=r(fMt,"bert"),fMt.forEach(t),x7r=r($xe," \u2014 "),Az=n($xe,"A",{href:!0});var gMt=s(Az);k7r=r(gMt,"FlaxBertForTokenClassification"),gMt.forEach(t),R7r=r($xe," (BERT model)"),$xe.forEach(t),S7r=i(Oo),D3=n(Oo,"LI",{});var Ixe=s(D3);uFe=n(Ixe,"STRONG",{});var hMt=s(uFe);P7r=r(hMt,"big_bird"),hMt.forEach(t),$7r=r(Ixe," \u2014 "),Lz=n(Ixe,"A",{href:!0});var uMt=s(Lz);I7r=r(uMt,"FlaxBigBirdForTokenClassification"),uMt.forEach(t),N7r=r(Ixe," (BigBird model)"),Ixe.forEach(t),D7r=i(Oo),j3=n(Oo,"LI",{});var Nxe=s(j3);pFe=n(Nxe,"STRONG",{});var pMt=s(pFe);j7r=r(pMt,"distilbert"),pMt.forEach(t),q7r=r(Nxe," \u2014 "),Bz=n(Nxe,"A",{href:!0});var _Mt=s(Bz);G7r=r(_Mt,"FlaxDistilBertForTokenClassification"),_Mt.forEach(t),O7r=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),X7r=i(Oo),q3=n(Oo,"LI",{});var Dxe=s(q3);_Fe=n(Dxe,"STRONG",{});var bMt=s(_Fe);V7r=r(bMt,"electra"),bMt.forEach(t),z7r=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var vMt=s(xz);W7r=r(vMt,"FlaxElectraForTokenClassification"),vMt.forEach(t),Q7r=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),H7r=i(Oo),G3=n(Oo,"LI",{});var jxe=s(G3);bFe=n(jxe,"STRONG",{});var TMt=s(bFe);U7r=r(TMt,"roberta"),TMt.forEach(t),J7r=r(jxe," \u2014 "),kz=n(jxe,"A",{href:!0});var FMt=s(kz);Y7r=r(FMt,"FlaxRobertaForTokenClassification"),FMt.forEach(t),K7r=r(jxe," (RoBERTa model)"),jxe.forEach(t),Z7r=i(Oo),O3=n(Oo,"LI",{});var qxe=s(O3);vFe=n(qxe,"STRONG",{});var CMt=s(vFe);e8r=r(CMt,"roformer"),CMt.forEach(t),o8r=r(qxe," \u2014 "),Rz=n(qxe,"A",{href:!0});var MMt=s(Rz);r8r=r(MMt,"FlaxRoFormerForTokenClassification"),MMt.forEach(t),t8r=r(qxe," (RoFormer model)"),qxe.forEach(t),a8r=i(Oo),X3=n(Oo,"LI",{});var Gxe=s(X3);TFe=n(Gxe,"STRONG",{});var EMt=s(TFe);n8r=r(EMt,"xlm-roberta"),EMt.forEach(t),s8r=r(Gxe," \u2014 "),Sz=n(Gxe,"A",{href:!0});var yMt=s(Sz);l8r=r(yMt,"FlaxXLMRobertaForTokenClassification"),yMt.forEach(t),i8r=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),Oo.forEach(t),d8r=i($a),FFe=n($a,"P",{});var wMt=s(FFe);c8r=r(wMt,"Examples:"),wMt.forEach(t),m8r=i($a),f(y7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),QRe=i(c),Fm=n(c,"H2",{class:!0});var n$e=s(Fm);V3=n(n$e,"A",{id:!0,class:!0,href:!0});var AMt=s(V3);CFe=n(AMt,"SPAN",{});var LMt=s(CFe);f(w7.$$.fragment,LMt),LMt.forEach(t),AMt.forEach(t),f8r=i(n$e),MFe=n(n$e,"SPAN",{});var BMt=s(MFe);g8r=r(BMt,"FlaxAutoModelForMultipleChoice"),BMt.forEach(t),n$e.forEach(t),HRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);f(A7.$$.fragment,Li),h8r=i(Li),Cm=n(Li,"P",{});var xQ=s(Cm);u8r=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EFe=n(xQ,"CODE",{});var xMt=s(EFe);p8r=r(xMt,"from_pretrained()"),xMt.forEach(t),_8r=r(xQ,"class method or the "),yFe=n(xQ,"CODE",{});var kMt=s(yFe);b8r=r(kMt,"from_config()"),kMt.forEach(t),v8r=r(xQ,`class
method.`),xQ.forEach(t),T8r=i(Li),L7=n(Li,"P",{});var s$e=s(L7);F8r=r(s$e,"This class cannot be instantiated directly using "),wFe=n(s$e,"CODE",{});var RMt=s(wFe);C8r=r(RMt,"__init__()"),RMt.forEach(t),M8r=r(s$e," (throws an error)."),s$e.forEach(t),E8r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);f(B7.$$.fragment,Bi),y8r=i(Bi),AFe=n(Bi,"P",{});var SMt=s(AFe);w8r=r(SMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),SMt.forEach(t),A8r=i(Bi),Mm=n(Bi,"P",{});var kQ=s(Mm);L8r=r(kQ,`Note:
Loading a model from its configuration file does `),LFe=n(kQ,"STRONG",{});var PMt=s(LFe);B8r=r(PMt,"not"),PMt.forEach(t),x8r=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BFe=n(kQ,"CODE",{});var $Mt=s(BFe);k8r=r($Mt,"from_pretrained()"),$Mt.forEach(t),R8r=r(kQ,"to load the model weights."),kQ.forEach(t),S8r=i(Bi),xFe=n(Bi,"P",{});var IMt=s(xFe);P8r=r(IMt,"Examples:"),IMt.forEach(t),$8r=i(Bi),f(x7.$$.fragment,Bi),Bi.forEach(t),I8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);f(k7.$$.fragment,Ia),N8r=i(Ia),kFe=n(Ia,"P",{});var NMt=s(kFe);D8r=r(NMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NMt.forEach(t),j8r=i(Ia),Nn=n(Ia,"P",{});var oy=s(Nn);q8r=r(oy,"The model class to instantiate is selected based on the "),RFe=n(oy,"CODE",{});var DMt=s(RFe);G8r=r(DMt,"model_type"),DMt.forEach(t),O8r=r(oy,` property of the config object (either
passed as an argument or loaded from `),SFe=n(oy,"CODE",{});var jMt=s(SFe);X8r=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),V8r=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(oy,"CODE",{});var qMt=s(PFe);z8r=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),W8r=r(oy,":"),oy.forEach(t),Q8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);z3=n(Xo,"LI",{});var Oxe=s(z3);$Fe=n(Oxe,"STRONG",{});var GMt=s($Fe);H8r=r(GMt,"albert"),GMt.forEach(t),U8r=r(Oxe," \u2014 "),Pz=n(Oxe,"A",{href:!0});var OMt=s(Pz);J8r=r(OMt,"FlaxAlbertForMultipleChoice"),OMt.forEach(t),Y8r=r(Oxe," (ALBERT model)"),Oxe.forEach(t),K8r=i(Xo),W3=n(Xo,"LI",{});var Xxe=s(W3);IFe=n(Xxe,"STRONG",{});var XMt=s(IFe);Z8r=r(XMt,"bert"),XMt.forEach(t),e9r=r(Xxe," \u2014 "),$z=n(Xxe,"A",{href:!0});var VMt=s($z);o9r=r(VMt,"FlaxBertForMultipleChoice"),VMt.forEach(t),r9r=r(Xxe," (BERT model)"),Xxe.forEach(t),t9r=i(Xo),Q3=n(Xo,"LI",{});var Vxe=s(Q3);NFe=n(Vxe,"STRONG",{});var zMt=s(NFe);a9r=r(zMt,"big_bird"),zMt.forEach(t),n9r=r(Vxe," \u2014 "),Iz=n(Vxe,"A",{href:!0});var WMt=s(Iz);s9r=r(WMt,"FlaxBigBirdForMultipleChoice"),WMt.forEach(t),l9r=r(Vxe," (BigBird model)"),Vxe.forEach(t),i9r=i(Xo),H3=n(Xo,"LI",{});var zxe=s(H3);DFe=n(zxe,"STRONG",{});var QMt=s(DFe);d9r=r(QMt,"distilbert"),QMt.forEach(t),c9r=r(zxe," \u2014 "),Nz=n(zxe,"A",{href:!0});var HMt=s(Nz);m9r=r(HMt,"FlaxDistilBertForMultipleChoice"),HMt.forEach(t),f9r=r(zxe," (DistilBERT model)"),zxe.forEach(t),g9r=i(Xo),U3=n(Xo,"LI",{});var Wxe=s(U3);jFe=n(Wxe,"STRONG",{});var UMt=s(jFe);h9r=r(UMt,"electra"),UMt.forEach(t),u9r=r(Wxe," \u2014 "),Dz=n(Wxe,"A",{href:!0});var JMt=s(Dz);p9r=r(JMt,"FlaxElectraForMultipleChoice"),JMt.forEach(t),_9r=r(Wxe," (ELECTRA model)"),Wxe.forEach(t),b9r=i(Xo),J3=n(Xo,"LI",{});var Qxe=s(J3);qFe=n(Qxe,"STRONG",{});var YMt=s(qFe);v9r=r(YMt,"roberta"),YMt.forEach(t),T9r=r(Qxe," \u2014 "),jz=n(Qxe,"A",{href:!0});var KMt=s(jz);F9r=r(KMt,"FlaxRobertaForMultipleChoice"),KMt.forEach(t),C9r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),M9r=i(Xo),Y3=n(Xo,"LI",{});var Hxe=s(Y3);GFe=n(Hxe,"STRONG",{});var ZMt=s(GFe);E9r=r(ZMt,"roformer"),ZMt.forEach(t),y9r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var e4t=s(qz);w9r=r(e4t,"FlaxRoFormerForMultipleChoice"),e4t.forEach(t),A9r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),L9r=i(Xo),K3=n(Xo,"LI",{});var Uxe=s(K3);OFe=n(Uxe,"STRONG",{});var o4t=s(OFe);B9r=r(o4t,"xlm-roberta"),o4t.forEach(t),x9r=r(Uxe," \u2014 "),Gz=n(Uxe,"A",{href:!0});var r4t=s(Gz);k9r=r(r4t,"FlaxXLMRobertaForMultipleChoice"),r4t.forEach(t),R9r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Xo.forEach(t),S9r=i(Ia),XFe=n(Ia,"P",{});var t4t=s(XFe);P9r=r(t4t,"Examples:"),t4t.forEach(t),$9r=i(Ia),f(R7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),URe=i(c),Em=n(c,"H2",{class:!0});var l$e=s(Em);Z3=n(l$e,"A",{id:!0,class:!0,href:!0});var a4t=s(Z3);VFe=n(a4t,"SPAN",{});var n4t=s(VFe);f(S7.$$.fragment,n4t),n4t.forEach(t),a4t.forEach(t),I9r=i(l$e),zFe=n(l$e,"SPAN",{});var s4t=s(zFe);N9r=r(s4t,"FlaxAutoModelForNextSentencePrediction"),s4t.forEach(t),l$e.forEach(t),JRe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);f(P7.$$.fragment,xi),D9r=i(xi),ym=n(xi,"P",{});var RQ=s(ym);j9r=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WFe=n(RQ,"CODE",{});var l4t=s(WFe);q9r=r(l4t,"from_pretrained()"),l4t.forEach(t),G9r=r(RQ,"class method or the "),QFe=n(RQ,"CODE",{});var i4t=s(QFe);O9r=r(i4t,"from_config()"),i4t.forEach(t),X9r=r(RQ,`class
method.`),RQ.forEach(t),V9r=i(xi),$7=n(xi,"P",{});var i$e=s($7);z9r=r(i$e,"This class cannot be instantiated directly using "),HFe=n(i$e,"CODE",{});var d4t=s(HFe);W9r=r(d4t,"__init__()"),d4t.forEach(t),Q9r=r(i$e," (throws an error)."),i$e.forEach(t),H9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);f(I7.$$.fragment,ki),U9r=i(ki),UFe=n(ki,"P",{});var c4t=s(UFe);J9r=r(c4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c4t.forEach(t),Y9r=i(ki),wm=n(ki,"P",{});var SQ=s(wm);K9r=r(SQ,`Note:
Loading a model from its configuration file does `),JFe=n(SQ,"STRONG",{});var m4t=s(JFe);Z9r=r(m4t,"not"),m4t.forEach(t),eBr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YFe=n(SQ,"CODE",{});var f4t=s(YFe);oBr=r(f4t,"from_pretrained()"),f4t.forEach(t),rBr=r(SQ,"to load the model weights."),SQ.forEach(t),tBr=i(ki),KFe=n(ki,"P",{});var g4t=s(KFe);aBr=r(g4t,"Examples:"),g4t.forEach(t),nBr=i(ki),f(N7.$$.fragment,ki),ki.forEach(t),sBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);f(D7.$$.fragment,Na),lBr=i(Na),ZFe=n(Na,"P",{});var h4t=s(ZFe);iBr=r(h4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),h4t.forEach(t),dBr=i(Na),Dn=n(Na,"P",{});var ry=s(Dn);cBr=r(ry,"The model class to instantiate is selected based on the "),eCe=n(ry,"CODE",{});var u4t=s(eCe);mBr=r(u4t,"model_type"),u4t.forEach(t),fBr=r(ry,` property of the config object (either
passed as an argument or loaded from `),oCe=n(ry,"CODE",{});var p4t=s(oCe);gBr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),hBr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rCe=n(ry,"CODE",{});var _4t=s(rCe);uBr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),pBr=r(ry,":"),ry.forEach(t),_Br=i(Na),tCe=n(Na,"UL",{});var b4t=s(tCe);e5=n(b4t,"LI",{});var Jxe=s(e5);aCe=n(Jxe,"STRONG",{});var v4t=s(aCe);bBr=r(v4t,"bert"),v4t.forEach(t),vBr=r(Jxe," \u2014 "),Oz=n(Jxe,"A",{href:!0});var T4t=s(Oz);TBr=r(T4t,"FlaxBertForNextSentencePrediction"),T4t.forEach(t),FBr=r(Jxe," (BERT model)"),Jxe.forEach(t),b4t.forEach(t),CBr=i(Na),nCe=n(Na,"P",{});var F4t=s(nCe);MBr=r(F4t,"Examples:"),F4t.forEach(t),EBr=i(Na),f(j7.$$.fragment,Na),Na.forEach(t),xi.forEach(t),YRe=i(c),Am=n(c,"H2",{class:!0});var d$e=s(Am);o5=n(d$e,"A",{id:!0,class:!0,href:!0});var C4t=s(o5);sCe=n(C4t,"SPAN",{});var M4t=s(sCe);f(q7.$$.fragment,M4t),M4t.forEach(t),C4t.forEach(t),yBr=i(d$e),lCe=n(d$e,"SPAN",{});var E4t=s(lCe);wBr=r(E4t,"FlaxAutoModelForImageClassification"),E4t.forEach(t),d$e.forEach(t),KRe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);f(G7.$$.fragment,Ri),ABr=i(Ri),Lm=n(Ri,"P",{});var PQ=s(Lm);LBr=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iCe=n(PQ,"CODE",{});var y4t=s(iCe);BBr=r(y4t,"from_pretrained()"),y4t.forEach(t),xBr=r(PQ,"class method or the "),dCe=n(PQ,"CODE",{});var w4t=s(dCe);kBr=r(w4t,"from_config()"),w4t.forEach(t),RBr=r(PQ,`class
method.`),PQ.forEach(t),SBr=i(Ri),O7=n(Ri,"P",{});var c$e=s(O7);PBr=r(c$e,"This class cannot be instantiated directly using "),cCe=n(c$e,"CODE",{});var A4t=s(cCe);$Br=r(A4t,"__init__()"),A4t.forEach(t),IBr=r(c$e," (throws an error)."),c$e.forEach(t),NBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);f(X7.$$.fragment,Si),DBr=i(Si),mCe=n(Si,"P",{});var L4t=s(mCe);jBr=r(L4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),L4t.forEach(t),qBr=i(Si),Bm=n(Si,"P",{});var $Q=s(Bm);GBr=r($Q,`Note:
Loading a model from its configuration file does `),fCe=n($Q,"STRONG",{});var B4t=s(fCe);OBr=r(B4t,"not"),B4t.forEach(t),XBr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),gCe=n($Q,"CODE",{});var x4t=s(gCe);VBr=r(x4t,"from_pretrained()"),x4t.forEach(t),zBr=r($Q,"to load the model weights."),$Q.forEach(t),WBr=i(Si),hCe=n(Si,"P",{});var k4t=s(hCe);QBr=r(k4t,"Examples:"),k4t.forEach(t),HBr=i(Si),f(V7.$$.fragment,Si),Si.forEach(t),UBr=i(Ri),No=n(Ri,"DIV",{class:!0});var Da=s(No);f(z7.$$.fragment,Da),JBr=i(Da),uCe=n(Da,"P",{});var R4t=s(uCe);YBr=r(R4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),R4t.forEach(t),KBr=i(Da),jn=n(Da,"P",{});var ty=s(jn);ZBr=r(ty,"The model class to instantiate is selected based on the "),pCe=n(ty,"CODE",{});var S4t=s(pCe);exr=r(S4t,"model_type"),S4t.forEach(t),oxr=r(ty,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(ty,"CODE",{});var P4t=s(_Ce);rxr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),txr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(ty,"CODE",{});var $4t=s(bCe);axr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),nxr=r(ty,":"),ty.forEach(t),sxr=i(Da),W7=n(Da,"UL",{});var m$e=s(W7);r5=n(m$e,"LI",{});var Yxe=s(r5);vCe=n(Yxe,"STRONG",{});var I4t=s(vCe);lxr=r(I4t,"beit"),I4t.forEach(t),ixr=r(Yxe," \u2014 "),Xz=n(Yxe,"A",{href:!0});var N4t=s(Xz);dxr=r(N4t,"FlaxBeitForImageClassification"),N4t.forEach(t),cxr=r(Yxe," (BEiT model)"),Yxe.forEach(t),mxr=i(m$e),t5=n(m$e,"LI",{});var Kxe=s(t5);TCe=n(Kxe,"STRONG",{});var D4t=s(TCe);fxr=r(D4t,"vit"),D4t.forEach(t),gxr=r(Kxe," \u2014 "),Vz=n(Kxe,"A",{href:!0});var j4t=s(Vz);hxr=r(j4t,"FlaxViTForImageClassification"),j4t.forEach(t),uxr=r(Kxe," (ViT model)"),Kxe.forEach(t),m$e.forEach(t),pxr=i(Da),FCe=n(Da,"P",{});var q4t=s(FCe);_xr=r(q4t,"Examples:"),q4t.forEach(t),bxr=i(Da),f(Q7.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),ZRe=i(c),xm=n(c,"H2",{class:!0});var f$e=s(xm);a5=n(f$e,"A",{id:!0,class:!0,href:!0});var G4t=s(a5);CCe=n(G4t,"SPAN",{});var O4t=s(CCe);f(H7.$$.fragment,O4t),O4t.forEach(t),G4t.forEach(t),vxr=i(f$e),MCe=n(f$e,"SPAN",{});var X4t=s(MCe);Txr=r(X4t,"FlaxAutoModelForVision2Seq"),X4t.forEach(t),f$e.forEach(t),eSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);f(U7.$$.fragment,Pi),Fxr=i(Pi),km=n(Pi,"P",{});var IQ=s(km);Cxr=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ECe=n(IQ,"CODE",{});var V4t=s(ECe);Mxr=r(V4t,"from_pretrained()"),V4t.forEach(t),Exr=r(IQ,"class method or the "),yCe=n(IQ,"CODE",{});var z4t=s(yCe);yxr=r(z4t,"from_config()"),z4t.forEach(t),wxr=r(IQ,`class
method.`),IQ.forEach(t),Axr=i(Pi),J7=n(Pi,"P",{});var g$e=s(J7);Lxr=r(g$e,"This class cannot be instantiated directly using "),wCe=n(g$e,"CODE",{});var W4t=s(wCe);Bxr=r(W4t,"__init__()"),W4t.forEach(t),xxr=r(g$e," (throws an error)."),g$e.forEach(t),kxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);f(Y7.$$.fragment,$i),Rxr=i($i),ACe=n($i,"P",{});var Q4t=s(ACe);Sxr=r(Q4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q4t.forEach(t),Pxr=i($i),Rm=n($i,"P",{});var NQ=s(Rm);$xr=r(NQ,`Note:
Loading a model from its configuration file does `),LCe=n(NQ,"STRONG",{});var H4t=s(LCe);Ixr=r(H4t,"not"),H4t.forEach(t),Nxr=r(NQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BCe=n(NQ,"CODE",{});var U4t=s(BCe);Dxr=r(U4t,"from_pretrained()"),U4t.forEach(t),jxr=r(NQ,"to load the model weights."),NQ.forEach(t),qxr=i($i),xCe=n($i,"P",{});var J4t=s(xCe);Gxr=r(J4t,"Examples:"),J4t.forEach(t),Oxr=i($i),f(K7.$$.fragment,$i),$i.forEach(t),Xxr=i(Pi),Do=n(Pi,"DIV",{class:!0});var ja=s(Do);f(Z7.$$.fragment,ja),Vxr=i(ja),kCe=n(ja,"P",{});var Y4t=s(kCe);zxr=r(Y4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y4t.forEach(t),Wxr=i(ja),qn=n(ja,"P",{});var ay=s(qn);Qxr=r(ay,"The model class to instantiate is selected based on the "),RCe=n(ay,"CODE",{});var K4t=s(RCe);Hxr=r(K4t,"model_type"),K4t.forEach(t),Uxr=r(ay,` property of the config object (either
passed as an argument or loaded from `),SCe=n(ay,"CODE",{});var Z4t=s(SCe);Jxr=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),Yxr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(ay,"CODE",{});var eEt=s(PCe);Kxr=r(eEt,"pretrained_model_name_or_path"),eEt.forEach(t),Zxr=r(ay,":"),ay.forEach(t),ekr=i(ja),$Ce=n(ja,"UL",{});var oEt=s($Ce);n5=n(oEt,"LI",{});var Zxe=s(n5);ICe=n(Zxe,"STRONG",{});var rEt=s(ICe);okr=r(rEt,"vision-encoder-decoder"),rEt.forEach(t),rkr=r(Zxe," \u2014 "),zz=n(Zxe,"A",{href:!0});var tEt=s(zz);tkr=r(tEt,"FlaxVisionEncoderDecoderModel"),tEt.forEach(t),akr=r(Zxe," (Vision Encoder decoder model)"),Zxe.forEach(t),oEt.forEach(t),nkr=i(ja),NCe=n(ja,"P",{});var aEt=s(NCe);skr=r(aEt,"Examples:"),aEt.forEach(t),lkr=i(ja),f(e8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(hEt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(jm,"id","extending-the-auto-classes"),d(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jm,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(a9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(n9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(s9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(l9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(i9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(d9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(c9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(m9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(f9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(g9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(h9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(u9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(p9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(_9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(b9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(v9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(T9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(F9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(C9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(M9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(E9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(y9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(w9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(A9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(L9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d($9,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(N9,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(G9,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(V9,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(W9,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(U9,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(eB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(rB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(sB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(dB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(fB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(gB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(hB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(uB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(pB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(_B,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(bB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(vB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(TB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(FB,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(CB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(MB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(EB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(yB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(wB,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(AB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(LB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(BB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(xB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(kB,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(RB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(SB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(PB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d($B,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(IB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(NB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(DB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(jB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(qB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(GB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(OB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(XB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(VB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(zB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(WB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(QB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(HB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(Sg,"class","docstring"),d(Wo,"class","docstring"),d(Pg,"id","transformers.AutoTokenizer"),d(Pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(UB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(JB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(YB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(KB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(ZB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(ex,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(ox,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(rx,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(tx,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(ax,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(nx,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(sx,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(lx,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(ix,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(dx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(cx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(mx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(fx,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(gx,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(hx,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(ux,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(px,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(_x,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(bx,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(vx,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Tx,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Fx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Cx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Mx,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Ex,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(yx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(wx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ax,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Lx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Bx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(xx,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(kx,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Rx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(Sx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Px,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d($x,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(Ix,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Nx,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Dx,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(jx,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(qx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Gx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Ox,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Xx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Vx,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(zx,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Wx,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Qx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Hx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ux,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Jx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Yx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Kx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Zx,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ek,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ok,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(rk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(tk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ak,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(nk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(sk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(lk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ik,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(dk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(ck,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(mk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(fk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(gk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(hk,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(uk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(pk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(_k,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(bk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(vk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(Tk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Fk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Ck,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Mk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(yk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(wk,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Ak,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Lk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Bk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(xk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(kk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(Sk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Pk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d($k,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Ik,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Nk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Dk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(qk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Gk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ok,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Vk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(zk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Wk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Hk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Uk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Jk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Kk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(oR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(tR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(aR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(nR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(iR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(dR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ch,"class","docstring"),d(Qo,"class","docstring"),d(mh,"id","transformers.AutoFeatureExtractor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(cR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(mR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(fR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(gR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(uR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(pR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(_R,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(bR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(vR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(TR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(FR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(MR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(ER,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(yR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(AR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(LR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(kh,"class","docstring"),d(Ho,"class","docstring"),d(Rh,"id","transformers.AutoProcessor"),d(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(BR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(xR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(kR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(RR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(SR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(PR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d($R,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(IR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(NR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Oh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoModel"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(DR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(jR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(qR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(GR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(OR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(XR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(VR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(zR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(WR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(QR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(HR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(UR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(JR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(YR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(KR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(ZR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(eS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(oS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(rS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(tS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(aS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(nS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(sS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(lS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(iS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(dS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(cS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(mS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(fS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(gS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(hS,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(uS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(pS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(_S,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(bS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(vS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(TS,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(FS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(CS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(MS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(ES,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(yS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(wS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(AS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(LS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(BS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(xS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(kS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(RS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(SS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(PS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d($S,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(IS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(NS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(DS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(jS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(qS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(GS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(OS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(XS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(VS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(zS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(WS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(QS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(HS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(US,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(JS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(YS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(KS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(ZS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(eP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(oP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(rP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(tP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(aP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(nP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(sP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(lP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(iP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(dP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(cP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(mP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(fP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(gP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(hP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(uP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(pP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(_P,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(bP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(vP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(TP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(FP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(Ap,"id","transformers.AutoModelForPreTraining"),d(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ap,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(CP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(MP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(EP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(yP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(wP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(AP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(LP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(xP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(kP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(RP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(SP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(PP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d($P,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(IP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(NP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(DP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(qP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(OP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(XP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(VP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(zP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(WP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(QP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(UP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(JP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(YP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(KP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(ZP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(e$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(o$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(r$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(t$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(a$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(n$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(s$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(h_,"id","transformers.AutoModelForCausalLM"),d(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h_,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(l$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(i$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(d$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(c$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(m$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(f$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(g$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(h$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(u$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(p$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(_$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(b$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(v$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(T$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(F$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(C$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(M$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(E$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(y$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(w$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(A$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(L$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(B$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(x$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(k$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(R$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(S$,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(P$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($$,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(I$,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(N$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(D$,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(j$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(q$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(G$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(Y_,"id","transformers.AutoModelForMaskedLM"),d(Y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y_,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(O$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(X$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(V$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(z$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(W$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Q$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(H$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(U$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(J$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(K$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Z$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(eI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(oI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(rI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(tI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(aI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(nI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(lI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(iI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(dI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(cI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(mI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(fI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(gI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(hI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(uI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(pI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(_I,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(bI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(vI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(TI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(FI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(Pb,"id","transformers.AutoModelForSeq2SeqLM"),d(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pb,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(CI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(MI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(EI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(yI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(wI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(AI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(LI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(BI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(xI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(kI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(RI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(SI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(PI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d($I,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(II,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(NI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(Kb,"id","transformers.AutoModelForSequenceClassification"),d(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kb,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(DI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(jI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(qI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(GI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(OI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(XI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(VI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(zI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(WI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(QI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(HI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(UI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(JI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(YI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(KI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(ZI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(tN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(aN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(nN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(sN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(lN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(iN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(dN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(cN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(mN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(fN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(gN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(hN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(uN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(pN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(_N,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(TN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(FN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(MN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(EN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(yN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(wN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(AN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(LN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(BN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(W2,"id","transformers.AutoModelForMultipleChoice"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(xN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(kN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(RN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(SN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(PN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d($N,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(IN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(NN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(DN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(jN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(qN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(GN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ON,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(XN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(VN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(zN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(WN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(QN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(HN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(UN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(JN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(YN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(KN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ZN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(eD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(Cv,"id","transformers.AutoModelForNextSentencePrediction"),d(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cv,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(Yr,"class","docstring"),d(aD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(nD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(sD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Bv,"id","transformers.AutoModelForTokenClassification"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(dD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(cD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(mD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(fD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(gD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(hD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(uD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(pD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(_D,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(bD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(TD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(FD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(CD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(MD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ED,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(AD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(LD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(RD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(PD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d($D,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ID,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(ND,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(DD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(jD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(qD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(cT,"id","transformers.AutoModelForQuestionAnswering"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(OD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(XD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(VD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(zD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(WD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(QD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(HD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(UD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(JD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(YD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(KD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ZD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(oj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(rj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(tj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(aj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(nj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(sj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(lj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ij,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(dj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(cj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(mj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(fj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(gj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(hj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(uj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(pj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(_j,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(bj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(vj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Tj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Fj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Cj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Mj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Ej,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(wj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(YT,"id","transformers.AutoModelForTableQuestionAnswering"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Aj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(e1,"id","transformers.AutoModelForImageClassification"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Lj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(Bj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Rj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Pj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d($j,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Ij,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Nj,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(Dj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(jj,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(qj,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(Gj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(m1,"id","transformers.AutoModelForVision2Seq"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Oj,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(h1,"id","transformers.AutoModelForAudioClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Xj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Vj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(zj,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Wj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Qj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Hj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Uj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Jj,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(E1,"id","transformers.AutoModelForAudioFrameClassification"),d(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E1,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(Yj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Kj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Zj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(eq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(x1,"id","transformers.AutoModelForCTC"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(oq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(rq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(tq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(aq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(nq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(sq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(lq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(iq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(q1,"id","transformers.AutoModelForSpeechSeq2Seq"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(dq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(cq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(V1,"id","transformers.AutoModelForAudioXVector"),d(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V1,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(mq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(fq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(hq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(J1,"id","transformers.AutoModelForMaskedImageModeling"),d(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(uq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(pq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(_q,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(oF,"id","transformers.AutoModelForObjectDetection"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(bq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(ur,"class","docstring"),d(aF,"id","transformers.AutoModelForImageSegmentation"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(vq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(pr,"class","docstring"),d(lF,"id","transformers.AutoModelForSemanticSegmentation"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(mt,"class","docstring"),d(Tq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Fq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(mF,"id","transformers.AutoModelForInstanceSegmentation"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(ft,"class","docstring"),d(Cq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(hF,"id","transformers.TFAutoModel"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.TFAutoModel"),d(fc,"class","relative group"),d(gt,"class","docstring"),d(Mq,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(Eq,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(yq,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(wq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Aq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Lq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(Bq,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(xq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(kq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Rq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Sq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(Pq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d($q,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Iq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Nq,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(Dq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(jq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(qq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Gq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Oq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(Xq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Vq,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(zq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(Wq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Qq,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(Hq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(Uq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Jq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Yq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(Kq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Zq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(eG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(oG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(rG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(tG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(aG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(nG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(sG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(lG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(iG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(dG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(cG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(mG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(rC,"id","transformers.TFAutoModelForPreTraining"),d(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rC,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(ht,"class","docstring"),d(fG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(gG,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(uG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(pG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(_G,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(bG,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(vG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(TG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(FG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(MG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(EG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(yG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(wG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(AG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(LG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(BG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(xG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(SG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(Tr,"class","docstring"),d(yC,"id","transformers.TFAutoModelForCausalLM"),d(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yC,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(ut,"class","docstring"),d(PG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d($G,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(IG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(NG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(DG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(qG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(GG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(OG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(XG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(VG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Fr,"class","docstring"),d(NC,"id","transformers.TFAutoModelForImageClassification"),d(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NC,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(pt,"class","docstring"),d(zG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(WG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Cr,"class","docstring"),d(qC,"id","transformers.TFAutoModelForMaskedLM"),d(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qC,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(_t,"class","docstring"),d(QG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(mO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(fO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(lM,"id","transformers.TFAutoModelForSeq2SeqLM"),d(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lM,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(gO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(hO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(uO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(pO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(_O,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(bO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(vO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(TO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(FO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(CO,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(bM,"id","transformers.TFAutoModelForSequenceClassification"),d(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bM,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(MO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(yO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(kO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(RO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(PO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($O,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(DO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(jO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(qO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(XO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(VM,"id","transformers.TFAutoModelForMultipleChoice"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(HO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(UO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(JO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(YO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(KO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(ZO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(eX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(oX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(rX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(tX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(aX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(nX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(sX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(lX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(iX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(dX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(cX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(i4,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(mX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(c4,"id","transformers.TFAutoModelForTokenClassification"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.TFAutoModelForTokenClassification"),d(jc,"class","relative group"),d(Ct,"class","docstring"),d(fX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(gX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(hX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(uX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(pX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(_X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(bX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(vX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(TX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(FX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(CX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(MX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(EX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(wX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(AX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(LX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(xX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(k4,"id","transformers.TFAutoModelForQuestionAnswering"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(RX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(SX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(PX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d($X,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(IX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(NX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(DX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(jX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(qX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(GX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(OX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(XX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(VX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(zX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(WX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(QX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(HX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(UX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(JX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(Y4,"id","transformers.TFAutoModelForVision2Seq"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(YX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(Z4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(KX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(oE,"id","transformers.FlaxAutoModel"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(ZX,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(eV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(oV,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(rV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(tV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(aV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(nV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(sV,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(lV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(iV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(dV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(cV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(mV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(fV,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(gV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(hV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(uV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(pV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(_V,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(bV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(vV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(TV,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(FV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(CV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(MV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(AE,"id","transformers.FlaxAutoModelForCausalLM"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.FlaxAutoModelForCausalLM"),d(em,"class","relative group"),d(At,"class","docstring"),d(EV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(yV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(wV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(AV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(LV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(SE,"id","transformers.FlaxAutoModelForPreTraining"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForPreTraining"),d(tm,"class","relative group"),d(Lt,"class","docstring"),d(BV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(xV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(kV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(RV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(PV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d($V,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(IV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(NV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(jV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(qV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(WE,"id","transformers.FlaxAutoModelForMaskedLM"),d(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sm,"class","relative group"),d(Bt,"class","docstring"),d(GV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(VV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(QV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(HV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(UV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(t3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(dm,"class","relative group"),d(xt,"class","docstring"),d(YV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ez,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oz,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(az,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nz,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(g3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(fm,"class","relative group"),d(kt,"class","docstring"),d(sz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(E3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(um,"class","relative group"),d(Rt,"class","docstring"),d(pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(_z,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(bz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(vz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Tz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Fz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Cz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Ez,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(yz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d($3,"id","transformers.FlaxAutoModelForTokenClassification"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bm,"class","relative group"),d(St,"class","docstring"),d(wz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Az,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Lz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Bz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(xz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(kz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Rz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Sz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(V3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(Pt,"class","docstring"),d(Pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Dz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(jz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(Z3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d($t,"class","docstring"),d(Oz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(o5,"id","transformers.FlaxAutoModelForImageClassification"),d(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o5,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(It,"class","docstring"),d(Xz,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Vz,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(a5,"id","transformers.FlaxAutoModelForVision2Seq"),d(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a5,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(Nt,"class","docstring"),d(zz,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,_){e(document.head,K),b(c,io,_),b(c,de,_),e(de,Ee),e(Ee,lo),g(me,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,$m,_),b(c,ma,_),e(ma,Ni),e(ma,Di),e(Di,ny),e(ma,Im),b(c,Be,_),b(c,co,_),e(co,ji),e(co,Gn),e(Gn,sy),e(co,On),e(co,Xn),e(Xn,ly),e(co,qi),e(co,Vn),e(Vn,iy),e(co,Gi),b(c,Nm,_),g(qa,c,_),b(c,mo,_),b(c,ue,_),e(ue,K8),e(ue,Oi),e(Oi,Z8),e(ue,e9),b(c,zo,_),b(c,Ga,_),e(Ga,o9),e(Ga,Dm),e(Dm,r9),e(Ga,h$e),b(c,eke,_),b(c,Xi,_),e(Xi,jm),e(jm,DQ),g(dy,DQ,null),e(Xi,u$e),e(Xi,jQ),e(jQ,p$e),b(c,oke,_),b(c,zn,_),e(zn,_$e),e(zn,qQ),e(qQ,b$e),e(zn,v$e),e(zn,GQ),e(GQ,T$e),e(zn,F$e),b(c,rke,_),g(cy,c,_),b(c,tke,_),b(c,t9,_),e(t9,C$e),b(c,ake,_),g(qm,c,_),b(c,nke,_),b(c,Vi,_),e(Vi,Gm),e(Gm,OQ),g(my,OQ,null),e(Vi,M$e),e(Vi,XQ),e(XQ,E$e),b(c,ske,_),b(c,Wo,_),g(fy,Wo,null),e(Wo,y$e),e(Wo,gy),e(gy,w$e),e(gy,a9),e(a9,A$e),e(gy,L$e),e(Wo,B$e),e(Wo,hy),e(hy,x$e),e(hy,VQ),e(VQ,k$e),e(hy,R$e),e(Wo,S$e),e(Wo,fo),g(uy,fo,null),e(fo,P$e),e(fo,zQ),e(zQ,$$e),e(fo,I$e),e(fo,zi),e(zi,N$e),e(zi,WQ),e(WQ,D$e),e(zi,j$e),e(zi,QQ),e(QQ,q$e),e(zi,G$e),e(fo,O$e),e(fo,v),e(v,Om),e(Om,HQ),e(HQ,X$e),e(Om,V$e),e(Om,n9),e(n9,z$e),e(Om,W$e),e(v,Q$e),e(v,Xm),e(Xm,UQ),e(UQ,H$e),e(Xm,U$e),e(Xm,s9),e(s9,J$e),e(Xm,Y$e),e(v,K$e),e(v,Vm),e(Vm,JQ),e(JQ,Z$e),e(Vm,eIe),e(Vm,l9),e(l9,oIe),e(Vm,rIe),e(v,tIe),e(v,zm),e(zm,YQ),e(YQ,aIe),e(zm,nIe),e(zm,i9),e(i9,sIe),e(zm,lIe),e(v,iIe),e(v,Wm),e(Wm,KQ),e(KQ,dIe),e(Wm,cIe),e(Wm,d9),e(d9,mIe),e(Wm,fIe),e(v,gIe),e(v,Qm),e(Qm,ZQ),e(ZQ,hIe),e(Qm,uIe),e(Qm,c9),e(c9,pIe),e(Qm,_Ie),e(v,bIe),e(v,Hm),e(Hm,eH),e(eH,vIe),e(Hm,TIe),e(Hm,m9),e(m9,FIe),e(Hm,CIe),e(v,MIe),e(v,Um),e(Um,oH),e(oH,EIe),e(Um,yIe),e(Um,f9),e(f9,wIe),e(Um,AIe),e(v,LIe),e(v,Jm),e(Jm,rH),e(rH,BIe),e(Jm,xIe),e(Jm,g9),e(g9,kIe),e(Jm,RIe),e(v,SIe),e(v,Ym),e(Ym,tH),e(tH,PIe),e(Ym,$Ie),e(Ym,h9),e(h9,IIe),e(Ym,NIe),e(v,DIe),e(v,Km),e(Km,aH),e(aH,jIe),e(Km,qIe),e(Km,u9),e(u9,GIe),e(Km,OIe),e(v,XIe),e(v,Zm),e(Zm,nH),e(nH,VIe),e(Zm,zIe),e(Zm,p9),e(p9,WIe),e(Zm,QIe),e(v,HIe),e(v,ef),e(ef,sH),e(sH,UIe),e(ef,JIe),e(ef,_9),e(_9,YIe),e(ef,KIe),e(v,ZIe),e(v,of),e(of,lH),e(lH,eNe),e(of,oNe),e(of,b9),e(b9,rNe),e(of,tNe),e(v,aNe),e(v,rf),e(rf,iH),e(iH,nNe),e(rf,sNe),e(rf,v9),e(v9,lNe),e(rf,iNe),e(v,dNe),e(v,tf),e(tf,dH),e(dH,cNe),e(tf,mNe),e(tf,T9),e(T9,fNe),e(tf,gNe),e(v,hNe),e(v,af),e(af,cH),e(cH,uNe),e(af,pNe),e(af,F9),e(F9,_Ne),e(af,bNe),e(v,vNe),e(v,nf),e(nf,mH),e(mH,TNe),e(nf,FNe),e(nf,C9),e(C9,CNe),e(nf,MNe),e(v,ENe),e(v,sf),e(sf,fH),e(fH,yNe),e(sf,wNe),e(sf,M9),e(M9,ANe),e(sf,LNe),e(v,BNe),e(v,lf),e(lf,gH),e(gH,xNe),e(lf,kNe),e(lf,E9),e(E9,RNe),e(lf,SNe),e(v,PNe),e(v,df),e(df,hH),e(hH,$Ne),e(df,INe),e(df,y9),e(y9,NNe),e(df,DNe),e(v,jNe),e(v,cf),e(cf,uH),e(uH,qNe),e(cf,GNe),e(cf,w9),e(w9,ONe),e(cf,XNe),e(v,VNe),e(v,mf),e(mf,pH),e(pH,zNe),e(mf,WNe),e(mf,A9),e(A9,QNe),e(mf,HNe),e(v,UNe),e(v,ff),e(ff,_H),e(_H,JNe),e(ff,YNe),e(ff,L9),e(L9,KNe),e(ff,ZNe),e(v,eDe),e(v,gf),e(gf,bH),e(bH,oDe),e(gf,rDe),e(gf,B9),e(B9,tDe),e(gf,aDe),e(v,nDe),e(v,hf),e(hf,vH),e(vH,sDe),e(hf,lDe),e(hf,x9),e(x9,iDe),e(hf,dDe),e(v,cDe),e(v,uf),e(uf,TH),e(TH,mDe),e(uf,fDe),e(uf,k9),e(k9,gDe),e(uf,hDe),e(v,uDe),e(v,pf),e(pf,FH),e(FH,pDe),e(pf,_De),e(pf,R9),e(R9,bDe),e(pf,vDe),e(v,TDe),e(v,_f),e(_f,CH),e(CH,FDe),e(_f,CDe),e(_f,S9),e(S9,MDe),e(_f,EDe),e(v,yDe),e(v,bf),e(bf,MH),e(MH,wDe),e(bf,ADe),e(bf,P9),e(P9,LDe),e(bf,BDe),e(v,xDe),e(v,vf),e(vf,EH),e(EH,kDe),e(vf,RDe),e(vf,$9),e($9,SDe),e(vf,PDe),e(v,$De),e(v,Tf),e(Tf,yH),e(yH,IDe),e(Tf,NDe),e(Tf,I9),e(I9,DDe),e(Tf,jDe),e(v,qDe),e(v,Ff),e(Ff,wH),e(wH,GDe),e(Ff,ODe),e(Ff,N9),e(N9,XDe),e(Ff,VDe),e(v,zDe),e(v,Cf),e(Cf,AH),e(AH,WDe),e(Cf,QDe),e(Cf,D9),e(D9,HDe),e(Cf,UDe),e(v,JDe),e(v,Mf),e(Mf,LH),e(LH,YDe),e(Mf,KDe),e(Mf,j9),e(j9,ZDe),e(Mf,eje),e(v,oje),e(v,Ef),e(Ef,BH),e(BH,rje),e(Ef,tje),e(Ef,q9),e(q9,aje),e(Ef,nje),e(v,sje),e(v,yf),e(yf,xH),e(xH,lje),e(yf,ije),e(yf,G9),e(G9,dje),e(yf,cje),e(v,mje),e(v,wf),e(wf,kH),e(kH,fje),e(wf,gje),e(wf,O9),e(O9,hje),e(wf,uje),e(v,pje),e(v,Af),e(Af,RH),e(RH,_je),e(Af,bje),e(Af,X9),e(X9,vje),e(Af,Tje),e(v,Fje),e(v,Lf),e(Lf,SH),e(SH,Cje),e(Lf,Mje),e(Lf,V9),e(V9,Eje),e(Lf,yje),e(v,wje),e(v,Bf),e(Bf,PH),e(PH,Aje),e(Bf,Lje),e(Bf,z9),e(z9,Bje),e(Bf,xje),e(v,kje),e(v,xf),e(xf,$H),e($H,Rje),e(xf,Sje),e(xf,W9),e(W9,Pje),e(xf,$je),e(v,Ije),e(v,kf),e(kf,IH),e(IH,Nje),e(kf,Dje),e(kf,Q9),e(Q9,jje),e(kf,qje),e(v,Gje),e(v,Rf),e(Rf,NH),e(NH,Oje),e(Rf,Xje),e(Rf,H9),e(H9,Vje),e(Rf,zje),e(v,Wje),e(v,Sf),e(Sf,DH),e(DH,Qje),e(Sf,Hje),e(Sf,U9),e(U9,Uje),e(Sf,Jje),e(v,Yje),e(v,Pf),e(Pf,jH),e(jH,Kje),e(Pf,Zje),e(Pf,J9),e(J9,eqe),e(Pf,oqe),e(v,rqe),e(v,$f),e($f,qH),e(qH,tqe),e($f,aqe),e($f,Y9),e(Y9,nqe),e($f,sqe),e(v,lqe),e(v,If),e(If,GH),e(GH,iqe),e(If,dqe),e(If,K9),e(K9,cqe),e(If,mqe),e(v,fqe),e(v,Nf),e(Nf,OH),e(OH,gqe),e(Nf,hqe),e(Nf,Z9),e(Z9,uqe),e(Nf,pqe),e(v,_qe),e(v,Df),e(Df,XH),e(XH,bqe),e(Df,vqe),e(Df,eB),e(eB,Tqe),e(Df,Fqe),e(v,Cqe),e(v,jf),e(jf,VH),e(VH,Mqe),e(jf,Eqe),e(jf,oB),e(oB,yqe),e(jf,wqe),e(v,Aqe),e(v,qf),e(qf,zH),e(zH,Lqe),e(qf,Bqe),e(qf,rB),e(rB,xqe),e(qf,kqe),e(v,Rqe),e(v,Gf),e(Gf,WH),e(WH,Sqe),e(Gf,Pqe),e(Gf,tB),e(tB,$qe),e(Gf,Iqe),e(v,Nqe),e(v,Of),e(Of,QH),e(QH,Dqe),e(Of,jqe),e(Of,aB),e(aB,qqe),e(Of,Gqe),e(v,Oqe),e(v,Xf),e(Xf,HH),e(HH,Xqe),e(Xf,Vqe),e(Xf,nB),e(nB,zqe),e(Xf,Wqe),e(v,Qqe),e(v,Vf),e(Vf,UH),e(UH,Hqe),e(Vf,Uqe),e(Vf,sB),e(sB,Jqe),e(Vf,Yqe),e(v,Kqe),e(v,zf),e(zf,JH),e(JH,Zqe),e(zf,eGe),e(zf,lB),e(lB,oGe),e(zf,rGe),e(v,tGe),e(v,Wf),e(Wf,YH),e(YH,aGe),e(Wf,nGe),e(Wf,iB),e(iB,sGe),e(Wf,lGe),e(v,iGe),e(v,Qf),e(Qf,KH),e(KH,dGe),e(Qf,cGe),e(Qf,dB),e(dB,mGe),e(Qf,fGe),e(v,gGe),e(v,Hf),e(Hf,ZH),e(ZH,hGe),e(Hf,uGe),e(Hf,cB),e(cB,pGe),e(Hf,_Ge),e(v,bGe),e(v,Uf),e(Uf,eU),e(eU,vGe),e(Uf,TGe),e(Uf,mB),e(mB,FGe),e(Uf,CGe),e(v,MGe),e(v,Jf),e(Jf,oU),e(oU,EGe),e(Jf,yGe),e(Jf,fB),e(fB,wGe),e(Jf,AGe),e(v,LGe),e(v,Yf),e(Yf,rU),e(rU,BGe),e(Yf,xGe),e(Yf,gB),e(gB,kGe),e(Yf,RGe),e(v,SGe),e(v,Kf),e(Kf,tU),e(tU,PGe),e(Kf,$Ge),e(Kf,hB),e(hB,IGe),e(Kf,NGe),e(v,DGe),e(v,Zf),e(Zf,aU),e(aU,jGe),e(Zf,qGe),e(Zf,uB),e(uB,GGe),e(Zf,OGe),e(v,XGe),e(v,eg),e(eg,nU),e(nU,VGe),e(eg,zGe),e(eg,pB),e(pB,WGe),e(eg,QGe),e(v,HGe),e(v,og),e(og,sU),e(sU,UGe),e(og,JGe),e(og,_B),e(_B,YGe),e(og,KGe),e(v,ZGe),e(v,rg),e(rg,lU),e(lU,eOe),e(rg,oOe),e(rg,bB),e(bB,rOe),e(rg,tOe),e(v,aOe),e(v,tg),e(tg,iU),e(iU,nOe),e(tg,sOe),e(tg,vB),e(vB,lOe),e(tg,iOe),e(v,dOe),e(v,ag),e(ag,dU),e(dU,cOe),e(ag,mOe),e(ag,TB),e(TB,fOe),e(ag,gOe),e(v,hOe),e(v,ng),e(ng,cU),e(cU,uOe),e(ng,pOe),e(ng,FB),e(FB,_Oe),e(ng,bOe),e(v,vOe),e(v,sg),e(sg,mU),e(mU,TOe),e(sg,FOe),e(sg,CB),e(CB,COe),e(sg,MOe),e(v,EOe),e(v,lg),e(lg,fU),e(fU,yOe),e(lg,wOe),e(lg,MB),e(MB,AOe),e(lg,LOe),e(v,BOe),e(v,ig),e(ig,gU),e(gU,xOe),e(ig,kOe),e(ig,EB),e(EB,ROe),e(ig,SOe),e(v,POe),e(v,dg),e(dg,hU),e(hU,$Oe),e(dg,IOe),e(dg,yB),e(yB,NOe),e(dg,DOe),e(v,jOe),e(v,cg),e(cg,uU),e(uU,qOe),e(cg,GOe),e(cg,wB),e(wB,OOe),e(cg,XOe),e(v,VOe),e(v,mg),e(mg,pU),e(pU,zOe),e(mg,WOe),e(mg,AB),e(AB,QOe),e(mg,HOe),e(v,UOe),e(v,fg),e(fg,_U),e(_U,JOe),e(fg,YOe),e(fg,LB),e(LB,KOe),e(fg,ZOe),e(v,eXe),e(v,gg),e(gg,bU),e(bU,oXe),e(gg,rXe),e(gg,BB),e(BB,tXe),e(gg,aXe),e(v,nXe),e(v,hg),e(hg,vU),e(vU,sXe),e(hg,lXe),e(hg,xB),e(xB,iXe),e(hg,dXe),e(v,cXe),e(v,ug),e(ug,TU),e(TU,mXe),e(ug,fXe),e(ug,kB),e(kB,gXe),e(ug,hXe),e(v,uXe),e(v,pg),e(pg,FU),e(FU,pXe),e(pg,_Xe),e(pg,RB),e(RB,bXe),e(pg,vXe),e(v,TXe),e(v,_g),e(_g,CU),e(CU,FXe),e(_g,CXe),e(_g,SB),e(SB,MXe),e(_g,EXe),e(v,yXe),e(v,bg),e(bg,MU),e(MU,wXe),e(bg,AXe),e(bg,PB),e(PB,LXe),e(bg,BXe),e(v,xXe),e(v,vg),e(vg,EU),e(EU,kXe),e(vg,RXe),e(vg,$B),e($B,SXe),e(vg,PXe),e(v,$Xe),e(v,Tg),e(Tg,yU),e(yU,IXe),e(Tg,NXe),e(Tg,IB),e(IB,DXe),e(Tg,jXe),e(v,qXe),e(v,Fg),e(Fg,wU),e(wU,GXe),e(Fg,OXe),e(Fg,NB),e(NB,XXe),e(Fg,VXe),e(v,zXe),e(v,Cg),e(Cg,AU),e(AU,WXe),e(Cg,QXe),e(Cg,DB),e(DB,HXe),e(Cg,UXe),e(v,JXe),e(v,Mg),e(Mg,LU),e(LU,YXe),e(Mg,KXe),e(Mg,jB),e(jB,ZXe),e(Mg,eVe),e(v,oVe),e(v,Eg),e(Eg,BU),e(BU,rVe),e(Eg,tVe),e(Eg,qB),e(qB,aVe),e(Eg,nVe),e(v,sVe),e(v,yg),e(yg,xU),e(xU,lVe),e(yg,iVe),e(yg,GB),e(GB,dVe),e(yg,cVe),e(v,mVe),e(v,wg),e(wg,kU),e(kU,fVe),e(wg,gVe),e(wg,OB),e(OB,hVe),e(wg,uVe),e(v,pVe),e(v,Ag),e(Ag,RU),e(RU,_Ve),e(Ag,bVe),e(Ag,XB),e(XB,vVe),e(Ag,TVe),e(v,FVe),e(v,Lg),e(Lg,SU),e(SU,CVe),e(Lg,MVe),e(Lg,VB),e(VB,EVe),e(Lg,yVe),e(v,wVe),e(v,Bg),e(Bg,PU),e(PU,AVe),e(Bg,LVe),e(Bg,zB),e(zB,BVe),e(Bg,xVe),e(v,kVe),e(v,xg),e(xg,$U),e($U,RVe),e(xg,SVe),e(xg,WB),e(WB,PVe),e(xg,$Ve),e(v,IVe),e(v,kg),e(kg,IU),e(IU,NVe),e(kg,DVe),e(kg,QB),e(QB,jVe),e(kg,qVe),e(v,GVe),e(v,Rg),e(Rg,NU),e(NU,OVe),e(Rg,XVe),e(Rg,HB),e(HB,VVe),e(Rg,zVe),e(fo,WVe),e(fo,DU),e(DU,QVe),e(fo,HVe),g(py,fo,null),e(Wo,UVe),e(Wo,Sg),g(_y,Sg,null),e(Sg,JVe),e(Sg,jU),e(jU,YVe),b(c,lke,_),b(c,Wi,_),e(Wi,Pg),e(Pg,qU),g(by,qU,null),e(Wi,KVe),e(Wi,GU),e(GU,ZVe),b(c,ike,_),b(c,Qo,_),g(vy,Qo,null),e(Qo,eze),e(Qo,Ty),e(Ty,oze),e(Ty,UB),e(UB,rze),e(Ty,tze),e(Qo,aze),e(Qo,Fy),e(Fy,nze),e(Fy,OU),e(OU,sze),e(Fy,lze),e(Qo,ize),e(Qo,go),g(Cy,go,null),e(go,dze),e(go,XU),e(XU,cze),e(go,mze),e(go,Oa),e(Oa,fze),e(Oa,VU),e(VU,gze),e(Oa,hze),e(Oa,zU),e(zU,uze),e(Oa,pze),e(Oa,WU),e(WU,_ze),e(Oa,bze),e(go,vze),e(go,E),e(E,Wn),e(Wn,QU),e(QU,Tze),e(Wn,Fze),e(Wn,JB),e(JB,Cze),e(Wn,Mze),e(Wn,YB),e(YB,Eze),e(Wn,yze),e(E,wze),e(E,Qn),e(Qn,HU),e(HU,Aze),e(Qn,Lze),e(Qn,KB),e(KB,Bze),e(Qn,xze),e(Qn,ZB),e(ZB,kze),e(Qn,Rze),e(E,Sze),e(E,Hn),e(Hn,UU),e(UU,Pze),e(Hn,$ze),e(Hn,ex),e(ex,Ize),e(Hn,Nze),e(Hn,ox),e(ox,Dze),e(Hn,jze),e(E,qze),e(E,$g),e($g,JU),e(JU,Gze),e($g,Oze),e($g,rx),e(rx,Xze),e($g,Vze),e(E,zze),e(E,Un),e(Un,YU),e(YU,Wze),e(Un,Qze),e(Un,tx),e(tx,Hze),e(Un,Uze),e(Un,ax),e(ax,Jze),e(Un,Yze),e(E,Kze),e(E,Ig),e(Ig,KU),e(KU,Zze),e(Ig,eWe),e(Ig,nx),e(nx,oWe),e(Ig,rWe),e(E,tWe),e(E,Ng),e(Ng,ZU),e(ZU,aWe),e(Ng,nWe),e(Ng,sx),e(sx,sWe),e(Ng,lWe),e(E,iWe),e(E,Dg),e(Dg,eJ),e(eJ,dWe),e(Dg,cWe),e(Dg,lx),e(lx,mWe),e(Dg,fWe),e(E,gWe),e(E,Jn),e(Jn,oJ),e(oJ,hWe),e(Jn,uWe),e(Jn,ix),e(ix,pWe),e(Jn,_We),e(Jn,dx),e(dx,bWe),e(Jn,vWe),e(E,TWe),e(E,Yn),e(Yn,rJ),e(rJ,FWe),e(Yn,CWe),e(Yn,cx),e(cx,MWe),e(Yn,EWe),e(Yn,mx),e(mx,yWe),e(Yn,wWe),e(E,AWe),e(E,Kn),e(Kn,tJ),e(tJ,LWe),e(Kn,BWe),e(Kn,fx),e(fx,xWe),e(Kn,kWe),e(Kn,gx),e(gx,RWe),e(Kn,SWe),e(E,PWe),e(E,jg),e(jg,aJ),e(aJ,$We),e(jg,IWe),e(jg,hx),e(hx,NWe),e(jg,DWe),e(E,jWe),e(E,qg),e(qg,nJ),e(nJ,qWe),e(qg,GWe),e(qg,ux),e(ux,OWe),e(qg,XWe),e(E,VWe),e(E,Zn),e(Zn,sJ),e(sJ,zWe),e(Zn,WWe),e(Zn,px),e(px,QWe),e(Zn,HWe),e(Zn,_x),e(_x,UWe),e(Zn,JWe),e(E,YWe),e(E,Gg),e(Gg,lJ),e(lJ,KWe),e(Gg,ZWe),e(Gg,bx),e(bx,eQe),e(Gg,oQe),e(E,rQe),e(E,es),e(es,iJ),e(iJ,tQe),e(es,aQe),e(es,vx),e(vx,nQe),e(es,sQe),e(es,Tx),e(Tx,lQe),e(es,iQe),e(E,dQe),e(E,os),e(os,dJ),e(dJ,cQe),e(os,mQe),e(os,Fx),e(Fx,fQe),e(os,gQe),e(os,Cx),e(Cx,hQe),e(os,uQe),e(E,pQe),e(E,rs),e(rs,cJ),e(cJ,_Qe),e(rs,bQe),e(rs,Mx),e(Mx,vQe),e(rs,TQe),e(rs,mJ),e(mJ,FQe),e(rs,CQe),e(E,MQe),e(E,Og),e(Og,fJ),e(fJ,EQe),e(Og,yQe),e(Og,Ex),e(Ex,wQe),e(Og,AQe),e(E,LQe),e(E,ts),e(ts,gJ),e(gJ,BQe),e(ts,xQe),e(ts,yx),e(yx,kQe),e(ts,RQe),e(ts,wx),e(wx,SQe),e(ts,PQe),e(E,$Qe),e(E,Xg),e(Xg,hJ),e(hJ,IQe),e(Xg,NQe),e(Xg,Ax),e(Ax,DQe),e(Xg,jQe),e(E,qQe),e(E,as),e(as,uJ),e(uJ,GQe),e(as,OQe),e(as,Lx),e(Lx,XQe),e(as,VQe),e(as,Bx),e(Bx,zQe),e(as,WQe),e(E,QQe),e(E,ns),e(ns,pJ),e(pJ,HQe),e(ns,UQe),e(ns,xx),e(xx,JQe),e(ns,YQe),e(ns,kx),e(kx,KQe),e(ns,ZQe),e(E,eHe),e(E,ss),e(ss,_J),e(_J,oHe),e(ss,rHe),e(ss,Rx),e(Rx,tHe),e(ss,aHe),e(ss,Sx),e(Sx,nHe),e(ss,sHe),e(E,lHe),e(E,Vg),e(Vg,bJ),e(bJ,iHe),e(Vg,dHe),e(Vg,Px),e(Px,cHe),e(Vg,mHe),e(E,fHe),e(E,ls),e(ls,vJ),e(vJ,gHe),e(ls,hHe),e(ls,$x),e($x,uHe),e(ls,pHe),e(ls,Ix),e(Ix,_He),e(ls,bHe),e(E,vHe),e(E,zg),e(zg,TJ),e(TJ,THe),e(zg,FHe),e(zg,Nx),e(Nx,CHe),e(zg,MHe),e(E,EHe),e(E,is),e(is,FJ),e(FJ,yHe),e(is,wHe),e(is,Dx),e(Dx,AHe),e(is,LHe),e(is,jx),e(jx,BHe),e(is,xHe),e(E,kHe),e(E,ds),e(ds,CJ),e(CJ,RHe),e(ds,SHe),e(ds,qx),e(qx,PHe),e(ds,$He),e(ds,Gx),e(Gx,IHe),e(ds,NHe),e(E,DHe),e(E,cs),e(cs,MJ),e(MJ,jHe),e(cs,qHe),e(cs,Ox),e(Ox,GHe),e(cs,OHe),e(cs,Xx),e(Xx,XHe),e(cs,VHe),e(E,zHe),e(E,ms),e(ms,EJ),e(EJ,WHe),e(ms,QHe),e(ms,Vx),e(Vx,HHe),e(ms,UHe),e(ms,zx),e(zx,JHe),e(ms,YHe),e(E,KHe),e(E,Wg),e(Wg,yJ),e(yJ,ZHe),e(Wg,eUe),e(Wg,Wx),e(Wx,oUe),e(Wg,rUe),e(E,tUe),e(E,fs),e(fs,wJ),e(wJ,aUe),e(fs,nUe),e(fs,Qx),e(Qx,sUe),e(fs,lUe),e(fs,Hx),e(Hx,iUe),e(fs,dUe),e(E,cUe),e(E,gs),e(gs,AJ),e(AJ,mUe),e(gs,fUe),e(gs,Ux),e(Ux,gUe),e(gs,hUe),e(gs,Jx),e(Jx,uUe),e(gs,pUe),e(E,_Ue),e(E,hs),e(hs,LJ),e(LJ,bUe),e(hs,vUe),e(hs,Yx),e(Yx,TUe),e(hs,FUe),e(hs,Kx),e(Kx,CUe),e(hs,MUe),e(E,EUe),e(E,us),e(us,BJ),e(BJ,yUe),e(us,wUe),e(us,Zx),e(Zx,AUe),e(us,LUe),e(us,ek),e(ek,BUe),e(us,xUe),e(E,kUe),e(E,ps),e(ps,xJ),e(xJ,RUe),e(ps,SUe),e(ps,ok),e(ok,PUe),e(ps,$Ue),e(ps,rk),e(rk,IUe),e(ps,NUe),e(E,DUe),e(E,_s),e(_s,kJ),e(kJ,jUe),e(_s,qUe),e(_s,tk),e(tk,GUe),e(_s,OUe),e(_s,ak),e(ak,XUe),e(_s,VUe),e(E,zUe),e(E,Qg),e(Qg,RJ),e(RJ,WUe),e(Qg,QUe),e(Qg,nk),e(nk,HUe),e(Qg,UUe),e(E,JUe),e(E,bs),e(bs,SJ),e(SJ,YUe),e(bs,KUe),e(bs,sk),e(sk,ZUe),e(bs,eJe),e(bs,lk),e(lk,oJe),e(bs,rJe),e(E,tJe),e(E,Hg),e(Hg,PJ),e(PJ,aJe),e(Hg,nJe),e(Hg,ik),e(ik,sJe),e(Hg,lJe),e(E,iJe),e(E,Ug),e(Ug,$J),e($J,dJe),e(Ug,cJe),e(Ug,dk),e(dk,mJe),e(Ug,fJe),e(E,gJe),e(E,vs),e(vs,IJ),e(IJ,hJe),e(vs,uJe),e(vs,ck),e(ck,pJe),e(vs,_Je),e(vs,mk),e(mk,bJe),e(vs,vJe),e(E,TJe),e(E,Ts),e(Ts,NJ),e(NJ,FJe),e(Ts,CJe),e(Ts,fk),e(fk,MJe),e(Ts,EJe),e(Ts,gk),e(gk,yJe),e(Ts,wJe),e(E,AJe),e(E,Jg),e(Jg,DJ),e(DJ,LJe),e(Jg,BJe),e(Jg,hk),e(hk,xJe),e(Jg,kJe),e(E,RJe),e(E,Fs),e(Fs,jJ),e(jJ,SJe),e(Fs,PJe),e(Fs,uk),e(uk,$Je),e(Fs,IJe),e(Fs,pk),e(pk,NJe),e(Fs,DJe),e(E,jJe),e(E,Cs),e(Cs,qJ),e(qJ,qJe),e(Cs,GJe),e(Cs,_k),e(_k,OJe),e(Cs,XJe),e(Cs,bk),e(bk,VJe),e(Cs,zJe),e(E,WJe),e(E,Ms),e(Ms,GJ),e(GJ,QJe),e(Ms,HJe),e(Ms,vk),e(vk,UJe),e(Ms,JJe),e(Ms,Tk),e(Tk,YJe),e(Ms,KJe),e(E,ZJe),e(E,Es),e(Es,OJ),e(OJ,eYe),e(Es,oYe),e(Es,Fk),e(Fk,rYe),e(Es,tYe),e(Es,Ck),e(Ck,aYe),e(Es,nYe),e(E,sYe),e(E,ys),e(ys,XJ),e(XJ,lYe),e(ys,iYe),e(ys,Mk),e(Mk,dYe),e(ys,cYe),e(ys,Ek),e(Ek,mYe),e(ys,fYe),e(E,gYe),e(E,Yg),e(Yg,VJ),e(VJ,hYe),e(Yg,uYe),e(Yg,yk),e(yk,pYe),e(Yg,_Ye),e(E,bYe),e(E,Kg),e(Kg,zJ),e(zJ,vYe),e(Kg,TYe),e(Kg,wk),e(wk,FYe),e(Kg,CYe),e(E,MYe),e(E,Zg),e(Zg,WJ),e(WJ,EYe),e(Zg,yYe),e(Zg,Ak),e(Ak,wYe),e(Zg,AYe),e(E,LYe),e(E,eh),e(eh,QJ),e(QJ,BYe),e(eh,xYe),e(eh,Lk),e(Lk,kYe),e(eh,RYe),e(E,SYe),e(E,ws),e(ws,HJ),e(HJ,PYe),e(ws,$Ye),e(ws,Bk),e(Bk,IYe),e(ws,NYe),e(ws,xk),e(xk,DYe),e(ws,jYe),e(E,qYe),e(E,oh),e(oh,UJ),e(UJ,GYe),e(oh,OYe),e(oh,kk),e(kk,XYe),e(oh,VYe),e(E,zYe),e(E,As),e(As,JJ),e(JJ,WYe),e(As,QYe),e(As,Rk),e(Rk,HYe),e(As,UYe),e(As,Sk),e(Sk,JYe),e(As,YYe),e(E,KYe),e(E,Ls),e(Ls,YJ),e(YJ,ZYe),e(Ls,eKe),e(Ls,Pk),e(Pk,oKe),e(Ls,rKe),e(Ls,$k),e($k,tKe),e(Ls,aKe),e(E,nKe),e(E,Bs),e(Bs,KJ),e(KJ,sKe),e(Bs,lKe),e(Bs,Ik),e(Ik,iKe),e(Bs,dKe),e(Bs,Nk),e(Nk,cKe),e(Bs,mKe),e(E,fKe),e(E,xs),e(xs,ZJ),e(ZJ,gKe),e(xs,hKe),e(xs,Dk),e(Dk,uKe),e(xs,pKe),e(xs,jk),e(jk,_Ke),e(xs,bKe),e(E,vKe),e(E,ks),e(ks,eY),e(eY,TKe),e(ks,FKe),e(ks,qk),e(qk,CKe),e(ks,MKe),e(ks,Gk),e(Gk,EKe),e(ks,yKe),e(E,wKe),e(E,Rs),e(Rs,oY),e(oY,AKe),e(Rs,LKe),e(Rs,Ok),e(Ok,BKe),e(Rs,xKe),e(Rs,Xk),e(Xk,kKe),e(Rs,RKe),e(E,SKe),e(E,rh),e(rh,rY),e(rY,PKe),e(rh,$Ke),e(rh,Vk),e(Vk,IKe),e(rh,NKe),e(E,DKe),e(E,th),e(th,tY),e(tY,jKe),e(th,qKe),e(th,zk),e(zk,GKe),e(th,OKe),e(E,XKe),e(E,Ss),e(Ss,aY),e(aY,VKe),e(Ss,zKe),e(Ss,Wk),e(Wk,WKe),e(Ss,QKe),e(Ss,Qk),e(Qk,HKe),e(Ss,UKe),e(E,JKe),e(E,Ps),e(Ps,nY),e(nY,YKe),e(Ps,KKe),e(Ps,Hk),e(Hk,ZKe),e(Ps,eZe),e(Ps,Uk),e(Uk,oZe),e(Ps,rZe),e(E,tZe),e(E,$s),e($s,sY),e(sY,aZe),e($s,nZe),e($s,Jk),e(Jk,sZe),e($s,lZe),e($s,Yk),e(Yk,iZe),e($s,dZe),e(E,cZe),e(E,ah),e(ah,lY),e(lY,mZe),e(ah,fZe),e(ah,Kk),e(Kk,gZe),e(ah,hZe),e(E,uZe),e(E,nh),e(nh,iY),e(iY,pZe),e(nh,_Ze),e(nh,Zk),e(Zk,bZe),e(nh,vZe),e(E,TZe),e(E,sh),e(sh,dY),e(dY,FZe),e(sh,CZe),e(sh,eR),e(eR,MZe),e(sh,EZe),e(E,yZe),e(E,lh),e(lh,cY),e(cY,wZe),e(lh,AZe),e(lh,oR),e(oR,LZe),e(lh,BZe),e(E,xZe),e(E,Is),e(Is,mY),e(mY,kZe),e(Is,RZe),e(Is,rR),e(rR,SZe),e(Is,PZe),e(Is,tR),e(tR,$Ze),e(Is,IZe),e(E,NZe),e(E,ih),e(ih,fY),e(fY,DZe),e(ih,jZe),e(ih,aR),e(aR,qZe),e(ih,GZe),e(E,OZe),e(E,dh),e(dh,gY),e(gY,XZe),e(dh,VZe),e(dh,nR),e(nR,zZe),e(dh,WZe),e(E,QZe),e(E,Ns),e(Ns,hY),e(hY,HZe),e(Ns,UZe),e(Ns,sR),e(sR,JZe),e(Ns,YZe),e(Ns,lR),e(lR,KZe),e(Ns,ZZe),e(E,eeo),e(E,Ds),e(Ds,uY),e(uY,oeo),e(Ds,reo),e(Ds,iR),e(iR,teo),e(Ds,aeo),e(Ds,dR),e(dR,neo),e(Ds,seo),e(go,leo),e(go,pY),e(pY,ieo),e(go,deo),g(My,go,null),e(Qo,ceo),e(Qo,ch),g(Ey,ch,null),e(ch,meo),e(ch,_Y),e(_Y,feo),b(c,dke,_),b(c,Qi,_),e(Qi,mh),e(mh,bY),g(yy,bY,null),e(Qi,geo),e(Qi,vY),e(vY,heo),b(c,cke,_),b(c,Ho,_),g(wy,Ho,null),e(Ho,ueo),e(Ho,Ay),e(Ay,peo),e(Ay,cR),e(cR,_eo),e(Ay,beo),e(Ho,veo),e(Ho,Ly),e(Ly,Teo),e(Ly,TY),e(TY,Feo),e(Ly,Ceo),e(Ho,Meo),e(Ho,$e),g(By,$e,null),e($e,Eeo),e($e,FY),e(FY,yeo),e($e,weo),e($e,Xa),e(Xa,Aeo),e(Xa,CY),e(CY,Leo),e(Xa,Beo),e(Xa,MY),e(MY,xeo),e(Xa,keo),e(Xa,EY),e(EY,Reo),e(Xa,Seo),e($e,Peo),e($e,re),e(re,fh),e(fh,yY),e(yY,$eo),e(fh,Ieo),e(fh,mR),e(mR,Neo),e(fh,Deo),e(re,jeo),e(re,gh),e(gh,wY),e(wY,qeo),e(gh,Geo),e(gh,fR),e(fR,Oeo),e(gh,Xeo),e(re,Veo),e(re,hh),e(hh,AY),e(AY,zeo),e(hh,Weo),e(hh,gR),e(gR,Qeo),e(hh,Heo),e(re,Ueo),e(re,uh),e(uh,LY),e(LY,Jeo),e(uh,Yeo),e(uh,hR),e(hR,Keo),e(uh,Zeo),e(re,eoo),e(re,ph),e(ph,BY),e(BY,ooo),e(ph,roo),e(ph,uR),e(uR,too),e(ph,aoo),e(re,noo),e(re,_h),e(_h,xY),e(xY,soo),e(_h,loo),e(_h,pR),e(pR,ioo),e(_h,doo),e(re,coo),e(re,bh),e(bh,kY),e(kY,moo),e(bh,foo),e(bh,_R),e(_R,goo),e(bh,hoo),e(re,uoo),e(re,vh),e(vh,RY),e(RY,poo),e(vh,_oo),e(vh,bR),e(bR,boo),e(vh,voo),e(re,Too),e(re,Th),e(Th,SY),e(SY,Foo),e(Th,Coo),e(Th,vR),e(vR,Moo),e(Th,Eoo),e(re,yoo),e(re,Fh),e(Fh,PY),e(PY,woo),e(Fh,Aoo),e(Fh,TR),e(TR,Loo),e(Fh,Boo),e(re,xoo),e(re,Ch),e(Ch,$Y),e($Y,koo),e(Ch,Roo),e(Ch,FR),e(FR,Soo),e(Ch,Poo),e(re,$oo),e(re,Mh),e(Mh,IY),e(IY,Ioo),e(Mh,Noo),e(Mh,CR),e(CR,Doo),e(Mh,joo),e(re,qoo),e(re,Eh),e(Eh,NY),e(NY,Goo),e(Eh,Ooo),e(Eh,MR),e(MR,Xoo),e(Eh,Voo),e(re,zoo),e(re,yh),e(yh,DY),e(DY,Woo),e(yh,Qoo),e(yh,ER),e(ER,Hoo),e(yh,Uoo),e(re,Joo),e(re,wh),e(wh,jY),e(jY,Yoo),e(wh,Koo),e(wh,yR),e(yR,Zoo),e(wh,ero),e(re,oro),e(re,Ah),e(Ah,qY),e(qY,rro),e(Ah,tro),e(Ah,wR),e(wR,aro),e(Ah,nro),e(re,sro),e(re,Lh),e(Lh,GY),e(GY,lro),e(Lh,iro),e(Lh,AR),e(AR,dro),e(Lh,cro),e(re,mro),e(re,Bh),e(Bh,OY),e(OY,fro),e(Bh,gro),e(Bh,LR),e(LR,hro),e(Bh,uro),e($e,pro),g(xh,$e,null),e($e,_ro),e($e,XY),e(XY,bro),e($e,vro),g(xy,$e,null),e(Ho,Tro),e(Ho,kh),g(ky,kh,null),e(kh,Fro),e(kh,VY),e(VY,Cro),b(c,mke,_),b(c,Hi,_),e(Hi,Rh),e(Rh,zY),g(Ry,zY,null),e(Hi,Mro),e(Hi,WY),e(WY,Ero),b(c,fke,_),b(c,Uo,_),g(Sy,Uo,null),e(Uo,yro),e(Uo,Py),e(Py,wro),e(Py,BR),e(BR,Aro),e(Py,Lro),e(Uo,Bro),e(Uo,$y),e($y,xro),e($y,QY),e(QY,kro),e($y,Rro),e(Uo,Sro),e(Uo,Ie),g(Iy,Ie,null),e(Ie,Pro),e(Ie,HY),e(HY,$ro),e(Ie,Iro),e(Ie,Ui),e(Ui,Nro),e(Ui,UY),e(UY,Dro),e(Ui,jro),e(Ui,JY),e(JY,qro),e(Ui,Gro),e(Ie,Oro),e(Ie,xe),e(xe,Sh),e(Sh,YY),e(YY,Xro),e(Sh,Vro),e(Sh,xR),e(xR,zro),e(Sh,Wro),e(xe,Qro),e(xe,Ph),e(Ph,KY),e(KY,Hro),e(Ph,Uro),e(Ph,kR),e(kR,Jro),e(Ph,Yro),e(xe,Kro),e(xe,$h),e($h,ZY),e(ZY,Zro),e($h,eto),e($h,RR),e(RR,oto),e($h,rto),e(xe,tto),e(xe,Ih),e(Ih,eK),e(eK,ato),e(Ih,nto),e(Ih,SR),e(SR,sto),e(Ih,lto),e(xe,ito),e(xe,Nh),e(Nh,oK),e(oK,dto),e(Nh,cto),e(Nh,PR),e(PR,mto),e(Nh,fto),e(xe,gto),e(xe,Dh),e(Dh,rK),e(rK,hto),e(Dh,uto),e(Dh,$R),e($R,pto),e(Dh,_to),e(xe,bto),e(xe,jh),e(jh,tK),e(tK,vto),e(jh,Tto),e(jh,IR),e(IR,Fto),e(jh,Cto),e(xe,Mto),e(xe,qh),e(qh,aK),e(aK,Eto),e(qh,yto),e(qh,NR),e(NR,wto),e(qh,Ato),e(Ie,Lto),g(Gh,Ie,null),e(Ie,Bto),e(Ie,nK),e(nK,xto),e(Ie,kto),g(Ny,Ie,null),e(Uo,Rto),e(Uo,Oh),g(Dy,Oh,null),e(Oh,Sto),e(Oh,sK),e(sK,Pto),b(c,gke,_),b(c,Ji,_),e(Ji,Xh),e(Xh,lK),g(jy,lK,null),e(Ji,$to),e(Ji,iK),e(iK,Ito),b(c,hke,_),b(c,Jo,_),g(qy,Jo,null),e(Jo,Nto),e(Jo,Yi),e(Yi,Dto),e(Yi,dK),e(dK,jto),e(Yi,qto),e(Yi,cK),e(cK,Gto),e(Yi,Oto),e(Jo,Xto),e(Jo,Gy),e(Gy,Vto),e(Gy,mK),e(mK,zto),e(Gy,Wto),e(Jo,Qto),e(Jo,Vr),g(Oy,Vr,null),e(Vr,Hto),e(Vr,fK),e(fK,Uto),e(Vr,Jto),e(Vr,Ki),e(Ki,Yto),e(Ki,gK),e(gK,Kto),e(Ki,Zto),e(Ki,hK),e(hK,eao),e(Ki,oao),e(Vr,rao),e(Vr,uK),e(uK,tao),e(Vr,aao),g(Xy,Vr,null),e(Jo,nao),e(Jo,Ne),g(Vy,Ne,null),e(Ne,sao),e(Ne,pK),e(pK,lao),e(Ne,iao),e(Ne,Va),e(Va,dao),e(Va,_K),e(_K,cao),e(Va,mao),e(Va,bK),e(bK,fao),e(Va,gao),e(Va,vK),e(vK,hao),e(Va,uao),e(Ne,pao),e(Ne,F),e(F,Vh),e(Vh,TK),e(TK,_ao),e(Vh,bao),e(Vh,DR),e(DR,vao),e(Vh,Tao),e(F,Fao),e(F,zh),e(zh,FK),e(FK,Cao),e(zh,Mao),e(zh,jR),e(jR,Eao),e(zh,yao),e(F,wao),e(F,Wh),e(Wh,CK),e(CK,Aao),e(Wh,Lao),e(Wh,qR),e(qR,Bao),e(Wh,xao),e(F,kao),e(F,Qh),e(Qh,MK),e(MK,Rao),e(Qh,Sao),e(Qh,GR),e(GR,Pao),e(Qh,$ao),e(F,Iao),e(F,Hh),e(Hh,EK),e(EK,Nao),e(Hh,Dao),e(Hh,OR),e(OR,jao),e(Hh,qao),e(F,Gao),e(F,Uh),e(Uh,yK),e(yK,Oao),e(Uh,Xao),e(Uh,XR),e(XR,Vao),e(Uh,zao),e(F,Wao),e(F,Jh),e(Jh,wK),e(wK,Qao),e(Jh,Hao),e(Jh,VR),e(VR,Uao),e(Jh,Jao),e(F,Yao),e(F,Yh),e(Yh,AK),e(AK,Kao),e(Yh,Zao),e(Yh,zR),e(zR,eno),e(Yh,ono),e(F,rno),e(F,Kh),e(Kh,LK),e(LK,tno),e(Kh,ano),e(Kh,WR),e(WR,nno),e(Kh,sno),e(F,lno),e(F,Zh),e(Zh,BK),e(BK,ino),e(Zh,dno),e(Zh,QR),e(QR,cno),e(Zh,mno),e(F,fno),e(F,eu),e(eu,xK),e(xK,gno),e(eu,hno),e(eu,HR),e(HR,uno),e(eu,pno),e(F,_no),e(F,ou),e(ou,kK),e(kK,bno),e(ou,vno),e(ou,UR),e(UR,Tno),e(ou,Fno),e(F,Cno),e(F,ru),e(ru,RK),e(RK,Mno),e(ru,Eno),e(ru,JR),e(JR,yno),e(ru,wno),e(F,Ano),e(F,tu),e(tu,SK),e(SK,Lno),e(tu,Bno),e(tu,YR),e(YR,xno),e(tu,kno),e(F,Rno),e(F,au),e(au,PK),e(PK,Sno),e(au,Pno),e(au,KR),e(KR,$no),e(au,Ino),e(F,Nno),e(F,nu),e(nu,$K),e($K,Dno),e(nu,jno),e(nu,ZR),e(ZR,qno),e(nu,Gno),e(F,Ono),e(F,su),e(su,IK),e(IK,Xno),e(su,Vno),e(su,eS),e(eS,zno),e(su,Wno),e(F,Qno),e(F,lu),e(lu,NK),e(NK,Hno),e(lu,Uno),e(lu,oS),e(oS,Jno),e(lu,Yno),e(F,Kno),e(F,iu),e(iu,DK),e(DK,Zno),e(iu,eso),e(iu,rS),e(rS,oso),e(iu,rso),e(F,tso),e(F,du),e(du,jK),e(jK,aso),e(du,nso),e(du,tS),e(tS,sso),e(du,lso),e(F,iso),e(F,cu),e(cu,qK),e(qK,dso),e(cu,cso),e(cu,aS),e(aS,mso),e(cu,fso),e(F,gso),e(F,mu),e(mu,GK),e(GK,hso),e(mu,uso),e(mu,nS),e(nS,pso),e(mu,_so),e(F,bso),e(F,fu),e(fu,OK),e(OK,vso),e(fu,Tso),e(fu,sS),e(sS,Fso),e(fu,Cso),e(F,Mso),e(F,gu),e(gu,XK),e(XK,Eso),e(gu,yso),e(gu,lS),e(lS,wso),e(gu,Aso),e(F,Lso),e(F,hu),e(hu,VK),e(VK,Bso),e(hu,xso),e(hu,iS),e(iS,kso),e(hu,Rso),e(F,Sso),e(F,uu),e(uu,zK),e(zK,Pso),e(uu,$so),e(uu,dS),e(dS,Iso),e(uu,Nso),e(F,Dso),e(F,pu),e(pu,WK),e(WK,jso),e(pu,qso),e(pu,cS),e(cS,Gso),e(pu,Oso),e(F,Xso),e(F,_u),e(_u,QK),e(QK,Vso),e(_u,zso),e(_u,mS),e(mS,Wso),e(_u,Qso),e(F,Hso),e(F,js),e(js,HK),e(HK,Uso),e(js,Jso),e(js,fS),e(fS,Yso),e(js,Kso),e(js,gS),e(gS,Zso),e(js,elo),e(F,olo),e(F,bu),e(bu,UK),e(UK,rlo),e(bu,tlo),e(bu,hS),e(hS,alo),e(bu,nlo),e(F,slo),e(F,vu),e(vu,JK),e(JK,llo),e(vu,ilo),e(vu,uS),e(uS,dlo),e(vu,clo),e(F,mlo),e(F,Tu),e(Tu,YK),e(YK,flo),e(Tu,glo),e(Tu,pS),e(pS,hlo),e(Tu,ulo),e(F,plo),e(F,Fu),e(Fu,KK),e(KK,_lo),e(Fu,blo),e(Fu,_S),e(_S,vlo),e(Fu,Tlo),e(F,Flo),e(F,Cu),e(Cu,ZK),e(ZK,Clo),e(Cu,Mlo),e(Cu,bS),e(bS,Elo),e(Cu,ylo),e(F,wlo),e(F,Mu),e(Mu,eZ),e(eZ,Alo),e(Mu,Llo),e(Mu,vS),e(vS,Blo),e(Mu,xlo),e(F,klo),e(F,Eu),e(Eu,oZ),e(oZ,Rlo),e(Eu,Slo),e(Eu,TS),e(TS,Plo),e(Eu,$lo),e(F,Ilo),e(F,yu),e(yu,rZ),e(rZ,Nlo),e(yu,Dlo),e(yu,FS),e(FS,jlo),e(yu,qlo),e(F,Glo),e(F,wu),e(wu,tZ),e(tZ,Olo),e(wu,Xlo),e(wu,CS),e(CS,Vlo),e(wu,zlo),e(F,Wlo),e(F,Au),e(Au,aZ),e(aZ,Qlo),e(Au,Hlo),e(Au,MS),e(MS,Ulo),e(Au,Jlo),e(F,Ylo),e(F,Lu),e(Lu,nZ),e(nZ,Klo),e(Lu,Zlo),e(Lu,ES),e(ES,eio),e(Lu,oio),e(F,rio),e(F,Bu),e(Bu,sZ),e(sZ,tio),e(Bu,aio),e(Bu,yS),e(yS,nio),e(Bu,sio),e(F,lio),e(F,xu),e(xu,lZ),e(lZ,iio),e(xu,dio),e(xu,wS),e(wS,cio),e(xu,mio),e(F,fio),e(F,ku),e(ku,iZ),e(iZ,gio),e(ku,hio),e(ku,AS),e(AS,uio),e(ku,pio),e(F,_io),e(F,Ru),e(Ru,dZ),e(dZ,bio),e(Ru,vio),e(Ru,LS),e(LS,Tio),e(Ru,Fio),e(F,Cio),e(F,Su),e(Su,cZ),e(cZ,Mio),e(Su,Eio),e(Su,BS),e(BS,yio),e(Su,wio),e(F,Aio),e(F,Pu),e(Pu,mZ),e(mZ,Lio),e(Pu,Bio),e(Pu,xS),e(xS,xio),e(Pu,kio),e(F,Rio),e(F,$u),e($u,fZ),e(fZ,Sio),e($u,Pio),e($u,kS),e(kS,$io),e($u,Iio),e(F,Nio),e(F,Iu),e(Iu,gZ),e(gZ,Dio),e(Iu,jio),e(Iu,RS),e(RS,qio),e(Iu,Gio),e(F,Oio),e(F,Nu),e(Nu,hZ),e(hZ,Xio),e(Nu,Vio),e(Nu,SS),e(SS,zio),e(Nu,Wio),e(F,Qio),e(F,Du),e(Du,uZ),e(uZ,Hio),e(Du,Uio),e(Du,PS),e(PS,Jio),e(Du,Yio),e(F,Kio),e(F,ju),e(ju,pZ),e(pZ,Zio),e(ju,edo),e(ju,$S),e($S,odo),e(ju,rdo),e(F,tdo),e(F,qu),e(qu,_Z),e(_Z,ado),e(qu,ndo),e(qu,IS),e(IS,sdo),e(qu,ldo),e(F,ido),e(F,Gu),e(Gu,bZ),e(bZ,ddo),e(Gu,cdo),e(Gu,NS),e(NS,mdo),e(Gu,fdo),e(F,gdo),e(F,Ou),e(Ou,vZ),e(vZ,hdo),e(Ou,udo),e(Ou,DS),e(DS,pdo),e(Ou,_do),e(F,bdo),e(F,Xu),e(Xu,TZ),e(TZ,vdo),e(Xu,Tdo),e(Xu,jS),e(jS,Fdo),e(Xu,Cdo),e(F,Mdo),e(F,Vu),e(Vu,FZ),e(FZ,Edo),e(Vu,ydo),e(Vu,qS),e(qS,wdo),e(Vu,Ado),e(F,Ldo),e(F,zu),e(zu,CZ),e(CZ,Bdo),e(zu,xdo),e(zu,GS),e(GS,kdo),e(zu,Rdo),e(F,Sdo),e(F,Wu),e(Wu,MZ),e(MZ,Pdo),e(Wu,$do),e(Wu,OS),e(OS,Ido),e(Wu,Ndo),e(F,Ddo),e(F,Qu),e(Qu,EZ),e(EZ,jdo),e(Qu,qdo),e(Qu,XS),e(XS,Gdo),e(Qu,Odo),e(F,Xdo),e(F,Hu),e(Hu,yZ),e(yZ,Vdo),e(Hu,zdo),e(Hu,VS),e(VS,Wdo),e(Hu,Qdo),e(F,Hdo),e(F,Uu),e(Uu,wZ),e(wZ,Udo),e(Uu,Jdo),e(Uu,zS),e(zS,Ydo),e(Uu,Kdo),e(F,Zdo),e(F,Ju),e(Ju,AZ),e(AZ,eco),e(Ju,oco),e(Ju,WS),e(WS,rco),e(Ju,tco),e(F,aco),e(F,Yu),e(Yu,LZ),e(LZ,nco),e(Yu,sco),e(Yu,QS),e(QS,lco),e(Yu,ico),e(F,dco),e(F,Ku),e(Ku,BZ),e(BZ,cco),e(Ku,mco),e(Ku,HS),e(HS,fco),e(Ku,gco),e(F,hco),e(F,Zu),e(Zu,xZ),e(xZ,uco),e(Zu,pco),e(Zu,US),e(US,_co),e(Zu,bco),e(F,vco),e(F,ep),e(ep,kZ),e(kZ,Tco),e(ep,Fco),e(ep,JS),e(JS,Cco),e(ep,Mco),e(F,Eco),e(F,op),e(op,RZ),e(RZ,yco),e(op,wco),e(op,YS),e(YS,Aco),e(op,Lco),e(F,Bco),e(F,rp),e(rp,SZ),e(SZ,xco),e(rp,kco),e(rp,KS),e(KS,Rco),e(rp,Sco),e(F,Pco),e(F,tp),e(tp,PZ),e(PZ,$co),e(tp,Ico),e(tp,ZS),e(ZS,Nco),e(tp,Dco),e(F,jco),e(F,ap),e(ap,$Z),e($Z,qco),e(ap,Gco),e(ap,eP),e(eP,Oco),e(ap,Xco),e(F,Vco),e(F,np),e(np,IZ),e(IZ,zco),e(np,Wco),e(np,oP),e(oP,Qco),e(np,Hco),e(F,Uco),e(F,sp),e(sp,NZ),e(NZ,Jco),e(sp,Yco),e(sp,rP),e(rP,Kco),e(sp,Zco),e(F,emo),e(F,lp),e(lp,DZ),e(DZ,omo),e(lp,rmo),e(lp,tP),e(tP,tmo),e(lp,amo),e(F,nmo),e(F,ip),e(ip,jZ),e(jZ,smo),e(ip,lmo),e(ip,aP),e(aP,imo),e(ip,dmo),e(F,cmo),e(F,dp),e(dp,qZ),e(qZ,mmo),e(dp,fmo),e(dp,nP),e(nP,gmo),e(dp,hmo),e(F,umo),e(F,cp),e(cp,GZ),e(GZ,pmo),e(cp,_mo),e(cp,sP),e(sP,bmo),e(cp,vmo),e(F,Tmo),e(F,mp),e(mp,OZ),e(OZ,Fmo),e(mp,Cmo),e(mp,lP),e(lP,Mmo),e(mp,Emo),e(F,ymo),e(F,fp),e(fp,XZ),e(XZ,wmo),e(fp,Amo),e(fp,iP),e(iP,Lmo),e(fp,Bmo),e(F,xmo),e(F,gp),e(gp,VZ),e(VZ,kmo),e(gp,Rmo),e(gp,dP),e(dP,Smo),e(gp,Pmo),e(F,$mo),e(F,hp),e(hp,zZ),e(zZ,Imo),e(hp,Nmo),e(hp,cP),e(cP,Dmo),e(hp,jmo),e(F,qmo),e(F,up),e(up,WZ),e(WZ,Gmo),e(up,Omo),e(up,mP),e(mP,Xmo),e(up,Vmo),e(F,zmo),e(F,pp),e(pp,QZ),e(QZ,Wmo),e(pp,Qmo),e(pp,fP),e(fP,Hmo),e(pp,Umo),e(F,Jmo),e(F,_p),e(_p,HZ),e(HZ,Ymo),e(_p,Kmo),e(_p,gP),e(gP,Zmo),e(_p,efo),e(F,ofo),e(F,bp),e(bp,UZ),e(UZ,rfo),e(bp,tfo),e(bp,hP),e(hP,afo),e(bp,nfo),e(F,sfo),e(F,vp),e(vp,JZ),e(JZ,lfo),e(vp,ifo),e(vp,uP),e(uP,dfo),e(vp,cfo),e(F,mfo),e(F,Tp),e(Tp,YZ),e(YZ,ffo),e(Tp,gfo),e(Tp,pP),e(pP,hfo),e(Tp,ufo),e(F,pfo),e(F,Fp),e(Fp,KZ),e(KZ,_fo),e(Fp,bfo),e(Fp,_P),e(_P,vfo),e(Fp,Tfo),e(F,Ffo),e(F,Cp),e(Cp,ZZ),e(ZZ,Cfo),e(Cp,Mfo),e(Cp,bP),e(bP,Efo),e(Cp,yfo),e(F,wfo),e(F,Mp),e(Mp,eee),e(eee,Afo),e(Mp,Lfo),e(Mp,vP),e(vP,Bfo),e(Mp,xfo),e(F,kfo),e(F,Ep),e(Ep,oee),e(oee,Rfo),e(Ep,Sfo),e(Ep,TP),e(TP,Pfo),e(Ep,$fo),e(F,Ifo),e(F,yp),e(yp,ree),e(ree,Nfo),e(yp,Dfo),e(yp,FP),e(FP,jfo),e(yp,qfo),e(Ne,Gfo),e(Ne,wp),e(wp,Ofo),e(wp,tee),e(tee,Xfo),e(wp,Vfo),e(wp,aee),e(aee,zfo),e(Ne,Wfo),e(Ne,nee),e(nee,Qfo),e(Ne,Hfo),g(zy,Ne,null),b(c,uke,_),b(c,Zi,_),e(Zi,Ap),e(Ap,see),g(Wy,see,null),e(Zi,Ufo),e(Zi,lee),e(lee,Jfo),b(c,pke,_),b(c,Yo,_),g(Qy,Yo,null),e(Yo,Yfo),e(Yo,ed),e(ed,Kfo),e(ed,iee),e(iee,Zfo),e(ed,ego),e(ed,dee),e(dee,ogo),e(ed,rgo),e(Yo,tgo),e(Yo,Hy),e(Hy,ago),e(Hy,cee),e(cee,ngo),e(Hy,sgo),e(Yo,lgo),e(Yo,zr),g(Uy,zr,null),e(zr,igo),e(zr,mee),e(mee,dgo),e(zr,cgo),e(zr,od),e(od,mgo),e(od,fee),e(fee,fgo),e(od,ggo),e(od,gee),e(gee,hgo),e(od,ugo),e(zr,pgo),e(zr,hee),e(hee,_go),e(zr,bgo),g(Jy,zr,null),e(Yo,vgo),e(Yo,De),g(Yy,De,null),e(De,Tgo),e(De,uee),e(uee,Fgo),e(De,Cgo),e(De,za),e(za,Mgo),e(za,pee),e(pee,Ego),e(za,ygo),e(za,_ee),e(_ee,wgo),e(za,Ago),e(za,bee),e(bee,Lgo),e(za,Bgo),e(De,xgo),e(De,k),e(k,Lp),e(Lp,vee),e(vee,kgo),e(Lp,Rgo),e(Lp,CP),e(CP,Sgo),e(Lp,Pgo),e(k,$go),e(k,Bp),e(Bp,Tee),e(Tee,Igo),e(Bp,Ngo),e(Bp,MP),e(MP,Dgo),e(Bp,jgo),e(k,qgo),e(k,xp),e(xp,Fee),e(Fee,Ggo),e(xp,Ogo),e(xp,EP),e(EP,Xgo),e(xp,Vgo),e(k,zgo),e(k,kp),e(kp,Cee),e(Cee,Wgo),e(kp,Qgo),e(kp,yP),e(yP,Hgo),e(kp,Ugo),e(k,Jgo),e(k,Rp),e(Rp,Mee),e(Mee,Ygo),e(Rp,Kgo),e(Rp,wP),e(wP,Zgo),e(Rp,eho),e(k,oho),e(k,Sp),e(Sp,Eee),e(Eee,rho),e(Sp,tho),e(Sp,AP),e(AP,aho),e(Sp,nho),e(k,sho),e(k,Pp),e(Pp,yee),e(yee,lho),e(Pp,iho),e(Pp,LP),e(LP,dho),e(Pp,cho),e(k,mho),e(k,$p),e($p,wee),e(wee,fho),e($p,gho),e($p,BP),e(BP,hho),e($p,uho),e(k,pho),e(k,Ip),e(Ip,Aee),e(Aee,_ho),e(Ip,bho),e(Ip,xP),e(xP,vho),e(Ip,Tho),e(k,Fho),e(k,Np),e(Np,Lee),e(Lee,Cho),e(Np,Mho),e(Np,kP),e(kP,Eho),e(Np,yho),e(k,who),e(k,Dp),e(Dp,Bee),e(Bee,Aho),e(Dp,Lho),e(Dp,RP),e(RP,Bho),e(Dp,xho),e(k,kho),e(k,jp),e(jp,xee),e(xee,Rho),e(jp,Sho),e(jp,SP),e(SP,Pho),e(jp,$ho),e(k,Iho),e(k,qp),e(qp,kee),e(kee,Nho),e(qp,Dho),e(qp,PP),e(PP,jho),e(qp,qho),e(k,Gho),e(k,Gp),e(Gp,Ree),e(Ree,Oho),e(Gp,Xho),e(Gp,$P),e($P,Vho),e(Gp,zho),e(k,Who),e(k,Op),e(Op,See),e(See,Qho),e(Op,Hho),e(Op,IP),e(IP,Uho),e(Op,Jho),e(k,Yho),e(k,Xp),e(Xp,Pee),e(Pee,Kho),e(Xp,Zho),e(Xp,NP),e(NP,euo),e(Xp,ouo),e(k,ruo),e(k,Vp),e(Vp,$ee),e($ee,tuo),e(Vp,auo),e(Vp,DP),e(DP,nuo),e(Vp,suo),e(k,luo),e(k,zp),e(zp,Iee),e(Iee,iuo),e(zp,duo),e(zp,jP),e(jP,cuo),e(zp,muo),e(k,fuo),e(k,Wp),e(Wp,Nee),e(Nee,guo),e(Wp,huo),e(Wp,qP),e(qP,uuo),e(Wp,puo),e(k,_uo),e(k,Qp),e(Qp,Dee),e(Dee,buo),e(Qp,vuo),e(Qp,GP),e(GP,Tuo),e(Qp,Fuo),e(k,Cuo),e(k,Hp),e(Hp,jee),e(jee,Muo),e(Hp,Euo),e(Hp,OP),e(OP,yuo),e(Hp,wuo),e(k,Auo),e(k,Up),e(Up,qee),e(qee,Luo),e(Up,Buo),e(Up,XP),e(XP,xuo),e(Up,kuo),e(k,Ruo),e(k,Jp),e(Jp,Gee),e(Gee,Suo),e(Jp,Puo),e(Jp,VP),e(VP,$uo),e(Jp,Iuo),e(k,Nuo),e(k,Yp),e(Yp,Oee),e(Oee,Duo),e(Yp,juo),e(Yp,zP),e(zP,quo),e(Yp,Guo),e(k,Ouo),e(k,Kp),e(Kp,Xee),e(Xee,Xuo),e(Kp,Vuo),e(Kp,WP),e(WP,zuo),e(Kp,Wuo),e(k,Quo),e(k,Zp),e(Zp,Vee),e(Vee,Huo),e(Zp,Uuo),e(Zp,QP),e(QP,Juo),e(Zp,Yuo),e(k,Kuo),e(k,e_),e(e_,zee),e(zee,Zuo),e(e_,epo),e(e_,HP),e(HP,opo),e(e_,rpo),e(k,tpo),e(k,o_),e(o_,Wee),e(Wee,apo),e(o_,npo),e(o_,UP),e(UP,spo),e(o_,lpo),e(k,ipo),e(k,r_),e(r_,Qee),e(Qee,dpo),e(r_,cpo),e(r_,JP),e(JP,mpo),e(r_,fpo),e(k,gpo),e(k,t_),e(t_,Hee),e(Hee,hpo),e(t_,upo),e(t_,YP),e(YP,ppo),e(t_,_po),e(k,bpo),e(k,a_),e(a_,Uee),e(Uee,vpo),e(a_,Tpo),e(a_,KP),e(KP,Fpo),e(a_,Cpo),e(k,Mpo),e(k,n_),e(n_,Jee),e(Jee,Epo),e(n_,ypo),e(n_,ZP),e(ZP,wpo),e(n_,Apo),e(k,Lpo),e(k,s_),e(s_,Yee),e(Yee,Bpo),e(s_,xpo),e(s_,e$),e(e$,kpo),e(s_,Rpo),e(k,Spo),e(k,l_),e(l_,Kee),e(Kee,Ppo),e(l_,$po),e(l_,o$),e(o$,Ipo),e(l_,Npo),e(k,Dpo),e(k,i_),e(i_,Zee),e(Zee,jpo),e(i_,qpo),e(i_,r$),e(r$,Gpo),e(i_,Opo),e(k,Xpo),e(k,d_),e(d_,eoe),e(eoe,Vpo),e(d_,zpo),e(d_,t$),e(t$,Wpo),e(d_,Qpo),e(k,Hpo),e(k,c_),e(c_,ooe),e(ooe,Upo),e(c_,Jpo),e(c_,a$),e(a$,Ypo),e(c_,Kpo),e(k,Zpo),e(k,m_),e(m_,roe),e(roe,e_o),e(m_,o_o),e(m_,n$),e(n$,r_o),e(m_,t_o),e(k,a_o),e(k,f_),e(f_,toe),e(toe,n_o),e(f_,s_o),e(f_,s$),e(s$,l_o),e(f_,i_o),e(De,d_o),e(De,g_),e(g_,c_o),e(g_,aoe),e(aoe,m_o),e(g_,f_o),e(g_,noe),e(noe,g_o),e(De,h_o),e(De,soe),e(soe,u_o),e(De,p_o),g(Ky,De,null),b(c,_ke,_),b(c,rd,_),e(rd,h_),e(h_,loe),g(Zy,loe,null),e(rd,__o),e(rd,ioe),e(ioe,b_o),b(c,bke,_),b(c,Ko,_),g(ew,Ko,null),e(Ko,v_o),e(Ko,td),e(td,T_o),e(td,doe),e(doe,F_o),e(td,C_o),e(td,coe),e(coe,M_o),e(td,E_o),e(Ko,y_o),e(Ko,ow),e(ow,w_o),e(ow,moe),e(moe,A_o),e(ow,L_o),e(Ko,B_o),e(Ko,Wr),g(rw,Wr,null),e(Wr,x_o),e(Wr,foe),e(foe,k_o),e(Wr,R_o),e(Wr,ad),e(ad,S_o),e(ad,goe),e(goe,P_o),e(ad,$_o),e(ad,hoe),e(hoe,I_o),e(ad,N_o),e(Wr,D_o),e(Wr,uoe),e(uoe,j_o),e(Wr,q_o),g(tw,Wr,null),e(Ko,G_o),e(Ko,je),g(aw,je,null),e(je,O_o),e(je,poe),e(poe,X_o),e(je,V_o),e(je,Wa),e(Wa,z_o),e(Wa,_oe),e(_oe,W_o),e(Wa,Q_o),e(Wa,boe),e(boe,H_o),e(Wa,U_o),e(Wa,voe),e(voe,J_o),e(Wa,Y_o),e(je,K_o),e(je,$),e($,u_),e(u_,Toe),e(Toe,Z_o),e(u_,ebo),e(u_,l$),e(l$,obo),e(u_,rbo),e($,tbo),e($,p_),e(p_,Foe),e(Foe,abo),e(p_,nbo),e(p_,i$),e(i$,sbo),e(p_,lbo),e($,ibo),e($,__),e(__,Coe),e(Coe,dbo),e(__,cbo),e(__,d$),e(d$,mbo),e(__,fbo),e($,gbo),e($,b_),e(b_,Moe),e(Moe,hbo),e(b_,ubo),e(b_,c$),e(c$,pbo),e(b_,_bo),e($,bbo),e($,v_),e(v_,Eoe),e(Eoe,vbo),e(v_,Tbo),e(v_,m$),e(m$,Fbo),e(v_,Cbo),e($,Mbo),e($,T_),e(T_,yoe),e(yoe,Ebo),e(T_,ybo),e(T_,f$),e(f$,wbo),e(T_,Abo),e($,Lbo),e($,F_),e(F_,woe),e(woe,Bbo),e(F_,xbo),e(F_,g$),e(g$,kbo),e(F_,Rbo),e($,Sbo),e($,C_),e(C_,Aoe),e(Aoe,Pbo),e(C_,$bo),e(C_,h$),e(h$,Ibo),e(C_,Nbo),e($,Dbo),e($,M_),e(M_,Loe),e(Loe,jbo),e(M_,qbo),e(M_,u$),e(u$,Gbo),e(M_,Obo),e($,Xbo),e($,E_),e(E_,Boe),e(Boe,Vbo),e(E_,zbo),e(E_,p$),e(p$,Wbo),e(E_,Qbo),e($,Hbo),e($,y_),e(y_,xoe),e(xoe,Ubo),e(y_,Jbo),e(y_,_$),e(_$,Ybo),e(y_,Kbo),e($,Zbo),e($,w_),e(w_,koe),e(koe,e2o),e(w_,o2o),e(w_,b$),e(b$,r2o),e(w_,t2o),e($,a2o),e($,A_),e(A_,Roe),e(Roe,n2o),e(A_,s2o),e(A_,v$),e(v$,l2o),e(A_,i2o),e($,d2o),e($,L_),e(L_,Soe),e(Soe,c2o),e(L_,m2o),e(L_,T$),e(T$,f2o),e(L_,g2o),e($,h2o),e($,B_),e(B_,Poe),e(Poe,u2o),e(B_,p2o),e(B_,F$),e(F$,_2o),e(B_,b2o),e($,v2o),e($,x_),e(x_,$oe),e($oe,T2o),e(x_,F2o),e(x_,C$),e(C$,C2o),e(x_,M2o),e($,E2o),e($,k_),e(k_,Ioe),e(Ioe,y2o),e(k_,w2o),e(k_,M$),e(M$,A2o),e(k_,L2o),e($,B2o),e($,R_),e(R_,Noe),e(Noe,x2o),e(R_,k2o),e(R_,E$),e(E$,R2o),e(R_,S2o),e($,P2o),e($,S_),e(S_,Doe),e(Doe,$2o),e(S_,I2o),e(S_,y$),e(y$,N2o),e(S_,D2o),e($,j2o),e($,P_),e(P_,joe),e(joe,q2o),e(P_,G2o),e(P_,w$),e(w$,O2o),e(P_,X2o),e($,V2o),e($,$_),e($_,qoe),e(qoe,z2o),e($_,W2o),e($_,A$),e(A$,Q2o),e($_,H2o),e($,U2o),e($,I_),e(I_,Goe),e(Goe,J2o),e(I_,Y2o),e(I_,L$),e(L$,K2o),e(I_,Z2o),e($,evo),e($,N_),e(N_,Ooe),e(Ooe,ovo),e(N_,rvo),e(N_,B$),e(B$,tvo),e(N_,avo),e($,nvo),e($,D_),e(D_,Xoe),e(Xoe,svo),e(D_,lvo),e(D_,x$),e(x$,ivo),e(D_,dvo),e($,cvo),e($,j_),e(j_,Voe),e(Voe,mvo),e(j_,fvo),e(j_,k$),e(k$,gvo),e(j_,hvo),e($,uvo),e($,q_),e(q_,zoe),e(zoe,pvo),e(q_,_vo),e(q_,R$),e(R$,bvo),e(q_,vvo),e($,Tvo),e($,G_),e(G_,Woe),e(Woe,Fvo),e(G_,Cvo),e(G_,S$),e(S$,Mvo),e(G_,Evo),e($,yvo),e($,O_),e(O_,Qoe),e(Qoe,wvo),e(O_,Avo),e(O_,P$),e(P$,Lvo),e(O_,Bvo),e($,xvo),e($,X_),e(X_,Hoe),e(Hoe,kvo),e(X_,Rvo),e(X_,$$),e($$,Svo),e(X_,Pvo),e($,$vo),e($,V_),e(V_,Uoe),e(Uoe,Ivo),e(V_,Nvo),e(V_,I$),e(I$,Dvo),e(V_,jvo),e($,qvo),e($,z_),e(z_,Joe),e(Joe,Gvo),e(z_,Ovo),e(z_,N$),e(N$,Xvo),e(z_,Vvo),e($,zvo),e($,W_),e(W_,Yoe),e(Yoe,Wvo),e(W_,Qvo),e(W_,D$),e(D$,Hvo),e(W_,Uvo),e($,Jvo),e($,Q_),e(Q_,Koe),e(Koe,Yvo),e(Q_,Kvo),e(Q_,j$),e(j$,Zvo),e(Q_,eTo),e($,oTo),e($,H_),e(H_,Zoe),e(Zoe,rTo),e(H_,tTo),e(H_,q$),e(q$,aTo),e(H_,nTo),e($,sTo),e($,U_),e(U_,ere),e(ere,lTo),e(U_,iTo),e(U_,G$),e(G$,dTo),e(U_,cTo),e(je,mTo),e(je,J_),e(J_,fTo),e(J_,ore),e(ore,gTo),e(J_,hTo),e(J_,rre),e(rre,uTo),e(je,pTo),e(je,tre),e(tre,_To),e(je,bTo),g(nw,je,null),b(c,vke,_),b(c,nd,_),e(nd,Y_),e(Y_,are),g(sw,are,null),e(nd,vTo),e(nd,nre),e(nre,TTo),b(c,Tke,_),b(c,Zo,_),g(lw,Zo,null),e(Zo,FTo),e(Zo,sd),e(sd,CTo),e(sd,sre),e(sre,MTo),e(sd,ETo),e(sd,lre),e(lre,yTo),e(sd,wTo),e(Zo,ATo),e(Zo,iw),e(iw,LTo),e(iw,ire),e(ire,BTo),e(iw,xTo),e(Zo,kTo),e(Zo,Qr),g(dw,Qr,null),e(Qr,RTo),e(Qr,dre),e(dre,STo),e(Qr,PTo),e(Qr,ld),e(ld,$To),e(ld,cre),e(cre,ITo),e(ld,NTo),e(ld,mre),e(mre,DTo),e(ld,jTo),e(Qr,qTo),e(Qr,fre),e(fre,GTo),e(Qr,OTo),g(cw,Qr,null),e(Zo,XTo),e(Zo,qe),g(mw,qe,null),e(qe,VTo),e(qe,gre),e(gre,zTo),e(qe,WTo),e(qe,Qa),e(Qa,QTo),e(Qa,hre),e(hre,HTo),e(Qa,UTo),e(Qa,ure),e(ure,JTo),e(Qa,YTo),e(Qa,pre),e(pre,KTo),e(Qa,ZTo),e(qe,e1o),e(qe,I),e(I,K_),e(K_,_re),e(_re,o1o),e(K_,r1o),e(K_,O$),e(O$,t1o),e(K_,a1o),e(I,n1o),e(I,Z_),e(Z_,bre),e(bre,s1o),e(Z_,l1o),e(Z_,X$),e(X$,i1o),e(Z_,d1o),e(I,c1o),e(I,eb),e(eb,vre),e(vre,m1o),e(eb,f1o),e(eb,V$),e(V$,g1o),e(eb,h1o),e(I,u1o),e(I,ob),e(ob,Tre),e(Tre,p1o),e(ob,_1o),e(ob,z$),e(z$,b1o),e(ob,v1o),e(I,T1o),e(I,rb),e(rb,Fre),e(Fre,F1o),e(rb,C1o),e(rb,W$),e(W$,M1o),e(rb,E1o),e(I,y1o),e(I,tb),e(tb,Cre),e(Cre,w1o),e(tb,A1o),e(tb,Q$),e(Q$,L1o),e(tb,B1o),e(I,x1o),e(I,ab),e(ab,Mre),e(Mre,k1o),e(ab,R1o),e(ab,H$),e(H$,S1o),e(ab,P1o),e(I,$1o),e(I,nb),e(nb,Ere),e(Ere,I1o),e(nb,N1o),e(nb,U$),e(U$,D1o),e(nb,j1o),e(I,q1o),e(I,sb),e(sb,yre),e(yre,G1o),e(sb,O1o),e(sb,J$),e(J$,X1o),e(sb,V1o),e(I,z1o),e(I,lb),e(lb,wre),e(wre,W1o),e(lb,Q1o),e(lb,Y$),e(Y$,H1o),e(lb,U1o),e(I,J1o),e(I,ib),e(ib,Are),e(Are,Y1o),e(ib,K1o),e(ib,K$),e(K$,Z1o),e(ib,eFo),e(I,oFo),e(I,db),e(db,Lre),e(Lre,rFo),e(db,tFo),e(db,Z$),e(Z$,aFo),e(db,nFo),e(I,sFo),e(I,cb),e(cb,Bre),e(Bre,lFo),e(cb,iFo),e(cb,eI),e(eI,dFo),e(cb,cFo),e(I,mFo),e(I,mb),e(mb,xre),e(xre,fFo),e(mb,gFo),e(mb,oI),e(oI,hFo),e(mb,uFo),e(I,pFo),e(I,fb),e(fb,kre),e(kre,_Fo),e(fb,bFo),e(fb,rI),e(rI,vFo),e(fb,TFo),e(I,FFo),e(I,gb),e(gb,Rre),e(Rre,CFo),e(gb,MFo),e(gb,tI),e(tI,EFo),e(gb,yFo),e(I,wFo),e(I,hb),e(hb,Sre),e(Sre,AFo),e(hb,LFo),e(hb,aI),e(aI,BFo),e(hb,xFo),e(I,kFo),e(I,ub),e(ub,Pre),e(Pre,RFo),e(ub,SFo),e(ub,nI),e(nI,PFo),e(ub,$Fo),e(I,IFo),e(I,pb),e(pb,$re),e($re,NFo),e(pb,DFo),e(pb,sI),e(sI,jFo),e(pb,qFo),e(I,GFo),e(I,_b),e(_b,Ire),e(Ire,OFo),e(_b,XFo),e(_b,lI),e(lI,VFo),e(_b,zFo),e(I,WFo),e(I,bb),e(bb,Nre),e(Nre,QFo),e(bb,HFo),e(bb,iI),e(iI,UFo),e(bb,JFo),e(I,YFo),e(I,vb),e(vb,Dre),e(Dre,KFo),e(vb,ZFo),e(vb,dI),e(dI,eCo),e(vb,oCo),e(I,rCo),e(I,Tb),e(Tb,jre),e(jre,tCo),e(Tb,aCo),e(Tb,cI),e(cI,nCo),e(Tb,sCo),e(I,lCo),e(I,Fb),e(Fb,qre),e(qre,iCo),e(Fb,dCo),e(Fb,mI),e(mI,cCo),e(Fb,mCo),e(I,fCo),e(I,Cb),e(Cb,Gre),e(Gre,gCo),e(Cb,hCo),e(Cb,fI),e(fI,uCo),e(Cb,pCo),e(I,_Co),e(I,Mb),e(Mb,Ore),e(Ore,bCo),e(Mb,vCo),e(Mb,gI),e(gI,TCo),e(Mb,FCo),e(I,CCo),e(I,Eb),e(Eb,Xre),e(Xre,MCo),e(Eb,ECo),e(Eb,hI),e(hI,yCo),e(Eb,wCo),e(I,ACo),e(I,yb),e(yb,Vre),e(Vre,LCo),e(yb,BCo),e(yb,uI),e(uI,xCo),e(yb,kCo),e(I,RCo),e(I,wb),e(wb,zre),e(zre,SCo),e(wb,PCo),e(wb,pI),e(pI,$Co),e(wb,ICo),e(I,NCo),e(I,Ab),e(Ab,Wre),e(Wre,DCo),e(Ab,jCo),e(Ab,_I),e(_I,qCo),e(Ab,GCo),e(I,OCo),e(I,Lb),e(Lb,Qre),e(Qre,XCo),e(Lb,VCo),e(Lb,Hre),e(Hre,zCo),e(Lb,WCo),e(I,QCo),e(I,Bb),e(Bb,Ure),e(Ure,HCo),e(Bb,UCo),e(Bb,bI),e(bI,JCo),e(Bb,YCo),e(I,KCo),e(I,xb),e(xb,Jre),e(Jre,ZCo),e(xb,eMo),e(xb,vI),e(vI,oMo),e(xb,rMo),e(I,tMo),e(I,kb),e(kb,Yre),e(Yre,aMo),e(kb,nMo),e(kb,TI),e(TI,sMo),e(kb,lMo),e(I,iMo),e(I,Rb),e(Rb,Kre),e(Kre,dMo),e(Rb,cMo),e(Rb,FI),e(FI,mMo),e(Rb,fMo),e(qe,gMo),e(qe,Sb),e(Sb,hMo),e(Sb,Zre),e(Zre,uMo),e(Sb,pMo),e(Sb,ete),e(ete,_Mo),e(qe,bMo),e(qe,ote),e(ote,vMo),e(qe,TMo),g(fw,qe,null),b(c,Fke,_),b(c,id,_),e(id,Pb),e(Pb,rte),g(gw,rte,null),e(id,FMo),e(id,tte),e(tte,CMo),b(c,Cke,_),b(c,er,_),g(hw,er,null),e(er,MMo),e(er,dd),e(dd,EMo),e(dd,ate),e(ate,yMo),e(dd,wMo),e(dd,nte),e(nte,AMo),e(dd,LMo),e(er,BMo),e(er,uw),e(uw,xMo),e(uw,ste),e(ste,kMo),e(uw,RMo),e(er,SMo),e(er,Hr),g(pw,Hr,null),e(Hr,PMo),e(Hr,lte),e(lte,$Mo),e(Hr,IMo),e(Hr,cd),e(cd,NMo),e(cd,ite),e(ite,DMo),e(cd,jMo),e(cd,dte),e(dte,qMo),e(cd,GMo),e(Hr,OMo),e(Hr,cte),e(cte,XMo),e(Hr,VMo),g(_w,Hr,null),e(er,zMo),e(er,Ge),g(bw,Ge,null),e(Ge,WMo),e(Ge,mte),e(mte,QMo),e(Ge,HMo),e(Ge,Ha),e(Ha,UMo),e(Ha,fte),e(fte,JMo),e(Ha,YMo),e(Ha,gte),e(gte,KMo),e(Ha,ZMo),e(Ha,hte),e(hte,e4o),e(Ha,o4o),e(Ge,r4o),e(Ge,se),e(se,$b),e($b,ute),e(ute,t4o),e($b,a4o),e($b,CI),e(CI,n4o),e($b,s4o),e(se,l4o),e(se,Ib),e(Ib,pte),e(pte,i4o),e(Ib,d4o),e(Ib,MI),e(MI,c4o),e(Ib,m4o),e(se,f4o),e(se,Nb),e(Nb,_te),e(_te,g4o),e(Nb,h4o),e(Nb,EI),e(EI,u4o),e(Nb,p4o),e(se,_4o),e(se,Db),e(Db,bte),e(bte,b4o),e(Db,v4o),e(Db,yI),e(yI,T4o),e(Db,F4o),e(se,C4o),e(se,jb),e(jb,vte),e(vte,M4o),e(jb,E4o),e(jb,wI),e(wI,y4o),e(jb,w4o),e(se,A4o),e(se,qb),e(qb,Tte),e(Tte,L4o),e(qb,B4o),e(qb,AI),e(AI,x4o),e(qb,k4o),e(se,R4o),e(se,Gb),e(Gb,Fte),e(Fte,S4o),e(Gb,P4o),e(Gb,LI),e(LI,$4o),e(Gb,I4o),e(se,N4o),e(se,Ob),e(Ob,Cte),e(Cte,D4o),e(Ob,j4o),e(Ob,BI),e(BI,q4o),e(Ob,G4o),e(se,O4o),e(se,Xb),e(Xb,Mte),e(Mte,X4o),e(Xb,V4o),e(Xb,xI),e(xI,z4o),e(Xb,W4o),e(se,Q4o),e(se,Vb),e(Vb,Ete),e(Ete,H4o),e(Vb,U4o),e(Vb,kI),e(kI,J4o),e(Vb,Y4o),e(se,K4o),e(se,zb),e(zb,yte),e(yte,Z4o),e(zb,eEo),e(zb,RI),e(RI,oEo),e(zb,rEo),e(se,tEo),e(se,Wb),e(Wb,wte),e(wte,aEo),e(Wb,nEo),e(Wb,SI),e(SI,sEo),e(Wb,lEo),e(se,iEo),e(se,Qb),e(Qb,Ate),e(Ate,dEo),e(Qb,cEo),e(Qb,PI),e(PI,mEo),e(Qb,fEo),e(se,gEo),e(se,Hb),e(Hb,Lte),e(Lte,hEo),e(Hb,uEo),e(Hb,$I),e($I,pEo),e(Hb,_Eo),e(se,bEo),e(se,Ub),e(Ub,Bte),e(Bte,vEo),e(Ub,TEo),e(Ub,II),e(II,FEo),e(Ub,CEo),e(se,MEo),e(se,Jb),e(Jb,xte),e(xte,EEo),e(Jb,yEo),e(Jb,NI),e(NI,wEo),e(Jb,AEo),e(Ge,LEo),e(Ge,Yb),e(Yb,BEo),e(Yb,kte),e(kte,xEo),e(Yb,kEo),e(Yb,Rte),e(Rte,REo),e(Ge,SEo),e(Ge,Ste),e(Ste,PEo),e(Ge,$Eo),g(vw,Ge,null),b(c,Mke,_),b(c,md,_),e(md,Kb),e(Kb,Pte),g(Tw,Pte,null),e(md,IEo),e(md,$te),e($te,NEo),b(c,Eke,_),b(c,or,_),g(Fw,or,null),e(or,DEo),e(or,fd),e(fd,jEo),e(fd,Ite),e(Ite,qEo),e(fd,GEo),e(fd,Nte),e(Nte,OEo),e(fd,XEo),e(or,VEo),e(or,Cw),e(Cw,zEo),e(Cw,Dte),e(Dte,WEo),e(Cw,QEo),e(or,HEo),e(or,Ur),g(Mw,Ur,null),e(Ur,UEo),e(Ur,jte),e(jte,JEo),e(Ur,YEo),e(Ur,gd),e(gd,KEo),e(gd,qte),e(qte,ZEo),e(gd,e3o),e(gd,Gte),e(Gte,o3o),e(gd,r3o),e(Ur,t3o),e(Ur,Ote),e(Ote,a3o),e(Ur,n3o),g(Ew,Ur,null),e(or,s3o),e(or,Oe),g(yw,Oe,null),e(Oe,l3o),e(Oe,Xte),e(Xte,i3o),e(Oe,d3o),e(Oe,Ua),e(Ua,c3o),e(Ua,Vte),e(Vte,m3o),e(Ua,f3o),e(Ua,zte),e(zte,g3o),e(Ua,h3o),e(Ua,Wte),e(Wte,u3o),e(Ua,p3o),e(Oe,_3o),e(Oe,A),e(A,Zb),e(Zb,Qte),e(Qte,b3o),e(Zb,v3o),e(Zb,DI),e(DI,T3o),e(Zb,F3o),e(A,C3o),e(A,e2),e(e2,Hte),e(Hte,M3o),e(e2,E3o),e(e2,jI),e(jI,y3o),e(e2,w3o),e(A,A3o),e(A,o2),e(o2,Ute),e(Ute,L3o),e(o2,B3o),e(o2,qI),e(qI,x3o),e(o2,k3o),e(A,R3o),e(A,r2),e(r2,Jte),e(Jte,S3o),e(r2,P3o),e(r2,GI),e(GI,$3o),e(r2,I3o),e(A,N3o),e(A,t2),e(t2,Yte),e(Yte,D3o),e(t2,j3o),e(t2,OI),e(OI,q3o),e(t2,G3o),e(A,O3o),e(A,a2),e(a2,Kte),e(Kte,X3o),e(a2,V3o),e(a2,XI),e(XI,z3o),e(a2,W3o),e(A,Q3o),e(A,n2),e(n2,Zte),e(Zte,H3o),e(n2,U3o),e(n2,VI),e(VI,J3o),e(n2,Y3o),e(A,K3o),e(A,s2),e(s2,eae),e(eae,Z3o),e(s2,e5o),e(s2,zI),e(zI,o5o),e(s2,r5o),e(A,t5o),e(A,l2),e(l2,oae),e(oae,a5o),e(l2,n5o),e(l2,WI),e(WI,s5o),e(l2,l5o),e(A,i5o),e(A,i2),e(i2,rae),e(rae,d5o),e(i2,c5o),e(i2,QI),e(QI,m5o),e(i2,f5o),e(A,g5o),e(A,d2),e(d2,tae),e(tae,h5o),e(d2,u5o),e(d2,HI),e(HI,p5o),e(d2,_5o),e(A,b5o),e(A,c2),e(c2,aae),e(aae,v5o),e(c2,T5o),e(c2,UI),e(UI,F5o),e(c2,C5o),e(A,M5o),e(A,m2),e(m2,nae),e(nae,E5o),e(m2,y5o),e(m2,JI),e(JI,w5o),e(m2,A5o),e(A,L5o),e(A,f2),e(f2,sae),e(sae,B5o),e(f2,x5o),e(f2,YI),e(YI,k5o),e(f2,R5o),e(A,S5o),e(A,g2),e(g2,lae),e(lae,P5o),e(g2,$5o),e(g2,KI),e(KI,I5o),e(g2,N5o),e(A,D5o),e(A,h2),e(h2,iae),e(iae,j5o),e(h2,q5o),e(h2,ZI),e(ZI,G5o),e(h2,O5o),e(A,X5o),e(A,u2),e(u2,dae),e(dae,V5o),e(u2,z5o),e(u2,eN),e(eN,W5o),e(u2,Q5o),e(A,H5o),e(A,p2),e(p2,cae),e(cae,U5o),e(p2,J5o),e(p2,oN),e(oN,Y5o),e(p2,K5o),e(A,Z5o),e(A,_2),e(_2,mae),e(mae,eyo),e(_2,oyo),e(_2,rN),e(rN,ryo),e(_2,tyo),e(A,ayo),e(A,b2),e(b2,fae),e(fae,nyo),e(b2,syo),e(b2,tN),e(tN,lyo),e(b2,iyo),e(A,dyo),e(A,v2),e(v2,gae),e(gae,cyo),e(v2,myo),e(v2,aN),e(aN,fyo),e(v2,gyo),e(A,hyo),e(A,T2),e(T2,hae),e(hae,uyo),e(T2,pyo),e(T2,nN),e(nN,_yo),e(T2,byo),e(A,vyo),e(A,F2),e(F2,uae),e(uae,Tyo),e(F2,Fyo),e(F2,sN),e(sN,Cyo),e(F2,Myo),e(A,Eyo),e(A,C2),e(C2,pae),e(pae,yyo),e(C2,wyo),e(C2,lN),e(lN,Ayo),e(C2,Lyo),e(A,Byo),e(A,M2),e(M2,_ae),e(_ae,xyo),e(M2,kyo),e(M2,iN),e(iN,Ryo),e(M2,Syo),e(A,Pyo),e(A,E2),e(E2,bae),e(bae,$yo),e(E2,Iyo),e(E2,dN),e(dN,Nyo),e(E2,Dyo),e(A,jyo),e(A,y2),e(y2,vae),e(vae,qyo),e(y2,Gyo),e(y2,cN),e(cN,Oyo),e(y2,Xyo),e(A,Vyo),e(A,w2),e(w2,Tae),e(Tae,zyo),e(w2,Wyo),e(w2,mN),e(mN,Qyo),e(w2,Hyo),e(A,Uyo),e(A,A2),e(A2,Fae),e(Fae,Jyo),e(A2,Yyo),e(A2,fN),e(fN,Kyo),e(A2,Zyo),e(A,ewo),e(A,L2),e(L2,Cae),e(Cae,owo),e(L2,rwo),e(L2,gN),e(gN,two),e(L2,awo),e(A,nwo),e(A,B2),e(B2,Mae),e(Mae,swo),e(B2,lwo),e(B2,hN),e(hN,iwo),e(B2,dwo),e(A,cwo),e(A,x2),e(x2,Eae),e(Eae,mwo),e(x2,fwo),e(x2,uN),e(uN,gwo),e(x2,hwo),e(A,uwo),e(A,k2),e(k2,yae),e(yae,pwo),e(k2,_wo),e(k2,pN),e(pN,bwo),e(k2,vwo),e(A,Two),e(A,R2),e(R2,wae),e(wae,Fwo),e(R2,Cwo),e(R2,_N),e(_N,Mwo),e(R2,Ewo),e(A,ywo),e(A,S2),e(S2,Aae),e(Aae,wwo),e(S2,Awo),e(S2,bN),e(bN,Lwo),e(S2,Bwo),e(A,xwo),e(A,P2),e(P2,Lae),e(Lae,kwo),e(P2,Rwo),e(P2,vN),e(vN,Swo),e(P2,Pwo),e(A,$wo),e(A,$2),e($2,Bae),e(Bae,Iwo),e($2,Nwo),e($2,TN),e(TN,Dwo),e($2,jwo),e(A,qwo),e(A,I2),e(I2,xae),e(xae,Gwo),e(I2,Owo),e(I2,FN),e(FN,Xwo),e(I2,Vwo),e(A,zwo),e(A,N2),e(N2,kae),e(kae,Wwo),e(N2,Qwo),e(N2,CN),e(CN,Hwo),e(N2,Uwo),e(A,Jwo),e(A,D2),e(D2,Rae),e(Rae,Ywo),e(D2,Kwo),e(D2,MN),e(MN,Zwo),e(D2,e6o),e(A,o6o),e(A,j2),e(j2,Sae),e(Sae,r6o),e(j2,t6o),e(j2,EN),e(EN,a6o),e(j2,n6o),e(A,s6o),e(A,q2),e(q2,Pae),e(Pae,l6o),e(q2,i6o),e(q2,yN),e(yN,d6o),e(q2,c6o),e(A,m6o),e(A,G2),e(G2,$ae),e($ae,f6o),e(G2,g6o),e(G2,wN),e(wN,h6o),e(G2,u6o),e(A,p6o),e(A,O2),e(O2,Iae),e(Iae,_6o),e(O2,b6o),e(O2,AN),e(AN,v6o),e(O2,T6o),e(A,F6o),e(A,X2),e(X2,Nae),e(Nae,C6o),e(X2,M6o),e(X2,LN),e(LN,E6o),e(X2,y6o),e(A,w6o),e(A,V2),e(V2,Dae),e(Dae,A6o),e(V2,L6o),e(V2,BN),e(BN,B6o),e(V2,x6o),e(Oe,k6o),e(Oe,z2),e(z2,R6o),e(z2,jae),e(jae,S6o),e(z2,P6o),e(z2,qae),e(qae,$6o),e(Oe,I6o),e(Oe,Gae),e(Gae,N6o),e(Oe,D6o),g(ww,Oe,null),b(c,yke,_),b(c,hd,_),e(hd,W2),e(W2,Oae),g(Aw,Oae,null),e(hd,j6o),e(hd,Xae),e(Xae,q6o),b(c,wke,_),b(c,rr,_),g(Lw,rr,null),e(rr,G6o),e(rr,ud),e(ud,O6o),e(ud,Vae),e(Vae,X6o),e(ud,V6o),e(ud,zae),e(zae,z6o),e(ud,W6o),e(rr,Q6o),e(rr,Bw),e(Bw,H6o),e(Bw,Wae),e(Wae,U6o),e(Bw,J6o),e(rr,Y6o),e(rr,Jr),g(xw,Jr,null),e(Jr,K6o),e(Jr,Qae),e(Qae,Z6o),e(Jr,eAo),e(Jr,pd),e(pd,oAo),e(pd,Hae),e(Hae,rAo),e(pd,tAo),e(pd,Uae),e(Uae,aAo),e(pd,nAo),e(Jr,sAo),e(Jr,Jae),e(Jae,lAo),e(Jr,iAo),g(kw,Jr,null),e(rr,dAo),e(rr,Xe),g(Rw,Xe,null),e(Xe,cAo),e(Xe,Yae),e(Yae,mAo),e(Xe,fAo),e(Xe,Ja),e(Ja,gAo),e(Ja,Kae),e(Kae,hAo),e(Ja,uAo),e(Ja,Zae),e(Zae,pAo),e(Ja,_Ao),e(Ja,ene),e(ene,bAo),e(Ja,vAo),e(Xe,TAo),e(Xe,G),e(G,Q2),e(Q2,one),e(one,FAo),e(Q2,CAo),e(Q2,xN),e(xN,MAo),e(Q2,EAo),e(G,yAo),e(G,H2),e(H2,rne),e(rne,wAo),e(H2,AAo),e(H2,kN),e(kN,LAo),e(H2,BAo),e(G,xAo),e(G,U2),e(U2,tne),e(tne,kAo),e(U2,RAo),e(U2,RN),e(RN,SAo),e(U2,PAo),e(G,$Ao),e(G,J2),e(J2,ane),e(ane,IAo),e(J2,NAo),e(J2,SN),e(SN,DAo),e(J2,jAo),e(G,qAo),e(G,Y2),e(Y2,nne),e(nne,GAo),e(Y2,OAo),e(Y2,PN),e(PN,XAo),e(Y2,VAo),e(G,zAo),e(G,K2),e(K2,sne),e(sne,WAo),e(K2,QAo),e(K2,$N),e($N,HAo),e(K2,UAo),e(G,JAo),e(G,Z2),e(Z2,lne),e(lne,YAo),e(Z2,KAo),e(Z2,IN),e(IN,ZAo),e(Z2,e0o),e(G,o0o),e(G,ev),e(ev,ine),e(ine,r0o),e(ev,t0o),e(ev,NN),e(NN,a0o),e(ev,n0o),e(G,s0o),e(G,ov),e(ov,dne),e(dne,l0o),e(ov,i0o),e(ov,DN),e(DN,d0o),e(ov,c0o),e(G,m0o),e(G,rv),e(rv,cne),e(cne,f0o),e(rv,g0o),e(rv,jN),e(jN,h0o),e(rv,u0o),e(G,p0o),e(G,tv),e(tv,mne),e(mne,_0o),e(tv,b0o),e(tv,qN),e(qN,v0o),e(tv,T0o),e(G,F0o),e(G,av),e(av,fne),e(fne,C0o),e(av,M0o),e(av,GN),e(GN,E0o),e(av,y0o),e(G,w0o),e(G,nv),e(nv,gne),e(gne,A0o),e(nv,L0o),e(nv,ON),e(ON,B0o),e(nv,x0o),e(G,k0o),e(G,sv),e(sv,hne),e(hne,R0o),e(sv,S0o),e(sv,XN),e(XN,P0o),e(sv,$0o),e(G,I0o),e(G,lv),e(lv,une),e(une,N0o),e(lv,D0o),e(lv,VN),e(VN,j0o),e(lv,q0o),e(G,G0o),e(G,iv),e(iv,pne),e(pne,O0o),e(iv,X0o),e(iv,zN),e(zN,V0o),e(iv,z0o),e(G,W0o),e(G,dv),e(dv,_ne),e(_ne,Q0o),e(dv,H0o),e(dv,WN),e(WN,U0o),e(dv,J0o),e(G,Y0o),e(G,cv),e(cv,bne),e(bne,K0o),e(cv,Z0o),e(cv,QN),e(QN,eLo),e(cv,oLo),e(G,rLo),e(G,mv),e(mv,vne),e(vne,tLo),e(mv,aLo),e(mv,HN),e(HN,nLo),e(mv,sLo),e(G,lLo),e(G,fv),e(fv,Tne),e(Tne,iLo),e(fv,dLo),e(fv,UN),e(UN,cLo),e(fv,mLo),e(G,fLo),e(G,gv),e(gv,Fne),e(Fne,gLo),e(gv,hLo),e(gv,JN),e(JN,uLo),e(gv,pLo),e(G,_Lo),e(G,hv),e(hv,Cne),e(Cne,bLo),e(hv,vLo),e(hv,YN),e(YN,TLo),e(hv,FLo),e(G,CLo),e(G,uv),e(uv,Mne),e(Mne,MLo),e(uv,ELo),e(uv,KN),e(KN,yLo),e(uv,wLo),e(G,ALo),e(G,pv),e(pv,Ene),e(Ene,LLo),e(pv,BLo),e(pv,ZN),e(ZN,xLo),e(pv,kLo),e(G,RLo),e(G,_v),e(_v,yne),e(yne,SLo),e(_v,PLo),e(_v,eD),e(eD,$Lo),e(_v,ILo),e(G,NLo),e(G,bv),e(bv,wne),e(wne,DLo),e(bv,jLo),e(bv,oD),e(oD,qLo),e(bv,GLo),e(G,OLo),e(G,vv),e(vv,Ane),e(Ane,XLo),e(vv,VLo),e(vv,rD),e(rD,zLo),e(vv,WLo),e(G,QLo),e(G,Tv),e(Tv,Lne),e(Lne,HLo),e(Tv,ULo),e(Tv,tD),e(tD,JLo),e(Tv,YLo),e(Xe,KLo),e(Xe,Fv),e(Fv,ZLo),e(Fv,Bne),e(Bne,e7o),e(Fv,o7o),e(Fv,xne),e(xne,r7o),e(Xe,t7o),e(Xe,kne),e(kne,a7o),e(Xe,n7o),g(Sw,Xe,null),b(c,Ake,_),b(c,_d,_),e(_d,Cv),e(Cv,Rne),g(Pw,Rne,null),e(_d,s7o),e(_d,Sne),e(Sne,l7o),b(c,Lke,_),b(c,tr,_),g($w,tr,null),e(tr,i7o),e(tr,bd),e(bd,d7o),e(bd,Pne),e(Pne,c7o),e(bd,m7o),e(bd,$ne),e($ne,f7o),e(bd,g7o),e(tr,h7o),e(tr,Iw),e(Iw,u7o),e(Iw,Ine),e(Ine,p7o),e(Iw,_7o),e(tr,b7o),e(tr,Yr),g(Nw,Yr,null),e(Yr,v7o),e(Yr,Nne),e(Nne,T7o),e(Yr,F7o),e(Yr,vd),e(vd,C7o),e(vd,Dne),e(Dne,M7o),e(vd,E7o),e(vd,jne),e(jne,y7o),e(vd,w7o),e(Yr,A7o),e(Yr,qne),e(qne,L7o),e(Yr,B7o),g(Dw,Yr,null),e(tr,x7o),e(tr,Ve),g(jw,Ve,null),e(Ve,k7o),e(Ve,Gne),e(Gne,R7o),e(Ve,S7o),e(Ve,Ya),e(Ya,P7o),e(Ya,One),e(One,$7o),e(Ya,I7o),e(Ya,Xne),e(Xne,N7o),e(Ya,D7o),e(Ya,Vne),e(Vne,j7o),e(Ya,q7o),e(Ve,G7o),e(Ve,da),e(da,Mv),e(Mv,zne),e(zne,O7o),e(Mv,X7o),e(Mv,aD),e(aD,V7o),e(Mv,z7o),e(da,W7o),e(da,Ev),e(Ev,Wne),e(Wne,Q7o),e(Ev,H7o),e(Ev,nD),e(nD,U7o),e(Ev,J7o),e(da,Y7o),e(da,yv),e(yv,Qne),e(Qne,K7o),e(yv,Z7o),e(yv,sD),e(sD,e8o),e(yv,o8o),e(da,r8o),e(da,wv),e(wv,Hne),e(Hne,t8o),e(wv,a8o),e(wv,lD),e(lD,n8o),e(wv,s8o),e(da,l8o),e(da,Av),e(Av,Une),e(Une,i8o),e(Av,d8o),e(Av,iD),e(iD,c8o),e(Av,m8o),e(Ve,f8o),e(Ve,Lv),e(Lv,g8o),e(Lv,Jne),e(Jne,h8o),e(Lv,u8o),e(Lv,Yne),e(Yne,p8o),e(Ve,_8o),e(Ve,Kne),e(Kne,b8o),e(Ve,v8o),g(qw,Ve,null),b(c,Bke,_),b(c,Td,_),e(Td,Bv),e(Bv,Zne),g(Gw,Zne,null),e(Td,T8o),e(Td,ese),e(ese,F8o),b(c,xke,_),b(c,ar,_),g(Ow,ar,null),e(ar,C8o),e(ar,Fd),e(Fd,M8o),e(Fd,ose),e(ose,E8o),e(Fd,y8o),e(Fd,rse),e(rse,w8o),e(Fd,A8o),e(ar,L8o),e(ar,Xw),e(Xw,B8o),e(Xw,tse),e(tse,x8o),e(Xw,k8o),e(ar,R8o),e(ar,Kr),g(Vw,Kr,null),e(Kr,S8o),e(Kr,ase),e(ase,P8o),e(Kr,$8o),e(Kr,Cd),e(Cd,I8o),e(Cd,nse),e(nse,N8o),e(Cd,D8o),e(Cd,sse),e(sse,j8o),e(Cd,q8o),e(Kr,G8o),e(Kr,lse),e(lse,O8o),e(Kr,X8o),g(zw,Kr,null),e(ar,V8o),e(ar,ze),g(Ww,ze,null),e(ze,z8o),e(ze,ise),e(ise,W8o),e(ze,Q8o),e(ze,Ka),e(Ka,H8o),e(Ka,dse),e(dse,U8o),e(Ka,J8o),e(Ka,cse),e(cse,Y8o),e(Ka,K8o),e(Ka,mse),e(mse,Z8o),e(Ka,e9o),e(ze,o9o),e(ze,j),e(j,xv),e(xv,fse),e(fse,r9o),e(xv,t9o),e(xv,dD),e(dD,a9o),e(xv,n9o),e(j,s9o),e(j,kv),e(kv,gse),e(gse,l9o),e(kv,i9o),e(kv,cD),e(cD,d9o),e(kv,c9o),e(j,m9o),e(j,Rv),e(Rv,hse),e(hse,f9o),e(Rv,g9o),e(Rv,mD),e(mD,h9o),e(Rv,u9o),e(j,p9o),e(j,Sv),e(Sv,use),e(use,_9o),e(Sv,b9o),e(Sv,fD),e(fD,v9o),e(Sv,T9o),e(j,F9o),e(j,Pv),e(Pv,pse),e(pse,C9o),e(Pv,M9o),e(Pv,gD),e(gD,E9o),e(Pv,y9o),e(j,w9o),e(j,$v),e($v,_se),e(_se,A9o),e($v,L9o),e($v,hD),e(hD,B9o),e($v,x9o),e(j,k9o),e(j,Iv),e(Iv,bse),e(bse,R9o),e(Iv,S9o),e(Iv,uD),e(uD,P9o),e(Iv,$9o),e(j,I9o),e(j,Nv),e(Nv,vse),e(vse,N9o),e(Nv,D9o),e(Nv,pD),e(pD,j9o),e(Nv,q9o),e(j,G9o),e(j,Dv),e(Dv,Tse),e(Tse,O9o),e(Dv,X9o),e(Dv,_D),e(_D,V9o),e(Dv,z9o),e(j,W9o),e(j,jv),e(jv,Fse),e(Fse,Q9o),e(jv,H9o),e(jv,bD),e(bD,U9o),e(jv,J9o),e(j,Y9o),e(j,qv),e(qv,Cse),e(Cse,K9o),e(qv,Z9o),e(qv,vD),e(vD,eBo),e(qv,oBo),e(j,rBo),e(j,Gv),e(Gv,Mse),e(Mse,tBo),e(Gv,aBo),e(Gv,TD),e(TD,nBo),e(Gv,sBo),e(j,lBo),e(j,Ov),e(Ov,Ese),e(Ese,iBo),e(Ov,dBo),e(Ov,FD),e(FD,cBo),e(Ov,mBo),e(j,fBo),e(j,Xv),e(Xv,yse),e(yse,gBo),e(Xv,hBo),e(Xv,CD),e(CD,uBo),e(Xv,pBo),e(j,_Bo),e(j,Vv),e(Vv,wse),e(wse,bBo),e(Vv,vBo),e(Vv,MD),e(MD,TBo),e(Vv,FBo),e(j,CBo),e(j,zv),e(zv,Ase),e(Ase,MBo),e(zv,EBo),e(zv,ED),e(ED,yBo),e(zv,wBo),e(j,ABo),e(j,Wv),e(Wv,Lse),e(Lse,LBo),e(Wv,BBo),e(Wv,yD),e(yD,xBo),e(Wv,kBo),e(j,RBo),e(j,Qv),e(Qv,Bse),e(Bse,SBo),e(Qv,PBo),e(Qv,wD),e(wD,$Bo),e(Qv,IBo),e(j,NBo),e(j,Hv),e(Hv,xse),e(xse,DBo),e(Hv,jBo),e(Hv,AD),e(AD,qBo),e(Hv,GBo),e(j,OBo),e(j,Uv),e(Uv,kse),e(kse,XBo),e(Uv,VBo),e(Uv,LD),e(LD,zBo),e(Uv,WBo),e(j,QBo),e(j,Jv),e(Jv,Rse),e(Rse,HBo),e(Jv,UBo),e(Jv,BD),e(BD,JBo),e(Jv,YBo),e(j,KBo),e(j,Yv),e(Yv,Sse),e(Sse,ZBo),e(Yv,exo),e(Yv,xD),e(xD,oxo),e(Yv,rxo),e(j,txo),e(j,Kv),e(Kv,Pse),e(Pse,axo),e(Kv,nxo),e(Kv,kD),e(kD,sxo),e(Kv,lxo),e(j,ixo),e(j,Zv),e(Zv,$se),e($se,dxo),e(Zv,cxo),e(Zv,RD),e(RD,mxo),e(Zv,fxo),e(j,gxo),e(j,eT),e(eT,Ise),e(Ise,hxo),e(eT,uxo),e(eT,SD),e(SD,pxo),e(eT,_xo),e(j,bxo),e(j,oT),e(oT,Nse),e(Nse,vxo),e(oT,Txo),e(oT,PD),e(PD,Fxo),e(oT,Cxo),e(j,Mxo),e(j,rT),e(rT,Dse),e(Dse,Exo),e(rT,yxo),e(rT,$D),e($D,wxo),e(rT,Axo),e(j,Lxo),e(j,tT),e(tT,jse),e(jse,Bxo),e(tT,xxo),e(tT,ID),e(ID,kxo),e(tT,Rxo),e(j,Sxo),e(j,aT),e(aT,qse),e(qse,Pxo),e(aT,$xo),e(aT,ND),e(ND,Ixo),e(aT,Nxo),e(j,Dxo),e(j,nT),e(nT,Gse),e(Gse,jxo),e(nT,qxo),e(nT,DD),e(DD,Gxo),e(nT,Oxo),e(j,Xxo),e(j,sT),e(sT,Ose),e(Ose,Vxo),e(sT,zxo),e(sT,jD),e(jD,Wxo),e(sT,Qxo),e(j,Hxo),e(j,lT),e(lT,Xse),e(Xse,Uxo),e(lT,Jxo),e(lT,qD),e(qD,Yxo),e(lT,Kxo),e(j,Zxo),e(j,iT),e(iT,Vse),e(Vse,eko),e(iT,oko),e(iT,GD),e(GD,rko),e(iT,tko),e(ze,ako),e(ze,dT),e(dT,nko),e(dT,zse),e(zse,sko),e(dT,lko),e(dT,Wse),e(Wse,iko),e(ze,dko),e(ze,Qse),e(Qse,cko),e(ze,mko),g(Qw,ze,null),b(c,kke,_),b(c,Md,_),e(Md,cT),e(cT,Hse),g(Hw,Hse,null),e(Md,fko),e(Md,Use),e(Use,gko),b(c,Rke,_),b(c,nr,_),g(Uw,nr,null),e(nr,hko),e(nr,Ed),e(Ed,uko),e(Ed,Jse),e(Jse,pko),e(Ed,_ko),e(Ed,Yse),e(Yse,bko),e(Ed,vko),e(nr,Tko),e(nr,Jw),e(Jw,Fko),e(Jw,Kse),e(Kse,Cko),e(Jw,Mko),e(nr,Eko),e(nr,Zr),g(Yw,Zr,null),e(Zr,yko),e(Zr,Zse),e(Zse,wko),e(Zr,Ako),e(Zr,yd),e(yd,Lko),e(yd,ele),e(ele,Bko),e(yd,xko),e(yd,ole),e(ole,kko),e(yd,Rko),e(Zr,Sko),e(Zr,rle),e(rle,Pko),e(Zr,$ko),g(Kw,Zr,null),e(nr,Iko),e(nr,We),g(Zw,We,null),e(We,Nko),e(We,tle),e(tle,Dko),e(We,jko),e(We,Za),e(Za,qko),e(Za,ale),e(ale,Gko),e(Za,Oko),e(Za,nle),e(nle,Xko),e(Za,Vko),e(Za,sle),e(sle,zko),e(Za,Wko),e(We,Qko),e(We,R),e(R,mT),e(mT,lle),e(lle,Hko),e(mT,Uko),e(mT,OD),e(OD,Jko),e(mT,Yko),e(R,Kko),e(R,fT),e(fT,ile),e(ile,Zko),e(fT,eRo),e(fT,XD),e(XD,oRo),e(fT,rRo),e(R,tRo),e(R,gT),e(gT,dle),e(dle,aRo),e(gT,nRo),e(gT,VD),e(VD,sRo),e(gT,lRo),e(R,iRo),e(R,hT),e(hT,cle),e(cle,dRo),e(hT,cRo),e(hT,zD),e(zD,mRo),e(hT,fRo),e(R,gRo),e(R,uT),e(uT,mle),e(mle,hRo),e(uT,uRo),e(uT,WD),e(WD,pRo),e(uT,_Ro),e(R,bRo),e(R,pT),e(pT,fle),e(fle,vRo),e(pT,TRo),e(pT,QD),e(QD,FRo),e(pT,CRo),e(R,MRo),e(R,_T),e(_T,gle),e(gle,ERo),e(_T,yRo),e(_T,HD),e(HD,wRo),e(_T,ARo),e(R,LRo),e(R,bT),e(bT,hle),e(hle,BRo),e(bT,xRo),e(bT,UD),e(UD,kRo),e(bT,RRo),e(R,SRo),e(R,vT),e(vT,ule),e(ule,PRo),e(vT,$Ro),e(vT,JD),e(JD,IRo),e(vT,NRo),e(R,DRo),e(R,TT),e(TT,ple),e(ple,jRo),e(TT,qRo),e(TT,YD),e(YD,GRo),e(TT,ORo),e(R,XRo),e(R,FT),e(FT,_le),e(_le,VRo),e(FT,zRo),e(FT,KD),e(KD,WRo),e(FT,QRo),e(R,HRo),e(R,CT),e(CT,ble),e(ble,URo),e(CT,JRo),e(CT,ZD),e(ZD,YRo),e(CT,KRo),e(R,ZRo),e(R,MT),e(MT,vle),e(vle,eSo),e(MT,oSo),e(MT,ej),e(ej,rSo),e(MT,tSo),e(R,aSo),e(R,ET),e(ET,Tle),e(Tle,nSo),e(ET,sSo),e(ET,oj),e(oj,lSo),e(ET,iSo),e(R,dSo),e(R,yT),e(yT,Fle),e(Fle,cSo),e(yT,mSo),e(yT,rj),e(rj,fSo),e(yT,gSo),e(R,hSo),e(R,wT),e(wT,Cle),e(Cle,uSo),e(wT,pSo),e(wT,tj),e(tj,_So),e(wT,bSo),e(R,vSo),e(R,AT),e(AT,Mle),e(Mle,TSo),e(AT,FSo),e(AT,aj),e(aj,CSo),e(AT,MSo),e(R,ESo),e(R,LT),e(LT,Ele),e(Ele,ySo),e(LT,wSo),e(LT,nj),e(nj,ASo),e(LT,LSo),e(R,BSo),e(R,BT),e(BT,yle),e(yle,xSo),e(BT,kSo),e(BT,sj),e(sj,RSo),e(BT,SSo),e(R,PSo),e(R,xT),e(xT,wle),e(wle,$So),e(xT,ISo),e(xT,lj),e(lj,NSo),e(xT,DSo),e(R,jSo),e(R,kT),e(kT,Ale),e(Ale,qSo),e(kT,GSo),e(kT,ij),e(ij,OSo),e(kT,XSo),e(R,VSo),e(R,RT),e(RT,Lle),e(Lle,zSo),e(RT,WSo),e(RT,dj),e(dj,QSo),e(RT,HSo),e(R,USo),e(R,ST),e(ST,Ble),e(Ble,JSo),e(ST,YSo),e(ST,cj),e(cj,KSo),e(ST,ZSo),e(R,ePo),e(R,PT),e(PT,xle),e(xle,oPo),e(PT,rPo),e(PT,mj),e(mj,tPo),e(PT,aPo),e(R,nPo),e(R,$T),e($T,kle),e(kle,sPo),e($T,lPo),e($T,fj),e(fj,iPo),e($T,dPo),e(R,cPo),e(R,IT),e(IT,Rle),e(Rle,mPo),e(IT,fPo),e(IT,gj),e(gj,gPo),e(IT,hPo),e(R,uPo),e(R,NT),e(NT,Sle),e(Sle,pPo),e(NT,_Po),e(NT,hj),e(hj,bPo),e(NT,vPo),e(R,TPo),e(R,DT),e(DT,Ple),e(Ple,FPo),e(DT,CPo),e(DT,uj),e(uj,MPo),e(DT,EPo),e(R,yPo),e(R,jT),e(jT,$le),e($le,wPo),e(jT,APo),e(jT,pj),e(pj,LPo),e(jT,BPo),e(R,xPo),e(R,qT),e(qT,Ile),e(Ile,kPo),e(qT,RPo),e(qT,_j),e(_j,SPo),e(qT,PPo),e(R,$Po),e(R,GT),e(GT,Nle),e(Nle,IPo),e(GT,NPo),e(GT,bj),e(bj,DPo),e(GT,jPo),e(R,qPo),e(R,OT),e(OT,Dle),e(Dle,GPo),e(OT,OPo),e(OT,vj),e(vj,XPo),e(OT,VPo),e(R,zPo),e(R,XT),e(XT,jle),e(jle,WPo),e(XT,QPo),e(XT,Tj),e(Tj,HPo),e(XT,UPo),e(R,JPo),e(R,VT),e(VT,qle),e(qle,YPo),e(VT,KPo),e(VT,Fj),e(Fj,ZPo),e(VT,e$o),e(R,o$o),e(R,zT),e(zT,Gle),e(Gle,r$o),e(zT,t$o),e(zT,Cj),e(Cj,a$o),e(zT,n$o),e(R,s$o),e(R,WT),e(WT,Ole),e(Ole,l$o),e(WT,i$o),e(WT,Mj),e(Mj,d$o),e(WT,c$o),e(R,m$o),e(R,QT),e(QT,Xle),e(Xle,f$o),e(QT,g$o),e(QT,Ej),e(Ej,h$o),e(QT,u$o),e(R,p$o),e(R,HT),e(HT,Vle),e(Vle,_$o),e(HT,b$o),e(HT,yj),e(yj,v$o),e(HT,T$o),e(R,F$o),e(R,UT),e(UT,zle),e(zle,C$o),e(UT,M$o),e(UT,wj),e(wj,E$o),e(UT,y$o),e(We,w$o),e(We,JT),e(JT,A$o),e(JT,Wle),e(Wle,L$o),e(JT,B$o),e(JT,Qle),e(Qle,x$o),e(We,k$o),e(We,Hle),e(Hle,R$o),e(We,S$o),g(e6,We,null),b(c,Ske,_),b(c,wd,_),e(wd,YT),e(YT,Ule),g(o6,Ule,null),e(wd,P$o),e(wd,Jle),e(Jle,$$o),b(c,Pke,_),b(c,sr,_),g(r6,sr,null),e(sr,I$o),e(sr,Ad),e(Ad,N$o),e(Ad,Yle),e(Yle,D$o),e(Ad,j$o),e(Ad,Kle),e(Kle,q$o),e(Ad,G$o),e(sr,O$o),e(sr,t6),e(t6,X$o),e(t6,Zle),e(Zle,V$o),e(t6,z$o),e(sr,W$o),e(sr,et),g(a6,et,null),e(et,Q$o),e(et,eie),e(eie,H$o),e(et,U$o),e(et,Ld),e(Ld,J$o),e(Ld,oie),e(oie,Y$o),e(Ld,K$o),e(Ld,rie),e(rie,Z$o),e(Ld,eIo),e(et,oIo),e(et,tie),e(tie,rIo),e(et,tIo),g(n6,et,null),e(sr,aIo),e(sr,Qe),g(s6,Qe,null),e(Qe,nIo),e(Qe,aie),e(aie,sIo),e(Qe,lIo),e(Qe,en),e(en,iIo),e(en,nie),e(nie,dIo),e(en,cIo),e(en,sie),e(sie,mIo),e(en,fIo),e(en,lie),e(lie,gIo),e(en,hIo),e(Qe,uIo),e(Qe,iie),e(iie,KT),e(KT,die),e(die,pIo),e(KT,_Io),e(KT,Aj),e(Aj,bIo),e(KT,vIo),e(Qe,TIo),e(Qe,ZT),e(ZT,FIo),e(ZT,cie),e(cie,CIo),e(ZT,MIo),e(ZT,mie),e(mie,EIo),e(Qe,yIo),e(Qe,fie),e(fie,wIo),e(Qe,AIo),g(l6,Qe,null),b(c,$ke,_),b(c,Bd,_),e(Bd,e1),e(e1,gie),g(i6,gie,null),e(Bd,LIo),e(Bd,hie),e(hie,BIo),b(c,Ike,_),b(c,lr,_),g(d6,lr,null),e(lr,xIo),e(lr,xd),e(xd,kIo),e(xd,uie),e(uie,RIo),e(xd,SIo),e(xd,pie),e(pie,PIo),e(xd,$Io),e(lr,IIo),e(lr,c6),e(c6,NIo),e(c6,_ie),e(_ie,DIo),e(c6,jIo),e(lr,qIo),e(lr,ot),g(m6,ot,null),e(ot,GIo),e(ot,bie),e(bie,OIo),e(ot,XIo),e(ot,kd),e(kd,VIo),e(kd,vie),e(vie,zIo),e(kd,WIo),e(kd,Tie),e(Tie,QIo),e(kd,HIo),e(ot,UIo),e(ot,Fie),e(Fie,JIo),e(ot,YIo),g(f6,ot,null),e(lr,KIo),e(lr,He),g(g6,He,null),e(He,ZIo),e(He,Cie),e(Cie,eNo),e(He,oNo),e(He,on),e(on,rNo),e(on,Mie),e(Mie,tNo),e(on,aNo),e(on,Eie),e(Eie,nNo),e(on,sNo),e(on,yie),e(yie,lNo),e(on,iNo),e(He,dNo),e(He,fe),e(fe,o1),e(o1,wie),e(wie,cNo),e(o1,mNo),e(o1,Lj),e(Lj,fNo),e(o1,gNo),e(fe,hNo),e(fe,r1),e(r1,Aie),e(Aie,uNo),e(r1,pNo),e(r1,Bj),e(Bj,_No),e(r1,bNo),e(fe,vNo),e(fe,qs),e(qs,Lie),e(Lie,TNo),e(qs,FNo),e(qs,xj),e(xj,CNo),e(qs,MNo),e(qs,kj),e(kj,ENo),e(qs,yNo),e(fe,wNo),e(fe,t1),e(t1,Bie),e(Bie,ANo),e(t1,LNo),e(t1,Rj),e(Rj,BNo),e(t1,xNo),e(fe,kNo),e(fe,fa),e(fa,xie),e(xie,RNo),e(fa,SNo),e(fa,Sj),e(Sj,PNo),e(fa,$No),e(fa,Pj),e(Pj,INo),e(fa,NNo),e(fa,$j),e($j,DNo),e(fa,jNo),e(fe,qNo),e(fe,a1),e(a1,kie),e(kie,GNo),e(a1,ONo),e(a1,Ij),e(Ij,XNo),e(a1,VNo),e(fe,zNo),e(fe,n1),e(n1,Rie),e(Rie,WNo),e(n1,QNo),e(n1,Nj),e(Nj,HNo),e(n1,UNo),e(fe,JNo),e(fe,s1),e(s1,Sie),e(Sie,YNo),e(s1,KNo),e(s1,Dj),e(Dj,ZNo),e(s1,eDo),e(fe,oDo),e(fe,l1),e(l1,Pie),e(Pie,rDo),e(l1,tDo),e(l1,jj),e(jj,aDo),e(l1,nDo),e(fe,sDo),e(fe,i1),e(i1,$ie),e($ie,lDo),e(i1,iDo),e(i1,qj),e(qj,dDo),e(i1,cDo),e(fe,mDo),e(fe,d1),e(d1,Iie),e(Iie,fDo),e(d1,gDo),e(d1,Gj),e(Gj,hDo),e(d1,uDo),e(He,pDo),e(He,c1),e(c1,_Do),e(c1,Nie),e(Nie,bDo),e(c1,vDo),e(c1,Die),e(Die,TDo),e(He,FDo),e(He,jie),e(jie,CDo),e(He,MDo),g(h6,He,null),b(c,Nke,_),b(c,Rd,_),e(Rd,m1),e(m1,qie),g(u6,qie,null),e(Rd,EDo),e(Rd,Gie),e(Gie,yDo),b(c,Dke,_),b(c,ir,_),g(p6,ir,null),e(ir,wDo),e(ir,Sd),e(Sd,ADo),e(Sd,Oie),e(Oie,LDo),e(Sd,BDo),e(Sd,Xie),e(Xie,xDo),e(Sd,kDo),e(ir,RDo),e(ir,_6),e(_6,SDo),e(_6,Vie),e(Vie,PDo),e(_6,$Do),e(ir,IDo),e(ir,rt),g(b6,rt,null),e(rt,NDo),e(rt,zie),e(zie,DDo),e(rt,jDo),e(rt,Pd),e(Pd,qDo),e(Pd,Wie),e(Wie,GDo),e(Pd,ODo),e(Pd,Qie),e(Qie,XDo),e(Pd,VDo),e(rt,zDo),e(rt,Hie),e(Hie,WDo),e(rt,QDo),g(v6,rt,null),e(ir,HDo),e(ir,Ue),g(T6,Ue,null),e(Ue,UDo),e(Ue,Uie),e(Uie,JDo),e(Ue,YDo),e(Ue,rn),e(rn,KDo),e(rn,Jie),e(Jie,ZDo),e(rn,ejo),e(rn,Yie),e(Yie,ojo),e(rn,rjo),e(rn,Kie),e(Kie,tjo),e(rn,ajo),e(Ue,njo),e(Ue,Zie),e(Zie,f1),e(f1,ede),e(ede,sjo),e(f1,ljo),e(f1,Oj),e(Oj,ijo),e(f1,djo),e(Ue,cjo),e(Ue,g1),e(g1,mjo),e(g1,ode),e(ode,fjo),e(g1,gjo),e(g1,rde),e(rde,hjo),e(Ue,ujo),e(Ue,tde),e(tde,pjo),e(Ue,_jo),g(F6,Ue,null),b(c,jke,_),b(c,$d,_),e($d,h1),e(h1,ade),g(C6,ade,null),e($d,bjo),e($d,nde),e(nde,vjo),b(c,qke,_),b(c,dr,_),g(M6,dr,null),e(dr,Tjo),e(dr,Id),e(Id,Fjo),e(Id,sde),e(sde,Cjo),e(Id,Mjo),e(Id,lde),e(lde,Ejo),e(Id,yjo),e(dr,wjo),e(dr,E6),e(E6,Ajo),e(E6,ide),e(ide,Ljo),e(E6,Bjo),e(dr,xjo),e(dr,tt),g(y6,tt,null),e(tt,kjo),e(tt,dde),e(dde,Rjo),e(tt,Sjo),e(tt,Nd),e(Nd,Pjo),e(Nd,cde),e(cde,$jo),e(Nd,Ijo),e(Nd,mde),e(mde,Njo),e(Nd,Djo),e(tt,jjo),e(tt,fde),e(fde,qjo),e(tt,Gjo),g(w6,tt,null),e(dr,Ojo),e(dr,Je),g(A6,Je,null),e(Je,Xjo),e(Je,gde),e(gde,Vjo),e(Je,zjo),e(Je,tn),e(tn,Wjo),e(tn,hde),e(hde,Qjo),e(tn,Hjo),e(tn,ude),e(ude,Ujo),e(tn,Jjo),e(tn,pde),e(pde,Yjo),e(tn,Kjo),e(Je,Zjo),e(Je,ke),e(ke,u1),e(u1,_de),e(_de,eqo),e(u1,oqo),e(u1,Xj),e(Xj,rqo),e(u1,tqo),e(ke,aqo),e(ke,p1),e(p1,bde),e(bde,nqo),e(p1,sqo),e(p1,Vj),e(Vj,lqo),e(p1,iqo),e(ke,dqo),e(ke,_1),e(_1,vde),e(vde,cqo),e(_1,mqo),e(_1,zj),e(zj,fqo),e(_1,gqo),e(ke,hqo),e(ke,b1),e(b1,Tde),e(Tde,uqo),e(b1,pqo),e(b1,Wj),e(Wj,_qo),e(b1,bqo),e(ke,vqo),e(ke,v1),e(v1,Fde),e(Fde,Tqo),e(v1,Fqo),e(v1,Qj),e(Qj,Cqo),e(v1,Mqo),e(ke,Eqo),e(ke,T1),e(T1,Cde),e(Cde,yqo),e(T1,wqo),e(T1,Hj),e(Hj,Aqo),e(T1,Lqo),e(ke,Bqo),e(ke,F1),e(F1,Mde),e(Mde,xqo),e(F1,kqo),e(F1,Uj),e(Uj,Rqo),e(F1,Sqo),e(ke,Pqo),e(ke,C1),e(C1,Ede),e(Ede,$qo),e(C1,Iqo),e(C1,Jj),e(Jj,Nqo),e(C1,Dqo),e(Je,jqo),e(Je,M1),e(M1,qqo),e(M1,yde),e(yde,Gqo),e(M1,Oqo),e(M1,wde),e(wde,Xqo),e(Je,Vqo),e(Je,Ade),e(Ade,zqo),e(Je,Wqo),g(L6,Je,null),b(c,Gke,_),b(c,Dd,_),e(Dd,E1),e(E1,Lde),g(B6,Lde,null),e(Dd,Qqo),e(Dd,Bde),e(Bde,Hqo),b(c,Oke,_),b(c,cr,_),g(x6,cr,null),e(cr,Uqo),e(cr,jd),e(jd,Jqo),e(jd,xde),e(xde,Yqo),e(jd,Kqo),e(jd,kde),e(kde,Zqo),e(jd,eGo),e(cr,oGo),e(cr,k6),e(k6,rGo),e(k6,Rde),e(Rde,tGo),e(k6,aGo),e(cr,nGo),e(cr,at),g(R6,at,null),e(at,sGo),e(at,Sde),e(Sde,lGo),e(at,iGo),e(at,qd),e(qd,dGo),e(qd,Pde),e(Pde,cGo),e(qd,mGo),e(qd,$de),e($de,fGo),e(qd,gGo),e(at,hGo),e(at,Ide),e(Ide,uGo),e(at,pGo),g(S6,at,null),e(cr,_Go),e(cr,Ye),g(P6,Ye,null),e(Ye,bGo),e(Ye,Nde),e(Nde,vGo),e(Ye,TGo),e(Ye,an),e(an,FGo),e(an,Dde),e(Dde,CGo),e(an,MGo),e(an,jde),e(jde,EGo),e(an,yGo),e(an,qde),e(qde,wGo),e(an,AGo),e(Ye,LGo),e(Ye,nn),e(nn,y1),e(y1,Gde),e(Gde,BGo),e(y1,xGo),e(y1,Yj),e(Yj,kGo),e(y1,RGo),e(nn,SGo),e(nn,w1),e(w1,Ode),e(Ode,PGo),e(w1,$Go),e(w1,Kj),e(Kj,IGo),e(w1,NGo),e(nn,DGo),e(nn,A1),e(A1,Xde),e(Xde,jGo),e(A1,qGo),e(A1,Zj),e(Zj,GGo),e(A1,OGo),e(nn,XGo),e(nn,L1),e(L1,Vde),e(Vde,VGo),e(L1,zGo),e(L1,eq),e(eq,WGo),e(L1,QGo),e(Ye,HGo),e(Ye,B1),e(B1,UGo),e(B1,zde),e(zde,JGo),e(B1,YGo),e(B1,Wde),e(Wde,KGo),e(Ye,ZGo),e(Ye,Qde),e(Qde,eOo),e(Ye,oOo),g($6,Ye,null),b(c,Xke,_),b(c,Gd,_),e(Gd,x1),e(x1,Hde),g(I6,Hde,null),e(Gd,rOo),e(Gd,Ude),e(Ude,tOo),b(c,Vke,_),b(c,mr,_),g(N6,mr,null),e(mr,aOo),e(mr,Od),e(Od,nOo),e(Od,Jde),e(Jde,sOo),e(Od,lOo),e(Od,Yde),e(Yde,iOo),e(Od,dOo),e(mr,cOo),e(mr,D6),e(D6,mOo),e(D6,Kde),e(Kde,fOo),e(D6,gOo),e(mr,hOo),e(mr,nt),g(j6,nt,null),e(nt,uOo),e(nt,Zde),e(Zde,pOo),e(nt,_Oo),e(nt,Xd),e(Xd,bOo),e(Xd,ece),e(ece,vOo),e(Xd,TOo),e(Xd,oce),e(oce,FOo),e(Xd,COo),e(nt,MOo),e(nt,rce),e(rce,EOo),e(nt,yOo),g(q6,nt,null),e(mr,wOo),e(mr,Ke),g(G6,Ke,null),e(Ke,AOo),e(Ke,tce),e(tce,LOo),e(Ke,BOo),e(Ke,sn),e(sn,xOo),e(sn,ace),e(ace,kOo),e(sn,ROo),e(sn,nce),e(nce,SOo),e(sn,POo),e(sn,sce),e(sce,$Oo),e(sn,IOo),e(Ke,NOo),e(Ke,Re),e(Re,k1),e(k1,lce),e(lce,DOo),e(k1,jOo),e(k1,oq),e(oq,qOo),e(k1,GOo),e(Re,OOo),e(Re,R1),e(R1,ice),e(ice,XOo),e(R1,VOo),e(R1,rq),e(rq,zOo),e(R1,WOo),e(Re,QOo),e(Re,S1),e(S1,dce),e(dce,HOo),e(S1,UOo),e(S1,tq),e(tq,JOo),e(S1,YOo),e(Re,KOo),e(Re,P1),e(P1,cce),e(cce,ZOo),e(P1,eXo),e(P1,aq),e(aq,oXo),e(P1,rXo),e(Re,tXo),e(Re,$1),e($1,mce),e(mce,aXo),e($1,nXo),e($1,nq),e(nq,sXo),e($1,lXo),e(Re,iXo),e(Re,I1),e(I1,fce),e(fce,dXo),e(I1,cXo),e(I1,sq),e(sq,mXo),e(I1,fXo),e(Re,gXo),e(Re,N1),e(N1,gce),e(gce,hXo),e(N1,uXo),e(N1,lq),e(lq,pXo),e(N1,_Xo),e(Re,bXo),e(Re,D1),e(D1,hce),e(hce,vXo),e(D1,TXo),e(D1,iq),e(iq,FXo),e(D1,CXo),e(Ke,MXo),e(Ke,j1),e(j1,EXo),e(j1,uce),e(uce,yXo),e(j1,wXo),e(j1,pce),e(pce,AXo),e(Ke,LXo),e(Ke,_ce),e(_ce,BXo),e(Ke,xXo),g(O6,Ke,null),b(c,zke,_),b(c,Vd,_),e(Vd,q1),e(q1,bce),g(X6,bce,null),e(Vd,kXo),e(Vd,vce),e(vce,RXo),b(c,Wke,_),b(c,fr,_),g(V6,fr,null),e(fr,SXo),e(fr,zd),e(zd,PXo),e(zd,Tce),e(Tce,$Xo),e(zd,IXo),e(zd,Fce),e(Fce,NXo),e(zd,DXo),e(fr,jXo),e(fr,z6),e(z6,qXo),e(z6,Cce),e(Cce,GXo),e(z6,OXo),e(fr,XXo),e(fr,st),g(W6,st,null),e(st,VXo),e(st,Mce),e(Mce,zXo),e(st,WXo),e(st,Wd),e(Wd,QXo),e(Wd,Ece),e(Ece,HXo),e(Wd,UXo),e(Wd,yce),e(yce,JXo),e(Wd,YXo),e(st,KXo),e(st,wce),e(wce,ZXo),e(st,eVo),g(Q6,st,null),e(fr,oVo),e(fr,Ze),g(H6,Ze,null),e(Ze,rVo),e(Ze,Ace),e(Ace,tVo),e(Ze,aVo),e(Ze,ln),e(ln,nVo),e(ln,Lce),e(Lce,sVo),e(ln,lVo),e(ln,Bce),e(Bce,iVo),e(ln,dVo),e(ln,xce),e(xce,cVo),e(ln,mVo),e(Ze,fVo),e(Ze,U6),e(U6,G1),e(G1,kce),e(kce,gVo),e(G1,hVo),e(G1,dq),e(dq,uVo),e(G1,pVo),e(U6,_Vo),e(U6,O1),e(O1,Rce),e(Rce,bVo),e(O1,vVo),e(O1,cq),e(cq,TVo),e(O1,FVo),e(Ze,CVo),e(Ze,X1),e(X1,MVo),e(X1,Sce),e(Sce,EVo),e(X1,yVo),e(X1,Pce),e(Pce,wVo),e(Ze,AVo),e(Ze,$ce),e($ce,LVo),e(Ze,BVo),g(J6,Ze,null),b(c,Qke,_),b(c,Qd,_),e(Qd,V1),e(V1,Ice),g(Y6,Ice,null),e(Qd,xVo),e(Qd,Nce),e(Nce,kVo),b(c,Hke,_),b(c,gr,_),g(K6,gr,null),e(gr,RVo),e(gr,Hd),e(Hd,SVo),e(Hd,Dce),e(Dce,PVo),e(Hd,$Vo),e(Hd,jce),e(jce,IVo),e(Hd,NVo),e(gr,DVo),e(gr,Z6),e(Z6,jVo),e(Z6,qce),e(qce,qVo),e(Z6,GVo),e(gr,OVo),e(gr,lt),g(eA,lt,null),e(lt,XVo),e(lt,Gce),e(Gce,VVo),e(lt,zVo),e(lt,Ud),e(Ud,WVo),e(Ud,Oce),e(Oce,QVo),e(Ud,HVo),e(Ud,Xce),e(Xce,UVo),e(Ud,JVo),e(lt,YVo),e(lt,Vce),e(Vce,KVo),e(lt,ZVo),g(oA,lt,null),e(gr,ezo),e(gr,eo),g(rA,eo,null),e(eo,ozo),e(eo,zce),e(zce,rzo),e(eo,tzo),e(eo,dn),e(dn,azo),e(dn,Wce),e(Wce,nzo),e(dn,szo),e(dn,Qce),e(Qce,lzo),e(dn,izo),e(dn,Hce),e(Hce,dzo),e(dn,czo),e(eo,mzo),e(eo,cn),e(cn,z1),e(z1,Uce),e(Uce,fzo),e(z1,gzo),e(z1,mq),e(mq,hzo),e(z1,uzo),e(cn,pzo),e(cn,W1),e(W1,Jce),e(Jce,_zo),e(W1,bzo),e(W1,fq),e(fq,vzo),e(W1,Tzo),e(cn,Fzo),e(cn,Q1),e(Q1,Yce),e(Yce,Czo),e(Q1,Mzo),e(Q1,gq),e(gq,Ezo),e(Q1,yzo),e(cn,wzo),e(cn,H1),e(H1,Kce),e(Kce,Azo),e(H1,Lzo),e(H1,hq),e(hq,Bzo),e(H1,xzo),e(eo,kzo),e(eo,U1),e(U1,Rzo),e(U1,Zce),e(Zce,Szo),e(U1,Pzo),e(U1,eme),e(eme,$zo),e(eo,Izo),e(eo,ome),e(ome,Nzo),e(eo,Dzo),g(tA,eo,null),b(c,Uke,_),b(c,Jd,_),e(Jd,J1),e(J1,rme),g(aA,rme,null),e(Jd,jzo),e(Jd,tme),e(tme,qzo),b(c,Jke,_),b(c,hr,_),g(nA,hr,null),e(hr,Gzo),e(hr,Yd),e(Yd,Ozo),e(Yd,ame),e(ame,Xzo),e(Yd,Vzo),e(Yd,nme),e(nme,zzo),e(Yd,Wzo),e(hr,Qzo),e(hr,sA),e(sA,Hzo),e(sA,sme),e(sme,Uzo),e(sA,Jzo),e(hr,Yzo),e(hr,it),g(lA,it,null),e(it,Kzo),e(it,lme),e(lme,Zzo),e(it,eWo),e(it,Kd),e(Kd,oWo),e(Kd,ime),e(ime,rWo),e(Kd,tWo),e(Kd,dme),e(dme,aWo),e(Kd,nWo),e(it,sWo),e(it,cme),e(cme,lWo),e(it,iWo),g(iA,it,null),e(hr,dWo),e(hr,oo),g(dA,oo,null),e(oo,cWo),e(oo,mme),e(mme,mWo),e(oo,fWo),e(oo,mn),e(mn,gWo),e(mn,fme),e(fme,hWo),e(mn,uWo),e(mn,gme),e(gme,pWo),e(mn,_Wo),e(mn,hme),e(hme,bWo),e(mn,vWo),e(oo,TWo),e(oo,Zd),e(Zd,Y1),e(Y1,ume),e(ume,FWo),e(Y1,CWo),e(Y1,uq),e(uq,MWo),e(Y1,EWo),e(Zd,yWo),e(Zd,K1),e(K1,pme),e(pme,wWo),e(K1,AWo),e(K1,pq),e(pq,LWo),e(K1,BWo),e(Zd,xWo),e(Zd,Z1),e(Z1,_me),e(_me,kWo),e(Z1,RWo),e(Z1,_q),e(_q,SWo),e(Z1,PWo),e(oo,$Wo),e(oo,eF),e(eF,IWo),e(eF,bme),e(bme,NWo),e(eF,DWo),e(eF,vme),e(vme,jWo),e(oo,qWo),e(oo,Tme),e(Tme,GWo),e(oo,OWo),g(cA,oo,null),b(c,Yke,_),b(c,ec,_),e(ec,oF),e(oF,Fme),g(mA,Fme,null),e(ec,XWo),e(ec,Cme),e(Cme,VWo),b(c,Kke,_),b(c,ur,_),g(fA,ur,null),e(ur,zWo),e(ur,oc),e(oc,WWo),e(oc,Mme),e(Mme,QWo),e(oc,HWo),e(oc,Eme),e(Eme,UWo),e(oc,JWo),e(ur,YWo),e(ur,gA),e(gA,KWo),e(gA,yme),e(yme,ZWo),e(gA,eQo),e(ur,oQo),e(ur,dt),g(hA,dt,null),e(dt,rQo),e(dt,wme),e(wme,tQo),e(dt,aQo),e(dt,rc),e(rc,nQo),e(rc,Ame),e(Ame,sQo),e(rc,lQo),e(rc,Lme),e(Lme,iQo),e(rc,dQo),e(dt,cQo),e(dt,Bme),e(Bme,mQo),e(dt,fQo),g(uA,dt,null),e(ur,gQo),e(ur,ro),g(pA,ro,null),e(ro,hQo),e(ro,xme),e(xme,uQo),e(ro,pQo),e(ro,fn),e(fn,_Qo),e(fn,kme),e(kme,bQo),e(fn,vQo),e(fn,Rme),e(Rme,TQo),e(fn,FQo),e(fn,Sme),e(Sme,CQo),e(fn,MQo),e(ro,EQo),e(ro,Pme),e(Pme,rF),e(rF,$me),e($me,yQo),e(rF,wQo),e(rF,bq),e(bq,AQo),e(rF,LQo),e(ro,BQo),e(ro,tF),e(tF,xQo),e(tF,Ime),e(Ime,kQo),e(tF,RQo),e(tF,Nme),e(Nme,SQo),e(ro,PQo),e(ro,Dme),e(Dme,$Qo),e(ro,IQo),g(_A,ro,null),b(c,Zke,_),b(c,tc,_),e(tc,aF),e(aF,jme),g(bA,jme,null),e(tc,NQo),e(tc,qme),e(qme,DQo),b(c,eRe,_),b(c,pr,_),g(vA,pr,null),e(pr,jQo),e(pr,ac),e(ac,qQo),e(ac,Gme),e(Gme,GQo),e(ac,OQo),e(ac,Ome),e(Ome,XQo),e(ac,VQo),e(pr,zQo),e(pr,TA),e(TA,WQo),e(TA,Xme),e(Xme,QQo),e(TA,HQo),e(pr,UQo),e(pr,ct),g(FA,ct,null),e(ct,JQo),e(ct,Vme),e(Vme,YQo),e(ct,KQo),e(ct,nc),e(nc,ZQo),e(nc,zme),e(zme,eHo),e(nc,oHo),e(nc,Wme),e(Wme,rHo),e(nc,tHo),e(ct,aHo),e(ct,Qme),e(Qme,nHo),e(ct,sHo),g(CA,ct,null),e(pr,lHo),e(pr,to),g(MA,to,null),e(to,iHo),e(to,Hme),e(Hme,dHo),e(to,cHo),e(to,gn),e(gn,mHo),e(gn,Ume),e(Ume,fHo),e(gn,gHo),e(gn,Jme),e(Jme,hHo),e(gn,uHo),e(gn,Yme),e(Yme,pHo),e(gn,_Ho),e(to,bHo),e(to,Kme),e(Kme,nF),e(nF,Zme),e(Zme,vHo),e(nF,THo),e(nF,vq),e(vq,FHo),e(nF,CHo),e(to,MHo),e(to,sF),e(sF,EHo),e(sF,efe),e(efe,yHo),e(sF,wHo),e(sF,ofe),e(ofe,AHo),e(to,LHo),e(to,rfe),e(rfe,BHo),e(to,xHo),g(EA,to,null),b(c,oRe,_),b(c,sc,_),e(sc,lF),e(lF,tfe),g(yA,tfe,null),e(sc,kHo),e(sc,afe),e(afe,RHo),b(c,rRe,_),b(c,_r,_),g(wA,_r,null),e(_r,SHo),e(_r,lc),e(lc,PHo),e(lc,nfe),e(nfe,$Ho),e(lc,IHo),e(lc,sfe),e(sfe,NHo),e(lc,DHo),e(_r,jHo),e(_r,AA),e(AA,qHo),e(AA,lfe),e(lfe,GHo),e(AA,OHo),e(_r,XHo),e(_r,mt),g(LA,mt,null),e(mt,VHo),e(mt,ife),e(ife,zHo),e(mt,WHo),e(mt,ic),e(ic,QHo),e(ic,dfe),e(dfe,HHo),e(ic,UHo),e(ic,cfe),e(cfe,JHo),e(ic,YHo),e(mt,KHo),e(mt,mfe),e(mfe,ZHo),e(mt,eUo),g(BA,mt,null),e(_r,oUo),e(_r,ao),g(xA,ao,null),e(ao,rUo),e(ao,ffe),e(ffe,tUo),e(ao,aUo),e(ao,hn),e(hn,nUo),e(hn,gfe),e(gfe,sUo),e(hn,lUo),e(hn,hfe),e(hfe,iUo),e(hn,dUo),e(hn,ufe),e(ufe,cUo),e(hn,mUo),e(ao,fUo),e(ao,kA),e(kA,iF),e(iF,pfe),e(pfe,gUo),e(iF,hUo),e(iF,Tq),e(Tq,uUo),e(iF,pUo),e(kA,_Uo),e(kA,dF),e(dF,_fe),e(_fe,bUo),e(dF,vUo),e(dF,Fq),e(Fq,TUo),e(dF,FUo),e(ao,CUo),e(ao,cF),e(cF,MUo),e(cF,bfe),e(bfe,EUo),e(cF,yUo),e(cF,vfe),e(vfe,wUo),e(ao,AUo),e(ao,Tfe),e(Tfe,LUo),e(ao,BUo),g(RA,ao,null),b(c,tRe,_),b(c,dc,_),e(dc,mF),e(mF,Ffe),g(SA,Ffe,null),e(dc,xUo),e(dc,Cfe),e(Cfe,kUo),b(c,aRe,_),b(c,br,_),g(PA,br,null),e(br,RUo),e(br,cc),e(cc,SUo),e(cc,Mfe),e(Mfe,PUo),e(cc,$Uo),e(cc,Efe),e(Efe,IUo),e(cc,NUo),e(br,DUo),e(br,$A),e($A,jUo),e($A,yfe),e(yfe,qUo),e($A,GUo),e(br,OUo),e(br,ft),g(IA,ft,null),e(ft,XUo),e(ft,wfe),e(wfe,VUo),e(ft,zUo),e(ft,mc),e(mc,WUo),e(mc,Afe),e(Afe,QUo),e(mc,HUo),e(mc,Lfe),e(Lfe,UUo),e(mc,JUo),e(ft,YUo),e(ft,Bfe),e(Bfe,KUo),e(ft,ZUo),g(NA,ft,null),e(br,eJo),e(br,no),g(DA,no,null),e(no,oJo),e(no,xfe),e(xfe,rJo),e(no,tJo),e(no,un),e(un,aJo),e(un,kfe),e(kfe,nJo),e(un,sJo),e(un,Rfe),e(Rfe,lJo),e(un,iJo),e(un,Sfe),e(Sfe,dJo),e(un,cJo),e(no,mJo),e(no,Pfe),e(Pfe,fF),e(fF,$fe),e($fe,fJo),e(fF,gJo),e(fF,Cq),e(Cq,hJo),e(fF,uJo),e(no,pJo),e(no,gF),e(gF,_Jo),e(gF,Ife),e(Ife,bJo),e(gF,vJo),e(gF,Nfe),e(Nfe,TJo),e(no,FJo),e(no,Dfe),e(Dfe,CJo),e(no,MJo),g(jA,no,null),b(c,nRe,_),b(c,fc,_),e(fc,hF),e(hF,jfe),g(qA,jfe,null),e(fc,EJo),e(fc,qfe),e(qfe,yJo),b(c,sRe,_),b(c,vr,_),g(GA,vr,null),e(vr,wJo),e(vr,gc),e(gc,AJo),e(gc,Gfe),e(Gfe,LJo),e(gc,BJo),e(gc,Ofe),e(Ofe,xJo),e(gc,kJo),e(vr,RJo),e(vr,OA),e(OA,SJo),e(OA,Xfe),e(Xfe,PJo),e(OA,$Jo),e(vr,IJo),e(vr,gt),g(XA,gt,null),e(gt,NJo),e(gt,Vfe),e(Vfe,DJo),e(gt,jJo),e(gt,hc),e(hc,qJo),e(hc,zfe),e(zfe,GJo),e(hc,OJo),e(hc,Wfe),e(Wfe,XJo),e(hc,VJo),e(gt,zJo),e(gt,Qfe),e(Qfe,WJo),e(gt,QJo),g(VA,gt,null),e(vr,HJo),e(vr,ho),g(zA,ho,null),e(ho,UJo),e(ho,Hfe),e(Hfe,JJo),e(ho,YJo),e(ho,pn),e(pn,KJo),e(pn,Ufe),e(Ufe,ZJo),e(pn,eYo),e(pn,Jfe),e(Jfe,oYo),e(pn,rYo),e(pn,Yfe),e(Yfe,tYo),e(pn,aYo),e(ho,nYo),e(ho,B),e(B,uF),e(uF,Kfe),e(Kfe,sYo),e(uF,lYo),e(uF,Mq),e(Mq,iYo),e(uF,dYo),e(B,cYo),e(B,pF),e(pF,Zfe),e(Zfe,mYo),e(pF,fYo),e(pF,Eq),e(Eq,gYo),e(pF,hYo),e(B,uYo),e(B,_F),e(_F,ege),e(ege,pYo),e(_F,_Yo),e(_F,yq),e(yq,bYo),e(_F,vYo),e(B,TYo),e(B,bF),e(bF,oge),e(oge,FYo),e(bF,CYo),e(bF,wq),e(wq,MYo),e(bF,EYo),e(B,yYo),e(B,vF),e(vF,rge),e(rge,wYo),e(vF,AYo),e(vF,Aq),e(Aq,LYo),e(vF,BYo),e(B,xYo),e(B,TF),e(TF,tge),e(tge,kYo),e(TF,RYo),e(TF,Lq),e(Lq,SYo),e(TF,PYo),e(B,$Yo),e(B,FF),e(FF,age),e(age,IYo),e(FF,NYo),e(FF,Bq),e(Bq,DYo),e(FF,jYo),e(B,qYo),e(B,CF),e(CF,nge),e(nge,GYo),e(CF,OYo),e(CF,xq),e(xq,XYo),e(CF,VYo),e(B,zYo),e(B,MF),e(MF,sge),e(sge,WYo),e(MF,QYo),e(MF,kq),e(kq,HYo),e(MF,UYo),e(B,JYo),e(B,EF),e(EF,lge),e(lge,YYo),e(EF,KYo),e(EF,Rq),e(Rq,ZYo),e(EF,eKo),e(B,oKo),e(B,yF),e(yF,ige),e(ige,rKo),e(yF,tKo),e(yF,Sq),e(Sq,aKo),e(yF,nKo),e(B,sKo),e(B,wF),e(wF,dge),e(dge,lKo),e(wF,iKo),e(wF,Pq),e(Pq,dKo),e(wF,cKo),e(B,mKo),e(B,AF),e(AF,cge),e(cge,fKo),e(AF,gKo),e(AF,$q),e($q,hKo),e(AF,uKo),e(B,pKo),e(B,LF),e(LF,mge),e(mge,_Ko),e(LF,bKo),e(LF,Iq),e(Iq,vKo),e(LF,TKo),e(B,FKo),e(B,BF),e(BF,fge),e(fge,CKo),e(BF,MKo),e(BF,Nq),e(Nq,EKo),e(BF,yKo),e(B,wKo),e(B,xF),e(xF,gge),e(gge,AKo),e(xF,LKo),e(xF,Dq),e(Dq,BKo),e(xF,xKo),e(B,kKo),e(B,Gs),e(Gs,hge),e(hge,RKo),e(Gs,SKo),e(Gs,jq),e(jq,PKo),e(Gs,$Ko),e(Gs,qq),e(qq,IKo),e(Gs,NKo),e(B,DKo),e(B,kF),e(kF,uge),e(uge,jKo),e(kF,qKo),e(kF,Gq),e(Gq,GKo),e(kF,OKo),e(B,XKo),e(B,RF),e(RF,pge),e(pge,VKo),e(RF,zKo),e(RF,Oq),e(Oq,WKo),e(RF,QKo),e(B,HKo),e(B,SF),e(SF,_ge),e(_ge,UKo),e(SF,JKo),e(SF,Xq),e(Xq,YKo),e(SF,KKo),e(B,ZKo),e(B,PF),e(PF,bge),e(bge,eZo),e(PF,oZo),e(PF,Vq),e(Vq,rZo),e(PF,tZo),e(B,aZo),e(B,$F),e($F,vge),e(vge,nZo),e($F,sZo),e($F,zq),e(zq,lZo),e($F,iZo),e(B,dZo),e(B,IF),e(IF,Tge),e(Tge,cZo),e(IF,mZo),e(IF,Wq),e(Wq,fZo),e(IF,gZo),e(B,hZo),e(B,NF),e(NF,Fge),e(Fge,uZo),e(NF,pZo),e(NF,Qq),e(Qq,_Zo),e(NF,bZo),e(B,vZo),e(B,DF),e(DF,Cge),e(Cge,TZo),e(DF,FZo),e(DF,Hq),e(Hq,CZo),e(DF,MZo),e(B,EZo),e(B,jF),e(jF,Mge),e(Mge,yZo),e(jF,wZo),e(jF,Uq),e(Uq,AZo),e(jF,LZo),e(B,BZo),e(B,qF),e(qF,Ege),e(Ege,xZo),e(qF,kZo),e(qF,Jq),e(Jq,RZo),e(qF,SZo),e(B,PZo),e(B,GF),e(GF,yge),e(yge,$Zo),e(GF,IZo),e(GF,Yq),e(Yq,NZo),e(GF,DZo),e(B,jZo),e(B,OF),e(OF,wge),e(wge,qZo),e(OF,GZo),e(OF,Kq),e(Kq,OZo),e(OF,XZo),e(B,VZo),e(B,XF),e(XF,Age),e(Age,zZo),e(XF,WZo),e(XF,Zq),e(Zq,QZo),e(XF,HZo),e(B,UZo),e(B,VF),e(VF,Lge),e(Lge,JZo),e(VF,YZo),e(VF,eG),e(eG,KZo),e(VF,ZZo),e(B,eer),e(B,zF),e(zF,Bge),e(Bge,oer),e(zF,rer),e(zF,oG),e(oG,ter),e(zF,aer),e(B,ner),e(B,WF),e(WF,xge),e(xge,ser),e(WF,ler),e(WF,rG),e(rG,ier),e(WF,der),e(B,cer),e(B,QF),e(QF,kge),e(kge,mer),e(QF,fer),e(QF,tG),e(tG,ger),e(QF,her),e(B,uer),e(B,HF),e(HF,Rge),e(Rge,per),e(HF,_er),e(HF,aG),e(aG,ber),e(HF,ver),e(B,Ter),e(B,UF),e(UF,Sge),e(Sge,Fer),e(UF,Cer),e(UF,nG),e(nG,Mer),e(UF,Eer),e(B,yer),e(B,JF),e(JF,Pge),e(Pge,wer),e(JF,Aer),e(JF,sG),e(sG,Ler),e(JF,Ber),e(B,xer),e(B,YF),e(YF,$ge),e($ge,ker),e(YF,Rer),e(YF,lG),e(lG,Ser),e(YF,Per),e(B,$er),e(B,KF),e(KF,Ige),e(Ige,Ier),e(KF,Ner),e(KF,iG),e(iG,Der),e(KF,jer),e(B,qer),e(B,ZF),e(ZF,Nge),e(Nge,Ger),e(ZF,Oer),e(ZF,dG),e(dG,Xer),e(ZF,Ver),e(B,zer),e(B,eC),e(eC,Dge),e(Dge,Wer),e(eC,Qer),e(eC,cG),e(cG,Her),e(eC,Uer),e(B,Jer),e(B,oC),e(oC,jge),e(jge,Yer),e(oC,Ker),e(oC,mG),e(mG,Zer),e(oC,eor),e(ho,oor),e(ho,qge),e(qge,ror),e(ho,tor),g(WA,ho,null),b(c,lRe,_),b(c,uc,_),e(uc,rC),e(rC,Gge),g(QA,Gge,null),e(uc,aor),e(uc,Oge),e(Oge,nor),b(c,iRe,_),b(c,Tr,_),g(HA,Tr,null),e(Tr,sor),e(Tr,pc),e(pc,lor),e(pc,Xge),e(Xge,ior),e(pc,dor),e(pc,Vge),e(Vge,cor),e(pc,mor),e(Tr,gor),e(Tr,UA),e(UA,hor),e(UA,zge),e(zge,uor),e(UA,por),e(Tr,_or),e(Tr,ht),g(JA,ht,null),e(ht,bor),e(ht,Wge),e(Wge,vor),e(ht,Tor),e(ht,_c),e(_c,For),e(_c,Qge),e(Qge,Cor),e(_c,Mor),e(_c,Hge),e(Hge,Eor),e(_c,yor),e(ht,wor),e(ht,Uge),e(Uge,Aor),e(ht,Lor),g(YA,ht,null),e(Tr,Bor),e(Tr,uo),g(KA,uo,null),e(uo,xor),e(uo,Jge),e(Jge,kor),e(uo,Ror),e(uo,_n),e(_n,Sor),e(_n,Yge),e(Yge,Por),e(_n,$or),e(_n,Kge),e(Kge,Ior),e(_n,Nor),e(_n,Zge),e(Zge,Dor),e(_n,jor),e(uo,qor),e(uo,H),e(H,tC),e(tC,ehe),e(ehe,Gor),e(tC,Oor),e(tC,fG),e(fG,Xor),e(tC,Vor),e(H,zor),e(H,aC),e(aC,ohe),e(ohe,Wor),e(aC,Qor),e(aC,gG),e(gG,Hor),e(aC,Uor),e(H,Jor),e(H,nC),e(nC,rhe),e(rhe,Yor),e(nC,Kor),e(nC,hG),e(hG,Zor),e(nC,err),e(H,orr),e(H,sC),e(sC,the),e(the,rrr),e(sC,trr),e(sC,uG),e(uG,arr),e(sC,nrr),e(H,srr),e(H,lC),e(lC,ahe),e(ahe,lrr),e(lC,irr),e(lC,pG),e(pG,drr),e(lC,crr),e(H,mrr),e(H,iC),e(iC,nhe),e(nhe,frr),e(iC,grr),e(iC,_G),e(_G,hrr),e(iC,urr),e(H,prr),e(H,dC),e(dC,she),e(she,_rr),e(dC,brr),e(dC,bG),e(bG,vrr),e(dC,Trr),e(H,Frr),e(H,cC),e(cC,lhe),e(lhe,Crr),e(cC,Mrr),e(cC,vG),e(vG,Err),e(cC,yrr),e(H,wrr),e(H,mC),e(mC,ihe),e(ihe,Arr),e(mC,Lrr),e(mC,TG),e(TG,Brr),e(mC,xrr),e(H,krr),e(H,fC),e(fC,dhe),e(dhe,Rrr),e(fC,Srr),e(fC,FG),e(FG,Prr),e(fC,$rr),e(H,Irr),e(H,gC),e(gC,che),e(che,Nrr),e(gC,Drr),e(gC,CG),e(CG,jrr),e(gC,qrr),e(H,Grr),e(H,hC),e(hC,mhe),e(mhe,Orr),e(hC,Xrr),e(hC,MG),e(MG,Vrr),e(hC,zrr),e(H,Wrr),e(H,uC),e(uC,fhe),e(fhe,Qrr),e(uC,Hrr),e(uC,EG),e(EG,Urr),e(uC,Jrr),e(H,Yrr),e(H,pC),e(pC,ghe),e(ghe,Krr),e(pC,Zrr),e(pC,yG),e(yG,etr),e(pC,otr),e(H,rtr),e(H,_C),e(_C,hhe),e(hhe,ttr),e(_C,atr),e(_C,wG),e(wG,ntr),e(_C,str),e(H,ltr),e(H,bC),e(bC,uhe),e(uhe,itr),e(bC,dtr),e(bC,AG),e(AG,ctr),e(bC,mtr),e(H,ftr),e(H,vC),e(vC,phe),e(phe,gtr),e(vC,htr),e(vC,LG),e(LG,utr),e(vC,ptr),e(H,_tr),e(H,TC),e(TC,_he),e(_he,btr),e(TC,vtr),e(TC,BG),e(BG,Ttr),e(TC,Ftr),e(H,Ctr),e(H,FC),e(FC,bhe),e(bhe,Mtr),e(FC,Etr),e(FC,xG),e(xG,ytr),e(FC,wtr),e(H,Atr),e(H,CC),e(CC,vhe),e(vhe,Ltr),e(CC,Btr),e(CC,kG),e(kG,xtr),e(CC,ktr),e(H,Rtr),e(H,MC),e(MC,The),e(The,Str),e(MC,Ptr),e(MC,RG),e(RG,$tr),e(MC,Itr),e(H,Ntr),e(H,EC),e(EC,Fhe),e(Fhe,Dtr),e(EC,jtr),e(EC,SG),e(SG,qtr),e(EC,Gtr),e(uo,Otr),e(uo,Che),e(Che,Xtr),e(uo,Vtr),g(ZA,uo,null),b(c,dRe,_),b(c,bc,_),e(bc,yC),e(yC,Mhe),g(e0,Mhe,null),e(bc,ztr),e(bc,Ehe),e(Ehe,Wtr),b(c,cRe,_),b(c,Fr,_),g(o0,Fr,null),e(Fr,Qtr),e(Fr,vc),e(vc,Htr),e(vc,yhe),e(yhe,Utr),e(vc,Jtr),e(vc,whe),e(whe,Ytr),e(vc,Ktr),e(Fr,Ztr),e(Fr,r0),e(r0,ear),e(r0,Ahe),e(Ahe,oar),e(r0,rar),e(Fr,tar),e(Fr,ut),g(t0,ut,null),e(ut,aar),e(ut,Lhe),e(Lhe,nar),e(ut,sar),e(ut,Tc),e(Tc,lar),e(Tc,Bhe),e(Bhe,iar),e(Tc,dar),e(Tc,xhe),e(xhe,car),e(Tc,mar),e(ut,far),e(ut,khe),e(khe,gar),e(ut,har),g(a0,ut,null),e(Fr,uar),e(Fr,po),g(n0,po,null),e(po,par),e(po,Rhe),e(Rhe,_ar),e(po,bar),e(po,bn),e(bn,Tar),e(bn,She),e(She,Far),e(bn,Car),e(bn,Phe),e(Phe,Mar),e(bn,Ear),e(bn,$he),e($he,yar),e(bn,war),e(po,Aar),e(po,ge),e(ge,wC),e(wC,Ihe),e(Ihe,Lar),e(wC,Bar),e(wC,PG),e(PG,xar),e(wC,kar),e(ge,Rar),e(ge,AC),e(AC,Nhe),e(Nhe,Sar),e(AC,Par),e(AC,$G),e($G,$ar),e(AC,Iar),e(ge,Nar),e(ge,LC),e(LC,Dhe),e(Dhe,Dar),e(LC,jar),e(LC,IG),e(IG,qar),e(LC,Gar),e(ge,Oar),e(ge,BC),e(BC,jhe),e(jhe,Xar),e(BC,Var),e(BC,NG),e(NG,zar),e(BC,War),e(ge,Qar),e(ge,xC),e(xC,qhe),e(qhe,Har),e(xC,Uar),e(xC,DG),e(DG,Jar),e(xC,Yar),e(ge,Kar),e(ge,kC),e(kC,Ghe),e(Ghe,Zar),e(kC,enr),e(kC,jG),e(jG,onr),e(kC,rnr),e(ge,tnr),e(ge,RC),e(RC,Ohe),e(Ohe,anr),e(RC,nnr),e(RC,qG),e(qG,snr),e(RC,lnr),e(ge,inr),e(ge,SC),e(SC,Xhe),e(Xhe,dnr),e(SC,cnr),e(SC,GG),e(GG,mnr),e(SC,fnr),e(ge,gnr),e(ge,PC),e(PC,Vhe),e(Vhe,hnr),e(PC,unr),e(PC,OG),e(OG,pnr),e(PC,_nr),e(ge,bnr),e(ge,$C),e($C,zhe),e(zhe,vnr),e($C,Tnr),e($C,XG),e(XG,Fnr),e($C,Cnr),e(ge,Mnr),e(ge,IC),e(IC,Whe),e(Whe,Enr),e(IC,ynr),e(IC,VG),e(VG,wnr),e(IC,Anr),e(po,Lnr),e(po,Qhe),e(Qhe,Bnr),e(po,xnr),g(s0,po,null),b(c,mRe,_),b(c,Fc,_),e(Fc,NC),e(NC,Hhe),g(l0,Hhe,null),e(Fc,knr),e(Fc,Uhe),e(Uhe,Rnr),b(c,fRe,_),b(c,Cr,_),g(i0,Cr,null),e(Cr,Snr),e(Cr,Cc),e(Cc,Pnr),e(Cc,Jhe),e(Jhe,$nr),e(Cc,Inr),e(Cc,Yhe),e(Yhe,Nnr),e(Cc,Dnr),e(Cr,jnr),e(Cr,d0),e(d0,qnr),e(d0,Khe),e(Khe,Gnr),e(d0,Onr),e(Cr,Xnr),e(Cr,pt),g(c0,pt,null),e(pt,Vnr),e(pt,Zhe),e(Zhe,znr),e(pt,Wnr),e(pt,Mc),e(Mc,Qnr),e(Mc,eue),e(eue,Hnr),e(Mc,Unr),e(Mc,oue),e(oue,Jnr),e(Mc,Ynr),e(pt,Knr),e(pt,rue),e(rue,Znr),e(pt,esr),g(m0,pt,null),e(Cr,osr),e(Cr,_o),g(f0,_o,null),e(_o,rsr),e(_o,tue),e(tue,tsr),e(_o,asr),e(_o,vn),e(vn,nsr),e(vn,aue),e(aue,ssr),e(vn,lsr),e(vn,nue),e(nue,isr),e(vn,dsr),e(vn,sue),e(sue,csr),e(vn,msr),e(_o,fsr),e(_o,g0),e(g0,DC),e(DC,lue),e(lue,gsr),e(DC,hsr),e(DC,zG),e(zG,usr),e(DC,psr),e(g0,_sr),e(g0,jC),e(jC,iue),e(iue,bsr),e(jC,vsr),e(jC,WG),e(WG,Tsr),e(jC,Fsr),e(_o,Csr),e(_o,due),e(due,Msr),e(_o,Esr),g(h0,_o,null),b(c,gRe,_),b(c,Ec,_),e(Ec,qC),e(qC,cue),g(u0,cue,null),e(Ec,ysr),e(Ec,mue),e(mue,wsr),b(c,hRe,_),b(c,Mr,_),g(p0,Mr,null),e(Mr,Asr),e(Mr,yc),e(yc,Lsr),e(yc,fue),e(fue,Bsr),e(yc,xsr),e(yc,gue),e(gue,ksr),e(yc,Rsr),e(Mr,Ssr),e(Mr,_0),e(_0,Psr),e(_0,hue),e(hue,$sr),e(_0,Isr),e(Mr,Nsr),e(Mr,_t),g(b0,_t,null),e(_t,Dsr),e(_t,uue),e(uue,jsr),e(_t,qsr),e(_t,wc),e(wc,Gsr),e(wc,pue),e(pue,Osr),e(wc,Xsr),e(wc,_ue),e(_ue,Vsr),e(wc,zsr),e(_t,Wsr),e(_t,bue),e(bue,Qsr),e(_t,Hsr),g(v0,_t,null),e(Mr,Usr),e(Mr,bo),g(T0,bo,null),e(bo,Jsr),e(bo,vue),e(vue,Ysr),e(bo,Ksr),e(bo,Tn),e(Tn,Zsr),e(Tn,Tue),e(Tue,elr),e(Tn,olr),e(Tn,Fue),e(Fue,rlr),e(Tn,tlr),e(Tn,Cue),e(Cue,alr),e(Tn,nlr),e(bo,slr),e(bo,J),e(J,GC),e(GC,Mue),e(Mue,llr),e(GC,ilr),e(GC,QG),e(QG,dlr),e(GC,clr),e(J,mlr),e(J,OC),e(OC,Eue),e(Eue,flr),e(OC,glr),e(OC,HG),e(HG,hlr),e(OC,ulr),e(J,plr),e(J,XC),e(XC,yue),e(yue,_lr),e(XC,blr),e(XC,UG),e(UG,vlr),e(XC,Tlr),e(J,Flr),e(J,VC),e(VC,wue),e(wue,Clr),e(VC,Mlr),e(VC,JG),e(JG,Elr),e(VC,ylr),e(J,wlr),e(J,zC),e(zC,Aue),e(Aue,Alr),e(zC,Llr),e(zC,YG),e(YG,Blr),e(zC,xlr),e(J,klr),e(J,WC),e(WC,Lue),e(Lue,Rlr),e(WC,Slr),e(WC,KG),e(KG,Plr),e(WC,$lr),e(J,Ilr),e(J,QC),e(QC,Bue),e(Bue,Nlr),e(QC,Dlr),e(QC,ZG),e(ZG,jlr),e(QC,qlr),e(J,Glr),e(J,HC),e(HC,xue),e(xue,Olr),e(HC,Xlr),e(HC,eO),e(eO,Vlr),e(HC,zlr),e(J,Wlr),e(J,UC),e(UC,kue),e(kue,Qlr),e(UC,Hlr),e(UC,oO),e(oO,Ulr),e(UC,Jlr),e(J,Ylr),e(J,JC),e(JC,Rue),e(Rue,Klr),e(JC,Zlr),e(JC,rO),e(rO,eir),e(JC,oir),e(J,rir),e(J,YC),e(YC,Sue),e(Sue,tir),e(YC,air),e(YC,tO),e(tO,nir),e(YC,sir),e(J,lir),e(J,KC),e(KC,Pue),e(Pue,iir),e(KC,dir),e(KC,aO),e(aO,cir),e(KC,mir),e(J,fir),e(J,ZC),e(ZC,$ue),e($ue,gir),e(ZC,hir),e(ZC,nO),e(nO,uir),e(ZC,pir),e(J,_ir),e(J,eM),e(eM,Iue),e(Iue,bir),e(eM,vir),e(eM,sO),e(sO,Tir),e(eM,Fir),e(J,Cir),e(J,oM),e(oM,Nue),e(Nue,Mir),e(oM,Eir),e(oM,lO),e(lO,yir),e(oM,wir),e(J,Air),e(J,rM),e(rM,Due),e(Due,Lir),e(rM,Bir),e(rM,iO),e(iO,xir),e(rM,kir),e(J,Rir),e(J,tM),e(tM,jue),e(jue,Sir),e(tM,Pir),e(tM,dO),e(dO,$ir),e(tM,Iir),e(J,Nir),e(J,aM),e(aM,que),e(que,Dir),e(aM,jir),e(aM,cO),e(cO,qir),e(aM,Gir),e(J,Oir),e(J,nM),e(nM,Gue),e(Gue,Xir),e(nM,Vir),e(nM,mO),e(mO,zir),e(nM,Wir),e(J,Qir),e(J,sM),e(sM,Oue),e(Oue,Hir),e(sM,Uir),e(sM,fO),e(fO,Jir),e(sM,Yir),e(bo,Kir),e(bo,Xue),e(Xue,Zir),e(bo,edr),g(F0,bo,null),b(c,uRe,_),b(c,Ac,_),e(Ac,lM),e(lM,Vue),g(C0,Vue,null),e(Ac,odr),e(Ac,zue),e(zue,rdr),b(c,pRe,_),b(c,Er,_),g(M0,Er,null),e(Er,tdr),e(Er,Lc),e(Lc,adr),e(Lc,Wue),e(Wue,ndr),e(Lc,sdr),e(Lc,Que),e(Que,ldr),e(Lc,idr),e(Er,ddr),e(Er,E0),e(E0,cdr),e(E0,Hue),e(Hue,mdr),e(E0,fdr),e(Er,gdr),e(Er,bt),g(y0,bt,null),e(bt,hdr),e(bt,Uue),e(Uue,udr),e(bt,pdr),e(bt,Bc),e(Bc,_dr),e(Bc,Jue),e(Jue,bdr),e(Bc,vdr),e(Bc,Yue),e(Yue,Tdr),e(Bc,Fdr),e(bt,Cdr),e(bt,Kue),e(Kue,Mdr),e(bt,Edr),g(w0,bt,null),e(Er,ydr),e(Er,vo),g(A0,vo,null),e(vo,wdr),e(vo,Zue),e(Zue,Adr),e(vo,Ldr),e(vo,Fn),e(Fn,Bdr),e(Fn,epe),e(epe,xdr),e(Fn,kdr),e(Fn,ope),e(ope,Rdr),e(Fn,Sdr),e(Fn,rpe),e(rpe,Pdr),e(Fn,$dr),e(vo,Idr),e(vo,pe),e(pe,iM),e(iM,tpe),e(tpe,Ndr),e(iM,Ddr),e(iM,gO),e(gO,jdr),e(iM,qdr),e(pe,Gdr),e(pe,dM),e(dM,ape),e(ape,Odr),e(dM,Xdr),e(dM,hO),e(hO,Vdr),e(dM,zdr),e(pe,Wdr),e(pe,cM),e(cM,npe),e(npe,Qdr),e(cM,Hdr),e(cM,uO),e(uO,Udr),e(cM,Jdr),e(pe,Ydr),e(pe,mM),e(mM,spe),e(spe,Kdr),e(mM,Zdr),e(mM,pO),e(pO,ecr),e(mM,ocr),e(pe,rcr),e(pe,fM),e(fM,lpe),e(lpe,tcr),e(fM,acr),e(fM,_O),e(_O,ncr),e(fM,scr),e(pe,lcr),e(pe,gM),e(gM,ipe),e(ipe,icr),e(gM,dcr),e(gM,bO),e(bO,ccr),e(gM,mcr),e(pe,fcr),e(pe,hM),e(hM,dpe),e(dpe,gcr),e(hM,hcr),e(hM,vO),e(vO,ucr),e(hM,pcr),e(pe,_cr),e(pe,uM),e(uM,cpe),e(cpe,bcr),e(uM,vcr),e(uM,TO),e(TO,Tcr),e(uM,Fcr),e(pe,Ccr),e(pe,pM),e(pM,mpe),e(mpe,Mcr),e(pM,Ecr),e(pM,FO),e(FO,ycr),e(pM,wcr),e(pe,Acr),e(pe,_M),e(_M,fpe),e(fpe,Lcr),e(_M,Bcr),e(_M,CO),e(CO,xcr),e(_M,kcr),e(vo,Rcr),e(vo,gpe),e(gpe,Scr),e(vo,Pcr),g(L0,vo,null),b(c,_Re,_),b(c,xc,_),e(xc,bM),e(bM,hpe),g(B0,hpe,null),e(xc,$cr),e(xc,upe),e(upe,Icr),b(c,bRe,_),b(c,yr,_),g(x0,yr,null),e(yr,Ncr),e(yr,kc),e(kc,Dcr),e(kc,ppe),e(ppe,jcr),e(kc,qcr),e(kc,_pe),e(_pe,Gcr),e(kc,Ocr),e(yr,Xcr),e(yr,k0),e(k0,Vcr),e(k0,bpe),e(bpe,zcr),e(k0,Wcr),e(yr,Qcr),e(yr,vt),g(R0,vt,null),e(vt,Hcr),e(vt,vpe),e(vpe,Ucr),e(vt,Jcr),e(vt,Rc),e(Rc,Ycr),e(Rc,Tpe),e(Tpe,Kcr),e(Rc,Zcr),e(Rc,Fpe),e(Fpe,emr),e(Rc,omr),e(vt,rmr),e(vt,Cpe),e(Cpe,tmr),e(vt,amr),g(S0,vt,null),e(yr,nmr),e(yr,To),g(P0,To,null),e(To,smr),e(To,Mpe),e(Mpe,lmr),e(To,imr),e(To,Cn),e(Cn,dmr),e(Cn,Epe),e(Epe,cmr),e(Cn,mmr),e(Cn,ype),e(ype,fmr),e(Cn,gmr),e(Cn,wpe),e(wpe,hmr),e(Cn,umr),e(To,pmr),e(To,V),e(V,vM),e(vM,Ape),e(Ape,_mr),e(vM,bmr),e(vM,MO),e(MO,vmr),e(vM,Tmr),e(V,Fmr),e(V,TM),e(TM,Lpe),e(Lpe,Cmr),e(TM,Mmr),e(TM,EO),e(EO,Emr),e(TM,ymr),e(V,wmr),e(V,FM),e(FM,Bpe),e(Bpe,Amr),e(FM,Lmr),e(FM,yO),e(yO,Bmr),e(FM,xmr),e(V,kmr),e(V,CM),e(CM,xpe),e(xpe,Rmr),e(CM,Smr),e(CM,wO),e(wO,Pmr),e(CM,$mr),e(V,Imr),e(V,MM),e(MM,kpe),e(kpe,Nmr),e(MM,Dmr),e(MM,AO),e(AO,jmr),e(MM,qmr),e(V,Gmr),e(V,EM),e(EM,Rpe),e(Rpe,Omr),e(EM,Xmr),e(EM,LO),e(LO,Vmr),e(EM,zmr),e(V,Wmr),e(V,yM),e(yM,Spe),e(Spe,Qmr),e(yM,Hmr),e(yM,BO),e(BO,Umr),e(yM,Jmr),e(V,Ymr),e(V,wM),e(wM,Ppe),e(Ppe,Kmr),e(wM,Zmr),e(wM,xO),e(xO,efr),e(wM,ofr),e(V,rfr),e(V,AM),e(AM,$pe),e($pe,tfr),e(AM,afr),e(AM,kO),e(kO,nfr),e(AM,sfr),e(V,lfr),e(V,LM),e(LM,Ipe),e(Ipe,ifr),e(LM,dfr),e(LM,RO),e(RO,cfr),e(LM,mfr),e(V,ffr),e(V,BM),e(BM,Npe),e(Npe,gfr),e(BM,hfr),e(BM,SO),e(SO,ufr),e(BM,pfr),e(V,_fr),e(V,xM),e(xM,Dpe),e(Dpe,bfr),e(xM,vfr),e(xM,PO),e(PO,Tfr),e(xM,Ffr),e(V,Cfr),e(V,kM),e(kM,jpe),e(jpe,Mfr),e(kM,Efr),e(kM,$O),e($O,yfr),e(kM,wfr),e(V,Afr),e(V,RM),e(RM,qpe),e(qpe,Lfr),e(RM,Bfr),e(RM,IO),e(IO,xfr),e(RM,kfr),e(V,Rfr),e(V,SM),e(SM,Gpe),e(Gpe,Sfr),e(SM,Pfr),e(SM,NO),e(NO,$fr),e(SM,Ifr),e(V,Nfr),e(V,PM),e(PM,Ope),e(Ope,Dfr),e(PM,jfr),e(PM,DO),e(DO,qfr),e(PM,Gfr),e(V,Ofr),e(V,$M),e($M,Xpe),e(Xpe,Xfr),e($M,Vfr),e($M,jO),e(jO,zfr),e($M,Wfr),e(V,Qfr),e(V,IM),e(IM,Vpe),e(Vpe,Hfr),e(IM,Ufr),e(IM,qO),e(qO,Jfr),e(IM,Yfr),e(V,Kfr),e(V,NM),e(NM,zpe),e(zpe,Zfr),e(NM,egr),e(NM,GO),e(GO,ogr),e(NM,rgr),e(V,tgr),e(V,DM),e(DM,Wpe),e(Wpe,agr),e(DM,ngr),e(DM,OO),e(OO,sgr),e(DM,lgr),e(V,igr),e(V,jM),e(jM,Qpe),e(Qpe,dgr),e(jM,cgr),e(jM,XO),e(XO,mgr),e(jM,fgr),e(V,ggr),e(V,qM),e(qM,Hpe),e(Hpe,hgr),e(qM,ugr),e(qM,VO),e(VO,pgr),e(qM,_gr),e(V,bgr),e(V,GM),e(GM,Upe),e(Upe,vgr),e(GM,Tgr),e(GM,zO),e(zO,Fgr),e(GM,Cgr),e(V,Mgr),e(V,OM),e(OM,Jpe),e(Jpe,Egr),e(OM,ygr),e(OM,WO),e(WO,wgr),e(OM,Agr),e(V,Lgr),e(V,XM),e(XM,Ype),e(Ype,Bgr),e(XM,xgr),e(XM,QO),e(QO,kgr),e(XM,Rgr),e(To,Sgr),e(To,Kpe),e(Kpe,Pgr),e(To,$gr),g($0,To,null),b(c,vRe,_),b(c,Sc,_),e(Sc,VM),e(VM,Zpe),g(I0,Zpe,null),e(Sc,Igr),e(Sc,e_e),e(e_e,Ngr),b(c,TRe,_),b(c,wr,_),g(N0,wr,null),e(wr,Dgr),e(wr,Pc),e(Pc,jgr),e(Pc,o_e),e(o_e,qgr),e(Pc,Ggr),e(Pc,r_e),e(r_e,Ogr),e(Pc,Xgr),e(wr,Vgr),e(wr,D0),e(D0,zgr),e(D0,t_e),e(t_e,Wgr),e(D0,Qgr),e(wr,Hgr),e(wr,Tt),g(j0,Tt,null),e(Tt,Ugr),e(Tt,a_e),e(a_e,Jgr),e(Tt,Ygr),e(Tt,$c),e($c,Kgr),e($c,n_e),e(n_e,Zgr),e($c,ehr),e($c,s_e),e(s_e,ohr),e($c,rhr),e(Tt,thr),e(Tt,l_e),e(l_e,ahr),e(Tt,nhr),g(q0,Tt,null),e(wr,shr),e(wr,Fo),g(G0,Fo,null),e(Fo,lhr),e(Fo,i_e),e(i_e,ihr),e(Fo,dhr),e(Fo,Mn),e(Mn,chr),e(Mn,d_e),e(d_e,mhr),e(Mn,fhr),e(Mn,c_e),e(c_e,ghr),e(Mn,hhr),e(Mn,m_e),e(m_e,uhr),e(Mn,phr),e(Fo,_hr),e(Fo,ae),e(ae,zM),e(zM,f_e),e(f_e,bhr),e(zM,vhr),e(zM,HO),e(HO,Thr),e(zM,Fhr),e(ae,Chr),e(ae,WM),e(WM,g_e),e(g_e,Mhr),e(WM,Ehr),e(WM,UO),e(UO,yhr),e(WM,whr),e(ae,Ahr),e(ae,QM),e(QM,h_e),e(h_e,Lhr),e(QM,Bhr),e(QM,JO),e(JO,xhr),e(QM,khr),e(ae,Rhr),e(ae,HM),e(HM,u_e),e(u_e,Shr),e(HM,Phr),e(HM,YO),e(YO,$hr),e(HM,Ihr),e(ae,Nhr),e(ae,UM),e(UM,p_e),e(p_e,Dhr),e(UM,jhr),e(UM,KO),e(KO,qhr),e(UM,Ghr),e(ae,Ohr),e(ae,JM),e(JM,__e),e(__e,Xhr),e(JM,Vhr),e(JM,ZO),e(ZO,zhr),e(JM,Whr),e(ae,Qhr),e(ae,YM),e(YM,b_e),e(b_e,Hhr),e(YM,Uhr),e(YM,eX),e(eX,Jhr),e(YM,Yhr),e(ae,Khr),e(ae,KM),e(KM,v_e),e(v_e,Zhr),e(KM,eur),e(KM,oX),e(oX,our),e(KM,rur),e(ae,tur),e(ae,ZM),e(ZM,T_e),e(T_e,aur),e(ZM,nur),e(ZM,rX),e(rX,sur),e(ZM,lur),e(ae,iur),e(ae,e4),e(e4,F_e),e(F_e,dur),e(e4,cur),e(e4,tX),e(tX,mur),e(e4,fur),e(ae,gur),e(ae,o4),e(o4,C_e),e(C_e,hur),e(o4,uur),e(o4,aX),e(aX,pur),e(o4,_ur),e(ae,bur),e(ae,r4),e(r4,M_e),e(M_e,vur),e(r4,Tur),e(r4,nX),e(nX,Fur),e(r4,Cur),e(ae,Mur),e(ae,t4),e(t4,E_e),e(E_e,Eur),e(t4,yur),e(t4,sX),e(sX,wur),e(t4,Aur),e(ae,Lur),e(ae,a4),e(a4,y_e),e(y_e,Bur),e(a4,xur),e(a4,lX),e(lX,kur),e(a4,Rur),e(ae,Sur),e(ae,n4),e(n4,w_e),e(w_e,Pur),e(n4,$ur),e(n4,iX),e(iX,Iur),e(n4,Nur),e(ae,Dur),e(ae,s4),e(s4,A_e),e(A_e,jur),e(s4,qur),e(s4,dX),e(dX,Gur),e(s4,Our),e(ae,Xur),e(ae,l4),e(l4,L_e),e(L_e,Vur),e(l4,zur),e(l4,cX),e(cX,Wur),e(l4,Qur),e(Fo,Hur),e(Fo,B_e),e(B_e,Uur),e(Fo,Jur),g(O0,Fo,null),b(c,FRe,_),b(c,Ic,_),e(Ic,i4),e(i4,x_e),g(X0,x_e,null),e(Ic,Yur),e(Ic,k_e),e(k_e,Kur),b(c,CRe,_),b(c,Ar,_),g(V0,Ar,null),e(Ar,Zur),e(Ar,Nc),e(Nc,epr),e(Nc,R_e),e(R_e,opr),e(Nc,rpr),e(Nc,S_e),e(S_e,tpr),e(Nc,apr),e(Ar,npr),e(Ar,z0),e(z0,spr),e(z0,P_e),e(P_e,lpr),e(z0,ipr),e(Ar,dpr),e(Ar,Ft),g(W0,Ft,null),e(Ft,cpr),e(Ft,$_e),e($_e,mpr),e(Ft,fpr),e(Ft,Dc),e(Dc,gpr),e(Dc,I_e),e(I_e,hpr),e(Dc,upr),e(Dc,N_e),e(N_e,ppr),e(Dc,_pr),e(Ft,bpr),e(Ft,D_e),e(D_e,vpr),e(Ft,Tpr),g(Q0,Ft,null),e(Ar,Fpr),e(Ar,Co),g(H0,Co,null),e(Co,Cpr),e(Co,j_e),e(j_e,Mpr),e(Co,Epr),e(Co,En),e(En,ypr),e(En,q_e),e(q_e,wpr),e(En,Apr),e(En,G_e),e(G_e,Lpr),e(En,Bpr),e(En,O_e),e(O_e,xpr),e(En,kpr),e(Co,Rpr),e(Co,X_e),e(X_e,d4),e(d4,V_e),e(V_e,Spr),e(d4,Ppr),e(d4,mX),e(mX,$pr),e(d4,Ipr),e(Co,Npr),e(Co,z_e),e(z_e,Dpr),e(Co,jpr),g(U0,Co,null),b(c,MRe,_),b(c,jc,_),e(jc,c4),e(c4,W_e),g(J0,W_e,null),e(jc,qpr),e(jc,Q_e),e(Q_e,Gpr),b(c,ERe,_),b(c,Lr,_),g(Y0,Lr,null),e(Lr,Opr),e(Lr,qc),e(qc,Xpr),e(qc,H_e),e(H_e,Vpr),e(qc,zpr),e(qc,U_e),e(U_e,Wpr),e(qc,Qpr),e(Lr,Hpr),e(Lr,K0),e(K0,Upr),e(K0,J_e),e(J_e,Jpr),e(K0,Ypr),e(Lr,Kpr),e(Lr,Ct),g(Z0,Ct,null),e(Ct,Zpr),e(Ct,Y_e),e(Y_e,e_r),e(Ct,o_r),e(Ct,Gc),e(Gc,r_r),e(Gc,K_e),e(K_e,t_r),e(Gc,a_r),e(Gc,Z_e),e(Z_e,n_r),e(Gc,s_r),e(Ct,l_r),e(Ct,ebe),e(ebe,i_r),e(Ct,d_r),g(eL,Ct,null),e(Lr,c_r),e(Lr,Mo),g(oL,Mo,null),e(Mo,m_r),e(Mo,obe),e(obe,f_r),e(Mo,g_r),e(Mo,yn),e(yn,h_r),e(yn,rbe),e(rbe,u_r),e(yn,p_r),e(yn,tbe),e(tbe,__r),e(yn,b_r),e(yn,abe),e(abe,v_r),e(yn,T_r),e(Mo,F_r),e(Mo,Y),e(Y,m4),e(m4,nbe),e(nbe,C_r),e(m4,M_r),e(m4,fX),e(fX,E_r),e(m4,y_r),e(Y,w_r),e(Y,f4),e(f4,sbe),e(sbe,A_r),e(f4,L_r),e(f4,gX),e(gX,B_r),e(f4,x_r),e(Y,k_r),e(Y,g4),e(g4,lbe),e(lbe,R_r),e(g4,S_r),e(g4,hX),e(hX,P_r),e(g4,$_r),e(Y,I_r),e(Y,h4),e(h4,ibe),e(ibe,N_r),e(h4,D_r),e(h4,uX),e(uX,j_r),e(h4,q_r),e(Y,G_r),e(Y,u4),e(u4,dbe),e(dbe,O_r),e(u4,X_r),e(u4,pX),e(pX,V_r),e(u4,z_r),e(Y,W_r),e(Y,p4),e(p4,cbe),e(cbe,Q_r),e(p4,H_r),e(p4,_X),e(_X,U_r),e(p4,J_r),e(Y,Y_r),e(Y,_4),e(_4,mbe),e(mbe,K_r),e(_4,Z_r),e(_4,bX),e(bX,ebr),e(_4,obr),e(Y,rbr),e(Y,b4),e(b4,fbe),e(fbe,tbr),e(b4,abr),e(b4,vX),e(vX,nbr),e(b4,sbr),e(Y,lbr),e(Y,v4),e(v4,gbe),e(gbe,ibr),e(v4,dbr),e(v4,TX),e(TX,cbr),e(v4,mbr),e(Y,fbr),e(Y,T4),e(T4,hbe),e(hbe,gbr),e(T4,hbr),e(T4,FX),e(FX,ubr),e(T4,pbr),e(Y,_br),e(Y,F4),e(F4,ube),e(ube,bbr),e(F4,vbr),e(F4,CX),e(CX,Tbr),e(F4,Fbr),e(Y,Cbr),e(Y,C4),e(C4,pbe),e(pbe,Mbr),e(C4,Ebr),e(C4,MX),e(MX,ybr),e(C4,wbr),e(Y,Abr),e(Y,M4),e(M4,_be),e(_be,Lbr),e(M4,Bbr),e(M4,EX),e(EX,xbr),e(M4,kbr),e(Y,Rbr),e(Y,E4),e(E4,bbe),e(bbe,Sbr),e(E4,Pbr),e(E4,yX),e(yX,$br),e(E4,Ibr),e(Y,Nbr),e(Y,y4),e(y4,vbe),e(vbe,Dbr),e(y4,jbr),e(y4,wX),e(wX,qbr),e(y4,Gbr),e(Y,Obr),e(Y,w4),e(w4,Tbe),e(Tbe,Xbr),e(w4,Vbr),e(w4,AX),e(AX,zbr),e(w4,Wbr),e(Y,Qbr),e(Y,A4),e(A4,Fbe),e(Fbe,Hbr),e(A4,Ubr),e(A4,LX),e(LX,Jbr),e(A4,Ybr),e(Y,Kbr),e(Y,L4),e(L4,Cbe),e(Cbe,Zbr),e(L4,e2r),e(L4,BX),e(BX,o2r),e(L4,r2r),e(Y,t2r),e(Y,B4),e(B4,Mbe),e(Mbe,a2r),e(B4,n2r),e(B4,xX),e(xX,s2r),e(B4,l2r),e(Y,i2r),e(Y,x4),e(x4,Ebe),e(Ebe,d2r),e(x4,c2r),e(x4,kX),e(kX,m2r),e(x4,f2r),e(Mo,g2r),e(Mo,ybe),e(ybe,h2r),e(Mo,u2r),g(rL,Mo,null),b(c,yRe,_),b(c,Oc,_),e(Oc,k4),e(k4,wbe),g(tL,wbe,null),e(Oc,p2r),e(Oc,Abe),e(Abe,_2r),b(c,wRe,_),b(c,Br,_),g(aL,Br,null),e(Br,b2r),e(Br,Xc),e(Xc,v2r),e(Xc,Lbe),e(Lbe,T2r),e(Xc,F2r),e(Xc,Bbe),e(Bbe,C2r),e(Xc,M2r),e(Br,E2r),e(Br,nL),e(nL,y2r),e(nL,xbe),e(xbe,w2r),e(nL,A2r),e(Br,L2r),e(Br,Mt),g(sL,Mt,null),e(Mt,B2r),e(Mt,kbe),e(kbe,x2r),e(Mt,k2r),e(Mt,Vc),e(Vc,R2r),e(Vc,Rbe),e(Rbe,S2r),e(Vc,P2r),e(Vc,Sbe),e(Sbe,$2r),e(Vc,I2r),e(Mt,N2r),e(Mt,Pbe),e(Pbe,D2r),e(Mt,j2r),g(lL,Mt,null),e(Br,q2r),e(Br,Eo),g(iL,Eo,null),e(Eo,G2r),e(Eo,$be),e($be,O2r),e(Eo,X2r),e(Eo,wn),e(wn,V2r),e(wn,Ibe),e(Ibe,z2r),e(wn,W2r),e(wn,Nbe),e(Nbe,Q2r),e(wn,H2r),e(wn,Dbe),e(Dbe,U2r),e(wn,J2r),e(Eo,Y2r),e(Eo,Z),e(Z,R4),e(R4,jbe),e(jbe,K2r),e(R4,Z2r),e(R4,RX),e(RX,evr),e(R4,ovr),e(Z,rvr),e(Z,S4),e(S4,qbe),e(qbe,tvr),e(S4,avr),e(S4,SX),e(SX,nvr),e(S4,svr),e(Z,lvr),e(Z,P4),e(P4,Gbe),e(Gbe,ivr),e(P4,dvr),e(P4,PX),e(PX,cvr),e(P4,mvr),e(Z,fvr),e(Z,$4),e($4,Obe),e(Obe,gvr),e($4,hvr),e($4,$X),e($X,uvr),e($4,pvr),e(Z,_vr),e(Z,I4),e(I4,Xbe),e(Xbe,bvr),e(I4,vvr),e(I4,IX),e(IX,Tvr),e(I4,Fvr),e(Z,Cvr),e(Z,N4),e(N4,Vbe),e(Vbe,Mvr),e(N4,Evr),e(N4,NX),e(NX,yvr),e(N4,wvr),e(Z,Avr),e(Z,D4),e(D4,zbe),e(zbe,Lvr),e(D4,Bvr),e(D4,DX),e(DX,xvr),e(D4,kvr),e(Z,Rvr),e(Z,j4),e(j4,Wbe),e(Wbe,Svr),e(j4,Pvr),e(j4,jX),e(jX,$vr),e(j4,Ivr),e(Z,Nvr),e(Z,q4),e(q4,Qbe),e(Qbe,Dvr),e(q4,jvr),e(q4,qX),e(qX,qvr),e(q4,Gvr),e(Z,Ovr),e(Z,G4),e(G4,Hbe),e(Hbe,Xvr),e(G4,Vvr),e(G4,GX),e(GX,zvr),e(G4,Wvr),e(Z,Qvr),e(Z,O4),e(O4,Ube),e(Ube,Hvr),e(O4,Uvr),e(O4,OX),e(OX,Jvr),e(O4,Yvr),e(Z,Kvr),e(Z,X4),e(X4,Jbe),e(Jbe,Zvr),e(X4,eTr),e(X4,XX),e(XX,oTr),e(X4,rTr),e(Z,tTr),e(Z,V4),e(V4,Ybe),e(Ybe,aTr),e(V4,nTr),e(V4,VX),e(VX,sTr),e(V4,lTr),e(Z,iTr),e(Z,z4),e(z4,Kbe),e(Kbe,dTr),e(z4,cTr),e(z4,zX),e(zX,mTr),e(z4,fTr),e(Z,gTr),e(Z,W4),e(W4,Zbe),e(Zbe,hTr),e(W4,uTr),e(W4,WX),e(WX,pTr),e(W4,_Tr),e(Z,bTr),e(Z,Q4),e(Q4,e2e),e(e2e,vTr),e(Q4,TTr),e(Q4,QX),e(QX,FTr),e(Q4,CTr),e(Z,MTr),e(Z,H4),e(H4,o2e),e(o2e,ETr),e(H4,yTr),e(H4,HX),e(HX,wTr),e(H4,ATr),e(Z,LTr),e(Z,U4),e(U4,r2e),e(r2e,BTr),e(U4,xTr),e(U4,UX),e(UX,kTr),e(U4,RTr),e(Z,STr),e(Z,J4),e(J4,t2e),e(t2e,PTr),e(J4,$Tr),e(J4,JX),e(JX,ITr),e(J4,NTr),e(Eo,DTr),e(Eo,a2e),e(a2e,jTr),e(Eo,qTr),g(dL,Eo,null),b(c,ARe,_),b(c,zc,_),e(zc,Y4),e(Y4,n2e),g(cL,n2e,null),e(zc,GTr),e(zc,s2e),e(s2e,OTr),b(c,LRe,_),b(c,xr,_),g(mL,xr,null),e(xr,XTr),e(xr,Wc),e(Wc,VTr),e(Wc,l2e),e(l2e,zTr),e(Wc,WTr),e(Wc,i2e),e(i2e,QTr),e(Wc,HTr),e(xr,UTr),e(xr,fL),e(fL,JTr),e(fL,d2e),e(d2e,YTr),e(fL,KTr),e(xr,ZTr),e(xr,Et),g(gL,Et,null),e(Et,e1r),e(Et,c2e),e(c2e,o1r),e(Et,r1r),e(Et,Qc),e(Qc,t1r),e(Qc,m2e),e(m2e,a1r),e(Qc,n1r),e(Qc,f2e),e(f2e,s1r),e(Qc,l1r),e(Et,i1r),e(Et,g2e),e(g2e,d1r),e(Et,c1r),g(hL,Et,null),e(xr,m1r),e(xr,yo),g(uL,yo,null),e(yo,f1r),e(yo,h2e),e(h2e,g1r),e(yo,h1r),e(yo,An),e(An,u1r),e(An,u2e),e(u2e,p1r),e(An,_1r),e(An,p2e),e(p2e,b1r),e(An,v1r),e(An,_2e),e(_2e,T1r),e(An,F1r),e(yo,C1r),e(yo,b2e),e(b2e,K4),e(K4,v2e),e(v2e,M1r),e(K4,E1r),e(K4,YX),e(YX,y1r),e(K4,w1r),e(yo,A1r),e(yo,T2e),e(T2e,L1r),e(yo,B1r),g(pL,yo,null),b(c,BRe,_),b(c,Hc,_),e(Hc,Z4),e(Z4,F2e),g(_L,F2e,null),e(Hc,x1r),e(Hc,C2e),e(C2e,k1r),b(c,xRe,_),b(c,kr,_),g(bL,kr,null),e(kr,R1r),e(kr,Uc),e(Uc,S1r),e(Uc,M2e),e(M2e,P1r),e(Uc,$1r),e(Uc,E2e),e(E2e,I1r),e(Uc,N1r),e(kr,D1r),e(kr,vL),e(vL,j1r),e(vL,y2e),e(y2e,q1r),e(vL,G1r),e(kr,O1r),e(kr,yt),g(TL,yt,null),e(yt,X1r),e(yt,w2e),e(w2e,V1r),e(yt,z1r),e(yt,Jc),e(Jc,W1r),e(Jc,A2e),e(A2e,Q1r),e(Jc,H1r),e(Jc,L2e),e(L2e,U1r),e(Jc,J1r),e(yt,Y1r),e(yt,B2e),e(B2e,K1r),e(yt,Z1r),g(FL,yt,null),e(kr,eFr),e(kr,wo),g(CL,wo,null),e(wo,oFr),e(wo,x2e),e(x2e,rFr),e(wo,tFr),e(wo,Ln),e(Ln,aFr),e(Ln,k2e),e(k2e,nFr),e(Ln,sFr),e(Ln,R2e),e(R2e,lFr),e(Ln,iFr),e(Ln,S2e),e(S2e,dFr),e(Ln,cFr),e(wo,mFr),e(wo,P2e),e(P2e,eE),e(eE,$2e),e($2e,fFr),e(eE,gFr),e(eE,KX),e(KX,hFr),e(eE,uFr),e(wo,pFr),e(wo,I2e),e(I2e,_Fr),e(wo,bFr),g(ML,wo,null),b(c,kRe,_),b(c,Yc,_),e(Yc,oE),e(oE,N2e),g(EL,N2e,null),e(Yc,vFr),e(Yc,D2e),e(D2e,TFr),b(c,RRe,_),b(c,Rr,_),g(yL,Rr,null),e(Rr,FFr),e(Rr,Kc),e(Kc,CFr),e(Kc,j2e),e(j2e,MFr),e(Kc,EFr),e(Kc,q2e),e(q2e,yFr),e(Kc,wFr),e(Rr,AFr),e(Rr,wL),e(wL,LFr),e(wL,G2e),e(G2e,BFr),e(wL,xFr),e(Rr,kFr),e(Rr,wt),g(AL,wt,null),e(wt,RFr),e(wt,O2e),e(O2e,SFr),e(wt,PFr),e(wt,Zc),e(Zc,$Fr),e(Zc,X2e),e(X2e,IFr),e(Zc,NFr),e(Zc,V2e),e(V2e,DFr),e(Zc,jFr),e(wt,qFr),e(wt,z2e),e(z2e,GFr),e(wt,OFr),g(LL,wt,null),e(Rr,XFr),e(Rr,Ao),g(BL,Ao,null),e(Ao,VFr),e(Ao,W2e),e(W2e,zFr),e(Ao,WFr),e(Ao,Bn),e(Bn,QFr),e(Bn,Q2e),e(Q2e,HFr),e(Bn,UFr),e(Bn,H2e),e(H2e,JFr),e(Bn,YFr),e(Bn,U2e),e(U2e,KFr),e(Bn,ZFr),e(Ao,eCr),e(Ao,z),e(z,rE),e(rE,J2e),e(J2e,oCr),e(rE,rCr),e(rE,ZX),e(ZX,tCr),e(rE,aCr),e(z,nCr),e(z,tE),e(tE,Y2e),e(Y2e,sCr),e(tE,lCr),e(tE,eV),e(eV,iCr),e(tE,dCr),e(z,cCr),e(z,aE),e(aE,K2e),e(K2e,mCr),e(aE,fCr),e(aE,oV),e(oV,gCr),e(aE,hCr),e(z,uCr),e(z,nE),e(nE,Z2e),e(Z2e,pCr),e(nE,_Cr),e(nE,rV),e(rV,bCr),e(nE,vCr),e(z,TCr),e(z,sE),e(sE,eve),e(eve,FCr),e(sE,CCr),e(sE,tV),e(tV,MCr),e(sE,ECr),e(z,yCr),e(z,lE),e(lE,ove),e(ove,wCr),e(lE,ACr),e(lE,aV),e(aV,LCr),e(lE,BCr),e(z,xCr),e(z,iE),e(iE,rve),e(rve,kCr),e(iE,RCr),e(iE,nV),e(nV,SCr),e(iE,PCr),e(z,$Cr),e(z,dE),e(dE,tve),e(tve,ICr),e(dE,NCr),e(dE,sV),e(sV,DCr),e(dE,jCr),e(z,qCr),e(z,cE),e(cE,ave),e(ave,GCr),e(cE,OCr),e(cE,lV),e(lV,XCr),e(cE,VCr),e(z,zCr),e(z,mE),e(mE,nve),e(nve,WCr),e(mE,QCr),e(mE,iV),e(iV,HCr),e(mE,UCr),e(z,JCr),e(z,fE),e(fE,sve),e(sve,YCr),e(fE,KCr),e(fE,dV),e(dV,ZCr),e(fE,eMr),e(z,oMr),e(z,gE),e(gE,lve),e(lve,rMr),e(gE,tMr),e(gE,cV),e(cV,aMr),e(gE,nMr),e(z,sMr),e(z,hE),e(hE,ive),e(ive,lMr),e(hE,iMr),e(hE,mV),e(mV,dMr),e(hE,cMr),e(z,mMr),e(z,uE),e(uE,dve),e(dve,fMr),e(uE,gMr),e(uE,fV),e(fV,hMr),e(uE,uMr),e(z,pMr),e(z,pE),e(pE,cve),e(cve,_Mr),e(pE,bMr),e(pE,gV),e(gV,vMr),e(pE,TMr),e(z,FMr),e(z,_E),e(_E,mve),e(mve,CMr),e(_E,MMr),e(_E,hV),e(hV,EMr),e(_E,yMr),e(z,wMr),e(z,bE),e(bE,fve),e(fve,AMr),e(bE,LMr),e(bE,uV),e(uV,BMr),e(bE,xMr),e(z,kMr),e(z,vE),e(vE,gve),e(gve,RMr),e(vE,SMr),e(vE,pV),e(pV,PMr),e(vE,$Mr),e(z,IMr),e(z,TE),e(TE,hve),e(hve,NMr),e(TE,DMr),e(TE,_V),e(_V,jMr),e(TE,qMr),e(z,GMr),e(z,FE),e(FE,uve),e(uve,OMr),e(FE,XMr),e(FE,bV),e(bV,VMr),e(FE,zMr),e(z,WMr),e(z,CE),e(CE,pve),e(pve,QMr),e(CE,HMr),e(CE,vV),e(vV,UMr),e(CE,JMr),e(z,YMr),e(z,ME),e(ME,_ve),e(_ve,KMr),e(ME,ZMr),e(ME,TV),e(TV,e4r),e(ME,o4r),e(z,r4r),e(z,EE),e(EE,bve),e(bve,t4r),e(EE,a4r),e(EE,FV),e(FV,n4r),e(EE,s4r),e(z,l4r),e(z,yE),e(yE,vve),e(vve,i4r),e(yE,d4r),e(yE,CV),e(CV,c4r),e(yE,m4r),e(z,f4r),e(z,wE),e(wE,Tve),e(Tve,g4r),e(wE,h4r),e(wE,MV),e(MV,u4r),e(wE,p4r),e(Ao,_4r),e(Ao,Fve),e(Fve,b4r),e(Ao,v4r),g(xL,Ao,null),b(c,SRe,_),b(c,em,_),e(em,AE),e(AE,Cve),g(kL,Cve,null),e(em,T4r),e(em,Mve),e(Mve,F4r),b(c,PRe,_),b(c,Sr,_),g(RL,Sr,null),e(Sr,C4r),e(Sr,om),e(om,M4r),e(om,Eve),e(Eve,E4r),e(om,y4r),e(om,yve),e(yve,w4r),e(om,A4r),e(Sr,L4r),e(Sr,SL),e(SL,B4r),e(SL,wve),e(wve,x4r),e(SL,k4r),e(Sr,R4r),e(Sr,At),g(PL,At,null),e(At,S4r),e(At,Ave),e(Ave,P4r),e(At,$4r),e(At,rm),e(rm,I4r),e(rm,Lve),e(Lve,N4r),e(rm,D4r),e(rm,Bve),e(Bve,j4r),e(rm,q4r),e(At,G4r),e(At,xve),e(xve,O4r),e(At,X4r),g($L,At,null),e(Sr,V4r),e(Sr,Lo),g(IL,Lo,null),e(Lo,z4r),e(Lo,kve),e(kve,W4r),e(Lo,Q4r),e(Lo,xn),e(xn,H4r),e(xn,Rve),e(Rve,U4r),e(xn,J4r),e(xn,Sve),e(Sve,Y4r),e(xn,K4r),e(xn,Pve),e(Pve,Z4r),e(xn,eEr),e(Lo,oEr),e(Lo,ca),e(ca,LE),e(LE,$ve),e($ve,rEr),e(LE,tEr),e(LE,EV),e(EV,aEr),e(LE,nEr),e(ca,sEr),e(ca,BE),e(BE,Ive),e(Ive,lEr),e(BE,iEr),e(BE,yV),e(yV,dEr),e(BE,cEr),e(ca,mEr),e(ca,xE),e(xE,Nve),e(Nve,fEr),e(xE,gEr),e(xE,wV),e(wV,hEr),e(xE,uEr),e(ca,pEr),e(ca,kE),e(kE,Dve),e(Dve,_Er),e(kE,bEr),e(kE,AV),e(AV,vEr),e(kE,TEr),e(ca,FEr),e(ca,RE),e(RE,jve),e(jve,CEr),e(RE,MEr),e(RE,LV),e(LV,EEr),e(RE,yEr),e(Lo,wEr),e(Lo,qve),e(qve,AEr),e(Lo,LEr),g(NL,Lo,null),b(c,$Re,_),b(c,tm,_),e(tm,SE),e(SE,Gve),g(DL,Gve,null),e(tm,BEr),e(tm,Ove),e(Ove,xEr),b(c,IRe,_),b(c,Pr,_),g(jL,Pr,null),e(Pr,kEr),e(Pr,am),e(am,REr),e(am,Xve),e(Xve,SEr),e(am,PEr),e(am,Vve),e(Vve,$Er),e(am,IEr),e(Pr,NEr),e(Pr,qL),e(qL,DEr),e(qL,zve),e(zve,jEr),e(qL,qEr),e(Pr,GEr),e(Pr,Lt),g(GL,Lt,null),e(Lt,OEr),e(Lt,Wve),e(Wve,XEr),e(Lt,VEr),e(Lt,nm),e(nm,zEr),e(nm,Qve),e(Qve,WEr),e(nm,QEr),e(nm,Hve),e(Hve,HEr),e(nm,UEr),e(Lt,JEr),e(Lt,Uve),e(Uve,YEr),e(Lt,KEr),g(OL,Lt,null),e(Pr,ZEr),e(Pr,Bo),g(XL,Bo,null),e(Bo,e3r),e(Bo,Jve),e(Jve,o3r),e(Bo,r3r),e(Bo,kn),e(kn,t3r),e(kn,Yve),e(Yve,a3r),e(kn,n3r),e(kn,Kve),e(Kve,s3r),e(kn,l3r),e(kn,Zve),e(Zve,i3r),e(kn,d3r),e(Bo,c3r),e(Bo,ce),e(ce,PE),e(PE,eTe),e(eTe,m3r),e(PE,f3r),e(PE,BV),e(BV,g3r),e(PE,h3r),e(ce,u3r),e(ce,$E),e($E,oTe),e(oTe,p3r),e($E,_3r),e($E,xV),e(xV,b3r),e($E,v3r),e(ce,T3r),e(ce,IE),e(IE,rTe),e(rTe,F3r),e(IE,C3r),e(IE,kV),e(kV,M3r),e(IE,E3r),e(ce,y3r),e(ce,NE),e(NE,tTe),e(tTe,w3r),e(NE,A3r),e(NE,RV),e(RV,L3r),e(NE,B3r),e(ce,x3r),e(ce,DE),e(DE,aTe),e(aTe,k3r),e(DE,R3r),e(DE,SV),e(SV,S3r),e(DE,P3r),e(ce,$3r),e(ce,jE),e(jE,nTe),e(nTe,I3r),e(jE,N3r),e(jE,PV),e(PV,D3r),e(jE,j3r),e(ce,q3r),e(ce,qE),e(qE,sTe),e(sTe,G3r),e(qE,O3r),e(qE,$V),e($V,X3r),e(qE,V3r),e(ce,z3r),e(ce,GE),e(GE,lTe),e(lTe,W3r),e(GE,Q3r),e(GE,IV),e(IV,H3r),e(GE,U3r),e(ce,J3r),e(ce,OE),e(OE,iTe),e(iTe,Y3r),e(OE,K3r),e(OE,NV),e(NV,Z3r),e(OE,e5r),e(ce,o5r),e(ce,XE),e(XE,dTe),e(dTe,r5r),e(XE,t5r),e(XE,DV),e(DV,a5r),e(XE,n5r),e(ce,s5r),e(ce,VE),e(VE,cTe),e(cTe,l5r),e(VE,i5r),e(VE,jV),e(jV,d5r),e(VE,c5r),e(ce,m5r),e(ce,zE),e(zE,mTe),e(mTe,f5r),e(zE,g5r),e(zE,qV),e(qV,h5r),e(zE,u5r),e(Bo,p5r),e(Bo,fTe),e(fTe,_5r),e(Bo,b5r),g(VL,Bo,null),b(c,NRe,_),b(c,sm,_),e(sm,WE),e(WE,gTe),g(zL,gTe,null),e(sm,v5r),e(sm,hTe),e(hTe,T5r),b(c,DRe,_),b(c,$r,_),g(WL,$r,null),e($r,F5r),e($r,lm),e(lm,C5r),e(lm,uTe),e(uTe,M5r),e(lm,E5r),e(lm,pTe),e(pTe,y5r),e(lm,w5r),e($r,A5r),e($r,QL),e(QL,L5r),e(QL,_Te),e(_Te,B5r),e(QL,x5r),e($r,k5r),e($r,Bt),g(HL,Bt,null),e(Bt,R5r),e(Bt,bTe),e(bTe,S5r),e(Bt,P5r),e(Bt,im),e(im,$5r),e(im,vTe),e(vTe,I5r),e(im,N5r),e(im,TTe),e(TTe,D5r),e(im,j5r),e(Bt,q5r),e(Bt,FTe),e(FTe,G5r),e(Bt,O5r),g(UL,Bt,null),e($r,X5r),e($r,xo),g(JL,xo,null),e(xo,V5r),e(xo,CTe),e(CTe,z5r),e(xo,W5r),e(xo,Rn),e(Rn,Q5r),e(Rn,MTe),e(MTe,H5r),e(Rn,U5r),e(Rn,ETe),e(ETe,J5r),e(Rn,Y5r),e(Rn,yTe),e(yTe,K5r),e(Rn,Z5r),e(xo,eyr),e(xo,_e),e(_e,QE),e(QE,wTe),e(wTe,oyr),e(QE,ryr),e(QE,GV),e(GV,tyr),e(QE,ayr),e(_e,nyr),e(_e,HE),e(HE,ATe),e(ATe,syr),e(HE,lyr),e(HE,OV),e(OV,iyr),e(HE,dyr),e(_e,cyr),e(_e,UE),e(UE,LTe),e(LTe,myr),e(UE,fyr),e(UE,XV),e(XV,gyr),e(UE,hyr),e(_e,uyr),e(_e,JE),e(JE,BTe),e(BTe,pyr),e(JE,_yr),e(JE,VV),e(VV,byr),e(JE,vyr),e(_e,Tyr),e(_e,YE),e(YE,xTe),e(xTe,Fyr),e(YE,Cyr),e(YE,zV),e(zV,Myr),e(YE,Eyr),e(_e,yyr),e(_e,KE),e(KE,kTe),e(kTe,wyr),e(KE,Ayr),e(KE,WV),e(WV,Lyr),e(KE,Byr),e(_e,xyr),e(_e,ZE),e(ZE,RTe),e(RTe,kyr),e(ZE,Ryr),e(ZE,QV),e(QV,Syr),e(ZE,Pyr),e(_e,$yr),e(_e,e3),e(e3,STe),e(STe,Iyr),e(e3,Nyr),e(e3,HV),e(HV,Dyr),e(e3,jyr),e(_e,qyr),e(_e,o3),e(o3,PTe),e(PTe,Gyr),e(o3,Oyr),e(o3,UV),e(UV,Xyr),e(o3,Vyr),e(_e,zyr),e(_e,r3),e(r3,$Te),e($Te,Wyr),e(r3,Qyr),e(r3,JV),e(JV,Hyr),e(r3,Uyr),e(xo,Jyr),e(xo,ITe),e(ITe,Yyr),e(xo,Kyr),g(YL,xo,null),b(c,jRe,_),b(c,dm,_),e(dm,t3),e(t3,NTe),g(KL,NTe,null),e(dm,Zyr),e(dm,DTe),e(DTe,ewr),b(c,qRe,_),b(c,Ir,_),g(ZL,Ir,null),e(Ir,owr),e(Ir,cm),e(cm,rwr),e(cm,jTe),e(jTe,twr),e(cm,awr),e(cm,qTe),e(qTe,nwr),e(cm,swr),e(Ir,lwr),e(Ir,e7),e(e7,iwr),e(e7,GTe),e(GTe,dwr),e(e7,cwr),e(Ir,mwr),e(Ir,xt),g(o7,xt,null),e(xt,fwr),e(xt,OTe),e(OTe,gwr),e(xt,hwr),e(xt,mm),e(mm,uwr),e(mm,XTe),e(XTe,pwr),e(mm,_wr),e(mm,VTe),e(VTe,bwr),e(mm,vwr),e(xt,Twr),e(xt,zTe),e(zTe,Fwr),e(xt,Cwr),g(r7,xt,null),e(Ir,Mwr),e(Ir,ko),g(t7,ko,null),e(ko,Ewr),e(ko,WTe),e(WTe,ywr),e(ko,wwr),e(ko,Sn),e(Sn,Awr),e(Sn,QTe),e(QTe,Lwr),e(Sn,Bwr),e(Sn,HTe),e(HTe,xwr),e(Sn,kwr),e(Sn,UTe),e(UTe,Rwr),e(Sn,Swr),e(ko,Pwr),e(ko,Me),e(Me,a3),e(a3,JTe),e(JTe,$wr),e(a3,Iwr),e(a3,YV),e(YV,Nwr),e(a3,Dwr),e(Me,jwr),e(Me,n3),e(n3,YTe),e(YTe,qwr),e(n3,Gwr),e(n3,KV),e(KV,Owr),e(n3,Xwr),e(Me,Vwr),e(Me,s3),e(s3,KTe),e(KTe,zwr),e(s3,Wwr),e(s3,ZV),e(ZV,Qwr),e(s3,Hwr),e(Me,Uwr),e(Me,l3),e(l3,ZTe),e(ZTe,Jwr),e(l3,Ywr),e(l3,ez),e(ez,Kwr),e(l3,Zwr),e(Me,e6r),e(Me,i3),e(i3,e1e),e(e1e,o6r),e(i3,r6r),e(i3,oz),e(oz,t6r),e(i3,a6r),e(Me,n6r),e(Me,d3),e(d3,o1e),e(o1e,s6r),e(d3,l6r),e(d3,rz),e(rz,i6r),e(d3,d6r),e(Me,c6r),e(Me,c3),e(c3,r1e),e(r1e,m6r),e(c3,f6r),e(c3,tz),e(tz,g6r),e(c3,h6r),e(Me,u6r),e(Me,m3),e(m3,t1e),e(t1e,p6r),e(m3,_6r),e(m3,az),e(az,b6r),e(m3,v6r),e(Me,T6r),e(Me,f3),e(f3,a1e),e(a1e,F6r),e(f3,C6r),e(f3,nz),e(nz,M6r),e(f3,E6r),e(ko,y6r),e(ko,n1e),e(n1e,w6r),e(ko,A6r),g(a7,ko,null),b(c,GRe,_),b(c,fm,_),e(fm,g3),e(g3,s1e),g(n7,s1e,null),e(fm,L6r),e(fm,l1e),e(l1e,B6r),b(c,ORe,_),b(c,Nr,_),g(s7,Nr,null),e(Nr,x6r),e(Nr,gm),e(gm,k6r),e(gm,i1e),e(i1e,R6r),e(gm,S6r),e(gm,d1e),e(d1e,P6r),e(gm,$6r),e(Nr,I6r),e(Nr,l7),e(l7,N6r),e(l7,c1e),e(c1e,D6r),e(l7,j6r),e(Nr,q6r),e(Nr,kt),g(i7,kt,null),e(kt,G6r),e(kt,m1e),e(m1e,O6r),e(kt,X6r),e(kt,hm),e(hm,V6r),e(hm,f1e),e(f1e,z6r),e(hm,W6r),e(hm,g1e),e(g1e,Q6r),e(hm,H6r),e(kt,U6r),e(kt,h1e),e(h1e,J6r),e(kt,Y6r),g(d7,kt,null),e(Nr,K6r),e(Nr,Ro),g(c7,Ro,null),e(Ro,Z6r),e(Ro,u1e),e(u1e,eAr),e(Ro,oAr),e(Ro,Pn),e(Pn,rAr),e(Pn,p1e),e(p1e,tAr),e(Pn,aAr),e(Pn,_1e),e(_1e,nAr),e(Pn,sAr),e(Pn,b1e),e(b1e,lAr),e(Pn,iAr),e(Ro,dAr),e(Ro,be),e(be,h3),e(h3,v1e),e(v1e,cAr),e(h3,mAr),e(h3,sz),e(sz,fAr),e(h3,gAr),e(be,hAr),e(be,u3),e(u3,T1e),e(T1e,uAr),e(u3,pAr),e(u3,lz),e(lz,_Ar),e(u3,bAr),e(be,vAr),e(be,p3),e(p3,F1e),e(F1e,TAr),e(p3,FAr),e(p3,iz),e(iz,CAr),e(p3,MAr),e(be,EAr),e(be,_3),e(_3,C1e),e(C1e,yAr),e(_3,wAr),e(_3,dz),e(dz,AAr),e(_3,LAr),e(be,BAr),e(be,b3),e(b3,M1e),e(M1e,xAr),e(b3,kAr),e(b3,cz),e(cz,RAr),e(b3,SAr),e(be,PAr),e(be,v3),e(v3,E1e),e(E1e,$Ar),e(v3,IAr),e(v3,mz),e(mz,NAr),e(v3,DAr),e(be,jAr),e(be,T3),e(T3,y1e),e(y1e,qAr),e(T3,GAr),e(T3,fz),e(fz,OAr),e(T3,XAr),e(be,VAr),e(be,F3),e(F3,w1e),e(w1e,zAr),e(F3,WAr),e(F3,gz),e(gz,QAr),e(F3,HAr),e(be,UAr),e(be,C3),e(C3,A1e),e(A1e,JAr),e(C3,YAr),e(C3,hz),e(hz,KAr),e(C3,ZAr),e(be,e0r),e(be,M3),e(M3,L1e),e(L1e,o0r),e(M3,r0r),e(M3,uz),e(uz,t0r),e(M3,a0r),e(Ro,n0r),e(Ro,B1e),e(B1e,s0r),e(Ro,l0r),g(m7,Ro,null),b(c,XRe,_),b(c,um,_),e(um,E3),e(E3,x1e),g(f7,x1e,null),e(um,i0r),e(um,k1e),e(k1e,d0r),b(c,VRe,_),b(c,Dr,_),g(g7,Dr,null),e(Dr,c0r),e(Dr,pm),e(pm,m0r),e(pm,R1e),e(R1e,f0r),e(pm,g0r),e(pm,S1e),e(S1e,h0r),e(pm,u0r),e(Dr,p0r),e(Dr,h7),e(h7,_0r),e(h7,P1e),e(P1e,b0r),e(h7,v0r),e(Dr,T0r),e(Dr,Rt),g(u7,Rt,null),e(Rt,F0r),e(Rt,$1e),e($1e,C0r),e(Rt,M0r),e(Rt,_m),e(_m,E0r),e(_m,I1e),e(I1e,y0r),e(_m,w0r),e(_m,N1e),e(N1e,A0r),e(_m,L0r),e(Rt,B0r),e(Rt,D1e),e(D1e,x0r),e(Rt,k0r),g(p7,Rt,null),e(Dr,R0r),e(Dr,So),g(_7,So,null),e(So,S0r),e(So,j1e),e(j1e,P0r),e(So,$0r),e(So,$n),e($n,I0r),e($n,q1e),e(q1e,N0r),e($n,D0r),e($n,G1e),e(G1e,j0r),e($n,q0r),e($n,O1e),e(O1e,G0r),e($n,O0r),e(So,X0r),e(So,ve),e(ve,y3),e(y3,X1e),e(X1e,V0r),e(y3,z0r),e(y3,pz),e(pz,W0r),e(y3,Q0r),e(ve,H0r),e(ve,w3),e(w3,V1e),e(V1e,U0r),e(w3,J0r),e(w3,_z),e(_z,Y0r),e(w3,K0r),e(ve,Z0r),e(ve,A3),e(A3,z1e),e(z1e,eLr),e(A3,oLr),e(A3,bz),e(bz,rLr),e(A3,tLr),e(ve,aLr),e(ve,L3),e(L3,W1e),e(W1e,nLr),e(L3,sLr),e(L3,vz),e(vz,lLr),e(L3,iLr),e(ve,dLr),e(ve,B3),e(B3,Q1e),e(Q1e,cLr),e(B3,mLr),e(B3,Tz),e(Tz,fLr),e(B3,gLr),e(ve,hLr),e(ve,x3),e(x3,H1e),e(H1e,uLr),e(x3,pLr),e(x3,Fz),e(Fz,_Lr),e(x3,bLr),e(ve,vLr),e(ve,k3),e(k3,U1e),e(U1e,TLr),e(k3,FLr),e(k3,Cz),e(Cz,CLr),e(k3,MLr),e(ve,ELr),e(ve,R3),e(R3,J1e),e(J1e,yLr),e(R3,wLr),e(R3,Mz),e(Mz,ALr),e(R3,LLr),e(ve,BLr),e(ve,S3),e(S3,Y1e),e(Y1e,xLr),e(S3,kLr),e(S3,Ez),e(Ez,RLr),e(S3,SLr),e(ve,PLr),e(ve,P3),e(P3,K1e),e(K1e,$Lr),e(P3,ILr),e(P3,yz),e(yz,NLr),e(P3,DLr),e(So,jLr),e(So,Z1e),e(Z1e,qLr),e(So,GLr),g(b7,So,null),b(c,zRe,_),b(c,bm,_),e(bm,$3),e($3,eFe),g(v7,eFe,null),e(bm,OLr),e(bm,oFe),e(oFe,XLr),b(c,WRe,_),b(c,jr,_),g(T7,jr,null),e(jr,VLr),e(jr,vm),e(vm,zLr),e(vm,rFe),e(rFe,WLr),e(vm,QLr),e(vm,tFe),e(tFe,HLr),e(vm,ULr),e(jr,JLr),e(jr,F7),e(F7,YLr),e(F7,aFe),e(aFe,KLr),e(F7,ZLr),e(jr,e7r),e(jr,St),g(C7,St,null),e(St,o7r),e(St,nFe),e(nFe,r7r),e(St,t7r),e(St,Tm),e(Tm,a7r),e(Tm,sFe),e(sFe,n7r),e(Tm,s7r),e(Tm,lFe),e(lFe,l7r),e(Tm,i7r),e(St,d7r),e(St,iFe),e(iFe,c7r),e(St,m7r),g(M7,St,null),e(jr,f7r),e(jr,Po),g(E7,Po,null),e(Po,g7r),e(Po,dFe),e(dFe,h7r),e(Po,u7r),e(Po,In),e(In,p7r),e(In,cFe),e(cFe,_7r),e(In,b7r),e(In,mFe),e(mFe,v7r),e(In,T7r),e(In,fFe),e(fFe,F7r),e(In,C7r),e(Po,M7r),e(Po,Se),e(Se,I3),e(I3,gFe),e(gFe,E7r),e(I3,y7r),e(I3,wz),e(wz,w7r),e(I3,A7r),e(Se,L7r),e(Se,N3),e(N3,hFe),e(hFe,B7r),e(N3,x7r),e(N3,Az),e(Az,k7r),e(N3,R7r),e(Se,S7r),e(Se,D3),e(D3,uFe),e(uFe,P7r),e(D3,$7r),e(D3,Lz),e(Lz,I7r),e(D3,N7r),e(Se,D7r),e(Se,j3),e(j3,pFe),e(pFe,j7r),e(j3,q7r),e(j3,Bz),e(Bz,G7r),e(j3,O7r),e(Se,X7r),e(Se,q3),e(q3,_Fe),e(_Fe,V7r),e(q3,z7r),e(q3,xz),e(xz,W7r),e(q3,Q7r),e(Se,H7r),e(Se,G3),e(G3,bFe),e(bFe,U7r),e(G3,J7r),e(G3,kz),e(kz,Y7r),e(G3,K7r),e(Se,Z7r),e(Se,O3),e(O3,vFe),e(vFe,e8r),e(O3,o8r),e(O3,Rz),e(Rz,r8r),e(O3,t8r),e(Se,a8r),e(Se,X3),e(X3,TFe),e(TFe,n8r),e(X3,s8r),e(X3,Sz),e(Sz,l8r),e(X3,i8r),e(Po,d8r),e(Po,FFe),e(FFe,c8r),e(Po,m8r),g(y7,Po,null),b(c,QRe,_),b(c,Fm,_),e(Fm,V3),e(V3,CFe),g(w7,CFe,null),e(Fm,f8r),e(Fm,MFe),e(MFe,g8r),b(c,HRe,_),b(c,qr,_),g(A7,qr,null),e(qr,h8r),e(qr,Cm),e(Cm,u8r),e(Cm,EFe),e(EFe,p8r),e(Cm,_8r),e(Cm,yFe),e(yFe,b8r),e(Cm,v8r),e(qr,T8r),e(qr,L7),e(L7,F8r),e(L7,wFe),e(wFe,C8r),e(L7,M8r),e(qr,E8r),e(qr,Pt),g(B7,Pt,null),e(Pt,y8r),e(Pt,AFe),e(AFe,w8r),e(Pt,A8r),e(Pt,Mm),e(Mm,L8r),e(Mm,LFe),e(LFe,B8r),e(Mm,x8r),e(Mm,BFe),e(BFe,k8r),e(Mm,R8r),e(Pt,S8r),e(Pt,xFe),e(xFe,P8r),e(Pt,$8r),g(x7,Pt,null),e(qr,I8r),e(qr,$o),g(k7,$o,null),e($o,N8r),e($o,kFe),e(kFe,D8r),e($o,j8r),e($o,Nn),e(Nn,q8r),e(Nn,RFe),e(RFe,G8r),e(Nn,O8r),e(Nn,SFe),e(SFe,X8r),e(Nn,V8r),e(Nn,PFe),e(PFe,z8r),e(Nn,W8r),e($o,Q8r),e($o,Pe),e(Pe,z3),e(z3,$Fe),e($Fe,H8r),e(z3,U8r),e(z3,Pz),e(Pz,J8r),e(z3,Y8r),e(Pe,K8r),e(Pe,W3),e(W3,IFe),e(IFe,Z8r),e(W3,e9r),e(W3,$z),e($z,o9r),e(W3,r9r),e(Pe,t9r),e(Pe,Q3),e(Q3,NFe),e(NFe,a9r),e(Q3,n9r),e(Q3,Iz),e(Iz,s9r),e(Q3,l9r),e(Pe,i9r),e(Pe,H3),e(H3,DFe),e(DFe,d9r),e(H3,c9r),e(H3,Nz),e(Nz,m9r),e(H3,f9r),e(Pe,g9r),e(Pe,U3),e(U3,jFe),e(jFe,h9r),e(U3,u9r),e(U3,Dz),e(Dz,p9r),e(U3,_9r),e(Pe,b9r),e(Pe,J3),e(J3,qFe),e(qFe,v9r),e(J3,T9r),e(J3,jz),e(jz,F9r),e(J3,C9r),e(Pe,M9r),e(Pe,Y3),e(Y3,GFe),e(GFe,E9r),e(Y3,y9r),e(Y3,qz),e(qz,w9r),e(Y3,A9r),e(Pe,L9r),e(Pe,K3),e(K3,OFe),e(OFe,B9r),e(K3,x9r),e(K3,Gz),e(Gz,k9r),e(K3,R9r),e($o,S9r),e($o,XFe),e(XFe,P9r),e($o,$9r),g(R7,$o,null),b(c,URe,_),b(c,Em,_),e(Em,Z3),e(Z3,VFe),g(S7,VFe,null),e(Em,I9r),e(Em,zFe),e(zFe,N9r),b(c,JRe,_),b(c,Gr,_),g(P7,Gr,null),e(Gr,D9r),e(Gr,ym),e(ym,j9r),e(ym,WFe),e(WFe,q9r),e(ym,G9r),e(ym,QFe),e(QFe,O9r),e(ym,X9r),e(Gr,V9r),e(Gr,$7),e($7,z9r),e($7,HFe),e(HFe,W9r),e($7,Q9r),e(Gr,H9r),e(Gr,$t),g(I7,$t,null),e($t,U9r),e($t,UFe),e(UFe,J9r),e($t,Y9r),e($t,wm),e(wm,K9r),e(wm,JFe),e(JFe,Z9r),e(wm,eBr),e(wm,YFe),e(YFe,oBr),e(wm,rBr),e($t,tBr),e($t,KFe),e(KFe,aBr),e($t,nBr),g(N7,$t,null),e(Gr,sBr),e(Gr,Io),g(D7,Io,null),e(Io,lBr),e(Io,ZFe),e(ZFe,iBr),e(Io,dBr),e(Io,Dn),e(Dn,cBr),e(Dn,eCe),e(eCe,mBr),e(Dn,fBr),e(Dn,oCe),e(oCe,gBr),e(Dn,hBr),e(Dn,rCe),e(rCe,uBr),e(Dn,pBr),e(Io,_Br),e(Io,tCe),e(tCe,e5),e(e5,aCe),e(aCe,bBr),e(e5,vBr),e(e5,Oz),e(Oz,TBr),e(e5,FBr),e(Io,CBr),e(Io,nCe),e(nCe,MBr),e(Io,EBr),g(j7,Io,null),b(c,YRe,_),b(c,Am,_),e(Am,o5),e(o5,sCe),g(q7,sCe,null),e(Am,yBr),e(Am,lCe),e(lCe,wBr),b(c,KRe,_),b(c,Or,_),g(G7,Or,null),e(Or,ABr),e(Or,Lm),e(Lm,LBr),e(Lm,iCe),e(iCe,BBr),e(Lm,xBr),e(Lm,dCe),e(dCe,kBr),e(Lm,RBr),e(Or,SBr),e(Or,O7),e(O7,PBr),e(O7,cCe),e(cCe,$Br),e(O7,IBr),e(Or,NBr),e(Or,It),g(X7,It,null),e(It,DBr),e(It,mCe),e(mCe,jBr),e(It,qBr),e(It,Bm),e(Bm,GBr),e(Bm,fCe),e(fCe,OBr),e(Bm,XBr),e(Bm,gCe),e(gCe,VBr),e(Bm,zBr),e(It,WBr),e(It,hCe),e(hCe,QBr),e(It,HBr),g(V7,It,null),e(Or,UBr),e(Or,No),g(z7,No,null),e(No,JBr),e(No,uCe),e(uCe,YBr),e(No,KBr),e(No,jn),e(jn,ZBr),e(jn,pCe),e(pCe,exr),e(jn,oxr),e(jn,_Ce),e(_Ce,rxr),e(jn,txr),e(jn,bCe),e(bCe,axr),e(jn,nxr),e(No,sxr),e(No,W7),e(W7,r5),e(r5,vCe),e(vCe,lxr),e(r5,ixr),e(r5,Xz),e(Xz,dxr),e(r5,cxr),e(W7,mxr),e(W7,t5),e(t5,TCe),e(TCe,fxr),e(t5,gxr),e(t5,Vz),e(Vz,hxr),e(t5,uxr),e(No,pxr),e(No,FCe),e(FCe,_xr),e(No,bxr),g(Q7,No,null),b(c,ZRe,_),b(c,xm,_),e(xm,a5),e(a5,CCe),g(H7,CCe,null),e(xm,vxr),e(xm,MCe),e(MCe,Txr),b(c,eSe,_),b(c,Xr,_),g(U7,Xr,null),e(Xr,Fxr),e(Xr,km),e(km,Cxr),e(km,ECe),e(ECe,Mxr),e(km,Exr),e(km,yCe),e(yCe,yxr),e(km,wxr),e(Xr,Axr),e(Xr,J7),e(J7,Lxr),e(J7,wCe),e(wCe,Bxr),e(J7,xxr),e(Xr,kxr),e(Xr,Nt),g(Y7,Nt,null),e(Nt,Rxr),e(Nt,ACe),e(ACe,Sxr),e(Nt,Pxr),e(Nt,Rm),e(Rm,$xr),e(Rm,LCe),e(LCe,Ixr),e(Rm,Nxr),e(Rm,BCe),e(BCe,Dxr),e(Rm,jxr),e(Nt,qxr),e(Nt,xCe),e(xCe,Gxr),e(Nt,Oxr),g(K7,Nt,null),e(Xr,Xxr),e(Xr,Do),g(Z7,Do,null),e(Do,Vxr),e(Do,kCe),e(kCe,zxr),e(Do,Wxr),e(Do,qn),e(qn,Qxr),e(qn,RCe),e(RCe,Hxr),e(qn,Uxr),e(qn,SCe),e(SCe,Jxr),e(qn,Yxr),e(qn,PCe),e(PCe,Kxr),e(qn,Zxr),e(Do,ekr),e(Do,$Ce),e($Ce,n5),e(n5,ICe),e(ICe,okr),e(n5,rkr),e(n5,zz),e(zz,tkr),e(n5,akr),e(Do,nkr),e(Do,NCe),e(NCe,skr),e(Do,lkr),g(e8,Do,null),oSe=!0},p(c,[_]){const o8={};_&2&&(o8.$$scope={dirty:_,ctx:c}),qm.$set(o8);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:c}),xh.$set(DCe);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:c}),Gh.$set(jCe)},i(c){oSe||(h(me.$$.fragment,c),h(qa.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(qm.$$.fragment,c),h(my.$$.fragment,c),h(fy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(By.$$.fragment,c),h(xh.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Iy.$$.fragment,c),h(Gh.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(h0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(jL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(D7.$$.fragment,c),h(j7.$$.fragment,c),h(q7.$$.fragment,c),h(G7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),h(Z7.$$.fragment,c),h(e8.$$.fragment,c),oSe=!0)},o(c){u(me.$$.fragment,c),u(qa.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(qm.$$.fragment,c),u(my.$$.fragment,c),u(fy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(by.$$.fragment,c),u(vy.$$.fragment,c),u(Cy.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(yy.$$.fragment,c),u(wy.$$.fragment,c),u(By.$$.fragment,c),u(xh.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Ry.$$.fragment,c),u(Sy.$$.fragment,c),u(Iy.$$.fragment,c),u(Gh.$$.fragment,c),u(Ny.$$.fragment,c),u(Dy.$$.fragment,c),u(jy.$$.fragment,c),u(qy.$$.fragment,c),u(Oy.$$.fragment,c),u(Xy.$$.fragment,c),u(Vy.$$.fragment,c),u(zy.$$.fragment,c),u(Wy.$$.fragment,c),u(Qy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(Zy.$$.fragment,c),u(ew.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(nw.$$.fragment,c),u(sw.$$.fragment,c),u(lw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(fw.$$.fragment,c),u(gw.$$.fragment,c),u(hw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(vw.$$.fragment,c),u(Tw.$$.fragment,c),u(Fw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(ww.$$.fragment,c),u(Aw.$$.fragment,c),u(Lw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Sw.$$.fragment,c),u(Pw.$$.fragment,c),u($w.$$.fragment,c),u(Nw.$$.fragment,c),u(Dw.$$.fragment,c),u(jw.$$.fragment,c),u(qw.$$.fragment,c),u(Gw.$$.fragment,c),u(Ow.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Qw.$$.fragment,c),u(Hw.$$.fragment,c),u(Uw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(a6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(F6.$$.fragment,c),u(C6.$$.fragment,c),u(M6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(L6.$$.fragment,c),u(B6.$$.fragment,c),u(x6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(N6.$$.fragment,c),u(j6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(X6.$$.fragment,c),u(V6.$$.fragment,c),u(W6.$$.fragment,c),u(Q6.$$.fragment,c),u(H6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(vA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(MA.$$.fragment,c),u(EA.$$.fragment,c),u(yA.$$.fragment,c),u(wA.$$.fragment,c),u(LA.$$.fragment,c),u(BA.$$.fragment,c),u(xA.$$.fragment,c),u(RA.$$.fragment,c),u(SA.$$.fragment,c),u(PA.$$.fragment,c),u(IA.$$.fragment,c),u(NA.$$.fragment,c),u(DA.$$.fragment,c),u(jA.$$.fragment,c),u(qA.$$.fragment,c),u(GA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(WA.$$.fragment,c),u(QA.$$.fragment,c),u(HA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e0.$$.fragment,c),u(o0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(l0.$$.fragment,c),u(i0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(h0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(T0.$$.fragment,c),u(F0.$$.fragment,c),u(C0.$$.fragment,c),u(M0.$$.fragment,c),u(y0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(L0.$$.fragment,c),u(B0.$$.fragment,c),u(x0.$$.fragment,c),u(R0.$$.fragment,c),u(S0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(I0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(q0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(X0.$$.fragment,c),u(V0.$$.fragment,c),u(W0.$$.fragment,c),u(Q0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(J0.$$.fragment,c),u(Y0.$$.fragment,c),u(Z0.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(mL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(bL.$$.fragment,c),u(TL.$$.fragment,c),u(FL.$$.fragment,c),u(CL.$$.fragment,c),u(ML.$$.fragment,c),u(EL.$$.fragment,c),u(yL.$$.fragment,c),u(AL.$$.fragment,c),u(LL.$$.fragment,c),u(BL.$$.fragment,c),u(xL.$$.fragment,c),u(kL.$$.fragment,c),u(RL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(NL.$$.fragment,c),u(DL.$$.fragment,c),u(jL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(XL.$$.fragment,c),u(VL.$$.fragment,c),u(zL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(a7.$$.fragment,c),u(n7.$$.fragment,c),u(s7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(v7.$$.fragment,c),u(T7.$$.fragment,c),u(C7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(y7.$$.fragment,c),u(w7.$$.fragment,c),u(A7.$$.fragment,c),u(B7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(R7.$$.fragment,c),u(S7.$$.fragment,c),u(P7.$$.fragment,c),u(I7.$$.fragment,c),u(N7.$$.fragment,c),u(D7.$$.fragment,c),u(j7.$$.fragment,c),u(q7.$$.fragment,c),u(G7.$$.fragment,c),u(X7.$$.fragment,c),u(V7.$$.fragment,c),u(z7.$$.fragment,c),u(Q7.$$.fragment,c),u(H7.$$.fragment,c),u(U7.$$.fragment,c),u(Y7.$$.fragment,c),u(K7.$$.fragment,c),u(Z7.$$.fragment,c),u(e8.$$.fragment,c),oSe=!1},d(c){t(K),c&&t(io),c&&t(de),p(me),c&&t($m),c&&t(ma),c&&t(Be),c&&t(co),c&&t(Nm),p(qa,c),c&&t(mo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(eke),c&&t(Xi),p(dy),c&&t(oke),c&&t(zn),c&&t(rke),p(cy,c),c&&t(tke),c&&t(t9),c&&t(ake),p(qm,c),c&&t(nke),c&&t(Vi),p(my),c&&t(ske),c&&t(Wo),p(fy),p(uy),p(py),p(_y),c&&t(lke),c&&t(Wi),p(by),c&&t(ike),c&&t(Qo),p(vy),p(Cy),p(My),p(Ey),c&&t(dke),c&&t(Qi),p(yy),c&&t(cke),c&&t(Ho),p(wy),p(By),p(xh),p(xy),p(ky),c&&t(mke),c&&t(Hi),p(Ry),c&&t(fke),c&&t(Uo),p(Sy),p(Iy),p(Gh),p(Ny),p(Dy),c&&t(gke),c&&t(Ji),p(jy),c&&t(hke),c&&t(Jo),p(qy),p(Oy),p(Xy),p(Vy),p(zy),c&&t(uke),c&&t(Zi),p(Wy),c&&t(pke),c&&t(Yo),p(Qy),p(Uy),p(Jy),p(Yy),p(Ky),c&&t(_ke),c&&t(rd),p(Zy),c&&t(bke),c&&t(Ko),p(ew),p(rw),p(tw),p(aw),p(nw),c&&t(vke),c&&t(nd),p(sw),c&&t(Tke),c&&t(Zo),p(lw),p(dw),p(cw),p(mw),p(fw),c&&t(Fke),c&&t(id),p(gw),c&&t(Cke),c&&t(er),p(hw),p(pw),p(_w),p(bw),p(vw),c&&t(Mke),c&&t(md),p(Tw),c&&t(Eke),c&&t(or),p(Fw),p(Mw),p(Ew),p(yw),p(ww),c&&t(yke),c&&t(hd),p(Aw),c&&t(wke),c&&t(rr),p(Lw),p(xw),p(kw),p(Rw),p(Sw),c&&t(Ake),c&&t(_d),p(Pw),c&&t(Lke),c&&t(tr),p($w),p(Nw),p(Dw),p(jw),p(qw),c&&t(Bke),c&&t(Td),p(Gw),c&&t(xke),c&&t(ar),p(Ow),p(Vw),p(zw),p(Ww),p(Qw),c&&t(kke),c&&t(Md),p(Hw),c&&t(Rke),c&&t(nr),p(Uw),p(Yw),p(Kw),p(Zw),p(e6),c&&t(Ske),c&&t(wd),p(o6),c&&t(Pke),c&&t(sr),p(r6),p(a6),p(n6),p(s6),p(l6),c&&t($ke),c&&t(Bd),p(i6),c&&t(Ike),c&&t(lr),p(d6),p(m6),p(f6),p(g6),p(h6),c&&t(Nke),c&&t(Rd),p(u6),c&&t(Dke),c&&t(ir),p(p6),p(b6),p(v6),p(T6),p(F6),c&&t(jke),c&&t($d),p(C6),c&&t(qke),c&&t(dr),p(M6),p(y6),p(w6),p(A6),p(L6),c&&t(Gke),c&&t(Dd),p(B6),c&&t(Oke),c&&t(cr),p(x6),p(R6),p(S6),p(P6),p($6),c&&t(Xke),c&&t(Gd),p(I6),c&&t(Vke),c&&t(mr),p(N6),p(j6),p(q6),p(G6),p(O6),c&&t(zke),c&&t(Vd),p(X6),c&&t(Wke),c&&t(fr),p(V6),p(W6),p(Q6),p(H6),p(J6),c&&t(Qke),c&&t(Qd),p(Y6),c&&t(Hke),c&&t(gr),p(K6),p(eA),p(oA),p(rA),p(tA),c&&t(Uke),c&&t(Jd),p(aA),c&&t(Jke),c&&t(hr),p(nA),p(lA),p(iA),p(dA),p(cA),c&&t(Yke),c&&t(ec),p(mA),c&&t(Kke),c&&t(ur),p(fA),p(hA),p(uA),p(pA),p(_A),c&&t(Zke),c&&t(tc),p(bA),c&&t(eRe),c&&t(pr),p(vA),p(FA),p(CA),p(MA),p(EA),c&&t(oRe),c&&t(sc),p(yA),c&&t(rRe),c&&t(_r),p(wA),p(LA),p(BA),p(xA),p(RA),c&&t(tRe),c&&t(dc),p(SA),c&&t(aRe),c&&t(br),p(PA),p(IA),p(NA),p(DA),p(jA),c&&t(nRe),c&&t(fc),p(qA),c&&t(sRe),c&&t(vr),p(GA),p(XA),p(VA),p(zA),p(WA),c&&t(lRe),c&&t(uc),p(QA),c&&t(iRe),c&&t(Tr),p(HA),p(JA),p(YA),p(KA),p(ZA),c&&t(dRe),c&&t(bc),p(e0),c&&t(cRe),c&&t(Fr),p(o0),p(t0),p(a0),p(n0),p(s0),c&&t(mRe),c&&t(Fc),p(l0),c&&t(fRe),c&&t(Cr),p(i0),p(c0),p(m0),p(f0),p(h0),c&&t(gRe),c&&t(Ec),p(u0),c&&t(hRe),c&&t(Mr),p(p0),p(b0),p(v0),p(T0),p(F0),c&&t(uRe),c&&t(Ac),p(C0),c&&t(pRe),c&&t(Er),p(M0),p(y0),p(w0),p(A0),p(L0),c&&t(_Re),c&&t(xc),p(B0),c&&t(bRe),c&&t(yr),p(x0),p(R0),p(S0),p(P0),p($0),c&&t(vRe),c&&t(Sc),p(I0),c&&t(TRe),c&&t(wr),p(N0),p(j0),p(q0),p(G0),p(O0),c&&t(FRe),c&&t(Ic),p(X0),c&&t(CRe),c&&t(Ar),p(V0),p(W0),p(Q0),p(H0),p(U0),c&&t(MRe),c&&t(jc),p(J0),c&&t(ERe),c&&t(Lr),p(Y0),p(Z0),p(eL),p(oL),p(rL),c&&t(yRe),c&&t(Oc),p(tL),c&&t(wRe),c&&t(Br),p(aL),p(sL),p(lL),p(iL),p(dL),c&&t(ARe),c&&t(zc),p(cL),c&&t(LRe),c&&t(xr),p(mL),p(gL),p(hL),p(uL),p(pL),c&&t(BRe),c&&t(Hc),p(_L),c&&t(xRe),c&&t(kr),p(bL),p(TL),p(FL),p(CL),p(ML),c&&t(kRe),c&&t(Yc),p(EL),c&&t(RRe),c&&t(Rr),p(yL),p(AL),p(LL),p(BL),p(xL),c&&t(SRe),c&&t(em),p(kL),c&&t(PRe),c&&t(Sr),p(RL),p(PL),p($L),p(IL),p(NL),c&&t($Re),c&&t(tm),p(DL),c&&t(IRe),c&&t(Pr),p(jL),p(GL),p(OL),p(XL),p(VL),c&&t(NRe),c&&t(sm),p(zL),c&&t(DRe),c&&t($r),p(WL),p(HL),p(UL),p(JL),p(YL),c&&t(jRe),c&&t(dm),p(KL),c&&t(qRe),c&&t(Ir),p(ZL),p(o7),p(r7),p(t7),p(a7),c&&t(GRe),c&&t(fm),p(n7),c&&t(ORe),c&&t(Nr),p(s7),p(i7),p(d7),p(c7),p(m7),c&&t(XRe),c&&t(um),p(f7),c&&t(VRe),c&&t(Dr),p(g7),p(u7),p(p7),p(_7),p(b7),c&&t(zRe),c&&t(bm),p(v7),c&&t(WRe),c&&t(jr),p(T7),p(C7),p(M7),p(E7),p(y7),c&&t(QRe),c&&t(Fm),p(w7),c&&t(HRe),c&&t(qr),p(A7),p(B7),p(x7),p(k7),p(R7),c&&t(URe),c&&t(Em),p(S7),c&&t(JRe),c&&t(Gr),p(P7),p(I7),p(N7),p(D7),p(j7),c&&t(YRe),c&&t(Am),p(q7),c&&t(KRe),c&&t(Or),p(G7),p(X7),p(V7),p(z7),p(Q7),c&&t(ZRe),c&&t(xm),p(H7),c&&t(eSe),c&&t(Xr),p(U7),p(Y7),p(K7),p(Z7),p(e8)}}}const hEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function uEt(Pm){return dEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class FEt extends nEt{constructor(K){super();sEt(this,K,uEt,gEt,lEt,{})}}export{FEt as default,hEt as metadata};
