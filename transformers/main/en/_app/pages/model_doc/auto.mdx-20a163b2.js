import{S as j6t,i as D6t,s as G6t,e as a,k as l,w as m,t as o,M as O6t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as V6t}from"../../chunks/vendor-6b77c823.js";import{T as JPr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function X6t(qm){let Z,io,ce,Ce,lo,he,Me,Xo,ji,Nm,ma,Di,Gi,xw,jm,xe,co,Oi,On,kw,Vn,Xn,Sw,Vi,zn,Rw,Xi,Dm,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),ji=a("code"),Nm=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Gi=o('"new-model"'),xw=o(")."),jm=l(),xe=a("p"),co=o("Likewise, if your "),Oi=a("code"),On=o("NewModel"),kw=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),Sw=o(`, make sure its
`),Vi=a("code"),zn=o("config_class"),Rw=o(` attribute is set to the same class you use when registering the model (here
`),Xi=a("code"),Dm=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){Z=n(mo,"P",{});var _e=s(Z);io=r(_e,"If your "),ce=n(_e,"CODE",{});var E9=s(ce);Ce=r(E9,"NewModelConfig"),E9.forEach(t),lo=r(_e," is a subclass of "),he=n(_e,"CODE",{});var zi=s(he);Me=r(zi,"PretrainedConfig"),zi.forEach(t),Xo=r(_e,`, make sure its
`),ji=n(_e,"CODE",{});var C9=s(ji);Nm=r(C9,"model_type"),C9.forEach(t),ma=r(_e," attribute is set to the same key you use when registering the config (here "),Di=n(_e,"CODE",{});var w9=s(Di);Gi=r(w9,'"new-model"'),w9.forEach(t),xw=r(_e,")."),_e.forEach(t),jm=i(mo),xe=n(mo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Oi=n(zo,"CODE",{});var Ga=s(Oi);On=r(Ga,"NewModel"),Ga.forEach(t),kw=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var A9=s(Vn);Xn=r(A9,"PreTrainedModel"),A9.forEach(t),Sw=r(zo,`, make sure its
`),Vi=n(zo,"CODE",{});var Gm=s(Vi);zn=r(Gm,"config_class"),Gm.forEach(t),Rw=r(zo,` attribute is set to the same class you use when registering the model (here
`),Xi=n(zo,"CODE",{});var y9=s(Xi);Dm=r(y9,"NewModelConfig"),y9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,_e){b(mo,Z,_e),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,ji),e(ji,Nm),e(Z,ma),e(Z,Di),e(Di,Gi),e(Z,xw),b(mo,jm,_e),b(mo,xe,_e),e(xe,co),e(xe,Oi),e(Oi,On),e(xe,kw),e(xe,Vn),e(Vn,Xn),e(xe,Sw),e(xe,Vi),e(Vi,zn),e(xe,Rw),e(xe,Xi),e(Xi,Dm),e(xe,Da)},d(mo){mo&&t(Z),mo&&t(jm),mo&&t(xe)}}}function z6t(qm){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function Q6t(qm){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function W6t(qm){let Z,io,ce,Ce,lo,he,Me,Xo,ji,Nm,ma,Di,Gi,xw,jm,xe,co,Oi,On,kw,Vn,Xn,Sw,Vi,zn,Rw,Xi,Dm,Da,mo,_e,E9,zi,C9,w9,zo,Ga,A9,Gm,y9,JIe,qRe,Qi,Om,uY,Bw,YIe,pY,KIe,NRe,Qn,ZIe,_Y,eqe,oqe,bY,rqe,tqe,jRe,Pw,DRe,L9,aqe,GRe,Vm,ORe,Wi,Xm,vY,$w,nqe,FY,sqe,VRe,Qo,Iw,lqe,qw,iqe,x9,dqe,cqe,mqe,Nw,fqe,TY,gqe,hqe,uqe,fo,jw,pqe,MY,_qe,bqe,Hi,vqe,EY,Fqe,Tqe,CY,Mqe,Eqe,Cqe,v,zm,wY,wqe,Aqe,k9,yqe,Lqe,xqe,Qm,AY,kqe,Sqe,S9,Rqe,Bqe,Pqe,Wm,yY,$qe,Iqe,R9,qqe,Nqe,jqe,Hm,LY,Dqe,Gqe,B9,Oqe,Vqe,Xqe,Um,xY,zqe,Qqe,P9,Wqe,Hqe,Uqe,Jm,kY,Jqe,Yqe,$9,Kqe,Zqe,eNe,Ym,SY,oNe,rNe,I9,tNe,aNe,nNe,Km,RY,sNe,lNe,q9,iNe,dNe,cNe,Zm,BY,mNe,fNe,N9,gNe,hNe,uNe,ef,PY,pNe,_Ne,j9,bNe,vNe,FNe,of,$Y,TNe,MNe,D9,ENe,CNe,wNe,rf,IY,ANe,yNe,G9,LNe,xNe,kNe,tf,qY,SNe,RNe,O9,BNe,PNe,$Ne,af,NY,INe,qNe,V9,NNe,jNe,DNe,nf,jY,GNe,ONe,X9,VNe,XNe,zNe,sf,DY,QNe,WNe,z9,HNe,UNe,JNe,lf,GY,YNe,KNe,Q9,ZNe,eje,oje,df,OY,rje,tje,W9,aje,nje,sje,cf,VY,lje,ije,H9,dje,cje,mje,mf,XY,fje,gje,U9,hje,uje,pje,ff,zY,_je,bje,J9,vje,Fje,Tje,gf,QY,Mje,Eje,Y9,Cje,wje,Aje,hf,WY,yje,Lje,K9,xje,kje,Sje,uf,HY,Rje,Bje,Z9,Pje,$je,Ije,pf,UY,qje,Nje,ex,jje,Dje,Gje,_f,JY,Oje,Vje,ox,Xje,zje,Qje,bf,YY,Wje,Hje,rx,Uje,Jje,Yje,vf,KY,Kje,Zje,tx,eDe,oDe,rDe,Ff,ZY,tDe,aDe,ax,nDe,sDe,lDe,Tf,eK,iDe,dDe,nx,cDe,mDe,fDe,Mf,oK,gDe,hDe,sx,uDe,pDe,_De,Ef,rK,bDe,vDe,lx,FDe,TDe,MDe,Cf,tK,EDe,CDe,ix,wDe,ADe,yDe,wf,aK,LDe,xDe,dx,kDe,SDe,RDe,Af,nK,BDe,PDe,cx,$De,IDe,qDe,yf,sK,NDe,jDe,mx,DDe,GDe,ODe,Lf,lK,VDe,XDe,fx,zDe,QDe,WDe,xf,iK,HDe,UDe,gx,JDe,YDe,KDe,kf,dK,ZDe,eGe,hx,oGe,rGe,tGe,Sf,cK,aGe,nGe,ux,sGe,lGe,iGe,Rf,mK,dGe,cGe,px,mGe,fGe,gGe,Bf,fK,hGe,uGe,_x,pGe,_Ge,bGe,Pf,gK,vGe,FGe,bx,TGe,MGe,EGe,$f,hK,CGe,wGe,vx,AGe,yGe,LGe,If,uK,xGe,kGe,Fx,SGe,RGe,BGe,qf,pK,PGe,$Ge,Tx,IGe,qGe,NGe,Nf,_K,jGe,DGe,Mx,GGe,OGe,VGe,jf,bK,XGe,zGe,Ex,QGe,WGe,HGe,Df,vK,UGe,JGe,Cx,YGe,KGe,ZGe,Gf,FK,eOe,oOe,wx,rOe,tOe,aOe,Of,TK,nOe,sOe,Ax,lOe,iOe,dOe,Vf,MK,cOe,mOe,yx,fOe,gOe,hOe,Xf,EK,uOe,pOe,Lx,_Oe,bOe,vOe,zf,CK,FOe,TOe,xx,MOe,EOe,COe,Qf,wK,wOe,AOe,kx,yOe,LOe,xOe,Wf,AK,kOe,SOe,Sx,ROe,BOe,POe,Hf,yK,$Oe,IOe,Rx,qOe,NOe,jOe,Uf,LK,DOe,GOe,Bx,OOe,VOe,XOe,Jf,xK,zOe,QOe,Px,WOe,HOe,UOe,Yf,kK,JOe,YOe,$x,KOe,ZOe,eVe,Kf,SK,oVe,rVe,Ix,tVe,aVe,nVe,Zf,RK,sVe,lVe,qx,iVe,dVe,cVe,eg,BK,mVe,fVe,Nx,gVe,hVe,uVe,og,PK,pVe,_Ve,jx,bVe,vVe,FVe,rg,$K,TVe,MVe,Dx,EVe,CVe,wVe,tg,IK,AVe,yVe,Gx,LVe,xVe,kVe,ag,qK,SVe,RVe,Ox,BVe,PVe,$Ve,ng,NK,IVe,qVe,Vx,NVe,jVe,DVe,sg,jK,GVe,OVe,Xx,VVe,XVe,zVe,lg,DK,QVe,WVe,zx,HVe,UVe,JVe,ig,GK,YVe,KVe,Qx,ZVe,eXe,oXe,dg,OK,rXe,tXe,Wx,aXe,nXe,sXe,cg,VK,lXe,iXe,Hx,dXe,cXe,mXe,mg,XK,fXe,gXe,Ux,hXe,uXe,pXe,fg,zK,_Xe,bXe,Jx,vXe,FXe,TXe,gg,QK,MXe,EXe,Yx,CXe,wXe,AXe,hg,WK,yXe,LXe,Kx,xXe,kXe,SXe,ug,HK,RXe,BXe,Zx,PXe,$Xe,IXe,pg,UK,qXe,NXe,ek,jXe,DXe,GXe,_g,JK,OXe,VXe,ok,XXe,zXe,QXe,bg,YK,WXe,HXe,rk,UXe,JXe,YXe,vg,KK,KXe,ZXe,tk,eze,oze,rze,Fg,ZK,tze,aze,ak,nze,sze,lze,Tg,eZ,ize,dze,nk,cze,mze,fze,Mg,oZ,gze,hze,sk,uze,pze,_ze,Eg,rZ,bze,vze,lk,Fze,Tze,Mze,Cg,tZ,Eze,Cze,ik,wze,Aze,yze,wg,aZ,Lze,xze,dk,kze,Sze,Rze,Ag,nZ,Bze,Pze,ck,$ze,Ize,qze,yg,sZ,Nze,jze,mk,Dze,Gze,Oze,Lg,lZ,Vze,Xze,fk,zze,Qze,Wze,xg,iZ,Hze,Uze,gk,Jze,Yze,Kze,kg,dZ,Zze,eQe,hk,oQe,rQe,tQe,Sg,cZ,aQe,nQe,uk,sQe,lQe,iQe,Rg,mZ,dQe,cQe,pk,mQe,fQe,gQe,Bg,fZ,hQe,uQe,_k,pQe,_Qe,bQe,Pg,gZ,vQe,FQe,bk,TQe,MQe,EQe,$g,hZ,CQe,wQe,vk,AQe,yQe,LQe,Ig,uZ,xQe,kQe,Fk,SQe,RQe,BQe,qg,pZ,PQe,$Qe,Tk,IQe,qQe,NQe,Ng,_Z,jQe,DQe,Mk,GQe,OQe,VQe,jg,bZ,XQe,zQe,Ek,QQe,WQe,HQe,vZ,UQe,JQe,Dw,YQe,Dg,Gw,KQe,FZ,ZQe,XRe,Ui,Gg,TZ,Ow,eWe,MZ,oWe,zRe,Wo,Vw,rWe,Xw,tWe,Ck,aWe,nWe,sWe,zw,lWe,EZ,iWe,dWe,cWe,go,Qw,mWe,CZ,fWe,gWe,Oa,hWe,wZ,uWe,pWe,AZ,_We,bWe,yZ,vWe,FWe,TWe,E,Wn,LZ,MWe,EWe,wk,CWe,wWe,Ak,AWe,yWe,LWe,Hn,xZ,xWe,kWe,yk,SWe,RWe,Lk,BWe,PWe,$We,Un,kZ,IWe,qWe,xk,NWe,jWe,kk,DWe,GWe,OWe,Og,SZ,VWe,XWe,Sk,zWe,QWe,WWe,Jn,RZ,HWe,UWe,Rk,JWe,YWe,Bk,KWe,ZWe,eHe,Vg,BZ,oHe,rHe,Pk,tHe,aHe,nHe,Xg,PZ,sHe,lHe,$k,iHe,dHe,cHe,zg,$Z,mHe,fHe,Ik,gHe,hHe,uHe,Yn,IZ,pHe,_He,qk,bHe,vHe,Nk,FHe,THe,MHe,Kn,qZ,EHe,CHe,jk,wHe,AHe,Dk,yHe,LHe,xHe,Zn,NZ,kHe,SHe,Gk,RHe,BHe,Ok,PHe,$He,IHe,Qg,jZ,qHe,NHe,Vk,jHe,DHe,GHe,Wg,DZ,OHe,VHe,Xk,XHe,zHe,QHe,es,GZ,WHe,HHe,zk,UHe,JHe,Qk,YHe,KHe,ZHe,Hg,OZ,eUe,oUe,Wk,rUe,tUe,aUe,os,VZ,nUe,sUe,Hk,lUe,iUe,Uk,dUe,cUe,mUe,rs,XZ,fUe,gUe,Jk,hUe,uUe,Yk,pUe,_Ue,bUe,ts,zZ,vUe,FUe,Kk,TUe,MUe,QZ,EUe,CUe,wUe,Ug,WZ,AUe,yUe,Zk,LUe,xUe,kUe,as,HZ,SUe,RUe,eS,BUe,PUe,oS,$Ue,IUe,qUe,ns,UZ,NUe,jUe,rS,DUe,GUe,tS,OUe,VUe,XUe,ss,JZ,zUe,QUe,aS,WUe,HUe,nS,UUe,JUe,YUe,ls,YZ,KUe,ZUe,sS,eJe,oJe,lS,rJe,tJe,aJe,is,KZ,nJe,sJe,iS,lJe,iJe,dS,dJe,cJe,mJe,Jg,ZZ,fJe,gJe,cS,hJe,uJe,pJe,ds,eee,_Je,bJe,mS,vJe,FJe,fS,TJe,MJe,EJe,Yg,oee,CJe,wJe,gS,AJe,yJe,LJe,cs,ree,xJe,kJe,hS,SJe,RJe,uS,BJe,PJe,$Je,ms,tee,IJe,qJe,pS,NJe,jJe,_S,DJe,GJe,OJe,fs,aee,VJe,XJe,bS,zJe,QJe,vS,WJe,HJe,UJe,gs,nee,JJe,YJe,FS,KJe,ZJe,TS,eYe,oYe,rYe,hs,see,tYe,aYe,MS,nYe,sYe,ES,lYe,iYe,dYe,Kg,lee,cYe,mYe,CS,fYe,gYe,hYe,us,iee,uYe,pYe,wS,_Ye,bYe,AS,vYe,FYe,TYe,ps,dee,MYe,EYe,yS,CYe,wYe,LS,AYe,yYe,LYe,_s,cee,xYe,kYe,xS,SYe,RYe,kS,BYe,PYe,$Ye,bs,mee,IYe,qYe,SS,NYe,jYe,RS,DYe,GYe,OYe,vs,fee,VYe,XYe,BS,zYe,QYe,PS,WYe,HYe,UYe,Fs,gee,JYe,YYe,$S,KYe,ZYe,IS,eKe,oKe,rKe,Zg,hee,tKe,aKe,qS,nKe,sKe,lKe,Ts,uee,iKe,dKe,NS,cKe,mKe,jS,fKe,gKe,hKe,eh,pee,uKe,pKe,DS,_Ke,bKe,vKe,oh,_ee,FKe,TKe,GS,MKe,EKe,CKe,Ms,bee,wKe,AKe,OS,yKe,LKe,VS,xKe,kKe,SKe,Es,vee,RKe,BKe,XS,PKe,$Ke,zS,IKe,qKe,NKe,rh,Fee,jKe,DKe,QS,GKe,OKe,VKe,Cs,Tee,XKe,zKe,WS,QKe,WKe,HS,HKe,UKe,JKe,ws,Mee,YKe,KKe,US,ZKe,eZe,JS,oZe,rZe,tZe,As,Eee,aZe,nZe,YS,sZe,lZe,KS,iZe,dZe,cZe,ys,Cee,mZe,fZe,ZS,gZe,hZe,eR,uZe,pZe,_Ze,Ls,wee,bZe,vZe,oR,FZe,TZe,rR,MZe,EZe,CZe,th,Aee,wZe,AZe,tR,yZe,LZe,xZe,ah,yee,kZe,SZe,aR,RZe,BZe,PZe,nh,Lee,$Ze,IZe,nR,qZe,NZe,jZe,sh,xee,DZe,GZe,sR,OZe,VZe,XZe,xs,kee,zZe,QZe,lR,WZe,HZe,iR,UZe,JZe,YZe,lh,See,KZe,ZZe,dR,eeo,oeo,reo,ks,Ree,teo,aeo,cR,neo,seo,mR,leo,ieo,deo,Ss,Bee,ceo,meo,fR,feo,geo,gR,heo,ueo,peo,Rs,Pee,_eo,beo,hR,veo,Feo,uR,Teo,Meo,Eeo,Bs,$ee,Ceo,weo,pR,Aeo,yeo,_R,Leo,xeo,keo,Ps,Iee,Seo,Reo,bR,Beo,Peo,vR,$eo,Ieo,qeo,$s,qee,Neo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,ih,Nee,zeo,Qeo,MR,Weo,Heo,Ueo,dh,jee,Jeo,Yeo,ER,Keo,Zeo,eoo,Is,Dee,ooo,roo,CR,too,aoo,wR,noo,soo,loo,qs,Gee,ioo,doo,AR,coo,moo,yR,foo,goo,hoo,Ns,Oee,uoo,poo,LR,_oo,boo,xR,voo,Foo,Too,ch,Vee,Moo,Eoo,kR,Coo,woo,Aoo,mh,Xee,yoo,Loo,SR,xoo,koo,Soo,fh,zee,Roo,Boo,RR,Poo,$oo,Ioo,gh,Qee,qoo,Noo,BR,joo,Doo,Goo,hh,Wee,Ooo,Voo,PR,Xoo,zoo,Qoo,js,Hee,Woo,Hoo,$R,Uoo,Joo,IR,Yoo,Koo,Zoo,uh,Uee,ero,oro,qR,rro,tro,aro,ph,Jee,nro,sro,NR,lro,iro,dro,Ds,Yee,cro,mro,jR,fro,gro,DR,hro,uro,pro,Gs,Kee,_ro,bro,GR,vro,Fro,OR,Tro,Mro,Ero,Zee,Cro,wro,Ww,Aro,_h,Hw,yro,eoe,Lro,QRe,Ji,bh,ooe,Uw,xro,roe,kro,WRe,Ho,Jw,Sro,Yw,Rro,VR,Bro,Pro,$ro,Kw,Iro,toe,qro,Nro,jro,$e,Zw,Dro,aoe,Gro,Oro,Va,Vro,noe,Xro,zro,soe,Qro,Wro,loe,Hro,Uro,Jro,ee,vh,ioe,Yro,Kro,XR,Zro,eto,oto,Fh,doe,rto,tto,zR,ato,nto,sto,Th,coe,lto,ito,QR,dto,cto,mto,Mh,moe,fto,gto,WR,hto,uto,pto,Eh,foe,_to,bto,HR,vto,Fto,Tto,Ch,goe,Mto,Eto,UR,Cto,wto,Ato,wh,hoe,yto,Lto,JR,xto,kto,Sto,Ah,uoe,Rto,Bto,YR,Pto,$to,Ito,yh,poe,qto,Nto,KR,jto,Dto,Gto,Lh,_oe,Oto,Vto,ZR,Xto,zto,Qto,xh,boe,Wto,Hto,eB,Uto,Jto,Yto,kh,voe,Kto,Zto,oB,eao,oao,rao,Sh,Foe,tao,aao,rB,nao,sao,lao,Rh,Toe,iao,dao,tB,cao,mao,fao,Bh,Moe,gao,hao,aB,uao,pao,_ao,Ph,Eoe,bao,vao,nB,Fao,Tao,Mao,$h,Coe,Eao,Cao,sB,wao,Aao,yao,Ih,woe,Lao,xao,lB,kao,Sao,Rao,qh,Aoe,Bao,Pao,iB,$ao,Iao,qao,Nh,Nao,yoe,jao,Dao,e6,Gao,jh,o6,Oao,Loe,Vao,HRe,Yi,Dh,xoe,r6,Xao,koe,zao,URe,Uo,t6,Qao,a6,Wao,dB,Hao,Uao,Jao,n6,Yao,Soe,Kao,Zao,eno,Ie,s6,ono,Roe,rno,tno,Ki,ano,Boe,nno,sno,Poe,lno,ino,dno,ke,Gh,$oe,cno,mno,cB,fno,gno,hno,Oh,Ioe,uno,pno,mB,_no,bno,vno,Vh,qoe,Fno,Tno,fB,Mno,Eno,Cno,Xh,Noe,wno,Ano,gB,yno,Lno,xno,zh,joe,kno,Sno,hB,Rno,Bno,Pno,Qh,Doe,$no,Ino,uB,qno,Nno,jno,Wh,Goe,Dno,Gno,pB,Ono,Vno,Xno,Hh,Ooe,zno,Qno,_B,Wno,Hno,Uno,Uh,Jno,Voe,Yno,Kno,l6,Zno,Jh,i6,eso,Xoe,oso,JRe,Zi,Yh,zoe,d6,rso,Qoe,tso,YRe,Jo,c6,aso,ed,nso,bB,sso,lso,vB,iso,dso,cso,m6,mso,Woe,fso,gso,hso,Xr,f6,uso,Hoe,pso,_so,od,bso,Uoe,vso,Fso,FB,Tso,Mso,Eso,Joe,Cso,wso,g6,Aso,qe,h6,yso,Yoe,Lso,xso,Xa,kso,Koe,Sso,Rso,Zoe,Bso,Pso,ere,$so,Iso,qso,T,Kh,ore,Nso,jso,TB,Dso,Gso,Oso,Zh,rre,Vso,Xso,MB,zso,Qso,Wso,eu,tre,Hso,Uso,EB,Jso,Yso,Kso,ou,are,Zso,elo,CB,olo,rlo,tlo,ru,nre,alo,nlo,wB,slo,llo,ilo,tu,sre,dlo,clo,AB,mlo,flo,glo,au,lre,hlo,ulo,yB,plo,_lo,blo,nu,ire,vlo,Flo,LB,Tlo,Mlo,Elo,su,dre,Clo,wlo,xB,Alo,ylo,Llo,lu,cre,xlo,klo,kB,Slo,Rlo,Blo,iu,mre,Plo,$lo,SB,Ilo,qlo,Nlo,du,fre,jlo,Dlo,RB,Glo,Olo,Vlo,cu,gre,Xlo,zlo,BB,Qlo,Wlo,Hlo,mu,hre,Ulo,Jlo,PB,Ylo,Klo,Zlo,fu,ure,eio,oio,$B,rio,tio,aio,gu,pre,nio,sio,IB,lio,iio,dio,hu,_re,cio,mio,qB,fio,gio,hio,uu,bre,uio,pio,NB,_io,bio,vio,pu,vre,Fio,Tio,jB,Mio,Eio,Cio,_u,Fre,wio,Aio,DB,yio,Lio,xio,bu,Tre,kio,Sio,GB,Rio,Bio,Pio,vu,Mre,$io,Iio,OB,qio,Nio,jio,Fu,Ere,Dio,Gio,VB,Oio,Vio,Xio,Tu,Cre,zio,Qio,XB,Wio,Hio,Uio,Mu,wre,Jio,Yio,zB,Kio,Zio,edo,Eu,Are,odo,rdo,QB,tdo,ado,ndo,Cu,yre,sdo,ldo,WB,ido,ddo,cdo,wu,Lre,mdo,fdo,HB,gdo,hdo,udo,Au,xre,pdo,_do,UB,bdo,vdo,Fdo,yu,kre,Tdo,Mdo,JB,Edo,Cdo,wdo,Os,Sre,Ado,ydo,YB,Ldo,xdo,KB,kdo,Sdo,Rdo,Lu,Rre,Bdo,Pdo,ZB,$do,Ido,qdo,xu,Bre,Ndo,jdo,eP,Ddo,Gdo,Odo,ku,Pre,Vdo,Xdo,oP,zdo,Qdo,Wdo,Su,$re,Hdo,Udo,rP,Jdo,Ydo,Kdo,Ru,Ire,Zdo,eco,tP,oco,rco,tco,Bu,qre,aco,nco,aP,sco,lco,ico,Pu,Nre,dco,cco,nP,mco,fco,gco,$u,jre,hco,uco,sP,pco,_co,bco,Iu,Dre,vco,Fco,lP,Tco,Mco,Eco,qu,Gre,Cco,wco,iP,Aco,yco,Lco,Nu,Ore,xco,kco,dP,Sco,Rco,Bco,ju,Vre,Pco,$co,cP,Ico,qco,Nco,Du,Xre,jco,Dco,mP,Gco,Oco,Vco,Gu,zre,Xco,zco,fP,Qco,Wco,Hco,Ou,Qre,Uco,Jco,gP,Yco,Kco,Zco,Vu,Wre,emo,omo,hP,rmo,tmo,amo,Xu,Hre,nmo,smo,uP,lmo,imo,dmo,zu,Ure,cmo,mmo,pP,fmo,gmo,hmo,Qu,Jre,umo,pmo,_P,_mo,bmo,vmo,Wu,Yre,Fmo,Tmo,bP,Mmo,Emo,Cmo,Hu,Kre,wmo,Amo,vP,ymo,Lmo,xmo,Uu,Zre,kmo,Smo,FP,Rmo,Bmo,Pmo,Ju,ete,$mo,Imo,TP,qmo,Nmo,jmo,Yu,ote,Dmo,Gmo,MP,Omo,Vmo,Xmo,Ku,rte,zmo,Qmo,EP,Wmo,Hmo,Umo,Zu,tte,Jmo,Ymo,CP,Kmo,Zmo,efo,ep,ate,ofo,rfo,wP,tfo,afo,nfo,op,nte,sfo,lfo,AP,ifo,dfo,cfo,rp,ste,mfo,ffo,yP,gfo,hfo,ufo,tp,lte,pfo,_fo,LP,bfo,vfo,Ffo,ap,ite,Tfo,Mfo,xP,Efo,Cfo,wfo,np,dte,Afo,yfo,kP,Lfo,xfo,kfo,sp,cte,Sfo,Rfo,SP,Bfo,Pfo,$fo,lp,mte,Ifo,qfo,RP,Nfo,jfo,Dfo,ip,fte,Gfo,Ofo,BP,Vfo,Xfo,zfo,dp,gte,Qfo,Wfo,PP,Hfo,Ufo,Jfo,cp,hte,Yfo,Kfo,$P,Zfo,ego,ogo,mp,ute,rgo,tgo,IP,ago,ngo,sgo,fp,pte,lgo,igo,qP,dgo,cgo,mgo,gp,_te,fgo,ggo,NP,hgo,ugo,pgo,hp,bte,_go,bgo,jP,vgo,Fgo,Tgo,up,vte,Mgo,Ego,DP,Cgo,wgo,Ago,pp,Fte,ygo,Lgo,GP,xgo,kgo,Sgo,_p,Tte,Rgo,Bgo,OP,Pgo,$go,Igo,bp,Mte,qgo,Ngo,VP,jgo,Dgo,Ggo,vp,Ete,Ogo,Vgo,XP,Xgo,zgo,Qgo,Fp,Cte,Wgo,Hgo,zP,Ugo,Jgo,Ygo,Tp,wte,Kgo,Zgo,QP,eho,oho,rho,Mp,Ate,tho,aho,WP,nho,sho,lho,Ep,yte,iho,dho,HP,cho,mho,fho,Cp,Lte,gho,hho,UP,uho,pho,_ho,wp,xte,bho,vho,JP,Fho,Tho,Mho,Ap,kte,Eho,Cho,YP,who,Aho,yho,yp,Ste,Lho,xho,KP,kho,Sho,Rho,Lp,Rte,Bho,Pho,ZP,$ho,Iho,qho,xp,Bte,Nho,jho,e$,Dho,Gho,Oho,kp,Pte,Vho,Xho,o$,zho,Qho,Who,Sp,$te,Hho,Uho,r$,Jho,Yho,Kho,Rp,Ite,Zho,euo,t$,ouo,ruo,tuo,Bp,qte,auo,nuo,a$,suo,luo,iuo,Pp,Nte,duo,cuo,n$,muo,fuo,guo,$p,jte,huo,uuo,s$,puo,_uo,buo,Ip,Dte,vuo,Fuo,l$,Tuo,Muo,Euo,qp,Cuo,Gte,wuo,Auo,Ote,yuo,Luo,Vte,xuo,kuo,u6,KRe,rd,Np,Xte,p6,Suo,zte,Ruo,ZRe,Yo,_6,Buo,td,Puo,i$,$uo,Iuo,d$,quo,Nuo,juo,b6,Duo,Qte,Guo,Ouo,Vuo,zr,v6,Xuo,Wte,zuo,Quo,ad,Wuo,Hte,Huo,Uuo,c$,Juo,Yuo,Kuo,Ute,Zuo,epo,F6,opo,Ne,T6,rpo,Jte,tpo,apo,za,npo,Yte,spo,lpo,Kte,ipo,dpo,Zte,cpo,mpo,fpo,S,jp,eae,gpo,hpo,m$,upo,ppo,_po,Dp,oae,bpo,vpo,f$,Fpo,Tpo,Mpo,Gp,rae,Epo,Cpo,g$,wpo,Apo,ypo,Op,tae,Lpo,xpo,h$,kpo,Spo,Rpo,Vp,aae,Bpo,Ppo,u$,$po,Ipo,qpo,Xp,nae,Npo,jpo,p$,Dpo,Gpo,Opo,zp,sae,Vpo,Xpo,_$,zpo,Qpo,Wpo,Qp,lae,Hpo,Upo,b$,Jpo,Ypo,Kpo,Wp,iae,Zpo,e_o,v$,o_o,r_o,t_o,Hp,dae,a_o,n_o,F$,s_o,l_o,i_o,Up,cae,d_o,c_o,T$,m_o,f_o,g_o,Jp,mae,h_o,u_o,M$,p_o,__o,b_o,Yp,fae,v_o,F_o,E$,T_o,M_o,E_o,Kp,gae,C_o,w_o,C$,A_o,y_o,L_o,Zp,hae,x_o,k_o,w$,S_o,R_o,B_o,e_,uae,P_o,$_o,A$,I_o,q_o,N_o,o_,pae,j_o,D_o,y$,G_o,O_o,V_o,r_,_ae,X_o,z_o,L$,Q_o,W_o,H_o,t_,bae,U_o,J_o,x$,Y_o,K_o,Z_o,a_,vae,ebo,obo,k$,rbo,tbo,abo,n_,Fae,nbo,sbo,S$,lbo,ibo,dbo,s_,Tae,cbo,mbo,R$,fbo,gbo,hbo,l_,Mae,ubo,pbo,B$,_bo,bbo,vbo,i_,Eae,Fbo,Tbo,P$,Mbo,Ebo,Cbo,d_,Cae,wbo,Abo,$$,ybo,Lbo,xbo,c_,wae,kbo,Sbo,I$,Rbo,Bbo,Pbo,m_,Aae,$bo,Ibo,q$,qbo,Nbo,jbo,f_,yae,Dbo,Gbo,N$,Obo,Vbo,Xbo,g_,Lae,zbo,Qbo,j$,Wbo,Hbo,Ubo,h_,xae,Jbo,Ybo,D$,Kbo,Zbo,e2o,u_,kae,o2o,r2o,G$,t2o,a2o,n2o,p_,Sae,s2o,l2o,O$,i2o,d2o,c2o,__,Rae,m2o,f2o,V$,g2o,h2o,u2o,b_,Bae,p2o,_2o,X$,b2o,v2o,F2o,v_,Pae,T2o,M2o,z$,E2o,C2o,w2o,F_,$ae,A2o,y2o,Q$,L2o,x2o,k2o,T_,Iae,S2o,R2o,W$,B2o,P2o,$2o,M_,qae,I2o,q2o,H$,N2o,j2o,D2o,E_,Nae,G2o,O2o,U$,V2o,X2o,z2o,C_,Q2o,jae,W2o,H2o,Dae,U2o,J2o,Gae,Y2o,K2o,M6,eBe,nd,w_,Oae,E6,Z2o,Vae,evo,oBe,Ko,C6,ovo,sd,rvo,J$,tvo,avo,Y$,nvo,svo,lvo,w6,ivo,Xae,dvo,cvo,mvo,Qr,A6,fvo,zae,gvo,hvo,ld,uvo,Qae,pvo,_vo,K$,bvo,vvo,Fvo,Wae,Tvo,Mvo,y6,Evo,je,L6,Cvo,Hae,wvo,Avo,Qa,yvo,Uae,Lvo,xvo,Jae,kvo,Svo,Yae,Rvo,Bvo,Pvo,$,A_,Kae,$vo,Ivo,Z$,qvo,Nvo,jvo,y_,Zae,Dvo,Gvo,eI,Ovo,Vvo,Xvo,L_,ene,zvo,Qvo,oI,Wvo,Hvo,Uvo,x_,one,Jvo,Yvo,rI,Kvo,Zvo,eFo,k_,rne,oFo,rFo,tI,tFo,aFo,nFo,S_,tne,sFo,lFo,aI,iFo,dFo,cFo,R_,ane,mFo,fFo,nI,gFo,hFo,uFo,B_,nne,pFo,_Fo,sI,bFo,vFo,FFo,P_,sne,TFo,MFo,lI,EFo,CFo,wFo,$_,lne,AFo,yFo,iI,LFo,xFo,kFo,I_,ine,SFo,RFo,dI,BFo,PFo,$Fo,q_,dne,IFo,qFo,cI,NFo,jFo,DFo,N_,cne,GFo,OFo,mI,VFo,XFo,zFo,j_,mne,QFo,WFo,fI,HFo,UFo,JFo,D_,fne,YFo,KFo,gI,ZFo,e1o,o1o,G_,gne,r1o,t1o,hI,a1o,n1o,s1o,O_,hne,l1o,i1o,uI,d1o,c1o,m1o,V_,une,f1o,g1o,pI,h1o,u1o,p1o,X_,pne,_1o,b1o,_I,v1o,F1o,T1o,z_,_ne,M1o,E1o,bI,C1o,w1o,A1o,Q_,bne,y1o,L1o,vI,x1o,k1o,S1o,W_,vne,R1o,B1o,FI,P1o,$1o,I1o,H_,Fne,q1o,N1o,TI,j1o,D1o,G1o,U_,Tne,O1o,V1o,MI,X1o,z1o,Q1o,J_,Mne,W1o,H1o,EI,U1o,J1o,Y1o,Y_,Ene,K1o,Z1o,CI,eTo,oTo,rTo,K_,Cne,tTo,aTo,wI,nTo,sTo,lTo,Z_,wne,iTo,dTo,AI,cTo,mTo,fTo,eb,Ane,gTo,hTo,yI,uTo,pTo,_To,ob,yne,bTo,vTo,LI,FTo,TTo,MTo,rb,Lne,ETo,CTo,xI,wTo,ATo,yTo,tb,xne,LTo,xTo,kI,kTo,STo,RTo,ab,kne,BTo,PTo,SI,$To,ITo,qTo,nb,Sne,NTo,jTo,RI,DTo,GTo,OTo,sb,Rne,VTo,XTo,BI,zTo,QTo,WTo,lb,HTo,Bne,UTo,JTo,Pne,YTo,KTo,$ne,ZTo,eMo,x6,rBe,id,ib,Ine,k6,oMo,qne,rMo,tBe,Zo,S6,tMo,dd,aMo,PI,nMo,sMo,$I,lMo,iMo,dMo,R6,cMo,Nne,mMo,fMo,gMo,Wr,B6,hMo,jne,uMo,pMo,cd,_Mo,Dne,bMo,vMo,II,FMo,TMo,MMo,Gne,EMo,CMo,P6,wMo,De,$6,AMo,One,yMo,LMo,Wa,xMo,Vne,kMo,SMo,Xne,RMo,BMo,zne,PMo,$Mo,IMo,I,db,Qne,qMo,NMo,qI,jMo,DMo,GMo,cb,Wne,OMo,VMo,NI,XMo,zMo,QMo,mb,Hne,WMo,HMo,jI,UMo,JMo,YMo,fb,Une,KMo,ZMo,DI,e4o,o4o,r4o,gb,Jne,t4o,a4o,GI,n4o,s4o,l4o,hb,Yne,i4o,d4o,OI,c4o,m4o,f4o,ub,Kne,g4o,h4o,VI,u4o,p4o,_4o,pb,Zne,b4o,v4o,XI,F4o,T4o,M4o,_b,ese,E4o,C4o,zI,w4o,A4o,y4o,bb,ose,L4o,x4o,QI,k4o,S4o,R4o,vb,rse,B4o,P4o,WI,$4o,I4o,q4o,Fb,tse,N4o,j4o,HI,D4o,G4o,O4o,Tb,ase,V4o,X4o,UI,z4o,Q4o,W4o,Mb,nse,H4o,U4o,JI,J4o,Y4o,K4o,Eb,sse,Z4o,eEo,YI,oEo,rEo,tEo,Cb,lse,aEo,nEo,KI,sEo,lEo,iEo,wb,ise,dEo,cEo,ZI,mEo,fEo,gEo,Ab,dse,hEo,uEo,eq,pEo,_Eo,bEo,yb,cse,vEo,FEo,oq,TEo,MEo,EEo,Lb,mse,CEo,wEo,rq,AEo,yEo,LEo,xb,fse,xEo,kEo,tq,SEo,REo,BEo,kb,gse,PEo,$Eo,aq,IEo,qEo,NEo,Sb,hse,jEo,DEo,nq,GEo,OEo,VEo,Rb,use,XEo,zEo,sq,QEo,WEo,HEo,Bb,pse,UEo,JEo,lq,YEo,KEo,ZEo,Pb,_se,e5o,o5o,iq,r5o,t5o,a5o,$b,bse,n5o,s5o,dq,l5o,i5o,d5o,Ib,vse,c5o,m5o,cq,f5o,g5o,h5o,qb,Fse,u5o,p5o,mq,_5o,b5o,v5o,Nb,Tse,F5o,T5o,fq,M5o,E5o,C5o,jb,Mse,w5o,A5o,Ese,y5o,L5o,x5o,Db,Cse,k5o,S5o,gq,R5o,B5o,P5o,Gb,wse,$5o,I5o,hq,q5o,N5o,j5o,Ob,Ase,D5o,G5o,uq,O5o,V5o,X5o,Vb,yse,z5o,Q5o,pq,W5o,H5o,U5o,Xb,J5o,Lse,Y5o,K5o,xse,Z5o,e3o,kse,o3o,r3o,I6,aBe,md,zb,Sse,q6,t3o,Rse,a3o,nBe,er,N6,n3o,fd,s3o,_q,l3o,i3o,bq,d3o,c3o,m3o,j6,f3o,Bse,g3o,h3o,u3o,Hr,D6,p3o,Pse,_3o,b3o,gd,v3o,$se,F3o,T3o,vq,M3o,E3o,C3o,Ise,w3o,A3o,G6,y3o,Ge,O6,L3o,qse,x3o,k3o,Ha,S3o,Nse,R3o,B3o,jse,P3o,$3o,Dse,I3o,q3o,N3o,ne,Qb,Gse,j3o,D3o,Fq,G3o,O3o,V3o,Wb,Ose,X3o,z3o,Tq,Q3o,W3o,H3o,Hb,Vse,U3o,J3o,Mq,Y3o,K3o,Z3o,Ub,Xse,eCo,oCo,Eq,rCo,tCo,aCo,Jb,zse,nCo,sCo,Cq,lCo,iCo,dCo,Yb,Qse,cCo,mCo,wq,fCo,gCo,hCo,Kb,Wse,uCo,pCo,Aq,_Co,bCo,vCo,Zb,Hse,FCo,TCo,yq,MCo,ECo,CCo,e2,Use,wCo,ACo,Lq,yCo,LCo,xCo,o2,Jse,kCo,SCo,xq,RCo,BCo,PCo,r2,Yse,$Co,ICo,kq,qCo,NCo,jCo,t2,Kse,DCo,GCo,Sq,OCo,VCo,XCo,a2,Zse,zCo,QCo,Rq,WCo,HCo,UCo,n2,ele,JCo,YCo,Bq,KCo,ZCo,ewo,s2,ole,owo,rwo,Pq,two,awo,nwo,l2,rle,swo,lwo,$q,iwo,dwo,cwo,i2,tle,mwo,fwo,Iq,gwo,hwo,uwo,d2,pwo,ale,_wo,bwo,nle,vwo,Fwo,sle,Two,Mwo,V6,sBe,hd,c2,lle,X6,Ewo,ile,Cwo,lBe,or,z6,wwo,ud,Awo,qq,ywo,Lwo,Nq,xwo,kwo,Swo,Q6,Rwo,dle,Bwo,Pwo,$wo,Ur,W6,Iwo,cle,qwo,Nwo,pd,jwo,mle,Dwo,Gwo,jq,Owo,Vwo,Xwo,fle,zwo,Qwo,H6,Wwo,Oe,U6,Hwo,gle,Uwo,Jwo,Ua,Ywo,hle,Kwo,Zwo,ule,e6o,o6o,ple,r6o,t6o,a6o,y,m2,_le,n6o,s6o,Dq,l6o,i6o,d6o,f2,ble,c6o,m6o,Gq,f6o,g6o,h6o,g2,vle,u6o,p6o,Oq,_6o,b6o,v6o,h2,Fle,F6o,T6o,Vq,M6o,E6o,C6o,u2,Tle,w6o,A6o,Xq,y6o,L6o,x6o,p2,Mle,k6o,S6o,zq,R6o,B6o,P6o,_2,Ele,$6o,I6o,Qq,q6o,N6o,j6o,b2,Cle,D6o,G6o,Wq,O6o,V6o,X6o,v2,wle,z6o,Q6o,Hq,W6o,H6o,U6o,F2,Ale,J6o,Y6o,Uq,K6o,Z6o,eAo,T2,yle,oAo,rAo,Jq,tAo,aAo,nAo,M2,Lle,sAo,lAo,Yq,iAo,dAo,cAo,E2,xle,mAo,fAo,Kq,gAo,hAo,uAo,C2,kle,pAo,_Ao,Zq,bAo,vAo,FAo,w2,Sle,TAo,MAo,eN,EAo,CAo,wAo,A2,Rle,AAo,yAo,oN,LAo,xAo,kAo,y2,Ble,SAo,RAo,rN,BAo,PAo,$Ao,L2,Ple,IAo,qAo,tN,NAo,jAo,DAo,x2,$le,GAo,OAo,aN,VAo,XAo,zAo,k2,Ile,QAo,WAo,nN,HAo,UAo,JAo,S2,qle,YAo,KAo,sN,ZAo,e0o,o0o,R2,Nle,r0o,t0o,lN,a0o,n0o,s0o,B2,jle,l0o,i0o,iN,d0o,c0o,m0o,P2,Dle,f0o,g0o,dN,h0o,u0o,p0o,$2,Gle,_0o,b0o,cN,v0o,F0o,T0o,I2,Ole,M0o,E0o,mN,C0o,w0o,A0o,q2,Vle,y0o,L0o,fN,x0o,k0o,S0o,N2,Xle,R0o,B0o,gN,P0o,$0o,I0o,j2,zle,q0o,N0o,hN,j0o,D0o,G0o,D2,Qle,O0o,V0o,uN,X0o,z0o,Q0o,G2,Wle,W0o,H0o,pN,U0o,J0o,Y0o,O2,Hle,K0o,Z0o,_N,eyo,oyo,ryo,V2,Ule,tyo,ayo,bN,nyo,syo,lyo,X2,Jle,iyo,dyo,vN,cyo,myo,fyo,z2,Yle,gyo,hyo,FN,uyo,pyo,_yo,Q2,Kle,byo,vyo,TN,Fyo,Tyo,Myo,W2,Zle,Eyo,Cyo,MN,wyo,Ayo,yyo,H2,eie,Lyo,xyo,EN,kyo,Syo,Ryo,U2,oie,Byo,Pyo,CN,$yo,Iyo,qyo,J2,rie,Nyo,jyo,wN,Dyo,Gyo,Oyo,Y2,tie,Vyo,Xyo,AN,zyo,Qyo,Wyo,K2,aie,Hyo,Uyo,yN,Jyo,Yyo,Kyo,Z2,nie,Zyo,e8o,LN,o8o,r8o,t8o,ev,sie,a8o,n8o,xN,s8o,l8o,i8o,ov,lie,d8o,c8o,kN,m8o,f8o,g8o,rv,iie,h8o,u8o,SN,p8o,_8o,b8o,tv,die,v8o,F8o,RN,T8o,M8o,E8o,av,C8o,cie,w8o,A8o,mie,y8o,L8o,fie,x8o,k8o,J6,iBe,_d,nv,gie,Y6,S8o,hie,R8o,dBe,rr,K6,B8o,bd,P8o,BN,$8o,I8o,PN,q8o,N8o,j8o,Z6,D8o,uie,G8o,O8o,V8o,Jr,eA,X8o,pie,z8o,Q8o,vd,W8o,_ie,H8o,U8o,$N,J8o,Y8o,K8o,bie,Z8o,eLo,oA,oLo,Ve,rA,rLo,vie,tLo,aLo,Ja,nLo,Fie,sLo,lLo,Tie,iLo,dLo,Mie,cLo,mLo,fLo,G,sv,Eie,gLo,hLo,IN,uLo,pLo,_Lo,lv,Cie,bLo,vLo,qN,FLo,TLo,MLo,iv,wie,ELo,CLo,NN,wLo,ALo,yLo,dv,Aie,LLo,xLo,jN,kLo,SLo,RLo,cv,yie,BLo,PLo,DN,$Lo,ILo,qLo,mv,Lie,NLo,jLo,GN,DLo,GLo,OLo,fv,xie,VLo,XLo,ON,zLo,QLo,WLo,gv,kie,HLo,ULo,VN,JLo,YLo,KLo,hv,Sie,ZLo,e7o,XN,o7o,r7o,t7o,uv,Rie,a7o,n7o,zN,s7o,l7o,i7o,pv,Bie,d7o,c7o,QN,m7o,f7o,g7o,_v,Pie,h7o,u7o,WN,p7o,_7o,b7o,bv,$ie,v7o,F7o,HN,T7o,M7o,E7o,vv,Iie,C7o,w7o,UN,A7o,y7o,L7o,Fv,qie,x7o,k7o,JN,S7o,R7o,B7o,Tv,Nie,P7o,$7o,YN,I7o,q7o,N7o,Mv,jie,j7o,D7o,KN,G7o,O7o,V7o,Ev,Die,X7o,z7o,ZN,Q7o,W7o,H7o,Cv,Gie,U7o,J7o,ej,Y7o,K7o,Z7o,wv,Oie,e9o,o9o,oj,r9o,t9o,a9o,Av,Vie,n9o,s9o,rj,l9o,i9o,d9o,yv,Xie,c9o,m9o,tj,f9o,g9o,h9o,Lv,zie,u9o,p9o,aj,_9o,b9o,v9o,xv,Qie,F9o,T9o,nj,M9o,E9o,C9o,kv,Wie,w9o,A9o,sj,y9o,L9o,x9o,Sv,Hie,k9o,S9o,lj,R9o,B9o,P9o,Rv,Uie,$9o,I9o,ij,q9o,N9o,j9o,Bv,Jie,D9o,G9o,dj,O9o,V9o,X9o,Pv,z9o,Yie,Q9o,W9o,Kie,H9o,U9o,Zie,J9o,Y9o,tA,cBe,Fd,$v,ede,aA,K9o,ode,Z9o,mBe,tr,nA,exo,Td,oxo,cj,rxo,txo,mj,axo,nxo,sxo,sA,lxo,rde,ixo,dxo,cxo,Yr,lA,mxo,tde,fxo,gxo,Md,hxo,ade,uxo,pxo,fj,_xo,bxo,vxo,nde,Fxo,Txo,iA,Mxo,Xe,dA,Exo,sde,Cxo,wxo,Ya,Axo,lde,yxo,Lxo,ide,xxo,kxo,dde,Sxo,Rxo,Bxo,da,Iv,cde,Pxo,$xo,gj,Ixo,qxo,Nxo,qv,mde,jxo,Dxo,hj,Gxo,Oxo,Vxo,Nv,fde,Xxo,zxo,uj,Qxo,Wxo,Hxo,jv,gde,Uxo,Jxo,pj,Yxo,Kxo,Zxo,Dv,hde,eko,oko,_j,rko,tko,ako,Gv,nko,ude,sko,lko,pde,iko,dko,_de,cko,mko,cA,fBe,Ed,Ov,bde,mA,fko,vde,gko,gBe,ar,fA,hko,Cd,uko,bj,pko,_ko,vj,bko,vko,Fko,gA,Tko,Fde,Mko,Eko,Cko,Kr,hA,wko,Tde,Ako,yko,wd,Lko,Mde,xko,kko,Fj,Sko,Rko,Bko,Ede,Pko,$ko,uA,Iko,ze,pA,qko,Cde,Nko,jko,Ka,Dko,wde,Gko,Oko,Ade,Vko,Xko,yde,zko,Qko,Wko,j,Vv,Lde,Hko,Uko,Tj,Jko,Yko,Kko,Xv,xde,Zko,eSo,Mj,oSo,rSo,tSo,zv,kde,aSo,nSo,Ej,sSo,lSo,iSo,Qv,Sde,dSo,cSo,Cj,mSo,fSo,gSo,Wv,Rde,hSo,uSo,wj,pSo,_So,bSo,Hv,Bde,vSo,FSo,Aj,TSo,MSo,ESo,Uv,Pde,CSo,wSo,yj,ASo,ySo,LSo,Jv,$de,xSo,kSo,Lj,SSo,RSo,BSo,Yv,Ide,PSo,$So,xj,ISo,qSo,NSo,Kv,qde,jSo,DSo,kj,GSo,OSo,VSo,Zv,Nde,XSo,zSo,Sj,QSo,WSo,HSo,eF,jde,USo,JSo,Rj,YSo,KSo,ZSo,oF,Dde,eRo,oRo,Bj,rRo,tRo,aRo,rF,Gde,nRo,sRo,Pj,lRo,iRo,dRo,tF,Ode,cRo,mRo,$j,fRo,gRo,hRo,aF,Vde,uRo,pRo,Ij,_Ro,bRo,vRo,nF,Xde,FRo,TRo,qj,MRo,ERo,CRo,sF,zde,wRo,ARo,Nj,yRo,LRo,xRo,lF,Qde,kRo,SRo,jj,RRo,BRo,PRo,iF,Wde,$Ro,IRo,Dj,qRo,NRo,jRo,dF,Hde,DRo,GRo,Gj,ORo,VRo,XRo,cF,Ude,zRo,QRo,Oj,WRo,HRo,URo,mF,Jde,JRo,YRo,Vj,KRo,ZRo,eBo,fF,Yde,oBo,rBo,Xj,tBo,aBo,nBo,gF,Kde,sBo,lBo,zj,iBo,dBo,cBo,hF,Zde,mBo,fBo,Qj,gBo,hBo,uBo,uF,ece,pBo,_Bo,Wj,bBo,vBo,FBo,pF,oce,TBo,MBo,Hj,EBo,CBo,wBo,_F,rce,ABo,yBo,Uj,LBo,xBo,kBo,bF,tce,SBo,RBo,Jj,BBo,PBo,$Bo,vF,ace,IBo,qBo,Yj,NBo,jBo,DBo,FF,nce,GBo,OBo,Kj,VBo,XBo,zBo,TF,sce,QBo,WBo,Zj,HBo,UBo,JBo,MF,YBo,lce,KBo,ZBo,ice,ePo,oPo,dce,rPo,tPo,_A,hBe,Ad,EF,cce,bA,aPo,mce,nPo,uBe,nr,vA,sPo,yd,lPo,eD,iPo,dPo,oD,cPo,mPo,fPo,FA,gPo,fce,hPo,uPo,pPo,Zr,TA,_Po,gce,bPo,vPo,Ld,FPo,hce,TPo,MPo,rD,EPo,CPo,wPo,uce,APo,yPo,MA,LPo,Qe,EA,xPo,pce,kPo,SPo,Za,RPo,_ce,BPo,PPo,bce,$Po,IPo,vce,qPo,NPo,jPo,R,CF,Fce,DPo,GPo,tD,OPo,VPo,XPo,wF,Tce,zPo,QPo,aD,WPo,HPo,UPo,AF,Mce,JPo,YPo,nD,KPo,ZPo,e$o,yF,Ece,o$o,r$o,sD,t$o,a$o,n$o,LF,Cce,s$o,l$o,lD,i$o,d$o,c$o,xF,wce,m$o,f$o,iD,g$o,h$o,u$o,kF,Ace,p$o,_$o,dD,b$o,v$o,F$o,SF,yce,T$o,M$o,cD,E$o,C$o,w$o,RF,Lce,A$o,y$o,mD,L$o,x$o,k$o,BF,xce,S$o,R$o,fD,B$o,P$o,$$o,PF,kce,I$o,q$o,gD,N$o,j$o,D$o,$F,Sce,G$o,O$o,hD,V$o,X$o,z$o,IF,Rce,Q$o,W$o,uD,H$o,U$o,J$o,qF,Bce,Y$o,K$o,pD,Z$o,eIo,oIo,NF,Pce,rIo,tIo,_D,aIo,nIo,sIo,jF,$ce,lIo,iIo,bD,dIo,cIo,mIo,DF,Ice,fIo,gIo,vD,hIo,uIo,pIo,GF,qce,_Io,bIo,FD,vIo,FIo,TIo,OF,Nce,MIo,EIo,TD,CIo,wIo,AIo,VF,jce,yIo,LIo,MD,xIo,kIo,SIo,XF,Dce,RIo,BIo,ED,PIo,$Io,IIo,zF,Gce,qIo,NIo,CD,jIo,DIo,GIo,QF,Oce,OIo,VIo,wD,XIo,zIo,QIo,WF,Vce,WIo,HIo,AD,UIo,JIo,YIo,HF,Xce,KIo,ZIo,yD,eqo,oqo,rqo,UF,zce,tqo,aqo,LD,nqo,sqo,lqo,JF,Qce,iqo,dqo,xD,cqo,mqo,fqo,YF,Wce,gqo,hqo,kD,uqo,pqo,_qo,KF,Hce,bqo,vqo,SD,Fqo,Tqo,Mqo,ZF,Uce,Eqo,Cqo,RD,wqo,Aqo,yqo,e1,Jce,Lqo,xqo,BD,kqo,Sqo,Rqo,o1,Yce,Bqo,Pqo,PD,$qo,Iqo,qqo,r1,Kce,Nqo,jqo,$D,Dqo,Gqo,Oqo,t1,Zce,Vqo,Xqo,ID,zqo,Qqo,Wqo,a1,eme,Hqo,Uqo,qD,Jqo,Yqo,Kqo,n1,ome,Zqo,eNo,ND,oNo,rNo,tNo,s1,rme,aNo,nNo,jD,sNo,lNo,iNo,l1,tme,dNo,cNo,DD,mNo,fNo,gNo,i1,ame,hNo,uNo,GD,pNo,_No,bNo,d1,vNo,nme,FNo,TNo,sme,MNo,ENo,lme,CNo,wNo,CA,pBe,xd,c1,ime,wA,ANo,dme,yNo,_Be,sr,AA,LNo,kd,xNo,OD,kNo,SNo,VD,RNo,BNo,PNo,yA,$No,cme,INo,qNo,NNo,et,LA,jNo,mme,DNo,GNo,Sd,ONo,fme,VNo,XNo,XD,zNo,QNo,WNo,gme,HNo,UNo,xA,JNo,We,kA,YNo,hme,KNo,ZNo,en,ejo,ume,ojo,rjo,pme,tjo,ajo,_me,njo,sjo,ljo,bme,m1,vme,ijo,djo,zD,cjo,mjo,fjo,f1,gjo,Fme,hjo,ujo,Tme,pjo,_jo,Mme,bjo,vjo,SA,bBe,Rd,g1,Eme,RA,Fjo,Cme,Tjo,vBe,lr,BA,Mjo,Bd,Ejo,QD,Cjo,wjo,WD,Ajo,yjo,Ljo,PA,xjo,wme,kjo,Sjo,Rjo,ot,$A,Bjo,Ame,Pjo,$jo,Pd,Ijo,yme,qjo,Njo,HD,jjo,Djo,Gjo,Lme,Ojo,Vjo,IA,Xjo,He,qA,zjo,xme,Qjo,Wjo,on,Hjo,kme,Ujo,Jjo,Sme,Yjo,Kjo,Rme,Zjo,eDo,oDo,de,h1,Bme,rDo,tDo,UD,aDo,nDo,sDo,u1,Pme,lDo,iDo,JD,dDo,cDo,mDo,p1,$me,fDo,gDo,YD,hDo,uDo,pDo,Vs,Ime,_Do,bDo,KD,vDo,FDo,ZD,TDo,MDo,EDo,_1,qme,CDo,wDo,eG,ADo,yDo,LDo,fa,Nme,xDo,kDo,oG,SDo,RDo,rG,BDo,PDo,tG,$Do,IDo,qDo,b1,jme,NDo,jDo,aG,DDo,GDo,ODo,v1,Dme,VDo,XDo,nG,zDo,QDo,WDo,F1,Gme,HDo,UDo,sG,JDo,YDo,KDo,T1,Ome,ZDo,eGo,lG,oGo,rGo,tGo,M1,Vme,aGo,nGo,iG,sGo,lGo,iGo,E1,Xme,dGo,cGo,dG,mGo,fGo,gGo,C1,zme,hGo,uGo,cG,pGo,_Go,bGo,w1,vGo,Qme,FGo,TGo,Wme,MGo,EGo,Hme,CGo,wGo,NA,FBe,$d,A1,Ume,jA,AGo,Jme,yGo,TBe,ir,DA,LGo,Id,xGo,mG,kGo,SGo,fG,RGo,BGo,PGo,GA,$Go,Yme,IGo,qGo,NGo,rt,OA,jGo,Kme,DGo,GGo,qd,OGo,Zme,VGo,XGo,gG,zGo,QGo,WGo,efe,HGo,UGo,VA,JGo,Ue,XA,YGo,ofe,KGo,ZGo,rn,eOo,rfe,oOo,rOo,tfe,tOo,aOo,afe,nOo,sOo,lOo,nfe,y1,sfe,iOo,dOo,hG,cOo,mOo,fOo,L1,gOo,lfe,hOo,uOo,ife,pOo,_Oo,dfe,bOo,vOo,zA,MBe,Nd,x1,cfe,QA,FOo,mfe,TOo,EBe,dr,WA,MOo,jd,EOo,uG,COo,wOo,pG,AOo,yOo,LOo,HA,xOo,ffe,kOo,SOo,ROo,tt,UA,BOo,gfe,POo,$Oo,Dd,IOo,hfe,qOo,NOo,_G,jOo,DOo,GOo,ufe,OOo,VOo,JA,XOo,Je,YA,zOo,pfe,QOo,WOo,tn,HOo,_fe,UOo,JOo,bfe,YOo,KOo,vfe,ZOo,eVo,oVo,Se,k1,Ffe,rVo,tVo,bG,aVo,nVo,sVo,S1,Tfe,lVo,iVo,vG,dVo,cVo,mVo,R1,Mfe,fVo,gVo,FG,hVo,uVo,pVo,B1,Efe,_Vo,bVo,TG,vVo,FVo,TVo,P1,Cfe,MVo,EVo,MG,CVo,wVo,AVo,$1,wfe,yVo,LVo,EG,xVo,kVo,SVo,I1,Afe,RVo,BVo,CG,PVo,$Vo,IVo,q1,yfe,qVo,NVo,wG,jVo,DVo,GVo,N1,OVo,Lfe,VVo,XVo,xfe,zVo,QVo,kfe,WVo,HVo,KA,CBe,Gd,j1,Sfe,ZA,UVo,Rfe,JVo,wBe,cr,e0,YVo,Od,KVo,AG,ZVo,eXo,yG,oXo,rXo,tXo,o0,aXo,Bfe,nXo,sXo,lXo,at,r0,iXo,Pfe,dXo,cXo,Vd,mXo,$fe,fXo,gXo,LG,hXo,uXo,pXo,Ife,_Xo,bXo,t0,vXo,Ye,a0,FXo,qfe,TXo,MXo,an,EXo,Nfe,CXo,wXo,jfe,AXo,yXo,Dfe,LXo,xXo,kXo,nn,D1,Gfe,SXo,RXo,xG,BXo,PXo,$Xo,G1,Ofe,IXo,qXo,kG,NXo,jXo,DXo,O1,Vfe,GXo,OXo,SG,VXo,XXo,zXo,V1,Xfe,QXo,WXo,RG,HXo,UXo,JXo,X1,YXo,zfe,KXo,ZXo,Qfe,ezo,ozo,Wfe,rzo,tzo,n0,ABe,Xd,z1,Hfe,s0,azo,Ufe,nzo,yBe,mr,l0,szo,zd,lzo,BG,izo,dzo,PG,czo,mzo,fzo,i0,gzo,Jfe,hzo,uzo,pzo,nt,d0,_zo,Yfe,bzo,vzo,Qd,Fzo,Kfe,Tzo,Mzo,$G,Ezo,Czo,wzo,Zfe,Azo,yzo,c0,Lzo,Ke,m0,xzo,ege,kzo,Szo,sn,Rzo,oge,Bzo,Pzo,rge,$zo,Izo,tge,qzo,Nzo,jzo,Re,Q1,age,Dzo,Gzo,IG,Ozo,Vzo,Xzo,W1,nge,zzo,Qzo,qG,Wzo,Hzo,Uzo,H1,sge,Jzo,Yzo,NG,Kzo,Zzo,eQo,U1,lge,oQo,rQo,jG,tQo,aQo,nQo,J1,ige,sQo,lQo,DG,iQo,dQo,cQo,Y1,dge,mQo,fQo,GG,gQo,hQo,uQo,K1,cge,pQo,_Qo,OG,bQo,vQo,FQo,Z1,mge,TQo,MQo,VG,EQo,CQo,wQo,eT,AQo,fge,yQo,LQo,gge,xQo,kQo,hge,SQo,RQo,f0,LBe,Wd,oT,uge,g0,BQo,pge,PQo,xBe,fr,h0,$Qo,Hd,IQo,XG,qQo,NQo,zG,jQo,DQo,GQo,u0,OQo,_ge,VQo,XQo,zQo,st,p0,QQo,bge,WQo,HQo,Ud,UQo,vge,JQo,YQo,QG,KQo,ZQo,eWo,Fge,oWo,rWo,_0,tWo,Ze,b0,aWo,Tge,nWo,sWo,ln,lWo,Mge,iWo,dWo,Ege,cWo,mWo,Cge,fWo,gWo,hWo,v0,rT,wge,uWo,pWo,WG,_Wo,bWo,vWo,tT,Age,FWo,TWo,HG,MWo,EWo,CWo,aT,wWo,yge,AWo,yWo,Lge,LWo,xWo,xge,kWo,SWo,F0,kBe,Jd,nT,kge,T0,RWo,Sge,BWo,SBe,gr,M0,PWo,Yd,$Wo,UG,IWo,qWo,JG,NWo,jWo,DWo,E0,GWo,Rge,OWo,VWo,XWo,lt,C0,zWo,Bge,QWo,WWo,Kd,HWo,Pge,UWo,JWo,YG,YWo,KWo,ZWo,$ge,eHo,oHo,w0,rHo,eo,A0,tHo,Ige,aHo,nHo,dn,sHo,qge,lHo,iHo,Nge,dHo,cHo,jge,mHo,fHo,gHo,cn,sT,Dge,hHo,uHo,KG,pHo,_Ho,bHo,lT,Gge,vHo,FHo,ZG,THo,MHo,EHo,iT,Oge,CHo,wHo,eO,AHo,yHo,LHo,dT,Vge,xHo,kHo,oO,SHo,RHo,BHo,cT,PHo,Xge,$Ho,IHo,zge,qHo,NHo,Qge,jHo,DHo,y0,RBe,Zd,mT,Wge,L0,GHo,Hge,OHo,BBe,hr,x0,VHo,ec,XHo,rO,zHo,QHo,tO,WHo,HHo,UHo,k0,JHo,Uge,YHo,KHo,ZHo,it,S0,eUo,Jge,oUo,rUo,oc,tUo,Yge,aUo,nUo,aO,sUo,lUo,iUo,Kge,dUo,cUo,R0,mUo,oo,B0,fUo,Zge,gUo,hUo,mn,uUo,ehe,pUo,_Uo,ohe,bUo,vUo,rhe,FUo,TUo,MUo,rc,fT,the,EUo,CUo,nO,wUo,AUo,yUo,gT,ahe,LUo,xUo,sO,kUo,SUo,RUo,hT,nhe,BUo,PUo,lO,$Uo,IUo,qUo,uT,NUo,she,jUo,DUo,lhe,GUo,OUo,ihe,VUo,XUo,P0,PBe,tc,pT,dhe,$0,zUo,che,QUo,$Be,ur,I0,WUo,ac,HUo,iO,UUo,JUo,dO,YUo,KUo,ZUo,q0,eJo,mhe,oJo,rJo,tJo,dt,N0,aJo,fhe,nJo,sJo,nc,lJo,ghe,iJo,dJo,cO,cJo,mJo,fJo,hhe,gJo,hJo,j0,uJo,ro,D0,pJo,uhe,_Jo,bJo,fn,vJo,phe,FJo,TJo,_he,MJo,EJo,bhe,CJo,wJo,AJo,vhe,_T,Fhe,yJo,LJo,mO,xJo,kJo,SJo,bT,RJo,The,BJo,PJo,Mhe,$Jo,IJo,Ehe,qJo,NJo,G0,IBe,sc,vT,Che,O0,jJo,whe,DJo,qBe,pr,V0,GJo,lc,OJo,fO,VJo,XJo,gO,zJo,QJo,WJo,X0,HJo,Ahe,UJo,JJo,YJo,ct,z0,KJo,yhe,ZJo,eYo,ic,oYo,Lhe,rYo,tYo,hO,aYo,nYo,sYo,xhe,lYo,iYo,Q0,dYo,to,W0,cYo,khe,mYo,fYo,gn,gYo,She,hYo,uYo,Rhe,pYo,_Yo,Bhe,bYo,vYo,FYo,Phe,FT,$he,TYo,MYo,uO,EYo,CYo,wYo,TT,AYo,Ihe,yYo,LYo,qhe,xYo,kYo,Nhe,SYo,RYo,H0,NBe,dc,MT,jhe,U0,BYo,Dhe,PYo,jBe,_r,J0,$Yo,cc,IYo,pO,qYo,NYo,_O,jYo,DYo,GYo,Y0,OYo,Ghe,VYo,XYo,zYo,mt,K0,QYo,Ohe,WYo,HYo,mc,UYo,Vhe,JYo,YYo,bO,KYo,ZYo,eKo,Xhe,oKo,rKo,Z0,tKo,ao,ey,aKo,zhe,nKo,sKo,hn,lKo,Qhe,iKo,dKo,Whe,cKo,mKo,Hhe,fKo,gKo,hKo,un,ET,Uhe,uKo,pKo,vO,_Ko,bKo,vKo,CT,Jhe,FKo,TKo,FO,MKo,EKo,CKo,wT,Yhe,wKo,AKo,TO,yKo,LKo,xKo,AT,Khe,kKo,SKo,MO,RKo,BKo,PKo,yT,$Ko,Zhe,IKo,qKo,eue,NKo,jKo,oue,DKo,GKo,oy,DBe,fc,LT,rue,ry,OKo,tue,VKo,GBe,br,ty,XKo,gc,zKo,EO,QKo,WKo,CO,HKo,UKo,JKo,ay,YKo,aue,KKo,ZKo,eZo,ft,ny,oZo,nue,rZo,tZo,hc,aZo,sue,nZo,sZo,wO,lZo,iZo,dZo,lue,cZo,mZo,sy,fZo,no,ly,gZo,iue,hZo,uZo,pn,pZo,due,_Zo,bZo,cue,vZo,FZo,mue,TZo,MZo,EZo,fue,xT,gue,CZo,wZo,AO,AZo,yZo,LZo,kT,xZo,hue,kZo,SZo,uue,RZo,BZo,pue,PZo,$Zo,iy,OBe,uc,ST,_ue,dy,IZo,bue,qZo,VBe,vr,cy,NZo,pc,jZo,yO,DZo,GZo,LO,OZo,VZo,XZo,my,zZo,vue,QZo,WZo,HZo,gt,fy,UZo,Fue,JZo,YZo,_c,KZo,Tue,ZZo,eer,xO,oer,rer,ter,Mue,aer,ner,gy,ser,ho,hy,ler,Eue,ier,der,_n,cer,Cue,mer,fer,wue,ger,her,Aue,uer,per,_er,x,RT,yue,ber,ver,kO,Fer,Ter,Mer,BT,Lue,Eer,Cer,SO,wer,Aer,yer,PT,xue,Ler,xer,RO,ker,Ser,Rer,$T,kue,Ber,Per,BO,$er,Ier,qer,IT,Sue,Ner,jer,PO,Der,Ger,Oer,qT,Rue,Ver,Xer,$O,zer,Qer,Wer,NT,Bue,Her,Uer,IO,Jer,Yer,Ker,jT,Pue,Zer,eor,qO,oor,ror,tor,DT,$ue,aor,nor,NO,sor,lor,ior,GT,Iue,dor,cor,jO,mor,gor,hor,OT,que,uor,por,DO,_or,bor,vor,VT,Nue,For,Tor,GO,Mor,Eor,Cor,XT,jue,wor,Aor,OO,yor,Lor,xor,zT,Due,kor,Sor,VO,Ror,Bor,Por,QT,Gue,$or,Ior,XO,qor,Nor,jor,WT,Oue,Dor,Gor,zO,Oor,Vor,Xor,Xs,Vue,zor,Qor,QO,Wor,Hor,WO,Uor,Jor,Yor,HT,Xue,Kor,Zor,HO,err,orr,rrr,UT,zue,trr,arr,UO,nrr,srr,lrr,JT,Que,irr,drr,JO,crr,mrr,frr,YT,Wue,grr,hrr,YO,urr,prr,_rr,KT,Hue,brr,vrr,KO,Frr,Trr,Mrr,ZT,Uue,Err,Crr,ZO,wrr,Arr,yrr,eM,Jue,Lrr,xrr,eV,krr,Srr,Rrr,oM,Yue,Brr,Prr,oV,$rr,Irr,qrr,rM,Kue,Nrr,jrr,rV,Drr,Grr,Orr,tM,Zue,Vrr,Xrr,tV,zrr,Qrr,Wrr,aM,epe,Hrr,Urr,aV,Jrr,Yrr,Krr,nM,ope,Zrr,etr,nV,otr,rtr,ttr,sM,rpe,atr,ntr,sV,str,ltr,itr,lM,tpe,dtr,ctr,lV,mtr,ftr,gtr,iM,ape,htr,utr,iV,ptr,_tr,btr,dM,npe,vtr,Ftr,dV,Ttr,Mtr,Etr,cM,spe,Ctr,wtr,cV,Atr,ytr,Ltr,mM,lpe,xtr,ktr,mV,Str,Rtr,Btr,fM,ipe,Ptr,$tr,fV,Itr,qtr,Ntr,gM,dpe,jtr,Dtr,gV,Gtr,Otr,Vtr,hM,cpe,Xtr,ztr,hV,Qtr,Wtr,Htr,uM,mpe,Utr,Jtr,uV,Ytr,Ktr,Ztr,pM,fpe,ear,oar,pV,rar,tar,aar,_M,gpe,nar,sar,_V,lar,iar,dar,bM,hpe,car,mar,bV,far,gar,har,vM,upe,uar,par,vV,_ar,bar,Far,FM,ppe,Tar,Mar,FV,Ear,Car,war,_pe,Aar,yar,uy,XBe,bc,TM,bpe,py,Lar,vpe,xar,zBe,Fr,_y,kar,vc,Sar,TV,Rar,Bar,MV,Par,$ar,Iar,by,qar,Fpe,Nar,jar,Dar,ht,vy,Gar,Tpe,Oar,Var,Fc,Xar,Mpe,zar,Qar,EV,War,Har,Uar,Epe,Jar,Yar,Fy,Kar,uo,Ty,Zar,Cpe,enr,onr,bn,rnr,wpe,tnr,anr,Ape,nnr,snr,ype,lnr,inr,dnr,H,MM,Lpe,cnr,mnr,CV,fnr,gnr,hnr,EM,xpe,unr,pnr,wV,_nr,bnr,vnr,CM,kpe,Fnr,Tnr,AV,Mnr,Enr,Cnr,wM,Spe,wnr,Anr,yV,ynr,Lnr,xnr,AM,Rpe,knr,Snr,LV,Rnr,Bnr,Pnr,yM,Bpe,$nr,Inr,xV,qnr,Nnr,jnr,LM,Ppe,Dnr,Gnr,kV,Onr,Vnr,Xnr,xM,$pe,znr,Qnr,SV,Wnr,Hnr,Unr,kM,Ipe,Jnr,Ynr,RV,Knr,Znr,esr,SM,qpe,osr,rsr,BV,tsr,asr,nsr,RM,Npe,ssr,lsr,PV,isr,dsr,csr,BM,jpe,msr,fsr,$V,gsr,hsr,usr,PM,Dpe,psr,_sr,IV,bsr,vsr,Fsr,$M,Gpe,Tsr,Msr,qV,Esr,Csr,wsr,IM,Ope,Asr,ysr,NV,Lsr,xsr,ksr,qM,Vpe,Ssr,Rsr,jV,Bsr,Psr,$sr,NM,Xpe,Isr,qsr,DV,Nsr,jsr,Dsr,jM,zpe,Gsr,Osr,GV,Vsr,Xsr,zsr,DM,Qpe,Qsr,Wsr,OV,Hsr,Usr,Jsr,GM,Wpe,Ysr,Ksr,VV,Zsr,elr,olr,OM,Hpe,rlr,tlr,XV,alr,nlr,slr,VM,Upe,llr,ilr,zV,dlr,clr,mlr,XM,Jpe,flr,glr,QV,hlr,ulr,plr,Ype,_lr,blr,My,QBe,Tc,zM,Kpe,Ey,vlr,Zpe,Flr,WBe,Tr,Cy,Tlr,Mc,Mlr,WV,Elr,Clr,HV,wlr,Alr,ylr,wy,Llr,e_e,xlr,klr,Slr,ut,Ay,Rlr,o_e,Blr,Plr,Ec,$lr,r_e,Ilr,qlr,UV,Nlr,jlr,Dlr,t_e,Glr,Olr,yy,Vlr,po,Ly,Xlr,a_e,zlr,Qlr,vn,Wlr,n_e,Hlr,Ulr,s_e,Jlr,Ylr,l_e,Klr,Zlr,eir,me,QM,i_e,oir,rir,JV,tir,air,nir,WM,d_e,sir,lir,YV,iir,dir,cir,HM,c_e,mir,fir,KV,gir,hir,uir,UM,m_e,pir,_ir,ZV,bir,vir,Fir,JM,f_e,Tir,Mir,eX,Eir,Cir,wir,YM,g_e,Air,yir,oX,Lir,xir,kir,KM,h_e,Sir,Rir,rX,Bir,Pir,$ir,ZM,u_e,Iir,qir,tX,Nir,jir,Dir,e4,p_e,Gir,Oir,aX,Vir,Xir,zir,o4,__e,Qir,Wir,nX,Hir,Uir,Jir,r4,b_e,Yir,Kir,sX,Zir,edr,odr,t4,v_e,rdr,tdr,lX,adr,ndr,sdr,F_e,ldr,idr,xy,HBe,Cc,a4,T_e,ky,ddr,M_e,cdr,UBe,Mr,Sy,mdr,wc,fdr,iX,gdr,hdr,dX,udr,pdr,_dr,Ry,bdr,E_e,vdr,Fdr,Tdr,pt,By,Mdr,C_e,Edr,Cdr,Ac,wdr,w_e,Adr,ydr,cX,Ldr,xdr,kdr,A_e,Sdr,Rdr,Py,Bdr,_o,$y,Pdr,y_e,$dr,Idr,Fn,qdr,L_e,Ndr,jdr,x_e,Ddr,Gdr,k_e,Odr,Vdr,Xdr,Iy,n4,S_e,zdr,Qdr,mX,Wdr,Hdr,Udr,s4,R_e,Jdr,Ydr,fX,Kdr,Zdr,ecr,B_e,ocr,rcr,qy,JBe,yc,l4,P_e,Ny,tcr,$_e,acr,YBe,Er,jy,ncr,Lc,scr,gX,lcr,icr,hX,dcr,ccr,mcr,Dy,fcr,I_e,gcr,hcr,ucr,_t,Gy,pcr,q_e,_cr,bcr,xc,vcr,N_e,Fcr,Tcr,uX,Mcr,Ecr,Ccr,j_e,wcr,Acr,Oy,ycr,bo,Vy,Lcr,D_e,xcr,kcr,Tn,Scr,G_e,Rcr,Bcr,O_e,Pcr,$cr,V_e,Icr,qcr,Ncr,J,i4,X_e,jcr,Dcr,pX,Gcr,Ocr,Vcr,d4,z_e,Xcr,zcr,_X,Qcr,Wcr,Hcr,c4,Q_e,Ucr,Jcr,bX,Ycr,Kcr,Zcr,m4,W_e,emr,omr,vX,rmr,tmr,amr,f4,H_e,nmr,smr,FX,lmr,imr,dmr,g4,U_e,cmr,mmr,TX,fmr,gmr,hmr,h4,J_e,umr,pmr,MX,_mr,bmr,vmr,u4,Y_e,Fmr,Tmr,EX,Mmr,Emr,Cmr,p4,K_e,wmr,Amr,CX,ymr,Lmr,xmr,_4,Z_e,kmr,Smr,wX,Rmr,Bmr,Pmr,b4,ebe,$mr,Imr,AX,qmr,Nmr,jmr,v4,obe,Dmr,Gmr,yX,Omr,Vmr,Xmr,F4,rbe,zmr,Qmr,LX,Wmr,Hmr,Umr,T4,tbe,Jmr,Ymr,xX,Kmr,Zmr,efr,M4,abe,ofr,rfr,kX,tfr,afr,nfr,E4,nbe,sfr,lfr,SX,ifr,dfr,cfr,C4,sbe,mfr,ffr,RX,gfr,hfr,ufr,w4,lbe,pfr,_fr,BX,bfr,vfr,Ffr,A4,ibe,Tfr,Mfr,PX,Efr,Cfr,wfr,y4,dbe,Afr,yfr,$X,Lfr,xfr,kfr,cbe,Sfr,Rfr,Xy,KBe,kc,L4,mbe,zy,Bfr,fbe,Pfr,ZBe,Cr,Qy,$fr,Sc,Ifr,IX,qfr,Nfr,qX,jfr,Dfr,Gfr,Wy,Ofr,gbe,Vfr,Xfr,zfr,bt,Hy,Qfr,hbe,Wfr,Hfr,Rc,Ufr,ube,Jfr,Yfr,NX,Kfr,Zfr,egr,pbe,ogr,rgr,Uy,tgr,vo,Jy,agr,_be,ngr,sgr,Mn,lgr,bbe,igr,dgr,vbe,cgr,mgr,Fbe,fgr,ggr,hgr,be,x4,Tbe,ugr,pgr,jX,_gr,bgr,vgr,k4,Mbe,Fgr,Tgr,DX,Mgr,Egr,Cgr,S4,Ebe,wgr,Agr,GX,ygr,Lgr,xgr,R4,Cbe,kgr,Sgr,OX,Rgr,Bgr,Pgr,B4,wbe,$gr,Igr,VX,qgr,Ngr,jgr,P4,Abe,Dgr,Ggr,XX,Ogr,Vgr,Xgr,$4,ybe,zgr,Qgr,zX,Wgr,Hgr,Ugr,I4,Lbe,Jgr,Ygr,QX,Kgr,Zgr,ehr,q4,xbe,ohr,rhr,WX,thr,ahr,nhr,N4,kbe,shr,lhr,HX,ihr,dhr,chr,Sbe,mhr,fhr,Yy,ePe,Bc,j4,Rbe,Ky,ghr,Bbe,hhr,oPe,wr,Zy,uhr,Pc,phr,UX,_hr,bhr,JX,vhr,Fhr,Thr,e8,Mhr,Pbe,Ehr,Chr,whr,vt,o8,Ahr,$be,yhr,Lhr,$c,xhr,Ibe,khr,Shr,YX,Rhr,Bhr,Phr,qbe,$hr,Ihr,r8,qhr,Fo,t8,Nhr,Nbe,jhr,Dhr,En,Ghr,jbe,Ohr,Vhr,Dbe,Xhr,zhr,Gbe,Qhr,Whr,Hhr,V,D4,Obe,Uhr,Jhr,KX,Yhr,Khr,Zhr,G4,Vbe,eur,our,ZX,rur,tur,aur,O4,Xbe,nur,sur,ez,lur,iur,dur,V4,zbe,cur,mur,oz,fur,gur,hur,X4,Qbe,uur,pur,rz,_ur,bur,vur,z4,Wbe,Fur,Tur,tz,Mur,Eur,Cur,Q4,Hbe,wur,Aur,az,yur,Lur,xur,W4,Ube,kur,Sur,nz,Rur,Bur,Pur,H4,Jbe,$ur,Iur,sz,qur,Nur,jur,U4,Ybe,Dur,Gur,lz,Our,Vur,Xur,J4,Kbe,zur,Qur,iz,Wur,Hur,Uur,Y4,Zbe,Jur,Yur,dz,Kur,Zur,epr,K4,e2e,opr,rpr,cz,tpr,apr,npr,Z4,o2e,spr,lpr,mz,ipr,dpr,cpr,eE,r2e,mpr,fpr,fz,gpr,hpr,upr,oE,t2e,ppr,_pr,gz,bpr,vpr,Fpr,rE,a2e,Tpr,Mpr,hz,Epr,Cpr,wpr,tE,n2e,Apr,ypr,uz,Lpr,xpr,kpr,aE,s2e,Spr,Rpr,pz,Bpr,Ppr,$pr,nE,l2e,Ipr,qpr,_z,Npr,jpr,Dpr,sE,i2e,Gpr,Opr,bz,Vpr,Xpr,zpr,lE,d2e,Qpr,Wpr,vz,Hpr,Upr,Jpr,iE,c2e,Ypr,Kpr,Fz,Zpr,e_r,o_r,dE,m2e,r_r,t_r,Tz,a_r,n_r,s_r,cE,f2e,l_r,i_r,Mz,d_r,c_r,m_r,mE,g2e,f_r,g_r,Ez,h_r,u_r,p_r,h2e,__r,b_r,a8,rPe,Ic,fE,u2e,n8,v_r,p2e,F_r,tPe,Ar,s8,T_r,qc,M_r,Cz,E_r,C_r,wz,w_r,A_r,y_r,l8,L_r,_2e,x_r,k_r,S_r,Ft,i8,R_r,b2e,B_r,P_r,Nc,$_r,v2e,I_r,q_r,Az,N_r,j_r,D_r,F2e,G_r,O_r,d8,V_r,To,c8,X_r,T2e,z_r,Q_r,Cn,W_r,M2e,H_r,U_r,E2e,J_r,Y_r,C2e,K_r,Z_r,ebr,se,gE,w2e,obr,rbr,yz,tbr,abr,nbr,hE,A2e,sbr,lbr,Lz,ibr,dbr,cbr,uE,y2e,mbr,fbr,xz,gbr,hbr,ubr,pE,L2e,pbr,_br,kz,bbr,vbr,Fbr,_E,x2e,Tbr,Mbr,Sz,Ebr,Cbr,wbr,bE,k2e,Abr,ybr,Rz,Lbr,xbr,kbr,vE,S2e,Sbr,Rbr,Bz,Bbr,Pbr,$br,FE,R2e,Ibr,qbr,Pz,Nbr,jbr,Dbr,TE,B2e,Gbr,Obr,$z,Vbr,Xbr,zbr,ME,P2e,Qbr,Wbr,Iz,Hbr,Ubr,Jbr,EE,$2e,Ybr,Kbr,qz,Zbr,e2r,o2r,CE,I2e,r2r,t2r,Nz,a2r,n2r,s2r,wE,q2e,l2r,i2r,jz,d2r,c2r,m2r,AE,N2e,f2r,g2r,Dz,h2r,u2r,p2r,yE,j2e,_2r,b2r,Gz,v2r,F2r,T2r,LE,D2e,M2r,E2r,Oz,C2r,w2r,A2r,xE,G2e,y2r,L2r,Vz,x2r,k2r,S2r,O2e,R2r,B2r,m8,aPe,jc,kE,V2e,f8,P2r,X2e,$2r,nPe,yr,g8,I2r,Dc,q2r,Xz,N2r,j2r,zz,D2r,G2r,O2r,h8,V2r,z2e,X2r,z2r,Q2r,Tt,u8,W2r,Q2e,H2r,U2r,Gc,J2r,W2e,Y2r,K2r,Qz,Z2r,evr,ovr,H2e,rvr,tvr,p8,avr,Mo,_8,nvr,U2e,svr,lvr,wn,ivr,J2e,dvr,cvr,Y2e,mvr,fvr,K2e,gvr,hvr,uvr,Z2e,SE,eve,pvr,_vr,Wz,bvr,vvr,Fvr,ove,Tvr,Mvr,b8,sPe,Oc,RE,rve,v8,Evr,tve,Cvr,lPe,Lr,F8,wvr,Vc,Avr,Hz,yvr,Lvr,Uz,xvr,kvr,Svr,T8,Rvr,ave,Bvr,Pvr,$vr,Mt,M8,Ivr,nve,qvr,Nvr,Xc,jvr,sve,Dvr,Gvr,Jz,Ovr,Vvr,Xvr,lve,zvr,Qvr,E8,Wvr,Eo,C8,Hvr,ive,Uvr,Jvr,An,Yvr,dve,Kvr,Zvr,cve,eFr,oFr,mve,rFr,tFr,aFr,Y,BE,fve,nFr,sFr,Yz,lFr,iFr,dFr,PE,gve,cFr,mFr,Kz,fFr,gFr,hFr,$E,hve,uFr,pFr,Zz,_Fr,bFr,vFr,IE,uve,FFr,TFr,eQ,MFr,EFr,CFr,qE,pve,wFr,AFr,oQ,yFr,LFr,xFr,NE,_ve,kFr,SFr,rQ,RFr,BFr,PFr,jE,bve,$Fr,IFr,tQ,qFr,NFr,jFr,DE,vve,DFr,GFr,aQ,OFr,VFr,XFr,GE,Fve,zFr,QFr,nQ,WFr,HFr,UFr,OE,Tve,JFr,YFr,sQ,KFr,ZFr,e1r,VE,Mve,o1r,r1r,lQ,t1r,a1r,n1r,XE,Eve,s1r,l1r,iQ,i1r,d1r,c1r,zE,Cve,m1r,f1r,dQ,g1r,h1r,u1r,QE,wve,p1r,_1r,cQ,b1r,v1r,F1r,WE,Ave,T1r,M1r,mQ,E1r,C1r,w1r,HE,yve,A1r,y1r,fQ,L1r,x1r,k1r,UE,Lve,S1r,R1r,gQ,B1r,P1r,$1r,JE,xve,I1r,q1r,hQ,N1r,j1r,D1r,YE,kve,G1r,O1r,uQ,V1r,X1r,z1r,KE,Sve,Q1r,W1r,pQ,H1r,U1r,J1r,Rve,Y1r,K1r,w8,iPe,zc,ZE,Bve,A8,Z1r,Pve,eTr,dPe,xr,y8,oTr,Qc,rTr,_Q,tTr,aTr,bQ,nTr,sTr,lTr,L8,iTr,$ve,dTr,cTr,mTr,Et,x8,fTr,Ive,gTr,hTr,Wc,uTr,qve,pTr,_Tr,vQ,bTr,vTr,FTr,Nve,TTr,MTr,k8,ETr,Co,S8,CTr,jve,wTr,ATr,yn,yTr,Dve,LTr,xTr,Gve,kTr,STr,Ove,RTr,BTr,PTr,K,e5,Vve,$Tr,ITr,FQ,qTr,NTr,jTr,o5,Xve,DTr,GTr,TQ,OTr,VTr,XTr,r5,zve,zTr,QTr,MQ,WTr,HTr,UTr,t5,Qve,JTr,YTr,EQ,KTr,ZTr,eMr,a5,Wve,oMr,rMr,CQ,tMr,aMr,nMr,n5,Hve,sMr,lMr,wQ,iMr,dMr,cMr,s5,Uve,mMr,fMr,AQ,gMr,hMr,uMr,l5,Jve,pMr,_Mr,yQ,bMr,vMr,FMr,i5,Yve,TMr,MMr,LQ,EMr,CMr,wMr,d5,Kve,AMr,yMr,xQ,LMr,xMr,kMr,c5,Zve,SMr,RMr,kQ,BMr,PMr,$Mr,m5,eFe,IMr,qMr,SQ,NMr,jMr,DMr,f5,oFe,GMr,OMr,RQ,VMr,XMr,zMr,g5,rFe,QMr,WMr,BQ,HMr,UMr,JMr,h5,tFe,YMr,KMr,PQ,ZMr,e4r,o4r,u5,aFe,r4r,t4r,$Q,a4r,n4r,s4r,p5,nFe,l4r,i4r,IQ,d4r,c4r,m4r,_5,sFe,f4r,g4r,qQ,h4r,u4r,p4r,b5,lFe,_4r,b4r,NQ,v4r,F4r,T4r,v5,iFe,M4r,E4r,jQ,C4r,w4r,A4r,dFe,y4r,L4r,R8,cPe,Hc,F5,cFe,B8,x4r,mFe,k4r,mPe,kr,P8,S4r,Uc,R4r,DQ,B4r,P4r,GQ,$4r,I4r,q4r,$8,N4r,fFe,j4r,D4r,G4r,Ct,I8,O4r,gFe,V4r,X4r,Jc,z4r,hFe,Q4r,W4r,OQ,H4r,U4r,J4r,uFe,Y4r,K4r,q8,Z4r,wo,N8,eEr,pFe,oEr,rEr,Ln,tEr,_Fe,aEr,nEr,bFe,sEr,lEr,vFe,iEr,dEr,cEr,FFe,T5,TFe,mEr,fEr,VQ,gEr,hEr,uEr,MFe,pEr,_Er,j8,fPe,Yc,M5,EFe,D8,bEr,CFe,vEr,gPe,Sr,G8,FEr,Kc,TEr,XQ,MEr,EEr,zQ,CEr,wEr,AEr,O8,yEr,wFe,LEr,xEr,kEr,wt,V8,SEr,AFe,REr,BEr,Zc,PEr,yFe,$Er,IEr,QQ,qEr,NEr,jEr,LFe,DEr,GEr,X8,OEr,Ao,z8,VEr,xFe,XEr,zEr,xn,QEr,kFe,WEr,HEr,SFe,UEr,JEr,RFe,YEr,KEr,ZEr,BFe,E5,PFe,e5r,o5r,WQ,r5r,t5r,a5r,$Fe,n5r,s5r,Q8,hPe,em,C5,IFe,W8,l5r,qFe,i5r,uPe,Rr,H8,d5r,om,c5r,HQ,m5r,f5r,UQ,g5r,h5r,u5r,U8,p5r,NFe,_5r,b5r,v5r,At,J8,F5r,jFe,T5r,M5r,rm,E5r,DFe,C5r,w5r,JQ,A5r,y5r,L5r,GFe,x5r,k5r,Y8,S5r,yo,K8,R5r,OFe,B5r,P5r,kn,$5r,VFe,I5r,q5r,XFe,N5r,j5r,zFe,D5r,G5r,O5r,z,w5,QFe,V5r,X5r,YQ,z5r,Q5r,W5r,A5,WFe,H5r,U5r,KQ,J5r,Y5r,K5r,y5,HFe,Z5r,e3r,ZQ,o3r,r3r,t3r,L5,UFe,a3r,n3r,eW,s3r,l3r,i3r,x5,JFe,d3r,c3r,oW,m3r,f3r,g3r,k5,YFe,h3r,u3r,rW,p3r,_3r,b3r,S5,KFe,v3r,F3r,tW,T3r,M3r,E3r,R5,ZFe,C3r,w3r,aW,A3r,y3r,L3r,B5,e1e,x3r,k3r,nW,S3r,R3r,B3r,P5,o1e,P3r,$3r,sW,I3r,q3r,N3r,$5,r1e,j3r,D3r,lW,G3r,O3r,V3r,I5,t1e,X3r,z3r,iW,Q3r,W3r,H3r,q5,a1e,U3r,J3r,dW,Y3r,K3r,Z3r,N5,n1e,eCr,oCr,cW,rCr,tCr,aCr,j5,s1e,nCr,sCr,mW,lCr,iCr,dCr,D5,l1e,cCr,mCr,fW,fCr,gCr,hCr,G5,i1e,uCr,pCr,gW,_Cr,bCr,vCr,O5,d1e,FCr,TCr,hW,MCr,ECr,CCr,V5,c1e,wCr,ACr,uW,yCr,LCr,xCr,X5,m1e,kCr,SCr,pW,RCr,BCr,PCr,z5,f1e,$Cr,ICr,_W,qCr,NCr,jCr,Q5,g1e,DCr,GCr,bW,OCr,VCr,XCr,W5,h1e,zCr,QCr,vW,WCr,HCr,UCr,H5,u1e,JCr,YCr,FW,KCr,ZCr,ewr,U5,p1e,owr,rwr,TW,twr,awr,nwr,_1e,swr,lwr,Z8,pPe,tm,J5,b1e,eL,iwr,v1e,dwr,_Pe,Br,oL,cwr,am,mwr,MW,fwr,gwr,EW,hwr,uwr,pwr,rL,_wr,F1e,bwr,vwr,Fwr,yt,tL,Twr,T1e,Mwr,Ewr,nm,Cwr,M1e,wwr,Awr,CW,ywr,Lwr,xwr,E1e,kwr,Swr,aL,Rwr,Lo,nL,Bwr,C1e,Pwr,$wr,Sn,Iwr,w1e,qwr,Nwr,A1e,jwr,Dwr,y1e,Gwr,Owr,Vwr,ca,Y5,L1e,Xwr,zwr,wW,Qwr,Wwr,Hwr,K5,x1e,Uwr,Jwr,AW,Ywr,Kwr,Zwr,Z5,k1e,e6r,o6r,yW,r6r,t6r,a6r,e3,S1e,n6r,s6r,LW,l6r,i6r,d6r,o3,R1e,c6r,m6r,xW,f6r,g6r,h6r,B1e,u6r,p6r,sL,bPe,sm,r3,P1e,lL,_6r,$1e,b6r,vPe,Pr,iL,v6r,lm,F6r,kW,T6r,M6r,SW,E6r,C6r,w6r,dL,A6r,I1e,y6r,L6r,x6r,Lt,cL,k6r,q1e,S6r,R6r,im,B6r,N1e,P6r,$6r,RW,I6r,q6r,N6r,j1e,j6r,D6r,mL,G6r,xo,fL,O6r,D1e,V6r,X6r,Rn,z6r,G1e,Q6r,W6r,O1e,H6r,U6r,V1e,J6r,Y6r,K6r,fe,t3,X1e,Z6r,eAr,BW,oAr,rAr,tAr,a3,z1e,aAr,nAr,PW,sAr,lAr,iAr,n3,Q1e,dAr,cAr,$W,mAr,fAr,gAr,s3,W1e,hAr,uAr,IW,pAr,_Ar,bAr,l3,H1e,vAr,FAr,qW,TAr,MAr,EAr,i3,U1e,CAr,wAr,NW,AAr,yAr,LAr,d3,J1e,xAr,kAr,jW,SAr,RAr,BAr,c3,Y1e,PAr,$Ar,DW,IAr,qAr,NAr,m3,K1e,jAr,DAr,GW,GAr,OAr,VAr,f3,Z1e,XAr,zAr,OW,QAr,WAr,HAr,g3,eTe,UAr,JAr,VW,YAr,KAr,ZAr,h3,oTe,e0r,o0r,XW,r0r,t0r,a0r,rTe,n0r,s0r,gL,FPe,dm,u3,tTe,hL,l0r,aTe,i0r,TPe,$r,uL,d0r,cm,c0r,zW,m0r,f0r,QW,g0r,h0r,u0r,pL,p0r,nTe,_0r,b0r,v0r,xt,_L,F0r,sTe,T0r,M0r,mm,E0r,lTe,C0r,w0r,WW,A0r,y0r,L0r,iTe,x0r,k0r,bL,S0r,ko,vL,R0r,dTe,B0r,P0r,Bn,$0r,cTe,I0r,q0r,mTe,N0r,j0r,fTe,D0r,G0r,O0r,ve,p3,gTe,V0r,X0r,HW,z0r,Q0r,W0r,_3,hTe,H0r,U0r,UW,J0r,Y0r,K0r,b3,uTe,Z0r,eyr,JW,oyr,ryr,tyr,v3,pTe,ayr,nyr,YW,syr,lyr,iyr,F3,_Te,dyr,cyr,KW,myr,fyr,gyr,T3,bTe,hyr,uyr,ZW,pyr,_yr,byr,M3,vTe,vyr,Fyr,eH,Tyr,Myr,Eyr,E3,FTe,Cyr,wyr,oH,Ayr,yyr,Lyr,C3,TTe,xyr,kyr,rH,Syr,Ryr,Byr,w3,MTe,Pyr,$yr,tH,Iyr,qyr,Nyr,ETe,jyr,Dyr,FL,MPe,fm,A3,CTe,TL,Gyr,wTe,Oyr,EPe,Ir,ML,Vyr,gm,Xyr,aH,zyr,Qyr,nH,Wyr,Hyr,Uyr,EL,Jyr,ATe,Yyr,Kyr,Zyr,kt,CL,e8r,yTe,o8r,r8r,hm,t8r,LTe,a8r,n8r,sH,s8r,l8r,i8r,xTe,d8r,c8r,wL,m8r,So,AL,f8r,kTe,g8r,h8r,Pn,u8r,STe,p8r,_8r,RTe,b8r,v8r,BTe,F8r,T8r,M8r,Ee,y3,PTe,E8r,C8r,lH,w8r,A8r,y8r,L3,$Te,L8r,x8r,iH,k8r,S8r,R8r,x3,ITe,B8r,P8r,dH,$8r,I8r,q8r,k3,qTe,N8r,j8r,cH,D8r,G8r,O8r,S3,NTe,V8r,X8r,mH,z8r,Q8r,W8r,R3,jTe,H8r,U8r,fH,J8r,Y8r,K8r,B3,DTe,Z8r,eLr,gH,oLr,rLr,tLr,P3,GTe,aLr,nLr,hH,sLr,lLr,iLr,$3,OTe,dLr,cLr,uH,mLr,fLr,gLr,VTe,hLr,uLr,yL,CPe,um,I3,XTe,LL,pLr,zTe,_Lr,wPe,qr,xL,bLr,pm,vLr,pH,FLr,TLr,_H,MLr,ELr,CLr,kL,wLr,QTe,ALr,yLr,LLr,St,SL,xLr,WTe,kLr,SLr,_m,RLr,HTe,BLr,PLr,bH,$Lr,ILr,qLr,UTe,NLr,jLr,RL,DLr,Ro,BL,GLr,JTe,OLr,VLr,$n,XLr,YTe,zLr,QLr,KTe,WLr,HLr,ZTe,ULr,JLr,YLr,Fe,q3,eMe,KLr,ZLr,vH,e7r,o7r,r7r,N3,oMe,t7r,a7r,FH,n7r,s7r,l7r,j3,rMe,i7r,d7r,TH,c7r,m7r,f7r,D3,tMe,g7r,h7r,MH,u7r,p7r,_7r,G3,aMe,b7r,v7r,EH,F7r,T7r,M7r,O3,nMe,E7r,C7r,CH,w7r,A7r,y7r,V3,sMe,L7r,x7r,wH,k7r,S7r,R7r,X3,lMe,B7r,P7r,AH,$7r,I7r,q7r,z3,iMe,N7r,j7r,yH,D7r,G7r,O7r,Q3,dMe,V7r,X7r,LH,z7r,Q7r,W7r,cMe,H7r,U7r,PL,APe,bm,W3,mMe,$L,J7r,fMe,Y7r,yPe,Nr,IL,K7r,vm,Z7r,xH,e9r,o9r,kH,r9r,t9r,a9r,qL,n9r,gMe,s9r,l9r,i9r,Rt,NL,d9r,hMe,c9r,m9r,Fm,f9r,uMe,g9r,h9r,SH,u9r,p9r,_9r,pMe,b9r,v9r,jL,F9r,Bo,DL,T9r,_Me,M9r,E9r,In,C9r,bMe,w9r,A9r,vMe,y9r,L9r,FMe,x9r,k9r,S9r,Te,H3,TMe,R9r,B9r,RH,P9r,$9r,I9r,U3,MMe,q9r,N9r,BH,j9r,D9r,G9r,J3,EMe,O9r,V9r,PH,X9r,z9r,Q9r,Y3,CMe,W9r,H9r,$H,U9r,J9r,Y9r,K3,wMe,K9r,Z9r,IH,exr,oxr,rxr,Z3,AMe,txr,axr,qH,nxr,sxr,lxr,eC,yMe,ixr,dxr,NH,cxr,mxr,fxr,oC,LMe,gxr,hxr,jH,uxr,pxr,_xr,rC,xMe,bxr,vxr,DH,Fxr,Txr,Mxr,tC,kMe,Exr,Cxr,GH,wxr,Axr,yxr,SMe,Lxr,xxr,GL,LPe,Tm,aC,RMe,OL,kxr,BMe,Sxr,xPe,jr,VL,Rxr,Mm,Bxr,OH,Pxr,$xr,VH,Ixr,qxr,Nxr,XL,jxr,PMe,Dxr,Gxr,Oxr,Bt,zL,Vxr,$Me,Xxr,zxr,Em,Qxr,IMe,Wxr,Hxr,XH,Uxr,Jxr,Yxr,qMe,Kxr,Zxr,QL,ekr,Po,WL,okr,NMe,rkr,tkr,qn,akr,jMe,nkr,skr,DMe,lkr,ikr,GMe,dkr,ckr,mkr,Be,nC,OMe,fkr,gkr,zH,hkr,ukr,pkr,sC,VMe,_kr,bkr,QH,vkr,Fkr,Tkr,lC,XMe,Mkr,Ekr,WH,Ckr,wkr,Akr,iC,zMe,ykr,Lkr,HH,xkr,kkr,Skr,dC,QMe,Rkr,Bkr,UH,Pkr,$kr,Ikr,cC,WMe,qkr,Nkr,JH,jkr,Dkr,Gkr,mC,HMe,Okr,Vkr,YH,Xkr,zkr,Qkr,fC,UMe,Wkr,Hkr,KH,Ukr,Jkr,Ykr,JMe,Kkr,Zkr,HL,kPe,Cm,gC,YMe,UL,eSr,KMe,oSr,SPe,Dr,JL,rSr,wm,tSr,ZH,aSr,nSr,eU,sSr,lSr,iSr,YL,dSr,ZMe,cSr,mSr,fSr,Pt,KL,gSr,e4e,hSr,uSr,Am,pSr,o4e,_Sr,bSr,oU,vSr,FSr,TSr,r4e,MSr,ESr,ZL,CSr,$o,e7,wSr,t4e,ASr,ySr,Nn,LSr,a4e,xSr,kSr,n4e,SSr,RSr,s4e,BSr,PSr,$Sr,Pe,hC,l4e,ISr,qSr,rU,NSr,jSr,DSr,uC,i4e,GSr,OSr,tU,VSr,XSr,zSr,pC,d4e,QSr,WSr,aU,HSr,USr,JSr,_C,c4e,YSr,KSr,nU,ZSr,eRr,oRr,bC,m4e,rRr,tRr,sU,aRr,nRr,sRr,vC,f4e,lRr,iRr,lU,dRr,cRr,mRr,FC,g4e,fRr,gRr,iU,hRr,uRr,pRr,TC,h4e,_Rr,bRr,dU,vRr,FRr,TRr,u4e,MRr,ERr,o7,RPe,ym,MC,p4e,r7,CRr,_4e,wRr,BPe,Gr,t7,ARr,Lm,yRr,cU,LRr,xRr,mU,kRr,SRr,RRr,a7,BRr,b4e,PRr,$Rr,IRr,$t,n7,qRr,v4e,NRr,jRr,xm,DRr,F4e,GRr,ORr,fU,VRr,XRr,zRr,T4e,QRr,WRr,s7,HRr,Io,l7,URr,M4e,JRr,YRr,jn,KRr,E4e,ZRr,eBr,C4e,oBr,rBr,w4e,tBr,aBr,nBr,A4e,EC,y4e,sBr,lBr,gU,iBr,dBr,cBr,L4e,mBr,fBr,i7,PPe,km,CC,x4e,d7,gBr,k4e,hBr,$Pe,Or,c7,uBr,Sm,pBr,hU,_Br,bBr,uU,vBr,FBr,TBr,m7,MBr,S4e,EBr,CBr,wBr,It,f7,ABr,R4e,yBr,LBr,Rm,xBr,B4e,kBr,SBr,pU,RBr,BBr,PBr,P4e,$Br,IBr,g7,qBr,qo,h7,NBr,$4e,jBr,DBr,Dn,GBr,I4e,OBr,VBr,q4e,XBr,zBr,N4e,QBr,WBr,HBr,u7,wC,j4e,UBr,JBr,_U,YBr,KBr,ZBr,AC,D4e,ePr,oPr,bU,rPr,tPr,aPr,G4e,nPr,sPr,p7,IPe,Bm,yC,O4e,_7,lPr,V4e,iPr,qPe,Vr,b7,dPr,Pm,cPr,vU,mPr,fPr,FU,gPr,hPr,uPr,v7,pPr,X4e,_Pr,bPr,vPr,qt,F7,FPr,z4e,TPr,MPr,$m,EPr,Q4e,CPr,wPr,TU,APr,yPr,LPr,W4e,xPr,kPr,T7,SPr,No,M7,RPr,H4e,BPr,PPr,Gn,$Pr,U4e,IPr,qPr,J4e,NPr,jPr,Y4e,DPr,GPr,OPr,K4e,LC,Z4e,VPr,XPr,MU,zPr,QPr,WPr,eEe,HPr,UPr,E7,NPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Bw=new X({}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vm=new JPr({props:{warning:!0,$$slots:{default:[X6t]},$$scope:{ctx:qm}}}),$w=new X({}),Iw=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L560"}}),jw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L583"}}),Dw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Gw=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L705"}}),Ow=new X({}),Vw=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L359"}}),Qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L373"}}),Ww=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Hw=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L569"}}),Uw=new X({}),Jw=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),Zw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Nh=new JPr({props:{$$slots:{default:[z6t]},$$scope:{ctx:qm}}}),e6=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),o6=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),r6=new X({}),t6=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),s6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84"}}),Uh=new JPr({props:{$$slots:{default:[Q6t]},$$scope:{ctx:qm}}}),l6=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),i6=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237"}}),d6=new X({}),c6=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L714"}}),f6=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),h6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new X({}),_6=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L721"}}),v6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),T6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E6=new X({}),C6=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),A6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),L6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k6=new X({}),S6=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),B6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),$6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new X({}),N6=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),D6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),O6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X6=new X({}),z6=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),W6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),U6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y6=new X({}),K6=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),eA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),rA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),lA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),dA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),fA=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),hA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),pA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L768"}}),TA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),EA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L775"}}),LA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),kA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),BA=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),$A=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),qA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),OA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),XA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),UA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),YA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),r0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),a0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),d0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),m0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),p0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),b0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),M0=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),C0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),A0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),x0=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),S0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),B0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),N0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),D0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),z0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),W0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),K0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oy=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),ny=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),fy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),vy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Ty=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),Cy=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Ay=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Ly=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Sy=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),By=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),$y=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Gy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Vy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Qy=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Hy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Jy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),o8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),t8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n8=new X({}),s8=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),i8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),c8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f8=new X({}),g8=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),u8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),_8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v8=new X({}),F8=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),M8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),C8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A8=new X({}),y8=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),x8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),S8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B8=new X({}),P8=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),I8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),N8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D8=new X({}),G8=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),V8=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),z8=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W8=new X({}),H8=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),J8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),K8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),tL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),nL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),cL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),fL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),uL=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),_L=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),vL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),ML=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),CL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),AL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),xL=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),SL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),BL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),NL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),DL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),VL=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),zL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),WL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),KL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),e7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r7=new X({}),t7=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),n7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),l7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d7=new X({}),c7=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),f7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),h7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_7=new X({}),b7=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),F7=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),M7=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),m(he.$$.fragment),Me=l(),Xo=a("span"),ji=o("Auto Classes"),Nm=l(),ma=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=a("code"),xw=o("from_pretrained()"),jm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Oi=o("Instantiating one of "),On=a("a"),kw=o("AutoConfig"),Vn=o(", "),Xn=a("a"),Sw=o("AutoModel"),Vi=o(`, and
`),zn=a("a"),Rw=o("AutoTokenizer"),Xi=o(" will directly create a class of the relevant architecture. For instance"),Dm=l(),m(Da.$$.fragment),mo=l(),_e=a("p"),E9=o("will create a model that is an instance of "),zi=a("a"),C9=o("BertModel"),w9=o("."),zo=l(),Ga=a("p"),A9=o("There is one class of "),Gm=a("code"),y9=o("AutoModel"),JIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qRe=l(),Qi=a("h2"),Om=a("a"),uY=a("span"),m(Bw.$$.fragment),YIe=l(),pY=a("span"),KIe=o("Extending the Auto Classes"),NRe=l(),Qn=a("p"),ZIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_Y=a("code"),eqe=o("NewModel"),oqe=o(", make sure you have a "),bY=a("code"),rqe=o("NewModelConfig"),tqe=o(` then you can add those to the auto
classes like this:`),jRe=l(),m(Pw.$$.fragment),DRe=l(),L9=a("p"),aqe=o("You will then be able to use the auto classes like you would usually do!"),GRe=l(),m(Vm.$$.fragment),ORe=l(),Wi=a("h2"),Xm=a("a"),vY=a("span"),m($w.$$.fragment),nqe=l(),FY=a("span"),sqe=o("AutoConfig"),VRe=l(),Qo=a("div"),m(Iw.$$.fragment),lqe=l(),qw=a("p"),iqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x9=a("a"),dqe=o("from_pretrained()"),cqe=o(" class method."),mqe=l(),Nw=a("p"),fqe=o("This class cannot be instantiated directly using "),TY=a("code"),gqe=o("__init__()"),hqe=o(" (throws an error)."),uqe=l(),fo=a("div"),m(jw.$$.fragment),pqe=l(),MY=a("p"),_qe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bqe=l(),Hi=a("p"),vqe=o("The configuration class to instantiate is selected based on the "),EY=a("code"),Fqe=o("model_type"),Tqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=a("code"),Mqe=o("pretrained_model_name_or_path"),Eqe=o(":"),Cqe=l(),v=a("ul"),zm=a("li"),wY=a("strong"),wqe=o("albert"),Aqe=o(" \u2014 "),k9=a("a"),yqe=o("AlbertConfig"),Lqe=o(" (ALBERT model)"),xqe=l(),Qm=a("li"),AY=a("strong"),kqe=o("bart"),Sqe=o(" \u2014 "),S9=a("a"),Rqe=o("BartConfig"),Bqe=o(" (BART model)"),Pqe=l(),Wm=a("li"),yY=a("strong"),$qe=o("beit"),Iqe=o(" \u2014 "),R9=a("a"),qqe=o("BeitConfig"),Nqe=o(" (BEiT model)"),jqe=l(),Hm=a("li"),LY=a("strong"),Dqe=o("bert"),Gqe=o(" \u2014 "),B9=a("a"),Oqe=o("BertConfig"),Vqe=o(" (BERT model)"),Xqe=l(),Um=a("li"),xY=a("strong"),zqe=o("bert-generation"),Qqe=o(" \u2014 "),P9=a("a"),Wqe=o("BertGenerationConfig"),Hqe=o(" (Bert Generation model)"),Uqe=l(),Jm=a("li"),kY=a("strong"),Jqe=o("big_bird"),Yqe=o(" \u2014 "),$9=a("a"),Kqe=o("BigBirdConfig"),Zqe=o(" (BigBird model)"),eNe=l(),Ym=a("li"),SY=a("strong"),oNe=o("bigbird_pegasus"),rNe=o(" \u2014 "),I9=a("a"),tNe=o("BigBirdPegasusConfig"),aNe=o(" (BigBirdPegasus model)"),nNe=l(),Km=a("li"),RY=a("strong"),sNe=o("blenderbot"),lNe=o(" \u2014 "),q9=a("a"),iNe=o("BlenderbotConfig"),dNe=o(" (Blenderbot model)"),cNe=l(),Zm=a("li"),BY=a("strong"),mNe=o("blenderbot-small"),fNe=o(" \u2014 "),N9=a("a"),gNe=o("BlenderbotSmallConfig"),hNe=o(" (BlenderbotSmall model)"),uNe=l(),ef=a("li"),PY=a("strong"),pNe=o("camembert"),_Ne=o(" \u2014 "),j9=a("a"),bNe=o("CamembertConfig"),vNe=o(" (CamemBERT model)"),FNe=l(),of=a("li"),$Y=a("strong"),TNe=o("canine"),MNe=o(" \u2014 "),D9=a("a"),ENe=o("CanineConfig"),CNe=o(" (Canine model)"),wNe=l(),rf=a("li"),IY=a("strong"),ANe=o("clip"),yNe=o(" \u2014 "),G9=a("a"),LNe=o("CLIPConfig"),xNe=o(" (CLIP model)"),kNe=l(),tf=a("li"),qY=a("strong"),SNe=o("convbert"),RNe=o(" \u2014 "),O9=a("a"),BNe=o("ConvBertConfig"),PNe=o(" (ConvBERT model)"),$Ne=l(),af=a("li"),NY=a("strong"),INe=o("convnext"),qNe=o(" \u2014 "),V9=a("a"),NNe=o("ConvNextConfig"),jNe=o(" (ConvNext model)"),DNe=l(),nf=a("li"),jY=a("strong"),GNe=o("ctrl"),ONe=o(" \u2014 "),X9=a("a"),VNe=o("CTRLConfig"),XNe=o(" (CTRL model)"),zNe=l(),sf=a("li"),DY=a("strong"),QNe=o("data2vec-audio"),WNe=o(" \u2014 "),z9=a("a"),HNe=o("Data2VecAudioConfig"),UNe=o(" (Data2VecAudio model)"),JNe=l(),lf=a("li"),GY=a("strong"),YNe=o("data2vec-text"),KNe=o(" \u2014 "),Q9=a("a"),ZNe=o("Data2VecTextConfig"),eje=o(" (Data2VecText model)"),oje=l(),df=a("li"),OY=a("strong"),rje=o("data2vec-vision"),tje=o(" \u2014 "),W9=a("a"),aje=o("Data2VecVisionConfig"),nje=o(" (Data2VecVision model)"),sje=l(),cf=a("li"),VY=a("strong"),lje=o("deberta"),ije=o(" \u2014 "),H9=a("a"),dje=o("DebertaConfig"),cje=o(" (DeBERTa model)"),mje=l(),mf=a("li"),XY=a("strong"),fje=o("deberta-v2"),gje=o(" \u2014 "),U9=a("a"),hje=o("DebertaV2Config"),uje=o(" (DeBERTa-v2 model)"),pje=l(),ff=a("li"),zY=a("strong"),_je=o("decision_transformer"),bje=o(" \u2014 "),J9=a("a"),vje=o("DecisionTransformerConfig"),Fje=o(" (Decision Transformer model)"),Tje=l(),gf=a("li"),QY=a("strong"),Mje=o("deit"),Eje=o(" \u2014 "),Y9=a("a"),Cje=o("DeiTConfig"),wje=o(" (DeiT model)"),Aje=l(),hf=a("li"),WY=a("strong"),yje=o("detr"),Lje=o(" \u2014 "),K9=a("a"),xje=o("DetrConfig"),kje=o(" (DETR model)"),Sje=l(),uf=a("li"),HY=a("strong"),Rje=o("distilbert"),Bje=o(" \u2014 "),Z9=a("a"),Pje=o("DistilBertConfig"),$je=o(" (DistilBERT model)"),Ije=l(),pf=a("li"),UY=a("strong"),qje=o("dpr"),Nje=o(" \u2014 "),ex=a("a"),jje=o("DPRConfig"),Dje=o(" (DPR model)"),Gje=l(),_f=a("li"),JY=a("strong"),Oje=o("dpt"),Vje=o(" \u2014 "),ox=a("a"),Xje=o("DPTConfig"),zje=o(" (DPT model)"),Qje=l(),bf=a("li"),YY=a("strong"),Wje=o("electra"),Hje=o(" \u2014 "),rx=a("a"),Uje=o("ElectraConfig"),Jje=o(" (ELECTRA model)"),Yje=l(),vf=a("li"),KY=a("strong"),Kje=o("encoder-decoder"),Zje=o(" \u2014 "),tx=a("a"),eDe=o("EncoderDecoderConfig"),oDe=o(" (Encoder decoder model)"),rDe=l(),Ff=a("li"),ZY=a("strong"),tDe=o("flaubert"),aDe=o(" \u2014 "),ax=a("a"),nDe=o("FlaubertConfig"),sDe=o(" (FlauBERT model)"),lDe=l(),Tf=a("li"),eK=a("strong"),iDe=o("fnet"),dDe=o(" \u2014 "),nx=a("a"),cDe=o("FNetConfig"),mDe=o(" (FNet model)"),fDe=l(),Mf=a("li"),oK=a("strong"),gDe=o("fsmt"),hDe=o(" \u2014 "),sx=a("a"),uDe=o("FSMTConfig"),pDe=o(" (FairSeq Machine-Translation model)"),_De=l(),Ef=a("li"),rK=a("strong"),bDe=o("funnel"),vDe=o(" \u2014 "),lx=a("a"),FDe=o("FunnelConfig"),TDe=o(" (Funnel Transformer model)"),MDe=l(),Cf=a("li"),tK=a("strong"),EDe=o("glpn"),CDe=o(" \u2014 "),ix=a("a"),wDe=o("GLPNConfig"),ADe=o(" (GLPN model)"),yDe=l(),wf=a("li"),aK=a("strong"),LDe=o("gpt2"),xDe=o(" \u2014 "),dx=a("a"),kDe=o("GPT2Config"),SDe=o(" (OpenAI GPT-2 model)"),RDe=l(),Af=a("li"),nK=a("strong"),BDe=o("gpt_neo"),PDe=o(" \u2014 "),cx=a("a"),$De=o("GPTNeoConfig"),IDe=o(" (GPT Neo model)"),qDe=l(),yf=a("li"),sK=a("strong"),NDe=o("gptj"),jDe=o(" \u2014 "),mx=a("a"),DDe=o("GPTJConfig"),GDe=o(" (GPT-J model)"),ODe=l(),Lf=a("li"),lK=a("strong"),VDe=o("hubert"),XDe=o(" \u2014 "),fx=a("a"),zDe=o("HubertConfig"),QDe=o(" (Hubert model)"),WDe=l(),xf=a("li"),iK=a("strong"),HDe=o("ibert"),UDe=o(" \u2014 "),gx=a("a"),JDe=o("IBertConfig"),YDe=o(" (I-BERT model)"),KDe=l(),kf=a("li"),dK=a("strong"),ZDe=o("imagegpt"),eGe=o(" \u2014 "),hx=a("a"),oGe=o("ImageGPTConfig"),rGe=o(" (ImageGPT model)"),tGe=l(),Sf=a("li"),cK=a("strong"),aGe=o("layoutlm"),nGe=o(" \u2014 "),ux=a("a"),sGe=o("LayoutLMConfig"),lGe=o(" (LayoutLM model)"),iGe=l(),Rf=a("li"),mK=a("strong"),dGe=o("layoutlmv2"),cGe=o(" \u2014 "),px=a("a"),mGe=o("LayoutLMv2Config"),fGe=o(" (LayoutLMv2 model)"),gGe=l(),Bf=a("li"),fK=a("strong"),hGe=o("led"),uGe=o(" \u2014 "),_x=a("a"),pGe=o("LEDConfig"),_Ge=o(" (LED model)"),bGe=l(),Pf=a("li"),gK=a("strong"),vGe=o("longformer"),FGe=o(" \u2014 "),bx=a("a"),TGe=o("LongformerConfig"),MGe=o(" (Longformer model)"),EGe=l(),$f=a("li"),hK=a("strong"),CGe=o("luke"),wGe=o(" \u2014 "),vx=a("a"),AGe=o("LukeConfig"),yGe=o(" (LUKE model)"),LGe=l(),If=a("li"),uK=a("strong"),xGe=o("lxmert"),kGe=o(" \u2014 "),Fx=a("a"),SGe=o("LxmertConfig"),RGe=o(" (LXMERT model)"),BGe=l(),qf=a("li"),pK=a("strong"),PGe=o("m2m_100"),$Ge=o(" \u2014 "),Tx=a("a"),IGe=o("M2M100Config"),qGe=o(" (M2M100 model)"),NGe=l(),Nf=a("li"),_K=a("strong"),jGe=o("marian"),DGe=o(" \u2014 "),Mx=a("a"),GGe=o("MarianConfig"),OGe=o(" (Marian model)"),VGe=l(),jf=a("li"),bK=a("strong"),XGe=o("maskformer"),zGe=o(" \u2014 "),Ex=a("a"),QGe=o("MaskFormerConfig"),WGe=o(" (MaskFormer model)"),HGe=l(),Df=a("li"),vK=a("strong"),UGe=o("mbart"),JGe=o(" \u2014 "),Cx=a("a"),YGe=o("MBartConfig"),KGe=o(" (mBART model)"),ZGe=l(),Gf=a("li"),FK=a("strong"),eOe=o("megatron-bert"),oOe=o(" \u2014 "),wx=a("a"),rOe=o("MegatronBertConfig"),tOe=o(" (MegatronBert model)"),aOe=l(),Of=a("li"),TK=a("strong"),nOe=o("mobilebert"),sOe=o(" \u2014 "),Ax=a("a"),lOe=o("MobileBertConfig"),iOe=o(" (MobileBERT model)"),dOe=l(),Vf=a("li"),MK=a("strong"),cOe=o("mpnet"),mOe=o(" \u2014 "),yx=a("a"),fOe=o("MPNetConfig"),gOe=o(" (MPNet model)"),hOe=l(),Xf=a("li"),EK=a("strong"),uOe=o("mt5"),pOe=o(" \u2014 "),Lx=a("a"),_Oe=o("MT5Config"),bOe=o(" (mT5 model)"),vOe=l(),zf=a("li"),CK=a("strong"),FOe=o("nystromformer"),TOe=o(" \u2014 "),xx=a("a"),MOe=o("NystromformerConfig"),EOe=o(" (Nystromformer model)"),COe=l(),Qf=a("li"),wK=a("strong"),wOe=o("openai-gpt"),AOe=o(" \u2014 "),kx=a("a"),yOe=o("OpenAIGPTConfig"),LOe=o(" (OpenAI GPT model)"),xOe=l(),Wf=a("li"),AK=a("strong"),kOe=o("pegasus"),SOe=o(" \u2014 "),Sx=a("a"),ROe=o("PegasusConfig"),BOe=o(" (Pegasus model)"),POe=l(),Hf=a("li"),yK=a("strong"),$Oe=o("perceiver"),IOe=o(" \u2014 "),Rx=a("a"),qOe=o("PerceiverConfig"),NOe=o(" (Perceiver model)"),jOe=l(),Uf=a("li"),LK=a("strong"),DOe=o("plbart"),GOe=o(" \u2014 "),Bx=a("a"),OOe=o("PLBartConfig"),VOe=o(" (PLBart model)"),XOe=l(),Jf=a("li"),xK=a("strong"),zOe=o("poolformer"),QOe=o(" \u2014 "),Px=a("a"),WOe=o("PoolFormerConfig"),HOe=o(" (PoolFormer model)"),UOe=l(),Yf=a("li"),kK=a("strong"),JOe=o("prophetnet"),YOe=o(" \u2014 "),$x=a("a"),KOe=o("ProphetNetConfig"),ZOe=o(" (ProphetNet model)"),eVe=l(),Kf=a("li"),SK=a("strong"),oVe=o("qdqbert"),rVe=o(" \u2014 "),Ix=a("a"),tVe=o("QDQBertConfig"),aVe=o(" (QDQBert model)"),nVe=l(),Zf=a("li"),RK=a("strong"),sVe=o("rag"),lVe=o(" \u2014 "),qx=a("a"),iVe=o("RagConfig"),dVe=o(" (RAG model)"),cVe=l(),eg=a("li"),BK=a("strong"),mVe=o("realm"),fVe=o(" \u2014 "),Nx=a("a"),gVe=o("RealmConfig"),hVe=o(" (Realm model)"),uVe=l(),og=a("li"),PK=a("strong"),pVe=o("reformer"),_Ve=o(" \u2014 "),jx=a("a"),bVe=o("ReformerConfig"),vVe=o(" (Reformer model)"),FVe=l(),rg=a("li"),$K=a("strong"),TVe=o("regnet"),MVe=o(" \u2014 "),Dx=a("a"),EVe=o("RegNetConfig"),CVe=o(" (RegNet model)"),wVe=l(),tg=a("li"),IK=a("strong"),AVe=o("rembert"),yVe=o(" \u2014 "),Gx=a("a"),LVe=o("RemBertConfig"),xVe=o(" (RemBERT model)"),kVe=l(),ag=a("li"),qK=a("strong"),SVe=o("resnet"),RVe=o(" \u2014 "),Ox=a("a"),BVe=o("ResNetConfig"),PVe=o(" (ResNet model)"),$Ve=l(),ng=a("li"),NK=a("strong"),IVe=o("retribert"),qVe=o(" \u2014 "),Vx=a("a"),NVe=o("RetriBertConfig"),jVe=o(" (RetriBERT model)"),DVe=l(),sg=a("li"),jK=a("strong"),GVe=o("roberta"),OVe=o(" \u2014 "),Xx=a("a"),VVe=o("RobertaConfig"),XVe=o(" (RoBERTa model)"),zVe=l(),lg=a("li"),DK=a("strong"),QVe=o("roformer"),WVe=o(" \u2014 "),zx=a("a"),HVe=o("RoFormerConfig"),UVe=o(" (RoFormer model)"),JVe=l(),ig=a("li"),GK=a("strong"),YVe=o("segformer"),KVe=o(" \u2014 "),Qx=a("a"),ZVe=o("SegformerConfig"),eXe=o(" (SegFormer model)"),oXe=l(),dg=a("li"),OK=a("strong"),rXe=o("sew"),tXe=o(" \u2014 "),Wx=a("a"),aXe=o("SEWConfig"),nXe=o(" (SEW model)"),sXe=l(),cg=a("li"),VK=a("strong"),lXe=o("sew-d"),iXe=o(" \u2014 "),Hx=a("a"),dXe=o("SEWDConfig"),cXe=o(" (SEW-D model)"),mXe=l(),mg=a("li"),XK=a("strong"),fXe=o("speech-encoder-decoder"),gXe=o(" \u2014 "),Ux=a("a"),hXe=o("SpeechEncoderDecoderConfig"),uXe=o(" (Speech Encoder decoder model)"),pXe=l(),fg=a("li"),zK=a("strong"),_Xe=o("speech_to_text"),bXe=o(" \u2014 "),Jx=a("a"),vXe=o("Speech2TextConfig"),FXe=o(" (Speech2Text model)"),TXe=l(),gg=a("li"),QK=a("strong"),MXe=o("speech_to_text_2"),EXe=o(" \u2014 "),Yx=a("a"),CXe=o("Speech2Text2Config"),wXe=o(" (Speech2Text2 model)"),AXe=l(),hg=a("li"),WK=a("strong"),yXe=o("splinter"),LXe=o(" \u2014 "),Kx=a("a"),xXe=o("SplinterConfig"),kXe=o(" (Splinter model)"),SXe=l(),ug=a("li"),HK=a("strong"),RXe=o("squeezebert"),BXe=o(" \u2014 "),Zx=a("a"),PXe=o("SqueezeBertConfig"),$Xe=o(" (SqueezeBERT model)"),IXe=l(),pg=a("li"),UK=a("strong"),qXe=o("swin"),NXe=o(" \u2014 "),ek=a("a"),jXe=o("SwinConfig"),DXe=o(" (Swin model)"),GXe=l(),_g=a("li"),JK=a("strong"),OXe=o("t5"),VXe=o(" \u2014 "),ok=a("a"),XXe=o("T5Config"),zXe=o(" (T5 model)"),QXe=l(),bg=a("li"),YK=a("strong"),WXe=o("tapas"),HXe=o(" \u2014 "),rk=a("a"),UXe=o("TapasConfig"),JXe=o(" (TAPAS model)"),YXe=l(),vg=a("li"),KK=a("strong"),KXe=o("tapex"),ZXe=o(" \u2014 "),tk=a("a"),eze=o("BartConfig"),oze=o(" (TAPEX model)"),rze=l(),Fg=a("li"),ZK=a("strong"),tze=o("transfo-xl"),aze=o(" \u2014 "),ak=a("a"),nze=o("TransfoXLConfig"),sze=o(" (Transformer-XL model)"),lze=l(),Tg=a("li"),eZ=a("strong"),ize=o("trocr"),dze=o(" \u2014 "),nk=a("a"),cze=o("TrOCRConfig"),mze=o(" (TrOCR model)"),fze=l(),Mg=a("li"),oZ=a("strong"),gze=o("unispeech"),hze=o(" \u2014 "),sk=a("a"),uze=o("UniSpeechConfig"),pze=o(" (UniSpeech model)"),_ze=l(),Eg=a("li"),rZ=a("strong"),bze=o("unispeech-sat"),vze=o(" \u2014 "),lk=a("a"),Fze=o("UniSpeechSatConfig"),Tze=o(" (UniSpeechSat model)"),Mze=l(),Cg=a("li"),tZ=a("strong"),Eze=o("van"),Cze=o(" \u2014 "),ik=a("a"),wze=o("VanConfig"),Aze=o(" (VAN model)"),yze=l(),wg=a("li"),aZ=a("strong"),Lze=o("vilt"),xze=o(" \u2014 "),dk=a("a"),kze=o("ViltConfig"),Sze=o(" (ViLT model)"),Rze=l(),Ag=a("li"),nZ=a("strong"),Bze=o("vision-encoder-decoder"),Pze=o(" \u2014 "),ck=a("a"),$ze=o("VisionEncoderDecoderConfig"),Ize=o(" (Vision Encoder decoder model)"),qze=l(),yg=a("li"),sZ=a("strong"),Nze=o("vision-text-dual-encoder"),jze=o(" \u2014 "),mk=a("a"),Dze=o("VisionTextDualEncoderConfig"),Gze=o(" (VisionTextDualEncoder model)"),Oze=l(),Lg=a("li"),lZ=a("strong"),Vze=o("visual_bert"),Xze=o(" \u2014 "),fk=a("a"),zze=o("VisualBertConfig"),Qze=o(" (VisualBert model)"),Wze=l(),xg=a("li"),iZ=a("strong"),Hze=o("vit"),Uze=o(" \u2014 "),gk=a("a"),Jze=o("ViTConfig"),Yze=o(" (ViT model)"),Kze=l(),kg=a("li"),dZ=a("strong"),Zze=o("vit_mae"),eQe=o(" \u2014 "),hk=a("a"),oQe=o("ViTMAEConfig"),rQe=o(" (ViTMAE model)"),tQe=l(),Sg=a("li"),cZ=a("strong"),aQe=o("wav2vec2"),nQe=o(" \u2014 "),uk=a("a"),sQe=o("Wav2Vec2Config"),lQe=o(" (Wav2Vec2 model)"),iQe=l(),Rg=a("li"),mZ=a("strong"),dQe=o("wavlm"),cQe=o(" \u2014 "),pk=a("a"),mQe=o("WavLMConfig"),fQe=o(" (WavLM model)"),gQe=l(),Bg=a("li"),fZ=a("strong"),hQe=o("xglm"),uQe=o(" \u2014 "),_k=a("a"),pQe=o("XGLMConfig"),_Qe=o(" (XGLM model)"),bQe=l(),Pg=a("li"),gZ=a("strong"),vQe=o("xlm"),FQe=o(" \u2014 "),bk=a("a"),TQe=o("XLMConfig"),MQe=o(" (XLM model)"),EQe=l(),$g=a("li"),hZ=a("strong"),CQe=o("xlm-prophetnet"),wQe=o(" \u2014 "),vk=a("a"),AQe=o("XLMProphetNetConfig"),yQe=o(" (XLMProphetNet model)"),LQe=l(),Ig=a("li"),uZ=a("strong"),xQe=o("xlm-roberta"),kQe=o(" \u2014 "),Fk=a("a"),SQe=o("XLMRobertaConfig"),RQe=o(" (XLM-RoBERTa model)"),BQe=l(),qg=a("li"),pZ=a("strong"),PQe=o("xlm-roberta-xl"),$Qe=o(" \u2014 "),Tk=a("a"),IQe=o("XLMRobertaXLConfig"),qQe=o(" (XLM-RoBERTa-XL model)"),NQe=l(),Ng=a("li"),_Z=a("strong"),jQe=o("xlnet"),DQe=o(" \u2014 "),Mk=a("a"),GQe=o("XLNetConfig"),OQe=o(" (XLNet model)"),VQe=l(),jg=a("li"),bZ=a("strong"),XQe=o("yoso"),zQe=o(" \u2014 "),Ek=a("a"),QQe=o("YosoConfig"),WQe=o(" (YOSO model)"),HQe=l(),vZ=a("p"),UQe=o("Examples:"),JQe=l(),m(Dw.$$.fragment),YQe=l(),Dg=a("div"),m(Gw.$$.fragment),KQe=l(),FZ=a("p"),ZQe=o("Register a new configuration for this class."),XRe=l(),Ui=a("h2"),Gg=a("a"),TZ=a("span"),m(Ow.$$.fragment),eWe=l(),MZ=a("span"),oWe=o("AutoTokenizer"),zRe=l(),Wo=a("div"),m(Vw.$$.fragment),rWe=l(),Xw=a("p"),tWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ck=a("a"),aWe=o("AutoTokenizer.from_pretrained()"),nWe=o(" class method."),sWe=l(),zw=a("p"),lWe=o("This class cannot be instantiated directly using "),EZ=a("code"),iWe=o("__init__()"),dWe=o(" (throws an error)."),cWe=l(),go=a("div"),m(Qw.$$.fragment),mWe=l(),CZ=a("p"),fWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gWe=l(),Oa=a("p"),hWe=o("The tokenizer class to instantiate is selected based on the "),wZ=a("code"),uWe=o("model_type"),pWe=o(` property of the config object (either
passed as an argument or loaded from `),AZ=a("code"),_We=o("pretrained_model_name_or_path"),bWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yZ=a("code"),vWe=o("pretrained_model_name_or_path"),FWe=o(":"),TWe=l(),E=a("ul"),Wn=a("li"),LZ=a("strong"),MWe=o("albert"),EWe=o(" \u2014 "),wk=a("a"),CWe=o("AlbertTokenizer"),wWe=o(" or "),Ak=a("a"),AWe=o("AlbertTokenizerFast"),yWe=o(" (ALBERT model)"),LWe=l(),Hn=a("li"),xZ=a("strong"),xWe=o("bart"),kWe=o(" \u2014 "),yk=a("a"),SWe=o("BartTokenizer"),RWe=o(" or "),Lk=a("a"),BWe=o("BartTokenizerFast"),PWe=o(" (BART model)"),$We=l(),Un=a("li"),kZ=a("strong"),IWe=o("barthez"),qWe=o(" \u2014 "),xk=a("a"),NWe=o("BarthezTokenizer"),jWe=o(" or "),kk=a("a"),DWe=o("BarthezTokenizerFast"),GWe=o(" (BARThez model)"),OWe=l(),Og=a("li"),SZ=a("strong"),VWe=o("bartpho"),XWe=o(" \u2014 "),Sk=a("a"),zWe=o("BartphoTokenizer"),QWe=o(" (BARTpho model)"),WWe=l(),Jn=a("li"),RZ=a("strong"),HWe=o("bert"),UWe=o(" \u2014 "),Rk=a("a"),JWe=o("BertTokenizer"),YWe=o(" or "),Bk=a("a"),KWe=o("BertTokenizerFast"),ZWe=o(" (BERT model)"),eHe=l(),Vg=a("li"),BZ=a("strong"),oHe=o("bert-generation"),rHe=o(" \u2014 "),Pk=a("a"),tHe=o("BertGenerationTokenizer"),aHe=o(" (Bert Generation model)"),nHe=l(),Xg=a("li"),PZ=a("strong"),sHe=o("bert-japanese"),lHe=o(" \u2014 "),$k=a("a"),iHe=o("BertJapaneseTokenizer"),dHe=o(" (BertJapanese model)"),cHe=l(),zg=a("li"),$Z=a("strong"),mHe=o("bertweet"),fHe=o(" \u2014 "),Ik=a("a"),gHe=o("BertweetTokenizer"),hHe=o(" (Bertweet model)"),uHe=l(),Yn=a("li"),IZ=a("strong"),pHe=o("big_bird"),_He=o(" \u2014 "),qk=a("a"),bHe=o("BigBirdTokenizer"),vHe=o(" or "),Nk=a("a"),FHe=o("BigBirdTokenizerFast"),THe=o(" (BigBird model)"),MHe=l(),Kn=a("li"),qZ=a("strong"),EHe=o("bigbird_pegasus"),CHe=o(" \u2014 "),jk=a("a"),wHe=o("PegasusTokenizer"),AHe=o(" or "),Dk=a("a"),yHe=o("PegasusTokenizerFast"),LHe=o(" (BigBirdPegasus model)"),xHe=l(),Zn=a("li"),NZ=a("strong"),kHe=o("blenderbot"),SHe=o(" \u2014 "),Gk=a("a"),RHe=o("BlenderbotTokenizer"),BHe=o(" or "),Ok=a("a"),PHe=o("BlenderbotTokenizerFast"),$He=o(" (Blenderbot model)"),IHe=l(),Qg=a("li"),jZ=a("strong"),qHe=o("blenderbot-small"),NHe=o(" \u2014 "),Vk=a("a"),jHe=o("BlenderbotSmallTokenizer"),DHe=o(" (BlenderbotSmall model)"),GHe=l(),Wg=a("li"),DZ=a("strong"),OHe=o("byt5"),VHe=o(" \u2014 "),Xk=a("a"),XHe=o("ByT5Tokenizer"),zHe=o(" (ByT5 model)"),QHe=l(),es=a("li"),GZ=a("strong"),WHe=o("camembert"),HHe=o(" \u2014 "),zk=a("a"),UHe=o("CamembertTokenizer"),JHe=o(" or "),Qk=a("a"),YHe=o("CamembertTokenizerFast"),KHe=o(" (CamemBERT model)"),ZHe=l(),Hg=a("li"),OZ=a("strong"),eUe=o("canine"),oUe=o(" \u2014 "),Wk=a("a"),rUe=o("CanineTokenizer"),tUe=o(" (Canine model)"),aUe=l(),os=a("li"),VZ=a("strong"),nUe=o("clip"),sUe=o(" \u2014 "),Hk=a("a"),lUe=o("CLIPTokenizer"),iUe=o(" or "),Uk=a("a"),dUe=o("CLIPTokenizerFast"),cUe=o(" (CLIP model)"),mUe=l(),rs=a("li"),XZ=a("strong"),fUe=o("convbert"),gUe=o(" \u2014 "),Jk=a("a"),hUe=o("ConvBertTokenizer"),uUe=o(" or "),Yk=a("a"),pUe=o("ConvBertTokenizerFast"),_Ue=o(" (ConvBERT model)"),bUe=l(),ts=a("li"),zZ=a("strong"),vUe=o("cpm"),FUe=o(" \u2014 "),Kk=a("a"),TUe=o("CpmTokenizer"),MUe=o(" or "),QZ=a("code"),EUe=o("CpmTokenizerFast"),CUe=o(" (CPM model)"),wUe=l(),Ug=a("li"),WZ=a("strong"),AUe=o("ctrl"),yUe=o(" \u2014 "),Zk=a("a"),LUe=o("CTRLTokenizer"),xUe=o(" (CTRL model)"),kUe=l(),as=a("li"),HZ=a("strong"),SUe=o("deberta"),RUe=o(" \u2014 "),eS=a("a"),BUe=o("DebertaTokenizer"),PUe=o(" or "),oS=a("a"),$Ue=o("DebertaTokenizerFast"),IUe=o(" (DeBERTa model)"),qUe=l(),ns=a("li"),UZ=a("strong"),NUe=o("deberta-v2"),jUe=o(" \u2014 "),rS=a("a"),DUe=o("DebertaV2Tokenizer"),GUe=o(" or "),tS=a("a"),OUe=o("DebertaV2TokenizerFast"),VUe=o(" (DeBERTa-v2 model)"),XUe=l(),ss=a("li"),JZ=a("strong"),zUe=o("distilbert"),QUe=o(" \u2014 "),aS=a("a"),WUe=o("DistilBertTokenizer"),HUe=o(" or "),nS=a("a"),UUe=o("DistilBertTokenizerFast"),JUe=o(" (DistilBERT model)"),YUe=l(),ls=a("li"),YZ=a("strong"),KUe=o("dpr"),ZUe=o(" \u2014 "),sS=a("a"),eJe=o("DPRQuestionEncoderTokenizer"),oJe=o(" or "),lS=a("a"),rJe=o("DPRQuestionEncoderTokenizerFast"),tJe=o(" (DPR model)"),aJe=l(),is=a("li"),KZ=a("strong"),nJe=o("electra"),sJe=o(" \u2014 "),iS=a("a"),lJe=o("ElectraTokenizer"),iJe=o(" or "),dS=a("a"),dJe=o("ElectraTokenizerFast"),cJe=o(" (ELECTRA model)"),mJe=l(),Jg=a("li"),ZZ=a("strong"),fJe=o("flaubert"),gJe=o(" \u2014 "),cS=a("a"),hJe=o("FlaubertTokenizer"),uJe=o(" (FlauBERT model)"),pJe=l(),ds=a("li"),eee=a("strong"),_Je=o("fnet"),bJe=o(" \u2014 "),mS=a("a"),vJe=o("FNetTokenizer"),FJe=o(" or "),fS=a("a"),TJe=o("FNetTokenizerFast"),MJe=o(" (FNet model)"),EJe=l(),Yg=a("li"),oee=a("strong"),CJe=o("fsmt"),wJe=o(" \u2014 "),gS=a("a"),AJe=o("FSMTTokenizer"),yJe=o(" (FairSeq Machine-Translation model)"),LJe=l(),cs=a("li"),ree=a("strong"),xJe=o("funnel"),kJe=o(" \u2014 "),hS=a("a"),SJe=o("FunnelTokenizer"),RJe=o(" or "),uS=a("a"),BJe=o("FunnelTokenizerFast"),PJe=o(" (Funnel Transformer model)"),$Je=l(),ms=a("li"),tee=a("strong"),IJe=o("gpt2"),qJe=o(" \u2014 "),pS=a("a"),NJe=o("GPT2Tokenizer"),jJe=o(" or "),_S=a("a"),DJe=o("GPT2TokenizerFast"),GJe=o(" (OpenAI GPT-2 model)"),OJe=l(),fs=a("li"),aee=a("strong"),VJe=o("gpt_neo"),XJe=o(" \u2014 "),bS=a("a"),zJe=o("GPT2Tokenizer"),QJe=o(" or "),vS=a("a"),WJe=o("GPT2TokenizerFast"),HJe=o(" (GPT Neo model)"),UJe=l(),gs=a("li"),nee=a("strong"),JJe=o("gptj"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("GPT2Tokenizer"),ZJe=o(" or "),TS=a("a"),eYe=o("GPT2TokenizerFast"),oYe=o(" (GPT-J model)"),rYe=l(),hs=a("li"),see=a("strong"),tYe=o("herbert"),aYe=o(" \u2014 "),MS=a("a"),nYe=o("HerbertTokenizer"),sYe=o(" or "),ES=a("a"),lYe=o("HerbertTokenizerFast"),iYe=o(" (HerBERT model)"),dYe=l(),Kg=a("li"),lee=a("strong"),cYe=o("hubert"),mYe=o(" \u2014 "),CS=a("a"),fYe=o("Wav2Vec2CTCTokenizer"),gYe=o(" (Hubert model)"),hYe=l(),us=a("li"),iee=a("strong"),uYe=o("ibert"),pYe=o(" \u2014 "),wS=a("a"),_Ye=o("RobertaTokenizer"),bYe=o(" or "),AS=a("a"),vYe=o("RobertaTokenizerFast"),FYe=o(" (I-BERT model)"),TYe=l(),ps=a("li"),dee=a("strong"),MYe=o("layoutlm"),EYe=o(" \u2014 "),yS=a("a"),CYe=o("LayoutLMTokenizer"),wYe=o(" or "),LS=a("a"),AYe=o("LayoutLMTokenizerFast"),yYe=o(" (LayoutLM model)"),LYe=l(),_s=a("li"),cee=a("strong"),xYe=o("layoutlmv2"),kYe=o(" \u2014 "),xS=a("a"),SYe=o("LayoutLMv2Tokenizer"),RYe=o(" or "),kS=a("a"),BYe=o("LayoutLMv2TokenizerFast"),PYe=o(" (LayoutLMv2 model)"),$Ye=l(),bs=a("li"),mee=a("strong"),IYe=o("layoutxlm"),qYe=o(" \u2014 "),SS=a("a"),NYe=o("LayoutXLMTokenizer"),jYe=o(" or "),RS=a("a"),DYe=o("LayoutXLMTokenizerFast"),GYe=o(" (LayoutXLM model)"),OYe=l(),vs=a("li"),fee=a("strong"),VYe=o("led"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("LEDTokenizer"),QYe=o(" or "),PS=a("a"),WYe=o("LEDTokenizerFast"),HYe=o(" (LED model)"),UYe=l(),Fs=a("li"),gee=a("strong"),JYe=o("longformer"),YYe=o(" \u2014 "),$S=a("a"),KYe=o("LongformerTokenizer"),ZYe=o(" or "),IS=a("a"),eKe=o("LongformerTokenizerFast"),oKe=o(" (Longformer model)"),rKe=l(),Zg=a("li"),hee=a("strong"),tKe=o("luke"),aKe=o(" \u2014 "),qS=a("a"),nKe=o("LukeTokenizer"),sKe=o(" (LUKE model)"),lKe=l(),Ts=a("li"),uee=a("strong"),iKe=o("lxmert"),dKe=o(" \u2014 "),NS=a("a"),cKe=o("LxmertTokenizer"),mKe=o(" or "),jS=a("a"),fKe=o("LxmertTokenizerFast"),gKe=o(" (LXMERT model)"),hKe=l(),eh=a("li"),pee=a("strong"),uKe=o("m2m_100"),pKe=o(" \u2014 "),DS=a("a"),_Ke=o("M2M100Tokenizer"),bKe=o(" (M2M100 model)"),vKe=l(),oh=a("li"),_ee=a("strong"),FKe=o("marian"),TKe=o(" \u2014 "),GS=a("a"),MKe=o("MarianTokenizer"),EKe=o(" (Marian model)"),CKe=l(),Ms=a("li"),bee=a("strong"),wKe=o("mbart"),AKe=o(" \u2014 "),OS=a("a"),yKe=o("MBartTokenizer"),LKe=o(" or "),VS=a("a"),xKe=o("MBartTokenizerFast"),kKe=o(" (mBART model)"),SKe=l(),Es=a("li"),vee=a("strong"),RKe=o("mbart50"),BKe=o(" \u2014 "),XS=a("a"),PKe=o("MBart50Tokenizer"),$Ke=o(" or "),zS=a("a"),IKe=o("MBart50TokenizerFast"),qKe=o(" (mBART-50 model)"),NKe=l(),rh=a("li"),Fee=a("strong"),jKe=o("mluke"),DKe=o(" \u2014 "),QS=a("a"),GKe=o("MLukeTokenizer"),OKe=o(" (mLUKE model)"),VKe=l(),Cs=a("li"),Tee=a("strong"),XKe=o("mobilebert"),zKe=o(" \u2014 "),WS=a("a"),QKe=o("MobileBertTokenizer"),WKe=o(" or "),HS=a("a"),HKe=o("MobileBertTokenizerFast"),UKe=o(" (MobileBERT model)"),JKe=l(),ws=a("li"),Mee=a("strong"),YKe=o("mpnet"),KKe=o(" \u2014 "),US=a("a"),ZKe=o("MPNetTokenizer"),eZe=o(" or "),JS=a("a"),oZe=o("MPNetTokenizerFast"),rZe=o(" (MPNet model)"),tZe=l(),As=a("li"),Eee=a("strong"),aZe=o("mt5"),nZe=o(" \u2014 "),YS=a("a"),sZe=o("MT5Tokenizer"),lZe=o(" or "),KS=a("a"),iZe=o("MT5TokenizerFast"),dZe=o(" (mT5 model)"),cZe=l(),ys=a("li"),Cee=a("strong"),mZe=o("openai-gpt"),fZe=o(" \u2014 "),ZS=a("a"),gZe=o("OpenAIGPTTokenizer"),hZe=o(" or "),eR=a("a"),uZe=o("OpenAIGPTTokenizerFast"),pZe=o(" (OpenAI GPT model)"),_Ze=l(),Ls=a("li"),wee=a("strong"),bZe=o("pegasus"),vZe=o(" \u2014 "),oR=a("a"),FZe=o("PegasusTokenizer"),TZe=o(" or "),rR=a("a"),MZe=o("PegasusTokenizerFast"),EZe=o(" (Pegasus model)"),CZe=l(),th=a("li"),Aee=a("strong"),wZe=o("perceiver"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("PerceiverTokenizer"),LZe=o(" (Perceiver model)"),xZe=l(),ah=a("li"),yee=a("strong"),kZe=o("phobert"),SZe=o(" \u2014 "),aR=a("a"),RZe=o("PhobertTokenizer"),BZe=o(" (PhoBERT model)"),PZe=l(),nh=a("li"),Lee=a("strong"),$Ze=o("plbart"),IZe=o(" \u2014 "),nR=a("a"),qZe=o("PLBartTokenizer"),NZe=o(" (PLBart model)"),jZe=l(),sh=a("li"),xee=a("strong"),DZe=o("prophetnet"),GZe=o(" \u2014 "),sR=a("a"),OZe=o("ProphetNetTokenizer"),VZe=o(" (ProphetNet model)"),XZe=l(),xs=a("li"),kee=a("strong"),zZe=o("qdqbert"),QZe=o(" \u2014 "),lR=a("a"),WZe=o("BertTokenizer"),HZe=o(" or "),iR=a("a"),UZe=o("BertTokenizerFast"),JZe=o(" (QDQBert model)"),YZe=l(),lh=a("li"),See=a("strong"),KZe=o("rag"),ZZe=o(" \u2014 "),dR=a("a"),eeo=o("RagTokenizer"),oeo=o(" (RAG model)"),reo=l(),ks=a("li"),Ree=a("strong"),teo=o("realm"),aeo=o(" \u2014 "),cR=a("a"),neo=o("RealmTokenizer"),seo=o(" or "),mR=a("a"),leo=o("RealmTokenizerFast"),ieo=o(" (Realm model)"),deo=l(),Ss=a("li"),Bee=a("strong"),ceo=o("reformer"),meo=o(" \u2014 "),fR=a("a"),feo=o("ReformerTokenizer"),geo=o(" or "),gR=a("a"),heo=o("ReformerTokenizerFast"),ueo=o(" (Reformer model)"),peo=l(),Rs=a("li"),Pee=a("strong"),_eo=o("rembert"),beo=o(" \u2014 "),hR=a("a"),veo=o("RemBertTokenizer"),Feo=o(" or "),uR=a("a"),Teo=o("RemBertTokenizerFast"),Meo=o(" (RemBERT model)"),Eeo=l(),Bs=a("li"),$ee=a("strong"),Ceo=o("retribert"),weo=o(" \u2014 "),pR=a("a"),Aeo=o("RetriBertTokenizer"),yeo=o(" or "),_R=a("a"),Leo=o("RetriBertTokenizerFast"),xeo=o(" (RetriBERT model)"),keo=l(),Ps=a("li"),Iee=a("strong"),Seo=o("roberta"),Reo=o(" \u2014 "),bR=a("a"),Beo=o("RobertaTokenizer"),Peo=o(" or "),vR=a("a"),$eo=o("RobertaTokenizerFast"),Ieo=o(" (RoBERTa model)"),qeo=l(),$s=a("li"),qee=a("strong"),Neo=o("roformer"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("RoFormerTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("RoFormerTokenizerFast"),Veo=o(" (RoFormer model)"),Xeo=l(),ih=a("li"),Nee=a("strong"),zeo=o("speech_to_text"),Qeo=o(" \u2014 "),MR=a("a"),Weo=o("Speech2TextTokenizer"),Heo=o(" (Speech2Text model)"),Ueo=l(),dh=a("li"),jee=a("strong"),Jeo=o("speech_to_text_2"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("Speech2Text2Tokenizer"),Zeo=o(" (Speech2Text2 model)"),eoo=l(),Is=a("li"),Dee=a("strong"),ooo=o("splinter"),roo=o(" \u2014 "),CR=a("a"),too=o("SplinterTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("SplinterTokenizerFast"),soo=o(" (Splinter model)"),loo=l(),qs=a("li"),Gee=a("strong"),ioo=o("squeezebert"),doo=o(" \u2014 "),AR=a("a"),coo=o("SqueezeBertTokenizer"),moo=o(" or "),yR=a("a"),foo=o("SqueezeBertTokenizerFast"),goo=o(" (SqueezeBERT model)"),hoo=l(),Ns=a("li"),Oee=a("strong"),uoo=o("t5"),poo=o(" \u2014 "),LR=a("a"),_oo=o("T5Tokenizer"),boo=o(" or "),xR=a("a"),voo=o("T5TokenizerFast"),Foo=o(" (T5 model)"),Too=l(),ch=a("li"),Vee=a("strong"),Moo=o("tapas"),Eoo=o(" \u2014 "),kR=a("a"),Coo=o("TapasTokenizer"),woo=o(" (TAPAS model)"),Aoo=l(),mh=a("li"),Xee=a("strong"),yoo=o("tapex"),Loo=o(" \u2014 "),SR=a("a"),xoo=o("TapexTokenizer"),koo=o(" (TAPEX model)"),Soo=l(),fh=a("li"),zee=a("strong"),Roo=o("transfo-xl"),Boo=o(" \u2014 "),RR=a("a"),Poo=o("TransfoXLTokenizer"),$oo=o(" (Transformer-XL model)"),Ioo=l(),gh=a("li"),Qee=a("strong"),qoo=o("wav2vec2"),Noo=o(" \u2014 "),BR=a("a"),joo=o("Wav2Vec2CTCTokenizer"),Doo=o(" (Wav2Vec2 model)"),Goo=l(),hh=a("li"),Wee=a("strong"),Ooo=o("wav2vec2_phoneme"),Voo=o(" \u2014 "),PR=a("a"),Xoo=o("Wav2Vec2PhonemeCTCTokenizer"),zoo=o(" (Wav2Vec2Phoneme model)"),Qoo=l(),js=a("li"),Hee=a("strong"),Woo=o("xglm"),Hoo=o(" \u2014 "),$R=a("a"),Uoo=o("XGLMTokenizer"),Joo=o(" or "),IR=a("a"),Yoo=o("XGLMTokenizerFast"),Koo=o(" (XGLM model)"),Zoo=l(),uh=a("li"),Uee=a("strong"),ero=o("xlm"),oro=o(" \u2014 "),qR=a("a"),rro=o("XLMTokenizer"),tro=o(" (XLM model)"),aro=l(),ph=a("li"),Jee=a("strong"),nro=o("xlm-prophetnet"),sro=o(" \u2014 "),NR=a("a"),lro=o("XLMProphetNetTokenizer"),iro=o(" (XLMProphetNet model)"),dro=l(),Ds=a("li"),Yee=a("strong"),cro=o("xlm-roberta"),mro=o(" \u2014 "),jR=a("a"),fro=o("XLMRobertaTokenizer"),gro=o(" or "),DR=a("a"),hro=o("XLMRobertaTokenizerFast"),uro=o(" (XLM-RoBERTa model)"),pro=l(),Gs=a("li"),Kee=a("strong"),_ro=o("xlnet"),bro=o(" \u2014 "),GR=a("a"),vro=o("XLNetTokenizer"),Fro=o(" or "),OR=a("a"),Tro=o("XLNetTokenizerFast"),Mro=o(" (XLNet model)"),Ero=l(),Zee=a("p"),Cro=o("Examples:"),wro=l(),m(Ww.$$.fragment),Aro=l(),_h=a("div"),m(Hw.$$.fragment),yro=l(),eoe=a("p"),Lro=o("Register a new tokenizer in this mapping."),QRe=l(),Ji=a("h2"),bh=a("a"),ooe=a("span"),m(Uw.$$.fragment),xro=l(),roe=a("span"),kro=o("AutoFeatureExtractor"),WRe=l(),Ho=a("div"),m(Jw.$$.fragment),Sro=l(),Yw=a("p"),Rro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=a("a"),Bro=o("AutoFeatureExtractor.from_pretrained()"),Pro=o(" class method."),$ro=l(),Kw=a("p"),Iro=o("This class cannot be instantiated directly using "),toe=a("code"),qro=o("__init__()"),Nro=o(" (throws an error)."),jro=l(),$e=a("div"),m(Zw.$$.fragment),Dro=l(),aoe=a("p"),Gro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Oro=l(),Va=a("p"),Vro=o("The feature extractor class to instantiate is selected based on the "),noe=a("code"),Xro=o("model_type"),zro=o(` property of the config object
(either passed as an argument or loaded from `),soe=a("code"),Qro=o("pretrained_model_name_or_path"),Wro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),loe=a("code"),Hro=o("pretrained_model_name_or_path"),Uro=o(":"),Jro=l(),ee=a("ul"),vh=a("li"),ioe=a("strong"),Yro=o("beit"),Kro=o(" \u2014 "),XR=a("a"),Zro=o("BeitFeatureExtractor"),eto=o(" (BEiT model)"),oto=l(),Fh=a("li"),doe=a("strong"),rto=o("clip"),tto=o(" \u2014 "),zR=a("a"),ato=o("CLIPFeatureExtractor"),nto=o(" (CLIP model)"),sto=l(),Th=a("li"),coe=a("strong"),lto=o("convnext"),ito=o(" \u2014 "),QR=a("a"),dto=o("ConvNextFeatureExtractor"),cto=o(" (ConvNext model)"),mto=l(),Mh=a("li"),moe=a("strong"),fto=o("deit"),gto=o(" \u2014 "),WR=a("a"),hto=o("DeiTFeatureExtractor"),uto=o(" (DeiT model)"),pto=l(),Eh=a("li"),foe=a("strong"),_to=o("detr"),bto=o(" \u2014 "),HR=a("a"),vto=o("DetrFeatureExtractor"),Fto=o(" (DETR model)"),Tto=l(),Ch=a("li"),goe=a("strong"),Mto=o("hubert"),Eto=o(" \u2014 "),UR=a("a"),Cto=o("Wav2Vec2FeatureExtractor"),wto=o(" (Hubert model)"),Ato=l(),wh=a("li"),hoe=a("strong"),yto=o("layoutlmv2"),Lto=o(" \u2014 "),JR=a("a"),xto=o("LayoutLMv2FeatureExtractor"),kto=o(" (LayoutLMv2 model)"),Sto=l(),Ah=a("li"),uoe=a("strong"),Rto=o("maskformer"),Bto=o(" \u2014 "),YR=a("a"),Pto=o("MaskFormerFeatureExtractor"),$to=o(" (MaskFormer model)"),Ito=l(),yh=a("li"),poe=a("strong"),qto=o("perceiver"),Nto=o(" \u2014 "),KR=a("a"),jto=o("PerceiverFeatureExtractor"),Dto=o(" (Perceiver model)"),Gto=l(),Lh=a("li"),_oe=a("strong"),Oto=o("poolformer"),Vto=o(" \u2014 "),ZR=a("a"),Xto=o("PoolFormerFeatureExtractor"),zto=o(" (PoolFormer model)"),Qto=l(),xh=a("li"),boe=a("strong"),Wto=o("regnet"),Hto=o(" \u2014 "),eB=a("a"),Uto=o("ConvNextFeatureExtractor"),Jto=o(" (RegNet model)"),Yto=l(),kh=a("li"),voe=a("strong"),Kto=o("resnet"),Zto=o(" \u2014 "),oB=a("a"),eao=o("ConvNextFeatureExtractor"),oao=o(" (ResNet model)"),rao=l(),Sh=a("li"),Foe=a("strong"),tao=o("segformer"),aao=o(" \u2014 "),rB=a("a"),nao=o("SegformerFeatureExtractor"),sao=o(" (SegFormer model)"),lao=l(),Rh=a("li"),Toe=a("strong"),iao=o("speech_to_text"),dao=o(" \u2014 "),tB=a("a"),cao=o("Speech2TextFeatureExtractor"),mao=o(" (Speech2Text model)"),fao=l(),Bh=a("li"),Moe=a("strong"),gao=o("swin"),hao=o(" \u2014 "),aB=a("a"),uao=o("ViTFeatureExtractor"),pao=o(" (Swin model)"),_ao=l(),Ph=a("li"),Eoe=a("strong"),bao=o("van"),vao=o(" \u2014 "),nB=a("a"),Fao=o("ConvNextFeatureExtractor"),Tao=o(" (VAN model)"),Mao=l(),$h=a("li"),Coe=a("strong"),Eao=o("vit"),Cao=o(" \u2014 "),sB=a("a"),wao=o("ViTFeatureExtractor"),Aao=o(" (ViT model)"),yao=l(),Ih=a("li"),woe=a("strong"),Lao=o("vit_mae"),xao=o(" \u2014 "),lB=a("a"),kao=o("ViTFeatureExtractor"),Sao=o(" (ViTMAE model)"),Rao=l(),qh=a("li"),Aoe=a("strong"),Bao=o("wav2vec2"),Pao=o(" \u2014 "),iB=a("a"),$ao=o("Wav2Vec2FeatureExtractor"),Iao=o(" (Wav2Vec2 model)"),qao=l(),m(Nh.$$.fragment),Nao=l(),yoe=a("p"),jao=o("Examples:"),Dao=l(),m(e6.$$.fragment),Gao=l(),jh=a("div"),m(o6.$$.fragment),Oao=l(),Loe=a("p"),Vao=o("Register a new feature extractor for this class."),HRe=l(),Yi=a("h2"),Dh=a("a"),xoe=a("span"),m(r6.$$.fragment),Xao=l(),koe=a("span"),zao=o("AutoProcessor"),URe=l(),Uo=a("div"),m(t6.$$.fragment),Qao=l(),a6=a("p"),Wao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=a("a"),Hao=o("AutoProcessor.from_pretrained()"),Uao=o(" class method."),Jao=l(),n6=a("p"),Yao=o("This class cannot be instantiated directly using "),Soe=a("code"),Kao=o("__init__()"),Zao=o(" (throws an error)."),eno=l(),Ie=a("div"),m(s6.$$.fragment),ono=l(),Roe=a("p"),rno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tno=l(),Ki=a("p"),ano=o("The processor class to instantiate is selected based on the "),Boe=a("code"),nno=o("model_type"),sno=o(` property of the config object (either
passed as an argument or loaded from `),Poe=a("code"),lno=o("pretrained_model_name_or_path"),ino=o(" if possible):"),dno=l(),ke=a("ul"),Gh=a("li"),$oe=a("strong"),cno=o("clip"),mno=o(" \u2014 "),cB=a("a"),fno=o("CLIPProcessor"),gno=o(" (CLIP model)"),hno=l(),Oh=a("li"),Ioe=a("strong"),uno=o("layoutlmv2"),pno=o(" \u2014 "),mB=a("a"),_no=o("LayoutLMv2Processor"),bno=o(" (LayoutLMv2 model)"),vno=l(),Vh=a("li"),qoe=a("strong"),Fno=o("layoutxlm"),Tno=o(" \u2014 "),fB=a("a"),Mno=o("LayoutXLMProcessor"),Eno=o(" (LayoutXLM model)"),Cno=l(),Xh=a("li"),Noe=a("strong"),wno=o("speech_to_text"),Ano=o(" \u2014 "),gB=a("a"),yno=o("Speech2TextProcessor"),Lno=o(" (Speech2Text model)"),xno=l(),zh=a("li"),joe=a("strong"),kno=o("speech_to_text_2"),Sno=o(" \u2014 "),hB=a("a"),Rno=o("Speech2Text2Processor"),Bno=o(" (Speech2Text2 model)"),Pno=l(),Qh=a("li"),Doe=a("strong"),$no=o("trocr"),Ino=o(" \u2014 "),uB=a("a"),qno=o("TrOCRProcessor"),Nno=o(" (TrOCR model)"),jno=l(),Wh=a("li"),Goe=a("strong"),Dno=o("vision-text-dual-encoder"),Gno=o(" \u2014 "),pB=a("a"),Ono=o("VisionTextDualEncoderProcessor"),Vno=o(" (VisionTextDualEncoder model)"),Xno=l(),Hh=a("li"),Ooe=a("strong"),zno=o("wav2vec2"),Qno=o(" \u2014 "),_B=a("a"),Wno=o("Wav2Vec2Processor"),Hno=o(" (Wav2Vec2 model)"),Uno=l(),m(Uh.$$.fragment),Jno=l(),Voe=a("p"),Yno=o("Examples:"),Kno=l(),m(l6.$$.fragment),Zno=l(),Jh=a("div"),m(i6.$$.fragment),eso=l(),Xoe=a("p"),oso=o("Register a new processor for this class."),JRe=l(),Zi=a("h2"),Yh=a("a"),zoe=a("span"),m(d6.$$.fragment),rso=l(),Qoe=a("span"),tso=o("AutoModel"),YRe=l(),Jo=a("div"),m(c6.$$.fragment),aso=l(),ed=a("p"),nso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=a("a"),sso=o("from_pretrained()"),lso=o(" class method or the "),vB=a("a"),iso=o("from_config()"),dso=o(` class
method.`),cso=l(),m6=a("p"),mso=o("This class cannot be instantiated directly using "),Woe=a("code"),fso=o("__init__()"),gso=o(" (throws an error)."),hso=l(),Xr=a("div"),m(f6.$$.fragment),uso=l(),Hoe=a("p"),pso=o("Instantiates one of the base model classes of the library from a configuration."),_so=l(),od=a("p"),bso=o(`Note:
Loading a model from its configuration file does `),Uoe=a("strong"),vso=o("not"),Fso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FB=a("a"),Tso=o("from_pretrained()"),Mso=o(" to load the model weights."),Eso=l(),Joe=a("p"),Cso=o("Examples:"),wso=l(),m(g6.$$.fragment),Aso=l(),qe=a("div"),m(h6.$$.fragment),yso=l(),Yoe=a("p"),Lso=o("Instantiate one of the base model classes of the library from a pretrained model."),xso=l(),Xa=a("p"),kso=o("The model class to instantiate is selected based on the "),Koe=a("code"),Sso=o("model_type"),Rso=o(` property of the config object (either
passed as an argument or loaded from `),Zoe=a("code"),Bso=o("pretrained_model_name_or_path"),Pso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ere=a("code"),$so=o("pretrained_model_name_or_path"),Iso=o(":"),qso=l(),T=a("ul"),Kh=a("li"),ore=a("strong"),Nso=o("albert"),jso=o(" \u2014 "),TB=a("a"),Dso=o("AlbertModel"),Gso=o(" (ALBERT model)"),Oso=l(),Zh=a("li"),rre=a("strong"),Vso=o("bart"),Xso=o(" \u2014 "),MB=a("a"),zso=o("BartModel"),Qso=o(" (BART model)"),Wso=l(),eu=a("li"),tre=a("strong"),Hso=o("beit"),Uso=o(" \u2014 "),EB=a("a"),Jso=o("BeitModel"),Yso=o(" (BEiT model)"),Kso=l(),ou=a("li"),are=a("strong"),Zso=o("bert"),elo=o(" \u2014 "),CB=a("a"),olo=o("BertModel"),rlo=o(" (BERT model)"),tlo=l(),ru=a("li"),nre=a("strong"),alo=o("bert-generation"),nlo=o(" \u2014 "),wB=a("a"),slo=o("BertGenerationEncoder"),llo=o(" (Bert Generation model)"),ilo=l(),tu=a("li"),sre=a("strong"),dlo=o("big_bird"),clo=o(" \u2014 "),AB=a("a"),mlo=o("BigBirdModel"),flo=o(" (BigBird model)"),glo=l(),au=a("li"),lre=a("strong"),hlo=o("bigbird_pegasus"),ulo=o(" \u2014 "),yB=a("a"),plo=o("BigBirdPegasusModel"),_lo=o(" (BigBirdPegasus model)"),blo=l(),nu=a("li"),ire=a("strong"),vlo=o("blenderbot"),Flo=o(" \u2014 "),LB=a("a"),Tlo=o("BlenderbotModel"),Mlo=o(" (Blenderbot model)"),Elo=l(),su=a("li"),dre=a("strong"),Clo=o("blenderbot-small"),wlo=o(" \u2014 "),xB=a("a"),Alo=o("BlenderbotSmallModel"),ylo=o(" (BlenderbotSmall model)"),Llo=l(),lu=a("li"),cre=a("strong"),xlo=o("camembert"),klo=o(" \u2014 "),kB=a("a"),Slo=o("CamembertModel"),Rlo=o(" (CamemBERT model)"),Blo=l(),iu=a("li"),mre=a("strong"),Plo=o("canine"),$lo=o(" \u2014 "),SB=a("a"),Ilo=o("CanineModel"),qlo=o(" (Canine model)"),Nlo=l(),du=a("li"),fre=a("strong"),jlo=o("clip"),Dlo=o(" \u2014 "),RB=a("a"),Glo=o("CLIPModel"),Olo=o(" (CLIP model)"),Vlo=l(),cu=a("li"),gre=a("strong"),Xlo=o("convbert"),zlo=o(" \u2014 "),BB=a("a"),Qlo=o("ConvBertModel"),Wlo=o(" (ConvBERT model)"),Hlo=l(),mu=a("li"),hre=a("strong"),Ulo=o("convnext"),Jlo=o(" \u2014 "),PB=a("a"),Ylo=o("ConvNextModel"),Klo=o(" (ConvNext model)"),Zlo=l(),fu=a("li"),ure=a("strong"),eio=o("ctrl"),oio=o(" \u2014 "),$B=a("a"),rio=o("CTRLModel"),tio=o(" (CTRL model)"),aio=l(),gu=a("li"),pre=a("strong"),nio=o("data2vec-audio"),sio=o(" \u2014 "),IB=a("a"),lio=o("Data2VecAudioModel"),iio=o(" (Data2VecAudio model)"),dio=l(),hu=a("li"),_re=a("strong"),cio=o("data2vec-text"),mio=o(" \u2014 "),qB=a("a"),fio=o("Data2VecTextModel"),gio=o(" (Data2VecText model)"),hio=l(),uu=a("li"),bre=a("strong"),uio=o("data2vec-vision"),pio=o(" \u2014 "),NB=a("a"),_io=o("Data2VecVisionModel"),bio=o(" (Data2VecVision model)"),vio=l(),pu=a("li"),vre=a("strong"),Fio=o("deberta"),Tio=o(" \u2014 "),jB=a("a"),Mio=o("DebertaModel"),Eio=o(" (DeBERTa model)"),Cio=l(),_u=a("li"),Fre=a("strong"),wio=o("deberta-v2"),Aio=o(" \u2014 "),DB=a("a"),yio=o("DebertaV2Model"),Lio=o(" (DeBERTa-v2 model)"),xio=l(),bu=a("li"),Tre=a("strong"),kio=o("decision_transformer"),Sio=o(" \u2014 "),GB=a("a"),Rio=o("DecisionTransformerModel"),Bio=o(" (Decision Transformer model)"),Pio=l(),vu=a("li"),Mre=a("strong"),$io=o("deit"),Iio=o(" \u2014 "),OB=a("a"),qio=o("DeiTModel"),Nio=o(" (DeiT model)"),jio=l(),Fu=a("li"),Ere=a("strong"),Dio=o("detr"),Gio=o(" \u2014 "),VB=a("a"),Oio=o("DetrModel"),Vio=o(" (DETR model)"),Xio=l(),Tu=a("li"),Cre=a("strong"),zio=o("distilbert"),Qio=o(" \u2014 "),XB=a("a"),Wio=o("DistilBertModel"),Hio=o(" (DistilBERT model)"),Uio=l(),Mu=a("li"),wre=a("strong"),Jio=o("dpr"),Yio=o(" \u2014 "),zB=a("a"),Kio=o("DPRQuestionEncoder"),Zio=o(" (DPR model)"),edo=l(),Eu=a("li"),Are=a("strong"),odo=o("dpt"),rdo=o(" \u2014 "),QB=a("a"),tdo=o("DPTModel"),ado=o(" (DPT model)"),ndo=l(),Cu=a("li"),yre=a("strong"),sdo=o("electra"),ldo=o(" \u2014 "),WB=a("a"),ido=o("ElectraModel"),ddo=o(" (ELECTRA model)"),cdo=l(),wu=a("li"),Lre=a("strong"),mdo=o("flaubert"),fdo=o(" \u2014 "),HB=a("a"),gdo=o("FlaubertModel"),hdo=o(" (FlauBERT model)"),udo=l(),Au=a("li"),xre=a("strong"),pdo=o("fnet"),_do=o(" \u2014 "),UB=a("a"),bdo=o("FNetModel"),vdo=o(" (FNet model)"),Fdo=l(),yu=a("li"),kre=a("strong"),Tdo=o("fsmt"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("FSMTModel"),Cdo=o(" (FairSeq Machine-Translation model)"),wdo=l(),Os=a("li"),Sre=a("strong"),Ado=o("funnel"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("FunnelModel"),xdo=o(" or "),KB=a("a"),kdo=o("FunnelBaseModel"),Sdo=o(" (Funnel Transformer model)"),Rdo=l(),Lu=a("li"),Rre=a("strong"),Bdo=o("glpn"),Pdo=o(" \u2014 "),ZB=a("a"),$do=o("GLPNModel"),Ido=o(" (GLPN model)"),qdo=l(),xu=a("li"),Bre=a("strong"),Ndo=o("gpt2"),jdo=o(" \u2014 "),eP=a("a"),Ddo=o("GPT2Model"),Gdo=o(" (OpenAI GPT-2 model)"),Odo=l(),ku=a("li"),Pre=a("strong"),Vdo=o("gpt_neo"),Xdo=o(" \u2014 "),oP=a("a"),zdo=o("GPTNeoModel"),Qdo=o(" (GPT Neo model)"),Wdo=l(),Su=a("li"),$re=a("strong"),Hdo=o("gptj"),Udo=o(" \u2014 "),rP=a("a"),Jdo=o("GPTJModel"),Ydo=o(" (GPT-J model)"),Kdo=l(),Ru=a("li"),Ire=a("strong"),Zdo=o("hubert"),eco=o(" \u2014 "),tP=a("a"),oco=o("HubertModel"),rco=o(" (Hubert model)"),tco=l(),Bu=a("li"),qre=a("strong"),aco=o("ibert"),nco=o(" \u2014 "),aP=a("a"),sco=o("IBertModel"),lco=o(" (I-BERT model)"),ico=l(),Pu=a("li"),Nre=a("strong"),dco=o("imagegpt"),cco=o(" \u2014 "),nP=a("a"),mco=o("ImageGPTModel"),fco=o(" (ImageGPT model)"),gco=l(),$u=a("li"),jre=a("strong"),hco=o("layoutlm"),uco=o(" \u2014 "),sP=a("a"),pco=o("LayoutLMModel"),_co=o(" (LayoutLM model)"),bco=l(),Iu=a("li"),Dre=a("strong"),vco=o("layoutlmv2"),Fco=o(" \u2014 "),lP=a("a"),Tco=o("LayoutLMv2Model"),Mco=o(" (LayoutLMv2 model)"),Eco=l(),qu=a("li"),Gre=a("strong"),Cco=o("led"),wco=o(" \u2014 "),iP=a("a"),Aco=o("LEDModel"),yco=o(" (LED model)"),Lco=l(),Nu=a("li"),Ore=a("strong"),xco=o("longformer"),kco=o(" \u2014 "),dP=a("a"),Sco=o("LongformerModel"),Rco=o(" (Longformer model)"),Bco=l(),ju=a("li"),Vre=a("strong"),Pco=o("luke"),$co=o(" \u2014 "),cP=a("a"),Ico=o("LukeModel"),qco=o(" (LUKE model)"),Nco=l(),Du=a("li"),Xre=a("strong"),jco=o("lxmert"),Dco=o(" \u2014 "),mP=a("a"),Gco=o("LxmertModel"),Oco=o(" (LXMERT model)"),Vco=l(),Gu=a("li"),zre=a("strong"),Xco=o("m2m_100"),zco=o(" \u2014 "),fP=a("a"),Qco=o("M2M100Model"),Wco=o(" (M2M100 model)"),Hco=l(),Ou=a("li"),Qre=a("strong"),Uco=o("marian"),Jco=o(" \u2014 "),gP=a("a"),Yco=o("MarianModel"),Kco=o(" (Marian model)"),Zco=l(),Vu=a("li"),Wre=a("strong"),emo=o("maskformer"),omo=o(" \u2014 "),hP=a("a"),rmo=o("MaskFormerModel"),tmo=o(" (MaskFormer model)"),amo=l(),Xu=a("li"),Hre=a("strong"),nmo=o("mbart"),smo=o(" \u2014 "),uP=a("a"),lmo=o("MBartModel"),imo=o(" (mBART model)"),dmo=l(),zu=a("li"),Ure=a("strong"),cmo=o("megatron-bert"),mmo=o(" \u2014 "),pP=a("a"),fmo=o("MegatronBertModel"),gmo=o(" (MegatronBert model)"),hmo=l(),Qu=a("li"),Jre=a("strong"),umo=o("mobilebert"),pmo=o(" \u2014 "),_P=a("a"),_mo=o("MobileBertModel"),bmo=o(" (MobileBERT model)"),vmo=l(),Wu=a("li"),Yre=a("strong"),Fmo=o("mpnet"),Tmo=o(" \u2014 "),bP=a("a"),Mmo=o("MPNetModel"),Emo=o(" (MPNet model)"),Cmo=l(),Hu=a("li"),Kre=a("strong"),wmo=o("mt5"),Amo=o(" \u2014 "),vP=a("a"),ymo=o("MT5Model"),Lmo=o(" (mT5 model)"),xmo=l(),Uu=a("li"),Zre=a("strong"),kmo=o("nystromformer"),Smo=o(" \u2014 "),FP=a("a"),Rmo=o("NystromformerModel"),Bmo=o(" (Nystromformer model)"),Pmo=l(),Ju=a("li"),ete=a("strong"),$mo=o("openai-gpt"),Imo=o(" \u2014 "),TP=a("a"),qmo=o("OpenAIGPTModel"),Nmo=o(" (OpenAI GPT model)"),jmo=l(),Yu=a("li"),ote=a("strong"),Dmo=o("pegasus"),Gmo=o(" \u2014 "),MP=a("a"),Omo=o("PegasusModel"),Vmo=o(" (Pegasus model)"),Xmo=l(),Ku=a("li"),rte=a("strong"),zmo=o("perceiver"),Qmo=o(" \u2014 "),EP=a("a"),Wmo=o("PerceiverModel"),Hmo=o(" (Perceiver model)"),Umo=l(),Zu=a("li"),tte=a("strong"),Jmo=o("plbart"),Ymo=o(" \u2014 "),CP=a("a"),Kmo=o("PLBartModel"),Zmo=o(" (PLBart model)"),efo=l(),ep=a("li"),ate=a("strong"),ofo=o("poolformer"),rfo=o(" \u2014 "),wP=a("a"),tfo=o("PoolFormerModel"),afo=o(" (PoolFormer model)"),nfo=l(),op=a("li"),nte=a("strong"),sfo=o("prophetnet"),lfo=o(" \u2014 "),AP=a("a"),ifo=o("ProphetNetModel"),dfo=o(" (ProphetNet model)"),cfo=l(),rp=a("li"),ste=a("strong"),mfo=o("qdqbert"),ffo=o(" \u2014 "),yP=a("a"),gfo=o("QDQBertModel"),hfo=o(" (QDQBert model)"),ufo=l(),tp=a("li"),lte=a("strong"),pfo=o("reformer"),_fo=o(" \u2014 "),LP=a("a"),bfo=o("ReformerModel"),vfo=o(" (Reformer model)"),Ffo=l(),ap=a("li"),ite=a("strong"),Tfo=o("regnet"),Mfo=o(" \u2014 "),xP=a("a"),Efo=o("RegNetModel"),Cfo=o(" (RegNet model)"),wfo=l(),np=a("li"),dte=a("strong"),Afo=o("rembert"),yfo=o(" \u2014 "),kP=a("a"),Lfo=o("RemBertModel"),xfo=o(" (RemBERT model)"),kfo=l(),sp=a("li"),cte=a("strong"),Sfo=o("resnet"),Rfo=o(" \u2014 "),SP=a("a"),Bfo=o("ResNetModel"),Pfo=o(" (ResNet model)"),$fo=l(),lp=a("li"),mte=a("strong"),Ifo=o("retribert"),qfo=o(" \u2014 "),RP=a("a"),Nfo=o("RetriBertModel"),jfo=o(" (RetriBERT model)"),Dfo=l(),ip=a("li"),fte=a("strong"),Gfo=o("roberta"),Ofo=o(" \u2014 "),BP=a("a"),Vfo=o("RobertaModel"),Xfo=o(" (RoBERTa model)"),zfo=l(),dp=a("li"),gte=a("strong"),Qfo=o("roformer"),Wfo=o(" \u2014 "),PP=a("a"),Hfo=o("RoFormerModel"),Ufo=o(" (RoFormer model)"),Jfo=l(),cp=a("li"),hte=a("strong"),Yfo=o("segformer"),Kfo=o(" \u2014 "),$P=a("a"),Zfo=o("SegformerModel"),ego=o(" (SegFormer model)"),ogo=l(),mp=a("li"),ute=a("strong"),rgo=o("sew"),tgo=o(" \u2014 "),IP=a("a"),ago=o("SEWModel"),ngo=o(" (SEW model)"),sgo=l(),fp=a("li"),pte=a("strong"),lgo=o("sew-d"),igo=o(" \u2014 "),qP=a("a"),dgo=o("SEWDModel"),cgo=o(" (SEW-D model)"),mgo=l(),gp=a("li"),_te=a("strong"),fgo=o("speech_to_text"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("Speech2TextModel"),ugo=o(" (Speech2Text model)"),pgo=l(),hp=a("li"),bte=a("strong"),_go=o("splinter"),bgo=o(" \u2014 "),jP=a("a"),vgo=o("SplinterModel"),Fgo=o(" (Splinter model)"),Tgo=l(),up=a("li"),vte=a("strong"),Mgo=o("squeezebert"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("SqueezeBertModel"),wgo=o(" (SqueezeBERT model)"),Ago=l(),pp=a("li"),Fte=a("strong"),ygo=o("swin"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("SwinModel"),kgo=o(" (Swin model)"),Sgo=l(),_p=a("li"),Tte=a("strong"),Rgo=o("t5"),Bgo=o(" \u2014 "),OP=a("a"),Pgo=o("T5Model"),$go=o(" (T5 model)"),Igo=l(),bp=a("li"),Mte=a("strong"),qgo=o("tapas"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("TapasModel"),Dgo=o(" (TAPAS model)"),Ggo=l(),vp=a("li"),Ete=a("strong"),Ogo=o("transfo-xl"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("TransfoXLModel"),zgo=o(" (Transformer-XL model)"),Qgo=l(),Fp=a("li"),Cte=a("strong"),Wgo=o("unispeech"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("UniSpeechModel"),Jgo=o(" (UniSpeech model)"),Ygo=l(),Tp=a("li"),wte=a("strong"),Kgo=o("unispeech-sat"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("UniSpeechSatModel"),oho=o(" (UniSpeechSat model)"),rho=l(),Mp=a("li"),Ate=a("strong"),tho=o("van"),aho=o(" \u2014 "),WP=a("a"),nho=o("VanModel"),sho=o(" (VAN model)"),lho=l(),Ep=a("li"),yte=a("strong"),iho=o("vilt"),dho=o(" \u2014 "),HP=a("a"),cho=o("ViltModel"),mho=o(" (ViLT model)"),fho=l(),Cp=a("li"),Lte=a("strong"),gho=o("vision-text-dual-encoder"),hho=o(" \u2014 "),UP=a("a"),uho=o("VisionTextDualEncoderModel"),pho=o(" (VisionTextDualEncoder model)"),_ho=l(),wp=a("li"),xte=a("strong"),bho=o("visual_bert"),vho=o(" \u2014 "),JP=a("a"),Fho=o("VisualBertModel"),Tho=o(" (VisualBert model)"),Mho=l(),Ap=a("li"),kte=a("strong"),Eho=o("vit"),Cho=o(" \u2014 "),YP=a("a"),who=o("ViTModel"),Aho=o(" (ViT model)"),yho=l(),yp=a("li"),Ste=a("strong"),Lho=o("vit_mae"),xho=o(" \u2014 "),KP=a("a"),kho=o("ViTMAEModel"),Sho=o(" (ViTMAE model)"),Rho=l(),Lp=a("li"),Rte=a("strong"),Bho=o("wav2vec2"),Pho=o(" \u2014 "),ZP=a("a"),$ho=o("Wav2Vec2Model"),Iho=o(" (Wav2Vec2 model)"),qho=l(),xp=a("li"),Bte=a("strong"),Nho=o("wavlm"),jho=o(" \u2014 "),e$=a("a"),Dho=o("WavLMModel"),Gho=o(" (WavLM model)"),Oho=l(),kp=a("li"),Pte=a("strong"),Vho=o("xglm"),Xho=o(" \u2014 "),o$=a("a"),zho=o("XGLMModel"),Qho=o(" (XGLM model)"),Who=l(),Sp=a("li"),$te=a("strong"),Hho=o("xlm"),Uho=o(" \u2014 "),r$=a("a"),Jho=o("XLMModel"),Yho=o(" (XLM model)"),Kho=l(),Rp=a("li"),Ite=a("strong"),Zho=o("xlm-prophetnet"),euo=o(" \u2014 "),t$=a("a"),ouo=o("XLMProphetNetModel"),ruo=o(" (XLMProphetNet model)"),tuo=l(),Bp=a("li"),qte=a("strong"),auo=o("xlm-roberta"),nuo=o(" \u2014 "),a$=a("a"),suo=o("XLMRobertaModel"),luo=o(" (XLM-RoBERTa model)"),iuo=l(),Pp=a("li"),Nte=a("strong"),duo=o("xlm-roberta-xl"),cuo=o(" \u2014 "),n$=a("a"),muo=o("XLMRobertaXLModel"),fuo=o(" (XLM-RoBERTa-XL model)"),guo=l(),$p=a("li"),jte=a("strong"),huo=o("xlnet"),uuo=o(" \u2014 "),s$=a("a"),puo=o("XLNetModel"),_uo=o(" (XLNet model)"),buo=l(),Ip=a("li"),Dte=a("strong"),vuo=o("yoso"),Fuo=o(" \u2014 "),l$=a("a"),Tuo=o("YosoModel"),Muo=o(" (YOSO model)"),Euo=l(),qp=a("p"),Cuo=o("The model is set in evaluation mode by default using "),Gte=a("code"),wuo=o("model.eval()"),Auo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ote=a("code"),yuo=o("model.train()"),Luo=l(),Vte=a("p"),xuo=o("Examples:"),kuo=l(),m(u6.$$.fragment),KRe=l(),rd=a("h2"),Np=a("a"),Xte=a("span"),m(p6.$$.fragment),Suo=l(),zte=a("span"),Ruo=o("AutoModelForPreTraining"),ZRe=l(),Yo=a("div"),m(_6.$$.fragment),Buo=l(),td=a("p"),Puo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=a("a"),$uo=o("from_pretrained()"),Iuo=o(" class method or the "),d$=a("a"),quo=o("from_config()"),Nuo=o(` class
method.`),juo=l(),b6=a("p"),Duo=o("This class cannot be instantiated directly using "),Qte=a("code"),Guo=o("__init__()"),Ouo=o(" (throws an error)."),Vuo=l(),zr=a("div"),m(v6.$$.fragment),Xuo=l(),Wte=a("p"),zuo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Quo=l(),ad=a("p"),Wuo=o(`Note:
Loading a model from its configuration file does `),Hte=a("strong"),Huo=o("not"),Uuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=a("a"),Juo=o("from_pretrained()"),Yuo=o(" to load the model weights."),Kuo=l(),Ute=a("p"),Zuo=o("Examples:"),epo=l(),m(F6.$$.fragment),opo=l(),Ne=a("div"),m(T6.$$.fragment),rpo=l(),Jte=a("p"),tpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),apo=l(),za=a("p"),npo=o("The model class to instantiate is selected based on the "),Yte=a("code"),spo=o("model_type"),lpo=o(` property of the config object (either
passed as an argument or loaded from `),Kte=a("code"),ipo=o("pretrained_model_name_or_path"),dpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zte=a("code"),cpo=o("pretrained_model_name_or_path"),mpo=o(":"),fpo=l(),S=a("ul"),jp=a("li"),eae=a("strong"),gpo=o("albert"),hpo=o(" \u2014 "),m$=a("a"),upo=o("AlbertForPreTraining"),ppo=o(" (ALBERT model)"),_po=l(),Dp=a("li"),oae=a("strong"),bpo=o("bart"),vpo=o(" \u2014 "),f$=a("a"),Fpo=o("BartForConditionalGeneration"),Tpo=o(" (BART model)"),Mpo=l(),Gp=a("li"),rae=a("strong"),Epo=o("bert"),Cpo=o(" \u2014 "),g$=a("a"),wpo=o("BertForPreTraining"),Apo=o(" (BERT model)"),ypo=l(),Op=a("li"),tae=a("strong"),Lpo=o("big_bird"),xpo=o(" \u2014 "),h$=a("a"),kpo=o("BigBirdForPreTraining"),Spo=o(" (BigBird model)"),Rpo=l(),Vp=a("li"),aae=a("strong"),Bpo=o("camembert"),Ppo=o(" \u2014 "),u$=a("a"),$po=o("CamembertForMaskedLM"),Ipo=o(" (CamemBERT model)"),qpo=l(),Xp=a("li"),nae=a("strong"),Npo=o("ctrl"),jpo=o(" \u2014 "),p$=a("a"),Dpo=o("CTRLLMHeadModel"),Gpo=o(" (CTRL model)"),Opo=l(),zp=a("li"),sae=a("strong"),Vpo=o("data2vec-text"),Xpo=o(" \u2014 "),_$=a("a"),zpo=o("Data2VecTextForMaskedLM"),Qpo=o(" (Data2VecText model)"),Wpo=l(),Qp=a("li"),lae=a("strong"),Hpo=o("deberta"),Upo=o(" \u2014 "),b$=a("a"),Jpo=o("DebertaForMaskedLM"),Ypo=o(" (DeBERTa model)"),Kpo=l(),Wp=a("li"),iae=a("strong"),Zpo=o("deberta-v2"),e_o=o(" \u2014 "),v$=a("a"),o_o=o("DebertaV2ForMaskedLM"),r_o=o(" (DeBERTa-v2 model)"),t_o=l(),Hp=a("li"),dae=a("strong"),a_o=o("distilbert"),n_o=o(" \u2014 "),F$=a("a"),s_o=o("DistilBertForMaskedLM"),l_o=o(" (DistilBERT model)"),i_o=l(),Up=a("li"),cae=a("strong"),d_o=o("electra"),c_o=o(" \u2014 "),T$=a("a"),m_o=o("ElectraForPreTraining"),f_o=o(" (ELECTRA model)"),g_o=l(),Jp=a("li"),mae=a("strong"),h_o=o("flaubert"),u_o=o(" \u2014 "),M$=a("a"),p_o=o("FlaubertWithLMHeadModel"),__o=o(" (FlauBERT model)"),b_o=l(),Yp=a("li"),fae=a("strong"),v_o=o("fnet"),F_o=o(" \u2014 "),E$=a("a"),T_o=o("FNetForPreTraining"),M_o=o(" (FNet model)"),E_o=l(),Kp=a("li"),gae=a("strong"),C_o=o("fsmt"),w_o=o(" \u2014 "),C$=a("a"),A_o=o("FSMTForConditionalGeneration"),y_o=o(" (FairSeq Machine-Translation model)"),L_o=l(),Zp=a("li"),hae=a("strong"),x_o=o("funnel"),k_o=o(" \u2014 "),w$=a("a"),S_o=o("FunnelForPreTraining"),R_o=o(" (Funnel Transformer model)"),B_o=l(),e_=a("li"),uae=a("strong"),P_o=o("gpt2"),$_o=o(" \u2014 "),A$=a("a"),I_o=o("GPT2LMHeadModel"),q_o=o(" (OpenAI GPT-2 model)"),N_o=l(),o_=a("li"),pae=a("strong"),j_o=o("ibert"),D_o=o(" \u2014 "),y$=a("a"),G_o=o("IBertForMaskedLM"),O_o=o(" (I-BERT model)"),V_o=l(),r_=a("li"),_ae=a("strong"),X_o=o("layoutlm"),z_o=o(" \u2014 "),L$=a("a"),Q_o=o("LayoutLMForMaskedLM"),W_o=o(" (LayoutLM model)"),H_o=l(),t_=a("li"),bae=a("strong"),U_o=o("longformer"),J_o=o(" \u2014 "),x$=a("a"),Y_o=o("LongformerForMaskedLM"),K_o=o(" (Longformer model)"),Z_o=l(),a_=a("li"),vae=a("strong"),ebo=o("lxmert"),obo=o(" \u2014 "),k$=a("a"),rbo=o("LxmertForPreTraining"),tbo=o(" (LXMERT model)"),abo=l(),n_=a("li"),Fae=a("strong"),nbo=o("megatron-bert"),sbo=o(" \u2014 "),S$=a("a"),lbo=o("MegatronBertForPreTraining"),ibo=o(" (MegatronBert model)"),dbo=l(),s_=a("li"),Tae=a("strong"),cbo=o("mobilebert"),mbo=o(" \u2014 "),R$=a("a"),fbo=o("MobileBertForPreTraining"),gbo=o(" (MobileBERT model)"),hbo=l(),l_=a("li"),Mae=a("strong"),ubo=o("mpnet"),pbo=o(" \u2014 "),B$=a("a"),_bo=o("MPNetForMaskedLM"),bbo=o(" (MPNet model)"),vbo=l(),i_=a("li"),Eae=a("strong"),Fbo=o("openai-gpt"),Tbo=o(" \u2014 "),P$=a("a"),Mbo=o("OpenAIGPTLMHeadModel"),Ebo=o(" (OpenAI GPT model)"),Cbo=l(),d_=a("li"),Cae=a("strong"),wbo=o("retribert"),Abo=o(" \u2014 "),$$=a("a"),ybo=o("RetriBertModel"),Lbo=o(" (RetriBERT model)"),xbo=l(),c_=a("li"),wae=a("strong"),kbo=o("roberta"),Sbo=o(" \u2014 "),I$=a("a"),Rbo=o("RobertaForMaskedLM"),Bbo=o(" (RoBERTa model)"),Pbo=l(),m_=a("li"),Aae=a("strong"),$bo=o("squeezebert"),Ibo=o(" \u2014 "),q$=a("a"),qbo=o("SqueezeBertForMaskedLM"),Nbo=o(" (SqueezeBERT model)"),jbo=l(),f_=a("li"),yae=a("strong"),Dbo=o("t5"),Gbo=o(" \u2014 "),N$=a("a"),Obo=o("T5ForConditionalGeneration"),Vbo=o(" (T5 model)"),Xbo=l(),g_=a("li"),Lae=a("strong"),zbo=o("tapas"),Qbo=o(" \u2014 "),j$=a("a"),Wbo=o("TapasForMaskedLM"),Hbo=o(" (TAPAS model)"),Ubo=l(),h_=a("li"),xae=a("strong"),Jbo=o("transfo-xl"),Ybo=o(" \u2014 "),D$=a("a"),Kbo=o("TransfoXLLMHeadModel"),Zbo=o(" (Transformer-XL model)"),e2o=l(),u_=a("li"),kae=a("strong"),o2o=o("unispeech"),r2o=o(" \u2014 "),G$=a("a"),t2o=o("UniSpeechForPreTraining"),a2o=o(" (UniSpeech model)"),n2o=l(),p_=a("li"),Sae=a("strong"),s2o=o("unispeech-sat"),l2o=o(" \u2014 "),O$=a("a"),i2o=o("UniSpeechSatForPreTraining"),d2o=o(" (UniSpeechSat model)"),c2o=l(),__=a("li"),Rae=a("strong"),m2o=o("visual_bert"),f2o=o(" \u2014 "),V$=a("a"),g2o=o("VisualBertForPreTraining"),h2o=o(" (VisualBert model)"),u2o=l(),b_=a("li"),Bae=a("strong"),p2o=o("vit_mae"),_2o=o(" \u2014 "),X$=a("a"),b2o=o("ViTMAEForPreTraining"),v2o=o(" (ViTMAE model)"),F2o=l(),v_=a("li"),Pae=a("strong"),T2o=o("wav2vec2"),M2o=o(" \u2014 "),z$=a("a"),E2o=o("Wav2Vec2ForPreTraining"),C2o=o(" (Wav2Vec2 model)"),w2o=l(),F_=a("li"),$ae=a("strong"),A2o=o("xlm"),y2o=o(" \u2014 "),Q$=a("a"),L2o=o("XLMWithLMHeadModel"),x2o=o(" (XLM model)"),k2o=l(),T_=a("li"),Iae=a("strong"),S2o=o("xlm-roberta"),R2o=o(" \u2014 "),W$=a("a"),B2o=o("XLMRobertaForMaskedLM"),P2o=o(" (XLM-RoBERTa model)"),$2o=l(),M_=a("li"),qae=a("strong"),I2o=o("xlm-roberta-xl"),q2o=o(" \u2014 "),H$=a("a"),N2o=o("XLMRobertaXLForMaskedLM"),j2o=o(" (XLM-RoBERTa-XL model)"),D2o=l(),E_=a("li"),Nae=a("strong"),G2o=o("xlnet"),O2o=o(" \u2014 "),U$=a("a"),V2o=o("XLNetLMHeadModel"),X2o=o(" (XLNet model)"),z2o=l(),C_=a("p"),Q2o=o("The model is set in evaluation mode by default using "),jae=a("code"),W2o=o("model.eval()"),H2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dae=a("code"),U2o=o("model.train()"),J2o=l(),Gae=a("p"),Y2o=o("Examples:"),K2o=l(),m(M6.$$.fragment),eBe=l(),nd=a("h2"),w_=a("a"),Oae=a("span"),m(E6.$$.fragment),Z2o=l(),Vae=a("span"),evo=o("AutoModelForCausalLM"),oBe=l(),Ko=a("div"),m(C6.$$.fragment),ovo=l(),sd=a("p"),rvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=a("a"),tvo=o("from_pretrained()"),avo=o(" class method or the "),Y$=a("a"),nvo=o("from_config()"),svo=o(` class
method.`),lvo=l(),w6=a("p"),ivo=o("This class cannot be instantiated directly using "),Xae=a("code"),dvo=o("__init__()"),cvo=o(" (throws an error)."),mvo=l(),Qr=a("div"),m(A6.$$.fragment),fvo=l(),zae=a("p"),gvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hvo=l(),ld=a("p"),uvo=o(`Note:
Loading a model from its configuration file does `),Qae=a("strong"),pvo=o("not"),_vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=a("a"),bvo=o("from_pretrained()"),vvo=o(" to load the model weights."),Fvo=l(),Wae=a("p"),Tvo=o("Examples:"),Mvo=l(),m(y6.$$.fragment),Evo=l(),je=a("div"),m(L6.$$.fragment),Cvo=l(),Hae=a("p"),wvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Avo=l(),Qa=a("p"),yvo=o("The model class to instantiate is selected based on the "),Uae=a("code"),Lvo=o("model_type"),xvo=o(` property of the config object (either
passed as an argument or loaded from `),Jae=a("code"),kvo=o("pretrained_model_name_or_path"),Svo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=a("code"),Rvo=o("pretrained_model_name_or_path"),Bvo=o(":"),Pvo=l(),$=a("ul"),A_=a("li"),Kae=a("strong"),$vo=o("bart"),Ivo=o(" \u2014 "),Z$=a("a"),qvo=o("BartForCausalLM"),Nvo=o(" (BART model)"),jvo=l(),y_=a("li"),Zae=a("strong"),Dvo=o("bert"),Gvo=o(" \u2014 "),eI=a("a"),Ovo=o("BertLMHeadModel"),Vvo=o(" (BERT model)"),Xvo=l(),L_=a("li"),ene=a("strong"),zvo=o("bert-generation"),Qvo=o(" \u2014 "),oI=a("a"),Wvo=o("BertGenerationDecoder"),Hvo=o(" (Bert Generation model)"),Uvo=l(),x_=a("li"),one=a("strong"),Jvo=o("big_bird"),Yvo=o(" \u2014 "),rI=a("a"),Kvo=o("BigBirdForCausalLM"),Zvo=o(" (BigBird model)"),eFo=l(),k_=a("li"),rne=a("strong"),oFo=o("bigbird_pegasus"),rFo=o(" \u2014 "),tI=a("a"),tFo=o("BigBirdPegasusForCausalLM"),aFo=o(" (BigBirdPegasus model)"),nFo=l(),S_=a("li"),tne=a("strong"),sFo=o("blenderbot"),lFo=o(" \u2014 "),aI=a("a"),iFo=o("BlenderbotForCausalLM"),dFo=o(" (Blenderbot model)"),cFo=l(),R_=a("li"),ane=a("strong"),mFo=o("blenderbot-small"),fFo=o(" \u2014 "),nI=a("a"),gFo=o("BlenderbotSmallForCausalLM"),hFo=o(" (BlenderbotSmall model)"),uFo=l(),B_=a("li"),nne=a("strong"),pFo=o("camembert"),_Fo=o(" \u2014 "),sI=a("a"),bFo=o("CamembertForCausalLM"),vFo=o(" (CamemBERT model)"),FFo=l(),P_=a("li"),sne=a("strong"),TFo=o("ctrl"),MFo=o(" \u2014 "),lI=a("a"),EFo=o("CTRLLMHeadModel"),CFo=o(" (CTRL model)"),wFo=l(),$_=a("li"),lne=a("strong"),AFo=o("data2vec-text"),yFo=o(" \u2014 "),iI=a("a"),LFo=o("Data2VecTextForCausalLM"),xFo=o(" (Data2VecText model)"),kFo=l(),I_=a("li"),ine=a("strong"),SFo=o("electra"),RFo=o(" \u2014 "),dI=a("a"),BFo=o("ElectraForCausalLM"),PFo=o(" (ELECTRA model)"),$Fo=l(),q_=a("li"),dne=a("strong"),IFo=o("gpt2"),qFo=o(" \u2014 "),cI=a("a"),NFo=o("GPT2LMHeadModel"),jFo=o(" (OpenAI GPT-2 model)"),DFo=l(),N_=a("li"),cne=a("strong"),GFo=o("gpt_neo"),OFo=o(" \u2014 "),mI=a("a"),VFo=o("GPTNeoForCausalLM"),XFo=o(" (GPT Neo model)"),zFo=l(),j_=a("li"),mne=a("strong"),QFo=o("gptj"),WFo=o(" \u2014 "),fI=a("a"),HFo=o("GPTJForCausalLM"),UFo=o(" (GPT-J model)"),JFo=l(),D_=a("li"),fne=a("strong"),YFo=o("marian"),KFo=o(" \u2014 "),gI=a("a"),ZFo=o("MarianForCausalLM"),e1o=o(" (Marian model)"),o1o=l(),G_=a("li"),gne=a("strong"),r1o=o("mbart"),t1o=o(" \u2014 "),hI=a("a"),a1o=o("MBartForCausalLM"),n1o=o(" (mBART model)"),s1o=l(),O_=a("li"),hne=a("strong"),l1o=o("megatron-bert"),i1o=o(" \u2014 "),uI=a("a"),d1o=o("MegatronBertForCausalLM"),c1o=o(" (MegatronBert model)"),m1o=l(),V_=a("li"),une=a("strong"),f1o=o("openai-gpt"),g1o=o(" \u2014 "),pI=a("a"),h1o=o("OpenAIGPTLMHeadModel"),u1o=o(" (OpenAI GPT model)"),p1o=l(),X_=a("li"),pne=a("strong"),_1o=o("pegasus"),b1o=o(" \u2014 "),_I=a("a"),v1o=o("PegasusForCausalLM"),F1o=o(" (Pegasus model)"),T1o=l(),z_=a("li"),_ne=a("strong"),M1o=o("plbart"),E1o=o(" \u2014 "),bI=a("a"),C1o=o("PLBartForCausalLM"),w1o=o(" (PLBart model)"),A1o=l(),Q_=a("li"),bne=a("strong"),y1o=o("prophetnet"),L1o=o(" \u2014 "),vI=a("a"),x1o=o("ProphetNetForCausalLM"),k1o=o(" (ProphetNet model)"),S1o=l(),W_=a("li"),vne=a("strong"),R1o=o("qdqbert"),B1o=o(" \u2014 "),FI=a("a"),P1o=o("QDQBertLMHeadModel"),$1o=o(" (QDQBert model)"),I1o=l(),H_=a("li"),Fne=a("strong"),q1o=o("reformer"),N1o=o(" \u2014 "),TI=a("a"),j1o=o("ReformerModelWithLMHead"),D1o=o(" (Reformer model)"),G1o=l(),U_=a("li"),Tne=a("strong"),O1o=o("rembert"),V1o=o(" \u2014 "),MI=a("a"),X1o=o("RemBertForCausalLM"),z1o=o(" (RemBERT model)"),Q1o=l(),J_=a("li"),Mne=a("strong"),W1o=o("roberta"),H1o=o(" \u2014 "),EI=a("a"),U1o=o("RobertaForCausalLM"),J1o=o(" (RoBERTa model)"),Y1o=l(),Y_=a("li"),Ene=a("strong"),K1o=o("roformer"),Z1o=o(" \u2014 "),CI=a("a"),eTo=o("RoFormerForCausalLM"),oTo=o(" (RoFormer model)"),rTo=l(),K_=a("li"),Cne=a("strong"),tTo=o("speech_to_text_2"),aTo=o(" \u2014 "),wI=a("a"),nTo=o("Speech2Text2ForCausalLM"),sTo=o(" (Speech2Text2 model)"),lTo=l(),Z_=a("li"),wne=a("strong"),iTo=o("transfo-xl"),dTo=o(" \u2014 "),AI=a("a"),cTo=o("TransfoXLLMHeadModel"),mTo=o(" (Transformer-XL model)"),fTo=l(),eb=a("li"),Ane=a("strong"),gTo=o("trocr"),hTo=o(" \u2014 "),yI=a("a"),uTo=o("TrOCRForCausalLM"),pTo=o(" (TrOCR model)"),_To=l(),ob=a("li"),yne=a("strong"),bTo=o("xglm"),vTo=o(" \u2014 "),LI=a("a"),FTo=o("XGLMForCausalLM"),TTo=o(" (XGLM model)"),MTo=l(),rb=a("li"),Lne=a("strong"),ETo=o("xlm"),CTo=o(" \u2014 "),xI=a("a"),wTo=o("XLMWithLMHeadModel"),ATo=o(" (XLM model)"),yTo=l(),tb=a("li"),xne=a("strong"),LTo=o("xlm-prophetnet"),xTo=o(" \u2014 "),kI=a("a"),kTo=o("XLMProphetNetForCausalLM"),STo=o(" (XLMProphetNet model)"),RTo=l(),ab=a("li"),kne=a("strong"),BTo=o("xlm-roberta"),PTo=o(" \u2014 "),SI=a("a"),$To=o("XLMRobertaForCausalLM"),ITo=o(" (XLM-RoBERTa model)"),qTo=l(),nb=a("li"),Sne=a("strong"),NTo=o("xlm-roberta-xl"),jTo=o(" \u2014 "),RI=a("a"),DTo=o("XLMRobertaXLForCausalLM"),GTo=o(" (XLM-RoBERTa-XL model)"),OTo=l(),sb=a("li"),Rne=a("strong"),VTo=o("xlnet"),XTo=o(" \u2014 "),BI=a("a"),zTo=o("XLNetLMHeadModel"),QTo=o(" (XLNet model)"),WTo=l(),lb=a("p"),HTo=o("The model is set in evaluation mode by default using "),Bne=a("code"),UTo=o("model.eval()"),JTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pne=a("code"),YTo=o("model.train()"),KTo=l(),$ne=a("p"),ZTo=o("Examples:"),eMo=l(),m(x6.$$.fragment),rBe=l(),id=a("h2"),ib=a("a"),Ine=a("span"),m(k6.$$.fragment),oMo=l(),qne=a("span"),rMo=o("AutoModelForMaskedLM"),tBe=l(),Zo=a("div"),m(S6.$$.fragment),tMo=l(),dd=a("p"),aMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=a("a"),nMo=o("from_pretrained()"),sMo=o(" class method or the "),$I=a("a"),lMo=o("from_config()"),iMo=o(` class
method.`),dMo=l(),R6=a("p"),cMo=o("This class cannot be instantiated directly using "),Nne=a("code"),mMo=o("__init__()"),fMo=o(" (throws an error)."),gMo=l(),Wr=a("div"),m(B6.$$.fragment),hMo=l(),jne=a("p"),uMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pMo=l(),cd=a("p"),_Mo=o(`Note:
Loading a model from its configuration file does `),Dne=a("strong"),bMo=o("not"),vMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),FMo=o("from_pretrained()"),TMo=o(" to load the model weights."),MMo=l(),Gne=a("p"),EMo=o("Examples:"),CMo=l(),m(P6.$$.fragment),wMo=l(),De=a("div"),m($6.$$.fragment),AMo=l(),One=a("p"),yMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LMo=l(),Wa=a("p"),xMo=o("The model class to instantiate is selected based on the "),Vne=a("code"),kMo=o("model_type"),SMo=o(` property of the config object (either
passed as an argument or loaded from `),Xne=a("code"),RMo=o("pretrained_model_name_or_path"),BMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zne=a("code"),PMo=o("pretrained_model_name_or_path"),$Mo=o(":"),IMo=l(),I=a("ul"),db=a("li"),Qne=a("strong"),qMo=o("albert"),NMo=o(" \u2014 "),qI=a("a"),jMo=o("AlbertForMaskedLM"),DMo=o(" (ALBERT model)"),GMo=l(),cb=a("li"),Wne=a("strong"),OMo=o("bart"),VMo=o(" \u2014 "),NI=a("a"),XMo=o("BartForConditionalGeneration"),zMo=o(" (BART model)"),QMo=l(),mb=a("li"),Hne=a("strong"),WMo=o("bert"),HMo=o(" \u2014 "),jI=a("a"),UMo=o("BertForMaskedLM"),JMo=o(" (BERT model)"),YMo=l(),fb=a("li"),Une=a("strong"),KMo=o("big_bird"),ZMo=o(" \u2014 "),DI=a("a"),e4o=o("BigBirdForMaskedLM"),o4o=o(" (BigBird model)"),r4o=l(),gb=a("li"),Jne=a("strong"),t4o=o("camembert"),a4o=o(" \u2014 "),GI=a("a"),n4o=o("CamembertForMaskedLM"),s4o=o(" (CamemBERT model)"),l4o=l(),hb=a("li"),Yne=a("strong"),i4o=o("convbert"),d4o=o(" \u2014 "),OI=a("a"),c4o=o("ConvBertForMaskedLM"),m4o=o(" (ConvBERT model)"),f4o=l(),ub=a("li"),Kne=a("strong"),g4o=o("data2vec-text"),h4o=o(" \u2014 "),VI=a("a"),u4o=o("Data2VecTextForMaskedLM"),p4o=o(" (Data2VecText model)"),_4o=l(),pb=a("li"),Zne=a("strong"),b4o=o("deberta"),v4o=o(" \u2014 "),XI=a("a"),F4o=o("DebertaForMaskedLM"),T4o=o(" (DeBERTa model)"),M4o=l(),_b=a("li"),ese=a("strong"),E4o=o("deberta-v2"),C4o=o(" \u2014 "),zI=a("a"),w4o=o("DebertaV2ForMaskedLM"),A4o=o(" (DeBERTa-v2 model)"),y4o=l(),bb=a("li"),ose=a("strong"),L4o=o("distilbert"),x4o=o(" \u2014 "),QI=a("a"),k4o=o("DistilBertForMaskedLM"),S4o=o(" (DistilBERT model)"),R4o=l(),vb=a("li"),rse=a("strong"),B4o=o("electra"),P4o=o(" \u2014 "),WI=a("a"),$4o=o("ElectraForMaskedLM"),I4o=o(" (ELECTRA model)"),q4o=l(),Fb=a("li"),tse=a("strong"),N4o=o("flaubert"),j4o=o(" \u2014 "),HI=a("a"),D4o=o("FlaubertWithLMHeadModel"),G4o=o(" (FlauBERT model)"),O4o=l(),Tb=a("li"),ase=a("strong"),V4o=o("fnet"),X4o=o(" \u2014 "),UI=a("a"),z4o=o("FNetForMaskedLM"),Q4o=o(" (FNet model)"),W4o=l(),Mb=a("li"),nse=a("strong"),H4o=o("funnel"),U4o=o(" \u2014 "),JI=a("a"),J4o=o("FunnelForMaskedLM"),Y4o=o(" (Funnel Transformer model)"),K4o=l(),Eb=a("li"),sse=a("strong"),Z4o=o("ibert"),eEo=o(" \u2014 "),YI=a("a"),oEo=o("IBertForMaskedLM"),rEo=o(" (I-BERT model)"),tEo=l(),Cb=a("li"),lse=a("strong"),aEo=o("layoutlm"),nEo=o(" \u2014 "),KI=a("a"),sEo=o("LayoutLMForMaskedLM"),lEo=o(" (LayoutLM model)"),iEo=l(),wb=a("li"),ise=a("strong"),dEo=o("longformer"),cEo=o(" \u2014 "),ZI=a("a"),mEo=o("LongformerForMaskedLM"),fEo=o(" (Longformer model)"),gEo=l(),Ab=a("li"),dse=a("strong"),hEo=o("mbart"),uEo=o(" \u2014 "),eq=a("a"),pEo=o("MBartForConditionalGeneration"),_Eo=o(" (mBART model)"),bEo=l(),yb=a("li"),cse=a("strong"),vEo=o("megatron-bert"),FEo=o(" \u2014 "),oq=a("a"),TEo=o("MegatronBertForMaskedLM"),MEo=o(" (MegatronBert model)"),EEo=l(),Lb=a("li"),mse=a("strong"),CEo=o("mobilebert"),wEo=o(" \u2014 "),rq=a("a"),AEo=o("MobileBertForMaskedLM"),yEo=o(" (MobileBERT model)"),LEo=l(),xb=a("li"),fse=a("strong"),xEo=o("mpnet"),kEo=o(" \u2014 "),tq=a("a"),SEo=o("MPNetForMaskedLM"),REo=o(" (MPNet model)"),BEo=l(),kb=a("li"),gse=a("strong"),PEo=o("nystromformer"),$Eo=o(" \u2014 "),aq=a("a"),IEo=o("NystromformerForMaskedLM"),qEo=o(" (Nystromformer model)"),NEo=l(),Sb=a("li"),hse=a("strong"),jEo=o("perceiver"),DEo=o(" \u2014 "),nq=a("a"),GEo=o("PerceiverForMaskedLM"),OEo=o(" (Perceiver model)"),VEo=l(),Rb=a("li"),use=a("strong"),XEo=o("qdqbert"),zEo=o(" \u2014 "),sq=a("a"),QEo=o("QDQBertForMaskedLM"),WEo=o(" (QDQBert model)"),HEo=l(),Bb=a("li"),pse=a("strong"),UEo=o("reformer"),JEo=o(" \u2014 "),lq=a("a"),YEo=o("ReformerForMaskedLM"),KEo=o(" (Reformer model)"),ZEo=l(),Pb=a("li"),_se=a("strong"),e5o=o("rembert"),o5o=o(" \u2014 "),iq=a("a"),r5o=o("RemBertForMaskedLM"),t5o=o(" (RemBERT model)"),a5o=l(),$b=a("li"),bse=a("strong"),n5o=o("roberta"),s5o=o(" \u2014 "),dq=a("a"),l5o=o("RobertaForMaskedLM"),i5o=o(" (RoBERTa model)"),d5o=l(),Ib=a("li"),vse=a("strong"),c5o=o("roformer"),m5o=o(" \u2014 "),cq=a("a"),f5o=o("RoFormerForMaskedLM"),g5o=o(" (RoFormer model)"),h5o=l(),qb=a("li"),Fse=a("strong"),u5o=o("squeezebert"),p5o=o(" \u2014 "),mq=a("a"),_5o=o("SqueezeBertForMaskedLM"),b5o=o(" (SqueezeBERT model)"),v5o=l(),Nb=a("li"),Tse=a("strong"),F5o=o("tapas"),T5o=o(" \u2014 "),fq=a("a"),M5o=o("TapasForMaskedLM"),E5o=o(" (TAPAS model)"),C5o=l(),jb=a("li"),Mse=a("strong"),w5o=o("wav2vec2"),A5o=o(" \u2014 "),Ese=a("code"),y5o=o("Wav2Vec2ForMaskedLM"),L5o=o(" (Wav2Vec2 model)"),x5o=l(),Db=a("li"),Cse=a("strong"),k5o=o("xlm"),S5o=o(" \u2014 "),gq=a("a"),R5o=o("XLMWithLMHeadModel"),B5o=o(" (XLM model)"),P5o=l(),Gb=a("li"),wse=a("strong"),$5o=o("xlm-roberta"),I5o=o(" \u2014 "),hq=a("a"),q5o=o("XLMRobertaForMaskedLM"),N5o=o(" (XLM-RoBERTa model)"),j5o=l(),Ob=a("li"),Ase=a("strong"),D5o=o("xlm-roberta-xl"),G5o=o(" \u2014 "),uq=a("a"),O5o=o("XLMRobertaXLForMaskedLM"),V5o=o(" (XLM-RoBERTa-XL model)"),X5o=l(),Vb=a("li"),yse=a("strong"),z5o=o("yoso"),Q5o=o(" \u2014 "),pq=a("a"),W5o=o("YosoForMaskedLM"),H5o=o(" (YOSO model)"),U5o=l(),Xb=a("p"),J5o=o("The model is set in evaluation mode by default using "),Lse=a("code"),Y5o=o("model.eval()"),K5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=a("code"),Z5o=o("model.train()"),e3o=l(),kse=a("p"),o3o=o("Examples:"),r3o=l(),m(I6.$$.fragment),aBe=l(),md=a("h2"),zb=a("a"),Sse=a("span"),m(q6.$$.fragment),t3o=l(),Rse=a("span"),a3o=o("AutoModelForSeq2SeqLM"),nBe=l(),er=a("div"),m(N6.$$.fragment),n3o=l(),fd=a("p"),s3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_q=a("a"),l3o=o("from_pretrained()"),i3o=o(" class method or the "),bq=a("a"),d3o=o("from_config()"),c3o=o(` class
method.`),m3o=l(),j6=a("p"),f3o=o("This class cannot be instantiated directly using "),Bse=a("code"),g3o=o("__init__()"),h3o=o(" (throws an error)."),u3o=l(),Hr=a("div"),m(D6.$$.fragment),p3o=l(),Pse=a("p"),_3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b3o=l(),gd=a("p"),v3o=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),F3o=o("not"),T3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=a("a"),M3o=o("from_pretrained()"),E3o=o(" to load the model weights."),C3o=l(),Ise=a("p"),w3o=o("Examples:"),A3o=l(),m(G6.$$.fragment),y3o=l(),Ge=a("div"),m(O6.$$.fragment),L3o=l(),qse=a("p"),x3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k3o=l(),Ha=a("p"),S3o=o("The model class to instantiate is selected based on the "),Nse=a("code"),R3o=o("model_type"),B3o=o(` property of the config object (either
passed as an argument or loaded from `),jse=a("code"),P3o=o("pretrained_model_name_or_path"),$3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=a("code"),I3o=o("pretrained_model_name_or_path"),q3o=o(":"),N3o=l(),ne=a("ul"),Qb=a("li"),Gse=a("strong"),j3o=o("bart"),D3o=o(" \u2014 "),Fq=a("a"),G3o=o("BartForConditionalGeneration"),O3o=o(" (BART model)"),V3o=l(),Wb=a("li"),Ose=a("strong"),X3o=o("bigbird_pegasus"),z3o=o(" \u2014 "),Tq=a("a"),Q3o=o("BigBirdPegasusForConditionalGeneration"),W3o=o(" (BigBirdPegasus model)"),H3o=l(),Hb=a("li"),Vse=a("strong"),U3o=o("blenderbot"),J3o=o(" \u2014 "),Mq=a("a"),Y3o=o("BlenderbotForConditionalGeneration"),K3o=o(" (Blenderbot model)"),Z3o=l(),Ub=a("li"),Xse=a("strong"),eCo=o("blenderbot-small"),oCo=o(" \u2014 "),Eq=a("a"),rCo=o("BlenderbotSmallForConditionalGeneration"),tCo=o(" (BlenderbotSmall model)"),aCo=l(),Jb=a("li"),zse=a("strong"),nCo=o("encoder-decoder"),sCo=o(" \u2014 "),Cq=a("a"),lCo=o("EncoderDecoderModel"),iCo=o(" (Encoder decoder model)"),dCo=l(),Yb=a("li"),Qse=a("strong"),cCo=o("fsmt"),mCo=o(" \u2014 "),wq=a("a"),fCo=o("FSMTForConditionalGeneration"),gCo=o(" (FairSeq Machine-Translation model)"),hCo=l(),Kb=a("li"),Wse=a("strong"),uCo=o("led"),pCo=o(" \u2014 "),Aq=a("a"),_Co=o("LEDForConditionalGeneration"),bCo=o(" (LED model)"),vCo=l(),Zb=a("li"),Hse=a("strong"),FCo=o("m2m_100"),TCo=o(" \u2014 "),yq=a("a"),MCo=o("M2M100ForConditionalGeneration"),ECo=o(" (M2M100 model)"),CCo=l(),e2=a("li"),Use=a("strong"),wCo=o("marian"),ACo=o(" \u2014 "),Lq=a("a"),yCo=o("MarianMTModel"),LCo=o(" (Marian model)"),xCo=l(),o2=a("li"),Jse=a("strong"),kCo=o("mbart"),SCo=o(" \u2014 "),xq=a("a"),RCo=o("MBartForConditionalGeneration"),BCo=o(" (mBART model)"),PCo=l(),r2=a("li"),Yse=a("strong"),$Co=o("mt5"),ICo=o(" \u2014 "),kq=a("a"),qCo=o("MT5ForConditionalGeneration"),NCo=o(" (mT5 model)"),jCo=l(),t2=a("li"),Kse=a("strong"),DCo=o("pegasus"),GCo=o(" \u2014 "),Sq=a("a"),OCo=o("PegasusForConditionalGeneration"),VCo=o(" (Pegasus model)"),XCo=l(),a2=a("li"),Zse=a("strong"),zCo=o("plbart"),QCo=o(" \u2014 "),Rq=a("a"),WCo=o("PLBartForConditionalGeneration"),HCo=o(" (PLBart model)"),UCo=l(),n2=a("li"),ele=a("strong"),JCo=o("prophetnet"),YCo=o(" \u2014 "),Bq=a("a"),KCo=o("ProphetNetForConditionalGeneration"),ZCo=o(" (ProphetNet model)"),ewo=l(),s2=a("li"),ole=a("strong"),owo=o("t5"),rwo=o(" \u2014 "),Pq=a("a"),two=o("T5ForConditionalGeneration"),awo=o(" (T5 model)"),nwo=l(),l2=a("li"),rle=a("strong"),swo=o("tapex"),lwo=o(" \u2014 "),$q=a("a"),iwo=o("BartForConditionalGeneration"),dwo=o(" (TAPEX model)"),cwo=l(),i2=a("li"),tle=a("strong"),mwo=o("xlm-prophetnet"),fwo=o(" \u2014 "),Iq=a("a"),gwo=o("XLMProphetNetForConditionalGeneration"),hwo=o(" (XLMProphetNet model)"),uwo=l(),d2=a("p"),pwo=o("The model is set in evaluation mode by default using "),ale=a("code"),_wo=o("model.eval()"),bwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=a("code"),vwo=o("model.train()"),Fwo=l(),sle=a("p"),Two=o("Examples:"),Mwo=l(),m(V6.$$.fragment),sBe=l(),hd=a("h2"),c2=a("a"),lle=a("span"),m(X6.$$.fragment),Ewo=l(),ile=a("span"),Cwo=o("AutoModelForSequenceClassification"),lBe=l(),or=a("div"),m(z6.$$.fragment),wwo=l(),ud=a("p"),Awo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=a("a"),ywo=o("from_pretrained()"),Lwo=o(" class method or the "),Nq=a("a"),xwo=o("from_config()"),kwo=o(` class
method.`),Swo=l(),Q6=a("p"),Rwo=o("This class cannot be instantiated directly using "),dle=a("code"),Bwo=o("__init__()"),Pwo=o(" (throws an error)."),$wo=l(),Ur=a("div"),m(W6.$$.fragment),Iwo=l(),cle=a("p"),qwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Nwo=l(),pd=a("p"),jwo=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),Dwo=o("not"),Gwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=a("a"),Owo=o("from_pretrained()"),Vwo=o(" to load the model weights."),Xwo=l(),fle=a("p"),zwo=o("Examples:"),Qwo=l(),m(H6.$$.fragment),Wwo=l(),Oe=a("div"),m(U6.$$.fragment),Hwo=l(),gle=a("p"),Uwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jwo=l(),Ua=a("p"),Ywo=o("The model class to instantiate is selected based on the "),hle=a("code"),Kwo=o("model_type"),Zwo=o(` property of the config object (either
passed as an argument or loaded from `),ule=a("code"),e6o=o("pretrained_model_name_or_path"),o6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=a("code"),r6o=o("pretrained_model_name_or_path"),t6o=o(":"),a6o=l(),y=a("ul"),m2=a("li"),_le=a("strong"),n6o=o("albert"),s6o=o(" \u2014 "),Dq=a("a"),l6o=o("AlbertForSequenceClassification"),i6o=o(" (ALBERT model)"),d6o=l(),f2=a("li"),ble=a("strong"),c6o=o("bart"),m6o=o(" \u2014 "),Gq=a("a"),f6o=o("BartForSequenceClassification"),g6o=o(" (BART model)"),h6o=l(),g2=a("li"),vle=a("strong"),u6o=o("bert"),p6o=o(" \u2014 "),Oq=a("a"),_6o=o("BertForSequenceClassification"),b6o=o(" (BERT model)"),v6o=l(),h2=a("li"),Fle=a("strong"),F6o=o("big_bird"),T6o=o(" \u2014 "),Vq=a("a"),M6o=o("BigBirdForSequenceClassification"),E6o=o(" (BigBird model)"),C6o=l(),u2=a("li"),Tle=a("strong"),w6o=o("bigbird_pegasus"),A6o=o(" \u2014 "),Xq=a("a"),y6o=o("BigBirdPegasusForSequenceClassification"),L6o=o(" (BigBirdPegasus model)"),x6o=l(),p2=a("li"),Mle=a("strong"),k6o=o("camembert"),S6o=o(" \u2014 "),zq=a("a"),R6o=o("CamembertForSequenceClassification"),B6o=o(" (CamemBERT model)"),P6o=l(),_2=a("li"),Ele=a("strong"),$6o=o("canine"),I6o=o(" \u2014 "),Qq=a("a"),q6o=o("CanineForSequenceClassification"),N6o=o(" (Canine model)"),j6o=l(),b2=a("li"),Cle=a("strong"),D6o=o("convbert"),G6o=o(" \u2014 "),Wq=a("a"),O6o=o("ConvBertForSequenceClassification"),V6o=o(" (ConvBERT model)"),X6o=l(),v2=a("li"),wle=a("strong"),z6o=o("ctrl"),Q6o=o(" \u2014 "),Hq=a("a"),W6o=o("CTRLForSequenceClassification"),H6o=o(" (CTRL model)"),U6o=l(),F2=a("li"),Ale=a("strong"),J6o=o("data2vec-text"),Y6o=o(" \u2014 "),Uq=a("a"),K6o=o("Data2VecTextForSequenceClassification"),Z6o=o(" (Data2VecText model)"),eAo=l(),T2=a("li"),yle=a("strong"),oAo=o("deberta"),rAo=o(" \u2014 "),Jq=a("a"),tAo=o("DebertaForSequenceClassification"),aAo=o(" (DeBERTa model)"),nAo=l(),M2=a("li"),Lle=a("strong"),sAo=o("deberta-v2"),lAo=o(" \u2014 "),Yq=a("a"),iAo=o("DebertaV2ForSequenceClassification"),dAo=o(" (DeBERTa-v2 model)"),cAo=l(),E2=a("li"),xle=a("strong"),mAo=o("distilbert"),fAo=o(" \u2014 "),Kq=a("a"),gAo=o("DistilBertForSequenceClassification"),hAo=o(" (DistilBERT model)"),uAo=l(),C2=a("li"),kle=a("strong"),pAo=o("electra"),_Ao=o(" \u2014 "),Zq=a("a"),bAo=o("ElectraForSequenceClassification"),vAo=o(" (ELECTRA model)"),FAo=l(),w2=a("li"),Sle=a("strong"),TAo=o("flaubert"),MAo=o(" \u2014 "),eN=a("a"),EAo=o("FlaubertForSequenceClassification"),CAo=o(" (FlauBERT model)"),wAo=l(),A2=a("li"),Rle=a("strong"),AAo=o("fnet"),yAo=o(" \u2014 "),oN=a("a"),LAo=o("FNetForSequenceClassification"),xAo=o(" (FNet model)"),kAo=l(),y2=a("li"),Ble=a("strong"),SAo=o("funnel"),RAo=o(" \u2014 "),rN=a("a"),BAo=o("FunnelForSequenceClassification"),PAo=o(" (Funnel Transformer model)"),$Ao=l(),L2=a("li"),Ple=a("strong"),IAo=o("gpt2"),qAo=o(" \u2014 "),tN=a("a"),NAo=o("GPT2ForSequenceClassification"),jAo=o(" (OpenAI GPT-2 model)"),DAo=l(),x2=a("li"),$le=a("strong"),GAo=o("gpt_neo"),OAo=o(" \u2014 "),aN=a("a"),VAo=o("GPTNeoForSequenceClassification"),XAo=o(" (GPT Neo model)"),zAo=l(),k2=a("li"),Ile=a("strong"),QAo=o("gptj"),WAo=o(" \u2014 "),nN=a("a"),HAo=o("GPTJForSequenceClassification"),UAo=o(" (GPT-J model)"),JAo=l(),S2=a("li"),qle=a("strong"),YAo=o("ibert"),KAo=o(" \u2014 "),sN=a("a"),ZAo=o("IBertForSequenceClassification"),e0o=o(" (I-BERT model)"),o0o=l(),R2=a("li"),Nle=a("strong"),r0o=o("layoutlm"),t0o=o(" \u2014 "),lN=a("a"),a0o=o("LayoutLMForSequenceClassification"),n0o=o(" (LayoutLM model)"),s0o=l(),B2=a("li"),jle=a("strong"),l0o=o("layoutlmv2"),i0o=o(" \u2014 "),iN=a("a"),d0o=o("LayoutLMv2ForSequenceClassification"),c0o=o(" (LayoutLMv2 model)"),m0o=l(),P2=a("li"),Dle=a("strong"),f0o=o("led"),g0o=o(" \u2014 "),dN=a("a"),h0o=o("LEDForSequenceClassification"),u0o=o(" (LED model)"),p0o=l(),$2=a("li"),Gle=a("strong"),_0o=o("longformer"),b0o=o(" \u2014 "),cN=a("a"),v0o=o("LongformerForSequenceClassification"),F0o=o(" (Longformer model)"),T0o=l(),I2=a("li"),Ole=a("strong"),M0o=o("mbart"),E0o=o(" \u2014 "),mN=a("a"),C0o=o("MBartForSequenceClassification"),w0o=o(" (mBART model)"),A0o=l(),q2=a("li"),Vle=a("strong"),y0o=o("megatron-bert"),L0o=o(" \u2014 "),fN=a("a"),x0o=o("MegatronBertForSequenceClassification"),k0o=o(" (MegatronBert model)"),S0o=l(),N2=a("li"),Xle=a("strong"),R0o=o("mobilebert"),B0o=o(" \u2014 "),gN=a("a"),P0o=o("MobileBertForSequenceClassification"),$0o=o(" (MobileBERT model)"),I0o=l(),j2=a("li"),zle=a("strong"),q0o=o("mpnet"),N0o=o(" \u2014 "),hN=a("a"),j0o=o("MPNetForSequenceClassification"),D0o=o(" (MPNet model)"),G0o=l(),D2=a("li"),Qle=a("strong"),O0o=o("nystromformer"),V0o=o(" \u2014 "),uN=a("a"),X0o=o("NystromformerForSequenceClassification"),z0o=o(" (Nystromformer model)"),Q0o=l(),G2=a("li"),Wle=a("strong"),W0o=o("openai-gpt"),H0o=o(" \u2014 "),pN=a("a"),U0o=o("OpenAIGPTForSequenceClassification"),J0o=o(" (OpenAI GPT model)"),Y0o=l(),O2=a("li"),Hle=a("strong"),K0o=o("perceiver"),Z0o=o(" \u2014 "),_N=a("a"),eyo=o("PerceiverForSequenceClassification"),oyo=o(" (Perceiver model)"),ryo=l(),V2=a("li"),Ule=a("strong"),tyo=o("plbart"),ayo=o(" \u2014 "),bN=a("a"),nyo=o("PLBartForSequenceClassification"),syo=o(" (PLBart model)"),lyo=l(),X2=a("li"),Jle=a("strong"),iyo=o("qdqbert"),dyo=o(" \u2014 "),vN=a("a"),cyo=o("QDQBertForSequenceClassification"),myo=o(" (QDQBert model)"),fyo=l(),z2=a("li"),Yle=a("strong"),gyo=o("reformer"),hyo=o(" \u2014 "),FN=a("a"),uyo=o("ReformerForSequenceClassification"),pyo=o(" (Reformer model)"),_yo=l(),Q2=a("li"),Kle=a("strong"),byo=o("rembert"),vyo=o(" \u2014 "),TN=a("a"),Fyo=o("RemBertForSequenceClassification"),Tyo=o(" (RemBERT model)"),Myo=l(),W2=a("li"),Zle=a("strong"),Eyo=o("roberta"),Cyo=o(" \u2014 "),MN=a("a"),wyo=o("RobertaForSequenceClassification"),Ayo=o(" (RoBERTa model)"),yyo=l(),H2=a("li"),eie=a("strong"),Lyo=o("roformer"),xyo=o(" \u2014 "),EN=a("a"),kyo=o("RoFormerForSequenceClassification"),Syo=o(" (RoFormer model)"),Ryo=l(),U2=a("li"),oie=a("strong"),Byo=o("squeezebert"),Pyo=o(" \u2014 "),CN=a("a"),$yo=o("SqueezeBertForSequenceClassification"),Iyo=o(" (SqueezeBERT model)"),qyo=l(),J2=a("li"),rie=a("strong"),Nyo=o("tapas"),jyo=o(" \u2014 "),wN=a("a"),Dyo=o("TapasForSequenceClassification"),Gyo=o(" (TAPAS model)"),Oyo=l(),Y2=a("li"),tie=a("strong"),Vyo=o("tapex"),Xyo=o(" \u2014 "),AN=a("a"),zyo=o("BartForSequenceClassification"),Qyo=o(" (TAPEX model)"),Wyo=l(),K2=a("li"),aie=a("strong"),Hyo=o("transfo-xl"),Uyo=o(" \u2014 "),yN=a("a"),Jyo=o("TransfoXLForSequenceClassification"),Yyo=o(" (Transformer-XL model)"),Kyo=l(),Z2=a("li"),nie=a("strong"),Zyo=o("xlm"),e8o=o(" \u2014 "),LN=a("a"),o8o=o("XLMForSequenceClassification"),r8o=o(" (XLM model)"),t8o=l(),ev=a("li"),sie=a("strong"),a8o=o("xlm-roberta"),n8o=o(" \u2014 "),xN=a("a"),s8o=o("XLMRobertaForSequenceClassification"),l8o=o(" (XLM-RoBERTa model)"),i8o=l(),ov=a("li"),lie=a("strong"),d8o=o("xlm-roberta-xl"),c8o=o(" \u2014 "),kN=a("a"),m8o=o("XLMRobertaXLForSequenceClassification"),f8o=o(" (XLM-RoBERTa-XL model)"),g8o=l(),rv=a("li"),iie=a("strong"),h8o=o("xlnet"),u8o=o(" \u2014 "),SN=a("a"),p8o=o("XLNetForSequenceClassification"),_8o=o(" (XLNet model)"),b8o=l(),tv=a("li"),die=a("strong"),v8o=o("yoso"),F8o=o(" \u2014 "),RN=a("a"),T8o=o("YosoForSequenceClassification"),M8o=o(" (YOSO model)"),E8o=l(),av=a("p"),C8o=o("The model is set in evaluation mode by default using "),cie=a("code"),w8o=o("model.eval()"),A8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),y8o=o("model.train()"),L8o=l(),fie=a("p"),x8o=o("Examples:"),k8o=l(),m(J6.$$.fragment),iBe=l(),_d=a("h2"),nv=a("a"),gie=a("span"),m(Y6.$$.fragment),S8o=l(),hie=a("span"),R8o=o("AutoModelForMultipleChoice"),dBe=l(),rr=a("div"),m(K6.$$.fragment),B8o=l(),bd=a("p"),P8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=a("a"),$8o=o("from_pretrained()"),I8o=o(" class method or the "),PN=a("a"),q8o=o("from_config()"),N8o=o(` class
method.`),j8o=l(),Z6=a("p"),D8o=o("This class cannot be instantiated directly using "),uie=a("code"),G8o=o("__init__()"),O8o=o(" (throws an error)."),V8o=l(),Jr=a("div"),m(eA.$$.fragment),X8o=l(),pie=a("p"),z8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q8o=l(),vd=a("p"),W8o=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),H8o=o("not"),U8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),J8o=o("from_pretrained()"),Y8o=o(" to load the model weights."),K8o=l(),bie=a("p"),Z8o=o("Examples:"),eLo=l(),m(oA.$$.fragment),oLo=l(),Ve=a("div"),m(rA.$$.fragment),rLo=l(),vie=a("p"),tLo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aLo=l(),Ja=a("p"),nLo=o("The model class to instantiate is selected based on the "),Fie=a("code"),sLo=o("model_type"),lLo=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),iLo=o("pretrained_model_name_or_path"),dLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),cLo=o("pretrained_model_name_or_path"),mLo=o(":"),fLo=l(),G=a("ul"),sv=a("li"),Eie=a("strong"),gLo=o("albert"),hLo=o(" \u2014 "),IN=a("a"),uLo=o("AlbertForMultipleChoice"),pLo=o(" (ALBERT model)"),_Lo=l(),lv=a("li"),Cie=a("strong"),bLo=o("bert"),vLo=o(" \u2014 "),qN=a("a"),FLo=o("BertForMultipleChoice"),TLo=o(" (BERT model)"),MLo=l(),iv=a("li"),wie=a("strong"),ELo=o("big_bird"),CLo=o(" \u2014 "),NN=a("a"),wLo=o("BigBirdForMultipleChoice"),ALo=o(" (BigBird model)"),yLo=l(),dv=a("li"),Aie=a("strong"),LLo=o("camembert"),xLo=o(" \u2014 "),jN=a("a"),kLo=o("CamembertForMultipleChoice"),SLo=o(" (CamemBERT model)"),RLo=l(),cv=a("li"),yie=a("strong"),BLo=o("canine"),PLo=o(" \u2014 "),DN=a("a"),$Lo=o("CanineForMultipleChoice"),ILo=o(" (Canine model)"),qLo=l(),mv=a("li"),Lie=a("strong"),NLo=o("convbert"),jLo=o(" \u2014 "),GN=a("a"),DLo=o("ConvBertForMultipleChoice"),GLo=o(" (ConvBERT model)"),OLo=l(),fv=a("li"),xie=a("strong"),VLo=o("data2vec-text"),XLo=o(" \u2014 "),ON=a("a"),zLo=o("Data2VecTextForMultipleChoice"),QLo=o(" (Data2VecText model)"),WLo=l(),gv=a("li"),kie=a("strong"),HLo=o("distilbert"),ULo=o(" \u2014 "),VN=a("a"),JLo=o("DistilBertForMultipleChoice"),YLo=o(" (DistilBERT model)"),KLo=l(),hv=a("li"),Sie=a("strong"),ZLo=o("electra"),e7o=o(" \u2014 "),XN=a("a"),o7o=o("ElectraForMultipleChoice"),r7o=o(" (ELECTRA model)"),t7o=l(),uv=a("li"),Rie=a("strong"),a7o=o("flaubert"),n7o=o(" \u2014 "),zN=a("a"),s7o=o("FlaubertForMultipleChoice"),l7o=o(" (FlauBERT model)"),i7o=l(),pv=a("li"),Bie=a("strong"),d7o=o("fnet"),c7o=o(" \u2014 "),QN=a("a"),m7o=o("FNetForMultipleChoice"),f7o=o(" (FNet model)"),g7o=l(),_v=a("li"),Pie=a("strong"),h7o=o("funnel"),u7o=o(" \u2014 "),WN=a("a"),p7o=o("FunnelForMultipleChoice"),_7o=o(" (Funnel Transformer model)"),b7o=l(),bv=a("li"),$ie=a("strong"),v7o=o("ibert"),F7o=o(" \u2014 "),HN=a("a"),T7o=o("IBertForMultipleChoice"),M7o=o(" (I-BERT model)"),E7o=l(),vv=a("li"),Iie=a("strong"),C7o=o("longformer"),w7o=o(" \u2014 "),UN=a("a"),A7o=o("LongformerForMultipleChoice"),y7o=o(" (Longformer model)"),L7o=l(),Fv=a("li"),qie=a("strong"),x7o=o("megatron-bert"),k7o=o(" \u2014 "),JN=a("a"),S7o=o("MegatronBertForMultipleChoice"),R7o=o(" (MegatronBert model)"),B7o=l(),Tv=a("li"),Nie=a("strong"),P7o=o("mobilebert"),$7o=o(" \u2014 "),YN=a("a"),I7o=o("MobileBertForMultipleChoice"),q7o=o(" (MobileBERT model)"),N7o=l(),Mv=a("li"),jie=a("strong"),j7o=o("mpnet"),D7o=o(" \u2014 "),KN=a("a"),G7o=o("MPNetForMultipleChoice"),O7o=o(" (MPNet model)"),V7o=l(),Ev=a("li"),Die=a("strong"),X7o=o("nystromformer"),z7o=o(" \u2014 "),ZN=a("a"),Q7o=o("NystromformerForMultipleChoice"),W7o=o(" (Nystromformer model)"),H7o=l(),Cv=a("li"),Gie=a("strong"),U7o=o("qdqbert"),J7o=o(" \u2014 "),ej=a("a"),Y7o=o("QDQBertForMultipleChoice"),K7o=o(" (QDQBert model)"),Z7o=l(),wv=a("li"),Oie=a("strong"),e9o=o("rembert"),o9o=o(" \u2014 "),oj=a("a"),r9o=o("RemBertForMultipleChoice"),t9o=o(" (RemBERT model)"),a9o=l(),Av=a("li"),Vie=a("strong"),n9o=o("roberta"),s9o=o(" \u2014 "),rj=a("a"),l9o=o("RobertaForMultipleChoice"),i9o=o(" (RoBERTa model)"),d9o=l(),yv=a("li"),Xie=a("strong"),c9o=o("roformer"),m9o=o(" \u2014 "),tj=a("a"),f9o=o("RoFormerForMultipleChoice"),g9o=o(" (RoFormer model)"),h9o=l(),Lv=a("li"),zie=a("strong"),u9o=o("squeezebert"),p9o=o(" \u2014 "),aj=a("a"),_9o=o("SqueezeBertForMultipleChoice"),b9o=o(" (SqueezeBERT model)"),v9o=l(),xv=a("li"),Qie=a("strong"),F9o=o("xlm"),T9o=o(" \u2014 "),nj=a("a"),M9o=o("XLMForMultipleChoice"),E9o=o(" (XLM model)"),C9o=l(),kv=a("li"),Wie=a("strong"),w9o=o("xlm-roberta"),A9o=o(" \u2014 "),sj=a("a"),y9o=o("XLMRobertaForMultipleChoice"),L9o=o(" (XLM-RoBERTa model)"),x9o=l(),Sv=a("li"),Hie=a("strong"),k9o=o("xlm-roberta-xl"),S9o=o(" \u2014 "),lj=a("a"),R9o=o("XLMRobertaXLForMultipleChoice"),B9o=o(" (XLM-RoBERTa-XL model)"),P9o=l(),Rv=a("li"),Uie=a("strong"),$9o=o("xlnet"),I9o=o(" \u2014 "),ij=a("a"),q9o=o("XLNetForMultipleChoice"),N9o=o(" (XLNet model)"),j9o=l(),Bv=a("li"),Jie=a("strong"),D9o=o("yoso"),G9o=o(" \u2014 "),dj=a("a"),O9o=o("YosoForMultipleChoice"),V9o=o(" (YOSO model)"),X9o=l(),Pv=a("p"),z9o=o("The model is set in evaluation mode by default using "),Yie=a("code"),Q9o=o("model.eval()"),W9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=a("code"),H9o=o("model.train()"),U9o=l(),Zie=a("p"),J9o=o("Examples:"),Y9o=l(),m(tA.$$.fragment),cBe=l(),Fd=a("h2"),$v=a("a"),ede=a("span"),m(aA.$$.fragment),K9o=l(),ode=a("span"),Z9o=o("AutoModelForNextSentencePrediction"),mBe=l(),tr=a("div"),m(nA.$$.fragment),exo=l(),Td=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),mj=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),sA=a("p"),lxo=o("This class cannot be instantiated directly using "),rde=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),Yr=a("div"),m(lA.$$.fragment),mxo=l(),tde=a("p"),fxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gxo=l(),Md=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),uxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),nde=a("p"),Fxo=o("Examples:"),Txo=l(),m(iA.$$.fragment),Mxo=l(),Xe=a("div"),m(dA.$$.fragment),Exo=l(),sde=a("p"),Cxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wxo=l(),Ya=a("p"),Axo=o("The model class to instantiate is selected based on the "),lde=a("code"),yxo=o("model_type"),Lxo=o(` property of the config object (either
passed as an argument or loaded from `),ide=a("code"),xxo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Bxo=l(),da=a("ul"),Iv=a("li"),cde=a("strong"),Pxo=o("bert"),$xo=o(" \u2014 "),gj=a("a"),Ixo=o("BertForNextSentencePrediction"),qxo=o(" (BERT model)"),Nxo=l(),qv=a("li"),mde=a("strong"),jxo=o("fnet"),Dxo=o(" \u2014 "),hj=a("a"),Gxo=o("FNetForNextSentencePrediction"),Oxo=o(" (FNet model)"),Vxo=l(),Nv=a("li"),fde=a("strong"),Xxo=o("megatron-bert"),zxo=o(" \u2014 "),uj=a("a"),Qxo=o("MegatronBertForNextSentencePrediction"),Wxo=o(" (MegatronBert model)"),Hxo=l(),jv=a("li"),gde=a("strong"),Uxo=o("mobilebert"),Jxo=o(" \u2014 "),pj=a("a"),Yxo=o("MobileBertForNextSentencePrediction"),Kxo=o(" (MobileBERT model)"),Zxo=l(),Dv=a("li"),hde=a("strong"),eko=o("qdqbert"),oko=o(" \u2014 "),_j=a("a"),rko=o("QDQBertForNextSentencePrediction"),tko=o(" (QDQBert model)"),ako=l(),Gv=a("p"),nko=o("The model is set in evaluation mode by default using "),ude=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),iko=o("model.train()"),dko=l(),_de=a("p"),cko=o("Examples:"),mko=l(),m(cA.$$.fragment),fBe=l(),Ed=a("h2"),Ov=a("a"),bde=a("span"),m(mA.$$.fragment),fko=l(),vde=a("span"),gko=o("AutoModelForTokenClassification"),gBe=l(),ar=a("div"),m(fA.$$.fragment),hko=l(),Cd=a("p"),uko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=a("a"),pko=o("from_pretrained()"),_ko=o(" class method or the "),vj=a("a"),bko=o("from_config()"),vko=o(` class
method.`),Fko=l(),gA=a("p"),Tko=o("This class cannot be instantiated directly using "),Fde=a("code"),Mko=o("__init__()"),Eko=o(" (throws an error)."),Cko=l(),Kr=a("div"),m(hA.$$.fragment),wko=l(),Tde=a("p"),Ako=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yko=l(),wd=a("p"),Lko=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),xko=o("not"),kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),Sko=o("from_pretrained()"),Rko=o(" to load the model weights."),Bko=l(),Ede=a("p"),Pko=o("Examples:"),$ko=l(),m(uA.$$.fragment),Iko=l(),ze=a("div"),m(pA.$$.fragment),qko=l(),Cde=a("p"),Nko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jko=l(),Ka=a("p"),Dko=o("The model class to instantiate is selected based on the "),wde=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Vko=o("pretrained_model_name_or_path"),Xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),zko=o("pretrained_model_name_or_path"),Qko=o(":"),Wko=l(),j=a("ul"),Vv=a("li"),Lde=a("strong"),Hko=o("albert"),Uko=o(" \u2014 "),Tj=a("a"),Jko=o("AlbertForTokenClassification"),Yko=o(" (ALBERT model)"),Kko=l(),Xv=a("li"),xde=a("strong"),Zko=o("bert"),eSo=o(" \u2014 "),Mj=a("a"),oSo=o("BertForTokenClassification"),rSo=o(" (BERT model)"),tSo=l(),zv=a("li"),kde=a("strong"),aSo=o("big_bird"),nSo=o(" \u2014 "),Ej=a("a"),sSo=o("BigBirdForTokenClassification"),lSo=o(" (BigBird model)"),iSo=l(),Qv=a("li"),Sde=a("strong"),dSo=o("camembert"),cSo=o(" \u2014 "),Cj=a("a"),mSo=o("CamembertForTokenClassification"),fSo=o(" (CamemBERT model)"),gSo=l(),Wv=a("li"),Rde=a("strong"),hSo=o("canine"),uSo=o(" \u2014 "),wj=a("a"),pSo=o("CanineForTokenClassification"),_So=o(" (Canine model)"),bSo=l(),Hv=a("li"),Bde=a("strong"),vSo=o("convbert"),FSo=o(" \u2014 "),Aj=a("a"),TSo=o("ConvBertForTokenClassification"),MSo=o(" (ConvBERT model)"),ESo=l(),Uv=a("li"),Pde=a("strong"),CSo=o("data2vec-text"),wSo=o(" \u2014 "),yj=a("a"),ASo=o("Data2VecTextForTokenClassification"),ySo=o(" (Data2VecText model)"),LSo=l(),Jv=a("li"),$de=a("strong"),xSo=o("deberta"),kSo=o(" \u2014 "),Lj=a("a"),SSo=o("DebertaForTokenClassification"),RSo=o(" (DeBERTa model)"),BSo=l(),Yv=a("li"),Ide=a("strong"),PSo=o("deberta-v2"),$So=o(" \u2014 "),xj=a("a"),ISo=o("DebertaV2ForTokenClassification"),qSo=o(" (DeBERTa-v2 model)"),NSo=l(),Kv=a("li"),qde=a("strong"),jSo=o("distilbert"),DSo=o(" \u2014 "),kj=a("a"),GSo=o("DistilBertForTokenClassification"),OSo=o(" (DistilBERT model)"),VSo=l(),Zv=a("li"),Nde=a("strong"),XSo=o("electra"),zSo=o(" \u2014 "),Sj=a("a"),QSo=o("ElectraForTokenClassification"),WSo=o(" (ELECTRA model)"),HSo=l(),eF=a("li"),jde=a("strong"),USo=o("flaubert"),JSo=o(" \u2014 "),Rj=a("a"),YSo=o("FlaubertForTokenClassification"),KSo=o(" (FlauBERT model)"),ZSo=l(),oF=a("li"),Dde=a("strong"),eRo=o("fnet"),oRo=o(" \u2014 "),Bj=a("a"),rRo=o("FNetForTokenClassification"),tRo=o(" (FNet model)"),aRo=l(),rF=a("li"),Gde=a("strong"),nRo=o("funnel"),sRo=o(" \u2014 "),Pj=a("a"),lRo=o("FunnelForTokenClassification"),iRo=o(" (Funnel Transformer model)"),dRo=l(),tF=a("li"),Ode=a("strong"),cRo=o("gpt2"),mRo=o(" \u2014 "),$j=a("a"),fRo=o("GPT2ForTokenClassification"),gRo=o(" (OpenAI GPT-2 model)"),hRo=l(),aF=a("li"),Vde=a("strong"),uRo=o("ibert"),pRo=o(" \u2014 "),Ij=a("a"),_Ro=o("IBertForTokenClassification"),bRo=o(" (I-BERT model)"),vRo=l(),nF=a("li"),Xde=a("strong"),FRo=o("layoutlm"),TRo=o(" \u2014 "),qj=a("a"),MRo=o("LayoutLMForTokenClassification"),ERo=o(" (LayoutLM model)"),CRo=l(),sF=a("li"),zde=a("strong"),wRo=o("layoutlmv2"),ARo=o(" \u2014 "),Nj=a("a"),yRo=o("LayoutLMv2ForTokenClassification"),LRo=o(" (LayoutLMv2 model)"),xRo=l(),lF=a("li"),Qde=a("strong"),kRo=o("longformer"),SRo=o(" \u2014 "),jj=a("a"),RRo=o("LongformerForTokenClassification"),BRo=o(" (Longformer model)"),PRo=l(),iF=a("li"),Wde=a("strong"),$Ro=o("megatron-bert"),IRo=o(" \u2014 "),Dj=a("a"),qRo=o("MegatronBertForTokenClassification"),NRo=o(" (MegatronBert model)"),jRo=l(),dF=a("li"),Hde=a("strong"),DRo=o("mobilebert"),GRo=o(" \u2014 "),Gj=a("a"),ORo=o("MobileBertForTokenClassification"),VRo=o(" (MobileBERT model)"),XRo=l(),cF=a("li"),Ude=a("strong"),zRo=o("mpnet"),QRo=o(" \u2014 "),Oj=a("a"),WRo=o("MPNetForTokenClassification"),HRo=o(" (MPNet model)"),URo=l(),mF=a("li"),Jde=a("strong"),JRo=o("nystromformer"),YRo=o(" \u2014 "),Vj=a("a"),KRo=o("NystromformerForTokenClassification"),ZRo=o(" (Nystromformer model)"),eBo=l(),fF=a("li"),Yde=a("strong"),oBo=o("qdqbert"),rBo=o(" \u2014 "),Xj=a("a"),tBo=o("QDQBertForTokenClassification"),aBo=o(" (QDQBert model)"),nBo=l(),gF=a("li"),Kde=a("strong"),sBo=o("rembert"),lBo=o(" \u2014 "),zj=a("a"),iBo=o("RemBertForTokenClassification"),dBo=o(" (RemBERT model)"),cBo=l(),hF=a("li"),Zde=a("strong"),mBo=o("roberta"),fBo=o(" \u2014 "),Qj=a("a"),gBo=o("RobertaForTokenClassification"),hBo=o(" (RoBERTa model)"),uBo=l(),uF=a("li"),ece=a("strong"),pBo=o("roformer"),_Bo=o(" \u2014 "),Wj=a("a"),bBo=o("RoFormerForTokenClassification"),vBo=o(" (RoFormer model)"),FBo=l(),pF=a("li"),oce=a("strong"),TBo=o("squeezebert"),MBo=o(" \u2014 "),Hj=a("a"),EBo=o("SqueezeBertForTokenClassification"),CBo=o(" (SqueezeBERT model)"),wBo=l(),_F=a("li"),rce=a("strong"),ABo=o("xlm"),yBo=o(" \u2014 "),Uj=a("a"),LBo=o("XLMForTokenClassification"),xBo=o(" (XLM model)"),kBo=l(),bF=a("li"),tce=a("strong"),SBo=o("xlm-roberta"),RBo=o(" \u2014 "),Jj=a("a"),BBo=o("XLMRobertaForTokenClassification"),PBo=o(" (XLM-RoBERTa model)"),$Bo=l(),vF=a("li"),ace=a("strong"),IBo=o("xlm-roberta-xl"),qBo=o(" \u2014 "),Yj=a("a"),NBo=o("XLMRobertaXLForTokenClassification"),jBo=o(" (XLM-RoBERTa-XL model)"),DBo=l(),FF=a("li"),nce=a("strong"),GBo=o("xlnet"),OBo=o(" \u2014 "),Kj=a("a"),VBo=o("XLNetForTokenClassification"),XBo=o(" (XLNet model)"),zBo=l(),TF=a("li"),sce=a("strong"),QBo=o("yoso"),WBo=o(" \u2014 "),Zj=a("a"),HBo=o("YosoForTokenClassification"),UBo=o(" (YOSO model)"),JBo=l(),MF=a("p"),YBo=o("The model is set in evaluation mode by default using "),lce=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=a("code"),ePo=o("model.train()"),oPo=l(),dce=a("p"),rPo=o("Examples:"),tPo=l(),m(_A.$$.fragment),hBe=l(),Ad=a("h2"),EF=a("a"),cce=a("span"),m(bA.$$.fragment),aPo=l(),mce=a("span"),nPo=o("AutoModelForQuestionAnswering"),uBe=l(),nr=a("div"),m(vA.$$.fragment),sPo=l(),yd=a("p"),lPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=a("a"),iPo=o("from_pretrained()"),dPo=o(" class method or the "),oD=a("a"),cPo=o("from_config()"),mPo=o(` class
method.`),fPo=l(),FA=a("p"),gPo=o("This class cannot be instantiated directly using "),fce=a("code"),hPo=o("__init__()"),uPo=o(" (throws an error)."),pPo=l(),Zr=a("div"),m(TA.$$.fragment),_Po=l(),gce=a("p"),bPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vPo=l(),Ld=a("p"),FPo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),TPo=o("not"),MPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),EPo=o("from_pretrained()"),CPo=o(" to load the model weights."),wPo=l(),uce=a("p"),APo=o("Examples:"),yPo=l(),m(MA.$$.fragment),LPo=l(),Qe=a("div"),m(EA.$$.fragment),xPo=l(),pce=a("p"),kPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SPo=l(),Za=a("p"),RPo=o("The model class to instantiate is selected based on the "),_ce=a("code"),BPo=o("model_type"),PPo=o(` property of the config object (either
passed as an argument or loaded from `),bce=a("code"),$Po=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),R=a("ul"),CF=a("li"),Fce=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),tD=a("a"),OPo=o("AlbertForQuestionAnswering"),VPo=o(" (ALBERT model)"),XPo=l(),wF=a("li"),Tce=a("strong"),zPo=o("bart"),QPo=o(" \u2014 "),aD=a("a"),WPo=o("BartForQuestionAnswering"),HPo=o(" (BART model)"),UPo=l(),AF=a("li"),Mce=a("strong"),JPo=o("bert"),YPo=o(" \u2014 "),nD=a("a"),KPo=o("BertForQuestionAnswering"),ZPo=o(" (BERT model)"),e$o=l(),yF=a("li"),Ece=a("strong"),o$o=o("big_bird"),r$o=o(" \u2014 "),sD=a("a"),t$o=o("BigBirdForQuestionAnswering"),a$o=o(" (BigBird model)"),n$o=l(),LF=a("li"),Cce=a("strong"),s$o=o("bigbird_pegasus"),l$o=o(" \u2014 "),lD=a("a"),i$o=o("BigBirdPegasusForQuestionAnswering"),d$o=o(" (BigBirdPegasus model)"),c$o=l(),xF=a("li"),wce=a("strong"),m$o=o("camembert"),f$o=o(" \u2014 "),iD=a("a"),g$o=o("CamembertForQuestionAnswering"),h$o=o(" (CamemBERT model)"),u$o=l(),kF=a("li"),Ace=a("strong"),p$o=o("canine"),_$o=o(" \u2014 "),dD=a("a"),b$o=o("CanineForQuestionAnswering"),v$o=o(" (Canine model)"),F$o=l(),SF=a("li"),yce=a("strong"),T$o=o("convbert"),M$o=o(" \u2014 "),cD=a("a"),E$o=o("ConvBertForQuestionAnswering"),C$o=o(" (ConvBERT model)"),w$o=l(),RF=a("li"),Lce=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),mD=a("a"),L$o=o("Data2VecTextForQuestionAnswering"),x$o=o(" (Data2VecText model)"),k$o=l(),BF=a("li"),xce=a("strong"),S$o=o("deberta"),R$o=o(" \u2014 "),fD=a("a"),B$o=o("DebertaForQuestionAnswering"),P$o=o(" (DeBERTa model)"),$$o=l(),PF=a("li"),kce=a("strong"),I$o=o("deberta-v2"),q$o=o(" \u2014 "),gD=a("a"),N$o=o("DebertaV2ForQuestionAnswering"),j$o=o(" (DeBERTa-v2 model)"),D$o=l(),$F=a("li"),Sce=a("strong"),G$o=o("distilbert"),O$o=o(" \u2014 "),hD=a("a"),V$o=o("DistilBertForQuestionAnswering"),X$o=o(" (DistilBERT model)"),z$o=l(),IF=a("li"),Rce=a("strong"),Q$o=o("electra"),W$o=o(" \u2014 "),uD=a("a"),H$o=o("ElectraForQuestionAnswering"),U$o=o(" (ELECTRA model)"),J$o=l(),qF=a("li"),Bce=a("strong"),Y$o=o("flaubert"),K$o=o(" \u2014 "),pD=a("a"),Z$o=o("FlaubertForQuestionAnsweringSimple"),eIo=o(" (FlauBERT model)"),oIo=l(),NF=a("li"),Pce=a("strong"),rIo=o("fnet"),tIo=o(" \u2014 "),_D=a("a"),aIo=o("FNetForQuestionAnswering"),nIo=o(" (FNet model)"),sIo=l(),jF=a("li"),$ce=a("strong"),lIo=o("funnel"),iIo=o(" \u2014 "),bD=a("a"),dIo=o("FunnelForQuestionAnswering"),cIo=o(" (Funnel Transformer model)"),mIo=l(),DF=a("li"),Ice=a("strong"),fIo=o("gptj"),gIo=o(" \u2014 "),vD=a("a"),hIo=o("GPTJForQuestionAnswering"),uIo=o(" (GPT-J model)"),pIo=l(),GF=a("li"),qce=a("strong"),_Io=o("ibert"),bIo=o(" \u2014 "),FD=a("a"),vIo=o("IBertForQuestionAnswering"),FIo=o(" (I-BERT model)"),TIo=l(),OF=a("li"),Nce=a("strong"),MIo=o("layoutlmv2"),EIo=o(" \u2014 "),TD=a("a"),CIo=o("LayoutLMv2ForQuestionAnswering"),wIo=o(" (LayoutLMv2 model)"),AIo=l(),VF=a("li"),jce=a("strong"),yIo=o("led"),LIo=o(" \u2014 "),MD=a("a"),xIo=o("LEDForQuestionAnswering"),kIo=o(" (LED model)"),SIo=l(),XF=a("li"),Dce=a("strong"),RIo=o("longformer"),BIo=o(" \u2014 "),ED=a("a"),PIo=o("LongformerForQuestionAnswering"),$Io=o(" (Longformer model)"),IIo=l(),zF=a("li"),Gce=a("strong"),qIo=o("lxmert"),NIo=o(" \u2014 "),CD=a("a"),jIo=o("LxmertForQuestionAnswering"),DIo=o(" (LXMERT model)"),GIo=l(),QF=a("li"),Oce=a("strong"),OIo=o("mbart"),VIo=o(" \u2014 "),wD=a("a"),XIo=o("MBartForQuestionAnswering"),zIo=o(" (mBART model)"),QIo=l(),WF=a("li"),Vce=a("strong"),WIo=o("megatron-bert"),HIo=o(" \u2014 "),AD=a("a"),UIo=o("MegatronBertForQuestionAnswering"),JIo=o(" (MegatronBert model)"),YIo=l(),HF=a("li"),Xce=a("strong"),KIo=o("mobilebert"),ZIo=o(" \u2014 "),yD=a("a"),eqo=o("MobileBertForQuestionAnswering"),oqo=o(" (MobileBERT model)"),rqo=l(),UF=a("li"),zce=a("strong"),tqo=o("mpnet"),aqo=o(" \u2014 "),LD=a("a"),nqo=o("MPNetForQuestionAnswering"),sqo=o(" (MPNet model)"),lqo=l(),JF=a("li"),Qce=a("strong"),iqo=o("nystromformer"),dqo=o(" \u2014 "),xD=a("a"),cqo=o("NystromformerForQuestionAnswering"),mqo=o(" (Nystromformer model)"),fqo=l(),YF=a("li"),Wce=a("strong"),gqo=o("qdqbert"),hqo=o(" \u2014 "),kD=a("a"),uqo=o("QDQBertForQuestionAnswering"),pqo=o(" (QDQBert model)"),_qo=l(),KF=a("li"),Hce=a("strong"),bqo=o("reformer"),vqo=o(" \u2014 "),SD=a("a"),Fqo=o("ReformerForQuestionAnswering"),Tqo=o(" (Reformer model)"),Mqo=l(),ZF=a("li"),Uce=a("strong"),Eqo=o("rembert"),Cqo=o(" \u2014 "),RD=a("a"),wqo=o("RemBertForQuestionAnswering"),Aqo=o(" (RemBERT model)"),yqo=l(),e1=a("li"),Jce=a("strong"),Lqo=o("roberta"),xqo=o(" \u2014 "),BD=a("a"),kqo=o("RobertaForQuestionAnswering"),Sqo=o(" (RoBERTa model)"),Rqo=l(),o1=a("li"),Yce=a("strong"),Bqo=o("roformer"),Pqo=o(" \u2014 "),PD=a("a"),$qo=o("RoFormerForQuestionAnswering"),Iqo=o(" (RoFormer model)"),qqo=l(),r1=a("li"),Kce=a("strong"),Nqo=o("splinter"),jqo=o(" \u2014 "),$D=a("a"),Dqo=o("SplinterForQuestionAnswering"),Gqo=o(" (Splinter model)"),Oqo=l(),t1=a("li"),Zce=a("strong"),Vqo=o("squeezebert"),Xqo=o(" \u2014 "),ID=a("a"),zqo=o("SqueezeBertForQuestionAnswering"),Qqo=o(" (SqueezeBERT model)"),Wqo=l(),a1=a("li"),eme=a("strong"),Hqo=o("xlm"),Uqo=o(" \u2014 "),qD=a("a"),Jqo=o("XLMForQuestionAnsweringSimple"),Yqo=o(" (XLM model)"),Kqo=l(),n1=a("li"),ome=a("strong"),Zqo=o("xlm-roberta"),eNo=o(" \u2014 "),ND=a("a"),oNo=o("XLMRobertaForQuestionAnswering"),rNo=o(" (XLM-RoBERTa model)"),tNo=l(),s1=a("li"),rme=a("strong"),aNo=o("xlm-roberta-xl"),nNo=o(" \u2014 "),jD=a("a"),sNo=o("XLMRobertaXLForQuestionAnswering"),lNo=o(" (XLM-RoBERTa-XL model)"),iNo=l(),l1=a("li"),tme=a("strong"),dNo=o("xlnet"),cNo=o(" \u2014 "),DD=a("a"),mNo=o("XLNetForQuestionAnsweringSimple"),fNo=o(" (XLNet model)"),gNo=l(),i1=a("li"),ame=a("strong"),hNo=o("yoso"),uNo=o(" \u2014 "),GD=a("a"),pNo=o("YosoForQuestionAnswering"),_No=o(" (YOSO model)"),bNo=l(),d1=a("p"),vNo=o("The model is set in evaluation mode by default using "),nme=a("code"),FNo=o("model.eval()"),TNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),MNo=o("model.train()"),ENo=l(),lme=a("p"),CNo=o("Examples:"),wNo=l(),m(CA.$$.fragment),pBe=l(),xd=a("h2"),c1=a("a"),ime=a("span"),m(wA.$$.fragment),ANo=l(),dme=a("span"),yNo=o("AutoModelForTableQuestionAnswering"),_Be=l(),sr=a("div"),m(AA.$$.fragment),LNo=l(),kd=a("p"),xNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=a("a"),kNo=o("from_pretrained()"),SNo=o(" class method or the "),VD=a("a"),RNo=o("from_config()"),BNo=o(` class
method.`),PNo=l(),yA=a("p"),$No=o("This class cannot be instantiated directly using "),cme=a("code"),INo=o("__init__()"),qNo=o(" (throws an error)."),NNo=l(),et=a("div"),m(LA.$$.fragment),jNo=l(),mme=a("p"),DNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GNo=l(),Sd=a("p"),ONo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),VNo=o("not"),XNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),zNo=o("from_pretrained()"),QNo=o(" to load the model weights."),WNo=l(),gme=a("p"),HNo=o("Examples:"),UNo=l(),m(xA.$$.fragment),JNo=l(),We=a("div"),m(kA.$$.fragment),YNo=l(),hme=a("p"),KNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZNo=l(),en=a("p"),ejo=o("The model class to instantiate is selected based on the "),ume=a("code"),ojo=o("model_type"),rjo=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(":"),ljo=l(),bme=a("ul"),m1=a("li"),vme=a("strong"),ijo=o("tapas"),djo=o(" \u2014 "),zD=a("a"),cjo=o("TapasForQuestionAnswering"),mjo=o(" (TAPAS model)"),fjo=l(),f1=a("p"),gjo=o("The model is set in evaluation mode by default using "),Fme=a("code"),hjo=o("model.eval()"),ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),pjo=o("model.train()"),_jo=l(),Mme=a("p"),bjo=o("Examples:"),vjo=l(),m(SA.$$.fragment),bBe=l(),Rd=a("h2"),g1=a("a"),Eme=a("span"),m(RA.$$.fragment),Fjo=l(),Cme=a("span"),Tjo=o("AutoModelForImageClassification"),vBe=l(),lr=a("div"),m(BA.$$.fragment),Mjo=l(),Bd=a("p"),Ejo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=a("a"),Cjo=o("from_pretrained()"),wjo=o(" class method or the "),WD=a("a"),Ajo=o("from_config()"),yjo=o(` class
method.`),Ljo=l(),PA=a("p"),xjo=o("This class cannot be instantiated directly using "),wme=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ot=a("div"),m($A.$$.fragment),Bjo=l(),Ame=a("p"),Pjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$jo=l(),Pd=a("p"),Ijo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),qjo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),jjo=o("from_pretrained()"),Djo=o(" to load the model weights."),Gjo=l(),Lme=a("p"),Ojo=o("Examples:"),Vjo=l(),m(IA.$$.fragment),Xjo=l(),He=a("div"),m(qA.$$.fragment),zjo=l(),xme=a("p"),Qjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wjo=l(),on=a("p"),Hjo=o("The model class to instantiate is selected based on the "),kme=a("code"),Ujo=o("model_type"),Jjo=o(` property of the config object (either
passed as an argument or loaded from `),Sme=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(":"),oDo=l(),de=a("ul"),h1=a("li"),Bme=a("strong"),rDo=o("beit"),tDo=o(" \u2014 "),UD=a("a"),aDo=o("BeitForImageClassification"),nDo=o(" (BEiT model)"),sDo=l(),u1=a("li"),Pme=a("strong"),lDo=o("convnext"),iDo=o(" \u2014 "),JD=a("a"),dDo=o("ConvNextForImageClassification"),cDo=o(" (ConvNext model)"),mDo=l(),p1=a("li"),$me=a("strong"),fDo=o("data2vec-vision"),gDo=o(" \u2014 "),YD=a("a"),hDo=o("Data2VecVisionForImageClassification"),uDo=o(" (Data2VecVision model)"),pDo=l(),Vs=a("li"),Ime=a("strong"),_Do=o("deit"),bDo=o(" \u2014 "),KD=a("a"),vDo=o("DeiTForImageClassification"),FDo=o(" or "),ZD=a("a"),TDo=o("DeiTForImageClassificationWithTeacher"),MDo=o(" (DeiT model)"),EDo=l(),_1=a("li"),qme=a("strong"),CDo=o("imagegpt"),wDo=o(" \u2014 "),eG=a("a"),ADo=o("ImageGPTForImageClassification"),yDo=o(" (ImageGPT model)"),LDo=l(),fa=a("li"),Nme=a("strong"),xDo=o("perceiver"),kDo=o(" \u2014 "),oG=a("a"),SDo=o("PerceiverForImageClassificationLearned"),RDo=o(" or "),rG=a("a"),BDo=o("PerceiverForImageClassificationFourier"),PDo=o(" or "),tG=a("a"),$Do=o("PerceiverForImageClassificationConvProcessing"),IDo=o(" (Perceiver model)"),qDo=l(),b1=a("li"),jme=a("strong"),NDo=o("poolformer"),jDo=o(" \u2014 "),aG=a("a"),DDo=o("PoolFormerForImageClassification"),GDo=o(" (PoolFormer model)"),ODo=l(),v1=a("li"),Dme=a("strong"),VDo=o("regnet"),XDo=o(" \u2014 "),nG=a("a"),zDo=o("RegNetForImageClassification"),QDo=o(" (RegNet model)"),WDo=l(),F1=a("li"),Gme=a("strong"),HDo=o("resnet"),UDo=o(" \u2014 "),sG=a("a"),JDo=o("ResNetForImageClassification"),YDo=o(" (ResNet model)"),KDo=l(),T1=a("li"),Ome=a("strong"),ZDo=o("segformer"),eGo=o(" \u2014 "),lG=a("a"),oGo=o("SegformerForImageClassification"),rGo=o(" (SegFormer model)"),tGo=l(),M1=a("li"),Vme=a("strong"),aGo=o("swin"),nGo=o(" \u2014 "),iG=a("a"),sGo=o("SwinForImageClassification"),lGo=o(" (Swin model)"),iGo=l(),E1=a("li"),Xme=a("strong"),dGo=o("van"),cGo=o(" \u2014 "),dG=a("a"),mGo=o("VanForImageClassification"),fGo=o(" (VAN model)"),gGo=l(),C1=a("li"),zme=a("strong"),hGo=o("vit"),uGo=o(" \u2014 "),cG=a("a"),pGo=o("ViTForImageClassification"),_Go=o(" (ViT model)"),bGo=l(),w1=a("p"),vGo=o("The model is set in evaluation mode by default using "),Qme=a("code"),FGo=o("model.eval()"),TGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),MGo=o("model.train()"),EGo=l(),Hme=a("p"),CGo=o("Examples:"),wGo=l(),m(NA.$$.fragment),FBe=l(),$d=a("h2"),A1=a("a"),Ume=a("span"),m(jA.$$.fragment),AGo=l(),Jme=a("span"),yGo=o("AutoModelForVision2Seq"),TBe=l(),ir=a("div"),m(DA.$$.fragment),LGo=l(),Id=a("p"),xGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mG=a("a"),kGo=o("from_pretrained()"),SGo=o(" class method or the "),fG=a("a"),RGo=o("from_config()"),BGo=o(` class
method.`),PGo=l(),GA=a("p"),$Go=o("This class cannot be instantiated directly using "),Yme=a("code"),IGo=o("__init__()"),qGo=o(" (throws an error)."),NGo=l(),rt=a("div"),m(OA.$$.fragment),jGo=l(),Kme=a("p"),DGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GGo=l(),qd=a("p"),OGo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),VGo=o("not"),XGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),zGo=o("from_pretrained()"),QGo=o(" to load the model weights."),WGo=l(),efe=a("p"),HGo=o("Examples:"),UGo=l(),m(VA.$$.fragment),JGo=l(),Ue=a("div"),m(XA.$$.fragment),YGo=l(),ofe=a("p"),KGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZGo=l(),rn=a("p"),eOo=o("The model class to instantiate is selected based on the "),rfe=a("code"),oOo=o("model_type"),rOo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),tOo=o("pretrained_model_name_or_path"),aOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),nOo=o("pretrained_model_name_or_path"),sOo=o(":"),lOo=l(),nfe=a("ul"),y1=a("li"),sfe=a("strong"),iOo=o("vision-encoder-decoder"),dOo=o(" \u2014 "),hG=a("a"),cOo=o("VisionEncoderDecoderModel"),mOo=o(" (Vision Encoder decoder model)"),fOo=l(),L1=a("p"),gOo=o("The model is set in evaluation mode by default using "),lfe=a("code"),hOo=o("model.eval()"),uOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),pOo=o("model.train()"),_Oo=l(),dfe=a("p"),bOo=o("Examples:"),vOo=l(),m(zA.$$.fragment),MBe=l(),Nd=a("h2"),x1=a("a"),cfe=a("span"),m(QA.$$.fragment),FOo=l(),mfe=a("span"),TOo=o("AutoModelForAudioClassification"),EBe=l(),dr=a("div"),m(WA.$$.fragment),MOo=l(),jd=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uG=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),pG=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),HA=a("p"),xOo=o("This class cannot be instantiated directly using "),ffe=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),tt=a("div"),m(UA.$$.fragment),BOo=l(),gfe=a("p"),POo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$Oo=l(),Dd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),ufe=a("p"),OOo=o("Examples:"),VOo=l(),m(JA.$$.fragment),XOo=l(),Je=a("div"),m(YA.$$.fragment),zOo=l(),pfe=a("p"),QOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WOo=l(),tn=a("p"),HOo=o("The model class to instantiate is selected based on the "),_fe=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),Se=a("ul"),k1=a("li"),Ffe=a("strong"),rVo=o("data2vec-audio"),tVo=o(" \u2014 "),bG=a("a"),aVo=o("Data2VecAudioForSequenceClassification"),nVo=o(" (Data2VecAudio model)"),sVo=l(),S1=a("li"),Tfe=a("strong"),lVo=o("hubert"),iVo=o(" \u2014 "),vG=a("a"),dVo=o("HubertForSequenceClassification"),cVo=o(" (Hubert model)"),mVo=l(),R1=a("li"),Mfe=a("strong"),fVo=o("sew"),gVo=o(" \u2014 "),FG=a("a"),hVo=o("SEWForSequenceClassification"),uVo=o(" (SEW model)"),pVo=l(),B1=a("li"),Efe=a("strong"),_Vo=o("sew-d"),bVo=o(" \u2014 "),TG=a("a"),vVo=o("SEWDForSequenceClassification"),FVo=o(" (SEW-D model)"),TVo=l(),P1=a("li"),Cfe=a("strong"),MVo=o("unispeech"),EVo=o(" \u2014 "),MG=a("a"),CVo=o("UniSpeechForSequenceClassification"),wVo=o(" (UniSpeech model)"),AVo=l(),$1=a("li"),wfe=a("strong"),yVo=o("unispeech-sat"),LVo=o(" \u2014 "),EG=a("a"),xVo=o("UniSpeechSatForSequenceClassification"),kVo=o(" (UniSpeechSat model)"),SVo=l(),I1=a("li"),Afe=a("strong"),RVo=o("wav2vec2"),BVo=o(" \u2014 "),CG=a("a"),PVo=o("Wav2Vec2ForSequenceClassification"),$Vo=o(" (Wav2Vec2 model)"),IVo=l(),q1=a("li"),yfe=a("strong"),qVo=o("wavlm"),NVo=o(" \u2014 "),wG=a("a"),jVo=o("WavLMForSequenceClassification"),DVo=o(" (WavLM model)"),GVo=l(),N1=a("p"),OVo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),VVo=o("model.eval()"),XVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),zVo=o("model.train()"),QVo=l(),kfe=a("p"),WVo=o("Examples:"),HVo=l(),m(KA.$$.fragment),CBe=l(),Gd=a("h2"),j1=a("a"),Sfe=a("span"),m(ZA.$$.fragment),UVo=l(),Rfe=a("span"),JVo=o("AutoModelForAudioFrameClassification"),wBe=l(),cr=a("div"),m(e0.$$.fragment),YVo=l(),Od=a("p"),KVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" class method or the "),yG=a("a"),oXo=o("from_config()"),rXo=o(` class
method.`),tXo=l(),o0=a("p"),aXo=o("This class cannot be instantiated directly using "),Bfe=a("code"),nXo=o("__init__()"),sXo=o(" (throws an error)."),lXo=l(),at=a("div"),m(r0.$$.fragment),iXo=l(),Pfe=a("p"),dXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cXo=l(),Vd=a("p"),mXo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),fXo=o("not"),gXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),hXo=o("from_pretrained()"),uXo=o(" to load the model weights."),pXo=l(),Ife=a("p"),_Xo=o("Examples:"),bXo=l(),m(t0.$$.fragment),vXo=l(),Ye=a("div"),m(a0.$$.fragment),FXo=l(),qfe=a("p"),TXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MXo=l(),an=a("p"),EXo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),CXo=o("model_type"),wXo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),AXo=o("pretrained_model_name_or_path"),yXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),LXo=o("pretrained_model_name_or_path"),xXo=o(":"),kXo=l(),nn=a("ul"),D1=a("li"),Gfe=a("strong"),SXo=o("data2vec-audio"),RXo=o(" \u2014 "),xG=a("a"),BXo=o("Data2VecAudioForAudioFrameClassification"),PXo=o(" (Data2VecAudio model)"),$Xo=l(),G1=a("li"),Ofe=a("strong"),IXo=o("unispeech-sat"),qXo=o(" \u2014 "),kG=a("a"),NXo=o("UniSpeechSatForAudioFrameClassification"),jXo=o(" (UniSpeechSat model)"),DXo=l(),O1=a("li"),Vfe=a("strong"),GXo=o("wav2vec2"),OXo=o(" \u2014 "),SG=a("a"),VXo=o("Wav2Vec2ForAudioFrameClassification"),XXo=o(" (Wav2Vec2 model)"),zXo=l(),V1=a("li"),Xfe=a("strong"),QXo=o("wavlm"),WXo=o(" \u2014 "),RG=a("a"),HXo=o("WavLMForAudioFrameClassification"),UXo=o(" (WavLM model)"),JXo=l(),X1=a("p"),YXo=o("The model is set in evaluation mode by default using "),zfe=a("code"),KXo=o("model.eval()"),ZXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=a("code"),ezo=o("model.train()"),ozo=l(),Wfe=a("p"),rzo=o("Examples:"),tzo=l(),m(n0.$$.fragment),ABe=l(),Xd=a("h2"),z1=a("a"),Hfe=a("span"),m(s0.$$.fragment),azo=l(),Ufe=a("span"),nzo=o("AutoModelForCTC"),yBe=l(),mr=a("div"),m(l0.$$.fragment),szo=l(),zd=a("p"),lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=a("a"),izo=o("from_pretrained()"),dzo=o(" class method or the "),PG=a("a"),czo=o("from_config()"),mzo=o(` class
method.`),fzo=l(),i0=a("p"),gzo=o("This class cannot be instantiated directly using "),Jfe=a("code"),hzo=o("__init__()"),uzo=o(" (throws an error)."),pzo=l(),nt=a("div"),m(d0.$$.fragment),_zo=l(),Yfe=a("p"),bzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vzo=l(),Qd=a("p"),Fzo=o(`Note:
Loading a model from its configuration file does `),Kfe=a("strong"),Tzo=o("not"),Mzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),Ezo=o("from_pretrained()"),Czo=o(" to load the model weights."),wzo=l(),Zfe=a("p"),Azo=o("Examples:"),yzo=l(),m(c0.$$.fragment),Lzo=l(),Ke=a("div"),m(m0.$$.fragment),xzo=l(),ege=a("p"),kzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Szo=l(),sn=a("p"),Rzo=o("The model class to instantiate is selected based on the "),oge=a("code"),Bzo=o("model_type"),Pzo=o(` property of the config object (either
passed as an argument or loaded from `),rge=a("code"),$zo=o("pretrained_model_name_or_path"),Izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(":"),jzo=l(),Re=a("ul"),Q1=a("li"),age=a("strong"),Dzo=o("data2vec-audio"),Gzo=o(" \u2014 "),IG=a("a"),Ozo=o("Data2VecAudioForCTC"),Vzo=o(" (Data2VecAudio model)"),Xzo=l(),W1=a("li"),nge=a("strong"),zzo=o("hubert"),Qzo=o(" \u2014 "),qG=a("a"),Wzo=o("HubertForCTC"),Hzo=o(" (Hubert model)"),Uzo=l(),H1=a("li"),sge=a("strong"),Jzo=o("sew"),Yzo=o(" \u2014 "),NG=a("a"),Kzo=o("SEWForCTC"),Zzo=o(" (SEW model)"),eQo=l(),U1=a("li"),lge=a("strong"),oQo=o("sew-d"),rQo=o(" \u2014 "),jG=a("a"),tQo=o("SEWDForCTC"),aQo=o(" (SEW-D model)"),nQo=l(),J1=a("li"),ige=a("strong"),sQo=o("unispeech"),lQo=o(" \u2014 "),DG=a("a"),iQo=o("UniSpeechForCTC"),dQo=o(" (UniSpeech model)"),cQo=l(),Y1=a("li"),dge=a("strong"),mQo=o("unispeech-sat"),fQo=o(" \u2014 "),GG=a("a"),gQo=o("UniSpeechSatForCTC"),hQo=o(" (UniSpeechSat model)"),uQo=l(),K1=a("li"),cge=a("strong"),pQo=o("wav2vec2"),_Qo=o(" \u2014 "),OG=a("a"),bQo=o("Wav2Vec2ForCTC"),vQo=o(" (Wav2Vec2 model)"),FQo=l(),Z1=a("li"),mge=a("strong"),TQo=o("wavlm"),MQo=o(" \u2014 "),VG=a("a"),EQo=o("WavLMForCTC"),CQo=o(" (WavLM model)"),wQo=l(),eT=a("p"),AQo=o("The model is set in evaluation mode by default using "),fge=a("code"),yQo=o("model.eval()"),LQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=a("code"),xQo=o("model.train()"),kQo=l(),hge=a("p"),SQo=o("Examples:"),RQo=l(),m(f0.$$.fragment),LBe=l(),Wd=a("h2"),oT=a("a"),uge=a("span"),m(g0.$$.fragment),BQo=l(),pge=a("span"),PQo=o("AutoModelForSpeechSeq2Seq"),xBe=l(),fr=a("div"),m(h0.$$.fragment),$Qo=l(),Hd=a("p"),IQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=a("a"),qQo=o("from_pretrained()"),NQo=o(" class method or the "),zG=a("a"),jQo=o("from_config()"),DQo=o(` class
method.`),GQo=l(),u0=a("p"),OQo=o("This class cannot be instantiated directly using "),_ge=a("code"),VQo=o("__init__()"),XQo=o(" (throws an error)."),zQo=l(),st=a("div"),m(p0.$$.fragment),QQo=l(),bge=a("p"),WQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HQo=l(),Ud=a("p"),UQo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),JQo=o("not"),YQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),KQo=o("from_pretrained()"),ZQo=o(" to load the model weights."),eWo=l(),Fge=a("p"),oWo=o("Examples:"),rWo=l(),m(_0.$$.fragment),tWo=l(),Ze=a("div"),m(b0.$$.fragment),aWo=l(),Tge=a("p"),nWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sWo=l(),ln=a("p"),lWo=o("The model class to instantiate is selected based on the "),Mge=a("code"),iWo=o("model_type"),dWo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),cWo=o("pretrained_model_name_or_path"),mWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),fWo=o("pretrained_model_name_or_path"),gWo=o(":"),hWo=l(),v0=a("ul"),rT=a("li"),wge=a("strong"),uWo=o("speech-encoder-decoder"),pWo=o(" \u2014 "),WG=a("a"),_Wo=o("SpeechEncoderDecoderModel"),bWo=o(" (Speech Encoder decoder model)"),vWo=l(),tT=a("li"),Age=a("strong"),FWo=o("speech_to_text"),TWo=o(" \u2014 "),HG=a("a"),MWo=o("Speech2TextForConditionalGeneration"),EWo=o(" (Speech2Text model)"),CWo=l(),aT=a("p"),wWo=o("The model is set in evaluation mode by default using "),yge=a("code"),AWo=o("model.eval()"),yWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),LWo=o("model.train()"),xWo=l(),xge=a("p"),kWo=o("Examples:"),SWo=l(),m(F0.$$.fragment),kBe=l(),Jd=a("h2"),nT=a("a"),kge=a("span"),m(T0.$$.fragment),RWo=l(),Sge=a("span"),BWo=o("AutoModelForAudioXVector"),SBe=l(),gr=a("div"),m(M0.$$.fragment),PWo=l(),Yd=a("p"),$Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=a("a"),IWo=o("from_pretrained()"),qWo=o(" class method or the "),JG=a("a"),NWo=o("from_config()"),jWo=o(` class
method.`),DWo=l(),E0=a("p"),GWo=o("This class cannot be instantiated directly using "),Rge=a("code"),OWo=o("__init__()"),VWo=o(" (throws an error)."),XWo=l(),lt=a("div"),m(C0.$$.fragment),zWo=l(),Bge=a("p"),QWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),WWo=l(),Kd=a("p"),HWo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),UWo=o("not"),JWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),YWo=o("from_pretrained()"),KWo=o(" to load the model weights."),ZWo=l(),$ge=a("p"),eHo=o("Examples:"),oHo=l(),m(w0.$$.fragment),rHo=l(),eo=a("div"),m(A0.$$.fragment),tHo=l(),Ige=a("p"),aHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nHo=l(),dn=a("p"),sHo=o("The model class to instantiate is selected based on the "),qge=a("code"),lHo=o("model_type"),iHo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),mHo=o("pretrained_model_name_or_path"),fHo=o(":"),gHo=l(),cn=a("ul"),sT=a("li"),Dge=a("strong"),hHo=o("data2vec-audio"),uHo=o(" \u2014 "),KG=a("a"),pHo=o("Data2VecAudioForXVector"),_Ho=o(" (Data2VecAudio model)"),bHo=l(),lT=a("li"),Gge=a("strong"),vHo=o("unispeech-sat"),FHo=o(" \u2014 "),ZG=a("a"),THo=o("UniSpeechSatForXVector"),MHo=o(" (UniSpeechSat model)"),EHo=l(),iT=a("li"),Oge=a("strong"),CHo=o("wav2vec2"),wHo=o(" \u2014 "),eO=a("a"),AHo=o("Wav2Vec2ForXVector"),yHo=o(" (Wav2Vec2 model)"),LHo=l(),dT=a("li"),Vge=a("strong"),xHo=o("wavlm"),kHo=o(" \u2014 "),oO=a("a"),SHo=o("WavLMForXVector"),RHo=o(" (WavLM model)"),BHo=l(),cT=a("p"),PHo=o("The model is set in evaluation mode by default using "),Xge=a("code"),$Ho=o("model.eval()"),IHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),qHo=o("model.train()"),NHo=l(),Qge=a("p"),jHo=o("Examples:"),DHo=l(),m(y0.$$.fragment),RBe=l(),Zd=a("h2"),mT=a("a"),Wge=a("span"),m(L0.$$.fragment),GHo=l(),Hge=a("span"),OHo=o("AutoModelForMaskedImageModeling"),BBe=l(),hr=a("div"),m(x0.$$.fragment),VHo=l(),ec=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=a("a"),zHo=o("from_pretrained()"),QHo=o(" class method or the "),tO=a("a"),WHo=o("from_config()"),HHo=o(` class
method.`),UHo=l(),k0=a("p"),JHo=o("This class cannot be instantiated directly using "),Uge=a("code"),YHo=o("__init__()"),KHo=o(" (throws an error)."),ZHo=l(),it=a("div"),m(S0.$$.fragment),eUo=l(),Jge=a("p"),oUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rUo=l(),oc=a("p"),tUo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),aUo=o("not"),nUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),sUo=o("from_pretrained()"),lUo=o(" to load the model weights."),iUo=l(),Kge=a("p"),dUo=o("Examples:"),cUo=l(),m(R0.$$.fragment),mUo=l(),oo=a("div"),m(B0.$$.fragment),fUo=l(),Zge=a("p"),gUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hUo=l(),mn=a("p"),uUo=o("The model class to instantiate is selected based on the "),ehe=a("code"),pUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),bUo=o("pretrained_model_name_or_path"),vUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),FUo=o("pretrained_model_name_or_path"),TUo=o(":"),MUo=l(),rc=a("ul"),fT=a("li"),the=a("strong"),EUo=o("deit"),CUo=o(" \u2014 "),nO=a("a"),wUo=o("DeiTForMaskedImageModeling"),AUo=o(" (DeiT model)"),yUo=l(),gT=a("li"),ahe=a("strong"),LUo=o("swin"),xUo=o(" \u2014 "),sO=a("a"),kUo=o("SwinForMaskedImageModeling"),SUo=o(" (Swin model)"),RUo=l(),hT=a("li"),nhe=a("strong"),BUo=o("vit"),PUo=o(" \u2014 "),lO=a("a"),$Uo=o("ViTForMaskedImageModeling"),IUo=o(" (ViT model)"),qUo=l(),uT=a("p"),NUo=o("The model is set in evaluation mode by default using "),she=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),GUo=o("model.train()"),OUo=l(),ihe=a("p"),VUo=o("Examples:"),XUo=l(),m(P0.$$.fragment),PBe=l(),tc=a("h2"),pT=a("a"),dhe=a("span"),m($0.$$.fragment),zUo=l(),che=a("span"),QUo=o("AutoModelForObjectDetection"),$Be=l(),ur=a("div"),m(I0.$$.fragment),WUo=l(),ac=a("p"),HUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=a("a"),UUo=o("from_pretrained()"),JUo=o(" class method or the "),dO=a("a"),YUo=o("from_config()"),KUo=o(` class
method.`),ZUo=l(),q0=a("p"),eJo=o("This class cannot be instantiated directly using "),mhe=a("code"),oJo=o("__init__()"),rJo=o(" (throws an error)."),tJo=l(),dt=a("div"),m(N0.$$.fragment),aJo=l(),fhe=a("p"),nJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sJo=l(),nc=a("p"),lJo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),iJo=o("not"),dJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),cJo=o("from_pretrained()"),mJo=o(" to load the model weights."),fJo=l(),hhe=a("p"),gJo=o("Examples:"),hJo=l(),m(j0.$$.fragment),uJo=l(),ro=a("div"),m(D0.$$.fragment),pJo=l(),uhe=a("p"),_Jo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),bJo=l(),fn=a("p"),vJo=o("The model class to instantiate is selected based on the "),phe=a("code"),FJo=o("model_type"),TJo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(":"),AJo=l(),vhe=a("ul"),_T=a("li"),Fhe=a("strong"),yJo=o("detr"),LJo=o(" \u2014 "),mO=a("a"),xJo=o("DetrForObjectDetection"),kJo=o(" (DETR model)"),SJo=l(),bT=a("p"),RJo=o("The model is set in evaluation mode by default using "),The=a("code"),BJo=o("model.eval()"),PJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),$Jo=o("model.train()"),IJo=l(),Ehe=a("p"),qJo=o("Examples:"),NJo=l(),m(G0.$$.fragment),IBe=l(),sc=a("h2"),vT=a("a"),Che=a("span"),m(O0.$$.fragment),jJo=l(),whe=a("span"),DJo=o("AutoModelForImageSegmentation"),qBe=l(),pr=a("div"),m(V0.$$.fragment),GJo=l(),lc=a("p"),OJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fO=a("a"),VJo=o("from_pretrained()"),XJo=o(" class method or the "),gO=a("a"),zJo=o("from_config()"),QJo=o(` class
method.`),WJo=l(),X0=a("p"),HJo=o("This class cannot be instantiated directly using "),Ahe=a("code"),UJo=o("__init__()"),JJo=o(" (throws an error)."),YJo=l(),ct=a("div"),m(z0.$$.fragment),KJo=l(),yhe=a("p"),ZJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eYo=l(),ic=a("p"),oYo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),rYo=o("not"),tYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),aYo=o("from_pretrained()"),nYo=o(" to load the model weights."),sYo=l(),xhe=a("p"),lYo=o("Examples:"),iYo=l(),m(Q0.$$.fragment),dYo=l(),to=a("div"),m(W0.$$.fragment),cYo=l(),khe=a("p"),mYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fYo=l(),gn=a("p"),gYo=o("The model class to instantiate is selected based on the "),She=a("code"),hYo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),Phe=a("ul"),FT=a("li"),$he=a("strong"),TYo=o("detr"),MYo=o(" \u2014 "),uO=a("a"),EYo=o("DetrForSegmentation"),CYo=o(" (DETR model)"),wYo=l(),TT=a("p"),AYo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),xYo=o("model.train()"),kYo=l(),Nhe=a("p"),SYo=o("Examples:"),RYo=l(),m(H0.$$.fragment),NBe=l(),dc=a("h2"),MT=a("a"),jhe=a("span"),m(U0.$$.fragment),BYo=l(),Dhe=a("span"),PYo=o("AutoModelForSemanticSegmentation"),jBe=l(),_r=a("div"),m(J0.$$.fragment),$Yo=l(),cc=a("p"),IYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pO=a("a"),qYo=o("from_pretrained()"),NYo=o(" class method or the "),_O=a("a"),jYo=o("from_config()"),DYo=o(` class
method.`),GYo=l(),Y0=a("p"),OYo=o("This class cannot be instantiated directly using "),Ghe=a("code"),VYo=o("__init__()"),XYo=o(" (throws an error)."),zYo=l(),mt=a("div"),m(K0.$$.fragment),QYo=l(),Ohe=a("p"),WYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),HYo=l(),mc=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),JYo=o("not"),YYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),KYo=o("from_pretrained()"),ZYo=o(" to load the model weights."),eKo=l(),Xhe=a("p"),oKo=o("Examples:"),rKo=l(),m(Z0.$$.fragment),tKo=l(),ao=a("div"),m(ey.$$.fragment),aKo=l(),zhe=a("p"),nKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sKo=l(),hn=a("p"),lKo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),cKo=o("pretrained_model_name_or_path"),mKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),fKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),un=a("ul"),ET=a("li"),Uhe=a("strong"),uKo=o("beit"),pKo=o(" \u2014 "),vO=a("a"),_Ko=o("BeitForSemanticSegmentation"),bKo=o(" (BEiT model)"),vKo=l(),CT=a("li"),Jhe=a("strong"),FKo=o("data2vec-vision"),TKo=o(" \u2014 "),FO=a("a"),MKo=o("Data2VecVisionForSemanticSegmentation"),EKo=o(" (Data2VecVision model)"),CKo=l(),wT=a("li"),Yhe=a("strong"),wKo=o("dpt"),AKo=o(" \u2014 "),TO=a("a"),yKo=o("DPTForSemanticSegmentation"),LKo=o(" (DPT model)"),xKo=l(),AT=a("li"),Khe=a("strong"),kKo=o("segformer"),SKo=o(" \u2014 "),MO=a("a"),RKo=o("SegformerForSemanticSegmentation"),BKo=o(" (SegFormer model)"),PKo=l(),yT=a("p"),$Ko=o("The model is set in evaluation mode by default using "),Zhe=a("code"),IKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),NKo=o("model.train()"),jKo=l(),oue=a("p"),DKo=o("Examples:"),GKo=l(),m(oy.$$.fragment),DBe=l(),fc=a("h2"),LT=a("a"),rue=a("span"),m(ry.$$.fragment),OKo=l(),tue=a("span"),VKo=o("AutoModelForInstanceSegmentation"),GBe=l(),br=a("div"),m(ty.$$.fragment),XKo=l(),gc=a("p"),zKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=a("a"),QKo=o("from_pretrained()"),WKo=o(" class method or the "),CO=a("a"),HKo=o("from_config()"),UKo=o(` class
method.`),JKo=l(),ay=a("p"),YKo=o("This class cannot be instantiated directly using "),aue=a("code"),KKo=o("__init__()"),ZKo=o(" (throws an error)."),eZo=l(),ft=a("div"),m(ny.$$.fragment),oZo=l(),nue=a("p"),rZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tZo=l(),hc=a("p"),aZo=o(`Note:
Loading a model from its configuration file does `),sue=a("strong"),nZo=o("not"),sZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),lZo=o("from_pretrained()"),iZo=o(" to load the model weights."),dZo=l(),lue=a("p"),cZo=o("Examples:"),mZo=l(),m(sy.$$.fragment),fZo=l(),no=a("div"),m(ly.$$.fragment),gZo=l(),iue=a("p"),hZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),uZo=l(),pn=a("p"),pZo=o("The model class to instantiate is selected based on the "),due=a("code"),_Zo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),fue=a("ul"),xT=a("li"),gue=a("strong"),CZo=o("maskformer"),wZo=o(" \u2014 "),AO=a("a"),AZo=o("MaskFormerForInstanceSegmentation"),yZo=o(" (MaskFormer model)"),LZo=l(),kT=a("p"),xZo=o("The model is set in evaluation mode by default using "),hue=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),RZo=o("model.train()"),BZo=l(),pue=a("p"),PZo=o("Examples:"),$Zo=l(),m(iy.$$.fragment),OBe=l(),uc=a("h2"),ST=a("a"),_ue=a("span"),m(dy.$$.fragment),IZo=l(),bue=a("span"),qZo=o("TFAutoModel"),VBe=l(),vr=a("div"),m(cy.$$.fragment),NZo=l(),pc=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),LO=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),my=a("p"),zZo=o("This class cannot be instantiated directly using "),vue=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),gt=a("div"),m(fy.$$.fragment),UZo=l(),Fue=a("p"),JZo=o("Instantiates one of the base model classes of the library from a configuration."),YZo=l(),_c=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),Tue=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),Mue=a("p"),aer=o("Examples:"),ner=l(),m(gy.$$.fragment),ser=l(),ho=a("div"),m(hy.$$.fragment),ler=l(),Eue=a("p"),ier=o("Instantiate one of the base model classes of the library from a pretrained model."),der=l(),_n=a("p"),cer=o("The model class to instantiate is selected based on the "),Cue=a("code"),mer=o("model_type"),fer=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),uer=o("pretrained_model_name_or_path"),per=o(":"),_er=l(),x=a("ul"),RT=a("li"),yue=a("strong"),ber=o("albert"),ver=o(" \u2014 "),kO=a("a"),Fer=o("TFAlbertModel"),Ter=o(" (ALBERT model)"),Mer=l(),BT=a("li"),Lue=a("strong"),Eer=o("bart"),Cer=o(" \u2014 "),SO=a("a"),wer=o("TFBartModel"),Aer=o(" (BART model)"),yer=l(),PT=a("li"),xue=a("strong"),Ler=o("bert"),xer=o(" \u2014 "),RO=a("a"),ker=o("TFBertModel"),Ser=o(" (BERT model)"),Rer=l(),$T=a("li"),kue=a("strong"),Ber=o("blenderbot"),Per=o(" \u2014 "),BO=a("a"),$er=o("TFBlenderbotModel"),Ier=o(" (Blenderbot model)"),qer=l(),IT=a("li"),Sue=a("strong"),Ner=o("blenderbot-small"),jer=o(" \u2014 "),PO=a("a"),Der=o("TFBlenderbotSmallModel"),Ger=o(" (BlenderbotSmall model)"),Oer=l(),qT=a("li"),Rue=a("strong"),Ver=o("camembert"),Xer=o(" \u2014 "),$O=a("a"),zer=o("TFCamembertModel"),Qer=o(" (CamemBERT model)"),Wer=l(),NT=a("li"),Bue=a("strong"),Her=o("clip"),Uer=o(" \u2014 "),IO=a("a"),Jer=o("TFCLIPModel"),Yer=o(" (CLIP model)"),Ker=l(),jT=a("li"),Pue=a("strong"),Zer=o("convbert"),eor=o(" \u2014 "),qO=a("a"),oor=o("TFConvBertModel"),ror=o(" (ConvBERT model)"),tor=l(),DT=a("li"),$ue=a("strong"),aor=o("convnext"),nor=o(" \u2014 "),NO=a("a"),sor=o("TFConvNextModel"),lor=o(" (ConvNext model)"),ior=l(),GT=a("li"),Iue=a("strong"),dor=o("ctrl"),cor=o(" \u2014 "),jO=a("a"),mor=o("TFCTRLModel"),gor=o(" (CTRL model)"),hor=l(),OT=a("li"),que=a("strong"),uor=o("deberta"),por=o(" \u2014 "),DO=a("a"),_or=o("TFDebertaModel"),bor=o(" (DeBERTa model)"),vor=l(),VT=a("li"),Nue=a("strong"),For=o("deberta-v2"),Tor=o(" \u2014 "),GO=a("a"),Mor=o("TFDebertaV2Model"),Eor=o(" (DeBERTa-v2 model)"),Cor=l(),XT=a("li"),jue=a("strong"),wor=o("distilbert"),Aor=o(" \u2014 "),OO=a("a"),yor=o("TFDistilBertModel"),Lor=o(" (DistilBERT model)"),xor=l(),zT=a("li"),Due=a("strong"),kor=o("dpr"),Sor=o(" \u2014 "),VO=a("a"),Ror=o("TFDPRQuestionEncoder"),Bor=o(" (DPR model)"),Por=l(),QT=a("li"),Gue=a("strong"),$or=o("electra"),Ior=o(" \u2014 "),XO=a("a"),qor=o("TFElectraModel"),Nor=o(" (ELECTRA model)"),jor=l(),WT=a("li"),Oue=a("strong"),Dor=o("flaubert"),Gor=o(" \u2014 "),zO=a("a"),Oor=o("TFFlaubertModel"),Vor=o(" (FlauBERT model)"),Xor=l(),Xs=a("li"),Vue=a("strong"),zor=o("funnel"),Qor=o(" \u2014 "),QO=a("a"),Wor=o("TFFunnelModel"),Hor=o(" or "),WO=a("a"),Uor=o("TFFunnelBaseModel"),Jor=o(" (Funnel Transformer model)"),Yor=l(),HT=a("li"),Xue=a("strong"),Kor=o("gpt2"),Zor=o(" \u2014 "),HO=a("a"),err=o("TFGPT2Model"),orr=o(" (OpenAI GPT-2 model)"),rrr=l(),UT=a("li"),zue=a("strong"),trr=o("gptj"),arr=o(" \u2014 "),UO=a("a"),nrr=o("TFGPTJModel"),srr=o(" (GPT-J model)"),lrr=l(),JT=a("li"),Que=a("strong"),irr=o("hubert"),drr=o(" \u2014 "),JO=a("a"),crr=o("TFHubertModel"),mrr=o(" (Hubert model)"),frr=l(),YT=a("li"),Wue=a("strong"),grr=o("layoutlm"),hrr=o(" \u2014 "),YO=a("a"),urr=o("TFLayoutLMModel"),prr=o(" (LayoutLM model)"),_rr=l(),KT=a("li"),Hue=a("strong"),brr=o("led"),vrr=o(" \u2014 "),KO=a("a"),Frr=o("TFLEDModel"),Trr=o(" (LED model)"),Mrr=l(),ZT=a("li"),Uue=a("strong"),Err=o("longformer"),Crr=o(" \u2014 "),ZO=a("a"),wrr=o("TFLongformerModel"),Arr=o(" (Longformer model)"),yrr=l(),eM=a("li"),Jue=a("strong"),Lrr=o("lxmert"),xrr=o(" \u2014 "),eV=a("a"),krr=o("TFLxmertModel"),Srr=o(" (LXMERT model)"),Rrr=l(),oM=a("li"),Yue=a("strong"),Brr=o("marian"),Prr=o(" \u2014 "),oV=a("a"),$rr=o("TFMarianModel"),Irr=o(" (Marian model)"),qrr=l(),rM=a("li"),Kue=a("strong"),Nrr=o("mbart"),jrr=o(" \u2014 "),rV=a("a"),Drr=o("TFMBartModel"),Grr=o(" (mBART model)"),Orr=l(),tM=a("li"),Zue=a("strong"),Vrr=o("mobilebert"),Xrr=o(" \u2014 "),tV=a("a"),zrr=o("TFMobileBertModel"),Qrr=o(" (MobileBERT model)"),Wrr=l(),aM=a("li"),epe=a("strong"),Hrr=o("mpnet"),Urr=o(" \u2014 "),aV=a("a"),Jrr=o("TFMPNetModel"),Yrr=o(" (MPNet model)"),Krr=l(),nM=a("li"),ope=a("strong"),Zrr=o("mt5"),etr=o(" \u2014 "),nV=a("a"),otr=o("TFMT5Model"),rtr=o(" (mT5 model)"),ttr=l(),sM=a("li"),rpe=a("strong"),atr=o("openai-gpt"),ntr=o(" \u2014 "),sV=a("a"),str=o("TFOpenAIGPTModel"),ltr=o(" (OpenAI GPT model)"),itr=l(),lM=a("li"),tpe=a("strong"),dtr=o("pegasus"),ctr=o(" \u2014 "),lV=a("a"),mtr=o("TFPegasusModel"),ftr=o(" (Pegasus model)"),gtr=l(),iM=a("li"),ape=a("strong"),htr=o("rembert"),utr=o(" \u2014 "),iV=a("a"),ptr=o("TFRemBertModel"),_tr=o(" (RemBERT model)"),btr=l(),dM=a("li"),npe=a("strong"),vtr=o("roberta"),Ftr=o(" \u2014 "),dV=a("a"),Ttr=o("TFRobertaModel"),Mtr=o(" (RoBERTa model)"),Etr=l(),cM=a("li"),spe=a("strong"),Ctr=o("roformer"),wtr=o(" \u2014 "),cV=a("a"),Atr=o("TFRoFormerModel"),ytr=o(" (RoFormer model)"),Ltr=l(),mM=a("li"),lpe=a("strong"),xtr=o("speech_to_text"),ktr=o(" \u2014 "),mV=a("a"),Str=o("TFSpeech2TextModel"),Rtr=o(" (Speech2Text model)"),Btr=l(),fM=a("li"),ipe=a("strong"),Ptr=o("t5"),$tr=o(" \u2014 "),fV=a("a"),Itr=o("TFT5Model"),qtr=o(" (T5 model)"),Ntr=l(),gM=a("li"),dpe=a("strong"),jtr=o("tapas"),Dtr=o(" \u2014 "),gV=a("a"),Gtr=o("TFTapasModel"),Otr=o(" (TAPAS model)"),Vtr=l(),hM=a("li"),cpe=a("strong"),Xtr=o("transfo-xl"),ztr=o(" \u2014 "),hV=a("a"),Qtr=o("TFTransfoXLModel"),Wtr=o(" (Transformer-XL model)"),Htr=l(),uM=a("li"),mpe=a("strong"),Utr=o("vit"),Jtr=o(" \u2014 "),uV=a("a"),Ytr=o("TFViTModel"),Ktr=o(" (ViT model)"),Ztr=l(),pM=a("li"),fpe=a("strong"),ear=o("vit_mae"),oar=o(" \u2014 "),pV=a("a"),rar=o("TFViTMAEModel"),tar=o(" (ViTMAE model)"),aar=l(),_M=a("li"),gpe=a("strong"),nar=o("wav2vec2"),sar=o(" \u2014 "),_V=a("a"),lar=o("TFWav2Vec2Model"),iar=o(" (Wav2Vec2 model)"),dar=l(),bM=a("li"),hpe=a("strong"),car=o("xlm"),mar=o(" \u2014 "),bV=a("a"),far=o("TFXLMModel"),gar=o(" (XLM model)"),har=l(),vM=a("li"),upe=a("strong"),uar=o("xlm-roberta"),par=o(" \u2014 "),vV=a("a"),_ar=o("TFXLMRobertaModel"),bar=o(" (XLM-RoBERTa model)"),Far=l(),FM=a("li"),ppe=a("strong"),Tar=o("xlnet"),Mar=o(" \u2014 "),FV=a("a"),Ear=o("TFXLNetModel"),Car=o(" (XLNet model)"),war=l(),_pe=a("p"),Aar=o("Examples:"),yar=l(),m(uy.$$.fragment),XBe=l(),bc=a("h2"),TM=a("a"),bpe=a("span"),m(py.$$.fragment),Lar=l(),vpe=a("span"),xar=o("TFAutoModelForPreTraining"),zBe=l(),Fr=a("div"),m(_y.$$.fragment),kar=l(),vc=a("p"),Sar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=a("a"),Rar=o("from_pretrained()"),Bar=o(" class method or the "),MV=a("a"),Par=o("from_config()"),$ar=o(` class
method.`),Iar=l(),by=a("p"),qar=o("This class cannot be instantiated directly using "),Fpe=a("code"),Nar=o("__init__()"),jar=o(" (throws an error)."),Dar=l(),ht=a("div"),m(vy.$$.fragment),Gar=l(),Tpe=a("p"),Oar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Var=l(),Fc=a("p"),Xar=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),zar=o("not"),Qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),War=o("from_pretrained()"),Har=o(" to load the model weights."),Uar=l(),Epe=a("p"),Jar=o("Examples:"),Yar=l(),m(Fy.$$.fragment),Kar=l(),uo=a("div"),m(Ty.$$.fragment),Zar=l(),Cpe=a("p"),enr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),onr=l(),bn=a("p"),rnr=o("The model class to instantiate is selected based on the "),wpe=a("code"),tnr=o("model_type"),anr=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(":"),dnr=l(),H=a("ul"),MM=a("li"),Lpe=a("strong"),cnr=o("albert"),mnr=o(" \u2014 "),CV=a("a"),fnr=o("TFAlbertForPreTraining"),gnr=o(" (ALBERT model)"),hnr=l(),EM=a("li"),xpe=a("strong"),unr=o("bart"),pnr=o(" \u2014 "),wV=a("a"),_nr=o("TFBartForConditionalGeneration"),bnr=o(" (BART model)"),vnr=l(),CM=a("li"),kpe=a("strong"),Fnr=o("bert"),Tnr=o(" \u2014 "),AV=a("a"),Mnr=o("TFBertForPreTraining"),Enr=o(" (BERT model)"),Cnr=l(),wM=a("li"),Spe=a("strong"),wnr=o("camembert"),Anr=o(" \u2014 "),yV=a("a"),ynr=o("TFCamembertForMaskedLM"),Lnr=o(" (CamemBERT model)"),xnr=l(),AM=a("li"),Rpe=a("strong"),knr=o("ctrl"),Snr=o(" \u2014 "),LV=a("a"),Rnr=o("TFCTRLLMHeadModel"),Bnr=o(" (CTRL model)"),Pnr=l(),yM=a("li"),Bpe=a("strong"),$nr=o("distilbert"),Inr=o(" \u2014 "),xV=a("a"),qnr=o("TFDistilBertForMaskedLM"),Nnr=o(" (DistilBERT model)"),jnr=l(),LM=a("li"),Ppe=a("strong"),Dnr=o("electra"),Gnr=o(" \u2014 "),kV=a("a"),Onr=o("TFElectraForPreTraining"),Vnr=o(" (ELECTRA model)"),Xnr=l(),xM=a("li"),$pe=a("strong"),znr=o("flaubert"),Qnr=o(" \u2014 "),SV=a("a"),Wnr=o("TFFlaubertWithLMHeadModel"),Hnr=o(" (FlauBERT model)"),Unr=l(),kM=a("li"),Ipe=a("strong"),Jnr=o("funnel"),Ynr=o(" \u2014 "),RV=a("a"),Knr=o("TFFunnelForPreTraining"),Znr=o(" (Funnel Transformer model)"),esr=l(),SM=a("li"),qpe=a("strong"),osr=o("gpt2"),rsr=o(" \u2014 "),BV=a("a"),tsr=o("TFGPT2LMHeadModel"),asr=o(" (OpenAI GPT-2 model)"),nsr=l(),RM=a("li"),Npe=a("strong"),ssr=o("layoutlm"),lsr=o(" \u2014 "),PV=a("a"),isr=o("TFLayoutLMForMaskedLM"),dsr=o(" (LayoutLM model)"),csr=l(),BM=a("li"),jpe=a("strong"),msr=o("lxmert"),fsr=o(" \u2014 "),$V=a("a"),gsr=o("TFLxmertForPreTraining"),hsr=o(" (LXMERT model)"),usr=l(),PM=a("li"),Dpe=a("strong"),psr=o("mobilebert"),_sr=o(" \u2014 "),IV=a("a"),bsr=o("TFMobileBertForPreTraining"),vsr=o(" (MobileBERT model)"),Fsr=l(),$M=a("li"),Gpe=a("strong"),Tsr=o("mpnet"),Msr=o(" \u2014 "),qV=a("a"),Esr=o("TFMPNetForMaskedLM"),Csr=o(" (MPNet model)"),wsr=l(),IM=a("li"),Ope=a("strong"),Asr=o("openai-gpt"),ysr=o(" \u2014 "),NV=a("a"),Lsr=o("TFOpenAIGPTLMHeadModel"),xsr=o(" (OpenAI GPT model)"),ksr=l(),qM=a("li"),Vpe=a("strong"),Ssr=o("roberta"),Rsr=o(" \u2014 "),jV=a("a"),Bsr=o("TFRobertaForMaskedLM"),Psr=o(" (RoBERTa model)"),$sr=l(),NM=a("li"),Xpe=a("strong"),Isr=o("t5"),qsr=o(" \u2014 "),DV=a("a"),Nsr=o("TFT5ForConditionalGeneration"),jsr=o(" (T5 model)"),Dsr=l(),jM=a("li"),zpe=a("strong"),Gsr=o("tapas"),Osr=o(" \u2014 "),GV=a("a"),Vsr=o("TFTapasForMaskedLM"),Xsr=o(" (TAPAS model)"),zsr=l(),DM=a("li"),Qpe=a("strong"),Qsr=o("transfo-xl"),Wsr=o(" \u2014 "),OV=a("a"),Hsr=o("TFTransfoXLLMHeadModel"),Usr=o(" (Transformer-XL model)"),Jsr=l(),GM=a("li"),Wpe=a("strong"),Ysr=o("vit_mae"),Ksr=o(" \u2014 "),VV=a("a"),Zsr=o("TFViTMAEForPreTraining"),elr=o(" (ViTMAE model)"),olr=l(),OM=a("li"),Hpe=a("strong"),rlr=o("xlm"),tlr=o(" \u2014 "),XV=a("a"),alr=o("TFXLMWithLMHeadModel"),nlr=o(" (XLM model)"),slr=l(),VM=a("li"),Upe=a("strong"),llr=o("xlm-roberta"),ilr=o(" \u2014 "),zV=a("a"),dlr=o("TFXLMRobertaForMaskedLM"),clr=o(" (XLM-RoBERTa model)"),mlr=l(),XM=a("li"),Jpe=a("strong"),flr=o("xlnet"),glr=o(" \u2014 "),QV=a("a"),hlr=o("TFXLNetLMHeadModel"),ulr=o(" (XLNet model)"),plr=l(),Ype=a("p"),_lr=o("Examples:"),blr=l(),m(My.$$.fragment),QBe=l(),Tc=a("h2"),zM=a("a"),Kpe=a("span"),m(Ey.$$.fragment),vlr=l(),Zpe=a("span"),Flr=o("TFAutoModelForCausalLM"),WBe=l(),Tr=a("div"),m(Cy.$$.fragment),Tlr=l(),Mc=a("p"),Mlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=a("a"),Elr=o("from_pretrained()"),Clr=o(" class method or the "),HV=a("a"),wlr=o("from_config()"),Alr=o(` class
method.`),ylr=l(),wy=a("p"),Llr=o("This class cannot be instantiated directly using "),e_e=a("code"),xlr=o("__init__()"),klr=o(" (throws an error)."),Slr=l(),ut=a("div"),m(Ay.$$.fragment),Rlr=l(),o_e=a("p"),Blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Plr=l(),Ec=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Ilr=o("not"),qlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Nlr=o("from_pretrained()"),jlr=o(" to load the model weights."),Dlr=l(),t_e=a("p"),Glr=o("Examples:"),Olr=l(),m(yy.$$.fragment),Vlr=l(),po=a("div"),m(Ly.$$.fragment),Xlr=l(),a_e=a("p"),zlr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qlr=l(),vn=a("p"),Wlr=o("The model class to instantiate is selected based on the "),n_e=a("code"),Hlr=o("model_type"),Ulr=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),Jlr=o("pretrained_model_name_or_path"),Ylr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(":"),eir=l(),me=a("ul"),QM=a("li"),i_e=a("strong"),oir=o("bert"),rir=o(" \u2014 "),JV=a("a"),tir=o("TFBertLMHeadModel"),air=o(" (BERT model)"),nir=l(),WM=a("li"),d_e=a("strong"),sir=o("camembert"),lir=o(" \u2014 "),YV=a("a"),iir=o("TFCamembertForCausalLM"),dir=o(" (CamemBERT model)"),cir=l(),HM=a("li"),c_e=a("strong"),mir=o("ctrl"),fir=o(" \u2014 "),KV=a("a"),gir=o("TFCTRLLMHeadModel"),hir=o(" (CTRL model)"),uir=l(),UM=a("li"),m_e=a("strong"),pir=o("gpt2"),_ir=o(" \u2014 "),ZV=a("a"),bir=o("TFGPT2LMHeadModel"),vir=o(" (OpenAI GPT-2 model)"),Fir=l(),JM=a("li"),f_e=a("strong"),Tir=o("gptj"),Mir=o(" \u2014 "),eX=a("a"),Eir=o("TFGPTJForCausalLM"),Cir=o(" (GPT-J model)"),wir=l(),YM=a("li"),g_e=a("strong"),Air=o("openai-gpt"),yir=o(" \u2014 "),oX=a("a"),Lir=o("TFOpenAIGPTLMHeadModel"),xir=o(" (OpenAI GPT model)"),kir=l(),KM=a("li"),h_e=a("strong"),Sir=o("rembert"),Rir=o(" \u2014 "),rX=a("a"),Bir=o("TFRemBertForCausalLM"),Pir=o(" (RemBERT model)"),$ir=l(),ZM=a("li"),u_e=a("strong"),Iir=o("roberta"),qir=o(" \u2014 "),tX=a("a"),Nir=o("TFRobertaForCausalLM"),jir=o(" (RoBERTa model)"),Dir=l(),e4=a("li"),p_e=a("strong"),Gir=o("roformer"),Oir=o(" \u2014 "),aX=a("a"),Vir=o("TFRoFormerForCausalLM"),Xir=o(" (RoFormer model)"),zir=l(),o4=a("li"),__e=a("strong"),Qir=o("transfo-xl"),Wir=o(" \u2014 "),nX=a("a"),Hir=o("TFTransfoXLLMHeadModel"),Uir=o(" (Transformer-XL model)"),Jir=l(),r4=a("li"),b_e=a("strong"),Yir=o("xlm"),Kir=o(" \u2014 "),sX=a("a"),Zir=o("TFXLMWithLMHeadModel"),edr=o(" (XLM model)"),odr=l(),t4=a("li"),v_e=a("strong"),rdr=o("xlnet"),tdr=o(" \u2014 "),lX=a("a"),adr=o("TFXLNetLMHeadModel"),ndr=o(" (XLNet model)"),sdr=l(),F_e=a("p"),ldr=o("Examples:"),idr=l(),m(xy.$$.fragment),HBe=l(),Cc=a("h2"),a4=a("a"),T_e=a("span"),m(ky.$$.fragment),ddr=l(),M_e=a("span"),cdr=o("TFAutoModelForImageClassification"),UBe=l(),Mr=a("div"),m(Sy.$$.fragment),mdr=l(),wc=a("p"),fdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),gdr=o("from_pretrained()"),hdr=o(" class method or the "),dX=a("a"),udr=o("from_config()"),pdr=o(` class
method.`),_dr=l(),Ry=a("p"),bdr=o("This class cannot be instantiated directly using "),E_e=a("code"),vdr=o("__init__()"),Fdr=o(" (throws an error)."),Tdr=l(),pt=a("div"),m(By.$$.fragment),Mdr=l(),C_e=a("p"),Edr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cdr=l(),Ac=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),Adr=o("not"),ydr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),Ldr=o("from_pretrained()"),xdr=o(" to load the model weights."),kdr=l(),A_e=a("p"),Sdr=o("Examples:"),Rdr=l(),m(Py.$$.fragment),Bdr=l(),_o=a("div"),m($y.$$.fragment),Pdr=l(),y_e=a("p"),$dr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Idr=l(),Fn=a("p"),qdr=o("The model class to instantiate is selected based on the "),L_e=a("code"),Ndr=o("model_type"),jdr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(":"),Xdr=l(),Iy=a("ul"),n4=a("li"),S_e=a("strong"),zdr=o("convnext"),Qdr=o(" \u2014 "),mX=a("a"),Wdr=o("TFConvNextForImageClassification"),Hdr=o(" (ConvNext model)"),Udr=l(),s4=a("li"),R_e=a("strong"),Jdr=o("vit"),Ydr=o(" \u2014 "),fX=a("a"),Kdr=o("TFViTForImageClassification"),Zdr=o(" (ViT model)"),ecr=l(),B_e=a("p"),ocr=o("Examples:"),rcr=l(),m(qy.$$.fragment),JBe=l(),yc=a("h2"),l4=a("a"),P_e=a("span"),m(Ny.$$.fragment),tcr=l(),$_e=a("span"),acr=o("TFAutoModelForMaskedLM"),YBe=l(),Er=a("div"),m(jy.$$.fragment),ncr=l(),Lc=a("p"),scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=a("a"),lcr=o("from_pretrained()"),icr=o(" class method or the "),hX=a("a"),dcr=o("from_config()"),ccr=o(` class
method.`),mcr=l(),Dy=a("p"),fcr=o("This class cannot be instantiated directly using "),I_e=a("code"),gcr=o("__init__()"),hcr=o(" (throws an error)."),ucr=l(),_t=a("div"),m(Gy.$$.fragment),pcr=l(),q_e=a("p"),_cr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),bcr=l(),xc=a("p"),vcr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),Fcr=o("not"),Tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" to load the model weights."),Ccr=l(),j_e=a("p"),wcr=o("Examples:"),Acr=l(),m(Oy.$$.fragment),ycr=l(),bo=a("div"),m(Vy.$$.fragment),Lcr=l(),D_e=a("p"),xcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kcr=l(),Tn=a("p"),Scr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Rcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Pcr=o("pretrained_model_name_or_path"),$cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),Icr=o("pretrained_model_name_or_path"),qcr=o(":"),Ncr=l(),J=a("ul"),i4=a("li"),X_e=a("strong"),jcr=o("albert"),Dcr=o(" \u2014 "),pX=a("a"),Gcr=o("TFAlbertForMaskedLM"),Ocr=o(" (ALBERT model)"),Vcr=l(),d4=a("li"),z_e=a("strong"),Xcr=o("bert"),zcr=o(" \u2014 "),_X=a("a"),Qcr=o("TFBertForMaskedLM"),Wcr=o(" (BERT model)"),Hcr=l(),c4=a("li"),Q_e=a("strong"),Ucr=o("camembert"),Jcr=o(" \u2014 "),bX=a("a"),Ycr=o("TFCamembertForMaskedLM"),Kcr=o(" (CamemBERT model)"),Zcr=l(),m4=a("li"),W_e=a("strong"),emr=o("convbert"),omr=o(" \u2014 "),vX=a("a"),rmr=o("TFConvBertForMaskedLM"),tmr=o(" (ConvBERT model)"),amr=l(),f4=a("li"),H_e=a("strong"),nmr=o("deberta"),smr=o(" \u2014 "),FX=a("a"),lmr=o("TFDebertaForMaskedLM"),imr=o(" (DeBERTa model)"),dmr=l(),g4=a("li"),U_e=a("strong"),cmr=o("deberta-v2"),mmr=o(" \u2014 "),TX=a("a"),fmr=o("TFDebertaV2ForMaskedLM"),gmr=o(" (DeBERTa-v2 model)"),hmr=l(),h4=a("li"),J_e=a("strong"),umr=o("distilbert"),pmr=o(" \u2014 "),MX=a("a"),_mr=o("TFDistilBertForMaskedLM"),bmr=o(" (DistilBERT model)"),vmr=l(),u4=a("li"),Y_e=a("strong"),Fmr=o("electra"),Tmr=o(" \u2014 "),EX=a("a"),Mmr=o("TFElectraForMaskedLM"),Emr=o(" (ELECTRA model)"),Cmr=l(),p4=a("li"),K_e=a("strong"),wmr=o("flaubert"),Amr=o(" \u2014 "),CX=a("a"),ymr=o("TFFlaubertWithLMHeadModel"),Lmr=o(" (FlauBERT model)"),xmr=l(),_4=a("li"),Z_e=a("strong"),kmr=o("funnel"),Smr=o(" \u2014 "),wX=a("a"),Rmr=o("TFFunnelForMaskedLM"),Bmr=o(" (Funnel Transformer model)"),Pmr=l(),b4=a("li"),ebe=a("strong"),$mr=o("layoutlm"),Imr=o(" \u2014 "),AX=a("a"),qmr=o("TFLayoutLMForMaskedLM"),Nmr=o(" (LayoutLM model)"),jmr=l(),v4=a("li"),obe=a("strong"),Dmr=o("longformer"),Gmr=o(" \u2014 "),yX=a("a"),Omr=o("TFLongformerForMaskedLM"),Vmr=o(" (Longformer model)"),Xmr=l(),F4=a("li"),rbe=a("strong"),zmr=o("mobilebert"),Qmr=o(" \u2014 "),LX=a("a"),Wmr=o("TFMobileBertForMaskedLM"),Hmr=o(" (MobileBERT model)"),Umr=l(),T4=a("li"),tbe=a("strong"),Jmr=o("mpnet"),Ymr=o(" \u2014 "),xX=a("a"),Kmr=o("TFMPNetForMaskedLM"),Zmr=o(" (MPNet model)"),efr=l(),M4=a("li"),abe=a("strong"),ofr=o("rembert"),rfr=o(" \u2014 "),kX=a("a"),tfr=o("TFRemBertForMaskedLM"),afr=o(" (RemBERT model)"),nfr=l(),E4=a("li"),nbe=a("strong"),sfr=o("roberta"),lfr=o(" \u2014 "),SX=a("a"),ifr=o("TFRobertaForMaskedLM"),dfr=o(" (RoBERTa model)"),cfr=l(),C4=a("li"),sbe=a("strong"),mfr=o("roformer"),ffr=o(" \u2014 "),RX=a("a"),gfr=o("TFRoFormerForMaskedLM"),hfr=o(" (RoFormer model)"),ufr=l(),w4=a("li"),lbe=a("strong"),pfr=o("tapas"),_fr=o(" \u2014 "),BX=a("a"),bfr=o("TFTapasForMaskedLM"),vfr=o(" (TAPAS model)"),Ffr=l(),A4=a("li"),ibe=a("strong"),Tfr=o("xlm"),Mfr=o(" \u2014 "),PX=a("a"),Efr=o("TFXLMWithLMHeadModel"),Cfr=o(" (XLM model)"),wfr=l(),y4=a("li"),dbe=a("strong"),Afr=o("xlm-roberta"),yfr=o(" \u2014 "),$X=a("a"),Lfr=o("TFXLMRobertaForMaskedLM"),xfr=o(" (XLM-RoBERTa model)"),kfr=l(),cbe=a("p"),Sfr=o("Examples:"),Rfr=l(),m(Xy.$$.fragment),KBe=l(),kc=a("h2"),L4=a("a"),mbe=a("span"),m(zy.$$.fragment),Bfr=l(),fbe=a("span"),Pfr=o("TFAutoModelForSeq2SeqLM"),ZBe=l(),Cr=a("div"),m(Qy.$$.fragment),$fr=l(),Sc=a("p"),Ifr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),qfr=o("from_pretrained()"),Nfr=o(" class method or the "),qX=a("a"),jfr=o("from_config()"),Dfr=o(` class
method.`),Gfr=l(),Wy=a("p"),Ofr=o("This class cannot be instantiated directly using "),gbe=a("code"),Vfr=o("__init__()"),Xfr=o(" (throws an error)."),zfr=l(),bt=a("div"),m(Hy.$$.fragment),Qfr=l(),hbe=a("p"),Wfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hfr=l(),Rc=a("p"),Ufr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),Jfr=o("not"),Yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),Kfr=o("from_pretrained()"),Zfr=o(" to load the model weights."),egr=l(),pbe=a("p"),ogr=o("Examples:"),rgr=l(),m(Uy.$$.fragment),tgr=l(),vo=a("div"),m(Jy.$$.fragment),agr=l(),_be=a("p"),ngr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sgr=l(),Mn=a("p"),lgr=o("The model class to instantiate is selected based on the "),bbe=a("code"),igr=o("model_type"),dgr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),cgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),fgr=o("pretrained_model_name_or_path"),ggr=o(":"),hgr=l(),be=a("ul"),x4=a("li"),Tbe=a("strong"),ugr=o("bart"),pgr=o(" \u2014 "),jX=a("a"),_gr=o("TFBartForConditionalGeneration"),bgr=o(" (BART model)"),vgr=l(),k4=a("li"),Mbe=a("strong"),Fgr=o("blenderbot"),Tgr=o(" \u2014 "),DX=a("a"),Mgr=o("TFBlenderbotForConditionalGeneration"),Egr=o(" (Blenderbot model)"),Cgr=l(),S4=a("li"),Ebe=a("strong"),wgr=o("blenderbot-small"),Agr=o(" \u2014 "),GX=a("a"),ygr=o("TFBlenderbotSmallForConditionalGeneration"),Lgr=o(" (BlenderbotSmall model)"),xgr=l(),R4=a("li"),Cbe=a("strong"),kgr=o("encoder-decoder"),Sgr=o(" \u2014 "),OX=a("a"),Rgr=o("TFEncoderDecoderModel"),Bgr=o(" (Encoder decoder model)"),Pgr=l(),B4=a("li"),wbe=a("strong"),$gr=o("led"),Igr=o(" \u2014 "),VX=a("a"),qgr=o("TFLEDForConditionalGeneration"),Ngr=o(" (LED model)"),jgr=l(),P4=a("li"),Abe=a("strong"),Dgr=o("marian"),Ggr=o(" \u2014 "),XX=a("a"),Ogr=o("TFMarianMTModel"),Vgr=o(" (Marian model)"),Xgr=l(),$4=a("li"),ybe=a("strong"),zgr=o("mbart"),Qgr=o(" \u2014 "),zX=a("a"),Wgr=o("TFMBartForConditionalGeneration"),Hgr=o(" (mBART model)"),Ugr=l(),I4=a("li"),Lbe=a("strong"),Jgr=o("mt5"),Ygr=o(" \u2014 "),QX=a("a"),Kgr=o("TFMT5ForConditionalGeneration"),Zgr=o(" (mT5 model)"),ehr=l(),q4=a("li"),xbe=a("strong"),ohr=o("pegasus"),rhr=o(" \u2014 "),WX=a("a"),thr=o("TFPegasusForConditionalGeneration"),ahr=o(" (Pegasus model)"),nhr=l(),N4=a("li"),kbe=a("strong"),shr=o("t5"),lhr=o(" \u2014 "),HX=a("a"),ihr=o("TFT5ForConditionalGeneration"),dhr=o(" (T5 model)"),chr=l(),Sbe=a("p"),mhr=o("Examples:"),fhr=l(),m(Yy.$$.fragment),ePe=l(),Bc=a("h2"),j4=a("a"),Rbe=a("span"),m(Ky.$$.fragment),ghr=l(),Bbe=a("span"),hhr=o("TFAutoModelForSequenceClassification"),oPe=l(),wr=a("div"),m(Zy.$$.fragment),uhr=l(),Pc=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=a("a"),_hr=o("from_pretrained()"),bhr=o(" class method or the "),JX=a("a"),vhr=o("from_config()"),Fhr=o(` class
method.`),Thr=l(),e8=a("p"),Mhr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Ehr=o("__init__()"),Chr=o(" (throws an error)."),whr=l(),vt=a("div"),m(o8.$$.fragment),Ahr=l(),$be=a("p"),yhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lhr=l(),$c=a("p"),xhr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Rhr=o("from_pretrained()"),Bhr=o(" to load the model weights."),Phr=l(),qbe=a("p"),$hr=o("Examples:"),Ihr=l(),m(r8.$$.fragment),qhr=l(),Fo=a("div"),m(t8.$$.fragment),Nhr=l(),Nbe=a("p"),jhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dhr=l(),En=a("p"),Ghr=o("The model class to instantiate is selected based on the "),jbe=a("code"),Ohr=o("model_type"),Vhr=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),Xhr=o("pretrained_model_name_or_path"),zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),Qhr=o("pretrained_model_name_or_path"),Whr=o(":"),Hhr=l(),V=a("ul"),D4=a("li"),Obe=a("strong"),Uhr=o("albert"),Jhr=o(" \u2014 "),KX=a("a"),Yhr=o("TFAlbertForSequenceClassification"),Khr=o(" (ALBERT model)"),Zhr=l(),G4=a("li"),Vbe=a("strong"),eur=o("bert"),our=o(" \u2014 "),ZX=a("a"),rur=o("TFBertForSequenceClassification"),tur=o(" (BERT model)"),aur=l(),O4=a("li"),Xbe=a("strong"),nur=o("camembert"),sur=o(" \u2014 "),ez=a("a"),lur=o("TFCamembertForSequenceClassification"),iur=o(" (CamemBERT model)"),dur=l(),V4=a("li"),zbe=a("strong"),cur=o("convbert"),mur=o(" \u2014 "),oz=a("a"),fur=o("TFConvBertForSequenceClassification"),gur=o(" (ConvBERT model)"),hur=l(),X4=a("li"),Qbe=a("strong"),uur=o("ctrl"),pur=o(" \u2014 "),rz=a("a"),_ur=o("TFCTRLForSequenceClassification"),bur=o(" (CTRL model)"),vur=l(),z4=a("li"),Wbe=a("strong"),Fur=o("deberta"),Tur=o(" \u2014 "),tz=a("a"),Mur=o("TFDebertaForSequenceClassification"),Eur=o(" (DeBERTa model)"),Cur=l(),Q4=a("li"),Hbe=a("strong"),wur=o("deberta-v2"),Aur=o(" \u2014 "),az=a("a"),yur=o("TFDebertaV2ForSequenceClassification"),Lur=o(" (DeBERTa-v2 model)"),xur=l(),W4=a("li"),Ube=a("strong"),kur=o("distilbert"),Sur=o(" \u2014 "),nz=a("a"),Rur=o("TFDistilBertForSequenceClassification"),Bur=o(" (DistilBERT model)"),Pur=l(),H4=a("li"),Jbe=a("strong"),$ur=o("electra"),Iur=o(" \u2014 "),sz=a("a"),qur=o("TFElectraForSequenceClassification"),Nur=o(" (ELECTRA model)"),jur=l(),U4=a("li"),Ybe=a("strong"),Dur=o("flaubert"),Gur=o(" \u2014 "),lz=a("a"),Our=o("TFFlaubertForSequenceClassification"),Vur=o(" (FlauBERT model)"),Xur=l(),J4=a("li"),Kbe=a("strong"),zur=o("funnel"),Qur=o(" \u2014 "),iz=a("a"),Wur=o("TFFunnelForSequenceClassification"),Hur=o(" (Funnel Transformer model)"),Uur=l(),Y4=a("li"),Zbe=a("strong"),Jur=o("gpt2"),Yur=o(" \u2014 "),dz=a("a"),Kur=o("TFGPT2ForSequenceClassification"),Zur=o(" (OpenAI GPT-2 model)"),epr=l(),K4=a("li"),e2e=a("strong"),opr=o("gptj"),rpr=o(" \u2014 "),cz=a("a"),tpr=o("TFGPTJForSequenceClassification"),apr=o(" (GPT-J model)"),npr=l(),Z4=a("li"),o2e=a("strong"),spr=o("layoutlm"),lpr=o(" \u2014 "),mz=a("a"),ipr=o("TFLayoutLMForSequenceClassification"),dpr=o(" (LayoutLM model)"),cpr=l(),eE=a("li"),r2e=a("strong"),mpr=o("longformer"),fpr=o(" \u2014 "),fz=a("a"),gpr=o("TFLongformerForSequenceClassification"),hpr=o(" (Longformer model)"),upr=l(),oE=a("li"),t2e=a("strong"),ppr=o("mobilebert"),_pr=o(" \u2014 "),gz=a("a"),bpr=o("TFMobileBertForSequenceClassification"),vpr=o(" (MobileBERT model)"),Fpr=l(),rE=a("li"),a2e=a("strong"),Tpr=o("mpnet"),Mpr=o(" \u2014 "),hz=a("a"),Epr=o("TFMPNetForSequenceClassification"),Cpr=o(" (MPNet model)"),wpr=l(),tE=a("li"),n2e=a("strong"),Apr=o("openai-gpt"),ypr=o(" \u2014 "),uz=a("a"),Lpr=o("TFOpenAIGPTForSequenceClassification"),xpr=o(" (OpenAI GPT model)"),kpr=l(),aE=a("li"),s2e=a("strong"),Spr=o("rembert"),Rpr=o(" \u2014 "),pz=a("a"),Bpr=o("TFRemBertForSequenceClassification"),Ppr=o(" (RemBERT model)"),$pr=l(),nE=a("li"),l2e=a("strong"),Ipr=o("roberta"),qpr=o(" \u2014 "),_z=a("a"),Npr=o("TFRobertaForSequenceClassification"),jpr=o(" (RoBERTa model)"),Dpr=l(),sE=a("li"),i2e=a("strong"),Gpr=o("roformer"),Opr=o(" \u2014 "),bz=a("a"),Vpr=o("TFRoFormerForSequenceClassification"),Xpr=o(" (RoFormer model)"),zpr=l(),lE=a("li"),d2e=a("strong"),Qpr=o("tapas"),Wpr=o(" \u2014 "),vz=a("a"),Hpr=o("TFTapasForSequenceClassification"),Upr=o(" (TAPAS model)"),Jpr=l(),iE=a("li"),c2e=a("strong"),Ypr=o("transfo-xl"),Kpr=o(" \u2014 "),Fz=a("a"),Zpr=o("TFTransfoXLForSequenceClassification"),e_r=o(" (Transformer-XL model)"),o_r=l(),dE=a("li"),m2e=a("strong"),r_r=o("xlm"),t_r=o(" \u2014 "),Tz=a("a"),a_r=o("TFXLMForSequenceClassification"),n_r=o(" (XLM model)"),s_r=l(),cE=a("li"),f2e=a("strong"),l_r=o("xlm-roberta"),i_r=o(" \u2014 "),Mz=a("a"),d_r=o("TFXLMRobertaForSequenceClassification"),c_r=o(" (XLM-RoBERTa model)"),m_r=l(),mE=a("li"),g2e=a("strong"),f_r=o("xlnet"),g_r=o(" \u2014 "),Ez=a("a"),h_r=o("TFXLNetForSequenceClassification"),u_r=o(" (XLNet model)"),p_r=l(),h2e=a("p"),__r=o("Examples:"),b_r=l(),m(a8.$$.fragment),rPe=l(),Ic=a("h2"),fE=a("a"),u2e=a("span"),m(n8.$$.fragment),v_r=l(),p2e=a("span"),F_r=o("TFAutoModelForMultipleChoice"),tPe=l(),Ar=a("div"),m(s8.$$.fragment),T_r=l(),qc=a("p"),M_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=a("a"),E_r=o("from_pretrained()"),C_r=o(" class method or the "),wz=a("a"),w_r=o("from_config()"),A_r=o(` class
method.`),y_r=l(),l8=a("p"),L_r=o("This class cannot be instantiated directly using "),_2e=a("code"),x_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),Ft=a("div"),m(i8.$$.fragment),R_r=l(),b2e=a("p"),B_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P_r=l(),Nc=a("p"),$_r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),I_r=o("not"),q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),N_r=o("from_pretrained()"),j_r=o(" to load the model weights."),D_r=l(),F2e=a("p"),G_r=o("Examples:"),O_r=l(),m(d8.$$.fragment),V_r=l(),To=a("div"),m(c8.$$.fragment),X_r=l(),T2e=a("p"),z_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q_r=l(),Cn=a("p"),W_r=o("The model class to instantiate is selected based on the "),M2e=a("code"),H_r=o("model_type"),U_r=o(` property of the config object (either
passed as an argument or loaded from `),E2e=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=a("code"),K_r=o("pretrained_model_name_or_path"),Z_r=o(":"),ebr=l(),se=a("ul"),gE=a("li"),w2e=a("strong"),obr=o("albert"),rbr=o(" \u2014 "),yz=a("a"),tbr=o("TFAlbertForMultipleChoice"),abr=o(" (ALBERT model)"),nbr=l(),hE=a("li"),A2e=a("strong"),sbr=o("bert"),lbr=o(" \u2014 "),Lz=a("a"),ibr=o("TFBertForMultipleChoice"),dbr=o(" (BERT model)"),cbr=l(),uE=a("li"),y2e=a("strong"),mbr=o("camembert"),fbr=o(" \u2014 "),xz=a("a"),gbr=o("TFCamembertForMultipleChoice"),hbr=o(" (CamemBERT model)"),ubr=l(),pE=a("li"),L2e=a("strong"),pbr=o("convbert"),_br=o(" \u2014 "),kz=a("a"),bbr=o("TFConvBertForMultipleChoice"),vbr=o(" (ConvBERT model)"),Fbr=l(),_E=a("li"),x2e=a("strong"),Tbr=o("distilbert"),Mbr=o(" \u2014 "),Sz=a("a"),Ebr=o("TFDistilBertForMultipleChoice"),Cbr=o(" (DistilBERT model)"),wbr=l(),bE=a("li"),k2e=a("strong"),Abr=o("electra"),ybr=o(" \u2014 "),Rz=a("a"),Lbr=o("TFElectraForMultipleChoice"),xbr=o(" (ELECTRA model)"),kbr=l(),vE=a("li"),S2e=a("strong"),Sbr=o("flaubert"),Rbr=o(" \u2014 "),Bz=a("a"),Bbr=o("TFFlaubertForMultipleChoice"),Pbr=o(" (FlauBERT model)"),$br=l(),FE=a("li"),R2e=a("strong"),Ibr=o("funnel"),qbr=o(" \u2014 "),Pz=a("a"),Nbr=o("TFFunnelForMultipleChoice"),jbr=o(" (Funnel Transformer model)"),Dbr=l(),TE=a("li"),B2e=a("strong"),Gbr=o("longformer"),Obr=o(" \u2014 "),$z=a("a"),Vbr=o("TFLongformerForMultipleChoice"),Xbr=o(" (Longformer model)"),zbr=l(),ME=a("li"),P2e=a("strong"),Qbr=o("mobilebert"),Wbr=o(" \u2014 "),Iz=a("a"),Hbr=o("TFMobileBertForMultipleChoice"),Ubr=o(" (MobileBERT model)"),Jbr=l(),EE=a("li"),$2e=a("strong"),Ybr=o("mpnet"),Kbr=o(" \u2014 "),qz=a("a"),Zbr=o("TFMPNetForMultipleChoice"),e2r=o(" (MPNet model)"),o2r=l(),CE=a("li"),I2e=a("strong"),r2r=o("rembert"),t2r=o(" \u2014 "),Nz=a("a"),a2r=o("TFRemBertForMultipleChoice"),n2r=o(" (RemBERT model)"),s2r=l(),wE=a("li"),q2e=a("strong"),l2r=o("roberta"),i2r=o(" \u2014 "),jz=a("a"),d2r=o("TFRobertaForMultipleChoice"),c2r=o(" (RoBERTa model)"),m2r=l(),AE=a("li"),N2e=a("strong"),f2r=o("roformer"),g2r=o(" \u2014 "),Dz=a("a"),h2r=o("TFRoFormerForMultipleChoice"),u2r=o(" (RoFormer model)"),p2r=l(),yE=a("li"),j2e=a("strong"),_2r=o("xlm"),b2r=o(" \u2014 "),Gz=a("a"),v2r=o("TFXLMForMultipleChoice"),F2r=o(" (XLM model)"),T2r=l(),LE=a("li"),D2e=a("strong"),M2r=o("xlm-roberta"),E2r=o(" \u2014 "),Oz=a("a"),C2r=o("TFXLMRobertaForMultipleChoice"),w2r=o(" (XLM-RoBERTa model)"),A2r=l(),xE=a("li"),G2e=a("strong"),y2r=o("xlnet"),L2r=o(" \u2014 "),Vz=a("a"),x2r=o("TFXLNetForMultipleChoice"),k2r=o(" (XLNet model)"),S2r=l(),O2e=a("p"),R2r=o("Examples:"),B2r=l(),m(m8.$$.fragment),aPe=l(),jc=a("h2"),kE=a("a"),V2e=a("span"),m(f8.$$.fragment),P2r=l(),X2e=a("span"),$2r=o("TFAutoModelForTableQuestionAnswering"),nPe=l(),yr=a("div"),m(g8.$$.fragment),I2r=l(),Dc=a("p"),q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),N2r=o("from_pretrained()"),j2r=o(" class method or the "),zz=a("a"),D2r=o("from_config()"),G2r=o(` class
method.`),O2r=l(),h8=a("p"),V2r=o("This class cannot be instantiated directly using "),z2e=a("code"),X2r=o("__init__()"),z2r=o(" (throws an error)."),Q2r=l(),Tt=a("div"),m(u8.$$.fragment),W2r=l(),Q2e=a("p"),H2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U2r=l(),Gc=a("p"),J2r=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),Y2r=o("not"),K2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Z2r=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),H2e=a("p"),rvr=o("Examples:"),tvr=l(),m(p8.$$.fragment),avr=l(),Mo=a("div"),m(_8.$$.fragment),nvr=l(),U2e=a("p"),svr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),lvr=l(),wn=a("p"),ivr=o("The model class to instantiate is selected based on the "),J2e=a("code"),dvr=o("model_type"),cvr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),mvr=o("pretrained_model_name_or_path"),fvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),gvr=o("pretrained_model_name_or_path"),hvr=o(":"),uvr=l(),Z2e=a("ul"),SE=a("li"),eve=a("strong"),pvr=o("tapas"),_vr=o(" \u2014 "),Wz=a("a"),bvr=o("TFTapasForQuestionAnswering"),vvr=o(" (TAPAS model)"),Fvr=l(),ove=a("p"),Tvr=o("Examples:"),Mvr=l(),m(b8.$$.fragment),sPe=l(),Oc=a("h2"),RE=a("a"),rve=a("span"),m(v8.$$.fragment),Evr=l(),tve=a("span"),Cvr=o("TFAutoModelForTokenClassification"),lPe=l(),Lr=a("div"),m(F8.$$.fragment),wvr=l(),Vc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),Uz=a("a"),xvr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),T8=a("p"),Rvr=o("This class cannot be instantiated directly using "),ave=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),$vr=l(),Mt=a("div"),m(M8.$$.fragment),Ivr=l(),nve=a("p"),qvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nvr=l(),Xc=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),lve=a("p"),zvr=o("Examples:"),Qvr=l(),m(E8.$$.fragment),Wvr=l(),Eo=a("div"),m(C8.$$.fragment),Hvr=l(),ive=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Jvr=l(),An=a("p"),Yvr=o("The model class to instantiate is selected based on the "),dve=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),Y=a("ul"),BE=a("li"),fve=a("strong"),nFr=o("albert"),sFr=o(" \u2014 "),Yz=a("a"),lFr=o("TFAlbertForTokenClassification"),iFr=o(" (ALBERT model)"),dFr=l(),PE=a("li"),gve=a("strong"),cFr=o("bert"),mFr=o(" \u2014 "),Kz=a("a"),fFr=o("TFBertForTokenClassification"),gFr=o(" (BERT model)"),hFr=l(),$E=a("li"),hve=a("strong"),uFr=o("camembert"),pFr=o(" \u2014 "),Zz=a("a"),_Fr=o("TFCamembertForTokenClassification"),bFr=o(" (CamemBERT model)"),vFr=l(),IE=a("li"),uve=a("strong"),FFr=o("convbert"),TFr=o(" \u2014 "),eQ=a("a"),MFr=o("TFConvBertForTokenClassification"),EFr=o(" (ConvBERT model)"),CFr=l(),qE=a("li"),pve=a("strong"),wFr=o("deberta"),AFr=o(" \u2014 "),oQ=a("a"),yFr=o("TFDebertaForTokenClassification"),LFr=o(" (DeBERTa model)"),xFr=l(),NE=a("li"),_ve=a("strong"),kFr=o("deberta-v2"),SFr=o(" \u2014 "),rQ=a("a"),RFr=o("TFDebertaV2ForTokenClassification"),BFr=o(" (DeBERTa-v2 model)"),PFr=l(),jE=a("li"),bve=a("strong"),$Fr=o("distilbert"),IFr=o(" \u2014 "),tQ=a("a"),qFr=o("TFDistilBertForTokenClassification"),NFr=o(" (DistilBERT model)"),jFr=l(),DE=a("li"),vve=a("strong"),DFr=o("electra"),GFr=o(" \u2014 "),aQ=a("a"),OFr=o("TFElectraForTokenClassification"),VFr=o(" (ELECTRA model)"),XFr=l(),GE=a("li"),Fve=a("strong"),zFr=o("flaubert"),QFr=o(" \u2014 "),nQ=a("a"),WFr=o("TFFlaubertForTokenClassification"),HFr=o(" (FlauBERT model)"),UFr=l(),OE=a("li"),Tve=a("strong"),JFr=o("funnel"),YFr=o(" \u2014 "),sQ=a("a"),KFr=o("TFFunnelForTokenClassification"),ZFr=o(" (Funnel Transformer model)"),e1r=l(),VE=a("li"),Mve=a("strong"),o1r=o("layoutlm"),r1r=o(" \u2014 "),lQ=a("a"),t1r=o("TFLayoutLMForTokenClassification"),a1r=o(" (LayoutLM model)"),n1r=l(),XE=a("li"),Eve=a("strong"),s1r=o("longformer"),l1r=o(" \u2014 "),iQ=a("a"),i1r=o("TFLongformerForTokenClassification"),d1r=o(" (Longformer model)"),c1r=l(),zE=a("li"),Cve=a("strong"),m1r=o("mobilebert"),f1r=o(" \u2014 "),dQ=a("a"),g1r=o("TFMobileBertForTokenClassification"),h1r=o(" (MobileBERT model)"),u1r=l(),QE=a("li"),wve=a("strong"),p1r=o("mpnet"),_1r=o(" \u2014 "),cQ=a("a"),b1r=o("TFMPNetForTokenClassification"),v1r=o(" (MPNet model)"),F1r=l(),WE=a("li"),Ave=a("strong"),T1r=o("rembert"),M1r=o(" \u2014 "),mQ=a("a"),E1r=o("TFRemBertForTokenClassification"),C1r=o(" (RemBERT model)"),w1r=l(),HE=a("li"),yve=a("strong"),A1r=o("roberta"),y1r=o(" \u2014 "),fQ=a("a"),L1r=o("TFRobertaForTokenClassification"),x1r=o(" (RoBERTa model)"),k1r=l(),UE=a("li"),Lve=a("strong"),S1r=o("roformer"),R1r=o(" \u2014 "),gQ=a("a"),B1r=o("TFRoFormerForTokenClassification"),P1r=o(" (RoFormer model)"),$1r=l(),JE=a("li"),xve=a("strong"),I1r=o("xlm"),q1r=o(" \u2014 "),hQ=a("a"),N1r=o("TFXLMForTokenClassification"),j1r=o(" (XLM model)"),D1r=l(),YE=a("li"),kve=a("strong"),G1r=o("xlm-roberta"),O1r=o(" \u2014 "),uQ=a("a"),V1r=o("TFXLMRobertaForTokenClassification"),X1r=o(" (XLM-RoBERTa model)"),z1r=l(),KE=a("li"),Sve=a("strong"),Q1r=o("xlnet"),W1r=o(" \u2014 "),pQ=a("a"),H1r=o("TFXLNetForTokenClassification"),U1r=o(" (XLNet model)"),J1r=l(),Rve=a("p"),Y1r=o("Examples:"),K1r=l(),m(w8.$$.fragment),iPe=l(),zc=a("h2"),ZE=a("a"),Bve=a("span"),m(A8.$$.fragment),Z1r=l(),Pve=a("span"),eTr=o("TFAutoModelForQuestionAnswering"),dPe=l(),xr=a("div"),m(y8.$$.fragment),oTr=l(),Qc=a("p"),rTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Q=a("a"),tTr=o("from_pretrained()"),aTr=o(" class method or the "),bQ=a("a"),nTr=o("from_config()"),sTr=o(` class
method.`),lTr=l(),L8=a("p"),iTr=o("This class cannot be instantiated directly using "),$ve=a("code"),dTr=o("__init__()"),cTr=o(" (throws an error)."),mTr=l(),Et=a("div"),m(x8.$$.fragment),fTr=l(),Ive=a("p"),gTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hTr=l(),Wc=a("p"),uTr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),pTr=o("not"),_Tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),bTr=o("from_pretrained()"),vTr=o(" to load the model weights."),FTr=l(),Nve=a("p"),TTr=o("Examples:"),MTr=l(),m(k8.$$.fragment),ETr=l(),Co=a("div"),m(S8.$$.fragment),CTr=l(),jve=a("p"),wTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ATr=l(),yn=a("p"),yTr=o("The model class to instantiate is selected based on the "),Dve=a("code"),LTr=o("model_type"),xTr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),RTr=o("pretrained_model_name_or_path"),BTr=o(":"),PTr=l(),K=a("ul"),e5=a("li"),Vve=a("strong"),$Tr=o("albert"),ITr=o(" \u2014 "),FQ=a("a"),qTr=o("TFAlbertForQuestionAnswering"),NTr=o(" (ALBERT model)"),jTr=l(),o5=a("li"),Xve=a("strong"),DTr=o("bert"),GTr=o(" \u2014 "),TQ=a("a"),OTr=o("TFBertForQuestionAnswering"),VTr=o(" (BERT model)"),XTr=l(),r5=a("li"),zve=a("strong"),zTr=o("camembert"),QTr=o(" \u2014 "),MQ=a("a"),WTr=o("TFCamembertForQuestionAnswering"),HTr=o(" (CamemBERT model)"),UTr=l(),t5=a("li"),Qve=a("strong"),JTr=o("convbert"),YTr=o(" \u2014 "),EQ=a("a"),KTr=o("TFConvBertForQuestionAnswering"),ZTr=o(" (ConvBERT model)"),eMr=l(),a5=a("li"),Wve=a("strong"),oMr=o("deberta"),rMr=o(" \u2014 "),CQ=a("a"),tMr=o("TFDebertaForQuestionAnswering"),aMr=o(" (DeBERTa model)"),nMr=l(),n5=a("li"),Hve=a("strong"),sMr=o("deberta-v2"),lMr=o(" \u2014 "),wQ=a("a"),iMr=o("TFDebertaV2ForQuestionAnswering"),dMr=o(" (DeBERTa-v2 model)"),cMr=l(),s5=a("li"),Uve=a("strong"),mMr=o("distilbert"),fMr=o(" \u2014 "),AQ=a("a"),gMr=o("TFDistilBertForQuestionAnswering"),hMr=o(" (DistilBERT model)"),uMr=l(),l5=a("li"),Jve=a("strong"),pMr=o("electra"),_Mr=o(" \u2014 "),yQ=a("a"),bMr=o("TFElectraForQuestionAnswering"),vMr=o(" (ELECTRA model)"),FMr=l(),i5=a("li"),Yve=a("strong"),TMr=o("flaubert"),MMr=o(" \u2014 "),LQ=a("a"),EMr=o("TFFlaubertForQuestionAnsweringSimple"),CMr=o(" (FlauBERT model)"),wMr=l(),d5=a("li"),Kve=a("strong"),AMr=o("funnel"),yMr=o(" \u2014 "),xQ=a("a"),LMr=o("TFFunnelForQuestionAnswering"),xMr=o(" (Funnel Transformer model)"),kMr=l(),c5=a("li"),Zve=a("strong"),SMr=o("gptj"),RMr=o(" \u2014 "),kQ=a("a"),BMr=o("TFGPTJForQuestionAnswering"),PMr=o(" (GPT-J model)"),$Mr=l(),m5=a("li"),eFe=a("strong"),IMr=o("longformer"),qMr=o(" \u2014 "),SQ=a("a"),NMr=o("TFLongformerForQuestionAnswering"),jMr=o(" (Longformer model)"),DMr=l(),f5=a("li"),oFe=a("strong"),GMr=o("mobilebert"),OMr=o(" \u2014 "),RQ=a("a"),VMr=o("TFMobileBertForQuestionAnswering"),XMr=o(" (MobileBERT model)"),zMr=l(),g5=a("li"),rFe=a("strong"),QMr=o("mpnet"),WMr=o(" \u2014 "),BQ=a("a"),HMr=o("TFMPNetForQuestionAnswering"),UMr=o(" (MPNet model)"),JMr=l(),h5=a("li"),tFe=a("strong"),YMr=o("rembert"),KMr=o(" \u2014 "),PQ=a("a"),ZMr=o("TFRemBertForQuestionAnswering"),e4r=o(" (RemBERT model)"),o4r=l(),u5=a("li"),aFe=a("strong"),r4r=o("roberta"),t4r=o(" \u2014 "),$Q=a("a"),a4r=o("TFRobertaForQuestionAnswering"),n4r=o(" (RoBERTa model)"),s4r=l(),p5=a("li"),nFe=a("strong"),l4r=o("roformer"),i4r=o(" \u2014 "),IQ=a("a"),d4r=o("TFRoFormerForQuestionAnswering"),c4r=o(" (RoFormer model)"),m4r=l(),_5=a("li"),sFe=a("strong"),f4r=o("xlm"),g4r=o(" \u2014 "),qQ=a("a"),h4r=o("TFXLMForQuestionAnsweringSimple"),u4r=o(" (XLM model)"),p4r=l(),b5=a("li"),lFe=a("strong"),_4r=o("xlm-roberta"),b4r=o(" \u2014 "),NQ=a("a"),v4r=o("TFXLMRobertaForQuestionAnswering"),F4r=o(" (XLM-RoBERTa model)"),T4r=l(),v5=a("li"),iFe=a("strong"),M4r=o("xlnet"),E4r=o(" \u2014 "),jQ=a("a"),C4r=o("TFXLNetForQuestionAnsweringSimple"),w4r=o(" (XLNet model)"),A4r=l(),dFe=a("p"),y4r=o("Examples:"),L4r=l(),m(R8.$$.fragment),cPe=l(),Hc=a("h2"),F5=a("a"),cFe=a("span"),m(B8.$$.fragment),x4r=l(),mFe=a("span"),k4r=o("TFAutoModelForVision2Seq"),mPe=l(),kr=a("div"),m(P8.$$.fragment),S4r=l(),Uc=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),B4r=o("from_pretrained()"),P4r=o(" class method or the "),GQ=a("a"),$4r=o("from_config()"),I4r=o(` class
method.`),q4r=l(),$8=a("p"),N4r=o("This class cannot be instantiated directly using "),fFe=a("code"),j4r=o("__init__()"),D4r=o(" (throws an error)."),G4r=l(),Ct=a("div"),m(I8.$$.fragment),O4r=l(),gFe=a("p"),V4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X4r=l(),Jc=a("p"),z4r=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Q4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),H4r=o("from_pretrained()"),U4r=o(" to load the model weights."),J4r=l(),uFe=a("p"),Y4r=o("Examples:"),K4r=l(),m(q8.$$.fragment),Z4r=l(),wo=a("div"),m(N8.$$.fragment),eEr=l(),pFe=a("p"),oEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rEr=l(),Ln=a("p"),tEr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),FFe=a("ul"),T5=a("li"),TFe=a("strong"),mEr=o("vision-encoder-decoder"),fEr=o(" \u2014 "),VQ=a("a"),gEr=o("TFVisionEncoderDecoderModel"),hEr=o(" (Vision Encoder decoder model)"),uEr=l(),MFe=a("p"),pEr=o("Examples:"),_Er=l(),m(j8.$$.fragment),fPe=l(),Yc=a("h2"),M5=a("a"),EFe=a("span"),m(D8.$$.fragment),bEr=l(),CFe=a("span"),vEr=o("TFAutoModelForSpeechSeq2Seq"),gPe=l(),Sr=a("div"),m(G8.$$.fragment),FEr=l(),Kc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),zQ=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),O8=a("p"),yEr=o("This class cannot be instantiated directly using "),wFe=a("code"),LEr=o("__init__()"),xEr=o(" (throws an error)."),kEr=l(),wt=a("div"),m(V8.$$.fragment),SEr=l(),AFe=a("p"),REr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BEr=l(),Zc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),yFe=a("strong"),$Er=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),qEr=o("from_pretrained()"),NEr=o(" to load the model weights."),jEr=l(),LFe=a("p"),DEr=o("Examples:"),GEr=l(),m(X8.$$.fragment),OEr=l(),Ao=a("div"),m(z8.$$.fragment),VEr=l(),xFe=a("p"),XEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zEr=l(),xn=a("p"),QEr=o("The model class to instantiate is selected based on the "),kFe=a("code"),WEr=o("model_type"),HEr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),YEr=o("pretrained_model_name_or_path"),KEr=o(":"),ZEr=l(),BFe=a("ul"),E5=a("li"),PFe=a("strong"),e5r=o("speech_to_text"),o5r=o(" \u2014 "),WQ=a("a"),r5r=o("TFSpeech2TextForConditionalGeneration"),t5r=o(" (Speech2Text model)"),a5r=l(),$Fe=a("p"),n5r=o("Examples:"),s5r=l(),m(Q8.$$.fragment),hPe=l(),em=a("h2"),C5=a("a"),IFe=a("span"),m(W8.$$.fragment),l5r=l(),qFe=a("span"),i5r=o("FlaxAutoModel"),uPe=l(),Rr=a("div"),m(H8.$$.fragment),d5r=l(),om=a("p"),c5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=a("a"),m5r=o("from_pretrained()"),f5r=o(" class method or the "),UQ=a("a"),g5r=o("from_config()"),h5r=o(` class
method.`),u5r=l(),U8=a("p"),p5r=o("This class cannot be instantiated directly using "),NFe=a("code"),_5r=o("__init__()"),b5r=o(" (throws an error)."),v5r=l(),At=a("div"),m(J8.$$.fragment),F5r=l(),jFe=a("p"),T5r=o("Instantiates one of the base model classes of the library from a configuration."),M5r=l(),rm=a("p"),E5r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),C5r=o("not"),w5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),A5r=o("from_pretrained()"),y5r=o(" to load the model weights."),L5r=l(),GFe=a("p"),x5r=o("Examples:"),k5r=l(),m(Y8.$$.fragment),S5r=l(),yo=a("div"),m(K8.$$.fragment),R5r=l(),OFe=a("p"),B5r=o("Instantiate one of the base model classes of the library from a pretrained model."),P5r=l(),kn=a("p"),$5r=o("The model class to instantiate is selected based on the "),VFe=a("code"),I5r=o("model_type"),q5r=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),N5r=o("pretrained_model_name_or_path"),j5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(":"),O5r=l(),z=a("ul"),w5=a("li"),QFe=a("strong"),V5r=o("albert"),X5r=o(" \u2014 "),YQ=a("a"),z5r=o("FlaxAlbertModel"),Q5r=o(" (ALBERT model)"),W5r=l(),A5=a("li"),WFe=a("strong"),H5r=o("bart"),U5r=o(" \u2014 "),KQ=a("a"),J5r=o("FlaxBartModel"),Y5r=o(" (BART model)"),K5r=l(),y5=a("li"),HFe=a("strong"),Z5r=o("beit"),e3r=o(" \u2014 "),ZQ=a("a"),o3r=o("FlaxBeitModel"),r3r=o(" (BEiT model)"),t3r=l(),L5=a("li"),UFe=a("strong"),a3r=o("bert"),n3r=o(" \u2014 "),eW=a("a"),s3r=o("FlaxBertModel"),l3r=o(" (BERT model)"),i3r=l(),x5=a("li"),JFe=a("strong"),d3r=o("big_bird"),c3r=o(" \u2014 "),oW=a("a"),m3r=o("FlaxBigBirdModel"),f3r=o(" (BigBird model)"),g3r=l(),k5=a("li"),YFe=a("strong"),h3r=o("blenderbot"),u3r=o(" \u2014 "),rW=a("a"),p3r=o("FlaxBlenderbotModel"),_3r=o(" (Blenderbot model)"),b3r=l(),S5=a("li"),KFe=a("strong"),v3r=o("blenderbot-small"),F3r=o(" \u2014 "),tW=a("a"),T3r=o("FlaxBlenderbotSmallModel"),M3r=o(" (BlenderbotSmall model)"),E3r=l(),R5=a("li"),ZFe=a("strong"),C3r=o("clip"),w3r=o(" \u2014 "),aW=a("a"),A3r=o("FlaxCLIPModel"),y3r=o(" (CLIP model)"),L3r=l(),B5=a("li"),e1e=a("strong"),x3r=o("distilbert"),k3r=o(" \u2014 "),nW=a("a"),S3r=o("FlaxDistilBertModel"),R3r=o(" (DistilBERT model)"),B3r=l(),P5=a("li"),o1e=a("strong"),P3r=o("electra"),$3r=o(" \u2014 "),sW=a("a"),I3r=o("FlaxElectraModel"),q3r=o(" (ELECTRA model)"),N3r=l(),$5=a("li"),r1e=a("strong"),j3r=o("gpt2"),D3r=o(" \u2014 "),lW=a("a"),G3r=o("FlaxGPT2Model"),O3r=o(" (OpenAI GPT-2 model)"),V3r=l(),I5=a("li"),t1e=a("strong"),X3r=o("gpt_neo"),z3r=o(" \u2014 "),iW=a("a"),Q3r=o("FlaxGPTNeoModel"),W3r=o(" (GPT Neo model)"),H3r=l(),q5=a("li"),a1e=a("strong"),U3r=o("gptj"),J3r=o(" \u2014 "),dW=a("a"),Y3r=o("FlaxGPTJModel"),K3r=o(" (GPT-J model)"),Z3r=l(),N5=a("li"),n1e=a("strong"),eCr=o("marian"),oCr=o(" \u2014 "),cW=a("a"),rCr=o("FlaxMarianModel"),tCr=o(" (Marian model)"),aCr=l(),j5=a("li"),s1e=a("strong"),nCr=o("mbart"),sCr=o(" \u2014 "),mW=a("a"),lCr=o("FlaxMBartModel"),iCr=o(" (mBART model)"),dCr=l(),D5=a("li"),l1e=a("strong"),cCr=o("mt5"),mCr=o(" \u2014 "),fW=a("a"),fCr=o("FlaxMT5Model"),gCr=o(" (mT5 model)"),hCr=l(),G5=a("li"),i1e=a("strong"),uCr=o("pegasus"),pCr=o(" \u2014 "),gW=a("a"),_Cr=o("FlaxPegasusModel"),bCr=o(" (Pegasus model)"),vCr=l(),O5=a("li"),d1e=a("strong"),FCr=o("roberta"),TCr=o(" \u2014 "),hW=a("a"),MCr=o("FlaxRobertaModel"),ECr=o(" (RoBERTa model)"),CCr=l(),V5=a("li"),c1e=a("strong"),wCr=o("roformer"),ACr=o(" \u2014 "),uW=a("a"),yCr=o("FlaxRoFormerModel"),LCr=o(" (RoFormer model)"),xCr=l(),X5=a("li"),m1e=a("strong"),kCr=o("t5"),SCr=o(" \u2014 "),pW=a("a"),RCr=o("FlaxT5Model"),BCr=o(" (T5 model)"),PCr=l(),z5=a("li"),f1e=a("strong"),$Cr=o("vision-text-dual-encoder"),ICr=o(" \u2014 "),_W=a("a"),qCr=o("FlaxVisionTextDualEncoderModel"),NCr=o(" (VisionTextDualEncoder model)"),jCr=l(),Q5=a("li"),g1e=a("strong"),DCr=o("vit"),GCr=o(" \u2014 "),bW=a("a"),OCr=o("FlaxViTModel"),VCr=o(" (ViT model)"),XCr=l(),W5=a("li"),h1e=a("strong"),zCr=o("wav2vec2"),QCr=o(" \u2014 "),vW=a("a"),WCr=o("FlaxWav2Vec2Model"),HCr=o(" (Wav2Vec2 model)"),UCr=l(),H5=a("li"),u1e=a("strong"),JCr=o("xglm"),YCr=o(" \u2014 "),FW=a("a"),KCr=o("FlaxXGLMModel"),ZCr=o(" (XGLM model)"),ewr=l(),U5=a("li"),p1e=a("strong"),owr=o("xlm-roberta"),rwr=o(" \u2014 "),TW=a("a"),twr=o("FlaxXLMRobertaModel"),awr=o(" (XLM-RoBERTa model)"),nwr=l(),_1e=a("p"),swr=o("Examples:"),lwr=l(),m(Z8.$$.fragment),pPe=l(),tm=a("h2"),J5=a("a"),b1e=a("span"),m(eL.$$.fragment),iwr=l(),v1e=a("span"),dwr=o("FlaxAutoModelForCausalLM"),_Pe=l(),Br=a("div"),m(oL.$$.fragment),cwr=l(),am=a("p"),mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=a("a"),fwr=o("from_pretrained()"),gwr=o(" class method or the "),EW=a("a"),hwr=o("from_config()"),uwr=o(` class
method.`),pwr=l(),rL=a("p"),_wr=o("This class cannot be instantiated directly using "),F1e=a("code"),bwr=o("__init__()"),vwr=o(" (throws an error)."),Fwr=l(),yt=a("div"),m(tL.$$.fragment),Twr=l(),T1e=a("p"),Mwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ewr=l(),nm=a("p"),Cwr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),wwr=o("not"),Awr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),ywr=o("from_pretrained()"),Lwr=o(" to load the model weights."),xwr=l(),E1e=a("p"),kwr=o("Examples:"),Swr=l(),m(aL.$$.fragment),Rwr=l(),Lo=a("div"),m(nL.$$.fragment),Bwr=l(),C1e=a("p"),Pwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$wr=l(),Sn=a("p"),Iwr=o("The model class to instantiate is selected based on the "),w1e=a("code"),qwr=o("model_type"),Nwr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),jwr=o("pretrained_model_name_or_path"),Dwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(":"),Vwr=l(),ca=a("ul"),Y5=a("li"),L1e=a("strong"),Xwr=o("bart"),zwr=o(" \u2014 "),wW=a("a"),Qwr=o("FlaxBartForCausalLM"),Wwr=o(" (BART model)"),Hwr=l(),K5=a("li"),x1e=a("strong"),Uwr=o("gpt2"),Jwr=o(" \u2014 "),AW=a("a"),Ywr=o("FlaxGPT2LMHeadModel"),Kwr=o(" (OpenAI GPT-2 model)"),Zwr=l(),Z5=a("li"),k1e=a("strong"),e6r=o("gpt_neo"),o6r=o(" \u2014 "),yW=a("a"),r6r=o("FlaxGPTNeoForCausalLM"),t6r=o(" (GPT Neo model)"),a6r=l(),e3=a("li"),S1e=a("strong"),n6r=o("gptj"),s6r=o(" \u2014 "),LW=a("a"),l6r=o("FlaxGPTJForCausalLM"),i6r=o(" (GPT-J model)"),d6r=l(),o3=a("li"),R1e=a("strong"),c6r=o("xglm"),m6r=o(" \u2014 "),xW=a("a"),f6r=o("FlaxXGLMForCausalLM"),g6r=o(" (XGLM model)"),h6r=l(),B1e=a("p"),u6r=o("Examples:"),p6r=l(),m(sL.$$.fragment),bPe=l(),sm=a("h2"),r3=a("a"),P1e=a("span"),m(lL.$$.fragment),_6r=l(),$1e=a("span"),b6r=o("FlaxAutoModelForPreTraining"),vPe=l(),Pr=a("div"),m(iL.$$.fragment),v6r=l(),lm=a("p"),F6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=a("a"),T6r=o("from_pretrained()"),M6r=o(" class method or the "),SW=a("a"),E6r=o("from_config()"),C6r=o(` class
method.`),w6r=l(),dL=a("p"),A6r=o("This class cannot be instantiated directly using "),I1e=a("code"),y6r=o("__init__()"),L6r=o(" (throws an error)."),x6r=l(),Lt=a("div"),m(cL.$$.fragment),k6r=l(),q1e=a("p"),S6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R6r=l(),im=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),P6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),I6r=o("from_pretrained()"),q6r=o(" to load the model weights."),N6r=l(),j1e=a("p"),j6r=o("Examples:"),D6r=l(),m(mL.$$.fragment),G6r=l(),xo=a("div"),m(fL.$$.fragment),O6r=l(),D1e=a("p"),V6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X6r=l(),Rn=a("p"),z6r=o("The model class to instantiate is selected based on the "),G1e=a("code"),Q6r=o("model_type"),W6r=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(":"),K6r=l(),fe=a("ul"),t3=a("li"),X1e=a("strong"),Z6r=o("albert"),eAr=o(" \u2014 "),BW=a("a"),oAr=o("FlaxAlbertForPreTraining"),rAr=o(" (ALBERT model)"),tAr=l(),a3=a("li"),z1e=a("strong"),aAr=o("bart"),nAr=o(" \u2014 "),PW=a("a"),sAr=o("FlaxBartForConditionalGeneration"),lAr=o(" (BART model)"),iAr=l(),n3=a("li"),Q1e=a("strong"),dAr=o("bert"),cAr=o(" \u2014 "),$W=a("a"),mAr=o("FlaxBertForPreTraining"),fAr=o(" (BERT model)"),gAr=l(),s3=a("li"),W1e=a("strong"),hAr=o("big_bird"),uAr=o(" \u2014 "),IW=a("a"),pAr=o("FlaxBigBirdForPreTraining"),_Ar=o(" (BigBird model)"),bAr=l(),l3=a("li"),H1e=a("strong"),vAr=o("electra"),FAr=o(" \u2014 "),qW=a("a"),TAr=o("FlaxElectraForPreTraining"),MAr=o(" (ELECTRA model)"),EAr=l(),i3=a("li"),U1e=a("strong"),CAr=o("mbart"),wAr=o(" \u2014 "),NW=a("a"),AAr=o("FlaxMBartForConditionalGeneration"),yAr=o(" (mBART model)"),LAr=l(),d3=a("li"),J1e=a("strong"),xAr=o("mt5"),kAr=o(" \u2014 "),jW=a("a"),SAr=o("FlaxMT5ForConditionalGeneration"),RAr=o(" (mT5 model)"),BAr=l(),c3=a("li"),Y1e=a("strong"),PAr=o("roberta"),$Ar=o(" \u2014 "),DW=a("a"),IAr=o("FlaxRobertaForMaskedLM"),qAr=o(" (RoBERTa model)"),NAr=l(),m3=a("li"),K1e=a("strong"),jAr=o("roformer"),DAr=o(" \u2014 "),GW=a("a"),GAr=o("FlaxRoFormerForMaskedLM"),OAr=o(" (RoFormer model)"),VAr=l(),f3=a("li"),Z1e=a("strong"),XAr=o("t5"),zAr=o(" \u2014 "),OW=a("a"),QAr=o("FlaxT5ForConditionalGeneration"),WAr=o(" (T5 model)"),HAr=l(),g3=a("li"),eTe=a("strong"),UAr=o("wav2vec2"),JAr=o(" \u2014 "),VW=a("a"),YAr=o("FlaxWav2Vec2ForPreTraining"),KAr=o(" (Wav2Vec2 model)"),ZAr=l(),h3=a("li"),oTe=a("strong"),e0r=o("xlm-roberta"),o0r=o(" \u2014 "),XW=a("a"),r0r=o("FlaxXLMRobertaForMaskedLM"),t0r=o(" (XLM-RoBERTa model)"),a0r=l(),rTe=a("p"),n0r=o("Examples:"),s0r=l(),m(gL.$$.fragment),FPe=l(),dm=a("h2"),u3=a("a"),tTe=a("span"),m(hL.$$.fragment),l0r=l(),aTe=a("span"),i0r=o("FlaxAutoModelForMaskedLM"),TPe=l(),$r=a("div"),m(uL.$$.fragment),d0r=l(),cm=a("p"),c0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=a("a"),m0r=o("from_pretrained()"),f0r=o(" class method or the "),QW=a("a"),g0r=o("from_config()"),h0r=o(` class
method.`),u0r=l(),pL=a("p"),p0r=o("This class cannot be instantiated directly using "),nTe=a("code"),_0r=o("__init__()"),b0r=o(" (throws an error)."),v0r=l(),xt=a("div"),m(_L.$$.fragment),F0r=l(),sTe=a("p"),T0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),M0r=l(),mm=a("p"),E0r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),C0r=o("not"),w0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),A0r=o("from_pretrained()"),y0r=o(" to load the model weights."),L0r=l(),iTe=a("p"),x0r=o("Examples:"),k0r=l(),m(bL.$$.fragment),S0r=l(),ko=a("div"),m(vL.$$.fragment),R0r=l(),dTe=a("p"),B0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P0r=l(),Bn=a("p"),$0r=o("The model class to instantiate is selected based on the "),cTe=a("code"),I0r=o("model_type"),q0r=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),N0r=o("pretrained_model_name_or_path"),j0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),D0r=o("pretrained_model_name_or_path"),G0r=o(":"),O0r=l(),ve=a("ul"),p3=a("li"),gTe=a("strong"),V0r=o("albert"),X0r=o(" \u2014 "),HW=a("a"),z0r=o("FlaxAlbertForMaskedLM"),Q0r=o(" (ALBERT model)"),W0r=l(),_3=a("li"),hTe=a("strong"),H0r=o("bart"),U0r=o(" \u2014 "),UW=a("a"),J0r=o("FlaxBartForConditionalGeneration"),Y0r=o(" (BART model)"),K0r=l(),b3=a("li"),uTe=a("strong"),Z0r=o("bert"),eyr=o(" \u2014 "),JW=a("a"),oyr=o("FlaxBertForMaskedLM"),ryr=o(" (BERT model)"),tyr=l(),v3=a("li"),pTe=a("strong"),ayr=o("big_bird"),nyr=o(" \u2014 "),YW=a("a"),syr=o("FlaxBigBirdForMaskedLM"),lyr=o(" (BigBird model)"),iyr=l(),F3=a("li"),_Te=a("strong"),dyr=o("distilbert"),cyr=o(" \u2014 "),KW=a("a"),myr=o("FlaxDistilBertForMaskedLM"),fyr=o(" (DistilBERT model)"),gyr=l(),T3=a("li"),bTe=a("strong"),hyr=o("electra"),uyr=o(" \u2014 "),ZW=a("a"),pyr=o("FlaxElectraForMaskedLM"),_yr=o(" (ELECTRA model)"),byr=l(),M3=a("li"),vTe=a("strong"),vyr=o("mbart"),Fyr=o(" \u2014 "),eH=a("a"),Tyr=o("FlaxMBartForConditionalGeneration"),Myr=o(" (mBART model)"),Eyr=l(),E3=a("li"),FTe=a("strong"),Cyr=o("roberta"),wyr=o(" \u2014 "),oH=a("a"),Ayr=o("FlaxRobertaForMaskedLM"),yyr=o(" (RoBERTa model)"),Lyr=l(),C3=a("li"),TTe=a("strong"),xyr=o("roformer"),kyr=o(" \u2014 "),rH=a("a"),Syr=o("FlaxRoFormerForMaskedLM"),Ryr=o(" (RoFormer model)"),Byr=l(),w3=a("li"),MTe=a("strong"),Pyr=o("xlm-roberta"),$yr=o(" \u2014 "),tH=a("a"),Iyr=o("FlaxXLMRobertaForMaskedLM"),qyr=o(" (XLM-RoBERTa model)"),Nyr=l(),ETe=a("p"),jyr=o("Examples:"),Dyr=l(),m(FL.$$.fragment),MPe=l(),fm=a("h2"),A3=a("a"),CTe=a("span"),m(TL.$$.fragment),Gyr=l(),wTe=a("span"),Oyr=o("FlaxAutoModelForSeq2SeqLM"),EPe=l(),Ir=a("div"),m(ML.$$.fragment),Vyr=l(),gm=a("p"),Xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=a("a"),zyr=o("from_pretrained()"),Qyr=o(" class method or the "),nH=a("a"),Wyr=o("from_config()"),Hyr=o(` class
method.`),Uyr=l(),EL=a("p"),Jyr=o("This class cannot be instantiated directly using "),ATe=a("code"),Yyr=o("__init__()"),Kyr=o(" (throws an error)."),Zyr=l(),kt=a("div"),m(CL.$$.fragment),e8r=l(),yTe=a("p"),o8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r8r=l(),hm=a("p"),t8r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),a8r=o("not"),n8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),s8r=o("from_pretrained()"),l8r=o(" to load the model weights."),i8r=l(),xTe=a("p"),d8r=o("Examples:"),c8r=l(),m(wL.$$.fragment),m8r=l(),So=a("div"),m(AL.$$.fragment),f8r=l(),kTe=a("p"),g8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h8r=l(),Pn=a("p"),u8r=o("The model class to instantiate is selected based on the "),STe=a("code"),p8r=o("model_type"),_8r=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),b8r=o("pretrained_model_name_or_path"),v8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=a("code"),F8r=o("pretrained_model_name_or_path"),T8r=o(":"),M8r=l(),Ee=a("ul"),y3=a("li"),PTe=a("strong"),E8r=o("bart"),C8r=o(" \u2014 "),lH=a("a"),w8r=o("FlaxBartForConditionalGeneration"),A8r=o(" (BART model)"),y8r=l(),L3=a("li"),$Te=a("strong"),L8r=o("blenderbot"),x8r=o(" \u2014 "),iH=a("a"),k8r=o("FlaxBlenderbotForConditionalGeneration"),S8r=o(" (Blenderbot model)"),R8r=l(),x3=a("li"),ITe=a("strong"),B8r=o("blenderbot-small"),P8r=o(" \u2014 "),dH=a("a"),$8r=o("FlaxBlenderbotSmallForConditionalGeneration"),I8r=o(" (BlenderbotSmall model)"),q8r=l(),k3=a("li"),qTe=a("strong"),N8r=o("encoder-decoder"),j8r=o(" \u2014 "),cH=a("a"),D8r=o("FlaxEncoderDecoderModel"),G8r=o(" (Encoder decoder model)"),O8r=l(),S3=a("li"),NTe=a("strong"),V8r=o("marian"),X8r=o(" \u2014 "),mH=a("a"),z8r=o("FlaxMarianMTModel"),Q8r=o(" (Marian model)"),W8r=l(),R3=a("li"),jTe=a("strong"),H8r=o("mbart"),U8r=o(" \u2014 "),fH=a("a"),J8r=o("FlaxMBartForConditionalGeneration"),Y8r=o(" (mBART model)"),K8r=l(),B3=a("li"),DTe=a("strong"),Z8r=o("mt5"),eLr=o(" \u2014 "),gH=a("a"),oLr=o("FlaxMT5ForConditionalGeneration"),rLr=o(" (mT5 model)"),tLr=l(),P3=a("li"),GTe=a("strong"),aLr=o("pegasus"),nLr=o(" \u2014 "),hH=a("a"),sLr=o("FlaxPegasusForConditionalGeneration"),lLr=o(" (Pegasus model)"),iLr=l(),$3=a("li"),OTe=a("strong"),dLr=o("t5"),cLr=o(" \u2014 "),uH=a("a"),mLr=o("FlaxT5ForConditionalGeneration"),fLr=o(" (T5 model)"),gLr=l(),VTe=a("p"),hLr=o("Examples:"),uLr=l(),m(yL.$$.fragment),CPe=l(),um=a("h2"),I3=a("a"),XTe=a("span"),m(LL.$$.fragment),pLr=l(),zTe=a("span"),_Lr=o("FlaxAutoModelForSequenceClassification"),wPe=l(),qr=a("div"),m(xL.$$.fragment),bLr=l(),pm=a("p"),vLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pH=a("a"),FLr=o("from_pretrained()"),TLr=o(" class method or the "),_H=a("a"),MLr=o("from_config()"),ELr=o(` class
method.`),CLr=l(),kL=a("p"),wLr=o("This class cannot be instantiated directly using "),QTe=a("code"),ALr=o("__init__()"),yLr=o(" (throws an error)."),LLr=l(),St=a("div"),m(SL.$$.fragment),xLr=l(),WTe=a("p"),kLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SLr=l(),_m=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),BLr=o("not"),PLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),$Lr=o("from_pretrained()"),ILr=o(" to load the model weights."),qLr=l(),UTe=a("p"),NLr=o("Examples:"),jLr=l(),m(RL.$$.fragment),DLr=l(),Ro=a("div"),m(BL.$$.fragment),GLr=l(),JTe=a("p"),OLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VLr=l(),$n=a("p"),XLr=o("The model class to instantiate is selected based on the "),YTe=a("code"),zLr=o("model_type"),QLr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),WLr=o("pretrained_model_name_or_path"),HLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(":"),YLr=l(),Fe=a("ul"),q3=a("li"),eMe=a("strong"),KLr=o("albert"),ZLr=o(" \u2014 "),vH=a("a"),e7r=o("FlaxAlbertForSequenceClassification"),o7r=o(" (ALBERT model)"),r7r=l(),N3=a("li"),oMe=a("strong"),t7r=o("bart"),a7r=o(" \u2014 "),FH=a("a"),n7r=o("FlaxBartForSequenceClassification"),s7r=o(" (BART model)"),l7r=l(),j3=a("li"),rMe=a("strong"),i7r=o("bert"),d7r=o(" \u2014 "),TH=a("a"),c7r=o("FlaxBertForSequenceClassification"),m7r=o(" (BERT model)"),f7r=l(),D3=a("li"),tMe=a("strong"),g7r=o("big_bird"),h7r=o(" \u2014 "),MH=a("a"),u7r=o("FlaxBigBirdForSequenceClassification"),p7r=o(" (BigBird model)"),_7r=l(),G3=a("li"),aMe=a("strong"),b7r=o("distilbert"),v7r=o(" \u2014 "),EH=a("a"),F7r=o("FlaxDistilBertForSequenceClassification"),T7r=o(" (DistilBERT model)"),M7r=l(),O3=a("li"),nMe=a("strong"),E7r=o("electra"),C7r=o(" \u2014 "),CH=a("a"),w7r=o("FlaxElectraForSequenceClassification"),A7r=o(" (ELECTRA model)"),y7r=l(),V3=a("li"),sMe=a("strong"),L7r=o("mbart"),x7r=o(" \u2014 "),wH=a("a"),k7r=o("FlaxMBartForSequenceClassification"),S7r=o(" (mBART model)"),R7r=l(),X3=a("li"),lMe=a("strong"),B7r=o("roberta"),P7r=o(" \u2014 "),AH=a("a"),$7r=o("FlaxRobertaForSequenceClassification"),I7r=o(" (RoBERTa model)"),q7r=l(),z3=a("li"),iMe=a("strong"),N7r=o("roformer"),j7r=o(" \u2014 "),yH=a("a"),D7r=o("FlaxRoFormerForSequenceClassification"),G7r=o(" (RoFormer model)"),O7r=l(),Q3=a("li"),dMe=a("strong"),V7r=o("xlm-roberta"),X7r=o(" \u2014 "),LH=a("a"),z7r=o("FlaxXLMRobertaForSequenceClassification"),Q7r=o(" (XLM-RoBERTa model)"),W7r=l(),cMe=a("p"),H7r=o("Examples:"),U7r=l(),m(PL.$$.fragment),APe=l(),bm=a("h2"),W3=a("a"),mMe=a("span"),m($L.$$.fragment),J7r=l(),fMe=a("span"),Y7r=o("FlaxAutoModelForQuestionAnswering"),yPe=l(),Nr=a("div"),m(IL.$$.fragment),K7r=l(),vm=a("p"),Z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=a("a"),e9r=o("from_pretrained()"),o9r=o(" class method or the "),kH=a("a"),r9r=o("from_config()"),t9r=o(` class
method.`),a9r=l(),qL=a("p"),n9r=o("This class cannot be instantiated directly using "),gMe=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),Rt=a("div"),m(NL.$$.fragment),d9r=l(),hMe=a("p"),c9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m9r=l(),Fm=a("p"),f9r=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),u9r=o("from_pretrained()"),p9r=o(" to load the model weights."),_9r=l(),pMe=a("p"),b9r=o("Examples:"),v9r=l(),m(jL.$$.fragment),F9r=l(),Bo=a("div"),m(DL.$$.fragment),T9r=l(),_Me=a("p"),M9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E9r=l(),In=a("p"),C9r=o("The model class to instantiate is selected based on the "),bMe=a("code"),w9r=o("model_type"),A9r=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),y9r=o("pretrained_model_name_or_path"),L9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),x9r=o("pretrained_model_name_or_path"),k9r=o(":"),S9r=l(),Te=a("ul"),H3=a("li"),TMe=a("strong"),R9r=o("albert"),B9r=o(" \u2014 "),RH=a("a"),P9r=o("FlaxAlbertForQuestionAnswering"),$9r=o(" (ALBERT model)"),I9r=l(),U3=a("li"),MMe=a("strong"),q9r=o("bart"),N9r=o(" \u2014 "),BH=a("a"),j9r=o("FlaxBartForQuestionAnswering"),D9r=o(" (BART model)"),G9r=l(),J3=a("li"),EMe=a("strong"),O9r=o("bert"),V9r=o(" \u2014 "),PH=a("a"),X9r=o("FlaxBertForQuestionAnswering"),z9r=o(" (BERT model)"),Q9r=l(),Y3=a("li"),CMe=a("strong"),W9r=o("big_bird"),H9r=o(" \u2014 "),$H=a("a"),U9r=o("FlaxBigBirdForQuestionAnswering"),J9r=o(" (BigBird model)"),Y9r=l(),K3=a("li"),wMe=a("strong"),K9r=o("distilbert"),Z9r=o(" \u2014 "),IH=a("a"),exr=o("FlaxDistilBertForQuestionAnswering"),oxr=o(" (DistilBERT model)"),rxr=l(),Z3=a("li"),AMe=a("strong"),txr=o("electra"),axr=o(" \u2014 "),qH=a("a"),nxr=o("FlaxElectraForQuestionAnswering"),sxr=o(" (ELECTRA model)"),lxr=l(),eC=a("li"),yMe=a("strong"),ixr=o("mbart"),dxr=o(" \u2014 "),NH=a("a"),cxr=o("FlaxMBartForQuestionAnswering"),mxr=o(" (mBART model)"),fxr=l(),oC=a("li"),LMe=a("strong"),gxr=o("roberta"),hxr=o(" \u2014 "),jH=a("a"),uxr=o("FlaxRobertaForQuestionAnswering"),pxr=o(" (RoBERTa model)"),_xr=l(),rC=a("li"),xMe=a("strong"),bxr=o("roformer"),vxr=o(" \u2014 "),DH=a("a"),Fxr=o("FlaxRoFormerForQuestionAnswering"),Txr=o(" (RoFormer model)"),Mxr=l(),tC=a("li"),kMe=a("strong"),Exr=o("xlm-roberta"),Cxr=o(" \u2014 "),GH=a("a"),wxr=o("FlaxXLMRobertaForQuestionAnswering"),Axr=o(" (XLM-RoBERTa model)"),yxr=l(),SMe=a("p"),Lxr=o("Examples:"),xxr=l(),m(GL.$$.fragment),LPe=l(),Tm=a("h2"),aC=a("a"),RMe=a("span"),m(OL.$$.fragment),kxr=l(),BMe=a("span"),Sxr=o("FlaxAutoModelForTokenClassification"),xPe=l(),jr=a("div"),m(VL.$$.fragment),Rxr=l(),Mm=a("p"),Bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" class method or the "),VH=a("a"),Ixr=o("from_config()"),qxr=o(` class
method.`),Nxr=l(),XL=a("p"),jxr=o("This class cannot be instantiated directly using "),PMe=a("code"),Dxr=o("__init__()"),Gxr=o(" (throws an error)."),Oxr=l(),Bt=a("div"),m(zL.$$.fragment),Vxr=l(),$Me=a("p"),Xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zxr=l(),Em=a("p"),Qxr=o(`Note:
Loading a model from its configuration file does `),IMe=a("strong"),Wxr=o("not"),Hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" to load the model weights."),Yxr=l(),qMe=a("p"),Kxr=o("Examples:"),Zxr=l(),m(QL.$$.fragment),ekr=l(),Po=a("div"),m(WL.$$.fragment),okr=l(),NMe=a("p"),rkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tkr=l(),qn=a("p"),akr=o("The model class to instantiate is selected based on the "),jMe=a("code"),nkr=o("model_type"),skr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(":"),mkr=l(),Be=a("ul"),nC=a("li"),OMe=a("strong"),fkr=o("albert"),gkr=o(" \u2014 "),zH=a("a"),hkr=o("FlaxAlbertForTokenClassification"),ukr=o(" (ALBERT model)"),pkr=l(),sC=a("li"),VMe=a("strong"),_kr=o("bert"),bkr=o(" \u2014 "),QH=a("a"),vkr=o("FlaxBertForTokenClassification"),Fkr=o(" (BERT model)"),Tkr=l(),lC=a("li"),XMe=a("strong"),Mkr=o("big_bird"),Ekr=o(" \u2014 "),WH=a("a"),Ckr=o("FlaxBigBirdForTokenClassification"),wkr=o(" (BigBird model)"),Akr=l(),iC=a("li"),zMe=a("strong"),ykr=o("distilbert"),Lkr=o(" \u2014 "),HH=a("a"),xkr=o("FlaxDistilBertForTokenClassification"),kkr=o(" (DistilBERT model)"),Skr=l(),dC=a("li"),QMe=a("strong"),Rkr=o("electra"),Bkr=o(" \u2014 "),UH=a("a"),Pkr=o("FlaxElectraForTokenClassification"),$kr=o(" (ELECTRA model)"),Ikr=l(),cC=a("li"),WMe=a("strong"),qkr=o("roberta"),Nkr=o(" \u2014 "),JH=a("a"),jkr=o("FlaxRobertaForTokenClassification"),Dkr=o(" (RoBERTa model)"),Gkr=l(),mC=a("li"),HMe=a("strong"),Okr=o("roformer"),Vkr=o(" \u2014 "),YH=a("a"),Xkr=o("FlaxRoFormerForTokenClassification"),zkr=o(" (RoFormer model)"),Qkr=l(),fC=a("li"),UMe=a("strong"),Wkr=o("xlm-roberta"),Hkr=o(" \u2014 "),KH=a("a"),Ukr=o("FlaxXLMRobertaForTokenClassification"),Jkr=o(" (XLM-RoBERTa model)"),Ykr=l(),JMe=a("p"),Kkr=o("Examples:"),Zkr=l(),m(HL.$$.fragment),kPe=l(),Cm=a("h2"),gC=a("a"),YMe=a("span"),m(UL.$$.fragment),eSr=l(),KMe=a("span"),oSr=o("FlaxAutoModelForMultipleChoice"),SPe=l(),Dr=a("div"),m(JL.$$.fragment),rSr=l(),wm=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),eU=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),YL=a("p"),dSr=o("This class cannot be instantiated directly using "),ZMe=a("code"),cSr=o("__init__()"),mSr=o(" (throws an error)."),fSr=l(),Pt=a("div"),m(KL.$$.fragment),gSr=l(),e4e=a("p"),hSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uSr=l(),Am=a("p"),pSr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),r4e=a("p"),MSr=o("Examples:"),ESr=l(),m(ZL.$$.fragment),CSr=l(),$o=a("div"),m(e7.$$.fragment),wSr=l(),t4e=a("p"),ASr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ySr=l(),Nn=a("p"),LSr=o("The model class to instantiate is selected based on the "),a4e=a("code"),xSr=o("model_type"),kSr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),BSr=o("pretrained_model_name_or_path"),PSr=o(":"),$Sr=l(),Pe=a("ul"),hC=a("li"),l4e=a("strong"),ISr=o("albert"),qSr=o(" \u2014 "),rU=a("a"),NSr=o("FlaxAlbertForMultipleChoice"),jSr=o(" (ALBERT model)"),DSr=l(),uC=a("li"),i4e=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),tU=a("a"),VSr=o("FlaxBertForMultipleChoice"),XSr=o(" (BERT model)"),zSr=l(),pC=a("li"),d4e=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),aU=a("a"),HSr=o("FlaxBigBirdForMultipleChoice"),USr=o(" (BigBird model)"),JSr=l(),_C=a("li"),c4e=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),nU=a("a"),ZSr=o("FlaxDistilBertForMultipleChoice"),eRr=o(" (DistilBERT model)"),oRr=l(),bC=a("li"),m4e=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),sU=a("a"),aRr=o("FlaxElectraForMultipleChoice"),nRr=o(" (ELECTRA model)"),sRr=l(),vC=a("li"),f4e=a("strong"),lRr=o("roberta"),iRr=o(" \u2014 "),lU=a("a"),dRr=o("FlaxRobertaForMultipleChoice"),cRr=o(" (RoBERTa model)"),mRr=l(),FC=a("li"),g4e=a("strong"),fRr=o("roformer"),gRr=o(" \u2014 "),iU=a("a"),hRr=o("FlaxRoFormerForMultipleChoice"),uRr=o(" (RoFormer model)"),pRr=l(),TC=a("li"),h4e=a("strong"),_Rr=o("xlm-roberta"),bRr=o(" \u2014 "),dU=a("a"),vRr=o("FlaxXLMRobertaForMultipleChoice"),FRr=o(" (XLM-RoBERTa model)"),TRr=l(),u4e=a("p"),MRr=o("Examples:"),ERr=l(),m(o7.$$.fragment),RPe=l(),ym=a("h2"),MC=a("a"),p4e=a("span"),m(r7.$$.fragment),CRr=l(),_4e=a("span"),wRr=o("FlaxAutoModelForNextSentencePrediction"),BPe=l(),Gr=a("div"),m(t7.$$.fragment),ARr=l(),Lm=a("p"),yRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=a("a"),LRr=o("from_pretrained()"),xRr=o(" class method or the "),mU=a("a"),kRr=o("from_config()"),SRr=o(` class
method.`),RRr=l(),a7=a("p"),BRr=o("This class cannot be instantiated directly using "),b4e=a("code"),PRr=o("__init__()"),$Rr=o(" (throws an error)."),IRr=l(),$t=a("div"),m(n7.$$.fragment),qRr=l(),v4e=a("p"),NRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jRr=l(),xm=a("p"),DRr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),GRr=o("not"),ORr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),VRr=o("from_pretrained()"),XRr=o(" to load the model weights."),zRr=l(),T4e=a("p"),QRr=o("Examples:"),WRr=l(),m(s7.$$.fragment),HRr=l(),Io=a("div"),m(l7.$$.fragment),URr=l(),M4e=a("p"),JRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YRr=l(),jn=a("p"),KRr=o("The model class to instantiate is selected based on the "),E4e=a("code"),ZRr=o("model_type"),eBr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),oBr=o("pretrained_model_name_or_path"),rBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),tBr=o("pretrained_model_name_or_path"),aBr=o(":"),nBr=l(),A4e=a("ul"),EC=a("li"),y4e=a("strong"),sBr=o("bert"),lBr=o(" \u2014 "),gU=a("a"),iBr=o("FlaxBertForNextSentencePrediction"),dBr=o(" (BERT model)"),cBr=l(),L4e=a("p"),mBr=o("Examples:"),fBr=l(),m(i7.$$.fragment),PPe=l(),km=a("h2"),CC=a("a"),x4e=a("span"),m(d7.$$.fragment),gBr=l(),k4e=a("span"),hBr=o("FlaxAutoModelForImageClassification"),$Pe=l(),Or=a("div"),m(c7.$$.fragment),uBr=l(),Sm=a("p"),pBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=a("a"),_Br=o("from_pretrained()"),bBr=o(" class method or the "),uU=a("a"),vBr=o("from_config()"),FBr=o(` class
method.`),TBr=l(),m7=a("p"),MBr=o("This class cannot be instantiated directly using "),S4e=a("code"),EBr=o("__init__()"),CBr=o(" (throws an error)."),wBr=l(),It=a("div"),m(f7.$$.fragment),ABr=l(),R4e=a("p"),yBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LBr=l(),Rm=a("p"),xBr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),kBr=o("not"),SBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),RBr=o("from_pretrained()"),BBr=o(" to load the model weights."),PBr=l(),P4e=a("p"),$Br=o("Examples:"),IBr=l(),m(g7.$$.fragment),qBr=l(),qo=a("div"),m(h7.$$.fragment),NBr=l(),$4e=a("p"),jBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DBr=l(),Dn=a("p"),GBr=o("The model class to instantiate is selected based on the "),I4e=a("code"),OBr=o("model_type"),VBr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),XBr=o("pretrained_model_name_or_path"),zBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=a("code"),QBr=o("pretrained_model_name_or_path"),WBr=o(":"),HBr=l(),u7=a("ul"),wC=a("li"),j4e=a("strong"),UBr=o("beit"),JBr=o(" \u2014 "),_U=a("a"),YBr=o("FlaxBeitForImageClassification"),KBr=o(" (BEiT model)"),ZBr=l(),AC=a("li"),D4e=a("strong"),ePr=o("vit"),oPr=o(" \u2014 "),bU=a("a"),rPr=o("FlaxViTForImageClassification"),tPr=o(" (ViT model)"),aPr=l(),G4e=a("p"),nPr=o("Examples:"),sPr=l(),m(p7.$$.fragment),IPe=l(),Bm=a("h2"),yC=a("a"),O4e=a("span"),m(_7.$$.fragment),lPr=l(),V4e=a("span"),iPr=o("FlaxAutoModelForVision2Seq"),qPe=l(),Vr=a("div"),m(b7.$$.fragment),dPr=l(),Pm=a("p"),cPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),mPr=o("from_pretrained()"),fPr=o(" class method or the "),FU=a("a"),gPr=o("from_config()"),hPr=o(` class
method.`),uPr=l(),v7=a("p"),pPr=o("This class cannot be instantiated directly using "),X4e=a("code"),_Pr=o("__init__()"),bPr=o(" (throws an error)."),vPr=l(),qt=a("div"),m(F7.$$.fragment),FPr=l(),z4e=a("p"),TPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MPr=l(),$m=a("p"),EPr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),CPr=o("not"),wPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),APr=o("from_pretrained()"),yPr=o(" to load the model weights."),LPr=l(),W4e=a("p"),xPr=o("Examples:"),kPr=l(),m(T7.$$.fragment),SPr=l(),No=a("div"),m(M7.$$.fragment),RPr=l(),H4e=a("p"),BPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PPr=l(),Gn=a("p"),$Pr=o("The model class to instantiate is selected based on the "),U4e=a("code"),IPr=o("model_type"),qPr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),NPr=o("pretrained_model_name_or_path"),jPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),DPr=o("pretrained_model_name_or_path"),GPr=o(":"),OPr=l(),K4e=a("ul"),LC=a("li"),Z4e=a("strong"),VPr=o("vision-encoder-decoder"),XPr=o(" \u2014 "),MU=a("a"),zPr=o("FlaxVisionEncoderDecoderModel"),QPr=o(" (Vision Encoder decoder model)"),WPr=l(),eEe=a("p"),HPr=o("Examples:"),UPr=l(),m(E7.$$.fragment),this.h()},l(c){const _=O6t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var C7=s(ce);Ce=n(C7,"A",{id:!0,class:!0,href:!0});var oEe=s(Ce);lo=n(oEe,"SPAN",{});var rEe=s(lo);f(he.$$.fragment,rEe),rEe.forEach(t),oEe.forEach(t),Me=i(C7),Xo=n(C7,"SPAN",{});var YPr=s(Xo);ji=r(YPr,"Auto Classes"),YPr.forEach(t),C7.forEach(t),Nm=i(c),ma=n(c,"P",{});var jPe=s(ma);Di=r(jPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=n(jPe,"CODE",{});var KPr=s(Gi);xw=r(KPr,"from_pretrained()"),KPr.forEach(t),jm=r(jPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jPe.forEach(t),xe=i(c),co=n(c,"P",{});var xC=s(co);Oi=r(xC,"Instantiating one of "),On=n(xC,"A",{href:!0});var ZPr=s(On);kw=r(ZPr,"AutoConfig"),ZPr.forEach(t),Vn=r(xC,", "),Xn=n(xC,"A",{href:!0});var e$r=s(Xn);Sw=r(e$r,"AutoModel"),e$r.forEach(t),Vi=r(xC,`, and
`),zn=n(xC,"A",{href:!0});var o$r=s(zn);Rw=r(o$r,"AutoTokenizer"),o$r.forEach(t),Xi=r(xC," will directly create a class of the relevant architecture. For instance"),xC.forEach(t),Dm=i(c),f(Da.$$.fragment,c),mo=i(c),_e=n(c,"P",{});var DPe=s(_e);E9=r(DPe,"will create a model that is an instance of "),zi=n(DPe,"A",{href:!0});var r$r=s(zi);C9=r(r$r,"BertModel"),r$r.forEach(t),w9=r(DPe,"."),DPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var GPe=s(Ga);A9=r(GPe,"There is one class of "),Gm=n(GPe,"CODE",{});var t$r=s(Gm);y9=r(t$r,"AutoModel"),t$r.forEach(t),JIe=r(GPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GPe.forEach(t),qRe=i(c),Qi=n(c,"H2",{class:!0});var OPe=s(Qi);Om=n(OPe,"A",{id:!0,class:!0,href:!0});var a$r=s(Om);uY=n(a$r,"SPAN",{});var n$r=s(uY);f(Bw.$$.fragment,n$r),n$r.forEach(t),a$r.forEach(t),YIe=i(OPe),pY=n(OPe,"SPAN",{});var s$r=s(pY);KIe=r(s$r,"Extending the Auto Classes"),s$r.forEach(t),OPe.forEach(t),NRe=i(c),Qn=n(c,"P",{});var EU=s(Qn);ZIe=r(EU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_Y=n(EU,"CODE",{});var l$r=s(_Y);eqe=r(l$r,"NewModel"),l$r.forEach(t),oqe=r(EU,", make sure you have a "),bY=n(EU,"CODE",{});var i$r=s(bY);rqe=r(i$r,"NewModelConfig"),i$r.forEach(t),tqe=r(EU,` then you can add those to the auto
classes like this:`),EU.forEach(t),jRe=i(c),f(Pw.$$.fragment,c),DRe=i(c),L9=n(c,"P",{});var d$r=s(L9);aqe=r(d$r,"You will then be able to use the auto classes like you would usually do!"),d$r.forEach(t),GRe=i(c),f(Vm.$$.fragment,c),ORe=i(c),Wi=n(c,"H2",{class:!0});var VPe=s(Wi);Xm=n(VPe,"A",{id:!0,class:!0,href:!0});var c$r=s(Xm);vY=n(c$r,"SPAN",{});var m$r=s(vY);f($w.$$.fragment,m$r),m$r.forEach(t),c$r.forEach(t),nqe=i(VPe),FY=n(VPe,"SPAN",{});var f$r=s(FY);sqe=r(f$r,"AutoConfig"),f$r.forEach(t),VPe.forEach(t),VRe=i(c),Qo=n(c,"DIV",{class:!0});var zs=s(Qo);f(Iw.$$.fragment,zs),lqe=i(zs),qw=n(zs,"P",{});var XPe=s(qw);iqe=r(XPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x9=n(XPe,"A",{href:!0});var g$r=s(x9);dqe=r(g$r,"from_pretrained()"),g$r.forEach(t),cqe=r(XPe," class method."),XPe.forEach(t),mqe=i(zs),Nw=n(zs,"P",{});var zPe=s(Nw);fqe=r(zPe,"This class cannot be instantiated directly using "),TY=n(zPe,"CODE",{});var h$r=s(TY);gqe=r(h$r,"__init__()"),h$r.forEach(t),hqe=r(zPe," (throws an error)."),zPe.forEach(t),uqe=i(zs),fo=n(zs,"DIV",{class:!0});var ga=s(fo);f(jw.$$.fragment,ga),pqe=i(ga),MY=n(ga,"P",{});var u$r=s(MY);_qe=r(u$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),u$r.forEach(t),bqe=i(ga),Hi=n(ga,"P",{});var CU=s(Hi);vqe=r(CU,"The configuration class to instantiate is selected based on the "),EY=n(CU,"CODE",{});var p$r=s(EY);Fqe=r(p$r,"model_type"),p$r.forEach(t),Tqe=r(CU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=n(CU,"CODE",{});var _$r=s(CY);Mqe=r(_$r,"pretrained_model_name_or_path"),_$r.forEach(t),Eqe=r(CU,":"),CU.forEach(t),Cqe=i(ga),v=n(ga,"UL",{});var F=s(v);zm=n(F,"LI",{});var tEe=s(zm);wY=n(tEe,"STRONG",{});var b$r=s(wY);wqe=r(b$r,"albert"),b$r.forEach(t),Aqe=r(tEe," \u2014 "),k9=n(tEe,"A",{href:!0});var v$r=s(k9);yqe=r(v$r,"AlbertConfig"),v$r.forEach(t),Lqe=r(tEe," (ALBERT model)"),tEe.forEach(t),xqe=i(F),Qm=n(F,"LI",{});var aEe=s(Qm);AY=n(aEe,"STRONG",{});var F$r=s(AY);kqe=r(F$r,"bart"),F$r.forEach(t),Sqe=r(aEe," \u2014 "),S9=n(aEe,"A",{href:!0});var T$r=s(S9);Rqe=r(T$r,"BartConfig"),T$r.forEach(t),Bqe=r(aEe," (BART model)"),aEe.forEach(t),Pqe=i(F),Wm=n(F,"LI",{});var nEe=s(Wm);yY=n(nEe,"STRONG",{});var M$r=s(yY);$qe=r(M$r,"beit"),M$r.forEach(t),Iqe=r(nEe," \u2014 "),R9=n(nEe,"A",{href:!0});var E$r=s(R9);qqe=r(E$r,"BeitConfig"),E$r.forEach(t),Nqe=r(nEe," (BEiT model)"),nEe.forEach(t),jqe=i(F),Hm=n(F,"LI",{});var sEe=s(Hm);LY=n(sEe,"STRONG",{});var C$r=s(LY);Dqe=r(C$r,"bert"),C$r.forEach(t),Gqe=r(sEe," \u2014 "),B9=n(sEe,"A",{href:!0});var w$r=s(B9);Oqe=r(w$r,"BertConfig"),w$r.forEach(t),Vqe=r(sEe," (BERT model)"),sEe.forEach(t),Xqe=i(F),Um=n(F,"LI",{});var lEe=s(Um);xY=n(lEe,"STRONG",{});var A$r=s(xY);zqe=r(A$r,"bert-generation"),A$r.forEach(t),Qqe=r(lEe," \u2014 "),P9=n(lEe,"A",{href:!0});var y$r=s(P9);Wqe=r(y$r,"BertGenerationConfig"),y$r.forEach(t),Hqe=r(lEe," (Bert Generation model)"),lEe.forEach(t),Uqe=i(F),Jm=n(F,"LI",{});var iEe=s(Jm);kY=n(iEe,"STRONG",{});var L$r=s(kY);Jqe=r(L$r,"big_bird"),L$r.forEach(t),Yqe=r(iEe," \u2014 "),$9=n(iEe,"A",{href:!0});var x$r=s($9);Kqe=r(x$r,"BigBirdConfig"),x$r.forEach(t),Zqe=r(iEe," (BigBird model)"),iEe.forEach(t),eNe=i(F),Ym=n(F,"LI",{});var dEe=s(Ym);SY=n(dEe,"STRONG",{});var k$r=s(SY);oNe=r(k$r,"bigbird_pegasus"),k$r.forEach(t),rNe=r(dEe," \u2014 "),I9=n(dEe,"A",{href:!0});var S$r=s(I9);tNe=r(S$r,"BigBirdPegasusConfig"),S$r.forEach(t),aNe=r(dEe," (BigBirdPegasus model)"),dEe.forEach(t),nNe=i(F),Km=n(F,"LI",{});var cEe=s(Km);RY=n(cEe,"STRONG",{});var R$r=s(RY);sNe=r(R$r,"blenderbot"),R$r.forEach(t),lNe=r(cEe," \u2014 "),q9=n(cEe,"A",{href:!0});var B$r=s(q9);iNe=r(B$r,"BlenderbotConfig"),B$r.forEach(t),dNe=r(cEe," (Blenderbot model)"),cEe.forEach(t),cNe=i(F),Zm=n(F,"LI",{});var mEe=s(Zm);BY=n(mEe,"STRONG",{});var P$r=s(BY);mNe=r(P$r,"blenderbot-small"),P$r.forEach(t),fNe=r(mEe," \u2014 "),N9=n(mEe,"A",{href:!0});var $$r=s(N9);gNe=r($$r,"BlenderbotSmallConfig"),$$r.forEach(t),hNe=r(mEe," (BlenderbotSmall model)"),mEe.forEach(t),uNe=i(F),ef=n(F,"LI",{});var fEe=s(ef);PY=n(fEe,"STRONG",{});var I$r=s(PY);pNe=r(I$r,"camembert"),I$r.forEach(t),_Ne=r(fEe," \u2014 "),j9=n(fEe,"A",{href:!0});var q$r=s(j9);bNe=r(q$r,"CamembertConfig"),q$r.forEach(t),vNe=r(fEe," (CamemBERT model)"),fEe.forEach(t),FNe=i(F),of=n(F,"LI",{});var gEe=s(of);$Y=n(gEe,"STRONG",{});var N$r=s($Y);TNe=r(N$r,"canine"),N$r.forEach(t),MNe=r(gEe," \u2014 "),D9=n(gEe,"A",{href:!0});var j$r=s(D9);ENe=r(j$r,"CanineConfig"),j$r.forEach(t),CNe=r(gEe," (Canine model)"),gEe.forEach(t),wNe=i(F),rf=n(F,"LI",{});var hEe=s(rf);IY=n(hEe,"STRONG",{});var D$r=s(IY);ANe=r(D$r,"clip"),D$r.forEach(t),yNe=r(hEe," \u2014 "),G9=n(hEe,"A",{href:!0});var G$r=s(G9);LNe=r(G$r,"CLIPConfig"),G$r.forEach(t),xNe=r(hEe," (CLIP model)"),hEe.forEach(t),kNe=i(F),tf=n(F,"LI",{});var uEe=s(tf);qY=n(uEe,"STRONG",{});var O$r=s(qY);SNe=r(O$r,"convbert"),O$r.forEach(t),RNe=r(uEe," \u2014 "),O9=n(uEe,"A",{href:!0});var V$r=s(O9);BNe=r(V$r,"ConvBertConfig"),V$r.forEach(t),PNe=r(uEe," (ConvBERT model)"),uEe.forEach(t),$Ne=i(F),af=n(F,"LI",{});var pEe=s(af);NY=n(pEe,"STRONG",{});var X$r=s(NY);INe=r(X$r,"convnext"),X$r.forEach(t),qNe=r(pEe," \u2014 "),V9=n(pEe,"A",{href:!0});var z$r=s(V9);NNe=r(z$r,"ConvNextConfig"),z$r.forEach(t),jNe=r(pEe," (ConvNext model)"),pEe.forEach(t),DNe=i(F),nf=n(F,"LI",{});var _Ee=s(nf);jY=n(_Ee,"STRONG",{});var Q$r=s(jY);GNe=r(Q$r,"ctrl"),Q$r.forEach(t),ONe=r(_Ee," \u2014 "),X9=n(_Ee,"A",{href:!0});var W$r=s(X9);VNe=r(W$r,"CTRLConfig"),W$r.forEach(t),XNe=r(_Ee," (CTRL model)"),_Ee.forEach(t),zNe=i(F),sf=n(F,"LI",{});var bEe=s(sf);DY=n(bEe,"STRONG",{});var H$r=s(DY);QNe=r(H$r,"data2vec-audio"),H$r.forEach(t),WNe=r(bEe," \u2014 "),z9=n(bEe,"A",{href:!0});var U$r=s(z9);HNe=r(U$r,"Data2VecAudioConfig"),U$r.forEach(t),UNe=r(bEe," (Data2VecAudio model)"),bEe.forEach(t),JNe=i(F),lf=n(F,"LI",{});var vEe=s(lf);GY=n(vEe,"STRONG",{});var J$r=s(GY);YNe=r(J$r,"data2vec-text"),J$r.forEach(t),KNe=r(vEe," \u2014 "),Q9=n(vEe,"A",{href:!0});var Y$r=s(Q9);ZNe=r(Y$r,"Data2VecTextConfig"),Y$r.forEach(t),eje=r(vEe," (Data2VecText model)"),vEe.forEach(t),oje=i(F),df=n(F,"LI",{});var FEe=s(df);OY=n(FEe,"STRONG",{});var K$r=s(OY);rje=r(K$r,"data2vec-vision"),K$r.forEach(t),tje=r(FEe," \u2014 "),W9=n(FEe,"A",{href:!0});var Z$r=s(W9);aje=r(Z$r,"Data2VecVisionConfig"),Z$r.forEach(t),nje=r(FEe," (Data2VecVision model)"),FEe.forEach(t),sje=i(F),cf=n(F,"LI",{});var TEe=s(cf);VY=n(TEe,"STRONG",{});var eIr=s(VY);lje=r(eIr,"deberta"),eIr.forEach(t),ije=r(TEe," \u2014 "),H9=n(TEe,"A",{href:!0});var oIr=s(H9);dje=r(oIr,"DebertaConfig"),oIr.forEach(t),cje=r(TEe," (DeBERTa model)"),TEe.forEach(t),mje=i(F),mf=n(F,"LI",{});var MEe=s(mf);XY=n(MEe,"STRONG",{});var rIr=s(XY);fje=r(rIr,"deberta-v2"),rIr.forEach(t),gje=r(MEe," \u2014 "),U9=n(MEe,"A",{href:!0});var tIr=s(U9);hje=r(tIr,"DebertaV2Config"),tIr.forEach(t),uje=r(MEe," (DeBERTa-v2 model)"),MEe.forEach(t),pje=i(F),ff=n(F,"LI",{});var EEe=s(ff);zY=n(EEe,"STRONG",{});var aIr=s(zY);_je=r(aIr,"decision_transformer"),aIr.forEach(t),bje=r(EEe," \u2014 "),J9=n(EEe,"A",{href:!0});var nIr=s(J9);vje=r(nIr,"DecisionTransformerConfig"),nIr.forEach(t),Fje=r(EEe," (Decision Transformer model)"),EEe.forEach(t),Tje=i(F),gf=n(F,"LI",{});var CEe=s(gf);QY=n(CEe,"STRONG",{});var sIr=s(QY);Mje=r(sIr,"deit"),sIr.forEach(t),Eje=r(CEe," \u2014 "),Y9=n(CEe,"A",{href:!0});var lIr=s(Y9);Cje=r(lIr,"DeiTConfig"),lIr.forEach(t),wje=r(CEe," (DeiT model)"),CEe.forEach(t),Aje=i(F),hf=n(F,"LI",{});var wEe=s(hf);WY=n(wEe,"STRONG",{});var iIr=s(WY);yje=r(iIr,"detr"),iIr.forEach(t),Lje=r(wEe," \u2014 "),K9=n(wEe,"A",{href:!0});var dIr=s(K9);xje=r(dIr,"DetrConfig"),dIr.forEach(t),kje=r(wEe," (DETR model)"),wEe.forEach(t),Sje=i(F),uf=n(F,"LI",{});var AEe=s(uf);HY=n(AEe,"STRONG",{});var cIr=s(HY);Rje=r(cIr,"distilbert"),cIr.forEach(t),Bje=r(AEe," \u2014 "),Z9=n(AEe,"A",{href:!0});var mIr=s(Z9);Pje=r(mIr,"DistilBertConfig"),mIr.forEach(t),$je=r(AEe," (DistilBERT model)"),AEe.forEach(t),Ije=i(F),pf=n(F,"LI",{});var yEe=s(pf);UY=n(yEe,"STRONG",{});var fIr=s(UY);qje=r(fIr,"dpr"),fIr.forEach(t),Nje=r(yEe," \u2014 "),ex=n(yEe,"A",{href:!0});var gIr=s(ex);jje=r(gIr,"DPRConfig"),gIr.forEach(t),Dje=r(yEe," (DPR model)"),yEe.forEach(t),Gje=i(F),_f=n(F,"LI",{});var LEe=s(_f);JY=n(LEe,"STRONG",{});var hIr=s(JY);Oje=r(hIr,"dpt"),hIr.forEach(t),Vje=r(LEe," \u2014 "),ox=n(LEe,"A",{href:!0});var uIr=s(ox);Xje=r(uIr,"DPTConfig"),uIr.forEach(t),zje=r(LEe," (DPT model)"),LEe.forEach(t),Qje=i(F),bf=n(F,"LI",{});var xEe=s(bf);YY=n(xEe,"STRONG",{});var pIr=s(YY);Wje=r(pIr,"electra"),pIr.forEach(t),Hje=r(xEe," \u2014 "),rx=n(xEe,"A",{href:!0});var _Ir=s(rx);Uje=r(_Ir,"ElectraConfig"),_Ir.forEach(t),Jje=r(xEe," (ELECTRA model)"),xEe.forEach(t),Yje=i(F),vf=n(F,"LI",{});var kEe=s(vf);KY=n(kEe,"STRONG",{});var bIr=s(KY);Kje=r(bIr,"encoder-decoder"),bIr.forEach(t),Zje=r(kEe," \u2014 "),tx=n(kEe,"A",{href:!0});var vIr=s(tx);eDe=r(vIr,"EncoderDecoderConfig"),vIr.forEach(t),oDe=r(kEe," (Encoder decoder model)"),kEe.forEach(t),rDe=i(F),Ff=n(F,"LI",{});var SEe=s(Ff);ZY=n(SEe,"STRONG",{});var FIr=s(ZY);tDe=r(FIr,"flaubert"),FIr.forEach(t),aDe=r(SEe," \u2014 "),ax=n(SEe,"A",{href:!0});var TIr=s(ax);nDe=r(TIr,"FlaubertConfig"),TIr.forEach(t),sDe=r(SEe," (FlauBERT model)"),SEe.forEach(t),lDe=i(F),Tf=n(F,"LI",{});var REe=s(Tf);eK=n(REe,"STRONG",{});var MIr=s(eK);iDe=r(MIr,"fnet"),MIr.forEach(t),dDe=r(REe," \u2014 "),nx=n(REe,"A",{href:!0});var EIr=s(nx);cDe=r(EIr,"FNetConfig"),EIr.forEach(t),mDe=r(REe," (FNet model)"),REe.forEach(t),fDe=i(F),Mf=n(F,"LI",{});var BEe=s(Mf);oK=n(BEe,"STRONG",{});var CIr=s(oK);gDe=r(CIr,"fsmt"),CIr.forEach(t),hDe=r(BEe," \u2014 "),sx=n(BEe,"A",{href:!0});var wIr=s(sx);uDe=r(wIr,"FSMTConfig"),wIr.forEach(t),pDe=r(BEe," (FairSeq Machine-Translation model)"),BEe.forEach(t),_De=i(F),Ef=n(F,"LI",{});var PEe=s(Ef);rK=n(PEe,"STRONG",{});var AIr=s(rK);bDe=r(AIr,"funnel"),AIr.forEach(t),vDe=r(PEe," \u2014 "),lx=n(PEe,"A",{href:!0});var yIr=s(lx);FDe=r(yIr,"FunnelConfig"),yIr.forEach(t),TDe=r(PEe," (Funnel Transformer model)"),PEe.forEach(t),MDe=i(F),Cf=n(F,"LI",{});var $Ee=s(Cf);tK=n($Ee,"STRONG",{});var LIr=s(tK);EDe=r(LIr,"glpn"),LIr.forEach(t),CDe=r($Ee," \u2014 "),ix=n($Ee,"A",{href:!0});var xIr=s(ix);wDe=r(xIr,"GLPNConfig"),xIr.forEach(t),ADe=r($Ee," (GLPN model)"),$Ee.forEach(t),yDe=i(F),wf=n(F,"LI",{});var IEe=s(wf);aK=n(IEe,"STRONG",{});var kIr=s(aK);LDe=r(kIr,"gpt2"),kIr.forEach(t),xDe=r(IEe," \u2014 "),dx=n(IEe,"A",{href:!0});var SIr=s(dx);kDe=r(SIr,"GPT2Config"),SIr.forEach(t),SDe=r(IEe," (OpenAI GPT-2 model)"),IEe.forEach(t),RDe=i(F),Af=n(F,"LI",{});var qEe=s(Af);nK=n(qEe,"STRONG",{});var RIr=s(nK);BDe=r(RIr,"gpt_neo"),RIr.forEach(t),PDe=r(qEe," \u2014 "),cx=n(qEe,"A",{href:!0});var BIr=s(cx);$De=r(BIr,"GPTNeoConfig"),BIr.forEach(t),IDe=r(qEe," (GPT Neo model)"),qEe.forEach(t),qDe=i(F),yf=n(F,"LI",{});var NEe=s(yf);sK=n(NEe,"STRONG",{});var PIr=s(sK);NDe=r(PIr,"gptj"),PIr.forEach(t),jDe=r(NEe," \u2014 "),mx=n(NEe,"A",{href:!0});var $Ir=s(mx);DDe=r($Ir,"GPTJConfig"),$Ir.forEach(t),GDe=r(NEe," (GPT-J model)"),NEe.forEach(t),ODe=i(F),Lf=n(F,"LI",{});var jEe=s(Lf);lK=n(jEe,"STRONG",{});var IIr=s(lK);VDe=r(IIr,"hubert"),IIr.forEach(t),XDe=r(jEe," \u2014 "),fx=n(jEe,"A",{href:!0});var qIr=s(fx);zDe=r(qIr,"HubertConfig"),qIr.forEach(t),QDe=r(jEe," (Hubert model)"),jEe.forEach(t),WDe=i(F),xf=n(F,"LI",{});var DEe=s(xf);iK=n(DEe,"STRONG",{});var NIr=s(iK);HDe=r(NIr,"ibert"),NIr.forEach(t),UDe=r(DEe," \u2014 "),gx=n(DEe,"A",{href:!0});var jIr=s(gx);JDe=r(jIr,"IBertConfig"),jIr.forEach(t),YDe=r(DEe," (I-BERT model)"),DEe.forEach(t),KDe=i(F),kf=n(F,"LI",{});var GEe=s(kf);dK=n(GEe,"STRONG",{});var DIr=s(dK);ZDe=r(DIr,"imagegpt"),DIr.forEach(t),eGe=r(GEe," \u2014 "),hx=n(GEe,"A",{href:!0});var GIr=s(hx);oGe=r(GIr,"ImageGPTConfig"),GIr.forEach(t),rGe=r(GEe," (ImageGPT model)"),GEe.forEach(t),tGe=i(F),Sf=n(F,"LI",{});var OEe=s(Sf);cK=n(OEe,"STRONG",{});var OIr=s(cK);aGe=r(OIr,"layoutlm"),OIr.forEach(t),nGe=r(OEe," \u2014 "),ux=n(OEe,"A",{href:!0});var VIr=s(ux);sGe=r(VIr,"LayoutLMConfig"),VIr.forEach(t),lGe=r(OEe," (LayoutLM model)"),OEe.forEach(t),iGe=i(F),Rf=n(F,"LI",{});var VEe=s(Rf);mK=n(VEe,"STRONG",{});var XIr=s(mK);dGe=r(XIr,"layoutlmv2"),XIr.forEach(t),cGe=r(VEe," \u2014 "),px=n(VEe,"A",{href:!0});var zIr=s(px);mGe=r(zIr,"LayoutLMv2Config"),zIr.forEach(t),fGe=r(VEe," (LayoutLMv2 model)"),VEe.forEach(t),gGe=i(F),Bf=n(F,"LI",{});var XEe=s(Bf);fK=n(XEe,"STRONG",{});var QIr=s(fK);hGe=r(QIr,"led"),QIr.forEach(t),uGe=r(XEe," \u2014 "),_x=n(XEe,"A",{href:!0});var WIr=s(_x);pGe=r(WIr,"LEDConfig"),WIr.forEach(t),_Ge=r(XEe," (LED model)"),XEe.forEach(t),bGe=i(F),Pf=n(F,"LI",{});var zEe=s(Pf);gK=n(zEe,"STRONG",{});var HIr=s(gK);vGe=r(HIr,"longformer"),HIr.forEach(t),FGe=r(zEe," \u2014 "),bx=n(zEe,"A",{href:!0});var UIr=s(bx);TGe=r(UIr,"LongformerConfig"),UIr.forEach(t),MGe=r(zEe," (Longformer model)"),zEe.forEach(t),EGe=i(F),$f=n(F,"LI",{});var QEe=s($f);hK=n(QEe,"STRONG",{});var JIr=s(hK);CGe=r(JIr,"luke"),JIr.forEach(t),wGe=r(QEe," \u2014 "),vx=n(QEe,"A",{href:!0});var YIr=s(vx);AGe=r(YIr,"LukeConfig"),YIr.forEach(t),yGe=r(QEe," (LUKE model)"),QEe.forEach(t),LGe=i(F),If=n(F,"LI",{});var WEe=s(If);uK=n(WEe,"STRONG",{});var KIr=s(uK);xGe=r(KIr,"lxmert"),KIr.forEach(t),kGe=r(WEe," \u2014 "),Fx=n(WEe,"A",{href:!0});var ZIr=s(Fx);SGe=r(ZIr,"LxmertConfig"),ZIr.forEach(t),RGe=r(WEe," (LXMERT model)"),WEe.forEach(t),BGe=i(F),qf=n(F,"LI",{});var HEe=s(qf);pK=n(HEe,"STRONG",{});var eqr=s(pK);PGe=r(eqr,"m2m_100"),eqr.forEach(t),$Ge=r(HEe," \u2014 "),Tx=n(HEe,"A",{href:!0});var oqr=s(Tx);IGe=r(oqr,"M2M100Config"),oqr.forEach(t),qGe=r(HEe," (M2M100 model)"),HEe.forEach(t),NGe=i(F),Nf=n(F,"LI",{});var UEe=s(Nf);_K=n(UEe,"STRONG",{});var rqr=s(_K);jGe=r(rqr,"marian"),rqr.forEach(t),DGe=r(UEe," \u2014 "),Mx=n(UEe,"A",{href:!0});var tqr=s(Mx);GGe=r(tqr,"MarianConfig"),tqr.forEach(t),OGe=r(UEe," (Marian model)"),UEe.forEach(t),VGe=i(F),jf=n(F,"LI",{});var JEe=s(jf);bK=n(JEe,"STRONG",{});var aqr=s(bK);XGe=r(aqr,"maskformer"),aqr.forEach(t),zGe=r(JEe," \u2014 "),Ex=n(JEe,"A",{href:!0});var nqr=s(Ex);QGe=r(nqr,"MaskFormerConfig"),nqr.forEach(t),WGe=r(JEe," (MaskFormer model)"),JEe.forEach(t),HGe=i(F),Df=n(F,"LI",{});var YEe=s(Df);vK=n(YEe,"STRONG",{});var sqr=s(vK);UGe=r(sqr,"mbart"),sqr.forEach(t),JGe=r(YEe," \u2014 "),Cx=n(YEe,"A",{href:!0});var lqr=s(Cx);YGe=r(lqr,"MBartConfig"),lqr.forEach(t),KGe=r(YEe," (mBART model)"),YEe.forEach(t),ZGe=i(F),Gf=n(F,"LI",{});var KEe=s(Gf);FK=n(KEe,"STRONG",{});var iqr=s(FK);eOe=r(iqr,"megatron-bert"),iqr.forEach(t),oOe=r(KEe," \u2014 "),wx=n(KEe,"A",{href:!0});var dqr=s(wx);rOe=r(dqr,"MegatronBertConfig"),dqr.forEach(t),tOe=r(KEe," (MegatronBert model)"),KEe.forEach(t),aOe=i(F),Of=n(F,"LI",{});var ZEe=s(Of);TK=n(ZEe,"STRONG",{});var cqr=s(TK);nOe=r(cqr,"mobilebert"),cqr.forEach(t),sOe=r(ZEe," \u2014 "),Ax=n(ZEe,"A",{href:!0});var mqr=s(Ax);lOe=r(mqr,"MobileBertConfig"),mqr.forEach(t),iOe=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),dOe=i(F),Vf=n(F,"LI",{});var e5e=s(Vf);MK=n(e5e,"STRONG",{});var fqr=s(MK);cOe=r(fqr,"mpnet"),fqr.forEach(t),mOe=r(e5e," \u2014 "),yx=n(e5e,"A",{href:!0});var gqr=s(yx);fOe=r(gqr,"MPNetConfig"),gqr.forEach(t),gOe=r(e5e," (MPNet model)"),e5e.forEach(t),hOe=i(F),Xf=n(F,"LI",{});var o5e=s(Xf);EK=n(o5e,"STRONG",{});var hqr=s(EK);uOe=r(hqr,"mt5"),hqr.forEach(t),pOe=r(o5e," \u2014 "),Lx=n(o5e,"A",{href:!0});var uqr=s(Lx);_Oe=r(uqr,"MT5Config"),uqr.forEach(t),bOe=r(o5e," (mT5 model)"),o5e.forEach(t),vOe=i(F),zf=n(F,"LI",{});var r5e=s(zf);CK=n(r5e,"STRONG",{});var pqr=s(CK);FOe=r(pqr,"nystromformer"),pqr.forEach(t),TOe=r(r5e," \u2014 "),xx=n(r5e,"A",{href:!0});var _qr=s(xx);MOe=r(_qr,"NystromformerConfig"),_qr.forEach(t),EOe=r(r5e," (Nystromformer model)"),r5e.forEach(t),COe=i(F),Qf=n(F,"LI",{});var t5e=s(Qf);wK=n(t5e,"STRONG",{});var bqr=s(wK);wOe=r(bqr,"openai-gpt"),bqr.forEach(t),AOe=r(t5e," \u2014 "),kx=n(t5e,"A",{href:!0});var vqr=s(kx);yOe=r(vqr,"OpenAIGPTConfig"),vqr.forEach(t),LOe=r(t5e," (OpenAI GPT model)"),t5e.forEach(t),xOe=i(F),Wf=n(F,"LI",{});var a5e=s(Wf);AK=n(a5e,"STRONG",{});var Fqr=s(AK);kOe=r(Fqr,"pegasus"),Fqr.forEach(t),SOe=r(a5e," \u2014 "),Sx=n(a5e,"A",{href:!0});var Tqr=s(Sx);ROe=r(Tqr,"PegasusConfig"),Tqr.forEach(t),BOe=r(a5e," (Pegasus model)"),a5e.forEach(t),POe=i(F),Hf=n(F,"LI",{});var n5e=s(Hf);yK=n(n5e,"STRONG",{});var Mqr=s(yK);$Oe=r(Mqr,"perceiver"),Mqr.forEach(t),IOe=r(n5e," \u2014 "),Rx=n(n5e,"A",{href:!0});var Eqr=s(Rx);qOe=r(Eqr,"PerceiverConfig"),Eqr.forEach(t),NOe=r(n5e," (Perceiver model)"),n5e.forEach(t),jOe=i(F),Uf=n(F,"LI",{});var s5e=s(Uf);LK=n(s5e,"STRONG",{});var Cqr=s(LK);DOe=r(Cqr,"plbart"),Cqr.forEach(t),GOe=r(s5e," \u2014 "),Bx=n(s5e,"A",{href:!0});var wqr=s(Bx);OOe=r(wqr,"PLBartConfig"),wqr.forEach(t),VOe=r(s5e," (PLBart model)"),s5e.forEach(t),XOe=i(F),Jf=n(F,"LI",{});var l5e=s(Jf);xK=n(l5e,"STRONG",{});var Aqr=s(xK);zOe=r(Aqr,"poolformer"),Aqr.forEach(t),QOe=r(l5e," \u2014 "),Px=n(l5e,"A",{href:!0});var yqr=s(Px);WOe=r(yqr,"PoolFormerConfig"),yqr.forEach(t),HOe=r(l5e," (PoolFormer model)"),l5e.forEach(t),UOe=i(F),Yf=n(F,"LI",{});var i5e=s(Yf);kK=n(i5e,"STRONG",{});var Lqr=s(kK);JOe=r(Lqr,"prophetnet"),Lqr.forEach(t),YOe=r(i5e," \u2014 "),$x=n(i5e,"A",{href:!0});var xqr=s($x);KOe=r(xqr,"ProphetNetConfig"),xqr.forEach(t),ZOe=r(i5e," (ProphetNet model)"),i5e.forEach(t),eVe=i(F),Kf=n(F,"LI",{});var d5e=s(Kf);SK=n(d5e,"STRONG",{});var kqr=s(SK);oVe=r(kqr,"qdqbert"),kqr.forEach(t),rVe=r(d5e," \u2014 "),Ix=n(d5e,"A",{href:!0});var Sqr=s(Ix);tVe=r(Sqr,"QDQBertConfig"),Sqr.forEach(t),aVe=r(d5e," (QDQBert model)"),d5e.forEach(t),nVe=i(F),Zf=n(F,"LI",{});var c5e=s(Zf);RK=n(c5e,"STRONG",{});var Rqr=s(RK);sVe=r(Rqr,"rag"),Rqr.forEach(t),lVe=r(c5e," \u2014 "),qx=n(c5e,"A",{href:!0});var Bqr=s(qx);iVe=r(Bqr,"RagConfig"),Bqr.forEach(t),dVe=r(c5e," (RAG model)"),c5e.forEach(t),cVe=i(F),eg=n(F,"LI",{});var m5e=s(eg);BK=n(m5e,"STRONG",{});var Pqr=s(BK);mVe=r(Pqr,"realm"),Pqr.forEach(t),fVe=r(m5e," \u2014 "),Nx=n(m5e,"A",{href:!0});var $qr=s(Nx);gVe=r($qr,"RealmConfig"),$qr.forEach(t),hVe=r(m5e," (Realm model)"),m5e.forEach(t),uVe=i(F),og=n(F,"LI",{});var f5e=s(og);PK=n(f5e,"STRONG",{});var Iqr=s(PK);pVe=r(Iqr,"reformer"),Iqr.forEach(t),_Ve=r(f5e," \u2014 "),jx=n(f5e,"A",{href:!0});var qqr=s(jx);bVe=r(qqr,"ReformerConfig"),qqr.forEach(t),vVe=r(f5e," (Reformer model)"),f5e.forEach(t),FVe=i(F),rg=n(F,"LI",{});var g5e=s(rg);$K=n(g5e,"STRONG",{});var Nqr=s($K);TVe=r(Nqr,"regnet"),Nqr.forEach(t),MVe=r(g5e," \u2014 "),Dx=n(g5e,"A",{href:!0});var jqr=s(Dx);EVe=r(jqr,"RegNetConfig"),jqr.forEach(t),CVe=r(g5e," (RegNet model)"),g5e.forEach(t),wVe=i(F),tg=n(F,"LI",{});var h5e=s(tg);IK=n(h5e,"STRONG",{});var Dqr=s(IK);AVe=r(Dqr,"rembert"),Dqr.forEach(t),yVe=r(h5e," \u2014 "),Gx=n(h5e,"A",{href:!0});var Gqr=s(Gx);LVe=r(Gqr,"RemBertConfig"),Gqr.forEach(t),xVe=r(h5e," (RemBERT model)"),h5e.forEach(t),kVe=i(F),ag=n(F,"LI",{});var u5e=s(ag);qK=n(u5e,"STRONG",{});var Oqr=s(qK);SVe=r(Oqr,"resnet"),Oqr.forEach(t),RVe=r(u5e," \u2014 "),Ox=n(u5e,"A",{href:!0});var Vqr=s(Ox);BVe=r(Vqr,"ResNetConfig"),Vqr.forEach(t),PVe=r(u5e," (ResNet model)"),u5e.forEach(t),$Ve=i(F),ng=n(F,"LI",{});var p5e=s(ng);NK=n(p5e,"STRONG",{});var Xqr=s(NK);IVe=r(Xqr,"retribert"),Xqr.forEach(t),qVe=r(p5e," \u2014 "),Vx=n(p5e,"A",{href:!0});var zqr=s(Vx);NVe=r(zqr,"RetriBertConfig"),zqr.forEach(t),jVe=r(p5e," (RetriBERT model)"),p5e.forEach(t),DVe=i(F),sg=n(F,"LI",{});var _5e=s(sg);jK=n(_5e,"STRONG",{});var Qqr=s(jK);GVe=r(Qqr,"roberta"),Qqr.forEach(t),OVe=r(_5e," \u2014 "),Xx=n(_5e,"A",{href:!0});var Wqr=s(Xx);VVe=r(Wqr,"RobertaConfig"),Wqr.forEach(t),XVe=r(_5e," (RoBERTa model)"),_5e.forEach(t),zVe=i(F),lg=n(F,"LI",{});var b5e=s(lg);DK=n(b5e,"STRONG",{});var Hqr=s(DK);QVe=r(Hqr,"roformer"),Hqr.forEach(t),WVe=r(b5e," \u2014 "),zx=n(b5e,"A",{href:!0});var Uqr=s(zx);HVe=r(Uqr,"RoFormerConfig"),Uqr.forEach(t),UVe=r(b5e," (RoFormer model)"),b5e.forEach(t),JVe=i(F),ig=n(F,"LI",{});var v5e=s(ig);GK=n(v5e,"STRONG",{});var Jqr=s(GK);YVe=r(Jqr,"segformer"),Jqr.forEach(t),KVe=r(v5e," \u2014 "),Qx=n(v5e,"A",{href:!0});var Yqr=s(Qx);ZVe=r(Yqr,"SegformerConfig"),Yqr.forEach(t),eXe=r(v5e," (SegFormer model)"),v5e.forEach(t),oXe=i(F),dg=n(F,"LI",{});var F5e=s(dg);OK=n(F5e,"STRONG",{});var Kqr=s(OK);rXe=r(Kqr,"sew"),Kqr.forEach(t),tXe=r(F5e," \u2014 "),Wx=n(F5e,"A",{href:!0});var Zqr=s(Wx);aXe=r(Zqr,"SEWConfig"),Zqr.forEach(t),nXe=r(F5e," (SEW model)"),F5e.forEach(t),sXe=i(F),cg=n(F,"LI",{});var T5e=s(cg);VK=n(T5e,"STRONG",{});var eNr=s(VK);lXe=r(eNr,"sew-d"),eNr.forEach(t),iXe=r(T5e," \u2014 "),Hx=n(T5e,"A",{href:!0});var oNr=s(Hx);dXe=r(oNr,"SEWDConfig"),oNr.forEach(t),cXe=r(T5e," (SEW-D model)"),T5e.forEach(t),mXe=i(F),mg=n(F,"LI",{});var M5e=s(mg);XK=n(M5e,"STRONG",{});var rNr=s(XK);fXe=r(rNr,"speech-encoder-decoder"),rNr.forEach(t),gXe=r(M5e," \u2014 "),Ux=n(M5e,"A",{href:!0});var tNr=s(Ux);hXe=r(tNr,"SpeechEncoderDecoderConfig"),tNr.forEach(t),uXe=r(M5e," (Speech Encoder decoder model)"),M5e.forEach(t),pXe=i(F),fg=n(F,"LI",{});var E5e=s(fg);zK=n(E5e,"STRONG",{});var aNr=s(zK);_Xe=r(aNr,"speech_to_text"),aNr.forEach(t),bXe=r(E5e," \u2014 "),Jx=n(E5e,"A",{href:!0});var nNr=s(Jx);vXe=r(nNr,"Speech2TextConfig"),nNr.forEach(t),FXe=r(E5e," (Speech2Text model)"),E5e.forEach(t),TXe=i(F),gg=n(F,"LI",{});var C5e=s(gg);QK=n(C5e,"STRONG",{});var sNr=s(QK);MXe=r(sNr,"speech_to_text_2"),sNr.forEach(t),EXe=r(C5e," \u2014 "),Yx=n(C5e,"A",{href:!0});var lNr=s(Yx);CXe=r(lNr,"Speech2Text2Config"),lNr.forEach(t),wXe=r(C5e," (Speech2Text2 model)"),C5e.forEach(t),AXe=i(F),hg=n(F,"LI",{});var w5e=s(hg);WK=n(w5e,"STRONG",{});var iNr=s(WK);yXe=r(iNr,"splinter"),iNr.forEach(t),LXe=r(w5e," \u2014 "),Kx=n(w5e,"A",{href:!0});var dNr=s(Kx);xXe=r(dNr,"SplinterConfig"),dNr.forEach(t),kXe=r(w5e," (Splinter model)"),w5e.forEach(t),SXe=i(F),ug=n(F,"LI",{});var A5e=s(ug);HK=n(A5e,"STRONG",{});var cNr=s(HK);RXe=r(cNr,"squeezebert"),cNr.forEach(t),BXe=r(A5e," \u2014 "),Zx=n(A5e,"A",{href:!0});var mNr=s(Zx);PXe=r(mNr,"SqueezeBertConfig"),mNr.forEach(t),$Xe=r(A5e," (SqueezeBERT model)"),A5e.forEach(t),IXe=i(F),pg=n(F,"LI",{});var y5e=s(pg);UK=n(y5e,"STRONG",{});var fNr=s(UK);qXe=r(fNr,"swin"),fNr.forEach(t),NXe=r(y5e," \u2014 "),ek=n(y5e,"A",{href:!0});var gNr=s(ek);jXe=r(gNr,"SwinConfig"),gNr.forEach(t),DXe=r(y5e," (Swin model)"),y5e.forEach(t),GXe=i(F),_g=n(F,"LI",{});var L5e=s(_g);JK=n(L5e,"STRONG",{});var hNr=s(JK);OXe=r(hNr,"t5"),hNr.forEach(t),VXe=r(L5e," \u2014 "),ok=n(L5e,"A",{href:!0});var uNr=s(ok);XXe=r(uNr,"T5Config"),uNr.forEach(t),zXe=r(L5e," (T5 model)"),L5e.forEach(t),QXe=i(F),bg=n(F,"LI",{});var x5e=s(bg);YK=n(x5e,"STRONG",{});var pNr=s(YK);WXe=r(pNr,"tapas"),pNr.forEach(t),HXe=r(x5e," \u2014 "),rk=n(x5e,"A",{href:!0});var _Nr=s(rk);UXe=r(_Nr,"TapasConfig"),_Nr.forEach(t),JXe=r(x5e," (TAPAS model)"),x5e.forEach(t),YXe=i(F),vg=n(F,"LI",{});var k5e=s(vg);KK=n(k5e,"STRONG",{});var bNr=s(KK);KXe=r(bNr,"tapex"),bNr.forEach(t),ZXe=r(k5e," \u2014 "),tk=n(k5e,"A",{href:!0});var vNr=s(tk);eze=r(vNr,"BartConfig"),vNr.forEach(t),oze=r(k5e," (TAPEX model)"),k5e.forEach(t),rze=i(F),Fg=n(F,"LI",{});var S5e=s(Fg);ZK=n(S5e,"STRONG",{});var FNr=s(ZK);tze=r(FNr,"transfo-xl"),FNr.forEach(t),aze=r(S5e," \u2014 "),ak=n(S5e,"A",{href:!0});var TNr=s(ak);nze=r(TNr,"TransfoXLConfig"),TNr.forEach(t),sze=r(S5e," (Transformer-XL model)"),S5e.forEach(t),lze=i(F),Tg=n(F,"LI",{});var R5e=s(Tg);eZ=n(R5e,"STRONG",{});var MNr=s(eZ);ize=r(MNr,"trocr"),MNr.forEach(t),dze=r(R5e," \u2014 "),nk=n(R5e,"A",{href:!0});var ENr=s(nk);cze=r(ENr,"TrOCRConfig"),ENr.forEach(t),mze=r(R5e," (TrOCR model)"),R5e.forEach(t),fze=i(F),Mg=n(F,"LI",{});var B5e=s(Mg);oZ=n(B5e,"STRONG",{});var CNr=s(oZ);gze=r(CNr,"unispeech"),CNr.forEach(t),hze=r(B5e," \u2014 "),sk=n(B5e,"A",{href:!0});var wNr=s(sk);uze=r(wNr,"UniSpeechConfig"),wNr.forEach(t),pze=r(B5e," (UniSpeech model)"),B5e.forEach(t),_ze=i(F),Eg=n(F,"LI",{});var P5e=s(Eg);rZ=n(P5e,"STRONG",{});var ANr=s(rZ);bze=r(ANr,"unispeech-sat"),ANr.forEach(t),vze=r(P5e," \u2014 "),lk=n(P5e,"A",{href:!0});var yNr=s(lk);Fze=r(yNr,"UniSpeechSatConfig"),yNr.forEach(t),Tze=r(P5e," (UniSpeechSat model)"),P5e.forEach(t),Mze=i(F),Cg=n(F,"LI",{});var $5e=s(Cg);tZ=n($5e,"STRONG",{});var LNr=s(tZ);Eze=r(LNr,"van"),LNr.forEach(t),Cze=r($5e," \u2014 "),ik=n($5e,"A",{href:!0});var xNr=s(ik);wze=r(xNr,"VanConfig"),xNr.forEach(t),Aze=r($5e," (VAN model)"),$5e.forEach(t),yze=i(F),wg=n(F,"LI",{});var I5e=s(wg);aZ=n(I5e,"STRONG",{});var kNr=s(aZ);Lze=r(kNr,"vilt"),kNr.forEach(t),xze=r(I5e," \u2014 "),dk=n(I5e,"A",{href:!0});var SNr=s(dk);kze=r(SNr,"ViltConfig"),SNr.forEach(t),Sze=r(I5e," (ViLT model)"),I5e.forEach(t),Rze=i(F),Ag=n(F,"LI",{});var q5e=s(Ag);nZ=n(q5e,"STRONG",{});var RNr=s(nZ);Bze=r(RNr,"vision-encoder-decoder"),RNr.forEach(t),Pze=r(q5e," \u2014 "),ck=n(q5e,"A",{href:!0});var BNr=s(ck);$ze=r(BNr,"VisionEncoderDecoderConfig"),BNr.forEach(t),Ize=r(q5e," (Vision Encoder decoder model)"),q5e.forEach(t),qze=i(F),yg=n(F,"LI",{});var N5e=s(yg);sZ=n(N5e,"STRONG",{});var PNr=s(sZ);Nze=r(PNr,"vision-text-dual-encoder"),PNr.forEach(t),jze=r(N5e," \u2014 "),mk=n(N5e,"A",{href:!0});var $Nr=s(mk);Dze=r($Nr,"VisionTextDualEncoderConfig"),$Nr.forEach(t),Gze=r(N5e," (VisionTextDualEncoder model)"),N5e.forEach(t),Oze=i(F),Lg=n(F,"LI",{});var j5e=s(Lg);lZ=n(j5e,"STRONG",{});var INr=s(lZ);Vze=r(INr,"visual_bert"),INr.forEach(t),Xze=r(j5e," \u2014 "),fk=n(j5e,"A",{href:!0});var qNr=s(fk);zze=r(qNr,"VisualBertConfig"),qNr.forEach(t),Qze=r(j5e," (VisualBert model)"),j5e.forEach(t),Wze=i(F),xg=n(F,"LI",{});var D5e=s(xg);iZ=n(D5e,"STRONG",{});var NNr=s(iZ);Hze=r(NNr,"vit"),NNr.forEach(t),Uze=r(D5e," \u2014 "),gk=n(D5e,"A",{href:!0});var jNr=s(gk);Jze=r(jNr,"ViTConfig"),jNr.forEach(t),Yze=r(D5e," (ViT model)"),D5e.forEach(t),Kze=i(F),kg=n(F,"LI",{});var G5e=s(kg);dZ=n(G5e,"STRONG",{});var DNr=s(dZ);Zze=r(DNr,"vit_mae"),DNr.forEach(t),eQe=r(G5e," \u2014 "),hk=n(G5e,"A",{href:!0});var GNr=s(hk);oQe=r(GNr,"ViTMAEConfig"),GNr.forEach(t),rQe=r(G5e," (ViTMAE model)"),G5e.forEach(t),tQe=i(F),Sg=n(F,"LI",{});var O5e=s(Sg);cZ=n(O5e,"STRONG",{});var ONr=s(cZ);aQe=r(ONr,"wav2vec2"),ONr.forEach(t),nQe=r(O5e," \u2014 "),uk=n(O5e,"A",{href:!0});var VNr=s(uk);sQe=r(VNr,"Wav2Vec2Config"),VNr.forEach(t),lQe=r(O5e," (Wav2Vec2 model)"),O5e.forEach(t),iQe=i(F),Rg=n(F,"LI",{});var V5e=s(Rg);mZ=n(V5e,"STRONG",{});var XNr=s(mZ);dQe=r(XNr,"wavlm"),XNr.forEach(t),cQe=r(V5e," \u2014 "),pk=n(V5e,"A",{href:!0});var zNr=s(pk);mQe=r(zNr,"WavLMConfig"),zNr.forEach(t),fQe=r(V5e," (WavLM model)"),V5e.forEach(t),gQe=i(F),Bg=n(F,"LI",{});var X5e=s(Bg);fZ=n(X5e,"STRONG",{});var QNr=s(fZ);hQe=r(QNr,"xglm"),QNr.forEach(t),uQe=r(X5e," \u2014 "),_k=n(X5e,"A",{href:!0});var WNr=s(_k);pQe=r(WNr,"XGLMConfig"),WNr.forEach(t),_Qe=r(X5e," (XGLM model)"),X5e.forEach(t),bQe=i(F),Pg=n(F,"LI",{});var z5e=s(Pg);gZ=n(z5e,"STRONG",{});var HNr=s(gZ);vQe=r(HNr,"xlm"),HNr.forEach(t),FQe=r(z5e," \u2014 "),bk=n(z5e,"A",{href:!0});var UNr=s(bk);TQe=r(UNr,"XLMConfig"),UNr.forEach(t),MQe=r(z5e," (XLM model)"),z5e.forEach(t),EQe=i(F),$g=n(F,"LI",{});var Q5e=s($g);hZ=n(Q5e,"STRONG",{});var JNr=s(hZ);CQe=r(JNr,"xlm-prophetnet"),JNr.forEach(t),wQe=r(Q5e," \u2014 "),vk=n(Q5e,"A",{href:!0});var YNr=s(vk);AQe=r(YNr,"XLMProphetNetConfig"),YNr.forEach(t),yQe=r(Q5e," (XLMProphetNet model)"),Q5e.forEach(t),LQe=i(F),Ig=n(F,"LI",{});var W5e=s(Ig);uZ=n(W5e,"STRONG",{});var KNr=s(uZ);xQe=r(KNr,"xlm-roberta"),KNr.forEach(t),kQe=r(W5e," \u2014 "),Fk=n(W5e,"A",{href:!0});var ZNr=s(Fk);SQe=r(ZNr,"XLMRobertaConfig"),ZNr.forEach(t),RQe=r(W5e," (XLM-RoBERTa model)"),W5e.forEach(t),BQe=i(F),qg=n(F,"LI",{});var H5e=s(qg);pZ=n(H5e,"STRONG",{});var ejr=s(pZ);PQe=r(ejr,"xlm-roberta-xl"),ejr.forEach(t),$Qe=r(H5e," \u2014 "),Tk=n(H5e,"A",{href:!0});var ojr=s(Tk);IQe=r(ojr,"XLMRobertaXLConfig"),ojr.forEach(t),qQe=r(H5e," (XLM-RoBERTa-XL model)"),H5e.forEach(t),NQe=i(F),Ng=n(F,"LI",{});var U5e=s(Ng);_Z=n(U5e,"STRONG",{});var rjr=s(_Z);jQe=r(rjr,"xlnet"),rjr.forEach(t),DQe=r(U5e," \u2014 "),Mk=n(U5e,"A",{href:!0});var tjr=s(Mk);GQe=r(tjr,"XLNetConfig"),tjr.forEach(t),OQe=r(U5e," (XLNet model)"),U5e.forEach(t),VQe=i(F),jg=n(F,"LI",{});var J5e=s(jg);bZ=n(J5e,"STRONG",{});var ajr=s(bZ);XQe=r(ajr,"yoso"),ajr.forEach(t),zQe=r(J5e," \u2014 "),Ek=n(J5e,"A",{href:!0});var njr=s(Ek);QQe=r(njr,"YosoConfig"),njr.forEach(t),WQe=r(J5e," (YOSO model)"),J5e.forEach(t),F.forEach(t),HQe=i(ga),vZ=n(ga,"P",{});var sjr=s(vZ);UQe=r(sjr,"Examples:"),sjr.forEach(t),JQe=i(ga),f(Dw.$$.fragment,ga),ga.forEach(t),YQe=i(zs),Dg=n(zs,"DIV",{class:!0});var QPe=s(Dg);f(Gw.$$.fragment,QPe),KQe=i(QPe),FZ=n(QPe,"P",{});var ljr=s(FZ);ZQe=r(ljr,"Register a new configuration for this class."),ljr.forEach(t),QPe.forEach(t),zs.forEach(t),XRe=i(c),Ui=n(c,"H2",{class:!0});var WPe=s(Ui);Gg=n(WPe,"A",{id:!0,class:!0,href:!0});var ijr=s(Gg);TZ=n(ijr,"SPAN",{});var djr=s(TZ);f(Ow.$$.fragment,djr),djr.forEach(t),ijr.forEach(t),eWe=i(WPe),MZ=n(WPe,"SPAN",{});var cjr=s(MZ);oWe=r(cjr,"AutoTokenizer"),cjr.forEach(t),WPe.forEach(t),zRe=i(c),Wo=n(c,"DIV",{class:!0});var Qs=s(Wo);f(Vw.$$.fragment,Qs),rWe=i(Qs),Xw=n(Qs,"P",{});var HPe=s(Xw);tWe=r(HPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ck=n(HPe,"A",{href:!0});var mjr=s(Ck);aWe=r(mjr,"AutoTokenizer.from_pretrained()"),mjr.forEach(t),nWe=r(HPe," class method."),HPe.forEach(t),sWe=i(Qs),zw=n(Qs,"P",{});var UPe=s(zw);lWe=r(UPe,"This class cannot be instantiated directly using "),EZ=n(UPe,"CODE",{});var fjr=s(EZ);iWe=r(fjr,"__init__()"),fjr.forEach(t),dWe=r(UPe," (throws an error)."),UPe.forEach(t),cWe=i(Qs),go=n(Qs,"DIV",{class:!0});var ha=s(go);f(Qw.$$.fragment,ha),mWe=i(ha),CZ=n(ha,"P",{});var gjr=s(CZ);fWe=r(gjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gjr.forEach(t),gWe=i(ha),Oa=n(ha,"P",{});var kC=s(Oa);hWe=r(kC,"The tokenizer class to instantiate is selected based on the "),wZ=n(kC,"CODE",{});var hjr=s(wZ);uWe=r(hjr,"model_type"),hjr.forEach(t),pWe=r(kC,` property of the config object (either
passed as an argument or loaded from `),AZ=n(kC,"CODE",{});var ujr=s(AZ);_We=r(ujr,"pretrained_model_name_or_path"),ujr.forEach(t),bWe=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yZ=n(kC,"CODE",{});var pjr=s(yZ);vWe=r(pjr,"pretrained_model_name_or_path"),pjr.forEach(t),FWe=r(kC,":"),kC.forEach(t),TWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var w7=s(Wn);LZ=n(w7,"STRONG",{});var _jr=s(LZ);MWe=r(_jr,"albert"),_jr.forEach(t),EWe=r(w7," \u2014 "),wk=n(w7,"A",{href:!0});var bjr=s(wk);CWe=r(bjr,"AlbertTokenizer"),bjr.forEach(t),wWe=r(w7," or "),Ak=n(w7,"A",{href:!0});var vjr=s(Ak);AWe=r(vjr,"AlbertTokenizerFast"),vjr.forEach(t),yWe=r(w7," (ALBERT model)"),w7.forEach(t),LWe=i(C),Hn=n(C,"LI",{});var A7=s(Hn);xZ=n(A7,"STRONG",{});var Fjr=s(xZ);xWe=r(Fjr,"bart"),Fjr.forEach(t),kWe=r(A7," \u2014 "),yk=n(A7,"A",{href:!0});var Tjr=s(yk);SWe=r(Tjr,"BartTokenizer"),Tjr.forEach(t),RWe=r(A7," or "),Lk=n(A7,"A",{href:!0});var Mjr=s(Lk);BWe=r(Mjr,"BartTokenizerFast"),Mjr.forEach(t),PWe=r(A7," (BART model)"),A7.forEach(t),$We=i(C),Un=n(C,"LI",{});var y7=s(Un);kZ=n(y7,"STRONG",{});var Ejr=s(kZ);IWe=r(Ejr,"barthez"),Ejr.forEach(t),qWe=r(y7," \u2014 "),xk=n(y7,"A",{href:!0});var Cjr=s(xk);NWe=r(Cjr,"BarthezTokenizer"),Cjr.forEach(t),jWe=r(y7," or "),kk=n(y7,"A",{href:!0});var wjr=s(kk);DWe=r(wjr,"BarthezTokenizerFast"),wjr.forEach(t),GWe=r(y7," (BARThez model)"),y7.forEach(t),OWe=i(C),Og=n(C,"LI",{});var Y5e=s(Og);SZ=n(Y5e,"STRONG",{});var Ajr=s(SZ);VWe=r(Ajr,"bartpho"),Ajr.forEach(t),XWe=r(Y5e," \u2014 "),Sk=n(Y5e,"A",{href:!0});var yjr=s(Sk);zWe=r(yjr,"BartphoTokenizer"),yjr.forEach(t),QWe=r(Y5e," (BARTpho model)"),Y5e.forEach(t),WWe=i(C),Jn=n(C,"LI",{});var L7=s(Jn);RZ=n(L7,"STRONG",{});var Ljr=s(RZ);HWe=r(Ljr,"bert"),Ljr.forEach(t),UWe=r(L7," \u2014 "),Rk=n(L7,"A",{href:!0});var xjr=s(Rk);JWe=r(xjr,"BertTokenizer"),xjr.forEach(t),YWe=r(L7," or "),Bk=n(L7,"A",{href:!0});var kjr=s(Bk);KWe=r(kjr,"BertTokenizerFast"),kjr.forEach(t),ZWe=r(L7," (BERT model)"),L7.forEach(t),eHe=i(C),Vg=n(C,"LI",{});var K5e=s(Vg);BZ=n(K5e,"STRONG",{});var Sjr=s(BZ);oHe=r(Sjr,"bert-generation"),Sjr.forEach(t),rHe=r(K5e," \u2014 "),Pk=n(K5e,"A",{href:!0});var Rjr=s(Pk);tHe=r(Rjr,"BertGenerationTokenizer"),Rjr.forEach(t),aHe=r(K5e," (Bert Generation model)"),K5e.forEach(t),nHe=i(C),Xg=n(C,"LI",{});var Z5e=s(Xg);PZ=n(Z5e,"STRONG",{});var Bjr=s(PZ);sHe=r(Bjr,"bert-japanese"),Bjr.forEach(t),lHe=r(Z5e," \u2014 "),$k=n(Z5e,"A",{href:!0});var Pjr=s($k);iHe=r(Pjr,"BertJapaneseTokenizer"),Pjr.forEach(t),dHe=r(Z5e," (BertJapanese model)"),Z5e.forEach(t),cHe=i(C),zg=n(C,"LI",{});var e3e=s(zg);$Z=n(e3e,"STRONG",{});var $jr=s($Z);mHe=r($jr,"bertweet"),$jr.forEach(t),fHe=r(e3e," \u2014 "),Ik=n(e3e,"A",{href:!0});var Ijr=s(Ik);gHe=r(Ijr,"BertweetTokenizer"),Ijr.forEach(t),hHe=r(e3e," (Bertweet model)"),e3e.forEach(t),uHe=i(C),Yn=n(C,"LI",{});var x7=s(Yn);IZ=n(x7,"STRONG",{});var qjr=s(IZ);pHe=r(qjr,"big_bird"),qjr.forEach(t),_He=r(x7," \u2014 "),qk=n(x7,"A",{href:!0});var Njr=s(qk);bHe=r(Njr,"BigBirdTokenizer"),Njr.forEach(t),vHe=r(x7," or "),Nk=n(x7,"A",{href:!0});var jjr=s(Nk);FHe=r(jjr,"BigBirdTokenizerFast"),jjr.forEach(t),THe=r(x7," (BigBird model)"),x7.forEach(t),MHe=i(C),Kn=n(C,"LI",{});var k7=s(Kn);qZ=n(k7,"STRONG",{});var Djr=s(qZ);EHe=r(Djr,"bigbird_pegasus"),Djr.forEach(t),CHe=r(k7," \u2014 "),jk=n(k7,"A",{href:!0});var Gjr=s(jk);wHe=r(Gjr,"PegasusTokenizer"),Gjr.forEach(t),AHe=r(k7," or "),Dk=n(k7,"A",{href:!0});var Ojr=s(Dk);yHe=r(Ojr,"PegasusTokenizerFast"),Ojr.forEach(t),LHe=r(k7," (BigBirdPegasus model)"),k7.forEach(t),xHe=i(C),Zn=n(C,"LI",{});var S7=s(Zn);NZ=n(S7,"STRONG",{});var Vjr=s(NZ);kHe=r(Vjr,"blenderbot"),Vjr.forEach(t),SHe=r(S7," \u2014 "),Gk=n(S7,"A",{href:!0});var Xjr=s(Gk);RHe=r(Xjr,"BlenderbotTokenizer"),Xjr.forEach(t),BHe=r(S7," or "),Ok=n(S7,"A",{href:!0});var zjr=s(Ok);PHe=r(zjr,"BlenderbotTokenizerFast"),zjr.forEach(t),$He=r(S7," (Blenderbot model)"),S7.forEach(t),IHe=i(C),Qg=n(C,"LI",{});var o3e=s(Qg);jZ=n(o3e,"STRONG",{});var Qjr=s(jZ);qHe=r(Qjr,"blenderbot-small"),Qjr.forEach(t),NHe=r(o3e," \u2014 "),Vk=n(o3e,"A",{href:!0});var Wjr=s(Vk);jHe=r(Wjr,"BlenderbotSmallTokenizer"),Wjr.forEach(t),DHe=r(o3e," (BlenderbotSmall model)"),o3e.forEach(t),GHe=i(C),Wg=n(C,"LI",{});var r3e=s(Wg);DZ=n(r3e,"STRONG",{});var Hjr=s(DZ);OHe=r(Hjr,"byt5"),Hjr.forEach(t),VHe=r(r3e," \u2014 "),Xk=n(r3e,"A",{href:!0});var Ujr=s(Xk);XHe=r(Ujr,"ByT5Tokenizer"),Ujr.forEach(t),zHe=r(r3e," (ByT5 model)"),r3e.forEach(t),QHe=i(C),es=n(C,"LI",{});var R7=s(es);GZ=n(R7,"STRONG",{});var Jjr=s(GZ);WHe=r(Jjr,"camembert"),Jjr.forEach(t),HHe=r(R7," \u2014 "),zk=n(R7,"A",{href:!0});var Yjr=s(zk);UHe=r(Yjr,"CamembertTokenizer"),Yjr.forEach(t),JHe=r(R7," or "),Qk=n(R7,"A",{href:!0});var Kjr=s(Qk);YHe=r(Kjr,"CamembertTokenizerFast"),Kjr.forEach(t),KHe=r(R7," (CamemBERT model)"),R7.forEach(t),ZHe=i(C),Hg=n(C,"LI",{});var t3e=s(Hg);OZ=n(t3e,"STRONG",{});var Zjr=s(OZ);eUe=r(Zjr,"canine"),Zjr.forEach(t),oUe=r(t3e," \u2014 "),Wk=n(t3e,"A",{href:!0});var eDr=s(Wk);rUe=r(eDr,"CanineTokenizer"),eDr.forEach(t),tUe=r(t3e," (Canine model)"),t3e.forEach(t),aUe=i(C),os=n(C,"LI",{});var B7=s(os);VZ=n(B7,"STRONG",{});var oDr=s(VZ);nUe=r(oDr,"clip"),oDr.forEach(t),sUe=r(B7," \u2014 "),Hk=n(B7,"A",{href:!0});var rDr=s(Hk);lUe=r(rDr,"CLIPTokenizer"),rDr.forEach(t),iUe=r(B7," or "),Uk=n(B7,"A",{href:!0});var tDr=s(Uk);dUe=r(tDr,"CLIPTokenizerFast"),tDr.forEach(t),cUe=r(B7," (CLIP model)"),B7.forEach(t),mUe=i(C),rs=n(C,"LI",{});var P7=s(rs);XZ=n(P7,"STRONG",{});var aDr=s(XZ);fUe=r(aDr,"convbert"),aDr.forEach(t),gUe=r(P7," \u2014 "),Jk=n(P7,"A",{href:!0});var nDr=s(Jk);hUe=r(nDr,"ConvBertTokenizer"),nDr.forEach(t),uUe=r(P7," or "),Yk=n(P7,"A",{href:!0});var sDr=s(Yk);pUe=r(sDr,"ConvBertTokenizerFast"),sDr.forEach(t),_Ue=r(P7," (ConvBERT model)"),P7.forEach(t),bUe=i(C),ts=n(C,"LI",{});var $7=s(ts);zZ=n($7,"STRONG",{});var lDr=s(zZ);vUe=r(lDr,"cpm"),lDr.forEach(t),FUe=r($7," \u2014 "),Kk=n($7,"A",{href:!0});var iDr=s(Kk);TUe=r(iDr,"CpmTokenizer"),iDr.forEach(t),MUe=r($7," or "),QZ=n($7,"CODE",{});var dDr=s(QZ);EUe=r(dDr,"CpmTokenizerFast"),dDr.forEach(t),CUe=r($7," (CPM model)"),$7.forEach(t),wUe=i(C),Ug=n(C,"LI",{});var a3e=s(Ug);WZ=n(a3e,"STRONG",{});var cDr=s(WZ);AUe=r(cDr,"ctrl"),cDr.forEach(t),yUe=r(a3e," \u2014 "),Zk=n(a3e,"A",{href:!0});var mDr=s(Zk);LUe=r(mDr,"CTRLTokenizer"),mDr.forEach(t),xUe=r(a3e," (CTRL model)"),a3e.forEach(t),kUe=i(C),as=n(C,"LI",{});var I7=s(as);HZ=n(I7,"STRONG",{});var fDr=s(HZ);SUe=r(fDr,"deberta"),fDr.forEach(t),RUe=r(I7," \u2014 "),eS=n(I7,"A",{href:!0});var gDr=s(eS);BUe=r(gDr,"DebertaTokenizer"),gDr.forEach(t),PUe=r(I7," or "),oS=n(I7,"A",{href:!0});var hDr=s(oS);$Ue=r(hDr,"DebertaTokenizerFast"),hDr.forEach(t),IUe=r(I7," (DeBERTa model)"),I7.forEach(t),qUe=i(C),ns=n(C,"LI",{});var q7=s(ns);UZ=n(q7,"STRONG",{});var uDr=s(UZ);NUe=r(uDr,"deberta-v2"),uDr.forEach(t),jUe=r(q7," \u2014 "),rS=n(q7,"A",{href:!0});var pDr=s(rS);DUe=r(pDr,"DebertaV2Tokenizer"),pDr.forEach(t),GUe=r(q7," or "),tS=n(q7,"A",{href:!0});var _Dr=s(tS);OUe=r(_Dr,"DebertaV2TokenizerFast"),_Dr.forEach(t),VUe=r(q7," (DeBERTa-v2 model)"),q7.forEach(t),XUe=i(C),ss=n(C,"LI",{});var N7=s(ss);JZ=n(N7,"STRONG",{});var bDr=s(JZ);zUe=r(bDr,"distilbert"),bDr.forEach(t),QUe=r(N7," \u2014 "),aS=n(N7,"A",{href:!0});var vDr=s(aS);WUe=r(vDr,"DistilBertTokenizer"),vDr.forEach(t),HUe=r(N7," or "),nS=n(N7,"A",{href:!0});var FDr=s(nS);UUe=r(FDr,"DistilBertTokenizerFast"),FDr.forEach(t),JUe=r(N7," (DistilBERT model)"),N7.forEach(t),YUe=i(C),ls=n(C,"LI",{});var j7=s(ls);YZ=n(j7,"STRONG",{});var TDr=s(YZ);KUe=r(TDr,"dpr"),TDr.forEach(t),ZUe=r(j7," \u2014 "),sS=n(j7,"A",{href:!0});var MDr=s(sS);eJe=r(MDr,"DPRQuestionEncoderTokenizer"),MDr.forEach(t),oJe=r(j7," or "),lS=n(j7,"A",{href:!0});var EDr=s(lS);rJe=r(EDr,"DPRQuestionEncoderTokenizerFast"),EDr.forEach(t),tJe=r(j7," (DPR model)"),j7.forEach(t),aJe=i(C),is=n(C,"LI",{});var D7=s(is);KZ=n(D7,"STRONG",{});var CDr=s(KZ);nJe=r(CDr,"electra"),CDr.forEach(t),sJe=r(D7," \u2014 "),iS=n(D7,"A",{href:!0});var wDr=s(iS);lJe=r(wDr,"ElectraTokenizer"),wDr.forEach(t),iJe=r(D7," or "),dS=n(D7,"A",{href:!0});var ADr=s(dS);dJe=r(ADr,"ElectraTokenizerFast"),ADr.forEach(t),cJe=r(D7," (ELECTRA model)"),D7.forEach(t),mJe=i(C),Jg=n(C,"LI",{});var n3e=s(Jg);ZZ=n(n3e,"STRONG",{});var yDr=s(ZZ);fJe=r(yDr,"flaubert"),yDr.forEach(t),gJe=r(n3e," \u2014 "),cS=n(n3e,"A",{href:!0});var LDr=s(cS);hJe=r(LDr,"FlaubertTokenizer"),LDr.forEach(t),uJe=r(n3e," (FlauBERT model)"),n3e.forEach(t),pJe=i(C),ds=n(C,"LI",{});var G7=s(ds);eee=n(G7,"STRONG",{});var xDr=s(eee);_Je=r(xDr,"fnet"),xDr.forEach(t),bJe=r(G7," \u2014 "),mS=n(G7,"A",{href:!0});var kDr=s(mS);vJe=r(kDr,"FNetTokenizer"),kDr.forEach(t),FJe=r(G7," or "),fS=n(G7,"A",{href:!0});var SDr=s(fS);TJe=r(SDr,"FNetTokenizerFast"),SDr.forEach(t),MJe=r(G7," (FNet model)"),G7.forEach(t),EJe=i(C),Yg=n(C,"LI",{});var s3e=s(Yg);oee=n(s3e,"STRONG",{});var RDr=s(oee);CJe=r(RDr,"fsmt"),RDr.forEach(t),wJe=r(s3e," \u2014 "),gS=n(s3e,"A",{href:!0});var BDr=s(gS);AJe=r(BDr,"FSMTTokenizer"),BDr.forEach(t),yJe=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),LJe=i(C),cs=n(C,"LI",{});var O7=s(cs);ree=n(O7,"STRONG",{});var PDr=s(ree);xJe=r(PDr,"funnel"),PDr.forEach(t),kJe=r(O7," \u2014 "),hS=n(O7,"A",{href:!0});var $Dr=s(hS);SJe=r($Dr,"FunnelTokenizer"),$Dr.forEach(t),RJe=r(O7," or "),uS=n(O7,"A",{href:!0});var IDr=s(uS);BJe=r(IDr,"FunnelTokenizerFast"),IDr.forEach(t),PJe=r(O7," (Funnel Transformer model)"),O7.forEach(t),$Je=i(C),ms=n(C,"LI",{});var V7=s(ms);tee=n(V7,"STRONG",{});var qDr=s(tee);IJe=r(qDr,"gpt2"),qDr.forEach(t),qJe=r(V7," \u2014 "),pS=n(V7,"A",{href:!0});var NDr=s(pS);NJe=r(NDr,"GPT2Tokenizer"),NDr.forEach(t),jJe=r(V7," or "),_S=n(V7,"A",{href:!0});var jDr=s(_S);DJe=r(jDr,"GPT2TokenizerFast"),jDr.forEach(t),GJe=r(V7," (OpenAI GPT-2 model)"),V7.forEach(t),OJe=i(C),fs=n(C,"LI",{});var X7=s(fs);aee=n(X7,"STRONG",{});var DDr=s(aee);VJe=r(DDr,"gpt_neo"),DDr.forEach(t),XJe=r(X7," \u2014 "),bS=n(X7,"A",{href:!0});var GDr=s(bS);zJe=r(GDr,"GPT2Tokenizer"),GDr.forEach(t),QJe=r(X7," or "),vS=n(X7,"A",{href:!0});var ODr=s(vS);WJe=r(ODr,"GPT2TokenizerFast"),ODr.forEach(t),HJe=r(X7," (GPT Neo model)"),X7.forEach(t),UJe=i(C),gs=n(C,"LI",{});var z7=s(gs);nee=n(z7,"STRONG",{});var VDr=s(nee);JJe=r(VDr,"gptj"),VDr.forEach(t),YJe=r(z7," \u2014 "),FS=n(z7,"A",{href:!0});var XDr=s(FS);KJe=r(XDr,"GPT2Tokenizer"),XDr.forEach(t),ZJe=r(z7," or "),TS=n(z7,"A",{href:!0});var zDr=s(TS);eYe=r(zDr,"GPT2TokenizerFast"),zDr.forEach(t),oYe=r(z7," (GPT-J model)"),z7.forEach(t),rYe=i(C),hs=n(C,"LI",{});var Q7=s(hs);see=n(Q7,"STRONG",{});var QDr=s(see);tYe=r(QDr,"herbert"),QDr.forEach(t),aYe=r(Q7," \u2014 "),MS=n(Q7,"A",{href:!0});var WDr=s(MS);nYe=r(WDr,"HerbertTokenizer"),WDr.forEach(t),sYe=r(Q7," or "),ES=n(Q7,"A",{href:!0});var HDr=s(ES);lYe=r(HDr,"HerbertTokenizerFast"),HDr.forEach(t),iYe=r(Q7," (HerBERT model)"),Q7.forEach(t),dYe=i(C),Kg=n(C,"LI",{});var l3e=s(Kg);lee=n(l3e,"STRONG",{});var UDr=s(lee);cYe=r(UDr,"hubert"),UDr.forEach(t),mYe=r(l3e," \u2014 "),CS=n(l3e,"A",{href:!0});var JDr=s(CS);fYe=r(JDr,"Wav2Vec2CTCTokenizer"),JDr.forEach(t),gYe=r(l3e," (Hubert model)"),l3e.forEach(t),hYe=i(C),us=n(C,"LI",{});var W7=s(us);iee=n(W7,"STRONG",{});var YDr=s(iee);uYe=r(YDr,"ibert"),YDr.forEach(t),pYe=r(W7," \u2014 "),wS=n(W7,"A",{href:!0});var KDr=s(wS);_Ye=r(KDr,"RobertaTokenizer"),KDr.forEach(t),bYe=r(W7," or "),AS=n(W7,"A",{href:!0});var ZDr=s(AS);vYe=r(ZDr,"RobertaTokenizerFast"),ZDr.forEach(t),FYe=r(W7," (I-BERT model)"),W7.forEach(t),TYe=i(C),ps=n(C,"LI",{});var H7=s(ps);dee=n(H7,"STRONG",{});var eGr=s(dee);MYe=r(eGr,"layoutlm"),eGr.forEach(t),EYe=r(H7," \u2014 "),yS=n(H7,"A",{href:!0});var oGr=s(yS);CYe=r(oGr,"LayoutLMTokenizer"),oGr.forEach(t),wYe=r(H7," or "),LS=n(H7,"A",{href:!0});var rGr=s(LS);AYe=r(rGr,"LayoutLMTokenizerFast"),rGr.forEach(t),yYe=r(H7," (LayoutLM model)"),H7.forEach(t),LYe=i(C),_s=n(C,"LI",{});var U7=s(_s);cee=n(U7,"STRONG",{});var tGr=s(cee);xYe=r(tGr,"layoutlmv2"),tGr.forEach(t),kYe=r(U7," \u2014 "),xS=n(U7,"A",{href:!0});var aGr=s(xS);SYe=r(aGr,"LayoutLMv2Tokenizer"),aGr.forEach(t),RYe=r(U7," or "),kS=n(U7,"A",{href:!0});var nGr=s(kS);BYe=r(nGr,"LayoutLMv2TokenizerFast"),nGr.forEach(t),PYe=r(U7," (LayoutLMv2 model)"),U7.forEach(t),$Ye=i(C),bs=n(C,"LI",{});var J7=s(bs);mee=n(J7,"STRONG",{});var sGr=s(mee);IYe=r(sGr,"layoutxlm"),sGr.forEach(t),qYe=r(J7," \u2014 "),SS=n(J7,"A",{href:!0});var lGr=s(SS);NYe=r(lGr,"LayoutXLMTokenizer"),lGr.forEach(t),jYe=r(J7," or "),RS=n(J7,"A",{href:!0});var iGr=s(RS);DYe=r(iGr,"LayoutXLMTokenizerFast"),iGr.forEach(t),GYe=r(J7," (LayoutXLM model)"),J7.forEach(t),OYe=i(C),vs=n(C,"LI",{});var Y7=s(vs);fee=n(Y7,"STRONG",{});var dGr=s(fee);VYe=r(dGr,"led"),dGr.forEach(t),XYe=r(Y7," \u2014 "),BS=n(Y7,"A",{href:!0});var cGr=s(BS);zYe=r(cGr,"LEDTokenizer"),cGr.forEach(t),QYe=r(Y7," or "),PS=n(Y7,"A",{href:!0});var mGr=s(PS);WYe=r(mGr,"LEDTokenizerFast"),mGr.forEach(t),HYe=r(Y7," (LED model)"),Y7.forEach(t),UYe=i(C),Fs=n(C,"LI",{});var K7=s(Fs);gee=n(K7,"STRONG",{});var fGr=s(gee);JYe=r(fGr,"longformer"),fGr.forEach(t),YYe=r(K7," \u2014 "),$S=n(K7,"A",{href:!0});var gGr=s($S);KYe=r(gGr,"LongformerTokenizer"),gGr.forEach(t),ZYe=r(K7," or "),IS=n(K7,"A",{href:!0});var hGr=s(IS);eKe=r(hGr,"LongformerTokenizerFast"),hGr.forEach(t),oKe=r(K7," (Longformer model)"),K7.forEach(t),rKe=i(C),Zg=n(C,"LI",{});var i3e=s(Zg);hee=n(i3e,"STRONG",{});var uGr=s(hee);tKe=r(uGr,"luke"),uGr.forEach(t),aKe=r(i3e," \u2014 "),qS=n(i3e,"A",{href:!0});var pGr=s(qS);nKe=r(pGr,"LukeTokenizer"),pGr.forEach(t),sKe=r(i3e," (LUKE model)"),i3e.forEach(t),lKe=i(C),Ts=n(C,"LI",{});var Z7=s(Ts);uee=n(Z7,"STRONG",{});var _Gr=s(uee);iKe=r(_Gr,"lxmert"),_Gr.forEach(t),dKe=r(Z7," \u2014 "),NS=n(Z7,"A",{href:!0});var bGr=s(NS);cKe=r(bGr,"LxmertTokenizer"),bGr.forEach(t),mKe=r(Z7," or "),jS=n(Z7,"A",{href:!0});var vGr=s(jS);fKe=r(vGr,"LxmertTokenizerFast"),vGr.forEach(t),gKe=r(Z7," (LXMERT model)"),Z7.forEach(t),hKe=i(C),eh=n(C,"LI",{});var d3e=s(eh);pee=n(d3e,"STRONG",{});var FGr=s(pee);uKe=r(FGr,"m2m_100"),FGr.forEach(t),pKe=r(d3e," \u2014 "),DS=n(d3e,"A",{href:!0});var TGr=s(DS);_Ke=r(TGr,"M2M100Tokenizer"),TGr.forEach(t),bKe=r(d3e," (M2M100 model)"),d3e.forEach(t),vKe=i(C),oh=n(C,"LI",{});var c3e=s(oh);_ee=n(c3e,"STRONG",{});var MGr=s(_ee);FKe=r(MGr,"marian"),MGr.forEach(t),TKe=r(c3e," \u2014 "),GS=n(c3e,"A",{href:!0});var EGr=s(GS);MKe=r(EGr,"MarianTokenizer"),EGr.forEach(t),EKe=r(c3e," (Marian model)"),c3e.forEach(t),CKe=i(C),Ms=n(C,"LI",{});var e9=s(Ms);bee=n(e9,"STRONG",{});var CGr=s(bee);wKe=r(CGr,"mbart"),CGr.forEach(t),AKe=r(e9," \u2014 "),OS=n(e9,"A",{href:!0});var wGr=s(OS);yKe=r(wGr,"MBartTokenizer"),wGr.forEach(t),LKe=r(e9," or "),VS=n(e9,"A",{href:!0});var AGr=s(VS);xKe=r(AGr,"MBartTokenizerFast"),AGr.forEach(t),kKe=r(e9," (mBART model)"),e9.forEach(t),SKe=i(C),Es=n(C,"LI",{});var o9=s(Es);vee=n(o9,"STRONG",{});var yGr=s(vee);RKe=r(yGr,"mbart50"),yGr.forEach(t),BKe=r(o9," \u2014 "),XS=n(o9,"A",{href:!0});var LGr=s(XS);PKe=r(LGr,"MBart50Tokenizer"),LGr.forEach(t),$Ke=r(o9," or "),zS=n(o9,"A",{href:!0});var xGr=s(zS);IKe=r(xGr,"MBart50TokenizerFast"),xGr.forEach(t),qKe=r(o9," (mBART-50 model)"),o9.forEach(t),NKe=i(C),rh=n(C,"LI",{});var m3e=s(rh);Fee=n(m3e,"STRONG",{});var kGr=s(Fee);jKe=r(kGr,"mluke"),kGr.forEach(t),DKe=r(m3e," \u2014 "),QS=n(m3e,"A",{href:!0});var SGr=s(QS);GKe=r(SGr,"MLukeTokenizer"),SGr.forEach(t),OKe=r(m3e," (mLUKE model)"),m3e.forEach(t),VKe=i(C),Cs=n(C,"LI",{});var r9=s(Cs);Tee=n(r9,"STRONG",{});var RGr=s(Tee);XKe=r(RGr,"mobilebert"),RGr.forEach(t),zKe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var BGr=s(WS);QKe=r(BGr,"MobileBertTokenizer"),BGr.forEach(t),WKe=r(r9," or "),HS=n(r9,"A",{href:!0});var PGr=s(HS);HKe=r(PGr,"MobileBertTokenizerFast"),PGr.forEach(t),UKe=r(r9," (MobileBERT model)"),r9.forEach(t),JKe=i(C),ws=n(C,"LI",{});var t9=s(ws);Mee=n(t9,"STRONG",{});var $Gr=s(Mee);YKe=r($Gr,"mpnet"),$Gr.forEach(t),KKe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var IGr=s(US);ZKe=r(IGr,"MPNetTokenizer"),IGr.forEach(t),eZe=r(t9," or "),JS=n(t9,"A",{href:!0});var qGr=s(JS);oZe=r(qGr,"MPNetTokenizerFast"),qGr.forEach(t),rZe=r(t9," (MPNet model)"),t9.forEach(t),tZe=i(C),As=n(C,"LI",{});var a9=s(As);Eee=n(a9,"STRONG",{});var NGr=s(Eee);aZe=r(NGr,"mt5"),NGr.forEach(t),nZe=r(a9," \u2014 "),YS=n(a9,"A",{href:!0});var jGr=s(YS);sZe=r(jGr,"MT5Tokenizer"),jGr.forEach(t),lZe=r(a9," or "),KS=n(a9,"A",{href:!0});var DGr=s(KS);iZe=r(DGr,"MT5TokenizerFast"),DGr.forEach(t),dZe=r(a9," (mT5 model)"),a9.forEach(t),cZe=i(C),ys=n(C,"LI",{});var n9=s(ys);Cee=n(n9,"STRONG",{});var GGr=s(Cee);mZe=r(GGr,"openai-gpt"),GGr.forEach(t),fZe=r(n9," \u2014 "),ZS=n(n9,"A",{href:!0});var OGr=s(ZS);gZe=r(OGr,"OpenAIGPTTokenizer"),OGr.forEach(t),hZe=r(n9," or "),eR=n(n9,"A",{href:!0});var VGr=s(eR);uZe=r(VGr,"OpenAIGPTTokenizerFast"),VGr.forEach(t),pZe=r(n9," (OpenAI GPT model)"),n9.forEach(t),_Ze=i(C),Ls=n(C,"LI",{});var s9=s(Ls);wee=n(s9,"STRONG",{});var XGr=s(wee);bZe=r(XGr,"pegasus"),XGr.forEach(t),vZe=r(s9," \u2014 "),oR=n(s9,"A",{href:!0});var zGr=s(oR);FZe=r(zGr,"PegasusTokenizer"),zGr.forEach(t),TZe=r(s9," or "),rR=n(s9,"A",{href:!0});var QGr=s(rR);MZe=r(QGr,"PegasusTokenizerFast"),QGr.forEach(t),EZe=r(s9," (Pegasus model)"),s9.forEach(t),CZe=i(C),th=n(C,"LI",{});var f3e=s(th);Aee=n(f3e,"STRONG",{});var WGr=s(Aee);wZe=r(WGr,"perceiver"),WGr.forEach(t),AZe=r(f3e," \u2014 "),tR=n(f3e,"A",{href:!0});var HGr=s(tR);yZe=r(HGr,"PerceiverTokenizer"),HGr.forEach(t),LZe=r(f3e," (Perceiver model)"),f3e.forEach(t),xZe=i(C),ah=n(C,"LI",{});var g3e=s(ah);yee=n(g3e,"STRONG",{});var UGr=s(yee);kZe=r(UGr,"phobert"),UGr.forEach(t),SZe=r(g3e," \u2014 "),aR=n(g3e,"A",{href:!0});var JGr=s(aR);RZe=r(JGr,"PhobertTokenizer"),JGr.forEach(t),BZe=r(g3e," (PhoBERT model)"),g3e.forEach(t),PZe=i(C),nh=n(C,"LI",{});var h3e=s(nh);Lee=n(h3e,"STRONG",{});var YGr=s(Lee);$Ze=r(YGr,"plbart"),YGr.forEach(t),IZe=r(h3e," \u2014 "),nR=n(h3e,"A",{href:!0});var KGr=s(nR);qZe=r(KGr,"PLBartTokenizer"),KGr.forEach(t),NZe=r(h3e," (PLBart model)"),h3e.forEach(t),jZe=i(C),sh=n(C,"LI",{});var u3e=s(sh);xee=n(u3e,"STRONG",{});var ZGr=s(xee);DZe=r(ZGr,"prophetnet"),ZGr.forEach(t),GZe=r(u3e," \u2014 "),sR=n(u3e,"A",{href:!0});var eOr=s(sR);OZe=r(eOr,"ProphetNetTokenizer"),eOr.forEach(t),VZe=r(u3e," (ProphetNet model)"),u3e.forEach(t),XZe=i(C),xs=n(C,"LI",{});var l9=s(xs);kee=n(l9,"STRONG",{});var oOr=s(kee);zZe=r(oOr,"qdqbert"),oOr.forEach(t),QZe=r(l9," \u2014 "),lR=n(l9,"A",{href:!0});var rOr=s(lR);WZe=r(rOr,"BertTokenizer"),rOr.forEach(t),HZe=r(l9," or "),iR=n(l9,"A",{href:!0});var tOr=s(iR);UZe=r(tOr,"BertTokenizerFast"),tOr.forEach(t),JZe=r(l9," (QDQBert model)"),l9.forEach(t),YZe=i(C),lh=n(C,"LI",{});var p3e=s(lh);See=n(p3e,"STRONG",{});var aOr=s(See);KZe=r(aOr,"rag"),aOr.forEach(t),ZZe=r(p3e," \u2014 "),dR=n(p3e,"A",{href:!0});var nOr=s(dR);eeo=r(nOr,"RagTokenizer"),nOr.forEach(t),oeo=r(p3e," (RAG model)"),p3e.forEach(t),reo=i(C),ks=n(C,"LI",{});var i9=s(ks);Ree=n(i9,"STRONG",{});var sOr=s(Ree);teo=r(sOr,"realm"),sOr.forEach(t),aeo=r(i9," \u2014 "),cR=n(i9,"A",{href:!0});var lOr=s(cR);neo=r(lOr,"RealmTokenizer"),lOr.forEach(t),seo=r(i9," or "),mR=n(i9,"A",{href:!0});var iOr=s(mR);leo=r(iOr,"RealmTokenizerFast"),iOr.forEach(t),ieo=r(i9," (Realm model)"),i9.forEach(t),deo=i(C),Ss=n(C,"LI",{});var d9=s(Ss);Bee=n(d9,"STRONG",{});var dOr=s(Bee);ceo=r(dOr,"reformer"),dOr.forEach(t),meo=r(d9," \u2014 "),fR=n(d9,"A",{href:!0});var cOr=s(fR);feo=r(cOr,"ReformerTokenizer"),cOr.forEach(t),geo=r(d9," or "),gR=n(d9,"A",{href:!0});var mOr=s(gR);heo=r(mOr,"ReformerTokenizerFast"),mOr.forEach(t),ueo=r(d9," (Reformer model)"),d9.forEach(t),peo=i(C),Rs=n(C,"LI",{});var c9=s(Rs);Pee=n(c9,"STRONG",{});var fOr=s(Pee);_eo=r(fOr,"rembert"),fOr.forEach(t),beo=r(c9," \u2014 "),hR=n(c9,"A",{href:!0});var gOr=s(hR);veo=r(gOr,"RemBertTokenizer"),gOr.forEach(t),Feo=r(c9," or "),uR=n(c9,"A",{href:!0});var hOr=s(uR);Teo=r(hOr,"RemBertTokenizerFast"),hOr.forEach(t),Meo=r(c9," (RemBERT model)"),c9.forEach(t),Eeo=i(C),Bs=n(C,"LI",{});var m9=s(Bs);$ee=n(m9,"STRONG",{});var uOr=s($ee);Ceo=r(uOr,"retribert"),uOr.forEach(t),weo=r(m9," \u2014 "),pR=n(m9,"A",{href:!0});var pOr=s(pR);Aeo=r(pOr,"RetriBertTokenizer"),pOr.forEach(t),yeo=r(m9," or "),_R=n(m9,"A",{href:!0});var _Or=s(_R);Leo=r(_Or,"RetriBertTokenizerFast"),_Or.forEach(t),xeo=r(m9," (RetriBERT model)"),m9.forEach(t),keo=i(C),Ps=n(C,"LI",{});var f9=s(Ps);Iee=n(f9,"STRONG",{});var bOr=s(Iee);Seo=r(bOr,"roberta"),bOr.forEach(t),Reo=r(f9," \u2014 "),bR=n(f9,"A",{href:!0});var vOr=s(bR);Beo=r(vOr,"RobertaTokenizer"),vOr.forEach(t),Peo=r(f9," or "),vR=n(f9,"A",{href:!0});var FOr=s(vR);$eo=r(FOr,"RobertaTokenizerFast"),FOr.forEach(t),Ieo=r(f9," (RoBERTa model)"),f9.forEach(t),qeo=i(C),$s=n(C,"LI",{});var g9=s($s);qee=n(g9,"STRONG",{});var TOr=s(qee);Neo=r(TOr,"roformer"),TOr.forEach(t),jeo=r(g9," \u2014 "),FR=n(g9,"A",{href:!0});var MOr=s(FR);Deo=r(MOr,"RoFormerTokenizer"),MOr.forEach(t),Geo=r(g9," or "),TR=n(g9,"A",{href:!0});var EOr=s(TR);Oeo=r(EOr,"RoFormerTokenizerFast"),EOr.forEach(t),Veo=r(g9," (RoFormer model)"),g9.forEach(t),Xeo=i(C),ih=n(C,"LI",{});var _3e=s(ih);Nee=n(_3e,"STRONG",{});var COr=s(Nee);zeo=r(COr,"speech_to_text"),COr.forEach(t),Qeo=r(_3e," \u2014 "),MR=n(_3e,"A",{href:!0});var wOr=s(MR);Weo=r(wOr,"Speech2TextTokenizer"),wOr.forEach(t),Heo=r(_3e," (Speech2Text model)"),_3e.forEach(t),Ueo=i(C),dh=n(C,"LI",{});var b3e=s(dh);jee=n(b3e,"STRONG",{});var AOr=s(jee);Jeo=r(AOr,"speech_to_text_2"),AOr.forEach(t),Yeo=r(b3e," \u2014 "),ER=n(b3e,"A",{href:!0});var yOr=s(ER);Keo=r(yOr,"Speech2Text2Tokenizer"),yOr.forEach(t),Zeo=r(b3e," (Speech2Text2 model)"),b3e.forEach(t),eoo=i(C),Is=n(C,"LI",{});var h9=s(Is);Dee=n(h9,"STRONG",{});var LOr=s(Dee);ooo=r(LOr,"splinter"),LOr.forEach(t),roo=r(h9," \u2014 "),CR=n(h9,"A",{href:!0});var xOr=s(CR);too=r(xOr,"SplinterTokenizer"),xOr.forEach(t),aoo=r(h9," or "),wR=n(h9,"A",{href:!0});var kOr=s(wR);noo=r(kOr,"SplinterTokenizerFast"),kOr.forEach(t),soo=r(h9," (Splinter model)"),h9.forEach(t),loo=i(C),qs=n(C,"LI",{});var u9=s(qs);Gee=n(u9,"STRONG",{});var SOr=s(Gee);ioo=r(SOr,"squeezebert"),SOr.forEach(t),doo=r(u9," \u2014 "),AR=n(u9,"A",{href:!0});var ROr=s(AR);coo=r(ROr,"SqueezeBertTokenizer"),ROr.forEach(t),moo=r(u9," or "),yR=n(u9,"A",{href:!0});var BOr=s(yR);foo=r(BOr,"SqueezeBertTokenizerFast"),BOr.forEach(t),goo=r(u9," (SqueezeBERT model)"),u9.forEach(t),hoo=i(C),Ns=n(C,"LI",{});var p9=s(Ns);Oee=n(p9,"STRONG",{});var POr=s(Oee);uoo=r(POr,"t5"),POr.forEach(t),poo=r(p9," \u2014 "),LR=n(p9,"A",{href:!0});var $Or=s(LR);_oo=r($Or,"T5Tokenizer"),$Or.forEach(t),boo=r(p9," or "),xR=n(p9,"A",{href:!0});var IOr=s(xR);voo=r(IOr,"T5TokenizerFast"),IOr.forEach(t),Foo=r(p9," (T5 model)"),p9.forEach(t),Too=i(C),ch=n(C,"LI",{});var v3e=s(ch);Vee=n(v3e,"STRONG",{});var qOr=s(Vee);Moo=r(qOr,"tapas"),qOr.forEach(t),Eoo=r(v3e," \u2014 "),kR=n(v3e,"A",{href:!0});var NOr=s(kR);Coo=r(NOr,"TapasTokenizer"),NOr.forEach(t),woo=r(v3e," (TAPAS model)"),v3e.forEach(t),Aoo=i(C),mh=n(C,"LI",{});var F3e=s(mh);Xee=n(F3e,"STRONG",{});var jOr=s(Xee);yoo=r(jOr,"tapex"),jOr.forEach(t),Loo=r(F3e," \u2014 "),SR=n(F3e,"A",{href:!0});var DOr=s(SR);xoo=r(DOr,"TapexTokenizer"),DOr.forEach(t),koo=r(F3e," (TAPEX model)"),F3e.forEach(t),Soo=i(C),fh=n(C,"LI",{});var T3e=s(fh);zee=n(T3e,"STRONG",{});var GOr=s(zee);Roo=r(GOr,"transfo-xl"),GOr.forEach(t),Boo=r(T3e," \u2014 "),RR=n(T3e,"A",{href:!0});var OOr=s(RR);Poo=r(OOr,"TransfoXLTokenizer"),OOr.forEach(t),$oo=r(T3e," (Transformer-XL model)"),T3e.forEach(t),Ioo=i(C),gh=n(C,"LI",{});var M3e=s(gh);Qee=n(M3e,"STRONG",{});var VOr=s(Qee);qoo=r(VOr,"wav2vec2"),VOr.forEach(t),Noo=r(M3e," \u2014 "),BR=n(M3e,"A",{href:!0});var XOr=s(BR);joo=r(XOr,"Wav2Vec2CTCTokenizer"),XOr.forEach(t),Doo=r(M3e," (Wav2Vec2 model)"),M3e.forEach(t),Goo=i(C),hh=n(C,"LI",{});var E3e=s(hh);Wee=n(E3e,"STRONG",{});var zOr=s(Wee);Ooo=r(zOr,"wav2vec2_phoneme"),zOr.forEach(t),Voo=r(E3e," \u2014 "),PR=n(E3e,"A",{href:!0});var QOr=s(PR);Xoo=r(QOr,"Wav2Vec2PhonemeCTCTokenizer"),QOr.forEach(t),zoo=r(E3e," (Wav2Vec2Phoneme model)"),E3e.forEach(t),Qoo=i(C),js=n(C,"LI",{});var _9=s(js);Hee=n(_9,"STRONG",{});var WOr=s(Hee);Woo=r(WOr,"xglm"),WOr.forEach(t),Hoo=r(_9," \u2014 "),$R=n(_9,"A",{href:!0});var HOr=s($R);Uoo=r(HOr,"XGLMTokenizer"),HOr.forEach(t),Joo=r(_9," or "),IR=n(_9,"A",{href:!0});var UOr=s(IR);Yoo=r(UOr,"XGLMTokenizerFast"),UOr.forEach(t),Koo=r(_9," (XGLM model)"),_9.forEach(t),Zoo=i(C),uh=n(C,"LI",{});var C3e=s(uh);Uee=n(C3e,"STRONG",{});var JOr=s(Uee);ero=r(JOr,"xlm"),JOr.forEach(t),oro=r(C3e," \u2014 "),qR=n(C3e,"A",{href:!0});var YOr=s(qR);rro=r(YOr,"XLMTokenizer"),YOr.forEach(t),tro=r(C3e," (XLM model)"),C3e.forEach(t),aro=i(C),ph=n(C,"LI",{});var w3e=s(ph);Jee=n(w3e,"STRONG",{});var KOr=s(Jee);nro=r(KOr,"xlm-prophetnet"),KOr.forEach(t),sro=r(w3e," \u2014 "),NR=n(w3e,"A",{href:!0});var ZOr=s(NR);lro=r(ZOr,"XLMProphetNetTokenizer"),ZOr.forEach(t),iro=r(w3e," (XLMProphetNet model)"),w3e.forEach(t),dro=i(C),Ds=n(C,"LI",{});var b9=s(Ds);Yee=n(b9,"STRONG",{});var eVr=s(Yee);cro=r(eVr,"xlm-roberta"),eVr.forEach(t),mro=r(b9," \u2014 "),jR=n(b9,"A",{href:!0});var oVr=s(jR);fro=r(oVr,"XLMRobertaTokenizer"),oVr.forEach(t),gro=r(b9," or "),DR=n(b9,"A",{href:!0});var rVr=s(DR);hro=r(rVr,"XLMRobertaTokenizerFast"),rVr.forEach(t),uro=r(b9," (XLM-RoBERTa model)"),b9.forEach(t),pro=i(C),Gs=n(C,"LI",{});var v9=s(Gs);Kee=n(v9,"STRONG",{});var tVr=s(Kee);_ro=r(tVr,"xlnet"),tVr.forEach(t),bro=r(v9," \u2014 "),GR=n(v9,"A",{href:!0});var aVr=s(GR);vro=r(aVr,"XLNetTokenizer"),aVr.forEach(t),Fro=r(v9," or "),OR=n(v9,"A",{href:!0});var nVr=s(OR);Tro=r(nVr,"XLNetTokenizerFast"),nVr.forEach(t),Mro=r(v9," (XLNet model)"),v9.forEach(t),C.forEach(t),Ero=i(ha),Zee=n(ha,"P",{});var sVr=s(Zee);Cro=r(sVr,"Examples:"),sVr.forEach(t),wro=i(ha),f(Ww.$$.fragment,ha),ha.forEach(t),Aro=i(Qs),_h=n(Qs,"DIV",{class:!0});var JPe=s(_h);f(Hw.$$.fragment,JPe),yro=i(JPe),eoe=n(JPe,"P",{});var lVr=s(eoe);Lro=r(lVr,"Register a new tokenizer in this mapping."),lVr.forEach(t),JPe.forEach(t),Qs.forEach(t),QRe=i(c),Ji=n(c,"H2",{class:!0});var YPe=s(Ji);bh=n(YPe,"A",{id:!0,class:!0,href:!0});var iVr=s(bh);ooe=n(iVr,"SPAN",{});var dVr=s(ooe);f(Uw.$$.fragment,dVr),dVr.forEach(t),iVr.forEach(t),xro=i(YPe),roe=n(YPe,"SPAN",{});var cVr=s(roe);kro=r(cVr,"AutoFeatureExtractor"),cVr.forEach(t),YPe.forEach(t),WRe=i(c),Ho=n(c,"DIV",{class:!0});var Ws=s(Ho);f(Jw.$$.fragment,Ws),Sro=i(Ws),Yw=n(Ws,"P",{});var KPe=s(Yw);Rro=r(KPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=n(KPe,"A",{href:!0});var mVr=s(VR);Bro=r(mVr,"AutoFeatureExtractor.from_pretrained()"),mVr.forEach(t),Pro=r(KPe," class method."),KPe.forEach(t),$ro=i(Ws),Kw=n(Ws,"P",{});var ZPe=s(Kw);Iro=r(ZPe,"This class cannot be instantiated directly using "),toe=n(ZPe,"CODE",{});var fVr=s(toe);qro=r(fVr,"__init__()"),fVr.forEach(t),Nro=r(ZPe," (throws an error)."),ZPe.forEach(t),jro=i(Ws),$e=n(Ws,"DIV",{class:!0});var Nt=s($e);f(Zw.$$.fragment,Nt),Dro=i(Nt),aoe=n(Nt,"P",{});var gVr=s(aoe);Gro=r(gVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gVr.forEach(t),Oro=i(Nt),Va=n(Nt,"P",{});var SC=s(Va);Vro=r(SC,"The feature extractor class to instantiate is selected based on the "),noe=n(SC,"CODE",{});var hVr=s(noe);Xro=r(hVr,"model_type"),hVr.forEach(t),zro=r(SC,` property of the config object
(either passed as an argument or loaded from `),soe=n(SC,"CODE",{});var uVr=s(soe);Qro=r(uVr,"pretrained_model_name_or_path"),uVr.forEach(t),Wro=r(SC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),loe=n(SC,"CODE",{});var pVr=s(loe);Hro=r(pVr,"pretrained_model_name_or_path"),pVr.forEach(t),Uro=r(SC,":"),SC.forEach(t),Jro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);vh=n(ae,"LI",{});var A3e=s(vh);ioe=n(A3e,"STRONG",{});var _Vr=s(ioe);Yro=r(_Vr,"beit"),_Vr.forEach(t),Kro=r(A3e," \u2014 "),XR=n(A3e,"A",{href:!0});var bVr=s(XR);Zro=r(bVr,"BeitFeatureExtractor"),bVr.forEach(t),eto=r(A3e," (BEiT model)"),A3e.forEach(t),oto=i(ae),Fh=n(ae,"LI",{});var y3e=s(Fh);doe=n(y3e,"STRONG",{});var vVr=s(doe);rto=r(vVr,"clip"),vVr.forEach(t),tto=r(y3e," \u2014 "),zR=n(y3e,"A",{href:!0});var FVr=s(zR);ato=r(FVr,"CLIPFeatureExtractor"),FVr.forEach(t),nto=r(y3e," (CLIP model)"),y3e.forEach(t),sto=i(ae),Th=n(ae,"LI",{});var L3e=s(Th);coe=n(L3e,"STRONG",{});var TVr=s(coe);lto=r(TVr,"convnext"),TVr.forEach(t),ito=r(L3e," \u2014 "),QR=n(L3e,"A",{href:!0});var MVr=s(QR);dto=r(MVr,"ConvNextFeatureExtractor"),MVr.forEach(t),cto=r(L3e," (ConvNext model)"),L3e.forEach(t),mto=i(ae),Mh=n(ae,"LI",{});var x3e=s(Mh);moe=n(x3e,"STRONG",{});var EVr=s(moe);fto=r(EVr,"deit"),EVr.forEach(t),gto=r(x3e," \u2014 "),WR=n(x3e,"A",{href:!0});var CVr=s(WR);hto=r(CVr,"DeiTFeatureExtractor"),CVr.forEach(t),uto=r(x3e," (DeiT model)"),x3e.forEach(t),pto=i(ae),Eh=n(ae,"LI",{});var k3e=s(Eh);foe=n(k3e,"STRONG",{});var wVr=s(foe);_to=r(wVr,"detr"),wVr.forEach(t),bto=r(k3e," \u2014 "),HR=n(k3e,"A",{href:!0});var AVr=s(HR);vto=r(AVr,"DetrFeatureExtractor"),AVr.forEach(t),Fto=r(k3e," (DETR model)"),k3e.forEach(t),Tto=i(ae),Ch=n(ae,"LI",{});var S3e=s(Ch);goe=n(S3e,"STRONG",{});var yVr=s(goe);Mto=r(yVr,"hubert"),yVr.forEach(t),Eto=r(S3e," \u2014 "),UR=n(S3e,"A",{href:!0});var LVr=s(UR);Cto=r(LVr,"Wav2Vec2FeatureExtractor"),LVr.forEach(t),wto=r(S3e," (Hubert model)"),S3e.forEach(t),Ato=i(ae),wh=n(ae,"LI",{});var R3e=s(wh);hoe=n(R3e,"STRONG",{});var xVr=s(hoe);yto=r(xVr,"layoutlmv2"),xVr.forEach(t),Lto=r(R3e," \u2014 "),JR=n(R3e,"A",{href:!0});var kVr=s(JR);xto=r(kVr,"LayoutLMv2FeatureExtractor"),kVr.forEach(t),kto=r(R3e," (LayoutLMv2 model)"),R3e.forEach(t),Sto=i(ae),Ah=n(ae,"LI",{});var B3e=s(Ah);uoe=n(B3e,"STRONG",{});var SVr=s(uoe);Rto=r(SVr,"maskformer"),SVr.forEach(t),Bto=r(B3e," \u2014 "),YR=n(B3e,"A",{href:!0});var RVr=s(YR);Pto=r(RVr,"MaskFormerFeatureExtractor"),RVr.forEach(t),$to=r(B3e," (MaskFormer model)"),B3e.forEach(t),Ito=i(ae),yh=n(ae,"LI",{});var P3e=s(yh);poe=n(P3e,"STRONG",{});var BVr=s(poe);qto=r(BVr,"perceiver"),BVr.forEach(t),Nto=r(P3e," \u2014 "),KR=n(P3e,"A",{href:!0});var PVr=s(KR);jto=r(PVr,"PerceiverFeatureExtractor"),PVr.forEach(t),Dto=r(P3e," (Perceiver model)"),P3e.forEach(t),Gto=i(ae),Lh=n(ae,"LI",{});var $3e=s(Lh);_oe=n($3e,"STRONG",{});var $Vr=s(_oe);Oto=r($Vr,"poolformer"),$Vr.forEach(t),Vto=r($3e," \u2014 "),ZR=n($3e,"A",{href:!0});var IVr=s(ZR);Xto=r(IVr,"PoolFormerFeatureExtractor"),IVr.forEach(t),zto=r($3e," (PoolFormer model)"),$3e.forEach(t),Qto=i(ae),xh=n(ae,"LI",{});var I3e=s(xh);boe=n(I3e,"STRONG",{});var qVr=s(boe);Wto=r(qVr,"regnet"),qVr.forEach(t),Hto=r(I3e," \u2014 "),eB=n(I3e,"A",{href:!0});var NVr=s(eB);Uto=r(NVr,"ConvNextFeatureExtractor"),NVr.forEach(t),Jto=r(I3e," (RegNet model)"),I3e.forEach(t),Yto=i(ae),kh=n(ae,"LI",{});var q3e=s(kh);voe=n(q3e,"STRONG",{});var jVr=s(voe);Kto=r(jVr,"resnet"),jVr.forEach(t),Zto=r(q3e," \u2014 "),oB=n(q3e,"A",{href:!0});var DVr=s(oB);eao=r(DVr,"ConvNextFeatureExtractor"),DVr.forEach(t),oao=r(q3e," (ResNet model)"),q3e.forEach(t),rao=i(ae),Sh=n(ae,"LI",{});var N3e=s(Sh);Foe=n(N3e,"STRONG",{});var GVr=s(Foe);tao=r(GVr,"segformer"),GVr.forEach(t),aao=r(N3e," \u2014 "),rB=n(N3e,"A",{href:!0});var OVr=s(rB);nao=r(OVr,"SegformerFeatureExtractor"),OVr.forEach(t),sao=r(N3e," (SegFormer model)"),N3e.forEach(t),lao=i(ae),Rh=n(ae,"LI",{});var j3e=s(Rh);Toe=n(j3e,"STRONG",{});var VVr=s(Toe);iao=r(VVr,"speech_to_text"),VVr.forEach(t),dao=r(j3e," \u2014 "),tB=n(j3e,"A",{href:!0});var XVr=s(tB);cao=r(XVr,"Speech2TextFeatureExtractor"),XVr.forEach(t),mao=r(j3e," (Speech2Text model)"),j3e.forEach(t),fao=i(ae),Bh=n(ae,"LI",{});var D3e=s(Bh);Moe=n(D3e,"STRONG",{});var zVr=s(Moe);gao=r(zVr,"swin"),zVr.forEach(t),hao=r(D3e," \u2014 "),aB=n(D3e,"A",{href:!0});var QVr=s(aB);uao=r(QVr,"ViTFeatureExtractor"),QVr.forEach(t),pao=r(D3e," (Swin model)"),D3e.forEach(t),_ao=i(ae),Ph=n(ae,"LI",{});var G3e=s(Ph);Eoe=n(G3e,"STRONG",{});var WVr=s(Eoe);bao=r(WVr,"van"),WVr.forEach(t),vao=r(G3e," \u2014 "),nB=n(G3e,"A",{href:!0});var HVr=s(nB);Fao=r(HVr,"ConvNextFeatureExtractor"),HVr.forEach(t),Tao=r(G3e," (VAN model)"),G3e.forEach(t),Mao=i(ae),$h=n(ae,"LI",{});var O3e=s($h);Coe=n(O3e,"STRONG",{});var UVr=s(Coe);Eao=r(UVr,"vit"),UVr.forEach(t),Cao=r(O3e," \u2014 "),sB=n(O3e,"A",{href:!0});var JVr=s(sB);wao=r(JVr,"ViTFeatureExtractor"),JVr.forEach(t),Aao=r(O3e," (ViT model)"),O3e.forEach(t),yao=i(ae),Ih=n(ae,"LI",{});var V3e=s(Ih);woe=n(V3e,"STRONG",{});var YVr=s(woe);Lao=r(YVr,"vit_mae"),YVr.forEach(t),xao=r(V3e," \u2014 "),lB=n(V3e,"A",{href:!0});var KVr=s(lB);kao=r(KVr,"ViTFeatureExtractor"),KVr.forEach(t),Sao=r(V3e," (ViTMAE model)"),V3e.forEach(t),Rao=i(ae),qh=n(ae,"LI",{});var X3e=s(qh);Aoe=n(X3e,"STRONG",{});var ZVr=s(Aoe);Bao=r(ZVr,"wav2vec2"),ZVr.forEach(t),Pao=r(X3e," \u2014 "),iB=n(X3e,"A",{href:!0});var eXr=s(iB);$ao=r(eXr,"Wav2Vec2FeatureExtractor"),eXr.forEach(t),Iao=r(X3e," (Wav2Vec2 model)"),X3e.forEach(t),ae.forEach(t),qao=i(Nt),f(Nh.$$.fragment,Nt),Nao=i(Nt),yoe=n(Nt,"P",{});var oXr=s(yoe);jao=r(oXr,"Examples:"),oXr.forEach(t),Dao=i(Nt),f(e6.$$.fragment,Nt),Nt.forEach(t),Gao=i(Ws),jh=n(Ws,"DIV",{class:!0});var e$e=s(jh);f(o6.$$.fragment,e$e),Oao=i(e$e),Loe=n(e$e,"P",{});var rXr=s(Loe);Vao=r(rXr,"Register a new feature extractor for this class."),rXr.forEach(t),e$e.forEach(t),Ws.forEach(t),HRe=i(c),Yi=n(c,"H2",{class:!0});var o$e=s(Yi);Dh=n(o$e,"A",{id:!0,class:!0,href:!0});var tXr=s(Dh);xoe=n(tXr,"SPAN",{});var aXr=s(xoe);f(r6.$$.fragment,aXr),aXr.forEach(t),tXr.forEach(t),Xao=i(o$e),koe=n(o$e,"SPAN",{});var nXr=s(koe);zao=r(nXr,"AutoProcessor"),nXr.forEach(t),o$e.forEach(t),URe=i(c),Uo=n(c,"DIV",{class:!0});var Hs=s(Uo);f(t6.$$.fragment,Hs),Qao=i(Hs),a6=n(Hs,"P",{});var r$e=s(a6);Wao=r(r$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dB=n(r$e,"A",{href:!0});var sXr=s(dB);Hao=r(sXr,"AutoProcessor.from_pretrained()"),sXr.forEach(t),Uao=r(r$e," class method."),r$e.forEach(t),Jao=i(Hs),n6=n(Hs,"P",{});var t$e=s(n6);Yao=r(t$e,"This class cannot be instantiated directly using "),Soe=n(t$e,"CODE",{});var lXr=s(Soe);Kao=r(lXr,"__init__()"),lXr.forEach(t),Zao=r(t$e," (throws an error)."),t$e.forEach(t),eno=i(Hs),Ie=n(Hs,"DIV",{class:!0});var jt=s(Ie);f(s6.$$.fragment,jt),ono=i(jt),Roe=n(jt,"P",{});var iXr=s(Roe);rno=r(iXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),iXr.forEach(t),tno=i(jt),Ki=n(jt,"P",{});var wU=s(Ki);ano=r(wU,"The processor class to instantiate is selected based on the "),Boe=n(wU,"CODE",{});var dXr=s(Boe);nno=r(dXr,"model_type"),dXr.forEach(t),sno=r(wU,` property of the config object (either
passed as an argument or loaded from `),Poe=n(wU,"CODE",{});var cXr=s(Poe);lno=r(cXr,"pretrained_model_name_or_path"),cXr.forEach(t),ino=r(wU," if possible):"),wU.forEach(t),dno=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Gh=n(jo,"LI",{});var z3e=s(Gh);$oe=n(z3e,"STRONG",{});var mXr=s($oe);cno=r(mXr,"clip"),mXr.forEach(t),mno=r(z3e," \u2014 "),cB=n(z3e,"A",{href:!0});var fXr=s(cB);fno=r(fXr,"CLIPProcessor"),fXr.forEach(t),gno=r(z3e," (CLIP model)"),z3e.forEach(t),hno=i(jo),Oh=n(jo,"LI",{});var Q3e=s(Oh);Ioe=n(Q3e,"STRONG",{});var gXr=s(Ioe);uno=r(gXr,"layoutlmv2"),gXr.forEach(t),pno=r(Q3e," \u2014 "),mB=n(Q3e,"A",{href:!0});var hXr=s(mB);_no=r(hXr,"LayoutLMv2Processor"),hXr.forEach(t),bno=r(Q3e," (LayoutLMv2 model)"),Q3e.forEach(t),vno=i(jo),Vh=n(jo,"LI",{});var W3e=s(Vh);qoe=n(W3e,"STRONG",{});var uXr=s(qoe);Fno=r(uXr,"layoutxlm"),uXr.forEach(t),Tno=r(W3e," \u2014 "),fB=n(W3e,"A",{href:!0});var pXr=s(fB);Mno=r(pXr,"LayoutXLMProcessor"),pXr.forEach(t),Eno=r(W3e," (LayoutXLM model)"),W3e.forEach(t),Cno=i(jo),Xh=n(jo,"LI",{});var H3e=s(Xh);Noe=n(H3e,"STRONG",{});var _Xr=s(Noe);wno=r(_Xr,"speech_to_text"),_Xr.forEach(t),Ano=r(H3e," \u2014 "),gB=n(H3e,"A",{href:!0});var bXr=s(gB);yno=r(bXr,"Speech2TextProcessor"),bXr.forEach(t),Lno=r(H3e," (Speech2Text model)"),H3e.forEach(t),xno=i(jo),zh=n(jo,"LI",{});var U3e=s(zh);joe=n(U3e,"STRONG",{});var vXr=s(joe);kno=r(vXr,"speech_to_text_2"),vXr.forEach(t),Sno=r(U3e," \u2014 "),hB=n(U3e,"A",{href:!0});var FXr=s(hB);Rno=r(FXr,"Speech2Text2Processor"),FXr.forEach(t),Bno=r(U3e," (Speech2Text2 model)"),U3e.forEach(t),Pno=i(jo),Qh=n(jo,"LI",{});var J3e=s(Qh);Doe=n(J3e,"STRONG",{});var TXr=s(Doe);$no=r(TXr,"trocr"),TXr.forEach(t),Ino=r(J3e," \u2014 "),uB=n(J3e,"A",{href:!0});var MXr=s(uB);qno=r(MXr,"TrOCRProcessor"),MXr.forEach(t),Nno=r(J3e," (TrOCR model)"),J3e.forEach(t),jno=i(jo),Wh=n(jo,"LI",{});var Y3e=s(Wh);Goe=n(Y3e,"STRONG",{});var EXr=s(Goe);Dno=r(EXr,"vision-text-dual-encoder"),EXr.forEach(t),Gno=r(Y3e," \u2014 "),pB=n(Y3e,"A",{href:!0});var CXr=s(pB);Ono=r(CXr,"VisionTextDualEncoderProcessor"),CXr.forEach(t),Vno=r(Y3e," (VisionTextDualEncoder model)"),Y3e.forEach(t),Xno=i(jo),Hh=n(jo,"LI",{});var K3e=s(Hh);Ooe=n(K3e,"STRONG",{});var wXr=s(Ooe);zno=r(wXr,"wav2vec2"),wXr.forEach(t),Qno=r(K3e," \u2014 "),_B=n(K3e,"A",{href:!0});var AXr=s(_B);Wno=r(AXr,"Wav2Vec2Processor"),AXr.forEach(t),Hno=r(K3e," (Wav2Vec2 model)"),K3e.forEach(t),jo.forEach(t),Uno=i(jt),f(Uh.$$.fragment,jt),Jno=i(jt),Voe=n(jt,"P",{});var yXr=s(Voe);Yno=r(yXr,"Examples:"),yXr.forEach(t),Kno=i(jt),f(l6.$$.fragment,jt),jt.forEach(t),Zno=i(Hs),Jh=n(Hs,"DIV",{class:!0});var a$e=s(Jh);f(i6.$$.fragment,a$e),eso=i(a$e),Xoe=n(a$e,"P",{});var LXr=s(Xoe);oso=r(LXr,"Register a new processor for this class."),LXr.forEach(t),a$e.forEach(t),Hs.forEach(t),JRe=i(c),Zi=n(c,"H2",{class:!0});var n$e=s(Zi);Yh=n(n$e,"A",{id:!0,class:!0,href:!0});var xXr=s(Yh);zoe=n(xXr,"SPAN",{});var kXr=s(zoe);f(d6.$$.fragment,kXr),kXr.forEach(t),xXr.forEach(t),rso=i(n$e),Qoe=n(n$e,"SPAN",{});var SXr=s(Qoe);tso=r(SXr,"AutoModel"),SXr.forEach(t),n$e.forEach(t),YRe=i(c),Jo=n(c,"DIV",{class:!0});var Us=s(Jo);f(c6.$$.fragment,Us),aso=i(Us),ed=n(Us,"P",{});var AU=s(ed);nso=r(AU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bB=n(AU,"A",{href:!0});var RXr=s(bB);sso=r(RXr,"from_pretrained()"),RXr.forEach(t),lso=r(AU," class method or the "),vB=n(AU,"A",{href:!0});var BXr=s(vB);iso=r(BXr,"from_config()"),BXr.forEach(t),dso=r(AU,` class
method.`),AU.forEach(t),cso=i(Us),m6=n(Us,"P",{});var s$e=s(m6);mso=r(s$e,"This class cannot be instantiated directly using "),Woe=n(s$e,"CODE",{});var PXr=s(Woe);fso=r(PXr,"__init__()"),PXr.forEach(t),gso=r(s$e," (throws an error)."),s$e.forEach(t),hso=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);f(f6.$$.fragment,Js),uso=i(Js),Hoe=n(Js,"P",{});var $Xr=s(Hoe);pso=r($Xr,"Instantiates one of the base model classes of the library from a configuration."),$Xr.forEach(t),_so=i(Js),od=n(Js,"P",{});var yU=s(od);bso=r(yU,`Note:
Loading a model from its configuration file does `),Uoe=n(yU,"STRONG",{});var IXr=s(Uoe);vso=r(IXr,"not"),IXr.forEach(t),Fso=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FB=n(yU,"A",{href:!0});var qXr=s(FB);Tso=r(qXr,"from_pretrained()"),qXr.forEach(t),Mso=r(yU," to load the model weights."),yU.forEach(t),Eso=i(Js),Joe=n(Js,"P",{});var NXr=s(Joe);Cso=r(NXr,"Examples:"),NXr.forEach(t),wso=i(Js),f(g6.$$.fragment,Js),Js.forEach(t),Aso=i(Us),qe=n(Us,"DIV",{class:!0});var Dt=s(qe);f(h6.$$.fragment,Dt),yso=i(Dt),Yoe=n(Dt,"P",{});var jXr=s(Yoe);Lso=r(jXr,"Instantiate one of the base model classes of the library from a pretrained model."),jXr.forEach(t),xso=i(Dt),Xa=n(Dt,"P",{});var RC=s(Xa);kso=r(RC,"The model class to instantiate is selected based on the "),Koe=n(RC,"CODE",{});var DXr=s(Koe);Sso=r(DXr,"model_type"),DXr.forEach(t),Rso=r(RC,` property of the config object (either
passed as an argument or loaded from `),Zoe=n(RC,"CODE",{});var GXr=s(Zoe);Bso=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),Pso=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ere=n(RC,"CODE",{});var OXr=s(ere);$so=r(OXr,"pretrained_model_name_or_path"),OXr.forEach(t),Iso=r(RC,":"),RC.forEach(t),qso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Kh=n(M,"LI",{});var Z3e=s(Kh);ore=n(Z3e,"STRONG",{});var VXr=s(ore);Nso=r(VXr,"albert"),VXr.forEach(t),jso=r(Z3e," \u2014 "),TB=n(Z3e,"A",{href:!0});var XXr=s(TB);Dso=r(XXr,"AlbertModel"),XXr.forEach(t),Gso=r(Z3e," (ALBERT model)"),Z3e.forEach(t),Oso=i(M),Zh=n(M,"LI",{});var eCe=s(Zh);rre=n(eCe,"STRONG",{});var zXr=s(rre);Vso=r(zXr,"bart"),zXr.forEach(t),Xso=r(eCe," \u2014 "),MB=n(eCe,"A",{href:!0});var QXr=s(MB);zso=r(QXr,"BartModel"),QXr.forEach(t),Qso=r(eCe," (BART model)"),eCe.forEach(t),Wso=i(M),eu=n(M,"LI",{});var oCe=s(eu);tre=n(oCe,"STRONG",{});var WXr=s(tre);Hso=r(WXr,"beit"),WXr.forEach(t),Uso=r(oCe," \u2014 "),EB=n(oCe,"A",{href:!0});var HXr=s(EB);Jso=r(HXr,"BeitModel"),HXr.forEach(t),Yso=r(oCe," (BEiT model)"),oCe.forEach(t),Kso=i(M),ou=n(M,"LI",{});var rCe=s(ou);are=n(rCe,"STRONG",{});var UXr=s(are);Zso=r(UXr,"bert"),UXr.forEach(t),elo=r(rCe," \u2014 "),CB=n(rCe,"A",{href:!0});var JXr=s(CB);olo=r(JXr,"BertModel"),JXr.forEach(t),rlo=r(rCe," (BERT model)"),rCe.forEach(t),tlo=i(M),ru=n(M,"LI",{});var tCe=s(ru);nre=n(tCe,"STRONG",{});var YXr=s(nre);alo=r(YXr,"bert-generation"),YXr.forEach(t),nlo=r(tCe," \u2014 "),wB=n(tCe,"A",{href:!0});var KXr=s(wB);slo=r(KXr,"BertGenerationEncoder"),KXr.forEach(t),llo=r(tCe," (Bert Generation model)"),tCe.forEach(t),ilo=i(M),tu=n(M,"LI",{});var aCe=s(tu);sre=n(aCe,"STRONG",{});var ZXr=s(sre);dlo=r(ZXr,"big_bird"),ZXr.forEach(t),clo=r(aCe," \u2014 "),AB=n(aCe,"A",{href:!0});var ezr=s(AB);mlo=r(ezr,"BigBirdModel"),ezr.forEach(t),flo=r(aCe," (BigBird model)"),aCe.forEach(t),glo=i(M),au=n(M,"LI",{});var nCe=s(au);lre=n(nCe,"STRONG",{});var ozr=s(lre);hlo=r(ozr,"bigbird_pegasus"),ozr.forEach(t),ulo=r(nCe," \u2014 "),yB=n(nCe,"A",{href:!0});var rzr=s(yB);plo=r(rzr,"BigBirdPegasusModel"),rzr.forEach(t),_lo=r(nCe," (BigBirdPegasus model)"),nCe.forEach(t),blo=i(M),nu=n(M,"LI",{});var sCe=s(nu);ire=n(sCe,"STRONG",{});var tzr=s(ire);vlo=r(tzr,"blenderbot"),tzr.forEach(t),Flo=r(sCe," \u2014 "),LB=n(sCe,"A",{href:!0});var azr=s(LB);Tlo=r(azr,"BlenderbotModel"),azr.forEach(t),Mlo=r(sCe," (Blenderbot model)"),sCe.forEach(t),Elo=i(M),su=n(M,"LI",{});var lCe=s(su);dre=n(lCe,"STRONG",{});var nzr=s(dre);Clo=r(nzr,"blenderbot-small"),nzr.forEach(t),wlo=r(lCe," \u2014 "),xB=n(lCe,"A",{href:!0});var szr=s(xB);Alo=r(szr,"BlenderbotSmallModel"),szr.forEach(t),ylo=r(lCe," (BlenderbotSmall model)"),lCe.forEach(t),Llo=i(M),lu=n(M,"LI",{});var iCe=s(lu);cre=n(iCe,"STRONG",{});var lzr=s(cre);xlo=r(lzr,"camembert"),lzr.forEach(t),klo=r(iCe," \u2014 "),kB=n(iCe,"A",{href:!0});var izr=s(kB);Slo=r(izr,"CamembertModel"),izr.forEach(t),Rlo=r(iCe," (CamemBERT model)"),iCe.forEach(t),Blo=i(M),iu=n(M,"LI",{});var dCe=s(iu);mre=n(dCe,"STRONG",{});var dzr=s(mre);Plo=r(dzr,"canine"),dzr.forEach(t),$lo=r(dCe," \u2014 "),SB=n(dCe,"A",{href:!0});var czr=s(SB);Ilo=r(czr,"CanineModel"),czr.forEach(t),qlo=r(dCe," (Canine model)"),dCe.forEach(t),Nlo=i(M),du=n(M,"LI",{});var cCe=s(du);fre=n(cCe,"STRONG",{});var mzr=s(fre);jlo=r(mzr,"clip"),mzr.forEach(t),Dlo=r(cCe," \u2014 "),RB=n(cCe,"A",{href:!0});var fzr=s(RB);Glo=r(fzr,"CLIPModel"),fzr.forEach(t),Olo=r(cCe," (CLIP model)"),cCe.forEach(t),Vlo=i(M),cu=n(M,"LI",{});var mCe=s(cu);gre=n(mCe,"STRONG",{});var gzr=s(gre);Xlo=r(gzr,"convbert"),gzr.forEach(t),zlo=r(mCe," \u2014 "),BB=n(mCe,"A",{href:!0});var hzr=s(BB);Qlo=r(hzr,"ConvBertModel"),hzr.forEach(t),Wlo=r(mCe," (ConvBERT model)"),mCe.forEach(t),Hlo=i(M),mu=n(M,"LI",{});var fCe=s(mu);hre=n(fCe,"STRONG",{});var uzr=s(hre);Ulo=r(uzr,"convnext"),uzr.forEach(t),Jlo=r(fCe," \u2014 "),PB=n(fCe,"A",{href:!0});var pzr=s(PB);Ylo=r(pzr,"ConvNextModel"),pzr.forEach(t),Klo=r(fCe," (ConvNext model)"),fCe.forEach(t),Zlo=i(M),fu=n(M,"LI",{});var gCe=s(fu);ure=n(gCe,"STRONG",{});var _zr=s(ure);eio=r(_zr,"ctrl"),_zr.forEach(t),oio=r(gCe," \u2014 "),$B=n(gCe,"A",{href:!0});var bzr=s($B);rio=r(bzr,"CTRLModel"),bzr.forEach(t),tio=r(gCe," (CTRL model)"),gCe.forEach(t),aio=i(M),gu=n(M,"LI",{});var hCe=s(gu);pre=n(hCe,"STRONG",{});var vzr=s(pre);nio=r(vzr,"data2vec-audio"),vzr.forEach(t),sio=r(hCe," \u2014 "),IB=n(hCe,"A",{href:!0});var Fzr=s(IB);lio=r(Fzr,"Data2VecAudioModel"),Fzr.forEach(t),iio=r(hCe," (Data2VecAudio model)"),hCe.forEach(t),dio=i(M),hu=n(M,"LI",{});var uCe=s(hu);_re=n(uCe,"STRONG",{});var Tzr=s(_re);cio=r(Tzr,"data2vec-text"),Tzr.forEach(t),mio=r(uCe," \u2014 "),qB=n(uCe,"A",{href:!0});var Mzr=s(qB);fio=r(Mzr,"Data2VecTextModel"),Mzr.forEach(t),gio=r(uCe," (Data2VecText model)"),uCe.forEach(t),hio=i(M),uu=n(M,"LI",{});var pCe=s(uu);bre=n(pCe,"STRONG",{});var Ezr=s(bre);uio=r(Ezr,"data2vec-vision"),Ezr.forEach(t),pio=r(pCe," \u2014 "),NB=n(pCe,"A",{href:!0});var Czr=s(NB);_io=r(Czr,"Data2VecVisionModel"),Czr.forEach(t),bio=r(pCe," (Data2VecVision model)"),pCe.forEach(t),vio=i(M),pu=n(M,"LI",{});var _Ce=s(pu);vre=n(_Ce,"STRONG",{});var wzr=s(vre);Fio=r(wzr,"deberta"),wzr.forEach(t),Tio=r(_Ce," \u2014 "),jB=n(_Ce,"A",{href:!0});var Azr=s(jB);Mio=r(Azr,"DebertaModel"),Azr.forEach(t),Eio=r(_Ce," (DeBERTa model)"),_Ce.forEach(t),Cio=i(M),_u=n(M,"LI",{});var bCe=s(_u);Fre=n(bCe,"STRONG",{});var yzr=s(Fre);wio=r(yzr,"deberta-v2"),yzr.forEach(t),Aio=r(bCe," \u2014 "),DB=n(bCe,"A",{href:!0});var Lzr=s(DB);yio=r(Lzr,"DebertaV2Model"),Lzr.forEach(t),Lio=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),xio=i(M),bu=n(M,"LI",{});var vCe=s(bu);Tre=n(vCe,"STRONG",{});var xzr=s(Tre);kio=r(xzr,"decision_transformer"),xzr.forEach(t),Sio=r(vCe," \u2014 "),GB=n(vCe,"A",{href:!0});var kzr=s(GB);Rio=r(kzr,"DecisionTransformerModel"),kzr.forEach(t),Bio=r(vCe," (Decision Transformer model)"),vCe.forEach(t),Pio=i(M),vu=n(M,"LI",{});var FCe=s(vu);Mre=n(FCe,"STRONG",{});var Szr=s(Mre);$io=r(Szr,"deit"),Szr.forEach(t),Iio=r(FCe," \u2014 "),OB=n(FCe,"A",{href:!0});var Rzr=s(OB);qio=r(Rzr,"DeiTModel"),Rzr.forEach(t),Nio=r(FCe," (DeiT model)"),FCe.forEach(t),jio=i(M),Fu=n(M,"LI",{});var TCe=s(Fu);Ere=n(TCe,"STRONG",{});var Bzr=s(Ere);Dio=r(Bzr,"detr"),Bzr.forEach(t),Gio=r(TCe," \u2014 "),VB=n(TCe,"A",{href:!0});var Pzr=s(VB);Oio=r(Pzr,"DetrModel"),Pzr.forEach(t),Vio=r(TCe," (DETR model)"),TCe.forEach(t),Xio=i(M),Tu=n(M,"LI",{});var MCe=s(Tu);Cre=n(MCe,"STRONG",{});var $zr=s(Cre);zio=r($zr,"distilbert"),$zr.forEach(t),Qio=r(MCe," \u2014 "),XB=n(MCe,"A",{href:!0});var Izr=s(XB);Wio=r(Izr,"DistilBertModel"),Izr.forEach(t),Hio=r(MCe," (DistilBERT model)"),MCe.forEach(t),Uio=i(M),Mu=n(M,"LI",{});var ECe=s(Mu);wre=n(ECe,"STRONG",{});var qzr=s(wre);Jio=r(qzr,"dpr"),qzr.forEach(t),Yio=r(ECe," \u2014 "),zB=n(ECe,"A",{href:!0});var Nzr=s(zB);Kio=r(Nzr,"DPRQuestionEncoder"),Nzr.forEach(t),Zio=r(ECe," (DPR model)"),ECe.forEach(t),edo=i(M),Eu=n(M,"LI",{});var CCe=s(Eu);Are=n(CCe,"STRONG",{});var jzr=s(Are);odo=r(jzr,"dpt"),jzr.forEach(t),rdo=r(CCe," \u2014 "),QB=n(CCe,"A",{href:!0});var Dzr=s(QB);tdo=r(Dzr,"DPTModel"),Dzr.forEach(t),ado=r(CCe," (DPT model)"),CCe.forEach(t),ndo=i(M),Cu=n(M,"LI",{});var wCe=s(Cu);yre=n(wCe,"STRONG",{});var Gzr=s(yre);sdo=r(Gzr,"electra"),Gzr.forEach(t),ldo=r(wCe," \u2014 "),WB=n(wCe,"A",{href:!0});var Ozr=s(WB);ido=r(Ozr,"ElectraModel"),Ozr.forEach(t),ddo=r(wCe," (ELECTRA model)"),wCe.forEach(t),cdo=i(M),wu=n(M,"LI",{});var ACe=s(wu);Lre=n(ACe,"STRONG",{});var Vzr=s(Lre);mdo=r(Vzr,"flaubert"),Vzr.forEach(t),fdo=r(ACe," \u2014 "),HB=n(ACe,"A",{href:!0});var Xzr=s(HB);gdo=r(Xzr,"FlaubertModel"),Xzr.forEach(t),hdo=r(ACe," (FlauBERT model)"),ACe.forEach(t),udo=i(M),Au=n(M,"LI",{});var yCe=s(Au);xre=n(yCe,"STRONG",{});var zzr=s(xre);pdo=r(zzr,"fnet"),zzr.forEach(t),_do=r(yCe," \u2014 "),UB=n(yCe,"A",{href:!0});var Qzr=s(UB);bdo=r(Qzr,"FNetModel"),Qzr.forEach(t),vdo=r(yCe," (FNet model)"),yCe.forEach(t),Fdo=i(M),yu=n(M,"LI",{});var LCe=s(yu);kre=n(LCe,"STRONG",{});var Wzr=s(kre);Tdo=r(Wzr,"fsmt"),Wzr.forEach(t),Mdo=r(LCe," \u2014 "),JB=n(LCe,"A",{href:!0});var Hzr=s(JB);Edo=r(Hzr,"FSMTModel"),Hzr.forEach(t),Cdo=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),wdo=i(M),Os=n(M,"LI",{});var F9=s(Os);Sre=n(F9,"STRONG",{});var Uzr=s(Sre);Ado=r(Uzr,"funnel"),Uzr.forEach(t),ydo=r(F9," \u2014 "),YB=n(F9,"A",{href:!0});var Jzr=s(YB);Ldo=r(Jzr,"FunnelModel"),Jzr.forEach(t),xdo=r(F9," or "),KB=n(F9,"A",{href:!0});var Yzr=s(KB);kdo=r(Yzr,"FunnelBaseModel"),Yzr.forEach(t),Sdo=r(F9," (Funnel Transformer model)"),F9.forEach(t),Rdo=i(M),Lu=n(M,"LI",{});var xCe=s(Lu);Rre=n(xCe,"STRONG",{});var Kzr=s(Rre);Bdo=r(Kzr,"glpn"),Kzr.forEach(t),Pdo=r(xCe," \u2014 "),ZB=n(xCe,"A",{href:!0});var Zzr=s(ZB);$do=r(Zzr,"GLPNModel"),Zzr.forEach(t),Ido=r(xCe," (GLPN model)"),xCe.forEach(t),qdo=i(M),xu=n(M,"LI",{});var kCe=s(xu);Bre=n(kCe,"STRONG",{});var eQr=s(Bre);Ndo=r(eQr,"gpt2"),eQr.forEach(t),jdo=r(kCe," \u2014 "),eP=n(kCe,"A",{href:!0});var oQr=s(eP);Ddo=r(oQr,"GPT2Model"),oQr.forEach(t),Gdo=r(kCe," (OpenAI GPT-2 model)"),kCe.forEach(t),Odo=i(M),ku=n(M,"LI",{});var SCe=s(ku);Pre=n(SCe,"STRONG",{});var rQr=s(Pre);Vdo=r(rQr,"gpt_neo"),rQr.forEach(t),Xdo=r(SCe," \u2014 "),oP=n(SCe,"A",{href:!0});var tQr=s(oP);zdo=r(tQr,"GPTNeoModel"),tQr.forEach(t),Qdo=r(SCe," (GPT Neo model)"),SCe.forEach(t),Wdo=i(M),Su=n(M,"LI",{});var RCe=s(Su);$re=n(RCe,"STRONG",{});var aQr=s($re);Hdo=r(aQr,"gptj"),aQr.forEach(t),Udo=r(RCe," \u2014 "),rP=n(RCe,"A",{href:!0});var nQr=s(rP);Jdo=r(nQr,"GPTJModel"),nQr.forEach(t),Ydo=r(RCe," (GPT-J model)"),RCe.forEach(t),Kdo=i(M),Ru=n(M,"LI",{});var BCe=s(Ru);Ire=n(BCe,"STRONG",{});var sQr=s(Ire);Zdo=r(sQr,"hubert"),sQr.forEach(t),eco=r(BCe," \u2014 "),tP=n(BCe,"A",{href:!0});var lQr=s(tP);oco=r(lQr,"HubertModel"),lQr.forEach(t),rco=r(BCe," (Hubert model)"),BCe.forEach(t),tco=i(M),Bu=n(M,"LI",{});var PCe=s(Bu);qre=n(PCe,"STRONG",{});var iQr=s(qre);aco=r(iQr,"ibert"),iQr.forEach(t),nco=r(PCe," \u2014 "),aP=n(PCe,"A",{href:!0});var dQr=s(aP);sco=r(dQr,"IBertModel"),dQr.forEach(t),lco=r(PCe," (I-BERT model)"),PCe.forEach(t),ico=i(M),Pu=n(M,"LI",{});var $Ce=s(Pu);Nre=n($Ce,"STRONG",{});var cQr=s(Nre);dco=r(cQr,"imagegpt"),cQr.forEach(t),cco=r($Ce," \u2014 "),nP=n($Ce,"A",{href:!0});var mQr=s(nP);mco=r(mQr,"ImageGPTModel"),mQr.forEach(t),fco=r($Ce," (ImageGPT model)"),$Ce.forEach(t),gco=i(M),$u=n(M,"LI",{});var ICe=s($u);jre=n(ICe,"STRONG",{});var fQr=s(jre);hco=r(fQr,"layoutlm"),fQr.forEach(t),uco=r(ICe," \u2014 "),sP=n(ICe,"A",{href:!0});var gQr=s(sP);pco=r(gQr,"LayoutLMModel"),gQr.forEach(t),_co=r(ICe," (LayoutLM model)"),ICe.forEach(t),bco=i(M),Iu=n(M,"LI",{});var qCe=s(Iu);Dre=n(qCe,"STRONG",{});var hQr=s(Dre);vco=r(hQr,"layoutlmv2"),hQr.forEach(t),Fco=r(qCe," \u2014 "),lP=n(qCe,"A",{href:!0});var uQr=s(lP);Tco=r(uQr,"LayoutLMv2Model"),uQr.forEach(t),Mco=r(qCe," (LayoutLMv2 model)"),qCe.forEach(t),Eco=i(M),qu=n(M,"LI",{});var NCe=s(qu);Gre=n(NCe,"STRONG",{});var pQr=s(Gre);Cco=r(pQr,"led"),pQr.forEach(t),wco=r(NCe," \u2014 "),iP=n(NCe,"A",{href:!0});var _Qr=s(iP);Aco=r(_Qr,"LEDModel"),_Qr.forEach(t),yco=r(NCe," (LED model)"),NCe.forEach(t),Lco=i(M),Nu=n(M,"LI",{});var jCe=s(Nu);Ore=n(jCe,"STRONG",{});var bQr=s(Ore);xco=r(bQr,"longformer"),bQr.forEach(t),kco=r(jCe," \u2014 "),dP=n(jCe,"A",{href:!0});var vQr=s(dP);Sco=r(vQr,"LongformerModel"),vQr.forEach(t),Rco=r(jCe," (Longformer model)"),jCe.forEach(t),Bco=i(M),ju=n(M,"LI",{});var DCe=s(ju);Vre=n(DCe,"STRONG",{});var FQr=s(Vre);Pco=r(FQr,"luke"),FQr.forEach(t),$co=r(DCe," \u2014 "),cP=n(DCe,"A",{href:!0});var TQr=s(cP);Ico=r(TQr,"LukeModel"),TQr.forEach(t),qco=r(DCe," (LUKE model)"),DCe.forEach(t),Nco=i(M),Du=n(M,"LI",{});var GCe=s(Du);Xre=n(GCe,"STRONG",{});var MQr=s(Xre);jco=r(MQr,"lxmert"),MQr.forEach(t),Dco=r(GCe," \u2014 "),mP=n(GCe,"A",{href:!0});var EQr=s(mP);Gco=r(EQr,"LxmertModel"),EQr.forEach(t),Oco=r(GCe," (LXMERT model)"),GCe.forEach(t),Vco=i(M),Gu=n(M,"LI",{});var OCe=s(Gu);zre=n(OCe,"STRONG",{});var CQr=s(zre);Xco=r(CQr,"m2m_100"),CQr.forEach(t),zco=r(OCe," \u2014 "),fP=n(OCe,"A",{href:!0});var wQr=s(fP);Qco=r(wQr,"M2M100Model"),wQr.forEach(t),Wco=r(OCe," (M2M100 model)"),OCe.forEach(t),Hco=i(M),Ou=n(M,"LI",{});var VCe=s(Ou);Qre=n(VCe,"STRONG",{});var AQr=s(Qre);Uco=r(AQr,"marian"),AQr.forEach(t),Jco=r(VCe," \u2014 "),gP=n(VCe,"A",{href:!0});var yQr=s(gP);Yco=r(yQr,"MarianModel"),yQr.forEach(t),Kco=r(VCe," (Marian model)"),VCe.forEach(t),Zco=i(M),Vu=n(M,"LI",{});var XCe=s(Vu);Wre=n(XCe,"STRONG",{});var LQr=s(Wre);emo=r(LQr,"maskformer"),LQr.forEach(t),omo=r(XCe," \u2014 "),hP=n(XCe,"A",{href:!0});var xQr=s(hP);rmo=r(xQr,"MaskFormerModel"),xQr.forEach(t),tmo=r(XCe," (MaskFormer model)"),XCe.forEach(t),amo=i(M),Xu=n(M,"LI",{});var zCe=s(Xu);Hre=n(zCe,"STRONG",{});var kQr=s(Hre);nmo=r(kQr,"mbart"),kQr.forEach(t),smo=r(zCe," \u2014 "),uP=n(zCe,"A",{href:!0});var SQr=s(uP);lmo=r(SQr,"MBartModel"),SQr.forEach(t),imo=r(zCe," (mBART model)"),zCe.forEach(t),dmo=i(M),zu=n(M,"LI",{});var QCe=s(zu);Ure=n(QCe,"STRONG",{});var RQr=s(Ure);cmo=r(RQr,"megatron-bert"),RQr.forEach(t),mmo=r(QCe," \u2014 "),pP=n(QCe,"A",{href:!0});var BQr=s(pP);fmo=r(BQr,"MegatronBertModel"),BQr.forEach(t),gmo=r(QCe," (MegatronBert model)"),QCe.forEach(t),hmo=i(M),Qu=n(M,"LI",{});var WCe=s(Qu);Jre=n(WCe,"STRONG",{});var PQr=s(Jre);umo=r(PQr,"mobilebert"),PQr.forEach(t),pmo=r(WCe," \u2014 "),_P=n(WCe,"A",{href:!0});var $Qr=s(_P);_mo=r($Qr,"MobileBertModel"),$Qr.forEach(t),bmo=r(WCe," (MobileBERT model)"),WCe.forEach(t),vmo=i(M),Wu=n(M,"LI",{});var HCe=s(Wu);Yre=n(HCe,"STRONG",{});var IQr=s(Yre);Fmo=r(IQr,"mpnet"),IQr.forEach(t),Tmo=r(HCe," \u2014 "),bP=n(HCe,"A",{href:!0});var qQr=s(bP);Mmo=r(qQr,"MPNetModel"),qQr.forEach(t),Emo=r(HCe," (MPNet model)"),HCe.forEach(t),Cmo=i(M),Hu=n(M,"LI",{});var UCe=s(Hu);Kre=n(UCe,"STRONG",{});var NQr=s(Kre);wmo=r(NQr,"mt5"),NQr.forEach(t),Amo=r(UCe," \u2014 "),vP=n(UCe,"A",{href:!0});var jQr=s(vP);ymo=r(jQr,"MT5Model"),jQr.forEach(t),Lmo=r(UCe," (mT5 model)"),UCe.forEach(t),xmo=i(M),Uu=n(M,"LI",{});var JCe=s(Uu);Zre=n(JCe,"STRONG",{});var DQr=s(Zre);kmo=r(DQr,"nystromformer"),DQr.forEach(t),Smo=r(JCe," \u2014 "),FP=n(JCe,"A",{href:!0});var GQr=s(FP);Rmo=r(GQr,"NystromformerModel"),GQr.forEach(t),Bmo=r(JCe," (Nystromformer model)"),JCe.forEach(t),Pmo=i(M),Ju=n(M,"LI",{});var YCe=s(Ju);ete=n(YCe,"STRONG",{});var OQr=s(ete);$mo=r(OQr,"openai-gpt"),OQr.forEach(t),Imo=r(YCe," \u2014 "),TP=n(YCe,"A",{href:!0});var VQr=s(TP);qmo=r(VQr,"OpenAIGPTModel"),VQr.forEach(t),Nmo=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),jmo=i(M),Yu=n(M,"LI",{});var KCe=s(Yu);ote=n(KCe,"STRONG",{});var XQr=s(ote);Dmo=r(XQr,"pegasus"),XQr.forEach(t),Gmo=r(KCe," \u2014 "),MP=n(KCe,"A",{href:!0});var zQr=s(MP);Omo=r(zQr,"PegasusModel"),zQr.forEach(t),Vmo=r(KCe," (Pegasus model)"),KCe.forEach(t),Xmo=i(M),Ku=n(M,"LI",{});var ZCe=s(Ku);rte=n(ZCe,"STRONG",{});var QQr=s(rte);zmo=r(QQr,"perceiver"),QQr.forEach(t),Qmo=r(ZCe," \u2014 "),EP=n(ZCe,"A",{href:!0});var WQr=s(EP);Wmo=r(WQr,"PerceiverModel"),WQr.forEach(t),Hmo=r(ZCe," (Perceiver model)"),ZCe.forEach(t),Umo=i(M),Zu=n(M,"LI",{});var ewe=s(Zu);tte=n(ewe,"STRONG",{});var HQr=s(tte);Jmo=r(HQr,"plbart"),HQr.forEach(t),Ymo=r(ewe," \u2014 "),CP=n(ewe,"A",{href:!0});var UQr=s(CP);Kmo=r(UQr,"PLBartModel"),UQr.forEach(t),Zmo=r(ewe," (PLBart model)"),ewe.forEach(t),efo=i(M),ep=n(M,"LI",{});var owe=s(ep);ate=n(owe,"STRONG",{});var JQr=s(ate);ofo=r(JQr,"poolformer"),JQr.forEach(t),rfo=r(owe," \u2014 "),wP=n(owe,"A",{href:!0});var YQr=s(wP);tfo=r(YQr,"PoolFormerModel"),YQr.forEach(t),afo=r(owe," (PoolFormer model)"),owe.forEach(t),nfo=i(M),op=n(M,"LI",{});var rwe=s(op);nte=n(rwe,"STRONG",{});var KQr=s(nte);sfo=r(KQr,"prophetnet"),KQr.forEach(t),lfo=r(rwe," \u2014 "),AP=n(rwe,"A",{href:!0});var ZQr=s(AP);ifo=r(ZQr,"ProphetNetModel"),ZQr.forEach(t),dfo=r(rwe," (ProphetNet model)"),rwe.forEach(t),cfo=i(M),rp=n(M,"LI",{});var twe=s(rp);ste=n(twe,"STRONG",{});var eWr=s(ste);mfo=r(eWr,"qdqbert"),eWr.forEach(t),ffo=r(twe," \u2014 "),yP=n(twe,"A",{href:!0});var oWr=s(yP);gfo=r(oWr,"QDQBertModel"),oWr.forEach(t),hfo=r(twe," (QDQBert model)"),twe.forEach(t),ufo=i(M),tp=n(M,"LI",{});var awe=s(tp);lte=n(awe,"STRONG",{});var rWr=s(lte);pfo=r(rWr,"reformer"),rWr.forEach(t),_fo=r(awe," \u2014 "),LP=n(awe,"A",{href:!0});var tWr=s(LP);bfo=r(tWr,"ReformerModel"),tWr.forEach(t),vfo=r(awe," (Reformer model)"),awe.forEach(t),Ffo=i(M),ap=n(M,"LI",{});var nwe=s(ap);ite=n(nwe,"STRONG",{});var aWr=s(ite);Tfo=r(aWr,"regnet"),aWr.forEach(t),Mfo=r(nwe," \u2014 "),xP=n(nwe,"A",{href:!0});var nWr=s(xP);Efo=r(nWr,"RegNetModel"),nWr.forEach(t),Cfo=r(nwe," (RegNet model)"),nwe.forEach(t),wfo=i(M),np=n(M,"LI",{});var swe=s(np);dte=n(swe,"STRONG",{});var sWr=s(dte);Afo=r(sWr,"rembert"),sWr.forEach(t),yfo=r(swe," \u2014 "),kP=n(swe,"A",{href:!0});var lWr=s(kP);Lfo=r(lWr,"RemBertModel"),lWr.forEach(t),xfo=r(swe," (RemBERT model)"),swe.forEach(t),kfo=i(M),sp=n(M,"LI",{});var lwe=s(sp);cte=n(lwe,"STRONG",{});var iWr=s(cte);Sfo=r(iWr,"resnet"),iWr.forEach(t),Rfo=r(lwe," \u2014 "),SP=n(lwe,"A",{href:!0});var dWr=s(SP);Bfo=r(dWr,"ResNetModel"),dWr.forEach(t),Pfo=r(lwe," (ResNet model)"),lwe.forEach(t),$fo=i(M),lp=n(M,"LI",{});var iwe=s(lp);mte=n(iwe,"STRONG",{});var cWr=s(mte);Ifo=r(cWr,"retribert"),cWr.forEach(t),qfo=r(iwe," \u2014 "),RP=n(iwe,"A",{href:!0});var mWr=s(RP);Nfo=r(mWr,"RetriBertModel"),mWr.forEach(t),jfo=r(iwe," (RetriBERT model)"),iwe.forEach(t),Dfo=i(M),ip=n(M,"LI",{});var dwe=s(ip);fte=n(dwe,"STRONG",{});var fWr=s(fte);Gfo=r(fWr,"roberta"),fWr.forEach(t),Ofo=r(dwe," \u2014 "),BP=n(dwe,"A",{href:!0});var gWr=s(BP);Vfo=r(gWr,"RobertaModel"),gWr.forEach(t),Xfo=r(dwe," (RoBERTa model)"),dwe.forEach(t),zfo=i(M),dp=n(M,"LI",{});var cwe=s(dp);gte=n(cwe,"STRONG",{});var hWr=s(gte);Qfo=r(hWr,"roformer"),hWr.forEach(t),Wfo=r(cwe," \u2014 "),PP=n(cwe,"A",{href:!0});var uWr=s(PP);Hfo=r(uWr,"RoFormerModel"),uWr.forEach(t),Ufo=r(cwe," (RoFormer model)"),cwe.forEach(t),Jfo=i(M),cp=n(M,"LI",{});var mwe=s(cp);hte=n(mwe,"STRONG",{});var pWr=s(hte);Yfo=r(pWr,"segformer"),pWr.forEach(t),Kfo=r(mwe," \u2014 "),$P=n(mwe,"A",{href:!0});var _Wr=s($P);Zfo=r(_Wr,"SegformerModel"),_Wr.forEach(t),ego=r(mwe," (SegFormer model)"),mwe.forEach(t),ogo=i(M),mp=n(M,"LI",{});var fwe=s(mp);ute=n(fwe,"STRONG",{});var bWr=s(ute);rgo=r(bWr,"sew"),bWr.forEach(t),tgo=r(fwe," \u2014 "),IP=n(fwe,"A",{href:!0});var vWr=s(IP);ago=r(vWr,"SEWModel"),vWr.forEach(t),ngo=r(fwe," (SEW model)"),fwe.forEach(t),sgo=i(M),fp=n(M,"LI",{});var gwe=s(fp);pte=n(gwe,"STRONG",{});var FWr=s(pte);lgo=r(FWr,"sew-d"),FWr.forEach(t),igo=r(gwe," \u2014 "),qP=n(gwe,"A",{href:!0});var TWr=s(qP);dgo=r(TWr,"SEWDModel"),TWr.forEach(t),cgo=r(gwe," (SEW-D model)"),gwe.forEach(t),mgo=i(M),gp=n(M,"LI",{});var hwe=s(gp);_te=n(hwe,"STRONG",{});var MWr=s(_te);fgo=r(MWr,"speech_to_text"),MWr.forEach(t),ggo=r(hwe," \u2014 "),NP=n(hwe,"A",{href:!0});var EWr=s(NP);hgo=r(EWr,"Speech2TextModel"),EWr.forEach(t),ugo=r(hwe," (Speech2Text model)"),hwe.forEach(t),pgo=i(M),hp=n(M,"LI",{});var uwe=s(hp);bte=n(uwe,"STRONG",{});var CWr=s(bte);_go=r(CWr,"splinter"),CWr.forEach(t),bgo=r(uwe," \u2014 "),jP=n(uwe,"A",{href:!0});var wWr=s(jP);vgo=r(wWr,"SplinterModel"),wWr.forEach(t),Fgo=r(uwe," (Splinter model)"),uwe.forEach(t),Tgo=i(M),up=n(M,"LI",{});var pwe=s(up);vte=n(pwe,"STRONG",{});var AWr=s(vte);Mgo=r(AWr,"squeezebert"),AWr.forEach(t),Ego=r(pwe," \u2014 "),DP=n(pwe,"A",{href:!0});var yWr=s(DP);Cgo=r(yWr,"SqueezeBertModel"),yWr.forEach(t),wgo=r(pwe," (SqueezeBERT model)"),pwe.forEach(t),Ago=i(M),pp=n(M,"LI",{});var _we=s(pp);Fte=n(_we,"STRONG",{});var LWr=s(Fte);ygo=r(LWr,"swin"),LWr.forEach(t),Lgo=r(_we," \u2014 "),GP=n(_we,"A",{href:!0});var xWr=s(GP);xgo=r(xWr,"SwinModel"),xWr.forEach(t),kgo=r(_we," (Swin model)"),_we.forEach(t),Sgo=i(M),_p=n(M,"LI",{});var bwe=s(_p);Tte=n(bwe,"STRONG",{});var kWr=s(Tte);Rgo=r(kWr,"t5"),kWr.forEach(t),Bgo=r(bwe," \u2014 "),OP=n(bwe,"A",{href:!0});var SWr=s(OP);Pgo=r(SWr,"T5Model"),SWr.forEach(t),$go=r(bwe," (T5 model)"),bwe.forEach(t),Igo=i(M),bp=n(M,"LI",{});var vwe=s(bp);Mte=n(vwe,"STRONG",{});var RWr=s(Mte);qgo=r(RWr,"tapas"),RWr.forEach(t),Ngo=r(vwe," \u2014 "),VP=n(vwe,"A",{href:!0});var BWr=s(VP);jgo=r(BWr,"TapasModel"),BWr.forEach(t),Dgo=r(vwe," (TAPAS model)"),vwe.forEach(t),Ggo=i(M),vp=n(M,"LI",{});var Fwe=s(vp);Ete=n(Fwe,"STRONG",{});var PWr=s(Ete);Ogo=r(PWr,"transfo-xl"),PWr.forEach(t),Vgo=r(Fwe," \u2014 "),XP=n(Fwe,"A",{href:!0});var $Wr=s(XP);Xgo=r($Wr,"TransfoXLModel"),$Wr.forEach(t),zgo=r(Fwe," (Transformer-XL model)"),Fwe.forEach(t),Qgo=i(M),Fp=n(M,"LI",{});var Twe=s(Fp);Cte=n(Twe,"STRONG",{});var IWr=s(Cte);Wgo=r(IWr,"unispeech"),IWr.forEach(t),Hgo=r(Twe," \u2014 "),zP=n(Twe,"A",{href:!0});var qWr=s(zP);Ugo=r(qWr,"UniSpeechModel"),qWr.forEach(t),Jgo=r(Twe," (UniSpeech model)"),Twe.forEach(t),Ygo=i(M),Tp=n(M,"LI",{});var Mwe=s(Tp);wte=n(Mwe,"STRONG",{});var NWr=s(wte);Kgo=r(NWr,"unispeech-sat"),NWr.forEach(t),Zgo=r(Mwe," \u2014 "),QP=n(Mwe,"A",{href:!0});var jWr=s(QP);eho=r(jWr,"UniSpeechSatModel"),jWr.forEach(t),oho=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),rho=i(M),Mp=n(M,"LI",{});var Ewe=s(Mp);Ate=n(Ewe,"STRONG",{});var DWr=s(Ate);tho=r(DWr,"van"),DWr.forEach(t),aho=r(Ewe," \u2014 "),WP=n(Ewe,"A",{href:!0});var GWr=s(WP);nho=r(GWr,"VanModel"),GWr.forEach(t),sho=r(Ewe," (VAN model)"),Ewe.forEach(t),lho=i(M),Ep=n(M,"LI",{});var Cwe=s(Ep);yte=n(Cwe,"STRONG",{});var OWr=s(yte);iho=r(OWr,"vilt"),OWr.forEach(t),dho=r(Cwe," \u2014 "),HP=n(Cwe,"A",{href:!0});var VWr=s(HP);cho=r(VWr,"ViltModel"),VWr.forEach(t),mho=r(Cwe," (ViLT model)"),Cwe.forEach(t),fho=i(M),Cp=n(M,"LI",{});var wwe=s(Cp);Lte=n(wwe,"STRONG",{});var XWr=s(Lte);gho=r(XWr,"vision-text-dual-encoder"),XWr.forEach(t),hho=r(wwe," \u2014 "),UP=n(wwe,"A",{href:!0});var zWr=s(UP);uho=r(zWr,"VisionTextDualEncoderModel"),zWr.forEach(t),pho=r(wwe," (VisionTextDualEncoder model)"),wwe.forEach(t),_ho=i(M),wp=n(M,"LI",{});var Awe=s(wp);xte=n(Awe,"STRONG",{});var QWr=s(xte);bho=r(QWr,"visual_bert"),QWr.forEach(t),vho=r(Awe," \u2014 "),JP=n(Awe,"A",{href:!0});var WWr=s(JP);Fho=r(WWr,"VisualBertModel"),WWr.forEach(t),Tho=r(Awe," (VisualBert model)"),Awe.forEach(t),Mho=i(M),Ap=n(M,"LI",{});var ywe=s(Ap);kte=n(ywe,"STRONG",{});var HWr=s(kte);Eho=r(HWr,"vit"),HWr.forEach(t),Cho=r(ywe," \u2014 "),YP=n(ywe,"A",{href:!0});var UWr=s(YP);who=r(UWr,"ViTModel"),UWr.forEach(t),Aho=r(ywe," (ViT model)"),ywe.forEach(t),yho=i(M),yp=n(M,"LI",{});var Lwe=s(yp);Ste=n(Lwe,"STRONG",{});var JWr=s(Ste);Lho=r(JWr,"vit_mae"),JWr.forEach(t),xho=r(Lwe," \u2014 "),KP=n(Lwe,"A",{href:!0});var YWr=s(KP);kho=r(YWr,"ViTMAEModel"),YWr.forEach(t),Sho=r(Lwe," (ViTMAE model)"),Lwe.forEach(t),Rho=i(M),Lp=n(M,"LI",{});var xwe=s(Lp);Rte=n(xwe,"STRONG",{});var KWr=s(Rte);Bho=r(KWr,"wav2vec2"),KWr.forEach(t),Pho=r(xwe," \u2014 "),ZP=n(xwe,"A",{href:!0});var ZWr=s(ZP);$ho=r(ZWr,"Wav2Vec2Model"),ZWr.forEach(t),Iho=r(xwe," (Wav2Vec2 model)"),xwe.forEach(t),qho=i(M),xp=n(M,"LI",{});var kwe=s(xp);Bte=n(kwe,"STRONG",{});var eHr=s(Bte);Nho=r(eHr,"wavlm"),eHr.forEach(t),jho=r(kwe," \u2014 "),e$=n(kwe,"A",{href:!0});var oHr=s(e$);Dho=r(oHr,"WavLMModel"),oHr.forEach(t),Gho=r(kwe," (WavLM model)"),kwe.forEach(t),Oho=i(M),kp=n(M,"LI",{});var Swe=s(kp);Pte=n(Swe,"STRONG",{});var rHr=s(Pte);Vho=r(rHr,"xglm"),rHr.forEach(t),Xho=r(Swe," \u2014 "),o$=n(Swe,"A",{href:!0});var tHr=s(o$);zho=r(tHr,"XGLMModel"),tHr.forEach(t),Qho=r(Swe," (XGLM model)"),Swe.forEach(t),Who=i(M),Sp=n(M,"LI",{});var Rwe=s(Sp);$te=n(Rwe,"STRONG",{});var aHr=s($te);Hho=r(aHr,"xlm"),aHr.forEach(t),Uho=r(Rwe," \u2014 "),r$=n(Rwe,"A",{href:!0});var nHr=s(r$);Jho=r(nHr,"XLMModel"),nHr.forEach(t),Yho=r(Rwe," (XLM model)"),Rwe.forEach(t),Kho=i(M),Rp=n(M,"LI",{});var Bwe=s(Rp);Ite=n(Bwe,"STRONG",{});var sHr=s(Ite);Zho=r(sHr,"xlm-prophetnet"),sHr.forEach(t),euo=r(Bwe," \u2014 "),t$=n(Bwe,"A",{href:!0});var lHr=s(t$);ouo=r(lHr,"XLMProphetNetModel"),lHr.forEach(t),ruo=r(Bwe," (XLMProphetNet model)"),Bwe.forEach(t),tuo=i(M),Bp=n(M,"LI",{});var Pwe=s(Bp);qte=n(Pwe,"STRONG",{});var iHr=s(qte);auo=r(iHr,"xlm-roberta"),iHr.forEach(t),nuo=r(Pwe," \u2014 "),a$=n(Pwe,"A",{href:!0});var dHr=s(a$);suo=r(dHr,"XLMRobertaModel"),dHr.forEach(t),luo=r(Pwe," (XLM-RoBERTa model)"),Pwe.forEach(t),iuo=i(M),Pp=n(M,"LI",{});var $we=s(Pp);Nte=n($we,"STRONG",{});var cHr=s(Nte);duo=r(cHr,"xlm-roberta-xl"),cHr.forEach(t),cuo=r($we," \u2014 "),n$=n($we,"A",{href:!0});var mHr=s(n$);muo=r(mHr,"XLMRobertaXLModel"),mHr.forEach(t),fuo=r($we," (XLM-RoBERTa-XL model)"),$we.forEach(t),guo=i(M),$p=n(M,"LI",{});var Iwe=s($p);jte=n(Iwe,"STRONG",{});var fHr=s(jte);huo=r(fHr,"xlnet"),fHr.forEach(t),uuo=r(Iwe," \u2014 "),s$=n(Iwe,"A",{href:!0});var gHr=s(s$);puo=r(gHr,"XLNetModel"),gHr.forEach(t),_uo=r(Iwe," (XLNet model)"),Iwe.forEach(t),buo=i(M),Ip=n(M,"LI",{});var qwe=s(Ip);Dte=n(qwe,"STRONG",{});var hHr=s(Dte);vuo=r(hHr,"yoso"),hHr.forEach(t),Fuo=r(qwe," \u2014 "),l$=n(qwe,"A",{href:!0});var uHr=s(l$);Tuo=r(uHr,"YosoModel"),uHr.forEach(t),Muo=r(qwe," (YOSO model)"),qwe.forEach(t),M.forEach(t),Euo=i(Dt),qp=n(Dt,"P",{});var Nwe=s(qp);Cuo=r(Nwe,"The model is set in evaluation mode by default using "),Gte=n(Nwe,"CODE",{});var pHr=s(Gte);wuo=r(pHr,"model.eval()"),pHr.forEach(t),Auo=r(Nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ote=n(Nwe,"CODE",{});var _Hr=s(Ote);yuo=r(_Hr,"model.train()"),_Hr.forEach(t),Nwe.forEach(t),Luo=i(Dt),Vte=n(Dt,"P",{});var bHr=s(Vte);xuo=r(bHr,"Examples:"),bHr.forEach(t),kuo=i(Dt),f(u6.$$.fragment,Dt),Dt.forEach(t),Us.forEach(t),KRe=i(c),rd=n(c,"H2",{class:!0});var l$e=s(rd);Np=n(l$e,"A",{id:!0,class:!0,href:!0});var vHr=s(Np);Xte=n(vHr,"SPAN",{});var FHr=s(Xte);f(p6.$$.fragment,FHr),FHr.forEach(t),vHr.forEach(t),Suo=i(l$e),zte=n(l$e,"SPAN",{});var THr=s(zte);Ruo=r(THr,"AutoModelForPreTraining"),THr.forEach(t),l$e.forEach(t),ZRe=i(c),Yo=n(c,"DIV",{class:!0});var Ys=s(Yo);f(_6.$$.fragment,Ys),Buo=i(Ys),td=n(Ys,"P",{});var LU=s(td);Puo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=n(LU,"A",{href:!0});var MHr=s(i$);$uo=r(MHr,"from_pretrained()"),MHr.forEach(t),Iuo=r(LU," class method or the "),d$=n(LU,"A",{href:!0});var EHr=s(d$);quo=r(EHr,"from_config()"),EHr.forEach(t),Nuo=r(LU,` class
method.`),LU.forEach(t),juo=i(Ys),b6=n(Ys,"P",{});var i$e=s(b6);Duo=r(i$e,"This class cannot be instantiated directly using "),Qte=n(i$e,"CODE",{});var CHr=s(Qte);Guo=r(CHr,"__init__()"),CHr.forEach(t),Ouo=r(i$e," (throws an error)."),i$e.forEach(t),Vuo=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);f(v6.$$.fragment,Ks),Xuo=i(Ks),Wte=n(Ks,"P",{});var wHr=s(Wte);zuo=r(wHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wHr.forEach(t),Quo=i(Ks),ad=n(Ks,"P",{});var xU=s(ad);Wuo=r(xU,`Note:
Loading a model from its configuration file does `),Hte=n(xU,"STRONG",{});var AHr=s(Hte);Huo=r(AHr,"not"),AHr.forEach(t),Uuo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=n(xU,"A",{href:!0});var yHr=s(c$);Juo=r(yHr,"from_pretrained()"),yHr.forEach(t),Yuo=r(xU," to load the model weights."),xU.forEach(t),Kuo=i(Ks),Ute=n(Ks,"P",{});var LHr=s(Ute);Zuo=r(LHr,"Examples:"),LHr.forEach(t),epo=i(Ks),f(F6.$$.fragment,Ks),Ks.forEach(t),opo=i(Ys),Ne=n(Ys,"DIV",{class:!0});var Gt=s(Ne);f(T6.$$.fragment,Gt),rpo=i(Gt),Jte=n(Gt,"P",{});var xHr=s(Jte);tpo=r(xHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xHr.forEach(t),apo=i(Gt),za=n(Gt,"P",{});var BC=s(za);npo=r(BC,"The model class to instantiate is selected based on the "),Yte=n(BC,"CODE",{});var kHr=s(Yte);spo=r(kHr,"model_type"),kHr.forEach(t),lpo=r(BC,` property of the config object (either
passed as an argument or loaded from `),Kte=n(BC,"CODE",{});var SHr=s(Kte);ipo=r(SHr,"pretrained_model_name_or_path"),SHr.forEach(t),dpo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zte=n(BC,"CODE",{});var RHr=s(Zte);cpo=r(RHr,"pretrained_model_name_or_path"),RHr.forEach(t),mpo=r(BC,":"),BC.forEach(t),fpo=i(Gt),S=n(Gt,"UL",{});var B=s(S);jp=n(B,"LI",{});var jwe=s(jp);eae=n(jwe,"STRONG",{});var BHr=s(eae);gpo=r(BHr,"albert"),BHr.forEach(t),hpo=r(jwe," \u2014 "),m$=n(jwe,"A",{href:!0});var PHr=s(m$);upo=r(PHr,"AlbertForPreTraining"),PHr.forEach(t),ppo=r(jwe," (ALBERT model)"),jwe.forEach(t),_po=i(B),Dp=n(B,"LI",{});var Dwe=s(Dp);oae=n(Dwe,"STRONG",{});var $Hr=s(oae);bpo=r($Hr,"bart"),$Hr.forEach(t),vpo=r(Dwe," \u2014 "),f$=n(Dwe,"A",{href:!0});var IHr=s(f$);Fpo=r(IHr,"BartForConditionalGeneration"),IHr.forEach(t),Tpo=r(Dwe," (BART model)"),Dwe.forEach(t),Mpo=i(B),Gp=n(B,"LI",{});var Gwe=s(Gp);rae=n(Gwe,"STRONG",{});var qHr=s(rae);Epo=r(qHr,"bert"),qHr.forEach(t),Cpo=r(Gwe," \u2014 "),g$=n(Gwe,"A",{href:!0});var NHr=s(g$);wpo=r(NHr,"BertForPreTraining"),NHr.forEach(t),Apo=r(Gwe," (BERT model)"),Gwe.forEach(t),ypo=i(B),Op=n(B,"LI",{});var Owe=s(Op);tae=n(Owe,"STRONG",{});var jHr=s(tae);Lpo=r(jHr,"big_bird"),jHr.forEach(t),xpo=r(Owe," \u2014 "),h$=n(Owe,"A",{href:!0});var DHr=s(h$);kpo=r(DHr,"BigBirdForPreTraining"),DHr.forEach(t),Spo=r(Owe," (BigBird model)"),Owe.forEach(t),Rpo=i(B),Vp=n(B,"LI",{});var Vwe=s(Vp);aae=n(Vwe,"STRONG",{});var GHr=s(aae);Bpo=r(GHr,"camembert"),GHr.forEach(t),Ppo=r(Vwe," \u2014 "),u$=n(Vwe,"A",{href:!0});var OHr=s(u$);$po=r(OHr,"CamembertForMaskedLM"),OHr.forEach(t),Ipo=r(Vwe," (CamemBERT model)"),Vwe.forEach(t),qpo=i(B),Xp=n(B,"LI",{});var Xwe=s(Xp);nae=n(Xwe,"STRONG",{});var VHr=s(nae);Npo=r(VHr,"ctrl"),VHr.forEach(t),jpo=r(Xwe," \u2014 "),p$=n(Xwe,"A",{href:!0});var XHr=s(p$);Dpo=r(XHr,"CTRLLMHeadModel"),XHr.forEach(t),Gpo=r(Xwe," (CTRL model)"),Xwe.forEach(t),Opo=i(B),zp=n(B,"LI",{});var zwe=s(zp);sae=n(zwe,"STRONG",{});var zHr=s(sae);Vpo=r(zHr,"data2vec-text"),zHr.forEach(t),Xpo=r(zwe," \u2014 "),_$=n(zwe,"A",{href:!0});var QHr=s(_$);zpo=r(QHr,"Data2VecTextForMaskedLM"),QHr.forEach(t),Qpo=r(zwe," (Data2VecText model)"),zwe.forEach(t),Wpo=i(B),Qp=n(B,"LI",{});var Qwe=s(Qp);lae=n(Qwe,"STRONG",{});var WHr=s(lae);Hpo=r(WHr,"deberta"),WHr.forEach(t),Upo=r(Qwe," \u2014 "),b$=n(Qwe,"A",{href:!0});var HHr=s(b$);Jpo=r(HHr,"DebertaForMaskedLM"),HHr.forEach(t),Ypo=r(Qwe," (DeBERTa model)"),Qwe.forEach(t),Kpo=i(B),Wp=n(B,"LI",{});var Wwe=s(Wp);iae=n(Wwe,"STRONG",{});var UHr=s(iae);Zpo=r(UHr,"deberta-v2"),UHr.forEach(t),e_o=r(Wwe," \u2014 "),v$=n(Wwe,"A",{href:!0});var JHr=s(v$);o_o=r(JHr,"DebertaV2ForMaskedLM"),JHr.forEach(t),r_o=r(Wwe," (DeBERTa-v2 model)"),Wwe.forEach(t),t_o=i(B),Hp=n(B,"LI",{});var Hwe=s(Hp);dae=n(Hwe,"STRONG",{});var YHr=s(dae);a_o=r(YHr,"distilbert"),YHr.forEach(t),n_o=r(Hwe," \u2014 "),F$=n(Hwe,"A",{href:!0});var KHr=s(F$);s_o=r(KHr,"DistilBertForMaskedLM"),KHr.forEach(t),l_o=r(Hwe," (DistilBERT model)"),Hwe.forEach(t),i_o=i(B),Up=n(B,"LI",{});var Uwe=s(Up);cae=n(Uwe,"STRONG",{});var ZHr=s(cae);d_o=r(ZHr,"electra"),ZHr.forEach(t),c_o=r(Uwe," \u2014 "),T$=n(Uwe,"A",{href:!0});var eUr=s(T$);m_o=r(eUr,"ElectraForPreTraining"),eUr.forEach(t),f_o=r(Uwe," (ELECTRA model)"),Uwe.forEach(t),g_o=i(B),Jp=n(B,"LI",{});var Jwe=s(Jp);mae=n(Jwe,"STRONG",{});var oUr=s(mae);h_o=r(oUr,"flaubert"),oUr.forEach(t),u_o=r(Jwe," \u2014 "),M$=n(Jwe,"A",{href:!0});var rUr=s(M$);p_o=r(rUr,"FlaubertWithLMHeadModel"),rUr.forEach(t),__o=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),b_o=i(B),Yp=n(B,"LI",{});var Ywe=s(Yp);fae=n(Ywe,"STRONG",{});var tUr=s(fae);v_o=r(tUr,"fnet"),tUr.forEach(t),F_o=r(Ywe," \u2014 "),E$=n(Ywe,"A",{href:!0});var aUr=s(E$);T_o=r(aUr,"FNetForPreTraining"),aUr.forEach(t),M_o=r(Ywe," (FNet model)"),Ywe.forEach(t),E_o=i(B),Kp=n(B,"LI",{});var Kwe=s(Kp);gae=n(Kwe,"STRONG",{});var nUr=s(gae);C_o=r(nUr,"fsmt"),nUr.forEach(t),w_o=r(Kwe," \u2014 "),C$=n(Kwe,"A",{href:!0});var sUr=s(C$);A_o=r(sUr,"FSMTForConditionalGeneration"),sUr.forEach(t),y_o=r(Kwe," (FairSeq Machine-Translation model)"),Kwe.forEach(t),L_o=i(B),Zp=n(B,"LI",{});var Zwe=s(Zp);hae=n(Zwe,"STRONG",{});var lUr=s(hae);x_o=r(lUr,"funnel"),lUr.forEach(t),k_o=r(Zwe," \u2014 "),w$=n(Zwe,"A",{href:!0});var iUr=s(w$);S_o=r(iUr,"FunnelForPreTraining"),iUr.forEach(t),R_o=r(Zwe," (Funnel Transformer model)"),Zwe.forEach(t),B_o=i(B),e_=n(B,"LI",{});var e6e=s(e_);uae=n(e6e,"STRONG",{});var dUr=s(uae);P_o=r(dUr,"gpt2"),dUr.forEach(t),$_o=r(e6e," \u2014 "),A$=n(e6e,"A",{href:!0});var cUr=s(A$);I_o=r(cUr,"GPT2LMHeadModel"),cUr.forEach(t),q_o=r(e6e," (OpenAI GPT-2 model)"),e6e.forEach(t),N_o=i(B),o_=n(B,"LI",{});var o6e=s(o_);pae=n(o6e,"STRONG",{});var mUr=s(pae);j_o=r(mUr,"ibert"),mUr.forEach(t),D_o=r(o6e," \u2014 "),y$=n(o6e,"A",{href:!0});var fUr=s(y$);G_o=r(fUr,"IBertForMaskedLM"),fUr.forEach(t),O_o=r(o6e," (I-BERT model)"),o6e.forEach(t),V_o=i(B),r_=n(B,"LI",{});var r6e=s(r_);_ae=n(r6e,"STRONG",{});var gUr=s(_ae);X_o=r(gUr,"layoutlm"),gUr.forEach(t),z_o=r(r6e," \u2014 "),L$=n(r6e,"A",{href:!0});var hUr=s(L$);Q_o=r(hUr,"LayoutLMForMaskedLM"),hUr.forEach(t),W_o=r(r6e," (LayoutLM model)"),r6e.forEach(t),H_o=i(B),t_=n(B,"LI",{});var t6e=s(t_);bae=n(t6e,"STRONG",{});var uUr=s(bae);U_o=r(uUr,"longformer"),uUr.forEach(t),J_o=r(t6e," \u2014 "),x$=n(t6e,"A",{href:!0});var pUr=s(x$);Y_o=r(pUr,"LongformerForMaskedLM"),pUr.forEach(t),K_o=r(t6e," (Longformer model)"),t6e.forEach(t),Z_o=i(B),a_=n(B,"LI",{});var a6e=s(a_);vae=n(a6e,"STRONG",{});var _Ur=s(vae);ebo=r(_Ur,"lxmert"),_Ur.forEach(t),obo=r(a6e," \u2014 "),k$=n(a6e,"A",{href:!0});var bUr=s(k$);rbo=r(bUr,"LxmertForPreTraining"),bUr.forEach(t),tbo=r(a6e," (LXMERT model)"),a6e.forEach(t),abo=i(B),n_=n(B,"LI",{});var n6e=s(n_);Fae=n(n6e,"STRONG",{});var vUr=s(Fae);nbo=r(vUr,"megatron-bert"),vUr.forEach(t),sbo=r(n6e," \u2014 "),S$=n(n6e,"A",{href:!0});var FUr=s(S$);lbo=r(FUr,"MegatronBertForPreTraining"),FUr.forEach(t),ibo=r(n6e," (MegatronBert model)"),n6e.forEach(t),dbo=i(B),s_=n(B,"LI",{});var s6e=s(s_);Tae=n(s6e,"STRONG",{});var TUr=s(Tae);cbo=r(TUr,"mobilebert"),TUr.forEach(t),mbo=r(s6e," \u2014 "),R$=n(s6e,"A",{href:!0});var MUr=s(R$);fbo=r(MUr,"MobileBertForPreTraining"),MUr.forEach(t),gbo=r(s6e," (MobileBERT model)"),s6e.forEach(t),hbo=i(B),l_=n(B,"LI",{});var l6e=s(l_);Mae=n(l6e,"STRONG",{});var EUr=s(Mae);ubo=r(EUr,"mpnet"),EUr.forEach(t),pbo=r(l6e," \u2014 "),B$=n(l6e,"A",{href:!0});var CUr=s(B$);_bo=r(CUr,"MPNetForMaskedLM"),CUr.forEach(t),bbo=r(l6e," (MPNet model)"),l6e.forEach(t),vbo=i(B),i_=n(B,"LI",{});var i6e=s(i_);Eae=n(i6e,"STRONG",{});var wUr=s(Eae);Fbo=r(wUr,"openai-gpt"),wUr.forEach(t),Tbo=r(i6e," \u2014 "),P$=n(i6e,"A",{href:!0});var AUr=s(P$);Mbo=r(AUr,"OpenAIGPTLMHeadModel"),AUr.forEach(t),Ebo=r(i6e," (OpenAI GPT model)"),i6e.forEach(t),Cbo=i(B),d_=n(B,"LI",{});var d6e=s(d_);Cae=n(d6e,"STRONG",{});var yUr=s(Cae);wbo=r(yUr,"retribert"),yUr.forEach(t),Abo=r(d6e," \u2014 "),$$=n(d6e,"A",{href:!0});var LUr=s($$);ybo=r(LUr,"RetriBertModel"),LUr.forEach(t),Lbo=r(d6e," (RetriBERT model)"),d6e.forEach(t),xbo=i(B),c_=n(B,"LI",{});var c6e=s(c_);wae=n(c6e,"STRONG",{});var xUr=s(wae);kbo=r(xUr,"roberta"),xUr.forEach(t),Sbo=r(c6e," \u2014 "),I$=n(c6e,"A",{href:!0});var kUr=s(I$);Rbo=r(kUr,"RobertaForMaskedLM"),kUr.forEach(t),Bbo=r(c6e," (RoBERTa model)"),c6e.forEach(t),Pbo=i(B),m_=n(B,"LI",{});var m6e=s(m_);Aae=n(m6e,"STRONG",{});var SUr=s(Aae);$bo=r(SUr,"squeezebert"),SUr.forEach(t),Ibo=r(m6e," \u2014 "),q$=n(m6e,"A",{href:!0});var RUr=s(q$);qbo=r(RUr,"SqueezeBertForMaskedLM"),RUr.forEach(t),Nbo=r(m6e," (SqueezeBERT model)"),m6e.forEach(t),jbo=i(B),f_=n(B,"LI",{});var f6e=s(f_);yae=n(f6e,"STRONG",{});var BUr=s(yae);Dbo=r(BUr,"t5"),BUr.forEach(t),Gbo=r(f6e," \u2014 "),N$=n(f6e,"A",{href:!0});var PUr=s(N$);Obo=r(PUr,"T5ForConditionalGeneration"),PUr.forEach(t),Vbo=r(f6e," (T5 model)"),f6e.forEach(t),Xbo=i(B),g_=n(B,"LI",{});var g6e=s(g_);Lae=n(g6e,"STRONG",{});var $Ur=s(Lae);zbo=r($Ur,"tapas"),$Ur.forEach(t),Qbo=r(g6e," \u2014 "),j$=n(g6e,"A",{href:!0});var IUr=s(j$);Wbo=r(IUr,"TapasForMaskedLM"),IUr.forEach(t),Hbo=r(g6e," (TAPAS model)"),g6e.forEach(t),Ubo=i(B),h_=n(B,"LI",{});var h6e=s(h_);xae=n(h6e,"STRONG",{});var qUr=s(xae);Jbo=r(qUr,"transfo-xl"),qUr.forEach(t),Ybo=r(h6e," \u2014 "),D$=n(h6e,"A",{href:!0});var NUr=s(D$);Kbo=r(NUr,"TransfoXLLMHeadModel"),NUr.forEach(t),Zbo=r(h6e," (Transformer-XL model)"),h6e.forEach(t),e2o=i(B),u_=n(B,"LI",{});var u6e=s(u_);kae=n(u6e,"STRONG",{});var jUr=s(kae);o2o=r(jUr,"unispeech"),jUr.forEach(t),r2o=r(u6e," \u2014 "),G$=n(u6e,"A",{href:!0});var DUr=s(G$);t2o=r(DUr,"UniSpeechForPreTraining"),DUr.forEach(t),a2o=r(u6e," (UniSpeech model)"),u6e.forEach(t),n2o=i(B),p_=n(B,"LI",{});var p6e=s(p_);Sae=n(p6e,"STRONG",{});var GUr=s(Sae);s2o=r(GUr,"unispeech-sat"),GUr.forEach(t),l2o=r(p6e," \u2014 "),O$=n(p6e,"A",{href:!0});var OUr=s(O$);i2o=r(OUr,"UniSpeechSatForPreTraining"),OUr.forEach(t),d2o=r(p6e," (UniSpeechSat model)"),p6e.forEach(t),c2o=i(B),__=n(B,"LI",{});var _6e=s(__);Rae=n(_6e,"STRONG",{});var VUr=s(Rae);m2o=r(VUr,"visual_bert"),VUr.forEach(t),f2o=r(_6e," \u2014 "),V$=n(_6e,"A",{href:!0});var XUr=s(V$);g2o=r(XUr,"VisualBertForPreTraining"),XUr.forEach(t),h2o=r(_6e," (VisualBert model)"),_6e.forEach(t),u2o=i(B),b_=n(B,"LI",{});var b6e=s(b_);Bae=n(b6e,"STRONG",{});var zUr=s(Bae);p2o=r(zUr,"vit_mae"),zUr.forEach(t),_2o=r(b6e," \u2014 "),X$=n(b6e,"A",{href:!0});var QUr=s(X$);b2o=r(QUr,"ViTMAEForPreTraining"),QUr.forEach(t),v2o=r(b6e," (ViTMAE model)"),b6e.forEach(t),F2o=i(B),v_=n(B,"LI",{});var v6e=s(v_);Pae=n(v6e,"STRONG",{});var WUr=s(Pae);T2o=r(WUr,"wav2vec2"),WUr.forEach(t),M2o=r(v6e," \u2014 "),z$=n(v6e,"A",{href:!0});var HUr=s(z$);E2o=r(HUr,"Wav2Vec2ForPreTraining"),HUr.forEach(t),C2o=r(v6e," (Wav2Vec2 model)"),v6e.forEach(t),w2o=i(B),F_=n(B,"LI",{});var F6e=s(F_);$ae=n(F6e,"STRONG",{});var UUr=s($ae);A2o=r(UUr,"xlm"),UUr.forEach(t),y2o=r(F6e," \u2014 "),Q$=n(F6e,"A",{href:!0});var JUr=s(Q$);L2o=r(JUr,"XLMWithLMHeadModel"),JUr.forEach(t),x2o=r(F6e," (XLM model)"),F6e.forEach(t),k2o=i(B),T_=n(B,"LI",{});var T6e=s(T_);Iae=n(T6e,"STRONG",{});var YUr=s(Iae);S2o=r(YUr,"xlm-roberta"),YUr.forEach(t),R2o=r(T6e," \u2014 "),W$=n(T6e,"A",{href:!0});var KUr=s(W$);B2o=r(KUr,"XLMRobertaForMaskedLM"),KUr.forEach(t),P2o=r(T6e," (XLM-RoBERTa model)"),T6e.forEach(t),$2o=i(B),M_=n(B,"LI",{});var M6e=s(M_);qae=n(M6e,"STRONG",{});var ZUr=s(qae);I2o=r(ZUr,"xlm-roberta-xl"),ZUr.forEach(t),q2o=r(M6e," \u2014 "),H$=n(M6e,"A",{href:!0});var eJr=s(H$);N2o=r(eJr,"XLMRobertaXLForMaskedLM"),eJr.forEach(t),j2o=r(M6e," (XLM-RoBERTa-XL model)"),M6e.forEach(t),D2o=i(B),E_=n(B,"LI",{});var E6e=s(E_);Nae=n(E6e,"STRONG",{});var oJr=s(Nae);G2o=r(oJr,"xlnet"),oJr.forEach(t),O2o=r(E6e," \u2014 "),U$=n(E6e,"A",{href:!0});var rJr=s(U$);V2o=r(rJr,"XLNetLMHeadModel"),rJr.forEach(t),X2o=r(E6e," (XLNet model)"),E6e.forEach(t),B.forEach(t),z2o=i(Gt),C_=n(Gt,"P",{});var C6e=s(C_);Q2o=r(C6e,"The model is set in evaluation mode by default using "),jae=n(C6e,"CODE",{});var tJr=s(jae);W2o=r(tJr,"model.eval()"),tJr.forEach(t),H2o=r(C6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dae=n(C6e,"CODE",{});var aJr=s(Dae);U2o=r(aJr,"model.train()"),aJr.forEach(t),C6e.forEach(t),J2o=i(Gt),Gae=n(Gt,"P",{});var nJr=s(Gae);Y2o=r(nJr,"Examples:"),nJr.forEach(t),K2o=i(Gt),f(M6.$$.fragment,Gt),Gt.forEach(t),Ys.forEach(t),eBe=i(c),nd=n(c,"H2",{class:!0});var d$e=s(nd);w_=n(d$e,"A",{id:!0,class:!0,href:!0});var sJr=s(w_);Oae=n(sJr,"SPAN",{});var lJr=s(Oae);f(E6.$$.fragment,lJr),lJr.forEach(t),sJr.forEach(t),Z2o=i(d$e),Vae=n(d$e,"SPAN",{});var iJr=s(Vae);evo=r(iJr,"AutoModelForCausalLM"),iJr.forEach(t),d$e.forEach(t),oBe=i(c),Ko=n(c,"DIV",{class:!0});var Zs=s(Ko);f(C6.$$.fragment,Zs),ovo=i(Zs),sd=n(Zs,"P",{});var kU=s(sd);rvo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=n(kU,"A",{href:!0});var dJr=s(J$);tvo=r(dJr,"from_pretrained()"),dJr.forEach(t),avo=r(kU," class method or the "),Y$=n(kU,"A",{href:!0});var cJr=s(Y$);nvo=r(cJr,"from_config()"),cJr.forEach(t),svo=r(kU,` class
method.`),kU.forEach(t),lvo=i(Zs),w6=n(Zs,"P",{});var c$e=s(w6);ivo=r(c$e,"This class cannot be instantiated directly using "),Xae=n(c$e,"CODE",{});var mJr=s(Xae);dvo=r(mJr,"__init__()"),mJr.forEach(t),cvo=r(c$e," (throws an error)."),c$e.forEach(t),mvo=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);f(A6.$$.fragment,el),fvo=i(el),zae=n(el,"P",{});var fJr=s(zae);gvo=r(fJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fJr.forEach(t),hvo=i(el),ld=n(el,"P",{});var SU=s(ld);uvo=r(SU,`Note:
Loading a model from its configuration file does `),Qae=n(SU,"STRONG",{});var gJr=s(Qae);pvo=r(gJr,"not"),gJr.forEach(t),_vo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=n(SU,"A",{href:!0});var hJr=s(K$);bvo=r(hJr,"from_pretrained()"),hJr.forEach(t),vvo=r(SU," to load the model weights."),SU.forEach(t),Fvo=i(el),Wae=n(el,"P",{});var uJr=s(Wae);Tvo=r(uJr,"Examples:"),uJr.forEach(t),Mvo=i(el),f(y6.$$.fragment,el),el.forEach(t),Evo=i(Zs),je=n(Zs,"DIV",{class:!0});var Ot=s(je);f(L6.$$.fragment,Ot),Cvo=i(Ot),Hae=n(Ot,"P",{});var pJr=s(Hae);wvo=r(pJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pJr.forEach(t),Avo=i(Ot),Qa=n(Ot,"P",{});var PC=s(Qa);yvo=r(PC,"The model class to instantiate is selected based on the "),Uae=n(PC,"CODE",{});var _Jr=s(Uae);Lvo=r(_Jr,"model_type"),_Jr.forEach(t),xvo=r(PC,` property of the config object (either
passed as an argument or loaded from `),Jae=n(PC,"CODE",{});var bJr=s(Jae);kvo=r(bJr,"pretrained_model_name_or_path"),bJr.forEach(t),Svo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=n(PC,"CODE",{});var vJr=s(Yae);Rvo=r(vJr,"pretrained_model_name_or_path"),vJr.forEach(t),Bvo=r(PC,":"),PC.forEach(t),Pvo=i(Ot),$=n(Ot,"UL",{});var q=s($);A_=n(q,"LI",{});var w6e=s(A_);Kae=n(w6e,"STRONG",{});var FJr=s(Kae);$vo=r(FJr,"bart"),FJr.forEach(t),Ivo=r(w6e," \u2014 "),Z$=n(w6e,"A",{href:!0});var TJr=s(Z$);qvo=r(TJr,"BartForCausalLM"),TJr.forEach(t),Nvo=r(w6e," (BART model)"),w6e.forEach(t),jvo=i(q),y_=n(q,"LI",{});var A6e=s(y_);Zae=n(A6e,"STRONG",{});var MJr=s(Zae);Dvo=r(MJr,"bert"),MJr.forEach(t),Gvo=r(A6e," \u2014 "),eI=n(A6e,"A",{href:!0});var EJr=s(eI);Ovo=r(EJr,"BertLMHeadModel"),EJr.forEach(t),Vvo=r(A6e," (BERT model)"),A6e.forEach(t),Xvo=i(q),L_=n(q,"LI",{});var y6e=s(L_);ene=n(y6e,"STRONG",{});var CJr=s(ene);zvo=r(CJr,"bert-generation"),CJr.forEach(t),Qvo=r(y6e," \u2014 "),oI=n(y6e,"A",{href:!0});var wJr=s(oI);Wvo=r(wJr,"BertGenerationDecoder"),wJr.forEach(t),Hvo=r(y6e," (Bert Generation model)"),y6e.forEach(t),Uvo=i(q),x_=n(q,"LI",{});var L6e=s(x_);one=n(L6e,"STRONG",{});var AJr=s(one);Jvo=r(AJr,"big_bird"),AJr.forEach(t),Yvo=r(L6e," \u2014 "),rI=n(L6e,"A",{href:!0});var yJr=s(rI);Kvo=r(yJr,"BigBirdForCausalLM"),yJr.forEach(t),Zvo=r(L6e," (BigBird model)"),L6e.forEach(t),eFo=i(q),k_=n(q,"LI",{});var x6e=s(k_);rne=n(x6e,"STRONG",{});var LJr=s(rne);oFo=r(LJr,"bigbird_pegasus"),LJr.forEach(t),rFo=r(x6e," \u2014 "),tI=n(x6e,"A",{href:!0});var xJr=s(tI);tFo=r(xJr,"BigBirdPegasusForCausalLM"),xJr.forEach(t),aFo=r(x6e," (BigBirdPegasus model)"),x6e.forEach(t),nFo=i(q),S_=n(q,"LI",{});var k6e=s(S_);tne=n(k6e,"STRONG",{});var kJr=s(tne);sFo=r(kJr,"blenderbot"),kJr.forEach(t),lFo=r(k6e," \u2014 "),aI=n(k6e,"A",{href:!0});var SJr=s(aI);iFo=r(SJr,"BlenderbotForCausalLM"),SJr.forEach(t),dFo=r(k6e," (Blenderbot model)"),k6e.forEach(t),cFo=i(q),R_=n(q,"LI",{});var S6e=s(R_);ane=n(S6e,"STRONG",{});var RJr=s(ane);mFo=r(RJr,"blenderbot-small"),RJr.forEach(t),fFo=r(S6e," \u2014 "),nI=n(S6e,"A",{href:!0});var BJr=s(nI);gFo=r(BJr,"BlenderbotSmallForCausalLM"),BJr.forEach(t),hFo=r(S6e," (BlenderbotSmall model)"),S6e.forEach(t),uFo=i(q),B_=n(q,"LI",{});var R6e=s(B_);nne=n(R6e,"STRONG",{});var PJr=s(nne);pFo=r(PJr,"camembert"),PJr.forEach(t),_Fo=r(R6e," \u2014 "),sI=n(R6e,"A",{href:!0});var $Jr=s(sI);bFo=r($Jr,"CamembertForCausalLM"),$Jr.forEach(t),vFo=r(R6e," (CamemBERT model)"),R6e.forEach(t),FFo=i(q),P_=n(q,"LI",{});var B6e=s(P_);sne=n(B6e,"STRONG",{});var IJr=s(sne);TFo=r(IJr,"ctrl"),IJr.forEach(t),MFo=r(B6e," \u2014 "),lI=n(B6e,"A",{href:!0});var qJr=s(lI);EFo=r(qJr,"CTRLLMHeadModel"),qJr.forEach(t),CFo=r(B6e," (CTRL model)"),B6e.forEach(t),wFo=i(q),$_=n(q,"LI",{});var P6e=s($_);lne=n(P6e,"STRONG",{});var NJr=s(lne);AFo=r(NJr,"data2vec-text"),NJr.forEach(t),yFo=r(P6e," \u2014 "),iI=n(P6e,"A",{href:!0});var jJr=s(iI);LFo=r(jJr,"Data2VecTextForCausalLM"),jJr.forEach(t),xFo=r(P6e," (Data2VecText model)"),P6e.forEach(t),kFo=i(q),I_=n(q,"LI",{});var $6e=s(I_);ine=n($6e,"STRONG",{});var DJr=s(ine);SFo=r(DJr,"electra"),DJr.forEach(t),RFo=r($6e," \u2014 "),dI=n($6e,"A",{href:!0});var GJr=s(dI);BFo=r(GJr,"ElectraForCausalLM"),GJr.forEach(t),PFo=r($6e," (ELECTRA model)"),$6e.forEach(t),$Fo=i(q),q_=n(q,"LI",{});var I6e=s(q_);dne=n(I6e,"STRONG",{});var OJr=s(dne);IFo=r(OJr,"gpt2"),OJr.forEach(t),qFo=r(I6e," \u2014 "),cI=n(I6e,"A",{href:!0});var VJr=s(cI);NFo=r(VJr,"GPT2LMHeadModel"),VJr.forEach(t),jFo=r(I6e," (OpenAI GPT-2 model)"),I6e.forEach(t),DFo=i(q),N_=n(q,"LI",{});var q6e=s(N_);cne=n(q6e,"STRONG",{});var XJr=s(cne);GFo=r(XJr,"gpt_neo"),XJr.forEach(t),OFo=r(q6e," \u2014 "),mI=n(q6e,"A",{href:!0});var zJr=s(mI);VFo=r(zJr,"GPTNeoForCausalLM"),zJr.forEach(t),XFo=r(q6e," (GPT Neo model)"),q6e.forEach(t),zFo=i(q),j_=n(q,"LI",{});var N6e=s(j_);mne=n(N6e,"STRONG",{});var QJr=s(mne);QFo=r(QJr,"gptj"),QJr.forEach(t),WFo=r(N6e," \u2014 "),fI=n(N6e,"A",{href:!0});var WJr=s(fI);HFo=r(WJr,"GPTJForCausalLM"),WJr.forEach(t),UFo=r(N6e," (GPT-J model)"),N6e.forEach(t),JFo=i(q),D_=n(q,"LI",{});var j6e=s(D_);fne=n(j6e,"STRONG",{});var HJr=s(fne);YFo=r(HJr,"marian"),HJr.forEach(t),KFo=r(j6e," \u2014 "),gI=n(j6e,"A",{href:!0});var UJr=s(gI);ZFo=r(UJr,"MarianForCausalLM"),UJr.forEach(t),e1o=r(j6e," (Marian model)"),j6e.forEach(t),o1o=i(q),G_=n(q,"LI",{});var D6e=s(G_);gne=n(D6e,"STRONG",{});var JJr=s(gne);r1o=r(JJr,"mbart"),JJr.forEach(t),t1o=r(D6e," \u2014 "),hI=n(D6e,"A",{href:!0});var YJr=s(hI);a1o=r(YJr,"MBartForCausalLM"),YJr.forEach(t),n1o=r(D6e," (mBART model)"),D6e.forEach(t),s1o=i(q),O_=n(q,"LI",{});var G6e=s(O_);hne=n(G6e,"STRONG",{});var KJr=s(hne);l1o=r(KJr,"megatron-bert"),KJr.forEach(t),i1o=r(G6e," \u2014 "),uI=n(G6e,"A",{href:!0});var ZJr=s(uI);d1o=r(ZJr,"MegatronBertForCausalLM"),ZJr.forEach(t),c1o=r(G6e," (MegatronBert model)"),G6e.forEach(t),m1o=i(q),V_=n(q,"LI",{});var O6e=s(V_);une=n(O6e,"STRONG",{});var eYr=s(une);f1o=r(eYr,"openai-gpt"),eYr.forEach(t),g1o=r(O6e," \u2014 "),pI=n(O6e,"A",{href:!0});var oYr=s(pI);h1o=r(oYr,"OpenAIGPTLMHeadModel"),oYr.forEach(t),u1o=r(O6e," (OpenAI GPT model)"),O6e.forEach(t),p1o=i(q),X_=n(q,"LI",{});var V6e=s(X_);pne=n(V6e,"STRONG",{});var rYr=s(pne);_1o=r(rYr,"pegasus"),rYr.forEach(t),b1o=r(V6e," \u2014 "),_I=n(V6e,"A",{href:!0});var tYr=s(_I);v1o=r(tYr,"PegasusForCausalLM"),tYr.forEach(t),F1o=r(V6e," (Pegasus model)"),V6e.forEach(t),T1o=i(q),z_=n(q,"LI",{});var X6e=s(z_);_ne=n(X6e,"STRONG",{});var aYr=s(_ne);M1o=r(aYr,"plbart"),aYr.forEach(t),E1o=r(X6e," \u2014 "),bI=n(X6e,"A",{href:!0});var nYr=s(bI);C1o=r(nYr,"PLBartForCausalLM"),nYr.forEach(t),w1o=r(X6e," (PLBart model)"),X6e.forEach(t),A1o=i(q),Q_=n(q,"LI",{});var z6e=s(Q_);bne=n(z6e,"STRONG",{});var sYr=s(bne);y1o=r(sYr,"prophetnet"),sYr.forEach(t),L1o=r(z6e," \u2014 "),vI=n(z6e,"A",{href:!0});var lYr=s(vI);x1o=r(lYr,"ProphetNetForCausalLM"),lYr.forEach(t),k1o=r(z6e," (ProphetNet model)"),z6e.forEach(t),S1o=i(q),W_=n(q,"LI",{});var Q6e=s(W_);vne=n(Q6e,"STRONG",{});var iYr=s(vne);R1o=r(iYr,"qdqbert"),iYr.forEach(t),B1o=r(Q6e," \u2014 "),FI=n(Q6e,"A",{href:!0});var dYr=s(FI);P1o=r(dYr,"QDQBertLMHeadModel"),dYr.forEach(t),$1o=r(Q6e," (QDQBert model)"),Q6e.forEach(t),I1o=i(q),H_=n(q,"LI",{});var W6e=s(H_);Fne=n(W6e,"STRONG",{});var cYr=s(Fne);q1o=r(cYr,"reformer"),cYr.forEach(t),N1o=r(W6e," \u2014 "),TI=n(W6e,"A",{href:!0});var mYr=s(TI);j1o=r(mYr,"ReformerModelWithLMHead"),mYr.forEach(t),D1o=r(W6e," (Reformer model)"),W6e.forEach(t),G1o=i(q),U_=n(q,"LI",{});var H6e=s(U_);Tne=n(H6e,"STRONG",{});var fYr=s(Tne);O1o=r(fYr,"rembert"),fYr.forEach(t),V1o=r(H6e," \u2014 "),MI=n(H6e,"A",{href:!0});var gYr=s(MI);X1o=r(gYr,"RemBertForCausalLM"),gYr.forEach(t),z1o=r(H6e," (RemBERT model)"),H6e.forEach(t),Q1o=i(q),J_=n(q,"LI",{});var U6e=s(J_);Mne=n(U6e,"STRONG",{});var hYr=s(Mne);W1o=r(hYr,"roberta"),hYr.forEach(t),H1o=r(U6e," \u2014 "),EI=n(U6e,"A",{href:!0});var uYr=s(EI);U1o=r(uYr,"RobertaForCausalLM"),uYr.forEach(t),J1o=r(U6e," (RoBERTa model)"),U6e.forEach(t),Y1o=i(q),Y_=n(q,"LI",{});var J6e=s(Y_);Ene=n(J6e,"STRONG",{});var pYr=s(Ene);K1o=r(pYr,"roformer"),pYr.forEach(t),Z1o=r(J6e," \u2014 "),CI=n(J6e,"A",{href:!0});var _Yr=s(CI);eTo=r(_Yr,"RoFormerForCausalLM"),_Yr.forEach(t),oTo=r(J6e," (RoFormer model)"),J6e.forEach(t),rTo=i(q),K_=n(q,"LI",{});var Y6e=s(K_);Cne=n(Y6e,"STRONG",{});var bYr=s(Cne);tTo=r(bYr,"speech_to_text_2"),bYr.forEach(t),aTo=r(Y6e," \u2014 "),wI=n(Y6e,"A",{href:!0});var vYr=s(wI);nTo=r(vYr,"Speech2Text2ForCausalLM"),vYr.forEach(t),sTo=r(Y6e," (Speech2Text2 model)"),Y6e.forEach(t),lTo=i(q),Z_=n(q,"LI",{});var K6e=s(Z_);wne=n(K6e,"STRONG",{});var FYr=s(wne);iTo=r(FYr,"transfo-xl"),FYr.forEach(t),dTo=r(K6e," \u2014 "),AI=n(K6e,"A",{href:!0});var TYr=s(AI);cTo=r(TYr,"TransfoXLLMHeadModel"),TYr.forEach(t),mTo=r(K6e," (Transformer-XL model)"),K6e.forEach(t),fTo=i(q),eb=n(q,"LI",{});var Z6e=s(eb);Ane=n(Z6e,"STRONG",{});var MYr=s(Ane);gTo=r(MYr,"trocr"),MYr.forEach(t),hTo=r(Z6e," \u2014 "),yI=n(Z6e,"A",{href:!0});var EYr=s(yI);uTo=r(EYr,"TrOCRForCausalLM"),EYr.forEach(t),pTo=r(Z6e," (TrOCR model)"),Z6e.forEach(t),_To=i(q),ob=n(q,"LI",{});var eAe=s(ob);yne=n(eAe,"STRONG",{});var CYr=s(yne);bTo=r(CYr,"xglm"),CYr.forEach(t),vTo=r(eAe," \u2014 "),LI=n(eAe,"A",{href:!0});var wYr=s(LI);FTo=r(wYr,"XGLMForCausalLM"),wYr.forEach(t),TTo=r(eAe," (XGLM model)"),eAe.forEach(t),MTo=i(q),rb=n(q,"LI",{});var oAe=s(rb);Lne=n(oAe,"STRONG",{});var AYr=s(Lne);ETo=r(AYr,"xlm"),AYr.forEach(t),CTo=r(oAe," \u2014 "),xI=n(oAe,"A",{href:!0});var yYr=s(xI);wTo=r(yYr,"XLMWithLMHeadModel"),yYr.forEach(t),ATo=r(oAe," (XLM model)"),oAe.forEach(t),yTo=i(q),tb=n(q,"LI",{});var rAe=s(tb);xne=n(rAe,"STRONG",{});var LYr=s(xne);LTo=r(LYr,"xlm-prophetnet"),LYr.forEach(t),xTo=r(rAe," \u2014 "),kI=n(rAe,"A",{href:!0});var xYr=s(kI);kTo=r(xYr,"XLMProphetNetForCausalLM"),xYr.forEach(t),STo=r(rAe," (XLMProphetNet model)"),rAe.forEach(t),RTo=i(q),ab=n(q,"LI",{});var tAe=s(ab);kne=n(tAe,"STRONG",{});var kYr=s(kne);BTo=r(kYr,"xlm-roberta"),kYr.forEach(t),PTo=r(tAe," \u2014 "),SI=n(tAe,"A",{href:!0});var SYr=s(SI);$To=r(SYr,"XLMRobertaForCausalLM"),SYr.forEach(t),ITo=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),qTo=i(q),nb=n(q,"LI",{});var aAe=s(nb);Sne=n(aAe,"STRONG",{});var RYr=s(Sne);NTo=r(RYr,"xlm-roberta-xl"),RYr.forEach(t),jTo=r(aAe," \u2014 "),RI=n(aAe,"A",{href:!0});var BYr=s(RI);DTo=r(BYr,"XLMRobertaXLForCausalLM"),BYr.forEach(t),GTo=r(aAe," (XLM-RoBERTa-XL model)"),aAe.forEach(t),OTo=i(q),sb=n(q,"LI",{});var nAe=s(sb);Rne=n(nAe,"STRONG",{});var PYr=s(Rne);VTo=r(PYr,"xlnet"),PYr.forEach(t),XTo=r(nAe," \u2014 "),BI=n(nAe,"A",{href:!0});var $Yr=s(BI);zTo=r($Yr,"XLNetLMHeadModel"),$Yr.forEach(t),QTo=r(nAe," (XLNet model)"),nAe.forEach(t),q.forEach(t),WTo=i(Ot),lb=n(Ot,"P",{});var sAe=s(lb);HTo=r(sAe,"The model is set in evaluation mode by default using "),Bne=n(sAe,"CODE",{});var IYr=s(Bne);UTo=r(IYr,"model.eval()"),IYr.forEach(t),JTo=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pne=n(sAe,"CODE",{});var qYr=s(Pne);YTo=r(qYr,"model.train()"),qYr.forEach(t),sAe.forEach(t),KTo=i(Ot),$ne=n(Ot,"P",{});var NYr=s($ne);ZTo=r(NYr,"Examples:"),NYr.forEach(t),eMo=i(Ot),f(x6.$$.fragment,Ot),Ot.forEach(t),Zs.forEach(t),rBe=i(c),id=n(c,"H2",{class:!0});var m$e=s(id);ib=n(m$e,"A",{id:!0,class:!0,href:!0});var jYr=s(ib);Ine=n(jYr,"SPAN",{});var DYr=s(Ine);f(k6.$$.fragment,DYr),DYr.forEach(t),jYr.forEach(t),oMo=i(m$e),qne=n(m$e,"SPAN",{});var GYr=s(qne);rMo=r(GYr,"AutoModelForMaskedLM"),GYr.forEach(t),m$e.forEach(t),tBe=i(c),Zo=n(c,"DIV",{class:!0});var ol=s(Zo);f(S6.$$.fragment,ol),tMo=i(ol),dd=n(ol,"P",{});var RU=s(dd);aMo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=n(RU,"A",{href:!0});var OYr=s(PI);nMo=r(OYr,"from_pretrained()"),OYr.forEach(t),sMo=r(RU," class method or the "),$I=n(RU,"A",{href:!0});var VYr=s($I);lMo=r(VYr,"from_config()"),VYr.forEach(t),iMo=r(RU,` class
method.`),RU.forEach(t),dMo=i(ol),R6=n(ol,"P",{});var f$e=s(R6);cMo=r(f$e,"This class cannot be instantiated directly using "),Nne=n(f$e,"CODE",{});var XYr=s(Nne);mMo=r(XYr,"__init__()"),XYr.forEach(t),fMo=r(f$e," (throws an error)."),f$e.forEach(t),gMo=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);f(B6.$$.fragment,rl),hMo=i(rl),jne=n(rl,"P",{});var zYr=s(jne);uMo=r(zYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zYr.forEach(t),pMo=i(rl),cd=n(rl,"P",{});var BU=s(cd);_Mo=r(BU,`Note:
Loading a model from its configuration file does `),Dne=n(BU,"STRONG",{});var QYr=s(Dne);bMo=r(QYr,"not"),QYr.forEach(t),vMo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(BU,"A",{href:!0});var WYr=s(II);FMo=r(WYr,"from_pretrained()"),WYr.forEach(t),TMo=r(BU," to load the model weights."),BU.forEach(t),MMo=i(rl),Gne=n(rl,"P",{});var HYr=s(Gne);EMo=r(HYr,"Examples:"),HYr.forEach(t),CMo=i(rl),f(P6.$$.fragment,rl),rl.forEach(t),wMo=i(ol),De=n(ol,"DIV",{class:!0});var Vt=s(De);f($6.$$.fragment,Vt),AMo=i(Vt),One=n(Vt,"P",{});var UYr=s(One);yMo=r(UYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UYr.forEach(t),LMo=i(Vt),Wa=n(Vt,"P",{});var $C=s(Wa);xMo=r($C,"The model class to instantiate is selected based on the "),Vne=n($C,"CODE",{});var JYr=s(Vne);kMo=r(JYr,"model_type"),JYr.forEach(t),SMo=r($C,` property of the config object (either
passed as an argument or loaded from `),Xne=n($C,"CODE",{});var YYr=s(Xne);RMo=r(YYr,"pretrained_model_name_or_path"),YYr.forEach(t),BMo=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zne=n($C,"CODE",{});var KYr=s(zne);PMo=r(KYr,"pretrained_model_name_or_path"),KYr.forEach(t),$Mo=r($C,":"),$C.forEach(t),IMo=i(Vt),I=n(Vt,"UL",{});var N=s(I);db=n(N,"LI",{});var lAe=s(db);Qne=n(lAe,"STRONG",{});var ZYr=s(Qne);qMo=r(ZYr,"albert"),ZYr.forEach(t),NMo=r(lAe," \u2014 "),qI=n(lAe,"A",{href:!0});var eKr=s(qI);jMo=r(eKr,"AlbertForMaskedLM"),eKr.forEach(t),DMo=r(lAe," (ALBERT model)"),lAe.forEach(t),GMo=i(N),cb=n(N,"LI",{});var iAe=s(cb);Wne=n(iAe,"STRONG",{});var oKr=s(Wne);OMo=r(oKr,"bart"),oKr.forEach(t),VMo=r(iAe," \u2014 "),NI=n(iAe,"A",{href:!0});var rKr=s(NI);XMo=r(rKr,"BartForConditionalGeneration"),rKr.forEach(t),zMo=r(iAe," (BART model)"),iAe.forEach(t),QMo=i(N),mb=n(N,"LI",{});var dAe=s(mb);Hne=n(dAe,"STRONG",{});var tKr=s(Hne);WMo=r(tKr,"bert"),tKr.forEach(t),HMo=r(dAe," \u2014 "),jI=n(dAe,"A",{href:!0});var aKr=s(jI);UMo=r(aKr,"BertForMaskedLM"),aKr.forEach(t),JMo=r(dAe," (BERT model)"),dAe.forEach(t),YMo=i(N),fb=n(N,"LI",{});var cAe=s(fb);Une=n(cAe,"STRONG",{});var nKr=s(Une);KMo=r(nKr,"big_bird"),nKr.forEach(t),ZMo=r(cAe," \u2014 "),DI=n(cAe,"A",{href:!0});var sKr=s(DI);e4o=r(sKr,"BigBirdForMaskedLM"),sKr.forEach(t),o4o=r(cAe," (BigBird model)"),cAe.forEach(t),r4o=i(N),gb=n(N,"LI",{});var mAe=s(gb);Jne=n(mAe,"STRONG",{});var lKr=s(Jne);t4o=r(lKr,"camembert"),lKr.forEach(t),a4o=r(mAe," \u2014 "),GI=n(mAe,"A",{href:!0});var iKr=s(GI);n4o=r(iKr,"CamembertForMaskedLM"),iKr.forEach(t),s4o=r(mAe," (CamemBERT model)"),mAe.forEach(t),l4o=i(N),hb=n(N,"LI",{});var fAe=s(hb);Yne=n(fAe,"STRONG",{});var dKr=s(Yne);i4o=r(dKr,"convbert"),dKr.forEach(t),d4o=r(fAe," \u2014 "),OI=n(fAe,"A",{href:!0});var cKr=s(OI);c4o=r(cKr,"ConvBertForMaskedLM"),cKr.forEach(t),m4o=r(fAe," (ConvBERT model)"),fAe.forEach(t),f4o=i(N),ub=n(N,"LI",{});var gAe=s(ub);Kne=n(gAe,"STRONG",{});var mKr=s(Kne);g4o=r(mKr,"data2vec-text"),mKr.forEach(t),h4o=r(gAe," \u2014 "),VI=n(gAe,"A",{href:!0});var fKr=s(VI);u4o=r(fKr,"Data2VecTextForMaskedLM"),fKr.forEach(t),p4o=r(gAe," (Data2VecText model)"),gAe.forEach(t),_4o=i(N),pb=n(N,"LI",{});var hAe=s(pb);Zne=n(hAe,"STRONG",{});var gKr=s(Zne);b4o=r(gKr,"deberta"),gKr.forEach(t),v4o=r(hAe," \u2014 "),XI=n(hAe,"A",{href:!0});var hKr=s(XI);F4o=r(hKr,"DebertaForMaskedLM"),hKr.forEach(t),T4o=r(hAe," (DeBERTa model)"),hAe.forEach(t),M4o=i(N),_b=n(N,"LI",{});var uAe=s(_b);ese=n(uAe,"STRONG",{});var uKr=s(ese);E4o=r(uKr,"deberta-v2"),uKr.forEach(t),C4o=r(uAe," \u2014 "),zI=n(uAe,"A",{href:!0});var pKr=s(zI);w4o=r(pKr,"DebertaV2ForMaskedLM"),pKr.forEach(t),A4o=r(uAe," (DeBERTa-v2 model)"),uAe.forEach(t),y4o=i(N),bb=n(N,"LI",{});var pAe=s(bb);ose=n(pAe,"STRONG",{});var _Kr=s(ose);L4o=r(_Kr,"distilbert"),_Kr.forEach(t),x4o=r(pAe," \u2014 "),QI=n(pAe,"A",{href:!0});var bKr=s(QI);k4o=r(bKr,"DistilBertForMaskedLM"),bKr.forEach(t),S4o=r(pAe," (DistilBERT model)"),pAe.forEach(t),R4o=i(N),vb=n(N,"LI",{});var _Ae=s(vb);rse=n(_Ae,"STRONG",{});var vKr=s(rse);B4o=r(vKr,"electra"),vKr.forEach(t),P4o=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var FKr=s(WI);$4o=r(FKr,"ElectraForMaskedLM"),FKr.forEach(t),I4o=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),q4o=i(N),Fb=n(N,"LI",{});var bAe=s(Fb);tse=n(bAe,"STRONG",{});var TKr=s(tse);N4o=r(TKr,"flaubert"),TKr.forEach(t),j4o=r(bAe," \u2014 "),HI=n(bAe,"A",{href:!0});var MKr=s(HI);D4o=r(MKr,"FlaubertWithLMHeadModel"),MKr.forEach(t),G4o=r(bAe," (FlauBERT model)"),bAe.forEach(t),O4o=i(N),Tb=n(N,"LI",{});var vAe=s(Tb);ase=n(vAe,"STRONG",{});var EKr=s(ase);V4o=r(EKr,"fnet"),EKr.forEach(t),X4o=r(vAe," \u2014 "),UI=n(vAe,"A",{href:!0});var CKr=s(UI);z4o=r(CKr,"FNetForMaskedLM"),CKr.forEach(t),Q4o=r(vAe," (FNet model)"),vAe.forEach(t),W4o=i(N),Mb=n(N,"LI",{});var FAe=s(Mb);nse=n(FAe,"STRONG",{});var wKr=s(nse);H4o=r(wKr,"funnel"),wKr.forEach(t),U4o=r(FAe," \u2014 "),JI=n(FAe,"A",{href:!0});var AKr=s(JI);J4o=r(AKr,"FunnelForMaskedLM"),AKr.forEach(t),Y4o=r(FAe," (Funnel Transformer model)"),FAe.forEach(t),K4o=i(N),Eb=n(N,"LI",{});var TAe=s(Eb);sse=n(TAe,"STRONG",{});var yKr=s(sse);Z4o=r(yKr,"ibert"),yKr.forEach(t),eEo=r(TAe," \u2014 "),YI=n(TAe,"A",{href:!0});var LKr=s(YI);oEo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),rEo=r(TAe," (I-BERT model)"),TAe.forEach(t),tEo=i(N),Cb=n(N,"LI",{});var MAe=s(Cb);lse=n(MAe,"STRONG",{});var xKr=s(lse);aEo=r(xKr,"layoutlm"),xKr.forEach(t),nEo=r(MAe," \u2014 "),KI=n(MAe,"A",{href:!0});var kKr=s(KI);sEo=r(kKr,"LayoutLMForMaskedLM"),kKr.forEach(t),lEo=r(MAe," (LayoutLM model)"),MAe.forEach(t),iEo=i(N),wb=n(N,"LI",{});var EAe=s(wb);ise=n(EAe,"STRONG",{});var SKr=s(ise);dEo=r(SKr,"longformer"),SKr.forEach(t),cEo=r(EAe," \u2014 "),ZI=n(EAe,"A",{href:!0});var RKr=s(ZI);mEo=r(RKr,"LongformerForMaskedLM"),RKr.forEach(t),fEo=r(EAe," (Longformer model)"),EAe.forEach(t),gEo=i(N),Ab=n(N,"LI",{});var CAe=s(Ab);dse=n(CAe,"STRONG",{});var BKr=s(dse);hEo=r(BKr,"mbart"),BKr.forEach(t),uEo=r(CAe," \u2014 "),eq=n(CAe,"A",{href:!0});var PKr=s(eq);pEo=r(PKr,"MBartForConditionalGeneration"),PKr.forEach(t),_Eo=r(CAe," (mBART model)"),CAe.forEach(t),bEo=i(N),yb=n(N,"LI",{});var wAe=s(yb);cse=n(wAe,"STRONG",{});var $Kr=s(cse);vEo=r($Kr,"megatron-bert"),$Kr.forEach(t),FEo=r(wAe," \u2014 "),oq=n(wAe,"A",{href:!0});var IKr=s(oq);TEo=r(IKr,"MegatronBertForMaskedLM"),IKr.forEach(t),MEo=r(wAe," (MegatronBert model)"),wAe.forEach(t),EEo=i(N),Lb=n(N,"LI",{});var AAe=s(Lb);mse=n(AAe,"STRONG",{});var qKr=s(mse);CEo=r(qKr,"mobilebert"),qKr.forEach(t),wEo=r(AAe," \u2014 "),rq=n(AAe,"A",{href:!0});var NKr=s(rq);AEo=r(NKr,"MobileBertForMaskedLM"),NKr.forEach(t),yEo=r(AAe," (MobileBERT model)"),AAe.forEach(t),LEo=i(N),xb=n(N,"LI",{});var yAe=s(xb);fse=n(yAe,"STRONG",{});var jKr=s(fse);xEo=r(jKr,"mpnet"),jKr.forEach(t),kEo=r(yAe," \u2014 "),tq=n(yAe,"A",{href:!0});var DKr=s(tq);SEo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),REo=r(yAe," (MPNet model)"),yAe.forEach(t),BEo=i(N),kb=n(N,"LI",{});var LAe=s(kb);gse=n(LAe,"STRONG",{});var GKr=s(gse);PEo=r(GKr,"nystromformer"),GKr.forEach(t),$Eo=r(LAe," \u2014 "),aq=n(LAe,"A",{href:!0});var OKr=s(aq);IEo=r(OKr,"NystromformerForMaskedLM"),OKr.forEach(t),qEo=r(LAe," (Nystromformer model)"),LAe.forEach(t),NEo=i(N),Sb=n(N,"LI",{});var xAe=s(Sb);hse=n(xAe,"STRONG",{});var VKr=s(hse);jEo=r(VKr,"perceiver"),VKr.forEach(t),DEo=r(xAe," \u2014 "),nq=n(xAe,"A",{href:!0});var XKr=s(nq);GEo=r(XKr,"PerceiverForMaskedLM"),XKr.forEach(t),OEo=r(xAe," (Perceiver model)"),xAe.forEach(t),VEo=i(N),Rb=n(N,"LI",{});var kAe=s(Rb);use=n(kAe,"STRONG",{});var zKr=s(use);XEo=r(zKr,"qdqbert"),zKr.forEach(t),zEo=r(kAe," \u2014 "),sq=n(kAe,"A",{href:!0});var QKr=s(sq);QEo=r(QKr,"QDQBertForMaskedLM"),QKr.forEach(t),WEo=r(kAe," (QDQBert model)"),kAe.forEach(t),HEo=i(N),Bb=n(N,"LI",{});var SAe=s(Bb);pse=n(SAe,"STRONG",{});var WKr=s(pse);UEo=r(WKr,"reformer"),WKr.forEach(t),JEo=r(SAe," \u2014 "),lq=n(SAe,"A",{href:!0});var HKr=s(lq);YEo=r(HKr,"ReformerForMaskedLM"),HKr.forEach(t),KEo=r(SAe," (Reformer model)"),SAe.forEach(t),ZEo=i(N),Pb=n(N,"LI",{});var RAe=s(Pb);_se=n(RAe,"STRONG",{});var UKr=s(_se);e5o=r(UKr,"rembert"),UKr.forEach(t),o5o=r(RAe," \u2014 "),iq=n(RAe,"A",{href:!0});var JKr=s(iq);r5o=r(JKr,"RemBertForMaskedLM"),JKr.forEach(t),t5o=r(RAe," (RemBERT model)"),RAe.forEach(t),a5o=i(N),$b=n(N,"LI",{});var BAe=s($b);bse=n(BAe,"STRONG",{});var YKr=s(bse);n5o=r(YKr,"roberta"),YKr.forEach(t),s5o=r(BAe," \u2014 "),dq=n(BAe,"A",{href:!0});var KKr=s(dq);l5o=r(KKr,"RobertaForMaskedLM"),KKr.forEach(t),i5o=r(BAe," (RoBERTa model)"),BAe.forEach(t),d5o=i(N),Ib=n(N,"LI",{});var PAe=s(Ib);vse=n(PAe,"STRONG",{});var ZKr=s(vse);c5o=r(ZKr,"roformer"),ZKr.forEach(t),m5o=r(PAe," \u2014 "),cq=n(PAe,"A",{href:!0});var eZr=s(cq);f5o=r(eZr,"RoFormerForMaskedLM"),eZr.forEach(t),g5o=r(PAe," (RoFormer model)"),PAe.forEach(t),h5o=i(N),qb=n(N,"LI",{});var $Ae=s(qb);Fse=n($Ae,"STRONG",{});var oZr=s(Fse);u5o=r(oZr,"squeezebert"),oZr.forEach(t),p5o=r($Ae," \u2014 "),mq=n($Ae,"A",{href:!0});var rZr=s(mq);_5o=r(rZr,"SqueezeBertForMaskedLM"),rZr.forEach(t),b5o=r($Ae," (SqueezeBERT model)"),$Ae.forEach(t),v5o=i(N),Nb=n(N,"LI",{});var IAe=s(Nb);Tse=n(IAe,"STRONG",{});var tZr=s(Tse);F5o=r(tZr,"tapas"),tZr.forEach(t),T5o=r(IAe," \u2014 "),fq=n(IAe,"A",{href:!0});var aZr=s(fq);M5o=r(aZr,"TapasForMaskedLM"),aZr.forEach(t),E5o=r(IAe," (TAPAS model)"),IAe.forEach(t),C5o=i(N),jb=n(N,"LI",{});var qAe=s(jb);Mse=n(qAe,"STRONG",{});var nZr=s(Mse);w5o=r(nZr,"wav2vec2"),nZr.forEach(t),A5o=r(qAe," \u2014 "),Ese=n(qAe,"CODE",{});var sZr=s(Ese);y5o=r(sZr,"Wav2Vec2ForMaskedLM"),sZr.forEach(t),L5o=r(qAe," (Wav2Vec2 model)"),qAe.forEach(t),x5o=i(N),Db=n(N,"LI",{});var NAe=s(Db);Cse=n(NAe,"STRONG",{});var lZr=s(Cse);k5o=r(lZr,"xlm"),lZr.forEach(t),S5o=r(NAe," \u2014 "),gq=n(NAe,"A",{href:!0});var iZr=s(gq);R5o=r(iZr,"XLMWithLMHeadModel"),iZr.forEach(t),B5o=r(NAe," (XLM model)"),NAe.forEach(t),P5o=i(N),Gb=n(N,"LI",{});var jAe=s(Gb);wse=n(jAe,"STRONG",{});var dZr=s(wse);$5o=r(dZr,"xlm-roberta"),dZr.forEach(t),I5o=r(jAe," \u2014 "),hq=n(jAe,"A",{href:!0});var cZr=s(hq);q5o=r(cZr,"XLMRobertaForMaskedLM"),cZr.forEach(t),N5o=r(jAe," (XLM-RoBERTa model)"),jAe.forEach(t),j5o=i(N),Ob=n(N,"LI",{});var DAe=s(Ob);Ase=n(DAe,"STRONG",{});var mZr=s(Ase);D5o=r(mZr,"xlm-roberta-xl"),mZr.forEach(t),G5o=r(DAe," \u2014 "),uq=n(DAe,"A",{href:!0});var fZr=s(uq);O5o=r(fZr,"XLMRobertaXLForMaskedLM"),fZr.forEach(t),V5o=r(DAe," (XLM-RoBERTa-XL model)"),DAe.forEach(t),X5o=i(N),Vb=n(N,"LI",{});var GAe=s(Vb);yse=n(GAe,"STRONG",{});var gZr=s(yse);z5o=r(gZr,"yoso"),gZr.forEach(t),Q5o=r(GAe," \u2014 "),pq=n(GAe,"A",{href:!0});var hZr=s(pq);W5o=r(hZr,"YosoForMaskedLM"),hZr.forEach(t),H5o=r(GAe," (YOSO model)"),GAe.forEach(t),N.forEach(t),U5o=i(Vt),Xb=n(Vt,"P",{});var OAe=s(Xb);J5o=r(OAe,"The model is set in evaluation mode by default using "),Lse=n(OAe,"CODE",{});var uZr=s(Lse);Y5o=r(uZr,"model.eval()"),uZr.forEach(t),K5o=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xse=n(OAe,"CODE",{});var pZr=s(xse);Z5o=r(pZr,"model.train()"),pZr.forEach(t),OAe.forEach(t),e3o=i(Vt),kse=n(Vt,"P",{});var _Zr=s(kse);o3o=r(_Zr,"Examples:"),_Zr.forEach(t),r3o=i(Vt),f(I6.$$.fragment,Vt),Vt.forEach(t),ol.forEach(t),aBe=i(c),md=n(c,"H2",{class:!0});var g$e=s(md);zb=n(g$e,"A",{id:!0,class:!0,href:!0});var bZr=s(zb);Sse=n(bZr,"SPAN",{});var vZr=s(Sse);f(q6.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),t3o=i(g$e),Rse=n(g$e,"SPAN",{});var FZr=s(Rse);a3o=r(FZr,"AutoModelForSeq2SeqLM"),FZr.forEach(t),g$e.forEach(t),nBe=i(c),er=n(c,"DIV",{class:!0});var tl=s(er);f(N6.$$.fragment,tl),n3o=i(tl),fd=n(tl,"P",{});var PU=s(fd);s3o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_q=n(PU,"A",{href:!0});var TZr=s(_q);l3o=r(TZr,"from_pretrained()"),TZr.forEach(t),i3o=r(PU," class method or the "),bq=n(PU,"A",{href:!0});var MZr=s(bq);d3o=r(MZr,"from_config()"),MZr.forEach(t),c3o=r(PU,` class
method.`),PU.forEach(t),m3o=i(tl),j6=n(tl,"P",{});var h$e=s(j6);f3o=r(h$e,"This class cannot be instantiated directly using "),Bse=n(h$e,"CODE",{});var EZr=s(Bse);g3o=r(EZr,"__init__()"),EZr.forEach(t),h3o=r(h$e," (throws an error)."),h$e.forEach(t),u3o=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);f(D6.$$.fragment,al),p3o=i(al),Pse=n(al,"P",{});var CZr=s(Pse);_3o=r(CZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CZr.forEach(t),b3o=i(al),gd=n(al,"P",{});var $U=s(gd);v3o=r($U,`Note:
Loading a model from its configuration file does `),$se=n($U,"STRONG",{});var wZr=s($se);F3o=r(wZr,"not"),wZr.forEach(t),T3o=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=n($U,"A",{href:!0});var AZr=s(vq);M3o=r(AZr,"from_pretrained()"),AZr.forEach(t),E3o=r($U," to load the model weights."),$U.forEach(t),C3o=i(al),Ise=n(al,"P",{});var yZr=s(Ise);w3o=r(yZr,"Examples:"),yZr.forEach(t),A3o=i(al),f(G6.$$.fragment,al),al.forEach(t),y3o=i(tl),Ge=n(tl,"DIV",{class:!0});var Xt=s(Ge);f(O6.$$.fragment,Xt),L3o=i(Xt),qse=n(Xt,"P",{});var LZr=s(qse);x3o=r(LZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LZr.forEach(t),k3o=i(Xt),Ha=n(Xt,"P",{});var IC=s(Ha);S3o=r(IC,"The model class to instantiate is selected based on the "),Nse=n(IC,"CODE",{});var xZr=s(Nse);R3o=r(xZr,"model_type"),xZr.forEach(t),B3o=r(IC,` property of the config object (either
passed as an argument or loaded from `),jse=n(IC,"CODE",{});var kZr=s(jse);P3o=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),$3o=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dse=n(IC,"CODE",{});var SZr=s(Dse);I3o=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),q3o=r(IC,":"),IC.forEach(t),N3o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);Qb=n(le,"LI",{});var VAe=s(Qb);Gse=n(VAe,"STRONG",{});var RZr=s(Gse);j3o=r(RZr,"bart"),RZr.forEach(t),D3o=r(VAe," \u2014 "),Fq=n(VAe,"A",{href:!0});var BZr=s(Fq);G3o=r(BZr,"BartForConditionalGeneration"),BZr.forEach(t),O3o=r(VAe," (BART model)"),VAe.forEach(t),V3o=i(le),Wb=n(le,"LI",{});var XAe=s(Wb);Ose=n(XAe,"STRONG",{});var PZr=s(Ose);X3o=r(PZr,"bigbird_pegasus"),PZr.forEach(t),z3o=r(XAe," \u2014 "),Tq=n(XAe,"A",{href:!0});var $Zr=s(Tq);Q3o=r($Zr,"BigBirdPegasusForConditionalGeneration"),$Zr.forEach(t),W3o=r(XAe," (BigBirdPegasus model)"),XAe.forEach(t),H3o=i(le),Hb=n(le,"LI",{});var zAe=s(Hb);Vse=n(zAe,"STRONG",{});var IZr=s(Vse);U3o=r(IZr,"blenderbot"),IZr.forEach(t),J3o=r(zAe," \u2014 "),Mq=n(zAe,"A",{href:!0});var qZr=s(Mq);Y3o=r(qZr,"BlenderbotForConditionalGeneration"),qZr.forEach(t),K3o=r(zAe," (Blenderbot model)"),zAe.forEach(t),Z3o=i(le),Ub=n(le,"LI",{});var QAe=s(Ub);Xse=n(QAe,"STRONG",{});var NZr=s(Xse);eCo=r(NZr,"blenderbot-small"),NZr.forEach(t),oCo=r(QAe," \u2014 "),Eq=n(QAe,"A",{href:!0});var jZr=s(Eq);rCo=r(jZr,"BlenderbotSmallForConditionalGeneration"),jZr.forEach(t),tCo=r(QAe," (BlenderbotSmall model)"),QAe.forEach(t),aCo=i(le),Jb=n(le,"LI",{});var WAe=s(Jb);zse=n(WAe,"STRONG",{});var DZr=s(zse);nCo=r(DZr,"encoder-decoder"),DZr.forEach(t),sCo=r(WAe," \u2014 "),Cq=n(WAe,"A",{href:!0});var GZr=s(Cq);lCo=r(GZr,"EncoderDecoderModel"),GZr.forEach(t),iCo=r(WAe," (Encoder decoder model)"),WAe.forEach(t),dCo=i(le),Yb=n(le,"LI",{});var HAe=s(Yb);Qse=n(HAe,"STRONG",{});var OZr=s(Qse);cCo=r(OZr,"fsmt"),OZr.forEach(t),mCo=r(HAe," \u2014 "),wq=n(HAe,"A",{href:!0});var VZr=s(wq);fCo=r(VZr,"FSMTForConditionalGeneration"),VZr.forEach(t),gCo=r(HAe," (FairSeq Machine-Translation model)"),HAe.forEach(t),hCo=i(le),Kb=n(le,"LI",{});var UAe=s(Kb);Wse=n(UAe,"STRONG",{});var XZr=s(Wse);uCo=r(XZr,"led"),XZr.forEach(t),pCo=r(UAe," \u2014 "),Aq=n(UAe,"A",{href:!0});var zZr=s(Aq);_Co=r(zZr,"LEDForConditionalGeneration"),zZr.forEach(t),bCo=r(UAe," (LED model)"),UAe.forEach(t),vCo=i(le),Zb=n(le,"LI",{});var JAe=s(Zb);Hse=n(JAe,"STRONG",{});var QZr=s(Hse);FCo=r(QZr,"m2m_100"),QZr.forEach(t),TCo=r(JAe," \u2014 "),yq=n(JAe,"A",{href:!0});var WZr=s(yq);MCo=r(WZr,"M2M100ForConditionalGeneration"),WZr.forEach(t),ECo=r(JAe," (M2M100 model)"),JAe.forEach(t),CCo=i(le),e2=n(le,"LI",{});var YAe=s(e2);Use=n(YAe,"STRONG",{});var HZr=s(Use);wCo=r(HZr,"marian"),HZr.forEach(t),ACo=r(YAe," \u2014 "),Lq=n(YAe,"A",{href:!0});var UZr=s(Lq);yCo=r(UZr,"MarianMTModel"),UZr.forEach(t),LCo=r(YAe," (Marian model)"),YAe.forEach(t),xCo=i(le),o2=n(le,"LI",{});var KAe=s(o2);Jse=n(KAe,"STRONG",{});var JZr=s(Jse);kCo=r(JZr,"mbart"),JZr.forEach(t),SCo=r(KAe," \u2014 "),xq=n(KAe,"A",{href:!0});var YZr=s(xq);RCo=r(YZr,"MBartForConditionalGeneration"),YZr.forEach(t),BCo=r(KAe," (mBART model)"),KAe.forEach(t),PCo=i(le),r2=n(le,"LI",{});var ZAe=s(r2);Yse=n(ZAe,"STRONG",{});var KZr=s(Yse);$Co=r(KZr,"mt5"),KZr.forEach(t),ICo=r(ZAe," \u2014 "),kq=n(ZAe,"A",{href:!0});var ZZr=s(kq);qCo=r(ZZr,"MT5ForConditionalGeneration"),ZZr.forEach(t),NCo=r(ZAe," (mT5 model)"),ZAe.forEach(t),jCo=i(le),t2=n(le,"LI",{});var e0e=s(t2);Kse=n(e0e,"STRONG",{});var eet=s(Kse);DCo=r(eet,"pegasus"),eet.forEach(t),GCo=r(e0e," \u2014 "),Sq=n(e0e,"A",{href:!0});var oet=s(Sq);OCo=r(oet,"PegasusForConditionalGeneration"),oet.forEach(t),VCo=r(e0e," (Pegasus model)"),e0e.forEach(t),XCo=i(le),a2=n(le,"LI",{});var o0e=s(a2);Zse=n(o0e,"STRONG",{});var ret=s(Zse);zCo=r(ret,"plbart"),ret.forEach(t),QCo=r(o0e," \u2014 "),Rq=n(o0e,"A",{href:!0});var tet=s(Rq);WCo=r(tet,"PLBartForConditionalGeneration"),tet.forEach(t),HCo=r(o0e," (PLBart model)"),o0e.forEach(t),UCo=i(le),n2=n(le,"LI",{});var r0e=s(n2);ele=n(r0e,"STRONG",{});var aet=s(ele);JCo=r(aet,"prophetnet"),aet.forEach(t),YCo=r(r0e," \u2014 "),Bq=n(r0e,"A",{href:!0});var net=s(Bq);KCo=r(net,"ProphetNetForConditionalGeneration"),net.forEach(t),ZCo=r(r0e," (ProphetNet model)"),r0e.forEach(t),ewo=i(le),s2=n(le,"LI",{});var t0e=s(s2);ole=n(t0e,"STRONG",{});var set=s(ole);owo=r(set,"t5"),set.forEach(t),rwo=r(t0e," \u2014 "),Pq=n(t0e,"A",{href:!0});var iet=s(Pq);two=r(iet,"T5ForConditionalGeneration"),iet.forEach(t),awo=r(t0e," (T5 model)"),t0e.forEach(t),nwo=i(le),l2=n(le,"LI",{});var a0e=s(l2);rle=n(a0e,"STRONG",{});var det=s(rle);swo=r(det,"tapex"),det.forEach(t),lwo=r(a0e," \u2014 "),$q=n(a0e,"A",{href:!0});var cet=s($q);iwo=r(cet,"BartForConditionalGeneration"),cet.forEach(t),dwo=r(a0e," (TAPEX model)"),a0e.forEach(t),cwo=i(le),i2=n(le,"LI",{});var n0e=s(i2);tle=n(n0e,"STRONG",{});var met=s(tle);mwo=r(met,"xlm-prophetnet"),met.forEach(t),fwo=r(n0e," \u2014 "),Iq=n(n0e,"A",{href:!0});var fet=s(Iq);gwo=r(fet,"XLMProphetNetForConditionalGeneration"),fet.forEach(t),hwo=r(n0e," (XLMProphetNet model)"),n0e.forEach(t),le.forEach(t),uwo=i(Xt),d2=n(Xt,"P",{});var s0e=s(d2);pwo=r(s0e,"The model is set in evaluation mode by default using "),ale=n(s0e,"CODE",{});var get=s(ale);_wo=r(get,"model.eval()"),get.forEach(t),bwo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nle=n(s0e,"CODE",{});var het=s(nle);vwo=r(het,"model.train()"),het.forEach(t),s0e.forEach(t),Fwo=i(Xt),sle=n(Xt,"P",{});var uet=s(sle);Two=r(uet,"Examples:"),uet.forEach(t),Mwo=i(Xt),f(V6.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),sBe=i(c),hd=n(c,"H2",{class:!0});var u$e=s(hd);c2=n(u$e,"A",{id:!0,class:!0,href:!0});var pet=s(c2);lle=n(pet,"SPAN",{});var _et=s(lle);f(X6.$$.fragment,_et),_et.forEach(t),pet.forEach(t),Ewo=i(u$e),ile=n(u$e,"SPAN",{});var bet=s(ile);Cwo=r(bet,"AutoModelForSequenceClassification"),bet.forEach(t),u$e.forEach(t),lBe=i(c),or=n(c,"DIV",{class:!0});var nl=s(or);f(z6.$$.fragment,nl),wwo=i(nl),ud=n(nl,"P",{});var IU=s(ud);Awo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=n(IU,"A",{href:!0});var vet=s(qq);ywo=r(vet,"from_pretrained()"),vet.forEach(t),Lwo=r(IU," class method or the "),Nq=n(IU,"A",{href:!0});var Fet=s(Nq);xwo=r(Fet,"from_config()"),Fet.forEach(t),kwo=r(IU,` class
method.`),IU.forEach(t),Swo=i(nl),Q6=n(nl,"P",{});var p$e=s(Q6);Rwo=r(p$e,"This class cannot be instantiated directly using "),dle=n(p$e,"CODE",{});var Tet=s(dle);Bwo=r(Tet,"__init__()"),Tet.forEach(t),Pwo=r(p$e," (throws an error)."),p$e.forEach(t),$wo=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);f(W6.$$.fragment,sl),Iwo=i(sl),cle=n(sl,"P",{});var Met=s(cle);qwo=r(Met,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Met.forEach(t),Nwo=i(sl),pd=n(sl,"P",{});var qU=s(pd);jwo=r(qU,`Note:
Loading a model from its configuration file does `),mle=n(qU,"STRONG",{});var Eet=s(mle);Dwo=r(Eet,"not"),Eet.forEach(t),Gwo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=n(qU,"A",{href:!0});var Cet=s(jq);Owo=r(Cet,"from_pretrained()"),Cet.forEach(t),Vwo=r(qU," to load the model weights."),qU.forEach(t),Xwo=i(sl),fle=n(sl,"P",{});var wet=s(fle);zwo=r(wet,"Examples:"),wet.forEach(t),Qwo=i(sl),f(H6.$$.fragment,sl),sl.forEach(t),Wwo=i(nl),Oe=n(nl,"DIV",{class:!0});var zt=s(Oe);f(U6.$$.fragment,zt),Hwo=i(zt),gle=n(zt,"P",{});var Aet=s(gle);Uwo=r(Aet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Aet.forEach(t),Jwo=i(zt),Ua=n(zt,"P",{});var qC=s(Ua);Ywo=r(qC,"The model class to instantiate is selected based on the "),hle=n(qC,"CODE",{});var yet=s(hle);Kwo=r(yet,"model_type"),yet.forEach(t),Zwo=r(qC,` property of the config object (either
passed as an argument or loaded from `),ule=n(qC,"CODE",{});var Let=s(ule);e6o=r(Let,"pretrained_model_name_or_path"),Let.forEach(t),o6o=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ple=n(qC,"CODE",{});var xet=s(ple);r6o=r(xet,"pretrained_model_name_or_path"),xet.forEach(t),t6o=r(qC,":"),qC.forEach(t),a6o=i(zt),y=n(zt,"UL",{});var L=s(y);m2=n(L,"LI",{});var l0e=s(m2);_le=n(l0e,"STRONG",{});var ket=s(_le);n6o=r(ket,"albert"),ket.forEach(t),s6o=r(l0e," \u2014 "),Dq=n(l0e,"A",{href:!0});var Set=s(Dq);l6o=r(Set,"AlbertForSequenceClassification"),Set.forEach(t),i6o=r(l0e," (ALBERT model)"),l0e.forEach(t),d6o=i(L),f2=n(L,"LI",{});var i0e=s(f2);ble=n(i0e,"STRONG",{});var Ret=s(ble);c6o=r(Ret,"bart"),Ret.forEach(t),m6o=r(i0e," \u2014 "),Gq=n(i0e,"A",{href:!0});var Bet=s(Gq);f6o=r(Bet,"BartForSequenceClassification"),Bet.forEach(t),g6o=r(i0e," (BART model)"),i0e.forEach(t),h6o=i(L),g2=n(L,"LI",{});var d0e=s(g2);vle=n(d0e,"STRONG",{});var Pet=s(vle);u6o=r(Pet,"bert"),Pet.forEach(t),p6o=r(d0e," \u2014 "),Oq=n(d0e,"A",{href:!0});var $et=s(Oq);_6o=r($et,"BertForSequenceClassification"),$et.forEach(t),b6o=r(d0e," (BERT model)"),d0e.forEach(t),v6o=i(L),h2=n(L,"LI",{});var c0e=s(h2);Fle=n(c0e,"STRONG",{});var Iet=s(Fle);F6o=r(Iet,"big_bird"),Iet.forEach(t),T6o=r(c0e," \u2014 "),Vq=n(c0e,"A",{href:!0});var qet=s(Vq);M6o=r(qet,"BigBirdForSequenceClassification"),qet.forEach(t),E6o=r(c0e," (BigBird model)"),c0e.forEach(t),C6o=i(L),u2=n(L,"LI",{});var m0e=s(u2);Tle=n(m0e,"STRONG",{});var Net=s(Tle);w6o=r(Net,"bigbird_pegasus"),Net.forEach(t),A6o=r(m0e," \u2014 "),Xq=n(m0e,"A",{href:!0});var jet=s(Xq);y6o=r(jet,"BigBirdPegasusForSequenceClassification"),jet.forEach(t),L6o=r(m0e," (BigBirdPegasus model)"),m0e.forEach(t),x6o=i(L),p2=n(L,"LI",{});var f0e=s(p2);Mle=n(f0e,"STRONG",{});var Det=s(Mle);k6o=r(Det,"camembert"),Det.forEach(t),S6o=r(f0e," \u2014 "),zq=n(f0e,"A",{href:!0});var Get=s(zq);R6o=r(Get,"CamembertForSequenceClassification"),Get.forEach(t),B6o=r(f0e," (CamemBERT model)"),f0e.forEach(t),P6o=i(L),_2=n(L,"LI",{});var g0e=s(_2);Ele=n(g0e,"STRONG",{});var Oet=s(Ele);$6o=r(Oet,"canine"),Oet.forEach(t),I6o=r(g0e," \u2014 "),Qq=n(g0e,"A",{href:!0});var Vet=s(Qq);q6o=r(Vet,"CanineForSequenceClassification"),Vet.forEach(t),N6o=r(g0e," (Canine model)"),g0e.forEach(t),j6o=i(L),b2=n(L,"LI",{});var h0e=s(b2);Cle=n(h0e,"STRONG",{});var Xet=s(Cle);D6o=r(Xet,"convbert"),Xet.forEach(t),G6o=r(h0e," \u2014 "),Wq=n(h0e,"A",{href:!0});var zet=s(Wq);O6o=r(zet,"ConvBertForSequenceClassification"),zet.forEach(t),V6o=r(h0e," (ConvBERT model)"),h0e.forEach(t),X6o=i(L),v2=n(L,"LI",{});var u0e=s(v2);wle=n(u0e,"STRONG",{});var Qet=s(wle);z6o=r(Qet,"ctrl"),Qet.forEach(t),Q6o=r(u0e," \u2014 "),Hq=n(u0e,"A",{href:!0});var Wet=s(Hq);W6o=r(Wet,"CTRLForSequenceClassification"),Wet.forEach(t),H6o=r(u0e," (CTRL model)"),u0e.forEach(t),U6o=i(L),F2=n(L,"LI",{});var p0e=s(F2);Ale=n(p0e,"STRONG",{});var Het=s(Ale);J6o=r(Het,"data2vec-text"),Het.forEach(t),Y6o=r(p0e," \u2014 "),Uq=n(p0e,"A",{href:!0});var Uet=s(Uq);K6o=r(Uet,"Data2VecTextForSequenceClassification"),Uet.forEach(t),Z6o=r(p0e," (Data2VecText model)"),p0e.forEach(t),eAo=i(L),T2=n(L,"LI",{});var _0e=s(T2);yle=n(_0e,"STRONG",{});var Jet=s(yle);oAo=r(Jet,"deberta"),Jet.forEach(t),rAo=r(_0e," \u2014 "),Jq=n(_0e,"A",{href:!0});var Yet=s(Jq);tAo=r(Yet,"DebertaForSequenceClassification"),Yet.forEach(t),aAo=r(_0e," (DeBERTa model)"),_0e.forEach(t),nAo=i(L),M2=n(L,"LI",{});var b0e=s(M2);Lle=n(b0e,"STRONG",{});var Ket=s(Lle);sAo=r(Ket,"deberta-v2"),Ket.forEach(t),lAo=r(b0e," \u2014 "),Yq=n(b0e,"A",{href:!0});var Zet=s(Yq);iAo=r(Zet,"DebertaV2ForSequenceClassification"),Zet.forEach(t),dAo=r(b0e," (DeBERTa-v2 model)"),b0e.forEach(t),cAo=i(L),E2=n(L,"LI",{});var v0e=s(E2);xle=n(v0e,"STRONG",{});var eot=s(xle);mAo=r(eot,"distilbert"),eot.forEach(t),fAo=r(v0e," \u2014 "),Kq=n(v0e,"A",{href:!0});var oot=s(Kq);gAo=r(oot,"DistilBertForSequenceClassification"),oot.forEach(t),hAo=r(v0e," (DistilBERT model)"),v0e.forEach(t),uAo=i(L),C2=n(L,"LI",{});var F0e=s(C2);kle=n(F0e,"STRONG",{});var rot=s(kle);pAo=r(rot,"electra"),rot.forEach(t),_Ao=r(F0e," \u2014 "),Zq=n(F0e,"A",{href:!0});var tot=s(Zq);bAo=r(tot,"ElectraForSequenceClassification"),tot.forEach(t),vAo=r(F0e," (ELECTRA model)"),F0e.forEach(t),FAo=i(L),w2=n(L,"LI",{});var T0e=s(w2);Sle=n(T0e,"STRONG",{});var aot=s(Sle);TAo=r(aot,"flaubert"),aot.forEach(t),MAo=r(T0e," \u2014 "),eN=n(T0e,"A",{href:!0});var not=s(eN);EAo=r(not,"FlaubertForSequenceClassification"),not.forEach(t),CAo=r(T0e," (FlauBERT model)"),T0e.forEach(t),wAo=i(L),A2=n(L,"LI",{});var M0e=s(A2);Rle=n(M0e,"STRONG",{});var sot=s(Rle);AAo=r(sot,"fnet"),sot.forEach(t),yAo=r(M0e," \u2014 "),oN=n(M0e,"A",{href:!0});var lot=s(oN);LAo=r(lot,"FNetForSequenceClassification"),lot.forEach(t),xAo=r(M0e," (FNet model)"),M0e.forEach(t),kAo=i(L),y2=n(L,"LI",{});var E0e=s(y2);Ble=n(E0e,"STRONG",{});var iot=s(Ble);SAo=r(iot,"funnel"),iot.forEach(t),RAo=r(E0e," \u2014 "),rN=n(E0e,"A",{href:!0});var dot=s(rN);BAo=r(dot,"FunnelForSequenceClassification"),dot.forEach(t),PAo=r(E0e," (Funnel Transformer model)"),E0e.forEach(t),$Ao=i(L),L2=n(L,"LI",{});var C0e=s(L2);Ple=n(C0e,"STRONG",{});var cot=s(Ple);IAo=r(cot,"gpt2"),cot.forEach(t),qAo=r(C0e," \u2014 "),tN=n(C0e,"A",{href:!0});var mot=s(tN);NAo=r(mot,"GPT2ForSequenceClassification"),mot.forEach(t),jAo=r(C0e," (OpenAI GPT-2 model)"),C0e.forEach(t),DAo=i(L),x2=n(L,"LI",{});var w0e=s(x2);$le=n(w0e,"STRONG",{});var fot=s($le);GAo=r(fot,"gpt_neo"),fot.forEach(t),OAo=r(w0e," \u2014 "),aN=n(w0e,"A",{href:!0});var got=s(aN);VAo=r(got,"GPTNeoForSequenceClassification"),got.forEach(t),XAo=r(w0e," (GPT Neo model)"),w0e.forEach(t),zAo=i(L),k2=n(L,"LI",{});var A0e=s(k2);Ile=n(A0e,"STRONG",{});var hot=s(Ile);QAo=r(hot,"gptj"),hot.forEach(t),WAo=r(A0e," \u2014 "),nN=n(A0e,"A",{href:!0});var uot=s(nN);HAo=r(uot,"GPTJForSequenceClassification"),uot.forEach(t),UAo=r(A0e," (GPT-J model)"),A0e.forEach(t),JAo=i(L),S2=n(L,"LI",{});var y0e=s(S2);qle=n(y0e,"STRONG",{});var pot=s(qle);YAo=r(pot,"ibert"),pot.forEach(t),KAo=r(y0e," \u2014 "),sN=n(y0e,"A",{href:!0});var _ot=s(sN);ZAo=r(_ot,"IBertForSequenceClassification"),_ot.forEach(t),e0o=r(y0e," (I-BERT model)"),y0e.forEach(t),o0o=i(L),R2=n(L,"LI",{});var L0e=s(R2);Nle=n(L0e,"STRONG",{});var bot=s(Nle);r0o=r(bot,"layoutlm"),bot.forEach(t),t0o=r(L0e," \u2014 "),lN=n(L0e,"A",{href:!0});var vot=s(lN);a0o=r(vot,"LayoutLMForSequenceClassification"),vot.forEach(t),n0o=r(L0e," (LayoutLM model)"),L0e.forEach(t),s0o=i(L),B2=n(L,"LI",{});var x0e=s(B2);jle=n(x0e,"STRONG",{});var Fot=s(jle);l0o=r(Fot,"layoutlmv2"),Fot.forEach(t),i0o=r(x0e," \u2014 "),iN=n(x0e,"A",{href:!0});var Tot=s(iN);d0o=r(Tot,"LayoutLMv2ForSequenceClassification"),Tot.forEach(t),c0o=r(x0e," (LayoutLMv2 model)"),x0e.forEach(t),m0o=i(L),P2=n(L,"LI",{});var k0e=s(P2);Dle=n(k0e,"STRONG",{});var Mot=s(Dle);f0o=r(Mot,"led"),Mot.forEach(t),g0o=r(k0e," \u2014 "),dN=n(k0e,"A",{href:!0});var Eot=s(dN);h0o=r(Eot,"LEDForSequenceClassification"),Eot.forEach(t),u0o=r(k0e," (LED model)"),k0e.forEach(t),p0o=i(L),$2=n(L,"LI",{});var S0e=s($2);Gle=n(S0e,"STRONG",{});var Cot=s(Gle);_0o=r(Cot,"longformer"),Cot.forEach(t),b0o=r(S0e," \u2014 "),cN=n(S0e,"A",{href:!0});var wot=s(cN);v0o=r(wot,"LongformerForSequenceClassification"),wot.forEach(t),F0o=r(S0e," (Longformer model)"),S0e.forEach(t),T0o=i(L),I2=n(L,"LI",{});var R0e=s(I2);Ole=n(R0e,"STRONG",{});var Aot=s(Ole);M0o=r(Aot,"mbart"),Aot.forEach(t),E0o=r(R0e," \u2014 "),mN=n(R0e,"A",{href:!0});var yot=s(mN);C0o=r(yot,"MBartForSequenceClassification"),yot.forEach(t),w0o=r(R0e," (mBART model)"),R0e.forEach(t),A0o=i(L),q2=n(L,"LI",{});var B0e=s(q2);Vle=n(B0e,"STRONG",{});var Lot=s(Vle);y0o=r(Lot,"megatron-bert"),Lot.forEach(t),L0o=r(B0e," \u2014 "),fN=n(B0e,"A",{href:!0});var xot=s(fN);x0o=r(xot,"MegatronBertForSequenceClassification"),xot.forEach(t),k0o=r(B0e," (MegatronBert model)"),B0e.forEach(t),S0o=i(L),N2=n(L,"LI",{});var P0e=s(N2);Xle=n(P0e,"STRONG",{});var kot=s(Xle);R0o=r(kot,"mobilebert"),kot.forEach(t),B0o=r(P0e," \u2014 "),gN=n(P0e,"A",{href:!0});var Sot=s(gN);P0o=r(Sot,"MobileBertForSequenceClassification"),Sot.forEach(t),$0o=r(P0e," (MobileBERT model)"),P0e.forEach(t),I0o=i(L),j2=n(L,"LI",{});var $0e=s(j2);zle=n($0e,"STRONG",{});var Rot=s(zle);q0o=r(Rot,"mpnet"),Rot.forEach(t),N0o=r($0e," \u2014 "),hN=n($0e,"A",{href:!0});var Bot=s(hN);j0o=r(Bot,"MPNetForSequenceClassification"),Bot.forEach(t),D0o=r($0e," (MPNet model)"),$0e.forEach(t),G0o=i(L),D2=n(L,"LI",{});var I0e=s(D2);Qle=n(I0e,"STRONG",{});var Pot=s(Qle);O0o=r(Pot,"nystromformer"),Pot.forEach(t),V0o=r(I0e," \u2014 "),uN=n(I0e,"A",{href:!0});var $ot=s(uN);X0o=r($ot,"NystromformerForSequenceClassification"),$ot.forEach(t),z0o=r(I0e," (Nystromformer model)"),I0e.forEach(t),Q0o=i(L),G2=n(L,"LI",{});var q0e=s(G2);Wle=n(q0e,"STRONG",{});var Iot=s(Wle);W0o=r(Iot,"openai-gpt"),Iot.forEach(t),H0o=r(q0e," \u2014 "),pN=n(q0e,"A",{href:!0});var qot=s(pN);U0o=r(qot,"OpenAIGPTForSequenceClassification"),qot.forEach(t),J0o=r(q0e," (OpenAI GPT model)"),q0e.forEach(t),Y0o=i(L),O2=n(L,"LI",{});var N0e=s(O2);Hle=n(N0e,"STRONG",{});var Not=s(Hle);K0o=r(Not,"perceiver"),Not.forEach(t),Z0o=r(N0e," \u2014 "),_N=n(N0e,"A",{href:!0});var jot=s(_N);eyo=r(jot,"PerceiverForSequenceClassification"),jot.forEach(t),oyo=r(N0e," (Perceiver model)"),N0e.forEach(t),ryo=i(L),V2=n(L,"LI",{});var j0e=s(V2);Ule=n(j0e,"STRONG",{});var Dot=s(Ule);tyo=r(Dot,"plbart"),Dot.forEach(t),ayo=r(j0e," \u2014 "),bN=n(j0e,"A",{href:!0});var Got=s(bN);nyo=r(Got,"PLBartForSequenceClassification"),Got.forEach(t),syo=r(j0e," (PLBart model)"),j0e.forEach(t),lyo=i(L),X2=n(L,"LI",{});var D0e=s(X2);Jle=n(D0e,"STRONG",{});var Oot=s(Jle);iyo=r(Oot,"qdqbert"),Oot.forEach(t),dyo=r(D0e," \u2014 "),vN=n(D0e,"A",{href:!0});var Vot=s(vN);cyo=r(Vot,"QDQBertForSequenceClassification"),Vot.forEach(t),myo=r(D0e," (QDQBert model)"),D0e.forEach(t),fyo=i(L),z2=n(L,"LI",{});var G0e=s(z2);Yle=n(G0e,"STRONG",{});var Xot=s(Yle);gyo=r(Xot,"reformer"),Xot.forEach(t),hyo=r(G0e," \u2014 "),FN=n(G0e,"A",{href:!0});var zot=s(FN);uyo=r(zot,"ReformerForSequenceClassification"),zot.forEach(t),pyo=r(G0e," (Reformer model)"),G0e.forEach(t),_yo=i(L),Q2=n(L,"LI",{});var O0e=s(Q2);Kle=n(O0e,"STRONG",{});var Qot=s(Kle);byo=r(Qot,"rembert"),Qot.forEach(t),vyo=r(O0e," \u2014 "),TN=n(O0e,"A",{href:!0});var Wot=s(TN);Fyo=r(Wot,"RemBertForSequenceClassification"),Wot.forEach(t),Tyo=r(O0e," (RemBERT model)"),O0e.forEach(t),Myo=i(L),W2=n(L,"LI",{});var V0e=s(W2);Zle=n(V0e,"STRONG",{});var Hot=s(Zle);Eyo=r(Hot,"roberta"),Hot.forEach(t),Cyo=r(V0e," \u2014 "),MN=n(V0e,"A",{href:!0});var Uot=s(MN);wyo=r(Uot,"RobertaForSequenceClassification"),Uot.forEach(t),Ayo=r(V0e," (RoBERTa model)"),V0e.forEach(t),yyo=i(L),H2=n(L,"LI",{});var X0e=s(H2);eie=n(X0e,"STRONG",{});var Jot=s(eie);Lyo=r(Jot,"roformer"),Jot.forEach(t),xyo=r(X0e," \u2014 "),EN=n(X0e,"A",{href:!0});var Yot=s(EN);kyo=r(Yot,"RoFormerForSequenceClassification"),Yot.forEach(t),Syo=r(X0e," (RoFormer model)"),X0e.forEach(t),Ryo=i(L),U2=n(L,"LI",{});var z0e=s(U2);oie=n(z0e,"STRONG",{});var Kot=s(oie);Byo=r(Kot,"squeezebert"),Kot.forEach(t),Pyo=r(z0e," \u2014 "),CN=n(z0e,"A",{href:!0});var Zot=s(CN);$yo=r(Zot,"SqueezeBertForSequenceClassification"),Zot.forEach(t),Iyo=r(z0e," (SqueezeBERT model)"),z0e.forEach(t),qyo=i(L),J2=n(L,"LI",{});var Q0e=s(J2);rie=n(Q0e,"STRONG",{});var ert=s(rie);Nyo=r(ert,"tapas"),ert.forEach(t),jyo=r(Q0e," \u2014 "),wN=n(Q0e,"A",{href:!0});var ort=s(wN);Dyo=r(ort,"TapasForSequenceClassification"),ort.forEach(t),Gyo=r(Q0e," (TAPAS model)"),Q0e.forEach(t),Oyo=i(L),Y2=n(L,"LI",{});var W0e=s(Y2);tie=n(W0e,"STRONG",{});var rrt=s(tie);Vyo=r(rrt,"tapex"),rrt.forEach(t),Xyo=r(W0e," \u2014 "),AN=n(W0e,"A",{href:!0});var trt=s(AN);zyo=r(trt,"BartForSequenceClassification"),trt.forEach(t),Qyo=r(W0e," (TAPEX model)"),W0e.forEach(t),Wyo=i(L),K2=n(L,"LI",{});var H0e=s(K2);aie=n(H0e,"STRONG",{});var art=s(aie);Hyo=r(art,"transfo-xl"),art.forEach(t),Uyo=r(H0e," \u2014 "),yN=n(H0e,"A",{href:!0});var nrt=s(yN);Jyo=r(nrt,"TransfoXLForSequenceClassification"),nrt.forEach(t),Yyo=r(H0e," (Transformer-XL model)"),H0e.forEach(t),Kyo=i(L),Z2=n(L,"LI",{});var U0e=s(Z2);nie=n(U0e,"STRONG",{});var srt=s(nie);Zyo=r(srt,"xlm"),srt.forEach(t),e8o=r(U0e," \u2014 "),LN=n(U0e,"A",{href:!0});var lrt=s(LN);o8o=r(lrt,"XLMForSequenceClassification"),lrt.forEach(t),r8o=r(U0e," (XLM model)"),U0e.forEach(t),t8o=i(L),ev=n(L,"LI",{});var J0e=s(ev);sie=n(J0e,"STRONG",{});var irt=s(sie);a8o=r(irt,"xlm-roberta"),irt.forEach(t),n8o=r(J0e," \u2014 "),xN=n(J0e,"A",{href:!0});var drt=s(xN);s8o=r(drt,"XLMRobertaForSequenceClassification"),drt.forEach(t),l8o=r(J0e," (XLM-RoBERTa model)"),J0e.forEach(t),i8o=i(L),ov=n(L,"LI",{});var Y0e=s(ov);lie=n(Y0e,"STRONG",{});var crt=s(lie);d8o=r(crt,"xlm-roberta-xl"),crt.forEach(t),c8o=r(Y0e," \u2014 "),kN=n(Y0e,"A",{href:!0});var mrt=s(kN);m8o=r(mrt,"XLMRobertaXLForSequenceClassification"),mrt.forEach(t),f8o=r(Y0e," (XLM-RoBERTa-XL model)"),Y0e.forEach(t),g8o=i(L),rv=n(L,"LI",{});var K0e=s(rv);iie=n(K0e,"STRONG",{});var frt=s(iie);h8o=r(frt,"xlnet"),frt.forEach(t),u8o=r(K0e," \u2014 "),SN=n(K0e,"A",{href:!0});var grt=s(SN);p8o=r(grt,"XLNetForSequenceClassification"),grt.forEach(t),_8o=r(K0e," (XLNet model)"),K0e.forEach(t),b8o=i(L),tv=n(L,"LI",{});var Z0e=s(tv);die=n(Z0e,"STRONG",{});var hrt=s(die);v8o=r(hrt,"yoso"),hrt.forEach(t),F8o=r(Z0e," \u2014 "),RN=n(Z0e,"A",{href:!0});var urt=s(RN);T8o=r(urt,"YosoForSequenceClassification"),urt.forEach(t),M8o=r(Z0e," (YOSO model)"),Z0e.forEach(t),L.forEach(t),E8o=i(zt),av=n(zt,"P",{});var eye=s(av);C8o=r(eye,"The model is set in evaluation mode by default using "),cie=n(eye,"CODE",{});var prt=s(cie);w8o=r(prt,"model.eval()"),prt.forEach(t),A8o=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(eye,"CODE",{});var _rt=s(mie);y8o=r(_rt,"model.train()"),_rt.forEach(t),eye.forEach(t),L8o=i(zt),fie=n(zt,"P",{});var brt=s(fie);x8o=r(brt,"Examples:"),brt.forEach(t),k8o=i(zt),f(J6.$$.fragment,zt),zt.forEach(t),nl.forEach(t),iBe=i(c),_d=n(c,"H2",{class:!0});var _$e=s(_d);nv=n(_$e,"A",{id:!0,class:!0,href:!0});var vrt=s(nv);gie=n(vrt,"SPAN",{});var Frt=s(gie);f(Y6.$$.fragment,Frt),Frt.forEach(t),vrt.forEach(t),S8o=i(_$e),hie=n(_$e,"SPAN",{});var Trt=s(hie);R8o=r(Trt,"AutoModelForMultipleChoice"),Trt.forEach(t),_$e.forEach(t),dBe=i(c),rr=n(c,"DIV",{class:!0});var ll=s(rr);f(K6.$$.fragment,ll),B8o=i(ll),bd=n(ll,"P",{});var NU=s(bd);P8o=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=n(NU,"A",{href:!0});var Mrt=s(BN);$8o=r(Mrt,"from_pretrained()"),Mrt.forEach(t),I8o=r(NU," class method or the "),PN=n(NU,"A",{href:!0});var Ert=s(PN);q8o=r(Ert,"from_config()"),Ert.forEach(t),N8o=r(NU,` class
method.`),NU.forEach(t),j8o=i(ll),Z6=n(ll,"P",{});var b$e=s(Z6);D8o=r(b$e,"This class cannot be instantiated directly using "),uie=n(b$e,"CODE",{});var Crt=s(uie);G8o=r(Crt,"__init__()"),Crt.forEach(t),O8o=r(b$e," (throws an error)."),b$e.forEach(t),V8o=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);f(eA.$$.fragment,il),X8o=i(il),pie=n(il,"P",{});var wrt=s(pie);z8o=r(wrt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wrt.forEach(t),Q8o=i(il),vd=n(il,"P",{});var jU=s(vd);W8o=r(jU,`Note:
Loading a model from its configuration file does `),_ie=n(jU,"STRONG",{});var Art=s(_ie);H8o=r(Art,"not"),Art.forEach(t),U8o=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(jU,"A",{href:!0});var yrt=s($N);J8o=r(yrt,"from_pretrained()"),yrt.forEach(t),Y8o=r(jU," to load the model weights."),jU.forEach(t),K8o=i(il),bie=n(il,"P",{});var Lrt=s(bie);Z8o=r(Lrt,"Examples:"),Lrt.forEach(t),eLo=i(il),f(oA.$$.fragment,il),il.forEach(t),oLo=i(ll),Ve=n(ll,"DIV",{class:!0});var Qt=s(Ve);f(rA.$$.fragment,Qt),rLo=i(Qt),vie=n(Qt,"P",{});var xrt=s(vie);tLo=r(xrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xrt.forEach(t),aLo=i(Qt),Ja=n(Qt,"P",{});var NC=s(Ja);nLo=r(NC,"The model class to instantiate is selected based on the "),Fie=n(NC,"CODE",{});var krt=s(Fie);sLo=r(krt,"model_type"),krt.forEach(t),lLo=r(NC,` property of the config object (either
passed as an argument or loaded from `),Tie=n(NC,"CODE",{});var Srt=s(Tie);iLo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),dLo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(NC,"CODE",{});var Rrt=s(Mie);cLo=r(Rrt,"pretrained_model_name_or_path"),Rrt.forEach(t),mLo=r(NC,":"),NC.forEach(t),fLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);sv=n(O,"LI",{});var oye=s(sv);Eie=n(oye,"STRONG",{});var Brt=s(Eie);gLo=r(Brt,"albert"),Brt.forEach(t),hLo=r(oye," \u2014 "),IN=n(oye,"A",{href:!0});var Prt=s(IN);uLo=r(Prt,"AlbertForMultipleChoice"),Prt.forEach(t),pLo=r(oye," (ALBERT model)"),oye.forEach(t),_Lo=i(O),lv=n(O,"LI",{});var rye=s(lv);Cie=n(rye,"STRONG",{});var $rt=s(Cie);bLo=r($rt,"bert"),$rt.forEach(t),vLo=r(rye," \u2014 "),qN=n(rye,"A",{href:!0});var Irt=s(qN);FLo=r(Irt,"BertForMultipleChoice"),Irt.forEach(t),TLo=r(rye," (BERT model)"),rye.forEach(t),MLo=i(O),iv=n(O,"LI",{});var tye=s(iv);wie=n(tye,"STRONG",{});var qrt=s(wie);ELo=r(qrt,"big_bird"),qrt.forEach(t),CLo=r(tye," \u2014 "),NN=n(tye,"A",{href:!0});var Nrt=s(NN);wLo=r(Nrt,"BigBirdForMultipleChoice"),Nrt.forEach(t),ALo=r(tye," (BigBird model)"),tye.forEach(t),yLo=i(O),dv=n(O,"LI",{});var aye=s(dv);Aie=n(aye,"STRONG",{});var jrt=s(Aie);LLo=r(jrt,"camembert"),jrt.forEach(t),xLo=r(aye," \u2014 "),jN=n(aye,"A",{href:!0});var Drt=s(jN);kLo=r(Drt,"CamembertForMultipleChoice"),Drt.forEach(t),SLo=r(aye," (CamemBERT model)"),aye.forEach(t),RLo=i(O),cv=n(O,"LI",{});var nye=s(cv);yie=n(nye,"STRONG",{});var Grt=s(yie);BLo=r(Grt,"canine"),Grt.forEach(t),PLo=r(nye," \u2014 "),DN=n(nye,"A",{href:!0});var Ort=s(DN);$Lo=r(Ort,"CanineForMultipleChoice"),Ort.forEach(t),ILo=r(nye," (Canine model)"),nye.forEach(t),qLo=i(O),mv=n(O,"LI",{});var sye=s(mv);Lie=n(sye,"STRONG",{});var Vrt=s(Lie);NLo=r(Vrt,"convbert"),Vrt.forEach(t),jLo=r(sye," \u2014 "),GN=n(sye,"A",{href:!0});var Xrt=s(GN);DLo=r(Xrt,"ConvBertForMultipleChoice"),Xrt.forEach(t),GLo=r(sye," (ConvBERT model)"),sye.forEach(t),OLo=i(O),fv=n(O,"LI",{});var lye=s(fv);xie=n(lye,"STRONG",{});var zrt=s(xie);VLo=r(zrt,"data2vec-text"),zrt.forEach(t),XLo=r(lye," \u2014 "),ON=n(lye,"A",{href:!0});var Qrt=s(ON);zLo=r(Qrt,"Data2VecTextForMultipleChoice"),Qrt.forEach(t),QLo=r(lye," (Data2VecText model)"),lye.forEach(t),WLo=i(O),gv=n(O,"LI",{});var iye=s(gv);kie=n(iye,"STRONG",{});var Wrt=s(kie);HLo=r(Wrt,"distilbert"),Wrt.forEach(t),ULo=r(iye," \u2014 "),VN=n(iye,"A",{href:!0});var Hrt=s(VN);JLo=r(Hrt,"DistilBertForMultipleChoice"),Hrt.forEach(t),YLo=r(iye," (DistilBERT model)"),iye.forEach(t),KLo=i(O),hv=n(O,"LI",{});var dye=s(hv);Sie=n(dye,"STRONG",{});var Urt=s(Sie);ZLo=r(Urt,"electra"),Urt.forEach(t),e7o=r(dye," \u2014 "),XN=n(dye,"A",{href:!0});var Jrt=s(XN);o7o=r(Jrt,"ElectraForMultipleChoice"),Jrt.forEach(t),r7o=r(dye," (ELECTRA model)"),dye.forEach(t),t7o=i(O),uv=n(O,"LI",{});var cye=s(uv);Rie=n(cye,"STRONG",{});var Yrt=s(Rie);a7o=r(Yrt,"flaubert"),Yrt.forEach(t),n7o=r(cye," \u2014 "),zN=n(cye,"A",{href:!0});var Krt=s(zN);s7o=r(Krt,"FlaubertForMultipleChoice"),Krt.forEach(t),l7o=r(cye," (FlauBERT model)"),cye.forEach(t),i7o=i(O),pv=n(O,"LI",{});var mye=s(pv);Bie=n(mye,"STRONG",{});var Zrt=s(Bie);d7o=r(Zrt,"fnet"),Zrt.forEach(t),c7o=r(mye," \u2014 "),QN=n(mye,"A",{href:!0});var ett=s(QN);m7o=r(ett,"FNetForMultipleChoice"),ett.forEach(t),f7o=r(mye," (FNet model)"),mye.forEach(t),g7o=i(O),_v=n(O,"LI",{});var fye=s(_v);Pie=n(fye,"STRONG",{});var ott=s(Pie);h7o=r(ott,"funnel"),ott.forEach(t),u7o=r(fye," \u2014 "),WN=n(fye,"A",{href:!0});var rtt=s(WN);p7o=r(rtt,"FunnelForMultipleChoice"),rtt.forEach(t),_7o=r(fye," (Funnel Transformer model)"),fye.forEach(t),b7o=i(O),bv=n(O,"LI",{});var gye=s(bv);$ie=n(gye,"STRONG",{});var ttt=s($ie);v7o=r(ttt,"ibert"),ttt.forEach(t),F7o=r(gye," \u2014 "),HN=n(gye,"A",{href:!0});var att=s(HN);T7o=r(att,"IBertForMultipleChoice"),att.forEach(t),M7o=r(gye," (I-BERT model)"),gye.forEach(t),E7o=i(O),vv=n(O,"LI",{});var hye=s(vv);Iie=n(hye,"STRONG",{});var ntt=s(Iie);C7o=r(ntt,"longformer"),ntt.forEach(t),w7o=r(hye," \u2014 "),UN=n(hye,"A",{href:!0});var stt=s(UN);A7o=r(stt,"LongformerForMultipleChoice"),stt.forEach(t),y7o=r(hye," (Longformer model)"),hye.forEach(t),L7o=i(O),Fv=n(O,"LI",{});var uye=s(Fv);qie=n(uye,"STRONG",{});var ltt=s(qie);x7o=r(ltt,"megatron-bert"),ltt.forEach(t),k7o=r(uye," \u2014 "),JN=n(uye,"A",{href:!0});var itt=s(JN);S7o=r(itt,"MegatronBertForMultipleChoice"),itt.forEach(t),R7o=r(uye," (MegatronBert model)"),uye.forEach(t),B7o=i(O),Tv=n(O,"LI",{});var pye=s(Tv);Nie=n(pye,"STRONG",{});var dtt=s(Nie);P7o=r(dtt,"mobilebert"),dtt.forEach(t),$7o=r(pye," \u2014 "),YN=n(pye,"A",{href:!0});var ctt=s(YN);I7o=r(ctt,"MobileBertForMultipleChoice"),ctt.forEach(t),q7o=r(pye," (MobileBERT model)"),pye.forEach(t),N7o=i(O),Mv=n(O,"LI",{});var _ye=s(Mv);jie=n(_ye,"STRONG",{});var mtt=s(jie);j7o=r(mtt,"mpnet"),mtt.forEach(t),D7o=r(_ye," \u2014 "),KN=n(_ye,"A",{href:!0});var ftt=s(KN);G7o=r(ftt,"MPNetForMultipleChoice"),ftt.forEach(t),O7o=r(_ye," (MPNet model)"),_ye.forEach(t),V7o=i(O),Ev=n(O,"LI",{});var bye=s(Ev);Die=n(bye,"STRONG",{});var gtt=s(Die);X7o=r(gtt,"nystromformer"),gtt.forEach(t),z7o=r(bye," \u2014 "),ZN=n(bye,"A",{href:!0});var htt=s(ZN);Q7o=r(htt,"NystromformerForMultipleChoice"),htt.forEach(t),W7o=r(bye," (Nystromformer model)"),bye.forEach(t),H7o=i(O),Cv=n(O,"LI",{});var vye=s(Cv);Gie=n(vye,"STRONG",{});var utt=s(Gie);U7o=r(utt,"qdqbert"),utt.forEach(t),J7o=r(vye," \u2014 "),ej=n(vye,"A",{href:!0});var ptt=s(ej);Y7o=r(ptt,"QDQBertForMultipleChoice"),ptt.forEach(t),K7o=r(vye," (QDQBert model)"),vye.forEach(t),Z7o=i(O),wv=n(O,"LI",{});var Fye=s(wv);Oie=n(Fye,"STRONG",{});var _tt=s(Oie);e9o=r(_tt,"rembert"),_tt.forEach(t),o9o=r(Fye," \u2014 "),oj=n(Fye,"A",{href:!0});var btt=s(oj);r9o=r(btt,"RemBertForMultipleChoice"),btt.forEach(t),t9o=r(Fye," (RemBERT model)"),Fye.forEach(t),a9o=i(O),Av=n(O,"LI",{});var Tye=s(Av);Vie=n(Tye,"STRONG",{});var vtt=s(Vie);n9o=r(vtt,"roberta"),vtt.forEach(t),s9o=r(Tye," \u2014 "),rj=n(Tye,"A",{href:!0});var Ftt=s(rj);l9o=r(Ftt,"RobertaForMultipleChoice"),Ftt.forEach(t),i9o=r(Tye," (RoBERTa model)"),Tye.forEach(t),d9o=i(O),yv=n(O,"LI",{});var Mye=s(yv);Xie=n(Mye,"STRONG",{});var Ttt=s(Xie);c9o=r(Ttt,"roformer"),Ttt.forEach(t),m9o=r(Mye," \u2014 "),tj=n(Mye,"A",{href:!0});var Mtt=s(tj);f9o=r(Mtt,"RoFormerForMultipleChoice"),Mtt.forEach(t),g9o=r(Mye," (RoFormer model)"),Mye.forEach(t),h9o=i(O),Lv=n(O,"LI",{});var Eye=s(Lv);zie=n(Eye,"STRONG",{});var Ett=s(zie);u9o=r(Ett,"squeezebert"),Ett.forEach(t),p9o=r(Eye," \u2014 "),aj=n(Eye,"A",{href:!0});var Ctt=s(aj);_9o=r(Ctt,"SqueezeBertForMultipleChoice"),Ctt.forEach(t),b9o=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),v9o=i(O),xv=n(O,"LI",{});var Cye=s(xv);Qie=n(Cye,"STRONG",{});var wtt=s(Qie);F9o=r(wtt,"xlm"),wtt.forEach(t),T9o=r(Cye," \u2014 "),nj=n(Cye,"A",{href:!0});var Att=s(nj);M9o=r(Att,"XLMForMultipleChoice"),Att.forEach(t),E9o=r(Cye," (XLM model)"),Cye.forEach(t),C9o=i(O),kv=n(O,"LI",{});var wye=s(kv);Wie=n(wye,"STRONG",{});var ytt=s(Wie);w9o=r(ytt,"xlm-roberta"),ytt.forEach(t),A9o=r(wye," \u2014 "),sj=n(wye,"A",{href:!0});var Ltt=s(sj);y9o=r(Ltt,"XLMRobertaForMultipleChoice"),Ltt.forEach(t),L9o=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),x9o=i(O),Sv=n(O,"LI",{});var Aye=s(Sv);Hie=n(Aye,"STRONG",{});var xtt=s(Hie);k9o=r(xtt,"xlm-roberta-xl"),xtt.forEach(t),S9o=r(Aye," \u2014 "),lj=n(Aye,"A",{href:!0});var ktt=s(lj);R9o=r(ktt,"XLMRobertaXLForMultipleChoice"),ktt.forEach(t),B9o=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),P9o=i(O),Rv=n(O,"LI",{});var yye=s(Rv);Uie=n(yye,"STRONG",{});var Stt=s(Uie);$9o=r(Stt,"xlnet"),Stt.forEach(t),I9o=r(yye," \u2014 "),ij=n(yye,"A",{href:!0});var Rtt=s(ij);q9o=r(Rtt,"XLNetForMultipleChoice"),Rtt.forEach(t),N9o=r(yye," (XLNet model)"),yye.forEach(t),j9o=i(O),Bv=n(O,"LI",{});var Lye=s(Bv);Jie=n(Lye,"STRONG",{});var Btt=s(Jie);D9o=r(Btt,"yoso"),Btt.forEach(t),G9o=r(Lye," \u2014 "),dj=n(Lye,"A",{href:!0});var Ptt=s(dj);O9o=r(Ptt,"YosoForMultipleChoice"),Ptt.forEach(t),V9o=r(Lye," (YOSO model)"),Lye.forEach(t),O.forEach(t),X9o=i(Qt),Pv=n(Qt,"P",{});var xye=s(Pv);z9o=r(xye,"The model is set in evaluation mode by default using "),Yie=n(xye,"CODE",{});var $tt=s(Yie);Q9o=r($tt,"model.eval()"),$tt.forEach(t),W9o=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kie=n(xye,"CODE",{});var Itt=s(Kie);H9o=r(Itt,"model.train()"),Itt.forEach(t),xye.forEach(t),U9o=i(Qt),Zie=n(Qt,"P",{});var qtt=s(Zie);J9o=r(qtt,"Examples:"),qtt.forEach(t),Y9o=i(Qt),f(tA.$$.fragment,Qt),Qt.forEach(t),ll.forEach(t),cBe=i(c),Fd=n(c,"H2",{class:!0});var v$e=s(Fd);$v=n(v$e,"A",{id:!0,class:!0,href:!0});var Ntt=s($v);ede=n(Ntt,"SPAN",{});var jtt=s(ede);f(aA.$$.fragment,jtt),jtt.forEach(t),Ntt.forEach(t),K9o=i(v$e),ode=n(v$e,"SPAN",{});var Dtt=s(ode);Z9o=r(Dtt,"AutoModelForNextSentencePrediction"),Dtt.forEach(t),v$e.forEach(t),mBe=i(c),tr=n(c,"DIV",{class:!0});var dl=s(tr);f(nA.$$.fragment,dl),exo=i(dl),Td=n(dl,"P",{});var DU=s(Td);oxo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=n(DU,"A",{href:!0});var Gtt=s(cj);rxo=r(Gtt,"from_pretrained()"),Gtt.forEach(t),txo=r(DU," class method or the "),mj=n(DU,"A",{href:!0});var Ott=s(mj);axo=r(Ott,"from_config()"),Ott.forEach(t),nxo=r(DU,` class
method.`),DU.forEach(t),sxo=i(dl),sA=n(dl,"P",{});var F$e=s(sA);lxo=r(F$e,"This class cannot be instantiated directly using "),rde=n(F$e,"CODE",{});var Vtt=s(rde);ixo=r(Vtt,"__init__()"),Vtt.forEach(t),dxo=r(F$e," (throws an error)."),F$e.forEach(t),cxo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);f(lA.$$.fragment,cl),mxo=i(cl),tde=n(cl,"P",{});var Xtt=s(tde);fxo=r(Xtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xtt.forEach(t),gxo=i(cl),Md=n(cl,"P",{});var GU=s(Md);hxo=r(GU,`Note:
Loading a model from its configuration file does `),ade=n(GU,"STRONG",{});var ztt=s(ade);uxo=r(ztt,"not"),ztt.forEach(t),pxo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(GU,"A",{href:!0});var Qtt=s(fj);_xo=r(Qtt,"from_pretrained()"),Qtt.forEach(t),bxo=r(GU," to load the model weights."),GU.forEach(t),vxo=i(cl),nde=n(cl,"P",{});var Wtt=s(nde);Fxo=r(Wtt,"Examples:"),Wtt.forEach(t),Txo=i(cl),f(iA.$$.fragment,cl),cl.forEach(t),Mxo=i(dl),Xe=n(dl,"DIV",{class:!0});var Wt=s(Xe);f(dA.$$.fragment,Wt),Exo=i(Wt),sde=n(Wt,"P",{});var Htt=s(sde);Cxo=r(Htt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Htt.forEach(t),wxo=i(Wt),Ya=n(Wt,"P",{});var jC=s(Ya);Axo=r(jC,"The model class to instantiate is selected based on the "),lde=n(jC,"CODE",{});var Utt=s(lde);yxo=r(Utt,"model_type"),Utt.forEach(t),Lxo=r(jC,` property of the config object (either
passed as an argument or loaded from `),ide=n(jC,"CODE",{});var Jtt=s(ide);xxo=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),kxo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dde=n(jC,"CODE",{});var Ytt=s(dde);Sxo=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),Rxo=r(jC,":"),jC.forEach(t),Bxo=i(Wt),da=n(Wt,"UL",{});var ml=s(da);Iv=n(ml,"LI",{});var kye=s(Iv);cde=n(kye,"STRONG",{});var Ktt=s(cde);Pxo=r(Ktt,"bert"),Ktt.forEach(t),$xo=r(kye," \u2014 "),gj=n(kye,"A",{href:!0});var Ztt=s(gj);Ixo=r(Ztt,"BertForNextSentencePrediction"),Ztt.forEach(t),qxo=r(kye," (BERT model)"),kye.forEach(t),Nxo=i(ml),qv=n(ml,"LI",{});var Sye=s(qv);mde=n(Sye,"STRONG",{});var eat=s(mde);jxo=r(eat,"fnet"),eat.forEach(t),Dxo=r(Sye," \u2014 "),hj=n(Sye,"A",{href:!0});var oat=s(hj);Gxo=r(oat,"FNetForNextSentencePrediction"),oat.forEach(t),Oxo=r(Sye," (FNet model)"),Sye.forEach(t),Vxo=i(ml),Nv=n(ml,"LI",{});var Rye=s(Nv);fde=n(Rye,"STRONG",{});var rat=s(fde);Xxo=r(rat,"megatron-bert"),rat.forEach(t),zxo=r(Rye," \u2014 "),uj=n(Rye,"A",{href:!0});var tat=s(uj);Qxo=r(tat,"MegatronBertForNextSentencePrediction"),tat.forEach(t),Wxo=r(Rye," (MegatronBert model)"),Rye.forEach(t),Hxo=i(ml),jv=n(ml,"LI",{});var Bye=s(jv);gde=n(Bye,"STRONG",{});var aat=s(gde);Uxo=r(aat,"mobilebert"),aat.forEach(t),Jxo=r(Bye," \u2014 "),pj=n(Bye,"A",{href:!0});var nat=s(pj);Yxo=r(nat,"MobileBertForNextSentencePrediction"),nat.forEach(t),Kxo=r(Bye," (MobileBERT model)"),Bye.forEach(t),Zxo=i(ml),Dv=n(ml,"LI",{});var Pye=s(Dv);hde=n(Pye,"STRONG",{});var sat=s(hde);eko=r(sat,"qdqbert"),sat.forEach(t),oko=r(Pye," \u2014 "),_j=n(Pye,"A",{href:!0});var lat=s(_j);rko=r(lat,"QDQBertForNextSentencePrediction"),lat.forEach(t),tko=r(Pye," (QDQBert model)"),Pye.forEach(t),ml.forEach(t),ako=i(Wt),Gv=n(Wt,"P",{});var $ye=s(Gv);nko=r($ye,"The model is set in evaluation mode by default using "),ude=n($ye,"CODE",{});var iat=s(ude);sko=r(iat,"model.eval()"),iat.forEach(t),lko=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n($ye,"CODE",{});var dat=s(pde);iko=r(dat,"model.train()"),dat.forEach(t),$ye.forEach(t),dko=i(Wt),_de=n(Wt,"P",{});var cat=s(_de);cko=r(cat,"Examples:"),cat.forEach(t),mko=i(Wt),f(cA.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),fBe=i(c),Ed=n(c,"H2",{class:!0});var T$e=s(Ed);Ov=n(T$e,"A",{id:!0,class:!0,href:!0});var mat=s(Ov);bde=n(mat,"SPAN",{});var fat=s(bde);f(mA.$$.fragment,fat),fat.forEach(t),mat.forEach(t),fko=i(T$e),vde=n(T$e,"SPAN",{});var gat=s(vde);gko=r(gat,"AutoModelForTokenClassification"),gat.forEach(t),T$e.forEach(t),gBe=i(c),ar=n(c,"DIV",{class:!0});var fl=s(ar);f(fA.$$.fragment,fl),hko=i(fl),Cd=n(fl,"P",{});var OU=s(Cd);uko=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=n(OU,"A",{href:!0});var hat=s(bj);pko=r(hat,"from_pretrained()"),hat.forEach(t),_ko=r(OU," class method or the "),vj=n(OU,"A",{href:!0});var uat=s(vj);bko=r(uat,"from_config()"),uat.forEach(t),vko=r(OU,` class
method.`),OU.forEach(t),Fko=i(fl),gA=n(fl,"P",{});var M$e=s(gA);Tko=r(M$e,"This class cannot be instantiated directly using "),Fde=n(M$e,"CODE",{});var pat=s(Fde);Mko=r(pat,"__init__()"),pat.forEach(t),Eko=r(M$e," (throws an error)."),M$e.forEach(t),Cko=i(fl),Kr=n(fl,"DIV",{class:!0});var gl=s(Kr);f(hA.$$.fragment,gl),wko=i(gl),Tde=n(gl,"P",{});var _at=s(Tde);Ako=r(_at,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_at.forEach(t),yko=i(gl),wd=n(gl,"P",{});var VU=s(wd);Lko=r(VU,`Note:
Loading a model from its configuration file does `),Mde=n(VU,"STRONG",{});var bat=s(Mde);xko=r(bat,"not"),bat.forEach(t),kko=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(VU,"A",{href:!0});var vat=s(Fj);Sko=r(vat,"from_pretrained()"),vat.forEach(t),Rko=r(VU," to load the model weights."),VU.forEach(t),Bko=i(gl),Ede=n(gl,"P",{});var Fat=s(Ede);Pko=r(Fat,"Examples:"),Fat.forEach(t),$ko=i(gl),f(uA.$$.fragment,gl),gl.forEach(t),Iko=i(fl),ze=n(fl,"DIV",{class:!0});var Ht=s(ze);f(pA.$$.fragment,Ht),qko=i(Ht),Cde=n(Ht,"P",{});var Tat=s(Cde);Nko=r(Tat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tat.forEach(t),jko=i(Ht),Ka=n(Ht,"P",{});var DC=s(Ka);Dko=r(DC,"The model class to instantiate is selected based on the "),wde=n(DC,"CODE",{});var Mat=s(wde);Gko=r(Mat,"model_type"),Mat.forEach(t),Oko=r(DC,` property of the config object (either
passed as an argument or loaded from `),Ade=n(DC,"CODE",{});var Eat=s(Ade);Vko=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),Xko=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(DC,"CODE",{});var Cat=s(yde);zko=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),Qko=r(DC,":"),DC.forEach(t),Wko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Vv=n(D,"LI",{});var Iye=s(Vv);Lde=n(Iye,"STRONG",{});var wat=s(Lde);Hko=r(wat,"albert"),wat.forEach(t),Uko=r(Iye," \u2014 "),Tj=n(Iye,"A",{href:!0});var Aat=s(Tj);Jko=r(Aat,"AlbertForTokenClassification"),Aat.forEach(t),Yko=r(Iye," (ALBERT model)"),Iye.forEach(t),Kko=i(D),Xv=n(D,"LI",{});var qye=s(Xv);xde=n(qye,"STRONG",{});var yat=s(xde);Zko=r(yat,"bert"),yat.forEach(t),eSo=r(qye," \u2014 "),Mj=n(qye,"A",{href:!0});var Lat=s(Mj);oSo=r(Lat,"BertForTokenClassification"),Lat.forEach(t),rSo=r(qye," (BERT model)"),qye.forEach(t),tSo=i(D),zv=n(D,"LI",{});var Nye=s(zv);kde=n(Nye,"STRONG",{});var xat=s(kde);aSo=r(xat,"big_bird"),xat.forEach(t),nSo=r(Nye," \u2014 "),Ej=n(Nye,"A",{href:!0});var kat=s(Ej);sSo=r(kat,"BigBirdForTokenClassification"),kat.forEach(t),lSo=r(Nye," (BigBird model)"),Nye.forEach(t),iSo=i(D),Qv=n(D,"LI",{});var jye=s(Qv);Sde=n(jye,"STRONG",{});var Sat=s(Sde);dSo=r(Sat,"camembert"),Sat.forEach(t),cSo=r(jye," \u2014 "),Cj=n(jye,"A",{href:!0});var Rat=s(Cj);mSo=r(Rat,"CamembertForTokenClassification"),Rat.forEach(t),fSo=r(jye," (CamemBERT model)"),jye.forEach(t),gSo=i(D),Wv=n(D,"LI",{});var Dye=s(Wv);Rde=n(Dye,"STRONG",{});var Bat=s(Rde);hSo=r(Bat,"canine"),Bat.forEach(t),uSo=r(Dye," \u2014 "),wj=n(Dye,"A",{href:!0});var Pat=s(wj);pSo=r(Pat,"CanineForTokenClassification"),Pat.forEach(t),_So=r(Dye," (Canine model)"),Dye.forEach(t),bSo=i(D),Hv=n(D,"LI",{});var Gye=s(Hv);Bde=n(Gye,"STRONG",{});var $at=s(Bde);vSo=r($at,"convbert"),$at.forEach(t),FSo=r(Gye," \u2014 "),Aj=n(Gye,"A",{href:!0});var Iat=s(Aj);TSo=r(Iat,"ConvBertForTokenClassification"),Iat.forEach(t),MSo=r(Gye," (ConvBERT model)"),Gye.forEach(t),ESo=i(D),Uv=n(D,"LI",{});var Oye=s(Uv);Pde=n(Oye,"STRONG",{});var qat=s(Pde);CSo=r(qat,"data2vec-text"),qat.forEach(t),wSo=r(Oye," \u2014 "),yj=n(Oye,"A",{href:!0});var Nat=s(yj);ASo=r(Nat,"Data2VecTextForTokenClassification"),Nat.forEach(t),ySo=r(Oye," (Data2VecText model)"),Oye.forEach(t),LSo=i(D),Jv=n(D,"LI",{});var Vye=s(Jv);$de=n(Vye,"STRONG",{});var jat=s($de);xSo=r(jat,"deberta"),jat.forEach(t),kSo=r(Vye," \u2014 "),Lj=n(Vye,"A",{href:!0});var Dat=s(Lj);SSo=r(Dat,"DebertaForTokenClassification"),Dat.forEach(t),RSo=r(Vye," (DeBERTa model)"),Vye.forEach(t),BSo=i(D),Yv=n(D,"LI",{});var Xye=s(Yv);Ide=n(Xye,"STRONG",{});var Gat=s(Ide);PSo=r(Gat,"deberta-v2"),Gat.forEach(t),$So=r(Xye," \u2014 "),xj=n(Xye,"A",{href:!0});var Oat=s(xj);ISo=r(Oat,"DebertaV2ForTokenClassification"),Oat.forEach(t),qSo=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),NSo=i(D),Kv=n(D,"LI",{});var zye=s(Kv);qde=n(zye,"STRONG",{});var Vat=s(qde);jSo=r(Vat,"distilbert"),Vat.forEach(t),DSo=r(zye," \u2014 "),kj=n(zye,"A",{href:!0});var Xat=s(kj);GSo=r(Xat,"DistilBertForTokenClassification"),Xat.forEach(t),OSo=r(zye," (DistilBERT model)"),zye.forEach(t),VSo=i(D),Zv=n(D,"LI",{});var Qye=s(Zv);Nde=n(Qye,"STRONG",{});var zat=s(Nde);XSo=r(zat,"electra"),zat.forEach(t),zSo=r(Qye," \u2014 "),Sj=n(Qye,"A",{href:!0});var Qat=s(Sj);QSo=r(Qat,"ElectraForTokenClassification"),Qat.forEach(t),WSo=r(Qye," (ELECTRA model)"),Qye.forEach(t),HSo=i(D),eF=n(D,"LI",{});var Wye=s(eF);jde=n(Wye,"STRONG",{});var Wat=s(jde);USo=r(Wat,"flaubert"),Wat.forEach(t),JSo=r(Wye," \u2014 "),Rj=n(Wye,"A",{href:!0});var Hat=s(Rj);YSo=r(Hat,"FlaubertForTokenClassification"),Hat.forEach(t),KSo=r(Wye," (FlauBERT model)"),Wye.forEach(t),ZSo=i(D),oF=n(D,"LI",{});var Hye=s(oF);Dde=n(Hye,"STRONG",{});var Uat=s(Dde);eRo=r(Uat,"fnet"),Uat.forEach(t),oRo=r(Hye," \u2014 "),Bj=n(Hye,"A",{href:!0});var Jat=s(Bj);rRo=r(Jat,"FNetForTokenClassification"),Jat.forEach(t),tRo=r(Hye," (FNet model)"),Hye.forEach(t),aRo=i(D),rF=n(D,"LI",{});var Uye=s(rF);Gde=n(Uye,"STRONG",{});var Yat=s(Gde);nRo=r(Yat,"funnel"),Yat.forEach(t),sRo=r(Uye," \u2014 "),Pj=n(Uye,"A",{href:!0});var Kat=s(Pj);lRo=r(Kat,"FunnelForTokenClassification"),Kat.forEach(t),iRo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),dRo=i(D),tF=n(D,"LI",{});var Jye=s(tF);Ode=n(Jye,"STRONG",{});var Zat=s(Ode);cRo=r(Zat,"gpt2"),Zat.forEach(t),mRo=r(Jye," \u2014 "),$j=n(Jye,"A",{href:!0});var ent=s($j);fRo=r(ent,"GPT2ForTokenClassification"),ent.forEach(t),gRo=r(Jye," (OpenAI GPT-2 model)"),Jye.forEach(t),hRo=i(D),aF=n(D,"LI",{});var Yye=s(aF);Vde=n(Yye,"STRONG",{});var ont=s(Vde);uRo=r(ont,"ibert"),ont.forEach(t),pRo=r(Yye," \u2014 "),Ij=n(Yye,"A",{href:!0});var rnt=s(Ij);_Ro=r(rnt,"IBertForTokenClassification"),rnt.forEach(t),bRo=r(Yye," (I-BERT model)"),Yye.forEach(t),vRo=i(D),nF=n(D,"LI",{});var Kye=s(nF);Xde=n(Kye,"STRONG",{});var tnt=s(Xde);FRo=r(tnt,"layoutlm"),tnt.forEach(t),TRo=r(Kye," \u2014 "),qj=n(Kye,"A",{href:!0});var ant=s(qj);MRo=r(ant,"LayoutLMForTokenClassification"),ant.forEach(t),ERo=r(Kye," (LayoutLM model)"),Kye.forEach(t),CRo=i(D),sF=n(D,"LI",{});var Zye=s(sF);zde=n(Zye,"STRONG",{});var nnt=s(zde);wRo=r(nnt,"layoutlmv2"),nnt.forEach(t),ARo=r(Zye," \u2014 "),Nj=n(Zye,"A",{href:!0});var snt=s(Nj);yRo=r(snt,"LayoutLMv2ForTokenClassification"),snt.forEach(t),LRo=r(Zye," (LayoutLMv2 model)"),Zye.forEach(t),xRo=i(D),lF=n(D,"LI",{});var e8e=s(lF);Qde=n(e8e,"STRONG",{});var lnt=s(Qde);kRo=r(lnt,"longformer"),lnt.forEach(t),SRo=r(e8e," \u2014 "),jj=n(e8e,"A",{href:!0});var int=s(jj);RRo=r(int,"LongformerForTokenClassification"),int.forEach(t),BRo=r(e8e," (Longformer model)"),e8e.forEach(t),PRo=i(D),iF=n(D,"LI",{});var o8e=s(iF);Wde=n(o8e,"STRONG",{});var dnt=s(Wde);$Ro=r(dnt,"megatron-bert"),dnt.forEach(t),IRo=r(o8e," \u2014 "),Dj=n(o8e,"A",{href:!0});var cnt=s(Dj);qRo=r(cnt,"MegatronBertForTokenClassification"),cnt.forEach(t),NRo=r(o8e," (MegatronBert model)"),o8e.forEach(t),jRo=i(D),dF=n(D,"LI",{});var r8e=s(dF);Hde=n(r8e,"STRONG",{});var mnt=s(Hde);DRo=r(mnt,"mobilebert"),mnt.forEach(t),GRo=r(r8e," \u2014 "),Gj=n(r8e,"A",{href:!0});var fnt=s(Gj);ORo=r(fnt,"MobileBertForTokenClassification"),fnt.forEach(t),VRo=r(r8e," (MobileBERT model)"),r8e.forEach(t),XRo=i(D),cF=n(D,"LI",{});var t8e=s(cF);Ude=n(t8e,"STRONG",{});var gnt=s(Ude);zRo=r(gnt,"mpnet"),gnt.forEach(t),QRo=r(t8e," \u2014 "),Oj=n(t8e,"A",{href:!0});var hnt=s(Oj);WRo=r(hnt,"MPNetForTokenClassification"),hnt.forEach(t),HRo=r(t8e," (MPNet model)"),t8e.forEach(t),URo=i(D),mF=n(D,"LI",{});var a8e=s(mF);Jde=n(a8e,"STRONG",{});var unt=s(Jde);JRo=r(unt,"nystromformer"),unt.forEach(t),YRo=r(a8e," \u2014 "),Vj=n(a8e,"A",{href:!0});var pnt=s(Vj);KRo=r(pnt,"NystromformerForTokenClassification"),pnt.forEach(t),ZRo=r(a8e," (Nystromformer model)"),a8e.forEach(t),eBo=i(D),fF=n(D,"LI",{});var n8e=s(fF);Yde=n(n8e,"STRONG",{});var _nt=s(Yde);oBo=r(_nt,"qdqbert"),_nt.forEach(t),rBo=r(n8e," \u2014 "),Xj=n(n8e,"A",{href:!0});var bnt=s(Xj);tBo=r(bnt,"QDQBertForTokenClassification"),bnt.forEach(t),aBo=r(n8e," (QDQBert model)"),n8e.forEach(t),nBo=i(D),gF=n(D,"LI",{});var s8e=s(gF);Kde=n(s8e,"STRONG",{});var vnt=s(Kde);sBo=r(vnt,"rembert"),vnt.forEach(t),lBo=r(s8e," \u2014 "),zj=n(s8e,"A",{href:!0});var Fnt=s(zj);iBo=r(Fnt,"RemBertForTokenClassification"),Fnt.forEach(t),dBo=r(s8e," (RemBERT model)"),s8e.forEach(t),cBo=i(D),hF=n(D,"LI",{});var l8e=s(hF);Zde=n(l8e,"STRONG",{});var Tnt=s(Zde);mBo=r(Tnt,"roberta"),Tnt.forEach(t),fBo=r(l8e," \u2014 "),Qj=n(l8e,"A",{href:!0});var Mnt=s(Qj);gBo=r(Mnt,"RobertaForTokenClassification"),Mnt.forEach(t),hBo=r(l8e," (RoBERTa model)"),l8e.forEach(t),uBo=i(D),uF=n(D,"LI",{});var i8e=s(uF);ece=n(i8e,"STRONG",{});var Ent=s(ece);pBo=r(Ent,"roformer"),Ent.forEach(t),_Bo=r(i8e," \u2014 "),Wj=n(i8e,"A",{href:!0});var Cnt=s(Wj);bBo=r(Cnt,"RoFormerForTokenClassification"),Cnt.forEach(t),vBo=r(i8e," (RoFormer model)"),i8e.forEach(t),FBo=i(D),pF=n(D,"LI",{});var d8e=s(pF);oce=n(d8e,"STRONG",{});var wnt=s(oce);TBo=r(wnt,"squeezebert"),wnt.forEach(t),MBo=r(d8e," \u2014 "),Hj=n(d8e,"A",{href:!0});var Ant=s(Hj);EBo=r(Ant,"SqueezeBertForTokenClassification"),Ant.forEach(t),CBo=r(d8e," (SqueezeBERT model)"),d8e.forEach(t),wBo=i(D),_F=n(D,"LI",{});var c8e=s(_F);rce=n(c8e,"STRONG",{});var ynt=s(rce);ABo=r(ynt,"xlm"),ynt.forEach(t),yBo=r(c8e," \u2014 "),Uj=n(c8e,"A",{href:!0});var Lnt=s(Uj);LBo=r(Lnt,"XLMForTokenClassification"),Lnt.forEach(t),xBo=r(c8e," (XLM model)"),c8e.forEach(t),kBo=i(D),bF=n(D,"LI",{});var m8e=s(bF);tce=n(m8e,"STRONG",{});var xnt=s(tce);SBo=r(xnt,"xlm-roberta"),xnt.forEach(t),RBo=r(m8e," \u2014 "),Jj=n(m8e,"A",{href:!0});var knt=s(Jj);BBo=r(knt,"XLMRobertaForTokenClassification"),knt.forEach(t),PBo=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),$Bo=i(D),vF=n(D,"LI",{});var f8e=s(vF);ace=n(f8e,"STRONG",{});var Snt=s(ace);IBo=r(Snt,"xlm-roberta-xl"),Snt.forEach(t),qBo=r(f8e," \u2014 "),Yj=n(f8e,"A",{href:!0});var Rnt=s(Yj);NBo=r(Rnt,"XLMRobertaXLForTokenClassification"),Rnt.forEach(t),jBo=r(f8e," (XLM-RoBERTa-XL model)"),f8e.forEach(t),DBo=i(D),FF=n(D,"LI",{});var g8e=s(FF);nce=n(g8e,"STRONG",{});var Bnt=s(nce);GBo=r(Bnt,"xlnet"),Bnt.forEach(t),OBo=r(g8e," \u2014 "),Kj=n(g8e,"A",{href:!0});var Pnt=s(Kj);VBo=r(Pnt,"XLNetForTokenClassification"),Pnt.forEach(t),XBo=r(g8e," (XLNet model)"),g8e.forEach(t),zBo=i(D),TF=n(D,"LI",{});var h8e=s(TF);sce=n(h8e,"STRONG",{});var $nt=s(sce);QBo=r($nt,"yoso"),$nt.forEach(t),WBo=r(h8e," \u2014 "),Zj=n(h8e,"A",{href:!0});var Int=s(Zj);HBo=r(Int,"YosoForTokenClassification"),Int.forEach(t),UBo=r(h8e," (YOSO model)"),h8e.forEach(t),D.forEach(t),JBo=i(Ht),MF=n(Ht,"P",{});var u8e=s(MF);YBo=r(u8e,"The model is set in evaluation mode by default using "),lce=n(u8e,"CODE",{});var qnt=s(lce);KBo=r(qnt,"model.eval()"),qnt.forEach(t),ZBo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=n(u8e,"CODE",{});var Nnt=s(ice);ePo=r(Nnt,"model.train()"),Nnt.forEach(t),u8e.forEach(t),oPo=i(Ht),dce=n(Ht,"P",{});var jnt=s(dce);rPo=r(jnt,"Examples:"),jnt.forEach(t),tPo=i(Ht),f(_A.$$.fragment,Ht),Ht.forEach(t),fl.forEach(t),hBe=i(c),Ad=n(c,"H2",{class:!0});var E$e=s(Ad);EF=n(E$e,"A",{id:!0,class:!0,href:!0});var Dnt=s(EF);cce=n(Dnt,"SPAN",{});var Gnt=s(cce);f(bA.$$.fragment,Gnt),Gnt.forEach(t),Dnt.forEach(t),aPo=i(E$e),mce=n(E$e,"SPAN",{});var Ont=s(mce);nPo=r(Ont,"AutoModelForQuestionAnswering"),Ont.forEach(t),E$e.forEach(t),uBe=i(c),nr=n(c,"DIV",{class:!0});var hl=s(nr);f(vA.$$.fragment,hl),sPo=i(hl),yd=n(hl,"P",{});var XU=s(yd);lPo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=n(XU,"A",{href:!0});var Vnt=s(eD);iPo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),dPo=r(XU," class method or the "),oD=n(XU,"A",{href:!0});var Xnt=s(oD);cPo=r(Xnt,"from_config()"),Xnt.forEach(t),mPo=r(XU,` class
method.`),XU.forEach(t),fPo=i(hl),FA=n(hl,"P",{});var C$e=s(FA);gPo=r(C$e,"This class cannot be instantiated directly using "),fce=n(C$e,"CODE",{});var znt=s(fce);hPo=r(znt,"__init__()"),znt.forEach(t),uPo=r(C$e," (throws an error)."),C$e.forEach(t),pPo=i(hl),Zr=n(hl,"DIV",{class:!0});var ul=s(Zr);f(TA.$$.fragment,ul),_Po=i(ul),gce=n(ul,"P",{});var Qnt=s(gce);bPo=r(Qnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qnt.forEach(t),vPo=i(ul),Ld=n(ul,"P",{});var zU=s(Ld);FPo=r(zU,`Note:
Loading a model from its configuration file does `),hce=n(zU,"STRONG",{});var Wnt=s(hce);TPo=r(Wnt,"not"),Wnt.forEach(t),MPo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(zU,"A",{href:!0});var Hnt=s(rD);EPo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),CPo=r(zU," to load the model weights."),zU.forEach(t),wPo=i(ul),uce=n(ul,"P",{});var Unt=s(uce);APo=r(Unt,"Examples:"),Unt.forEach(t),yPo=i(ul),f(MA.$$.fragment,ul),ul.forEach(t),LPo=i(hl),Qe=n(hl,"DIV",{class:!0});var Ut=s(Qe);f(EA.$$.fragment,Ut),xPo=i(Ut),pce=n(Ut,"P",{});var Jnt=s(pce);kPo=r(Jnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jnt.forEach(t),SPo=i(Ut),Za=n(Ut,"P",{});var GC=s(Za);RPo=r(GC,"The model class to instantiate is selected based on the "),_ce=n(GC,"CODE",{});var Ynt=s(_ce);BPo=r(Ynt,"model_type"),Ynt.forEach(t),PPo=r(GC,` property of the config object (either
passed as an argument or loaded from `),bce=n(GC,"CODE",{});var Knt=s(bce);$Po=r(Knt,"pretrained_model_name_or_path"),Knt.forEach(t),IPo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vce=n(GC,"CODE",{});var Znt=s(vce);qPo=r(Znt,"pretrained_model_name_or_path"),Znt.forEach(t),NPo=r(GC,":"),GC.forEach(t),jPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);CF=n(P,"LI",{});var p8e=s(CF);Fce=n(p8e,"STRONG",{});var est=s(Fce);DPo=r(est,"albert"),est.forEach(t),GPo=r(p8e," \u2014 "),tD=n(p8e,"A",{href:!0});var ost=s(tD);OPo=r(ost,"AlbertForQuestionAnswering"),ost.forEach(t),VPo=r(p8e," (ALBERT model)"),p8e.forEach(t),XPo=i(P),wF=n(P,"LI",{});var _8e=s(wF);Tce=n(_8e,"STRONG",{});var rst=s(Tce);zPo=r(rst,"bart"),rst.forEach(t),QPo=r(_8e," \u2014 "),aD=n(_8e,"A",{href:!0});var tst=s(aD);WPo=r(tst,"BartForQuestionAnswering"),tst.forEach(t),HPo=r(_8e," (BART model)"),_8e.forEach(t),UPo=i(P),AF=n(P,"LI",{});var b8e=s(AF);Mce=n(b8e,"STRONG",{});var ast=s(Mce);JPo=r(ast,"bert"),ast.forEach(t),YPo=r(b8e," \u2014 "),nD=n(b8e,"A",{href:!0});var nst=s(nD);KPo=r(nst,"BertForQuestionAnswering"),nst.forEach(t),ZPo=r(b8e," (BERT model)"),b8e.forEach(t),e$o=i(P),yF=n(P,"LI",{});var v8e=s(yF);Ece=n(v8e,"STRONG",{});var sst=s(Ece);o$o=r(sst,"big_bird"),sst.forEach(t),r$o=r(v8e," \u2014 "),sD=n(v8e,"A",{href:!0});var lst=s(sD);t$o=r(lst,"BigBirdForQuestionAnswering"),lst.forEach(t),a$o=r(v8e," (BigBird model)"),v8e.forEach(t),n$o=i(P),LF=n(P,"LI",{});var F8e=s(LF);Cce=n(F8e,"STRONG",{});var ist=s(Cce);s$o=r(ist,"bigbird_pegasus"),ist.forEach(t),l$o=r(F8e," \u2014 "),lD=n(F8e,"A",{href:!0});var dst=s(lD);i$o=r(dst,"BigBirdPegasusForQuestionAnswering"),dst.forEach(t),d$o=r(F8e," (BigBirdPegasus model)"),F8e.forEach(t),c$o=i(P),xF=n(P,"LI",{});var T8e=s(xF);wce=n(T8e,"STRONG",{});var cst=s(wce);m$o=r(cst,"camembert"),cst.forEach(t),f$o=r(T8e," \u2014 "),iD=n(T8e,"A",{href:!0});var mst=s(iD);g$o=r(mst,"CamembertForQuestionAnswering"),mst.forEach(t),h$o=r(T8e," (CamemBERT model)"),T8e.forEach(t),u$o=i(P),kF=n(P,"LI",{});var M8e=s(kF);Ace=n(M8e,"STRONG",{});var fst=s(Ace);p$o=r(fst,"canine"),fst.forEach(t),_$o=r(M8e," \u2014 "),dD=n(M8e,"A",{href:!0});var gst=s(dD);b$o=r(gst,"CanineForQuestionAnswering"),gst.forEach(t),v$o=r(M8e," (Canine model)"),M8e.forEach(t),F$o=i(P),SF=n(P,"LI",{});var E8e=s(SF);yce=n(E8e,"STRONG",{});var hst=s(yce);T$o=r(hst,"convbert"),hst.forEach(t),M$o=r(E8e," \u2014 "),cD=n(E8e,"A",{href:!0});var ust=s(cD);E$o=r(ust,"ConvBertForQuestionAnswering"),ust.forEach(t),C$o=r(E8e," (ConvBERT model)"),E8e.forEach(t),w$o=i(P),RF=n(P,"LI",{});var C8e=s(RF);Lce=n(C8e,"STRONG",{});var pst=s(Lce);A$o=r(pst,"data2vec-text"),pst.forEach(t),y$o=r(C8e," \u2014 "),mD=n(C8e,"A",{href:!0});var _st=s(mD);L$o=r(_st,"Data2VecTextForQuestionAnswering"),_st.forEach(t),x$o=r(C8e," (Data2VecText model)"),C8e.forEach(t),k$o=i(P),BF=n(P,"LI",{});var w8e=s(BF);xce=n(w8e,"STRONG",{});var bst=s(xce);S$o=r(bst,"deberta"),bst.forEach(t),R$o=r(w8e," \u2014 "),fD=n(w8e,"A",{href:!0});var vst=s(fD);B$o=r(vst,"DebertaForQuestionAnswering"),vst.forEach(t),P$o=r(w8e," (DeBERTa model)"),w8e.forEach(t),$$o=i(P),PF=n(P,"LI",{});var A8e=s(PF);kce=n(A8e,"STRONG",{});var Fst=s(kce);I$o=r(Fst,"deberta-v2"),Fst.forEach(t),q$o=r(A8e," \u2014 "),gD=n(A8e,"A",{href:!0});var Tst=s(gD);N$o=r(Tst,"DebertaV2ForQuestionAnswering"),Tst.forEach(t),j$o=r(A8e," (DeBERTa-v2 model)"),A8e.forEach(t),D$o=i(P),$F=n(P,"LI",{});var y8e=s($F);Sce=n(y8e,"STRONG",{});var Mst=s(Sce);G$o=r(Mst,"distilbert"),Mst.forEach(t),O$o=r(y8e," \u2014 "),hD=n(y8e,"A",{href:!0});var Est=s(hD);V$o=r(Est,"DistilBertForQuestionAnswering"),Est.forEach(t),X$o=r(y8e," (DistilBERT model)"),y8e.forEach(t),z$o=i(P),IF=n(P,"LI",{});var L8e=s(IF);Rce=n(L8e,"STRONG",{});var Cst=s(Rce);Q$o=r(Cst,"electra"),Cst.forEach(t),W$o=r(L8e," \u2014 "),uD=n(L8e,"A",{href:!0});var wst=s(uD);H$o=r(wst,"ElectraForQuestionAnswering"),wst.forEach(t),U$o=r(L8e," (ELECTRA model)"),L8e.forEach(t),J$o=i(P),qF=n(P,"LI",{});var x8e=s(qF);Bce=n(x8e,"STRONG",{});var Ast=s(Bce);Y$o=r(Ast,"flaubert"),Ast.forEach(t),K$o=r(x8e," \u2014 "),pD=n(x8e,"A",{href:!0});var yst=s(pD);Z$o=r(yst,"FlaubertForQuestionAnsweringSimple"),yst.forEach(t),eIo=r(x8e," (FlauBERT model)"),x8e.forEach(t),oIo=i(P),NF=n(P,"LI",{});var k8e=s(NF);Pce=n(k8e,"STRONG",{});var Lst=s(Pce);rIo=r(Lst,"fnet"),Lst.forEach(t),tIo=r(k8e," \u2014 "),_D=n(k8e,"A",{href:!0});var xst=s(_D);aIo=r(xst,"FNetForQuestionAnswering"),xst.forEach(t),nIo=r(k8e," (FNet model)"),k8e.forEach(t),sIo=i(P),jF=n(P,"LI",{});var S8e=s(jF);$ce=n(S8e,"STRONG",{});var kst=s($ce);lIo=r(kst,"funnel"),kst.forEach(t),iIo=r(S8e," \u2014 "),bD=n(S8e,"A",{href:!0});var Sst=s(bD);dIo=r(Sst,"FunnelForQuestionAnswering"),Sst.forEach(t),cIo=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),mIo=i(P),DF=n(P,"LI",{});var R8e=s(DF);Ice=n(R8e,"STRONG",{});var Rst=s(Ice);fIo=r(Rst,"gptj"),Rst.forEach(t),gIo=r(R8e," \u2014 "),vD=n(R8e,"A",{href:!0});var Bst=s(vD);hIo=r(Bst,"GPTJForQuestionAnswering"),Bst.forEach(t),uIo=r(R8e," (GPT-J model)"),R8e.forEach(t),pIo=i(P),GF=n(P,"LI",{});var B8e=s(GF);qce=n(B8e,"STRONG",{});var Pst=s(qce);_Io=r(Pst,"ibert"),Pst.forEach(t),bIo=r(B8e," \u2014 "),FD=n(B8e,"A",{href:!0});var $st=s(FD);vIo=r($st,"IBertForQuestionAnswering"),$st.forEach(t),FIo=r(B8e," (I-BERT model)"),B8e.forEach(t),TIo=i(P),OF=n(P,"LI",{});var P8e=s(OF);Nce=n(P8e,"STRONG",{});var Ist=s(Nce);MIo=r(Ist,"layoutlmv2"),Ist.forEach(t),EIo=r(P8e," \u2014 "),TD=n(P8e,"A",{href:!0});var qst=s(TD);CIo=r(qst,"LayoutLMv2ForQuestionAnswering"),qst.forEach(t),wIo=r(P8e," (LayoutLMv2 model)"),P8e.forEach(t),AIo=i(P),VF=n(P,"LI",{});var $8e=s(VF);jce=n($8e,"STRONG",{});var Nst=s(jce);yIo=r(Nst,"led"),Nst.forEach(t),LIo=r($8e," \u2014 "),MD=n($8e,"A",{href:!0});var jst=s(MD);xIo=r(jst,"LEDForQuestionAnswering"),jst.forEach(t),kIo=r($8e," (LED model)"),$8e.forEach(t),SIo=i(P),XF=n(P,"LI",{});var I8e=s(XF);Dce=n(I8e,"STRONG",{});var Dst=s(Dce);RIo=r(Dst,"longformer"),Dst.forEach(t),BIo=r(I8e," \u2014 "),ED=n(I8e,"A",{href:!0});var Gst=s(ED);PIo=r(Gst,"LongformerForQuestionAnswering"),Gst.forEach(t),$Io=r(I8e," (Longformer model)"),I8e.forEach(t),IIo=i(P),zF=n(P,"LI",{});var q8e=s(zF);Gce=n(q8e,"STRONG",{});var Ost=s(Gce);qIo=r(Ost,"lxmert"),Ost.forEach(t),NIo=r(q8e," \u2014 "),CD=n(q8e,"A",{href:!0});var Vst=s(CD);jIo=r(Vst,"LxmertForQuestionAnswering"),Vst.forEach(t),DIo=r(q8e," (LXMERT model)"),q8e.forEach(t),GIo=i(P),QF=n(P,"LI",{});var N8e=s(QF);Oce=n(N8e,"STRONG",{});var Xst=s(Oce);OIo=r(Xst,"mbart"),Xst.forEach(t),VIo=r(N8e," \u2014 "),wD=n(N8e,"A",{href:!0});var zst=s(wD);XIo=r(zst,"MBartForQuestionAnswering"),zst.forEach(t),zIo=r(N8e," (mBART model)"),N8e.forEach(t),QIo=i(P),WF=n(P,"LI",{});var j8e=s(WF);Vce=n(j8e,"STRONG",{});var Qst=s(Vce);WIo=r(Qst,"megatron-bert"),Qst.forEach(t),HIo=r(j8e," \u2014 "),AD=n(j8e,"A",{href:!0});var Wst=s(AD);UIo=r(Wst,"MegatronBertForQuestionAnswering"),Wst.forEach(t),JIo=r(j8e," (MegatronBert model)"),j8e.forEach(t),YIo=i(P),HF=n(P,"LI",{});var D8e=s(HF);Xce=n(D8e,"STRONG",{});var Hst=s(Xce);KIo=r(Hst,"mobilebert"),Hst.forEach(t),ZIo=r(D8e," \u2014 "),yD=n(D8e,"A",{href:!0});var Ust=s(yD);eqo=r(Ust,"MobileBertForQuestionAnswering"),Ust.forEach(t),oqo=r(D8e," (MobileBERT model)"),D8e.forEach(t),rqo=i(P),UF=n(P,"LI",{});var G8e=s(UF);zce=n(G8e,"STRONG",{});var Jst=s(zce);tqo=r(Jst,"mpnet"),Jst.forEach(t),aqo=r(G8e," \u2014 "),LD=n(G8e,"A",{href:!0});var Yst=s(LD);nqo=r(Yst,"MPNetForQuestionAnswering"),Yst.forEach(t),sqo=r(G8e," (MPNet model)"),G8e.forEach(t),lqo=i(P),JF=n(P,"LI",{});var O8e=s(JF);Qce=n(O8e,"STRONG",{});var Kst=s(Qce);iqo=r(Kst,"nystromformer"),Kst.forEach(t),dqo=r(O8e," \u2014 "),xD=n(O8e,"A",{href:!0});var Zst=s(xD);cqo=r(Zst,"NystromformerForQuestionAnswering"),Zst.forEach(t),mqo=r(O8e," (Nystromformer model)"),O8e.forEach(t),fqo=i(P),YF=n(P,"LI",{});var V8e=s(YF);Wce=n(V8e,"STRONG",{});var elt=s(Wce);gqo=r(elt,"qdqbert"),elt.forEach(t),hqo=r(V8e," \u2014 "),kD=n(V8e,"A",{href:!0});var olt=s(kD);uqo=r(olt,"QDQBertForQuestionAnswering"),olt.forEach(t),pqo=r(V8e," (QDQBert model)"),V8e.forEach(t),_qo=i(P),KF=n(P,"LI",{});var X8e=s(KF);Hce=n(X8e,"STRONG",{});var rlt=s(Hce);bqo=r(rlt,"reformer"),rlt.forEach(t),vqo=r(X8e," \u2014 "),SD=n(X8e,"A",{href:!0});var tlt=s(SD);Fqo=r(tlt,"ReformerForQuestionAnswering"),tlt.forEach(t),Tqo=r(X8e," (Reformer model)"),X8e.forEach(t),Mqo=i(P),ZF=n(P,"LI",{});var z8e=s(ZF);Uce=n(z8e,"STRONG",{});var alt=s(Uce);Eqo=r(alt,"rembert"),alt.forEach(t),Cqo=r(z8e," \u2014 "),RD=n(z8e,"A",{href:!0});var nlt=s(RD);wqo=r(nlt,"RemBertForQuestionAnswering"),nlt.forEach(t),Aqo=r(z8e," (RemBERT model)"),z8e.forEach(t),yqo=i(P),e1=n(P,"LI",{});var Q8e=s(e1);Jce=n(Q8e,"STRONG",{});var slt=s(Jce);Lqo=r(slt,"roberta"),slt.forEach(t),xqo=r(Q8e," \u2014 "),BD=n(Q8e,"A",{href:!0});var llt=s(BD);kqo=r(llt,"RobertaForQuestionAnswering"),llt.forEach(t),Sqo=r(Q8e," (RoBERTa model)"),Q8e.forEach(t),Rqo=i(P),o1=n(P,"LI",{});var W8e=s(o1);Yce=n(W8e,"STRONG",{});var ilt=s(Yce);Bqo=r(ilt,"roformer"),ilt.forEach(t),Pqo=r(W8e," \u2014 "),PD=n(W8e,"A",{href:!0});var dlt=s(PD);$qo=r(dlt,"RoFormerForQuestionAnswering"),dlt.forEach(t),Iqo=r(W8e," (RoFormer model)"),W8e.forEach(t),qqo=i(P),r1=n(P,"LI",{});var H8e=s(r1);Kce=n(H8e,"STRONG",{});var clt=s(Kce);Nqo=r(clt,"splinter"),clt.forEach(t),jqo=r(H8e," \u2014 "),$D=n(H8e,"A",{href:!0});var mlt=s($D);Dqo=r(mlt,"SplinterForQuestionAnswering"),mlt.forEach(t),Gqo=r(H8e," (Splinter model)"),H8e.forEach(t),Oqo=i(P),t1=n(P,"LI",{});var U8e=s(t1);Zce=n(U8e,"STRONG",{});var flt=s(Zce);Vqo=r(flt,"squeezebert"),flt.forEach(t),Xqo=r(U8e," \u2014 "),ID=n(U8e,"A",{href:!0});var glt=s(ID);zqo=r(glt,"SqueezeBertForQuestionAnswering"),glt.forEach(t),Qqo=r(U8e," (SqueezeBERT model)"),U8e.forEach(t),Wqo=i(P),a1=n(P,"LI",{});var J8e=s(a1);eme=n(J8e,"STRONG",{});var hlt=s(eme);Hqo=r(hlt,"xlm"),hlt.forEach(t),Uqo=r(J8e," \u2014 "),qD=n(J8e,"A",{href:!0});var ult=s(qD);Jqo=r(ult,"XLMForQuestionAnsweringSimple"),ult.forEach(t),Yqo=r(J8e," (XLM model)"),J8e.forEach(t),Kqo=i(P),n1=n(P,"LI",{});var Y8e=s(n1);ome=n(Y8e,"STRONG",{});var plt=s(ome);Zqo=r(plt,"xlm-roberta"),plt.forEach(t),eNo=r(Y8e," \u2014 "),ND=n(Y8e,"A",{href:!0});var _lt=s(ND);oNo=r(_lt,"XLMRobertaForQuestionAnswering"),_lt.forEach(t),rNo=r(Y8e," (XLM-RoBERTa model)"),Y8e.forEach(t),tNo=i(P),s1=n(P,"LI",{});var K8e=s(s1);rme=n(K8e,"STRONG",{});var blt=s(rme);aNo=r(blt,"xlm-roberta-xl"),blt.forEach(t),nNo=r(K8e," \u2014 "),jD=n(K8e,"A",{href:!0});var vlt=s(jD);sNo=r(vlt,"XLMRobertaXLForQuestionAnswering"),vlt.forEach(t),lNo=r(K8e," (XLM-RoBERTa-XL model)"),K8e.forEach(t),iNo=i(P),l1=n(P,"LI",{});var Z8e=s(l1);tme=n(Z8e,"STRONG",{});var Flt=s(tme);dNo=r(Flt,"xlnet"),Flt.forEach(t),cNo=r(Z8e," \u2014 "),DD=n(Z8e,"A",{href:!0});var Tlt=s(DD);mNo=r(Tlt,"XLNetForQuestionAnsweringSimple"),Tlt.forEach(t),fNo=r(Z8e," (XLNet model)"),Z8e.forEach(t),gNo=i(P),i1=n(P,"LI",{});var eLe=s(i1);ame=n(eLe,"STRONG",{});var Mlt=s(ame);hNo=r(Mlt,"yoso"),Mlt.forEach(t),uNo=r(eLe," \u2014 "),GD=n(eLe,"A",{href:!0});var Elt=s(GD);pNo=r(Elt,"YosoForQuestionAnswering"),Elt.forEach(t),_No=r(eLe," (YOSO model)"),eLe.forEach(t),P.forEach(t),bNo=i(Ut),d1=n(Ut,"P",{});var oLe=s(d1);vNo=r(oLe,"The model is set in evaluation mode by default using "),nme=n(oLe,"CODE",{});var Clt=s(nme);FNo=r(Clt,"model.eval()"),Clt.forEach(t),TNo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(oLe,"CODE",{});var wlt=s(sme);MNo=r(wlt,"model.train()"),wlt.forEach(t),oLe.forEach(t),ENo=i(Ut),lme=n(Ut,"P",{});var Alt=s(lme);CNo=r(Alt,"Examples:"),Alt.forEach(t),wNo=i(Ut),f(CA.$$.fragment,Ut),Ut.forEach(t),hl.forEach(t),pBe=i(c),xd=n(c,"H2",{class:!0});var w$e=s(xd);c1=n(w$e,"A",{id:!0,class:!0,href:!0});var ylt=s(c1);ime=n(ylt,"SPAN",{});var Llt=s(ime);f(wA.$$.fragment,Llt),Llt.forEach(t),ylt.forEach(t),ANo=i(w$e),dme=n(w$e,"SPAN",{});var xlt=s(dme);yNo=r(xlt,"AutoModelForTableQuestionAnswering"),xlt.forEach(t),w$e.forEach(t),_Be=i(c),sr=n(c,"DIV",{class:!0});var pl=s(sr);f(AA.$$.fragment,pl),LNo=i(pl),kd=n(pl,"P",{});var QU=s(kd);xNo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=n(QU,"A",{href:!0});var klt=s(OD);kNo=r(klt,"from_pretrained()"),klt.forEach(t),SNo=r(QU," class method or the "),VD=n(QU,"A",{href:!0});var Slt=s(VD);RNo=r(Slt,"from_config()"),Slt.forEach(t),BNo=r(QU,` class
method.`),QU.forEach(t),PNo=i(pl),yA=n(pl,"P",{});var A$e=s(yA);$No=r(A$e,"This class cannot be instantiated directly using "),cme=n(A$e,"CODE",{});var Rlt=s(cme);INo=r(Rlt,"__init__()"),Rlt.forEach(t),qNo=r(A$e," (throws an error)."),A$e.forEach(t),NNo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);f(LA.$$.fragment,_l),jNo=i(_l),mme=n(_l,"P",{});var Blt=s(mme);DNo=r(Blt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Blt.forEach(t),GNo=i(_l),Sd=n(_l,"P",{});var WU=s(Sd);ONo=r(WU,`Note:
Loading a model from its configuration file does `),fme=n(WU,"STRONG",{});var Plt=s(fme);VNo=r(Plt,"not"),Plt.forEach(t),XNo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(WU,"A",{href:!0});var $lt=s(XD);zNo=r($lt,"from_pretrained()"),$lt.forEach(t),QNo=r(WU," to load the model weights."),WU.forEach(t),WNo=i(_l),gme=n(_l,"P",{});var Ilt=s(gme);HNo=r(Ilt,"Examples:"),Ilt.forEach(t),UNo=i(_l),f(xA.$$.fragment,_l),_l.forEach(t),JNo=i(pl),We=n(pl,"DIV",{class:!0});var Jt=s(We);f(kA.$$.fragment,Jt),YNo=i(Jt),hme=n(Jt,"P",{});var qlt=s(hme);KNo=r(qlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qlt.forEach(t),ZNo=i(Jt),en=n(Jt,"P",{});var OC=s(en);ejo=r(OC,"The model class to instantiate is selected based on the "),ume=n(OC,"CODE",{});var Nlt=s(ume);ojo=r(Nlt,"model_type"),Nlt.forEach(t),rjo=r(OC,` property of the config object (either
passed as an argument or loaded from `),pme=n(OC,"CODE",{});var jlt=s(pme);tjo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),ajo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(OC,"CODE",{});var Dlt=s(_me);njo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),sjo=r(OC,":"),OC.forEach(t),ljo=i(Jt),bme=n(Jt,"UL",{});var Glt=s(bme);m1=n(Glt,"LI",{});var rLe=s(m1);vme=n(rLe,"STRONG",{});var Olt=s(vme);ijo=r(Olt,"tapas"),Olt.forEach(t),djo=r(rLe," \u2014 "),zD=n(rLe,"A",{href:!0});var Vlt=s(zD);cjo=r(Vlt,"TapasForQuestionAnswering"),Vlt.forEach(t),mjo=r(rLe," (TAPAS model)"),rLe.forEach(t),Glt.forEach(t),fjo=i(Jt),f1=n(Jt,"P",{});var tLe=s(f1);gjo=r(tLe,"The model is set in evaluation mode by default using "),Fme=n(tLe,"CODE",{});var Xlt=s(Fme);hjo=r(Xlt,"model.eval()"),Xlt.forEach(t),ujo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(tLe,"CODE",{});var zlt=s(Tme);pjo=r(zlt,"model.train()"),zlt.forEach(t),tLe.forEach(t),_jo=i(Jt),Mme=n(Jt,"P",{});var Qlt=s(Mme);bjo=r(Qlt,"Examples:"),Qlt.forEach(t),vjo=i(Jt),f(SA.$$.fragment,Jt),Jt.forEach(t),pl.forEach(t),bBe=i(c),Rd=n(c,"H2",{class:!0});var y$e=s(Rd);g1=n(y$e,"A",{id:!0,class:!0,href:!0});var Wlt=s(g1);Eme=n(Wlt,"SPAN",{});var Hlt=s(Eme);f(RA.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),Fjo=i(y$e),Cme=n(y$e,"SPAN",{});var Ult=s(Cme);Tjo=r(Ult,"AutoModelForImageClassification"),Ult.forEach(t),y$e.forEach(t),vBe=i(c),lr=n(c,"DIV",{class:!0});var bl=s(lr);f(BA.$$.fragment,bl),Mjo=i(bl),Bd=n(bl,"P",{});var HU=s(Bd);Ejo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=n(HU,"A",{href:!0});var Jlt=s(QD);Cjo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),wjo=r(HU," class method or the "),WD=n(HU,"A",{href:!0});var Ylt=s(WD);Ajo=r(Ylt,"from_config()"),Ylt.forEach(t),yjo=r(HU,` class
method.`),HU.forEach(t),Ljo=i(bl),PA=n(bl,"P",{});var L$e=s(PA);xjo=r(L$e,"This class cannot be instantiated directly using "),wme=n(L$e,"CODE",{});var Klt=s(wme);kjo=r(Klt,"__init__()"),Klt.forEach(t),Sjo=r(L$e," (throws an error)."),L$e.forEach(t),Rjo=i(bl),ot=n(bl,"DIV",{class:!0});var vl=s(ot);f($A.$$.fragment,vl),Bjo=i(vl),Ame=n(vl,"P",{});var Zlt=s(Ame);Pjo=r(Zlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Zlt.forEach(t),$jo=i(vl),Pd=n(vl,"P",{});var UU=s(Pd);Ijo=r(UU,`Note:
Loading a model from its configuration file does `),yme=n(UU,"STRONG",{});var eit=s(yme);qjo=r(eit,"not"),eit.forEach(t),Njo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(UU,"A",{href:!0});var oit=s(HD);jjo=r(oit,"from_pretrained()"),oit.forEach(t),Djo=r(UU," to load the model weights."),UU.forEach(t),Gjo=i(vl),Lme=n(vl,"P",{});var rit=s(Lme);Ojo=r(rit,"Examples:"),rit.forEach(t),Vjo=i(vl),f(IA.$$.fragment,vl),vl.forEach(t),Xjo=i(bl),He=n(bl,"DIV",{class:!0});var Yt=s(He);f(qA.$$.fragment,Yt),zjo=i(Yt),xme=n(Yt,"P",{});var tit=s(xme);Qjo=r(tit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tit.forEach(t),Wjo=i(Yt),on=n(Yt,"P",{});var VC=s(on);Hjo=r(VC,"The model class to instantiate is selected based on the "),kme=n(VC,"CODE",{});var ait=s(kme);Ujo=r(ait,"model_type"),ait.forEach(t),Jjo=r(VC,` property of the config object (either
passed as an argument or loaded from `),Sme=n(VC,"CODE",{});var nit=s(Sme);Yjo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),Kjo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rme=n(VC,"CODE",{});var sit=s(Rme);Zjo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),eDo=r(VC,":"),VC.forEach(t),oDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);h1=n(ge,"LI",{});var aLe=s(h1);Bme=n(aLe,"STRONG",{});var lit=s(Bme);rDo=r(lit,"beit"),lit.forEach(t),tDo=r(aLe," \u2014 "),UD=n(aLe,"A",{href:!0});var iit=s(UD);aDo=r(iit,"BeitForImageClassification"),iit.forEach(t),nDo=r(aLe," (BEiT model)"),aLe.forEach(t),sDo=i(ge),u1=n(ge,"LI",{});var nLe=s(u1);Pme=n(nLe,"STRONG",{});var dit=s(Pme);lDo=r(dit,"convnext"),dit.forEach(t),iDo=r(nLe," \u2014 "),JD=n(nLe,"A",{href:!0});var cit=s(JD);dDo=r(cit,"ConvNextForImageClassification"),cit.forEach(t),cDo=r(nLe," (ConvNext model)"),nLe.forEach(t),mDo=i(ge),p1=n(ge,"LI",{});var sLe=s(p1);$me=n(sLe,"STRONG",{});var mit=s($me);fDo=r(mit,"data2vec-vision"),mit.forEach(t),gDo=r(sLe," \u2014 "),YD=n(sLe,"A",{href:!0});var fit=s(YD);hDo=r(fit,"Data2VecVisionForImageClassification"),fit.forEach(t),uDo=r(sLe," (Data2VecVision model)"),sLe.forEach(t),pDo=i(ge),Vs=n(ge,"LI",{});var T9=s(Vs);Ime=n(T9,"STRONG",{});var git=s(Ime);_Do=r(git,"deit"),git.forEach(t),bDo=r(T9," \u2014 "),KD=n(T9,"A",{href:!0});var hit=s(KD);vDo=r(hit,"DeiTForImageClassification"),hit.forEach(t),FDo=r(T9," or "),ZD=n(T9,"A",{href:!0});var uit=s(ZD);TDo=r(uit,"DeiTForImageClassificationWithTeacher"),uit.forEach(t),MDo=r(T9," (DeiT model)"),T9.forEach(t),EDo=i(ge),_1=n(ge,"LI",{});var lLe=s(_1);qme=n(lLe,"STRONG",{});var pit=s(qme);CDo=r(pit,"imagegpt"),pit.forEach(t),wDo=r(lLe," \u2014 "),eG=n(lLe,"A",{href:!0});var _it=s(eG);ADo=r(_it,"ImageGPTForImageClassification"),_it.forEach(t),yDo=r(lLe," (ImageGPT model)"),lLe.forEach(t),LDo=i(ge),fa=n(ge,"LI",{});var Im=s(fa);Nme=n(Im,"STRONG",{});var bit=s(Nme);xDo=r(bit,"perceiver"),bit.forEach(t),kDo=r(Im," \u2014 "),oG=n(Im,"A",{href:!0});var vit=s(oG);SDo=r(vit,"PerceiverForImageClassificationLearned"),vit.forEach(t),RDo=r(Im," or "),rG=n(Im,"A",{href:!0});var Fit=s(rG);BDo=r(Fit,"PerceiverForImageClassificationFourier"),Fit.forEach(t),PDo=r(Im," or "),tG=n(Im,"A",{href:!0});var Tit=s(tG);$Do=r(Tit,"PerceiverForImageClassificationConvProcessing"),Tit.forEach(t),IDo=r(Im," (Perceiver model)"),Im.forEach(t),qDo=i(ge),b1=n(ge,"LI",{});var iLe=s(b1);jme=n(iLe,"STRONG",{});var Mit=s(jme);NDo=r(Mit,"poolformer"),Mit.forEach(t),jDo=r(iLe," \u2014 "),aG=n(iLe,"A",{href:!0});var Eit=s(aG);DDo=r(Eit,"PoolFormerForImageClassification"),Eit.forEach(t),GDo=r(iLe," (PoolFormer model)"),iLe.forEach(t),ODo=i(ge),v1=n(ge,"LI",{});var dLe=s(v1);Dme=n(dLe,"STRONG",{});var Cit=s(Dme);VDo=r(Cit,"regnet"),Cit.forEach(t),XDo=r(dLe," \u2014 "),nG=n(dLe,"A",{href:!0});var wit=s(nG);zDo=r(wit,"RegNetForImageClassification"),wit.forEach(t),QDo=r(dLe," (RegNet model)"),dLe.forEach(t),WDo=i(ge),F1=n(ge,"LI",{});var cLe=s(F1);Gme=n(cLe,"STRONG",{});var Ait=s(Gme);HDo=r(Ait,"resnet"),Ait.forEach(t),UDo=r(cLe," \u2014 "),sG=n(cLe,"A",{href:!0});var yit=s(sG);JDo=r(yit,"ResNetForImageClassification"),yit.forEach(t),YDo=r(cLe," (ResNet model)"),cLe.forEach(t),KDo=i(ge),T1=n(ge,"LI",{});var mLe=s(T1);Ome=n(mLe,"STRONG",{});var Lit=s(Ome);ZDo=r(Lit,"segformer"),Lit.forEach(t),eGo=r(mLe," \u2014 "),lG=n(mLe,"A",{href:!0});var xit=s(lG);oGo=r(xit,"SegformerForImageClassification"),xit.forEach(t),rGo=r(mLe," (SegFormer model)"),mLe.forEach(t),tGo=i(ge),M1=n(ge,"LI",{});var fLe=s(M1);Vme=n(fLe,"STRONG",{});var kit=s(Vme);aGo=r(kit,"swin"),kit.forEach(t),nGo=r(fLe," \u2014 "),iG=n(fLe,"A",{href:!0});var Sit=s(iG);sGo=r(Sit,"SwinForImageClassification"),Sit.forEach(t),lGo=r(fLe," (Swin model)"),fLe.forEach(t),iGo=i(ge),E1=n(ge,"LI",{});var gLe=s(E1);Xme=n(gLe,"STRONG",{});var Rit=s(Xme);dGo=r(Rit,"van"),Rit.forEach(t),cGo=r(gLe," \u2014 "),dG=n(gLe,"A",{href:!0});var Bit=s(dG);mGo=r(Bit,"VanForImageClassification"),Bit.forEach(t),fGo=r(gLe," (VAN model)"),gLe.forEach(t),gGo=i(ge),C1=n(ge,"LI",{});var hLe=s(C1);zme=n(hLe,"STRONG",{});var Pit=s(zme);hGo=r(Pit,"vit"),Pit.forEach(t),uGo=r(hLe," \u2014 "),cG=n(hLe,"A",{href:!0});var $it=s(cG);pGo=r($it,"ViTForImageClassification"),$it.forEach(t),_Go=r(hLe," (ViT model)"),hLe.forEach(t),ge.forEach(t),bGo=i(Yt),w1=n(Yt,"P",{});var uLe=s(w1);vGo=r(uLe,"The model is set in evaluation mode by default using "),Qme=n(uLe,"CODE",{});var Iit=s(Qme);FGo=r(Iit,"model.eval()"),Iit.forEach(t),TGo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(uLe,"CODE",{});var qit=s(Wme);MGo=r(qit,"model.train()"),qit.forEach(t),uLe.forEach(t),EGo=i(Yt),Hme=n(Yt,"P",{});var Nit=s(Hme);CGo=r(Nit,"Examples:"),Nit.forEach(t),wGo=i(Yt),f(NA.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),FBe=i(c),$d=n(c,"H2",{class:!0});var x$e=s($d);A1=n(x$e,"A",{id:!0,class:!0,href:!0});var jit=s(A1);Ume=n(jit,"SPAN",{});var Dit=s(Ume);f(jA.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),AGo=i(x$e),Jme=n(x$e,"SPAN",{});var Git=s(Jme);yGo=r(Git,"AutoModelForVision2Seq"),Git.forEach(t),x$e.forEach(t),TBe=i(c),ir=n(c,"DIV",{class:!0});var Fl=s(ir);f(DA.$$.fragment,Fl),LGo=i(Fl),Id=n(Fl,"P",{});var JU=s(Id);xGo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mG=n(JU,"A",{href:!0});var Oit=s(mG);kGo=r(Oit,"from_pretrained()"),Oit.forEach(t),SGo=r(JU," class method or the "),fG=n(JU,"A",{href:!0});var Vit=s(fG);RGo=r(Vit,"from_config()"),Vit.forEach(t),BGo=r(JU,` class
method.`),JU.forEach(t),PGo=i(Fl),GA=n(Fl,"P",{});var k$e=s(GA);$Go=r(k$e,"This class cannot be instantiated directly using "),Yme=n(k$e,"CODE",{});var Xit=s(Yme);IGo=r(Xit,"__init__()"),Xit.forEach(t),qGo=r(k$e," (throws an error)."),k$e.forEach(t),NGo=i(Fl),rt=n(Fl,"DIV",{class:!0});var Tl=s(rt);f(OA.$$.fragment,Tl),jGo=i(Tl),Kme=n(Tl,"P",{});var zit=s(Kme);DGo=r(zit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zit.forEach(t),GGo=i(Tl),qd=n(Tl,"P",{});var YU=s(qd);OGo=r(YU,`Note:
Loading a model from its configuration file does `),Zme=n(YU,"STRONG",{});var Qit=s(Zme);VGo=r(Qit,"not"),Qit.forEach(t),XGo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(YU,"A",{href:!0});var Wit=s(gG);zGo=r(Wit,"from_pretrained()"),Wit.forEach(t),QGo=r(YU," to load the model weights."),YU.forEach(t),WGo=i(Tl),efe=n(Tl,"P",{});var Hit=s(efe);HGo=r(Hit,"Examples:"),Hit.forEach(t),UGo=i(Tl),f(VA.$$.fragment,Tl),Tl.forEach(t),JGo=i(Fl),Ue=n(Fl,"DIV",{class:!0});var Kt=s(Ue);f(XA.$$.fragment,Kt),YGo=i(Kt),ofe=n(Kt,"P",{});var Uit=s(ofe);KGo=r(Uit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uit.forEach(t),ZGo=i(Kt),rn=n(Kt,"P",{});var XC=s(rn);eOo=r(XC,"The model class to instantiate is selected based on the "),rfe=n(XC,"CODE",{});var Jit=s(rfe);oOo=r(Jit,"model_type"),Jit.forEach(t),rOo=r(XC,` property of the config object (either
passed as an argument or loaded from `),tfe=n(XC,"CODE",{});var Yit=s(tfe);tOo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),aOo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(XC,"CODE",{});var Kit=s(afe);nOo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),sOo=r(XC,":"),XC.forEach(t),lOo=i(Kt),nfe=n(Kt,"UL",{});var Zit=s(nfe);y1=n(Zit,"LI",{});var pLe=s(y1);sfe=n(pLe,"STRONG",{});var edt=s(sfe);iOo=r(edt,"vision-encoder-decoder"),edt.forEach(t),dOo=r(pLe," \u2014 "),hG=n(pLe,"A",{href:!0});var odt=s(hG);cOo=r(odt,"VisionEncoderDecoderModel"),odt.forEach(t),mOo=r(pLe," (Vision Encoder decoder model)"),pLe.forEach(t),Zit.forEach(t),fOo=i(Kt),L1=n(Kt,"P",{});var _Le=s(L1);gOo=r(_Le,"The model is set in evaluation mode by default using "),lfe=n(_Le,"CODE",{});var rdt=s(lfe);hOo=r(rdt,"model.eval()"),rdt.forEach(t),uOo=r(_Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(_Le,"CODE",{});var tdt=s(ife);pOo=r(tdt,"model.train()"),tdt.forEach(t),_Le.forEach(t),_Oo=i(Kt),dfe=n(Kt,"P",{});var adt=s(dfe);bOo=r(adt,"Examples:"),adt.forEach(t),vOo=i(Kt),f(zA.$$.fragment,Kt),Kt.forEach(t),Fl.forEach(t),MBe=i(c),Nd=n(c,"H2",{class:!0});var S$e=s(Nd);x1=n(S$e,"A",{id:!0,class:!0,href:!0});var ndt=s(x1);cfe=n(ndt,"SPAN",{});var sdt=s(cfe);f(QA.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),FOo=i(S$e),mfe=n(S$e,"SPAN",{});var ldt=s(mfe);TOo=r(ldt,"AutoModelForAudioClassification"),ldt.forEach(t),S$e.forEach(t),EBe=i(c),dr=n(c,"DIV",{class:!0});var Ml=s(dr);f(WA.$$.fragment,Ml),MOo=i(Ml),jd=n(Ml,"P",{});var KU=s(jd);EOo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),uG=n(KU,"A",{href:!0});var idt=s(uG);COo=r(idt,"from_pretrained()"),idt.forEach(t),wOo=r(KU," class method or the "),pG=n(KU,"A",{href:!0});var ddt=s(pG);AOo=r(ddt,"from_config()"),ddt.forEach(t),yOo=r(KU,` class
method.`),KU.forEach(t),LOo=i(Ml),HA=n(Ml,"P",{});var R$e=s(HA);xOo=r(R$e,"This class cannot be instantiated directly using "),ffe=n(R$e,"CODE",{});var cdt=s(ffe);kOo=r(cdt,"__init__()"),cdt.forEach(t),SOo=r(R$e," (throws an error)."),R$e.forEach(t),ROo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);f(UA.$$.fragment,El),BOo=i(El),gfe=n(El,"P",{});var mdt=s(gfe);POo=r(mdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mdt.forEach(t),$Oo=i(El),Dd=n(El,"P",{});var ZU=s(Dd);IOo=r(ZU,`Note:
Loading a model from its configuration file does `),hfe=n(ZU,"STRONG",{});var fdt=s(hfe);qOo=r(fdt,"not"),fdt.forEach(t),NOo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(ZU,"A",{href:!0});var gdt=s(_G);jOo=r(gdt,"from_pretrained()"),gdt.forEach(t),DOo=r(ZU," to load the model weights."),ZU.forEach(t),GOo=i(El),ufe=n(El,"P",{});var hdt=s(ufe);OOo=r(hdt,"Examples:"),hdt.forEach(t),VOo=i(El),f(JA.$$.fragment,El),El.forEach(t),XOo=i(Ml),Je=n(Ml,"DIV",{class:!0});var Zt=s(Je);f(YA.$$.fragment,Zt),zOo=i(Zt),pfe=n(Zt,"P",{});var udt=s(pfe);QOo=r(udt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),udt.forEach(t),WOo=i(Zt),tn=n(Zt,"P",{});var zC=s(tn);HOo=r(zC,"The model class to instantiate is selected based on the "),_fe=n(zC,"CODE",{});var pdt=s(_fe);UOo=r(pdt,"model_type"),pdt.forEach(t),JOo=r(zC,` property of the config object (either
passed as an argument or loaded from `),bfe=n(zC,"CODE",{});var _dt=s(bfe);YOo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),KOo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(zC,"CODE",{});var bdt=s(vfe);ZOo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),eVo=r(zC,":"),zC.forEach(t),oVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);k1=n(Do,"LI",{});var bLe=s(k1);Ffe=n(bLe,"STRONG",{});var vdt=s(Ffe);rVo=r(vdt,"data2vec-audio"),vdt.forEach(t),tVo=r(bLe," \u2014 "),bG=n(bLe,"A",{href:!0});var Fdt=s(bG);aVo=r(Fdt,"Data2VecAudioForSequenceClassification"),Fdt.forEach(t),nVo=r(bLe," (Data2VecAudio model)"),bLe.forEach(t),sVo=i(Do),S1=n(Do,"LI",{});var vLe=s(S1);Tfe=n(vLe,"STRONG",{});var Tdt=s(Tfe);lVo=r(Tdt,"hubert"),Tdt.forEach(t),iVo=r(vLe," \u2014 "),vG=n(vLe,"A",{href:!0});var Mdt=s(vG);dVo=r(Mdt,"HubertForSequenceClassification"),Mdt.forEach(t),cVo=r(vLe," (Hubert model)"),vLe.forEach(t),mVo=i(Do),R1=n(Do,"LI",{});var FLe=s(R1);Mfe=n(FLe,"STRONG",{});var Edt=s(Mfe);fVo=r(Edt,"sew"),Edt.forEach(t),gVo=r(FLe," \u2014 "),FG=n(FLe,"A",{href:!0});var Cdt=s(FG);hVo=r(Cdt,"SEWForSequenceClassification"),Cdt.forEach(t),uVo=r(FLe," (SEW model)"),FLe.forEach(t),pVo=i(Do),B1=n(Do,"LI",{});var TLe=s(B1);Efe=n(TLe,"STRONG",{});var wdt=s(Efe);_Vo=r(wdt,"sew-d"),wdt.forEach(t),bVo=r(TLe," \u2014 "),TG=n(TLe,"A",{href:!0});var Adt=s(TG);vVo=r(Adt,"SEWDForSequenceClassification"),Adt.forEach(t),FVo=r(TLe," (SEW-D model)"),TLe.forEach(t),TVo=i(Do),P1=n(Do,"LI",{});var MLe=s(P1);Cfe=n(MLe,"STRONG",{});var ydt=s(Cfe);MVo=r(ydt,"unispeech"),ydt.forEach(t),EVo=r(MLe," \u2014 "),MG=n(MLe,"A",{href:!0});var Ldt=s(MG);CVo=r(Ldt,"UniSpeechForSequenceClassification"),Ldt.forEach(t),wVo=r(MLe," (UniSpeech model)"),MLe.forEach(t),AVo=i(Do),$1=n(Do,"LI",{});var ELe=s($1);wfe=n(ELe,"STRONG",{});var xdt=s(wfe);yVo=r(xdt,"unispeech-sat"),xdt.forEach(t),LVo=r(ELe," \u2014 "),EG=n(ELe,"A",{href:!0});var kdt=s(EG);xVo=r(kdt,"UniSpeechSatForSequenceClassification"),kdt.forEach(t),kVo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),SVo=i(Do),I1=n(Do,"LI",{});var CLe=s(I1);Afe=n(CLe,"STRONG",{});var Sdt=s(Afe);RVo=r(Sdt,"wav2vec2"),Sdt.forEach(t),BVo=r(CLe," \u2014 "),CG=n(CLe,"A",{href:!0});var Rdt=s(CG);PVo=r(Rdt,"Wav2Vec2ForSequenceClassification"),Rdt.forEach(t),$Vo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),IVo=i(Do),q1=n(Do,"LI",{});var wLe=s(q1);yfe=n(wLe,"STRONG",{});var Bdt=s(yfe);qVo=r(Bdt,"wavlm"),Bdt.forEach(t),NVo=r(wLe," \u2014 "),wG=n(wLe,"A",{href:!0});var Pdt=s(wG);jVo=r(Pdt,"WavLMForSequenceClassification"),Pdt.forEach(t),DVo=r(wLe," (WavLM model)"),wLe.forEach(t),Do.forEach(t),GVo=i(Zt),N1=n(Zt,"P",{});var ALe=s(N1);OVo=r(ALe,"The model is set in evaluation mode by default using "),Lfe=n(ALe,"CODE",{});var $dt=s(Lfe);VVo=r($dt,"model.eval()"),$dt.forEach(t),XVo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(ALe,"CODE",{});var Idt=s(xfe);zVo=r(Idt,"model.train()"),Idt.forEach(t),ALe.forEach(t),QVo=i(Zt),kfe=n(Zt,"P",{});var qdt=s(kfe);WVo=r(qdt,"Examples:"),qdt.forEach(t),HVo=i(Zt),f(KA.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),CBe=i(c),Gd=n(c,"H2",{class:!0});var B$e=s(Gd);j1=n(B$e,"A",{id:!0,class:!0,href:!0});var Ndt=s(j1);Sfe=n(Ndt,"SPAN",{});var jdt=s(Sfe);f(ZA.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),UVo=i(B$e),Rfe=n(B$e,"SPAN",{});var Ddt=s(Rfe);JVo=r(Ddt,"AutoModelForAudioFrameClassification"),Ddt.forEach(t),B$e.forEach(t),wBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);f(e0.$$.fragment,Cl),YVo=i(Cl),Od=n(Cl,"P",{});var eJ=s(Od);KVo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=n(eJ,"A",{href:!0});var Gdt=s(AG);ZVo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),eXo=r(eJ," class method or the "),yG=n(eJ,"A",{href:!0});var Odt=s(yG);oXo=r(Odt,"from_config()"),Odt.forEach(t),rXo=r(eJ,` class
method.`),eJ.forEach(t),tXo=i(Cl),o0=n(Cl,"P",{});var P$e=s(o0);aXo=r(P$e,"This class cannot be instantiated directly using "),Bfe=n(P$e,"CODE",{});var Vdt=s(Bfe);nXo=r(Vdt,"__init__()"),Vdt.forEach(t),sXo=r(P$e," (throws an error)."),P$e.forEach(t),lXo=i(Cl),at=n(Cl,"DIV",{class:!0});var wl=s(at);f(r0.$$.fragment,wl),iXo=i(wl),Pfe=n(wl,"P",{});var Xdt=s(Pfe);dXo=r(Xdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xdt.forEach(t),cXo=i(wl),Vd=n(wl,"P",{});var oJ=s(Vd);mXo=r(oJ,`Note:
Loading a model from its configuration file does `),$fe=n(oJ,"STRONG",{});var zdt=s($fe);fXo=r(zdt,"not"),zdt.forEach(t),gXo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(oJ,"A",{href:!0});var Qdt=s(LG);hXo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),uXo=r(oJ," to load the model weights."),oJ.forEach(t),pXo=i(wl),Ife=n(wl,"P",{});var Wdt=s(Ife);_Xo=r(Wdt,"Examples:"),Wdt.forEach(t),bXo=i(wl),f(t0.$$.fragment,wl),wl.forEach(t),vXo=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ea=s(Ye);f(a0.$$.fragment,ea),FXo=i(ea),qfe=n(ea,"P",{});var Hdt=s(qfe);TXo=r(Hdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Hdt.forEach(t),MXo=i(ea),an=n(ea,"P",{});var QC=s(an);EXo=r(QC,"The model class to instantiate is selected based on the "),Nfe=n(QC,"CODE",{});var Udt=s(Nfe);CXo=r(Udt,"model_type"),Udt.forEach(t),wXo=r(QC,` property of the config object (either
passed as an argument or loaded from `),jfe=n(QC,"CODE",{});var Jdt=s(jfe);AXo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),yXo=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(QC,"CODE",{});var Ydt=s(Dfe);LXo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),xXo=r(QC,":"),QC.forEach(t),kXo=i(ea),nn=n(ea,"UL",{});var WC=s(nn);D1=n(WC,"LI",{});var yLe=s(D1);Gfe=n(yLe,"STRONG",{});var Kdt=s(Gfe);SXo=r(Kdt,"data2vec-audio"),Kdt.forEach(t),RXo=r(yLe," \u2014 "),xG=n(yLe,"A",{href:!0});var Zdt=s(xG);BXo=r(Zdt,"Data2VecAudioForAudioFrameClassification"),Zdt.forEach(t),PXo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),$Xo=i(WC),G1=n(WC,"LI",{});var LLe=s(G1);Ofe=n(LLe,"STRONG",{});var ect=s(Ofe);IXo=r(ect,"unispeech-sat"),ect.forEach(t),qXo=r(LLe," \u2014 "),kG=n(LLe,"A",{href:!0});var oct=s(kG);NXo=r(oct,"UniSpeechSatForAudioFrameClassification"),oct.forEach(t),jXo=r(LLe," (UniSpeechSat model)"),LLe.forEach(t),DXo=i(WC),O1=n(WC,"LI",{});var xLe=s(O1);Vfe=n(xLe,"STRONG",{});var rct=s(Vfe);GXo=r(rct,"wav2vec2"),rct.forEach(t),OXo=r(xLe," \u2014 "),SG=n(xLe,"A",{href:!0});var tct=s(SG);VXo=r(tct,"Wav2Vec2ForAudioFrameClassification"),tct.forEach(t),XXo=r(xLe," (Wav2Vec2 model)"),xLe.forEach(t),zXo=i(WC),V1=n(WC,"LI",{});var kLe=s(V1);Xfe=n(kLe,"STRONG",{});var act=s(Xfe);QXo=r(act,"wavlm"),act.forEach(t),WXo=r(kLe," \u2014 "),RG=n(kLe,"A",{href:!0});var nct=s(RG);HXo=r(nct,"WavLMForAudioFrameClassification"),nct.forEach(t),UXo=r(kLe," (WavLM model)"),kLe.forEach(t),WC.forEach(t),JXo=i(ea),X1=n(ea,"P",{});var SLe=s(X1);YXo=r(SLe,"The model is set in evaluation mode by default using "),zfe=n(SLe,"CODE",{});var sct=s(zfe);KXo=r(sct,"model.eval()"),sct.forEach(t),ZXo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qfe=n(SLe,"CODE",{});var lct=s(Qfe);ezo=r(lct,"model.train()"),lct.forEach(t),SLe.forEach(t),ozo=i(ea),Wfe=n(ea,"P",{});var ict=s(Wfe);rzo=r(ict,"Examples:"),ict.forEach(t),tzo=i(ea),f(n0.$$.fragment,ea),ea.forEach(t),Cl.forEach(t),ABe=i(c),Xd=n(c,"H2",{class:!0});var $$e=s(Xd);z1=n($$e,"A",{id:!0,class:!0,href:!0});var dct=s(z1);Hfe=n(dct,"SPAN",{});var cct=s(Hfe);f(s0.$$.fragment,cct),cct.forEach(t),dct.forEach(t),azo=i($$e),Ufe=n($$e,"SPAN",{});var mct=s(Ufe);nzo=r(mct,"AutoModelForCTC"),mct.forEach(t),$$e.forEach(t),yBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);f(l0.$$.fragment,Al),szo=i(Al),zd=n(Al,"P",{});var rJ=s(zd);lzo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=n(rJ,"A",{href:!0});var fct=s(BG);izo=r(fct,"from_pretrained()"),fct.forEach(t),dzo=r(rJ," class method or the "),PG=n(rJ,"A",{href:!0});var gct=s(PG);czo=r(gct,"from_config()"),gct.forEach(t),mzo=r(rJ,` class
method.`),rJ.forEach(t),fzo=i(Al),i0=n(Al,"P",{});var I$e=s(i0);gzo=r(I$e,"This class cannot be instantiated directly using "),Jfe=n(I$e,"CODE",{});var hct=s(Jfe);hzo=r(hct,"__init__()"),hct.forEach(t),uzo=r(I$e," (throws an error)."),I$e.forEach(t),pzo=i(Al),nt=n(Al,"DIV",{class:!0});var yl=s(nt);f(d0.$$.fragment,yl),_zo=i(yl),Yfe=n(yl,"P",{});var uct=s(Yfe);bzo=r(uct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uct.forEach(t),vzo=i(yl),Qd=n(yl,"P",{});var tJ=s(Qd);Fzo=r(tJ,`Note:
Loading a model from its configuration file does `),Kfe=n(tJ,"STRONG",{});var pct=s(Kfe);Tzo=r(pct,"not"),pct.forEach(t),Mzo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(tJ,"A",{href:!0});var _ct=s($G);Ezo=r(_ct,"from_pretrained()"),_ct.forEach(t),Czo=r(tJ," to load the model weights."),tJ.forEach(t),wzo=i(yl),Zfe=n(yl,"P",{});var bct=s(Zfe);Azo=r(bct,"Examples:"),bct.forEach(t),yzo=i(yl),f(c0.$$.fragment,yl),yl.forEach(t),Lzo=i(Al),Ke=n(Al,"DIV",{class:!0});var oa=s(Ke);f(m0.$$.fragment,oa),xzo=i(oa),ege=n(oa,"P",{});var vct=s(ege);kzo=r(vct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vct.forEach(t),Szo=i(oa),sn=n(oa,"P",{});var HC=s(sn);Rzo=r(HC,"The model class to instantiate is selected based on the "),oge=n(HC,"CODE",{});var Fct=s(oge);Bzo=r(Fct,"model_type"),Fct.forEach(t),Pzo=r(HC,` property of the config object (either
passed as an argument or loaded from `),rge=n(HC,"CODE",{});var Tct=s(rge);$zo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),Izo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tge=n(HC,"CODE",{});var Mct=s(tge);qzo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Nzo=r(HC,":"),HC.forEach(t),jzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Q1=n(Go,"LI",{});var RLe=s(Q1);age=n(RLe,"STRONG",{});var Ect=s(age);Dzo=r(Ect,"data2vec-audio"),Ect.forEach(t),Gzo=r(RLe," \u2014 "),IG=n(RLe,"A",{href:!0});var Cct=s(IG);Ozo=r(Cct,"Data2VecAudioForCTC"),Cct.forEach(t),Vzo=r(RLe," (Data2VecAudio model)"),RLe.forEach(t),Xzo=i(Go),W1=n(Go,"LI",{});var BLe=s(W1);nge=n(BLe,"STRONG",{});var wct=s(nge);zzo=r(wct,"hubert"),wct.forEach(t),Qzo=r(BLe," \u2014 "),qG=n(BLe,"A",{href:!0});var Act=s(qG);Wzo=r(Act,"HubertForCTC"),Act.forEach(t),Hzo=r(BLe," (Hubert model)"),BLe.forEach(t),Uzo=i(Go),H1=n(Go,"LI",{});var PLe=s(H1);sge=n(PLe,"STRONG",{});var yct=s(sge);Jzo=r(yct,"sew"),yct.forEach(t),Yzo=r(PLe," \u2014 "),NG=n(PLe,"A",{href:!0});var Lct=s(NG);Kzo=r(Lct,"SEWForCTC"),Lct.forEach(t),Zzo=r(PLe," (SEW model)"),PLe.forEach(t),eQo=i(Go),U1=n(Go,"LI",{});var $Le=s(U1);lge=n($Le,"STRONG",{});var xct=s(lge);oQo=r(xct,"sew-d"),xct.forEach(t),rQo=r($Le," \u2014 "),jG=n($Le,"A",{href:!0});var kct=s(jG);tQo=r(kct,"SEWDForCTC"),kct.forEach(t),aQo=r($Le," (SEW-D model)"),$Le.forEach(t),nQo=i(Go),J1=n(Go,"LI",{});var ILe=s(J1);ige=n(ILe,"STRONG",{});var Sct=s(ige);sQo=r(Sct,"unispeech"),Sct.forEach(t),lQo=r(ILe," \u2014 "),DG=n(ILe,"A",{href:!0});var Rct=s(DG);iQo=r(Rct,"UniSpeechForCTC"),Rct.forEach(t),dQo=r(ILe," (UniSpeech model)"),ILe.forEach(t),cQo=i(Go),Y1=n(Go,"LI",{});var qLe=s(Y1);dge=n(qLe,"STRONG",{});var Bct=s(dge);mQo=r(Bct,"unispeech-sat"),Bct.forEach(t),fQo=r(qLe," \u2014 "),GG=n(qLe,"A",{href:!0});var Pct=s(GG);gQo=r(Pct,"UniSpeechSatForCTC"),Pct.forEach(t),hQo=r(qLe," (UniSpeechSat model)"),qLe.forEach(t),uQo=i(Go),K1=n(Go,"LI",{});var NLe=s(K1);cge=n(NLe,"STRONG",{});var $ct=s(cge);pQo=r($ct,"wav2vec2"),$ct.forEach(t),_Qo=r(NLe," \u2014 "),OG=n(NLe,"A",{href:!0});var Ict=s(OG);bQo=r(Ict,"Wav2Vec2ForCTC"),Ict.forEach(t),vQo=r(NLe," (Wav2Vec2 model)"),NLe.forEach(t),FQo=i(Go),Z1=n(Go,"LI",{});var jLe=s(Z1);mge=n(jLe,"STRONG",{});var qct=s(mge);TQo=r(qct,"wavlm"),qct.forEach(t),MQo=r(jLe," \u2014 "),VG=n(jLe,"A",{href:!0});var Nct=s(VG);EQo=r(Nct,"WavLMForCTC"),Nct.forEach(t),CQo=r(jLe," (WavLM model)"),jLe.forEach(t),Go.forEach(t),wQo=i(oa),eT=n(oa,"P",{});var DLe=s(eT);AQo=r(DLe,"The model is set in evaluation mode by default using "),fge=n(DLe,"CODE",{});var jct=s(fge);yQo=r(jct,"model.eval()"),jct.forEach(t),LQo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=n(DLe,"CODE",{});var Dct=s(gge);xQo=r(Dct,"model.train()"),Dct.forEach(t),DLe.forEach(t),kQo=i(oa),hge=n(oa,"P",{});var Gct=s(hge);SQo=r(Gct,"Examples:"),Gct.forEach(t),RQo=i(oa),f(f0.$$.fragment,oa),oa.forEach(t),Al.forEach(t),LBe=i(c),Wd=n(c,"H2",{class:!0});var q$e=s(Wd);oT=n(q$e,"A",{id:!0,class:!0,href:!0});var Oct=s(oT);uge=n(Oct,"SPAN",{});var Vct=s(uge);f(g0.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),BQo=i(q$e),pge=n(q$e,"SPAN",{});var Xct=s(pge);PQo=r(Xct,"AutoModelForSpeechSeq2Seq"),Xct.forEach(t),q$e.forEach(t),xBe=i(c),fr=n(c,"DIV",{class:!0});var Ll=s(fr);f(h0.$$.fragment,Ll),$Qo=i(Ll),Hd=n(Ll,"P",{});var aJ=s(Hd);IQo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=n(aJ,"A",{href:!0});var zct=s(XG);qQo=r(zct,"from_pretrained()"),zct.forEach(t),NQo=r(aJ," class method or the "),zG=n(aJ,"A",{href:!0});var Qct=s(zG);jQo=r(Qct,"from_config()"),Qct.forEach(t),DQo=r(aJ,` class
method.`),aJ.forEach(t),GQo=i(Ll),u0=n(Ll,"P",{});var N$e=s(u0);OQo=r(N$e,"This class cannot be instantiated directly using "),_ge=n(N$e,"CODE",{});var Wct=s(_ge);VQo=r(Wct,"__init__()"),Wct.forEach(t),XQo=r(N$e," (throws an error)."),N$e.forEach(t),zQo=i(Ll),st=n(Ll,"DIV",{class:!0});var xl=s(st);f(p0.$$.fragment,xl),QQo=i(xl),bge=n(xl,"P",{});var Hct=s(bge);WQo=r(Hct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hct.forEach(t),HQo=i(xl),Ud=n(xl,"P",{});var nJ=s(Ud);UQo=r(nJ,`Note:
Loading a model from its configuration file does `),vge=n(nJ,"STRONG",{});var Uct=s(vge);JQo=r(Uct,"not"),Uct.forEach(t),YQo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(nJ,"A",{href:!0});var Jct=s(QG);KQo=r(Jct,"from_pretrained()"),Jct.forEach(t),ZQo=r(nJ," to load the model weights."),nJ.forEach(t),eWo=i(xl),Fge=n(xl,"P",{});var Yct=s(Fge);oWo=r(Yct,"Examples:"),Yct.forEach(t),rWo=i(xl),f(_0.$$.fragment,xl),xl.forEach(t),tWo=i(Ll),Ze=n(Ll,"DIV",{class:!0});var ra=s(Ze);f(b0.$$.fragment,ra),aWo=i(ra),Tge=n(ra,"P",{});var Kct=s(Tge);nWo=r(Kct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kct.forEach(t),sWo=i(ra),ln=n(ra,"P",{});var UC=s(ln);lWo=r(UC,"The model class to instantiate is selected based on the "),Mge=n(UC,"CODE",{});var Zct=s(Mge);iWo=r(Zct,"model_type"),Zct.forEach(t),dWo=r(UC,` property of the config object (either
passed as an argument or loaded from `),Ege=n(UC,"CODE",{});var emt=s(Ege);cWo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),mWo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(UC,"CODE",{});var omt=s(Cge);fWo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),gWo=r(UC,":"),UC.forEach(t),hWo=i(ra),v0=n(ra,"UL",{});var j$e=s(v0);rT=n(j$e,"LI",{});var GLe=s(rT);wge=n(GLe,"STRONG",{});var rmt=s(wge);uWo=r(rmt,"speech-encoder-decoder"),rmt.forEach(t),pWo=r(GLe," \u2014 "),WG=n(GLe,"A",{href:!0});var tmt=s(WG);_Wo=r(tmt,"SpeechEncoderDecoderModel"),tmt.forEach(t),bWo=r(GLe," (Speech Encoder decoder model)"),GLe.forEach(t),vWo=i(j$e),tT=n(j$e,"LI",{});var OLe=s(tT);Age=n(OLe,"STRONG",{});var amt=s(Age);FWo=r(amt,"speech_to_text"),amt.forEach(t),TWo=r(OLe," \u2014 "),HG=n(OLe,"A",{href:!0});var nmt=s(HG);MWo=r(nmt,"Speech2TextForConditionalGeneration"),nmt.forEach(t),EWo=r(OLe," (Speech2Text model)"),OLe.forEach(t),j$e.forEach(t),CWo=i(ra),aT=n(ra,"P",{});var VLe=s(aT);wWo=r(VLe,"The model is set in evaluation mode by default using "),yge=n(VLe,"CODE",{});var smt=s(yge);AWo=r(smt,"model.eval()"),smt.forEach(t),yWo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(VLe,"CODE",{});var lmt=s(Lge);LWo=r(lmt,"model.train()"),lmt.forEach(t),VLe.forEach(t),xWo=i(ra),xge=n(ra,"P",{});var imt=s(xge);kWo=r(imt,"Examples:"),imt.forEach(t),SWo=i(ra),f(F0.$$.fragment,ra),ra.forEach(t),Ll.forEach(t),kBe=i(c),Jd=n(c,"H2",{class:!0});var D$e=s(Jd);nT=n(D$e,"A",{id:!0,class:!0,href:!0});var dmt=s(nT);kge=n(dmt,"SPAN",{});var cmt=s(kge);f(T0.$$.fragment,cmt),cmt.forEach(t),dmt.forEach(t),RWo=i(D$e),Sge=n(D$e,"SPAN",{});var mmt=s(Sge);BWo=r(mmt,"AutoModelForAudioXVector"),mmt.forEach(t),D$e.forEach(t),SBe=i(c),gr=n(c,"DIV",{class:!0});var kl=s(gr);f(M0.$$.fragment,kl),PWo=i(kl),Yd=n(kl,"P",{});var sJ=s(Yd);$Wo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=n(sJ,"A",{href:!0});var fmt=s(UG);IWo=r(fmt,"from_pretrained()"),fmt.forEach(t),qWo=r(sJ," class method or the "),JG=n(sJ,"A",{href:!0});var gmt=s(JG);NWo=r(gmt,"from_config()"),gmt.forEach(t),jWo=r(sJ,` class
method.`),sJ.forEach(t),DWo=i(kl),E0=n(kl,"P",{});var G$e=s(E0);GWo=r(G$e,"This class cannot be instantiated directly using "),Rge=n(G$e,"CODE",{});var hmt=s(Rge);OWo=r(hmt,"__init__()"),hmt.forEach(t),VWo=r(G$e," (throws an error)."),G$e.forEach(t),XWo=i(kl),lt=n(kl,"DIV",{class:!0});var Sl=s(lt);f(C0.$$.fragment,Sl),zWo=i(Sl),Bge=n(Sl,"P",{});var umt=s(Bge);QWo=r(umt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),umt.forEach(t),WWo=i(Sl),Kd=n(Sl,"P",{});var lJ=s(Kd);HWo=r(lJ,`Note:
Loading a model from its configuration file does `),Pge=n(lJ,"STRONG",{});var pmt=s(Pge);UWo=r(pmt,"not"),pmt.forEach(t),JWo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(lJ,"A",{href:!0});var _mt=s(YG);YWo=r(_mt,"from_pretrained()"),_mt.forEach(t),KWo=r(lJ," to load the model weights."),lJ.forEach(t),ZWo=i(Sl),$ge=n(Sl,"P",{});var bmt=s($ge);eHo=r(bmt,"Examples:"),bmt.forEach(t),oHo=i(Sl),f(w0.$$.fragment,Sl),Sl.forEach(t),rHo=i(kl),eo=n(kl,"DIV",{class:!0});var ta=s(eo);f(A0.$$.fragment,ta),tHo=i(ta),Ige=n(ta,"P",{});var vmt=s(Ige);aHo=r(vmt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vmt.forEach(t),nHo=i(ta),dn=n(ta,"P",{});var JC=s(dn);sHo=r(JC,"The model class to instantiate is selected based on the "),qge=n(JC,"CODE",{});var Fmt=s(qge);lHo=r(Fmt,"model_type"),Fmt.forEach(t),iHo=r(JC,` property of the config object (either
passed as an argument or loaded from `),Nge=n(JC,"CODE",{});var Tmt=s(Nge);dHo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),cHo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(JC,"CODE",{});var Mmt=s(jge);mHo=r(Mmt,"pretrained_model_name_or_path"),Mmt.forEach(t),fHo=r(JC,":"),JC.forEach(t),gHo=i(ta),cn=n(ta,"UL",{});var YC=s(cn);sT=n(YC,"LI",{});var XLe=s(sT);Dge=n(XLe,"STRONG",{});var Emt=s(Dge);hHo=r(Emt,"data2vec-audio"),Emt.forEach(t),uHo=r(XLe," \u2014 "),KG=n(XLe,"A",{href:!0});var Cmt=s(KG);pHo=r(Cmt,"Data2VecAudioForXVector"),Cmt.forEach(t),_Ho=r(XLe," (Data2VecAudio model)"),XLe.forEach(t),bHo=i(YC),lT=n(YC,"LI",{});var zLe=s(lT);Gge=n(zLe,"STRONG",{});var wmt=s(Gge);vHo=r(wmt,"unispeech-sat"),wmt.forEach(t),FHo=r(zLe," \u2014 "),ZG=n(zLe,"A",{href:!0});var Amt=s(ZG);THo=r(Amt,"UniSpeechSatForXVector"),Amt.forEach(t),MHo=r(zLe," (UniSpeechSat model)"),zLe.forEach(t),EHo=i(YC),iT=n(YC,"LI",{});var QLe=s(iT);Oge=n(QLe,"STRONG",{});var ymt=s(Oge);CHo=r(ymt,"wav2vec2"),ymt.forEach(t),wHo=r(QLe," \u2014 "),eO=n(QLe,"A",{href:!0});var Lmt=s(eO);AHo=r(Lmt,"Wav2Vec2ForXVector"),Lmt.forEach(t),yHo=r(QLe," (Wav2Vec2 model)"),QLe.forEach(t),LHo=i(YC),dT=n(YC,"LI",{});var WLe=s(dT);Vge=n(WLe,"STRONG",{});var xmt=s(Vge);xHo=r(xmt,"wavlm"),xmt.forEach(t),kHo=r(WLe," \u2014 "),oO=n(WLe,"A",{href:!0});var kmt=s(oO);SHo=r(kmt,"WavLMForXVector"),kmt.forEach(t),RHo=r(WLe," (WavLM model)"),WLe.forEach(t),YC.forEach(t),BHo=i(ta),cT=n(ta,"P",{});var HLe=s(cT);PHo=r(HLe,"The model is set in evaluation mode by default using "),Xge=n(HLe,"CODE",{});var Smt=s(Xge);$Ho=r(Smt,"model.eval()"),Smt.forEach(t),IHo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(HLe,"CODE",{});var Rmt=s(zge);qHo=r(Rmt,"model.train()"),Rmt.forEach(t),HLe.forEach(t),NHo=i(ta),Qge=n(ta,"P",{});var Bmt=s(Qge);jHo=r(Bmt,"Examples:"),Bmt.forEach(t),DHo=i(ta),f(y0.$$.fragment,ta),ta.forEach(t),kl.forEach(t),RBe=i(c),Zd=n(c,"H2",{class:!0});var O$e=s(Zd);mT=n(O$e,"A",{id:!0,class:!0,href:!0});var Pmt=s(mT);Wge=n(Pmt,"SPAN",{});var $mt=s(Wge);f(L0.$$.fragment,$mt),$mt.forEach(t),Pmt.forEach(t),GHo=i(O$e),Hge=n(O$e,"SPAN",{});var Imt=s(Hge);OHo=r(Imt,"AutoModelForMaskedImageModeling"),Imt.forEach(t),O$e.forEach(t),BBe=i(c),hr=n(c,"DIV",{class:!0});var Rl=s(hr);f(x0.$$.fragment,Rl),VHo=i(Rl),ec=n(Rl,"P",{});var iJ=s(ec);XHo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=n(iJ,"A",{href:!0});var qmt=s(rO);zHo=r(qmt,"from_pretrained()"),qmt.forEach(t),QHo=r(iJ," class method or the "),tO=n(iJ,"A",{href:!0});var Nmt=s(tO);WHo=r(Nmt,"from_config()"),Nmt.forEach(t),HHo=r(iJ,` class
method.`),iJ.forEach(t),UHo=i(Rl),k0=n(Rl,"P",{});var V$e=s(k0);JHo=r(V$e,"This class cannot be instantiated directly using "),Uge=n(V$e,"CODE",{});var jmt=s(Uge);YHo=r(jmt,"__init__()"),jmt.forEach(t),KHo=r(V$e," (throws an error)."),V$e.forEach(t),ZHo=i(Rl),it=n(Rl,"DIV",{class:!0});var Bl=s(it);f(S0.$$.fragment,Bl),eUo=i(Bl),Jge=n(Bl,"P",{});var Dmt=s(Jge);oUo=r(Dmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Dmt.forEach(t),rUo=i(Bl),oc=n(Bl,"P",{});var dJ=s(oc);tUo=r(dJ,`Note:
Loading a model from its configuration file does `),Yge=n(dJ,"STRONG",{});var Gmt=s(Yge);aUo=r(Gmt,"not"),Gmt.forEach(t),nUo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(dJ,"A",{href:!0});var Omt=s(aO);sUo=r(Omt,"from_pretrained()"),Omt.forEach(t),lUo=r(dJ," to load the model weights."),dJ.forEach(t),iUo=i(Bl),Kge=n(Bl,"P",{});var Vmt=s(Kge);dUo=r(Vmt,"Examples:"),Vmt.forEach(t),cUo=i(Bl),f(R0.$$.fragment,Bl),Bl.forEach(t),mUo=i(Rl),oo=n(Rl,"DIV",{class:!0});var aa=s(oo);f(B0.$$.fragment,aa),fUo=i(aa),Zge=n(aa,"P",{});var Xmt=s(Zge);gUo=r(Xmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Xmt.forEach(t),hUo=i(aa),mn=n(aa,"P",{});var KC=s(mn);uUo=r(KC,"The model class to instantiate is selected based on the "),ehe=n(KC,"CODE",{});var zmt=s(ehe);pUo=r(zmt,"model_type"),zmt.forEach(t),_Uo=r(KC,` property of the config object (either
passed as an argument or loaded from `),ohe=n(KC,"CODE",{});var Qmt=s(ohe);bUo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),vUo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(KC,"CODE",{});var Wmt=s(rhe);FUo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),TUo=r(KC,":"),KC.forEach(t),MUo=i(aa),rc=n(aa,"UL",{});var cJ=s(rc);fT=n(cJ,"LI",{});var ULe=s(fT);the=n(ULe,"STRONG",{});var Hmt=s(the);EUo=r(Hmt,"deit"),Hmt.forEach(t),CUo=r(ULe," \u2014 "),nO=n(ULe,"A",{href:!0});var Umt=s(nO);wUo=r(Umt,"DeiTForMaskedImageModeling"),Umt.forEach(t),AUo=r(ULe," (DeiT model)"),ULe.forEach(t),yUo=i(cJ),gT=n(cJ,"LI",{});var JLe=s(gT);ahe=n(JLe,"STRONG",{});var Jmt=s(ahe);LUo=r(Jmt,"swin"),Jmt.forEach(t),xUo=r(JLe," \u2014 "),sO=n(JLe,"A",{href:!0});var Ymt=s(sO);kUo=r(Ymt,"SwinForMaskedImageModeling"),Ymt.forEach(t),SUo=r(JLe," (Swin model)"),JLe.forEach(t),RUo=i(cJ),hT=n(cJ,"LI",{});var YLe=s(hT);nhe=n(YLe,"STRONG",{});var Kmt=s(nhe);BUo=r(Kmt,"vit"),Kmt.forEach(t),PUo=r(YLe," \u2014 "),lO=n(YLe,"A",{href:!0});var Zmt=s(lO);$Uo=r(Zmt,"ViTForMaskedImageModeling"),Zmt.forEach(t),IUo=r(YLe," (ViT model)"),YLe.forEach(t),cJ.forEach(t),qUo=i(aa),uT=n(aa,"P",{});var KLe=s(uT);NUo=r(KLe,"The model is set in evaluation mode by default using "),she=n(KLe,"CODE",{});var eft=s(she);jUo=r(eft,"model.eval()"),eft.forEach(t),DUo=r(KLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(KLe,"CODE",{});var oft=s(lhe);GUo=r(oft,"model.train()"),oft.forEach(t),KLe.forEach(t),OUo=i(aa),ihe=n(aa,"P",{});var rft=s(ihe);VUo=r(rft,"Examples:"),rft.forEach(t),XUo=i(aa),f(P0.$$.fragment,aa),aa.forEach(t),Rl.forEach(t),PBe=i(c),tc=n(c,"H2",{class:!0});var X$e=s(tc);pT=n(X$e,"A",{id:!0,class:!0,href:!0});var tft=s(pT);dhe=n(tft,"SPAN",{});var aft=s(dhe);f($0.$$.fragment,aft),aft.forEach(t),tft.forEach(t),zUo=i(X$e),che=n(X$e,"SPAN",{});var nft=s(che);QUo=r(nft,"AutoModelForObjectDetection"),nft.forEach(t),X$e.forEach(t),$Be=i(c),ur=n(c,"DIV",{class:!0});var Pl=s(ur);f(I0.$$.fragment,Pl),WUo=i(Pl),ac=n(Pl,"P",{});var mJ=s(ac);HUo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=n(mJ,"A",{href:!0});var sft=s(iO);UUo=r(sft,"from_pretrained()"),sft.forEach(t),JUo=r(mJ," class method or the "),dO=n(mJ,"A",{href:!0});var lft=s(dO);YUo=r(lft,"from_config()"),lft.forEach(t),KUo=r(mJ,` class
method.`),mJ.forEach(t),ZUo=i(Pl),q0=n(Pl,"P",{});var z$e=s(q0);eJo=r(z$e,"This class cannot be instantiated directly using "),mhe=n(z$e,"CODE",{});var ift=s(mhe);oJo=r(ift,"__init__()"),ift.forEach(t),rJo=r(z$e," (throws an error)."),z$e.forEach(t),tJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);f(N0.$$.fragment,$l),aJo=i($l),fhe=n($l,"P",{});var dft=s(fhe);nJo=r(dft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dft.forEach(t),sJo=i($l),nc=n($l,"P",{});var fJ=s(nc);lJo=r(fJ,`Note:
Loading a model from its configuration file does `),ghe=n(fJ,"STRONG",{});var cft=s(ghe);iJo=r(cft,"not"),cft.forEach(t),dJo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(fJ,"A",{href:!0});var mft=s(cO);cJo=r(mft,"from_pretrained()"),mft.forEach(t),mJo=r(fJ," to load the model weights."),fJ.forEach(t),fJo=i($l),hhe=n($l,"P",{});var fft=s(hhe);gJo=r(fft,"Examples:"),fft.forEach(t),hJo=i($l),f(j0.$$.fragment,$l),$l.forEach(t),uJo=i(Pl),ro=n(Pl,"DIV",{class:!0});var na=s(ro);f(D0.$$.fragment,na),pJo=i(na),uhe=n(na,"P",{});var gft=s(uhe);_Jo=r(gft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gft.forEach(t),bJo=i(na),fn=n(na,"P",{});var ZC=s(fn);vJo=r(ZC,"The model class to instantiate is selected based on the "),phe=n(ZC,"CODE",{});var hft=s(phe);FJo=r(hft,"model_type"),hft.forEach(t),TJo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),_he=n(ZC,"CODE",{});var uft=s(_he);MJo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),EJo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(ZC,"CODE",{});var pft=s(bhe);CJo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),wJo=r(ZC,":"),ZC.forEach(t),AJo=i(na),vhe=n(na,"UL",{});var _ft=s(vhe);_T=n(_ft,"LI",{});var ZLe=s(_T);Fhe=n(ZLe,"STRONG",{});var bft=s(Fhe);yJo=r(bft,"detr"),bft.forEach(t),LJo=r(ZLe," \u2014 "),mO=n(ZLe,"A",{href:!0});var vft=s(mO);xJo=r(vft,"DetrForObjectDetection"),vft.forEach(t),kJo=r(ZLe," (DETR model)"),ZLe.forEach(t),_ft.forEach(t),SJo=i(na),bT=n(na,"P",{});var e7e=s(bT);RJo=r(e7e,"The model is set in evaluation mode by default using "),The=n(e7e,"CODE",{});var Fft=s(The);BJo=r(Fft,"model.eval()"),Fft.forEach(t),PJo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(e7e,"CODE",{});var Tft=s(Mhe);$Jo=r(Tft,"model.train()"),Tft.forEach(t),e7e.forEach(t),IJo=i(na),Ehe=n(na,"P",{});var Mft=s(Ehe);qJo=r(Mft,"Examples:"),Mft.forEach(t),NJo=i(na),f(G0.$$.fragment,na),na.forEach(t),Pl.forEach(t),IBe=i(c),sc=n(c,"H2",{class:!0});var Q$e=s(sc);vT=n(Q$e,"A",{id:!0,class:!0,href:!0});var Eft=s(vT);Che=n(Eft,"SPAN",{});var Cft=s(Che);f(O0.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),jJo=i(Q$e),whe=n(Q$e,"SPAN",{});var wft=s(whe);DJo=r(wft,"AutoModelForImageSegmentation"),wft.forEach(t),Q$e.forEach(t),qBe=i(c),pr=n(c,"DIV",{class:!0});var Il=s(pr);f(V0.$$.fragment,Il),GJo=i(Il),lc=n(Il,"P",{});var gJ=s(lc);OJo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fO=n(gJ,"A",{href:!0});var Aft=s(fO);VJo=r(Aft,"from_pretrained()"),Aft.forEach(t),XJo=r(gJ," class method or the "),gO=n(gJ,"A",{href:!0});var yft=s(gO);zJo=r(yft,"from_config()"),yft.forEach(t),QJo=r(gJ,` class
method.`),gJ.forEach(t),WJo=i(Il),X0=n(Il,"P",{});var W$e=s(X0);HJo=r(W$e,"This class cannot be instantiated directly using "),Ahe=n(W$e,"CODE",{});var Lft=s(Ahe);UJo=r(Lft,"__init__()"),Lft.forEach(t),JJo=r(W$e," (throws an error)."),W$e.forEach(t),YJo=i(Il),ct=n(Il,"DIV",{class:!0});var ql=s(ct);f(z0.$$.fragment,ql),KJo=i(ql),yhe=n(ql,"P",{});var xft=s(yhe);ZJo=r(xft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xft.forEach(t),eYo=i(ql),ic=n(ql,"P",{});var hJ=s(ic);oYo=r(hJ,`Note:
Loading a model from its configuration file does `),Lhe=n(hJ,"STRONG",{});var kft=s(Lhe);rYo=r(kft,"not"),kft.forEach(t),tYo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(hJ,"A",{href:!0});var Sft=s(hO);aYo=r(Sft,"from_pretrained()"),Sft.forEach(t),nYo=r(hJ," to load the model weights."),hJ.forEach(t),sYo=i(ql),xhe=n(ql,"P",{});var Rft=s(xhe);lYo=r(Rft,"Examples:"),Rft.forEach(t),iYo=i(ql),f(Q0.$$.fragment,ql),ql.forEach(t),dYo=i(Il),to=n(Il,"DIV",{class:!0});var sa=s(to);f(W0.$$.fragment,sa),cYo=i(sa),khe=n(sa,"P",{});var Bft=s(khe);mYo=r(Bft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Bft.forEach(t),fYo=i(sa),gn=n(sa,"P",{});var ew=s(gn);gYo=r(ew,"The model class to instantiate is selected based on the "),She=n(ew,"CODE",{});var Pft=s(She);hYo=r(Pft,"model_type"),Pft.forEach(t),uYo=r(ew,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(ew,"CODE",{});var $ft=s(Rhe);pYo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),_Yo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(ew,"CODE",{});var Ift=s(Bhe);bYo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),vYo=r(ew,":"),ew.forEach(t),FYo=i(sa),Phe=n(sa,"UL",{});var qft=s(Phe);FT=n(qft,"LI",{});var o7e=s(FT);$he=n(o7e,"STRONG",{});var Nft=s($he);TYo=r(Nft,"detr"),Nft.forEach(t),MYo=r(o7e," \u2014 "),uO=n(o7e,"A",{href:!0});var jft=s(uO);EYo=r(jft,"DetrForSegmentation"),jft.forEach(t),CYo=r(o7e," (DETR model)"),o7e.forEach(t),qft.forEach(t),wYo=i(sa),TT=n(sa,"P",{});var r7e=s(TT);AYo=r(r7e,"The model is set in evaluation mode by default using "),Ihe=n(r7e,"CODE",{});var Dft=s(Ihe);yYo=r(Dft,"model.eval()"),Dft.forEach(t),LYo=r(r7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(r7e,"CODE",{});var Gft=s(qhe);xYo=r(Gft,"model.train()"),Gft.forEach(t),r7e.forEach(t),kYo=i(sa),Nhe=n(sa,"P",{});var Oft=s(Nhe);SYo=r(Oft,"Examples:"),Oft.forEach(t),RYo=i(sa),f(H0.$$.fragment,sa),sa.forEach(t),Il.forEach(t),NBe=i(c),dc=n(c,"H2",{class:!0});var H$e=s(dc);MT=n(H$e,"A",{id:!0,class:!0,href:!0});var Vft=s(MT);jhe=n(Vft,"SPAN",{});var Xft=s(jhe);f(U0.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),BYo=i(H$e),Dhe=n(H$e,"SPAN",{});var zft=s(Dhe);PYo=r(zft,"AutoModelForSemanticSegmentation"),zft.forEach(t),H$e.forEach(t),jBe=i(c),_r=n(c,"DIV",{class:!0});var Nl=s(_r);f(J0.$$.fragment,Nl),$Yo=i(Nl),cc=n(Nl,"P",{});var uJ=s(cc);IYo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pO=n(uJ,"A",{href:!0});var Qft=s(pO);qYo=r(Qft,"from_pretrained()"),Qft.forEach(t),NYo=r(uJ," class method or the "),_O=n(uJ,"A",{href:!0});var Wft=s(_O);jYo=r(Wft,"from_config()"),Wft.forEach(t),DYo=r(uJ,` class
method.`),uJ.forEach(t),GYo=i(Nl),Y0=n(Nl,"P",{});var U$e=s(Y0);OYo=r(U$e,"This class cannot be instantiated directly using "),Ghe=n(U$e,"CODE",{});var Hft=s(Ghe);VYo=r(Hft,"__init__()"),Hft.forEach(t),XYo=r(U$e," (throws an error)."),U$e.forEach(t),zYo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);f(K0.$$.fragment,jl),QYo=i(jl),Ohe=n(jl,"P",{});var Uft=s(Ohe);WYo=r(Uft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uft.forEach(t),HYo=i(jl),mc=n(jl,"P",{});var pJ=s(mc);UYo=r(pJ,`Note:
Loading a model from its configuration file does `),Vhe=n(pJ,"STRONG",{});var Jft=s(Vhe);JYo=r(Jft,"not"),Jft.forEach(t),YYo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(pJ,"A",{href:!0});var Yft=s(bO);KYo=r(Yft,"from_pretrained()"),Yft.forEach(t),ZYo=r(pJ," to load the model weights."),pJ.forEach(t),eKo=i(jl),Xhe=n(jl,"P",{});var Kft=s(Xhe);oKo=r(Kft,"Examples:"),Kft.forEach(t),rKo=i(jl),f(Z0.$$.fragment,jl),jl.forEach(t),tKo=i(Nl),ao=n(Nl,"DIV",{class:!0});var la=s(ao);f(ey.$$.fragment,la),aKo=i(la),zhe=n(la,"P",{});var Zft=s(zhe);nKo=r(Zft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Zft.forEach(t),sKo=i(la),hn=n(la,"P",{});var ow=s(hn);lKo=r(ow,"The model class to instantiate is selected based on the "),Qhe=n(ow,"CODE",{});var egt=s(Qhe);iKo=r(egt,"model_type"),egt.forEach(t),dKo=r(ow,` property of the config object (either
passed as an argument or loaded from `),Whe=n(ow,"CODE",{});var ogt=s(Whe);cKo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),mKo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(ow,"CODE",{});var rgt=s(Hhe);fKo=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),gKo=r(ow,":"),ow.forEach(t),hKo=i(la),un=n(la,"UL",{});var rw=s(un);ET=n(rw,"LI",{});var t7e=s(ET);Uhe=n(t7e,"STRONG",{});var tgt=s(Uhe);uKo=r(tgt,"beit"),tgt.forEach(t),pKo=r(t7e," \u2014 "),vO=n(t7e,"A",{href:!0});var agt=s(vO);_Ko=r(agt,"BeitForSemanticSegmentation"),agt.forEach(t),bKo=r(t7e," (BEiT model)"),t7e.forEach(t),vKo=i(rw),CT=n(rw,"LI",{});var a7e=s(CT);Jhe=n(a7e,"STRONG",{});var ngt=s(Jhe);FKo=r(ngt,"data2vec-vision"),ngt.forEach(t),TKo=r(a7e," \u2014 "),FO=n(a7e,"A",{href:!0});var sgt=s(FO);MKo=r(sgt,"Data2VecVisionForSemanticSegmentation"),sgt.forEach(t),EKo=r(a7e," (Data2VecVision model)"),a7e.forEach(t),CKo=i(rw),wT=n(rw,"LI",{});var n7e=s(wT);Yhe=n(n7e,"STRONG",{});var lgt=s(Yhe);wKo=r(lgt,"dpt"),lgt.forEach(t),AKo=r(n7e," \u2014 "),TO=n(n7e,"A",{href:!0});var igt=s(TO);yKo=r(igt,"DPTForSemanticSegmentation"),igt.forEach(t),LKo=r(n7e," (DPT model)"),n7e.forEach(t),xKo=i(rw),AT=n(rw,"LI",{});var s7e=s(AT);Khe=n(s7e,"STRONG",{});var dgt=s(Khe);kKo=r(dgt,"segformer"),dgt.forEach(t),SKo=r(s7e," \u2014 "),MO=n(s7e,"A",{href:!0});var cgt=s(MO);RKo=r(cgt,"SegformerForSemanticSegmentation"),cgt.forEach(t),BKo=r(s7e," (SegFormer model)"),s7e.forEach(t),rw.forEach(t),PKo=i(la),yT=n(la,"P",{});var l7e=s(yT);$Ko=r(l7e,"The model is set in evaluation mode by default using "),Zhe=n(l7e,"CODE",{});var mgt=s(Zhe);IKo=r(mgt,"model.eval()"),mgt.forEach(t),qKo=r(l7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(l7e,"CODE",{});var fgt=s(eue);NKo=r(fgt,"model.train()"),fgt.forEach(t),l7e.forEach(t),jKo=i(la),oue=n(la,"P",{});var ggt=s(oue);DKo=r(ggt,"Examples:"),ggt.forEach(t),GKo=i(la),f(oy.$$.fragment,la),la.forEach(t),Nl.forEach(t),DBe=i(c),fc=n(c,"H2",{class:!0});var J$e=s(fc);LT=n(J$e,"A",{id:!0,class:!0,href:!0});var hgt=s(LT);rue=n(hgt,"SPAN",{});var ugt=s(rue);f(ry.$$.fragment,ugt),ugt.forEach(t),hgt.forEach(t),OKo=i(J$e),tue=n(J$e,"SPAN",{});var pgt=s(tue);VKo=r(pgt,"AutoModelForInstanceSegmentation"),pgt.forEach(t),J$e.forEach(t),GBe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);f(ty.$$.fragment,Dl),XKo=i(Dl),gc=n(Dl,"P",{});var _J=s(gc);zKo=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=n(_J,"A",{href:!0});var _gt=s(EO);QKo=r(_gt,"from_pretrained()"),_gt.forEach(t),WKo=r(_J," class method or the "),CO=n(_J,"A",{href:!0});var bgt=s(CO);HKo=r(bgt,"from_config()"),bgt.forEach(t),UKo=r(_J,` class
method.`),_J.forEach(t),JKo=i(Dl),ay=n(Dl,"P",{});var Y$e=s(ay);YKo=r(Y$e,"This class cannot be instantiated directly using "),aue=n(Y$e,"CODE",{});var vgt=s(aue);KKo=r(vgt,"__init__()"),vgt.forEach(t),ZKo=r(Y$e," (throws an error)."),Y$e.forEach(t),eZo=i(Dl),ft=n(Dl,"DIV",{class:!0});var Gl=s(ft);f(ny.$$.fragment,Gl),oZo=i(Gl),nue=n(Gl,"P",{});var Fgt=s(nue);rZo=r(Fgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fgt.forEach(t),tZo=i(Gl),hc=n(Gl,"P",{});var bJ=s(hc);aZo=r(bJ,`Note:
Loading a model from its configuration file does `),sue=n(bJ,"STRONG",{});var Tgt=s(sue);nZo=r(Tgt,"not"),Tgt.forEach(t),sZo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(bJ,"A",{href:!0});var Mgt=s(wO);lZo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),iZo=r(bJ," to load the model weights."),bJ.forEach(t),dZo=i(Gl),lue=n(Gl,"P",{});var Egt=s(lue);cZo=r(Egt,"Examples:"),Egt.forEach(t),mZo=i(Gl),f(sy.$$.fragment,Gl),Gl.forEach(t),fZo=i(Dl),no=n(Dl,"DIV",{class:!0});var ia=s(no);f(ly.$$.fragment,ia),gZo=i(ia),iue=n(ia,"P",{});var Cgt=s(iue);hZo=r(Cgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Cgt.forEach(t),uZo=i(ia),pn=n(ia,"P",{});var tw=s(pn);pZo=r(tw,"The model class to instantiate is selected based on the "),due=n(tw,"CODE",{});var wgt=s(due);_Zo=r(wgt,"model_type"),wgt.forEach(t),bZo=r(tw,` property of the config object (either
passed as an argument or loaded from `),cue=n(tw,"CODE",{});var Agt=s(cue);vZo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),FZo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(tw,"CODE",{});var ygt=s(mue);TZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),MZo=r(tw,":"),tw.forEach(t),EZo=i(ia),fue=n(ia,"UL",{});var Lgt=s(fue);xT=n(Lgt,"LI",{});var i7e=s(xT);gue=n(i7e,"STRONG",{});var xgt=s(gue);CZo=r(xgt,"maskformer"),xgt.forEach(t),wZo=r(i7e," \u2014 "),AO=n(i7e,"A",{href:!0});var kgt=s(AO);AZo=r(kgt,"MaskFormerForInstanceSegmentation"),kgt.forEach(t),yZo=r(i7e," (MaskFormer model)"),i7e.forEach(t),Lgt.forEach(t),LZo=i(ia),kT=n(ia,"P",{});var d7e=s(kT);xZo=r(d7e,"The model is set in evaluation mode by default using "),hue=n(d7e,"CODE",{});var Sgt=s(hue);kZo=r(Sgt,"model.eval()"),Sgt.forEach(t),SZo=r(d7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(d7e,"CODE",{});var Rgt=s(uue);RZo=r(Rgt,"model.train()"),Rgt.forEach(t),d7e.forEach(t),BZo=i(ia),pue=n(ia,"P",{});var Bgt=s(pue);PZo=r(Bgt,"Examples:"),Bgt.forEach(t),$Zo=i(ia),f(iy.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),OBe=i(c),uc=n(c,"H2",{class:!0});var K$e=s(uc);ST=n(K$e,"A",{id:!0,class:!0,href:!0});var Pgt=s(ST);_ue=n(Pgt,"SPAN",{});var $gt=s(_ue);f(dy.$$.fragment,$gt),$gt.forEach(t),Pgt.forEach(t),IZo=i(K$e),bue=n(K$e,"SPAN",{});var Igt=s(bue);qZo=r(Igt,"TFAutoModel"),Igt.forEach(t),K$e.forEach(t),VBe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);f(cy.$$.fragment,Ol),NZo=i(Ol),pc=n(Ol,"P",{});var vJ=s(pc);jZo=r(vJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=n(vJ,"A",{href:!0});var qgt=s(yO);DZo=r(qgt,"from_pretrained()"),qgt.forEach(t),GZo=r(vJ," class method or the "),LO=n(vJ,"A",{href:!0});var Ngt=s(LO);OZo=r(Ngt,"from_config()"),Ngt.forEach(t),VZo=r(vJ,` class
method.`),vJ.forEach(t),XZo=i(Ol),my=n(Ol,"P",{});var Z$e=s(my);zZo=r(Z$e,"This class cannot be instantiated directly using "),vue=n(Z$e,"CODE",{});var jgt=s(vue);QZo=r(jgt,"__init__()"),jgt.forEach(t),WZo=r(Z$e," (throws an error)."),Z$e.forEach(t),HZo=i(Ol),gt=n(Ol,"DIV",{class:!0});var Vl=s(gt);f(fy.$$.fragment,Vl),UZo=i(Vl),Fue=n(Vl,"P",{});var Dgt=s(Fue);JZo=r(Dgt,"Instantiates one of the base model classes of the library from a configuration."),Dgt.forEach(t),YZo=i(Vl),_c=n(Vl,"P",{});var FJ=s(_c);KZo=r(FJ,`Note:
Loading a model from its configuration file does `),Tue=n(FJ,"STRONG",{});var Ggt=s(Tue);ZZo=r(Ggt,"not"),Ggt.forEach(t),eer=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(FJ,"A",{href:!0});var Ogt=s(xO);oer=r(Ogt,"from_pretrained()"),Ogt.forEach(t),rer=r(FJ," to load the model weights."),FJ.forEach(t),ter=i(Vl),Mue=n(Vl,"P",{});var Vgt=s(Mue);aer=r(Vgt,"Examples:"),Vgt.forEach(t),ner=i(Vl),f(gy.$$.fragment,Vl),Vl.forEach(t),ser=i(Ol),ho=n(Ol,"DIV",{class:!0});var ua=s(ho);f(hy.$$.fragment,ua),ler=i(ua),Eue=n(ua,"P",{});var Xgt=s(Eue);ier=r(Xgt,"Instantiate one of the base model classes of the library from a pretrained model."),Xgt.forEach(t),der=i(ua),_n=n(ua,"P",{});var aw=s(_n);cer=r(aw,"The model class to instantiate is selected based on the "),Cue=n(aw,"CODE",{});var zgt=s(Cue);mer=r(zgt,"model_type"),zgt.forEach(t),fer=r(aw,` property of the config object (either
passed as an argument or loaded from `),wue=n(aw,"CODE",{});var Qgt=s(wue);ger=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),her=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(aw,"CODE",{});var Wgt=s(Aue);uer=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),per=r(aw,":"),aw.forEach(t),_er=i(ua),x=n(ua,"UL",{});var k=s(x);RT=n(k,"LI",{});var c7e=s(RT);yue=n(c7e,"STRONG",{});var Hgt=s(yue);ber=r(Hgt,"albert"),Hgt.forEach(t),ver=r(c7e," \u2014 "),kO=n(c7e,"A",{href:!0});var Ugt=s(kO);Fer=r(Ugt,"TFAlbertModel"),Ugt.forEach(t),Ter=r(c7e," (ALBERT model)"),c7e.forEach(t),Mer=i(k),BT=n(k,"LI",{});var m7e=s(BT);Lue=n(m7e,"STRONG",{});var Jgt=s(Lue);Eer=r(Jgt,"bart"),Jgt.forEach(t),Cer=r(m7e," \u2014 "),SO=n(m7e,"A",{href:!0});var Ygt=s(SO);wer=r(Ygt,"TFBartModel"),Ygt.forEach(t),Aer=r(m7e," (BART model)"),m7e.forEach(t),yer=i(k),PT=n(k,"LI",{});var f7e=s(PT);xue=n(f7e,"STRONG",{});var Kgt=s(xue);Ler=r(Kgt,"bert"),Kgt.forEach(t),xer=r(f7e," \u2014 "),RO=n(f7e,"A",{href:!0});var Zgt=s(RO);ker=r(Zgt,"TFBertModel"),Zgt.forEach(t),Ser=r(f7e," (BERT model)"),f7e.forEach(t),Rer=i(k),$T=n(k,"LI",{});var g7e=s($T);kue=n(g7e,"STRONG",{});var eht=s(kue);Ber=r(eht,"blenderbot"),eht.forEach(t),Per=r(g7e," \u2014 "),BO=n(g7e,"A",{href:!0});var oht=s(BO);$er=r(oht,"TFBlenderbotModel"),oht.forEach(t),Ier=r(g7e," (Blenderbot model)"),g7e.forEach(t),qer=i(k),IT=n(k,"LI",{});var h7e=s(IT);Sue=n(h7e,"STRONG",{});var rht=s(Sue);Ner=r(rht,"blenderbot-small"),rht.forEach(t),jer=r(h7e," \u2014 "),PO=n(h7e,"A",{href:!0});var tht=s(PO);Der=r(tht,"TFBlenderbotSmallModel"),tht.forEach(t),Ger=r(h7e," (BlenderbotSmall model)"),h7e.forEach(t),Oer=i(k),qT=n(k,"LI",{});var u7e=s(qT);Rue=n(u7e,"STRONG",{});var aht=s(Rue);Ver=r(aht,"camembert"),aht.forEach(t),Xer=r(u7e," \u2014 "),$O=n(u7e,"A",{href:!0});var nht=s($O);zer=r(nht,"TFCamembertModel"),nht.forEach(t),Qer=r(u7e," (CamemBERT model)"),u7e.forEach(t),Wer=i(k),NT=n(k,"LI",{});var p7e=s(NT);Bue=n(p7e,"STRONG",{});var sht=s(Bue);Her=r(sht,"clip"),sht.forEach(t),Uer=r(p7e," \u2014 "),IO=n(p7e,"A",{href:!0});var lht=s(IO);Jer=r(lht,"TFCLIPModel"),lht.forEach(t),Yer=r(p7e," (CLIP model)"),p7e.forEach(t),Ker=i(k),jT=n(k,"LI",{});var _7e=s(jT);Pue=n(_7e,"STRONG",{});var iht=s(Pue);Zer=r(iht,"convbert"),iht.forEach(t),eor=r(_7e," \u2014 "),qO=n(_7e,"A",{href:!0});var dht=s(qO);oor=r(dht,"TFConvBertModel"),dht.forEach(t),ror=r(_7e," (ConvBERT model)"),_7e.forEach(t),tor=i(k),DT=n(k,"LI",{});var b7e=s(DT);$ue=n(b7e,"STRONG",{});var cht=s($ue);aor=r(cht,"convnext"),cht.forEach(t),nor=r(b7e," \u2014 "),NO=n(b7e,"A",{href:!0});var mht=s(NO);sor=r(mht,"TFConvNextModel"),mht.forEach(t),lor=r(b7e," (ConvNext model)"),b7e.forEach(t),ior=i(k),GT=n(k,"LI",{});var v7e=s(GT);Iue=n(v7e,"STRONG",{});var fht=s(Iue);dor=r(fht,"ctrl"),fht.forEach(t),cor=r(v7e," \u2014 "),jO=n(v7e,"A",{href:!0});var ght=s(jO);mor=r(ght,"TFCTRLModel"),ght.forEach(t),gor=r(v7e," (CTRL model)"),v7e.forEach(t),hor=i(k),OT=n(k,"LI",{});var F7e=s(OT);que=n(F7e,"STRONG",{});var hht=s(que);uor=r(hht,"deberta"),hht.forEach(t),por=r(F7e," \u2014 "),DO=n(F7e,"A",{href:!0});var uht=s(DO);_or=r(uht,"TFDebertaModel"),uht.forEach(t),bor=r(F7e," (DeBERTa model)"),F7e.forEach(t),vor=i(k),VT=n(k,"LI",{});var T7e=s(VT);Nue=n(T7e,"STRONG",{});var pht=s(Nue);For=r(pht,"deberta-v2"),pht.forEach(t),Tor=r(T7e," \u2014 "),GO=n(T7e,"A",{href:!0});var _ht=s(GO);Mor=r(_ht,"TFDebertaV2Model"),_ht.forEach(t),Eor=r(T7e," (DeBERTa-v2 model)"),T7e.forEach(t),Cor=i(k),XT=n(k,"LI",{});var M7e=s(XT);jue=n(M7e,"STRONG",{});var bht=s(jue);wor=r(bht,"distilbert"),bht.forEach(t),Aor=r(M7e," \u2014 "),OO=n(M7e,"A",{href:!0});var vht=s(OO);yor=r(vht,"TFDistilBertModel"),vht.forEach(t),Lor=r(M7e," (DistilBERT model)"),M7e.forEach(t),xor=i(k),zT=n(k,"LI",{});var E7e=s(zT);Due=n(E7e,"STRONG",{});var Fht=s(Due);kor=r(Fht,"dpr"),Fht.forEach(t),Sor=r(E7e," \u2014 "),VO=n(E7e,"A",{href:!0});var Tht=s(VO);Ror=r(Tht,"TFDPRQuestionEncoder"),Tht.forEach(t),Bor=r(E7e," (DPR model)"),E7e.forEach(t),Por=i(k),QT=n(k,"LI",{});var C7e=s(QT);Gue=n(C7e,"STRONG",{});var Mht=s(Gue);$or=r(Mht,"electra"),Mht.forEach(t),Ior=r(C7e," \u2014 "),XO=n(C7e,"A",{href:!0});var Eht=s(XO);qor=r(Eht,"TFElectraModel"),Eht.forEach(t),Nor=r(C7e," (ELECTRA model)"),C7e.forEach(t),jor=i(k),WT=n(k,"LI",{});var w7e=s(WT);Oue=n(w7e,"STRONG",{});var Cht=s(Oue);Dor=r(Cht,"flaubert"),Cht.forEach(t),Gor=r(w7e," \u2014 "),zO=n(w7e,"A",{href:!0});var wht=s(zO);Oor=r(wht,"TFFlaubertModel"),wht.forEach(t),Vor=r(w7e," (FlauBERT model)"),w7e.forEach(t),Xor=i(k),Xs=n(k,"LI",{});var M9=s(Xs);Vue=n(M9,"STRONG",{});var Aht=s(Vue);zor=r(Aht,"funnel"),Aht.forEach(t),Qor=r(M9," \u2014 "),QO=n(M9,"A",{href:!0});var yht=s(QO);Wor=r(yht,"TFFunnelModel"),yht.forEach(t),Hor=r(M9," or "),WO=n(M9,"A",{href:!0});var Lht=s(WO);Uor=r(Lht,"TFFunnelBaseModel"),Lht.forEach(t),Jor=r(M9," (Funnel Transformer model)"),M9.forEach(t),Yor=i(k),HT=n(k,"LI",{});var A7e=s(HT);Xue=n(A7e,"STRONG",{});var xht=s(Xue);Kor=r(xht,"gpt2"),xht.forEach(t),Zor=r(A7e," \u2014 "),HO=n(A7e,"A",{href:!0});var kht=s(HO);err=r(kht,"TFGPT2Model"),kht.forEach(t),orr=r(A7e," (OpenAI GPT-2 model)"),A7e.forEach(t),rrr=i(k),UT=n(k,"LI",{});var y7e=s(UT);zue=n(y7e,"STRONG",{});var Sht=s(zue);trr=r(Sht,"gptj"),Sht.forEach(t),arr=r(y7e," \u2014 "),UO=n(y7e,"A",{href:!0});var Rht=s(UO);nrr=r(Rht,"TFGPTJModel"),Rht.forEach(t),srr=r(y7e," (GPT-J model)"),y7e.forEach(t),lrr=i(k),JT=n(k,"LI",{});var L7e=s(JT);Que=n(L7e,"STRONG",{});var Bht=s(Que);irr=r(Bht,"hubert"),Bht.forEach(t),drr=r(L7e," \u2014 "),JO=n(L7e,"A",{href:!0});var Pht=s(JO);crr=r(Pht,"TFHubertModel"),Pht.forEach(t),mrr=r(L7e," (Hubert model)"),L7e.forEach(t),frr=i(k),YT=n(k,"LI",{});var x7e=s(YT);Wue=n(x7e,"STRONG",{});var $ht=s(Wue);grr=r($ht,"layoutlm"),$ht.forEach(t),hrr=r(x7e," \u2014 "),YO=n(x7e,"A",{href:!0});var Iht=s(YO);urr=r(Iht,"TFLayoutLMModel"),Iht.forEach(t),prr=r(x7e," (LayoutLM model)"),x7e.forEach(t),_rr=i(k),KT=n(k,"LI",{});var k7e=s(KT);Hue=n(k7e,"STRONG",{});var qht=s(Hue);brr=r(qht,"led"),qht.forEach(t),vrr=r(k7e," \u2014 "),KO=n(k7e,"A",{href:!0});var Nht=s(KO);Frr=r(Nht,"TFLEDModel"),Nht.forEach(t),Trr=r(k7e," (LED model)"),k7e.forEach(t),Mrr=i(k),ZT=n(k,"LI",{});var S7e=s(ZT);Uue=n(S7e,"STRONG",{});var jht=s(Uue);Err=r(jht,"longformer"),jht.forEach(t),Crr=r(S7e," \u2014 "),ZO=n(S7e,"A",{href:!0});var Dht=s(ZO);wrr=r(Dht,"TFLongformerModel"),Dht.forEach(t),Arr=r(S7e," (Longformer model)"),S7e.forEach(t),yrr=i(k),eM=n(k,"LI",{});var R7e=s(eM);Jue=n(R7e,"STRONG",{});var Ght=s(Jue);Lrr=r(Ght,"lxmert"),Ght.forEach(t),xrr=r(R7e," \u2014 "),eV=n(R7e,"A",{href:!0});var Oht=s(eV);krr=r(Oht,"TFLxmertModel"),Oht.forEach(t),Srr=r(R7e," (LXMERT model)"),R7e.forEach(t),Rrr=i(k),oM=n(k,"LI",{});var B7e=s(oM);Yue=n(B7e,"STRONG",{});var Vht=s(Yue);Brr=r(Vht,"marian"),Vht.forEach(t),Prr=r(B7e," \u2014 "),oV=n(B7e,"A",{href:!0});var Xht=s(oV);$rr=r(Xht,"TFMarianModel"),Xht.forEach(t),Irr=r(B7e," (Marian model)"),B7e.forEach(t),qrr=i(k),rM=n(k,"LI",{});var P7e=s(rM);Kue=n(P7e,"STRONG",{});var zht=s(Kue);Nrr=r(zht,"mbart"),zht.forEach(t),jrr=r(P7e," \u2014 "),rV=n(P7e,"A",{href:!0});var Qht=s(rV);Drr=r(Qht,"TFMBartModel"),Qht.forEach(t),Grr=r(P7e," (mBART model)"),P7e.forEach(t),Orr=i(k),tM=n(k,"LI",{});var $7e=s(tM);Zue=n($7e,"STRONG",{});var Wht=s(Zue);Vrr=r(Wht,"mobilebert"),Wht.forEach(t),Xrr=r($7e," \u2014 "),tV=n($7e,"A",{href:!0});var Hht=s(tV);zrr=r(Hht,"TFMobileBertModel"),Hht.forEach(t),Qrr=r($7e," (MobileBERT model)"),$7e.forEach(t),Wrr=i(k),aM=n(k,"LI",{});var I7e=s(aM);epe=n(I7e,"STRONG",{});var Uht=s(epe);Hrr=r(Uht,"mpnet"),Uht.forEach(t),Urr=r(I7e," \u2014 "),aV=n(I7e,"A",{href:!0});var Jht=s(aV);Jrr=r(Jht,"TFMPNetModel"),Jht.forEach(t),Yrr=r(I7e," (MPNet model)"),I7e.forEach(t),Krr=i(k),nM=n(k,"LI",{});var q7e=s(nM);ope=n(q7e,"STRONG",{});var Yht=s(ope);Zrr=r(Yht,"mt5"),Yht.forEach(t),etr=r(q7e," \u2014 "),nV=n(q7e,"A",{href:!0});var Kht=s(nV);otr=r(Kht,"TFMT5Model"),Kht.forEach(t),rtr=r(q7e," (mT5 model)"),q7e.forEach(t),ttr=i(k),sM=n(k,"LI",{});var N7e=s(sM);rpe=n(N7e,"STRONG",{});var Zht=s(rpe);atr=r(Zht,"openai-gpt"),Zht.forEach(t),ntr=r(N7e," \u2014 "),sV=n(N7e,"A",{href:!0});var eut=s(sV);str=r(eut,"TFOpenAIGPTModel"),eut.forEach(t),ltr=r(N7e," (OpenAI GPT model)"),N7e.forEach(t),itr=i(k),lM=n(k,"LI",{});var j7e=s(lM);tpe=n(j7e,"STRONG",{});var out=s(tpe);dtr=r(out,"pegasus"),out.forEach(t),ctr=r(j7e," \u2014 "),lV=n(j7e,"A",{href:!0});var rut=s(lV);mtr=r(rut,"TFPegasusModel"),rut.forEach(t),ftr=r(j7e," (Pegasus model)"),j7e.forEach(t),gtr=i(k),iM=n(k,"LI",{});var D7e=s(iM);ape=n(D7e,"STRONG",{});var tut=s(ape);htr=r(tut,"rembert"),tut.forEach(t),utr=r(D7e," \u2014 "),iV=n(D7e,"A",{href:!0});var aut=s(iV);ptr=r(aut,"TFRemBertModel"),aut.forEach(t),_tr=r(D7e," (RemBERT model)"),D7e.forEach(t),btr=i(k),dM=n(k,"LI",{});var G7e=s(dM);npe=n(G7e,"STRONG",{});var nut=s(npe);vtr=r(nut,"roberta"),nut.forEach(t),Ftr=r(G7e," \u2014 "),dV=n(G7e,"A",{href:!0});var sut=s(dV);Ttr=r(sut,"TFRobertaModel"),sut.forEach(t),Mtr=r(G7e," (RoBERTa model)"),G7e.forEach(t),Etr=i(k),cM=n(k,"LI",{});var O7e=s(cM);spe=n(O7e,"STRONG",{});var lut=s(spe);Ctr=r(lut,"roformer"),lut.forEach(t),wtr=r(O7e," \u2014 "),cV=n(O7e,"A",{href:!0});var iut=s(cV);Atr=r(iut,"TFRoFormerModel"),iut.forEach(t),ytr=r(O7e," (RoFormer model)"),O7e.forEach(t),Ltr=i(k),mM=n(k,"LI",{});var V7e=s(mM);lpe=n(V7e,"STRONG",{});var dut=s(lpe);xtr=r(dut,"speech_to_text"),dut.forEach(t),ktr=r(V7e," \u2014 "),mV=n(V7e,"A",{href:!0});var cut=s(mV);Str=r(cut,"TFSpeech2TextModel"),cut.forEach(t),Rtr=r(V7e," (Speech2Text model)"),V7e.forEach(t),Btr=i(k),fM=n(k,"LI",{});var X7e=s(fM);ipe=n(X7e,"STRONG",{});var mut=s(ipe);Ptr=r(mut,"t5"),mut.forEach(t),$tr=r(X7e," \u2014 "),fV=n(X7e,"A",{href:!0});var fut=s(fV);Itr=r(fut,"TFT5Model"),fut.forEach(t),qtr=r(X7e," (T5 model)"),X7e.forEach(t),Ntr=i(k),gM=n(k,"LI",{});var z7e=s(gM);dpe=n(z7e,"STRONG",{});var gut=s(dpe);jtr=r(gut,"tapas"),gut.forEach(t),Dtr=r(z7e," \u2014 "),gV=n(z7e,"A",{href:!0});var hut=s(gV);Gtr=r(hut,"TFTapasModel"),hut.forEach(t),Otr=r(z7e," (TAPAS model)"),z7e.forEach(t),Vtr=i(k),hM=n(k,"LI",{});var Q7e=s(hM);cpe=n(Q7e,"STRONG",{});var uut=s(cpe);Xtr=r(uut,"transfo-xl"),uut.forEach(t),ztr=r(Q7e," \u2014 "),hV=n(Q7e,"A",{href:!0});var put=s(hV);Qtr=r(put,"TFTransfoXLModel"),put.forEach(t),Wtr=r(Q7e," (Transformer-XL model)"),Q7e.forEach(t),Htr=i(k),uM=n(k,"LI",{});var W7e=s(uM);mpe=n(W7e,"STRONG",{});var _ut=s(mpe);Utr=r(_ut,"vit"),_ut.forEach(t),Jtr=r(W7e," \u2014 "),uV=n(W7e,"A",{href:!0});var but=s(uV);Ytr=r(but,"TFViTModel"),but.forEach(t),Ktr=r(W7e," (ViT model)"),W7e.forEach(t),Ztr=i(k),pM=n(k,"LI",{});var H7e=s(pM);fpe=n(H7e,"STRONG",{});var vut=s(fpe);ear=r(vut,"vit_mae"),vut.forEach(t),oar=r(H7e," \u2014 "),pV=n(H7e,"A",{href:!0});var Fut=s(pV);rar=r(Fut,"TFViTMAEModel"),Fut.forEach(t),tar=r(H7e," (ViTMAE model)"),H7e.forEach(t),aar=i(k),_M=n(k,"LI",{});var U7e=s(_M);gpe=n(U7e,"STRONG",{});var Tut=s(gpe);nar=r(Tut,"wav2vec2"),Tut.forEach(t),sar=r(U7e," \u2014 "),_V=n(U7e,"A",{href:!0});var Mut=s(_V);lar=r(Mut,"TFWav2Vec2Model"),Mut.forEach(t),iar=r(U7e," (Wav2Vec2 model)"),U7e.forEach(t),dar=i(k),bM=n(k,"LI",{});var J7e=s(bM);hpe=n(J7e,"STRONG",{});var Eut=s(hpe);car=r(Eut,"xlm"),Eut.forEach(t),mar=r(J7e," \u2014 "),bV=n(J7e,"A",{href:!0});var Cut=s(bV);far=r(Cut,"TFXLMModel"),Cut.forEach(t),gar=r(J7e," (XLM model)"),J7e.forEach(t),har=i(k),vM=n(k,"LI",{});var Y7e=s(vM);upe=n(Y7e,"STRONG",{});var wut=s(upe);uar=r(wut,"xlm-roberta"),wut.forEach(t),par=r(Y7e," \u2014 "),vV=n(Y7e,"A",{href:!0});var Aut=s(vV);_ar=r(Aut,"TFXLMRobertaModel"),Aut.forEach(t),bar=r(Y7e," (XLM-RoBERTa model)"),Y7e.forEach(t),Far=i(k),FM=n(k,"LI",{});var K7e=s(FM);ppe=n(K7e,"STRONG",{});var yut=s(ppe);Tar=r(yut,"xlnet"),yut.forEach(t),Mar=r(K7e," \u2014 "),FV=n(K7e,"A",{href:!0});var Lut=s(FV);Ear=r(Lut,"TFXLNetModel"),Lut.forEach(t),Car=r(K7e," (XLNet model)"),K7e.forEach(t),k.forEach(t),war=i(ua),_pe=n(ua,"P",{});var xut=s(_pe);Aar=r(xut,"Examples:"),xut.forEach(t),yar=i(ua),f(uy.$$.fragment,ua),ua.forEach(t),Ol.forEach(t),XBe=i(c),bc=n(c,"H2",{class:!0});var eIe=s(bc);TM=n(eIe,"A",{id:!0,class:!0,href:!0});var kut=s(TM);bpe=n(kut,"SPAN",{});var Sut=s(bpe);f(py.$$.fragment,Sut),Sut.forEach(t),kut.forEach(t),Lar=i(eIe),vpe=n(eIe,"SPAN",{});var Rut=s(vpe);xar=r(Rut,"TFAutoModelForPreTraining"),Rut.forEach(t),eIe.forEach(t),zBe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);f(_y.$$.fragment,Xl),kar=i(Xl),vc=n(Xl,"P",{});var TJ=s(vc);Sar=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=n(TJ,"A",{href:!0});var But=s(TV);Rar=r(But,"from_pretrained()"),But.forEach(t),Bar=r(TJ," class method or the "),MV=n(TJ,"A",{href:!0});var Put=s(MV);Par=r(Put,"from_config()"),Put.forEach(t),$ar=r(TJ,` class
method.`),TJ.forEach(t),Iar=i(Xl),by=n(Xl,"P",{});var oIe=s(by);qar=r(oIe,"This class cannot be instantiated directly using "),Fpe=n(oIe,"CODE",{});var $ut=s(Fpe);Nar=r($ut,"__init__()"),$ut.forEach(t),jar=r(oIe," (throws an error)."),oIe.forEach(t),Dar=i(Xl),ht=n(Xl,"DIV",{class:!0});var zl=s(ht);f(vy.$$.fragment,zl),Gar=i(zl),Tpe=n(zl,"P",{});var Iut=s(Tpe);Oar=r(Iut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Iut.forEach(t),Var=i(zl),Fc=n(zl,"P",{});var MJ=s(Fc);Xar=r(MJ,`Note:
Loading a model from its configuration file does `),Mpe=n(MJ,"STRONG",{});var qut=s(Mpe);zar=r(qut,"not"),qut.forEach(t),Qar=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(MJ,"A",{href:!0});var Nut=s(EV);War=r(Nut,"from_pretrained()"),Nut.forEach(t),Har=r(MJ," to load the model weights."),MJ.forEach(t),Uar=i(zl),Epe=n(zl,"P",{});var jut=s(Epe);Jar=r(jut,"Examples:"),jut.forEach(t),Yar=i(zl),f(Fy.$$.fragment,zl),zl.forEach(t),Kar=i(Xl),uo=n(Xl,"DIV",{class:!0});var pa=s(uo);f(Ty.$$.fragment,pa),Zar=i(pa),Cpe=n(pa,"P",{});var Dut=s(Cpe);enr=r(Dut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dut.forEach(t),onr=i(pa),bn=n(pa,"P",{});var nw=s(bn);rnr=r(nw,"The model class to instantiate is selected based on the "),wpe=n(nw,"CODE",{});var Gut=s(wpe);tnr=r(Gut,"model_type"),Gut.forEach(t),anr=r(nw,` property of the config object (either
passed as an argument or loaded from `),Ape=n(nw,"CODE",{});var Out=s(Ape);nnr=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),snr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(nw,"CODE",{});var Vut=s(ype);lnr=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),inr=r(nw,":"),nw.forEach(t),dnr=i(pa),H=n(pa,"UL",{});var U=s(H);MM=n(U,"LI",{});var Z7e=s(MM);Lpe=n(Z7e,"STRONG",{});var Xut=s(Lpe);cnr=r(Xut,"albert"),Xut.forEach(t),mnr=r(Z7e," \u2014 "),CV=n(Z7e,"A",{href:!0});var zut=s(CV);fnr=r(zut,"TFAlbertForPreTraining"),zut.forEach(t),gnr=r(Z7e," (ALBERT model)"),Z7e.forEach(t),hnr=i(U),EM=n(U,"LI",{});var e9e=s(EM);xpe=n(e9e,"STRONG",{});var Qut=s(xpe);unr=r(Qut,"bart"),Qut.forEach(t),pnr=r(e9e," \u2014 "),wV=n(e9e,"A",{href:!0});var Wut=s(wV);_nr=r(Wut,"TFBartForConditionalGeneration"),Wut.forEach(t),bnr=r(e9e," (BART model)"),e9e.forEach(t),vnr=i(U),CM=n(U,"LI",{});var o9e=s(CM);kpe=n(o9e,"STRONG",{});var Hut=s(kpe);Fnr=r(Hut,"bert"),Hut.forEach(t),Tnr=r(o9e," \u2014 "),AV=n(o9e,"A",{href:!0});var Uut=s(AV);Mnr=r(Uut,"TFBertForPreTraining"),Uut.forEach(t),Enr=r(o9e," (BERT model)"),o9e.forEach(t),Cnr=i(U),wM=n(U,"LI",{});var r9e=s(wM);Spe=n(r9e,"STRONG",{});var Jut=s(Spe);wnr=r(Jut,"camembert"),Jut.forEach(t),Anr=r(r9e," \u2014 "),yV=n(r9e,"A",{href:!0});var Yut=s(yV);ynr=r(Yut,"TFCamembertForMaskedLM"),Yut.forEach(t),Lnr=r(r9e," (CamemBERT model)"),r9e.forEach(t),xnr=i(U),AM=n(U,"LI",{});var t9e=s(AM);Rpe=n(t9e,"STRONG",{});var Kut=s(Rpe);knr=r(Kut,"ctrl"),Kut.forEach(t),Snr=r(t9e," \u2014 "),LV=n(t9e,"A",{href:!0});var Zut=s(LV);Rnr=r(Zut,"TFCTRLLMHeadModel"),Zut.forEach(t),Bnr=r(t9e," (CTRL model)"),t9e.forEach(t),Pnr=i(U),yM=n(U,"LI",{});var a9e=s(yM);Bpe=n(a9e,"STRONG",{});var ept=s(Bpe);$nr=r(ept,"distilbert"),ept.forEach(t),Inr=r(a9e," \u2014 "),xV=n(a9e,"A",{href:!0});var opt=s(xV);qnr=r(opt,"TFDistilBertForMaskedLM"),opt.forEach(t),Nnr=r(a9e," (DistilBERT model)"),a9e.forEach(t),jnr=i(U),LM=n(U,"LI",{});var n9e=s(LM);Ppe=n(n9e,"STRONG",{});var rpt=s(Ppe);Dnr=r(rpt,"electra"),rpt.forEach(t),Gnr=r(n9e," \u2014 "),kV=n(n9e,"A",{href:!0});var tpt=s(kV);Onr=r(tpt,"TFElectraForPreTraining"),tpt.forEach(t),Vnr=r(n9e," (ELECTRA model)"),n9e.forEach(t),Xnr=i(U),xM=n(U,"LI",{});var s9e=s(xM);$pe=n(s9e,"STRONG",{});var apt=s($pe);znr=r(apt,"flaubert"),apt.forEach(t),Qnr=r(s9e," \u2014 "),SV=n(s9e,"A",{href:!0});var npt=s(SV);Wnr=r(npt,"TFFlaubertWithLMHeadModel"),npt.forEach(t),Hnr=r(s9e," (FlauBERT model)"),s9e.forEach(t),Unr=i(U),kM=n(U,"LI",{});var l9e=s(kM);Ipe=n(l9e,"STRONG",{});var spt=s(Ipe);Jnr=r(spt,"funnel"),spt.forEach(t),Ynr=r(l9e," \u2014 "),RV=n(l9e,"A",{href:!0});var lpt=s(RV);Knr=r(lpt,"TFFunnelForPreTraining"),lpt.forEach(t),Znr=r(l9e," (Funnel Transformer model)"),l9e.forEach(t),esr=i(U),SM=n(U,"LI",{});var i9e=s(SM);qpe=n(i9e,"STRONG",{});var ipt=s(qpe);osr=r(ipt,"gpt2"),ipt.forEach(t),rsr=r(i9e," \u2014 "),BV=n(i9e,"A",{href:!0});var dpt=s(BV);tsr=r(dpt,"TFGPT2LMHeadModel"),dpt.forEach(t),asr=r(i9e," (OpenAI GPT-2 model)"),i9e.forEach(t),nsr=i(U),RM=n(U,"LI",{});var d9e=s(RM);Npe=n(d9e,"STRONG",{});var cpt=s(Npe);ssr=r(cpt,"layoutlm"),cpt.forEach(t),lsr=r(d9e," \u2014 "),PV=n(d9e,"A",{href:!0});var mpt=s(PV);isr=r(mpt,"TFLayoutLMForMaskedLM"),mpt.forEach(t),dsr=r(d9e," (LayoutLM model)"),d9e.forEach(t),csr=i(U),BM=n(U,"LI",{});var c9e=s(BM);jpe=n(c9e,"STRONG",{});var fpt=s(jpe);msr=r(fpt,"lxmert"),fpt.forEach(t),fsr=r(c9e," \u2014 "),$V=n(c9e,"A",{href:!0});var gpt=s($V);gsr=r(gpt,"TFLxmertForPreTraining"),gpt.forEach(t),hsr=r(c9e," (LXMERT model)"),c9e.forEach(t),usr=i(U),PM=n(U,"LI",{});var m9e=s(PM);Dpe=n(m9e,"STRONG",{});var hpt=s(Dpe);psr=r(hpt,"mobilebert"),hpt.forEach(t),_sr=r(m9e," \u2014 "),IV=n(m9e,"A",{href:!0});var upt=s(IV);bsr=r(upt,"TFMobileBertForPreTraining"),upt.forEach(t),vsr=r(m9e," (MobileBERT model)"),m9e.forEach(t),Fsr=i(U),$M=n(U,"LI",{});var f9e=s($M);Gpe=n(f9e,"STRONG",{});var ppt=s(Gpe);Tsr=r(ppt,"mpnet"),ppt.forEach(t),Msr=r(f9e," \u2014 "),qV=n(f9e,"A",{href:!0});var _pt=s(qV);Esr=r(_pt,"TFMPNetForMaskedLM"),_pt.forEach(t),Csr=r(f9e," (MPNet model)"),f9e.forEach(t),wsr=i(U),IM=n(U,"LI",{});var g9e=s(IM);Ope=n(g9e,"STRONG",{});var bpt=s(Ope);Asr=r(bpt,"openai-gpt"),bpt.forEach(t),ysr=r(g9e," \u2014 "),NV=n(g9e,"A",{href:!0});var vpt=s(NV);Lsr=r(vpt,"TFOpenAIGPTLMHeadModel"),vpt.forEach(t),xsr=r(g9e," (OpenAI GPT model)"),g9e.forEach(t),ksr=i(U),qM=n(U,"LI",{});var h9e=s(qM);Vpe=n(h9e,"STRONG",{});var Fpt=s(Vpe);Ssr=r(Fpt,"roberta"),Fpt.forEach(t),Rsr=r(h9e," \u2014 "),jV=n(h9e,"A",{href:!0});var Tpt=s(jV);Bsr=r(Tpt,"TFRobertaForMaskedLM"),Tpt.forEach(t),Psr=r(h9e," (RoBERTa model)"),h9e.forEach(t),$sr=i(U),NM=n(U,"LI",{});var u9e=s(NM);Xpe=n(u9e,"STRONG",{});var Mpt=s(Xpe);Isr=r(Mpt,"t5"),Mpt.forEach(t),qsr=r(u9e," \u2014 "),DV=n(u9e,"A",{href:!0});var Ept=s(DV);Nsr=r(Ept,"TFT5ForConditionalGeneration"),Ept.forEach(t),jsr=r(u9e," (T5 model)"),u9e.forEach(t),Dsr=i(U),jM=n(U,"LI",{});var p9e=s(jM);zpe=n(p9e,"STRONG",{});var Cpt=s(zpe);Gsr=r(Cpt,"tapas"),Cpt.forEach(t),Osr=r(p9e," \u2014 "),GV=n(p9e,"A",{href:!0});var wpt=s(GV);Vsr=r(wpt,"TFTapasForMaskedLM"),wpt.forEach(t),Xsr=r(p9e," (TAPAS model)"),p9e.forEach(t),zsr=i(U),DM=n(U,"LI",{});var _9e=s(DM);Qpe=n(_9e,"STRONG",{});var Apt=s(Qpe);Qsr=r(Apt,"transfo-xl"),Apt.forEach(t),Wsr=r(_9e," \u2014 "),OV=n(_9e,"A",{href:!0});var ypt=s(OV);Hsr=r(ypt,"TFTransfoXLLMHeadModel"),ypt.forEach(t),Usr=r(_9e," (Transformer-XL model)"),_9e.forEach(t),Jsr=i(U),GM=n(U,"LI",{});var b9e=s(GM);Wpe=n(b9e,"STRONG",{});var Lpt=s(Wpe);Ysr=r(Lpt,"vit_mae"),Lpt.forEach(t),Ksr=r(b9e," \u2014 "),VV=n(b9e,"A",{href:!0});var xpt=s(VV);Zsr=r(xpt,"TFViTMAEForPreTraining"),xpt.forEach(t),elr=r(b9e," (ViTMAE model)"),b9e.forEach(t),olr=i(U),OM=n(U,"LI",{});var v9e=s(OM);Hpe=n(v9e,"STRONG",{});var kpt=s(Hpe);rlr=r(kpt,"xlm"),kpt.forEach(t),tlr=r(v9e," \u2014 "),XV=n(v9e,"A",{href:!0});var Spt=s(XV);alr=r(Spt,"TFXLMWithLMHeadModel"),Spt.forEach(t),nlr=r(v9e," (XLM model)"),v9e.forEach(t),slr=i(U),VM=n(U,"LI",{});var F9e=s(VM);Upe=n(F9e,"STRONG",{});var Rpt=s(Upe);llr=r(Rpt,"xlm-roberta"),Rpt.forEach(t),ilr=r(F9e," \u2014 "),zV=n(F9e,"A",{href:!0});var Bpt=s(zV);dlr=r(Bpt,"TFXLMRobertaForMaskedLM"),Bpt.forEach(t),clr=r(F9e," (XLM-RoBERTa model)"),F9e.forEach(t),mlr=i(U),XM=n(U,"LI",{});var T9e=s(XM);Jpe=n(T9e,"STRONG",{});var Ppt=s(Jpe);flr=r(Ppt,"xlnet"),Ppt.forEach(t),glr=r(T9e," \u2014 "),QV=n(T9e,"A",{href:!0});var $pt=s(QV);hlr=r($pt,"TFXLNetLMHeadModel"),$pt.forEach(t),ulr=r(T9e," (XLNet model)"),T9e.forEach(t),U.forEach(t),plr=i(pa),Ype=n(pa,"P",{});var Ipt=s(Ype);_lr=r(Ipt,"Examples:"),Ipt.forEach(t),blr=i(pa),f(My.$$.fragment,pa),pa.forEach(t),Xl.forEach(t),QBe=i(c),Tc=n(c,"H2",{class:!0});var rIe=s(Tc);zM=n(rIe,"A",{id:!0,class:!0,href:!0});var qpt=s(zM);Kpe=n(qpt,"SPAN",{});var Npt=s(Kpe);f(Ey.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),vlr=i(rIe),Zpe=n(rIe,"SPAN",{});var jpt=s(Zpe);Flr=r(jpt,"TFAutoModelForCausalLM"),jpt.forEach(t),rIe.forEach(t),WBe=i(c),Tr=n(c,"DIV",{class:!0});var Ql=s(Tr);f(Cy.$$.fragment,Ql),Tlr=i(Ql),Mc=n(Ql,"P",{});var EJ=s(Mc);Mlr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=n(EJ,"A",{href:!0});var Dpt=s(WV);Elr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),Clr=r(EJ," class method or the "),HV=n(EJ,"A",{href:!0});var Gpt=s(HV);wlr=r(Gpt,"from_config()"),Gpt.forEach(t),Alr=r(EJ,` class
method.`),EJ.forEach(t),ylr=i(Ql),wy=n(Ql,"P",{});var tIe=s(wy);Llr=r(tIe,"This class cannot be instantiated directly using "),e_e=n(tIe,"CODE",{});var Opt=s(e_e);xlr=r(Opt,"__init__()"),Opt.forEach(t),klr=r(tIe," (throws an error)."),tIe.forEach(t),Slr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Wl=s(ut);f(Ay.$$.fragment,Wl),Rlr=i(Wl),o_e=n(Wl,"P",{});var Vpt=s(o_e);Blr=r(Vpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vpt.forEach(t),Plr=i(Wl),Ec=n(Wl,"P",{});var CJ=s(Ec);$lr=r(CJ,`Note:
Loading a model from its configuration file does `),r_e=n(CJ,"STRONG",{});var Xpt=s(r_e);Ilr=r(Xpt,"not"),Xpt.forEach(t),qlr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(CJ,"A",{href:!0});var zpt=s(UV);Nlr=r(zpt,"from_pretrained()"),zpt.forEach(t),jlr=r(CJ," to load the model weights."),CJ.forEach(t),Dlr=i(Wl),t_e=n(Wl,"P",{});var Qpt=s(t_e);Glr=r(Qpt,"Examples:"),Qpt.forEach(t),Olr=i(Wl),f(yy.$$.fragment,Wl),Wl.forEach(t),Vlr=i(Ql),po=n(Ql,"DIV",{class:!0});var _a=s(po);f(Ly.$$.fragment,_a),Xlr=i(_a),a_e=n(_a,"P",{});var Wpt=s(a_e);zlr=r(Wpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wpt.forEach(t),Qlr=i(_a),vn=n(_a,"P",{});var sw=s(vn);Wlr=r(sw,"The model class to instantiate is selected based on the "),n_e=n(sw,"CODE",{});var Hpt=s(n_e);Hlr=r(Hpt,"model_type"),Hpt.forEach(t),Ulr=r(sw,` property of the config object (either
passed as an argument or loaded from `),s_e=n(sw,"CODE",{});var Upt=s(s_e);Jlr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Ylr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l_e=n(sw,"CODE",{});var Jpt=s(l_e);Klr=r(Jpt,"pretrained_model_name_or_path"),Jpt.forEach(t),Zlr=r(sw,":"),sw.forEach(t),eir=i(_a),me=n(_a,"UL",{});var ue=s(me);QM=n(ue,"LI",{});var M9e=s(QM);i_e=n(M9e,"STRONG",{});var Ypt=s(i_e);oir=r(Ypt,"bert"),Ypt.forEach(t),rir=r(M9e," \u2014 "),JV=n(M9e,"A",{href:!0});var Kpt=s(JV);tir=r(Kpt,"TFBertLMHeadModel"),Kpt.forEach(t),air=r(M9e," (BERT model)"),M9e.forEach(t),nir=i(ue),WM=n(ue,"LI",{});var E9e=s(WM);d_e=n(E9e,"STRONG",{});var Zpt=s(d_e);sir=r(Zpt,"camembert"),Zpt.forEach(t),lir=r(E9e," \u2014 "),YV=n(E9e,"A",{href:!0});var e_t=s(YV);iir=r(e_t,"TFCamembertForCausalLM"),e_t.forEach(t),dir=r(E9e," (CamemBERT model)"),E9e.forEach(t),cir=i(ue),HM=n(ue,"LI",{});var C9e=s(HM);c_e=n(C9e,"STRONG",{});var o_t=s(c_e);mir=r(o_t,"ctrl"),o_t.forEach(t),fir=r(C9e," \u2014 "),KV=n(C9e,"A",{href:!0});var r_t=s(KV);gir=r(r_t,"TFCTRLLMHeadModel"),r_t.forEach(t),hir=r(C9e," (CTRL model)"),C9e.forEach(t),uir=i(ue),UM=n(ue,"LI",{});var w9e=s(UM);m_e=n(w9e,"STRONG",{});var t_t=s(m_e);pir=r(t_t,"gpt2"),t_t.forEach(t),_ir=r(w9e," \u2014 "),ZV=n(w9e,"A",{href:!0});var a_t=s(ZV);bir=r(a_t,"TFGPT2LMHeadModel"),a_t.forEach(t),vir=r(w9e," (OpenAI GPT-2 model)"),w9e.forEach(t),Fir=i(ue),JM=n(ue,"LI",{});var A9e=s(JM);f_e=n(A9e,"STRONG",{});var n_t=s(f_e);Tir=r(n_t,"gptj"),n_t.forEach(t),Mir=r(A9e," \u2014 "),eX=n(A9e,"A",{href:!0});var s_t=s(eX);Eir=r(s_t,"TFGPTJForCausalLM"),s_t.forEach(t),Cir=r(A9e," (GPT-J model)"),A9e.forEach(t),wir=i(ue),YM=n(ue,"LI",{});var y9e=s(YM);g_e=n(y9e,"STRONG",{});var l_t=s(g_e);Air=r(l_t,"openai-gpt"),l_t.forEach(t),yir=r(y9e," \u2014 "),oX=n(y9e,"A",{href:!0});var i_t=s(oX);Lir=r(i_t,"TFOpenAIGPTLMHeadModel"),i_t.forEach(t),xir=r(y9e," (OpenAI GPT model)"),y9e.forEach(t),kir=i(ue),KM=n(ue,"LI",{});var L9e=s(KM);h_e=n(L9e,"STRONG",{});var d_t=s(h_e);Sir=r(d_t,"rembert"),d_t.forEach(t),Rir=r(L9e," \u2014 "),rX=n(L9e,"A",{href:!0});var c_t=s(rX);Bir=r(c_t,"TFRemBertForCausalLM"),c_t.forEach(t),Pir=r(L9e," (RemBERT model)"),L9e.forEach(t),$ir=i(ue),ZM=n(ue,"LI",{});var x9e=s(ZM);u_e=n(x9e,"STRONG",{});var m_t=s(u_e);Iir=r(m_t,"roberta"),m_t.forEach(t),qir=r(x9e," \u2014 "),tX=n(x9e,"A",{href:!0});var f_t=s(tX);Nir=r(f_t,"TFRobertaForCausalLM"),f_t.forEach(t),jir=r(x9e," (RoBERTa model)"),x9e.forEach(t),Dir=i(ue),e4=n(ue,"LI",{});var k9e=s(e4);p_e=n(k9e,"STRONG",{});var g_t=s(p_e);Gir=r(g_t,"roformer"),g_t.forEach(t),Oir=r(k9e," \u2014 "),aX=n(k9e,"A",{href:!0});var h_t=s(aX);Vir=r(h_t,"TFRoFormerForCausalLM"),h_t.forEach(t),Xir=r(k9e," (RoFormer model)"),k9e.forEach(t),zir=i(ue),o4=n(ue,"LI",{});var S9e=s(o4);__e=n(S9e,"STRONG",{});var u_t=s(__e);Qir=r(u_t,"transfo-xl"),u_t.forEach(t),Wir=r(S9e," \u2014 "),nX=n(S9e,"A",{href:!0});var p_t=s(nX);Hir=r(p_t,"TFTransfoXLLMHeadModel"),p_t.forEach(t),Uir=r(S9e," (Transformer-XL model)"),S9e.forEach(t),Jir=i(ue),r4=n(ue,"LI",{});var R9e=s(r4);b_e=n(R9e,"STRONG",{});var __t=s(b_e);Yir=r(__t,"xlm"),__t.forEach(t),Kir=r(R9e," \u2014 "),sX=n(R9e,"A",{href:!0});var b_t=s(sX);Zir=r(b_t,"TFXLMWithLMHeadModel"),b_t.forEach(t),edr=r(R9e," (XLM model)"),R9e.forEach(t),odr=i(ue),t4=n(ue,"LI",{});var B9e=s(t4);v_e=n(B9e,"STRONG",{});var v_t=s(v_e);rdr=r(v_t,"xlnet"),v_t.forEach(t),tdr=r(B9e," \u2014 "),lX=n(B9e,"A",{href:!0});var F_t=s(lX);adr=r(F_t,"TFXLNetLMHeadModel"),F_t.forEach(t),ndr=r(B9e," (XLNet model)"),B9e.forEach(t),ue.forEach(t),sdr=i(_a),F_e=n(_a,"P",{});var T_t=s(F_e);ldr=r(T_t,"Examples:"),T_t.forEach(t),idr=i(_a),f(xy.$$.fragment,_a),_a.forEach(t),Ql.forEach(t),HBe=i(c),Cc=n(c,"H2",{class:!0});var aIe=s(Cc);a4=n(aIe,"A",{id:!0,class:!0,href:!0});var M_t=s(a4);T_e=n(M_t,"SPAN",{});var E_t=s(T_e);f(ky.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),ddr=i(aIe),M_e=n(aIe,"SPAN",{});var C_t=s(M_e);cdr=r(C_t,"TFAutoModelForImageClassification"),C_t.forEach(t),aIe.forEach(t),UBe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);f(Sy.$$.fragment,Hl),mdr=i(Hl),wc=n(Hl,"P",{});var wJ=s(wc);fdr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(wJ,"A",{href:!0});var w_t=s(iX);gdr=r(w_t,"from_pretrained()"),w_t.forEach(t),hdr=r(wJ," class method or the "),dX=n(wJ,"A",{href:!0});var A_t=s(dX);udr=r(A_t,"from_config()"),A_t.forEach(t),pdr=r(wJ,` class
method.`),wJ.forEach(t),_dr=i(Hl),Ry=n(Hl,"P",{});var nIe=s(Ry);bdr=r(nIe,"This class cannot be instantiated directly using "),E_e=n(nIe,"CODE",{});var y_t=s(E_e);vdr=r(y_t,"__init__()"),y_t.forEach(t),Fdr=r(nIe," (throws an error)."),nIe.forEach(t),Tdr=i(Hl),pt=n(Hl,"DIV",{class:!0});var Ul=s(pt);f(By.$$.fragment,Ul),Mdr=i(Ul),C_e=n(Ul,"P",{});var L_t=s(C_e);Edr=r(L_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),L_t.forEach(t),Cdr=i(Ul),Ac=n(Ul,"P",{});var AJ=s(Ac);wdr=r(AJ,`Note:
Loading a model from its configuration file does `),w_e=n(AJ,"STRONG",{});var x_t=s(w_e);Adr=r(x_t,"not"),x_t.forEach(t),ydr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(AJ,"A",{href:!0});var k_t=s(cX);Ldr=r(k_t,"from_pretrained()"),k_t.forEach(t),xdr=r(AJ," to load the model weights."),AJ.forEach(t),kdr=i(Ul),A_e=n(Ul,"P",{});var S_t=s(A_e);Sdr=r(S_t,"Examples:"),S_t.forEach(t),Rdr=i(Ul),f(Py.$$.fragment,Ul),Ul.forEach(t),Bdr=i(Hl),_o=n(Hl,"DIV",{class:!0});var ba=s(_o);f($y.$$.fragment,ba),Pdr=i(ba),y_e=n(ba,"P",{});var R_t=s(y_e);$dr=r(R_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),R_t.forEach(t),Idr=i(ba),Fn=n(ba,"P",{});var lw=s(Fn);qdr=r(lw,"The model class to instantiate is selected based on the "),L_e=n(lw,"CODE",{});var B_t=s(L_e);Ndr=r(B_t,"model_type"),B_t.forEach(t),jdr=r(lw,` property of the config object (either
passed as an argument or loaded from `),x_e=n(lw,"CODE",{});var P_t=s(x_e);Ddr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Gdr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(lw,"CODE",{});var $_t=s(k_e);Odr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Vdr=r(lw,":"),lw.forEach(t),Xdr=i(ba),Iy=n(ba,"UL",{});var sIe=s(Iy);n4=n(sIe,"LI",{});var P9e=s(n4);S_e=n(P9e,"STRONG",{});var I_t=s(S_e);zdr=r(I_t,"convnext"),I_t.forEach(t),Qdr=r(P9e," \u2014 "),mX=n(P9e,"A",{href:!0});var q_t=s(mX);Wdr=r(q_t,"TFConvNextForImageClassification"),q_t.forEach(t),Hdr=r(P9e," (ConvNext model)"),P9e.forEach(t),Udr=i(sIe),s4=n(sIe,"LI",{});var $9e=s(s4);R_e=n($9e,"STRONG",{});var N_t=s(R_e);Jdr=r(N_t,"vit"),N_t.forEach(t),Ydr=r($9e," \u2014 "),fX=n($9e,"A",{href:!0});var j_t=s(fX);Kdr=r(j_t,"TFViTForImageClassification"),j_t.forEach(t),Zdr=r($9e," (ViT model)"),$9e.forEach(t),sIe.forEach(t),ecr=i(ba),B_e=n(ba,"P",{});var D_t=s(B_e);ocr=r(D_t,"Examples:"),D_t.forEach(t),rcr=i(ba),f(qy.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),JBe=i(c),yc=n(c,"H2",{class:!0});var lIe=s(yc);l4=n(lIe,"A",{id:!0,class:!0,href:!0});var G_t=s(l4);P_e=n(G_t,"SPAN",{});var O_t=s(P_e);f(Ny.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),tcr=i(lIe),$_e=n(lIe,"SPAN",{});var V_t=s($_e);acr=r(V_t,"TFAutoModelForMaskedLM"),V_t.forEach(t),lIe.forEach(t),YBe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);f(jy.$$.fragment,Jl),ncr=i(Jl),Lc=n(Jl,"P",{});var yJ=s(Lc);scr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=n(yJ,"A",{href:!0});var X_t=s(gX);lcr=r(X_t,"from_pretrained()"),X_t.forEach(t),icr=r(yJ," class method or the "),hX=n(yJ,"A",{href:!0});var z_t=s(hX);dcr=r(z_t,"from_config()"),z_t.forEach(t),ccr=r(yJ,` class
method.`),yJ.forEach(t),mcr=i(Jl),Dy=n(Jl,"P",{});var iIe=s(Dy);fcr=r(iIe,"This class cannot be instantiated directly using "),I_e=n(iIe,"CODE",{});var Q_t=s(I_e);gcr=r(Q_t,"__init__()"),Q_t.forEach(t),hcr=r(iIe," (throws an error)."),iIe.forEach(t),ucr=i(Jl),_t=n(Jl,"DIV",{class:!0});var Yl=s(_t);f(Gy.$$.fragment,Yl),pcr=i(Yl),q_e=n(Yl,"P",{});var W_t=s(q_e);_cr=r(W_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W_t.forEach(t),bcr=i(Yl),xc=n(Yl,"P",{});var LJ=s(xc);vcr=r(LJ,`Note:
Loading a model from its configuration file does `),N_e=n(LJ,"STRONG",{});var H_t=s(N_e);Fcr=r(H_t,"not"),H_t.forEach(t),Tcr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(LJ,"A",{href:!0});var U_t=s(uX);Mcr=r(U_t,"from_pretrained()"),U_t.forEach(t),Ecr=r(LJ," to load the model weights."),LJ.forEach(t),Ccr=i(Yl),j_e=n(Yl,"P",{});var J_t=s(j_e);wcr=r(J_t,"Examples:"),J_t.forEach(t),Acr=i(Yl),f(Oy.$$.fragment,Yl),Yl.forEach(t),ycr=i(Jl),bo=n(Jl,"DIV",{class:!0});var va=s(bo);f(Vy.$$.fragment,va),Lcr=i(va),D_e=n(va,"P",{});var Y_t=s(D_e);xcr=r(Y_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y_t.forEach(t),kcr=i(va),Tn=n(va,"P",{});var iw=s(Tn);Scr=r(iw,"The model class to instantiate is selected based on the "),G_e=n(iw,"CODE",{});var K_t=s(G_e);Rcr=r(K_t,"model_type"),K_t.forEach(t),Bcr=r(iw,` property of the config object (either
passed as an argument or loaded from `),O_e=n(iw,"CODE",{});var Z_t=s(O_e);Pcr=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),$cr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(iw,"CODE",{});var ebt=s(V_e);Icr=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),qcr=r(iw,":"),iw.forEach(t),Ncr=i(va),J=n(va,"UL",{});var oe=s(J);i4=n(oe,"LI",{});var I9e=s(i4);X_e=n(I9e,"STRONG",{});var obt=s(X_e);jcr=r(obt,"albert"),obt.forEach(t),Dcr=r(I9e," \u2014 "),pX=n(I9e,"A",{href:!0});var rbt=s(pX);Gcr=r(rbt,"TFAlbertForMaskedLM"),rbt.forEach(t),Ocr=r(I9e," (ALBERT model)"),I9e.forEach(t),Vcr=i(oe),d4=n(oe,"LI",{});var q9e=s(d4);z_e=n(q9e,"STRONG",{});var tbt=s(z_e);Xcr=r(tbt,"bert"),tbt.forEach(t),zcr=r(q9e," \u2014 "),_X=n(q9e,"A",{href:!0});var abt=s(_X);Qcr=r(abt,"TFBertForMaskedLM"),abt.forEach(t),Wcr=r(q9e," (BERT model)"),q9e.forEach(t),Hcr=i(oe),c4=n(oe,"LI",{});var N9e=s(c4);Q_e=n(N9e,"STRONG",{});var nbt=s(Q_e);Ucr=r(nbt,"camembert"),nbt.forEach(t),Jcr=r(N9e," \u2014 "),bX=n(N9e,"A",{href:!0});var sbt=s(bX);Ycr=r(sbt,"TFCamembertForMaskedLM"),sbt.forEach(t),Kcr=r(N9e," (CamemBERT model)"),N9e.forEach(t),Zcr=i(oe),m4=n(oe,"LI",{});var j9e=s(m4);W_e=n(j9e,"STRONG",{});var lbt=s(W_e);emr=r(lbt,"convbert"),lbt.forEach(t),omr=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var ibt=s(vX);rmr=r(ibt,"TFConvBertForMaskedLM"),ibt.forEach(t),tmr=r(j9e," (ConvBERT model)"),j9e.forEach(t),amr=i(oe),f4=n(oe,"LI",{});var D9e=s(f4);H_e=n(D9e,"STRONG",{});var dbt=s(H_e);nmr=r(dbt,"deberta"),dbt.forEach(t),smr=r(D9e," \u2014 "),FX=n(D9e,"A",{href:!0});var cbt=s(FX);lmr=r(cbt,"TFDebertaForMaskedLM"),cbt.forEach(t),imr=r(D9e," (DeBERTa model)"),D9e.forEach(t),dmr=i(oe),g4=n(oe,"LI",{});var G9e=s(g4);U_e=n(G9e,"STRONG",{});var mbt=s(U_e);cmr=r(mbt,"deberta-v2"),mbt.forEach(t),mmr=r(G9e," \u2014 "),TX=n(G9e,"A",{href:!0});var fbt=s(TX);fmr=r(fbt,"TFDebertaV2ForMaskedLM"),fbt.forEach(t),gmr=r(G9e," (DeBERTa-v2 model)"),G9e.forEach(t),hmr=i(oe),h4=n(oe,"LI",{});var O9e=s(h4);J_e=n(O9e,"STRONG",{});var gbt=s(J_e);umr=r(gbt,"distilbert"),gbt.forEach(t),pmr=r(O9e," \u2014 "),MX=n(O9e,"A",{href:!0});var hbt=s(MX);_mr=r(hbt,"TFDistilBertForMaskedLM"),hbt.forEach(t),bmr=r(O9e," (DistilBERT model)"),O9e.forEach(t),vmr=i(oe),u4=n(oe,"LI",{});var V9e=s(u4);Y_e=n(V9e,"STRONG",{});var ubt=s(Y_e);Fmr=r(ubt,"electra"),ubt.forEach(t),Tmr=r(V9e," \u2014 "),EX=n(V9e,"A",{href:!0});var pbt=s(EX);Mmr=r(pbt,"TFElectraForMaskedLM"),pbt.forEach(t),Emr=r(V9e," (ELECTRA model)"),V9e.forEach(t),Cmr=i(oe),p4=n(oe,"LI",{});var X9e=s(p4);K_e=n(X9e,"STRONG",{});var _bt=s(K_e);wmr=r(_bt,"flaubert"),_bt.forEach(t),Amr=r(X9e," \u2014 "),CX=n(X9e,"A",{href:!0});var bbt=s(CX);ymr=r(bbt,"TFFlaubertWithLMHeadModel"),bbt.forEach(t),Lmr=r(X9e," (FlauBERT model)"),X9e.forEach(t),xmr=i(oe),_4=n(oe,"LI",{});var z9e=s(_4);Z_e=n(z9e,"STRONG",{});var vbt=s(Z_e);kmr=r(vbt,"funnel"),vbt.forEach(t),Smr=r(z9e," \u2014 "),wX=n(z9e,"A",{href:!0});var Fbt=s(wX);Rmr=r(Fbt,"TFFunnelForMaskedLM"),Fbt.forEach(t),Bmr=r(z9e," (Funnel Transformer model)"),z9e.forEach(t),Pmr=i(oe),b4=n(oe,"LI",{});var Q9e=s(b4);ebe=n(Q9e,"STRONG",{});var Tbt=s(ebe);$mr=r(Tbt,"layoutlm"),Tbt.forEach(t),Imr=r(Q9e," \u2014 "),AX=n(Q9e,"A",{href:!0});var Mbt=s(AX);qmr=r(Mbt,"TFLayoutLMForMaskedLM"),Mbt.forEach(t),Nmr=r(Q9e," (LayoutLM model)"),Q9e.forEach(t),jmr=i(oe),v4=n(oe,"LI",{});var W9e=s(v4);obe=n(W9e,"STRONG",{});var Ebt=s(obe);Dmr=r(Ebt,"longformer"),Ebt.forEach(t),Gmr=r(W9e," \u2014 "),yX=n(W9e,"A",{href:!0});var Cbt=s(yX);Omr=r(Cbt,"TFLongformerForMaskedLM"),Cbt.forEach(t),Vmr=r(W9e," (Longformer model)"),W9e.forEach(t),Xmr=i(oe),F4=n(oe,"LI",{});var H9e=s(F4);rbe=n(H9e,"STRONG",{});var wbt=s(rbe);zmr=r(wbt,"mobilebert"),wbt.forEach(t),Qmr=r(H9e," \u2014 "),LX=n(H9e,"A",{href:!0});var Abt=s(LX);Wmr=r(Abt,"TFMobileBertForMaskedLM"),Abt.forEach(t),Hmr=r(H9e," (MobileBERT model)"),H9e.forEach(t),Umr=i(oe),T4=n(oe,"LI",{});var U9e=s(T4);tbe=n(U9e,"STRONG",{});var ybt=s(tbe);Jmr=r(ybt,"mpnet"),ybt.forEach(t),Ymr=r(U9e," \u2014 "),xX=n(U9e,"A",{href:!0});var Lbt=s(xX);Kmr=r(Lbt,"TFMPNetForMaskedLM"),Lbt.forEach(t),Zmr=r(U9e," (MPNet model)"),U9e.forEach(t),efr=i(oe),M4=n(oe,"LI",{});var J9e=s(M4);abe=n(J9e,"STRONG",{});var xbt=s(abe);ofr=r(xbt,"rembert"),xbt.forEach(t),rfr=r(J9e," \u2014 "),kX=n(J9e,"A",{href:!0});var kbt=s(kX);tfr=r(kbt,"TFRemBertForMaskedLM"),kbt.forEach(t),afr=r(J9e," (RemBERT model)"),J9e.forEach(t),nfr=i(oe),E4=n(oe,"LI",{});var Y9e=s(E4);nbe=n(Y9e,"STRONG",{});var Sbt=s(nbe);sfr=r(Sbt,"roberta"),Sbt.forEach(t),lfr=r(Y9e," \u2014 "),SX=n(Y9e,"A",{href:!0});var Rbt=s(SX);ifr=r(Rbt,"TFRobertaForMaskedLM"),Rbt.forEach(t),dfr=r(Y9e," (RoBERTa model)"),Y9e.forEach(t),cfr=i(oe),C4=n(oe,"LI",{});var K9e=s(C4);sbe=n(K9e,"STRONG",{});var Bbt=s(sbe);mfr=r(Bbt,"roformer"),Bbt.forEach(t),ffr=r(K9e," \u2014 "),RX=n(K9e,"A",{href:!0});var Pbt=s(RX);gfr=r(Pbt,"TFRoFormerForMaskedLM"),Pbt.forEach(t),hfr=r(K9e," (RoFormer model)"),K9e.forEach(t),ufr=i(oe),w4=n(oe,"LI",{});var Z9e=s(w4);lbe=n(Z9e,"STRONG",{});var $bt=s(lbe);pfr=r($bt,"tapas"),$bt.forEach(t),_fr=r(Z9e," \u2014 "),BX=n(Z9e,"A",{href:!0});var Ibt=s(BX);bfr=r(Ibt,"TFTapasForMaskedLM"),Ibt.forEach(t),vfr=r(Z9e," (TAPAS model)"),Z9e.forEach(t),Ffr=i(oe),A4=n(oe,"LI",{});var exe=s(A4);ibe=n(exe,"STRONG",{});var qbt=s(ibe);Tfr=r(qbt,"xlm"),qbt.forEach(t),Mfr=r(exe," \u2014 "),PX=n(exe,"A",{href:!0});var Nbt=s(PX);Efr=r(Nbt,"TFXLMWithLMHeadModel"),Nbt.forEach(t),Cfr=r(exe," (XLM model)"),exe.forEach(t),wfr=i(oe),y4=n(oe,"LI",{});var oxe=s(y4);dbe=n(oxe,"STRONG",{});var jbt=s(dbe);Afr=r(jbt,"xlm-roberta"),jbt.forEach(t),yfr=r(oxe," \u2014 "),$X=n(oxe,"A",{href:!0});var Dbt=s($X);Lfr=r(Dbt,"TFXLMRobertaForMaskedLM"),Dbt.forEach(t),xfr=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),oe.forEach(t),kfr=i(va),cbe=n(va,"P",{});var Gbt=s(cbe);Sfr=r(Gbt,"Examples:"),Gbt.forEach(t),Rfr=i(va),f(Xy.$$.fragment,va),va.forEach(t),Jl.forEach(t),KBe=i(c),kc=n(c,"H2",{class:!0});var dIe=s(kc);L4=n(dIe,"A",{id:!0,class:!0,href:!0});var Obt=s(L4);mbe=n(Obt,"SPAN",{});var Vbt=s(mbe);f(zy.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),Bfr=i(dIe),fbe=n(dIe,"SPAN",{});var Xbt=s(fbe);Pfr=r(Xbt,"TFAutoModelForSeq2SeqLM"),Xbt.forEach(t),dIe.forEach(t),ZBe=i(c),Cr=n(c,"DIV",{class:!0});var Kl=s(Cr);f(Qy.$$.fragment,Kl),$fr=i(Kl),Sc=n(Kl,"P",{});var xJ=s(Sc);Ifr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(xJ,"A",{href:!0});var zbt=s(IX);qfr=r(zbt,"from_pretrained()"),zbt.forEach(t),Nfr=r(xJ," class method or the "),qX=n(xJ,"A",{href:!0});var Qbt=s(qX);jfr=r(Qbt,"from_config()"),Qbt.forEach(t),Dfr=r(xJ,` class
method.`),xJ.forEach(t),Gfr=i(Kl),Wy=n(Kl,"P",{});var cIe=s(Wy);Ofr=r(cIe,"This class cannot be instantiated directly using "),gbe=n(cIe,"CODE",{});var Wbt=s(gbe);Vfr=r(Wbt,"__init__()"),Wbt.forEach(t),Xfr=r(cIe," (throws an error)."),cIe.forEach(t),zfr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);f(Hy.$$.fragment,Zl),Qfr=i(Zl),hbe=n(Zl,"P",{});var Hbt=s(hbe);Wfr=r(Hbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hbt.forEach(t),Hfr=i(Zl),Rc=n(Zl,"P",{});var kJ=s(Rc);Ufr=r(kJ,`Note:
Loading a model from its configuration file does `),ube=n(kJ,"STRONG",{});var Ubt=s(ube);Jfr=r(Ubt,"not"),Ubt.forEach(t),Yfr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(kJ,"A",{href:!0});var Jbt=s(NX);Kfr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),Zfr=r(kJ," to load the model weights."),kJ.forEach(t),egr=i(Zl),pbe=n(Zl,"P",{});var Ybt=s(pbe);ogr=r(Ybt,"Examples:"),Ybt.forEach(t),rgr=i(Zl),f(Uy.$$.fragment,Zl),Zl.forEach(t),tgr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Fa=s(vo);f(Jy.$$.fragment,Fa),agr=i(Fa),_be=n(Fa,"P",{});var Kbt=s(_be);ngr=r(Kbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kbt.forEach(t),sgr=i(Fa),Mn=n(Fa,"P",{});var dw=s(Mn);lgr=r(dw,"The model class to instantiate is selected based on the "),bbe=n(dw,"CODE",{});var Zbt=s(bbe);igr=r(Zbt,"model_type"),Zbt.forEach(t),dgr=r(dw,` property of the config object (either
passed as an argument or loaded from `),vbe=n(dw,"CODE",{});var e2t=s(vbe);cgr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),mgr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(dw,"CODE",{});var o2t=s(Fbe);fgr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),ggr=r(dw,":"),dw.forEach(t),hgr=i(Fa),be=n(Fa,"UL",{});var we=s(be);x4=n(we,"LI",{});var rxe=s(x4);Tbe=n(rxe,"STRONG",{});var r2t=s(Tbe);ugr=r(r2t,"bart"),r2t.forEach(t),pgr=r(rxe," \u2014 "),jX=n(rxe,"A",{href:!0});var t2t=s(jX);_gr=r(t2t,"TFBartForConditionalGeneration"),t2t.forEach(t),bgr=r(rxe," (BART model)"),rxe.forEach(t),vgr=i(we),k4=n(we,"LI",{});var txe=s(k4);Mbe=n(txe,"STRONG",{});var a2t=s(Mbe);Fgr=r(a2t,"blenderbot"),a2t.forEach(t),Tgr=r(txe," \u2014 "),DX=n(txe,"A",{href:!0});var n2t=s(DX);Mgr=r(n2t,"TFBlenderbotForConditionalGeneration"),n2t.forEach(t),Egr=r(txe," (Blenderbot model)"),txe.forEach(t),Cgr=i(we),S4=n(we,"LI",{});var axe=s(S4);Ebe=n(axe,"STRONG",{});var s2t=s(Ebe);wgr=r(s2t,"blenderbot-small"),s2t.forEach(t),Agr=r(axe," \u2014 "),GX=n(axe,"A",{href:!0});var l2t=s(GX);ygr=r(l2t,"TFBlenderbotSmallForConditionalGeneration"),l2t.forEach(t),Lgr=r(axe," (BlenderbotSmall model)"),axe.forEach(t),xgr=i(we),R4=n(we,"LI",{});var nxe=s(R4);Cbe=n(nxe,"STRONG",{});var i2t=s(Cbe);kgr=r(i2t,"encoder-decoder"),i2t.forEach(t),Sgr=r(nxe," \u2014 "),OX=n(nxe,"A",{href:!0});var d2t=s(OX);Rgr=r(d2t,"TFEncoderDecoderModel"),d2t.forEach(t),Bgr=r(nxe," (Encoder decoder model)"),nxe.forEach(t),Pgr=i(we),B4=n(we,"LI",{});var sxe=s(B4);wbe=n(sxe,"STRONG",{});var c2t=s(wbe);$gr=r(c2t,"led"),c2t.forEach(t),Igr=r(sxe," \u2014 "),VX=n(sxe,"A",{href:!0});var m2t=s(VX);qgr=r(m2t,"TFLEDForConditionalGeneration"),m2t.forEach(t),Ngr=r(sxe," (LED model)"),sxe.forEach(t),jgr=i(we),P4=n(we,"LI",{});var lxe=s(P4);Abe=n(lxe,"STRONG",{});var f2t=s(Abe);Dgr=r(f2t,"marian"),f2t.forEach(t),Ggr=r(lxe," \u2014 "),XX=n(lxe,"A",{href:!0});var g2t=s(XX);Ogr=r(g2t,"TFMarianMTModel"),g2t.forEach(t),Vgr=r(lxe," (Marian model)"),lxe.forEach(t),Xgr=i(we),$4=n(we,"LI",{});var ixe=s($4);ybe=n(ixe,"STRONG",{});var h2t=s(ybe);zgr=r(h2t,"mbart"),h2t.forEach(t),Qgr=r(ixe," \u2014 "),zX=n(ixe,"A",{href:!0});var u2t=s(zX);Wgr=r(u2t,"TFMBartForConditionalGeneration"),u2t.forEach(t),Hgr=r(ixe," (mBART model)"),ixe.forEach(t),Ugr=i(we),I4=n(we,"LI",{});var dxe=s(I4);Lbe=n(dxe,"STRONG",{});var p2t=s(Lbe);Jgr=r(p2t,"mt5"),p2t.forEach(t),Ygr=r(dxe," \u2014 "),QX=n(dxe,"A",{href:!0});var _2t=s(QX);Kgr=r(_2t,"TFMT5ForConditionalGeneration"),_2t.forEach(t),Zgr=r(dxe," (mT5 model)"),dxe.forEach(t),ehr=i(we),q4=n(we,"LI",{});var cxe=s(q4);xbe=n(cxe,"STRONG",{});var b2t=s(xbe);ohr=r(b2t,"pegasus"),b2t.forEach(t),rhr=r(cxe," \u2014 "),WX=n(cxe,"A",{href:!0});var v2t=s(WX);thr=r(v2t,"TFPegasusForConditionalGeneration"),v2t.forEach(t),ahr=r(cxe," (Pegasus model)"),cxe.forEach(t),nhr=i(we),N4=n(we,"LI",{});var mxe=s(N4);kbe=n(mxe,"STRONG",{});var F2t=s(kbe);shr=r(F2t,"t5"),F2t.forEach(t),lhr=r(mxe," \u2014 "),HX=n(mxe,"A",{href:!0});var T2t=s(HX);ihr=r(T2t,"TFT5ForConditionalGeneration"),T2t.forEach(t),dhr=r(mxe," (T5 model)"),mxe.forEach(t),we.forEach(t),chr=i(Fa),Sbe=n(Fa,"P",{});var M2t=s(Sbe);mhr=r(M2t,"Examples:"),M2t.forEach(t),fhr=i(Fa),f(Yy.$$.fragment,Fa),Fa.forEach(t),Kl.forEach(t),ePe=i(c),Bc=n(c,"H2",{class:!0});var mIe=s(Bc);j4=n(mIe,"A",{id:!0,class:!0,href:!0});var E2t=s(j4);Rbe=n(E2t,"SPAN",{});var C2t=s(Rbe);f(Ky.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),ghr=i(mIe),Bbe=n(mIe,"SPAN",{});var w2t=s(Bbe);hhr=r(w2t,"TFAutoModelForSequenceClassification"),w2t.forEach(t),mIe.forEach(t),oPe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);f(Zy.$$.fragment,ei),uhr=i(ei),Pc=n(ei,"P",{});var SJ=s(Pc);phr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=n(SJ,"A",{href:!0});var A2t=s(UX);_hr=r(A2t,"from_pretrained()"),A2t.forEach(t),bhr=r(SJ," class method or the "),JX=n(SJ,"A",{href:!0});var y2t=s(JX);vhr=r(y2t,"from_config()"),y2t.forEach(t),Fhr=r(SJ,` class
method.`),SJ.forEach(t),Thr=i(ei),e8=n(ei,"P",{});var fIe=s(e8);Mhr=r(fIe,"This class cannot be instantiated directly using "),Pbe=n(fIe,"CODE",{});var L2t=s(Pbe);Ehr=r(L2t,"__init__()"),L2t.forEach(t),Chr=r(fIe," (throws an error)."),fIe.forEach(t),whr=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);f(o8.$$.fragment,oi),Ahr=i(oi),$be=n(oi,"P",{});var x2t=s($be);yhr=r(x2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x2t.forEach(t),Lhr=i(oi),$c=n(oi,"P",{});var RJ=s($c);xhr=r(RJ,`Note:
Loading a model from its configuration file does `),Ibe=n(RJ,"STRONG",{});var k2t=s(Ibe);khr=r(k2t,"not"),k2t.forEach(t),Shr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(RJ,"A",{href:!0});var S2t=s(YX);Rhr=r(S2t,"from_pretrained()"),S2t.forEach(t),Bhr=r(RJ," to load the model weights."),RJ.forEach(t),Phr=i(oi),qbe=n(oi,"P",{});var R2t=s(qbe);$hr=r(R2t,"Examples:"),R2t.forEach(t),Ihr=i(oi),f(r8.$$.fragment,oi),oi.forEach(t),qhr=i(ei),Fo=n(ei,"DIV",{class:!0});var Ta=s(Fo);f(t8.$$.fragment,Ta),Nhr=i(Ta),Nbe=n(Ta,"P",{});var B2t=s(Nbe);jhr=r(B2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B2t.forEach(t),Dhr=i(Ta),En=n(Ta,"P",{});var cw=s(En);Ghr=r(cw,"The model class to instantiate is selected based on the "),jbe=n(cw,"CODE",{});var P2t=s(jbe);Ohr=r(P2t,"model_type"),P2t.forEach(t),Vhr=r(cw,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(cw,"CODE",{});var $2t=s(Dbe);Xhr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),zhr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(cw,"CODE",{});var I2t=s(Gbe);Qhr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Whr=r(cw,":"),cw.forEach(t),Hhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);D4=n(Q,"LI",{});var fxe=s(D4);Obe=n(fxe,"STRONG",{});var q2t=s(Obe);Uhr=r(q2t,"albert"),q2t.forEach(t),Jhr=r(fxe," \u2014 "),KX=n(fxe,"A",{href:!0});var N2t=s(KX);Yhr=r(N2t,"TFAlbertForSequenceClassification"),N2t.forEach(t),Khr=r(fxe," (ALBERT model)"),fxe.forEach(t),Zhr=i(Q),G4=n(Q,"LI",{});var gxe=s(G4);Vbe=n(gxe,"STRONG",{});var j2t=s(Vbe);eur=r(j2t,"bert"),j2t.forEach(t),our=r(gxe," \u2014 "),ZX=n(gxe,"A",{href:!0});var D2t=s(ZX);rur=r(D2t,"TFBertForSequenceClassification"),D2t.forEach(t),tur=r(gxe," (BERT model)"),gxe.forEach(t),aur=i(Q),O4=n(Q,"LI",{});var hxe=s(O4);Xbe=n(hxe,"STRONG",{});var G2t=s(Xbe);nur=r(G2t,"camembert"),G2t.forEach(t),sur=r(hxe," \u2014 "),ez=n(hxe,"A",{href:!0});var O2t=s(ez);lur=r(O2t,"TFCamembertForSequenceClassification"),O2t.forEach(t),iur=r(hxe," (CamemBERT model)"),hxe.forEach(t),dur=i(Q),V4=n(Q,"LI",{});var uxe=s(V4);zbe=n(uxe,"STRONG",{});var V2t=s(zbe);cur=r(V2t,"convbert"),V2t.forEach(t),mur=r(uxe," \u2014 "),oz=n(uxe,"A",{href:!0});var X2t=s(oz);fur=r(X2t,"TFConvBertForSequenceClassification"),X2t.forEach(t),gur=r(uxe," (ConvBERT model)"),uxe.forEach(t),hur=i(Q),X4=n(Q,"LI",{});var pxe=s(X4);Qbe=n(pxe,"STRONG",{});var z2t=s(Qbe);uur=r(z2t,"ctrl"),z2t.forEach(t),pur=r(pxe," \u2014 "),rz=n(pxe,"A",{href:!0});var Q2t=s(rz);_ur=r(Q2t,"TFCTRLForSequenceClassification"),Q2t.forEach(t),bur=r(pxe," (CTRL model)"),pxe.forEach(t),vur=i(Q),z4=n(Q,"LI",{});var _xe=s(z4);Wbe=n(_xe,"STRONG",{});var W2t=s(Wbe);Fur=r(W2t,"deberta"),W2t.forEach(t),Tur=r(_xe," \u2014 "),tz=n(_xe,"A",{href:!0});var H2t=s(tz);Mur=r(H2t,"TFDebertaForSequenceClassification"),H2t.forEach(t),Eur=r(_xe," (DeBERTa model)"),_xe.forEach(t),Cur=i(Q),Q4=n(Q,"LI",{});var bxe=s(Q4);Hbe=n(bxe,"STRONG",{});var U2t=s(Hbe);wur=r(U2t,"deberta-v2"),U2t.forEach(t),Aur=r(bxe," \u2014 "),az=n(bxe,"A",{href:!0});var J2t=s(az);yur=r(J2t,"TFDebertaV2ForSequenceClassification"),J2t.forEach(t),Lur=r(bxe," (DeBERTa-v2 model)"),bxe.forEach(t),xur=i(Q),W4=n(Q,"LI",{});var vxe=s(W4);Ube=n(vxe,"STRONG",{});var Y2t=s(Ube);kur=r(Y2t,"distilbert"),Y2t.forEach(t),Sur=r(vxe," \u2014 "),nz=n(vxe,"A",{href:!0});var K2t=s(nz);Rur=r(K2t,"TFDistilBertForSequenceClassification"),K2t.forEach(t),Bur=r(vxe," (DistilBERT model)"),vxe.forEach(t),Pur=i(Q),H4=n(Q,"LI",{});var Fxe=s(H4);Jbe=n(Fxe,"STRONG",{});var Z2t=s(Jbe);$ur=r(Z2t,"electra"),Z2t.forEach(t),Iur=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var evt=s(sz);qur=r(evt,"TFElectraForSequenceClassification"),evt.forEach(t),Nur=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),jur=i(Q),U4=n(Q,"LI",{});var Txe=s(U4);Ybe=n(Txe,"STRONG",{});var ovt=s(Ybe);Dur=r(ovt,"flaubert"),ovt.forEach(t),Gur=r(Txe," \u2014 "),lz=n(Txe,"A",{href:!0});var rvt=s(lz);Our=r(rvt,"TFFlaubertForSequenceClassification"),rvt.forEach(t),Vur=r(Txe," (FlauBERT model)"),Txe.forEach(t),Xur=i(Q),J4=n(Q,"LI",{});var Mxe=s(J4);Kbe=n(Mxe,"STRONG",{});var tvt=s(Kbe);zur=r(tvt,"funnel"),tvt.forEach(t),Qur=r(Mxe," \u2014 "),iz=n(Mxe,"A",{href:!0});var avt=s(iz);Wur=r(avt,"TFFunnelForSequenceClassification"),avt.forEach(t),Hur=r(Mxe," (Funnel Transformer model)"),Mxe.forEach(t),Uur=i(Q),Y4=n(Q,"LI",{});var Exe=s(Y4);Zbe=n(Exe,"STRONG",{});var nvt=s(Zbe);Jur=r(nvt,"gpt2"),nvt.forEach(t),Yur=r(Exe," \u2014 "),dz=n(Exe,"A",{href:!0});var svt=s(dz);Kur=r(svt,"TFGPT2ForSequenceClassification"),svt.forEach(t),Zur=r(Exe," (OpenAI GPT-2 model)"),Exe.forEach(t),epr=i(Q),K4=n(Q,"LI",{});var Cxe=s(K4);e2e=n(Cxe,"STRONG",{});var lvt=s(e2e);opr=r(lvt,"gptj"),lvt.forEach(t),rpr=r(Cxe," \u2014 "),cz=n(Cxe,"A",{href:!0});var ivt=s(cz);tpr=r(ivt,"TFGPTJForSequenceClassification"),ivt.forEach(t),apr=r(Cxe," (GPT-J model)"),Cxe.forEach(t),npr=i(Q),Z4=n(Q,"LI",{});var wxe=s(Z4);o2e=n(wxe,"STRONG",{});var dvt=s(o2e);spr=r(dvt,"layoutlm"),dvt.forEach(t),lpr=r(wxe," \u2014 "),mz=n(wxe,"A",{href:!0});var cvt=s(mz);ipr=r(cvt,"TFLayoutLMForSequenceClassification"),cvt.forEach(t),dpr=r(wxe," (LayoutLM model)"),wxe.forEach(t),cpr=i(Q),eE=n(Q,"LI",{});var Axe=s(eE);r2e=n(Axe,"STRONG",{});var mvt=s(r2e);mpr=r(mvt,"longformer"),mvt.forEach(t),fpr=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var fvt=s(fz);gpr=r(fvt,"TFLongformerForSequenceClassification"),fvt.forEach(t),hpr=r(Axe," (Longformer model)"),Axe.forEach(t),upr=i(Q),oE=n(Q,"LI",{});var yxe=s(oE);t2e=n(yxe,"STRONG",{});var gvt=s(t2e);ppr=r(gvt,"mobilebert"),gvt.forEach(t),_pr=r(yxe," \u2014 "),gz=n(yxe,"A",{href:!0});var hvt=s(gz);bpr=r(hvt,"TFMobileBertForSequenceClassification"),hvt.forEach(t),vpr=r(yxe," (MobileBERT model)"),yxe.forEach(t),Fpr=i(Q),rE=n(Q,"LI",{});var Lxe=s(rE);a2e=n(Lxe,"STRONG",{});var uvt=s(a2e);Tpr=r(uvt,"mpnet"),uvt.forEach(t),Mpr=r(Lxe," \u2014 "),hz=n(Lxe,"A",{href:!0});var pvt=s(hz);Epr=r(pvt,"TFMPNetForSequenceClassification"),pvt.forEach(t),Cpr=r(Lxe," (MPNet model)"),Lxe.forEach(t),wpr=i(Q),tE=n(Q,"LI",{});var xxe=s(tE);n2e=n(xxe,"STRONG",{});var _vt=s(n2e);Apr=r(_vt,"openai-gpt"),_vt.forEach(t),ypr=r(xxe," \u2014 "),uz=n(xxe,"A",{href:!0});var bvt=s(uz);Lpr=r(bvt,"TFOpenAIGPTForSequenceClassification"),bvt.forEach(t),xpr=r(xxe," (OpenAI GPT model)"),xxe.forEach(t),kpr=i(Q),aE=n(Q,"LI",{});var kxe=s(aE);s2e=n(kxe,"STRONG",{});var vvt=s(s2e);Spr=r(vvt,"rembert"),vvt.forEach(t),Rpr=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var Fvt=s(pz);Bpr=r(Fvt,"TFRemBertForSequenceClassification"),Fvt.forEach(t),Ppr=r(kxe," (RemBERT model)"),kxe.forEach(t),$pr=i(Q),nE=n(Q,"LI",{});var Sxe=s(nE);l2e=n(Sxe,"STRONG",{});var Tvt=s(l2e);Ipr=r(Tvt,"roberta"),Tvt.forEach(t),qpr=r(Sxe," \u2014 "),_z=n(Sxe,"A",{href:!0});var Mvt=s(_z);Npr=r(Mvt,"TFRobertaForSequenceClassification"),Mvt.forEach(t),jpr=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),Dpr=i(Q),sE=n(Q,"LI",{});var Rxe=s(sE);i2e=n(Rxe,"STRONG",{});var Evt=s(i2e);Gpr=r(Evt,"roformer"),Evt.forEach(t),Opr=r(Rxe," \u2014 "),bz=n(Rxe,"A",{href:!0});var Cvt=s(bz);Vpr=r(Cvt,"TFRoFormerForSequenceClassification"),Cvt.forEach(t),Xpr=r(Rxe," (RoFormer model)"),Rxe.forEach(t),zpr=i(Q),lE=n(Q,"LI",{});var Bxe=s(lE);d2e=n(Bxe,"STRONG",{});var wvt=s(d2e);Qpr=r(wvt,"tapas"),wvt.forEach(t),Wpr=r(Bxe," \u2014 "),vz=n(Bxe,"A",{href:!0});var Avt=s(vz);Hpr=r(Avt,"TFTapasForSequenceClassification"),Avt.forEach(t),Upr=r(Bxe," (TAPAS model)"),Bxe.forEach(t),Jpr=i(Q),iE=n(Q,"LI",{});var Pxe=s(iE);c2e=n(Pxe,"STRONG",{});var yvt=s(c2e);Ypr=r(yvt,"transfo-xl"),yvt.forEach(t),Kpr=r(Pxe," \u2014 "),Fz=n(Pxe,"A",{href:!0});var Lvt=s(Fz);Zpr=r(Lvt,"TFTransfoXLForSequenceClassification"),Lvt.forEach(t),e_r=r(Pxe," (Transformer-XL model)"),Pxe.forEach(t),o_r=i(Q),dE=n(Q,"LI",{});var $xe=s(dE);m2e=n($xe,"STRONG",{});var xvt=s(m2e);r_r=r(xvt,"xlm"),xvt.forEach(t),t_r=r($xe," \u2014 "),Tz=n($xe,"A",{href:!0});var kvt=s(Tz);a_r=r(kvt,"TFXLMForSequenceClassification"),kvt.forEach(t),n_r=r($xe," (XLM model)"),$xe.forEach(t),s_r=i(Q),cE=n(Q,"LI",{});var Ixe=s(cE);f2e=n(Ixe,"STRONG",{});var Svt=s(f2e);l_r=r(Svt,"xlm-roberta"),Svt.forEach(t),i_r=r(Ixe," \u2014 "),Mz=n(Ixe,"A",{href:!0});var Rvt=s(Mz);d_r=r(Rvt,"TFXLMRobertaForSequenceClassification"),Rvt.forEach(t),c_r=r(Ixe," (XLM-RoBERTa model)"),Ixe.forEach(t),m_r=i(Q),mE=n(Q,"LI",{});var qxe=s(mE);g2e=n(qxe,"STRONG",{});var Bvt=s(g2e);f_r=r(Bvt,"xlnet"),Bvt.forEach(t),g_r=r(qxe," \u2014 "),Ez=n(qxe,"A",{href:!0});var Pvt=s(Ez);h_r=r(Pvt,"TFXLNetForSequenceClassification"),Pvt.forEach(t),u_r=r(qxe," (XLNet model)"),qxe.forEach(t),Q.forEach(t),p_r=i(Ta),h2e=n(Ta,"P",{});var $vt=s(h2e);__r=r($vt,"Examples:"),$vt.forEach(t),b_r=i(Ta),f(a8.$$.fragment,Ta),Ta.forEach(t),ei.forEach(t),rPe=i(c),Ic=n(c,"H2",{class:!0});var gIe=s(Ic);fE=n(gIe,"A",{id:!0,class:!0,href:!0});var Ivt=s(fE);u2e=n(Ivt,"SPAN",{});var qvt=s(u2e);f(n8.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),v_r=i(gIe),p2e=n(gIe,"SPAN",{});var Nvt=s(p2e);F_r=r(Nvt,"TFAutoModelForMultipleChoice"),Nvt.forEach(t),gIe.forEach(t),tPe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);f(s8.$$.fragment,ri),T_r=i(ri),qc=n(ri,"P",{});var BJ=s(qc);M_r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=n(BJ,"A",{href:!0});var jvt=s(Cz);E_r=r(jvt,"from_pretrained()"),jvt.forEach(t),C_r=r(BJ," class method or the "),wz=n(BJ,"A",{href:!0});var Dvt=s(wz);w_r=r(Dvt,"from_config()"),Dvt.forEach(t),A_r=r(BJ,` class
method.`),BJ.forEach(t),y_r=i(ri),l8=n(ri,"P",{});var hIe=s(l8);L_r=r(hIe,"This class cannot be instantiated directly using "),_2e=n(hIe,"CODE",{});var Gvt=s(_2e);x_r=r(Gvt,"__init__()"),Gvt.forEach(t),k_r=r(hIe," (throws an error)."),hIe.forEach(t),S_r=i(ri),Ft=n(ri,"DIV",{class:!0});var ti=s(Ft);f(i8.$$.fragment,ti),R_r=i(ti),b2e=n(ti,"P",{});var Ovt=s(b2e);B_r=r(Ovt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ovt.forEach(t),P_r=i(ti),Nc=n(ti,"P",{});var PJ=s(Nc);$_r=r(PJ,`Note:
Loading a model from its configuration file does `),v2e=n(PJ,"STRONG",{});var Vvt=s(v2e);I_r=r(Vvt,"not"),Vvt.forEach(t),q_r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(PJ,"A",{href:!0});var Xvt=s(Az);N_r=r(Xvt,"from_pretrained()"),Xvt.forEach(t),j_r=r(PJ," to load the model weights."),PJ.forEach(t),D_r=i(ti),F2e=n(ti,"P",{});var zvt=s(F2e);G_r=r(zvt,"Examples:"),zvt.forEach(t),O_r=i(ti),f(d8.$$.fragment,ti),ti.forEach(t),V_r=i(ri),To=n(ri,"DIV",{class:!0});var Ma=s(To);f(c8.$$.fragment,Ma),X_r=i(Ma),T2e=n(Ma,"P",{});var Qvt=s(T2e);z_r=r(Qvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qvt.forEach(t),Q_r=i(Ma),Cn=n(Ma,"P",{});var mw=s(Cn);W_r=r(mw,"The model class to instantiate is selected based on the "),M2e=n(mw,"CODE",{});var Wvt=s(M2e);H_r=r(Wvt,"model_type"),Wvt.forEach(t),U_r=r(mw,` property of the config object (either
passed as an argument or loaded from `),E2e=n(mw,"CODE",{});var Hvt=s(E2e);J_r=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Y_r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C2e=n(mw,"CODE",{});var Uvt=s(C2e);K_r=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),Z_r=r(mw,":"),mw.forEach(t),ebr=i(Ma),se=n(Ma,"UL",{});var ie=s(se);gE=n(ie,"LI",{});var Nxe=s(gE);w2e=n(Nxe,"STRONG",{});var Jvt=s(w2e);obr=r(Jvt,"albert"),Jvt.forEach(t),rbr=r(Nxe," \u2014 "),yz=n(Nxe,"A",{href:!0});var Yvt=s(yz);tbr=r(Yvt,"TFAlbertForMultipleChoice"),Yvt.forEach(t),abr=r(Nxe," (ALBERT model)"),Nxe.forEach(t),nbr=i(ie),hE=n(ie,"LI",{});var jxe=s(hE);A2e=n(jxe,"STRONG",{});var Kvt=s(A2e);sbr=r(Kvt,"bert"),Kvt.forEach(t),lbr=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var Zvt=s(Lz);ibr=r(Zvt,"TFBertForMultipleChoice"),Zvt.forEach(t),dbr=r(jxe," (BERT model)"),jxe.forEach(t),cbr=i(ie),uE=n(ie,"LI",{});var Dxe=s(uE);y2e=n(Dxe,"STRONG",{});var eFt=s(y2e);mbr=r(eFt,"camembert"),eFt.forEach(t),fbr=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var oFt=s(xz);gbr=r(oFt,"TFCamembertForMultipleChoice"),oFt.forEach(t),hbr=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),ubr=i(ie),pE=n(ie,"LI",{});var Gxe=s(pE);L2e=n(Gxe,"STRONG",{});var rFt=s(L2e);pbr=r(rFt,"convbert"),rFt.forEach(t),_br=r(Gxe," \u2014 "),kz=n(Gxe,"A",{href:!0});var tFt=s(kz);bbr=r(tFt,"TFConvBertForMultipleChoice"),tFt.forEach(t),vbr=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),Fbr=i(ie),_E=n(ie,"LI",{});var Oxe=s(_E);x2e=n(Oxe,"STRONG",{});var aFt=s(x2e);Tbr=r(aFt,"distilbert"),aFt.forEach(t),Mbr=r(Oxe," \u2014 "),Sz=n(Oxe,"A",{href:!0});var nFt=s(Sz);Ebr=r(nFt,"TFDistilBertForMultipleChoice"),nFt.forEach(t),Cbr=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),wbr=i(ie),bE=n(ie,"LI",{});var Vxe=s(bE);k2e=n(Vxe,"STRONG",{});var sFt=s(k2e);Abr=r(sFt,"electra"),sFt.forEach(t),ybr=r(Vxe," \u2014 "),Rz=n(Vxe,"A",{href:!0});var lFt=s(Rz);Lbr=r(lFt,"TFElectraForMultipleChoice"),lFt.forEach(t),xbr=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),kbr=i(ie),vE=n(ie,"LI",{});var Xxe=s(vE);S2e=n(Xxe,"STRONG",{});var iFt=s(S2e);Sbr=r(iFt,"flaubert"),iFt.forEach(t),Rbr=r(Xxe," \u2014 "),Bz=n(Xxe,"A",{href:!0});var dFt=s(Bz);Bbr=r(dFt,"TFFlaubertForMultipleChoice"),dFt.forEach(t),Pbr=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),$br=i(ie),FE=n(ie,"LI",{});var zxe=s(FE);R2e=n(zxe,"STRONG",{});var cFt=s(R2e);Ibr=r(cFt,"funnel"),cFt.forEach(t),qbr=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var mFt=s(Pz);Nbr=r(mFt,"TFFunnelForMultipleChoice"),mFt.forEach(t),jbr=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),Dbr=i(ie),TE=n(ie,"LI",{});var Qxe=s(TE);B2e=n(Qxe,"STRONG",{});var fFt=s(B2e);Gbr=r(fFt,"longformer"),fFt.forEach(t),Obr=r(Qxe," \u2014 "),$z=n(Qxe,"A",{href:!0});var gFt=s($z);Vbr=r(gFt,"TFLongformerForMultipleChoice"),gFt.forEach(t),Xbr=r(Qxe," (Longformer model)"),Qxe.forEach(t),zbr=i(ie),ME=n(ie,"LI",{});var Wxe=s(ME);P2e=n(Wxe,"STRONG",{});var hFt=s(P2e);Qbr=r(hFt,"mobilebert"),hFt.forEach(t),Wbr=r(Wxe," \u2014 "),Iz=n(Wxe,"A",{href:!0});var uFt=s(Iz);Hbr=r(uFt,"TFMobileBertForMultipleChoice"),uFt.forEach(t),Ubr=r(Wxe," (MobileBERT model)"),Wxe.forEach(t),Jbr=i(ie),EE=n(ie,"LI",{});var Hxe=s(EE);$2e=n(Hxe,"STRONG",{});var pFt=s($2e);Ybr=r(pFt,"mpnet"),pFt.forEach(t),Kbr=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var _Ft=s(qz);Zbr=r(_Ft,"TFMPNetForMultipleChoice"),_Ft.forEach(t),e2r=r(Hxe," (MPNet model)"),Hxe.forEach(t),o2r=i(ie),CE=n(ie,"LI",{});var Uxe=s(CE);I2e=n(Uxe,"STRONG",{});var bFt=s(I2e);r2r=r(bFt,"rembert"),bFt.forEach(t),t2r=r(Uxe," \u2014 "),Nz=n(Uxe,"A",{href:!0});var vFt=s(Nz);a2r=r(vFt,"TFRemBertForMultipleChoice"),vFt.forEach(t),n2r=r(Uxe," (RemBERT model)"),Uxe.forEach(t),s2r=i(ie),wE=n(ie,"LI",{});var Jxe=s(wE);q2e=n(Jxe,"STRONG",{});var FFt=s(q2e);l2r=r(FFt,"roberta"),FFt.forEach(t),i2r=r(Jxe," \u2014 "),jz=n(Jxe,"A",{href:!0});var TFt=s(jz);d2r=r(TFt,"TFRobertaForMultipleChoice"),TFt.forEach(t),c2r=r(Jxe," (RoBERTa model)"),Jxe.forEach(t),m2r=i(ie),AE=n(ie,"LI",{});var Yxe=s(AE);N2e=n(Yxe,"STRONG",{});var MFt=s(N2e);f2r=r(MFt,"roformer"),MFt.forEach(t),g2r=r(Yxe," \u2014 "),Dz=n(Yxe,"A",{href:!0});var EFt=s(Dz);h2r=r(EFt,"TFRoFormerForMultipleChoice"),EFt.forEach(t),u2r=r(Yxe," (RoFormer model)"),Yxe.forEach(t),p2r=i(ie),yE=n(ie,"LI",{});var Kxe=s(yE);j2e=n(Kxe,"STRONG",{});var CFt=s(j2e);_2r=r(CFt,"xlm"),CFt.forEach(t),b2r=r(Kxe," \u2014 "),Gz=n(Kxe,"A",{href:!0});var wFt=s(Gz);v2r=r(wFt,"TFXLMForMultipleChoice"),wFt.forEach(t),F2r=r(Kxe," (XLM model)"),Kxe.forEach(t),T2r=i(ie),LE=n(ie,"LI",{});var Zxe=s(LE);D2e=n(Zxe,"STRONG",{});var AFt=s(D2e);M2r=r(AFt,"xlm-roberta"),AFt.forEach(t),E2r=r(Zxe," \u2014 "),Oz=n(Zxe,"A",{href:!0});var yFt=s(Oz);C2r=r(yFt,"TFXLMRobertaForMultipleChoice"),yFt.forEach(t),w2r=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),A2r=i(ie),xE=n(ie,"LI",{});var eke=s(xE);G2e=n(eke,"STRONG",{});var LFt=s(G2e);y2r=r(LFt,"xlnet"),LFt.forEach(t),L2r=r(eke," \u2014 "),Vz=n(eke,"A",{href:!0});var xFt=s(Vz);x2r=r(xFt,"TFXLNetForMultipleChoice"),xFt.forEach(t),k2r=r(eke," (XLNet model)"),eke.forEach(t),ie.forEach(t),S2r=i(Ma),O2e=n(Ma,"P",{});var kFt=s(O2e);R2r=r(kFt,"Examples:"),kFt.forEach(t),B2r=i(Ma),f(m8.$$.fragment,Ma),Ma.forEach(t),ri.forEach(t),aPe=i(c),jc=n(c,"H2",{class:!0});var uIe=s(jc);kE=n(uIe,"A",{id:!0,class:!0,href:!0});var SFt=s(kE);V2e=n(SFt,"SPAN",{});var RFt=s(V2e);f(f8.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),P2r=i(uIe),X2e=n(uIe,"SPAN",{});var BFt=s(X2e);$2r=r(BFt,"TFAutoModelForTableQuestionAnswering"),BFt.forEach(t),uIe.forEach(t),nPe=i(c),yr=n(c,"DIV",{class:!0});var ai=s(yr);f(g8.$$.fragment,ai),I2r=i(ai),Dc=n(ai,"P",{});var $J=s(Dc);q2r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n($J,"A",{href:!0});var PFt=s(Xz);N2r=r(PFt,"from_pretrained()"),PFt.forEach(t),j2r=r($J," class method or the "),zz=n($J,"A",{href:!0});var $Ft=s(zz);D2r=r($Ft,"from_config()"),$Ft.forEach(t),G2r=r($J,` class
method.`),$J.forEach(t),O2r=i(ai),h8=n(ai,"P",{});var pIe=s(h8);V2r=r(pIe,"This class cannot be instantiated directly using "),z2e=n(pIe,"CODE",{});var IFt=s(z2e);X2r=r(IFt,"__init__()"),IFt.forEach(t),z2r=r(pIe," (throws an error)."),pIe.forEach(t),Q2r=i(ai),Tt=n(ai,"DIV",{class:!0});var ni=s(Tt);f(u8.$$.fragment,ni),W2r=i(ni),Q2e=n(ni,"P",{});var qFt=s(Q2e);H2r=r(qFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qFt.forEach(t),U2r=i(ni),Gc=n(ni,"P",{});var IJ=s(Gc);J2r=r(IJ,`Note:
Loading a model from its configuration file does `),W2e=n(IJ,"STRONG",{});var NFt=s(W2e);Y2r=r(NFt,"not"),NFt.forEach(t),K2r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(IJ,"A",{href:!0});var jFt=s(Qz);Z2r=r(jFt,"from_pretrained()"),jFt.forEach(t),evr=r(IJ," to load the model weights."),IJ.forEach(t),ovr=i(ni),H2e=n(ni,"P",{});var DFt=s(H2e);rvr=r(DFt,"Examples:"),DFt.forEach(t),tvr=i(ni),f(p8.$$.fragment,ni),ni.forEach(t),avr=i(ai),Mo=n(ai,"DIV",{class:!0});var Ea=s(Mo);f(_8.$$.fragment,Ea),nvr=i(Ea),U2e=n(Ea,"P",{});var GFt=s(U2e);svr=r(GFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GFt.forEach(t),lvr=i(Ea),wn=n(Ea,"P",{});var fw=s(wn);ivr=r(fw,"The model class to instantiate is selected based on the "),J2e=n(fw,"CODE",{});var OFt=s(J2e);dvr=r(OFt,"model_type"),OFt.forEach(t),cvr=r(fw,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(fw,"CODE",{});var VFt=s(Y2e);mvr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),fvr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(fw,"CODE",{});var XFt=s(K2e);gvr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),hvr=r(fw,":"),fw.forEach(t),uvr=i(Ea),Z2e=n(Ea,"UL",{});var zFt=s(Z2e);SE=n(zFt,"LI",{});var oke=s(SE);eve=n(oke,"STRONG",{});var QFt=s(eve);pvr=r(QFt,"tapas"),QFt.forEach(t),_vr=r(oke," \u2014 "),Wz=n(oke,"A",{href:!0});var WFt=s(Wz);bvr=r(WFt,"TFTapasForQuestionAnswering"),WFt.forEach(t),vvr=r(oke," (TAPAS model)"),oke.forEach(t),zFt.forEach(t),Fvr=i(Ea),ove=n(Ea,"P",{});var HFt=s(ove);Tvr=r(HFt,"Examples:"),HFt.forEach(t),Mvr=i(Ea),f(b8.$$.fragment,Ea),Ea.forEach(t),ai.forEach(t),sPe=i(c),Oc=n(c,"H2",{class:!0});var _Ie=s(Oc);RE=n(_Ie,"A",{id:!0,class:!0,href:!0});var UFt=s(RE);rve=n(UFt,"SPAN",{});var JFt=s(rve);f(v8.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),Evr=i(_Ie),tve=n(_Ie,"SPAN",{});var YFt=s(tve);Cvr=r(YFt,"TFAutoModelForTokenClassification"),YFt.forEach(t),_Ie.forEach(t),lPe=i(c),Lr=n(c,"DIV",{class:!0});var si=s(Lr);f(F8.$$.fragment,si),wvr=i(si),Vc=n(si,"P",{});var qJ=s(Vc);Avr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=n(qJ,"A",{href:!0});var KFt=s(Hz);yvr=r(KFt,"from_pretrained()"),KFt.forEach(t),Lvr=r(qJ," class method or the "),Uz=n(qJ,"A",{href:!0});var ZFt=s(Uz);xvr=r(ZFt,"from_config()"),ZFt.forEach(t),kvr=r(qJ,` class
method.`),qJ.forEach(t),Svr=i(si),T8=n(si,"P",{});var bIe=s(T8);Rvr=r(bIe,"This class cannot be instantiated directly using "),ave=n(bIe,"CODE",{});var e1t=s(ave);Bvr=r(e1t,"__init__()"),e1t.forEach(t),Pvr=r(bIe," (throws an error)."),bIe.forEach(t),$vr=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);f(M8.$$.fragment,li),Ivr=i(li),nve=n(li,"P",{});var o1t=s(nve);qvr=r(o1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o1t.forEach(t),Nvr=i(li),Xc=n(li,"P",{});var NJ=s(Xc);jvr=r(NJ,`Note:
Loading a model from its configuration file does `),sve=n(NJ,"STRONG",{});var r1t=s(sve);Dvr=r(r1t,"not"),r1t.forEach(t),Gvr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(NJ,"A",{href:!0});var t1t=s(Jz);Ovr=r(t1t,"from_pretrained()"),t1t.forEach(t),Vvr=r(NJ," to load the model weights."),NJ.forEach(t),Xvr=i(li),lve=n(li,"P",{});var a1t=s(lve);zvr=r(a1t,"Examples:"),a1t.forEach(t),Qvr=i(li),f(E8.$$.fragment,li),li.forEach(t),Wvr=i(si),Eo=n(si,"DIV",{class:!0});var Ca=s(Eo);f(C8.$$.fragment,Ca),Hvr=i(Ca),ive=n(Ca,"P",{});var n1t=s(ive);Uvr=r(n1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n1t.forEach(t),Jvr=i(Ca),An=n(Ca,"P",{});var gw=s(An);Yvr=r(gw,"The model class to instantiate is selected based on the "),dve=n(gw,"CODE",{});var s1t=s(dve);Kvr=r(s1t,"model_type"),s1t.forEach(t),Zvr=r(gw,` property of the config object (either
passed as an argument or loaded from `),cve=n(gw,"CODE",{});var l1t=s(cve);eFr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),oFr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(gw,"CODE",{});var i1t=s(mve);rFr=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),tFr=r(gw,":"),gw.forEach(t),aFr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);BE=n(re,"LI",{});var rke=s(BE);fve=n(rke,"STRONG",{});var d1t=s(fve);nFr=r(d1t,"albert"),d1t.forEach(t),sFr=r(rke," \u2014 "),Yz=n(rke,"A",{href:!0});var c1t=s(Yz);lFr=r(c1t,"TFAlbertForTokenClassification"),c1t.forEach(t),iFr=r(rke," (ALBERT model)"),rke.forEach(t),dFr=i(re),PE=n(re,"LI",{});var tke=s(PE);gve=n(tke,"STRONG",{});var m1t=s(gve);cFr=r(m1t,"bert"),m1t.forEach(t),mFr=r(tke," \u2014 "),Kz=n(tke,"A",{href:!0});var f1t=s(Kz);fFr=r(f1t,"TFBertForTokenClassification"),f1t.forEach(t),gFr=r(tke," (BERT model)"),tke.forEach(t),hFr=i(re),$E=n(re,"LI",{});var ake=s($E);hve=n(ake,"STRONG",{});var g1t=s(hve);uFr=r(g1t,"camembert"),g1t.forEach(t),pFr=r(ake," \u2014 "),Zz=n(ake,"A",{href:!0});var h1t=s(Zz);_Fr=r(h1t,"TFCamembertForTokenClassification"),h1t.forEach(t),bFr=r(ake," (CamemBERT model)"),ake.forEach(t),vFr=i(re),IE=n(re,"LI",{});var nke=s(IE);uve=n(nke,"STRONG",{});var u1t=s(uve);FFr=r(u1t,"convbert"),u1t.forEach(t),TFr=r(nke," \u2014 "),eQ=n(nke,"A",{href:!0});var p1t=s(eQ);MFr=r(p1t,"TFConvBertForTokenClassification"),p1t.forEach(t),EFr=r(nke," (ConvBERT model)"),nke.forEach(t),CFr=i(re),qE=n(re,"LI",{});var ske=s(qE);pve=n(ske,"STRONG",{});var _1t=s(pve);wFr=r(_1t,"deberta"),_1t.forEach(t),AFr=r(ske," \u2014 "),oQ=n(ske,"A",{href:!0});var b1t=s(oQ);yFr=r(b1t,"TFDebertaForTokenClassification"),b1t.forEach(t),LFr=r(ske," (DeBERTa model)"),ske.forEach(t),xFr=i(re),NE=n(re,"LI",{});var lke=s(NE);_ve=n(lke,"STRONG",{});var v1t=s(_ve);kFr=r(v1t,"deberta-v2"),v1t.forEach(t),SFr=r(lke," \u2014 "),rQ=n(lke,"A",{href:!0});var F1t=s(rQ);RFr=r(F1t,"TFDebertaV2ForTokenClassification"),F1t.forEach(t),BFr=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),PFr=i(re),jE=n(re,"LI",{});var ike=s(jE);bve=n(ike,"STRONG",{});var T1t=s(bve);$Fr=r(T1t,"distilbert"),T1t.forEach(t),IFr=r(ike," \u2014 "),tQ=n(ike,"A",{href:!0});var M1t=s(tQ);qFr=r(M1t,"TFDistilBertForTokenClassification"),M1t.forEach(t),NFr=r(ike," (DistilBERT model)"),ike.forEach(t),jFr=i(re),DE=n(re,"LI",{});var dke=s(DE);vve=n(dke,"STRONG",{});var E1t=s(vve);DFr=r(E1t,"electra"),E1t.forEach(t),GFr=r(dke," \u2014 "),aQ=n(dke,"A",{href:!0});var C1t=s(aQ);OFr=r(C1t,"TFElectraForTokenClassification"),C1t.forEach(t),VFr=r(dke," (ELECTRA model)"),dke.forEach(t),XFr=i(re),GE=n(re,"LI",{});var cke=s(GE);Fve=n(cke,"STRONG",{});var w1t=s(Fve);zFr=r(w1t,"flaubert"),w1t.forEach(t),QFr=r(cke," \u2014 "),nQ=n(cke,"A",{href:!0});var A1t=s(nQ);WFr=r(A1t,"TFFlaubertForTokenClassification"),A1t.forEach(t),HFr=r(cke," (FlauBERT model)"),cke.forEach(t),UFr=i(re),OE=n(re,"LI",{});var mke=s(OE);Tve=n(mke,"STRONG",{});var y1t=s(Tve);JFr=r(y1t,"funnel"),y1t.forEach(t),YFr=r(mke," \u2014 "),sQ=n(mke,"A",{href:!0});var L1t=s(sQ);KFr=r(L1t,"TFFunnelForTokenClassification"),L1t.forEach(t),ZFr=r(mke," (Funnel Transformer model)"),mke.forEach(t),e1r=i(re),VE=n(re,"LI",{});var fke=s(VE);Mve=n(fke,"STRONG",{});var x1t=s(Mve);o1r=r(x1t,"layoutlm"),x1t.forEach(t),r1r=r(fke," \u2014 "),lQ=n(fke,"A",{href:!0});var k1t=s(lQ);t1r=r(k1t,"TFLayoutLMForTokenClassification"),k1t.forEach(t),a1r=r(fke," (LayoutLM model)"),fke.forEach(t),n1r=i(re),XE=n(re,"LI",{});var gke=s(XE);Eve=n(gke,"STRONG",{});var S1t=s(Eve);s1r=r(S1t,"longformer"),S1t.forEach(t),l1r=r(gke," \u2014 "),iQ=n(gke,"A",{href:!0});var R1t=s(iQ);i1r=r(R1t,"TFLongformerForTokenClassification"),R1t.forEach(t),d1r=r(gke," (Longformer model)"),gke.forEach(t),c1r=i(re),zE=n(re,"LI",{});var hke=s(zE);Cve=n(hke,"STRONG",{});var B1t=s(Cve);m1r=r(B1t,"mobilebert"),B1t.forEach(t),f1r=r(hke," \u2014 "),dQ=n(hke,"A",{href:!0});var P1t=s(dQ);g1r=r(P1t,"TFMobileBertForTokenClassification"),P1t.forEach(t),h1r=r(hke," (MobileBERT model)"),hke.forEach(t),u1r=i(re),QE=n(re,"LI",{});var uke=s(QE);wve=n(uke,"STRONG",{});var $1t=s(wve);p1r=r($1t,"mpnet"),$1t.forEach(t),_1r=r(uke," \u2014 "),cQ=n(uke,"A",{href:!0});var I1t=s(cQ);b1r=r(I1t,"TFMPNetForTokenClassification"),I1t.forEach(t),v1r=r(uke," (MPNet model)"),uke.forEach(t),F1r=i(re),WE=n(re,"LI",{});var pke=s(WE);Ave=n(pke,"STRONG",{});var q1t=s(Ave);T1r=r(q1t,"rembert"),q1t.forEach(t),M1r=r(pke," \u2014 "),mQ=n(pke,"A",{href:!0});var N1t=s(mQ);E1r=r(N1t,"TFRemBertForTokenClassification"),N1t.forEach(t),C1r=r(pke," (RemBERT model)"),pke.forEach(t),w1r=i(re),HE=n(re,"LI",{});var _ke=s(HE);yve=n(_ke,"STRONG",{});var j1t=s(yve);A1r=r(j1t,"roberta"),j1t.forEach(t),y1r=r(_ke," \u2014 "),fQ=n(_ke,"A",{href:!0});var D1t=s(fQ);L1r=r(D1t,"TFRobertaForTokenClassification"),D1t.forEach(t),x1r=r(_ke," (RoBERTa model)"),_ke.forEach(t),k1r=i(re),UE=n(re,"LI",{});var bke=s(UE);Lve=n(bke,"STRONG",{});var G1t=s(Lve);S1r=r(G1t,"roformer"),G1t.forEach(t),R1r=r(bke," \u2014 "),gQ=n(bke,"A",{href:!0});var O1t=s(gQ);B1r=r(O1t,"TFRoFormerForTokenClassification"),O1t.forEach(t),P1r=r(bke," (RoFormer model)"),bke.forEach(t),$1r=i(re),JE=n(re,"LI",{});var vke=s(JE);xve=n(vke,"STRONG",{});var V1t=s(xve);I1r=r(V1t,"xlm"),V1t.forEach(t),q1r=r(vke," \u2014 "),hQ=n(vke,"A",{href:!0});var X1t=s(hQ);N1r=r(X1t,"TFXLMForTokenClassification"),X1t.forEach(t),j1r=r(vke," (XLM model)"),vke.forEach(t),D1r=i(re),YE=n(re,"LI",{});var Fke=s(YE);kve=n(Fke,"STRONG",{});var z1t=s(kve);G1r=r(z1t,"xlm-roberta"),z1t.forEach(t),O1r=r(Fke," \u2014 "),uQ=n(Fke,"A",{href:!0});var Q1t=s(uQ);V1r=r(Q1t,"TFXLMRobertaForTokenClassification"),Q1t.forEach(t),X1r=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),z1r=i(re),KE=n(re,"LI",{});var Tke=s(KE);Sve=n(Tke,"STRONG",{});var W1t=s(Sve);Q1r=r(W1t,"xlnet"),W1t.forEach(t),W1r=r(Tke," \u2014 "),pQ=n(Tke,"A",{href:!0});var H1t=s(pQ);H1r=r(H1t,"TFXLNetForTokenClassification"),H1t.forEach(t),U1r=r(Tke," (XLNet model)"),Tke.forEach(t),re.forEach(t),J1r=i(Ca),Rve=n(Ca,"P",{});var U1t=s(Rve);Y1r=r(U1t,"Examples:"),U1t.forEach(t),K1r=i(Ca),f(w8.$$.fragment,Ca),Ca.forEach(t),si.forEach(t),iPe=i(c),zc=n(c,"H2",{class:!0});var vIe=s(zc);ZE=n(vIe,"A",{id:!0,class:!0,href:!0});var J1t=s(ZE);Bve=n(J1t,"SPAN",{});var Y1t=s(Bve);f(A8.$$.fragment,Y1t),Y1t.forEach(t),J1t.forEach(t),Z1r=i(vIe),Pve=n(vIe,"SPAN",{});var K1t=s(Pve);eTr=r(K1t,"TFAutoModelForQuestionAnswering"),K1t.forEach(t),vIe.forEach(t),dPe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);f(y8.$$.fragment,ii),oTr=i(ii),Qc=n(ii,"P",{});var jJ=s(Qc);rTr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_Q=n(jJ,"A",{href:!0});var Z1t=s(_Q);tTr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),aTr=r(jJ," class method or the "),bQ=n(jJ,"A",{href:!0});var eTt=s(bQ);nTr=r(eTt,"from_config()"),eTt.forEach(t),sTr=r(jJ,` class
method.`),jJ.forEach(t),lTr=i(ii),L8=n(ii,"P",{});var FIe=s(L8);iTr=r(FIe,"This class cannot be instantiated directly using "),$ve=n(FIe,"CODE",{});var oTt=s($ve);dTr=r(oTt,"__init__()"),oTt.forEach(t),cTr=r(FIe," (throws an error)."),FIe.forEach(t),mTr=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);f(x8.$$.fragment,di),fTr=i(di),Ive=n(di,"P",{});var rTt=s(Ive);gTr=r(rTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rTt.forEach(t),hTr=i(di),Wc=n(di,"P",{});var DJ=s(Wc);uTr=r(DJ,`Note:
Loading a model from its configuration file does `),qve=n(DJ,"STRONG",{});var tTt=s(qve);pTr=r(tTt,"not"),tTt.forEach(t),_Tr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(DJ,"A",{href:!0});var aTt=s(vQ);bTr=r(aTt,"from_pretrained()"),aTt.forEach(t),vTr=r(DJ," to load the model weights."),DJ.forEach(t),FTr=i(di),Nve=n(di,"P",{});var nTt=s(Nve);TTr=r(nTt,"Examples:"),nTt.forEach(t),MTr=i(di),f(k8.$$.fragment,di),di.forEach(t),ETr=i(ii),Co=n(ii,"DIV",{class:!0});var wa=s(Co);f(S8.$$.fragment,wa),CTr=i(wa),jve=n(wa,"P",{});var sTt=s(jve);wTr=r(sTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sTt.forEach(t),ATr=i(wa),yn=n(wa,"P",{});var hw=s(yn);yTr=r(hw,"The model class to instantiate is selected based on the "),Dve=n(hw,"CODE",{});var lTt=s(Dve);LTr=r(lTt,"model_type"),lTt.forEach(t),xTr=r(hw,` property of the config object (either
passed as an argument or loaded from `),Gve=n(hw,"CODE",{});var iTt=s(Gve);kTr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),STr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(hw,"CODE",{});var dTt=s(Ove);RTr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),BTr=r(hw,":"),hw.forEach(t),PTr=i(wa),K=n(wa,"UL",{});var te=s(K);e5=n(te,"LI",{});var Mke=s(e5);Vve=n(Mke,"STRONG",{});var cTt=s(Vve);$Tr=r(cTt,"albert"),cTt.forEach(t),ITr=r(Mke," \u2014 "),FQ=n(Mke,"A",{href:!0});var mTt=s(FQ);qTr=r(mTt,"TFAlbertForQuestionAnswering"),mTt.forEach(t),NTr=r(Mke," (ALBERT model)"),Mke.forEach(t),jTr=i(te),o5=n(te,"LI",{});var Eke=s(o5);Xve=n(Eke,"STRONG",{});var fTt=s(Xve);DTr=r(fTt,"bert"),fTt.forEach(t),GTr=r(Eke," \u2014 "),TQ=n(Eke,"A",{href:!0});var gTt=s(TQ);OTr=r(gTt,"TFBertForQuestionAnswering"),gTt.forEach(t),VTr=r(Eke," (BERT model)"),Eke.forEach(t),XTr=i(te),r5=n(te,"LI",{});var Cke=s(r5);zve=n(Cke,"STRONG",{});var hTt=s(zve);zTr=r(hTt,"camembert"),hTt.forEach(t),QTr=r(Cke," \u2014 "),MQ=n(Cke,"A",{href:!0});var uTt=s(MQ);WTr=r(uTt,"TFCamembertForQuestionAnswering"),uTt.forEach(t),HTr=r(Cke," (CamemBERT model)"),Cke.forEach(t),UTr=i(te),t5=n(te,"LI",{});var wke=s(t5);Qve=n(wke,"STRONG",{});var pTt=s(Qve);JTr=r(pTt,"convbert"),pTt.forEach(t),YTr=r(wke," \u2014 "),EQ=n(wke,"A",{href:!0});var _Tt=s(EQ);KTr=r(_Tt,"TFConvBertForQuestionAnswering"),_Tt.forEach(t),ZTr=r(wke," (ConvBERT model)"),wke.forEach(t),eMr=i(te),a5=n(te,"LI",{});var Ake=s(a5);Wve=n(Ake,"STRONG",{});var bTt=s(Wve);oMr=r(bTt,"deberta"),bTt.forEach(t),rMr=r(Ake," \u2014 "),CQ=n(Ake,"A",{href:!0});var vTt=s(CQ);tMr=r(vTt,"TFDebertaForQuestionAnswering"),vTt.forEach(t),aMr=r(Ake," (DeBERTa model)"),Ake.forEach(t),nMr=i(te),n5=n(te,"LI",{});var yke=s(n5);Hve=n(yke,"STRONG",{});var FTt=s(Hve);sMr=r(FTt,"deberta-v2"),FTt.forEach(t),lMr=r(yke," \u2014 "),wQ=n(yke,"A",{href:!0});var TTt=s(wQ);iMr=r(TTt,"TFDebertaV2ForQuestionAnswering"),TTt.forEach(t),dMr=r(yke," (DeBERTa-v2 model)"),yke.forEach(t),cMr=i(te),s5=n(te,"LI",{});var Lke=s(s5);Uve=n(Lke,"STRONG",{});var MTt=s(Uve);mMr=r(MTt,"distilbert"),MTt.forEach(t),fMr=r(Lke," \u2014 "),AQ=n(Lke,"A",{href:!0});var ETt=s(AQ);gMr=r(ETt,"TFDistilBertForQuestionAnswering"),ETt.forEach(t),hMr=r(Lke," (DistilBERT model)"),Lke.forEach(t),uMr=i(te),l5=n(te,"LI",{});var xke=s(l5);Jve=n(xke,"STRONG",{});var CTt=s(Jve);pMr=r(CTt,"electra"),CTt.forEach(t),_Mr=r(xke," \u2014 "),yQ=n(xke,"A",{href:!0});var wTt=s(yQ);bMr=r(wTt,"TFElectraForQuestionAnswering"),wTt.forEach(t),vMr=r(xke," (ELECTRA model)"),xke.forEach(t),FMr=i(te),i5=n(te,"LI",{});var kke=s(i5);Yve=n(kke,"STRONG",{});var ATt=s(Yve);TMr=r(ATt,"flaubert"),ATt.forEach(t),MMr=r(kke," \u2014 "),LQ=n(kke,"A",{href:!0});var yTt=s(LQ);EMr=r(yTt,"TFFlaubertForQuestionAnsweringSimple"),yTt.forEach(t),CMr=r(kke," (FlauBERT model)"),kke.forEach(t),wMr=i(te),d5=n(te,"LI",{});var Ske=s(d5);Kve=n(Ske,"STRONG",{});var LTt=s(Kve);AMr=r(LTt,"funnel"),LTt.forEach(t),yMr=r(Ske," \u2014 "),xQ=n(Ske,"A",{href:!0});var xTt=s(xQ);LMr=r(xTt,"TFFunnelForQuestionAnswering"),xTt.forEach(t),xMr=r(Ske," (Funnel Transformer model)"),Ske.forEach(t),kMr=i(te),c5=n(te,"LI",{});var Rke=s(c5);Zve=n(Rke,"STRONG",{});var kTt=s(Zve);SMr=r(kTt,"gptj"),kTt.forEach(t),RMr=r(Rke," \u2014 "),kQ=n(Rke,"A",{href:!0});var STt=s(kQ);BMr=r(STt,"TFGPTJForQuestionAnswering"),STt.forEach(t),PMr=r(Rke," (GPT-J model)"),Rke.forEach(t),$Mr=i(te),m5=n(te,"LI",{});var Bke=s(m5);eFe=n(Bke,"STRONG",{});var RTt=s(eFe);IMr=r(RTt,"longformer"),RTt.forEach(t),qMr=r(Bke," \u2014 "),SQ=n(Bke,"A",{href:!0});var BTt=s(SQ);NMr=r(BTt,"TFLongformerForQuestionAnswering"),BTt.forEach(t),jMr=r(Bke," (Longformer model)"),Bke.forEach(t),DMr=i(te),f5=n(te,"LI",{});var Pke=s(f5);oFe=n(Pke,"STRONG",{});var PTt=s(oFe);GMr=r(PTt,"mobilebert"),PTt.forEach(t),OMr=r(Pke," \u2014 "),RQ=n(Pke,"A",{href:!0});var $Tt=s(RQ);VMr=r($Tt,"TFMobileBertForQuestionAnswering"),$Tt.forEach(t),XMr=r(Pke," (MobileBERT model)"),Pke.forEach(t),zMr=i(te),g5=n(te,"LI",{});var $ke=s(g5);rFe=n($ke,"STRONG",{});var ITt=s(rFe);QMr=r(ITt,"mpnet"),ITt.forEach(t),WMr=r($ke," \u2014 "),BQ=n($ke,"A",{href:!0});var qTt=s(BQ);HMr=r(qTt,"TFMPNetForQuestionAnswering"),qTt.forEach(t),UMr=r($ke," (MPNet model)"),$ke.forEach(t),JMr=i(te),h5=n(te,"LI",{});var Ike=s(h5);tFe=n(Ike,"STRONG",{});var NTt=s(tFe);YMr=r(NTt,"rembert"),NTt.forEach(t),KMr=r(Ike," \u2014 "),PQ=n(Ike,"A",{href:!0});var jTt=s(PQ);ZMr=r(jTt,"TFRemBertForQuestionAnswering"),jTt.forEach(t),e4r=r(Ike," (RemBERT model)"),Ike.forEach(t),o4r=i(te),u5=n(te,"LI",{});var qke=s(u5);aFe=n(qke,"STRONG",{});var DTt=s(aFe);r4r=r(DTt,"roberta"),DTt.forEach(t),t4r=r(qke," \u2014 "),$Q=n(qke,"A",{href:!0});var GTt=s($Q);a4r=r(GTt,"TFRobertaForQuestionAnswering"),GTt.forEach(t),n4r=r(qke," (RoBERTa model)"),qke.forEach(t),s4r=i(te),p5=n(te,"LI",{});var Nke=s(p5);nFe=n(Nke,"STRONG",{});var OTt=s(nFe);l4r=r(OTt,"roformer"),OTt.forEach(t),i4r=r(Nke," \u2014 "),IQ=n(Nke,"A",{href:!0});var VTt=s(IQ);d4r=r(VTt,"TFRoFormerForQuestionAnswering"),VTt.forEach(t),c4r=r(Nke," (RoFormer model)"),Nke.forEach(t),m4r=i(te),_5=n(te,"LI",{});var jke=s(_5);sFe=n(jke,"STRONG",{});var XTt=s(sFe);f4r=r(XTt,"xlm"),XTt.forEach(t),g4r=r(jke," \u2014 "),qQ=n(jke,"A",{href:!0});var zTt=s(qQ);h4r=r(zTt,"TFXLMForQuestionAnsweringSimple"),zTt.forEach(t),u4r=r(jke," (XLM model)"),jke.forEach(t),p4r=i(te),b5=n(te,"LI",{});var Dke=s(b5);lFe=n(Dke,"STRONG",{});var QTt=s(lFe);_4r=r(QTt,"xlm-roberta"),QTt.forEach(t),b4r=r(Dke," \u2014 "),NQ=n(Dke,"A",{href:!0});var WTt=s(NQ);v4r=r(WTt,"TFXLMRobertaForQuestionAnswering"),WTt.forEach(t),F4r=r(Dke," (XLM-RoBERTa model)"),Dke.forEach(t),T4r=i(te),v5=n(te,"LI",{});var Gke=s(v5);iFe=n(Gke,"STRONG",{});var HTt=s(iFe);M4r=r(HTt,"xlnet"),HTt.forEach(t),E4r=r(Gke," \u2014 "),jQ=n(Gke,"A",{href:!0});var UTt=s(jQ);C4r=r(UTt,"TFXLNetForQuestionAnsweringSimple"),UTt.forEach(t),w4r=r(Gke," (XLNet model)"),Gke.forEach(t),te.forEach(t),A4r=i(wa),dFe=n(wa,"P",{});var JTt=s(dFe);y4r=r(JTt,"Examples:"),JTt.forEach(t),L4r=i(wa),f(R8.$$.fragment,wa),wa.forEach(t),ii.forEach(t),cPe=i(c),Hc=n(c,"H2",{class:!0});var TIe=s(Hc);F5=n(TIe,"A",{id:!0,class:!0,href:!0});var YTt=s(F5);cFe=n(YTt,"SPAN",{});var KTt=s(cFe);f(B8.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),x4r=i(TIe),mFe=n(TIe,"SPAN",{});var ZTt=s(mFe);k4r=r(ZTt,"TFAutoModelForVision2Seq"),ZTt.forEach(t),TIe.forEach(t),mPe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);f(P8.$$.fragment,ci),S4r=i(ci),Uc=n(ci,"P",{});var GJ=s(Uc);R4r=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(GJ,"A",{href:!0});var eMt=s(DQ);B4r=r(eMt,"from_pretrained()"),eMt.forEach(t),P4r=r(GJ," class method or the "),GQ=n(GJ,"A",{href:!0});var oMt=s(GQ);$4r=r(oMt,"from_config()"),oMt.forEach(t),I4r=r(GJ,` class
method.`),GJ.forEach(t),q4r=i(ci),$8=n(ci,"P",{});var MIe=s($8);N4r=r(MIe,"This class cannot be instantiated directly using "),fFe=n(MIe,"CODE",{});var rMt=s(fFe);j4r=r(rMt,"__init__()"),rMt.forEach(t),D4r=r(MIe," (throws an error)."),MIe.forEach(t),G4r=i(ci),Ct=n(ci,"DIV",{class:!0});var mi=s(Ct);f(I8.$$.fragment,mi),O4r=i(mi),gFe=n(mi,"P",{});var tMt=s(gFe);V4r=r(tMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tMt.forEach(t),X4r=i(mi),Jc=n(mi,"P",{});var OJ=s(Jc);z4r=r(OJ,`Note:
Loading a model from its configuration file does `),hFe=n(OJ,"STRONG",{});var aMt=s(hFe);Q4r=r(aMt,"not"),aMt.forEach(t),W4r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(OJ,"A",{href:!0});var nMt=s(OQ);H4r=r(nMt,"from_pretrained()"),nMt.forEach(t),U4r=r(OJ," to load the model weights."),OJ.forEach(t),J4r=i(mi),uFe=n(mi,"P",{});var sMt=s(uFe);Y4r=r(sMt,"Examples:"),sMt.forEach(t),K4r=i(mi),f(q8.$$.fragment,mi),mi.forEach(t),Z4r=i(ci),wo=n(ci,"DIV",{class:!0});var Aa=s(wo);f(N8.$$.fragment,Aa),eEr=i(Aa),pFe=n(Aa,"P",{});var lMt=s(pFe);oEr=r(lMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lMt.forEach(t),rEr=i(Aa),Ln=n(Aa,"P",{});var uw=s(Ln);tEr=r(uw,"The model class to instantiate is selected based on the "),_Fe=n(uw,"CODE",{});var iMt=s(_Fe);aEr=r(iMt,"model_type"),iMt.forEach(t),nEr=r(uw,` property of the config object (either
passed as an argument or loaded from `),bFe=n(uw,"CODE",{});var dMt=s(bFe);sEr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),lEr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(uw,"CODE",{});var cMt=s(vFe);iEr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),dEr=r(uw,":"),uw.forEach(t),cEr=i(Aa),FFe=n(Aa,"UL",{});var mMt=s(FFe);T5=n(mMt,"LI",{});var Oke=s(T5);TFe=n(Oke,"STRONG",{});var fMt=s(TFe);mEr=r(fMt,"vision-encoder-decoder"),fMt.forEach(t),fEr=r(Oke," \u2014 "),VQ=n(Oke,"A",{href:!0});var gMt=s(VQ);gEr=r(gMt,"TFVisionEncoderDecoderModel"),gMt.forEach(t),hEr=r(Oke," (Vision Encoder decoder model)"),Oke.forEach(t),mMt.forEach(t),uEr=i(Aa),MFe=n(Aa,"P",{});var hMt=s(MFe);pEr=r(hMt,"Examples:"),hMt.forEach(t),_Er=i(Aa),f(j8.$$.fragment,Aa),Aa.forEach(t),ci.forEach(t),fPe=i(c),Yc=n(c,"H2",{class:!0});var EIe=s(Yc);M5=n(EIe,"A",{id:!0,class:!0,href:!0});var uMt=s(M5);EFe=n(uMt,"SPAN",{});var pMt=s(EFe);f(D8.$$.fragment,pMt),pMt.forEach(t),uMt.forEach(t),bEr=i(EIe),CFe=n(EIe,"SPAN",{});var _Mt=s(CFe);vEr=r(_Mt,"TFAutoModelForSpeechSeq2Seq"),_Mt.forEach(t),EIe.forEach(t),gPe=i(c),Sr=n(c,"DIV",{class:!0});var fi=s(Sr);f(G8.$$.fragment,fi),FEr=i(fi),Kc=n(fi,"P",{});var VJ=s(Kc);TEr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=n(VJ,"A",{href:!0});var bMt=s(XQ);MEr=r(bMt,"from_pretrained()"),bMt.forEach(t),EEr=r(VJ," class method or the "),zQ=n(VJ,"A",{href:!0});var vMt=s(zQ);CEr=r(vMt,"from_config()"),vMt.forEach(t),wEr=r(VJ,` class
method.`),VJ.forEach(t),AEr=i(fi),O8=n(fi,"P",{});var CIe=s(O8);yEr=r(CIe,"This class cannot be instantiated directly using "),wFe=n(CIe,"CODE",{});var FMt=s(wFe);LEr=r(FMt,"__init__()"),FMt.forEach(t),xEr=r(CIe," (throws an error)."),CIe.forEach(t),kEr=i(fi),wt=n(fi,"DIV",{class:!0});var gi=s(wt);f(V8.$$.fragment,gi),SEr=i(gi),AFe=n(gi,"P",{});var TMt=s(AFe);REr=r(TMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TMt.forEach(t),BEr=i(gi),Zc=n(gi,"P",{});var XJ=s(Zc);PEr=r(XJ,`Note:
Loading a model from its configuration file does `),yFe=n(XJ,"STRONG",{});var MMt=s(yFe);$Er=r(MMt,"not"),MMt.forEach(t),IEr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(XJ,"A",{href:!0});var EMt=s(QQ);qEr=r(EMt,"from_pretrained()"),EMt.forEach(t),NEr=r(XJ," to load the model weights."),XJ.forEach(t),jEr=i(gi),LFe=n(gi,"P",{});var CMt=s(LFe);DEr=r(CMt,"Examples:"),CMt.forEach(t),GEr=i(gi),f(X8.$$.fragment,gi),gi.forEach(t),OEr=i(fi),Ao=n(fi,"DIV",{class:!0});var ya=s(Ao);f(z8.$$.fragment,ya),VEr=i(ya),xFe=n(ya,"P",{});var wMt=s(xFe);XEr=r(wMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wMt.forEach(t),zEr=i(ya),xn=n(ya,"P",{});var pw=s(xn);QEr=r(pw,"The model class to instantiate is selected based on the "),kFe=n(pw,"CODE",{});var AMt=s(kFe);WEr=r(AMt,"model_type"),AMt.forEach(t),HEr=r(pw,` property of the config object (either
passed as an argument or loaded from `),SFe=n(pw,"CODE",{});var yMt=s(SFe);UEr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),JEr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(pw,"CODE",{});var LMt=s(RFe);YEr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),KEr=r(pw,":"),pw.forEach(t),ZEr=i(ya),BFe=n(ya,"UL",{});var xMt=s(BFe);E5=n(xMt,"LI",{});var Vke=s(E5);PFe=n(Vke,"STRONG",{});var kMt=s(PFe);e5r=r(kMt,"speech_to_text"),kMt.forEach(t),o5r=r(Vke," \u2014 "),WQ=n(Vke,"A",{href:!0});var SMt=s(WQ);r5r=r(SMt,"TFSpeech2TextForConditionalGeneration"),SMt.forEach(t),t5r=r(Vke," (Speech2Text model)"),Vke.forEach(t),xMt.forEach(t),a5r=i(ya),$Fe=n(ya,"P",{});var RMt=s($Fe);n5r=r(RMt,"Examples:"),RMt.forEach(t),s5r=i(ya),f(Q8.$$.fragment,ya),ya.forEach(t),fi.forEach(t),hPe=i(c),em=n(c,"H2",{class:!0});var wIe=s(em);C5=n(wIe,"A",{id:!0,class:!0,href:!0});var BMt=s(C5);IFe=n(BMt,"SPAN",{});var PMt=s(IFe);f(W8.$$.fragment,PMt),PMt.forEach(t),BMt.forEach(t),l5r=i(wIe),qFe=n(wIe,"SPAN",{});var $Mt=s(qFe);i5r=r($Mt,"FlaxAutoModel"),$Mt.forEach(t),wIe.forEach(t),uPe=i(c),Rr=n(c,"DIV",{class:!0});var hi=s(Rr);f(H8.$$.fragment,hi),d5r=i(hi),om=n(hi,"P",{});var zJ=s(om);c5r=r(zJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=n(zJ,"A",{href:!0});var IMt=s(HQ);m5r=r(IMt,"from_pretrained()"),IMt.forEach(t),f5r=r(zJ," class method or the "),UQ=n(zJ,"A",{href:!0});var qMt=s(UQ);g5r=r(qMt,"from_config()"),qMt.forEach(t),h5r=r(zJ,` class
method.`),zJ.forEach(t),u5r=i(hi),U8=n(hi,"P",{});var AIe=s(U8);p5r=r(AIe,"This class cannot be instantiated directly using "),NFe=n(AIe,"CODE",{});var NMt=s(NFe);_5r=r(NMt,"__init__()"),NMt.forEach(t),b5r=r(AIe," (throws an error)."),AIe.forEach(t),v5r=i(hi),At=n(hi,"DIV",{class:!0});var ui=s(At);f(J8.$$.fragment,ui),F5r=i(ui),jFe=n(ui,"P",{});var jMt=s(jFe);T5r=r(jMt,"Instantiates one of the base model classes of the library from a configuration."),jMt.forEach(t),M5r=i(ui),rm=n(ui,"P",{});var QJ=s(rm);E5r=r(QJ,`Note:
Loading a model from its configuration file does `),DFe=n(QJ,"STRONG",{});var DMt=s(DFe);C5r=r(DMt,"not"),DMt.forEach(t),w5r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(QJ,"A",{href:!0});var GMt=s(JQ);A5r=r(GMt,"from_pretrained()"),GMt.forEach(t),y5r=r(QJ," to load the model weights."),QJ.forEach(t),L5r=i(ui),GFe=n(ui,"P",{});var OMt=s(GFe);x5r=r(OMt,"Examples:"),OMt.forEach(t),k5r=i(ui),f(Y8.$$.fragment,ui),ui.forEach(t),S5r=i(hi),yo=n(hi,"DIV",{class:!0});var La=s(yo);f(K8.$$.fragment,La),R5r=i(La),OFe=n(La,"P",{});var VMt=s(OFe);B5r=r(VMt,"Instantiate one of the base model classes of the library from a pretrained model."),VMt.forEach(t),P5r=i(La),kn=n(La,"P",{});var _w=s(kn);$5r=r(_w,"The model class to instantiate is selected based on the "),VFe=n(_w,"CODE",{});var XMt=s(VFe);I5r=r(XMt,"model_type"),XMt.forEach(t),q5r=r(_w,` property of the config object (either
passed as an argument or loaded from `),XFe=n(_w,"CODE",{});var zMt=s(XFe);N5r=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),j5r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(_w,"CODE",{});var QMt=s(zFe);D5r=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),G5r=r(_w,":"),_w.forEach(t),O5r=i(La),z=n(La,"UL",{});var W=s(z);w5=n(W,"LI",{});var Xke=s(w5);QFe=n(Xke,"STRONG",{});var WMt=s(QFe);V5r=r(WMt,"albert"),WMt.forEach(t),X5r=r(Xke," \u2014 "),YQ=n(Xke,"A",{href:!0});var HMt=s(YQ);z5r=r(HMt,"FlaxAlbertModel"),HMt.forEach(t),Q5r=r(Xke," (ALBERT model)"),Xke.forEach(t),W5r=i(W),A5=n(W,"LI",{});var zke=s(A5);WFe=n(zke,"STRONG",{});var UMt=s(WFe);H5r=r(UMt,"bart"),UMt.forEach(t),U5r=r(zke," \u2014 "),KQ=n(zke,"A",{href:!0});var JMt=s(KQ);J5r=r(JMt,"FlaxBartModel"),JMt.forEach(t),Y5r=r(zke," (BART model)"),zke.forEach(t),K5r=i(W),y5=n(W,"LI",{});var Qke=s(y5);HFe=n(Qke,"STRONG",{});var YMt=s(HFe);Z5r=r(YMt,"beit"),YMt.forEach(t),e3r=r(Qke," \u2014 "),ZQ=n(Qke,"A",{href:!0});var KMt=s(ZQ);o3r=r(KMt,"FlaxBeitModel"),KMt.forEach(t),r3r=r(Qke," (BEiT model)"),Qke.forEach(t),t3r=i(W),L5=n(W,"LI",{});var Wke=s(L5);UFe=n(Wke,"STRONG",{});var ZMt=s(UFe);a3r=r(ZMt,"bert"),ZMt.forEach(t),n3r=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var e4t=s(eW);s3r=r(e4t,"FlaxBertModel"),e4t.forEach(t),l3r=r(Wke," (BERT model)"),Wke.forEach(t),i3r=i(W),x5=n(W,"LI",{});var Hke=s(x5);JFe=n(Hke,"STRONG",{});var o4t=s(JFe);d3r=r(o4t,"big_bird"),o4t.forEach(t),c3r=r(Hke," \u2014 "),oW=n(Hke,"A",{href:!0});var r4t=s(oW);m3r=r(r4t,"FlaxBigBirdModel"),r4t.forEach(t),f3r=r(Hke," (BigBird model)"),Hke.forEach(t),g3r=i(W),k5=n(W,"LI",{});var Uke=s(k5);YFe=n(Uke,"STRONG",{});var t4t=s(YFe);h3r=r(t4t,"blenderbot"),t4t.forEach(t),u3r=r(Uke," \u2014 "),rW=n(Uke,"A",{href:!0});var a4t=s(rW);p3r=r(a4t,"FlaxBlenderbotModel"),a4t.forEach(t),_3r=r(Uke," (Blenderbot model)"),Uke.forEach(t),b3r=i(W),S5=n(W,"LI",{});var Jke=s(S5);KFe=n(Jke,"STRONG",{});var n4t=s(KFe);v3r=r(n4t,"blenderbot-small"),n4t.forEach(t),F3r=r(Jke," \u2014 "),tW=n(Jke,"A",{href:!0});var s4t=s(tW);T3r=r(s4t,"FlaxBlenderbotSmallModel"),s4t.forEach(t),M3r=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),E3r=i(W),R5=n(W,"LI",{});var Yke=s(R5);ZFe=n(Yke,"STRONG",{});var l4t=s(ZFe);C3r=r(l4t,"clip"),l4t.forEach(t),w3r=r(Yke," \u2014 "),aW=n(Yke,"A",{href:!0});var i4t=s(aW);A3r=r(i4t,"FlaxCLIPModel"),i4t.forEach(t),y3r=r(Yke," (CLIP model)"),Yke.forEach(t),L3r=i(W),B5=n(W,"LI",{});var Kke=s(B5);e1e=n(Kke,"STRONG",{});var d4t=s(e1e);x3r=r(d4t,"distilbert"),d4t.forEach(t),k3r=r(Kke," \u2014 "),nW=n(Kke,"A",{href:!0});var c4t=s(nW);S3r=r(c4t,"FlaxDistilBertModel"),c4t.forEach(t),R3r=r(Kke," (DistilBERT model)"),Kke.forEach(t),B3r=i(W),P5=n(W,"LI",{});var Zke=s(P5);o1e=n(Zke,"STRONG",{});var m4t=s(o1e);P3r=r(m4t,"electra"),m4t.forEach(t),$3r=r(Zke," \u2014 "),sW=n(Zke,"A",{href:!0});var f4t=s(sW);I3r=r(f4t,"FlaxElectraModel"),f4t.forEach(t),q3r=r(Zke," (ELECTRA model)"),Zke.forEach(t),N3r=i(W),$5=n(W,"LI",{});var eSe=s($5);r1e=n(eSe,"STRONG",{});var g4t=s(r1e);j3r=r(g4t,"gpt2"),g4t.forEach(t),D3r=r(eSe," \u2014 "),lW=n(eSe,"A",{href:!0});var h4t=s(lW);G3r=r(h4t,"FlaxGPT2Model"),h4t.forEach(t),O3r=r(eSe," (OpenAI GPT-2 model)"),eSe.forEach(t),V3r=i(W),I5=n(W,"LI",{});var oSe=s(I5);t1e=n(oSe,"STRONG",{});var u4t=s(t1e);X3r=r(u4t,"gpt_neo"),u4t.forEach(t),z3r=r(oSe," \u2014 "),iW=n(oSe,"A",{href:!0});var p4t=s(iW);Q3r=r(p4t,"FlaxGPTNeoModel"),p4t.forEach(t),W3r=r(oSe," (GPT Neo model)"),oSe.forEach(t),H3r=i(W),q5=n(W,"LI",{});var rSe=s(q5);a1e=n(rSe,"STRONG",{});var _4t=s(a1e);U3r=r(_4t,"gptj"),_4t.forEach(t),J3r=r(rSe," \u2014 "),dW=n(rSe,"A",{href:!0});var b4t=s(dW);Y3r=r(b4t,"FlaxGPTJModel"),b4t.forEach(t),K3r=r(rSe," (GPT-J model)"),rSe.forEach(t),Z3r=i(W),N5=n(W,"LI",{});var tSe=s(N5);n1e=n(tSe,"STRONG",{});var v4t=s(n1e);eCr=r(v4t,"marian"),v4t.forEach(t),oCr=r(tSe," \u2014 "),cW=n(tSe,"A",{href:!0});var F4t=s(cW);rCr=r(F4t,"FlaxMarianModel"),F4t.forEach(t),tCr=r(tSe," (Marian model)"),tSe.forEach(t),aCr=i(W),j5=n(W,"LI",{});var aSe=s(j5);s1e=n(aSe,"STRONG",{});var T4t=s(s1e);nCr=r(T4t,"mbart"),T4t.forEach(t),sCr=r(aSe," \u2014 "),mW=n(aSe,"A",{href:!0});var M4t=s(mW);lCr=r(M4t,"FlaxMBartModel"),M4t.forEach(t),iCr=r(aSe," (mBART model)"),aSe.forEach(t),dCr=i(W),D5=n(W,"LI",{});var nSe=s(D5);l1e=n(nSe,"STRONG",{});var E4t=s(l1e);cCr=r(E4t,"mt5"),E4t.forEach(t),mCr=r(nSe," \u2014 "),fW=n(nSe,"A",{href:!0});var C4t=s(fW);fCr=r(C4t,"FlaxMT5Model"),C4t.forEach(t),gCr=r(nSe," (mT5 model)"),nSe.forEach(t),hCr=i(W),G5=n(W,"LI",{});var sSe=s(G5);i1e=n(sSe,"STRONG",{});var w4t=s(i1e);uCr=r(w4t,"pegasus"),w4t.forEach(t),pCr=r(sSe," \u2014 "),gW=n(sSe,"A",{href:!0});var A4t=s(gW);_Cr=r(A4t,"FlaxPegasusModel"),A4t.forEach(t),bCr=r(sSe," (Pegasus model)"),sSe.forEach(t),vCr=i(W),O5=n(W,"LI",{});var lSe=s(O5);d1e=n(lSe,"STRONG",{});var y4t=s(d1e);FCr=r(y4t,"roberta"),y4t.forEach(t),TCr=r(lSe," \u2014 "),hW=n(lSe,"A",{href:!0});var L4t=s(hW);MCr=r(L4t,"FlaxRobertaModel"),L4t.forEach(t),ECr=r(lSe," (RoBERTa model)"),lSe.forEach(t),CCr=i(W),V5=n(W,"LI",{});var iSe=s(V5);c1e=n(iSe,"STRONG",{});var x4t=s(c1e);wCr=r(x4t,"roformer"),x4t.forEach(t),ACr=r(iSe," \u2014 "),uW=n(iSe,"A",{href:!0});var k4t=s(uW);yCr=r(k4t,"FlaxRoFormerModel"),k4t.forEach(t),LCr=r(iSe," (RoFormer model)"),iSe.forEach(t),xCr=i(W),X5=n(W,"LI",{});var dSe=s(X5);m1e=n(dSe,"STRONG",{});var S4t=s(m1e);kCr=r(S4t,"t5"),S4t.forEach(t),SCr=r(dSe," \u2014 "),pW=n(dSe,"A",{href:!0});var R4t=s(pW);RCr=r(R4t,"FlaxT5Model"),R4t.forEach(t),BCr=r(dSe," (T5 model)"),dSe.forEach(t),PCr=i(W),z5=n(W,"LI",{});var cSe=s(z5);f1e=n(cSe,"STRONG",{});var B4t=s(f1e);$Cr=r(B4t,"vision-text-dual-encoder"),B4t.forEach(t),ICr=r(cSe," \u2014 "),_W=n(cSe,"A",{href:!0});var P4t=s(_W);qCr=r(P4t,"FlaxVisionTextDualEncoderModel"),P4t.forEach(t),NCr=r(cSe," (VisionTextDualEncoder model)"),cSe.forEach(t),jCr=i(W),Q5=n(W,"LI",{});var mSe=s(Q5);g1e=n(mSe,"STRONG",{});var $4t=s(g1e);DCr=r($4t,"vit"),$4t.forEach(t),GCr=r(mSe," \u2014 "),bW=n(mSe,"A",{href:!0});var I4t=s(bW);OCr=r(I4t,"FlaxViTModel"),I4t.forEach(t),VCr=r(mSe," (ViT model)"),mSe.forEach(t),XCr=i(W),W5=n(W,"LI",{});var fSe=s(W5);h1e=n(fSe,"STRONG",{});var q4t=s(h1e);zCr=r(q4t,"wav2vec2"),q4t.forEach(t),QCr=r(fSe," \u2014 "),vW=n(fSe,"A",{href:!0});var N4t=s(vW);WCr=r(N4t,"FlaxWav2Vec2Model"),N4t.forEach(t),HCr=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),UCr=i(W),H5=n(W,"LI",{});var gSe=s(H5);u1e=n(gSe,"STRONG",{});var j4t=s(u1e);JCr=r(j4t,"xglm"),j4t.forEach(t),YCr=r(gSe," \u2014 "),FW=n(gSe,"A",{href:!0});var D4t=s(FW);KCr=r(D4t,"FlaxXGLMModel"),D4t.forEach(t),ZCr=r(gSe," (XGLM model)"),gSe.forEach(t),ewr=i(W),U5=n(W,"LI",{});var hSe=s(U5);p1e=n(hSe,"STRONG",{});var G4t=s(p1e);owr=r(G4t,"xlm-roberta"),G4t.forEach(t),rwr=r(hSe," \u2014 "),TW=n(hSe,"A",{href:!0});var O4t=s(TW);twr=r(O4t,"FlaxXLMRobertaModel"),O4t.forEach(t),awr=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),W.forEach(t),nwr=i(La),_1e=n(La,"P",{});var V4t=s(_1e);swr=r(V4t,"Examples:"),V4t.forEach(t),lwr=i(La),f(Z8.$$.fragment,La),La.forEach(t),hi.forEach(t),pPe=i(c),tm=n(c,"H2",{class:!0});var yIe=s(tm);J5=n(yIe,"A",{id:!0,class:!0,href:!0});var X4t=s(J5);b1e=n(X4t,"SPAN",{});var z4t=s(b1e);f(eL.$$.fragment,z4t),z4t.forEach(t),X4t.forEach(t),iwr=i(yIe),v1e=n(yIe,"SPAN",{});var Q4t=s(v1e);dwr=r(Q4t,"FlaxAutoModelForCausalLM"),Q4t.forEach(t),yIe.forEach(t),_Pe=i(c),Br=n(c,"DIV",{class:!0});var pi=s(Br);f(oL.$$.fragment,pi),cwr=i(pi),am=n(pi,"P",{});var WJ=s(am);mwr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=n(WJ,"A",{href:!0});var W4t=s(MW);fwr=r(W4t,"from_pretrained()"),W4t.forEach(t),gwr=r(WJ," class method or the "),EW=n(WJ,"A",{href:!0});var H4t=s(EW);hwr=r(H4t,"from_config()"),H4t.forEach(t),uwr=r(WJ,` class
method.`),WJ.forEach(t),pwr=i(pi),rL=n(pi,"P",{});var LIe=s(rL);_wr=r(LIe,"This class cannot be instantiated directly using "),F1e=n(LIe,"CODE",{});var U4t=s(F1e);bwr=r(U4t,"__init__()"),U4t.forEach(t),vwr=r(LIe," (throws an error)."),LIe.forEach(t),Fwr=i(pi),yt=n(pi,"DIV",{class:!0});var _i=s(yt);f(tL.$$.fragment,_i),Twr=i(_i),T1e=n(_i,"P",{});var J4t=s(T1e);Mwr=r(J4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J4t.forEach(t),Ewr=i(_i),nm=n(_i,"P",{});var HJ=s(nm);Cwr=r(HJ,`Note:
Loading a model from its configuration file does `),M1e=n(HJ,"STRONG",{});var Y4t=s(M1e);wwr=r(Y4t,"not"),Y4t.forEach(t),Awr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(HJ,"A",{href:!0});var K4t=s(CW);ywr=r(K4t,"from_pretrained()"),K4t.forEach(t),Lwr=r(HJ," to load the model weights."),HJ.forEach(t),xwr=i(_i),E1e=n(_i,"P",{});var Z4t=s(E1e);kwr=r(Z4t,"Examples:"),Z4t.forEach(t),Swr=i(_i),f(aL.$$.fragment,_i),_i.forEach(t),Rwr=i(pi),Lo=n(pi,"DIV",{class:!0});var xa=s(Lo);f(nL.$$.fragment,xa),Bwr=i(xa),C1e=n(xa,"P",{});var eEt=s(C1e);Pwr=r(eEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eEt.forEach(t),$wr=i(xa),Sn=n(xa,"P",{});var bw=s(Sn);Iwr=r(bw,"The model class to instantiate is selected based on the "),w1e=n(bw,"CODE",{});var oEt=s(w1e);qwr=r(oEt,"model_type"),oEt.forEach(t),Nwr=r(bw,` property of the config object (either
passed as an argument or loaded from `),A1e=n(bw,"CODE",{});var rEt=s(A1e);jwr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Dwr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(bw,"CODE",{});var tEt=s(y1e);Gwr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),Owr=r(bw,":"),bw.forEach(t),Vwr=i(xa),ca=n(xa,"UL",{});var bi=s(ca);Y5=n(bi,"LI",{});var uSe=s(Y5);L1e=n(uSe,"STRONG",{});var aEt=s(L1e);Xwr=r(aEt,"bart"),aEt.forEach(t),zwr=r(uSe," \u2014 "),wW=n(uSe,"A",{href:!0});var nEt=s(wW);Qwr=r(nEt,"FlaxBartForCausalLM"),nEt.forEach(t),Wwr=r(uSe," (BART model)"),uSe.forEach(t),Hwr=i(bi),K5=n(bi,"LI",{});var pSe=s(K5);x1e=n(pSe,"STRONG",{});var sEt=s(x1e);Uwr=r(sEt,"gpt2"),sEt.forEach(t),Jwr=r(pSe," \u2014 "),AW=n(pSe,"A",{href:!0});var lEt=s(AW);Ywr=r(lEt,"FlaxGPT2LMHeadModel"),lEt.forEach(t),Kwr=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),Zwr=i(bi),Z5=n(bi,"LI",{});var _Se=s(Z5);k1e=n(_Se,"STRONG",{});var iEt=s(k1e);e6r=r(iEt,"gpt_neo"),iEt.forEach(t),o6r=r(_Se," \u2014 "),yW=n(_Se,"A",{href:!0});var dEt=s(yW);r6r=r(dEt,"FlaxGPTNeoForCausalLM"),dEt.forEach(t),t6r=r(_Se," (GPT Neo model)"),_Se.forEach(t),a6r=i(bi),e3=n(bi,"LI",{});var bSe=s(e3);S1e=n(bSe,"STRONG",{});var cEt=s(S1e);n6r=r(cEt,"gptj"),cEt.forEach(t),s6r=r(bSe," \u2014 "),LW=n(bSe,"A",{href:!0});var mEt=s(LW);l6r=r(mEt,"FlaxGPTJForCausalLM"),mEt.forEach(t),i6r=r(bSe," (GPT-J model)"),bSe.forEach(t),d6r=i(bi),o3=n(bi,"LI",{});var vSe=s(o3);R1e=n(vSe,"STRONG",{});var fEt=s(R1e);c6r=r(fEt,"xglm"),fEt.forEach(t),m6r=r(vSe," \u2014 "),xW=n(vSe,"A",{href:!0});var gEt=s(xW);f6r=r(gEt,"FlaxXGLMForCausalLM"),gEt.forEach(t),g6r=r(vSe," (XGLM model)"),vSe.forEach(t),bi.forEach(t),h6r=i(xa),B1e=n(xa,"P",{});var hEt=s(B1e);u6r=r(hEt,"Examples:"),hEt.forEach(t),p6r=i(xa),f(sL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),bPe=i(c),sm=n(c,"H2",{class:!0});var xIe=s(sm);r3=n(xIe,"A",{id:!0,class:!0,href:!0});var uEt=s(r3);P1e=n(uEt,"SPAN",{});var pEt=s(P1e);f(lL.$$.fragment,pEt),pEt.forEach(t),uEt.forEach(t),_6r=i(xIe),$1e=n(xIe,"SPAN",{});var _Et=s($1e);b6r=r(_Et,"FlaxAutoModelForPreTraining"),_Et.forEach(t),xIe.forEach(t),vPe=i(c),Pr=n(c,"DIV",{class:!0});var vi=s(Pr);f(iL.$$.fragment,vi),v6r=i(vi),lm=n(vi,"P",{});var UJ=s(lm);F6r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=n(UJ,"A",{href:!0});var bEt=s(kW);T6r=r(bEt,"from_pretrained()"),bEt.forEach(t),M6r=r(UJ," class method or the "),SW=n(UJ,"A",{href:!0});var vEt=s(SW);E6r=r(vEt,"from_config()"),vEt.forEach(t),C6r=r(UJ,` class
method.`),UJ.forEach(t),w6r=i(vi),dL=n(vi,"P",{});var kIe=s(dL);A6r=r(kIe,"This class cannot be instantiated directly using "),I1e=n(kIe,"CODE",{});var FEt=s(I1e);y6r=r(FEt,"__init__()"),FEt.forEach(t),L6r=r(kIe," (throws an error)."),kIe.forEach(t),x6r=i(vi),Lt=n(vi,"DIV",{class:!0});var Fi=s(Lt);f(cL.$$.fragment,Fi),k6r=i(Fi),q1e=n(Fi,"P",{});var TEt=s(q1e);S6r=r(TEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TEt.forEach(t),R6r=i(Fi),im=n(Fi,"P",{});var JJ=s(im);B6r=r(JJ,`Note:
Loading a model from its configuration file does `),N1e=n(JJ,"STRONG",{});var MEt=s(N1e);P6r=r(MEt,"not"),MEt.forEach(t),$6r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(JJ,"A",{href:!0});var EEt=s(RW);I6r=r(EEt,"from_pretrained()"),EEt.forEach(t),q6r=r(JJ," to load the model weights."),JJ.forEach(t),N6r=i(Fi),j1e=n(Fi,"P",{});var CEt=s(j1e);j6r=r(CEt,"Examples:"),CEt.forEach(t),D6r=i(Fi),f(mL.$$.fragment,Fi),Fi.forEach(t),G6r=i(vi),xo=n(vi,"DIV",{class:!0});var ka=s(xo);f(fL.$$.fragment,ka),O6r=i(ka),D1e=n(ka,"P",{});var wEt=s(D1e);V6r=r(wEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wEt.forEach(t),X6r=i(ka),Rn=n(ka,"P",{});var vw=s(Rn);z6r=r(vw,"The model class to instantiate is selected based on the "),G1e=n(vw,"CODE",{});var AEt=s(G1e);Q6r=r(AEt,"model_type"),AEt.forEach(t),W6r=r(vw,` property of the config object (either
passed as an argument or loaded from `),O1e=n(vw,"CODE",{});var yEt=s(O1e);H6r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),U6r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(vw,"CODE",{});var LEt=s(V1e);J6r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),Y6r=r(vw,":"),vw.forEach(t),K6r=i(ka),fe=n(ka,"UL",{});var pe=s(fe);t3=n(pe,"LI",{});var FSe=s(t3);X1e=n(FSe,"STRONG",{});var xEt=s(X1e);Z6r=r(xEt,"albert"),xEt.forEach(t),eAr=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var kEt=s(BW);oAr=r(kEt,"FlaxAlbertForPreTraining"),kEt.forEach(t),rAr=r(FSe," (ALBERT model)"),FSe.forEach(t),tAr=i(pe),a3=n(pe,"LI",{});var TSe=s(a3);z1e=n(TSe,"STRONG",{});var SEt=s(z1e);aAr=r(SEt,"bart"),SEt.forEach(t),nAr=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var REt=s(PW);sAr=r(REt,"FlaxBartForConditionalGeneration"),REt.forEach(t),lAr=r(TSe," (BART model)"),TSe.forEach(t),iAr=i(pe),n3=n(pe,"LI",{});var MSe=s(n3);Q1e=n(MSe,"STRONG",{});var BEt=s(Q1e);dAr=r(BEt,"bert"),BEt.forEach(t),cAr=r(MSe," \u2014 "),$W=n(MSe,"A",{href:!0});var PEt=s($W);mAr=r(PEt,"FlaxBertForPreTraining"),PEt.forEach(t),fAr=r(MSe," (BERT model)"),MSe.forEach(t),gAr=i(pe),s3=n(pe,"LI",{});var ESe=s(s3);W1e=n(ESe,"STRONG",{});var $Et=s(W1e);hAr=r($Et,"big_bird"),$Et.forEach(t),uAr=r(ESe," \u2014 "),IW=n(ESe,"A",{href:!0});var IEt=s(IW);pAr=r(IEt,"FlaxBigBirdForPreTraining"),IEt.forEach(t),_Ar=r(ESe," (BigBird model)"),ESe.forEach(t),bAr=i(pe),l3=n(pe,"LI",{});var CSe=s(l3);H1e=n(CSe,"STRONG",{});var qEt=s(H1e);vAr=r(qEt,"electra"),qEt.forEach(t),FAr=r(CSe," \u2014 "),qW=n(CSe,"A",{href:!0});var NEt=s(qW);TAr=r(NEt,"FlaxElectraForPreTraining"),NEt.forEach(t),MAr=r(CSe," (ELECTRA model)"),CSe.forEach(t),EAr=i(pe),i3=n(pe,"LI",{});var wSe=s(i3);U1e=n(wSe,"STRONG",{});var jEt=s(U1e);CAr=r(jEt,"mbart"),jEt.forEach(t),wAr=r(wSe," \u2014 "),NW=n(wSe,"A",{href:!0});var DEt=s(NW);AAr=r(DEt,"FlaxMBartForConditionalGeneration"),DEt.forEach(t),yAr=r(wSe," (mBART model)"),wSe.forEach(t),LAr=i(pe),d3=n(pe,"LI",{});var ASe=s(d3);J1e=n(ASe,"STRONG",{});var GEt=s(J1e);xAr=r(GEt,"mt5"),GEt.forEach(t),kAr=r(ASe," \u2014 "),jW=n(ASe,"A",{href:!0});var OEt=s(jW);SAr=r(OEt,"FlaxMT5ForConditionalGeneration"),OEt.forEach(t),RAr=r(ASe," (mT5 model)"),ASe.forEach(t),BAr=i(pe),c3=n(pe,"LI",{});var ySe=s(c3);Y1e=n(ySe,"STRONG",{});var VEt=s(Y1e);PAr=r(VEt,"roberta"),VEt.forEach(t),$Ar=r(ySe," \u2014 "),DW=n(ySe,"A",{href:!0});var XEt=s(DW);IAr=r(XEt,"FlaxRobertaForMaskedLM"),XEt.forEach(t),qAr=r(ySe," (RoBERTa model)"),ySe.forEach(t),NAr=i(pe),m3=n(pe,"LI",{});var LSe=s(m3);K1e=n(LSe,"STRONG",{});var zEt=s(K1e);jAr=r(zEt,"roformer"),zEt.forEach(t),DAr=r(LSe," \u2014 "),GW=n(LSe,"A",{href:!0});var QEt=s(GW);GAr=r(QEt,"FlaxRoFormerForMaskedLM"),QEt.forEach(t),OAr=r(LSe," (RoFormer model)"),LSe.forEach(t),VAr=i(pe),f3=n(pe,"LI",{});var xSe=s(f3);Z1e=n(xSe,"STRONG",{});var WEt=s(Z1e);XAr=r(WEt,"t5"),WEt.forEach(t),zAr=r(xSe," \u2014 "),OW=n(xSe,"A",{href:!0});var HEt=s(OW);QAr=r(HEt,"FlaxT5ForConditionalGeneration"),HEt.forEach(t),WAr=r(xSe," (T5 model)"),xSe.forEach(t),HAr=i(pe),g3=n(pe,"LI",{});var kSe=s(g3);eTe=n(kSe,"STRONG",{});var UEt=s(eTe);UAr=r(UEt,"wav2vec2"),UEt.forEach(t),JAr=r(kSe," \u2014 "),VW=n(kSe,"A",{href:!0});var JEt=s(VW);YAr=r(JEt,"FlaxWav2Vec2ForPreTraining"),JEt.forEach(t),KAr=r(kSe," (Wav2Vec2 model)"),kSe.forEach(t),ZAr=i(pe),h3=n(pe,"LI",{});var SSe=s(h3);oTe=n(SSe,"STRONG",{});var YEt=s(oTe);e0r=r(YEt,"xlm-roberta"),YEt.forEach(t),o0r=r(SSe," \u2014 "),XW=n(SSe,"A",{href:!0});var KEt=s(XW);r0r=r(KEt,"FlaxXLMRobertaForMaskedLM"),KEt.forEach(t),t0r=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),pe.forEach(t),a0r=i(ka),rTe=n(ka,"P",{});var ZEt=s(rTe);n0r=r(ZEt,"Examples:"),ZEt.forEach(t),s0r=i(ka),f(gL.$$.fragment,ka),ka.forEach(t),vi.forEach(t),FPe=i(c),dm=n(c,"H2",{class:!0});var SIe=s(dm);u3=n(SIe,"A",{id:!0,class:!0,href:!0});var e5t=s(u3);tTe=n(e5t,"SPAN",{});var o5t=s(tTe);f(hL.$$.fragment,o5t),o5t.forEach(t),e5t.forEach(t),l0r=i(SIe),aTe=n(SIe,"SPAN",{});var r5t=s(aTe);i0r=r(r5t,"FlaxAutoModelForMaskedLM"),r5t.forEach(t),SIe.forEach(t),TPe=i(c),$r=n(c,"DIV",{class:!0});var Ti=s($r);f(uL.$$.fragment,Ti),d0r=i(Ti),cm=n(Ti,"P",{});var YJ=s(cm);c0r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=n(YJ,"A",{href:!0});var t5t=s(zW);m0r=r(t5t,"from_pretrained()"),t5t.forEach(t),f0r=r(YJ," class method or the "),QW=n(YJ,"A",{href:!0});var a5t=s(QW);g0r=r(a5t,"from_config()"),a5t.forEach(t),h0r=r(YJ,` class
method.`),YJ.forEach(t),u0r=i(Ti),pL=n(Ti,"P",{});var RIe=s(pL);p0r=r(RIe,"This class cannot be instantiated directly using "),nTe=n(RIe,"CODE",{});var n5t=s(nTe);_0r=r(n5t,"__init__()"),n5t.forEach(t),b0r=r(RIe," (throws an error)."),RIe.forEach(t),v0r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Mi=s(xt);f(_L.$$.fragment,Mi),F0r=i(Mi),sTe=n(Mi,"P",{});var s5t=s(sTe);T0r=r(s5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s5t.forEach(t),M0r=i(Mi),mm=n(Mi,"P",{});var KJ=s(mm);E0r=r(KJ,`Note:
Loading a model from its configuration file does `),lTe=n(KJ,"STRONG",{});var l5t=s(lTe);C0r=r(l5t,"not"),l5t.forEach(t),w0r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(KJ,"A",{href:!0});var i5t=s(WW);A0r=r(i5t,"from_pretrained()"),i5t.forEach(t),y0r=r(KJ," to load the model weights."),KJ.forEach(t),L0r=i(Mi),iTe=n(Mi,"P",{});var d5t=s(iTe);x0r=r(d5t,"Examples:"),d5t.forEach(t),k0r=i(Mi),f(bL.$$.fragment,Mi),Mi.forEach(t),S0r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Sa=s(ko);f(vL.$$.fragment,Sa),R0r=i(Sa),dTe=n(Sa,"P",{});var c5t=s(dTe);B0r=r(c5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c5t.forEach(t),P0r=i(Sa),Bn=n(Sa,"P",{});var Fw=s(Bn);$0r=r(Fw,"The model class to instantiate is selected based on the "),cTe=n(Fw,"CODE",{});var m5t=s(cTe);I0r=r(m5t,"model_type"),m5t.forEach(t),q0r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),mTe=n(Fw,"CODE",{});var f5t=s(mTe);N0r=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),j0r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(Fw,"CODE",{});var g5t=s(fTe);D0r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),G0r=r(Fw,":"),Fw.forEach(t),O0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);p3=n(Ae,"LI",{});var RSe=s(p3);gTe=n(RSe,"STRONG",{});var h5t=s(gTe);V0r=r(h5t,"albert"),h5t.forEach(t),X0r=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var u5t=s(HW);z0r=r(u5t,"FlaxAlbertForMaskedLM"),u5t.forEach(t),Q0r=r(RSe," (ALBERT model)"),RSe.forEach(t),W0r=i(Ae),_3=n(Ae,"LI",{});var BSe=s(_3);hTe=n(BSe,"STRONG",{});var p5t=s(hTe);H0r=r(p5t,"bart"),p5t.forEach(t),U0r=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var _5t=s(UW);J0r=r(_5t,"FlaxBartForConditionalGeneration"),_5t.forEach(t),Y0r=r(BSe," (BART model)"),BSe.forEach(t),K0r=i(Ae),b3=n(Ae,"LI",{});var PSe=s(b3);uTe=n(PSe,"STRONG",{});var b5t=s(uTe);Z0r=r(b5t,"bert"),b5t.forEach(t),eyr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var v5t=s(JW);oyr=r(v5t,"FlaxBertForMaskedLM"),v5t.forEach(t),ryr=r(PSe," (BERT model)"),PSe.forEach(t),tyr=i(Ae),v3=n(Ae,"LI",{});var $Se=s(v3);pTe=n($Se,"STRONG",{});var F5t=s(pTe);ayr=r(F5t,"big_bird"),F5t.forEach(t),nyr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var T5t=s(YW);syr=r(T5t,"FlaxBigBirdForMaskedLM"),T5t.forEach(t),lyr=r($Se," (BigBird model)"),$Se.forEach(t),iyr=i(Ae),F3=n(Ae,"LI",{});var ISe=s(F3);_Te=n(ISe,"STRONG",{});var M5t=s(_Te);dyr=r(M5t,"distilbert"),M5t.forEach(t),cyr=r(ISe," \u2014 "),KW=n(ISe,"A",{href:!0});var E5t=s(KW);myr=r(E5t,"FlaxDistilBertForMaskedLM"),E5t.forEach(t),fyr=r(ISe," (DistilBERT model)"),ISe.forEach(t),gyr=i(Ae),T3=n(Ae,"LI",{});var qSe=s(T3);bTe=n(qSe,"STRONG",{});var C5t=s(bTe);hyr=r(C5t,"electra"),C5t.forEach(t),uyr=r(qSe," \u2014 "),ZW=n(qSe,"A",{href:!0});var w5t=s(ZW);pyr=r(w5t,"FlaxElectraForMaskedLM"),w5t.forEach(t),_yr=r(qSe," (ELECTRA model)"),qSe.forEach(t),byr=i(Ae),M3=n(Ae,"LI",{});var NSe=s(M3);vTe=n(NSe,"STRONG",{});var A5t=s(vTe);vyr=r(A5t,"mbart"),A5t.forEach(t),Fyr=r(NSe," \u2014 "),eH=n(NSe,"A",{href:!0});var y5t=s(eH);Tyr=r(y5t,"FlaxMBartForConditionalGeneration"),y5t.forEach(t),Myr=r(NSe," (mBART model)"),NSe.forEach(t),Eyr=i(Ae),E3=n(Ae,"LI",{});var jSe=s(E3);FTe=n(jSe,"STRONG",{});var L5t=s(FTe);Cyr=r(L5t,"roberta"),L5t.forEach(t),wyr=r(jSe," \u2014 "),oH=n(jSe,"A",{href:!0});var x5t=s(oH);Ayr=r(x5t,"FlaxRobertaForMaskedLM"),x5t.forEach(t),yyr=r(jSe," (RoBERTa model)"),jSe.forEach(t),Lyr=i(Ae),C3=n(Ae,"LI",{});var DSe=s(C3);TTe=n(DSe,"STRONG",{});var k5t=s(TTe);xyr=r(k5t,"roformer"),k5t.forEach(t),kyr=r(DSe," \u2014 "),rH=n(DSe,"A",{href:!0});var S5t=s(rH);Syr=r(S5t,"FlaxRoFormerForMaskedLM"),S5t.forEach(t),Ryr=r(DSe," (RoFormer model)"),DSe.forEach(t),Byr=i(Ae),w3=n(Ae,"LI",{});var GSe=s(w3);MTe=n(GSe,"STRONG",{});var R5t=s(MTe);Pyr=r(R5t,"xlm-roberta"),R5t.forEach(t),$yr=r(GSe," \u2014 "),tH=n(GSe,"A",{href:!0});var B5t=s(tH);Iyr=r(B5t,"FlaxXLMRobertaForMaskedLM"),B5t.forEach(t),qyr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),Ae.forEach(t),Nyr=i(Sa),ETe=n(Sa,"P",{});var P5t=s(ETe);jyr=r(P5t,"Examples:"),P5t.forEach(t),Dyr=i(Sa),f(FL.$$.fragment,Sa),Sa.forEach(t),Ti.forEach(t),MPe=i(c),fm=n(c,"H2",{class:!0});var BIe=s(fm);A3=n(BIe,"A",{id:!0,class:!0,href:!0});var $5t=s(A3);CTe=n($5t,"SPAN",{});var I5t=s(CTe);f(TL.$$.fragment,I5t),I5t.forEach(t),$5t.forEach(t),Gyr=i(BIe),wTe=n(BIe,"SPAN",{});var q5t=s(wTe);Oyr=r(q5t,"FlaxAutoModelForSeq2SeqLM"),q5t.forEach(t),BIe.forEach(t),EPe=i(c),Ir=n(c,"DIV",{class:!0});var Ei=s(Ir);f(ML.$$.fragment,Ei),Vyr=i(Ei),gm=n(Ei,"P",{});var ZJ=s(gm);Xyr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=n(ZJ,"A",{href:!0});var N5t=s(aH);zyr=r(N5t,"from_pretrained()"),N5t.forEach(t),Qyr=r(ZJ," class method or the "),nH=n(ZJ,"A",{href:!0});var j5t=s(nH);Wyr=r(j5t,"from_config()"),j5t.forEach(t),Hyr=r(ZJ,` class
method.`),ZJ.forEach(t),Uyr=i(Ei),EL=n(Ei,"P",{});var PIe=s(EL);Jyr=r(PIe,"This class cannot be instantiated directly using "),ATe=n(PIe,"CODE",{});var D5t=s(ATe);Yyr=r(D5t,"__init__()"),D5t.forEach(t),Kyr=r(PIe," (throws an error)."),PIe.forEach(t),Zyr=i(Ei),kt=n(Ei,"DIV",{class:!0});var Ci=s(kt);f(CL.$$.fragment,Ci),e8r=i(Ci),yTe=n(Ci,"P",{});var G5t=s(yTe);o8r=r(G5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G5t.forEach(t),r8r=i(Ci),hm=n(Ci,"P",{});var eY=s(hm);t8r=r(eY,`Note:
Loading a model from its configuration file does `),LTe=n(eY,"STRONG",{});var O5t=s(LTe);a8r=r(O5t,"not"),O5t.forEach(t),n8r=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(eY,"A",{href:!0});var V5t=s(sH);s8r=r(V5t,"from_pretrained()"),V5t.forEach(t),l8r=r(eY," to load the model weights."),eY.forEach(t),i8r=i(Ci),xTe=n(Ci,"P",{});var X5t=s(xTe);d8r=r(X5t,"Examples:"),X5t.forEach(t),c8r=i(Ci),f(wL.$$.fragment,Ci),Ci.forEach(t),m8r=i(Ei),So=n(Ei,"DIV",{class:!0});var Ra=s(So);f(AL.$$.fragment,Ra),f8r=i(Ra),kTe=n(Ra,"P",{});var z5t=s(kTe);g8r=r(z5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z5t.forEach(t),h8r=i(Ra),Pn=n(Ra,"P",{});var Tw=s(Pn);u8r=r(Tw,"The model class to instantiate is selected based on the "),STe=n(Tw,"CODE",{});var Q5t=s(STe);p8r=r(Q5t,"model_type"),Q5t.forEach(t),_8r=r(Tw,` property of the config object (either
passed as an argument or loaded from `),RTe=n(Tw,"CODE",{});var W5t=s(RTe);b8r=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),v8r=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BTe=n(Tw,"CODE",{});var H5t=s(BTe);F8r=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),T8r=r(Tw,":"),Tw.forEach(t),M8r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);y3=n(so,"LI",{});var OSe=s(y3);PTe=n(OSe,"STRONG",{});var U5t=s(PTe);E8r=r(U5t,"bart"),U5t.forEach(t),C8r=r(OSe," \u2014 "),lH=n(OSe,"A",{href:!0});var J5t=s(lH);w8r=r(J5t,"FlaxBartForConditionalGeneration"),J5t.forEach(t),A8r=r(OSe," (BART model)"),OSe.forEach(t),y8r=i(so),L3=n(so,"LI",{});var VSe=s(L3);$Te=n(VSe,"STRONG",{});var Y5t=s($Te);L8r=r(Y5t,"blenderbot"),Y5t.forEach(t),x8r=r(VSe," \u2014 "),iH=n(VSe,"A",{href:!0});var K5t=s(iH);k8r=r(K5t,"FlaxBlenderbotForConditionalGeneration"),K5t.forEach(t),S8r=r(VSe," (Blenderbot model)"),VSe.forEach(t),R8r=i(so),x3=n(so,"LI",{});var XSe=s(x3);ITe=n(XSe,"STRONG",{});var Z5t=s(ITe);B8r=r(Z5t,"blenderbot-small"),Z5t.forEach(t),P8r=r(XSe," \u2014 "),dH=n(XSe,"A",{href:!0});var e3t=s(dH);$8r=r(e3t,"FlaxBlenderbotSmallForConditionalGeneration"),e3t.forEach(t),I8r=r(XSe," (BlenderbotSmall model)"),XSe.forEach(t),q8r=i(so),k3=n(so,"LI",{});var zSe=s(k3);qTe=n(zSe,"STRONG",{});var o3t=s(qTe);N8r=r(o3t,"encoder-decoder"),o3t.forEach(t),j8r=r(zSe," \u2014 "),cH=n(zSe,"A",{href:!0});var r3t=s(cH);D8r=r(r3t,"FlaxEncoderDecoderModel"),r3t.forEach(t),G8r=r(zSe," (Encoder decoder model)"),zSe.forEach(t),O8r=i(so),S3=n(so,"LI",{});var QSe=s(S3);NTe=n(QSe,"STRONG",{});var t3t=s(NTe);V8r=r(t3t,"marian"),t3t.forEach(t),X8r=r(QSe," \u2014 "),mH=n(QSe,"A",{href:!0});var a3t=s(mH);z8r=r(a3t,"FlaxMarianMTModel"),a3t.forEach(t),Q8r=r(QSe," (Marian model)"),QSe.forEach(t),W8r=i(so),R3=n(so,"LI",{});var WSe=s(R3);jTe=n(WSe,"STRONG",{});var n3t=s(jTe);H8r=r(n3t,"mbart"),n3t.forEach(t),U8r=r(WSe," \u2014 "),fH=n(WSe,"A",{href:!0});var s3t=s(fH);J8r=r(s3t,"FlaxMBartForConditionalGeneration"),s3t.forEach(t),Y8r=r(WSe," (mBART model)"),WSe.forEach(t),K8r=i(so),B3=n(so,"LI",{});var HSe=s(B3);DTe=n(HSe,"STRONG",{});var l3t=s(DTe);Z8r=r(l3t,"mt5"),l3t.forEach(t),eLr=r(HSe," \u2014 "),gH=n(HSe,"A",{href:!0});var i3t=s(gH);oLr=r(i3t,"FlaxMT5ForConditionalGeneration"),i3t.forEach(t),rLr=r(HSe," (mT5 model)"),HSe.forEach(t),tLr=i(so),P3=n(so,"LI",{});var USe=s(P3);GTe=n(USe,"STRONG",{});var d3t=s(GTe);aLr=r(d3t,"pegasus"),d3t.forEach(t),nLr=r(USe," \u2014 "),hH=n(USe,"A",{href:!0});var c3t=s(hH);sLr=r(c3t,"FlaxPegasusForConditionalGeneration"),c3t.forEach(t),lLr=r(USe," (Pegasus model)"),USe.forEach(t),iLr=i(so),$3=n(so,"LI",{});var JSe=s($3);OTe=n(JSe,"STRONG",{});var m3t=s(OTe);dLr=r(m3t,"t5"),m3t.forEach(t),cLr=r(JSe," \u2014 "),uH=n(JSe,"A",{href:!0});var f3t=s(uH);mLr=r(f3t,"FlaxT5ForConditionalGeneration"),f3t.forEach(t),fLr=r(JSe," (T5 model)"),JSe.forEach(t),so.forEach(t),gLr=i(Ra),VTe=n(Ra,"P",{});var g3t=s(VTe);hLr=r(g3t,"Examples:"),g3t.forEach(t),uLr=i(Ra),f(yL.$$.fragment,Ra),Ra.forEach(t),Ei.forEach(t),CPe=i(c),um=n(c,"H2",{class:!0});var $Ie=s(um);I3=n($Ie,"A",{id:!0,class:!0,href:!0});var h3t=s(I3);XTe=n(h3t,"SPAN",{});var u3t=s(XTe);f(LL.$$.fragment,u3t),u3t.forEach(t),h3t.forEach(t),pLr=i($Ie),zTe=n($Ie,"SPAN",{});var p3t=s(zTe);_Lr=r(p3t,"FlaxAutoModelForSequenceClassification"),p3t.forEach(t),$Ie.forEach(t),wPe=i(c),qr=n(c,"DIV",{class:!0});var wi=s(qr);f(xL.$$.fragment,wi),bLr=i(wi),pm=n(wi,"P",{});var oY=s(pm);vLr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pH=n(oY,"A",{href:!0});var _3t=s(pH);FLr=r(_3t,"from_pretrained()"),_3t.forEach(t),TLr=r(oY," class method or the "),_H=n(oY,"A",{href:!0});var b3t=s(_H);MLr=r(b3t,"from_config()"),b3t.forEach(t),ELr=r(oY,` class
method.`),oY.forEach(t),CLr=i(wi),kL=n(wi,"P",{});var IIe=s(kL);wLr=r(IIe,"This class cannot be instantiated directly using "),QTe=n(IIe,"CODE",{});var v3t=s(QTe);ALr=r(v3t,"__init__()"),v3t.forEach(t),yLr=r(IIe," (throws an error)."),IIe.forEach(t),LLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);f(SL.$$.fragment,Ai),xLr=i(Ai),WTe=n(Ai,"P",{});var F3t=s(WTe);kLr=r(F3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F3t.forEach(t),SLr=i(Ai),_m=n(Ai,"P",{});var rY=s(_m);RLr=r(rY,`Note:
Loading a model from its configuration file does `),HTe=n(rY,"STRONG",{});var T3t=s(HTe);BLr=r(T3t,"not"),T3t.forEach(t),PLr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(rY,"A",{href:!0});var M3t=s(bH);$Lr=r(M3t,"from_pretrained()"),M3t.forEach(t),ILr=r(rY," to load the model weights."),rY.forEach(t),qLr=i(Ai),UTe=n(Ai,"P",{});var E3t=s(UTe);NLr=r(E3t,"Examples:"),E3t.forEach(t),jLr=i(Ai),f(RL.$$.fragment,Ai),Ai.forEach(t),DLr=i(wi),Ro=n(wi,"DIV",{class:!0});var Ba=s(Ro);f(BL.$$.fragment,Ba),GLr=i(Ba),JTe=n(Ba,"P",{});var C3t=s(JTe);OLr=r(C3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C3t.forEach(t),VLr=i(Ba),$n=n(Ba,"P",{});var Mw=s($n);XLr=r(Mw,"The model class to instantiate is selected based on the "),YTe=n(Mw,"CODE",{});var w3t=s(YTe);zLr=r(w3t,"model_type"),w3t.forEach(t),QLr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),KTe=n(Mw,"CODE",{});var A3t=s(KTe);WLr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),HLr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(Mw,"CODE",{});var y3t=s(ZTe);ULr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),JLr=r(Mw,":"),Mw.forEach(t),YLr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);q3=n(ye,"LI",{});var YSe=s(q3);eMe=n(YSe,"STRONG",{});var L3t=s(eMe);KLr=r(L3t,"albert"),L3t.forEach(t),ZLr=r(YSe," \u2014 "),vH=n(YSe,"A",{href:!0});var x3t=s(vH);e7r=r(x3t,"FlaxAlbertForSequenceClassification"),x3t.forEach(t),o7r=r(YSe," (ALBERT model)"),YSe.forEach(t),r7r=i(ye),N3=n(ye,"LI",{});var KSe=s(N3);oMe=n(KSe,"STRONG",{});var k3t=s(oMe);t7r=r(k3t,"bart"),k3t.forEach(t),a7r=r(KSe," \u2014 "),FH=n(KSe,"A",{href:!0});var S3t=s(FH);n7r=r(S3t,"FlaxBartForSequenceClassification"),S3t.forEach(t),s7r=r(KSe," (BART model)"),KSe.forEach(t),l7r=i(ye),j3=n(ye,"LI",{});var ZSe=s(j3);rMe=n(ZSe,"STRONG",{});var R3t=s(rMe);i7r=r(R3t,"bert"),R3t.forEach(t),d7r=r(ZSe," \u2014 "),TH=n(ZSe,"A",{href:!0});var B3t=s(TH);c7r=r(B3t,"FlaxBertForSequenceClassification"),B3t.forEach(t),m7r=r(ZSe," (BERT model)"),ZSe.forEach(t),f7r=i(ye),D3=n(ye,"LI",{});var eRe=s(D3);tMe=n(eRe,"STRONG",{});var P3t=s(tMe);g7r=r(P3t,"big_bird"),P3t.forEach(t),h7r=r(eRe," \u2014 "),MH=n(eRe,"A",{href:!0});var $3t=s(MH);u7r=r($3t,"FlaxBigBirdForSequenceClassification"),$3t.forEach(t),p7r=r(eRe," (BigBird model)"),eRe.forEach(t),_7r=i(ye),G3=n(ye,"LI",{});var oRe=s(G3);aMe=n(oRe,"STRONG",{});var I3t=s(aMe);b7r=r(I3t,"distilbert"),I3t.forEach(t),v7r=r(oRe," \u2014 "),EH=n(oRe,"A",{href:!0});var q3t=s(EH);F7r=r(q3t,"FlaxDistilBertForSequenceClassification"),q3t.forEach(t),T7r=r(oRe," (DistilBERT model)"),oRe.forEach(t),M7r=i(ye),O3=n(ye,"LI",{});var rRe=s(O3);nMe=n(rRe,"STRONG",{});var N3t=s(nMe);E7r=r(N3t,"electra"),N3t.forEach(t),C7r=r(rRe," \u2014 "),CH=n(rRe,"A",{href:!0});var j3t=s(CH);w7r=r(j3t,"FlaxElectraForSequenceClassification"),j3t.forEach(t),A7r=r(rRe," (ELECTRA model)"),rRe.forEach(t),y7r=i(ye),V3=n(ye,"LI",{});var tRe=s(V3);sMe=n(tRe,"STRONG",{});var D3t=s(sMe);L7r=r(D3t,"mbart"),D3t.forEach(t),x7r=r(tRe," \u2014 "),wH=n(tRe,"A",{href:!0});var G3t=s(wH);k7r=r(G3t,"FlaxMBartForSequenceClassification"),G3t.forEach(t),S7r=r(tRe," (mBART model)"),tRe.forEach(t),R7r=i(ye),X3=n(ye,"LI",{});var aRe=s(X3);lMe=n(aRe,"STRONG",{});var O3t=s(lMe);B7r=r(O3t,"roberta"),O3t.forEach(t),P7r=r(aRe," \u2014 "),AH=n(aRe,"A",{href:!0});var V3t=s(AH);$7r=r(V3t,"FlaxRobertaForSequenceClassification"),V3t.forEach(t),I7r=r(aRe," (RoBERTa model)"),aRe.forEach(t),q7r=i(ye),z3=n(ye,"LI",{});var nRe=s(z3);iMe=n(nRe,"STRONG",{});var X3t=s(iMe);N7r=r(X3t,"roformer"),X3t.forEach(t),j7r=r(nRe," \u2014 "),yH=n(nRe,"A",{href:!0});var z3t=s(yH);D7r=r(z3t,"FlaxRoFormerForSequenceClassification"),z3t.forEach(t),G7r=r(nRe," (RoFormer model)"),nRe.forEach(t),O7r=i(ye),Q3=n(ye,"LI",{});var sRe=s(Q3);dMe=n(sRe,"STRONG",{});var Q3t=s(dMe);V7r=r(Q3t,"xlm-roberta"),Q3t.forEach(t),X7r=r(sRe," \u2014 "),LH=n(sRe,"A",{href:!0});var W3t=s(LH);z7r=r(W3t,"FlaxXLMRobertaForSequenceClassification"),W3t.forEach(t),Q7r=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),ye.forEach(t),W7r=i(Ba),cMe=n(Ba,"P",{});var H3t=s(cMe);H7r=r(H3t,"Examples:"),H3t.forEach(t),U7r=i(Ba),f(PL.$$.fragment,Ba),Ba.forEach(t),wi.forEach(t),APe=i(c),bm=n(c,"H2",{class:!0});var qIe=s(bm);W3=n(qIe,"A",{id:!0,class:!0,href:!0});var U3t=s(W3);mMe=n(U3t,"SPAN",{});var J3t=s(mMe);f($L.$$.fragment,J3t),J3t.forEach(t),U3t.forEach(t),J7r=i(qIe),fMe=n(qIe,"SPAN",{});var Y3t=s(fMe);Y7r=r(Y3t,"FlaxAutoModelForQuestionAnswering"),Y3t.forEach(t),qIe.forEach(t),yPe=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);f(IL.$$.fragment,yi),K7r=i(yi),vm=n(yi,"P",{});var tY=s(vm);Z7r=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=n(tY,"A",{href:!0});var K3t=s(xH);e9r=r(K3t,"from_pretrained()"),K3t.forEach(t),o9r=r(tY," class method or the "),kH=n(tY,"A",{href:!0});var Z3t=s(kH);r9r=r(Z3t,"from_config()"),Z3t.forEach(t),t9r=r(tY,` class
method.`),tY.forEach(t),a9r=i(yi),qL=n(yi,"P",{});var NIe=s(qL);n9r=r(NIe,"This class cannot be instantiated directly using "),gMe=n(NIe,"CODE",{});var eCt=s(gMe);s9r=r(eCt,"__init__()"),eCt.forEach(t),l9r=r(NIe," (throws an error)."),NIe.forEach(t),i9r=i(yi),Rt=n(yi,"DIV",{class:!0});var Li=s(Rt);f(NL.$$.fragment,Li),d9r=i(Li),hMe=n(Li,"P",{});var oCt=s(hMe);c9r=r(oCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oCt.forEach(t),m9r=i(Li),Fm=n(Li,"P",{});var aY=s(Fm);f9r=r(aY,`Note:
Loading a model from its configuration file does `),uMe=n(aY,"STRONG",{});var rCt=s(uMe);g9r=r(rCt,"not"),rCt.forEach(t),h9r=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(aY,"A",{href:!0});var tCt=s(SH);u9r=r(tCt,"from_pretrained()"),tCt.forEach(t),p9r=r(aY," to load the model weights."),aY.forEach(t),_9r=i(Li),pMe=n(Li,"P",{});var aCt=s(pMe);b9r=r(aCt,"Examples:"),aCt.forEach(t),v9r=i(Li),f(jL.$$.fragment,Li),Li.forEach(t),F9r=i(yi),Bo=n(yi,"DIV",{class:!0});var Pa=s(Bo);f(DL.$$.fragment,Pa),T9r=i(Pa),_Me=n(Pa,"P",{});var nCt=s(_Me);M9r=r(nCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nCt.forEach(t),E9r=i(Pa),In=n(Pa,"P",{});var Ew=s(In);C9r=r(Ew,"The model class to instantiate is selected based on the "),bMe=n(Ew,"CODE",{});var sCt=s(bMe);w9r=r(sCt,"model_type"),sCt.forEach(t),A9r=r(Ew,` property of the config object (either
passed as an argument or loaded from `),vMe=n(Ew,"CODE",{});var lCt=s(vMe);y9r=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),L9r=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(Ew,"CODE",{});var iCt=s(FMe);x9r=r(iCt,"pretrained_model_name_or_path"),iCt.forEach(t),k9r=r(Ew,":"),Ew.forEach(t),S9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);H3=n(Le,"LI",{});var lRe=s(H3);TMe=n(lRe,"STRONG",{});var dCt=s(TMe);R9r=r(dCt,"albert"),dCt.forEach(t),B9r=r(lRe," \u2014 "),RH=n(lRe,"A",{href:!0});var cCt=s(RH);P9r=r(cCt,"FlaxAlbertForQuestionAnswering"),cCt.forEach(t),$9r=r(lRe," (ALBERT model)"),lRe.forEach(t),I9r=i(Le),U3=n(Le,"LI",{});var iRe=s(U3);MMe=n(iRe,"STRONG",{});var mCt=s(MMe);q9r=r(mCt,"bart"),mCt.forEach(t),N9r=r(iRe," \u2014 "),BH=n(iRe,"A",{href:!0});var fCt=s(BH);j9r=r(fCt,"FlaxBartForQuestionAnswering"),fCt.forEach(t),D9r=r(iRe," (BART model)"),iRe.forEach(t),G9r=i(Le),J3=n(Le,"LI",{});var dRe=s(J3);EMe=n(dRe,"STRONG",{});var gCt=s(EMe);O9r=r(gCt,"bert"),gCt.forEach(t),V9r=r(dRe," \u2014 "),PH=n(dRe,"A",{href:!0});var hCt=s(PH);X9r=r(hCt,"FlaxBertForQuestionAnswering"),hCt.forEach(t),z9r=r(dRe," (BERT model)"),dRe.forEach(t),Q9r=i(Le),Y3=n(Le,"LI",{});var cRe=s(Y3);CMe=n(cRe,"STRONG",{});var uCt=s(CMe);W9r=r(uCt,"big_bird"),uCt.forEach(t),H9r=r(cRe," \u2014 "),$H=n(cRe,"A",{href:!0});var pCt=s($H);U9r=r(pCt,"FlaxBigBirdForQuestionAnswering"),pCt.forEach(t),J9r=r(cRe," (BigBird model)"),cRe.forEach(t),Y9r=i(Le),K3=n(Le,"LI",{});var mRe=s(K3);wMe=n(mRe,"STRONG",{});var _Ct=s(wMe);K9r=r(_Ct,"distilbert"),_Ct.forEach(t),Z9r=r(mRe," \u2014 "),IH=n(mRe,"A",{href:!0});var bCt=s(IH);exr=r(bCt,"FlaxDistilBertForQuestionAnswering"),bCt.forEach(t),oxr=r(mRe," (DistilBERT model)"),mRe.forEach(t),rxr=i(Le),Z3=n(Le,"LI",{});var fRe=s(Z3);AMe=n(fRe,"STRONG",{});var vCt=s(AMe);txr=r(vCt,"electra"),vCt.forEach(t),axr=r(fRe," \u2014 "),qH=n(fRe,"A",{href:!0});var FCt=s(qH);nxr=r(FCt,"FlaxElectraForQuestionAnswering"),FCt.forEach(t),sxr=r(fRe," (ELECTRA model)"),fRe.forEach(t),lxr=i(Le),eC=n(Le,"LI",{});var gRe=s(eC);yMe=n(gRe,"STRONG",{});var TCt=s(yMe);ixr=r(TCt,"mbart"),TCt.forEach(t),dxr=r(gRe," \u2014 "),NH=n(gRe,"A",{href:!0});var MCt=s(NH);cxr=r(MCt,"FlaxMBartForQuestionAnswering"),MCt.forEach(t),mxr=r(gRe," (mBART model)"),gRe.forEach(t),fxr=i(Le),oC=n(Le,"LI",{});var hRe=s(oC);LMe=n(hRe,"STRONG",{});var ECt=s(LMe);gxr=r(ECt,"roberta"),ECt.forEach(t),hxr=r(hRe," \u2014 "),jH=n(hRe,"A",{href:!0});var CCt=s(jH);uxr=r(CCt,"FlaxRobertaForQuestionAnswering"),CCt.forEach(t),pxr=r(hRe," (RoBERTa model)"),hRe.forEach(t),_xr=i(Le),rC=n(Le,"LI",{});var uRe=s(rC);xMe=n(uRe,"STRONG",{});var wCt=s(xMe);bxr=r(wCt,"roformer"),wCt.forEach(t),vxr=r(uRe," \u2014 "),DH=n(uRe,"A",{href:!0});var ACt=s(DH);Fxr=r(ACt,"FlaxRoFormerForQuestionAnswering"),ACt.forEach(t),Txr=r(uRe," (RoFormer model)"),uRe.forEach(t),Mxr=i(Le),tC=n(Le,"LI",{});var pRe=s(tC);kMe=n(pRe,"STRONG",{});var yCt=s(kMe);Exr=r(yCt,"xlm-roberta"),yCt.forEach(t),Cxr=r(pRe," \u2014 "),GH=n(pRe,"A",{href:!0});var LCt=s(GH);wxr=r(LCt,"FlaxXLMRobertaForQuestionAnswering"),LCt.forEach(t),Axr=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),Le.forEach(t),yxr=i(Pa),SMe=n(Pa,"P",{});var xCt=s(SMe);Lxr=r(xCt,"Examples:"),xCt.forEach(t),xxr=i(Pa),f(GL.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),LPe=i(c),Tm=n(c,"H2",{class:!0});var jIe=s(Tm);aC=n(jIe,"A",{id:!0,class:!0,href:!0});var kCt=s(aC);RMe=n(kCt,"SPAN",{});var SCt=s(RMe);f(OL.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),kxr=i(jIe),BMe=n(jIe,"SPAN",{});var RCt=s(BMe);Sxr=r(RCt,"FlaxAutoModelForTokenClassification"),RCt.forEach(t),jIe.forEach(t),xPe=i(c),jr=n(c,"DIV",{class:!0});var xi=s(jr);f(VL.$$.fragment,xi),Rxr=i(xi),Mm=n(xi,"P",{});var nY=s(Mm);Bxr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(nY,"A",{href:!0});var BCt=s(OH);Pxr=r(BCt,"from_pretrained()"),BCt.forEach(t),$xr=r(nY," class method or the "),VH=n(nY,"A",{href:!0});var PCt=s(VH);Ixr=r(PCt,"from_config()"),PCt.forEach(t),qxr=r(nY,` class
method.`),nY.forEach(t),Nxr=i(xi),XL=n(xi,"P",{});var DIe=s(XL);jxr=r(DIe,"This class cannot be instantiated directly using "),PMe=n(DIe,"CODE",{});var $Ct=s(PMe);Dxr=r($Ct,"__init__()"),$Ct.forEach(t),Gxr=r(DIe," (throws an error)."),DIe.forEach(t),Oxr=i(xi),Bt=n(xi,"DIV",{class:!0});var ki=s(Bt);f(zL.$$.fragment,ki),Vxr=i(ki),$Me=n(ki,"P",{});var ICt=s($Me);Xxr=r(ICt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ICt.forEach(t),zxr=i(ki),Em=n(ki,"P",{});var sY=s(Em);Qxr=r(sY,`Note:
Loading a model from its configuration file does `),IMe=n(sY,"STRONG",{});var qCt=s(IMe);Wxr=r(qCt,"not"),qCt.forEach(t),Hxr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(sY,"A",{href:!0});var NCt=s(XH);Uxr=r(NCt,"from_pretrained()"),NCt.forEach(t),Jxr=r(sY," to load the model weights."),sY.forEach(t),Yxr=i(ki),qMe=n(ki,"P",{});var jCt=s(qMe);Kxr=r(jCt,"Examples:"),jCt.forEach(t),Zxr=i(ki),f(QL.$$.fragment,ki),ki.forEach(t),ekr=i(xi),Po=n(xi,"DIV",{class:!0});var $a=s(Po);f(WL.$$.fragment,$a),okr=i($a),NMe=n($a,"P",{});var DCt=s(NMe);rkr=r(DCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DCt.forEach(t),tkr=i($a),qn=n($a,"P",{});var Cw=s(qn);akr=r(Cw,"The model class to instantiate is selected based on the "),jMe=n(Cw,"CODE",{});var GCt=s(jMe);nkr=r(GCt,"model_type"),GCt.forEach(t),skr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),DMe=n(Cw,"CODE",{});var OCt=s(DMe);lkr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),ikr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(Cw,"CODE",{});var VCt=s(GMe);dkr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),ckr=r(Cw,":"),Cw.forEach(t),mkr=i($a),Be=n($a,"UL",{});var Oo=s(Be);nC=n(Oo,"LI",{});var _Re=s(nC);OMe=n(_Re,"STRONG",{});var XCt=s(OMe);fkr=r(XCt,"albert"),XCt.forEach(t),gkr=r(_Re," \u2014 "),zH=n(_Re,"A",{href:!0});var zCt=s(zH);hkr=r(zCt,"FlaxAlbertForTokenClassification"),zCt.forEach(t),ukr=r(_Re," (ALBERT model)"),_Re.forEach(t),pkr=i(Oo),sC=n(Oo,"LI",{});var bRe=s(sC);VMe=n(bRe,"STRONG",{});var QCt=s(VMe);_kr=r(QCt,"bert"),QCt.forEach(t),bkr=r(bRe," \u2014 "),QH=n(bRe,"A",{href:!0});var WCt=s(QH);vkr=r(WCt,"FlaxBertForTokenClassification"),WCt.forEach(t),Fkr=r(bRe," (BERT model)"),bRe.forEach(t),Tkr=i(Oo),lC=n(Oo,"LI",{});var vRe=s(lC);XMe=n(vRe,"STRONG",{});var HCt=s(XMe);Mkr=r(HCt,"big_bird"),HCt.forEach(t),Ekr=r(vRe," \u2014 "),WH=n(vRe,"A",{href:!0});var UCt=s(WH);Ckr=r(UCt,"FlaxBigBirdForTokenClassification"),UCt.forEach(t),wkr=r(vRe," (BigBird model)"),vRe.forEach(t),Akr=i(Oo),iC=n(Oo,"LI",{});var FRe=s(iC);zMe=n(FRe,"STRONG",{});var JCt=s(zMe);ykr=r(JCt,"distilbert"),JCt.forEach(t),Lkr=r(FRe," \u2014 "),HH=n(FRe,"A",{href:!0});var YCt=s(HH);xkr=r(YCt,"FlaxDistilBertForTokenClassification"),YCt.forEach(t),kkr=r(FRe," (DistilBERT model)"),FRe.forEach(t),Skr=i(Oo),dC=n(Oo,"LI",{});var TRe=s(dC);QMe=n(TRe,"STRONG",{});var KCt=s(QMe);Rkr=r(KCt,"electra"),KCt.forEach(t),Bkr=r(TRe," \u2014 "),UH=n(TRe,"A",{href:!0});var ZCt=s(UH);Pkr=r(ZCt,"FlaxElectraForTokenClassification"),ZCt.forEach(t),$kr=r(TRe," (ELECTRA model)"),TRe.forEach(t),Ikr=i(Oo),cC=n(Oo,"LI",{});var MRe=s(cC);WMe=n(MRe,"STRONG",{});var ewt=s(WMe);qkr=r(ewt,"roberta"),ewt.forEach(t),Nkr=r(MRe," \u2014 "),JH=n(MRe,"A",{href:!0});var owt=s(JH);jkr=r(owt,"FlaxRobertaForTokenClassification"),owt.forEach(t),Dkr=r(MRe," (RoBERTa model)"),MRe.forEach(t),Gkr=i(Oo),mC=n(Oo,"LI",{});var ERe=s(mC);HMe=n(ERe,"STRONG",{});var rwt=s(HMe);Okr=r(rwt,"roformer"),rwt.forEach(t),Vkr=r(ERe," \u2014 "),YH=n(ERe,"A",{href:!0});var twt=s(YH);Xkr=r(twt,"FlaxRoFormerForTokenClassification"),twt.forEach(t),zkr=r(ERe," (RoFormer model)"),ERe.forEach(t),Qkr=i(Oo),fC=n(Oo,"LI",{});var CRe=s(fC);UMe=n(CRe,"STRONG",{});var awt=s(UMe);Wkr=r(awt,"xlm-roberta"),awt.forEach(t),Hkr=r(CRe," \u2014 "),KH=n(CRe,"A",{href:!0});var nwt=s(KH);Ukr=r(nwt,"FlaxXLMRobertaForTokenClassification"),nwt.forEach(t),Jkr=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),Oo.forEach(t),Ykr=i($a),JMe=n($a,"P",{});var swt=s(JMe);Kkr=r(swt,"Examples:"),swt.forEach(t),Zkr=i($a),f(HL.$$.fragment,$a),$a.forEach(t),xi.forEach(t),kPe=i(c),Cm=n(c,"H2",{class:!0});var GIe=s(Cm);gC=n(GIe,"A",{id:!0,class:!0,href:!0});var lwt=s(gC);YMe=n(lwt,"SPAN",{});var iwt=s(YMe);f(UL.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),eSr=i(GIe),KMe=n(GIe,"SPAN",{});var dwt=s(KMe);oSr=r(dwt,"FlaxAutoModelForMultipleChoice"),dwt.forEach(t),GIe.forEach(t),SPe=i(c),Dr=n(c,"DIV",{class:!0});var Si=s(Dr);f(JL.$$.fragment,Si),rSr=i(Si),wm=n(Si,"P",{});var lY=s(wm);tSr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=n(lY,"A",{href:!0});var cwt=s(ZH);aSr=r(cwt,"from_pretrained()"),cwt.forEach(t),nSr=r(lY," class method or the "),eU=n(lY,"A",{href:!0});var mwt=s(eU);sSr=r(mwt,"from_config()"),mwt.forEach(t),lSr=r(lY,` class
method.`),lY.forEach(t),iSr=i(Si),YL=n(Si,"P",{});var OIe=s(YL);dSr=r(OIe,"This class cannot be instantiated directly using "),ZMe=n(OIe,"CODE",{});var fwt=s(ZMe);cSr=r(fwt,"__init__()"),fwt.forEach(t),mSr=r(OIe," (throws an error)."),OIe.forEach(t),fSr=i(Si),Pt=n(Si,"DIV",{class:!0});var Ri=s(Pt);f(KL.$$.fragment,Ri),gSr=i(Ri),e4e=n(Ri,"P",{});var gwt=s(e4e);hSr=r(gwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gwt.forEach(t),uSr=i(Ri),Am=n(Ri,"P",{});var iY=s(Am);pSr=r(iY,`Note:
Loading a model from its configuration file does `),o4e=n(iY,"STRONG",{});var hwt=s(o4e);_Sr=r(hwt,"not"),hwt.forEach(t),bSr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(iY,"A",{href:!0});var uwt=s(oU);vSr=r(uwt,"from_pretrained()"),uwt.forEach(t),FSr=r(iY," to load the model weights."),iY.forEach(t),TSr=i(Ri),r4e=n(Ri,"P",{});var pwt=s(r4e);MSr=r(pwt,"Examples:"),pwt.forEach(t),ESr=i(Ri),f(ZL.$$.fragment,Ri),Ri.forEach(t),CSr=i(Si),$o=n(Si,"DIV",{class:!0});var Ia=s($o);f(e7.$$.fragment,Ia),wSr=i(Ia),t4e=n(Ia,"P",{});var _wt=s(t4e);ASr=r(_wt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_wt.forEach(t),ySr=i(Ia),Nn=n(Ia,"P",{});var ww=s(Nn);LSr=r(ww,"The model class to instantiate is selected based on the "),a4e=n(ww,"CODE",{});var bwt=s(a4e);xSr=r(bwt,"model_type"),bwt.forEach(t),kSr=r(ww,` property of the config object (either
passed as an argument or loaded from `),n4e=n(ww,"CODE",{});var vwt=s(n4e);SSr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),RSr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(ww,"CODE",{});var Fwt=s(s4e);BSr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),PSr=r(ww,":"),ww.forEach(t),$Sr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);hC=n(Vo,"LI",{});var wRe=s(hC);l4e=n(wRe,"STRONG",{});var Twt=s(l4e);ISr=r(Twt,"albert"),Twt.forEach(t),qSr=r(wRe," \u2014 "),rU=n(wRe,"A",{href:!0});var Mwt=s(rU);NSr=r(Mwt,"FlaxAlbertForMultipleChoice"),Mwt.forEach(t),jSr=r(wRe," (ALBERT model)"),wRe.forEach(t),DSr=i(Vo),uC=n(Vo,"LI",{});var ARe=s(uC);i4e=n(ARe,"STRONG",{});var Ewt=s(i4e);GSr=r(Ewt,"bert"),Ewt.forEach(t),OSr=r(ARe," \u2014 "),tU=n(ARe,"A",{href:!0});var Cwt=s(tU);VSr=r(Cwt,"FlaxBertForMultipleChoice"),Cwt.forEach(t),XSr=r(ARe," (BERT model)"),ARe.forEach(t),zSr=i(Vo),pC=n(Vo,"LI",{});var yRe=s(pC);d4e=n(yRe,"STRONG",{});var wwt=s(d4e);QSr=r(wwt,"big_bird"),wwt.forEach(t),WSr=r(yRe," \u2014 "),aU=n(yRe,"A",{href:!0});var Awt=s(aU);HSr=r(Awt,"FlaxBigBirdForMultipleChoice"),Awt.forEach(t),USr=r(yRe," (BigBird model)"),yRe.forEach(t),JSr=i(Vo),_C=n(Vo,"LI",{});var LRe=s(_C);c4e=n(LRe,"STRONG",{});var ywt=s(c4e);YSr=r(ywt,"distilbert"),ywt.forEach(t),KSr=r(LRe," \u2014 "),nU=n(LRe,"A",{href:!0});var Lwt=s(nU);ZSr=r(Lwt,"FlaxDistilBertForMultipleChoice"),Lwt.forEach(t),eRr=r(LRe," (DistilBERT model)"),LRe.forEach(t),oRr=i(Vo),bC=n(Vo,"LI",{});var xRe=s(bC);m4e=n(xRe,"STRONG",{});var xwt=s(m4e);rRr=r(xwt,"electra"),xwt.forEach(t),tRr=r(xRe," \u2014 "),sU=n(xRe,"A",{href:!0});var kwt=s(sU);aRr=r(kwt,"FlaxElectraForMultipleChoice"),kwt.forEach(t),nRr=r(xRe," (ELECTRA model)"),xRe.forEach(t),sRr=i(Vo),vC=n(Vo,"LI",{});var kRe=s(vC);f4e=n(kRe,"STRONG",{});var Swt=s(f4e);lRr=r(Swt,"roberta"),Swt.forEach(t),iRr=r(kRe," \u2014 "),lU=n(kRe,"A",{href:!0});var Rwt=s(lU);dRr=r(Rwt,"FlaxRobertaForMultipleChoice"),Rwt.forEach(t),cRr=r(kRe," (RoBERTa model)"),kRe.forEach(t),mRr=i(Vo),FC=n(Vo,"LI",{});var SRe=s(FC);g4e=n(SRe,"STRONG",{});var Bwt=s(g4e);fRr=r(Bwt,"roformer"),Bwt.forEach(t),gRr=r(SRe," \u2014 "),iU=n(SRe,"A",{href:!0});var Pwt=s(iU);hRr=r(Pwt,"FlaxRoFormerForMultipleChoice"),Pwt.forEach(t),uRr=r(SRe," (RoFormer model)"),SRe.forEach(t),pRr=i(Vo),TC=n(Vo,"LI",{});var RRe=s(TC);h4e=n(RRe,"STRONG",{});var $wt=s(h4e);_Rr=r($wt,"xlm-roberta"),$wt.forEach(t),bRr=r(RRe," \u2014 "),dU=n(RRe,"A",{href:!0});var Iwt=s(dU);vRr=r(Iwt,"FlaxXLMRobertaForMultipleChoice"),Iwt.forEach(t),FRr=r(RRe," (XLM-RoBERTa model)"),RRe.forEach(t),Vo.forEach(t),TRr=i(Ia),u4e=n(Ia,"P",{});var qwt=s(u4e);MRr=r(qwt,"Examples:"),qwt.forEach(t),ERr=i(Ia),f(o7.$$.fragment,Ia),Ia.forEach(t),Si.forEach(t),RPe=i(c),ym=n(c,"H2",{class:!0});var VIe=s(ym);MC=n(VIe,"A",{id:!0,class:!0,href:!0});var Nwt=s(MC);p4e=n(Nwt,"SPAN",{});var jwt=s(p4e);f(r7.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),CRr=i(VIe),_4e=n(VIe,"SPAN",{});var Dwt=s(_4e);wRr=r(Dwt,"FlaxAutoModelForNextSentencePrediction"),Dwt.forEach(t),VIe.forEach(t),BPe=i(c),Gr=n(c,"DIV",{class:!0});var Bi=s(Gr);f(t7.$$.fragment,Bi),ARr=i(Bi),Lm=n(Bi,"P",{});var dY=s(Lm);yRr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=n(dY,"A",{href:!0});var Gwt=s(cU);LRr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),xRr=r(dY," class method or the "),mU=n(dY,"A",{href:!0});var Owt=s(mU);kRr=r(Owt,"from_config()"),Owt.forEach(t),SRr=r(dY,` class
method.`),dY.forEach(t),RRr=i(Bi),a7=n(Bi,"P",{});var XIe=s(a7);BRr=r(XIe,"This class cannot be instantiated directly using "),b4e=n(XIe,"CODE",{});var Vwt=s(b4e);PRr=r(Vwt,"__init__()"),Vwt.forEach(t),$Rr=r(XIe," (throws an error)."),XIe.forEach(t),IRr=i(Bi),$t=n(Bi,"DIV",{class:!0});var Pi=s($t);f(n7.$$.fragment,Pi),qRr=i(Pi),v4e=n(Pi,"P",{});var Xwt=s(v4e);NRr=r(Xwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xwt.forEach(t),jRr=i(Pi),xm=n(Pi,"P",{});var cY=s(xm);DRr=r(cY,`Note:
Loading a model from its configuration file does `),F4e=n(cY,"STRONG",{});var zwt=s(F4e);GRr=r(zwt,"not"),zwt.forEach(t),ORr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(cY,"A",{href:!0});var Qwt=s(fU);VRr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),XRr=r(cY," to load the model weights."),cY.forEach(t),zRr=i(Pi),T4e=n(Pi,"P",{});var Wwt=s(T4e);QRr=r(Wwt,"Examples:"),Wwt.forEach(t),WRr=i(Pi),f(s7.$$.fragment,Pi),Pi.forEach(t),HRr=i(Bi),Io=n(Bi,"DIV",{class:!0});var qa=s(Io);f(l7.$$.fragment,qa),URr=i(qa),M4e=n(qa,"P",{});var Hwt=s(M4e);JRr=r(Hwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hwt.forEach(t),YRr=i(qa),jn=n(qa,"P",{});var Aw=s(jn);KRr=r(Aw,"The model class to instantiate is selected based on the "),E4e=n(Aw,"CODE",{});var Uwt=s(E4e);ZRr=r(Uwt,"model_type"),Uwt.forEach(t),eBr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),C4e=n(Aw,"CODE",{});var Jwt=s(C4e);oBr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),rBr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(Aw,"CODE",{});var Ywt=s(w4e);tBr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),aBr=r(Aw,":"),Aw.forEach(t),nBr=i(qa),A4e=n(qa,"UL",{});var Kwt=s(A4e);EC=n(Kwt,"LI",{});var BRe=s(EC);y4e=n(BRe,"STRONG",{});var Zwt=s(y4e);sBr=r(Zwt,"bert"),Zwt.forEach(t),lBr=r(BRe," \u2014 "),gU=n(BRe,"A",{href:!0});var e6t=s(gU);iBr=r(e6t,"FlaxBertForNextSentencePrediction"),e6t.forEach(t),dBr=r(BRe," (BERT model)"),BRe.forEach(t),Kwt.forEach(t),cBr=i(qa),L4e=n(qa,"P",{});var o6t=s(L4e);mBr=r(o6t,"Examples:"),o6t.forEach(t),fBr=i(qa),f(i7.$$.fragment,qa),qa.forEach(t),Bi.forEach(t),PPe=i(c),km=n(c,"H2",{class:!0});var zIe=s(km);CC=n(zIe,"A",{id:!0,class:!0,href:!0});var r6t=s(CC);x4e=n(r6t,"SPAN",{});var t6t=s(x4e);f(d7.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),gBr=i(zIe),k4e=n(zIe,"SPAN",{});var a6t=s(k4e);hBr=r(a6t,"FlaxAutoModelForImageClassification"),a6t.forEach(t),zIe.forEach(t),$Pe=i(c),Or=n(c,"DIV",{class:!0});var $i=s(Or);f(c7.$$.fragment,$i),uBr=i($i),Sm=n($i,"P",{});var mY=s(Sm);pBr=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=n(mY,"A",{href:!0});var n6t=s(hU);_Br=r(n6t,"from_pretrained()"),n6t.forEach(t),bBr=r(mY," class method or the "),uU=n(mY,"A",{href:!0});var s6t=s(uU);vBr=r(s6t,"from_config()"),s6t.forEach(t),FBr=r(mY,` class
method.`),mY.forEach(t),TBr=i($i),m7=n($i,"P",{});var QIe=s(m7);MBr=r(QIe,"This class cannot be instantiated directly using "),S4e=n(QIe,"CODE",{});var l6t=s(S4e);EBr=r(l6t,"__init__()"),l6t.forEach(t),CBr=r(QIe," (throws an error)."),QIe.forEach(t),wBr=i($i),It=n($i,"DIV",{class:!0});var Ii=s(It);f(f7.$$.fragment,Ii),ABr=i(Ii),R4e=n(Ii,"P",{});var i6t=s(R4e);yBr=r(i6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),i6t.forEach(t),LBr=i(Ii),Rm=n(Ii,"P",{});var fY=s(Rm);xBr=r(fY,`Note:
Loading a model from its configuration file does `),B4e=n(fY,"STRONG",{});var d6t=s(B4e);kBr=r(d6t,"not"),d6t.forEach(t),SBr=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(fY,"A",{href:!0});var c6t=s(pU);RBr=r(c6t,"from_pretrained()"),c6t.forEach(t),BBr=r(fY," to load the model weights."),fY.forEach(t),PBr=i(Ii),P4e=n(Ii,"P",{});var m6t=s(P4e);$Br=r(m6t,"Examples:"),m6t.forEach(t),IBr=i(Ii),f(g7.$$.fragment,Ii),Ii.forEach(t),qBr=i($i),qo=n($i,"DIV",{class:!0});var Na=s(qo);f(h7.$$.fragment,Na),NBr=i(Na),$4e=n(Na,"P",{});var f6t=s($4e);jBr=r(f6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f6t.forEach(t),DBr=i(Na),Dn=n(Na,"P",{});var yw=s(Dn);GBr=r(yw,"The model class to instantiate is selected based on the "),I4e=n(yw,"CODE",{});var g6t=s(I4e);OBr=r(g6t,"model_type"),g6t.forEach(t),VBr=r(yw,` property of the config object (either
passed as an argument or loaded from `),q4e=n(yw,"CODE",{});var h6t=s(q4e);XBr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),zBr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N4e=n(yw,"CODE",{});var u6t=s(N4e);QBr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),WBr=r(yw,":"),yw.forEach(t),HBr=i(Na),u7=n(Na,"UL",{});var WIe=s(u7);wC=n(WIe,"LI",{});var PRe=s(wC);j4e=n(PRe,"STRONG",{});var p6t=s(j4e);UBr=r(p6t,"beit"),p6t.forEach(t),JBr=r(PRe," \u2014 "),_U=n(PRe,"A",{href:!0});var _6t=s(_U);YBr=r(_6t,"FlaxBeitForImageClassification"),_6t.forEach(t),KBr=r(PRe," (BEiT model)"),PRe.forEach(t),ZBr=i(WIe),AC=n(WIe,"LI",{});var $Re=s(AC);D4e=n($Re,"STRONG",{});var b6t=s(D4e);ePr=r(b6t,"vit"),b6t.forEach(t),oPr=r($Re," \u2014 "),bU=n($Re,"A",{href:!0});var v6t=s(bU);rPr=r(v6t,"FlaxViTForImageClassification"),v6t.forEach(t),tPr=r($Re," (ViT model)"),$Re.forEach(t),WIe.forEach(t),aPr=i(Na),G4e=n(Na,"P",{});var F6t=s(G4e);nPr=r(F6t,"Examples:"),F6t.forEach(t),sPr=i(Na),f(p7.$$.fragment,Na),Na.forEach(t),$i.forEach(t),IPe=i(c),Bm=n(c,"H2",{class:!0});var HIe=s(Bm);yC=n(HIe,"A",{id:!0,class:!0,href:!0});var T6t=s(yC);O4e=n(T6t,"SPAN",{});var M6t=s(O4e);f(_7.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),lPr=i(HIe),V4e=n(HIe,"SPAN",{});var E6t=s(V4e);iPr=r(E6t,"FlaxAutoModelForVision2Seq"),E6t.forEach(t),HIe.forEach(t),qPe=i(c),Vr=n(c,"DIV",{class:!0});var qi=s(Vr);f(b7.$$.fragment,qi),dPr=i(qi),Pm=n(qi,"P",{});var gY=s(Pm);cPr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(gY,"A",{href:!0});var C6t=s(vU);mPr=r(C6t,"from_pretrained()"),C6t.forEach(t),fPr=r(gY," class method or the "),FU=n(gY,"A",{href:!0});var w6t=s(FU);gPr=r(w6t,"from_config()"),w6t.forEach(t),hPr=r(gY,` class
method.`),gY.forEach(t),uPr=i(qi),v7=n(qi,"P",{});var UIe=s(v7);pPr=r(UIe,"This class cannot be instantiated directly using "),X4e=n(UIe,"CODE",{});var A6t=s(X4e);_Pr=r(A6t,"__init__()"),A6t.forEach(t),bPr=r(UIe," (throws an error)."),UIe.forEach(t),vPr=i(qi),qt=n(qi,"DIV",{class:!0});var Ni=s(qt);f(F7.$$.fragment,Ni),FPr=i(Ni),z4e=n(Ni,"P",{});var y6t=s(z4e);TPr=r(y6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),y6t.forEach(t),MPr=i(Ni),$m=n(Ni,"P",{});var hY=s($m);EPr=r(hY,`Note:
Loading a model from its configuration file does `),Q4e=n(hY,"STRONG",{});var L6t=s(Q4e);CPr=r(L6t,"not"),L6t.forEach(t),wPr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(hY,"A",{href:!0});var x6t=s(TU);APr=r(x6t,"from_pretrained()"),x6t.forEach(t),yPr=r(hY," to load the model weights."),hY.forEach(t),LPr=i(Ni),W4e=n(Ni,"P",{});var k6t=s(W4e);xPr=r(k6t,"Examples:"),k6t.forEach(t),kPr=i(Ni),f(T7.$$.fragment,Ni),Ni.forEach(t),SPr=i(qi),No=n(qi,"DIV",{class:!0});var ja=s(No);f(M7.$$.fragment,ja),RPr=i(ja),H4e=n(ja,"P",{});var S6t=s(H4e);BPr=r(S6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S6t.forEach(t),PPr=i(ja),Gn=n(ja,"P",{});var Lw=s(Gn);$Pr=r(Lw,"The model class to instantiate is selected based on the "),U4e=n(Lw,"CODE",{});var R6t=s(U4e);IPr=r(R6t,"model_type"),R6t.forEach(t),qPr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),J4e=n(Lw,"CODE",{});var B6t=s(J4e);NPr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),jPr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(Lw,"CODE",{});var P6t=s(Y4e);DPr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),GPr=r(Lw,":"),Lw.forEach(t),OPr=i(ja),K4e=n(ja,"UL",{});var $6t=s(K4e);LC=n($6t,"LI",{});var IRe=s(LC);Z4e=n(IRe,"STRONG",{});var I6t=s(Z4e);VPr=r(I6t,"vision-encoder-decoder"),I6t.forEach(t),XPr=r(IRe," \u2014 "),MU=n(IRe,"A",{href:!0});var q6t=s(MU);zPr=r(q6t,"FlaxVisionEncoderDecoderModel"),q6t.forEach(t),QPr=r(IRe," (Vision Encoder decoder model)"),IRe.forEach(t),$6t.forEach(t),WPr=i(ja),eEe=n(ja,"P",{});var N6t=s(eEe);HPr=r(N6t,"Examples:"),N6t.forEach(t),UPr=i(ja),f(E7.$$.fragment,ja),ja.forEach(t),qi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(H6t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(zi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Om,"id","extending-the-auto-classes"),d(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Om,"href","#extending-the-auto-classes"),d(Qi,"class","relative group"),d(Xm,"id","transformers.AutoConfig"),d(Xm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xm,"href","#transformers.AutoConfig"),d(Wi,"class","relative group"),d(x9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(k9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d($9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(G9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(W9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(J9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(ex,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(ox,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(rx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(tx,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ax,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(nx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(sx,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(lx,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(ix,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(dx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(cx,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(mx,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(fx,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(gx,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(hx,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ux,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(px,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(_x,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(bx,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(vx,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(Fx,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(Tx,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(Mx,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(Ex,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Cx,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(wx,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Ax,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(yx,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(Lx,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(xx,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(kx,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Sx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(Rx,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Bx,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(Px,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d($x,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Ix,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(qx,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(Nx,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(jx,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(Dx,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(Gx,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(Ox,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(Vx,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(Xx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(zx,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(Qx,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(Wx,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(Hx,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(Ux,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Jx,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Yx,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Kx,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(Zx,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ek,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(ok,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(rk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(tk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(ak,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(nk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(sk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(lk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ik,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(dk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(ck,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(mk,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(fk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(gk,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(hk,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(uk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(pk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(_k,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(bk,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(vk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Fk,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Tk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Mk,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ek,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gg,"id","transformers.AutoTokenizer"),d(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gg,"href","#transformers.AutoTokenizer"),d(Ui,"class","relative group"),d(Ck,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(wk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(Ak,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(yk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(Lk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(xk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(kk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Sk,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(Bk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(Pk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d($k,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Ik,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(qk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Nk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(jk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Dk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Gk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ok,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Vk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(zk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Wk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(Hk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Uk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Jk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Kk,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(eS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(oS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(rS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(tS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(aS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(nS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(sS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(lS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(iS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(dS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(cS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(mS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(fS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(gS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(hS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(uS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(pS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(_S,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(vS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(FS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(TS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(MS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ES,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(CS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(wS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(AS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(yS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(LS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(xS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(kS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(SS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(RS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(BS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(PS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d($S,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(IS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(qS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(NS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(jS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(DS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(GS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(OS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(VS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(XS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(zS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QS,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(WS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(HS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(US,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(JS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(YS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(KS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ZS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(oR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(tR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(nR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(iR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(dR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(cR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(mR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(fR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(gR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(hR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(uR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(pR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(_R,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(bR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(FR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(TR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(MR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ER,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(CR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(wR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(AR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(yR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(LR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(xR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(SR,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(RR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(BR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d($R,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(IR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(qR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(NR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(jR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(DR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(GR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(OR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Ji,"class","relative group"),d(VR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(XR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(zR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(QR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(HR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(UR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(JR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(YR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(KR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ZR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(eB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(tB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(aB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(nB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(sB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(iB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Yi,"class","relative group"),d(dB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(cB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(mB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(fB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(gB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(hB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(uB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(pB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(_B,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"id","transformers.AutoModel"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoModel"),d(Zi,"class","relative group"),d(bB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(MB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(EB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(CB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(wB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(AB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(yB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(LB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(xB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(kB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(SB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(RB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(BB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(PB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d($B,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(IB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(qB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(NB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(jB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(DB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(GB,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(OB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(VB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(XB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(zB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(QB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(WB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(HB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(UB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(JB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(YB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(KB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(ZB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(eP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(oP,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rP,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(tP,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(aP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(nP,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(sP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(lP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(iP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(dP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(cP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(mP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(fP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(gP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(hP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(uP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(pP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(_P,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(bP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(vP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(FP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(TP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(EP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(CP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(wP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(yP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(xP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(kP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(SP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(RP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(BP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(PP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d($P,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(IP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(qP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(NP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(DP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(GP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(OP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(VP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(XP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(QP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(WP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(HP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(UP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(JP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(YP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(KP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(ZP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(e$,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(o$,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(r$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(t$,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(a$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(n$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(s$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(l$,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Np,"id","transformers.AutoModelForPreTraining"),d(Np,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Np,"href","#transformers.AutoModelForPreTraining"),d(rd,"class","relative group"),d(i$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(d$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(c$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(f$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(g$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(h$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(u$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(p$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(_$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(b$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(v$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(F$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(T$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(M$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(E$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(C$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(w$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(A$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(y$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(L$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(x$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(k$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(S$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(R$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(B$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(P$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d($$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(I$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(q$,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(N$,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(j$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(D$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(G$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(O$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(V$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(X$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(z$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(Q$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(W$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(H$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(U$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w_,"id","transformers.AutoModelForCausalLM"),d(w_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w_,"href","#transformers.AutoModelForCausalLM"),d(nd,"class","relative group"),d(J$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Y$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(K$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(eI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(oI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(rI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(tI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(aI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(nI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(sI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(lI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(iI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(dI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(cI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(mI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(fI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(gI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(hI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(uI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(pI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(_I,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(bI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(vI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(FI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(TI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(MI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(EI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(CI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(wI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(AI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(yI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(LI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(xI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(kI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(SI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(RI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(BI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ib,"id","transformers.AutoModelForMaskedLM"),d(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ib,"href","#transformers.AutoModelForMaskedLM"),d(id,"class","relative group"),d(PI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($I,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(II,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(jI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(DI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(GI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(HI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(JI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(YI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(KI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(ZI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(eq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(oq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(rq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(tq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(aq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(nq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(sq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(lq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(iq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(dq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(cq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(mq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(fq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(gq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(hq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(uq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(pq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zb,"id","transformers.AutoModelForSeq2SeqLM"),d(zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zb,"href","#transformers.AutoModelForSeq2SeqLM"),d(md,"class","relative group"),d(_q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Tq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Mq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Eq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Cq,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(wq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Aq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(yq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Lq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(xq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(kq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Sq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Rq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Bq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Pq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Iq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c2,"id","transformers.AutoModelForSequenceClassification"),d(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c2,"href","#transformers.AutoModelForSequenceClassification"),d(hd,"class","relative group"),d(qq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Gq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Oq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Vq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Xq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(zq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Qq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Wq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Hq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Uq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Jq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Yq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Kq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Zq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(tN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(aN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(nN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(sN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(lN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(iN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(dN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(cN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(mN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(fN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(gN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(hN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(uN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(pN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(_N,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(bN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(vN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(FN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(MN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(EN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(wN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(AN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(LN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(kN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(SN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(RN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nv,"id","transformers.AutoModelForMultipleChoice"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForMultipleChoice"),d(_d,"class","relative group"),d(BN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($N,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(qN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(NN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(DN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(GN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(ON,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(VN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(XN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(zN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(QN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(WN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(HN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(UN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(JN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(YN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(KN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ZN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(ej,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ij,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.AutoModelForNextSentencePrediction"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.AutoModelForNextSentencePrediction"),d(Fd,"class","relative group"),d(cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(uj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(pj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(_j,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ov,"id","transformers.AutoModelForTokenClassification"),d(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ov,"href","#transformers.AutoModelForTokenClassification"),d(Ed,"class","relative group"),d(bj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Cj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(wj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Aj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(yj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Lj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Rj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Bj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Pj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d($j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ij,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(qj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Nj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(jj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Dj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Gj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Oj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Vj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Xj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(zj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Wj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Hj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Uj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Jj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Yj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Kj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Zj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EF,"id","transformers.AutoModelForQuestionAnswering"),d(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EF,"href","#transformers.AutoModelForQuestionAnswering"),d(Ad,"class","relative group"),d(eD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(sD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(iD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(mD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(fD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(gD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(hD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(uD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(pD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(_D,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(bD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(vD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(FD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(TD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(MD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ED,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(CD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(wD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(AD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(yD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(LD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(xD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(kD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(SD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(RD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(BD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(PD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d($D,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ID,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(qD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(ND,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(jD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(DD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(GD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c1,"id","transformers.AutoModelForTableQuestionAnswering"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.AutoModelForTableQuestionAnswering"),d(xd,"class","relative group"),d(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g1,"id","transformers.AutoModelForImageClassification"),d(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g1,"href","#transformers.AutoModelForImageClassification"),d(Rd,"class","relative group"),d(QD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(JD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(YD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(KD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ZD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(eG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(oG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(rG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(tG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(aG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(nG,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(sG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(lG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(iG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(dG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(cG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A1,"id","transformers.AutoModelForVision2Seq"),d(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A1,"href","#transformers.AutoModelForVision2Seq"),d($d,"class","relative group"),d(mG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hG,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x1,"id","transformers.AutoModelForAudioClassification"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForAudioClassification"),d(Nd,"class","relative group"),d(uG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(vG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(FG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(TG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(MG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(EG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(CG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(wG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j1,"id","transformers.AutoModelForAudioFrameClassification"),d(j1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j1,"href","#transformers.AutoModelForAudioFrameClassification"),d(Gd,"class","relative group"),d(AG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(kG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(SG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(RG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z1,"id","transformers.AutoModelForCTC"),d(z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z1,"href","#transformers.AutoModelForCTC"),d(Xd,"class","relative group"),d(BG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($G,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(qG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(NG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(jG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(DG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(GG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(OG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(VG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Wd,"class","relative group"),d(XG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WG,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nT,"id","transformers.AutoModelForAudioXVector"),d(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nT,"href","#transformers.AutoModelForAudioXVector"),d(Jd,"class","relative group"),d(UG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(ZG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(eO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(oO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mT,"id","transformers.AutoModelForMaskedImageModeling"),d(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Zd,"class","relative group"),d(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(sO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(lO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pT,"id","transformers.AutoModelForObjectDetection"),d(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pT,"href","#transformers.AutoModelForObjectDetection"),d(tc,"class","relative group"),d(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vT,"id","transformers.AutoModelForImageSegmentation"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.AutoModelForImageSegmentation"),d(sc,"class","relative group"),d(fO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MT,"id","transformers.AutoModelForSemanticSegmentation"),d(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MT,"href","#transformers.AutoModelForSemanticSegmentation"),d(dc,"class","relative group"),d(pO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(FO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(TO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(MO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LT,"id","transformers.AutoModelForInstanceSegmentation"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(EO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ST,"id","transformers.TFAutoModel"),d(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ST,"href","#transformers.TFAutoModel"),d(uc,"class","relative group"),d(yO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(SO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(RO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(BO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(PO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d($O,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(IO,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(qO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(NO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(jO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(DO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(GO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(OO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(VO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(XO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(zO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(QO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(WO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(HO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(UO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(JO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(YO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(KO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(ZO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(eV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(oV,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(rV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(tV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(aV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(nV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(sV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(lV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(iV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(dV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(cV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(mV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(fV,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(gV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(hV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(uV,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(pV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(_V,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(bV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(vV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(FV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TM,"id","transformers.TFAutoModelForPreTraining"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForPreTraining"),d(bc,"class","relative group"),d(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(wV,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(AV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(yV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(LV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(xV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(kV,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(SV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(RV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d($V,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(IV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(qV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(NV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(VV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(XV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(QV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zM,"id","transformers.TFAutoModelForCausalLM"),d(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zM,"href","#transformers.TFAutoModelForCausalLM"),d(Tc,"class","relative group"),d(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(YV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(KV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ZV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(oX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(rX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(tX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(aX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(nX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(sX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a4,"id","transformers.TFAutoModelForImageClassification"),d(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a4,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(fX,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l4,"id","transformers.TFAutoModelForMaskedLM"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(_X,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(bX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(vX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(FX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(TX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(MX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(CX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(AX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(LX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(xX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(SX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(RX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(BX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(PX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(kc,"class","relative group"),d(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(DX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(VX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(XX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(zX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(QX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(HX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.TFAutoModelForSequenceClassification"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Bc,"class","relative group"),d(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(oz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(hz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(pz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(bz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(vz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Fz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Tz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Ez,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.TFAutoModelForMultipleChoice"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.TFAutoModelForMultipleChoice"),d(Ic,"class","relative group"),d(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(xz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(kz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Rz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Bz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(jz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Oz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Vz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RE,"id","transformers.TFAutoModelForTokenClassification"),d(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RE,"href","#transformers.TFAutoModelForTokenClassification"),d(Oc,"class","relative group"),d(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Kz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Zz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(eQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(oQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(rQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(tQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(aQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(nQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(lQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(iQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(dQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(cQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(mQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(fQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(gQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(hQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(uQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(pQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZE,"id","transformers.TFAutoModelForQuestionAnswering"),d(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZE,"href","#transformers.TFAutoModelForQuestionAnswering"),d(zc,"class","relative group"),d(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(TQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(EQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(AQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(LQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(kQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(SQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(RQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(PQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d($Q,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(IQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(jQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F5,"id","transformers.TFAutoModelForVision2Seq"),d(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F5,"href","#transformers.TFAutoModelForVision2Seq"),d(Hc,"class","relative group"),d(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Yc,"class","relative group"),d(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C5,"id","transformers.FlaxAutoModel"),d(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C5,"href","#transformers.FlaxAutoModel"),d(em,"class","relative group"),d(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(KQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(ZQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(eW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(oW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(rW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(tW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(aW,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(nW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(sW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(lW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(iW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(dW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(cW,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(mW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(fW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(gW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(hW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(uW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(pW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(_W,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(bW,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(vW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(FW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(TW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J5,"id","transformers.FlaxAutoModelForCausalLM"),d(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J5,"href","#transformers.FlaxAutoModelForCausalLM"),d(tm,"class","relative group"),d(MW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(AW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(yW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(LW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(xW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r3,"id","transformers.FlaxAutoModelForPreTraining"),d(r3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r3,"href","#transformers.FlaxAutoModelForPreTraining"),d(sm,"class","relative group"),d(kW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(PW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(IW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(qW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(NW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(jW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(VW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(XW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.FlaxAutoModelForMaskedLM"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(dm,"class","relative group"),d(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(UW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(JW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(YW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(KW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ZW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(eH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(oH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(rH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(tH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(fm,"class","relative group"),d(aH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(iH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(dH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(cH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(mH,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(fH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(gH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(hH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(uH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(um,"class","relative group"),d(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(FH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(TH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(MH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(EH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(CH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(wH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(AH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(yH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(LH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bm,"class","relative group"),d(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(BH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(PH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d($H,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(IH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(qH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(NH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(jH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(DH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(GH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aC,"id","transformers.FlaxAutoModelForTokenClassification"),d(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tm,"class","relative group"),d(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(QH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(WH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(HH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(UH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(JH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(YH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(KH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cm,"class","relative group"),d(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(tU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(aU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(nU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(sU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(lU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(iU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(dU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(ym,"class","relative group"),d(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CC,"id","transformers.FlaxAutoModelForImageClassification"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.FlaxAutoModelForImageClassification"),d(km,"class","relative group"),d(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_U,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(bU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yC,"id","transformers.FlaxAutoModelForVision2Seq"),d(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bm,"class","relative group"),d(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,Z),b(c,io,_),b(c,ce,_),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,ji),b(c,Nm,_),b(c,ma,_),e(ma,Di),e(ma,Gi),e(Gi,xw),e(ma,jm),b(c,xe,_),b(c,co,_),e(co,Oi),e(co,On),e(On,kw),e(co,Vn),e(co,Xn),e(Xn,Sw),e(co,Vi),e(co,zn),e(zn,Rw),e(co,Xi),b(c,Dm,_),g(Da,c,_),b(c,mo,_),b(c,_e,_),e(_e,E9),e(_e,zi),e(zi,C9),e(_e,w9),b(c,zo,_),b(c,Ga,_),e(Ga,A9),e(Ga,Gm),e(Gm,y9),e(Ga,JIe),b(c,qRe,_),b(c,Qi,_),e(Qi,Om),e(Om,uY),g(Bw,uY,null),e(Qi,YIe),e(Qi,pY),e(pY,KIe),b(c,NRe,_),b(c,Qn,_),e(Qn,ZIe),e(Qn,_Y),e(_Y,eqe),e(Qn,oqe),e(Qn,bY),e(bY,rqe),e(Qn,tqe),b(c,jRe,_),g(Pw,c,_),b(c,DRe,_),b(c,L9,_),e(L9,aqe),b(c,GRe,_),g(Vm,c,_),b(c,ORe,_),b(c,Wi,_),e(Wi,Xm),e(Xm,vY),g($w,vY,null),e(Wi,nqe),e(Wi,FY),e(FY,sqe),b(c,VRe,_),b(c,Qo,_),g(Iw,Qo,null),e(Qo,lqe),e(Qo,qw),e(qw,iqe),e(qw,x9),e(x9,dqe),e(qw,cqe),e(Qo,mqe),e(Qo,Nw),e(Nw,fqe),e(Nw,TY),e(TY,gqe),e(Nw,hqe),e(Qo,uqe),e(Qo,fo),g(jw,fo,null),e(fo,pqe),e(fo,MY),e(MY,_qe),e(fo,bqe),e(fo,Hi),e(Hi,vqe),e(Hi,EY),e(EY,Fqe),e(Hi,Tqe),e(Hi,CY),e(CY,Mqe),e(Hi,Eqe),e(fo,Cqe),e(fo,v),e(v,zm),e(zm,wY),e(wY,wqe),e(zm,Aqe),e(zm,k9),e(k9,yqe),e(zm,Lqe),e(v,xqe),e(v,Qm),e(Qm,AY),e(AY,kqe),e(Qm,Sqe),e(Qm,S9),e(S9,Rqe),e(Qm,Bqe),e(v,Pqe),e(v,Wm),e(Wm,yY),e(yY,$qe),e(Wm,Iqe),e(Wm,R9),e(R9,qqe),e(Wm,Nqe),e(v,jqe),e(v,Hm),e(Hm,LY),e(LY,Dqe),e(Hm,Gqe),e(Hm,B9),e(B9,Oqe),e(Hm,Vqe),e(v,Xqe),e(v,Um),e(Um,xY),e(xY,zqe),e(Um,Qqe),e(Um,P9),e(P9,Wqe),e(Um,Hqe),e(v,Uqe),e(v,Jm),e(Jm,kY),e(kY,Jqe),e(Jm,Yqe),e(Jm,$9),e($9,Kqe),e(Jm,Zqe),e(v,eNe),e(v,Ym),e(Ym,SY),e(SY,oNe),e(Ym,rNe),e(Ym,I9),e(I9,tNe),e(Ym,aNe),e(v,nNe),e(v,Km),e(Km,RY),e(RY,sNe),e(Km,lNe),e(Km,q9),e(q9,iNe),e(Km,dNe),e(v,cNe),e(v,Zm),e(Zm,BY),e(BY,mNe),e(Zm,fNe),e(Zm,N9),e(N9,gNe),e(Zm,hNe),e(v,uNe),e(v,ef),e(ef,PY),e(PY,pNe),e(ef,_Ne),e(ef,j9),e(j9,bNe),e(ef,vNe),e(v,FNe),e(v,of),e(of,$Y),e($Y,TNe),e(of,MNe),e(of,D9),e(D9,ENe),e(of,CNe),e(v,wNe),e(v,rf),e(rf,IY),e(IY,ANe),e(rf,yNe),e(rf,G9),e(G9,LNe),e(rf,xNe),e(v,kNe),e(v,tf),e(tf,qY),e(qY,SNe),e(tf,RNe),e(tf,O9),e(O9,BNe),e(tf,PNe),e(v,$Ne),e(v,af),e(af,NY),e(NY,INe),e(af,qNe),e(af,V9),e(V9,NNe),e(af,jNe),e(v,DNe),e(v,nf),e(nf,jY),e(jY,GNe),e(nf,ONe),e(nf,X9),e(X9,VNe),e(nf,XNe),e(v,zNe),e(v,sf),e(sf,DY),e(DY,QNe),e(sf,WNe),e(sf,z9),e(z9,HNe),e(sf,UNe),e(v,JNe),e(v,lf),e(lf,GY),e(GY,YNe),e(lf,KNe),e(lf,Q9),e(Q9,ZNe),e(lf,eje),e(v,oje),e(v,df),e(df,OY),e(OY,rje),e(df,tje),e(df,W9),e(W9,aje),e(df,nje),e(v,sje),e(v,cf),e(cf,VY),e(VY,lje),e(cf,ije),e(cf,H9),e(H9,dje),e(cf,cje),e(v,mje),e(v,mf),e(mf,XY),e(XY,fje),e(mf,gje),e(mf,U9),e(U9,hje),e(mf,uje),e(v,pje),e(v,ff),e(ff,zY),e(zY,_je),e(ff,bje),e(ff,J9),e(J9,vje),e(ff,Fje),e(v,Tje),e(v,gf),e(gf,QY),e(QY,Mje),e(gf,Eje),e(gf,Y9),e(Y9,Cje),e(gf,wje),e(v,Aje),e(v,hf),e(hf,WY),e(WY,yje),e(hf,Lje),e(hf,K9),e(K9,xje),e(hf,kje),e(v,Sje),e(v,uf),e(uf,HY),e(HY,Rje),e(uf,Bje),e(uf,Z9),e(Z9,Pje),e(uf,$je),e(v,Ije),e(v,pf),e(pf,UY),e(UY,qje),e(pf,Nje),e(pf,ex),e(ex,jje),e(pf,Dje),e(v,Gje),e(v,_f),e(_f,JY),e(JY,Oje),e(_f,Vje),e(_f,ox),e(ox,Xje),e(_f,zje),e(v,Qje),e(v,bf),e(bf,YY),e(YY,Wje),e(bf,Hje),e(bf,rx),e(rx,Uje),e(bf,Jje),e(v,Yje),e(v,vf),e(vf,KY),e(KY,Kje),e(vf,Zje),e(vf,tx),e(tx,eDe),e(vf,oDe),e(v,rDe),e(v,Ff),e(Ff,ZY),e(ZY,tDe),e(Ff,aDe),e(Ff,ax),e(ax,nDe),e(Ff,sDe),e(v,lDe),e(v,Tf),e(Tf,eK),e(eK,iDe),e(Tf,dDe),e(Tf,nx),e(nx,cDe),e(Tf,mDe),e(v,fDe),e(v,Mf),e(Mf,oK),e(oK,gDe),e(Mf,hDe),e(Mf,sx),e(sx,uDe),e(Mf,pDe),e(v,_De),e(v,Ef),e(Ef,rK),e(rK,bDe),e(Ef,vDe),e(Ef,lx),e(lx,FDe),e(Ef,TDe),e(v,MDe),e(v,Cf),e(Cf,tK),e(tK,EDe),e(Cf,CDe),e(Cf,ix),e(ix,wDe),e(Cf,ADe),e(v,yDe),e(v,wf),e(wf,aK),e(aK,LDe),e(wf,xDe),e(wf,dx),e(dx,kDe),e(wf,SDe),e(v,RDe),e(v,Af),e(Af,nK),e(nK,BDe),e(Af,PDe),e(Af,cx),e(cx,$De),e(Af,IDe),e(v,qDe),e(v,yf),e(yf,sK),e(sK,NDe),e(yf,jDe),e(yf,mx),e(mx,DDe),e(yf,GDe),e(v,ODe),e(v,Lf),e(Lf,lK),e(lK,VDe),e(Lf,XDe),e(Lf,fx),e(fx,zDe),e(Lf,QDe),e(v,WDe),e(v,xf),e(xf,iK),e(iK,HDe),e(xf,UDe),e(xf,gx),e(gx,JDe),e(xf,YDe),e(v,KDe),e(v,kf),e(kf,dK),e(dK,ZDe),e(kf,eGe),e(kf,hx),e(hx,oGe),e(kf,rGe),e(v,tGe),e(v,Sf),e(Sf,cK),e(cK,aGe),e(Sf,nGe),e(Sf,ux),e(ux,sGe),e(Sf,lGe),e(v,iGe),e(v,Rf),e(Rf,mK),e(mK,dGe),e(Rf,cGe),e(Rf,px),e(px,mGe),e(Rf,fGe),e(v,gGe),e(v,Bf),e(Bf,fK),e(fK,hGe),e(Bf,uGe),e(Bf,_x),e(_x,pGe),e(Bf,_Ge),e(v,bGe),e(v,Pf),e(Pf,gK),e(gK,vGe),e(Pf,FGe),e(Pf,bx),e(bx,TGe),e(Pf,MGe),e(v,EGe),e(v,$f),e($f,hK),e(hK,CGe),e($f,wGe),e($f,vx),e(vx,AGe),e($f,yGe),e(v,LGe),e(v,If),e(If,uK),e(uK,xGe),e(If,kGe),e(If,Fx),e(Fx,SGe),e(If,RGe),e(v,BGe),e(v,qf),e(qf,pK),e(pK,PGe),e(qf,$Ge),e(qf,Tx),e(Tx,IGe),e(qf,qGe),e(v,NGe),e(v,Nf),e(Nf,_K),e(_K,jGe),e(Nf,DGe),e(Nf,Mx),e(Mx,GGe),e(Nf,OGe),e(v,VGe),e(v,jf),e(jf,bK),e(bK,XGe),e(jf,zGe),e(jf,Ex),e(Ex,QGe),e(jf,WGe),e(v,HGe),e(v,Df),e(Df,vK),e(vK,UGe),e(Df,JGe),e(Df,Cx),e(Cx,YGe),e(Df,KGe),e(v,ZGe),e(v,Gf),e(Gf,FK),e(FK,eOe),e(Gf,oOe),e(Gf,wx),e(wx,rOe),e(Gf,tOe),e(v,aOe),e(v,Of),e(Of,TK),e(TK,nOe),e(Of,sOe),e(Of,Ax),e(Ax,lOe),e(Of,iOe),e(v,dOe),e(v,Vf),e(Vf,MK),e(MK,cOe),e(Vf,mOe),e(Vf,yx),e(yx,fOe),e(Vf,gOe),e(v,hOe),e(v,Xf),e(Xf,EK),e(EK,uOe),e(Xf,pOe),e(Xf,Lx),e(Lx,_Oe),e(Xf,bOe),e(v,vOe),e(v,zf),e(zf,CK),e(CK,FOe),e(zf,TOe),e(zf,xx),e(xx,MOe),e(zf,EOe),e(v,COe),e(v,Qf),e(Qf,wK),e(wK,wOe),e(Qf,AOe),e(Qf,kx),e(kx,yOe),e(Qf,LOe),e(v,xOe),e(v,Wf),e(Wf,AK),e(AK,kOe),e(Wf,SOe),e(Wf,Sx),e(Sx,ROe),e(Wf,BOe),e(v,POe),e(v,Hf),e(Hf,yK),e(yK,$Oe),e(Hf,IOe),e(Hf,Rx),e(Rx,qOe),e(Hf,NOe),e(v,jOe),e(v,Uf),e(Uf,LK),e(LK,DOe),e(Uf,GOe),e(Uf,Bx),e(Bx,OOe),e(Uf,VOe),e(v,XOe),e(v,Jf),e(Jf,xK),e(xK,zOe),e(Jf,QOe),e(Jf,Px),e(Px,WOe),e(Jf,HOe),e(v,UOe),e(v,Yf),e(Yf,kK),e(kK,JOe),e(Yf,YOe),e(Yf,$x),e($x,KOe),e(Yf,ZOe),e(v,eVe),e(v,Kf),e(Kf,SK),e(SK,oVe),e(Kf,rVe),e(Kf,Ix),e(Ix,tVe),e(Kf,aVe),e(v,nVe),e(v,Zf),e(Zf,RK),e(RK,sVe),e(Zf,lVe),e(Zf,qx),e(qx,iVe),e(Zf,dVe),e(v,cVe),e(v,eg),e(eg,BK),e(BK,mVe),e(eg,fVe),e(eg,Nx),e(Nx,gVe),e(eg,hVe),e(v,uVe),e(v,og),e(og,PK),e(PK,pVe),e(og,_Ve),e(og,jx),e(jx,bVe),e(og,vVe),e(v,FVe),e(v,rg),e(rg,$K),e($K,TVe),e(rg,MVe),e(rg,Dx),e(Dx,EVe),e(rg,CVe),e(v,wVe),e(v,tg),e(tg,IK),e(IK,AVe),e(tg,yVe),e(tg,Gx),e(Gx,LVe),e(tg,xVe),e(v,kVe),e(v,ag),e(ag,qK),e(qK,SVe),e(ag,RVe),e(ag,Ox),e(Ox,BVe),e(ag,PVe),e(v,$Ve),e(v,ng),e(ng,NK),e(NK,IVe),e(ng,qVe),e(ng,Vx),e(Vx,NVe),e(ng,jVe),e(v,DVe),e(v,sg),e(sg,jK),e(jK,GVe),e(sg,OVe),e(sg,Xx),e(Xx,VVe),e(sg,XVe),e(v,zVe),e(v,lg),e(lg,DK),e(DK,QVe),e(lg,WVe),e(lg,zx),e(zx,HVe),e(lg,UVe),e(v,JVe),e(v,ig),e(ig,GK),e(GK,YVe),e(ig,KVe),e(ig,Qx),e(Qx,ZVe),e(ig,eXe),e(v,oXe),e(v,dg),e(dg,OK),e(OK,rXe),e(dg,tXe),e(dg,Wx),e(Wx,aXe),e(dg,nXe),e(v,sXe),e(v,cg),e(cg,VK),e(VK,lXe),e(cg,iXe),e(cg,Hx),e(Hx,dXe),e(cg,cXe),e(v,mXe),e(v,mg),e(mg,XK),e(XK,fXe),e(mg,gXe),e(mg,Ux),e(Ux,hXe),e(mg,uXe),e(v,pXe),e(v,fg),e(fg,zK),e(zK,_Xe),e(fg,bXe),e(fg,Jx),e(Jx,vXe),e(fg,FXe),e(v,TXe),e(v,gg),e(gg,QK),e(QK,MXe),e(gg,EXe),e(gg,Yx),e(Yx,CXe),e(gg,wXe),e(v,AXe),e(v,hg),e(hg,WK),e(WK,yXe),e(hg,LXe),e(hg,Kx),e(Kx,xXe),e(hg,kXe),e(v,SXe),e(v,ug),e(ug,HK),e(HK,RXe),e(ug,BXe),e(ug,Zx),e(Zx,PXe),e(ug,$Xe),e(v,IXe),e(v,pg),e(pg,UK),e(UK,qXe),e(pg,NXe),e(pg,ek),e(ek,jXe),e(pg,DXe),e(v,GXe),e(v,_g),e(_g,JK),e(JK,OXe),e(_g,VXe),e(_g,ok),e(ok,XXe),e(_g,zXe),e(v,QXe),e(v,bg),e(bg,YK),e(YK,WXe),e(bg,HXe),e(bg,rk),e(rk,UXe),e(bg,JXe),e(v,YXe),e(v,vg),e(vg,KK),e(KK,KXe),e(vg,ZXe),e(vg,tk),e(tk,eze),e(vg,oze),e(v,rze),e(v,Fg),e(Fg,ZK),e(ZK,tze),e(Fg,aze),e(Fg,ak),e(ak,nze),e(Fg,sze),e(v,lze),e(v,Tg),e(Tg,eZ),e(eZ,ize),e(Tg,dze),e(Tg,nk),e(nk,cze),e(Tg,mze),e(v,fze),e(v,Mg),e(Mg,oZ),e(oZ,gze),e(Mg,hze),e(Mg,sk),e(sk,uze),e(Mg,pze),e(v,_ze),e(v,Eg),e(Eg,rZ),e(rZ,bze),e(Eg,vze),e(Eg,lk),e(lk,Fze),e(Eg,Tze),e(v,Mze),e(v,Cg),e(Cg,tZ),e(tZ,Eze),e(Cg,Cze),e(Cg,ik),e(ik,wze),e(Cg,Aze),e(v,yze),e(v,wg),e(wg,aZ),e(aZ,Lze),e(wg,xze),e(wg,dk),e(dk,kze),e(wg,Sze),e(v,Rze),e(v,Ag),e(Ag,nZ),e(nZ,Bze),e(Ag,Pze),e(Ag,ck),e(ck,$ze),e(Ag,Ize),e(v,qze),e(v,yg),e(yg,sZ),e(sZ,Nze),e(yg,jze),e(yg,mk),e(mk,Dze),e(yg,Gze),e(v,Oze),e(v,Lg),e(Lg,lZ),e(lZ,Vze),e(Lg,Xze),e(Lg,fk),e(fk,zze),e(Lg,Qze),e(v,Wze),e(v,xg),e(xg,iZ),e(iZ,Hze),e(xg,Uze),e(xg,gk),e(gk,Jze),e(xg,Yze),e(v,Kze),e(v,kg),e(kg,dZ),e(dZ,Zze),e(kg,eQe),e(kg,hk),e(hk,oQe),e(kg,rQe),e(v,tQe),e(v,Sg),e(Sg,cZ),e(cZ,aQe),e(Sg,nQe),e(Sg,uk),e(uk,sQe),e(Sg,lQe),e(v,iQe),e(v,Rg),e(Rg,mZ),e(mZ,dQe),e(Rg,cQe),e(Rg,pk),e(pk,mQe),e(Rg,fQe),e(v,gQe),e(v,Bg),e(Bg,fZ),e(fZ,hQe),e(Bg,uQe),e(Bg,_k),e(_k,pQe),e(Bg,_Qe),e(v,bQe),e(v,Pg),e(Pg,gZ),e(gZ,vQe),e(Pg,FQe),e(Pg,bk),e(bk,TQe),e(Pg,MQe),e(v,EQe),e(v,$g),e($g,hZ),e(hZ,CQe),e($g,wQe),e($g,vk),e(vk,AQe),e($g,yQe),e(v,LQe),e(v,Ig),e(Ig,uZ),e(uZ,xQe),e(Ig,kQe),e(Ig,Fk),e(Fk,SQe),e(Ig,RQe),e(v,BQe),e(v,qg),e(qg,pZ),e(pZ,PQe),e(qg,$Qe),e(qg,Tk),e(Tk,IQe),e(qg,qQe),e(v,NQe),e(v,Ng),e(Ng,_Z),e(_Z,jQe),e(Ng,DQe),e(Ng,Mk),e(Mk,GQe),e(Ng,OQe),e(v,VQe),e(v,jg),e(jg,bZ),e(bZ,XQe),e(jg,zQe),e(jg,Ek),e(Ek,QQe),e(jg,WQe),e(fo,HQe),e(fo,vZ),e(vZ,UQe),e(fo,JQe),g(Dw,fo,null),e(Qo,YQe),e(Qo,Dg),g(Gw,Dg,null),e(Dg,KQe),e(Dg,FZ),e(FZ,ZQe),b(c,XRe,_),b(c,Ui,_),e(Ui,Gg),e(Gg,TZ),g(Ow,TZ,null),e(Ui,eWe),e(Ui,MZ),e(MZ,oWe),b(c,zRe,_),b(c,Wo,_),g(Vw,Wo,null),e(Wo,rWe),e(Wo,Xw),e(Xw,tWe),e(Xw,Ck),e(Ck,aWe),e(Xw,nWe),e(Wo,sWe),e(Wo,zw),e(zw,lWe),e(zw,EZ),e(EZ,iWe),e(zw,dWe),e(Wo,cWe),e(Wo,go),g(Qw,go,null),e(go,mWe),e(go,CZ),e(CZ,fWe),e(go,gWe),e(go,Oa),e(Oa,hWe),e(Oa,wZ),e(wZ,uWe),e(Oa,pWe),e(Oa,AZ),e(AZ,_We),e(Oa,bWe),e(Oa,yZ),e(yZ,vWe),e(Oa,FWe),e(go,TWe),e(go,E),e(E,Wn),e(Wn,LZ),e(LZ,MWe),e(Wn,EWe),e(Wn,wk),e(wk,CWe),e(Wn,wWe),e(Wn,Ak),e(Ak,AWe),e(Wn,yWe),e(E,LWe),e(E,Hn),e(Hn,xZ),e(xZ,xWe),e(Hn,kWe),e(Hn,yk),e(yk,SWe),e(Hn,RWe),e(Hn,Lk),e(Lk,BWe),e(Hn,PWe),e(E,$We),e(E,Un),e(Un,kZ),e(kZ,IWe),e(Un,qWe),e(Un,xk),e(xk,NWe),e(Un,jWe),e(Un,kk),e(kk,DWe),e(Un,GWe),e(E,OWe),e(E,Og),e(Og,SZ),e(SZ,VWe),e(Og,XWe),e(Og,Sk),e(Sk,zWe),e(Og,QWe),e(E,WWe),e(E,Jn),e(Jn,RZ),e(RZ,HWe),e(Jn,UWe),e(Jn,Rk),e(Rk,JWe),e(Jn,YWe),e(Jn,Bk),e(Bk,KWe),e(Jn,ZWe),e(E,eHe),e(E,Vg),e(Vg,BZ),e(BZ,oHe),e(Vg,rHe),e(Vg,Pk),e(Pk,tHe),e(Vg,aHe),e(E,nHe),e(E,Xg),e(Xg,PZ),e(PZ,sHe),e(Xg,lHe),e(Xg,$k),e($k,iHe),e(Xg,dHe),e(E,cHe),e(E,zg),e(zg,$Z),e($Z,mHe),e(zg,fHe),e(zg,Ik),e(Ik,gHe),e(zg,hHe),e(E,uHe),e(E,Yn),e(Yn,IZ),e(IZ,pHe),e(Yn,_He),e(Yn,qk),e(qk,bHe),e(Yn,vHe),e(Yn,Nk),e(Nk,FHe),e(Yn,THe),e(E,MHe),e(E,Kn),e(Kn,qZ),e(qZ,EHe),e(Kn,CHe),e(Kn,jk),e(jk,wHe),e(Kn,AHe),e(Kn,Dk),e(Dk,yHe),e(Kn,LHe),e(E,xHe),e(E,Zn),e(Zn,NZ),e(NZ,kHe),e(Zn,SHe),e(Zn,Gk),e(Gk,RHe),e(Zn,BHe),e(Zn,Ok),e(Ok,PHe),e(Zn,$He),e(E,IHe),e(E,Qg),e(Qg,jZ),e(jZ,qHe),e(Qg,NHe),e(Qg,Vk),e(Vk,jHe),e(Qg,DHe),e(E,GHe),e(E,Wg),e(Wg,DZ),e(DZ,OHe),e(Wg,VHe),e(Wg,Xk),e(Xk,XHe),e(Wg,zHe),e(E,QHe),e(E,es),e(es,GZ),e(GZ,WHe),e(es,HHe),e(es,zk),e(zk,UHe),e(es,JHe),e(es,Qk),e(Qk,YHe),e(es,KHe),e(E,ZHe),e(E,Hg),e(Hg,OZ),e(OZ,eUe),e(Hg,oUe),e(Hg,Wk),e(Wk,rUe),e(Hg,tUe),e(E,aUe),e(E,os),e(os,VZ),e(VZ,nUe),e(os,sUe),e(os,Hk),e(Hk,lUe),e(os,iUe),e(os,Uk),e(Uk,dUe),e(os,cUe),e(E,mUe),e(E,rs),e(rs,XZ),e(XZ,fUe),e(rs,gUe),e(rs,Jk),e(Jk,hUe),e(rs,uUe),e(rs,Yk),e(Yk,pUe),e(rs,_Ue),e(E,bUe),e(E,ts),e(ts,zZ),e(zZ,vUe),e(ts,FUe),e(ts,Kk),e(Kk,TUe),e(ts,MUe),e(ts,QZ),e(QZ,EUe),e(ts,CUe),e(E,wUe),e(E,Ug),e(Ug,WZ),e(WZ,AUe),e(Ug,yUe),e(Ug,Zk),e(Zk,LUe),e(Ug,xUe),e(E,kUe),e(E,as),e(as,HZ),e(HZ,SUe),e(as,RUe),e(as,eS),e(eS,BUe),e(as,PUe),e(as,oS),e(oS,$Ue),e(as,IUe),e(E,qUe),e(E,ns),e(ns,UZ),e(UZ,NUe),e(ns,jUe),e(ns,rS),e(rS,DUe),e(ns,GUe),e(ns,tS),e(tS,OUe),e(ns,VUe),e(E,XUe),e(E,ss),e(ss,JZ),e(JZ,zUe),e(ss,QUe),e(ss,aS),e(aS,WUe),e(ss,HUe),e(ss,nS),e(nS,UUe),e(ss,JUe),e(E,YUe),e(E,ls),e(ls,YZ),e(YZ,KUe),e(ls,ZUe),e(ls,sS),e(sS,eJe),e(ls,oJe),e(ls,lS),e(lS,rJe),e(ls,tJe),e(E,aJe),e(E,is),e(is,KZ),e(KZ,nJe),e(is,sJe),e(is,iS),e(iS,lJe),e(is,iJe),e(is,dS),e(dS,dJe),e(is,cJe),e(E,mJe),e(E,Jg),e(Jg,ZZ),e(ZZ,fJe),e(Jg,gJe),e(Jg,cS),e(cS,hJe),e(Jg,uJe),e(E,pJe),e(E,ds),e(ds,eee),e(eee,_Je),e(ds,bJe),e(ds,mS),e(mS,vJe),e(ds,FJe),e(ds,fS),e(fS,TJe),e(ds,MJe),e(E,EJe),e(E,Yg),e(Yg,oee),e(oee,CJe),e(Yg,wJe),e(Yg,gS),e(gS,AJe),e(Yg,yJe),e(E,LJe),e(E,cs),e(cs,ree),e(ree,xJe),e(cs,kJe),e(cs,hS),e(hS,SJe),e(cs,RJe),e(cs,uS),e(uS,BJe),e(cs,PJe),e(E,$Je),e(E,ms),e(ms,tee),e(tee,IJe),e(ms,qJe),e(ms,pS),e(pS,NJe),e(ms,jJe),e(ms,_S),e(_S,DJe),e(ms,GJe),e(E,OJe),e(E,fs),e(fs,aee),e(aee,VJe),e(fs,XJe),e(fs,bS),e(bS,zJe),e(fs,QJe),e(fs,vS),e(vS,WJe),e(fs,HJe),e(E,UJe),e(E,gs),e(gs,nee),e(nee,JJe),e(gs,YJe),e(gs,FS),e(FS,KJe),e(gs,ZJe),e(gs,TS),e(TS,eYe),e(gs,oYe),e(E,rYe),e(E,hs),e(hs,see),e(see,tYe),e(hs,aYe),e(hs,MS),e(MS,nYe),e(hs,sYe),e(hs,ES),e(ES,lYe),e(hs,iYe),e(E,dYe),e(E,Kg),e(Kg,lee),e(lee,cYe),e(Kg,mYe),e(Kg,CS),e(CS,fYe),e(Kg,gYe),e(E,hYe),e(E,us),e(us,iee),e(iee,uYe),e(us,pYe),e(us,wS),e(wS,_Ye),e(us,bYe),e(us,AS),e(AS,vYe),e(us,FYe),e(E,TYe),e(E,ps),e(ps,dee),e(dee,MYe),e(ps,EYe),e(ps,yS),e(yS,CYe),e(ps,wYe),e(ps,LS),e(LS,AYe),e(ps,yYe),e(E,LYe),e(E,_s),e(_s,cee),e(cee,xYe),e(_s,kYe),e(_s,xS),e(xS,SYe),e(_s,RYe),e(_s,kS),e(kS,BYe),e(_s,PYe),e(E,$Ye),e(E,bs),e(bs,mee),e(mee,IYe),e(bs,qYe),e(bs,SS),e(SS,NYe),e(bs,jYe),e(bs,RS),e(RS,DYe),e(bs,GYe),e(E,OYe),e(E,vs),e(vs,fee),e(fee,VYe),e(vs,XYe),e(vs,BS),e(BS,zYe),e(vs,QYe),e(vs,PS),e(PS,WYe),e(vs,HYe),e(E,UYe),e(E,Fs),e(Fs,gee),e(gee,JYe),e(Fs,YYe),e(Fs,$S),e($S,KYe),e(Fs,ZYe),e(Fs,IS),e(IS,eKe),e(Fs,oKe),e(E,rKe),e(E,Zg),e(Zg,hee),e(hee,tKe),e(Zg,aKe),e(Zg,qS),e(qS,nKe),e(Zg,sKe),e(E,lKe),e(E,Ts),e(Ts,uee),e(uee,iKe),e(Ts,dKe),e(Ts,NS),e(NS,cKe),e(Ts,mKe),e(Ts,jS),e(jS,fKe),e(Ts,gKe),e(E,hKe),e(E,eh),e(eh,pee),e(pee,uKe),e(eh,pKe),e(eh,DS),e(DS,_Ke),e(eh,bKe),e(E,vKe),e(E,oh),e(oh,_ee),e(_ee,FKe),e(oh,TKe),e(oh,GS),e(GS,MKe),e(oh,EKe),e(E,CKe),e(E,Ms),e(Ms,bee),e(bee,wKe),e(Ms,AKe),e(Ms,OS),e(OS,yKe),e(Ms,LKe),e(Ms,VS),e(VS,xKe),e(Ms,kKe),e(E,SKe),e(E,Es),e(Es,vee),e(vee,RKe),e(Es,BKe),e(Es,XS),e(XS,PKe),e(Es,$Ke),e(Es,zS),e(zS,IKe),e(Es,qKe),e(E,NKe),e(E,rh),e(rh,Fee),e(Fee,jKe),e(rh,DKe),e(rh,QS),e(QS,GKe),e(rh,OKe),e(E,VKe),e(E,Cs),e(Cs,Tee),e(Tee,XKe),e(Cs,zKe),e(Cs,WS),e(WS,QKe),e(Cs,WKe),e(Cs,HS),e(HS,HKe),e(Cs,UKe),e(E,JKe),e(E,ws),e(ws,Mee),e(Mee,YKe),e(ws,KKe),e(ws,US),e(US,ZKe),e(ws,eZe),e(ws,JS),e(JS,oZe),e(ws,rZe),e(E,tZe),e(E,As),e(As,Eee),e(Eee,aZe),e(As,nZe),e(As,YS),e(YS,sZe),e(As,lZe),e(As,KS),e(KS,iZe),e(As,dZe),e(E,cZe),e(E,ys),e(ys,Cee),e(Cee,mZe),e(ys,fZe),e(ys,ZS),e(ZS,gZe),e(ys,hZe),e(ys,eR),e(eR,uZe),e(ys,pZe),e(E,_Ze),e(E,Ls),e(Ls,wee),e(wee,bZe),e(Ls,vZe),e(Ls,oR),e(oR,FZe),e(Ls,TZe),e(Ls,rR),e(rR,MZe),e(Ls,EZe),e(E,CZe),e(E,th),e(th,Aee),e(Aee,wZe),e(th,AZe),e(th,tR),e(tR,yZe),e(th,LZe),e(E,xZe),e(E,ah),e(ah,yee),e(yee,kZe),e(ah,SZe),e(ah,aR),e(aR,RZe),e(ah,BZe),e(E,PZe),e(E,nh),e(nh,Lee),e(Lee,$Ze),e(nh,IZe),e(nh,nR),e(nR,qZe),e(nh,NZe),e(E,jZe),e(E,sh),e(sh,xee),e(xee,DZe),e(sh,GZe),e(sh,sR),e(sR,OZe),e(sh,VZe),e(E,XZe),e(E,xs),e(xs,kee),e(kee,zZe),e(xs,QZe),e(xs,lR),e(lR,WZe),e(xs,HZe),e(xs,iR),e(iR,UZe),e(xs,JZe),e(E,YZe),e(E,lh),e(lh,See),e(See,KZe),e(lh,ZZe),e(lh,dR),e(dR,eeo),e(lh,oeo),e(E,reo),e(E,ks),e(ks,Ree),e(Ree,teo),e(ks,aeo),e(ks,cR),e(cR,neo),e(ks,seo),e(ks,mR),e(mR,leo),e(ks,ieo),e(E,deo),e(E,Ss),e(Ss,Bee),e(Bee,ceo),e(Ss,meo),e(Ss,fR),e(fR,feo),e(Ss,geo),e(Ss,gR),e(gR,heo),e(Ss,ueo),e(E,peo),e(E,Rs),e(Rs,Pee),e(Pee,_eo),e(Rs,beo),e(Rs,hR),e(hR,veo),e(Rs,Feo),e(Rs,uR),e(uR,Teo),e(Rs,Meo),e(E,Eeo),e(E,Bs),e(Bs,$ee),e($ee,Ceo),e(Bs,weo),e(Bs,pR),e(pR,Aeo),e(Bs,yeo),e(Bs,_R),e(_R,Leo),e(Bs,xeo),e(E,keo),e(E,Ps),e(Ps,Iee),e(Iee,Seo),e(Ps,Reo),e(Ps,bR),e(bR,Beo),e(Ps,Peo),e(Ps,vR),e(vR,$eo),e(Ps,Ieo),e(E,qeo),e(E,$s),e($s,qee),e(qee,Neo),e($s,jeo),e($s,FR),e(FR,Deo),e($s,Geo),e($s,TR),e(TR,Oeo),e($s,Veo),e(E,Xeo),e(E,ih),e(ih,Nee),e(Nee,zeo),e(ih,Qeo),e(ih,MR),e(MR,Weo),e(ih,Heo),e(E,Ueo),e(E,dh),e(dh,jee),e(jee,Jeo),e(dh,Yeo),e(dh,ER),e(ER,Keo),e(dh,Zeo),e(E,eoo),e(E,Is),e(Is,Dee),e(Dee,ooo),e(Is,roo),e(Is,CR),e(CR,too),e(Is,aoo),e(Is,wR),e(wR,noo),e(Is,soo),e(E,loo),e(E,qs),e(qs,Gee),e(Gee,ioo),e(qs,doo),e(qs,AR),e(AR,coo),e(qs,moo),e(qs,yR),e(yR,foo),e(qs,goo),e(E,hoo),e(E,Ns),e(Ns,Oee),e(Oee,uoo),e(Ns,poo),e(Ns,LR),e(LR,_oo),e(Ns,boo),e(Ns,xR),e(xR,voo),e(Ns,Foo),e(E,Too),e(E,ch),e(ch,Vee),e(Vee,Moo),e(ch,Eoo),e(ch,kR),e(kR,Coo),e(ch,woo),e(E,Aoo),e(E,mh),e(mh,Xee),e(Xee,yoo),e(mh,Loo),e(mh,SR),e(SR,xoo),e(mh,koo),e(E,Soo),e(E,fh),e(fh,zee),e(zee,Roo),e(fh,Boo),e(fh,RR),e(RR,Poo),e(fh,$oo),e(E,Ioo),e(E,gh),e(gh,Qee),e(Qee,qoo),e(gh,Noo),e(gh,BR),e(BR,joo),e(gh,Doo),e(E,Goo),e(E,hh),e(hh,Wee),e(Wee,Ooo),e(hh,Voo),e(hh,PR),e(PR,Xoo),e(hh,zoo),e(E,Qoo),e(E,js),e(js,Hee),e(Hee,Woo),e(js,Hoo),e(js,$R),e($R,Uoo),e(js,Joo),e(js,IR),e(IR,Yoo),e(js,Koo),e(E,Zoo),e(E,uh),e(uh,Uee),e(Uee,ero),e(uh,oro),e(uh,qR),e(qR,rro),e(uh,tro),e(E,aro),e(E,ph),e(ph,Jee),e(Jee,nro),e(ph,sro),e(ph,NR),e(NR,lro),e(ph,iro),e(E,dro),e(E,Ds),e(Ds,Yee),e(Yee,cro),e(Ds,mro),e(Ds,jR),e(jR,fro),e(Ds,gro),e(Ds,DR),e(DR,hro),e(Ds,uro),e(E,pro),e(E,Gs),e(Gs,Kee),e(Kee,_ro),e(Gs,bro),e(Gs,GR),e(GR,vro),e(Gs,Fro),e(Gs,OR),e(OR,Tro),e(Gs,Mro),e(go,Ero),e(go,Zee),e(Zee,Cro),e(go,wro),g(Ww,go,null),e(Wo,Aro),e(Wo,_h),g(Hw,_h,null),e(_h,yro),e(_h,eoe),e(eoe,Lro),b(c,QRe,_),b(c,Ji,_),e(Ji,bh),e(bh,ooe),g(Uw,ooe,null),e(Ji,xro),e(Ji,roe),e(roe,kro),b(c,WRe,_),b(c,Ho,_),g(Jw,Ho,null),e(Ho,Sro),e(Ho,Yw),e(Yw,Rro),e(Yw,VR),e(VR,Bro),e(Yw,Pro),e(Ho,$ro),e(Ho,Kw),e(Kw,Iro),e(Kw,toe),e(toe,qro),e(Kw,Nro),e(Ho,jro),e(Ho,$e),g(Zw,$e,null),e($e,Dro),e($e,aoe),e(aoe,Gro),e($e,Oro),e($e,Va),e(Va,Vro),e(Va,noe),e(noe,Xro),e(Va,zro),e(Va,soe),e(soe,Qro),e(Va,Wro),e(Va,loe),e(loe,Hro),e(Va,Uro),e($e,Jro),e($e,ee),e(ee,vh),e(vh,ioe),e(ioe,Yro),e(vh,Kro),e(vh,XR),e(XR,Zro),e(vh,eto),e(ee,oto),e(ee,Fh),e(Fh,doe),e(doe,rto),e(Fh,tto),e(Fh,zR),e(zR,ato),e(Fh,nto),e(ee,sto),e(ee,Th),e(Th,coe),e(coe,lto),e(Th,ito),e(Th,QR),e(QR,dto),e(Th,cto),e(ee,mto),e(ee,Mh),e(Mh,moe),e(moe,fto),e(Mh,gto),e(Mh,WR),e(WR,hto),e(Mh,uto),e(ee,pto),e(ee,Eh),e(Eh,foe),e(foe,_to),e(Eh,bto),e(Eh,HR),e(HR,vto),e(Eh,Fto),e(ee,Tto),e(ee,Ch),e(Ch,goe),e(goe,Mto),e(Ch,Eto),e(Ch,UR),e(UR,Cto),e(Ch,wto),e(ee,Ato),e(ee,wh),e(wh,hoe),e(hoe,yto),e(wh,Lto),e(wh,JR),e(JR,xto),e(wh,kto),e(ee,Sto),e(ee,Ah),e(Ah,uoe),e(uoe,Rto),e(Ah,Bto),e(Ah,YR),e(YR,Pto),e(Ah,$to),e(ee,Ito),e(ee,yh),e(yh,poe),e(poe,qto),e(yh,Nto),e(yh,KR),e(KR,jto),e(yh,Dto),e(ee,Gto),e(ee,Lh),e(Lh,_oe),e(_oe,Oto),e(Lh,Vto),e(Lh,ZR),e(ZR,Xto),e(Lh,zto),e(ee,Qto),e(ee,xh),e(xh,boe),e(boe,Wto),e(xh,Hto),e(xh,eB),e(eB,Uto),e(xh,Jto),e(ee,Yto),e(ee,kh),e(kh,voe),e(voe,Kto),e(kh,Zto),e(kh,oB),e(oB,eao),e(kh,oao),e(ee,rao),e(ee,Sh),e(Sh,Foe),e(Foe,tao),e(Sh,aao),e(Sh,rB),e(rB,nao),e(Sh,sao),e(ee,lao),e(ee,Rh),e(Rh,Toe),e(Toe,iao),e(Rh,dao),e(Rh,tB),e(tB,cao),e(Rh,mao),e(ee,fao),e(ee,Bh),e(Bh,Moe),e(Moe,gao),e(Bh,hao),e(Bh,aB),e(aB,uao),e(Bh,pao),e(ee,_ao),e(ee,Ph),e(Ph,Eoe),e(Eoe,bao),e(Ph,vao),e(Ph,nB),e(nB,Fao),e(Ph,Tao),e(ee,Mao),e(ee,$h),e($h,Coe),e(Coe,Eao),e($h,Cao),e($h,sB),e(sB,wao),e($h,Aao),e(ee,yao),e(ee,Ih),e(Ih,woe),e(woe,Lao),e(Ih,xao),e(Ih,lB),e(lB,kao),e(Ih,Sao),e(ee,Rao),e(ee,qh),e(qh,Aoe),e(Aoe,Bao),e(qh,Pao),e(qh,iB),e(iB,$ao),e(qh,Iao),e($e,qao),g(Nh,$e,null),e($e,Nao),e($e,yoe),e(yoe,jao),e($e,Dao),g(e6,$e,null),e(Ho,Gao),e(Ho,jh),g(o6,jh,null),e(jh,Oao),e(jh,Loe),e(Loe,Vao),b(c,HRe,_),b(c,Yi,_),e(Yi,Dh),e(Dh,xoe),g(r6,xoe,null),e(Yi,Xao),e(Yi,koe),e(koe,zao),b(c,URe,_),b(c,Uo,_),g(t6,Uo,null),e(Uo,Qao),e(Uo,a6),e(a6,Wao),e(a6,dB),e(dB,Hao),e(a6,Uao),e(Uo,Jao),e(Uo,n6),e(n6,Yao),e(n6,Soe),e(Soe,Kao),e(n6,Zao),e(Uo,eno),e(Uo,Ie),g(s6,Ie,null),e(Ie,ono),e(Ie,Roe),e(Roe,rno),e(Ie,tno),e(Ie,Ki),e(Ki,ano),e(Ki,Boe),e(Boe,nno),e(Ki,sno),e(Ki,Poe),e(Poe,lno),e(Ki,ino),e(Ie,dno),e(Ie,ke),e(ke,Gh),e(Gh,$oe),e($oe,cno),e(Gh,mno),e(Gh,cB),e(cB,fno),e(Gh,gno),e(ke,hno),e(ke,Oh),e(Oh,Ioe),e(Ioe,uno),e(Oh,pno),e(Oh,mB),e(mB,_no),e(Oh,bno),e(ke,vno),e(ke,Vh),e(Vh,qoe),e(qoe,Fno),e(Vh,Tno),e(Vh,fB),e(fB,Mno),e(Vh,Eno),e(ke,Cno),e(ke,Xh),e(Xh,Noe),e(Noe,wno),e(Xh,Ano),e(Xh,gB),e(gB,yno),e(Xh,Lno),e(ke,xno),e(ke,zh),e(zh,joe),e(joe,kno),e(zh,Sno),e(zh,hB),e(hB,Rno),e(zh,Bno),e(ke,Pno),e(ke,Qh),e(Qh,Doe),e(Doe,$no),e(Qh,Ino),e(Qh,uB),e(uB,qno),e(Qh,Nno),e(ke,jno),e(ke,Wh),e(Wh,Goe),e(Goe,Dno),e(Wh,Gno),e(Wh,pB),e(pB,Ono),e(Wh,Vno),e(ke,Xno),e(ke,Hh),e(Hh,Ooe),e(Ooe,zno),e(Hh,Qno),e(Hh,_B),e(_B,Wno),e(Hh,Hno),e(Ie,Uno),g(Uh,Ie,null),e(Ie,Jno),e(Ie,Voe),e(Voe,Yno),e(Ie,Kno),g(l6,Ie,null),e(Uo,Zno),e(Uo,Jh),g(i6,Jh,null),e(Jh,eso),e(Jh,Xoe),e(Xoe,oso),b(c,JRe,_),b(c,Zi,_),e(Zi,Yh),e(Yh,zoe),g(d6,zoe,null),e(Zi,rso),e(Zi,Qoe),e(Qoe,tso),b(c,YRe,_),b(c,Jo,_),g(c6,Jo,null),e(Jo,aso),e(Jo,ed),e(ed,nso),e(ed,bB),e(bB,sso),e(ed,lso),e(ed,vB),e(vB,iso),e(ed,dso),e(Jo,cso),e(Jo,m6),e(m6,mso),e(m6,Woe),e(Woe,fso),e(m6,gso),e(Jo,hso),e(Jo,Xr),g(f6,Xr,null),e(Xr,uso),e(Xr,Hoe),e(Hoe,pso),e(Xr,_so),e(Xr,od),e(od,bso),e(od,Uoe),e(Uoe,vso),e(od,Fso),e(od,FB),e(FB,Tso),e(od,Mso),e(Xr,Eso),e(Xr,Joe),e(Joe,Cso),e(Xr,wso),g(g6,Xr,null),e(Jo,Aso),e(Jo,qe),g(h6,qe,null),e(qe,yso),e(qe,Yoe),e(Yoe,Lso),e(qe,xso),e(qe,Xa),e(Xa,kso),e(Xa,Koe),e(Koe,Sso),e(Xa,Rso),e(Xa,Zoe),e(Zoe,Bso),e(Xa,Pso),e(Xa,ere),e(ere,$so),e(Xa,Iso),e(qe,qso),e(qe,T),e(T,Kh),e(Kh,ore),e(ore,Nso),e(Kh,jso),e(Kh,TB),e(TB,Dso),e(Kh,Gso),e(T,Oso),e(T,Zh),e(Zh,rre),e(rre,Vso),e(Zh,Xso),e(Zh,MB),e(MB,zso),e(Zh,Qso),e(T,Wso),e(T,eu),e(eu,tre),e(tre,Hso),e(eu,Uso),e(eu,EB),e(EB,Jso),e(eu,Yso),e(T,Kso),e(T,ou),e(ou,are),e(are,Zso),e(ou,elo),e(ou,CB),e(CB,olo),e(ou,rlo),e(T,tlo),e(T,ru),e(ru,nre),e(nre,alo),e(ru,nlo),e(ru,wB),e(wB,slo),e(ru,llo),e(T,ilo),e(T,tu),e(tu,sre),e(sre,dlo),e(tu,clo),e(tu,AB),e(AB,mlo),e(tu,flo),e(T,glo),e(T,au),e(au,lre),e(lre,hlo),e(au,ulo),e(au,yB),e(yB,plo),e(au,_lo),e(T,blo),e(T,nu),e(nu,ire),e(ire,vlo),e(nu,Flo),e(nu,LB),e(LB,Tlo),e(nu,Mlo),e(T,Elo),e(T,su),e(su,dre),e(dre,Clo),e(su,wlo),e(su,xB),e(xB,Alo),e(su,ylo),e(T,Llo),e(T,lu),e(lu,cre),e(cre,xlo),e(lu,klo),e(lu,kB),e(kB,Slo),e(lu,Rlo),e(T,Blo),e(T,iu),e(iu,mre),e(mre,Plo),e(iu,$lo),e(iu,SB),e(SB,Ilo),e(iu,qlo),e(T,Nlo),e(T,du),e(du,fre),e(fre,jlo),e(du,Dlo),e(du,RB),e(RB,Glo),e(du,Olo),e(T,Vlo),e(T,cu),e(cu,gre),e(gre,Xlo),e(cu,zlo),e(cu,BB),e(BB,Qlo),e(cu,Wlo),e(T,Hlo),e(T,mu),e(mu,hre),e(hre,Ulo),e(mu,Jlo),e(mu,PB),e(PB,Ylo),e(mu,Klo),e(T,Zlo),e(T,fu),e(fu,ure),e(ure,eio),e(fu,oio),e(fu,$B),e($B,rio),e(fu,tio),e(T,aio),e(T,gu),e(gu,pre),e(pre,nio),e(gu,sio),e(gu,IB),e(IB,lio),e(gu,iio),e(T,dio),e(T,hu),e(hu,_re),e(_re,cio),e(hu,mio),e(hu,qB),e(qB,fio),e(hu,gio),e(T,hio),e(T,uu),e(uu,bre),e(bre,uio),e(uu,pio),e(uu,NB),e(NB,_io),e(uu,bio),e(T,vio),e(T,pu),e(pu,vre),e(vre,Fio),e(pu,Tio),e(pu,jB),e(jB,Mio),e(pu,Eio),e(T,Cio),e(T,_u),e(_u,Fre),e(Fre,wio),e(_u,Aio),e(_u,DB),e(DB,yio),e(_u,Lio),e(T,xio),e(T,bu),e(bu,Tre),e(Tre,kio),e(bu,Sio),e(bu,GB),e(GB,Rio),e(bu,Bio),e(T,Pio),e(T,vu),e(vu,Mre),e(Mre,$io),e(vu,Iio),e(vu,OB),e(OB,qio),e(vu,Nio),e(T,jio),e(T,Fu),e(Fu,Ere),e(Ere,Dio),e(Fu,Gio),e(Fu,VB),e(VB,Oio),e(Fu,Vio),e(T,Xio),e(T,Tu),e(Tu,Cre),e(Cre,zio),e(Tu,Qio),e(Tu,XB),e(XB,Wio),e(Tu,Hio),e(T,Uio),e(T,Mu),e(Mu,wre),e(wre,Jio),e(Mu,Yio),e(Mu,zB),e(zB,Kio),e(Mu,Zio),e(T,edo),e(T,Eu),e(Eu,Are),e(Are,odo),e(Eu,rdo),e(Eu,QB),e(QB,tdo),e(Eu,ado),e(T,ndo),e(T,Cu),e(Cu,yre),e(yre,sdo),e(Cu,ldo),e(Cu,WB),e(WB,ido),e(Cu,ddo),e(T,cdo),e(T,wu),e(wu,Lre),e(Lre,mdo),e(wu,fdo),e(wu,HB),e(HB,gdo),e(wu,hdo),e(T,udo),e(T,Au),e(Au,xre),e(xre,pdo),e(Au,_do),e(Au,UB),e(UB,bdo),e(Au,vdo),e(T,Fdo),e(T,yu),e(yu,kre),e(kre,Tdo),e(yu,Mdo),e(yu,JB),e(JB,Edo),e(yu,Cdo),e(T,wdo),e(T,Os),e(Os,Sre),e(Sre,Ado),e(Os,ydo),e(Os,YB),e(YB,Ldo),e(Os,xdo),e(Os,KB),e(KB,kdo),e(Os,Sdo),e(T,Rdo),e(T,Lu),e(Lu,Rre),e(Rre,Bdo),e(Lu,Pdo),e(Lu,ZB),e(ZB,$do),e(Lu,Ido),e(T,qdo),e(T,xu),e(xu,Bre),e(Bre,Ndo),e(xu,jdo),e(xu,eP),e(eP,Ddo),e(xu,Gdo),e(T,Odo),e(T,ku),e(ku,Pre),e(Pre,Vdo),e(ku,Xdo),e(ku,oP),e(oP,zdo),e(ku,Qdo),e(T,Wdo),e(T,Su),e(Su,$re),e($re,Hdo),e(Su,Udo),e(Su,rP),e(rP,Jdo),e(Su,Ydo),e(T,Kdo),e(T,Ru),e(Ru,Ire),e(Ire,Zdo),e(Ru,eco),e(Ru,tP),e(tP,oco),e(Ru,rco),e(T,tco),e(T,Bu),e(Bu,qre),e(qre,aco),e(Bu,nco),e(Bu,aP),e(aP,sco),e(Bu,lco),e(T,ico),e(T,Pu),e(Pu,Nre),e(Nre,dco),e(Pu,cco),e(Pu,nP),e(nP,mco),e(Pu,fco),e(T,gco),e(T,$u),e($u,jre),e(jre,hco),e($u,uco),e($u,sP),e(sP,pco),e($u,_co),e(T,bco),e(T,Iu),e(Iu,Dre),e(Dre,vco),e(Iu,Fco),e(Iu,lP),e(lP,Tco),e(Iu,Mco),e(T,Eco),e(T,qu),e(qu,Gre),e(Gre,Cco),e(qu,wco),e(qu,iP),e(iP,Aco),e(qu,yco),e(T,Lco),e(T,Nu),e(Nu,Ore),e(Ore,xco),e(Nu,kco),e(Nu,dP),e(dP,Sco),e(Nu,Rco),e(T,Bco),e(T,ju),e(ju,Vre),e(Vre,Pco),e(ju,$co),e(ju,cP),e(cP,Ico),e(ju,qco),e(T,Nco),e(T,Du),e(Du,Xre),e(Xre,jco),e(Du,Dco),e(Du,mP),e(mP,Gco),e(Du,Oco),e(T,Vco),e(T,Gu),e(Gu,zre),e(zre,Xco),e(Gu,zco),e(Gu,fP),e(fP,Qco),e(Gu,Wco),e(T,Hco),e(T,Ou),e(Ou,Qre),e(Qre,Uco),e(Ou,Jco),e(Ou,gP),e(gP,Yco),e(Ou,Kco),e(T,Zco),e(T,Vu),e(Vu,Wre),e(Wre,emo),e(Vu,omo),e(Vu,hP),e(hP,rmo),e(Vu,tmo),e(T,amo),e(T,Xu),e(Xu,Hre),e(Hre,nmo),e(Xu,smo),e(Xu,uP),e(uP,lmo),e(Xu,imo),e(T,dmo),e(T,zu),e(zu,Ure),e(Ure,cmo),e(zu,mmo),e(zu,pP),e(pP,fmo),e(zu,gmo),e(T,hmo),e(T,Qu),e(Qu,Jre),e(Jre,umo),e(Qu,pmo),e(Qu,_P),e(_P,_mo),e(Qu,bmo),e(T,vmo),e(T,Wu),e(Wu,Yre),e(Yre,Fmo),e(Wu,Tmo),e(Wu,bP),e(bP,Mmo),e(Wu,Emo),e(T,Cmo),e(T,Hu),e(Hu,Kre),e(Kre,wmo),e(Hu,Amo),e(Hu,vP),e(vP,ymo),e(Hu,Lmo),e(T,xmo),e(T,Uu),e(Uu,Zre),e(Zre,kmo),e(Uu,Smo),e(Uu,FP),e(FP,Rmo),e(Uu,Bmo),e(T,Pmo),e(T,Ju),e(Ju,ete),e(ete,$mo),e(Ju,Imo),e(Ju,TP),e(TP,qmo),e(Ju,Nmo),e(T,jmo),e(T,Yu),e(Yu,ote),e(ote,Dmo),e(Yu,Gmo),e(Yu,MP),e(MP,Omo),e(Yu,Vmo),e(T,Xmo),e(T,Ku),e(Ku,rte),e(rte,zmo),e(Ku,Qmo),e(Ku,EP),e(EP,Wmo),e(Ku,Hmo),e(T,Umo),e(T,Zu),e(Zu,tte),e(tte,Jmo),e(Zu,Ymo),e(Zu,CP),e(CP,Kmo),e(Zu,Zmo),e(T,efo),e(T,ep),e(ep,ate),e(ate,ofo),e(ep,rfo),e(ep,wP),e(wP,tfo),e(ep,afo),e(T,nfo),e(T,op),e(op,nte),e(nte,sfo),e(op,lfo),e(op,AP),e(AP,ifo),e(op,dfo),e(T,cfo),e(T,rp),e(rp,ste),e(ste,mfo),e(rp,ffo),e(rp,yP),e(yP,gfo),e(rp,hfo),e(T,ufo),e(T,tp),e(tp,lte),e(lte,pfo),e(tp,_fo),e(tp,LP),e(LP,bfo),e(tp,vfo),e(T,Ffo),e(T,ap),e(ap,ite),e(ite,Tfo),e(ap,Mfo),e(ap,xP),e(xP,Efo),e(ap,Cfo),e(T,wfo),e(T,np),e(np,dte),e(dte,Afo),e(np,yfo),e(np,kP),e(kP,Lfo),e(np,xfo),e(T,kfo),e(T,sp),e(sp,cte),e(cte,Sfo),e(sp,Rfo),e(sp,SP),e(SP,Bfo),e(sp,Pfo),e(T,$fo),e(T,lp),e(lp,mte),e(mte,Ifo),e(lp,qfo),e(lp,RP),e(RP,Nfo),e(lp,jfo),e(T,Dfo),e(T,ip),e(ip,fte),e(fte,Gfo),e(ip,Ofo),e(ip,BP),e(BP,Vfo),e(ip,Xfo),e(T,zfo),e(T,dp),e(dp,gte),e(gte,Qfo),e(dp,Wfo),e(dp,PP),e(PP,Hfo),e(dp,Ufo),e(T,Jfo),e(T,cp),e(cp,hte),e(hte,Yfo),e(cp,Kfo),e(cp,$P),e($P,Zfo),e(cp,ego),e(T,ogo),e(T,mp),e(mp,ute),e(ute,rgo),e(mp,tgo),e(mp,IP),e(IP,ago),e(mp,ngo),e(T,sgo),e(T,fp),e(fp,pte),e(pte,lgo),e(fp,igo),e(fp,qP),e(qP,dgo),e(fp,cgo),e(T,mgo),e(T,gp),e(gp,_te),e(_te,fgo),e(gp,ggo),e(gp,NP),e(NP,hgo),e(gp,ugo),e(T,pgo),e(T,hp),e(hp,bte),e(bte,_go),e(hp,bgo),e(hp,jP),e(jP,vgo),e(hp,Fgo),e(T,Tgo),e(T,up),e(up,vte),e(vte,Mgo),e(up,Ego),e(up,DP),e(DP,Cgo),e(up,wgo),e(T,Ago),e(T,pp),e(pp,Fte),e(Fte,ygo),e(pp,Lgo),e(pp,GP),e(GP,xgo),e(pp,kgo),e(T,Sgo),e(T,_p),e(_p,Tte),e(Tte,Rgo),e(_p,Bgo),e(_p,OP),e(OP,Pgo),e(_p,$go),e(T,Igo),e(T,bp),e(bp,Mte),e(Mte,qgo),e(bp,Ngo),e(bp,VP),e(VP,jgo),e(bp,Dgo),e(T,Ggo),e(T,vp),e(vp,Ete),e(Ete,Ogo),e(vp,Vgo),e(vp,XP),e(XP,Xgo),e(vp,zgo),e(T,Qgo),e(T,Fp),e(Fp,Cte),e(Cte,Wgo),e(Fp,Hgo),e(Fp,zP),e(zP,Ugo),e(Fp,Jgo),e(T,Ygo),e(T,Tp),e(Tp,wte),e(wte,Kgo),e(Tp,Zgo),e(Tp,QP),e(QP,eho),e(Tp,oho),e(T,rho),e(T,Mp),e(Mp,Ate),e(Ate,tho),e(Mp,aho),e(Mp,WP),e(WP,nho),e(Mp,sho),e(T,lho),e(T,Ep),e(Ep,yte),e(yte,iho),e(Ep,dho),e(Ep,HP),e(HP,cho),e(Ep,mho),e(T,fho),e(T,Cp),e(Cp,Lte),e(Lte,gho),e(Cp,hho),e(Cp,UP),e(UP,uho),e(Cp,pho),e(T,_ho),e(T,wp),e(wp,xte),e(xte,bho),e(wp,vho),e(wp,JP),e(JP,Fho),e(wp,Tho),e(T,Mho),e(T,Ap),e(Ap,kte),e(kte,Eho),e(Ap,Cho),e(Ap,YP),e(YP,who),e(Ap,Aho),e(T,yho),e(T,yp),e(yp,Ste),e(Ste,Lho),e(yp,xho),e(yp,KP),e(KP,kho),e(yp,Sho),e(T,Rho),e(T,Lp),e(Lp,Rte),e(Rte,Bho),e(Lp,Pho),e(Lp,ZP),e(ZP,$ho),e(Lp,Iho),e(T,qho),e(T,xp),e(xp,Bte),e(Bte,Nho),e(xp,jho),e(xp,e$),e(e$,Dho),e(xp,Gho),e(T,Oho),e(T,kp),e(kp,Pte),e(Pte,Vho),e(kp,Xho),e(kp,o$),e(o$,zho),e(kp,Qho),e(T,Who),e(T,Sp),e(Sp,$te),e($te,Hho),e(Sp,Uho),e(Sp,r$),e(r$,Jho),e(Sp,Yho),e(T,Kho),e(T,Rp),e(Rp,Ite),e(Ite,Zho),e(Rp,euo),e(Rp,t$),e(t$,ouo),e(Rp,ruo),e(T,tuo),e(T,Bp),e(Bp,qte),e(qte,auo),e(Bp,nuo),e(Bp,a$),e(a$,suo),e(Bp,luo),e(T,iuo),e(T,Pp),e(Pp,Nte),e(Nte,duo),e(Pp,cuo),e(Pp,n$),e(n$,muo),e(Pp,fuo),e(T,guo),e(T,$p),e($p,jte),e(jte,huo),e($p,uuo),e($p,s$),e(s$,puo),e($p,_uo),e(T,buo),e(T,Ip),e(Ip,Dte),e(Dte,vuo),e(Ip,Fuo),e(Ip,l$),e(l$,Tuo),e(Ip,Muo),e(qe,Euo),e(qe,qp),e(qp,Cuo),e(qp,Gte),e(Gte,wuo),e(qp,Auo),e(qp,Ote),e(Ote,yuo),e(qe,Luo),e(qe,Vte),e(Vte,xuo),e(qe,kuo),g(u6,qe,null),b(c,KRe,_),b(c,rd,_),e(rd,Np),e(Np,Xte),g(p6,Xte,null),e(rd,Suo),e(rd,zte),e(zte,Ruo),b(c,ZRe,_),b(c,Yo,_),g(_6,Yo,null),e(Yo,Buo),e(Yo,td),e(td,Puo),e(td,i$),e(i$,$uo),e(td,Iuo),e(td,d$),e(d$,quo),e(td,Nuo),e(Yo,juo),e(Yo,b6),e(b6,Duo),e(b6,Qte),e(Qte,Guo),e(b6,Ouo),e(Yo,Vuo),e(Yo,zr),g(v6,zr,null),e(zr,Xuo),e(zr,Wte),e(Wte,zuo),e(zr,Quo),e(zr,ad),e(ad,Wuo),e(ad,Hte),e(Hte,Huo),e(ad,Uuo),e(ad,c$),e(c$,Juo),e(ad,Yuo),e(zr,Kuo),e(zr,Ute),e(Ute,Zuo),e(zr,epo),g(F6,zr,null),e(Yo,opo),e(Yo,Ne),g(T6,Ne,null),e(Ne,rpo),e(Ne,Jte),e(Jte,tpo),e(Ne,apo),e(Ne,za),e(za,npo),e(za,Yte),e(Yte,spo),e(za,lpo),e(za,Kte),e(Kte,ipo),e(za,dpo),e(za,Zte),e(Zte,cpo),e(za,mpo),e(Ne,fpo),e(Ne,S),e(S,jp),e(jp,eae),e(eae,gpo),e(jp,hpo),e(jp,m$),e(m$,upo),e(jp,ppo),e(S,_po),e(S,Dp),e(Dp,oae),e(oae,bpo),e(Dp,vpo),e(Dp,f$),e(f$,Fpo),e(Dp,Tpo),e(S,Mpo),e(S,Gp),e(Gp,rae),e(rae,Epo),e(Gp,Cpo),e(Gp,g$),e(g$,wpo),e(Gp,Apo),e(S,ypo),e(S,Op),e(Op,tae),e(tae,Lpo),e(Op,xpo),e(Op,h$),e(h$,kpo),e(Op,Spo),e(S,Rpo),e(S,Vp),e(Vp,aae),e(aae,Bpo),e(Vp,Ppo),e(Vp,u$),e(u$,$po),e(Vp,Ipo),e(S,qpo),e(S,Xp),e(Xp,nae),e(nae,Npo),e(Xp,jpo),e(Xp,p$),e(p$,Dpo),e(Xp,Gpo),e(S,Opo),e(S,zp),e(zp,sae),e(sae,Vpo),e(zp,Xpo),e(zp,_$),e(_$,zpo),e(zp,Qpo),e(S,Wpo),e(S,Qp),e(Qp,lae),e(lae,Hpo),e(Qp,Upo),e(Qp,b$),e(b$,Jpo),e(Qp,Ypo),e(S,Kpo),e(S,Wp),e(Wp,iae),e(iae,Zpo),e(Wp,e_o),e(Wp,v$),e(v$,o_o),e(Wp,r_o),e(S,t_o),e(S,Hp),e(Hp,dae),e(dae,a_o),e(Hp,n_o),e(Hp,F$),e(F$,s_o),e(Hp,l_o),e(S,i_o),e(S,Up),e(Up,cae),e(cae,d_o),e(Up,c_o),e(Up,T$),e(T$,m_o),e(Up,f_o),e(S,g_o),e(S,Jp),e(Jp,mae),e(mae,h_o),e(Jp,u_o),e(Jp,M$),e(M$,p_o),e(Jp,__o),e(S,b_o),e(S,Yp),e(Yp,fae),e(fae,v_o),e(Yp,F_o),e(Yp,E$),e(E$,T_o),e(Yp,M_o),e(S,E_o),e(S,Kp),e(Kp,gae),e(gae,C_o),e(Kp,w_o),e(Kp,C$),e(C$,A_o),e(Kp,y_o),e(S,L_o),e(S,Zp),e(Zp,hae),e(hae,x_o),e(Zp,k_o),e(Zp,w$),e(w$,S_o),e(Zp,R_o),e(S,B_o),e(S,e_),e(e_,uae),e(uae,P_o),e(e_,$_o),e(e_,A$),e(A$,I_o),e(e_,q_o),e(S,N_o),e(S,o_),e(o_,pae),e(pae,j_o),e(o_,D_o),e(o_,y$),e(y$,G_o),e(o_,O_o),e(S,V_o),e(S,r_),e(r_,_ae),e(_ae,X_o),e(r_,z_o),e(r_,L$),e(L$,Q_o),e(r_,W_o),e(S,H_o),e(S,t_),e(t_,bae),e(bae,U_o),e(t_,J_o),e(t_,x$),e(x$,Y_o),e(t_,K_o),e(S,Z_o),e(S,a_),e(a_,vae),e(vae,ebo),e(a_,obo),e(a_,k$),e(k$,rbo),e(a_,tbo),e(S,abo),e(S,n_),e(n_,Fae),e(Fae,nbo),e(n_,sbo),e(n_,S$),e(S$,lbo),e(n_,ibo),e(S,dbo),e(S,s_),e(s_,Tae),e(Tae,cbo),e(s_,mbo),e(s_,R$),e(R$,fbo),e(s_,gbo),e(S,hbo),e(S,l_),e(l_,Mae),e(Mae,ubo),e(l_,pbo),e(l_,B$),e(B$,_bo),e(l_,bbo),e(S,vbo),e(S,i_),e(i_,Eae),e(Eae,Fbo),e(i_,Tbo),e(i_,P$),e(P$,Mbo),e(i_,Ebo),e(S,Cbo),e(S,d_),e(d_,Cae),e(Cae,wbo),e(d_,Abo),e(d_,$$),e($$,ybo),e(d_,Lbo),e(S,xbo),e(S,c_),e(c_,wae),e(wae,kbo),e(c_,Sbo),e(c_,I$),e(I$,Rbo),e(c_,Bbo),e(S,Pbo),e(S,m_),e(m_,Aae),e(Aae,$bo),e(m_,Ibo),e(m_,q$),e(q$,qbo),e(m_,Nbo),e(S,jbo),e(S,f_),e(f_,yae),e(yae,Dbo),e(f_,Gbo),e(f_,N$),e(N$,Obo),e(f_,Vbo),e(S,Xbo),e(S,g_),e(g_,Lae),e(Lae,zbo),e(g_,Qbo),e(g_,j$),e(j$,Wbo),e(g_,Hbo),e(S,Ubo),e(S,h_),e(h_,xae),e(xae,Jbo),e(h_,Ybo),e(h_,D$),e(D$,Kbo),e(h_,Zbo),e(S,e2o),e(S,u_),e(u_,kae),e(kae,o2o),e(u_,r2o),e(u_,G$),e(G$,t2o),e(u_,a2o),e(S,n2o),e(S,p_),e(p_,Sae),e(Sae,s2o),e(p_,l2o),e(p_,O$),e(O$,i2o),e(p_,d2o),e(S,c2o),e(S,__),e(__,Rae),e(Rae,m2o),e(__,f2o),e(__,V$),e(V$,g2o),e(__,h2o),e(S,u2o),e(S,b_),e(b_,Bae),e(Bae,p2o),e(b_,_2o),e(b_,X$),e(X$,b2o),e(b_,v2o),e(S,F2o),e(S,v_),e(v_,Pae),e(Pae,T2o),e(v_,M2o),e(v_,z$),e(z$,E2o),e(v_,C2o),e(S,w2o),e(S,F_),e(F_,$ae),e($ae,A2o),e(F_,y2o),e(F_,Q$),e(Q$,L2o),e(F_,x2o),e(S,k2o),e(S,T_),e(T_,Iae),e(Iae,S2o),e(T_,R2o),e(T_,W$),e(W$,B2o),e(T_,P2o),e(S,$2o),e(S,M_),e(M_,qae),e(qae,I2o),e(M_,q2o),e(M_,H$),e(H$,N2o),e(M_,j2o),e(S,D2o),e(S,E_),e(E_,Nae),e(Nae,G2o),e(E_,O2o),e(E_,U$),e(U$,V2o),e(E_,X2o),e(Ne,z2o),e(Ne,C_),e(C_,Q2o),e(C_,jae),e(jae,W2o),e(C_,H2o),e(C_,Dae),e(Dae,U2o),e(Ne,J2o),e(Ne,Gae),e(Gae,Y2o),e(Ne,K2o),g(M6,Ne,null),b(c,eBe,_),b(c,nd,_),e(nd,w_),e(w_,Oae),g(E6,Oae,null),e(nd,Z2o),e(nd,Vae),e(Vae,evo),b(c,oBe,_),b(c,Ko,_),g(C6,Ko,null),e(Ko,ovo),e(Ko,sd),e(sd,rvo),e(sd,J$),e(J$,tvo),e(sd,avo),e(sd,Y$),e(Y$,nvo),e(sd,svo),e(Ko,lvo),e(Ko,w6),e(w6,ivo),e(w6,Xae),e(Xae,dvo),e(w6,cvo),e(Ko,mvo),e(Ko,Qr),g(A6,Qr,null),e(Qr,fvo),e(Qr,zae),e(zae,gvo),e(Qr,hvo),e(Qr,ld),e(ld,uvo),e(ld,Qae),e(Qae,pvo),e(ld,_vo),e(ld,K$),e(K$,bvo),e(ld,vvo),e(Qr,Fvo),e(Qr,Wae),e(Wae,Tvo),e(Qr,Mvo),g(y6,Qr,null),e(Ko,Evo),e(Ko,je),g(L6,je,null),e(je,Cvo),e(je,Hae),e(Hae,wvo),e(je,Avo),e(je,Qa),e(Qa,yvo),e(Qa,Uae),e(Uae,Lvo),e(Qa,xvo),e(Qa,Jae),e(Jae,kvo),e(Qa,Svo),e(Qa,Yae),e(Yae,Rvo),e(Qa,Bvo),e(je,Pvo),e(je,$),e($,A_),e(A_,Kae),e(Kae,$vo),e(A_,Ivo),e(A_,Z$),e(Z$,qvo),e(A_,Nvo),e($,jvo),e($,y_),e(y_,Zae),e(Zae,Dvo),e(y_,Gvo),e(y_,eI),e(eI,Ovo),e(y_,Vvo),e($,Xvo),e($,L_),e(L_,ene),e(ene,zvo),e(L_,Qvo),e(L_,oI),e(oI,Wvo),e(L_,Hvo),e($,Uvo),e($,x_),e(x_,one),e(one,Jvo),e(x_,Yvo),e(x_,rI),e(rI,Kvo),e(x_,Zvo),e($,eFo),e($,k_),e(k_,rne),e(rne,oFo),e(k_,rFo),e(k_,tI),e(tI,tFo),e(k_,aFo),e($,nFo),e($,S_),e(S_,tne),e(tne,sFo),e(S_,lFo),e(S_,aI),e(aI,iFo),e(S_,dFo),e($,cFo),e($,R_),e(R_,ane),e(ane,mFo),e(R_,fFo),e(R_,nI),e(nI,gFo),e(R_,hFo),e($,uFo),e($,B_),e(B_,nne),e(nne,pFo),e(B_,_Fo),e(B_,sI),e(sI,bFo),e(B_,vFo),e($,FFo),e($,P_),e(P_,sne),e(sne,TFo),e(P_,MFo),e(P_,lI),e(lI,EFo),e(P_,CFo),e($,wFo),e($,$_),e($_,lne),e(lne,AFo),e($_,yFo),e($_,iI),e(iI,LFo),e($_,xFo),e($,kFo),e($,I_),e(I_,ine),e(ine,SFo),e(I_,RFo),e(I_,dI),e(dI,BFo),e(I_,PFo),e($,$Fo),e($,q_),e(q_,dne),e(dne,IFo),e(q_,qFo),e(q_,cI),e(cI,NFo),e(q_,jFo),e($,DFo),e($,N_),e(N_,cne),e(cne,GFo),e(N_,OFo),e(N_,mI),e(mI,VFo),e(N_,XFo),e($,zFo),e($,j_),e(j_,mne),e(mne,QFo),e(j_,WFo),e(j_,fI),e(fI,HFo),e(j_,UFo),e($,JFo),e($,D_),e(D_,fne),e(fne,YFo),e(D_,KFo),e(D_,gI),e(gI,ZFo),e(D_,e1o),e($,o1o),e($,G_),e(G_,gne),e(gne,r1o),e(G_,t1o),e(G_,hI),e(hI,a1o),e(G_,n1o),e($,s1o),e($,O_),e(O_,hne),e(hne,l1o),e(O_,i1o),e(O_,uI),e(uI,d1o),e(O_,c1o),e($,m1o),e($,V_),e(V_,une),e(une,f1o),e(V_,g1o),e(V_,pI),e(pI,h1o),e(V_,u1o),e($,p1o),e($,X_),e(X_,pne),e(pne,_1o),e(X_,b1o),e(X_,_I),e(_I,v1o),e(X_,F1o),e($,T1o),e($,z_),e(z_,_ne),e(_ne,M1o),e(z_,E1o),e(z_,bI),e(bI,C1o),e(z_,w1o),e($,A1o),e($,Q_),e(Q_,bne),e(bne,y1o),e(Q_,L1o),e(Q_,vI),e(vI,x1o),e(Q_,k1o),e($,S1o),e($,W_),e(W_,vne),e(vne,R1o),e(W_,B1o),e(W_,FI),e(FI,P1o),e(W_,$1o),e($,I1o),e($,H_),e(H_,Fne),e(Fne,q1o),e(H_,N1o),e(H_,TI),e(TI,j1o),e(H_,D1o),e($,G1o),e($,U_),e(U_,Tne),e(Tne,O1o),e(U_,V1o),e(U_,MI),e(MI,X1o),e(U_,z1o),e($,Q1o),e($,J_),e(J_,Mne),e(Mne,W1o),e(J_,H1o),e(J_,EI),e(EI,U1o),e(J_,J1o),e($,Y1o),e($,Y_),e(Y_,Ene),e(Ene,K1o),e(Y_,Z1o),e(Y_,CI),e(CI,eTo),e(Y_,oTo),e($,rTo),e($,K_),e(K_,Cne),e(Cne,tTo),e(K_,aTo),e(K_,wI),e(wI,nTo),e(K_,sTo),e($,lTo),e($,Z_),e(Z_,wne),e(wne,iTo),e(Z_,dTo),e(Z_,AI),e(AI,cTo),e(Z_,mTo),e($,fTo),e($,eb),e(eb,Ane),e(Ane,gTo),e(eb,hTo),e(eb,yI),e(yI,uTo),e(eb,pTo),e($,_To),e($,ob),e(ob,yne),e(yne,bTo),e(ob,vTo),e(ob,LI),e(LI,FTo),e(ob,TTo),e($,MTo),e($,rb),e(rb,Lne),e(Lne,ETo),e(rb,CTo),e(rb,xI),e(xI,wTo),e(rb,ATo),e($,yTo),e($,tb),e(tb,xne),e(xne,LTo),e(tb,xTo),e(tb,kI),e(kI,kTo),e(tb,STo),e($,RTo),e($,ab),e(ab,kne),e(kne,BTo),e(ab,PTo),e(ab,SI),e(SI,$To),e(ab,ITo),e($,qTo),e($,nb),e(nb,Sne),e(Sne,NTo),e(nb,jTo),e(nb,RI),e(RI,DTo),e(nb,GTo),e($,OTo),e($,sb),e(sb,Rne),e(Rne,VTo),e(sb,XTo),e(sb,BI),e(BI,zTo),e(sb,QTo),e(je,WTo),e(je,lb),e(lb,HTo),e(lb,Bne),e(Bne,UTo),e(lb,JTo),e(lb,Pne),e(Pne,YTo),e(je,KTo),e(je,$ne),e($ne,ZTo),e(je,eMo),g(x6,je,null),b(c,rBe,_),b(c,id,_),e(id,ib),e(ib,Ine),g(k6,Ine,null),e(id,oMo),e(id,qne),e(qne,rMo),b(c,tBe,_),b(c,Zo,_),g(S6,Zo,null),e(Zo,tMo),e(Zo,dd),e(dd,aMo),e(dd,PI),e(PI,nMo),e(dd,sMo),e(dd,$I),e($I,lMo),e(dd,iMo),e(Zo,dMo),e(Zo,R6),e(R6,cMo),e(R6,Nne),e(Nne,mMo),e(R6,fMo),e(Zo,gMo),e(Zo,Wr),g(B6,Wr,null),e(Wr,hMo),e(Wr,jne),e(jne,uMo),e(Wr,pMo),e(Wr,cd),e(cd,_Mo),e(cd,Dne),e(Dne,bMo),e(cd,vMo),e(cd,II),e(II,FMo),e(cd,TMo),e(Wr,MMo),e(Wr,Gne),e(Gne,EMo),e(Wr,CMo),g(P6,Wr,null),e(Zo,wMo),e(Zo,De),g($6,De,null),e(De,AMo),e(De,One),e(One,yMo),e(De,LMo),e(De,Wa),e(Wa,xMo),e(Wa,Vne),e(Vne,kMo),e(Wa,SMo),e(Wa,Xne),e(Xne,RMo),e(Wa,BMo),e(Wa,zne),e(zne,PMo),e(Wa,$Mo),e(De,IMo),e(De,I),e(I,db),e(db,Qne),e(Qne,qMo),e(db,NMo),e(db,qI),e(qI,jMo),e(db,DMo),e(I,GMo),e(I,cb),e(cb,Wne),e(Wne,OMo),e(cb,VMo),e(cb,NI),e(NI,XMo),e(cb,zMo),e(I,QMo),e(I,mb),e(mb,Hne),e(Hne,WMo),e(mb,HMo),e(mb,jI),e(jI,UMo),e(mb,JMo),e(I,YMo),e(I,fb),e(fb,Une),e(Une,KMo),e(fb,ZMo),e(fb,DI),e(DI,e4o),e(fb,o4o),e(I,r4o),e(I,gb),e(gb,Jne),e(Jne,t4o),e(gb,a4o),e(gb,GI),e(GI,n4o),e(gb,s4o),e(I,l4o),e(I,hb),e(hb,Yne),e(Yne,i4o),e(hb,d4o),e(hb,OI),e(OI,c4o),e(hb,m4o),e(I,f4o),e(I,ub),e(ub,Kne),e(Kne,g4o),e(ub,h4o),e(ub,VI),e(VI,u4o),e(ub,p4o),e(I,_4o),e(I,pb),e(pb,Zne),e(Zne,b4o),e(pb,v4o),e(pb,XI),e(XI,F4o),e(pb,T4o),e(I,M4o),e(I,_b),e(_b,ese),e(ese,E4o),e(_b,C4o),e(_b,zI),e(zI,w4o),e(_b,A4o),e(I,y4o),e(I,bb),e(bb,ose),e(ose,L4o),e(bb,x4o),e(bb,QI),e(QI,k4o),e(bb,S4o),e(I,R4o),e(I,vb),e(vb,rse),e(rse,B4o),e(vb,P4o),e(vb,WI),e(WI,$4o),e(vb,I4o),e(I,q4o),e(I,Fb),e(Fb,tse),e(tse,N4o),e(Fb,j4o),e(Fb,HI),e(HI,D4o),e(Fb,G4o),e(I,O4o),e(I,Tb),e(Tb,ase),e(ase,V4o),e(Tb,X4o),e(Tb,UI),e(UI,z4o),e(Tb,Q4o),e(I,W4o),e(I,Mb),e(Mb,nse),e(nse,H4o),e(Mb,U4o),e(Mb,JI),e(JI,J4o),e(Mb,Y4o),e(I,K4o),e(I,Eb),e(Eb,sse),e(sse,Z4o),e(Eb,eEo),e(Eb,YI),e(YI,oEo),e(Eb,rEo),e(I,tEo),e(I,Cb),e(Cb,lse),e(lse,aEo),e(Cb,nEo),e(Cb,KI),e(KI,sEo),e(Cb,lEo),e(I,iEo),e(I,wb),e(wb,ise),e(ise,dEo),e(wb,cEo),e(wb,ZI),e(ZI,mEo),e(wb,fEo),e(I,gEo),e(I,Ab),e(Ab,dse),e(dse,hEo),e(Ab,uEo),e(Ab,eq),e(eq,pEo),e(Ab,_Eo),e(I,bEo),e(I,yb),e(yb,cse),e(cse,vEo),e(yb,FEo),e(yb,oq),e(oq,TEo),e(yb,MEo),e(I,EEo),e(I,Lb),e(Lb,mse),e(mse,CEo),e(Lb,wEo),e(Lb,rq),e(rq,AEo),e(Lb,yEo),e(I,LEo),e(I,xb),e(xb,fse),e(fse,xEo),e(xb,kEo),e(xb,tq),e(tq,SEo),e(xb,REo),e(I,BEo),e(I,kb),e(kb,gse),e(gse,PEo),e(kb,$Eo),e(kb,aq),e(aq,IEo),e(kb,qEo),e(I,NEo),e(I,Sb),e(Sb,hse),e(hse,jEo),e(Sb,DEo),e(Sb,nq),e(nq,GEo),e(Sb,OEo),e(I,VEo),e(I,Rb),e(Rb,use),e(use,XEo),e(Rb,zEo),e(Rb,sq),e(sq,QEo),e(Rb,WEo),e(I,HEo),e(I,Bb),e(Bb,pse),e(pse,UEo),e(Bb,JEo),e(Bb,lq),e(lq,YEo),e(Bb,KEo),e(I,ZEo),e(I,Pb),e(Pb,_se),e(_se,e5o),e(Pb,o5o),e(Pb,iq),e(iq,r5o),e(Pb,t5o),e(I,a5o),e(I,$b),e($b,bse),e(bse,n5o),e($b,s5o),e($b,dq),e(dq,l5o),e($b,i5o),e(I,d5o),e(I,Ib),e(Ib,vse),e(vse,c5o),e(Ib,m5o),e(Ib,cq),e(cq,f5o),e(Ib,g5o),e(I,h5o),e(I,qb),e(qb,Fse),e(Fse,u5o),e(qb,p5o),e(qb,mq),e(mq,_5o),e(qb,b5o),e(I,v5o),e(I,Nb),e(Nb,Tse),e(Tse,F5o),e(Nb,T5o),e(Nb,fq),e(fq,M5o),e(Nb,E5o),e(I,C5o),e(I,jb),e(jb,Mse),e(Mse,w5o),e(jb,A5o),e(jb,Ese),e(Ese,y5o),e(jb,L5o),e(I,x5o),e(I,Db),e(Db,Cse),e(Cse,k5o),e(Db,S5o),e(Db,gq),e(gq,R5o),e(Db,B5o),e(I,P5o),e(I,Gb),e(Gb,wse),e(wse,$5o),e(Gb,I5o),e(Gb,hq),e(hq,q5o),e(Gb,N5o),e(I,j5o),e(I,Ob),e(Ob,Ase),e(Ase,D5o),e(Ob,G5o),e(Ob,uq),e(uq,O5o),e(Ob,V5o),e(I,X5o),e(I,Vb),e(Vb,yse),e(yse,z5o),e(Vb,Q5o),e(Vb,pq),e(pq,W5o),e(Vb,H5o),e(De,U5o),e(De,Xb),e(Xb,J5o),e(Xb,Lse),e(Lse,Y5o),e(Xb,K5o),e(Xb,xse),e(xse,Z5o),e(De,e3o),e(De,kse),e(kse,o3o),e(De,r3o),g(I6,De,null),b(c,aBe,_),b(c,md,_),e(md,zb),e(zb,Sse),g(q6,Sse,null),e(md,t3o),e(md,Rse),e(Rse,a3o),b(c,nBe,_),b(c,er,_),g(N6,er,null),e(er,n3o),e(er,fd),e(fd,s3o),e(fd,_q),e(_q,l3o),e(fd,i3o),e(fd,bq),e(bq,d3o),e(fd,c3o),e(er,m3o),e(er,j6),e(j6,f3o),e(j6,Bse),e(Bse,g3o),e(j6,h3o),e(er,u3o),e(er,Hr),g(D6,Hr,null),e(Hr,p3o),e(Hr,Pse),e(Pse,_3o),e(Hr,b3o),e(Hr,gd),e(gd,v3o),e(gd,$se),e($se,F3o),e(gd,T3o),e(gd,vq),e(vq,M3o),e(gd,E3o),e(Hr,C3o),e(Hr,Ise),e(Ise,w3o),e(Hr,A3o),g(G6,Hr,null),e(er,y3o),e(er,Ge),g(O6,Ge,null),e(Ge,L3o),e(Ge,qse),e(qse,x3o),e(Ge,k3o),e(Ge,Ha),e(Ha,S3o),e(Ha,Nse),e(Nse,R3o),e(Ha,B3o),e(Ha,jse),e(jse,P3o),e(Ha,$3o),e(Ha,Dse),e(Dse,I3o),e(Ha,q3o),e(Ge,N3o),e(Ge,ne),e(ne,Qb),e(Qb,Gse),e(Gse,j3o),e(Qb,D3o),e(Qb,Fq),e(Fq,G3o),e(Qb,O3o),e(ne,V3o),e(ne,Wb),e(Wb,Ose),e(Ose,X3o),e(Wb,z3o),e(Wb,Tq),e(Tq,Q3o),e(Wb,W3o),e(ne,H3o),e(ne,Hb),e(Hb,Vse),e(Vse,U3o),e(Hb,J3o),e(Hb,Mq),e(Mq,Y3o),e(Hb,K3o),e(ne,Z3o),e(ne,Ub),e(Ub,Xse),e(Xse,eCo),e(Ub,oCo),e(Ub,Eq),e(Eq,rCo),e(Ub,tCo),e(ne,aCo),e(ne,Jb),e(Jb,zse),e(zse,nCo),e(Jb,sCo),e(Jb,Cq),e(Cq,lCo),e(Jb,iCo),e(ne,dCo),e(ne,Yb),e(Yb,Qse),e(Qse,cCo),e(Yb,mCo),e(Yb,wq),e(wq,fCo),e(Yb,gCo),e(ne,hCo),e(ne,Kb),e(Kb,Wse),e(Wse,uCo),e(Kb,pCo),e(Kb,Aq),e(Aq,_Co),e(Kb,bCo),e(ne,vCo),e(ne,Zb),e(Zb,Hse),e(Hse,FCo),e(Zb,TCo),e(Zb,yq),e(yq,MCo),e(Zb,ECo),e(ne,CCo),e(ne,e2),e(e2,Use),e(Use,wCo),e(e2,ACo),e(e2,Lq),e(Lq,yCo),e(e2,LCo),e(ne,xCo),e(ne,o2),e(o2,Jse),e(Jse,kCo),e(o2,SCo),e(o2,xq),e(xq,RCo),e(o2,BCo),e(ne,PCo),e(ne,r2),e(r2,Yse),e(Yse,$Co),e(r2,ICo),e(r2,kq),e(kq,qCo),e(r2,NCo),e(ne,jCo),e(ne,t2),e(t2,Kse),e(Kse,DCo),e(t2,GCo),e(t2,Sq),e(Sq,OCo),e(t2,VCo),e(ne,XCo),e(ne,a2),e(a2,Zse),e(Zse,zCo),e(a2,QCo),e(a2,Rq),e(Rq,WCo),e(a2,HCo),e(ne,UCo),e(ne,n2),e(n2,ele),e(ele,JCo),e(n2,YCo),e(n2,Bq),e(Bq,KCo),e(n2,ZCo),e(ne,ewo),e(ne,s2),e(s2,ole),e(ole,owo),e(s2,rwo),e(s2,Pq),e(Pq,two),e(s2,awo),e(ne,nwo),e(ne,l2),e(l2,rle),e(rle,swo),e(l2,lwo),e(l2,$q),e($q,iwo),e(l2,dwo),e(ne,cwo),e(ne,i2),e(i2,tle),e(tle,mwo),e(i2,fwo),e(i2,Iq),e(Iq,gwo),e(i2,hwo),e(Ge,uwo),e(Ge,d2),e(d2,pwo),e(d2,ale),e(ale,_wo),e(d2,bwo),e(d2,nle),e(nle,vwo),e(Ge,Fwo),e(Ge,sle),e(sle,Two),e(Ge,Mwo),g(V6,Ge,null),b(c,sBe,_),b(c,hd,_),e(hd,c2),e(c2,lle),g(X6,lle,null),e(hd,Ewo),e(hd,ile),e(ile,Cwo),b(c,lBe,_),b(c,or,_),g(z6,or,null),e(or,wwo),e(or,ud),e(ud,Awo),e(ud,qq),e(qq,ywo),e(ud,Lwo),e(ud,Nq),e(Nq,xwo),e(ud,kwo),e(or,Swo),e(or,Q6),e(Q6,Rwo),e(Q6,dle),e(dle,Bwo),e(Q6,Pwo),e(or,$wo),e(or,Ur),g(W6,Ur,null),e(Ur,Iwo),e(Ur,cle),e(cle,qwo),e(Ur,Nwo),e(Ur,pd),e(pd,jwo),e(pd,mle),e(mle,Dwo),e(pd,Gwo),e(pd,jq),e(jq,Owo),e(pd,Vwo),e(Ur,Xwo),e(Ur,fle),e(fle,zwo),e(Ur,Qwo),g(H6,Ur,null),e(or,Wwo),e(or,Oe),g(U6,Oe,null),e(Oe,Hwo),e(Oe,gle),e(gle,Uwo),e(Oe,Jwo),e(Oe,Ua),e(Ua,Ywo),e(Ua,hle),e(hle,Kwo),e(Ua,Zwo),e(Ua,ule),e(ule,e6o),e(Ua,o6o),e(Ua,ple),e(ple,r6o),e(Ua,t6o),e(Oe,a6o),e(Oe,y),e(y,m2),e(m2,_le),e(_le,n6o),e(m2,s6o),e(m2,Dq),e(Dq,l6o),e(m2,i6o),e(y,d6o),e(y,f2),e(f2,ble),e(ble,c6o),e(f2,m6o),e(f2,Gq),e(Gq,f6o),e(f2,g6o),e(y,h6o),e(y,g2),e(g2,vle),e(vle,u6o),e(g2,p6o),e(g2,Oq),e(Oq,_6o),e(g2,b6o),e(y,v6o),e(y,h2),e(h2,Fle),e(Fle,F6o),e(h2,T6o),e(h2,Vq),e(Vq,M6o),e(h2,E6o),e(y,C6o),e(y,u2),e(u2,Tle),e(Tle,w6o),e(u2,A6o),e(u2,Xq),e(Xq,y6o),e(u2,L6o),e(y,x6o),e(y,p2),e(p2,Mle),e(Mle,k6o),e(p2,S6o),e(p2,zq),e(zq,R6o),e(p2,B6o),e(y,P6o),e(y,_2),e(_2,Ele),e(Ele,$6o),e(_2,I6o),e(_2,Qq),e(Qq,q6o),e(_2,N6o),e(y,j6o),e(y,b2),e(b2,Cle),e(Cle,D6o),e(b2,G6o),e(b2,Wq),e(Wq,O6o),e(b2,V6o),e(y,X6o),e(y,v2),e(v2,wle),e(wle,z6o),e(v2,Q6o),e(v2,Hq),e(Hq,W6o),e(v2,H6o),e(y,U6o),e(y,F2),e(F2,Ale),e(Ale,J6o),e(F2,Y6o),e(F2,Uq),e(Uq,K6o),e(F2,Z6o),e(y,eAo),e(y,T2),e(T2,yle),e(yle,oAo),e(T2,rAo),e(T2,Jq),e(Jq,tAo),e(T2,aAo),e(y,nAo),e(y,M2),e(M2,Lle),e(Lle,sAo),e(M2,lAo),e(M2,Yq),e(Yq,iAo),e(M2,dAo),e(y,cAo),e(y,E2),e(E2,xle),e(xle,mAo),e(E2,fAo),e(E2,Kq),e(Kq,gAo),e(E2,hAo),e(y,uAo),e(y,C2),e(C2,kle),e(kle,pAo),e(C2,_Ao),e(C2,Zq),e(Zq,bAo),e(C2,vAo),e(y,FAo),e(y,w2),e(w2,Sle),e(Sle,TAo),e(w2,MAo),e(w2,eN),e(eN,EAo),e(w2,CAo),e(y,wAo),e(y,A2),e(A2,Rle),e(Rle,AAo),e(A2,yAo),e(A2,oN),e(oN,LAo),e(A2,xAo),e(y,kAo),e(y,y2),e(y2,Ble),e(Ble,SAo),e(y2,RAo),e(y2,rN),e(rN,BAo),e(y2,PAo),e(y,$Ao),e(y,L2),e(L2,Ple),e(Ple,IAo),e(L2,qAo),e(L2,tN),e(tN,NAo),e(L2,jAo),e(y,DAo),e(y,x2),e(x2,$le),e($le,GAo),e(x2,OAo),e(x2,aN),e(aN,VAo),e(x2,XAo),e(y,zAo),e(y,k2),e(k2,Ile),e(Ile,QAo),e(k2,WAo),e(k2,nN),e(nN,HAo),e(k2,UAo),e(y,JAo),e(y,S2),e(S2,qle),e(qle,YAo),e(S2,KAo),e(S2,sN),e(sN,ZAo),e(S2,e0o),e(y,o0o),e(y,R2),e(R2,Nle),e(Nle,r0o),e(R2,t0o),e(R2,lN),e(lN,a0o),e(R2,n0o),e(y,s0o),e(y,B2),e(B2,jle),e(jle,l0o),e(B2,i0o),e(B2,iN),e(iN,d0o),e(B2,c0o),e(y,m0o),e(y,P2),e(P2,Dle),e(Dle,f0o),e(P2,g0o),e(P2,dN),e(dN,h0o),e(P2,u0o),e(y,p0o),e(y,$2),e($2,Gle),e(Gle,_0o),e($2,b0o),e($2,cN),e(cN,v0o),e($2,F0o),e(y,T0o),e(y,I2),e(I2,Ole),e(Ole,M0o),e(I2,E0o),e(I2,mN),e(mN,C0o),e(I2,w0o),e(y,A0o),e(y,q2),e(q2,Vle),e(Vle,y0o),e(q2,L0o),e(q2,fN),e(fN,x0o),e(q2,k0o),e(y,S0o),e(y,N2),e(N2,Xle),e(Xle,R0o),e(N2,B0o),e(N2,gN),e(gN,P0o),e(N2,$0o),e(y,I0o),e(y,j2),e(j2,zle),e(zle,q0o),e(j2,N0o),e(j2,hN),e(hN,j0o),e(j2,D0o),e(y,G0o),e(y,D2),e(D2,Qle),e(Qle,O0o),e(D2,V0o),e(D2,uN),e(uN,X0o),e(D2,z0o),e(y,Q0o),e(y,G2),e(G2,Wle),e(Wle,W0o),e(G2,H0o),e(G2,pN),e(pN,U0o),e(G2,J0o),e(y,Y0o),e(y,O2),e(O2,Hle),e(Hle,K0o),e(O2,Z0o),e(O2,_N),e(_N,eyo),e(O2,oyo),e(y,ryo),e(y,V2),e(V2,Ule),e(Ule,tyo),e(V2,ayo),e(V2,bN),e(bN,nyo),e(V2,syo),e(y,lyo),e(y,X2),e(X2,Jle),e(Jle,iyo),e(X2,dyo),e(X2,vN),e(vN,cyo),e(X2,myo),e(y,fyo),e(y,z2),e(z2,Yle),e(Yle,gyo),e(z2,hyo),e(z2,FN),e(FN,uyo),e(z2,pyo),e(y,_yo),e(y,Q2),e(Q2,Kle),e(Kle,byo),e(Q2,vyo),e(Q2,TN),e(TN,Fyo),e(Q2,Tyo),e(y,Myo),e(y,W2),e(W2,Zle),e(Zle,Eyo),e(W2,Cyo),e(W2,MN),e(MN,wyo),e(W2,Ayo),e(y,yyo),e(y,H2),e(H2,eie),e(eie,Lyo),e(H2,xyo),e(H2,EN),e(EN,kyo),e(H2,Syo),e(y,Ryo),e(y,U2),e(U2,oie),e(oie,Byo),e(U2,Pyo),e(U2,CN),e(CN,$yo),e(U2,Iyo),e(y,qyo),e(y,J2),e(J2,rie),e(rie,Nyo),e(J2,jyo),e(J2,wN),e(wN,Dyo),e(J2,Gyo),e(y,Oyo),e(y,Y2),e(Y2,tie),e(tie,Vyo),e(Y2,Xyo),e(Y2,AN),e(AN,zyo),e(Y2,Qyo),e(y,Wyo),e(y,K2),e(K2,aie),e(aie,Hyo),e(K2,Uyo),e(K2,yN),e(yN,Jyo),e(K2,Yyo),e(y,Kyo),e(y,Z2),e(Z2,nie),e(nie,Zyo),e(Z2,e8o),e(Z2,LN),e(LN,o8o),e(Z2,r8o),e(y,t8o),e(y,ev),e(ev,sie),e(sie,a8o),e(ev,n8o),e(ev,xN),e(xN,s8o),e(ev,l8o),e(y,i8o),e(y,ov),e(ov,lie),e(lie,d8o),e(ov,c8o),e(ov,kN),e(kN,m8o),e(ov,f8o),e(y,g8o),e(y,rv),e(rv,iie),e(iie,h8o),e(rv,u8o),e(rv,SN),e(SN,p8o),e(rv,_8o),e(y,b8o),e(y,tv),e(tv,die),e(die,v8o),e(tv,F8o),e(tv,RN),e(RN,T8o),e(tv,M8o),e(Oe,E8o),e(Oe,av),e(av,C8o),e(av,cie),e(cie,w8o),e(av,A8o),e(av,mie),e(mie,y8o),e(Oe,L8o),e(Oe,fie),e(fie,x8o),e(Oe,k8o),g(J6,Oe,null),b(c,iBe,_),b(c,_d,_),e(_d,nv),e(nv,gie),g(Y6,gie,null),e(_d,S8o),e(_d,hie),e(hie,R8o),b(c,dBe,_),b(c,rr,_),g(K6,rr,null),e(rr,B8o),e(rr,bd),e(bd,P8o),e(bd,BN),e(BN,$8o),e(bd,I8o),e(bd,PN),e(PN,q8o),e(bd,N8o),e(rr,j8o),e(rr,Z6),e(Z6,D8o),e(Z6,uie),e(uie,G8o),e(Z6,O8o),e(rr,V8o),e(rr,Jr),g(eA,Jr,null),e(Jr,X8o),e(Jr,pie),e(pie,z8o),e(Jr,Q8o),e(Jr,vd),e(vd,W8o),e(vd,_ie),e(_ie,H8o),e(vd,U8o),e(vd,$N),e($N,J8o),e(vd,Y8o),e(Jr,K8o),e(Jr,bie),e(bie,Z8o),e(Jr,eLo),g(oA,Jr,null),e(rr,oLo),e(rr,Ve),g(rA,Ve,null),e(Ve,rLo),e(Ve,vie),e(vie,tLo),e(Ve,aLo),e(Ve,Ja),e(Ja,nLo),e(Ja,Fie),e(Fie,sLo),e(Ja,lLo),e(Ja,Tie),e(Tie,iLo),e(Ja,dLo),e(Ja,Mie),e(Mie,cLo),e(Ja,mLo),e(Ve,fLo),e(Ve,G),e(G,sv),e(sv,Eie),e(Eie,gLo),e(sv,hLo),e(sv,IN),e(IN,uLo),e(sv,pLo),e(G,_Lo),e(G,lv),e(lv,Cie),e(Cie,bLo),e(lv,vLo),e(lv,qN),e(qN,FLo),e(lv,TLo),e(G,MLo),e(G,iv),e(iv,wie),e(wie,ELo),e(iv,CLo),e(iv,NN),e(NN,wLo),e(iv,ALo),e(G,yLo),e(G,dv),e(dv,Aie),e(Aie,LLo),e(dv,xLo),e(dv,jN),e(jN,kLo),e(dv,SLo),e(G,RLo),e(G,cv),e(cv,yie),e(yie,BLo),e(cv,PLo),e(cv,DN),e(DN,$Lo),e(cv,ILo),e(G,qLo),e(G,mv),e(mv,Lie),e(Lie,NLo),e(mv,jLo),e(mv,GN),e(GN,DLo),e(mv,GLo),e(G,OLo),e(G,fv),e(fv,xie),e(xie,VLo),e(fv,XLo),e(fv,ON),e(ON,zLo),e(fv,QLo),e(G,WLo),e(G,gv),e(gv,kie),e(kie,HLo),e(gv,ULo),e(gv,VN),e(VN,JLo),e(gv,YLo),e(G,KLo),e(G,hv),e(hv,Sie),e(Sie,ZLo),e(hv,e7o),e(hv,XN),e(XN,o7o),e(hv,r7o),e(G,t7o),e(G,uv),e(uv,Rie),e(Rie,a7o),e(uv,n7o),e(uv,zN),e(zN,s7o),e(uv,l7o),e(G,i7o),e(G,pv),e(pv,Bie),e(Bie,d7o),e(pv,c7o),e(pv,QN),e(QN,m7o),e(pv,f7o),e(G,g7o),e(G,_v),e(_v,Pie),e(Pie,h7o),e(_v,u7o),e(_v,WN),e(WN,p7o),e(_v,_7o),e(G,b7o),e(G,bv),e(bv,$ie),e($ie,v7o),e(bv,F7o),e(bv,HN),e(HN,T7o),e(bv,M7o),e(G,E7o),e(G,vv),e(vv,Iie),e(Iie,C7o),e(vv,w7o),e(vv,UN),e(UN,A7o),e(vv,y7o),e(G,L7o),e(G,Fv),e(Fv,qie),e(qie,x7o),e(Fv,k7o),e(Fv,JN),e(JN,S7o),e(Fv,R7o),e(G,B7o),e(G,Tv),e(Tv,Nie),e(Nie,P7o),e(Tv,$7o),e(Tv,YN),e(YN,I7o),e(Tv,q7o),e(G,N7o),e(G,Mv),e(Mv,jie),e(jie,j7o),e(Mv,D7o),e(Mv,KN),e(KN,G7o),e(Mv,O7o),e(G,V7o),e(G,Ev),e(Ev,Die),e(Die,X7o),e(Ev,z7o),e(Ev,ZN),e(ZN,Q7o),e(Ev,W7o),e(G,H7o),e(G,Cv),e(Cv,Gie),e(Gie,U7o),e(Cv,J7o),e(Cv,ej),e(ej,Y7o),e(Cv,K7o),e(G,Z7o),e(G,wv),e(wv,Oie),e(Oie,e9o),e(wv,o9o),e(wv,oj),e(oj,r9o),e(wv,t9o),e(G,a9o),e(G,Av),e(Av,Vie),e(Vie,n9o),e(Av,s9o),e(Av,rj),e(rj,l9o),e(Av,i9o),e(G,d9o),e(G,yv),e(yv,Xie),e(Xie,c9o),e(yv,m9o),e(yv,tj),e(tj,f9o),e(yv,g9o),e(G,h9o),e(G,Lv),e(Lv,zie),e(zie,u9o),e(Lv,p9o),e(Lv,aj),e(aj,_9o),e(Lv,b9o),e(G,v9o),e(G,xv),e(xv,Qie),e(Qie,F9o),e(xv,T9o),e(xv,nj),e(nj,M9o),e(xv,E9o),e(G,C9o),e(G,kv),e(kv,Wie),e(Wie,w9o),e(kv,A9o),e(kv,sj),e(sj,y9o),e(kv,L9o),e(G,x9o),e(G,Sv),e(Sv,Hie),e(Hie,k9o),e(Sv,S9o),e(Sv,lj),e(lj,R9o),e(Sv,B9o),e(G,P9o),e(G,Rv),e(Rv,Uie),e(Uie,$9o),e(Rv,I9o),e(Rv,ij),e(ij,q9o),e(Rv,N9o),e(G,j9o),e(G,Bv),e(Bv,Jie),e(Jie,D9o),e(Bv,G9o),e(Bv,dj),e(dj,O9o),e(Bv,V9o),e(Ve,X9o),e(Ve,Pv),e(Pv,z9o),e(Pv,Yie),e(Yie,Q9o),e(Pv,W9o),e(Pv,Kie),e(Kie,H9o),e(Ve,U9o),e(Ve,Zie),e(Zie,J9o),e(Ve,Y9o),g(tA,Ve,null),b(c,cBe,_),b(c,Fd,_),e(Fd,$v),e($v,ede),g(aA,ede,null),e(Fd,K9o),e(Fd,ode),e(ode,Z9o),b(c,mBe,_),b(c,tr,_),g(nA,tr,null),e(tr,exo),e(tr,Td),e(Td,oxo),e(Td,cj),e(cj,rxo),e(Td,txo),e(Td,mj),e(mj,axo),e(Td,nxo),e(tr,sxo),e(tr,sA),e(sA,lxo),e(sA,rde),e(rde,ixo),e(sA,dxo),e(tr,cxo),e(tr,Yr),g(lA,Yr,null),e(Yr,mxo),e(Yr,tde),e(tde,fxo),e(Yr,gxo),e(Yr,Md),e(Md,hxo),e(Md,ade),e(ade,uxo),e(Md,pxo),e(Md,fj),e(fj,_xo),e(Md,bxo),e(Yr,vxo),e(Yr,nde),e(nde,Fxo),e(Yr,Txo),g(iA,Yr,null),e(tr,Mxo),e(tr,Xe),g(dA,Xe,null),e(Xe,Exo),e(Xe,sde),e(sde,Cxo),e(Xe,wxo),e(Xe,Ya),e(Ya,Axo),e(Ya,lde),e(lde,yxo),e(Ya,Lxo),e(Ya,ide),e(ide,xxo),e(Ya,kxo),e(Ya,dde),e(dde,Sxo),e(Ya,Rxo),e(Xe,Bxo),e(Xe,da),e(da,Iv),e(Iv,cde),e(cde,Pxo),e(Iv,$xo),e(Iv,gj),e(gj,Ixo),e(Iv,qxo),e(da,Nxo),e(da,qv),e(qv,mde),e(mde,jxo),e(qv,Dxo),e(qv,hj),e(hj,Gxo),e(qv,Oxo),e(da,Vxo),e(da,Nv),e(Nv,fde),e(fde,Xxo),e(Nv,zxo),e(Nv,uj),e(uj,Qxo),e(Nv,Wxo),e(da,Hxo),e(da,jv),e(jv,gde),e(gde,Uxo),e(jv,Jxo),e(jv,pj),e(pj,Yxo),e(jv,Kxo),e(da,Zxo),e(da,Dv),e(Dv,hde),e(hde,eko),e(Dv,oko),e(Dv,_j),e(_j,rko),e(Dv,tko),e(Xe,ako),e(Xe,Gv),e(Gv,nko),e(Gv,ude),e(ude,sko),e(Gv,lko),e(Gv,pde),e(pde,iko),e(Xe,dko),e(Xe,_de),e(_de,cko),e(Xe,mko),g(cA,Xe,null),b(c,fBe,_),b(c,Ed,_),e(Ed,Ov),e(Ov,bde),g(mA,bde,null),e(Ed,fko),e(Ed,vde),e(vde,gko),b(c,gBe,_),b(c,ar,_),g(fA,ar,null),e(ar,hko),e(ar,Cd),e(Cd,uko),e(Cd,bj),e(bj,pko),e(Cd,_ko),e(Cd,vj),e(vj,bko),e(Cd,vko),e(ar,Fko),e(ar,gA),e(gA,Tko),e(gA,Fde),e(Fde,Mko),e(gA,Eko),e(ar,Cko),e(ar,Kr),g(hA,Kr,null),e(Kr,wko),e(Kr,Tde),e(Tde,Ako),e(Kr,yko),e(Kr,wd),e(wd,Lko),e(wd,Mde),e(Mde,xko),e(wd,kko),e(wd,Fj),e(Fj,Sko),e(wd,Rko),e(Kr,Bko),e(Kr,Ede),e(Ede,Pko),e(Kr,$ko),g(uA,Kr,null),e(ar,Iko),e(ar,ze),g(pA,ze,null),e(ze,qko),e(ze,Cde),e(Cde,Nko),e(ze,jko),e(ze,Ka),e(Ka,Dko),e(Ka,wde),e(wde,Gko),e(Ka,Oko),e(Ka,Ade),e(Ade,Vko),e(Ka,Xko),e(Ka,yde),e(yde,zko),e(Ka,Qko),e(ze,Wko),e(ze,j),e(j,Vv),e(Vv,Lde),e(Lde,Hko),e(Vv,Uko),e(Vv,Tj),e(Tj,Jko),e(Vv,Yko),e(j,Kko),e(j,Xv),e(Xv,xde),e(xde,Zko),e(Xv,eSo),e(Xv,Mj),e(Mj,oSo),e(Xv,rSo),e(j,tSo),e(j,zv),e(zv,kde),e(kde,aSo),e(zv,nSo),e(zv,Ej),e(Ej,sSo),e(zv,lSo),e(j,iSo),e(j,Qv),e(Qv,Sde),e(Sde,dSo),e(Qv,cSo),e(Qv,Cj),e(Cj,mSo),e(Qv,fSo),e(j,gSo),e(j,Wv),e(Wv,Rde),e(Rde,hSo),e(Wv,uSo),e(Wv,wj),e(wj,pSo),e(Wv,_So),e(j,bSo),e(j,Hv),e(Hv,Bde),e(Bde,vSo),e(Hv,FSo),e(Hv,Aj),e(Aj,TSo),e(Hv,MSo),e(j,ESo),e(j,Uv),e(Uv,Pde),e(Pde,CSo),e(Uv,wSo),e(Uv,yj),e(yj,ASo),e(Uv,ySo),e(j,LSo),e(j,Jv),e(Jv,$de),e($de,xSo),e(Jv,kSo),e(Jv,Lj),e(Lj,SSo),e(Jv,RSo),e(j,BSo),e(j,Yv),e(Yv,Ide),e(Ide,PSo),e(Yv,$So),e(Yv,xj),e(xj,ISo),e(Yv,qSo),e(j,NSo),e(j,Kv),e(Kv,qde),e(qde,jSo),e(Kv,DSo),e(Kv,kj),e(kj,GSo),e(Kv,OSo),e(j,VSo),e(j,Zv),e(Zv,Nde),e(Nde,XSo),e(Zv,zSo),e(Zv,Sj),e(Sj,QSo),e(Zv,WSo),e(j,HSo),e(j,eF),e(eF,jde),e(jde,USo),e(eF,JSo),e(eF,Rj),e(Rj,YSo),e(eF,KSo),e(j,ZSo),e(j,oF),e(oF,Dde),e(Dde,eRo),e(oF,oRo),e(oF,Bj),e(Bj,rRo),e(oF,tRo),e(j,aRo),e(j,rF),e(rF,Gde),e(Gde,nRo),e(rF,sRo),e(rF,Pj),e(Pj,lRo),e(rF,iRo),e(j,dRo),e(j,tF),e(tF,Ode),e(Ode,cRo),e(tF,mRo),e(tF,$j),e($j,fRo),e(tF,gRo),e(j,hRo),e(j,aF),e(aF,Vde),e(Vde,uRo),e(aF,pRo),e(aF,Ij),e(Ij,_Ro),e(aF,bRo),e(j,vRo),e(j,nF),e(nF,Xde),e(Xde,FRo),e(nF,TRo),e(nF,qj),e(qj,MRo),e(nF,ERo),e(j,CRo),e(j,sF),e(sF,zde),e(zde,wRo),e(sF,ARo),e(sF,Nj),e(Nj,yRo),e(sF,LRo),e(j,xRo),e(j,lF),e(lF,Qde),e(Qde,kRo),e(lF,SRo),e(lF,jj),e(jj,RRo),e(lF,BRo),e(j,PRo),e(j,iF),e(iF,Wde),e(Wde,$Ro),e(iF,IRo),e(iF,Dj),e(Dj,qRo),e(iF,NRo),e(j,jRo),e(j,dF),e(dF,Hde),e(Hde,DRo),e(dF,GRo),e(dF,Gj),e(Gj,ORo),e(dF,VRo),e(j,XRo),e(j,cF),e(cF,Ude),e(Ude,zRo),e(cF,QRo),e(cF,Oj),e(Oj,WRo),e(cF,HRo),e(j,URo),e(j,mF),e(mF,Jde),e(Jde,JRo),e(mF,YRo),e(mF,Vj),e(Vj,KRo),e(mF,ZRo),e(j,eBo),e(j,fF),e(fF,Yde),e(Yde,oBo),e(fF,rBo),e(fF,Xj),e(Xj,tBo),e(fF,aBo),e(j,nBo),e(j,gF),e(gF,Kde),e(Kde,sBo),e(gF,lBo),e(gF,zj),e(zj,iBo),e(gF,dBo),e(j,cBo),e(j,hF),e(hF,Zde),e(Zde,mBo),e(hF,fBo),e(hF,Qj),e(Qj,gBo),e(hF,hBo),e(j,uBo),e(j,uF),e(uF,ece),e(ece,pBo),e(uF,_Bo),e(uF,Wj),e(Wj,bBo),e(uF,vBo),e(j,FBo),e(j,pF),e(pF,oce),e(oce,TBo),e(pF,MBo),e(pF,Hj),e(Hj,EBo),e(pF,CBo),e(j,wBo),e(j,_F),e(_F,rce),e(rce,ABo),e(_F,yBo),e(_F,Uj),e(Uj,LBo),e(_F,xBo),e(j,kBo),e(j,bF),e(bF,tce),e(tce,SBo),e(bF,RBo),e(bF,Jj),e(Jj,BBo),e(bF,PBo),e(j,$Bo),e(j,vF),e(vF,ace),e(ace,IBo),e(vF,qBo),e(vF,Yj),e(Yj,NBo),e(vF,jBo),e(j,DBo),e(j,FF),e(FF,nce),e(nce,GBo),e(FF,OBo),e(FF,Kj),e(Kj,VBo),e(FF,XBo),e(j,zBo),e(j,TF),e(TF,sce),e(sce,QBo),e(TF,WBo),e(TF,Zj),e(Zj,HBo),e(TF,UBo),e(ze,JBo),e(ze,MF),e(MF,YBo),e(MF,lce),e(lce,KBo),e(MF,ZBo),e(MF,ice),e(ice,ePo),e(ze,oPo),e(ze,dce),e(dce,rPo),e(ze,tPo),g(_A,ze,null),b(c,hBe,_),b(c,Ad,_),e(Ad,EF),e(EF,cce),g(bA,cce,null),e(Ad,aPo),e(Ad,mce),e(mce,nPo),b(c,uBe,_),b(c,nr,_),g(vA,nr,null),e(nr,sPo),e(nr,yd),e(yd,lPo),e(yd,eD),e(eD,iPo),e(yd,dPo),e(yd,oD),e(oD,cPo),e(yd,mPo),e(nr,fPo),e(nr,FA),e(FA,gPo),e(FA,fce),e(fce,hPo),e(FA,uPo),e(nr,pPo),e(nr,Zr),g(TA,Zr,null),e(Zr,_Po),e(Zr,gce),e(gce,bPo),e(Zr,vPo),e(Zr,Ld),e(Ld,FPo),e(Ld,hce),e(hce,TPo),e(Ld,MPo),e(Ld,rD),e(rD,EPo),e(Ld,CPo),e(Zr,wPo),e(Zr,uce),e(uce,APo),e(Zr,yPo),g(MA,Zr,null),e(nr,LPo),e(nr,Qe),g(EA,Qe,null),e(Qe,xPo),e(Qe,pce),e(pce,kPo),e(Qe,SPo),e(Qe,Za),e(Za,RPo),e(Za,_ce),e(_ce,BPo),e(Za,PPo),e(Za,bce),e(bce,$Po),e(Za,IPo),e(Za,vce),e(vce,qPo),e(Za,NPo),e(Qe,jPo),e(Qe,R),e(R,CF),e(CF,Fce),e(Fce,DPo),e(CF,GPo),e(CF,tD),e(tD,OPo),e(CF,VPo),e(R,XPo),e(R,wF),e(wF,Tce),e(Tce,zPo),e(wF,QPo),e(wF,aD),e(aD,WPo),e(wF,HPo),e(R,UPo),e(R,AF),e(AF,Mce),e(Mce,JPo),e(AF,YPo),e(AF,nD),e(nD,KPo),e(AF,ZPo),e(R,e$o),e(R,yF),e(yF,Ece),e(Ece,o$o),e(yF,r$o),e(yF,sD),e(sD,t$o),e(yF,a$o),e(R,n$o),e(R,LF),e(LF,Cce),e(Cce,s$o),e(LF,l$o),e(LF,lD),e(lD,i$o),e(LF,d$o),e(R,c$o),e(R,xF),e(xF,wce),e(wce,m$o),e(xF,f$o),e(xF,iD),e(iD,g$o),e(xF,h$o),e(R,u$o),e(R,kF),e(kF,Ace),e(Ace,p$o),e(kF,_$o),e(kF,dD),e(dD,b$o),e(kF,v$o),e(R,F$o),e(R,SF),e(SF,yce),e(yce,T$o),e(SF,M$o),e(SF,cD),e(cD,E$o),e(SF,C$o),e(R,w$o),e(R,RF),e(RF,Lce),e(Lce,A$o),e(RF,y$o),e(RF,mD),e(mD,L$o),e(RF,x$o),e(R,k$o),e(R,BF),e(BF,xce),e(xce,S$o),e(BF,R$o),e(BF,fD),e(fD,B$o),e(BF,P$o),e(R,$$o),e(R,PF),e(PF,kce),e(kce,I$o),e(PF,q$o),e(PF,gD),e(gD,N$o),e(PF,j$o),e(R,D$o),e(R,$F),e($F,Sce),e(Sce,G$o),e($F,O$o),e($F,hD),e(hD,V$o),e($F,X$o),e(R,z$o),e(R,IF),e(IF,Rce),e(Rce,Q$o),e(IF,W$o),e(IF,uD),e(uD,H$o),e(IF,U$o),e(R,J$o),e(R,qF),e(qF,Bce),e(Bce,Y$o),e(qF,K$o),e(qF,pD),e(pD,Z$o),e(qF,eIo),e(R,oIo),e(R,NF),e(NF,Pce),e(Pce,rIo),e(NF,tIo),e(NF,_D),e(_D,aIo),e(NF,nIo),e(R,sIo),e(R,jF),e(jF,$ce),e($ce,lIo),e(jF,iIo),e(jF,bD),e(bD,dIo),e(jF,cIo),e(R,mIo),e(R,DF),e(DF,Ice),e(Ice,fIo),e(DF,gIo),e(DF,vD),e(vD,hIo),e(DF,uIo),e(R,pIo),e(R,GF),e(GF,qce),e(qce,_Io),e(GF,bIo),e(GF,FD),e(FD,vIo),e(GF,FIo),e(R,TIo),e(R,OF),e(OF,Nce),e(Nce,MIo),e(OF,EIo),e(OF,TD),e(TD,CIo),e(OF,wIo),e(R,AIo),e(R,VF),e(VF,jce),e(jce,yIo),e(VF,LIo),e(VF,MD),e(MD,xIo),e(VF,kIo),e(R,SIo),e(R,XF),e(XF,Dce),e(Dce,RIo),e(XF,BIo),e(XF,ED),e(ED,PIo),e(XF,$Io),e(R,IIo),e(R,zF),e(zF,Gce),e(Gce,qIo),e(zF,NIo),e(zF,CD),e(CD,jIo),e(zF,DIo),e(R,GIo),e(R,QF),e(QF,Oce),e(Oce,OIo),e(QF,VIo),e(QF,wD),e(wD,XIo),e(QF,zIo),e(R,QIo),e(R,WF),e(WF,Vce),e(Vce,WIo),e(WF,HIo),e(WF,AD),e(AD,UIo),e(WF,JIo),e(R,YIo),e(R,HF),e(HF,Xce),e(Xce,KIo),e(HF,ZIo),e(HF,yD),e(yD,eqo),e(HF,oqo),e(R,rqo),e(R,UF),e(UF,zce),e(zce,tqo),e(UF,aqo),e(UF,LD),e(LD,nqo),e(UF,sqo),e(R,lqo),e(R,JF),e(JF,Qce),e(Qce,iqo),e(JF,dqo),e(JF,xD),e(xD,cqo),e(JF,mqo),e(R,fqo),e(R,YF),e(YF,Wce),e(Wce,gqo),e(YF,hqo),e(YF,kD),e(kD,uqo),e(YF,pqo),e(R,_qo),e(R,KF),e(KF,Hce),e(Hce,bqo),e(KF,vqo),e(KF,SD),e(SD,Fqo),e(KF,Tqo),e(R,Mqo),e(R,ZF),e(ZF,Uce),e(Uce,Eqo),e(ZF,Cqo),e(ZF,RD),e(RD,wqo),e(ZF,Aqo),e(R,yqo),e(R,e1),e(e1,Jce),e(Jce,Lqo),e(e1,xqo),e(e1,BD),e(BD,kqo),e(e1,Sqo),e(R,Rqo),e(R,o1),e(o1,Yce),e(Yce,Bqo),e(o1,Pqo),e(o1,PD),e(PD,$qo),e(o1,Iqo),e(R,qqo),e(R,r1),e(r1,Kce),e(Kce,Nqo),e(r1,jqo),e(r1,$D),e($D,Dqo),e(r1,Gqo),e(R,Oqo),e(R,t1),e(t1,Zce),e(Zce,Vqo),e(t1,Xqo),e(t1,ID),e(ID,zqo),e(t1,Qqo),e(R,Wqo),e(R,a1),e(a1,eme),e(eme,Hqo),e(a1,Uqo),e(a1,qD),e(qD,Jqo),e(a1,Yqo),e(R,Kqo),e(R,n1),e(n1,ome),e(ome,Zqo),e(n1,eNo),e(n1,ND),e(ND,oNo),e(n1,rNo),e(R,tNo),e(R,s1),e(s1,rme),e(rme,aNo),e(s1,nNo),e(s1,jD),e(jD,sNo),e(s1,lNo),e(R,iNo),e(R,l1),e(l1,tme),e(tme,dNo),e(l1,cNo),e(l1,DD),e(DD,mNo),e(l1,fNo),e(R,gNo),e(R,i1),e(i1,ame),e(ame,hNo),e(i1,uNo),e(i1,GD),e(GD,pNo),e(i1,_No),e(Qe,bNo),e(Qe,d1),e(d1,vNo),e(d1,nme),e(nme,FNo),e(d1,TNo),e(d1,sme),e(sme,MNo),e(Qe,ENo),e(Qe,lme),e(lme,CNo),e(Qe,wNo),g(CA,Qe,null),b(c,pBe,_),b(c,xd,_),e(xd,c1),e(c1,ime),g(wA,ime,null),e(xd,ANo),e(xd,dme),e(dme,yNo),b(c,_Be,_),b(c,sr,_),g(AA,sr,null),e(sr,LNo),e(sr,kd),e(kd,xNo),e(kd,OD),e(OD,kNo),e(kd,SNo),e(kd,VD),e(VD,RNo),e(kd,BNo),e(sr,PNo),e(sr,yA),e(yA,$No),e(yA,cme),e(cme,INo),e(yA,qNo),e(sr,NNo),e(sr,et),g(LA,et,null),e(et,jNo),e(et,mme),e(mme,DNo),e(et,GNo),e(et,Sd),e(Sd,ONo),e(Sd,fme),e(fme,VNo),e(Sd,XNo),e(Sd,XD),e(XD,zNo),e(Sd,QNo),e(et,WNo),e(et,gme),e(gme,HNo),e(et,UNo),g(xA,et,null),e(sr,JNo),e(sr,We),g(kA,We,null),e(We,YNo),e(We,hme),e(hme,KNo),e(We,ZNo),e(We,en),e(en,ejo),e(en,ume),e(ume,ojo),e(en,rjo),e(en,pme),e(pme,tjo),e(en,ajo),e(en,_me),e(_me,njo),e(en,sjo),e(We,ljo),e(We,bme),e(bme,m1),e(m1,vme),e(vme,ijo),e(m1,djo),e(m1,zD),e(zD,cjo),e(m1,mjo),e(We,fjo),e(We,f1),e(f1,gjo),e(f1,Fme),e(Fme,hjo),e(f1,ujo),e(f1,Tme),e(Tme,pjo),e(We,_jo),e(We,Mme),e(Mme,bjo),e(We,vjo),g(SA,We,null),b(c,bBe,_),b(c,Rd,_),e(Rd,g1),e(g1,Eme),g(RA,Eme,null),e(Rd,Fjo),e(Rd,Cme),e(Cme,Tjo),b(c,vBe,_),b(c,lr,_),g(BA,lr,null),e(lr,Mjo),e(lr,Bd),e(Bd,Ejo),e(Bd,QD),e(QD,Cjo),e(Bd,wjo),e(Bd,WD),e(WD,Ajo),e(Bd,yjo),e(lr,Ljo),e(lr,PA),e(PA,xjo),e(PA,wme),e(wme,kjo),e(PA,Sjo),e(lr,Rjo),e(lr,ot),g($A,ot,null),e(ot,Bjo),e(ot,Ame),e(Ame,Pjo),e(ot,$jo),e(ot,Pd),e(Pd,Ijo),e(Pd,yme),e(yme,qjo),e(Pd,Njo),e(Pd,HD),e(HD,jjo),e(Pd,Djo),e(ot,Gjo),e(ot,Lme),e(Lme,Ojo),e(ot,Vjo),g(IA,ot,null),e(lr,Xjo),e(lr,He),g(qA,He,null),e(He,zjo),e(He,xme),e(xme,Qjo),e(He,Wjo),e(He,on),e(on,Hjo),e(on,kme),e(kme,Ujo),e(on,Jjo),e(on,Sme),e(Sme,Yjo),e(on,Kjo),e(on,Rme),e(Rme,Zjo),e(on,eDo),e(He,oDo),e(He,de),e(de,h1),e(h1,Bme),e(Bme,rDo),e(h1,tDo),e(h1,UD),e(UD,aDo),e(h1,nDo),e(de,sDo),e(de,u1),e(u1,Pme),e(Pme,lDo),e(u1,iDo),e(u1,JD),e(JD,dDo),e(u1,cDo),e(de,mDo),e(de,p1),e(p1,$me),e($me,fDo),e(p1,gDo),e(p1,YD),e(YD,hDo),e(p1,uDo),e(de,pDo),e(de,Vs),e(Vs,Ime),e(Ime,_Do),e(Vs,bDo),e(Vs,KD),e(KD,vDo),e(Vs,FDo),e(Vs,ZD),e(ZD,TDo),e(Vs,MDo),e(de,EDo),e(de,_1),e(_1,qme),e(qme,CDo),e(_1,wDo),e(_1,eG),e(eG,ADo),e(_1,yDo),e(de,LDo),e(de,fa),e(fa,Nme),e(Nme,xDo),e(fa,kDo),e(fa,oG),e(oG,SDo),e(fa,RDo),e(fa,rG),e(rG,BDo),e(fa,PDo),e(fa,tG),e(tG,$Do),e(fa,IDo),e(de,qDo),e(de,b1),e(b1,jme),e(jme,NDo),e(b1,jDo),e(b1,aG),e(aG,DDo),e(b1,GDo),e(de,ODo),e(de,v1),e(v1,Dme),e(Dme,VDo),e(v1,XDo),e(v1,nG),e(nG,zDo),e(v1,QDo),e(de,WDo),e(de,F1),e(F1,Gme),e(Gme,HDo),e(F1,UDo),e(F1,sG),e(sG,JDo),e(F1,YDo),e(de,KDo),e(de,T1),e(T1,Ome),e(Ome,ZDo),e(T1,eGo),e(T1,lG),e(lG,oGo),e(T1,rGo),e(de,tGo),e(de,M1),e(M1,Vme),e(Vme,aGo),e(M1,nGo),e(M1,iG),e(iG,sGo),e(M1,lGo),e(de,iGo),e(de,E1),e(E1,Xme),e(Xme,dGo),e(E1,cGo),e(E1,dG),e(dG,mGo),e(E1,fGo),e(de,gGo),e(de,C1),e(C1,zme),e(zme,hGo),e(C1,uGo),e(C1,cG),e(cG,pGo),e(C1,_Go),e(He,bGo),e(He,w1),e(w1,vGo),e(w1,Qme),e(Qme,FGo),e(w1,TGo),e(w1,Wme),e(Wme,MGo),e(He,EGo),e(He,Hme),e(Hme,CGo),e(He,wGo),g(NA,He,null),b(c,FBe,_),b(c,$d,_),e($d,A1),e(A1,Ume),g(jA,Ume,null),e($d,AGo),e($d,Jme),e(Jme,yGo),b(c,TBe,_),b(c,ir,_),g(DA,ir,null),e(ir,LGo),e(ir,Id),e(Id,xGo),e(Id,mG),e(mG,kGo),e(Id,SGo),e(Id,fG),e(fG,RGo),e(Id,BGo),e(ir,PGo),e(ir,GA),e(GA,$Go),e(GA,Yme),e(Yme,IGo),e(GA,qGo),e(ir,NGo),e(ir,rt),g(OA,rt,null),e(rt,jGo),e(rt,Kme),e(Kme,DGo),e(rt,GGo),e(rt,qd),e(qd,OGo),e(qd,Zme),e(Zme,VGo),e(qd,XGo),e(qd,gG),e(gG,zGo),e(qd,QGo),e(rt,WGo),e(rt,efe),e(efe,HGo),e(rt,UGo),g(VA,rt,null),e(ir,JGo),e(ir,Ue),g(XA,Ue,null),e(Ue,YGo),e(Ue,ofe),e(ofe,KGo),e(Ue,ZGo),e(Ue,rn),e(rn,eOo),e(rn,rfe),e(rfe,oOo),e(rn,rOo),e(rn,tfe),e(tfe,tOo),e(rn,aOo),e(rn,afe),e(afe,nOo),e(rn,sOo),e(Ue,lOo),e(Ue,nfe),e(nfe,y1),e(y1,sfe),e(sfe,iOo),e(y1,dOo),e(y1,hG),e(hG,cOo),e(y1,mOo),e(Ue,fOo),e(Ue,L1),e(L1,gOo),e(L1,lfe),e(lfe,hOo),e(L1,uOo),e(L1,ife),e(ife,pOo),e(Ue,_Oo),e(Ue,dfe),e(dfe,bOo),e(Ue,vOo),g(zA,Ue,null),b(c,MBe,_),b(c,Nd,_),e(Nd,x1),e(x1,cfe),g(QA,cfe,null),e(Nd,FOo),e(Nd,mfe),e(mfe,TOo),b(c,EBe,_),b(c,dr,_),g(WA,dr,null),e(dr,MOo),e(dr,jd),e(jd,EOo),e(jd,uG),e(uG,COo),e(jd,wOo),e(jd,pG),e(pG,AOo),e(jd,yOo),e(dr,LOo),e(dr,HA),e(HA,xOo),e(HA,ffe),e(ffe,kOo),e(HA,SOo),e(dr,ROo),e(dr,tt),g(UA,tt,null),e(tt,BOo),e(tt,gfe),e(gfe,POo),e(tt,$Oo),e(tt,Dd),e(Dd,IOo),e(Dd,hfe),e(hfe,qOo),e(Dd,NOo),e(Dd,_G),e(_G,jOo),e(Dd,DOo),e(tt,GOo),e(tt,ufe),e(ufe,OOo),e(tt,VOo),g(JA,tt,null),e(dr,XOo),e(dr,Je),g(YA,Je,null),e(Je,zOo),e(Je,pfe),e(pfe,QOo),e(Je,WOo),e(Je,tn),e(tn,HOo),e(tn,_fe),e(_fe,UOo),e(tn,JOo),e(tn,bfe),e(bfe,YOo),e(tn,KOo),e(tn,vfe),e(vfe,ZOo),e(tn,eVo),e(Je,oVo),e(Je,Se),e(Se,k1),e(k1,Ffe),e(Ffe,rVo),e(k1,tVo),e(k1,bG),e(bG,aVo),e(k1,nVo),e(Se,sVo),e(Se,S1),e(S1,Tfe),e(Tfe,lVo),e(S1,iVo),e(S1,vG),e(vG,dVo),e(S1,cVo),e(Se,mVo),e(Se,R1),e(R1,Mfe),e(Mfe,fVo),e(R1,gVo),e(R1,FG),e(FG,hVo),e(R1,uVo),e(Se,pVo),e(Se,B1),e(B1,Efe),e(Efe,_Vo),e(B1,bVo),e(B1,TG),e(TG,vVo),e(B1,FVo),e(Se,TVo),e(Se,P1),e(P1,Cfe),e(Cfe,MVo),e(P1,EVo),e(P1,MG),e(MG,CVo),e(P1,wVo),e(Se,AVo),e(Se,$1),e($1,wfe),e(wfe,yVo),e($1,LVo),e($1,EG),e(EG,xVo),e($1,kVo),e(Se,SVo),e(Se,I1),e(I1,Afe),e(Afe,RVo),e(I1,BVo),e(I1,CG),e(CG,PVo),e(I1,$Vo),e(Se,IVo),e(Se,q1),e(q1,yfe),e(yfe,qVo),e(q1,NVo),e(q1,wG),e(wG,jVo),e(q1,DVo),e(Je,GVo),e(Je,N1),e(N1,OVo),e(N1,Lfe),e(Lfe,VVo),e(N1,XVo),e(N1,xfe),e(xfe,zVo),e(Je,QVo),e(Je,kfe),e(kfe,WVo),e(Je,HVo),g(KA,Je,null),b(c,CBe,_),b(c,Gd,_),e(Gd,j1),e(j1,Sfe),g(ZA,Sfe,null),e(Gd,UVo),e(Gd,Rfe),e(Rfe,JVo),b(c,wBe,_),b(c,cr,_),g(e0,cr,null),e(cr,YVo),e(cr,Od),e(Od,KVo),e(Od,AG),e(AG,ZVo),e(Od,eXo),e(Od,yG),e(yG,oXo),e(Od,rXo),e(cr,tXo),e(cr,o0),e(o0,aXo),e(o0,Bfe),e(Bfe,nXo),e(o0,sXo),e(cr,lXo),e(cr,at),g(r0,at,null),e(at,iXo),e(at,Pfe),e(Pfe,dXo),e(at,cXo),e(at,Vd),e(Vd,mXo),e(Vd,$fe),e($fe,fXo),e(Vd,gXo),e(Vd,LG),e(LG,hXo),e(Vd,uXo),e(at,pXo),e(at,Ife),e(Ife,_Xo),e(at,bXo),g(t0,at,null),e(cr,vXo),e(cr,Ye),g(a0,Ye,null),e(Ye,FXo),e(Ye,qfe),e(qfe,TXo),e(Ye,MXo),e(Ye,an),e(an,EXo),e(an,Nfe),e(Nfe,CXo),e(an,wXo),e(an,jfe),e(jfe,AXo),e(an,yXo),e(an,Dfe),e(Dfe,LXo),e(an,xXo),e(Ye,kXo),e(Ye,nn),e(nn,D1),e(D1,Gfe),e(Gfe,SXo),e(D1,RXo),e(D1,xG),e(xG,BXo),e(D1,PXo),e(nn,$Xo),e(nn,G1),e(G1,Ofe),e(Ofe,IXo),e(G1,qXo),e(G1,kG),e(kG,NXo),e(G1,jXo),e(nn,DXo),e(nn,O1),e(O1,Vfe),e(Vfe,GXo),e(O1,OXo),e(O1,SG),e(SG,VXo),e(O1,XXo),e(nn,zXo),e(nn,V1),e(V1,Xfe),e(Xfe,QXo),e(V1,WXo),e(V1,RG),e(RG,HXo),e(V1,UXo),e(Ye,JXo),e(Ye,X1),e(X1,YXo),e(X1,zfe),e(zfe,KXo),e(X1,ZXo),e(X1,Qfe),e(Qfe,ezo),e(Ye,ozo),e(Ye,Wfe),e(Wfe,rzo),e(Ye,tzo),g(n0,Ye,null),b(c,ABe,_),b(c,Xd,_),e(Xd,z1),e(z1,Hfe),g(s0,Hfe,null),e(Xd,azo),e(Xd,Ufe),e(Ufe,nzo),b(c,yBe,_),b(c,mr,_),g(l0,mr,null),e(mr,szo),e(mr,zd),e(zd,lzo),e(zd,BG),e(BG,izo),e(zd,dzo),e(zd,PG),e(PG,czo),e(zd,mzo),e(mr,fzo),e(mr,i0),e(i0,gzo),e(i0,Jfe),e(Jfe,hzo),e(i0,uzo),e(mr,pzo),e(mr,nt),g(d0,nt,null),e(nt,_zo),e(nt,Yfe),e(Yfe,bzo),e(nt,vzo),e(nt,Qd),e(Qd,Fzo),e(Qd,Kfe),e(Kfe,Tzo),e(Qd,Mzo),e(Qd,$G),e($G,Ezo),e(Qd,Czo),e(nt,wzo),e(nt,Zfe),e(Zfe,Azo),e(nt,yzo),g(c0,nt,null),e(mr,Lzo),e(mr,Ke),g(m0,Ke,null),e(Ke,xzo),e(Ke,ege),e(ege,kzo),e(Ke,Szo),e(Ke,sn),e(sn,Rzo),e(sn,oge),e(oge,Bzo),e(sn,Pzo),e(sn,rge),e(rge,$zo),e(sn,Izo),e(sn,tge),e(tge,qzo),e(sn,Nzo),e(Ke,jzo),e(Ke,Re),e(Re,Q1),e(Q1,age),e(age,Dzo),e(Q1,Gzo),e(Q1,IG),e(IG,Ozo),e(Q1,Vzo),e(Re,Xzo),e(Re,W1),e(W1,nge),e(nge,zzo),e(W1,Qzo),e(W1,qG),e(qG,Wzo),e(W1,Hzo),e(Re,Uzo),e(Re,H1),e(H1,sge),e(sge,Jzo),e(H1,Yzo),e(H1,NG),e(NG,Kzo),e(H1,Zzo),e(Re,eQo),e(Re,U1),e(U1,lge),e(lge,oQo),e(U1,rQo),e(U1,jG),e(jG,tQo),e(U1,aQo),e(Re,nQo),e(Re,J1),e(J1,ige),e(ige,sQo),e(J1,lQo),e(J1,DG),e(DG,iQo),e(J1,dQo),e(Re,cQo),e(Re,Y1),e(Y1,dge),e(dge,mQo),e(Y1,fQo),e(Y1,GG),e(GG,gQo),e(Y1,hQo),e(Re,uQo),e(Re,K1),e(K1,cge),e(cge,pQo),e(K1,_Qo),e(K1,OG),e(OG,bQo),e(K1,vQo),e(Re,FQo),e(Re,Z1),e(Z1,mge),e(mge,TQo),e(Z1,MQo),e(Z1,VG),e(VG,EQo),e(Z1,CQo),e(Ke,wQo),e(Ke,eT),e(eT,AQo),e(eT,fge),e(fge,yQo),e(eT,LQo),e(eT,gge),e(gge,xQo),e(Ke,kQo),e(Ke,hge),e(hge,SQo),e(Ke,RQo),g(f0,Ke,null),b(c,LBe,_),b(c,Wd,_),e(Wd,oT),e(oT,uge),g(g0,uge,null),e(Wd,BQo),e(Wd,pge),e(pge,PQo),b(c,xBe,_),b(c,fr,_),g(h0,fr,null),e(fr,$Qo),e(fr,Hd),e(Hd,IQo),e(Hd,XG),e(XG,qQo),e(Hd,NQo),e(Hd,zG),e(zG,jQo),e(Hd,DQo),e(fr,GQo),e(fr,u0),e(u0,OQo),e(u0,_ge),e(_ge,VQo),e(u0,XQo),e(fr,zQo),e(fr,st),g(p0,st,null),e(st,QQo),e(st,bge),e(bge,WQo),e(st,HQo),e(st,Ud),e(Ud,UQo),e(Ud,vge),e(vge,JQo),e(Ud,YQo),e(Ud,QG),e(QG,KQo),e(Ud,ZQo),e(st,eWo),e(st,Fge),e(Fge,oWo),e(st,rWo),g(_0,st,null),e(fr,tWo),e(fr,Ze),g(b0,Ze,null),e(Ze,aWo),e(Ze,Tge),e(Tge,nWo),e(Ze,sWo),e(Ze,ln),e(ln,lWo),e(ln,Mge),e(Mge,iWo),e(ln,dWo),e(ln,Ege),e(Ege,cWo),e(ln,mWo),e(ln,Cge),e(Cge,fWo),e(ln,gWo),e(Ze,hWo),e(Ze,v0),e(v0,rT),e(rT,wge),e(wge,uWo),e(rT,pWo),e(rT,WG),e(WG,_Wo),e(rT,bWo),e(v0,vWo),e(v0,tT),e(tT,Age),e(Age,FWo),e(tT,TWo),e(tT,HG),e(HG,MWo),e(tT,EWo),e(Ze,CWo),e(Ze,aT),e(aT,wWo),e(aT,yge),e(yge,AWo),e(aT,yWo),e(aT,Lge),e(Lge,LWo),e(Ze,xWo),e(Ze,xge),e(xge,kWo),e(Ze,SWo),g(F0,Ze,null),b(c,kBe,_),b(c,Jd,_),e(Jd,nT),e(nT,kge),g(T0,kge,null),e(Jd,RWo),e(Jd,Sge),e(Sge,BWo),b(c,SBe,_),b(c,gr,_),g(M0,gr,null),e(gr,PWo),e(gr,Yd),e(Yd,$Wo),e(Yd,UG),e(UG,IWo),e(Yd,qWo),e(Yd,JG),e(JG,NWo),e(Yd,jWo),e(gr,DWo),e(gr,E0),e(E0,GWo),e(E0,Rge),e(Rge,OWo),e(E0,VWo),e(gr,XWo),e(gr,lt),g(C0,lt,null),e(lt,zWo),e(lt,Bge),e(Bge,QWo),e(lt,WWo),e(lt,Kd),e(Kd,HWo),e(Kd,Pge),e(Pge,UWo),e(Kd,JWo),e(Kd,YG),e(YG,YWo),e(Kd,KWo),e(lt,ZWo),e(lt,$ge),e($ge,eHo),e(lt,oHo),g(w0,lt,null),e(gr,rHo),e(gr,eo),g(A0,eo,null),e(eo,tHo),e(eo,Ige),e(Ige,aHo),e(eo,nHo),e(eo,dn),e(dn,sHo),e(dn,qge),e(qge,lHo),e(dn,iHo),e(dn,Nge),e(Nge,dHo),e(dn,cHo),e(dn,jge),e(jge,mHo),e(dn,fHo),e(eo,gHo),e(eo,cn),e(cn,sT),e(sT,Dge),e(Dge,hHo),e(sT,uHo),e(sT,KG),e(KG,pHo),e(sT,_Ho),e(cn,bHo),e(cn,lT),e(lT,Gge),e(Gge,vHo),e(lT,FHo),e(lT,ZG),e(ZG,THo),e(lT,MHo),e(cn,EHo),e(cn,iT),e(iT,Oge),e(Oge,CHo),e(iT,wHo),e(iT,eO),e(eO,AHo),e(iT,yHo),e(cn,LHo),e(cn,dT),e(dT,Vge),e(Vge,xHo),e(dT,kHo),e(dT,oO),e(oO,SHo),e(dT,RHo),e(eo,BHo),e(eo,cT),e(cT,PHo),e(cT,Xge),e(Xge,$Ho),e(cT,IHo),e(cT,zge),e(zge,qHo),e(eo,NHo),e(eo,Qge),e(Qge,jHo),e(eo,DHo),g(y0,eo,null),b(c,RBe,_),b(c,Zd,_),e(Zd,mT),e(mT,Wge),g(L0,Wge,null),e(Zd,GHo),e(Zd,Hge),e(Hge,OHo),b(c,BBe,_),b(c,hr,_),g(x0,hr,null),e(hr,VHo),e(hr,ec),e(ec,XHo),e(ec,rO),e(rO,zHo),e(ec,QHo),e(ec,tO),e(tO,WHo),e(ec,HHo),e(hr,UHo),e(hr,k0),e(k0,JHo),e(k0,Uge),e(Uge,YHo),e(k0,KHo),e(hr,ZHo),e(hr,it),g(S0,it,null),e(it,eUo),e(it,Jge),e(Jge,oUo),e(it,rUo),e(it,oc),e(oc,tUo),e(oc,Yge),e(Yge,aUo),e(oc,nUo),e(oc,aO),e(aO,sUo),e(oc,lUo),e(it,iUo),e(it,Kge),e(Kge,dUo),e(it,cUo),g(R0,it,null),e(hr,mUo),e(hr,oo),g(B0,oo,null),e(oo,fUo),e(oo,Zge),e(Zge,gUo),e(oo,hUo),e(oo,mn),e(mn,uUo),e(mn,ehe),e(ehe,pUo),e(mn,_Uo),e(mn,ohe),e(ohe,bUo),e(mn,vUo),e(mn,rhe),e(rhe,FUo),e(mn,TUo),e(oo,MUo),e(oo,rc),e(rc,fT),e(fT,the),e(the,EUo),e(fT,CUo),e(fT,nO),e(nO,wUo),e(fT,AUo),e(rc,yUo),e(rc,gT),e(gT,ahe),e(ahe,LUo),e(gT,xUo),e(gT,sO),e(sO,kUo),e(gT,SUo),e(rc,RUo),e(rc,hT),e(hT,nhe),e(nhe,BUo),e(hT,PUo),e(hT,lO),e(lO,$Uo),e(hT,IUo),e(oo,qUo),e(oo,uT),e(uT,NUo),e(uT,she),e(she,jUo),e(uT,DUo),e(uT,lhe),e(lhe,GUo),e(oo,OUo),e(oo,ihe),e(ihe,VUo),e(oo,XUo),g(P0,oo,null),b(c,PBe,_),b(c,tc,_),e(tc,pT),e(pT,dhe),g($0,dhe,null),e(tc,zUo),e(tc,che),e(che,QUo),b(c,$Be,_),b(c,ur,_),g(I0,ur,null),e(ur,WUo),e(ur,ac),e(ac,HUo),e(ac,iO),e(iO,UUo),e(ac,JUo),e(ac,dO),e(dO,YUo),e(ac,KUo),e(ur,ZUo),e(ur,q0),e(q0,eJo),e(q0,mhe),e(mhe,oJo),e(q0,rJo),e(ur,tJo),e(ur,dt),g(N0,dt,null),e(dt,aJo),e(dt,fhe),e(fhe,nJo),e(dt,sJo),e(dt,nc),e(nc,lJo),e(nc,ghe),e(ghe,iJo),e(nc,dJo),e(nc,cO),e(cO,cJo),e(nc,mJo),e(dt,fJo),e(dt,hhe),e(hhe,gJo),e(dt,hJo),g(j0,dt,null),e(ur,uJo),e(ur,ro),g(D0,ro,null),e(ro,pJo),e(ro,uhe),e(uhe,_Jo),e(ro,bJo),e(ro,fn),e(fn,vJo),e(fn,phe),e(phe,FJo),e(fn,TJo),e(fn,_he),e(_he,MJo),e(fn,EJo),e(fn,bhe),e(bhe,CJo),e(fn,wJo),e(ro,AJo),e(ro,vhe),e(vhe,_T),e(_T,Fhe),e(Fhe,yJo),e(_T,LJo),e(_T,mO),e(mO,xJo),e(_T,kJo),e(ro,SJo),e(ro,bT),e(bT,RJo),e(bT,The),e(The,BJo),e(bT,PJo),e(bT,Mhe),e(Mhe,$Jo),e(ro,IJo),e(ro,Ehe),e(Ehe,qJo),e(ro,NJo),g(G0,ro,null),b(c,IBe,_),b(c,sc,_),e(sc,vT),e(vT,Che),g(O0,Che,null),e(sc,jJo),e(sc,whe),e(whe,DJo),b(c,qBe,_),b(c,pr,_),g(V0,pr,null),e(pr,GJo),e(pr,lc),e(lc,OJo),e(lc,fO),e(fO,VJo),e(lc,XJo),e(lc,gO),e(gO,zJo),e(lc,QJo),e(pr,WJo),e(pr,X0),e(X0,HJo),e(X0,Ahe),e(Ahe,UJo),e(X0,JJo),e(pr,YJo),e(pr,ct),g(z0,ct,null),e(ct,KJo),e(ct,yhe),e(yhe,ZJo),e(ct,eYo),e(ct,ic),e(ic,oYo),e(ic,Lhe),e(Lhe,rYo),e(ic,tYo),e(ic,hO),e(hO,aYo),e(ic,nYo),e(ct,sYo),e(ct,xhe),e(xhe,lYo),e(ct,iYo),g(Q0,ct,null),e(pr,dYo),e(pr,to),g(W0,to,null),e(to,cYo),e(to,khe),e(khe,mYo),e(to,fYo),e(to,gn),e(gn,gYo),e(gn,She),e(She,hYo),e(gn,uYo),e(gn,Rhe),e(Rhe,pYo),e(gn,_Yo),e(gn,Bhe),e(Bhe,bYo),e(gn,vYo),e(to,FYo),e(to,Phe),e(Phe,FT),e(FT,$he),e($he,TYo),e(FT,MYo),e(FT,uO),e(uO,EYo),e(FT,CYo),e(to,wYo),e(to,TT),e(TT,AYo),e(TT,Ihe),e(Ihe,yYo),e(TT,LYo),e(TT,qhe),e(qhe,xYo),e(to,kYo),e(to,Nhe),e(Nhe,SYo),e(to,RYo),g(H0,to,null),b(c,NBe,_),b(c,dc,_),e(dc,MT),e(MT,jhe),g(U0,jhe,null),e(dc,BYo),e(dc,Dhe),e(Dhe,PYo),b(c,jBe,_),b(c,_r,_),g(J0,_r,null),e(_r,$Yo),e(_r,cc),e(cc,IYo),e(cc,pO),e(pO,qYo),e(cc,NYo),e(cc,_O),e(_O,jYo),e(cc,DYo),e(_r,GYo),e(_r,Y0),e(Y0,OYo),e(Y0,Ghe),e(Ghe,VYo),e(Y0,XYo),e(_r,zYo),e(_r,mt),g(K0,mt,null),e(mt,QYo),e(mt,Ohe),e(Ohe,WYo),e(mt,HYo),e(mt,mc),e(mc,UYo),e(mc,Vhe),e(Vhe,JYo),e(mc,YYo),e(mc,bO),e(bO,KYo),e(mc,ZYo),e(mt,eKo),e(mt,Xhe),e(Xhe,oKo),e(mt,rKo),g(Z0,mt,null),e(_r,tKo),e(_r,ao),g(ey,ao,null),e(ao,aKo),e(ao,zhe),e(zhe,nKo),e(ao,sKo),e(ao,hn),e(hn,lKo),e(hn,Qhe),e(Qhe,iKo),e(hn,dKo),e(hn,Whe),e(Whe,cKo),e(hn,mKo),e(hn,Hhe),e(Hhe,fKo),e(hn,gKo),e(ao,hKo),e(ao,un),e(un,ET),e(ET,Uhe),e(Uhe,uKo),e(ET,pKo),e(ET,vO),e(vO,_Ko),e(ET,bKo),e(un,vKo),e(un,CT),e(CT,Jhe),e(Jhe,FKo),e(CT,TKo),e(CT,FO),e(FO,MKo),e(CT,EKo),e(un,CKo),e(un,wT),e(wT,Yhe),e(Yhe,wKo),e(wT,AKo),e(wT,TO),e(TO,yKo),e(wT,LKo),e(un,xKo),e(un,AT),e(AT,Khe),e(Khe,kKo),e(AT,SKo),e(AT,MO),e(MO,RKo),e(AT,BKo),e(ao,PKo),e(ao,yT),e(yT,$Ko),e(yT,Zhe),e(Zhe,IKo),e(yT,qKo),e(yT,eue),e(eue,NKo),e(ao,jKo),e(ao,oue),e(oue,DKo),e(ao,GKo),g(oy,ao,null),b(c,DBe,_),b(c,fc,_),e(fc,LT),e(LT,rue),g(ry,rue,null),e(fc,OKo),e(fc,tue),e(tue,VKo),b(c,GBe,_),b(c,br,_),g(ty,br,null),e(br,XKo),e(br,gc),e(gc,zKo),e(gc,EO),e(EO,QKo),e(gc,WKo),e(gc,CO),e(CO,HKo),e(gc,UKo),e(br,JKo),e(br,ay),e(ay,YKo),e(ay,aue),e(aue,KKo),e(ay,ZKo),e(br,eZo),e(br,ft),g(ny,ft,null),e(ft,oZo),e(ft,nue),e(nue,rZo),e(ft,tZo),e(ft,hc),e(hc,aZo),e(hc,sue),e(sue,nZo),e(hc,sZo),e(hc,wO),e(wO,lZo),e(hc,iZo),e(ft,dZo),e(ft,lue),e(lue,cZo),e(ft,mZo),g(sy,ft,null),e(br,fZo),e(br,no),g(ly,no,null),e(no,gZo),e(no,iue),e(iue,hZo),e(no,uZo),e(no,pn),e(pn,pZo),e(pn,due),e(due,_Zo),e(pn,bZo),e(pn,cue),e(cue,vZo),e(pn,FZo),e(pn,mue),e(mue,TZo),e(pn,MZo),e(no,EZo),e(no,fue),e(fue,xT),e(xT,gue),e(gue,CZo),e(xT,wZo),e(xT,AO),e(AO,AZo),e(xT,yZo),e(no,LZo),e(no,kT),e(kT,xZo),e(kT,hue),e(hue,kZo),e(kT,SZo),e(kT,uue),e(uue,RZo),e(no,BZo),e(no,pue),e(pue,PZo),e(no,$Zo),g(iy,no,null),b(c,OBe,_),b(c,uc,_),e(uc,ST),e(ST,_ue),g(dy,_ue,null),e(uc,IZo),e(uc,bue),e(bue,qZo),b(c,VBe,_),b(c,vr,_),g(cy,vr,null),e(vr,NZo),e(vr,pc),e(pc,jZo),e(pc,yO),e(yO,DZo),e(pc,GZo),e(pc,LO),e(LO,OZo),e(pc,VZo),e(vr,XZo),e(vr,my),e(my,zZo),e(my,vue),e(vue,QZo),e(my,WZo),e(vr,HZo),e(vr,gt),g(fy,gt,null),e(gt,UZo),e(gt,Fue),e(Fue,JZo),e(gt,YZo),e(gt,_c),e(_c,KZo),e(_c,Tue),e(Tue,ZZo),e(_c,eer),e(_c,xO),e(xO,oer),e(_c,rer),e(gt,ter),e(gt,Mue),e(Mue,aer),e(gt,ner),g(gy,gt,null),e(vr,ser),e(vr,ho),g(hy,ho,null),e(ho,ler),e(ho,Eue),e(Eue,ier),e(ho,der),e(ho,_n),e(_n,cer),e(_n,Cue),e(Cue,mer),e(_n,fer),e(_n,wue),e(wue,ger),e(_n,her),e(_n,Aue),e(Aue,uer),e(_n,per),e(ho,_er),e(ho,x),e(x,RT),e(RT,yue),e(yue,ber),e(RT,ver),e(RT,kO),e(kO,Fer),e(RT,Ter),e(x,Mer),e(x,BT),e(BT,Lue),e(Lue,Eer),e(BT,Cer),e(BT,SO),e(SO,wer),e(BT,Aer),e(x,yer),e(x,PT),e(PT,xue),e(xue,Ler),e(PT,xer),e(PT,RO),e(RO,ker),e(PT,Ser),e(x,Rer),e(x,$T),e($T,kue),e(kue,Ber),e($T,Per),e($T,BO),e(BO,$er),e($T,Ier),e(x,qer),e(x,IT),e(IT,Sue),e(Sue,Ner),e(IT,jer),e(IT,PO),e(PO,Der),e(IT,Ger),e(x,Oer),e(x,qT),e(qT,Rue),e(Rue,Ver),e(qT,Xer),e(qT,$O),e($O,zer),e(qT,Qer),e(x,Wer),e(x,NT),e(NT,Bue),e(Bue,Her),e(NT,Uer),e(NT,IO),e(IO,Jer),e(NT,Yer),e(x,Ker),e(x,jT),e(jT,Pue),e(Pue,Zer),e(jT,eor),e(jT,qO),e(qO,oor),e(jT,ror),e(x,tor),e(x,DT),e(DT,$ue),e($ue,aor),e(DT,nor),e(DT,NO),e(NO,sor),e(DT,lor),e(x,ior),e(x,GT),e(GT,Iue),e(Iue,dor),e(GT,cor),e(GT,jO),e(jO,mor),e(GT,gor),e(x,hor),e(x,OT),e(OT,que),e(que,uor),e(OT,por),e(OT,DO),e(DO,_or),e(OT,bor),e(x,vor),e(x,VT),e(VT,Nue),e(Nue,For),e(VT,Tor),e(VT,GO),e(GO,Mor),e(VT,Eor),e(x,Cor),e(x,XT),e(XT,jue),e(jue,wor),e(XT,Aor),e(XT,OO),e(OO,yor),e(XT,Lor),e(x,xor),e(x,zT),e(zT,Due),e(Due,kor),e(zT,Sor),e(zT,VO),e(VO,Ror),e(zT,Bor),e(x,Por),e(x,QT),e(QT,Gue),e(Gue,$or),e(QT,Ior),e(QT,XO),e(XO,qor),e(QT,Nor),e(x,jor),e(x,WT),e(WT,Oue),e(Oue,Dor),e(WT,Gor),e(WT,zO),e(zO,Oor),e(WT,Vor),e(x,Xor),e(x,Xs),e(Xs,Vue),e(Vue,zor),e(Xs,Qor),e(Xs,QO),e(QO,Wor),e(Xs,Hor),e(Xs,WO),e(WO,Uor),e(Xs,Jor),e(x,Yor),e(x,HT),e(HT,Xue),e(Xue,Kor),e(HT,Zor),e(HT,HO),e(HO,err),e(HT,orr),e(x,rrr),e(x,UT),e(UT,zue),e(zue,trr),e(UT,arr),e(UT,UO),e(UO,nrr),e(UT,srr),e(x,lrr),e(x,JT),e(JT,Que),e(Que,irr),e(JT,drr),e(JT,JO),e(JO,crr),e(JT,mrr),e(x,frr),e(x,YT),e(YT,Wue),e(Wue,grr),e(YT,hrr),e(YT,YO),e(YO,urr),e(YT,prr),e(x,_rr),e(x,KT),e(KT,Hue),e(Hue,brr),e(KT,vrr),e(KT,KO),e(KO,Frr),e(KT,Trr),e(x,Mrr),e(x,ZT),e(ZT,Uue),e(Uue,Err),e(ZT,Crr),e(ZT,ZO),e(ZO,wrr),e(ZT,Arr),e(x,yrr),e(x,eM),e(eM,Jue),e(Jue,Lrr),e(eM,xrr),e(eM,eV),e(eV,krr),e(eM,Srr),e(x,Rrr),e(x,oM),e(oM,Yue),e(Yue,Brr),e(oM,Prr),e(oM,oV),e(oV,$rr),e(oM,Irr),e(x,qrr),e(x,rM),e(rM,Kue),e(Kue,Nrr),e(rM,jrr),e(rM,rV),e(rV,Drr),e(rM,Grr),e(x,Orr),e(x,tM),e(tM,Zue),e(Zue,Vrr),e(tM,Xrr),e(tM,tV),e(tV,zrr),e(tM,Qrr),e(x,Wrr),e(x,aM),e(aM,epe),e(epe,Hrr),e(aM,Urr),e(aM,aV),e(aV,Jrr),e(aM,Yrr),e(x,Krr),e(x,nM),e(nM,ope),e(ope,Zrr),e(nM,etr),e(nM,nV),e(nV,otr),e(nM,rtr),e(x,ttr),e(x,sM),e(sM,rpe),e(rpe,atr),e(sM,ntr),e(sM,sV),e(sV,str),e(sM,ltr),e(x,itr),e(x,lM),e(lM,tpe),e(tpe,dtr),e(lM,ctr),e(lM,lV),e(lV,mtr),e(lM,ftr),e(x,gtr),e(x,iM),e(iM,ape),e(ape,htr),e(iM,utr),e(iM,iV),e(iV,ptr),e(iM,_tr),e(x,btr),e(x,dM),e(dM,npe),e(npe,vtr),e(dM,Ftr),e(dM,dV),e(dV,Ttr),e(dM,Mtr),e(x,Etr),e(x,cM),e(cM,spe),e(spe,Ctr),e(cM,wtr),e(cM,cV),e(cV,Atr),e(cM,ytr),e(x,Ltr),e(x,mM),e(mM,lpe),e(lpe,xtr),e(mM,ktr),e(mM,mV),e(mV,Str),e(mM,Rtr),e(x,Btr),e(x,fM),e(fM,ipe),e(ipe,Ptr),e(fM,$tr),e(fM,fV),e(fV,Itr),e(fM,qtr),e(x,Ntr),e(x,gM),e(gM,dpe),e(dpe,jtr),e(gM,Dtr),e(gM,gV),e(gV,Gtr),e(gM,Otr),e(x,Vtr),e(x,hM),e(hM,cpe),e(cpe,Xtr),e(hM,ztr),e(hM,hV),e(hV,Qtr),e(hM,Wtr),e(x,Htr),e(x,uM),e(uM,mpe),e(mpe,Utr),e(uM,Jtr),e(uM,uV),e(uV,Ytr),e(uM,Ktr),e(x,Ztr),e(x,pM),e(pM,fpe),e(fpe,ear),e(pM,oar),e(pM,pV),e(pV,rar),e(pM,tar),e(x,aar),e(x,_M),e(_M,gpe),e(gpe,nar),e(_M,sar),e(_M,_V),e(_V,lar),e(_M,iar),e(x,dar),e(x,bM),e(bM,hpe),e(hpe,car),e(bM,mar),e(bM,bV),e(bV,far),e(bM,gar),e(x,har),e(x,vM),e(vM,upe),e(upe,uar),e(vM,par),e(vM,vV),e(vV,_ar),e(vM,bar),e(x,Far),e(x,FM),e(FM,ppe),e(ppe,Tar),e(FM,Mar),e(FM,FV),e(FV,Ear),e(FM,Car),e(ho,war),e(ho,_pe),e(_pe,Aar),e(ho,yar),g(uy,ho,null),b(c,XBe,_),b(c,bc,_),e(bc,TM),e(TM,bpe),g(py,bpe,null),e(bc,Lar),e(bc,vpe),e(vpe,xar),b(c,zBe,_),b(c,Fr,_),g(_y,Fr,null),e(Fr,kar),e(Fr,vc),e(vc,Sar),e(vc,TV),e(TV,Rar),e(vc,Bar),e(vc,MV),e(MV,Par),e(vc,$ar),e(Fr,Iar),e(Fr,by),e(by,qar),e(by,Fpe),e(Fpe,Nar),e(by,jar),e(Fr,Dar),e(Fr,ht),g(vy,ht,null),e(ht,Gar),e(ht,Tpe),e(Tpe,Oar),e(ht,Var),e(ht,Fc),e(Fc,Xar),e(Fc,Mpe),e(Mpe,zar),e(Fc,Qar),e(Fc,EV),e(EV,War),e(Fc,Har),e(ht,Uar),e(ht,Epe),e(Epe,Jar),e(ht,Yar),g(Fy,ht,null),e(Fr,Kar),e(Fr,uo),g(Ty,uo,null),e(uo,Zar),e(uo,Cpe),e(Cpe,enr),e(uo,onr),e(uo,bn),e(bn,rnr),e(bn,wpe),e(wpe,tnr),e(bn,anr),e(bn,Ape),e(Ape,nnr),e(bn,snr),e(bn,ype),e(ype,lnr),e(bn,inr),e(uo,dnr),e(uo,H),e(H,MM),e(MM,Lpe),e(Lpe,cnr),e(MM,mnr),e(MM,CV),e(CV,fnr),e(MM,gnr),e(H,hnr),e(H,EM),e(EM,xpe),e(xpe,unr),e(EM,pnr),e(EM,wV),e(wV,_nr),e(EM,bnr),e(H,vnr),e(H,CM),e(CM,kpe),e(kpe,Fnr),e(CM,Tnr),e(CM,AV),e(AV,Mnr),e(CM,Enr),e(H,Cnr),e(H,wM),e(wM,Spe),e(Spe,wnr),e(wM,Anr),e(wM,yV),e(yV,ynr),e(wM,Lnr),e(H,xnr),e(H,AM),e(AM,Rpe),e(Rpe,knr),e(AM,Snr),e(AM,LV),e(LV,Rnr),e(AM,Bnr),e(H,Pnr),e(H,yM),e(yM,Bpe),e(Bpe,$nr),e(yM,Inr),e(yM,xV),e(xV,qnr),e(yM,Nnr),e(H,jnr),e(H,LM),e(LM,Ppe),e(Ppe,Dnr),e(LM,Gnr),e(LM,kV),e(kV,Onr),e(LM,Vnr),e(H,Xnr),e(H,xM),e(xM,$pe),e($pe,znr),e(xM,Qnr),e(xM,SV),e(SV,Wnr),e(xM,Hnr),e(H,Unr),e(H,kM),e(kM,Ipe),e(Ipe,Jnr),e(kM,Ynr),e(kM,RV),e(RV,Knr),e(kM,Znr),e(H,esr),e(H,SM),e(SM,qpe),e(qpe,osr),e(SM,rsr),e(SM,BV),e(BV,tsr),e(SM,asr),e(H,nsr),e(H,RM),e(RM,Npe),e(Npe,ssr),e(RM,lsr),e(RM,PV),e(PV,isr),e(RM,dsr),e(H,csr),e(H,BM),e(BM,jpe),e(jpe,msr),e(BM,fsr),e(BM,$V),e($V,gsr),e(BM,hsr),e(H,usr),e(H,PM),e(PM,Dpe),e(Dpe,psr),e(PM,_sr),e(PM,IV),e(IV,bsr),e(PM,vsr),e(H,Fsr),e(H,$M),e($M,Gpe),e(Gpe,Tsr),e($M,Msr),e($M,qV),e(qV,Esr),e($M,Csr),e(H,wsr),e(H,IM),e(IM,Ope),e(Ope,Asr),e(IM,ysr),e(IM,NV),e(NV,Lsr),e(IM,xsr),e(H,ksr),e(H,qM),e(qM,Vpe),e(Vpe,Ssr),e(qM,Rsr),e(qM,jV),e(jV,Bsr),e(qM,Psr),e(H,$sr),e(H,NM),e(NM,Xpe),e(Xpe,Isr),e(NM,qsr),e(NM,DV),e(DV,Nsr),e(NM,jsr),e(H,Dsr),e(H,jM),e(jM,zpe),e(zpe,Gsr),e(jM,Osr),e(jM,GV),e(GV,Vsr),e(jM,Xsr),e(H,zsr),e(H,DM),e(DM,Qpe),e(Qpe,Qsr),e(DM,Wsr),e(DM,OV),e(OV,Hsr),e(DM,Usr),e(H,Jsr),e(H,GM),e(GM,Wpe),e(Wpe,Ysr),e(GM,Ksr),e(GM,VV),e(VV,Zsr),e(GM,elr),e(H,olr),e(H,OM),e(OM,Hpe),e(Hpe,rlr),e(OM,tlr),e(OM,XV),e(XV,alr),e(OM,nlr),e(H,slr),e(H,VM),e(VM,Upe),e(Upe,llr),e(VM,ilr),e(VM,zV),e(zV,dlr),e(VM,clr),e(H,mlr),e(H,XM),e(XM,Jpe),e(Jpe,flr),e(XM,glr),e(XM,QV),e(QV,hlr),e(XM,ulr),e(uo,plr),e(uo,Ype),e(Ype,_lr),e(uo,blr),g(My,uo,null),b(c,QBe,_),b(c,Tc,_),e(Tc,zM),e(zM,Kpe),g(Ey,Kpe,null),e(Tc,vlr),e(Tc,Zpe),e(Zpe,Flr),b(c,WBe,_),b(c,Tr,_),g(Cy,Tr,null),e(Tr,Tlr),e(Tr,Mc),e(Mc,Mlr),e(Mc,WV),e(WV,Elr),e(Mc,Clr),e(Mc,HV),e(HV,wlr),e(Mc,Alr),e(Tr,ylr),e(Tr,wy),e(wy,Llr),e(wy,e_e),e(e_e,xlr),e(wy,klr),e(Tr,Slr),e(Tr,ut),g(Ay,ut,null),e(ut,Rlr),e(ut,o_e),e(o_e,Blr),e(ut,Plr),e(ut,Ec),e(Ec,$lr),e(Ec,r_e),e(r_e,Ilr),e(Ec,qlr),e(Ec,UV),e(UV,Nlr),e(Ec,jlr),e(ut,Dlr),e(ut,t_e),e(t_e,Glr),e(ut,Olr),g(yy,ut,null),e(Tr,Vlr),e(Tr,po),g(Ly,po,null),e(po,Xlr),e(po,a_e),e(a_e,zlr),e(po,Qlr),e(po,vn),e(vn,Wlr),e(vn,n_e),e(n_e,Hlr),e(vn,Ulr),e(vn,s_e),e(s_e,Jlr),e(vn,Ylr),e(vn,l_e),e(l_e,Klr),e(vn,Zlr),e(po,eir),e(po,me),e(me,QM),e(QM,i_e),e(i_e,oir),e(QM,rir),e(QM,JV),e(JV,tir),e(QM,air),e(me,nir),e(me,WM),e(WM,d_e),e(d_e,sir),e(WM,lir),e(WM,YV),e(YV,iir),e(WM,dir),e(me,cir),e(me,HM),e(HM,c_e),e(c_e,mir),e(HM,fir),e(HM,KV),e(KV,gir),e(HM,hir),e(me,uir),e(me,UM),e(UM,m_e),e(m_e,pir),e(UM,_ir),e(UM,ZV),e(ZV,bir),e(UM,vir),e(me,Fir),e(me,JM),e(JM,f_e),e(f_e,Tir),e(JM,Mir),e(JM,eX),e(eX,Eir),e(JM,Cir),e(me,wir),e(me,YM),e(YM,g_e),e(g_e,Air),e(YM,yir),e(YM,oX),e(oX,Lir),e(YM,xir),e(me,kir),e(me,KM),e(KM,h_e),e(h_e,Sir),e(KM,Rir),e(KM,rX),e(rX,Bir),e(KM,Pir),e(me,$ir),e(me,ZM),e(ZM,u_e),e(u_e,Iir),e(ZM,qir),e(ZM,tX),e(tX,Nir),e(ZM,jir),e(me,Dir),e(me,e4),e(e4,p_e),e(p_e,Gir),e(e4,Oir),e(e4,aX),e(aX,Vir),e(e4,Xir),e(me,zir),e(me,o4),e(o4,__e),e(__e,Qir),e(o4,Wir),e(o4,nX),e(nX,Hir),e(o4,Uir),e(me,Jir),e(me,r4),e(r4,b_e),e(b_e,Yir),e(r4,Kir),e(r4,sX),e(sX,Zir),e(r4,edr),e(me,odr),e(me,t4),e(t4,v_e),e(v_e,rdr),e(t4,tdr),e(t4,lX),e(lX,adr),e(t4,ndr),e(po,sdr),e(po,F_e),e(F_e,ldr),e(po,idr),g(xy,po,null),b(c,HBe,_),b(c,Cc,_),e(Cc,a4),e(a4,T_e),g(ky,T_e,null),e(Cc,ddr),e(Cc,M_e),e(M_e,cdr),b(c,UBe,_),b(c,Mr,_),g(Sy,Mr,null),e(Mr,mdr),e(Mr,wc),e(wc,fdr),e(wc,iX),e(iX,gdr),e(wc,hdr),e(wc,dX),e(dX,udr),e(wc,pdr),e(Mr,_dr),e(Mr,Ry),e(Ry,bdr),e(Ry,E_e),e(E_e,vdr),e(Ry,Fdr),e(Mr,Tdr),e(Mr,pt),g(By,pt,null),e(pt,Mdr),e(pt,C_e),e(C_e,Edr),e(pt,Cdr),e(pt,Ac),e(Ac,wdr),e(Ac,w_e),e(w_e,Adr),e(Ac,ydr),e(Ac,cX),e(cX,Ldr),e(Ac,xdr),e(pt,kdr),e(pt,A_e),e(A_e,Sdr),e(pt,Rdr),g(Py,pt,null),e(Mr,Bdr),e(Mr,_o),g($y,_o,null),e(_o,Pdr),e(_o,y_e),e(y_e,$dr),e(_o,Idr),e(_o,Fn),e(Fn,qdr),e(Fn,L_e),e(L_e,Ndr),e(Fn,jdr),e(Fn,x_e),e(x_e,Ddr),e(Fn,Gdr),e(Fn,k_e),e(k_e,Odr),e(Fn,Vdr),e(_o,Xdr),e(_o,Iy),e(Iy,n4),e(n4,S_e),e(S_e,zdr),e(n4,Qdr),e(n4,mX),e(mX,Wdr),e(n4,Hdr),e(Iy,Udr),e(Iy,s4),e(s4,R_e),e(R_e,Jdr),e(s4,Ydr),e(s4,fX),e(fX,Kdr),e(s4,Zdr),e(_o,ecr),e(_o,B_e),e(B_e,ocr),e(_o,rcr),g(qy,_o,null),b(c,JBe,_),b(c,yc,_),e(yc,l4),e(l4,P_e),g(Ny,P_e,null),e(yc,tcr),e(yc,$_e),e($_e,acr),b(c,YBe,_),b(c,Er,_),g(jy,Er,null),e(Er,ncr),e(Er,Lc),e(Lc,scr),e(Lc,gX),e(gX,lcr),e(Lc,icr),e(Lc,hX),e(hX,dcr),e(Lc,ccr),e(Er,mcr),e(Er,Dy),e(Dy,fcr),e(Dy,I_e),e(I_e,gcr),e(Dy,hcr),e(Er,ucr),e(Er,_t),g(Gy,_t,null),e(_t,pcr),e(_t,q_e),e(q_e,_cr),e(_t,bcr),e(_t,xc),e(xc,vcr),e(xc,N_e),e(N_e,Fcr),e(xc,Tcr),e(xc,uX),e(uX,Mcr),e(xc,Ecr),e(_t,Ccr),e(_t,j_e),e(j_e,wcr),e(_t,Acr),g(Oy,_t,null),e(Er,ycr),e(Er,bo),g(Vy,bo,null),e(bo,Lcr),e(bo,D_e),e(D_e,xcr),e(bo,kcr),e(bo,Tn),e(Tn,Scr),e(Tn,G_e),e(G_e,Rcr),e(Tn,Bcr),e(Tn,O_e),e(O_e,Pcr),e(Tn,$cr),e(Tn,V_e),e(V_e,Icr),e(Tn,qcr),e(bo,Ncr),e(bo,J),e(J,i4),e(i4,X_e),e(X_e,jcr),e(i4,Dcr),e(i4,pX),e(pX,Gcr),e(i4,Ocr),e(J,Vcr),e(J,d4),e(d4,z_e),e(z_e,Xcr),e(d4,zcr),e(d4,_X),e(_X,Qcr),e(d4,Wcr),e(J,Hcr),e(J,c4),e(c4,Q_e),e(Q_e,Ucr),e(c4,Jcr),e(c4,bX),e(bX,Ycr),e(c4,Kcr),e(J,Zcr),e(J,m4),e(m4,W_e),e(W_e,emr),e(m4,omr),e(m4,vX),e(vX,rmr),e(m4,tmr),e(J,amr),e(J,f4),e(f4,H_e),e(H_e,nmr),e(f4,smr),e(f4,FX),e(FX,lmr),e(f4,imr),e(J,dmr),e(J,g4),e(g4,U_e),e(U_e,cmr),e(g4,mmr),e(g4,TX),e(TX,fmr),e(g4,gmr),e(J,hmr),e(J,h4),e(h4,J_e),e(J_e,umr),e(h4,pmr),e(h4,MX),e(MX,_mr),e(h4,bmr),e(J,vmr),e(J,u4),e(u4,Y_e),e(Y_e,Fmr),e(u4,Tmr),e(u4,EX),e(EX,Mmr),e(u4,Emr),e(J,Cmr),e(J,p4),e(p4,K_e),e(K_e,wmr),e(p4,Amr),e(p4,CX),e(CX,ymr),e(p4,Lmr),e(J,xmr),e(J,_4),e(_4,Z_e),e(Z_e,kmr),e(_4,Smr),e(_4,wX),e(wX,Rmr),e(_4,Bmr),e(J,Pmr),e(J,b4),e(b4,ebe),e(ebe,$mr),e(b4,Imr),e(b4,AX),e(AX,qmr),e(b4,Nmr),e(J,jmr),e(J,v4),e(v4,obe),e(obe,Dmr),e(v4,Gmr),e(v4,yX),e(yX,Omr),e(v4,Vmr),e(J,Xmr),e(J,F4),e(F4,rbe),e(rbe,zmr),e(F4,Qmr),e(F4,LX),e(LX,Wmr),e(F4,Hmr),e(J,Umr),e(J,T4),e(T4,tbe),e(tbe,Jmr),e(T4,Ymr),e(T4,xX),e(xX,Kmr),e(T4,Zmr),e(J,efr),e(J,M4),e(M4,abe),e(abe,ofr),e(M4,rfr),e(M4,kX),e(kX,tfr),e(M4,afr),e(J,nfr),e(J,E4),e(E4,nbe),e(nbe,sfr),e(E4,lfr),e(E4,SX),e(SX,ifr),e(E4,dfr),e(J,cfr),e(J,C4),e(C4,sbe),e(sbe,mfr),e(C4,ffr),e(C4,RX),e(RX,gfr),e(C4,hfr),e(J,ufr),e(J,w4),e(w4,lbe),e(lbe,pfr),e(w4,_fr),e(w4,BX),e(BX,bfr),e(w4,vfr),e(J,Ffr),e(J,A4),e(A4,ibe),e(ibe,Tfr),e(A4,Mfr),e(A4,PX),e(PX,Efr),e(A4,Cfr),e(J,wfr),e(J,y4),e(y4,dbe),e(dbe,Afr),e(y4,yfr),e(y4,$X),e($X,Lfr),e(y4,xfr),e(bo,kfr),e(bo,cbe),e(cbe,Sfr),e(bo,Rfr),g(Xy,bo,null),b(c,KBe,_),b(c,kc,_),e(kc,L4),e(L4,mbe),g(zy,mbe,null),e(kc,Bfr),e(kc,fbe),e(fbe,Pfr),b(c,ZBe,_),b(c,Cr,_),g(Qy,Cr,null),e(Cr,$fr),e(Cr,Sc),e(Sc,Ifr),e(Sc,IX),e(IX,qfr),e(Sc,Nfr),e(Sc,qX),e(qX,jfr),e(Sc,Dfr),e(Cr,Gfr),e(Cr,Wy),e(Wy,Ofr),e(Wy,gbe),e(gbe,Vfr),e(Wy,Xfr),e(Cr,zfr),e(Cr,bt),g(Hy,bt,null),e(bt,Qfr),e(bt,hbe),e(hbe,Wfr),e(bt,Hfr),e(bt,Rc),e(Rc,Ufr),e(Rc,ube),e(ube,Jfr),e(Rc,Yfr),e(Rc,NX),e(NX,Kfr),e(Rc,Zfr),e(bt,egr),e(bt,pbe),e(pbe,ogr),e(bt,rgr),g(Uy,bt,null),e(Cr,tgr),e(Cr,vo),g(Jy,vo,null),e(vo,agr),e(vo,_be),e(_be,ngr),e(vo,sgr),e(vo,Mn),e(Mn,lgr),e(Mn,bbe),e(bbe,igr),e(Mn,dgr),e(Mn,vbe),e(vbe,cgr),e(Mn,mgr),e(Mn,Fbe),e(Fbe,fgr),e(Mn,ggr),e(vo,hgr),e(vo,be),e(be,x4),e(x4,Tbe),e(Tbe,ugr),e(x4,pgr),e(x4,jX),e(jX,_gr),e(x4,bgr),e(be,vgr),e(be,k4),e(k4,Mbe),e(Mbe,Fgr),e(k4,Tgr),e(k4,DX),e(DX,Mgr),e(k4,Egr),e(be,Cgr),e(be,S4),e(S4,Ebe),e(Ebe,wgr),e(S4,Agr),e(S4,GX),e(GX,ygr),e(S4,Lgr),e(be,xgr),e(be,R4),e(R4,Cbe),e(Cbe,kgr),e(R4,Sgr),e(R4,OX),e(OX,Rgr),e(R4,Bgr),e(be,Pgr),e(be,B4),e(B4,wbe),e(wbe,$gr),e(B4,Igr),e(B4,VX),e(VX,qgr),e(B4,Ngr),e(be,jgr),e(be,P4),e(P4,Abe),e(Abe,Dgr),e(P4,Ggr),e(P4,XX),e(XX,Ogr),e(P4,Vgr),e(be,Xgr),e(be,$4),e($4,ybe),e(ybe,zgr),e($4,Qgr),e($4,zX),e(zX,Wgr),e($4,Hgr),e(be,Ugr),e(be,I4),e(I4,Lbe),e(Lbe,Jgr),e(I4,Ygr),e(I4,QX),e(QX,Kgr),e(I4,Zgr),e(be,ehr),e(be,q4),e(q4,xbe),e(xbe,ohr),e(q4,rhr),e(q4,WX),e(WX,thr),e(q4,ahr),e(be,nhr),e(be,N4),e(N4,kbe),e(kbe,shr),e(N4,lhr),e(N4,HX),e(HX,ihr),e(N4,dhr),e(vo,chr),e(vo,Sbe),e(Sbe,mhr),e(vo,fhr),g(Yy,vo,null),b(c,ePe,_),b(c,Bc,_),e(Bc,j4),e(j4,Rbe),g(Ky,Rbe,null),e(Bc,ghr),e(Bc,Bbe),e(Bbe,hhr),b(c,oPe,_),b(c,wr,_),g(Zy,wr,null),e(wr,uhr),e(wr,Pc),e(Pc,phr),e(Pc,UX),e(UX,_hr),e(Pc,bhr),e(Pc,JX),e(JX,vhr),e(Pc,Fhr),e(wr,Thr),e(wr,e8),e(e8,Mhr),e(e8,Pbe),e(Pbe,Ehr),e(e8,Chr),e(wr,whr),e(wr,vt),g(o8,vt,null),e(vt,Ahr),e(vt,$be),e($be,yhr),e(vt,Lhr),e(vt,$c),e($c,xhr),e($c,Ibe),e(Ibe,khr),e($c,Shr),e($c,YX),e(YX,Rhr),e($c,Bhr),e(vt,Phr),e(vt,qbe),e(qbe,$hr),e(vt,Ihr),g(r8,vt,null),e(wr,qhr),e(wr,Fo),g(t8,Fo,null),e(Fo,Nhr),e(Fo,Nbe),e(Nbe,jhr),e(Fo,Dhr),e(Fo,En),e(En,Ghr),e(En,jbe),e(jbe,Ohr),e(En,Vhr),e(En,Dbe),e(Dbe,Xhr),e(En,zhr),e(En,Gbe),e(Gbe,Qhr),e(En,Whr),e(Fo,Hhr),e(Fo,V),e(V,D4),e(D4,Obe),e(Obe,Uhr),e(D4,Jhr),e(D4,KX),e(KX,Yhr),e(D4,Khr),e(V,Zhr),e(V,G4),e(G4,Vbe),e(Vbe,eur),e(G4,our),e(G4,ZX),e(ZX,rur),e(G4,tur),e(V,aur),e(V,O4),e(O4,Xbe),e(Xbe,nur),e(O4,sur),e(O4,ez),e(ez,lur),e(O4,iur),e(V,dur),e(V,V4),e(V4,zbe),e(zbe,cur),e(V4,mur),e(V4,oz),e(oz,fur),e(V4,gur),e(V,hur),e(V,X4),e(X4,Qbe),e(Qbe,uur),e(X4,pur),e(X4,rz),e(rz,_ur),e(X4,bur),e(V,vur),e(V,z4),e(z4,Wbe),e(Wbe,Fur),e(z4,Tur),e(z4,tz),e(tz,Mur),e(z4,Eur),e(V,Cur),e(V,Q4),e(Q4,Hbe),e(Hbe,wur),e(Q4,Aur),e(Q4,az),e(az,yur),e(Q4,Lur),e(V,xur),e(V,W4),e(W4,Ube),e(Ube,kur),e(W4,Sur),e(W4,nz),e(nz,Rur),e(W4,Bur),e(V,Pur),e(V,H4),e(H4,Jbe),e(Jbe,$ur),e(H4,Iur),e(H4,sz),e(sz,qur),e(H4,Nur),e(V,jur),e(V,U4),e(U4,Ybe),e(Ybe,Dur),e(U4,Gur),e(U4,lz),e(lz,Our),e(U4,Vur),e(V,Xur),e(V,J4),e(J4,Kbe),e(Kbe,zur),e(J4,Qur),e(J4,iz),e(iz,Wur),e(J4,Hur),e(V,Uur),e(V,Y4),e(Y4,Zbe),e(Zbe,Jur),e(Y4,Yur),e(Y4,dz),e(dz,Kur),e(Y4,Zur),e(V,epr),e(V,K4),e(K4,e2e),e(e2e,opr),e(K4,rpr),e(K4,cz),e(cz,tpr),e(K4,apr),e(V,npr),e(V,Z4),e(Z4,o2e),e(o2e,spr),e(Z4,lpr),e(Z4,mz),e(mz,ipr),e(Z4,dpr),e(V,cpr),e(V,eE),e(eE,r2e),e(r2e,mpr),e(eE,fpr),e(eE,fz),e(fz,gpr),e(eE,hpr),e(V,upr),e(V,oE),e(oE,t2e),e(t2e,ppr),e(oE,_pr),e(oE,gz),e(gz,bpr),e(oE,vpr),e(V,Fpr),e(V,rE),e(rE,a2e),e(a2e,Tpr),e(rE,Mpr),e(rE,hz),e(hz,Epr),e(rE,Cpr),e(V,wpr),e(V,tE),e(tE,n2e),e(n2e,Apr),e(tE,ypr),e(tE,uz),e(uz,Lpr),e(tE,xpr),e(V,kpr),e(V,aE),e(aE,s2e),e(s2e,Spr),e(aE,Rpr),e(aE,pz),e(pz,Bpr),e(aE,Ppr),e(V,$pr),e(V,nE),e(nE,l2e),e(l2e,Ipr),e(nE,qpr),e(nE,_z),e(_z,Npr),e(nE,jpr),e(V,Dpr),e(V,sE),e(sE,i2e),e(i2e,Gpr),e(sE,Opr),e(sE,bz),e(bz,Vpr),e(sE,Xpr),e(V,zpr),e(V,lE),e(lE,d2e),e(d2e,Qpr),e(lE,Wpr),e(lE,vz),e(vz,Hpr),e(lE,Upr),e(V,Jpr),e(V,iE),e(iE,c2e),e(c2e,Ypr),e(iE,Kpr),e(iE,Fz),e(Fz,Zpr),e(iE,e_r),e(V,o_r),e(V,dE),e(dE,m2e),e(m2e,r_r),e(dE,t_r),e(dE,Tz),e(Tz,a_r),e(dE,n_r),e(V,s_r),e(V,cE),e(cE,f2e),e(f2e,l_r),e(cE,i_r),e(cE,Mz),e(Mz,d_r),e(cE,c_r),e(V,m_r),e(V,mE),e(mE,g2e),e(g2e,f_r),e(mE,g_r),e(mE,Ez),e(Ez,h_r),e(mE,u_r),e(Fo,p_r),e(Fo,h2e),e(h2e,__r),e(Fo,b_r),g(a8,Fo,null),b(c,rPe,_),b(c,Ic,_),e(Ic,fE),e(fE,u2e),g(n8,u2e,null),e(Ic,v_r),e(Ic,p2e),e(p2e,F_r),b(c,tPe,_),b(c,Ar,_),g(s8,Ar,null),e(Ar,T_r),e(Ar,qc),e(qc,M_r),e(qc,Cz),e(Cz,E_r),e(qc,C_r),e(qc,wz),e(wz,w_r),e(qc,A_r),e(Ar,y_r),e(Ar,l8),e(l8,L_r),e(l8,_2e),e(_2e,x_r),e(l8,k_r),e(Ar,S_r),e(Ar,Ft),g(i8,Ft,null),e(Ft,R_r),e(Ft,b2e),e(b2e,B_r),e(Ft,P_r),e(Ft,Nc),e(Nc,$_r),e(Nc,v2e),e(v2e,I_r),e(Nc,q_r),e(Nc,Az),e(Az,N_r),e(Nc,j_r),e(Ft,D_r),e(Ft,F2e),e(F2e,G_r),e(Ft,O_r),g(d8,Ft,null),e(Ar,V_r),e(Ar,To),g(c8,To,null),e(To,X_r),e(To,T2e),e(T2e,z_r),e(To,Q_r),e(To,Cn),e(Cn,W_r),e(Cn,M2e),e(M2e,H_r),e(Cn,U_r),e(Cn,E2e),e(E2e,J_r),e(Cn,Y_r),e(Cn,C2e),e(C2e,K_r),e(Cn,Z_r),e(To,ebr),e(To,se),e(se,gE),e(gE,w2e),e(w2e,obr),e(gE,rbr),e(gE,yz),e(yz,tbr),e(gE,abr),e(se,nbr),e(se,hE),e(hE,A2e),e(A2e,sbr),e(hE,lbr),e(hE,Lz),e(Lz,ibr),e(hE,dbr),e(se,cbr),e(se,uE),e(uE,y2e),e(y2e,mbr),e(uE,fbr),e(uE,xz),e(xz,gbr),e(uE,hbr),e(se,ubr),e(se,pE),e(pE,L2e),e(L2e,pbr),e(pE,_br),e(pE,kz),e(kz,bbr),e(pE,vbr),e(se,Fbr),e(se,_E),e(_E,x2e),e(x2e,Tbr),e(_E,Mbr),e(_E,Sz),e(Sz,Ebr),e(_E,Cbr),e(se,wbr),e(se,bE),e(bE,k2e),e(k2e,Abr),e(bE,ybr),e(bE,Rz),e(Rz,Lbr),e(bE,xbr),e(se,kbr),e(se,vE),e(vE,S2e),e(S2e,Sbr),e(vE,Rbr),e(vE,Bz),e(Bz,Bbr),e(vE,Pbr),e(se,$br),e(se,FE),e(FE,R2e),e(R2e,Ibr),e(FE,qbr),e(FE,Pz),e(Pz,Nbr),e(FE,jbr),e(se,Dbr),e(se,TE),e(TE,B2e),e(B2e,Gbr),e(TE,Obr),e(TE,$z),e($z,Vbr),e(TE,Xbr),e(se,zbr),e(se,ME),e(ME,P2e),e(P2e,Qbr),e(ME,Wbr),e(ME,Iz),e(Iz,Hbr),e(ME,Ubr),e(se,Jbr),e(se,EE),e(EE,$2e),e($2e,Ybr),e(EE,Kbr),e(EE,qz),e(qz,Zbr),e(EE,e2r),e(se,o2r),e(se,CE),e(CE,I2e),e(I2e,r2r),e(CE,t2r),e(CE,Nz),e(Nz,a2r),e(CE,n2r),e(se,s2r),e(se,wE),e(wE,q2e),e(q2e,l2r),e(wE,i2r),e(wE,jz),e(jz,d2r),e(wE,c2r),e(se,m2r),e(se,AE),e(AE,N2e),e(N2e,f2r),e(AE,g2r),e(AE,Dz),e(Dz,h2r),e(AE,u2r),e(se,p2r),e(se,yE),e(yE,j2e),e(j2e,_2r),e(yE,b2r),e(yE,Gz),e(Gz,v2r),e(yE,F2r),e(se,T2r),e(se,LE),e(LE,D2e),e(D2e,M2r),e(LE,E2r),e(LE,Oz),e(Oz,C2r),e(LE,w2r),e(se,A2r),e(se,xE),e(xE,G2e),e(G2e,y2r),e(xE,L2r),e(xE,Vz),e(Vz,x2r),e(xE,k2r),e(To,S2r),e(To,O2e),e(O2e,R2r),e(To,B2r),g(m8,To,null),b(c,aPe,_),b(c,jc,_),e(jc,kE),e(kE,V2e),g(f8,V2e,null),e(jc,P2r),e(jc,X2e),e(X2e,$2r),b(c,nPe,_),b(c,yr,_),g(g8,yr,null),e(yr,I2r),e(yr,Dc),e(Dc,q2r),e(Dc,Xz),e(Xz,N2r),e(Dc,j2r),e(Dc,zz),e(zz,D2r),e(Dc,G2r),e(yr,O2r),e(yr,h8),e(h8,V2r),e(h8,z2e),e(z2e,X2r),e(h8,z2r),e(yr,Q2r),e(yr,Tt),g(u8,Tt,null),e(Tt,W2r),e(Tt,Q2e),e(Q2e,H2r),e(Tt,U2r),e(Tt,Gc),e(Gc,J2r),e(Gc,W2e),e(W2e,Y2r),e(Gc,K2r),e(Gc,Qz),e(Qz,Z2r),e(Gc,evr),e(Tt,ovr),e(Tt,H2e),e(H2e,rvr),e(Tt,tvr),g(p8,Tt,null),e(yr,avr),e(yr,Mo),g(_8,Mo,null),e(Mo,nvr),e(Mo,U2e),e(U2e,svr),e(Mo,lvr),e(Mo,wn),e(wn,ivr),e(wn,J2e),e(J2e,dvr),e(wn,cvr),e(wn,Y2e),e(Y2e,mvr),e(wn,fvr),e(wn,K2e),e(K2e,gvr),e(wn,hvr),e(Mo,uvr),e(Mo,Z2e),e(Z2e,SE),e(SE,eve),e(eve,pvr),e(SE,_vr),e(SE,Wz),e(Wz,bvr),e(SE,vvr),e(Mo,Fvr),e(Mo,ove),e(ove,Tvr),e(Mo,Mvr),g(b8,Mo,null),b(c,sPe,_),b(c,Oc,_),e(Oc,RE),e(RE,rve),g(v8,rve,null),e(Oc,Evr),e(Oc,tve),e(tve,Cvr),b(c,lPe,_),b(c,Lr,_),g(F8,Lr,null),e(Lr,wvr),e(Lr,Vc),e(Vc,Avr),e(Vc,Hz),e(Hz,yvr),e(Vc,Lvr),e(Vc,Uz),e(Uz,xvr),e(Vc,kvr),e(Lr,Svr),e(Lr,T8),e(T8,Rvr),e(T8,ave),e(ave,Bvr),e(T8,Pvr),e(Lr,$vr),e(Lr,Mt),g(M8,Mt,null),e(Mt,Ivr),e(Mt,nve),e(nve,qvr),e(Mt,Nvr),e(Mt,Xc),e(Xc,jvr),e(Xc,sve),e(sve,Dvr),e(Xc,Gvr),e(Xc,Jz),e(Jz,Ovr),e(Xc,Vvr),e(Mt,Xvr),e(Mt,lve),e(lve,zvr),e(Mt,Qvr),g(E8,Mt,null),e(Lr,Wvr),e(Lr,Eo),g(C8,Eo,null),e(Eo,Hvr),e(Eo,ive),e(ive,Uvr),e(Eo,Jvr),e(Eo,An),e(An,Yvr),e(An,dve),e(dve,Kvr),e(An,Zvr),e(An,cve),e(cve,eFr),e(An,oFr),e(An,mve),e(mve,rFr),e(An,tFr),e(Eo,aFr),e(Eo,Y),e(Y,BE),e(BE,fve),e(fve,nFr),e(BE,sFr),e(BE,Yz),e(Yz,lFr),e(BE,iFr),e(Y,dFr),e(Y,PE),e(PE,gve),e(gve,cFr),e(PE,mFr),e(PE,Kz),e(Kz,fFr),e(PE,gFr),e(Y,hFr),e(Y,$E),e($E,hve),e(hve,uFr),e($E,pFr),e($E,Zz),e(Zz,_Fr),e($E,bFr),e(Y,vFr),e(Y,IE),e(IE,uve),e(uve,FFr),e(IE,TFr),e(IE,eQ),e(eQ,MFr),e(IE,EFr),e(Y,CFr),e(Y,qE),e(qE,pve),e(pve,wFr),e(qE,AFr),e(qE,oQ),e(oQ,yFr),e(qE,LFr),e(Y,xFr),e(Y,NE),e(NE,_ve),e(_ve,kFr),e(NE,SFr),e(NE,rQ),e(rQ,RFr),e(NE,BFr),e(Y,PFr),e(Y,jE),e(jE,bve),e(bve,$Fr),e(jE,IFr),e(jE,tQ),e(tQ,qFr),e(jE,NFr),e(Y,jFr),e(Y,DE),e(DE,vve),e(vve,DFr),e(DE,GFr),e(DE,aQ),e(aQ,OFr),e(DE,VFr),e(Y,XFr),e(Y,GE),e(GE,Fve),e(Fve,zFr),e(GE,QFr),e(GE,nQ),e(nQ,WFr),e(GE,HFr),e(Y,UFr),e(Y,OE),e(OE,Tve),e(Tve,JFr),e(OE,YFr),e(OE,sQ),e(sQ,KFr),e(OE,ZFr),e(Y,e1r),e(Y,VE),e(VE,Mve),e(Mve,o1r),e(VE,r1r),e(VE,lQ),e(lQ,t1r),e(VE,a1r),e(Y,n1r),e(Y,XE),e(XE,Eve),e(Eve,s1r),e(XE,l1r),e(XE,iQ),e(iQ,i1r),e(XE,d1r),e(Y,c1r),e(Y,zE),e(zE,Cve),e(Cve,m1r),e(zE,f1r),e(zE,dQ),e(dQ,g1r),e(zE,h1r),e(Y,u1r),e(Y,QE),e(QE,wve),e(wve,p1r),e(QE,_1r),e(QE,cQ),e(cQ,b1r),e(QE,v1r),e(Y,F1r),e(Y,WE),e(WE,Ave),e(Ave,T1r),e(WE,M1r),e(WE,mQ),e(mQ,E1r),e(WE,C1r),e(Y,w1r),e(Y,HE),e(HE,yve),e(yve,A1r),e(HE,y1r),e(HE,fQ),e(fQ,L1r),e(HE,x1r),e(Y,k1r),e(Y,UE),e(UE,Lve),e(Lve,S1r),e(UE,R1r),e(UE,gQ),e(gQ,B1r),e(UE,P1r),e(Y,$1r),e(Y,JE),e(JE,xve),e(xve,I1r),e(JE,q1r),e(JE,hQ),e(hQ,N1r),e(JE,j1r),e(Y,D1r),e(Y,YE),e(YE,kve),e(kve,G1r),e(YE,O1r),e(YE,uQ),e(uQ,V1r),e(YE,X1r),e(Y,z1r),e(Y,KE),e(KE,Sve),e(Sve,Q1r),e(KE,W1r),e(KE,pQ),e(pQ,H1r),e(KE,U1r),e(Eo,J1r),e(Eo,Rve),e(Rve,Y1r),e(Eo,K1r),g(w8,Eo,null),b(c,iPe,_),b(c,zc,_),e(zc,ZE),e(ZE,Bve),g(A8,Bve,null),e(zc,Z1r),e(zc,Pve),e(Pve,eTr),b(c,dPe,_),b(c,xr,_),g(y8,xr,null),e(xr,oTr),e(xr,Qc),e(Qc,rTr),e(Qc,_Q),e(_Q,tTr),e(Qc,aTr),e(Qc,bQ),e(bQ,nTr),e(Qc,sTr),e(xr,lTr),e(xr,L8),e(L8,iTr),e(L8,$ve),e($ve,dTr),e(L8,cTr),e(xr,mTr),e(xr,Et),g(x8,Et,null),e(Et,fTr),e(Et,Ive),e(Ive,gTr),e(Et,hTr),e(Et,Wc),e(Wc,uTr),e(Wc,qve),e(qve,pTr),e(Wc,_Tr),e(Wc,vQ),e(vQ,bTr),e(Wc,vTr),e(Et,FTr),e(Et,Nve),e(Nve,TTr),e(Et,MTr),g(k8,Et,null),e(xr,ETr),e(xr,Co),g(S8,Co,null),e(Co,CTr),e(Co,jve),e(jve,wTr),e(Co,ATr),e(Co,yn),e(yn,yTr),e(yn,Dve),e(Dve,LTr),e(yn,xTr),e(yn,Gve),e(Gve,kTr),e(yn,STr),e(yn,Ove),e(Ove,RTr),e(yn,BTr),e(Co,PTr),e(Co,K),e(K,e5),e(e5,Vve),e(Vve,$Tr),e(e5,ITr),e(e5,FQ),e(FQ,qTr),e(e5,NTr),e(K,jTr),e(K,o5),e(o5,Xve),e(Xve,DTr),e(o5,GTr),e(o5,TQ),e(TQ,OTr),e(o5,VTr),e(K,XTr),e(K,r5),e(r5,zve),e(zve,zTr),e(r5,QTr),e(r5,MQ),e(MQ,WTr),e(r5,HTr),e(K,UTr),e(K,t5),e(t5,Qve),e(Qve,JTr),e(t5,YTr),e(t5,EQ),e(EQ,KTr),e(t5,ZTr),e(K,eMr),e(K,a5),e(a5,Wve),e(Wve,oMr),e(a5,rMr),e(a5,CQ),e(CQ,tMr),e(a5,aMr),e(K,nMr),e(K,n5),e(n5,Hve),e(Hve,sMr),e(n5,lMr),e(n5,wQ),e(wQ,iMr),e(n5,dMr),e(K,cMr),e(K,s5),e(s5,Uve),e(Uve,mMr),e(s5,fMr),e(s5,AQ),e(AQ,gMr),e(s5,hMr),e(K,uMr),e(K,l5),e(l5,Jve),e(Jve,pMr),e(l5,_Mr),e(l5,yQ),e(yQ,bMr),e(l5,vMr),e(K,FMr),e(K,i5),e(i5,Yve),e(Yve,TMr),e(i5,MMr),e(i5,LQ),e(LQ,EMr),e(i5,CMr),e(K,wMr),e(K,d5),e(d5,Kve),e(Kve,AMr),e(d5,yMr),e(d5,xQ),e(xQ,LMr),e(d5,xMr),e(K,kMr),e(K,c5),e(c5,Zve),e(Zve,SMr),e(c5,RMr),e(c5,kQ),e(kQ,BMr),e(c5,PMr),e(K,$Mr),e(K,m5),e(m5,eFe),e(eFe,IMr),e(m5,qMr),e(m5,SQ),e(SQ,NMr),e(m5,jMr),e(K,DMr),e(K,f5),e(f5,oFe),e(oFe,GMr),e(f5,OMr),e(f5,RQ),e(RQ,VMr),e(f5,XMr),e(K,zMr),e(K,g5),e(g5,rFe),e(rFe,QMr),e(g5,WMr),e(g5,BQ),e(BQ,HMr),e(g5,UMr),e(K,JMr),e(K,h5),e(h5,tFe),e(tFe,YMr),e(h5,KMr),e(h5,PQ),e(PQ,ZMr),e(h5,e4r),e(K,o4r),e(K,u5),e(u5,aFe),e(aFe,r4r),e(u5,t4r),e(u5,$Q),e($Q,a4r),e(u5,n4r),e(K,s4r),e(K,p5),e(p5,nFe),e(nFe,l4r),e(p5,i4r),e(p5,IQ),e(IQ,d4r),e(p5,c4r),e(K,m4r),e(K,_5),e(_5,sFe),e(sFe,f4r),e(_5,g4r),e(_5,qQ),e(qQ,h4r),e(_5,u4r),e(K,p4r),e(K,b5),e(b5,lFe),e(lFe,_4r),e(b5,b4r),e(b5,NQ),e(NQ,v4r),e(b5,F4r),e(K,T4r),e(K,v5),e(v5,iFe),e(iFe,M4r),e(v5,E4r),e(v5,jQ),e(jQ,C4r),e(v5,w4r),e(Co,A4r),e(Co,dFe),e(dFe,y4r),e(Co,L4r),g(R8,Co,null),b(c,cPe,_),b(c,Hc,_),e(Hc,F5),e(F5,cFe),g(B8,cFe,null),e(Hc,x4r),e(Hc,mFe),e(mFe,k4r),b(c,mPe,_),b(c,kr,_),g(P8,kr,null),e(kr,S4r),e(kr,Uc),e(Uc,R4r),e(Uc,DQ),e(DQ,B4r),e(Uc,P4r),e(Uc,GQ),e(GQ,$4r),e(Uc,I4r),e(kr,q4r),e(kr,$8),e($8,N4r),e($8,fFe),e(fFe,j4r),e($8,D4r),e(kr,G4r),e(kr,Ct),g(I8,Ct,null),e(Ct,O4r),e(Ct,gFe),e(gFe,V4r),e(Ct,X4r),e(Ct,Jc),e(Jc,z4r),e(Jc,hFe),e(hFe,Q4r),e(Jc,W4r),e(Jc,OQ),e(OQ,H4r),e(Jc,U4r),e(Ct,J4r),e(Ct,uFe),e(uFe,Y4r),e(Ct,K4r),g(q8,Ct,null),e(kr,Z4r),e(kr,wo),g(N8,wo,null),e(wo,eEr),e(wo,pFe),e(pFe,oEr),e(wo,rEr),e(wo,Ln),e(Ln,tEr),e(Ln,_Fe),e(_Fe,aEr),e(Ln,nEr),e(Ln,bFe),e(bFe,sEr),e(Ln,lEr),e(Ln,vFe),e(vFe,iEr),e(Ln,dEr),e(wo,cEr),e(wo,FFe),e(FFe,T5),e(T5,TFe),e(TFe,mEr),e(T5,fEr),e(T5,VQ),e(VQ,gEr),e(T5,hEr),e(wo,uEr),e(wo,MFe),e(MFe,pEr),e(wo,_Er),g(j8,wo,null),b(c,fPe,_),b(c,Yc,_),e(Yc,M5),e(M5,EFe),g(D8,EFe,null),e(Yc,bEr),e(Yc,CFe),e(CFe,vEr),b(c,gPe,_),b(c,Sr,_),g(G8,Sr,null),e(Sr,FEr),e(Sr,Kc),e(Kc,TEr),e(Kc,XQ),e(XQ,MEr),e(Kc,EEr),e(Kc,zQ),e(zQ,CEr),e(Kc,wEr),e(Sr,AEr),e(Sr,O8),e(O8,yEr),e(O8,wFe),e(wFe,LEr),e(O8,xEr),e(Sr,kEr),e(Sr,wt),g(V8,wt,null),e(wt,SEr),e(wt,AFe),e(AFe,REr),e(wt,BEr),e(wt,Zc),e(Zc,PEr),e(Zc,yFe),e(yFe,$Er),e(Zc,IEr),e(Zc,QQ),e(QQ,qEr),e(Zc,NEr),e(wt,jEr),e(wt,LFe),e(LFe,DEr),e(wt,GEr),g(X8,wt,null),e(Sr,OEr),e(Sr,Ao),g(z8,Ao,null),e(Ao,VEr),e(Ao,xFe),e(xFe,XEr),e(Ao,zEr),e(Ao,xn),e(xn,QEr),e(xn,kFe),e(kFe,WEr),e(xn,HEr),e(xn,SFe),e(SFe,UEr),e(xn,JEr),e(xn,RFe),e(RFe,YEr),e(xn,KEr),e(Ao,ZEr),e(Ao,BFe),e(BFe,E5),e(E5,PFe),e(PFe,e5r),e(E5,o5r),e(E5,WQ),e(WQ,r5r),e(E5,t5r),e(Ao,a5r),e(Ao,$Fe),e($Fe,n5r),e(Ao,s5r),g(Q8,Ao,null),b(c,hPe,_),b(c,em,_),e(em,C5),e(C5,IFe),g(W8,IFe,null),e(em,l5r),e(em,qFe),e(qFe,i5r),b(c,uPe,_),b(c,Rr,_),g(H8,Rr,null),e(Rr,d5r),e(Rr,om),e(om,c5r),e(om,HQ),e(HQ,m5r),e(om,f5r),e(om,UQ),e(UQ,g5r),e(om,h5r),e(Rr,u5r),e(Rr,U8),e(U8,p5r),e(U8,NFe),e(NFe,_5r),e(U8,b5r),e(Rr,v5r),e(Rr,At),g(J8,At,null),e(At,F5r),e(At,jFe),e(jFe,T5r),e(At,M5r),e(At,rm),e(rm,E5r),e(rm,DFe),e(DFe,C5r),e(rm,w5r),e(rm,JQ),e(JQ,A5r),e(rm,y5r),e(At,L5r),e(At,GFe),e(GFe,x5r),e(At,k5r),g(Y8,At,null),e(Rr,S5r),e(Rr,yo),g(K8,yo,null),e(yo,R5r),e(yo,OFe),e(OFe,B5r),e(yo,P5r),e(yo,kn),e(kn,$5r),e(kn,VFe),e(VFe,I5r),e(kn,q5r),e(kn,XFe),e(XFe,N5r),e(kn,j5r),e(kn,zFe),e(zFe,D5r),e(kn,G5r),e(yo,O5r),e(yo,z),e(z,w5),e(w5,QFe),e(QFe,V5r),e(w5,X5r),e(w5,YQ),e(YQ,z5r),e(w5,Q5r),e(z,W5r),e(z,A5),e(A5,WFe),e(WFe,H5r),e(A5,U5r),e(A5,KQ),e(KQ,J5r),e(A5,Y5r),e(z,K5r),e(z,y5),e(y5,HFe),e(HFe,Z5r),e(y5,e3r),e(y5,ZQ),e(ZQ,o3r),e(y5,r3r),e(z,t3r),e(z,L5),e(L5,UFe),e(UFe,a3r),e(L5,n3r),e(L5,eW),e(eW,s3r),e(L5,l3r),e(z,i3r),e(z,x5),e(x5,JFe),e(JFe,d3r),e(x5,c3r),e(x5,oW),e(oW,m3r),e(x5,f3r),e(z,g3r),e(z,k5),e(k5,YFe),e(YFe,h3r),e(k5,u3r),e(k5,rW),e(rW,p3r),e(k5,_3r),e(z,b3r),e(z,S5),e(S5,KFe),e(KFe,v3r),e(S5,F3r),e(S5,tW),e(tW,T3r),e(S5,M3r),e(z,E3r),e(z,R5),e(R5,ZFe),e(ZFe,C3r),e(R5,w3r),e(R5,aW),e(aW,A3r),e(R5,y3r),e(z,L3r),e(z,B5),e(B5,e1e),e(e1e,x3r),e(B5,k3r),e(B5,nW),e(nW,S3r),e(B5,R3r),e(z,B3r),e(z,P5),e(P5,o1e),e(o1e,P3r),e(P5,$3r),e(P5,sW),e(sW,I3r),e(P5,q3r),e(z,N3r),e(z,$5),e($5,r1e),e(r1e,j3r),e($5,D3r),e($5,lW),e(lW,G3r),e($5,O3r),e(z,V3r),e(z,I5),e(I5,t1e),e(t1e,X3r),e(I5,z3r),e(I5,iW),e(iW,Q3r),e(I5,W3r),e(z,H3r),e(z,q5),e(q5,a1e),e(a1e,U3r),e(q5,J3r),e(q5,dW),e(dW,Y3r),e(q5,K3r),e(z,Z3r),e(z,N5),e(N5,n1e),e(n1e,eCr),e(N5,oCr),e(N5,cW),e(cW,rCr),e(N5,tCr),e(z,aCr),e(z,j5),e(j5,s1e),e(s1e,nCr),e(j5,sCr),e(j5,mW),e(mW,lCr),e(j5,iCr),e(z,dCr),e(z,D5),e(D5,l1e),e(l1e,cCr),e(D5,mCr),e(D5,fW),e(fW,fCr),e(D5,gCr),e(z,hCr),e(z,G5),e(G5,i1e),e(i1e,uCr),e(G5,pCr),e(G5,gW),e(gW,_Cr),e(G5,bCr),e(z,vCr),e(z,O5),e(O5,d1e),e(d1e,FCr),e(O5,TCr),e(O5,hW),e(hW,MCr),e(O5,ECr),e(z,CCr),e(z,V5),e(V5,c1e),e(c1e,wCr),e(V5,ACr),e(V5,uW),e(uW,yCr),e(V5,LCr),e(z,xCr),e(z,X5),e(X5,m1e),e(m1e,kCr),e(X5,SCr),e(X5,pW),e(pW,RCr),e(X5,BCr),e(z,PCr),e(z,z5),e(z5,f1e),e(f1e,$Cr),e(z5,ICr),e(z5,_W),e(_W,qCr),e(z5,NCr),e(z,jCr),e(z,Q5),e(Q5,g1e),e(g1e,DCr),e(Q5,GCr),e(Q5,bW),e(bW,OCr),e(Q5,VCr),e(z,XCr),e(z,W5),e(W5,h1e),e(h1e,zCr),e(W5,QCr),e(W5,vW),e(vW,WCr),e(W5,HCr),e(z,UCr),e(z,H5),e(H5,u1e),e(u1e,JCr),e(H5,YCr),e(H5,FW),e(FW,KCr),e(H5,ZCr),e(z,ewr),e(z,U5),e(U5,p1e),e(p1e,owr),e(U5,rwr),e(U5,TW),e(TW,twr),e(U5,awr),e(yo,nwr),e(yo,_1e),e(_1e,swr),e(yo,lwr),g(Z8,yo,null),b(c,pPe,_),b(c,tm,_),e(tm,J5),e(J5,b1e),g(eL,b1e,null),e(tm,iwr),e(tm,v1e),e(v1e,dwr),b(c,_Pe,_),b(c,Br,_),g(oL,Br,null),e(Br,cwr),e(Br,am),e(am,mwr),e(am,MW),e(MW,fwr),e(am,gwr),e(am,EW),e(EW,hwr),e(am,uwr),e(Br,pwr),e(Br,rL),e(rL,_wr),e(rL,F1e),e(F1e,bwr),e(rL,vwr),e(Br,Fwr),e(Br,yt),g(tL,yt,null),e(yt,Twr),e(yt,T1e),e(T1e,Mwr),e(yt,Ewr),e(yt,nm),e(nm,Cwr),e(nm,M1e),e(M1e,wwr),e(nm,Awr),e(nm,CW),e(CW,ywr),e(nm,Lwr),e(yt,xwr),e(yt,E1e),e(E1e,kwr),e(yt,Swr),g(aL,yt,null),e(Br,Rwr),e(Br,Lo),g(nL,Lo,null),e(Lo,Bwr),e(Lo,C1e),e(C1e,Pwr),e(Lo,$wr),e(Lo,Sn),e(Sn,Iwr),e(Sn,w1e),e(w1e,qwr),e(Sn,Nwr),e(Sn,A1e),e(A1e,jwr),e(Sn,Dwr),e(Sn,y1e),e(y1e,Gwr),e(Sn,Owr),e(Lo,Vwr),e(Lo,ca),e(ca,Y5),e(Y5,L1e),e(L1e,Xwr),e(Y5,zwr),e(Y5,wW),e(wW,Qwr),e(Y5,Wwr),e(ca,Hwr),e(ca,K5),e(K5,x1e),e(x1e,Uwr),e(K5,Jwr),e(K5,AW),e(AW,Ywr),e(K5,Kwr),e(ca,Zwr),e(ca,Z5),e(Z5,k1e),e(k1e,e6r),e(Z5,o6r),e(Z5,yW),e(yW,r6r),e(Z5,t6r),e(ca,a6r),e(ca,e3),e(e3,S1e),e(S1e,n6r),e(e3,s6r),e(e3,LW),e(LW,l6r),e(e3,i6r),e(ca,d6r),e(ca,o3),e(o3,R1e),e(R1e,c6r),e(o3,m6r),e(o3,xW),e(xW,f6r),e(o3,g6r),e(Lo,h6r),e(Lo,B1e),e(B1e,u6r),e(Lo,p6r),g(sL,Lo,null),b(c,bPe,_),b(c,sm,_),e(sm,r3),e(r3,P1e),g(lL,P1e,null),e(sm,_6r),e(sm,$1e),e($1e,b6r),b(c,vPe,_),b(c,Pr,_),g(iL,Pr,null),e(Pr,v6r),e(Pr,lm),e(lm,F6r),e(lm,kW),e(kW,T6r),e(lm,M6r),e(lm,SW),e(SW,E6r),e(lm,C6r),e(Pr,w6r),e(Pr,dL),e(dL,A6r),e(dL,I1e),e(I1e,y6r),e(dL,L6r),e(Pr,x6r),e(Pr,Lt),g(cL,Lt,null),e(Lt,k6r),e(Lt,q1e),e(q1e,S6r),e(Lt,R6r),e(Lt,im),e(im,B6r),e(im,N1e),e(N1e,P6r),e(im,$6r),e(im,RW),e(RW,I6r),e(im,q6r),e(Lt,N6r),e(Lt,j1e),e(j1e,j6r),e(Lt,D6r),g(mL,Lt,null),e(Pr,G6r),e(Pr,xo),g(fL,xo,null),e(xo,O6r),e(xo,D1e),e(D1e,V6r),e(xo,X6r),e(xo,Rn),e(Rn,z6r),e(Rn,G1e),e(G1e,Q6r),e(Rn,W6r),e(Rn,O1e),e(O1e,H6r),e(Rn,U6r),e(Rn,V1e),e(V1e,J6r),e(Rn,Y6r),e(xo,K6r),e(xo,fe),e(fe,t3),e(t3,X1e),e(X1e,Z6r),e(t3,eAr),e(t3,BW),e(BW,oAr),e(t3,rAr),e(fe,tAr),e(fe,a3),e(a3,z1e),e(z1e,aAr),e(a3,nAr),e(a3,PW),e(PW,sAr),e(a3,lAr),e(fe,iAr),e(fe,n3),e(n3,Q1e),e(Q1e,dAr),e(n3,cAr),e(n3,$W),e($W,mAr),e(n3,fAr),e(fe,gAr),e(fe,s3),e(s3,W1e),e(W1e,hAr),e(s3,uAr),e(s3,IW),e(IW,pAr),e(s3,_Ar),e(fe,bAr),e(fe,l3),e(l3,H1e),e(H1e,vAr),e(l3,FAr),e(l3,qW),e(qW,TAr),e(l3,MAr),e(fe,EAr),e(fe,i3),e(i3,U1e),e(U1e,CAr),e(i3,wAr),e(i3,NW),e(NW,AAr),e(i3,yAr),e(fe,LAr),e(fe,d3),e(d3,J1e),e(J1e,xAr),e(d3,kAr),e(d3,jW),e(jW,SAr),e(d3,RAr),e(fe,BAr),e(fe,c3),e(c3,Y1e),e(Y1e,PAr),e(c3,$Ar),e(c3,DW),e(DW,IAr),e(c3,qAr),e(fe,NAr),e(fe,m3),e(m3,K1e),e(K1e,jAr),e(m3,DAr),e(m3,GW),e(GW,GAr),e(m3,OAr),e(fe,VAr),e(fe,f3),e(f3,Z1e),e(Z1e,XAr),e(f3,zAr),e(f3,OW),e(OW,QAr),e(f3,WAr),e(fe,HAr),e(fe,g3),e(g3,eTe),e(eTe,UAr),e(g3,JAr),e(g3,VW),e(VW,YAr),e(g3,KAr),e(fe,ZAr),e(fe,h3),e(h3,oTe),e(oTe,e0r),e(h3,o0r),e(h3,XW),e(XW,r0r),e(h3,t0r),e(xo,a0r),e(xo,rTe),e(rTe,n0r),e(xo,s0r),g(gL,xo,null),b(c,FPe,_),b(c,dm,_),e(dm,u3),e(u3,tTe),g(hL,tTe,null),e(dm,l0r),e(dm,aTe),e(aTe,i0r),b(c,TPe,_),b(c,$r,_),g(uL,$r,null),e($r,d0r),e($r,cm),e(cm,c0r),e(cm,zW),e(zW,m0r),e(cm,f0r),e(cm,QW),e(QW,g0r),e(cm,h0r),e($r,u0r),e($r,pL),e(pL,p0r),e(pL,nTe),e(nTe,_0r),e(pL,b0r),e($r,v0r),e($r,xt),g(_L,xt,null),e(xt,F0r),e(xt,sTe),e(sTe,T0r),e(xt,M0r),e(xt,mm),e(mm,E0r),e(mm,lTe),e(lTe,C0r),e(mm,w0r),e(mm,WW),e(WW,A0r),e(mm,y0r),e(xt,L0r),e(xt,iTe),e(iTe,x0r),e(xt,k0r),g(bL,xt,null),e($r,S0r),e($r,ko),g(vL,ko,null),e(ko,R0r),e(ko,dTe),e(dTe,B0r),e(ko,P0r),e(ko,Bn),e(Bn,$0r),e(Bn,cTe),e(cTe,I0r),e(Bn,q0r),e(Bn,mTe),e(mTe,N0r),e(Bn,j0r),e(Bn,fTe),e(fTe,D0r),e(Bn,G0r),e(ko,O0r),e(ko,ve),e(ve,p3),e(p3,gTe),e(gTe,V0r),e(p3,X0r),e(p3,HW),e(HW,z0r),e(p3,Q0r),e(ve,W0r),e(ve,_3),e(_3,hTe),e(hTe,H0r),e(_3,U0r),e(_3,UW),e(UW,J0r),e(_3,Y0r),e(ve,K0r),e(ve,b3),e(b3,uTe),e(uTe,Z0r),e(b3,eyr),e(b3,JW),e(JW,oyr),e(b3,ryr),e(ve,tyr),e(ve,v3),e(v3,pTe),e(pTe,ayr),e(v3,nyr),e(v3,YW),e(YW,syr),e(v3,lyr),e(ve,iyr),e(ve,F3),e(F3,_Te),e(_Te,dyr),e(F3,cyr),e(F3,KW),e(KW,myr),e(F3,fyr),e(ve,gyr),e(ve,T3),e(T3,bTe),e(bTe,hyr),e(T3,uyr),e(T3,ZW),e(ZW,pyr),e(T3,_yr),e(ve,byr),e(ve,M3),e(M3,vTe),e(vTe,vyr),e(M3,Fyr),e(M3,eH),e(eH,Tyr),e(M3,Myr),e(ve,Eyr),e(ve,E3),e(E3,FTe),e(FTe,Cyr),e(E3,wyr),e(E3,oH),e(oH,Ayr),e(E3,yyr),e(ve,Lyr),e(ve,C3),e(C3,TTe),e(TTe,xyr),e(C3,kyr),e(C3,rH),e(rH,Syr),e(C3,Ryr),e(ve,Byr),e(ve,w3),e(w3,MTe),e(MTe,Pyr),e(w3,$yr),e(w3,tH),e(tH,Iyr),e(w3,qyr),e(ko,Nyr),e(ko,ETe),e(ETe,jyr),e(ko,Dyr),g(FL,ko,null),b(c,MPe,_),b(c,fm,_),e(fm,A3),e(A3,CTe),g(TL,CTe,null),e(fm,Gyr),e(fm,wTe),e(wTe,Oyr),b(c,EPe,_),b(c,Ir,_),g(ML,Ir,null),e(Ir,Vyr),e(Ir,gm),e(gm,Xyr),e(gm,aH),e(aH,zyr),e(gm,Qyr),e(gm,nH),e(nH,Wyr),e(gm,Hyr),e(Ir,Uyr),e(Ir,EL),e(EL,Jyr),e(EL,ATe),e(ATe,Yyr),e(EL,Kyr),e(Ir,Zyr),e(Ir,kt),g(CL,kt,null),e(kt,e8r),e(kt,yTe),e(yTe,o8r),e(kt,r8r),e(kt,hm),e(hm,t8r),e(hm,LTe),e(LTe,a8r),e(hm,n8r),e(hm,sH),e(sH,s8r),e(hm,l8r),e(kt,i8r),e(kt,xTe),e(xTe,d8r),e(kt,c8r),g(wL,kt,null),e(Ir,m8r),e(Ir,So),g(AL,So,null),e(So,f8r),e(So,kTe),e(kTe,g8r),e(So,h8r),e(So,Pn),e(Pn,u8r),e(Pn,STe),e(STe,p8r),e(Pn,_8r),e(Pn,RTe),e(RTe,b8r),e(Pn,v8r),e(Pn,BTe),e(BTe,F8r),e(Pn,T8r),e(So,M8r),e(So,Ee),e(Ee,y3),e(y3,PTe),e(PTe,E8r),e(y3,C8r),e(y3,lH),e(lH,w8r),e(y3,A8r),e(Ee,y8r),e(Ee,L3),e(L3,$Te),e($Te,L8r),e(L3,x8r),e(L3,iH),e(iH,k8r),e(L3,S8r),e(Ee,R8r),e(Ee,x3),e(x3,ITe),e(ITe,B8r),e(x3,P8r),e(x3,dH),e(dH,$8r),e(x3,I8r),e(Ee,q8r),e(Ee,k3),e(k3,qTe),e(qTe,N8r),e(k3,j8r),e(k3,cH),e(cH,D8r),e(k3,G8r),e(Ee,O8r),e(Ee,S3),e(S3,NTe),e(NTe,V8r),e(S3,X8r),e(S3,mH),e(mH,z8r),e(S3,Q8r),e(Ee,W8r),e(Ee,R3),e(R3,jTe),e(jTe,H8r),e(R3,U8r),e(R3,fH),e(fH,J8r),e(R3,Y8r),e(Ee,K8r),e(Ee,B3),e(B3,DTe),e(DTe,Z8r),e(B3,eLr),e(B3,gH),e(gH,oLr),e(B3,rLr),e(Ee,tLr),e(Ee,P3),e(P3,GTe),e(GTe,aLr),e(P3,nLr),e(P3,hH),e(hH,sLr),e(P3,lLr),e(Ee,iLr),e(Ee,$3),e($3,OTe),e(OTe,dLr),e($3,cLr),e($3,uH),e(uH,mLr),e($3,fLr),e(So,gLr),e(So,VTe),e(VTe,hLr),e(So,uLr),g(yL,So,null),b(c,CPe,_),b(c,um,_),e(um,I3),e(I3,XTe),g(LL,XTe,null),e(um,pLr),e(um,zTe),e(zTe,_Lr),b(c,wPe,_),b(c,qr,_),g(xL,qr,null),e(qr,bLr),e(qr,pm),e(pm,vLr),e(pm,pH),e(pH,FLr),e(pm,TLr),e(pm,_H),e(_H,MLr),e(pm,ELr),e(qr,CLr),e(qr,kL),e(kL,wLr),e(kL,QTe),e(QTe,ALr),e(kL,yLr),e(qr,LLr),e(qr,St),g(SL,St,null),e(St,xLr),e(St,WTe),e(WTe,kLr),e(St,SLr),e(St,_m),e(_m,RLr),e(_m,HTe),e(HTe,BLr),e(_m,PLr),e(_m,bH),e(bH,$Lr),e(_m,ILr),e(St,qLr),e(St,UTe),e(UTe,NLr),e(St,jLr),g(RL,St,null),e(qr,DLr),e(qr,Ro),g(BL,Ro,null),e(Ro,GLr),e(Ro,JTe),e(JTe,OLr),e(Ro,VLr),e(Ro,$n),e($n,XLr),e($n,YTe),e(YTe,zLr),e($n,QLr),e($n,KTe),e(KTe,WLr),e($n,HLr),e($n,ZTe),e(ZTe,ULr),e($n,JLr),e(Ro,YLr),e(Ro,Fe),e(Fe,q3),e(q3,eMe),e(eMe,KLr),e(q3,ZLr),e(q3,vH),e(vH,e7r),e(q3,o7r),e(Fe,r7r),e(Fe,N3),e(N3,oMe),e(oMe,t7r),e(N3,a7r),e(N3,FH),e(FH,n7r),e(N3,s7r),e(Fe,l7r),e(Fe,j3),e(j3,rMe),e(rMe,i7r),e(j3,d7r),e(j3,TH),e(TH,c7r),e(j3,m7r),e(Fe,f7r),e(Fe,D3),e(D3,tMe),e(tMe,g7r),e(D3,h7r),e(D3,MH),e(MH,u7r),e(D3,p7r),e(Fe,_7r),e(Fe,G3),e(G3,aMe),e(aMe,b7r),e(G3,v7r),e(G3,EH),e(EH,F7r),e(G3,T7r),e(Fe,M7r),e(Fe,O3),e(O3,nMe),e(nMe,E7r),e(O3,C7r),e(O3,CH),e(CH,w7r),e(O3,A7r),e(Fe,y7r),e(Fe,V3),e(V3,sMe),e(sMe,L7r),e(V3,x7r),e(V3,wH),e(wH,k7r),e(V3,S7r),e(Fe,R7r),e(Fe,X3),e(X3,lMe),e(lMe,B7r),e(X3,P7r),e(X3,AH),e(AH,$7r),e(X3,I7r),e(Fe,q7r),e(Fe,z3),e(z3,iMe),e(iMe,N7r),e(z3,j7r),e(z3,yH),e(yH,D7r),e(z3,G7r),e(Fe,O7r),e(Fe,Q3),e(Q3,dMe),e(dMe,V7r),e(Q3,X7r),e(Q3,LH),e(LH,z7r),e(Q3,Q7r),e(Ro,W7r),e(Ro,cMe),e(cMe,H7r),e(Ro,U7r),g(PL,Ro,null),b(c,APe,_),b(c,bm,_),e(bm,W3),e(W3,mMe),g($L,mMe,null),e(bm,J7r),e(bm,fMe),e(fMe,Y7r),b(c,yPe,_),b(c,Nr,_),g(IL,Nr,null),e(Nr,K7r),e(Nr,vm),e(vm,Z7r),e(vm,xH),e(xH,e9r),e(vm,o9r),e(vm,kH),e(kH,r9r),e(vm,t9r),e(Nr,a9r),e(Nr,qL),e(qL,n9r),e(qL,gMe),e(gMe,s9r),e(qL,l9r),e(Nr,i9r),e(Nr,Rt),g(NL,Rt,null),e(Rt,d9r),e(Rt,hMe),e(hMe,c9r),e(Rt,m9r),e(Rt,Fm),e(Fm,f9r),e(Fm,uMe),e(uMe,g9r),e(Fm,h9r),e(Fm,SH),e(SH,u9r),e(Fm,p9r),e(Rt,_9r),e(Rt,pMe),e(pMe,b9r),e(Rt,v9r),g(jL,Rt,null),e(Nr,F9r),e(Nr,Bo),g(DL,Bo,null),e(Bo,T9r),e(Bo,_Me),e(_Me,M9r),e(Bo,E9r),e(Bo,In),e(In,C9r),e(In,bMe),e(bMe,w9r),e(In,A9r),e(In,vMe),e(vMe,y9r),e(In,L9r),e(In,FMe),e(FMe,x9r),e(In,k9r),e(Bo,S9r),e(Bo,Te),e(Te,H3),e(H3,TMe),e(TMe,R9r),e(H3,B9r),e(H3,RH),e(RH,P9r),e(H3,$9r),e(Te,I9r),e(Te,U3),e(U3,MMe),e(MMe,q9r),e(U3,N9r),e(U3,BH),e(BH,j9r),e(U3,D9r),e(Te,G9r),e(Te,J3),e(J3,EMe),e(EMe,O9r),e(J3,V9r),e(J3,PH),e(PH,X9r),e(J3,z9r),e(Te,Q9r),e(Te,Y3),e(Y3,CMe),e(CMe,W9r),e(Y3,H9r),e(Y3,$H),e($H,U9r),e(Y3,J9r),e(Te,Y9r),e(Te,K3),e(K3,wMe),e(wMe,K9r),e(K3,Z9r),e(K3,IH),e(IH,exr),e(K3,oxr),e(Te,rxr),e(Te,Z3),e(Z3,AMe),e(AMe,txr),e(Z3,axr),e(Z3,qH),e(qH,nxr),e(Z3,sxr),e(Te,lxr),e(Te,eC),e(eC,yMe),e(yMe,ixr),e(eC,dxr),e(eC,NH),e(NH,cxr),e(eC,mxr),e(Te,fxr),e(Te,oC),e(oC,LMe),e(LMe,gxr),e(oC,hxr),e(oC,jH),e(jH,uxr),e(oC,pxr),e(Te,_xr),e(Te,rC),e(rC,xMe),e(xMe,bxr),e(rC,vxr),e(rC,DH),e(DH,Fxr),e(rC,Txr),e(Te,Mxr),e(Te,tC),e(tC,kMe),e(kMe,Exr),e(tC,Cxr),e(tC,GH),e(GH,wxr),e(tC,Axr),e(Bo,yxr),e(Bo,SMe),e(SMe,Lxr),e(Bo,xxr),g(GL,Bo,null),b(c,LPe,_),b(c,Tm,_),e(Tm,aC),e(aC,RMe),g(OL,RMe,null),e(Tm,kxr),e(Tm,BMe),e(BMe,Sxr),b(c,xPe,_),b(c,jr,_),g(VL,jr,null),e(jr,Rxr),e(jr,Mm),e(Mm,Bxr),e(Mm,OH),e(OH,Pxr),e(Mm,$xr),e(Mm,VH),e(VH,Ixr),e(Mm,qxr),e(jr,Nxr),e(jr,XL),e(XL,jxr),e(XL,PMe),e(PMe,Dxr),e(XL,Gxr),e(jr,Oxr),e(jr,Bt),g(zL,Bt,null),e(Bt,Vxr),e(Bt,$Me),e($Me,Xxr),e(Bt,zxr),e(Bt,Em),e(Em,Qxr),e(Em,IMe),e(IMe,Wxr),e(Em,Hxr),e(Em,XH),e(XH,Uxr),e(Em,Jxr),e(Bt,Yxr),e(Bt,qMe),e(qMe,Kxr),e(Bt,Zxr),g(QL,Bt,null),e(jr,ekr),e(jr,Po),g(WL,Po,null),e(Po,okr),e(Po,NMe),e(NMe,rkr),e(Po,tkr),e(Po,qn),e(qn,akr),e(qn,jMe),e(jMe,nkr),e(qn,skr),e(qn,DMe),e(DMe,lkr),e(qn,ikr),e(qn,GMe),e(GMe,dkr),e(qn,ckr),e(Po,mkr),e(Po,Be),e(Be,nC),e(nC,OMe),e(OMe,fkr),e(nC,gkr),e(nC,zH),e(zH,hkr),e(nC,ukr),e(Be,pkr),e(Be,sC),e(sC,VMe),e(VMe,_kr),e(sC,bkr),e(sC,QH),e(QH,vkr),e(sC,Fkr),e(Be,Tkr),e(Be,lC),e(lC,XMe),e(XMe,Mkr),e(lC,Ekr),e(lC,WH),e(WH,Ckr),e(lC,wkr),e(Be,Akr),e(Be,iC),e(iC,zMe),e(zMe,ykr),e(iC,Lkr),e(iC,HH),e(HH,xkr),e(iC,kkr),e(Be,Skr),e(Be,dC),e(dC,QMe),e(QMe,Rkr),e(dC,Bkr),e(dC,UH),e(UH,Pkr),e(dC,$kr),e(Be,Ikr),e(Be,cC),e(cC,WMe),e(WMe,qkr),e(cC,Nkr),e(cC,JH),e(JH,jkr),e(cC,Dkr),e(Be,Gkr),e(Be,mC),e(mC,HMe),e(HMe,Okr),e(mC,Vkr),e(mC,YH),e(YH,Xkr),e(mC,zkr),e(Be,Qkr),e(Be,fC),e(fC,UMe),e(UMe,Wkr),e(fC,Hkr),e(fC,KH),e(KH,Ukr),e(fC,Jkr),e(Po,Ykr),e(Po,JMe),e(JMe,Kkr),e(Po,Zkr),g(HL,Po,null),b(c,kPe,_),b(c,Cm,_),e(Cm,gC),e(gC,YMe),g(UL,YMe,null),e(Cm,eSr),e(Cm,KMe),e(KMe,oSr),b(c,SPe,_),b(c,Dr,_),g(JL,Dr,null),e(Dr,rSr),e(Dr,wm),e(wm,tSr),e(wm,ZH),e(ZH,aSr),e(wm,nSr),e(wm,eU),e(eU,sSr),e(wm,lSr),e(Dr,iSr),e(Dr,YL),e(YL,dSr),e(YL,ZMe),e(ZMe,cSr),e(YL,mSr),e(Dr,fSr),e(Dr,Pt),g(KL,Pt,null),e(Pt,gSr),e(Pt,e4e),e(e4e,hSr),e(Pt,uSr),e(Pt,Am),e(Am,pSr),e(Am,o4e),e(o4e,_Sr),e(Am,bSr),e(Am,oU),e(oU,vSr),e(Am,FSr),e(Pt,TSr),e(Pt,r4e),e(r4e,MSr),e(Pt,ESr),g(ZL,Pt,null),e(Dr,CSr),e(Dr,$o),g(e7,$o,null),e($o,wSr),e($o,t4e),e(t4e,ASr),e($o,ySr),e($o,Nn),e(Nn,LSr),e(Nn,a4e),e(a4e,xSr),e(Nn,kSr),e(Nn,n4e),e(n4e,SSr),e(Nn,RSr),e(Nn,s4e),e(s4e,BSr),e(Nn,PSr),e($o,$Sr),e($o,Pe),e(Pe,hC),e(hC,l4e),e(l4e,ISr),e(hC,qSr),e(hC,rU),e(rU,NSr),e(hC,jSr),e(Pe,DSr),e(Pe,uC),e(uC,i4e),e(i4e,GSr),e(uC,OSr),e(uC,tU),e(tU,VSr),e(uC,XSr),e(Pe,zSr),e(Pe,pC),e(pC,d4e),e(d4e,QSr),e(pC,WSr),e(pC,aU),e(aU,HSr),e(pC,USr),e(Pe,JSr),e(Pe,_C),e(_C,c4e),e(c4e,YSr),e(_C,KSr),e(_C,nU),e(nU,ZSr),e(_C,eRr),e(Pe,oRr),e(Pe,bC),e(bC,m4e),e(m4e,rRr),e(bC,tRr),e(bC,sU),e(sU,aRr),e(bC,nRr),e(Pe,sRr),e(Pe,vC),e(vC,f4e),e(f4e,lRr),e(vC,iRr),e(vC,lU),e(lU,dRr),e(vC,cRr),e(Pe,mRr),e(Pe,FC),e(FC,g4e),e(g4e,fRr),e(FC,gRr),e(FC,iU),e(iU,hRr),e(FC,uRr),e(Pe,pRr),e(Pe,TC),e(TC,h4e),e(h4e,_Rr),e(TC,bRr),e(TC,dU),e(dU,vRr),e(TC,FRr),e($o,TRr),e($o,u4e),e(u4e,MRr),e($o,ERr),g(o7,$o,null),b(c,RPe,_),b(c,ym,_),e(ym,MC),e(MC,p4e),g(r7,p4e,null),e(ym,CRr),e(ym,_4e),e(_4e,wRr),b(c,BPe,_),b(c,Gr,_),g(t7,Gr,null),e(Gr,ARr),e(Gr,Lm),e(Lm,yRr),e(Lm,cU),e(cU,LRr),e(Lm,xRr),e(Lm,mU),e(mU,kRr),e(Lm,SRr),e(Gr,RRr),e(Gr,a7),e(a7,BRr),e(a7,b4e),e(b4e,PRr),e(a7,$Rr),e(Gr,IRr),e(Gr,$t),g(n7,$t,null),e($t,qRr),e($t,v4e),e(v4e,NRr),e($t,jRr),e($t,xm),e(xm,DRr),e(xm,F4e),e(F4e,GRr),e(xm,ORr),e(xm,fU),e(fU,VRr),e(xm,XRr),e($t,zRr),e($t,T4e),e(T4e,QRr),e($t,WRr),g(s7,$t,null),e(Gr,HRr),e(Gr,Io),g(l7,Io,null),e(Io,URr),e(Io,M4e),e(M4e,JRr),e(Io,YRr),e(Io,jn),e(jn,KRr),e(jn,E4e),e(E4e,ZRr),e(jn,eBr),e(jn,C4e),e(C4e,oBr),e(jn,rBr),e(jn,w4e),e(w4e,tBr),e(jn,aBr),e(Io,nBr),e(Io,A4e),e(A4e,EC),e(EC,y4e),e(y4e,sBr),e(EC,lBr),e(EC,gU),e(gU,iBr),e(EC,dBr),e(Io,cBr),e(Io,L4e),e(L4e,mBr),e(Io,fBr),g(i7,Io,null),b(c,PPe,_),b(c,km,_),e(km,CC),e(CC,x4e),g(d7,x4e,null),e(km,gBr),e(km,k4e),e(k4e,hBr),b(c,$Pe,_),b(c,Or,_),g(c7,Or,null),e(Or,uBr),e(Or,Sm),e(Sm,pBr),e(Sm,hU),e(hU,_Br),e(Sm,bBr),e(Sm,uU),e(uU,vBr),e(Sm,FBr),e(Or,TBr),e(Or,m7),e(m7,MBr),e(m7,S4e),e(S4e,EBr),e(m7,CBr),e(Or,wBr),e(Or,It),g(f7,It,null),e(It,ABr),e(It,R4e),e(R4e,yBr),e(It,LBr),e(It,Rm),e(Rm,xBr),e(Rm,B4e),e(B4e,kBr),e(Rm,SBr),e(Rm,pU),e(pU,RBr),e(Rm,BBr),e(It,PBr),e(It,P4e),e(P4e,$Br),e(It,IBr),g(g7,It,null),e(Or,qBr),e(Or,qo),g(h7,qo,null),e(qo,NBr),e(qo,$4e),e($4e,jBr),e(qo,DBr),e(qo,Dn),e(Dn,GBr),e(Dn,I4e),e(I4e,OBr),e(Dn,VBr),e(Dn,q4e),e(q4e,XBr),e(Dn,zBr),e(Dn,N4e),e(N4e,QBr),e(Dn,WBr),e(qo,HBr),e(qo,u7),e(u7,wC),e(wC,j4e),e(j4e,UBr),e(wC,JBr),e(wC,_U),e(_U,YBr),e(wC,KBr),e(u7,ZBr),e(u7,AC),e(AC,D4e),e(D4e,ePr),e(AC,oPr),e(AC,bU),e(bU,rPr),e(AC,tPr),e(qo,aPr),e(qo,G4e),e(G4e,nPr),e(qo,sPr),g(p7,qo,null),b(c,IPe,_),b(c,Bm,_),e(Bm,yC),e(yC,O4e),g(_7,O4e,null),e(Bm,lPr),e(Bm,V4e),e(V4e,iPr),b(c,qPe,_),b(c,Vr,_),g(b7,Vr,null),e(Vr,dPr),e(Vr,Pm),e(Pm,cPr),e(Pm,vU),e(vU,mPr),e(Pm,fPr),e(Pm,FU),e(FU,gPr),e(Pm,hPr),e(Vr,uPr),e(Vr,v7),e(v7,pPr),e(v7,X4e),e(X4e,_Pr),e(v7,bPr),e(Vr,vPr),e(Vr,qt),g(F7,qt,null),e(qt,FPr),e(qt,z4e),e(z4e,TPr),e(qt,MPr),e(qt,$m),e($m,EPr),e($m,Q4e),e(Q4e,CPr),e($m,wPr),e($m,TU),e(TU,APr),e($m,yPr),e(qt,LPr),e(qt,W4e),e(W4e,xPr),e(qt,kPr),g(T7,qt,null),e(Vr,SPr),e(Vr,No),g(M7,No,null),e(No,RPr),e(No,H4e),e(H4e,BPr),e(No,PPr),e(No,Gn),e(Gn,$Pr),e(Gn,U4e),e(U4e,IPr),e(Gn,qPr),e(Gn,J4e),e(J4e,NPr),e(Gn,jPr),e(Gn,Y4e),e(Y4e,DPr),e(Gn,GPr),e(No,OPr),e(No,K4e),e(K4e,LC),e(LC,Z4e),e(Z4e,VPr),e(LC,XPr),e(LC,MU),e(MU,zPr),e(LC,QPr),e(No,WPr),e(No,eEe),e(eEe,HPr),e(No,UPr),g(E7,No,null),NPe=!0},p(c,[_]){const C7={};_&2&&(C7.$$scope={dirty:_,ctx:c}),Vm.$set(C7);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:c}),Nh.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:c}),Uh.$set(rEe)},i(c){NPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(Vm.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Zw.$$.fragment,c),h(Nh.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(s6.$$.fragment,c),h(Uh.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(f8.$$.fragment,c),h(g8.$$.fragment,c),h(u8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),h(T7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),NPe=!0)},o(c){u(he.$$.fragment,c),u(Da.$$.fragment,c),u(Bw.$$.fragment,c),u(Pw.$$.fragment,c),u(Vm.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Gw.$$.fragment,c),u(Ow.$$.fragment,c),u(Vw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Hw.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Zw.$$.fragment,c),u(Nh.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(s6.$$.fragment,c),u(Uh.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(_6.$$.fragment,c),u(v6.$$.fragment,c),u(F6.$$.fragment,c),u(T6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(C6.$$.fragment,c),u(A6.$$.fragment,c),u(y6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(S6.$$.fragment,c),u(B6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(q6.$$.fragment,c),u(N6.$$.fragment,c),u(D6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(X6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(vA.$$.fragment,c),u(TA.$$.fragment,c),u(MA.$$.fragment,c),u(EA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(LA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(BA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(qA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(DA.$$.fragment,c),u(OA.$$.fragment,c),u(VA.$$.fragment,c),u(XA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(WA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(e0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(l0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(h0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(b0.$$.fragment,c),u(F0.$$.fragment,c),u(T0.$$.fragment,c),u(M0.$$.fragment,c),u(C0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(y0.$$.fragment,c),u(L0.$$.fragment,c),u(x0.$$.fragment,c),u(S0.$$.fragment,c),u(R0.$$.fragment,c),u(B0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(I0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(D0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(V0.$$.fragment,c),u(z0.$$.fragment,c),u(Q0.$$.fragment,c),u(W0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(J0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(ey.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(ty.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(cy.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(_y.$$.fragment,c),u(vy.$$.fragment,c),u(Fy.$$.fragment,c),u(Ty.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(Cy.$$.fragment,c),u(Ay.$$.fragment,c),u(yy.$$.fragment,c),u(Ly.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Sy.$$.fragment,c),u(By.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(qy.$$.fragment,c),u(Ny.$$.fragment,c),u(jy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Vy.$$.fragment,c),u(Xy.$$.fragment,c),u(zy.$$.fragment,c),u(Qy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(Zy.$$.fragment,c),u(o8.$$.fragment,c),u(r8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),u(n8.$$.fragment,c),u(s8.$$.fragment,c),u(i8.$$.fragment,c),u(d8.$$.fragment,c),u(c8.$$.fragment,c),u(m8.$$.fragment,c),u(f8.$$.fragment,c),u(g8.$$.fragment,c),u(u8.$$.fragment,c),u(p8.$$.fragment,c),u(_8.$$.fragment,c),u(b8.$$.fragment,c),u(v8.$$.fragment,c),u(F8.$$.fragment,c),u(M8.$$.fragment,c),u(E8.$$.fragment,c),u(C8.$$.fragment,c),u(w8.$$.fragment,c),u(A8.$$.fragment,c),u(y8.$$.fragment,c),u(x8.$$.fragment,c),u(k8.$$.fragment,c),u(S8.$$.fragment,c),u(R8.$$.fragment,c),u(B8.$$.fragment,c),u(P8.$$.fragment,c),u(I8.$$.fragment,c),u(q8.$$.fragment,c),u(N8.$$.fragment,c),u(j8.$$.fragment,c),u(D8.$$.fragment,c),u(G8.$$.fragment,c),u(V8.$$.fragment,c),u(X8.$$.fragment,c),u(z8.$$.fragment,c),u(Q8.$$.fragment,c),u(W8.$$.fragment,c),u(H8.$$.fragment,c),u(J8.$$.fragment,c),u(Y8.$$.fragment,c),u(K8.$$.fragment,c),u(Z8.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(cL.$$.fragment,c),u(mL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(_L.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(FL.$$.fragment,c),u(TL.$$.fragment,c),u(ML.$$.fragment,c),u(CL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(xL.$$.fragment,c),u(SL.$$.fragment,c),u(RL.$$.fragment,c),u(BL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(NL.$$.fragment,c),u(jL.$$.fragment,c),u(DL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(VL.$$.fragment,c),u(zL.$$.fragment,c),u(QL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(n7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),u(h7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(b7.$$.fragment,c),u(F7.$$.fragment,c),u(T7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),NPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),p(he),c&&t(Nm),c&&t(ma),c&&t(xe),c&&t(co),c&&t(Dm),p(Da,c),c&&t(mo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(qRe),c&&t(Qi),p(Bw),c&&t(NRe),c&&t(Qn),c&&t(jRe),p(Pw,c),c&&t(DRe),c&&t(L9),c&&t(GRe),p(Vm,c),c&&t(ORe),c&&t(Wi),p($w),c&&t(VRe),c&&t(Qo),p(Iw),p(jw),p(Dw),p(Gw),c&&t(XRe),c&&t(Ui),p(Ow),c&&t(zRe),c&&t(Wo),p(Vw),p(Qw),p(Ww),p(Hw),c&&t(QRe),c&&t(Ji),p(Uw),c&&t(WRe),c&&t(Ho),p(Jw),p(Zw),p(Nh),p(e6),p(o6),c&&t(HRe),c&&t(Yi),p(r6),c&&t(URe),c&&t(Uo),p(t6),p(s6),p(Uh),p(l6),p(i6),c&&t(JRe),c&&t(Zi),p(d6),c&&t(YRe),c&&t(Jo),p(c6),p(f6),p(g6),p(h6),p(u6),c&&t(KRe),c&&t(rd),p(p6),c&&t(ZRe),c&&t(Yo),p(_6),p(v6),p(F6),p(T6),p(M6),c&&t(eBe),c&&t(nd),p(E6),c&&t(oBe),c&&t(Ko),p(C6),p(A6),p(y6),p(L6),p(x6),c&&t(rBe),c&&t(id),p(k6),c&&t(tBe),c&&t(Zo),p(S6),p(B6),p(P6),p($6),p(I6),c&&t(aBe),c&&t(md),p(q6),c&&t(nBe),c&&t(er),p(N6),p(D6),p(G6),p(O6),p(V6),c&&t(sBe),c&&t(hd),p(X6),c&&t(lBe),c&&t(or),p(z6),p(W6),p(H6),p(U6),p(J6),c&&t(iBe),c&&t(_d),p(Y6),c&&t(dBe),c&&t(rr),p(K6),p(eA),p(oA),p(rA),p(tA),c&&t(cBe),c&&t(Fd),p(aA),c&&t(mBe),c&&t(tr),p(nA),p(lA),p(iA),p(dA),p(cA),c&&t(fBe),c&&t(Ed),p(mA),c&&t(gBe),c&&t(ar),p(fA),p(hA),p(uA),p(pA),p(_A),c&&t(hBe),c&&t(Ad),p(bA),c&&t(uBe),c&&t(nr),p(vA),p(TA),p(MA),p(EA),p(CA),c&&t(pBe),c&&t(xd),p(wA),c&&t(_Be),c&&t(sr),p(AA),p(LA),p(xA),p(kA),p(SA),c&&t(bBe),c&&t(Rd),p(RA),c&&t(vBe),c&&t(lr),p(BA),p($A),p(IA),p(qA),p(NA),c&&t(FBe),c&&t($d),p(jA),c&&t(TBe),c&&t(ir),p(DA),p(OA),p(VA),p(XA),p(zA),c&&t(MBe),c&&t(Nd),p(QA),c&&t(EBe),c&&t(dr),p(WA),p(UA),p(JA),p(YA),p(KA),c&&t(CBe),c&&t(Gd),p(ZA),c&&t(wBe),c&&t(cr),p(e0),p(r0),p(t0),p(a0),p(n0),c&&t(ABe),c&&t(Xd),p(s0),c&&t(yBe),c&&t(mr),p(l0),p(d0),p(c0),p(m0),p(f0),c&&t(LBe),c&&t(Wd),p(g0),c&&t(xBe),c&&t(fr),p(h0),p(p0),p(_0),p(b0),p(F0),c&&t(kBe),c&&t(Jd),p(T0),c&&t(SBe),c&&t(gr),p(M0),p(C0),p(w0),p(A0),p(y0),c&&t(RBe),c&&t(Zd),p(L0),c&&t(BBe),c&&t(hr),p(x0),p(S0),p(R0),p(B0),p(P0),c&&t(PBe),c&&t(tc),p($0),c&&t($Be),c&&t(ur),p(I0),p(N0),p(j0),p(D0),p(G0),c&&t(IBe),c&&t(sc),p(O0),c&&t(qBe),c&&t(pr),p(V0),p(z0),p(Q0),p(W0),p(H0),c&&t(NBe),c&&t(dc),p(U0),c&&t(jBe),c&&t(_r),p(J0),p(K0),p(Z0),p(ey),p(oy),c&&t(DBe),c&&t(fc),p(ry),c&&t(GBe),c&&t(br),p(ty),p(ny),p(sy),p(ly),p(iy),c&&t(OBe),c&&t(uc),p(dy),c&&t(VBe),c&&t(vr),p(cy),p(fy),p(gy),p(hy),p(uy),c&&t(XBe),c&&t(bc),p(py),c&&t(zBe),c&&t(Fr),p(_y),p(vy),p(Fy),p(Ty),p(My),c&&t(QBe),c&&t(Tc),p(Ey),c&&t(WBe),c&&t(Tr),p(Cy),p(Ay),p(yy),p(Ly),p(xy),c&&t(HBe),c&&t(Cc),p(ky),c&&t(UBe),c&&t(Mr),p(Sy),p(By),p(Py),p($y),p(qy),c&&t(JBe),c&&t(yc),p(Ny),c&&t(YBe),c&&t(Er),p(jy),p(Gy),p(Oy),p(Vy),p(Xy),c&&t(KBe),c&&t(kc),p(zy),c&&t(ZBe),c&&t(Cr),p(Qy),p(Hy),p(Uy),p(Jy),p(Yy),c&&t(ePe),c&&t(Bc),p(Ky),c&&t(oPe),c&&t(wr),p(Zy),p(o8),p(r8),p(t8),p(a8),c&&t(rPe),c&&t(Ic),p(n8),c&&t(tPe),c&&t(Ar),p(s8),p(i8),p(d8),p(c8),p(m8),c&&t(aPe),c&&t(jc),p(f8),c&&t(nPe),c&&t(yr),p(g8),p(u8),p(p8),p(_8),p(b8),c&&t(sPe),c&&t(Oc),p(v8),c&&t(lPe),c&&t(Lr),p(F8),p(M8),p(E8),p(C8),p(w8),c&&t(iPe),c&&t(zc),p(A8),c&&t(dPe),c&&t(xr),p(y8),p(x8),p(k8),p(S8),p(R8),c&&t(cPe),c&&t(Hc),p(B8),c&&t(mPe),c&&t(kr),p(P8),p(I8),p(q8),p(N8),p(j8),c&&t(fPe),c&&t(Yc),p(D8),c&&t(gPe),c&&t(Sr),p(G8),p(V8),p(X8),p(z8),p(Q8),c&&t(hPe),c&&t(em),p(W8),c&&t(uPe),c&&t(Rr),p(H8),p(J8),p(Y8),p(K8),p(Z8),c&&t(pPe),c&&t(tm),p(eL),c&&t(_Pe),c&&t(Br),p(oL),p(tL),p(aL),p(nL),p(sL),c&&t(bPe),c&&t(sm),p(lL),c&&t(vPe),c&&t(Pr),p(iL),p(cL),p(mL),p(fL),p(gL),c&&t(FPe),c&&t(dm),p(hL),c&&t(TPe),c&&t($r),p(uL),p(_L),p(bL),p(vL),p(FL),c&&t(MPe),c&&t(fm),p(TL),c&&t(EPe),c&&t(Ir),p(ML),p(CL),p(wL),p(AL),p(yL),c&&t(CPe),c&&t(um),p(LL),c&&t(wPe),c&&t(qr),p(xL),p(SL),p(RL),p(BL),p(PL),c&&t(APe),c&&t(bm),p($L),c&&t(yPe),c&&t(Nr),p(IL),p(NL),p(jL),p(DL),p(GL),c&&t(LPe),c&&t(Tm),p(OL),c&&t(xPe),c&&t(jr),p(VL),p(zL),p(QL),p(WL),p(HL),c&&t(kPe),c&&t(Cm),p(UL),c&&t(SPe),c&&t(Dr),p(JL),p(KL),p(ZL),p(e7),p(o7),c&&t(RPe),c&&t(ym),p(r7),c&&t(BPe),c&&t(Gr),p(t7),p(n7),p(s7),p(l7),p(i7),c&&t(PPe),c&&t(km),p(d7),c&&t($Pe),c&&t(Or),p(c7),p(f7),p(g7),p(h7),p(p7),c&&t(IPe),c&&t(Bm),p(_7),c&&t(qPe),c&&t(Vr),p(b7),p(F7),p(T7),p(M7),p(E7)}}}const H6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function U6t(qm){return V6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class oAt extends j6t{constructor(Z){super();D6t(this,Z,U6t,W6t,G6t,{})}}export{oAt as default,H6t as metadata};
