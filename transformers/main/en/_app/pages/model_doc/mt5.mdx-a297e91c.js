import{S as Xd,i as Kd,s as Jd,e as n,k as d,w as f,t as o,M as Qd,c as r,d as s,m as p,a,x as h,h as i,b as l,F as e,g as c,y as u,L as Yd,q as g,o as _,B as k,v as Zd}from"../../chunks/vendor-6b77c823.js";import{D as T}from"../../chunks/Docstring-af1d0ae0.js";import{C as Ce}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as C}from"../../chunks/IconCopyLink-7a11ce68.js";function ep(sl){let G,$n,O,se,vs,Pe,Lr,Ts,Nr,wn,V,ne,$s,Ae,Dr,ws,Ir,yn,re,Gr,Se,Or,Vr,bn,Ut,Ur,zn,Wt,ys,Wr,Mn,ae,Br,Le,Hr,Rr,En,Bt,Xr,xn,w,bs,zs,Ne,Kr,Jr,Ms,Es,De,Qr,Yr,xs,qs,Ie,Zr,ea,Fs,js,Ge,ta,sa,Cs,Ht,Oe,na,ra,qn,S,aa,Ve,oa,ia,Ue,la,da,Fn,U,oe,Ps,We,pa,As,ma,jn,P,Be,ca,A,fa,Rt,ha,ua,Xt,ga,_a,He,ka,va,Ta,W,$a,Kt,wa,ya,Jt,ba,za,Cn,B,ie,Ss,Re,Ma,Ls,Ea,Pn,v,Xe,xa,Ke,qa,Je,Fa,ja,Ca,Qe,Pa,Qt,Aa,Sa,La,L,Ye,Na,Ns,Da,Ia,Ze,Yt,Ga,Ds,Oa,Va,Zt,Ua,Is,Wa,Ba,le,et,Ha,Gs,Ra,Xa,de,tt,Ka,Os,Ja,Qa,pe,st,Ya,nt,Za,Vs,eo,to,An,me,so,es,no,ro,Sn,H,ce,Us,rt,ao,Ws,oo,Ln,$,at,io,R,lo,Bs,po,mo,ot,co,fo,ho,it,uo,ts,go,_o,ko,N,lt,vo,Hs,To,$o,dt,ss,wo,Rs,yo,bo,ns,zo,Xs,Mo,Eo,fe,pt,xo,Ks,qo,Nn,he,Fo,rs,jo,Co,Dn,X,ue,Js,mt,Po,Qs,Ao,In,b,ct,So,ft,Lo,as,No,Do,Io,Ys,Go,Oo,ht,Gn,K,ge,Zs,ut,Vo,en,Uo,On,z,gt,Wo,_t,Bo,os,Ho,Ro,Xo,tn,Ko,Jo,kt,Vn,J,_e,sn,vt,Qo,nn,Yo,Un,M,Tt,Zo,$t,ei,is,ti,si,ni,rn,ri,ai,wt,Wn,Q,ke,an,yt,oi,on,ii,Bn,E,bt,li,zt,di,ls,pi,mi,ci,ln,fi,hi,Mt,Hn,Y,ve,dn,Et,ui,pn,gi,Rn,x,xt,_i,qt,ki,ds,vi,Ti,$i,mn,wi,yi,Ft,Xn,Z,Te,cn,jt,bi,fn,zi,Kn,q,Ct,Mi,Pt,Ei,ps,xi,qi,Fi,hn,ji,Ci,At,Jn,ee,$e,un,St,Pi,gn,Ai,Qn,F,Lt,Si,Nt,Li,ms,Ni,Di,Ii,_n,Gi,Oi,Dt,Yn,te,we,kn,It,Vi,vn,Ui,Zn,j,Gt,Wi,Ot,Bi,cs,Hi,Ri,Xi,Tn,Ki,Ji,Vt,er;return Pe=new C({}),Ae=new C({}),We=new C({}),Be=new T({props:{name:"class transformers.MT5Config",anchor:"transformers.MT5Config",parameters:[{name:"vocab_size",val:" = 250112"},{name:"d_model",val:" = 512"},{name:"d_kv",val:" = 64"},{name:"d_ff",val:" = 1024"},{name:"num_layers",val:" = 8"},{name:"num_decoder_layers",val:" = None"},{name:"num_heads",val:" = 6"},{name:"relative_attention_num_buckets",val:" = 32"},{name:"relative_attention_max_distance",val:" = 128"},{name:"dropout_rate",val:" = 0.1"},{name:"layer_norm_epsilon",val:" = 1e-06"},{name:"initializer_factor",val:" = 1.0"},{name:"feed_forward_proj",val:" = 'gated-gelu'"},{name:"is_encoder_decoder",val:" = True"},{name:"use_cache",val:" = True"},{name:"tokenizer_class",val:" = 'T5Tokenizer'"},{name:"tie_word_embeddings",val:" = False"},{name:"pad_token_id",val:" = 0"},{name:"eos_token_id",val:" = 1"},{name:"decoder_start_token_id",val:" = 0"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/configuration_mt5.py#L24",parametersDescription:[{anchor:"transformers.MT5Config.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 250112) &#x2014;
Vocabulary size of the T5 model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> or <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a>.`,name:"vocab_size"},{anchor:"transformers.MT5Config.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Size of the encoder layers and the pooler layer.`,name:"d_model"},{anchor:"transformers.MT5Config.d_kv",description:`<strong>d_kv</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Size of the key, query, value projections per attention head. <code>d_kv</code> has to be equal to <code>d_model // num_heads</code>.`,name:"d_kv"},{anchor:"transformers.MT5Config.d_ff",description:`<strong>d_ff</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Size of the intermediate feed forward layer in each <code>T5Block</code>.`,name:"d_ff"},{anchor:"transformers.MT5Config.num_layers",description:`<strong>num_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_layers"},{anchor:"transformers.MT5Config.num_decoder_layers",description:`<strong>num_decoder_layers</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of hidden layers in the Transformer decoder. Will use the same value as <code>num_layers</code> if not set.`,name:"num_decoder_layers"},{anchor:"transformers.MT5Config.num_heads",description:`<strong>num_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_heads"},{anchor:"transformers.MT5Config.relative_attention_num_buckets",description:`<strong>relative_attention_num_buckets</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
The number of buckets to use for each attention layer.`,name:"relative_attention_num_buckets"},{anchor:"transformers.MT5Config.relative_attention_max_distance",description:`<strong>relative_attention_max_distance</strong> (<code>int</code>, <em>optional</em>, defaults to 128) &#x2014;
The maximum distance of the longer sequences for the bucket separation.`,name:"relative_attention_max_distance"},{anchor:"transformers.MT5Config.dropout_rate",description:`<strong>dropout_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The ratio for all dropout layers.`,name:"dropout_rate"},{anchor:"transformers.MT5Config.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MT5Config.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
A factor for initializing all weight matrices (should be kept to 1, used internally for initialization
testing).`,name:"initializer_factor"},{anchor:"transformers.MT5Config.feed_forward_proj",description:`<strong>feed_forward_proj</strong> (<code>string</code>, <em>optional</em>, defaults to <code>&quot;gated-gelu&quot;</code>) &#x2014;
Type of feed forward layer to be used. Should be one of <code>&quot;relu&quot;</code> or <code>&quot;gated-gelu&quot;</code>.`,name:"feed_forward_proj"},{anchor:"transformers.MT5Config.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"}]}}),Re=new C({}),Xe=new T({props:{name:"class transformers.T5Tokenizer",anchor:"transformers.T5Tokenizer",parameters:[{name:"vocab_file",val:""},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"extra_ids",val:" = 100"},{name:"additional_special_tokens",val:" = None"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5.py#L53",parametersDescription:[{anchor:"transformers.T5Tokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.T5Tokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.T5Tokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.T5Tokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.T5Tokenizer.extra_ids",description:`<strong>extra_ids</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
Add a number of extra ids added to the end of the vocabulary for use as sentinels. These tokens are
accessible as &#x201C;<extra<em>id{%d}&gt;&#x201D; where &#x201D;{%d}&#x201D; is a number between 0 and extra_ids-1. Extra tokens are
indexed from the end of the vocabulary up to beginning (&#x201C;<extra_id_0>&#x201D; is the last token in the vocabulary
like in T5 preprocessing see
<a href="https://github.com/google-research/text-to-text-transfer-transformer/blob/9fd7b14a769417be33bc6c850f9598764913c833/t5/data/preprocessors.py#L2117" rel="nofollow">here</a>).</extra_id_0></extra<em>`,name:"extra_ids"},{anchor:"transformers.T5Tokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.T5Tokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.T5Tokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}]}}),Ye=new T({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5.py#L223",parametersDescription:[{anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),et=new T({props:{name:"convert_tokens_to_string",anchor:"transformers.T5Tokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5.py#L284"}}),tt=new T({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5.py#L201",parametersDescription:[{anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),st=new T({props:{name:"get_special_tokens_mask",anchor:"transformers.T5Tokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5.py#L163",parametersDescription:[{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),rt=new C({}),at=new T({props:{name:"class transformers.T5TokenizerFast",anchor:"transformers.T5TokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"extra_ids",val:" = 100"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5_fast.py#L62",parametersDescription:[{anchor:"transformers.T5TokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.T5TokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.T5TokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.T5TokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.T5TokenizerFast.extra_ids",description:`<strong>extra_ids</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
Add a number of extra ids added to the end of the vocabulary for use as sentinels. These tokens are
accessible as &#x201C;<extra<em>id{%d}&gt;&#x201D; where &#x201D;{%d}&#x201D; is a number between 0 and extra_ids-1. Extra tokens are
indexed from the end of the vocabulary up to beginning (&#x201C;<extra_id_0>&#x201D; is the last token in the vocabulary
like in T5 preprocessing see
<a href="https://github.com/google-research/text-to-text-transfer-transformer/blob/9fd7b14a769417be33bc6c850f9598764913c833/t5/data/preprocessors.py#L2117" rel="nofollow">here</a>).</extra_id_0></extra<em>`,name:"extra_ids"},{anchor:"transformers.T5TokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),lt=new T({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5_fast.py#L165",parametersDescription:[{anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),pt=new T({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/t5/tokenization_t5_fast.py#L191",parametersDescription:[{anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),mt=new C({}),ct=new T({props:{name:"class transformers.MT5Model",anchor:"transformers.MT5Model",parameters:[{name:"config",val:": T5Config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_mt5.py#L28"}}),ht=new Ce({props:{code:`from transformers import MT5Model, T5Tokenizer

model = MT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="pt")

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=labels["input_ids"])
hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),ut=new C({}),gt=new T({props:{name:"class transformers.MT5ForConditionalGeneration",anchor:"transformers.MT5ForConditionalGeneration",parameters:[{name:"config",val:": T5Config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_mt5.py#L62"}}),kt=new Ce({props:{code:`from transformers import MT5ForConditionalGeneration, T5Tokenizer

model = MT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="pt")

outputs = model(**inputs, labels=labels["input_ids"])
loss = outputs.loss`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),vt=new C({}),Tt=new T({props:{name:"class transformers.MT5EncoderModel",anchor:"transformers.MT5EncoderModel",parameters:[{name:"config",val:": T5Config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_mt5.py#L94"}}),wt=new Ce({props:{code:`from transformers import MT5EncoderModel, T5Tokenizer

model = MT5EncoderModel.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
input_ids = tokenizer(article, return_tensors="pt").input_ids
outputs = model(input_ids)
hidden_state = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5EncoderModel, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5EncoderModel.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_state = outputs.last_hidden_state`}}),yt=new C({}),bt=new T({props:{name:"class transformers.TFMT5Model",anchor:"transformers.TFMT5Model",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_tf_mt5.py#L28"}}),Mt=new Ce({props:{code:`from transformers import TFMT5Model, T5Tokenizer

model = TFMT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="tf")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="tf")

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=labels["input_ids"])
hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),Et=new C({}),xt=new T({props:{name:"class transformers.TFMT5ForConditionalGeneration",anchor:"transformers.TFMT5ForConditionalGeneration",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_tf_mt5.py#L53"}}),Ft=new Ce({props:{code:`from transformers import TFMT5ForConditionalGeneration, T5Tokenizer

model = TFMT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="tf")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="tf")

outputs = model(**inputs, labels=labels["input_ids"])
loss = outputs.loss`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),jt=new C({}),Ct=new T({props:{name:"class transformers.TFMT5EncoderModel",anchor:"transformers.TFMT5EncoderModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_tf_mt5.py#L79"}}),At=new Ce({props:{code:`from transformers import TFMT5EncoderModel, T5Tokenizer

model = TFMT5EncoderModel.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
input_ids = tokenizer(article, return_tensors="tf").input_ids
outputs = model(input_ids)
hidden_state = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5EncoderModel, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5EncoderModel.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_state = outputs.last_hidden_state`}}),St=new C({}),Lt=new T({props:{name:"class transformers.FlaxMT5Model",anchor:"transformers.FlaxMT5Model",parameters:[{name:"config",val:": T5Config"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_flax_mt5.py#L28"}}),Dt=new Ce({props:{code:`from transformers import FlaxMT5Model, T5Tokenizer

model = FlaxMT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")

article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="np")

with tokenizer.as_target_tokenizer():
    decoder_input_ids = tokenizer(summary, return_tensors="np").input_ids

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=decoder_input_ids)
hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxMT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxMT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    decoder_input_ids = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;np&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=decoder_input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),It=new C({}),Gt=new T({props:{name:"class transformers.FlaxMT5ForConditionalGeneration",anchor:"transformers.FlaxMT5ForConditionalGeneration",parameters:[{name:"config",val:": T5Config"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/mt5/modeling_flax_mt5.py#L55"}}),Vt=new Ce({props:{code:`from transformers import FlaxMT5ForConditionalGeneration, T5Tokenizer

model = FlaxMT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")

article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="np")

with tokenizer.as_target_tokenizer():
    decoder_input_ids = tokenizer(summary, return_tensors="np").input_ids

outputs = model(**inputs, decoder_input_ids=decoder_input_ids)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxMT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxMT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    decoder_input_ids = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;np&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, decoder_input_ids=decoder_input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){G=n("meta"),$n=d(),O=n("h1"),se=n("a"),vs=n("span"),f(Pe.$$.fragment),Lr=d(),Ts=n("span"),Nr=o("mT5"),wn=d(),V=n("h2"),ne=n("a"),$s=n("span"),f(Ae.$$.fragment),Dr=d(),ws=n("span"),Ir=o("Overview"),yn=d(),re=n("p"),Gr=o("The mT5 model was presented in "),Se=n("a"),Or=o("mT5: A massively multilingual pre-trained text-to-text transformer"),Vr=o(` by Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya
Siddhant, Aditya Barua, Colin Raffel.`),bn=d(),Ut=n("p"),Ur=o("The abstract from the paper is the following:"),zn=d(),Wt=n("p"),ys=n("em"),Wr=o(`The recent \u201CText-to-Text Transfer Transformer\u201D (T5) leveraged a unified text-to-text format and scale to attain
state-of-the-art results on a wide variety of English-language NLP tasks. In this paper, we introduce mT5, a
multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. We detail
the design and modified training of mT5 and demonstrate its state-of-the-art performance on many multilingual
benchmarks. We also describe a simple technique to prevent \u201Caccidental translation\u201D in the zero-shot setting, where a
generative model chooses to (partially) translate its prediction into the wrong language. All of the code and model
checkpoints used in this work are publicly available.`),Mn=d(),ae=n("p"),Br=o("Note: mT5 was only pre-trained on "),Le=n("a"),Hr=o("mC4"),Rr=o(` excluding any supervised training.
Therefore, this model has to be fine-tuned before it is useable on a downstream task, unlike the original T5 model.
Since mT5 was pre-trained unsupervisedly, there\u2019s no real advantage to using a task prefix during single-task
fine-tuning. If you are doing multi-task fine-tuning, you should use a prefix.`),En=d(),Bt=n("p"),Xr=o("Google has released the following variants:"),xn=d(),w=n("ul"),bs=n("li"),zs=n("p"),Ne=n("a"),Kr=o("google/mt5-small"),Jr=d(),Ms=n("li"),Es=n("p"),De=n("a"),Qr=o("google/mt5-base"),Yr=d(),xs=n("li"),qs=n("p"),Ie=n("a"),Zr=o("google/mt5-large"),ea=d(),Fs=n("li"),js=n("p"),Ge=n("a"),ta=o("google/mt5-xl"),sa=d(),Cs=n("li"),Ht=n("p"),Oe=n("a"),na=o("google/mt5-xxl"),ra=o("."),qn=d(),S=n("p"),aa=o("This model was contributed by "),Ve=n("a"),oa=o("patrickvonplaten"),ia=o(`. The original code can be
found `),Ue=n("a"),la=o("here"),da=o("."),Fn=d(),U=n("h2"),oe=n("a"),Ps=n("span"),f(We.$$.fragment),pa=d(),As=n("span"),ma=o("MT5Config"),jn=d(),P=n("div"),f(Be.$$.fragment),ca=d(),A=n("p"),fa=o("This is the configuration class to store the configuration of a "),Rt=n("a"),ha=o("MT5Model"),ua=o(" or a "),Xt=n("a"),ga=o("TFMT5Model"),_a=o(`. It is used to
instantiate a mT5 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the mT5
`),He=n("a"),ka=o("google/mt5-small"),va=o(" architecture."),Ta=d(),W=n("p"),$a=o("Configuration objects inherit from "),Kt=n("a"),wa=o("PretrainedConfig"),ya=o(` and can be used to control the model outputs. Read the
documentation from `),Jt=n("a"),ba=o("PretrainedConfig"),za=o(" for more information."),Cn=d(),B=n("h2"),ie=n("a"),Ss=n("span"),f(Re.$$.fragment),Ma=d(),Ls=n("span"),Ea=o("MT5Tokenizer"),Pn=d(),v=n("div"),f(Xe.$$.fragment),xa=d(),Ke=n("p"),qa=o("Construct a T5 tokenizer. Based on "),Je=n("a"),Fa=o("SentencePiece"),ja=o("."),Ca=d(),Qe=n("p"),Pa=o("This tokenizer inherits from "),Qt=n("a"),Aa=o("PreTrainedTokenizer"),Sa=o(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),La=d(),L=n("div"),f(Ye.$$.fragment),Na=d(),Ns=n("p"),Da=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),Ia=d(),Ze=n("ul"),Yt=n("li"),Ga=o("single sequence: "),Ds=n("code"),Oa=o("X </s>"),Va=d(),Zt=n("li"),Ua=o("pair of sequences: "),Is=n("code"),Wa=o("A </s> B </s>"),Ba=d(),le=n("div"),f(et.$$.fragment),Ha=d(),Gs=n("p"),Ra=o("Converts a sequence of tokens (string) in a single string."),Xa=d(),de=n("div"),f(tt.$$.fragment),Ka=d(),Os=n("p"),Ja=o(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Qa=d(),pe=n("div"),f(st.$$.fragment),Ya=d(),nt=n("p"),Za=o(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Vs=n("code"),eo=o("prepare_for_model"),to=o(" method."),An=d(),me=n("p"),so=o("See "),es=n("a"),no=o("T5Tokenizer"),ro=o(" for all details."),Sn=d(),H=n("h2"),ce=n("a"),Us=n("span"),f(rt.$$.fragment),ao=d(),Ws=n("span"),oo=o("MT5TokenizerFast"),Ln=d(),$=n("div"),f(at.$$.fragment),io=d(),R=n("p"),lo=o("Construct a \u201Cfast\u201D T5 tokenizer (backed by HuggingFace\u2019s "),Bs=n("em"),po=o("tokenizers"),mo=o(` library). Based on
`),ot=n("a"),co=o("Unigram"),fo=o("."),ho=d(),it=n("p"),uo=o("This tokenizer inherits from "),ts=n("a"),go=o("PreTrainedTokenizerFast"),_o=o(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),ko=d(),N=n("div"),f(lt.$$.fragment),vo=d(),Hs=n("p"),To=o(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),$o=d(),dt=n("ul"),ss=n("li"),wo=o("single sequence: "),Rs=n("code"),yo=o("X </s>"),bo=d(),ns=n("li"),zo=o("pair of sequences: "),Xs=n("code"),Mo=o("A </s> B </s>"),Eo=d(),fe=n("div"),f(pt.$$.fragment),xo=d(),Ks=n("p"),qo=o(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Nn=d(),he=n("p"),Fo=o("See "),rs=n("a"),jo=o("T5TokenizerFast"),Co=o(" for all details."),Dn=d(),X=n("h2"),ue=n("a"),Js=n("span"),f(mt.$$.fragment),Po=d(),Qs=n("span"),Ao=o("MT5Model"),In=d(),b=n("div"),f(ct.$$.fragment),So=d(),ft=n("p"),Lo=o("This class overrides "),as=n("a"),No=o("T5Model"),Do=o(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Io=d(),Ys=n("p"),Go=o("Examples:"),Oo=d(),f(ht.$$.fragment),Gn=d(),K=n("h2"),ge=n("a"),Zs=n("span"),f(ut.$$.fragment),Vo=d(),en=n("span"),Uo=o("MT5ForConditionalGeneration"),On=d(),z=n("div"),f(gt.$$.fragment),Wo=d(),_t=n("p"),Bo=o("This class overrides "),os=n("a"),Ho=o("T5ForConditionalGeneration"),Ro=o(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Xo=d(),tn=n("p"),Ko=o("Examples:"),Jo=d(),f(kt.$$.fragment),Vn=d(),J=n("h2"),_e=n("a"),sn=n("span"),f(vt.$$.fragment),Qo=d(),nn=n("span"),Yo=o("MT5EncoderModel"),Un=d(),M=n("div"),f(Tt.$$.fragment),Zo=d(),$t=n("p"),ei=o("This class overrides "),is=n("a"),ti=o("T5EncoderModel"),si=o(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ni=d(),rn=n("p"),ri=o("Examples:"),ai=d(),f(wt.$$.fragment),Wn=d(),Q=n("h2"),ke=n("a"),an=n("span"),f(yt.$$.fragment),oi=d(),on=n("span"),ii=o("TFMT5Model"),Bn=d(),E=n("div"),f(bt.$$.fragment),li=d(),zt=n("p"),di=o("This class overrides "),ls=n("a"),pi=o("TFT5Model"),mi=o(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),ci=d(),ln=n("p"),fi=o("Examples:"),hi=d(),f(Mt.$$.fragment),Hn=d(),Y=n("h2"),ve=n("a"),dn=n("span"),f(Et.$$.fragment),ui=d(),pn=n("span"),gi=o("TFMT5ForConditionalGeneration"),Rn=d(),x=n("div"),f(xt.$$.fragment),_i=d(),qt=n("p"),ki=o("This class overrides "),ds=n("a"),vi=o("TFT5ForConditionalGeneration"),Ti=o(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),$i=d(),mn=n("p"),wi=o("Examples:"),yi=d(),f(Ft.$$.fragment),Xn=d(),Z=n("h2"),Te=n("a"),cn=n("span"),f(jt.$$.fragment),bi=d(),fn=n("span"),zi=o("TFMT5EncoderModel"),Kn=d(),q=n("div"),f(Ct.$$.fragment),Mi=d(),Pt=n("p"),Ei=o("This class overrides "),ps=n("a"),xi=o("TFT5EncoderModel"),qi=o(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),Fi=d(),hn=n("p"),ji=o("Examples:"),Ci=d(),f(At.$$.fragment),Jn=d(),ee=n("h2"),$e=n("a"),un=n("span"),f(St.$$.fragment),Pi=d(),gn=n("span"),Ai=o("FlaxMT5Model"),Qn=d(),F=n("div"),f(Lt.$$.fragment),Si=d(),Nt=n("p"),Li=o("This class overrides "),ms=n("a"),Ni=o("FlaxT5Model"),Di=o(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Ii=d(),_n=n("p"),Gi=o("Examples:"),Oi=d(),f(Dt.$$.fragment),Yn=d(),te=n("h2"),we=n("a"),kn=n("span"),f(It.$$.fragment),Vi=d(),vn=n("span"),Ui=o("FlaxMT5ForConditionalGeneration"),Zn=d(),j=n("div"),f(Gt.$$.fragment),Wi=d(),Ot=n("p"),Bi=o("This class overrides "),cs=n("a"),Hi=o("FlaxT5ForConditionalGeneration"),Ri=o(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Xi=d(),Tn=n("p"),Ki=o("Examples:"),Ji=d(),f(Vt.$$.fragment),this.h()},l(t){const m=Qd('[data-svelte="svelte-1phssyn"]',document.head);G=r(m,"META",{name:!0,content:!0}),m.forEach(s),$n=p(t),O=r(t,"H1",{class:!0});var tr=a(O);se=r(tr,"A",{id:!0,class:!0,href:!0});var nl=a(se);vs=r(nl,"SPAN",{});var rl=a(vs);h(Pe.$$.fragment,rl),rl.forEach(s),nl.forEach(s),Lr=p(tr),Ts=r(tr,"SPAN",{});var al=a(Ts);Nr=i(al,"mT5"),al.forEach(s),tr.forEach(s),wn=p(t),V=r(t,"H2",{class:!0});var sr=a(V);ne=r(sr,"A",{id:!0,class:!0,href:!0});var ol=a(ne);$s=r(ol,"SPAN",{});var il=a($s);h(Ae.$$.fragment,il),il.forEach(s),ol.forEach(s),Dr=p(sr),ws=r(sr,"SPAN",{});var ll=a(ws);Ir=i(ll,"Overview"),ll.forEach(s),sr.forEach(s),yn=p(t),re=r(t,"P",{});var nr=a(re);Gr=i(nr,"The mT5 model was presented in "),Se=r(nr,"A",{href:!0,rel:!0});var dl=a(Se);Or=i(dl,"mT5: A massively multilingual pre-trained text-to-text transformer"),dl.forEach(s),Vr=i(nr,` by Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya
Siddhant, Aditya Barua, Colin Raffel.`),nr.forEach(s),bn=p(t),Ut=r(t,"P",{});var pl=a(Ut);Ur=i(pl,"The abstract from the paper is the following:"),pl.forEach(s),zn=p(t),Wt=r(t,"P",{});var ml=a(Wt);ys=r(ml,"EM",{});var cl=a(ys);Wr=i(cl,`The recent \u201CText-to-Text Transfer Transformer\u201D (T5) leveraged a unified text-to-text format and scale to attain
state-of-the-art results on a wide variety of English-language NLP tasks. In this paper, we introduce mT5, a
multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. We detail
the design and modified training of mT5 and demonstrate its state-of-the-art performance on many multilingual
benchmarks. We also describe a simple technique to prevent \u201Caccidental translation\u201D in the zero-shot setting, where a
generative model chooses to (partially) translate its prediction into the wrong language. All of the code and model
checkpoints used in this work are publicly available.`),cl.forEach(s),ml.forEach(s),Mn=p(t),ae=r(t,"P",{});var rr=a(ae);Br=i(rr,"Note: mT5 was only pre-trained on "),Le=r(rr,"A",{href:!0,rel:!0});var fl=a(Le);Hr=i(fl,"mC4"),fl.forEach(s),Rr=i(rr,` excluding any supervised training.
Therefore, this model has to be fine-tuned before it is useable on a downstream task, unlike the original T5 model.
Since mT5 was pre-trained unsupervisedly, there\u2019s no real advantage to using a task prefix during single-task
fine-tuning. If you are doing multi-task fine-tuning, you should use a prefix.`),rr.forEach(s),En=p(t),Bt=r(t,"P",{});var hl=a(Bt);Xr=i(hl,"Google has released the following variants:"),hl.forEach(s),xn=p(t),w=r(t,"UL",{});var D=a(w);bs=r(D,"LI",{});var ul=a(bs);zs=r(ul,"P",{});var gl=a(zs);Ne=r(gl,"A",{href:!0,rel:!0});var _l=a(Ne);Kr=i(_l,"google/mt5-small"),_l.forEach(s),gl.forEach(s),ul.forEach(s),Jr=p(D),Ms=r(D,"LI",{});var kl=a(Ms);Es=r(kl,"P",{});var vl=a(Es);De=r(vl,"A",{href:!0,rel:!0});var Tl=a(De);Qr=i(Tl,"google/mt5-base"),Tl.forEach(s),vl.forEach(s),kl.forEach(s),Yr=p(D),xs=r(D,"LI",{});var $l=a(xs);qs=r($l,"P",{});var wl=a(qs);Ie=r(wl,"A",{href:!0,rel:!0});var yl=a(Ie);Zr=i(yl,"google/mt5-large"),yl.forEach(s),wl.forEach(s),$l.forEach(s),ea=p(D),Fs=r(D,"LI",{});var bl=a(Fs);js=r(bl,"P",{});var zl=a(js);Ge=r(zl,"A",{href:!0,rel:!0});var Ml=a(Ge);ta=i(Ml,"google/mt5-xl"),Ml.forEach(s),zl.forEach(s),bl.forEach(s),sa=p(D),Cs=r(D,"LI",{});var El=a(Cs);Ht=r(El,"P",{});var Qi=a(Ht);Oe=r(Qi,"A",{href:!0,rel:!0});var xl=a(Oe);na=i(xl,"google/mt5-xxl"),xl.forEach(s),ra=i(Qi,"."),Qi.forEach(s),El.forEach(s),D.forEach(s),qn=p(t),S=r(t,"P",{});var fs=a(S);aa=i(fs,"This model was contributed by "),Ve=r(fs,"A",{href:!0,rel:!0});var ql=a(Ve);oa=i(ql,"patrickvonplaten"),ql.forEach(s),ia=i(fs,`. The original code can be
found `),Ue=r(fs,"A",{href:!0,rel:!0});var Fl=a(Ue);la=i(Fl,"here"),Fl.forEach(s),da=i(fs,"."),fs.forEach(s),Fn=p(t),U=r(t,"H2",{class:!0});var ar=a(U);oe=r(ar,"A",{id:!0,class:!0,href:!0});var jl=a(oe);Ps=r(jl,"SPAN",{});var Cl=a(Ps);h(We.$$.fragment,Cl),Cl.forEach(s),jl.forEach(s),pa=p(ar),As=r(ar,"SPAN",{});var Pl=a(As);ma=i(Pl,"MT5Config"),Pl.forEach(s),ar.forEach(s),jn=p(t),P=r(t,"DIV",{class:!0});var hs=a(P);h(Be.$$.fragment,hs),ca=p(hs),A=r(hs,"P",{});var ye=a(A);fa=i(ye,"This is the configuration class to store the configuration of a "),Rt=r(ye,"A",{href:!0});var Al=a(Rt);ha=i(Al,"MT5Model"),Al.forEach(s),ua=i(ye," or a "),Xt=r(ye,"A",{href:!0});var Sl=a(Xt);ga=i(Sl,"TFMT5Model"),Sl.forEach(s),_a=i(ye,`. It is used to
instantiate a mT5 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the mT5
`),He=r(ye,"A",{href:!0,rel:!0});var Ll=a(He);ka=i(Ll,"google/mt5-small"),Ll.forEach(s),va=i(ye," architecture."),ye.forEach(s),Ta=p(hs),W=r(hs,"P",{});var us=a(W);$a=i(us,"Configuration objects inherit from "),Kt=r(us,"A",{href:!0});var Nl=a(Kt);wa=i(Nl,"PretrainedConfig"),Nl.forEach(s),ya=i(us,` and can be used to control the model outputs. Read the
documentation from `),Jt=r(us,"A",{href:!0});var Dl=a(Jt);ba=i(Dl,"PretrainedConfig"),Dl.forEach(s),za=i(us," for more information."),us.forEach(s),hs.forEach(s),Cn=p(t),B=r(t,"H2",{class:!0});var or=a(B);ie=r(or,"A",{id:!0,class:!0,href:!0});var Il=a(ie);Ss=r(Il,"SPAN",{});var Gl=a(Ss);h(Re.$$.fragment,Gl),Gl.forEach(s),Il.forEach(s),Ma=p(or),Ls=r(or,"SPAN",{});var Ol=a(Ls);Ea=i(Ol,"MT5Tokenizer"),Ol.forEach(s),or.forEach(s),Pn=p(t),v=r(t,"DIV",{class:!0});var y=a(v);h(Xe.$$.fragment,y),xa=p(y),Ke=r(y,"P",{});var ir=a(Ke);qa=i(ir,"Construct a T5 tokenizer. Based on "),Je=r(ir,"A",{href:!0,rel:!0});var Vl=a(Je);Fa=i(Vl,"SentencePiece"),Vl.forEach(s),ja=i(ir,"."),ir.forEach(s),Ca=p(y),Qe=r(y,"P",{});var lr=a(Qe);Pa=i(lr,"This tokenizer inherits from "),Qt=r(lr,"A",{href:!0});var Ul=a(Qt);Aa=i(Ul,"PreTrainedTokenizer"),Ul.forEach(s),Sa=i(lr,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),lr.forEach(s),La=p(y),L=r(y,"DIV",{class:!0});var gs=a(L);h(Ye.$$.fragment,gs),Na=p(gs),Ns=r(gs,"P",{});var Wl=a(Ns);Da=i(Wl,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),Wl.forEach(s),Ia=p(gs),Ze=r(gs,"UL",{});var dr=a(Ze);Yt=r(dr,"LI",{});var Yi=a(Yt);Ga=i(Yi,"single sequence: "),Ds=r(Yi,"CODE",{});var Bl=a(Ds);Oa=i(Bl,"X </s>"),Bl.forEach(s),Yi.forEach(s),Va=p(dr),Zt=r(dr,"LI",{});var Zi=a(Zt);Ua=i(Zi,"pair of sequences: "),Is=r(Zi,"CODE",{});var Hl=a(Is);Wa=i(Hl,"A </s> B </s>"),Hl.forEach(s),Zi.forEach(s),dr.forEach(s),gs.forEach(s),Ba=p(y),le=r(y,"DIV",{class:!0});var pr=a(le);h(et.$$.fragment,pr),Ha=p(pr),Gs=r(pr,"P",{});var Rl=a(Gs);Ra=i(Rl,"Converts a sequence of tokens (string) in a single string."),Rl.forEach(s),pr.forEach(s),Xa=p(y),de=r(y,"DIV",{class:!0});var mr=a(de);h(tt.$$.fragment,mr),Ka=p(mr),Os=r(mr,"P",{});var Xl=a(Os);Ja=i(Xl,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Xl.forEach(s),mr.forEach(s),Qa=p(y),pe=r(y,"DIV",{class:!0});var cr=a(pe);h(st.$$.fragment,cr),Ya=p(cr),nt=r(cr,"P",{});var fr=a(nt);Za=i(fr,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Vs=r(fr,"CODE",{});var Kl=a(Vs);eo=i(Kl,"prepare_for_model"),Kl.forEach(s),to=i(fr," method."),fr.forEach(s),cr.forEach(s),y.forEach(s),An=p(t),me=r(t,"P",{});var hr=a(me);so=i(hr,"See "),es=r(hr,"A",{href:!0});var Jl=a(es);no=i(Jl,"T5Tokenizer"),Jl.forEach(s),ro=i(hr," for all details."),hr.forEach(s),Sn=p(t),H=r(t,"H2",{class:!0});var ur=a(H);ce=r(ur,"A",{id:!0,class:!0,href:!0});var Ql=a(ce);Us=r(Ql,"SPAN",{});var Yl=a(Us);h(rt.$$.fragment,Yl),Yl.forEach(s),Ql.forEach(s),ao=p(ur),Ws=r(ur,"SPAN",{});var Zl=a(Ws);oo=i(Zl,"MT5TokenizerFast"),Zl.forEach(s),ur.forEach(s),Ln=p(t),$=r(t,"DIV",{class:!0});var I=a($);h(at.$$.fragment,I),io=p(I),R=r(I,"P",{});var _s=a(R);lo=i(_s,"Construct a \u201Cfast\u201D T5 tokenizer (backed by HuggingFace\u2019s "),Bs=r(_s,"EM",{});var ed=a(Bs);po=i(ed,"tokenizers"),ed.forEach(s),mo=i(_s,` library). Based on
`),ot=r(_s,"A",{href:!0,rel:!0});var td=a(ot);co=i(td,"Unigram"),td.forEach(s),fo=i(_s,"."),_s.forEach(s),ho=p(I),it=r(I,"P",{});var gr=a(it);uo=i(gr,"This tokenizer inherits from "),ts=r(gr,"A",{href:!0});var sd=a(ts);go=i(sd,"PreTrainedTokenizerFast"),sd.forEach(s),_o=i(gr,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),gr.forEach(s),ko=p(I),N=r(I,"DIV",{class:!0});var ks=a(N);h(lt.$$.fragment,ks),vo=p(ks),Hs=r(ks,"P",{});var nd=a(Hs);To=i(nd,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),nd.forEach(s),$o=p(ks),dt=r(ks,"UL",{});var _r=a(dt);ss=r(_r,"LI",{});var el=a(ss);wo=i(el,"single sequence: "),Rs=r(el,"CODE",{});var rd=a(Rs);yo=i(rd,"X </s>"),rd.forEach(s),el.forEach(s),bo=p(_r),ns=r(_r,"LI",{});var tl=a(ns);zo=i(tl,"pair of sequences: "),Xs=r(tl,"CODE",{});var ad=a(Xs);Mo=i(ad,"A </s> B </s>"),ad.forEach(s),tl.forEach(s),_r.forEach(s),ks.forEach(s),Eo=p(I),fe=r(I,"DIV",{class:!0});var kr=a(fe);h(pt.$$.fragment,kr),xo=p(kr),Ks=r(kr,"P",{});var od=a(Ks);qo=i(od,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),od.forEach(s),kr.forEach(s),I.forEach(s),Nn=p(t),he=r(t,"P",{});var vr=a(he);Fo=i(vr,"See "),rs=r(vr,"A",{href:!0});var id=a(rs);jo=i(id,"T5TokenizerFast"),id.forEach(s),Co=i(vr," for all details."),vr.forEach(s),Dn=p(t),X=r(t,"H2",{class:!0});var Tr=a(X);ue=r(Tr,"A",{id:!0,class:!0,href:!0});var ld=a(ue);Js=r(ld,"SPAN",{});var dd=a(Js);h(mt.$$.fragment,dd),dd.forEach(s),ld.forEach(s),Po=p(Tr),Qs=r(Tr,"SPAN",{});var pd=a(Qs);Ao=i(pd,"MT5Model"),pd.forEach(s),Tr.forEach(s),In=p(t),b=r(t,"DIV",{class:!0});var be=a(b);h(ct.$$.fragment,be),So=p(be),ft=r(be,"P",{});var $r=a(ft);Lo=i($r,"This class overrides "),as=r($r,"A",{href:!0});var md=a(as);No=i(md,"T5Model"),md.forEach(s),Do=i($r,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),$r.forEach(s),Io=p(be),Ys=r(be,"P",{});var cd=a(Ys);Go=i(cd,"Examples:"),cd.forEach(s),Oo=p(be),h(ht.$$.fragment,be),be.forEach(s),Gn=p(t),K=r(t,"H2",{class:!0});var wr=a(K);ge=r(wr,"A",{id:!0,class:!0,href:!0});var fd=a(ge);Zs=r(fd,"SPAN",{});var hd=a(Zs);h(ut.$$.fragment,hd),hd.forEach(s),fd.forEach(s),Vo=p(wr),en=r(wr,"SPAN",{});var ud=a(en);Uo=i(ud,"MT5ForConditionalGeneration"),ud.forEach(s),wr.forEach(s),On=p(t),z=r(t,"DIV",{class:!0});var ze=a(z);h(gt.$$.fragment,ze),Wo=p(ze),_t=r(ze,"P",{});var yr=a(_t);Bo=i(yr,"This class overrides "),os=r(yr,"A",{href:!0});var gd=a(os);Ho=i(gd,"T5ForConditionalGeneration"),gd.forEach(s),Ro=i(yr,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),yr.forEach(s),Xo=p(ze),tn=r(ze,"P",{});var _d=a(tn);Ko=i(_d,"Examples:"),_d.forEach(s),Jo=p(ze),h(kt.$$.fragment,ze),ze.forEach(s),Vn=p(t),J=r(t,"H2",{class:!0});var br=a(J);_e=r(br,"A",{id:!0,class:!0,href:!0});var kd=a(_e);sn=r(kd,"SPAN",{});var vd=a(sn);h(vt.$$.fragment,vd),vd.forEach(s),kd.forEach(s),Qo=p(br),nn=r(br,"SPAN",{});var Td=a(nn);Yo=i(Td,"MT5EncoderModel"),Td.forEach(s),br.forEach(s),Un=p(t),M=r(t,"DIV",{class:!0});var Me=a(M);h(Tt.$$.fragment,Me),Zo=p(Me),$t=r(Me,"P",{});var zr=a($t);ei=i(zr,"This class overrides "),is=r(zr,"A",{href:!0});var $d=a(is);ti=i($d,"T5EncoderModel"),$d.forEach(s),si=i(zr,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),zr.forEach(s),ni=p(Me),rn=r(Me,"P",{});var wd=a(rn);ri=i(wd,"Examples:"),wd.forEach(s),ai=p(Me),h(wt.$$.fragment,Me),Me.forEach(s),Wn=p(t),Q=r(t,"H2",{class:!0});var Mr=a(Q);ke=r(Mr,"A",{id:!0,class:!0,href:!0});var yd=a(ke);an=r(yd,"SPAN",{});var bd=a(an);h(yt.$$.fragment,bd),bd.forEach(s),yd.forEach(s),oi=p(Mr),on=r(Mr,"SPAN",{});var zd=a(on);ii=i(zd,"TFMT5Model"),zd.forEach(s),Mr.forEach(s),Bn=p(t),E=r(t,"DIV",{class:!0});var Ee=a(E);h(bt.$$.fragment,Ee),li=p(Ee),zt=r(Ee,"P",{});var Er=a(zt);di=i(Er,"This class overrides "),ls=r(Er,"A",{href:!0});var Md=a(ls);pi=i(Md,"TFT5Model"),Md.forEach(s),mi=i(Er,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Er.forEach(s),ci=p(Ee),ln=r(Ee,"P",{});var Ed=a(ln);fi=i(Ed,"Examples:"),Ed.forEach(s),hi=p(Ee),h(Mt.$$.fragment,Ee),Ee.forEach(s),Hn=p(t),Y=r(t,"H2",{class:!0});var xr=a(Y);ve=r(xr,"A",{id:!0,class:!0,href:!0});var xd=a(ve);dn=r(xd,"SPAN",{});var qd=a(dn);h(Et.$$.fragment,qd),qd.forEach(s),xd.forEach(s),ui=p(xr),pn=r(xr,"SPAN",{});var Fd=a(pn);gi=i(Fd,"TFMT5ForConditionalGeneration"),Fd.forEach(s),xr.forEach(s),Rn=p(t),x=r(t,"DIV",{class:!0});var xe=a(x);h(xt.$$.fragment,xe),_i=p(xe),qt=r(xe,"P",{});var qr=a(qt);ki=i(qr,"This class overrides "),ds=r(qr,"A",{href:!0});var jd=a(ds);vi=i(jd,"TFT5ForConditionalGeneration"),jd.forEach(s),Ti=i(qr,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),qr.forEach(s),$i=p(xe),mn=r(xe,"P",{});var Cd=a(mn);wi=i(Cd,"Examples:"),Cd.forEach(s),yi=p(xe),h(Ft.$$.fragment,xe),xe.forEach(s),Xn=p(t),Z=r(t,"H2",{class:!0});var Fr=a(Z);Te=r(Fr,"A",{id:!0,class:!0,href:!0});var Pd=a(Te);cn=r(Pd,"SPAN",{});var Ad=a(cn);h(jt.$$.fragment,Ad),Ad.forEach(s),Pd.forEach(s),bi=p(Fr),fn=r(Fr,"SPAN",{});var Sd=a(fn);zi=i(Sd,"TFMT5EncoderModel"),Sd.forEach(s),Fr.forEach(s),Kn=p(t),q=r(t,"DIV",{class:!0});var qe=a(q);h(Ct.$$.fragment,qe),Mi=p(qe),Pt=r(qe,"P",{});var jr=a(Pt);Ei=i(jr,"This class overrides "),ps=r(jr,"A",{href:!0});var Ld=a(ps);xi=i(Ld,"TFT5EncoderModel"),Ld.forEach(s),qi=i(jr,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),jr.forEach(s),Fi=p(qe),hn=r(qe,"P",{});var Nd=a(hn);ji=i(Nd,"Examples:"),Nd.forEach(s),Ci=p(qe),h(At.$$.fragment,qe),qe.forEach(s),Jn=p(t),ee=r(t,"H2",{class:!0});var Cr=a(ee);$e=r(Cr,"A",{id:!0,class:!0,href:!0});var Dd=a($e);un=r(Dd,"SPAN",{});var Id=a(un);h(St.$$.fragment,Id),Id.forEach(s),Dd.forEach(s),Pi=p(Cr),gn=r(Cr,"SPAN",{});var Gd=a(gn);Ai=i(Gd,"FlaxMT5Model"),Gd.forEach(s),Cr.forEach(s),Qn=p(t),F=r(t,"DIV",{class:!0});var Fe=a(F);h(Lt.$$.fragment,Fe),Si=p(Fe),Nt=r(Fe,"P",{});var Pr=a(Nt);Li=i(Pr,"This class overrides "),ms=r(Pr,"A",{href:!0});var Od=a(ms);Ni=i(Od,"FlaxT5Model"),Od.forEach(s),Di=i(Pr,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Pr.forEach(s),Ii=p(Fe),_n=r(Fe,"P",{});var Vd=a(_n);Gi=i(Vd,"Examples:"),Vd.forEach(s),Oi=p(Fe),h(Dt.$$.fragment,Fe),Fe.forEach(s),Yn=p(t),te=r(t,"H2",{class:!0});var Ar=a(te);we=r(Ar,"A",{id:!0,class:!0,href:!0});var Ud=a(we);kn=r(Ud,"SPAN",{});var Wd=a(kn);h(It.$$.fragment,Wd),Wd.forEach(s),Ud.forEach(s),Vi=p(Ar),vn=r(Ar,"SPAN",{});var Bd=a(vn);Ui=i(Bd,"FlaxMT5ForConditionalGeneration"),Bd.forEach(s),Ar.forEach(s),Zn=p(t),j=r(t,"DIV",{class:!0});var je=a(j);h(Gt.$$.fragment,je),Wi=p(je),Ot=r(je,"P",{});var Sr=a(Ot);Bi=i(Sr,"This class overrides "),cs=r(Sr,"A",{href:!0});var Hd=a(cs);Hi=i(Hd,"FlaxT5ForConditionalGeneration"),Hd.forEach(s),Ri=i(Sr,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Sr.forEach(s),Xi=p(je),Tn=r(je,"P",{});var Rd=a(Tn);Ki=i(Rd,"Examples:"),Rd.forEach(s),Ji=p(je),h(Vt.$$.fragment,je),je.forEach(s),this.h()},h(){l(G,"name","hf:doc:metadata"),l(G,"content",JSON.stringify(tp)),l(se,"id","mt5"),l(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(se,"href","#mt5"),l(O,"class","relative group"),l(ne,"id","overview"),l(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ne,"href","#overview"),l(V,"class","relative group"),l(Se,"href","https://arxiv.org/abs/2010.11934"),l(Se,"rel","nofollow"),l(Le,"href","https://huggingface.co/datasets/mc4"),l(Le,"rel","nofollow"),l(Ne,"href","https://huggingface.co/google/mt5-small"),l(Ne,"rel","nofollow"),l(De,"href","https://huggingface.co/google/mt5-base"),l(De,"rel","nofollow"),l(Ie,"href","https://huggingface.co/google/mt5-large"),l(Ie,"rel","nofollow"),l(Ge,"href","https://huggingface.co/google/mt5-xl"),l(Ge,"rel","nofollow"),l(Oe,"href","https://huggingface.co/google/mt5-xxl"),l(Oe,"rel","nofollow"),l(Ve,"href","https://huggingface.co/patrickvonplaten"),l(Ve,"rel","nofollow"),l(Ue,"href","https://github.com/google-research/multilingual-t5"),l(Ue,"rel","nofollow"),l(oe,"id","transformers.MT5Config"),l(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(oe,"href","#transformers.MT5Config"),l(U,"class","relative group"),l(Rt,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),l(Xt,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),l(He,"href","https://huggingface.co/google/mt5-small"),l(He,"rel","nofollow"),l(Kt,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(Jt,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(P,"class","docstring"),l(ie,"id","transformers.T5Tokenizer"),l(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ie,"href","#transformers.T5Tokenizer"),l(B,"class","relative group"),l(Je,"href","https://github.com/google/sentencepiece"),l(Je,"rel","nofollow"),l(Qt,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(L,"class","docstring"),l(le,"class","docstring"),l(de,"class","docstring"),l(pe,"class","docstring"),l(v,"class","docstring"),l(es,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),l(ce,"id","transformers.T5TokenizerFast"),l(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ce,"href","#transformers.T5TokenizerFast"),l(H,"class","relative group"),l(ot,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=unigram#models"),l(ot,"rel","nofollow"),l(ts,"href","/docs/transformers/main/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),l(N,"class","docstring"),l(fe,"class","docstring"),l($,"class","docstring"),l(rs,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),l(ue,"id","transformers.MT5Model"),l(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ue,"href","#transformers.MT5Model"),l(X,"class","relative group"),l(as,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),l(b,"class","docstring"),l(ge,"id","transformers.MT5ForConditionalGeneration"),l(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ge,"href","#transformers.MT5ForConditionalGeneration"),l(K,"class","relative group"),l(os,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),l(z,"class","docstring"),l(_e,"id","transformers.MT5EncoderModel"),l(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(_e,"href","#transformers.MT5EncoderModel"),l(J,"class","relative group"),l(is,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5EncoderModel"),l(M,"class","docstring"),l(ke,"id","transformers.TFMT5Model"),l(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ke,"href","#transformers.TFMT5Model"),l(Q,"class","relative group"),l(ls,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),l(E,"class","docstring"),l(ve,"id","transformers.TFMT5ForConditionalGeneration"),l(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ve,"href","#transformers.TFMT5ForConditionalGeneration"),l(Y,"class","relative group"),l(ds,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),l(x,"class","docstring"),l(Te,"id","transformers.TFMT5EncoderModel"),l(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Te,"href","#transformers.TFMT5EncoderModel"),l(Z,"class","relative group"),l(ps,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5EncoderModel"),l(q,"class","docstring"),l($e,"id","transformers.FlaxMT5Model"),l($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l($e,"href","#transformers.FlaxMT5Model"),l(ee,"class","relative group"),l(ms,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),l(F,"class","docstring"),l(we,"id","transformers.FlaxMT5ForConditionalGeneration"),l(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(we,"href","#transformers.FlaxMT5ForConditionalGeneration"),l(te,"class","relative group"),l(cs,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),l(j,"class","docstring")},m(t,m){e(document.head,G),c(t,$n,m),c(t,O,m),e(O,se),e(se,vs),u(Pe,vs,null),e(O,Lr),e(O,Ts),e(Ts,Nr),c(t,wn,m),c(t,V,m),e(V,ne),e(ne,$s),u(Ae,$s,null),e(V,Dr),e(V,ws),e(ws,Ir),c(t,yn,m),c(t,re,m),e(re,Gr),e(re,Se),e(Se,Or),e(re,Vr),c(t,bn,m),c(t,Ut,m),e(Ut,Ur),c(t,zn,m),c(t,Wt,m),e(Wt,ys),e(ys,Wr),c(t,Mn,m),c(t,ae,m),e(ae,Br),e(ae,Le),e(Le,Hr),e(ae,Rr),c(t,En,m),c(t,Bt,m),e(Bt,Xr),c(t,xn,m),c(t,w,m),e(w,bs),e(bs,zs),e(zs,Ne),e(Ne,Kr),e(w,Jr),e(w,Ms),e(Ms,Es),e(Es,De),e(De,Qr),e(w,Yr),e(w,xs),e(xs,qs),e(qs,Ie),e(Ie,Zr),e(w,ea),e(w,Fs),e(Fs,js),e(js,Ge),e(Ge,ta),e(w,sa),e(w,Cs),e(Cs,Ht),e(Ht,Oe),e(Oe,na),e(Ht,ra),c(t,qn,m),c(t,S,m),e(S,aa),e(S,Ve),e(Ve,oa),e(S,ia),e(S,Ue),e(Ue,la),e(S,da),c(t,Fn,m),c(t,U,m),e(U,oe),e(oe,Ps),u(We,Ps,null),e(U,pa),e(U,As),e(As,ma),c(t,jn,m),c(t,P,m),u(Be,P,null),e(P,ca),e(P,A),e(A,fa),e(A,Rt),e(Rt,ha),e(A,ua),e(A,Xt),e(Xt,ga),e(A,_a),e(A,He),e(He,ka),e(A,va),e(P,Ta),e(P,W),e(W,$a),e(W,Kt),e(Kt,wa),e(W,ya),e(W,Jt),e(Jt,ba),e(W,za),c(t,Cn,m),c(t,B,m),e(B,ie),e(ie,Ss),u(Re,Ss,null),e(B,Ma),e(B,Ls),e(Ls,Ea),c(t,Pn,m),c(t,v,m),u(Xe,v,null),e(v,xa),e(v,Ke),e(Ke,qa),e(Ke,Je),e(Je,Fa),e(Ke,ja),e(v,Ca),e(v,Qe),e(Qe,Pa),e(Qe,Qt),e(Qt,Aa),e(Qe,Sa),e(v,La),e(v,L),u(Ye,L,null),e(L,Na),e(L,Ns),e(Ns,Da),e(L,Ia),e(L,Ze),e(Ze,Yt),e(Yt,Ga),e(Yt,Ds),e(Ds,Oa),e(Ze,Va),e(Ze,Zt),e(Zt,Ua),e(Zt,Is),e(Is,Wa),e(v,Ba),e(v,le),u(et,le,null),e(le,Ha),e(le,Gs),e(Gs,Ra),e(v,Xa),e(v,de),u(tt,de,null),e(de,Ka),e(de,Os),e(Os,Ja),e(v,Qa),e(v,pe),u(st,pe,null),e(pe,Ya),e(pe,nt),e(nt,Za),e(nt,Vs),e(Vs,eo),e(nt,to),c(t,An,m),c(t,me,m),e(me,so),e(me,es),e(es,no),e(me,ro),c(t,Sn,m),c(t,H,m),e(H,ce),e(ce,Us),u(rt,Us,null),e(H,ao),e(H,Ws),e(Ws,oo),c(t,Ln,m),c(t,$,m),u(at,$,null),e($,io),e($,R),e(R,lo),e(R,Bs),e(Bs,po),e(R,mo),e(R,ot),e(ot,co),e(R,fo),e($,ho),e($,it),e(it,uo),e(it,ts),e(ts,go),e(it,_o),e($,ko),e($,N),u(lt,N,null),e(N,vo),e(N,Hs),e(Hs,To),e(N,$o),e(N,dt),e(dt,ss),e(ss,wo),e(ss,Rs),e(Rs,yo),e(dt,bo),e(dt,ns),e(ns,zo),e(ns,Xs),e(Xs,Mo),e($,Eo),e($,fe),u(pt,fe,null),e(fe,xo),e(fe,Ks),e(Ks,qo),c(t,Nn,m),c(t,he,m),e(he,Fo),e(he,rs),e(rs,jo),e(he,Co),c(t,Dn,m),c(t,X,m),e(X,ue),e(ue,Js),u(mt,Js,null),e(X,Po),e(X,Qs),e(Qs,Ao),c(t,In,m),c(t,b,m),u(ct,b,null),e(b,So),e(b,ft),e(ft,Lo),e(ft,as),e(as,No),e(ft,Do),e(b,Io),e(b,Ys),e(Ys,Go),e(b,Oo),u(ht,b,null),c(t,Gn,m),c(t,K,m),e(K,ge),e(ge,Zs),u(ut,Zs,null),e(K,Vo),e(K,en),e(en,Uo),c(t,On,m),c(t,z,m),u(gt,z,null),e(z,Wo),e(z,_t),e(_t,Bo),e(_t,os),e(os,Ho),e(_t,Ro),e(z,Xo),e(z,tn),e(tn,Ko),e(z,Jo),u(kt,z,null),c(t,Vn,m),c(t,J,m),e(J,_e),e(_e,sn),u(vt,sn,null),e(J,Qo),e(J,nn),e(nn,Yo),c(t,Un,m),c(t,M,m),u(Tt,M,null),e(M,Zo),e(M,$t),e($t,ei),e($t,is),e(is,ti),e($t,si),e(M,ni),e(M,rn),e(rn,ri),e(M,ai),u(wt,M,null),c(t,Wn,m),c(t,Q,m),e(Q,ke),e(ke,an),u(yt,an,null),e(Q,oi),e(Q,on),e(on,ii),c(t,Bn,m),c(t,E,m),u(bt,E,null),e(E,li),e(E,zt),e(zt,di),e(zt,ls),e(ls,pi),e(zt,mi),e(E,ci),e(E,ln),e(ln,fi),e(E,hi),u(Mt,E,null),c(t,Hn,m),c(t,Y,m),e(Y,ve),e(ve,dn),u(Et,dn,null),e(Y,ui),e(Y,pn),e(pn,gi),c(t,Rn,m),c(t,x,m),u(xt,x,null),e(x,_i),e(x,qt),e(qt,ki),e(qt,ds),e(ds,vi),e(qt,Ti),e(x,$i),e(x,mn),e(mn,wi),e(x,yi),u(Ft,x,null),c(t,Xn,m),c(t,Z,m),e(Z,Te),e(Te,cn),u(jt,cn,null),e(Z,bi),e(Z,fn),e(fn,zi),c(t,Kn,m),c(t,q,m),u(Ct,q,null),e(q,Mi),e(q,Pt),e(Pt,Ei),e(Pt,ps),e(ps,xi),e(Pt,qi),e(q,Fi),e(q,hn),e(hn,ji),e(q,Ci),u(At,q,null),c(t,Jn,m),c(t,ee,m),e(ee,$e),e($e,un),u(St,un,null),e(ee,Pi),e(ee,gn),e(gn,Ai),c(t,Qn,m),c(t,F,m),u(Lt,F,null),e(F,Si),e(F,Nt),e(Nt,Li),e(Nt,ms),e(ms,Ni),e(Nt,Di),e(F,Ii),e(F,_n),e(_n,Gi),e(F,Oi),u(Dt,F,null),c(t,Yn,m),c(t,te,m),e(te,we),e(we,kn),u(It,kn,null),e(te,Vi),e(te,vn),e(vn,Ui),c(t,Zn,m),c(t,j,m),u(Gt,j,null),e(j,Wi),e(j,Ot),e(Ot,Bi),e(Ot,cs),e(cs,Hi),e(Ot,Ri),e(j,Xi),e(j,Tn),e(Tn,Ki),e(j,Ji),u(Vt,j,null),er=!0},p:Yd,i(t){er||(g(Pe.$$.fragment,t),g(Ae.$$.fragment,t),g(We.$$.fragment,t),g(Be.$$.fragment,t),g(Re.$$.fragment,t),g(Xe.$$.fragment,t),g(Ye.$$.fragment,t),g(et.$$.fragment,t),g(tt.$$.fragment,t),g(st.$$.fragment,t),g(rt.$$.fragment,t),g(at.$$.fragment,t),g(lt.$$.fragment,t),g(pt.$$.fragment,t),g(mt.$$.fragment,t),g(ct.$$.fragment,t),g(ht.$$.fragment,t),g(ut.$$.fragment,t),g(gt.$$.fragment,t),g(kt.$$.fragment,t),g(vt.$$.fragment,t),g(Tt.$$.fragment,t),g(wt.$$.fragment,t),g(yt.$$.fragment,t),g(bt.$$.fragment,t),g(Mt.$$.fragment,t),g(Et.$$.fragment,t),g(xt.$$.fragment,t),g(Ft.$$.fragment,t),g(jt.$$.fragment,t),g(Ct.$$.fragment,t),g(At.$$.fragment,t),g(St.$$.fragment,t),g(Lt.$$.fragment,t),g(Dt.$$.fragment,t),g(It.$$.fragment,t),g(Gt.$$.fragment,t),g(Vt.$$.fragment,t),er=!0)},o(t){_(Pe.$$.fragment,t),_(Ae.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Re.$$.fragment,t),_(Xe.$$.fragment,t),_(Ye.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(st.$$.fragment,t),_(rt.$$.fragment,t),_(at.$$.fragment,t),_(lt.$$.fragment,t),_(pt.$$.fragment,t),_(mt.$$.fragment,t),_(ct.$$.fragment,t),_(ht.$$.fragment,t),_(ut.$$.fragment,t),_(gt.$$.fragment,t),_(kt.$$.fragment,t),_(vt.$$.fragment,t),_(Tt.$$.fragment,t),_(wt.$$.fragment,t),_(yt.$$.fragment,t),_(bt.$$.fragment,t),_(Mt.$$.fragment,t),_(Et.$$.fragment,t),_(xt.$$.fragment,t),_(Ft.$$.fragment,t),_(jt.$$.fragment,t),_(Ct.$$.fragment,t),_(At.$$.fragment,t),_(St.$$.fragment,t),_(Lt.$$.fragment,t),_(Dt.$$.fragment,t),_(It.$$.fragment,t),_(Gt.$$.fragment,t),_(Vt.$$.fragment,t),er=!1},d(t){s(G),t&&s($n),t&&s(O),k(Pe),t&&s(wn),t&&s(V),k(Ae),t&&s(yn),t&&s(re),t&&s(bn),t&&s(Ut),t&&s(zn),t&&s(Wt),t&&s(Mn),t&&s(ae),t&&s(En),t&&s(Bt),t&&s(xn),t&&s(w),t&&s(qn),t&&s(S),t&&s(Fn),t&&s(U),k(We),t&&s(jn),t&&s(P),k(Be),t&&s(Cn),t&&s(B),k(Re),t&&s(Pn),t&&s(v),k(Xe),k(Ye),k(et),k(tt),k(st),t&&s(An),t&&s(me),t&&s(Sn),t&&s(H),k(rt),t&&s(Ln),t&&s($),k(at),k(lt),k(pt),t&&s(Nn),t&&s(he),t&&s(Dn),t&&s(X),k(mt),t&&s(In),t&&s(b),k(ct),k(ht),t&&s(Gn),t&&s(K),k(ut),t&&s(On),t&&s(z),k(gt),k(kt),t&&s(Vn),t&&s(J),k(vt),t&&s(Un),t&&s(M),k(Tt),k(wt),t&&s(Wn),t&&s(Q),k(yt),t&&s(Bn),t&&s(E),k(bt),k(Mt),t&&s(Hn),t&&s(Y),k(Et),t&&s(Rn),t&&s(x),k(xt),k(Ft),t&&s(Xn),t&&s(Z),k(jt),t&&s(Kn),t&&s(q),k(Ct),k(At),t&&s(Jn),t&&s(ee),k(St),t&&s(Qn),t&&s(F),k(Lt),k(Dt),t&&s(Yn),t&&s(te),k(It),t&&s(Zn),t&&s(j),k(Gt),k(Vt)}}}const tp={local:"mt5",sections:[{local:"overview",title:"Overview"},{local:"transformers.MT5Config",title:"MT5Config"},{local:"transformers.T5Tokenizer",title:"MT5Tokenizer"},{local:"transformers.T5TokenizerFast",title:"MT5TokenizerFast"},{local:"transformers.MT5Model",title:"MT5Model"},{local:"transformers.MT5ForConditionalGeneration",title:"MT5ForConditionalGeneration"},{local:"transformers.MT5EncoderModel",title:"MT5EncoderModel"},{local:"transformers.TFMT5Model",title:"TFMT5Model"},{local:"transformers.TFMT5ForConditionalGeneration",title:"TFMT5ForConditionalGeneration"},{local:"transformers.TFMT5EncoderModel",title:"TFMT5EncoderModel"},{local:"transformers.FlaxMT5Model",title:"FlaxMT5Model"},{local:"transformers.FlaxMT5ForConditionalGeneration",title:"FlaxMT5ForConditionalGeneration"}],title:"mT5"};function sp(sl){return Zd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ip extends Xd{constructor(G){super();Kd(this,G,sp,ep,Jd,{})}}export{ip as default,tp as metadata};
