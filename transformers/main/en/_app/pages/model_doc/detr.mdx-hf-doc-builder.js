import{S as Xg,i as e_,s as t_,e as a,k as d,w as b,t as n,M as o_,c as s,d as t,m as c,a as i,x as v,h as r,b as l,G as e,g as p,y as D,q as y,o as T,B as x,v as n_,L as ri}from"../../chunks/vendor-hf-doc-builder.js";import{T as oi}from"../../chunks/Tip-hf-doc-builder.js";import{D as M}from"../../chunks/Docstring-hf-doc-builder.js";import{C as qo}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as Ft}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as ni}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function r_(z){let f,E,g,u,w;return u=new qo({props:{code:`from transformers import DetrModel, DetrConfig

# Initializing a DETR facebook/detr-resnet-50 style configuration
configuration = DetrConfig()

# Initializing a model from the facebook/detr-resnet-50 style configuration
model = DetrModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrModel, DetrConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a DETR facebook/detr-resnet-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = DetrConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the facebook/detr-resnet-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){f=a("p"),E=n("Examples:"),g=d(),b(u.$$.fragment)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Examples:"),_.forEach(t),g=c(m),v(u.$$.fragment,m)},m(m,_){p(m,f,_),e(f,E),p(m,g,_),D(u,m,_),w=!0},p:ri,i(m){w||(y(u.$$.fragment,m),w=!0)},o(m){T(u.$$.fragment,m),w=!1},d(m){m&&t(f),m&&t(g),x(u,m)}}}function a_(z){let f,E;return{c(){f=a("p"),E=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(g){f=s(g,"P",{});var u=i(f);E=r(u,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),u.forEach(t)},m(g,u){p(g,f,u),e(f,E)},d(g){g&&t(f)}}}function s_(z){let f,E,g,u,w;return{c(){f=a("p"),E=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),w=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=s(_,"CODE",{});var U=i(g);u=r(U,"Module"),U.forEach(t),w=r(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){p(m,f,_),e(f,E),e(f,g),e(g,u),e(f,w)},d(m){m&&t(f)}}}function i_(z){let f,E,g,u,w;return u=new qo({props:{code:`from transformers import DetrFeatureExtractor, DetrModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = DetrFeatureExtractor.from_pretrained("facebook/detr-resnet-50")
model = DetrModel.from_pretrained("facebook/detr-resnet-50")
inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrFeatureExtractor, DetrModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = DetrFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrModel.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){f=a("p"),E=n("Examples:"),g=d(),b(u.$$.fragment)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Examples:"),_.forEach(t),g=c(m),v(u.$$.fragment,m)},m(m,_){p(m,f,_),e(f,E),p(m,g,_),D(u,m,_),w=!0},p:ri,i(m){w||(y(u.$$.fragment,m),w=!0)},o(m){T(u.$$.fragment,m),w=!1},d(m){m&&t(f),m&&t(g),x(u,m)}}}function d_(z){let f,E,g,u,w;return{c(){f=a("p"),E=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),w=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=s(_,"CODE",{});var U=i(g);u=r(U,"Module"),U.forEach(t),w=r(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){p(m,f,_),e(f,E),e(f,g),e(g,u),e(f,w)},d(m){m&&t(f)}}}function c_(z){let f,E,g,u,w;return u=new qo({props:{code:`from transformers import DetrFeatureExtractor, DetrForObjectDetection
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = DetrFeatureExtractor.from_pretrained("facebook/detr-resnet-50")
model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
# model predicts bounding boxes and corresponding COCO classes
logits = outputs.logits
bboxes = outputs.pred_boxes`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrFeatureExtractor, DetrForObjectDetection
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = DetrFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrForObjectDetection.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts bounding boxes and corresponding COCO classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span>bboxes = outputs.pred_boxes`}}),{c(){f=a("p"),E=n("Examples:"),g=d(),b(u.$$.fragment)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Examples:"),_.forEach(t),g=c(m),v(u.$$.fragment,m)},m(m,_){p(m,f,_),e(f,E),p(m,g,_),D(u,m,_),w=!0},p:ri,i(m){w||(y(u.$$.fragment,m),w=!0)},o(m){T(u.$$.fragment,m),w=!1},d(m){m&&t(f),m&&t(g),x(u,m)}}}function l_(z){let f,E,g,u,w;return{c(){f=a("p"),E=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=a("code"),u=n("Module"),w=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=s(_,"CODE",{});var U=i(g);u=r(U,"Module"),U.forEach(t),w=r(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(t)},m(m,_){p(m,f,_),e(f,E),e(f,g),e(g,u),e(f,w)},d(m){m&&t(f)}}}function h_(z){let f,E,g,u,w;return u=new qo({props:{code:`from transformers import DetrFeatureExtractor, DetrForSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = DetrFeatureExtractor.from_pretrained("facebook/detr-resnet-50-panoptic")
model = DetrForSegmentation.from_pretrained("facebook/detr-resnet-50-panoptic")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
# model predicts COCO classes, bounding boxes, and masks
logits = outputs.logits
bboxes = outputs.pred_boxes
masks = outputs.pred_masks`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrFeatureExtractor, DetrForSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = DetrFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50-panoptic&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrForSegmentation.from_pretrained(<span class="hljs-string">&quot;facebook/detr-resnet-50-panoptic&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts COCO classes, bounding boxes, and masks</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span>bboxes = outputs.pred_boxes
<span class="hljs-meta">&gt;&gt;&gt; </span>masks = outputs.pred_masks`}}),{c(){f=a("p"),E=n("Examples:"),g=d(),b(u.$$.fragment)},l(m){f=s(m,"P",{});var _=i(f);E=r(_,"Examples:"),_.forEach(t),g=c(m),v(u.$$.fragment,m)},m(m,_){p(m,f,_),e(f,E),p(m,g,_),D(u,m,_),w=!0},p:ri,i(m){w||(y(u.$$.fragment,m),w=!0)},o(m){T(u.$$.fragment,m),w=!1},d(m){m&&t(f),m&&t(g),x(u,m)}}}function m_(z){let f,E,g,u,w,m,_,U,ai,Ia,De,Ae,Mn,$t,si,An,ii,Ra,Ie,di,Ot,ci,li,La,Po,hi,Ha,No,In,mi,Ua,fe,pi,kt,fi,ui,Ct,gi,_i,Wa,Re,bi,zt,vi,Di,Ga,Le,yi,So,Ti,xi,Ba,$,wi,Rn,Ei,Fi,Ln,$i,Oi,Hn,ki,Ci,Un,zi,ji,Wn,qi,Pi,Gn,Ni,Si,Bn,Mi,Ai,Vn,Ii,Ri,Va,j,Li,Yn,Hi,Ui,Qn,Wi,Gi,Kn,Bi,Vi,Zn,Yi,Qi,Jn,Ki,Zi,Xn,Ji,Xi,Ya,Y,ed,er,td,od,jt,nd,rd,qt,ad,sd,Qa,Q,id,Mo,dd,cd,Ao,ld,hd,Io,md,pd,Ka,Ro,fd,Za,k,te,ud,tr,gd,_d,or,bd,vd,Lo,Dd,yd,Td,nr,xd,wd,oe,Ed,rr,Fd,$d,Ho,Od,kd,ar,Cd,zd,jd,ne,qd,sr,Pd,Nd,Uo,Sd,Md,ir,Ad,Id,Rd,G,Ld,dr,Hd,Ud,cr,Wd,Gd,lr,Bd,Vd,Pt,Yd,Qd,Kd,P,Wo,Zd,Jd,Go,Xd,ec,Nt,tc,oc,hr,nc,rc,Bo,ac,sc,mr,ic,dc,cc,re,lc,Vo,hc,mc,pr,pc,fc,Yo,uc,gc,_c,ye,bc,fr,vc,Dc,St,yc,Tc,Ja,Qo,xc,Xa,Ko,wc,es,Mt,ts,Zo,Ec,os,At,ns,Jo,Fc,rs,It,as,Xo,$c,ss,He,ur,ae,gr,Oc,kc,_r,Cc,zc,br,jc,qc,vr,Pc,Nc,A,se,Dr,yr,Sc,Mc,Tr,Ac,Ic,xr,Rc,Lc,wr,Hc,Uc,ie,Er,Fr,Wc,Gc,$r,en,Bc,Vc,Or,tn,Yc,Qc,kr,on,Kc,Zc,de,Cr,zr,Jc,Xc,jr,el,tl,qr,ol,nl,Pr,rl,al,ce,Rt,Nr,sl,il,nn,dl,cl,Te,ll,Sr,hl,ml,Mr,pl,fl,ul,I,gl,Ar,_l,bl,Ir,vl,Dl,Rr,yl,Tl,Lr,xl,wl,Hr,El,Fl,$l,le,Ol,Ur,kl,Cl,Wr,zl,jl,Gr,ql,Pl,Nl,he,rn,Br,Sl,Ml,Al,Vr,an,Il,Rl,Yr,sn,Ll,Hl,Lt,dn,Ul,Wl,cn,Gl,Bl,me,Qr,Kr,Vl,Yl,Ht,Zr,Ql,Kl,Jr,Zl,Jl,xe,Xr,Xl,eh,ea,th,oh,ta,nh,rh,pe,oa,ah,sh,na,ih,dh,ra,ch,lh,aa,hh,is,F,mh,ln,ph,fh,sa,uh,gh,ia,_h,bh,da,vh,Dh,hn,yh,Th,ca,xh,wh,la,Eh,Fh,Ut,$h,Oh,Wt,kh,Ch,ds,we,Ue,ha,Gt,zh,ma,jh,cs,Ee,Bt,qh,pa,Ph,ls,Fe,Vt,Nh,Yt,Sh,mn,Mh,Ah,hs,$e,Qt,Ih,Kt,Rh,pn,Lh,Hh,ms,Oe,We,fa,Zt,Uh,ua,Wh,ps,B,Jt,Gh,ke,Bh,fn,Vh,Yh,Xt,Qh,Kh,Zh,Ce,Jh,un,Xh,em,gn,tm,om,nm,Ge,fs,ze,Be,ga,eo,rm,_a,am,us,O,to,sm,ba,im,dm,oo,cm,_n,lm,hm,mm,ue,no,pm,va,fm,um,Ve,gm,Ye,ro,_m,ao,bm,Da,vm,Dm,ym,Qe,so,Tm,io,xm,bn,wm,Em,Fm,Ke,co,$m,lo,Om,vn,km,Cm,zm,Ze,ho,jm,mo,qm,Dn,Pm,Nm,gs,je,Je,ya,po,Sm,Ta,Mm,_s,R,fo,Am,xa,Im,Rm,uo,Lm,yn,Hm,Um,Wm,go,Gm,_o,Bm,Vm,Ym,K,bo,Qm,qe,Km,Tn,Zm,Jm,wa,Xm,ep,tp,Xe,op,et,bs,Pe,tt,Ea,vo,np,Fa,rp,vs,L,Do,ap,$a,sp,ip,yo,dp,xn,cp,lp,hp,To,mp,xo,pp,fp,up,Z,wo,gp,Ne,_p,wn,bp,vp,Oa,Dp,yp,Tp,ot,xp,nt,Ds,Se,rt,ka,Eo,wp,Ca,Ep,ys,H,Fo,Fp,za,$p,Op,$o,kp,En,Cp,zp,jp,Oo,qp,ko,Pp,Np,Sp,J,Co,Mp,Me,Ap,Fn,Ip,Rp,ja,Lp,Hp,Up,at,Wp,st,Ts;return m=new Ft({}),$t=new Ft({}),Mt=new qo({props:{code:`from transformers import DetrForObjectDetection

model = DetrForObjectDetection.from_pretrained("facebook/resnet-50")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrForObjectDetection.from_pretrained(<span class="hljs-string">&quot;facebook/resnet-50&quot;</span>)`}}),At=new qo({props:{code:`from transformers import DetrConfig, DetrForObjectDetection

config = DetrConfig()
model = DetrForObjectDetection(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DetrConfig, DetrForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span>config = DetrConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrForObjectDetection(config)`}}),It=new qo({props:{code:`config = DetrConfig(use_pretrained_backbone=False)
model = DetrForObjectDetection(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>config = DetrConfig(use_pretrained_backbone=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = DetrForObjectDetection(config)`}}),Gt=new Ft({}),Bt=new M({props:{name:"class transformers.models.detr.modeling_detr.DetrModelOutput",anchor:"transformers.models.detr.modeling_detr.DetrModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"past_key_values",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"intermediate_hidden_states",val:": typing.Optional[torch.FloatTensor] = None"}],parametersDescription:[{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"encoder_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrModelOutput.intermediate_hidden_states",description:`<strong>intermediate_hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, sequence_length, hidden_size)</code>, <em>optional</em>, returned when <code>config.auxiliary_loss=True</code>) &#x2014;
Intermediate decoder activations, i.e. the output of each decoder layer, each of them gone through a
layernorm.`,name:"intermediate_hidden_states"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L95"}}),Vt=new M({props:{name:"class transformers.models.detr.modeling_detr.DetrObjectDetectionOutput",anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"loss_dict",val:": typing.Optional[typing.Dict] = None"},{name:"logits",val:": FloatTensor = None"},{name:"pred_boxes",val:": FloatTensor = None"},{name:"auxiliary_outputs",val:": typing.Optional[typing.List[typing.Dict]] = None"},{name:"last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) &#x2014;
Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.`,name:"loss"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.loss_dict",description:`<strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary containing the individual losses. Useful for logging.`,name:"loss_dict"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) &#x2014;
Classification logits (including no-object) for all queries.`,name:"logits"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.pred_boxes",description:`<strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) &#x2014;
Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process">post_process()</a> to retrieve the unnormalized bounding
boxes.`,name:"pred_boxes"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.auxiliary_outputs",description:`<strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) &#x2014;
Optional, only returned when auxilary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.`,name:"auxiliary_outputs"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrObjectDetectionOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L135"}}),Qt=new M({props:{name:"class transformers.models.detr.modeling_detr.DetrSegmentationOutput",anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"loss_dict",val:": typing.Optional[typing.Dict] = None"},{name:"logits",val:": FloatTensor = None"},{name:"pred_boxes",val:": FloatTensor = None"},{name:"pred_masks",val:": FloatTensor = None"},{name:"auxiliary_outputs",val:": typing.Optional[typing.List[typing.Dict]] = None"},{name:"last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.loss",description:`<strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) &#x2014;
Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.`,name:"loss"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.loss_dict",description:`<strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
A dictionary containing the individual losses. Useful for logging.`,name:"loss_dict"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.logits",description:`<strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) &#x2014;
Classification logits (including no-object) for all queries.`,name:"logits"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.pred_boxes",description:`<strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) &#x2014;
Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process">post_process()</a> to retrieve the unnormalized bounding
boxes.`,name:"pred_boxes"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.pred_masks",description:`<strong>pred_masks</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, height/4, width/4)</code>) &#x2014;
Segmentation masks logits for all queries. See also <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_segmentation">post_process_segmentation()</a> or
<a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_panoptic">post_process_panoptic()</a> to evaluate instance and panoptic segmentation masks
respectively.`,name:"pred_masks"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.auxiliary_outputs",description:`<strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) &#x2014;
Optional, only returned when auxiliary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.`,name:"auxiliary_outputs"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the decoder of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.`,name:"decoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"decoder_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder&#x2019;s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.`,name:"cross_attentions"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Sequence of hidden-states at the output of the last layer of the encoder of the model.`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.`,name:"encoder_hidden_states"},{anchor:"transformers.models.detr.modeling_detr.DetrSegmentationOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"encoder_attentions"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L198"}}),Zt=new Ft({}),Jt=new M({props:{name:"class transformers.DetrConfig",anchor:"transformers.DetrConfig",parameters:[{name:"num_queries",val:" = 100"},{name:"max_position_embeddings",val:" = 1024"},{name:"encoder_layers",val:" = 6"},{name:"encoder_ffn_dim",val:" = 2048"},{name:"encoder_attention_heads",val:" = 8"},{name:"decoder_layers",val:" = 6"},{name:"decoder_ffn_dim",val:" = 2048"},{name:"decoder_attention_heads",val:" = 8"},{name:"encoder_layerdrop",val:" = 0.0"},{name:"decoder_layerdrop",val:" = 0.0"},{name:"is_encoder_decoder",val:" = True"},{name:"activation_function",val:" = 'relu'"},{name:"d_model",val:" = 256"},{name:"dropout",val:" = 0.1"},{name:"attention_dropout",val:" = 0.0"},{name:"activation_dropout",val:" = 0.0"},{name:"init_std",val:" = 0.02"},{name:"init_xavier_std",val:" = 1.0"},{name:"classifier_dropout",val:" = 0.0"},{name:"scale_embedding",val:" = False"},{name:"auxiliary_loss",val:" = False"},{name:"position_embedding_type",val:" = 'sine'"},{name:"backbone",val:" = 'resnet50'"},{name:"use_pretrained_backbone",val:" = True"},{name:"dilation",val:" = False"},{name:"class_cost",val:" = 1"},{name:"bbox_cost",val:" = 5"},{name:"giou_cost",val:" = 2"},{name:"mask_loss_coefficient",val:" = 1"},{name:"dice_loss_coefficient",val:" = 1"},{name:"bbox_loss_coefficient",val:" = 5"},{name:"giou_loss_coefficient",val:" = 2"},{name:"eos_coefficient",val:" = 0.1"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DetrConfig.num_queries",description:`<strong>num_queries</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
Number of object queries, i.e. detection slots. This is the maximal number of objects <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> can
detect in a single image. For COCO, we recommend 100 queries.`,name:"num_queries"},{anchor:"transformers.DetrConfig.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Dimension of the layers.`,name:"d_model"},{anchor:"transformers.DetrConfig.encoder_layers",description:`<strong>encoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of encoder layers.`,name:"encoder_layers"},{anchor:"transformers.DetrConfig.decoder_layers",description:`<strong>decoder_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of decoder layers.`,name:"decoder_layers"},{anchor:"transformers.DetrConfig.encoder_attention_heads",description:`<strong>encoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"encoder_attention_heads"},{anchor:"transformers.DetrConfig.decoder_attention_heads",description:`<strong>decoder_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of attention heads for each attention layer in the Transformer decoder.`,name:"decoder_attention_heads"},{anchor:"transformers.DetrConfig.decoder_ffn_dim",description:`<strong>decoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimension of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"decoder_ffn_dim"},{anchor:"transformers.DetrConfig.encoder_ffn_dim",description:`<strong>encoder_ffn_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimension of the &#x201C;intermediate&#x201D; (often named feed-forward) layer in decoder.`,name:"encoder_ffn_dim"},{anchor:"transformers.DetrConfig.activation_function",description:`<strong>activation_function</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"activation_function"},{anchor:"transformers.DetrConfig.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"dropout"},{anchor:"transformers.DetrConfig.attention_dropout",description:`<strong>attention_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_dropout"},{anchor:"transformers.DetrConfig.activation_dropout",description:`<strong>activation_dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for activations inside the fully connected layer.`,name:"activation_dropout"},{anchor:"transformers.DetrConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.DetrConfig.init_xavier_std",description:`<strong>init_xavier_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
The scaling factor used for the Xavier initialization gain in the HM Attention map module.
encoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
The LayerDrop probability for the encoder. See the [LayerDrop paper](see <a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>)
for more details.
decoder_layerdrop &#x2014; (<code>float</code>, <em>optional</em>, defaults to 0.0):
The LayerDrop probability for the decoder. See the [LayerDrop paper](see <a href="https://arxiv.org/abs/1909.11556" rel="nofollow">https://arxiv.org/abs/1909.11556</a>)
for more details.`,name:"init_xavier_std"},{anchor:"transformers.DetrConfig.auxiliary_loss",description:`<strong>auxiliary_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether auxiliary decoding losses (loss at each decoder layer) are to be used.`,name:"auxiliary_loss"},{anchor:"transformers.DetrConfig.position_embedding_type",description:`<strong>position_embedding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;sine&quot;</code>) &#x2014;
Type of position embeddings to be used on top of the image features. One of <code>&quot;sine&quot;</code> or <code>&quot;learned&quot;</code>.`,name:"position_embedding_type"},{anchor:"transformers.DetrConfig.backbone",description:`<strong>backbone</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;resnet50&quot;</code>) &#x2014;
Name of convolutional backbone to use. Supports any convolutional backbone from the timm package. For a
list of all available models, see <a href="https://rwightman.github.io/pytorch-image-models/#load-a-pretrained-model" rel="nofollow">this
page</a>.`,name:"backbone"},{anchor:"transformers.DetrConfig.use_pretrained_backbone",description:`<strong>use_pretrained_backbone</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use pretrained weights for the backbone.`,name:"use_pretrained_backbone"},{anchor:"transformers.DetrConfig.dilation",description:`<strong>dilation</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to replace stride with dilation in the last convolutional block (DC5).`,name:"dilation"},{anchor:"transformers.DetrConfig.class_cost",description:`<strong>class_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the classification error in the Hungarian matching cost.`,name:"class_cost"},{anchor:"transformers.DetrConfig.bbox_cost",description:`<strong>bbox_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 error of the bounding box coordinates in the Hungarian matching cost.`,name:"bbox_cost"},{anchor:"transformers.DetrConfig.giou_cost",description:`<strong>giou_cost</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss of the bounding box in the Hungarian matching cost.`,name:"giou_cost"},{anchor:"transformers.DetrConfig.mask_loss_coefficient",description:`<strong>mask_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the Focal loss in the panoptic segmentation loss.`,name:"mask_loss_coefficient"},{anchor:"transformers.DetrConfig.dice_loss_coefficient",description:`<strong>dice_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
Relative weight of the DICE/F-1 loss in the panoptic segmentation loss.`,name:"dice_loss_coefficient"},{anchor:"transformers.DetrConfig.bbox_loss_coefficient",description:`<strong>bbox_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 5) &#x2014;
Relative weight of the L1 bounding box loss in the object detection loss.`,name:"bbox_loss_coefficient"},{anchor:"transformers.DetrConfig.giou_loss_coefficient",description:`<strong>giou_loss_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 2) &#x2014;
Relative weight of the generalized IoU loss in the object detection loss.`,name:"giou_loss_coefficient"},{anchor:"transformers.DetrConfig.eos_coefficient",description:`<strong>eos_coefficient</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Relative classification weight of the &#x2018;no-object&#x2019; class in the object detection loss.`,name:"eos_coefficient"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/configuration_detr.py#L29"}}),Ge=new ni({props:{anchor:"transformers.DetrConfig.example",$$slots:{default:[r_]},$$scope:{ctx:z}}}),eo=new Ft({}),to=new M({props:{name:"class transformers.DetrFeatureExtractor",anchor:"transformers.DetrFeatureExtractor",parameters:[{name:"format",val:" = 'coco_detection'"},{name:"do_resize",val:" = True"},{name:"size",val:" = 800"},{name:"max_size",val:" = 1333"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.format",description:`<strong>format</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;coco_detection&quot;</code>) &#x2014;
Data format of the annotations. One of &#x201C;coco_detection&#x201D; or &#x201C;coco_panoptic&#x201D;.`,name:"format"},{anchor:"transformers.DetrFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.DetrFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 800) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If size is a
sequence like <code>(width, height)</code>, output size will be matched to this. If size is an int, smaller edge of
the image will be matched to this number. i.e, if <code>height &gt; width</code>, then image will be rescaled to <code>(size * height / width, size)</code>.`,name:"size"},{anchor:"transformers.DetrFeatureExtractor.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1333</code>) &#x2014;
The largest size an image dimension can have (otherwise it&#x2019;s capped). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"max_size"},{anchor:"transformers.DetrFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.DetrFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.DetrFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L122"}}),no=new M({props:{name:"__call__",anchor:"transformers.DetrFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"annotations",val:": typing.Union[typing.List[typing.Dict], typing.List[typing.List[typing.Dict]]] = None"},{name:"return_segmentation_masks",val:": typing.Optional[bool] = False"},{name:"masks_path",val:": typing.Optional[pathlib.Path] = None"},{name:"pad_and_return_pixel_mask",val:": typing.Optional[bool] = True"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.DetrFeatureExtractor.__call__.annotations",description:`<strong>annotations</strong> (<code>Dict</code>, <code>List[Dict]</code>, <em>optional</em>) &#x2014;
The corresponding annotations in COCO format.</p>
<p>In case <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_detection&quot;</code>, the annotations for
each image should have the following format: {&#x2018;image_id&#x2019;: int, &#x2018;annotations&#x2019;: [annotation]}, with the
annotations being a list of COCO object annotations.</p>
<p>In case <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_panoptic&quot;</code>, the annotations for
each image should have the following format: {&#x2018;image_id&#x2019;: int, &#x2018;file_name&#x2019;: str, &#x2018;segments_info&#x2019;:
[segment_info]} with segments_info being a list of COCO panoptic annotations.`,name:"annotations"},{anchor:"transformers.DetrFeatureExtractor.__call__.return_segmentation_masks",description:`<strong>return_segmentation_masks</strong> (<code>Dict</code>, <code>List[Dict]</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to also include instance segmentation masks as part of the labels in case <code>format = &quot;coco_detection&quot;</code>.`,name:"return_segmentation_masks"},{anchor:"transformers.DetrFeatureExtractor.__call__.masks_path",description:`<strong>masks_path</strong> (<code>pathlib.Path</code>, <em>optional</em>) &#x2014;
Path to the directory containing the PNG files that store the class-agnostic image segmentations. Only
relevant in case <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a> was initialized with <code>format = &quot;coco_panoptic&quot;</code>.`,name:"masks_path"},{anchor:"transformers.DetrFeatureExtractor.__call__.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.DetrFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L403",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<em>\u201Cpixel_mask\u201D</em> is in <code>self.model_input_names</code>).</li>
<li><strong>labels</strong> \u2014 Optional labels to be fed to a model (when <code>annotations</code> are provided)</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),Ve=new oi({props:{warning:!0,$$slots:{default:[a_]},$$scope:{ctx:z}}}),ro=new M({props:{name:"pad_and_create_pixel_mask",anchor:"transformers.DetrFeatureExtractor.pad_and_create_pixel_mask",parameters:[{name:"pixel_values_list",val:": typing.List[ForwardRef('torch.Tensor')]"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.pad_and_create_pixel_mask.pixel_values_list",description:`<strong>pixel_values_list</strong> (<code>List[torch.Tensor]</code>) &#x2014;
List of images (pixel values) to be padded. Each image should be a tensor of shape (C, H, W).`,name:"pixel_values_list"},{anchor:"transformers.DetrFeatureExtractor.pad_and_create_pixel_mask.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/main/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L633",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<em>\u201Cpixel_mask\u201D</em> is in <code>self.model_input_names</code>).</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),so=new M({props:{name:"post_process",anchor:"transformers.DetrFeatureExtractor.post_process",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:""}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.post_process.outputs",description:`<strong>outputs</strong> (<code>DetrObjectDetectionOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.DetrFeatureExtractor.post_process.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, 2)</code>) &#x2014;
Tensor containing the size (h, w) of each image of the batch. For evaluation, this must be the original
image size (before any data augmentation). For visualization, this should be the image size after data
augment, but before padding.`,name:"target_sizes"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L677",returnDescription:`
<p>A list of dictionaries, each dictionary containing the scores, labels and boxes for an image
in the batch as predicted by the model.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),co=new M({props:{name:"post_process_segmentation",anchor:"transformers.DetrFeatureExtractor.post_process_segmentation",parameters:[{name:"outputs",val:""},{name:"target_sizes",val:""},{name:"threshold",val:" = 0.9"},{name:"mask_threshold",val:" = 0.5"}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.post_process_segmentation.outputs",description:`<strong>outputs</strong> (<code>DetrSegmentationOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.DetrFeatureExtractor.post_process_segmentation.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, 2)</code> or <code>List[Tuple]</code> of length <code>batch_size</code>) &#x2014;
Torch Tensor (or list) corresponding to the requested final size (h, w) of each prediction.`,name:"target_sizes"},{anchor:"transformers.DetrFeatureExtractor.post_process_segmentation.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
Threshold to use to filter out queries.`,name:"threshold"},{anchor:"transformers.DetrFeatureExtractor.post_process_segmentation.mask_threshold",description:`<strong>mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.5) &#x2014;
Threshold to use when turning the predicted masks into binary values.`,name:"mask_threshold"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L715",returnDescription:`
<p>A list of dictionaries, each dictionary containing the scores, labels, and masks for an image
in the batch as predicted by the model.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),ho=new M({props:{name:"post_process_panoptic",anchor:"transformers.DetrFeatureExtractor.post_process_panoptic",parameters:[{name:"outputs",val:""},{name:"processed_sizes",val:""},{name:"target_sizes",val:" = None"},{name:"is_thing_map",val:" = None"},{name:"threshold",val:" = 0.85"}],parametersDescription:[{anchor:"transformers.DetrFeatureExtractor.post_process_panoptic.outputs",description:`<strong>outputs</strong> (<code>DetrSegmentationOutput</code>) &#x2014;
Raw outputs of the model.`,name:"outputs"},{anchor:"transformers.DetrFeatureExtractor.post_process_panoptic.processed_sizes",description:`<strong>processed_sizes</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, 2)</code> or <code>List[Tuple]</code> of length <code>batch_size</code>) &#x2014;
Torch Tensor (or list) containing the size (h, w) of each image of the batch, i.e. the size after data
augmentation but before batching.`,name:"processed_sizes"},{anchor:"transformers.DetrFeatureExtractor.post_process_panoptic.target_sizes",description:`<strong>target_sizes</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, 2)</code> or <code>List[Tuple]</code> of length <code>batch_size</code>, <em>optional</em>) &#x2014;
Torch Tensor (or list) corresponding to the requested final size (h, w) of each prediction. If left to
None, it will default to the <code>processed_sizes</code>.`,name:"target_sizes"},{anchor:"transformers.DetrFeatureExtractor.post_process_panoptic.is_thing_map",description:`<strong>is_thing_map</strong> (<code>torch.Tensor</code> of shape <code>(batch_size, 2)</code>, <em>optional</em>) &#x2014;
Dictionary mapping class indices to either True or False, depending on whether or not they are a thing.
If not set, defaults to the <code>is_thing_map</code> of COCO panoptic.`,name:"is_thing_map"},{anchor:"transformers.DetrFeatureExtractor.post_process_panoptic.threshold",description:`<strong>threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.85) &#x2014;
Threshold to use to filter out queries.`,name:"threshold"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/feature_extraction_detr.py#L801",returnDescription:`
<p>A list of dictionaries, each dictionary containing a PNG string and segments_info values for
an image in the batch as predicted by the model.</p>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),po=new Ft({}),fo=new M({props:{name:"class transformers.DetrModel",anchor:"transformers.DetrModel",parameters:[{name:"config",val:": DetrConfig"}],parametersDescription:[{anchor:"transformers.DetrModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1177"}}),bo=new M({props:{name:"forward",anchor:"transformers.DetrModel.forward",parameters:[{name:"pixel_values",val:""},{name:"pixel_mask",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"decoder_inputs_embeds",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.DetrModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it.</p>
<p>Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.__call__">DetrFeatureExtractor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.DetrModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.DetrModel.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_queries)</code>, <em>optional</em>) &#x2014;
Not used by default. Can be used to mask object queries.`,name:"decoder_attention_mask"},{anchor:"transformers.DetrModel.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>tuple(tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) is a sequence of
hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.DetrModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you
can choose to directly pass a flattened representation of an image.`,name:"inputs_embeds"},{anchor:"transformers.DetrModel.forward.decoder_inputs_embeds",description:`<strong>decoder_inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an
embedded representation.`,name:"decoder_inputs_embeds"},{anchor:"transformers.DetrModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DetrModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DetrModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1211",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrModelOutput"
>transformers.models.detr.modeling_detr.DetrModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"
>DetrConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
<li><strong>intermediate_hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(config.decoder_layers, batch_size, sequence_length, hidden_size)</code>, <em>optional</em>, returned when <code>config.auxiliary_loss=True</code>) \u2014 Intermediate decoder activations, i.e. the output of each decoder layer, each of them gone through a
layernorm.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrModelOutput"
>transformers.models.detr.modeling_detr.DetrModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Xe=new oi({props:{$$slots:{default:[s_]},$$scope:{ctx:z}}}),et=new ni({props:{anchor:"transformers.DetrModel.forward.example",$$slots:{default:[i_]},$$scope:{ctx:z}}}),vo=new Ft({}),Do=new M({props:{name:"class transformers.DetrForObjectDetection",anchor:"transformers.DetrForObjectDetection",parameters:[{name:"config",val:": DetrConfig"}],parametersDescription:[{anchor:"transformers.DetrForObjectDetection.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1336"}}),wo=new M({props:{name:"forward",anchor:"transformers.DetrForObjectDetection.forward",parameters:[{name:"pixel_values",val:""},{name:"pixel_mask",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"decoder_inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.DetrForObjectDetection.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it.</p>
<p>Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.__call__">DetrFeatureExtractor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.DetrForObjectDetection.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.DetrForObjectDetection.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_queries)</code>, <em>optional</em>) &#x2014;
Not used by default. Can be used to mask object queries.`,name:"decoder_attention_mask"},{anchor:"transformers.DetrForObjectDetection.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>tuple(tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) is a sequence of
hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.DetrForObjectDetection.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you
can choose to directly pass a flattened representation of an image.`,name:"inputs_embeds"},{anchor:"transformers.DetrForObjectDetection.forward.decoder_inputs_embeds",description:`<strong>decoder_inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an
embedded representation.`,name:"decoder_inputs_embeds"},{anchor:"transformers.DetrForObjectDetection.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DetrForObjectDetection.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DetrForObjectDetection.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DetrForObjectDetection.forward.labels",description:`<strong>labels</strong> (<code>List[Dict]</code> of len <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the bipartite matching loss. List of dicts, each dictionary containing at least the
following 2 keys: &#x2018;class_labels&#x2019; and &#x2018;boxes&#x2019; (the class labels and bounding boxes of an image in the batch
respectively). The class labels themselves should be a <code>torch.LongTensor</code> of len <code>(number of bounding boxes in the image,)</code> and the boxes a <code>torch.FloatTensor</code> of shape <code>(number of bounding boxes in the image, 4)</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1362",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrObjectDetectionOutput"
>transformers.models.detr.modeling_detr.DetrObjectDetectionOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"
>DetrConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) \u2014 Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.</li>
<li><strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) \u2014 A dictionary containing the individual losses. Useful for logging.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process"
>post_process()</a> to retrieve the unnormalized bounding
boxes.</li>
<li><strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) \u2014 Optional, only returned when auxilary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrObjectDetectionOutput"
>transformers.models.detr.modeling_detr.DetrObjectDetectionOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ot=new oi({props:{$$slots:{default:[d_]},$$scope:{ctx:z}}}),nt=new ni({props:{anchor:"transformers.DetrForObjectDetection.forward.example",$$slots:{default:[c_]},$$scope:{ctx:z}}}),Eo=new Ft({}),Fo=new M({props:{name:"class transformers.DetrForSegmentation",anchor:"transformers.DetrForSegmentation",parameters:[{name:"config",val:": DetrConfig"}],parametersDescription:[{anchor:"transformers.DetrForSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a>) &#x2014;
Model configuration class with all the parameters of the model. Initializing with a config file does not
load the weights associated with the model, only the configuration. Check out the
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1494"}}),Co=new M({props:{name:"forward",anchor:"transformers.DetrForSegmentation.forward",parameters:[{name:"pixel_values",val:""},{name:"pixel_mask",val:" = None"},{name:"decoder_attention_mask",val:" = None"},{name:"encoder_outputs",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"decoder_inputs_embeds",val:" = None"},{name:"labels",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.DetrForSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Padding will be ignored by default should you provide it.</p>
<p>Pixel values can be obtained using <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor">DetrFeatureExtractor</a>. See <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.__call__">DetrFeatureExtractor.<strong>call</strong>()</a> for
details.`,name:"pixel_values"},{anchor:"transformers.DetrForSegmentation.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.DetrForSegmentation.forward.decoder_attention_mask",description:`<strong>decoder_attention_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, num_queries)</code>, <em>optional</em>) &#x2014;
Not used by default. Can be used to mask object queries.`,name:"decoder_attention_mask"},{anchor:"transformers.DetrForSegmentation.forward.encoder_outputs",description:`<strong>encoder_outputs</strong> (<code>tuple(tuple(torch.FloatTensor)</code>, <em>optional</em>) &#x2014;
Tuple consists of (<code>last_hidden_state</code>, <em>optional</em>: <code>hidden_states</code>, <em>optional</em>: <code>attentions</code>)
<code>last_hidden_state</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) is a sequence of
hidden-states at the output of the last layer of the encoder. Used in the cross-attention of the decoder.`,name:"encoder_outputs"},{anchor:"transformers.DetrForSegmentation.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing the flattened feature map (output of the backbone + projection layer), you
can choose to directly pass a flattened representation of an image.`,name:"inputs_embeds"},{anchor:"transformers.DetrForSegmentation.forward.decoder_inputs_embeds",description:`<strong>decoder_inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of initializing the queries with a tensor of zeros, you can choose to directly pass an
embedded representation.`,name:"decoder_inputs_embeds"},{anchor:"transformers.DetrForSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.DetrForSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.DetrForSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/main/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.DetrForSegmentation.forward.labels",description:`<strong>labels</strong> (<code>List[Dict]</code> of len <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the bipartite matching loss, DICE/F-1 loss and Focal loss. List of dicts, each
dictionary containing at least the following 3 keys: &#x2018;class_labels&#x2019;, &#x2018;boxes&#x2019; and &#x2018;masks&#x2019; (the class labels,
bounding boxes and segmentation masks of an image in the batch respectively). The class labels themselves
should be a <code>torch.LongTensor</code> of len <code>(number of bounding boxes in the image,)</code>, the boxes a
<code>torch.FloatTensor</code> of shape <code>(number of bounding boxes in the image, 4)</code> and the masks a
<code>torch.FloatTensor</code> of shape <code>(number of bounding boxes in the image, height, width)</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/detr/modeling_detr.py#L1516",returnDescription:`
<p>A <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrSegmentationOutput"
>transformers.models.detr.modeling_detr.DetrSegmentationOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"
>DetrConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> are provided)) \u2014 Total loss as a linear combination of a negative log-likehood (cross-entropy) for class prediction and a
bounding box loss. The latter is defined as a linear combination of the L1 loss and the generalized
scale-invariant IoU loss.</li>
<li><strong>loss_dict</strong> (<code>Dict</code>, <em>optional</em>) \u2014 A dictionary containing the individual losses. Useful for logging.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, num_classes + 1)</code>) \u2014 Classification logits (including no-object) for all queries.</li>
<li><strong>pred_boxes</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, 4)</code>) \u2014 Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height). These
values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding
possible padding). You can use <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process"
>post_process()</a> to retrieve the unnormalized bounding
boxes.</li>
<li><strong>pred_masks</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_queries, height/4, width/4)</code>) \u2014 Segmentation masks logits for all queries. See also <a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_segmentation"
>post_process_segmentation()</a> or
<a
  href="/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_panoptic"
>post_process_panoptic()</a> to evaluate instance and panoptic segmentation masks
respectively.</li>
<li><strong>auxiliary_outputs</strong> (<code>list[Dict]</code>, <em>optional</em>) \u2014 Optional, only returned when auxiliary losses are activated (i.e. <code>config.auxiliary_loss</code> is set to <code>True</code>)
and labels are provided. It is a list of dictionaries containing the two above keys (<code>logits</code> and
<code>pred_boxes</code>) for each decoder layer.</li>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the decoder of the model.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the decoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>decoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
<li><strong>cross_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the decoder\u2019s cross-attention layer, after the attention softmax,
used to compute the weighted average in the cross-attention heads.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) \u2014 Sequence of hidden-states at the output of the last layer of the encoder of the model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the encoder at the output of each
layer plus the initial embedding outputs.</li>
<li><strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights of the encoder, after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/main/en/model_doc/detr#transformers.models.detr.modeling_detr.DetrSegmentationOutput"
>transformers.models.detr.modeling_detr.DetrSegmentationOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),at=new oi({props:{$$slots:{default:[l_]},$$scope:{ctx:z}}}),st=new ni({props:{anchor:"transformers.DetrForSegmentation.forward.example",$$slots:{default:[h_]},$$scope:{ctx:z}}}),{c(){f=a("meta"),E=d(),g=a("h1"),u=a("a"),w=a("span"),b(m.$$.fragment),_=d(),U=a("span"),ai=n("DETR"),Ia=d(),De=a("h2"),Ae=a("a"),Mn=a("span"),b($t.$$.fragment),si=d(),An=a("span"),ii=n("Overview"),Ra=d(),Ie=a("p"),di=n("The DETR model was proposed in "),Ot=a("a"),ci=n("End-to-End Object Detection with Transformers"),li=n(` by
Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov and Sergey Zagoruyko. DETR
consists of a convolutional backbone followed by an encoder-decoder Transformer which can be trained end-to-end for
object detection. It greatly simplifies a lot of the complexity of models like Faster-R-CNN and Mask-R-CNN, which use
things like region proposals, non-maximum suppression procedure and anchor generation. Moreover, DETR can also be
naturally extended to perform panoptic segmentation, by simply adding a mask head on top of the decoder outputs.`),La=d(),Po=a("p"),hi=n("The abstract from the paper is the following:"),Ha=d(),No=a("p"),In=a("em"),mi=n(`We present a new method that views object detection as a direct set prediction problem. Our approach streamlines the
detection pipeline, effectively removing the need for many hand-designed components like a non-maximum suppression
procedure or anchor generation that explicitly encode our prior knowledge about the task. The main ingredients of the
new framework, called DEtection TRansformer or DETR, are a set-based global loss that forces unique predictions via
bipartite matching, and a transformer encoder-decoder architecture. Given a fixed small set of learned object queries,
DETR reasons about the relations of the objects and the global image context to directly output the final set of
predictions in parallel. The new model is conceptually simple and does not require a specialized library, unlike many
other modern detectors. DETR demonstrates accuracy and run-time performance on par with the well-established and
highly-optimized Faster RCNN baseline on the challenging COCO object detection dataset. Moreover, DETR can be easily
generalized to produce panoptic segmentation in a unified manner. We show that it significantly outperforms competitive
baselines.`),Ua=d(),fe=a("p"),pi=n("This model was contributed by "),kt=a("a"),fi=n("nielsr"),ui=n(". The original code can be found "),Ct=a("a"),gi=n("here"),_i=n("."),Wa=d(),Re=a("p"),bi=n("The quickest way to get started with DETR is by checking the "),zt=a("a"),vi=n("example notebooks"),Di=n(` (which showcase both inference and
fine-tuning on custom data).`),Ga=d(),Le=a("p"),yi=n("Here\u2019s a TLDR explaining how "),So=a("a"),Ti=n("DetrForObjectDetection"),xi=n(" works:"),Ba=d(),$=a("p"),wi=n(`First, an image is sent through a pre-trained convolutional backbone (in the paper, the authors use
ResNet-50/ResNet-101). Let\u2019s assume we also add a batch dimension. This means that the input to the backbone is a
tensor of shape `),Rn=a("code"),Ei=n("(batch_size, 3, height, width)"),Fi=n(`, assuming the image has 3 color channels (RGB). The CNN backbone
outputs a new lower-resolution feature map, typically of shape `),Ln=a("code"),$i=n("(batch_size, 2048, height/32, width/32)"),Oi=n(`. This is
then projected to match the hidden dimension of the Transformer of DETR, which is `),Hn=a("code"),ki=n("256"),Ci=n(` by default, using a
`),Un=a("code"),zi=n("nn.Conv2D"),ji=n(" layer. So now, we have a tensor of shape "),Wn=a("code"),qi=n("(batch_size, 256, height/32, width/32)."),Pi=n(` Next, the
feature map is flattened and transposed to obtain a tensor of shape `),Gn=a("code"),Ni=n("(batch_size, seq_len, d_model)"),Si=n(` =
`),Bn=a("code"),Mi=n("(batch_size, width/32*height/32, 256)"),Ai=n(`. So a difference with NLP models is that the sequence length is actually
longer than usual, but with a smaller `),Vn=a("code"),Ii=n("d_model"),Ri=n(" (which in NLP is typically 768 or higher)."),Va=d(),j=a("p"),Li=n("Next, this is sent through the encoder, outputting "),Yn=a("code"),Hi=n("encoder_hidden_states"),Ui=n(` of the same shape (you can consider
these as image features). Next, so-called `),Qn=a("strong"),Wi=n("object queries"),Gi=n(` are sent through the decoder. This is a tensor of shape
`),Kn=a("code"),Bi=n("(batch_size, num_queries, d_model)"),Vi=n(", with "),Zn=a("code"),Yi=n("num_queries"),Qi=n(` typically set to 100 and initialized with zeros.
These input embeddings are learnt positional encodings that the authors refer to as object queries, and similarly to
the encoder, they are added to the input of each attention layer. Each object query will look for a particular object
in the image. The decoder updates these embeddings through multiple self-attention and encoder-decoder attention layers
to output `),Jn=a("code"),Ki=n("decoder_hidden_states"),Zi=n(" of the same shape: "),Xn=a("code"),Ji=n("(batch_size, num_queries, d_model)"),Xi=n(`. Next, two heads
are added on top for object detection: a linear layer for classifying each object query into one of the objects or \u201Cno
object\u201D, and a MLP to predict bounding boxes for each query.`),Ya=d(),Y=a("p"),ed=n("The model is trained using a "),er=a("strong"),td=n("bipartite matching loss"),od=n(`: so what we actually do is compare the predicted classes +
bounding boxes of each of the N = 100 object queries to the ground truth annotations, padded up to the same length N
(so if an image only contains 4 objects, 96 annotations will just have a \u201Cno object\u201D as class and \u201Cno bounding box\u201D as
bounding box). The `),jt=a("a"),nd=n("Hungarian matching algorithm"),rd=n(` is used to find
an optimal one-to-one mapping of each of the N queries to each of the N annotations. Next, standard cross-entropy (for
the classes) and a linear combination of the L1 and `),qt=a("a"),ad=n("generalized IoU loss"),sd=n(` (for the
bounding boxes) are used to optimize the parameters of the model.`),Qa=d(),Q=a("p"),id=n(`DETR can be naturally extended to perform panoptic segmentation (which unifies semantic segmentation and instance
segmentation). `),Mo=a("a"),dd=n("DetrForSegmentation"),cd=n(` adds a segmentation mask head on top of
`),Ao=a("a"),ld=n("DetrForObjectDetection"),hd=n(`. The mask head can be trained either jointly, or in a two steps process,
where one first trains a `),Io=a("a"),md=n("DetrForObjectDetection"),pd=n(` model to detect bounding boxes around both
\u201Cthings\u201D (instances) and \u201Cstuff\u201D (background things like trees, roads, sky), then freeze all the weights and train only
the mask head for 25 epochs. Experimentally, these two approaches give similar results. Note that predicting boxes is
required for the training to be possible, since the Hungarian matching is computed using distances between boxes.`),Ka=d(),Ro=a("p"),fd=n("Tips:"),Za=d(),k=a("ul"),te=a("li"),ud=n("DETR uses so-called "),tr=a("strong"),gd=n("object queries"),_d=n(` to detect objects in an image. The number of queries determines the maximum
number of objects that can be detected in a single image, and is set to 100 by default (see parameter
`),or=a("code"),bd=n("num_queries"),vd=n(" of "),Lo=a("a"),Dd=n("DetrConfig"),yd=n(`). Note that it\u2019s good to have some slack (in COCO, the
authors used 100, while the maximum number of objects in a COCO image is ~70).`),Td=d(),nr=a("li"),xd=n(`The decoder of DETR updates the query embeddings in parallel. This is different from language models like GPT-2,
which use autoregressive decoding instead of parallel. Hence, no causal attention mask is used.`),wd=d(),oe=a("li"),Ed=n(`DETR adds position embeddings to the hidden states at each self-attention and cross-attention layer before projecting
to queries and keys. For the position embeddings of the image, one can choose between fixed sinusoidal or learned
absolute position embeddings. By default, the parameter `),rr=a("code"),Fd=n("position_embedding_type"),$d=n(` of
`),Ho=a("a"),Od=n("DetrConfig"),kd=n(" is set to "),ar=a("code"),Cd=n('"sine"'),zd=n("."),jd=d(),ne=a("li"),qd=n(`During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help
the model output the correct number of objects of each class. If you set the parameter `),sr=a("code"),Pd=n("auxiliary_loss"),Nd=n(` of
`),Uo=a("a"),Sd=n("DetrConfig"),Md=n(" to "),ir=a("code"),Ad=n("True"),Id=n(`, then prediction feedforward neural networks and Hungarian losses
are added after each decoder layer (with the FFNs sharing parameters).`),Rd=d(),G=a("li"),Ld=n(`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),dr=a("em"),Hd=n("num_boxes"),Ud=n(" variable in the "),cr=a("em"),Wd=n("DetrLoss"),Gd=n(" class of "),lr=a("em"),Bd=n("modeling_detr.py"),Vd=n(`. When training on multiple nodes, this should be
set to the average number of target boxes across all nodes, as can be seen in the original implementation `),Pt=a("a"),Yd=n("here"),Qd=n("."),Kd=d(),P=a("li"),Wo=a("a"),Zd=n("DetrForObjectDetection"),Jd=n(" and "),Go=a("a"),Xd=n("DetrForSegmentation"),ec=n(` can be initialized with
any convolutional backbone available in the `),Nt=a("a"),tc=n("timm library"),oc=n(`.
Initializing with a MobileNet backbone for example can be done by setting the `),hr=a("code"),nc=n("backbone"),rc=n(` attribute of
`),Bo=a("a"),ac=n("DetrConfig"),sc=n(" to "),mr=a("code"),ic=n('"tf_mobilenetv3_small_075"'),dc=n(`, and then initializing the model with that
config.`),cc=d(),re=a("li"),lc=n(`DETR resizes the input images such that the shortest side is at least a certain amount of pixels while the longest is
at most 1333 pixels. At training time, scale augmentation is used such that the shortest side is randomly set to at
least 480 and at most 800 pixels. At inference time, the shortest side is set to 800. One can use
`),Vo=a("a"),hc=n("DetrFeatureExtractor"),mc=n(` to prepare images (and optional annotations in COCO format) for the
model. Due to this resizing, images in a batch can have different sizes. DETR solves this by padding images up to the
largest size in a batch, and by creating a pixel mask that indicates which pixels are real/which are padding.
Alternatively, one can also define a custom `),pr=a("code"),pc=n("collate_fn"),fc=n(` in order to batch images together, using
`),Yo=a("a"),uc=n("pad_and_create_pixel_mask()"),gc=n("."),_c=d(),ye=a("li"),bc=n("The size of the images will determine the amount of memory being used, and will thus determine the "),fr=a("code"),vc=n("batch_size"),Dc=n(`.
It is advised to use a batch size of 2 per GPU. See `),St=a("a"),yc=n("this Github thread"),Tc=n(" for more info."),Ja=d(),Qo=a("p"),xc=n("There are three ways to instantiate a DETR model (depending on what you prefer):"),Xa=d(),Ko=a("p"),wc=n("Option 1: Instantiate DETR with pre-trained weights for entire model"),es=d(),b(Mt.$$.fragment),ts=d(),Zo=a("p"),Ec=n("Option 2: Instantiate DETR with randomly initialized weights for Transformer, but pre-trained weights for backbone"),os=d(),b(At.$$.fragment),ns=d(),Jo=a("p"),Fc=n("Option 3: Instantiate DETR with randomly initialized weights for backbone + Transformer"),rs=d(),b(It.$$.fragment),as=d(),Xo=a("p"),$c=n("As a summary, consider the following table:"),ss=d(),He=a("table"),ur=a("thead"),ae=a("tr"),gr=a("th"),Oc=n("Task"),kc=d(),_r=a("th"),Cc=n("Object detection"),zc=d(),br=a("th"),jc=n("Instance segmentation"),qc=d(),vr=a("th"),Pc=n("Panoptic segmentation"),Nc=d(),A=a("tbody"),se=a("tr"),Dr=a("td"),yr=a("strong"),Sc=n("Description"),Mc=d(),Tr=a("td"),Ac=n("Predicting bounding boxes and class labels around objects in an image"),Ic=d(),xr=a("td"),Rc=n("Predicting masks around objects (i.e. instances) in an image"),Lc=d(),wr=a("td"),Hc=n("Predicting masks around both objects (i.e. instances) as well as \u201Cstuff\u201D (i.e. background things like trees and roads) in an image"),Uc=d(),ie=a("tr"),Er=a("td"),Fr=a("strong"),Wc=n("Model"),Gc=d(),$r=a("td"),en=a("a"),Bc=n("DetrForObjectDetection"),Vc=d(),Or=a("td"),tn=a("a"),Yc=n("DetrForSegmentation"),Qc=d(),kr=a("td"),on=a("a"),Kc=n("DetrForSegmentation"),Zc=d(),de=a("tr"),Cr=a("td"),zr=a("strong"),Jc=n("Example dataset"),Xc=d(),jr=a("td"),el=n("COCO detection"),tl=d(),qr=a("td"),ol=n("COCO detection, COCO panoptic"),nl=d(),Pr=a("td"),rl=n("COCO panoptic"),al=d(),ce=a("tr"),Rt=a("td"),Nr=a("strong"),sl=n("Format of annotations to provide to"),il=d(),nn=a("a"),dl=n("DetrFeatureExtractor"),cl=d(),Te=a("td"),ll=n("{\u2018image_id\u2019: "),Sr=a("code"),hl=n("int"),ml=n(", \u2018annotations\u2019: "),Mr=a("code"),pl=n("List[Dict]"),fl=n("} each Dict being a COCO object annotation"),ul=d(),I=a("td"),gl=n("{\u2018image_id\u2019: "),Ar=a("code"),_l=n("int"),bl=n(", \u2018annotations\u2019: "),Ir=a("code"),vl=n("List[Dict]"),Dl=n("}  (in case of COCO detection) or {\u2018file_name\u2019: "),Rr=a("code"),yl=n("str"),Tl=n(", \u2018image_id\u2019: "),Lr=a("code"),xl=n("int"),wl=n(", \u2018segments_info\u2019: "),Hr=a("code"),El=n("List[Dict]"),Fl=n("} (in case of COCO panoptic)"),$l=d(),le=a("td"),Ol=n("{\u2018file_name\u2019: "),Ur=a("code"),kl=n("str"),Cl=n(", \u2018image_id\u2019: "),Wr=a("code"),zl=n("int"),jl=n(", \u2018segments_info\u2019: "),Gr=a("code"),ql=n("List[Dict]"),Pl=n("} and masks_path (path to directory containing PNG files of the masks)"),Nl=d(),he=a("tr"),rn=a("td"),Br=a("strong"),Sl=n("Postprocessing"),Ml=n(" (i.e. converting the output of the model to COCO API)"),Al=d(),Vr=a("td"),an=a("a"),Il=n("post_process()"),Rl=d(),Yr=a("td"),sn=a("a"),Ll=n("post_process_segmentation()"),Hl=d(),Lt=a("td"),dn=a("a"),Ul=n("post_process_segmentation()"),Wl=n(", "),cn=a("a"),Gl=n("post_process_panoptic()"),Bl=d(),me=a("tr"),Qr=a("td"),Kr=a("strong"),Vl=n("evaluators"),Yl=d(),Ht=a("td"),Zr=a("code"),Ql=n("CocoEvaluator"),Kl=n(" with "),Jr=a("code"),Zl=n('iou_types="bbox"'),Jl=d(),xe=a("td"),Xr=a("code"),Xl=n("CocoEvaluator"),eh=n(" with "),ea=a("code"),th=n('iou_types="bbox"'),oh=n(" or "),ta=a("code"),nh=n('"segm"'),rh=d(),pe=a("td"),oa=a("code"),ah=n("CocoEvaluator"),sh=n(" with "),na=a("code"),ih=n('iou_tupes="bbox"'),dh=n(" or "),ra=a("code"),ch=n('"segm"'),lh=n(", "),aa=a("code"),hh=n("PanopticEvaluator"),is=d(),F=a("p"),mh=n(`In short, one should prepare the data either in COCO detection or COCO panoptic format, then use
`),ln=a("a"),ph=n("DetrFeatureExtractor"),fh=n(" to create "),sa=a("code"),uh=n("pixel_values"),gh=n(", "),ia=a("code"),_h=n("pixel_mask"),bh=n(` and optional
`),da=a("code"),vh=n("labels"),Dh=n(`, which can then be used to train (or fine-tune) a model. For evaluation, one should first convert the
outputs of the model using one of the postprocessing methods of `),hn=a("a"),yh=n("DetrFeatureExtractor"),Th=n(`. These can
be be provided to either `),ca=a("code"),xh=n("CocoEvaluator"),wh=n(" or "),la=a("code"),Eh=n("PanopticEvaluator"),Fh=n(`, which allow you to calculate metrics like
mean Average Precision (mAP) and Panoptic Quality (PQ). The latter objects are implemented in the `),Ut=a("a"),$h=n("original repository"),Oh=n(". See the "),Wt=a("a"),kh=n("example notebooks"),Ch=n(" for more info regarding evaluation."),ds=d(),we=a("h2"),Ue=a("a"),ha=a("span"),b(Gt.$$.fragment),zh=d(),ma=a("span"),jh=n("DETR specific outputs"),cs=d(),Ee=a("div"),b(Bt.$$.fragment),qh=d(),pa=a("p"),Ph=n(`Base class for outputs of the DETR encoder-decoder model. This class adds one attribute to Seq2SeqModelOutput,
namely an optional stack of intermediate decoder activations, i.e. the output of each decoder layer, each of them
gone through a layernorm. This is useful when training the model with auxiliary decoding losses.`),ls=d(),Fe=a("div"),b(Vt.$$.fragment),Nh=d(),Yt=a("p"),Sh=n("Output type of "),mn=a("a"),Mh=n("DetrForObjectDetection"),Ah=n("."),hs=d(),$e=a("div"),b(Qt.$$.fragment),Ih=d(),Kt=a("p"),Rh=n("Output type of "),pn=a("a"),Lh=n("DetrForSegmentation"),Hh=n("."),ms=d(),Oe=a("h2"),We=a("a"),fa=a("span"),b(Zt.$$.fragment),Uh=d(),ua=a("span"),Wh=n("DetrConfig"),ps=d(),B=a("div"),b(Jt.$$.fragment),Gh=d(),ke=a("p"),Bh=n("This is the configuration class to store the configuration of a "),fn=a("a"),Vh=n("DetrModel"),Yh=n(`. It is used to instantiate a DETR
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the DETR
`),Xt=a("a"),Qh=n("facebook/detr-resnet-50"),Kh=n(" architecture."),Zh=d(),Ce=a("p"),Jh=n("Configuration objects inherit from "),un=a("a"),Xh=n("PretrainedConfig"),em=n(` and can be used to control the model outputs. Read the
documentation from `),gn=a("a"),tm=n("PretrainedConfig"),om=n(" for more information."),nm=d(),b(Ge.$$.fragment),fs=d(),ze=a("h2"),Be=a("a"),ga=a("span"),b(eo.$$.fragment),rm=d(),_a=a("span"),am=n("DetrFeatureExtractor"),us=d(),O=a("div"),b(to.$$.fragment),sm=d(),ba=a("p"),im=n("Constructs a DETR feature extractor."),dm=d(),oo=a("p"),cm=n("This feature extractor inherits from "),_n=a("a"),lm=n("FeatureExtractionMixin"),hm=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),mm=d(),ue=a("div"),b(no.$$.fragment),pm=d(),va=a("p"),fm=n(`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),um=d(),b(Ve.$$.fragment),gm=d(),Ye=a("div"),b(ro.$$.fragment),_m=d(),ao=a("p"),bm=n("Pad images up to the largest image in a batch and create a corresponding "),Da=a("code"),vm=n("pixel_mask"),Dm=n("."),ym=d(),Qe=a("div"),b(so.$$.fragment),Tm=d(),io=a("p"),xm=n("Converts the output of "),bn=a("a"),wm=n("DetrForObjectDetection"),Em=n(` into the format expected by the COCO api. Only supports
PyTorch.`),Fm=d(),Ke=a("div"),b(co.$$.fragment),$m=d(),lo=a("p"),Om=n("Converts the output of "),vn=a("a"),km=n("DetrForSegmentation"),Cm=n(" into image segmentation predictions. Only supports PyTorch."),zm=d(),Ze=a("div"),b(ho.$$.fragment),jm=d(),mo=a("p"),qm=n("Converts the output of "),Dn=a("a"),Pm=n("DetrForSegmentation"),Nm=n(" into actual panoptic predictions. Only supports PyTorch."),gs=d(),je=a("h2"),Je=a("a"),ya=a("span"),b(po.$$.fragment),Sm=d(),Ta=a("span"),Mm=n("DetrModel"),_s=d(),R=a("div"),b(fo.$$.fragment),Am=d(),xa=a("p"),Im=n(`The bare DETR Model (consisting of a backbone and encoder-decoder Transformer) outputting raw hidden-states without
any specific head on top.`),Rm=d(),uo=a("p"),Lm=n("This model inherits from "),yn=a("a"),Hm=n("PreTrainedModel"),Um=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Wm=d(),go=a("p"),Gm=n("This model is also a PyTorch "),_o=a("a"),Bm=n("torch.nn.Module"),Vm=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Ym=d(),K=a("div"),b(bo.$$.fragment),Qm=d(),qe=a("p"),Km=n("The "),Tn=a("a"),Zm=n("DetrModel"),Jm=n(" forward method, overrides the "),wa=a("code"),Xm=n("__call__"),ep=n(" special method."),tp=d(),b(Xe.$$.fragment),op=d(),b(et.$$.fragment),bs=d(),Pe=a("h2"),tt=a("a"),Ea=a("span"),b(vo.$$.fragment),np=d(),Fa=a("span"),rp=n("DetrForObjectDetection"),vs=d(),L=a("div"),b(Do.$$.fragment),ap=d(),$a=a("p"),sp=n(`DETR Model (consisting of a backbone and encoder-decoder Transformer) with object detection heads on top, for tasks
such as COCO detection.`),ip=d(),yo=a("p"),dp=n("This model inherits from "),xn=a("a"),cp=n("PreTrainedModel"),lp=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),hp=d(),To=a("p"),mp=n("This model is also a PyTorch "),xo=a("a"),pp=n("torch.nn.Module"),fp=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),up=d(),Z=a("div"),b(wo.$$.fragment),gp=d(),Ne=a("p"),_p=n("The "),wn=a("a"),bp=n("DetrForObjectDetection"),vp=n(" forward method, overrides the "),Oa=a("code"),Dp=n("__call__"),yp=n(" special method."),Tp=d(),b(ot.$$.fragment),xp=d(),b(nt.$$.fragment),Ds=d(),Se=a("h2"),rt=a("a"),ka=a("span"),b(Eo.$$.fragment),wp=d(),Ca=a("span"),Ep=n("DetrForSegmentation"),ys=d(),H=a("div"),b(Fo.$$.fragment),Fp=d(),za=a("p"),$p=n(`DETR Model (consisting of a backbone and encoder-decoder Transformer) with a segmentation head on top, for tasks
such as COCO panoptic.`),Op=d(),$o=a("p"),kp=n("This model inherits from "),En=a("a"),Cp=n("PreTrainedModel"),zp=n(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),jp=d(),Oo=a("p"),qp=n("This model is also a PyTorch "),ko=a("a"),Pp=n("torch.nn.Module"),Np=n(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Sp=d(),J=a("div"),b(Co.$$.fragment),Mp=d(),Me=a("p"),Ap=n("The "),Fn=a("a"),Ip=n("DetrForSegmentation"),Rp=n(" forward method, overrides the "),ja=a("code"),Lp=n("__call__"),Hp=n(" special method."),Up=d(),b(at.$$.fragment),Wp=d(),b(st.$$.fragment),this.h()},l(o){const h=o_('[data-svelte="svelte-1phssyn"]',document.head);f=s(h,"META",{name:!0,content:!0}),h.forEach(t),E=c(o),g=s(o,"H1",{class:!0});var zo=i(g);u=s(zo,"A",{id:!0,class:!0,href:!0});var qa=i(u);w=s(qa,"SPAN",{});var Pa=i(w);v(m.$$.fragment,Pa),Pa.forEach(t),qa.forEach(t),_=c(zo),U=s(zo,"SPAN",{});var Na=i(U);ai=r(Na,"DETR"),Na.forEach(t),zo.forEach(t),Ia=c(o),De=s(o,"H2",{class:!0});var jo=i(De);Ae=s(jo,"A",{id:!0,class:!0,href:!0});var Sa=i(Ae);Mn=s(Sa,"SPAN",{});var Ma=i(Mn);v($t.$$.fragment,Ma),Ma.forEach(t),Sa.forEach(t),si=c(jo),An=s(jo,"SPAN",{});var Aa=i(An);ii=r(Aa,"Overview"),Aa.forEach(t),jo.forEach(t),Ra=c(o),Ie=s(o,"P",{});var xs=i(Ie);di=r(xs,"The DETR model was proposed in "),Ot=s(xs,"A",{href:!0,rel:!0});var Bp=i(Ot);ci=r(Bp,"End-to-End Object Detection with Transformers"),Bp.forEach(t),li=r(xs,` by
Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov and Sergey Zagoruyko. DETR
consists of a convolutional backbone followed by an encoder-decoder Transformer which can be trained end-to-end for
object detection. It greatly simplifies a lot of the complexity of models like Faster-R-CNN and Mask-R-CNN, which use
things like region proposals, non-maximum suppression procedure and anchor generation. Moreover, DETR can also be
naturally extended to perform panoptic segmentation, by simply adding a mask head on top of the decoder outputs.`),xs.forEach(t),La=c(o),Po=s(o,"P",{});var Vp=i(Po);hi=r(Vp,"The abstract from the paper is the following:"),Vp.forEach(t),Ha=c(o),No=s(o,"P",{});var Yp=i(No);In=s(Yp,"EM",{});var Qp=i(In);mi=r(Qp,`We present a new method that views object detection as a direct set prediction problem. Our approach streamlines the
detection pipeline, effectively removing the need for many hand-designed components like a non-maximum suppression
procedure or anchor generation that explicitly encode our prior knowledge about the task. The main ingredients of the
new framework, called DEtection TRansformer or DETR, are a set-based global loss that forces unique predictions via
bipartite matching, and a transformer encoder-decoder architecture. Given a fixed small set of learned object queries,
DETR reasons about the relations of the objects and the global image context to directly output the final set of
predictions in parallel. The new model is conceptually simple and does not require a specialized library, unlike many
other modern detectors. DETR demonstrates accuracy and run-time performance on par with the well-established and
highly-optimized Faster RCNN baseline on the challenging COCO object detection dataset. Moreover, DETR can be easily
generalized to produce panoptic segmentation in a unified manner. We show that it significantly outperforms competitive
baselines.`),Qp.forEach(t),Yp.forEach(t),Ua=c(o),fe=s(o,"P",{});var $n=i(fe);pi=r($n,"This model was contributed by "),kt=s($n,"A",{href:!0,rel:!0});var Kp=i(kt);fi=r(Kp,"nielsr"),Kp.forEach(t),ui=r($n,". The original code can be found "),Ct=s($n,"A",{href:!0,rel:!0});var Zp=i(Ct);gi=r(Zp,"here"),Zp.forEach(t),_i=r($n,"."),$n.forEach(t),Wa=c(o),Re=s(o,"P",{});var ws=i(Re);bi=r(ws,"The quickest way to get started with DETR is by checking the "),zt=s(ws,"A",{href:!0,rel:!0});var Jp=i(zt);vi=r(Jp,"example notebooks"),Jp.forEach(t),Di=r(ws,` (which showcase both inference and
fine-tuning on custom data).`),ws.forEach(t),Ga=c(o),Le=s(o,"P",{});var Es=i(Le);yi=r(Es,"Here\u2019s a TLDR explaining how "),So=s(Es,"A",{href:!0});var Xp=i(So);Ti=r(Xp,"DetrForObjectDetection"),Xp.forEach(t),xi=r(Es," works:"),Es.forEach(t),Ba=c(o),$=s(o,"P",{});var q=i($);wi=r(q,`First, an image is sent through a pre-trained convolutional backbone (in the paper, the authors use
ResNet-50/ResNet-101). Let\u2019s assume we also add a batch dimension. This means that the input to the backbone is a
tensor of shape `),Rn=s(q,"CODE",{});var ef=i(Rn);Ei=r(ef,"(batch_size, 3, height, width)"),ef.forEach(t),Fi=r(q,`, assuming the image has 3 color channels (RGB). The CNN backbone
outputs a new lower-resolution feature map, typically of shape `),Ln=s(q,"CODE",{});var tf=i(Ln);$i=r(tf,"(batch_size, 2048, height/32, width/32)"),tf.forEach(t),Oi=r(q,`. This is
then projected to match the hidden dimension of the Transformer of DETR, which is `),Hn=s(q,"CODE",{});var of=i(Hn);ki=r(of,"256"),of.forEach(t),Ci=r(q,` by default, using a
`),Un=s(q,"CODE",{});var nf=i(Un);zi=r(nf,"nn.Conv2D"),nf.forEach(t),ji=r(q," layer. So now, we have a tensor of shape "),Wn=s(q,"CODE",{});var rf=i(Wn);qi=r(rf,"(batch_size, 256, height/32, width/32)."),rf.forEach(t),Pi=r(q,` Next, the
feature map is flattened and transposed to obtain a tensor of shape `),Gn=s(q,"CODE",{});var af=i(Gn);Ni=r(af,"(batch_size, seq_len, d_model)"),af.forEach(t),Si=r(q,` =
`),Bn=s(q,"CODE",{});var sf=i(Bn);Mi=r(sf,"(batch_size, width/32*height/32, 256)"),sf.forEach(t),Ai=r(q,`. So a difference with NLP models is that the sequence length is actually
longer than usual, but with a smaller `),Vn=s(q,"CODE",{});var df=i(Vn);Ii=r(df,"d_model"),df.forEach(t),Ri=r(q," (which in NLP is typically 768 or higher)."),q.forEach(t),Va=c(o),j=s(o,"P",{});var W=i(j);Li=r(W,"Next, this is sent through the encoder, outputting "),Yn=s(W,"CODE",{});var cf=i(Yn);Hi=r(cf,"encoder_hidden_states"),cf.forEach(t),Ui=r(W,` of the same shape (you can consider
these as image features). Next, so-called `),Qn=s(W,"STRONG",{});var lf=i(Qn);Wi=r(lf,"object queries"),lf.forEach(t),Gi=r(W,` are sent through the decoder. This is a tensor of shape
`),Kn=s(W,"CODE",{});var hf=i(Kn);Bi=r(hf,"(batch_size, num_queries, d_model)"),hf.forEach(t),Vi=r(W,", with "),Zn=s(W,"CODE",{});var mf=i(Zn);Yi=r(mf,"num_queries"),mf.forEach(t),Qi=r(W,` typically set to 100 and initialized with zeros.
These input embeddings are learnt positional encodings that the authors refer to as object queries, and similarly to
the encoder, they are added to the input of each attention layer. Each object query will look for a particular object
in the image. The decoder updates these embeddings through multiple self-attention and encoder-decoder attention layers
to output `),Jn=s(W,"CODE",{});var pf=i(Jn);Ki=r(pf,"decoder_hidden_states"),pf.forEach(t),Zi=r(W," of the same shape: "),Xn=s(W,"CODE",{});var ff=i(Xn);Ji=r(ff,"(batch_size, num_queries, d_model)"),ff.forEach(t),Xi=r(W,`. Next, two heads
are added on top for object detection: a linear layer for classifying each object query into one of the objects or \u201Cno
object\u201D, and a MLP to predict bounding boxes for each query.`),W.forEach(t),Ya=c(o),Y=s(o,"P",{});var it=i(Y);ed=r(it,"The model is trained using a "),er=s(it,"STRONG",{});var uf=i(er);td=r(uf,"bipartite matching loss"),uf.forEach(t),od=r(it,`: so what we actually do is compare the predicted classes +
bounding boxes of each of the N = 100 object queries to the ground truth annotations, padded up to the same length N
(so if an image only contains 4 objects, 96 annotations will just have a \u201Cno object\u201D as class and \u201Cno bounding box\u201D as
bounding box). The `),jt=s(it,"A",{href:!0,rel:!0});var gf=i(jt);nd=r(gf,"Hungarian matching algorithm"),gf.forEach(t),rd=r(it,` is used to find
an optimal one-to-one mapping of each of the N queries to each of the N annotations. Next, standard cross-entropy (for
the classes) and a linear combination of the L1 and `),qt=s(it,"A",{href:!0,rel:!0});var _f=i(qt);ad=r(_f,"generalized IoU loss"),_f.forEach(t),sd=r(it,` (for the
bounding boxes) are used to optimize the parameters of the model.`),it.forEach(t),Qa=c(o),Q=s(o,"P",{});var dt=i(Q);id=r(dt,`DETR can be naturally extended to perform panoptic segmentation (which unifies semantic segmentation and instance
segmentation). `),Mo=s(dt,"A",{href:!0});var bf=i(Mo);dd=r(bf,"DetrForSegmentation"),bf.forEach(t),cd=r(dt,` adds a segmentation mask head on top of
`),Ao=s(dt,"A",{href:!0});var vf=i(Ao);ld=r(vf,"DetrForObjectDetection"),vf.forEach(t),hd=r(dt,`. The mask head can be trained either jointly, or in a two steps process,
where one first trains a `),Io=s(dt,"A",{href:!0});var Df=i(Io);md=r(Df,"DetrForObjectDetection"),Df.forEach(t),pd=r(dt,` model to detect bounding boxes around both
\u201Cthings\u201D (instances) and \u201Cstuff\u201D (background things like trees, roads, sky), then freeze all the weights and train only
the mask head for 25 epochs. Experimentally, these two approaches give similar results. Note that predicting boxes is
required for the training to be possible, since the Hungarian matching is computed using distances between boxes.`),dt.forEach(t),Ka=c(o),Ro=s(o,"P",{});var yf=i(Ro);fd=r(yf,"Tips:"),yf.forEach(t),Za=c(o),k=s(o,"UL",{});var N=i(k);te=s(N,"LI",{});var ct=i(te);ud=r(ct,"DETR uses so-called "),tr=s(ct,"STRONG",{});var Tf=i(tr);gd=r(Tf,"object queries"),Tf.forEach(t),_d=r(ct,` to detect objects in an image. The number of queries determines the maximum
number of objects that can be detected in a single image, and is set to 100 by default (see parameter
`),or=s(ct,"CODE",{});var xf=i(or);bd=r(xf,"num_queries"),xf.forEach(t),vd=r(ct," of "),Lo=s(ct,"A",{href:!0});var wf=i(Lo);Dd=r(wf,"DetrConfig"),wf.forEach(t),yd=r(ct,`). Note that it\u2019s good to have some slack (in COCO, the
authors used 100, while the maximum number of objects in a COCO image is ~70).`),ct.forEach(t),Td=c(N),nr=s(N,"LI",{});var Ef=i(nr);xd=r(Ef,`The decoder of DETR updates the query embeddings in parallel. This is different from language models like GPT-2,
which use autoregressive decoding instead of parallel. Hence, no causal attention mask is used.`),Ef.forEach(t),wd=c(N),oe=s(N,"LI",{});var lt=i(oe);Ed=r(lt,`DETR adds position embeddings to the hidden states at each self-attention and cross-attention layer before projecting
to queries and keys. For the position embeddings of the image, one can choose between fixed sinusoidal or learned
absolute position embeddings. By default, the parameter `),rr=s(lt,"CODE",{});var Ff=i(rr);Fd=r(Ff,"position_embedding_type"),Ff.forEach(t),$d=r(lt,` of
`),Ho=s(lt,"A",{href:!0});var $f=i(Ho);Od=r($f,"DetrConfig"),$f.forEach(t),kd=r(lt," is set to "),ar=s(lt,"CODE",{});var Of=i(ar);Cd=r(Of,'"sine"'),Of.forEach(t),zd=r(lt,"."),lt.forEach(t),jd=c(N),ne=s(N,"LI",{});var ht=i(ne);qd=r(ht,`During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help
the model output the correct number of objects of each class. If you set the parameter `),sr=s(ht,"CODE",{});var kf=i(sr);Pd=r(kf,"auxiliary_loss"),kf.forEach(t),Nd=r(ht,` of
`),Uo=s(ht,"A",{href:!0});var Cf=i(Uo);Sd=r(Cf,"DetrConfig"),Cf.forEach(t),Md=r(ht," to "),ir=s(ht,"CODE",{});var zf=i(ir);Ad=r(zf,"True"),zf.forEach(t),Id=r(ht,`, then prediction feedforward neural networks and Hungarian losses
are added after each decoder layer (with the FFNs sharing parameters).`),ht.forEach(t),Rd=c(N),G=s(N,"LI",{});var ge=i(G);Ld=r(ge,`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),dr=s(ge,"EM",{});var jf=i(dr);Hd=r(jf,"num_boxes"),jf.forEach(t),Ud=r(ge," variable in the "),cr=s(ge,"EM",{});var qf=i(cr);Wd=r(qf,"DetrLoss"),qf.forEach(t),Gd=r(ge," class of "),lr=s(ge,"EM",{});var Pf=i(lr);Bd=r(Pf,"modeling_detr.py"),Pf.forEach(t),Vd=r(ge,`. When training on multiple nodes, this should be
set to the average number of target boxes across all nodes, as can be seen in the original implementation `),Pt=s(ge,"A",{href:!0,rel:!0});var Nf=i(Pt);Yd=r(Nf,"here"),Nf.forEach(t),Qd=r(ge,"."),ge.forEach(t),Kd=c(N),P=s(N,"LI",{});var V=i(P);Wo=s(V,"A",{href:!0});var Sf=i(Wo);Zd=r(Sf,"DetrForObjectDetection"),Sf.forEach(t),Jd=r(V," and "),Go=s(V,"A",{href:!0});var Mf=i(Go);Xd=r(Mf,"DetrForSegmentation"),Mf.forEach(t),ec=r(V,` can be initialized with
any convolutional backbone available in the `),Nt=s(V,"A",{href:!0,rel:!0});var Af=i(Nt);tc=r(Af,"timm library"),Af.forEach(t),oc=r(V,`.
Initializing with a MobileNet backbone for example can be done by setting the `),hr=s(V,"CODE",{});var If=i(hr);nc=r(If,"backbone"),If.forEach(t),rc=r(V,` attribute of
`),Bo=s(V,"A",{href:!0});var Rf=i(Bo);ac=r(Rf,"DetrConfig"),Rf.forEach(t),sc=r(V," to "),mr=s(V,"CODE",{});var Lf=i(mr);ic=r(Lf,'"tf_mobilenetv3_small_075"'),Lf.forEach(t),dc=r(V,`, and then initializing the model with that
config.`),V.forEach(t),cc=c(N),re=s(N,"LI",{});var mt=i(re);lc=r(mt,`DETR resizes the input images such that the shortest side is at least a certain amount of pixels while the longest is
at most 1333 pixels. At training time, scale augmentation is used such that the shortest side is randomly set to at
least 480 and at most 800 pixels. At inference time, the shortest side is set to 800. One can use
`),Vo=s(mt,"A",{href:!0});var Hf=i(Vo);hc=r(Hf,"DetrFeatureExtractor"),Hf.forEach(t),mc=r(mt,` to prepare images (and optional annotations in COCO format) for the
model. Due to this resizing, images in a batch can have different sizes. DETR solves this by padding images up to the
largest size in a batch, and by creating a pixel mask that indicates which pixels are real/which are padding.
Alternatively, one can also define a custom `),pr=s(mt,"CODE",{});var Uf=i(pr);pc=r(Uf,"collate_fn"),Uf.forEach(t),fc=r(mt,` in order to batch images together, using
`),Yo=s(mt,"A",{href:!0});var Wf=i(Yo);uc=r(Wf,"pad_and_create_pixel_mask()"),Wf.forEach(t),gc=r(mt,"."),mt.forEach(t),_c=c(N),ye=s(N,"LI",{});var On=i(ye);bc=r(On,"The size of the images will determine the amount of memory being used, and will thus determine the "),fr=s(On,"CODE",{});var Gf=i(fr);vc=r(Gf,"batch_size"),Gf.forEach(t),Dc=r(On,`.
It is advised to use a batch size of 2 per GPU. See `),St=s(On,"A",{href:!0,rel:!0});var Bf=i(St);yc=r(Bf,"this Github thread"),Bf.forEach(t),Tc=r(On," for more info."),On.forEach(t),N.forEach(t),Ja=c(o),Qo=s(o,"P",{});var Vf=i(Qo);xc=r(Vf,"There are three ways to instantiate a DETR model (depending on what you prefer):"),Vf.forEach(t),Xa=c(o),Ko=s(o,"P",{});var Yf=i(Ko);wc=r(Yf,"Option 1: Instantiate DETR with pre-trained weights for entire model"),Yf.forEach(t),es=c(o),v(Mt.$$.fragment,o),ts=c(o),Zo=s(o,"P",{});var Qf=i(Zo);Ec=r(Qf,"Option 2: Instantiate DETR with randomly initialized weights for Transformer, but pre-trained weights for backbone"),Qf.forEach(t),os=c(o),v(At.$$.fragment,o),ns=c(o),Jo=s(o,"P",{});var Kf=i(Jo);Fc=r(Kf,"Option 3: Instantiate DETR with randomly initialized weights for backbone + Transformer"),Kf.forEach(t),rs=c(o),v(It.$$.fragment,o),as=c(o),Xo=s(o,"P",{});var Zf=i(Xo);$c=r(Zf,"As a summary, consider the following table:"),Zf.forEach(t),ss=c(o),He=s(o,"TABLE",{});var Fs=i(He);ur=s(Fs,"THEAD",{});var Jf=i(ur);ae=s(Jf,"TR",{});var pt=i(ae);gr=s(pt,"TH",{});var Xf=i(gr);Oc=r(Xf,"Task"),Xf.forEach(t),kc=c(pt),_r=s(pt,"TH",{});var eu=i(_r);Cc=r(eu,"Object detection"),eu.forEach(t),zc=c(pt),br=s(pt,"TH",{});var tu=i(br);jc=r(tu,"Instance segmentation"),tu.forEach(t),qc=c(pt),vr=s(pt,"TH",{});var ou=i(vr);Pc=r(ou,"Panoptic segmentation"),ou.forEach(t),pt.forEach(t),Jf.forEach(t),Nc=c(Fs),A=s(Fs,"TBODY",{});var X=i(A);se=s(X,"TR",{});var ft=i(se);Dr=s(ft,"TD",{});var nu=i(Dr);yr=s(nu,"STRONG",{});var ru=i(yr);Sc=r(ru,"Description"),ru.forEach(t),nu.forEach(t),Mc=c(ft),Tr=s(ft,"TD",{});var au=i(Tr);Ac=r(au,"Predicting bounding boxes and class labels around objects in an image"),au.forEach(t),Ic=c(ft),xr=s(ft,"TD",{});var su=i(xr);Rc=r(su,"Predicting masks around objects (i.e. instances) in an image"),su.forEach(t),Lc=c(ft),wr=s(ft,"TD",{});var iu=i(wr);Hc=r(iu,"Predicting masks around both objects (i.e. instances) as well as \u201Cstuff\u201D (i.e. background things like trees and roads) in an image"),iu.forEach(t),ft.forEach(t),Uc=c(X),ie=s(X,"TR",{});var ut=i(ie);Er=s(ut,"TD",{});var du=i(Er);Fr=s(du,"STRONG",{});var cu=i(Fr);Wc=r(cu,"Model"),cu.forEach(t),du.forEach(t),Gc=c(ut),$r=s(ut,"TD",{});var lu=i($r);en=s(lu,"A",{href:!0});var hu=i(en);Bc=r(hu,"DetrForObjectDetection"),hu.forEach(t),lu.forEach(t),Vc=c(ut),Or=s(ut,"TD",{});var mu=i(Or);tn=s(mu,"A",{href:!0});var pu=i(tn);Yc=r(pu,"DetrForSegmentation"),pu.forEach(t),mu.forEach(t),Qc=c(ut),kr=s(ut,"TD",{});var fu=i(kr);on=s(fu,"A",{href:!0});var uu=i(on);Kc=r(uu,"DetrForSegmentation"),uu.forEach(t),fu.forEach(t),ut.forEach(t),Zc=c(X),de=s(X,"TR",{});var gt=i(de);Cr=s(gt,"TD",{});var gu=i(Cr);zr=s(gu,"STRONG",{});var _u=i(zr);Jc=r(_u,"Example dataset"),_u.forEach(t),gu.forEach(t),Xc=c(gt),jr=s(gt,"TD",{});var bu=i(jr);el=r(bu,"COCO detection"),bu.forEach(t),tl=c(gt),qr=s(gt,"TD",{});var vu=i(qr);ol=r(vu,"COCO detection, COCO panoptic"),vu.forEach(t),nl=c(gt),Pr=s(gt,"TD",{});var Du=i(Pr);rl=r(Du,"COCO panoptic"),Du.forEach(t),gt.forEach(t),al=c(X),ce=s(X,"TR",{});var _t=i(ce);Rt=s(_t,"TD",{});var $s=i(Rt);Nr=s($s,"STRONG",{});var yu=i(Nr);sl=r(yu,"Format of annotations to provide to"),yu.forEach(t),il=c($s),nn=s($s,"A",{href:!0});var Tu=i(nn);dl=r(Tu,"DetrFeatureExtractor"),Tu.forEach(t),$s.forEach(t),cl=c(_t),Te=s(_t,"TD",{});var kn=i(Te);ll=r(kn,"{\u2018image_id\u2019: "),Sr=s(kn,"CODE",{});var xu=i(Sr);hl=r(xu,"int"),xu.forEach(t),ml=r(kn,", \u2018annotations\u2019: "),Mr=s(kn,"CODE",{});var wu=i(Mr);pl=r(wu,"List[Dict]"),wu.forEach(t),fl=r(kn,"} each Dict being a COCO object annotation"),kn.forEach(t),ul=c(_t),I=s(_t,"TD",{});var ee=i(I);gl=r(ee,"{\u2018image_id\u2019: "),Ar=s(ee,"CODE",{});var Eu=i(Ar);_l=r(Eu,"int"),Eu.forEach(t),bl=r(ee,", \u2018annotations\u2019: "),Ir=s(ee,"CODE",{});var Fu=i(Ir);vl=r(Fu,"List[Dict]"),Fu.forEach(t),Dl=r(ee,"}  (in case of COCO detection) or {\u2018file_name\u2019: "),Rr=s(ee,"CODE",{});var $u=i(Rr);yl=r($u,"str"),$u.forEach(t),Tl=r(ee,", \u2018image_id\u2019: "),Lr=s(ee,"CODE",{});var Ou=i(Lr);xl=r(Ou,"int"),Ou.forEach(t),wl=r(ee,", \u2018segments_info\u2019: "),Hr=s(ee,"CODE",{});var ku=i(Hr);El=r(ku,"List[Dict]"),ku.forEach(t),Fl=r(ee,"} (in case of COCO panoptic)"),ee.forEach(t),$l=c(_t),le=s(_t,"TD",{});var bt=i(le);Ol=r(bt,"{\u2018file_name\u2019: "),Ur=s(bt,"CODE",{});var Cu=i(Ur);kl=r(Cu,"str"),Cu.forEach(t),Cl=r(bt,", \u2018image_id\u2019: "),Wr=s(bt,"CODE",{});var zu=i(Wr);zl=r(zu,"int"),zu.forEach(t),jl=r(bt,", \u2018segments_info\u2019: "),Gr=s(bt,"CODE",{});var ju=i(Gr);ql=r(ju,"List[Dict]"),ju.forEach(t),Pl=r(bt,"} and masks_path (path to directory containing PNG files of the masks)"),bt.forEach(t),_t.forEach(t),Nl=c(X),he=s(X,"TR",{});var vt=i(he);rn=s(vt,"TD",{});var Gp=i(rn);Br=s(Gp,"STRONG",{});var qu=i(Br);Sl=r(qu,"Postprocessing"),qu.forEach(t),Ml=r(Gp," (i.e. converting the output of the model to COCO API)"),Gp.forEach(t),Al=c(vt),Vr=s(vt,"TD",{});var Pu=i(Vr);an=s(Pu,"A",{href:!0});var Nu=i(an);Il=r(Nu,"post_process()"),Nu.forEach(t),Pu.forEach(t),Rl=c(vt),Yr=s(vt,"TD",{});var Su=i(Yr);sn=s(Su,"A",{href:!0});var Mu=i(sn);Ll=r(Mu,"post_process_segmentation()"),Mu.forEach(t),Su.forEach(t),Hl=c(vt),Lt=s(vt,"TD",{});var Os=i(Lt);dn=s(Os,"A",{href:!0});var Au=i(dn);Ul=r(Au,"post_process_segmentation()"),Au.forEach(t),Wl=r(Os,", "),cn=s(Os,"A",{href:!0});var Iu=i(cn);Gl=r(Iu,"post_process_panoptic()"),Iu.forEach(t),Os.forEach(t),vt.forEach(t),Bl=c(X),me=s(X,"TR",{});var Dt=i(me);Qr=s(Dt,"TD",{});var Ru=i(Qr);Kr=s(Ru,"STRONG",{});var Lu=i(Kr);Vl=r(Lu,"evaluators"),Lu.forEach(t),Ru.forEach(t),Yl=c(Dt),Ht=s(Dt,"TD",{});var ks=i(Ht);Zr=s(ks,"CODE",{});var Hu=i(Zr);Ql=r(Hu,"CocoEvaluator"),Hu.forEach(t),Kl=r(ks," with "),Jr=s(ks,"CODE",{});var Uu=i(Jr);Zl=r(Uu,'iou_types="bbox"'),Uu.forEach(t),ks.forEach(t),Jl=c(Dt),xe=s(Dt,"TD",{});var Cn=i(xe);Xr=s(Cn,"CODE",{});var Wu=i(Xr);Xl=r(Wu,"CocoEvaluator"),Wu.forEach(t),eh=r(Cn," with "),ea=s(Cn,"CODE",{});var Gu=i(ea);th=r(Gu,'iou_types="bbox"'),Gu.forEach(t),oh=r(Cn," or "),ta=s(Cn,"CODE",{});var Bu=i(ta);nh=r(Bu,'"segm"'),Bu.forEach(t),Cn.forEach(t),rh=c(Dt),pe=s(Dt,"TD",{});var yt=i(pe);oa=s(yt,"CODE",{});var Vu=i(oa);ah=r(Vu,"CocoEvaluator"),Vu.forEach(t),sh=r(yt," with "),na=s(yt,"CODE",{});var Yu=i(na);ih=r(Yu,'iou_tupes="bbox"'),Yu.forEach(t),dh=r(yt," or "),ra=s(yt,"CODE",{});var Qu=i(ra);ch=r(Qu,'"segm"'),Qu.forEach(t),lh=r(yt,", "),aa=s(yt,"CODE",{});var Ku=i(aa);hh=r(Ku,"PanopticEvaluator"),Ku.forEach(t),yt.forEach(t),Dt.forEach(t),X.forEach(t),Fs.forEach(t),is=c(o),F=s(o,"P",{});var C=i(F);mh=r(C,`In short, one should prepare the data either in COCO detection or COCO panoptic format, then use
`),ln=s(C,"A",{href:!0});var Zu=i(ln);ph=r(Zu,"DetrFeatureExtractor"),Zu.forEach(t),fh=r(C," to create "),sa=s(C,"CODE",{});var Ju=i(sa);uh=r(Ju,"pixel_values"),Ju.forEach(t),gh=r(C,", "),ia=s(C,"CODE",{});var Xu=i(ia);_h=r(Xu,"pixel_mask"),Xu.forEach(t),bh=r(C,` and optional
`),da=s(C,"CODE",{});var eg=i(da);vh=r(eg,"labels"),eg.forEach(t),Dh=r(C,`, which can then be used to train (or fine-tune) a model. For evaluation, one should first convert the
outputs of the model using one of the postprocessing methods of `),hn=s(C,"A",{href:!0});var tg=i(hn);yh=r(tg,"DetrFeatureExtractor"),tg.forEach(t),Th=r(C,`. These can
be be provided to either `),ca=s(C,"CODE",{});var og=i(ca);xh=r(og,"CocoEvaluator"),og.forEach(t),wh=r(C," or "),la=s(C,"CODE",{});var ng=i(la);Eh=r(ng,"PanopticEvaluator"),ng.forEach(t),Fh=r(C,`, which allow you to calculate metrics like
mean Average Precision (mAP) and Panoptic Quality (PQ). The latter objects are implemented in the `),Ut=s(C,"A",{href:!0,rel:!0});var rg=i(Ut);$h=r(rg,"original repository"),rg.forEach(t),Oh=r(C,". See the "),Wt=s(C,"A",{href:!0,rel:!0});var ag=i(Wt);kh=r(ag,"example notebooks"),ag.forEach(t),Ch=r(C," for more info regarding evaluation."),C.forEach(t),ds=c(o),we=s(o,"H2",{class:!0});var Cs=i(we);Ue=s(Cs,"A",{id:!0,class:!0,href:!0});var sg=i(Ue);ha=s(sg,"SPAN",{});var ig=i(ha);v(Gt.$$.fragment,ig),ig.forEach(t),sg.forEach(t),zh=c(Cs),ma=s(Cs,"SPAN",{});var dg=i(ma);jh=r(dg,"DETR specific outputs"),dg.forEach(t),Cs.forEach(t),cs=c(o),Ee=s(o,"DIV",{class:!0});var zs=i(Ee);v(Bt.$$.fragment,zs),qh=c(zs),pa=s(zs,"P",{});var cg=i(pa);Ph=r(cg,`Base class for outputs of the DETR encoder-decoder model. This class adds one attribute to Seq2SeqModelOutput,
namely an optional stack of intermediate decoder activations, i.e. the output of each decoder layer, each of them
gone through a layernorm. This is useful when training the model with auxiliary decoding losses.`),cg.forEach(t),zs.forEach(t),ls=c(o),Fe=s(o,"DIV",{class:!0});var js=i(Fe);v(Vt.$$.fragment,js),Nh=c(js),Yt=s(js,"P",{});var qs=i(Yt);Sh=r(qs,"Output type of "),mn=s(qs,"A",{href:!0});var lg=i(mn);Mh=r(lg,"DetrForObjectDetection"),lg.forEach(t),Ah=r(qs,"."),qs.forEach(t),js.forEach(t),hs=c(o),$e=s(o,"DIV",{class:!0});var Ps=i($e);v(Qt.$$.fragment,Ps),Ih=c(Ps),Kt=s(Ps,"P",{});var Ns=i(Kt);Rh=r(Ns,"Output type of "),pn=s(Ns,"A",{href:!0});var hg=i(pn);Lh=r(hg,"DetrForSegmentation"),hg.forEach(t),Hh=r(Ns,"."),Ns.forEach(t),Ps.forEach(t),ms=c(o),Oe=s(o,"H2",{class:!0});var Ss=i(Oe);We=s(Ss,"A",{id:!0,class:!0,href:!0});var mg=i(We);fa=s(mg,"SPAN",{});var pg=i(fa);v(Zt.$$.fragment,pg),pg.forEach(t),mg.forEach(t),Uh=c(Ss),ua=s(Ss,"SPAN",{});var fg=i(ua);Wh=r(fg,"DetrConfig"),fg.forEach(t),Ss.forEach(t),ps=c(o),B=s(o,"DIV",{class:!0});var Tt=i(B);v(Jt.$$.fragment,Tt),Gh=c(Tt),ke=s(Tt,"P",{});var zn=i(ke);Bh=r(zn,"This is the configuration class to store the configuration of a "),fn=s(zn,"A",{href:!0});var ug=i(fn);Vh=r(ug,"DetrModel"),ug.forEach(t),Yh=r(zn,`. It is used to instantiate a DETR
model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
defaults will yield a similar configuration to that of the DETR
`),Xt=s(zn,"A",{href:!0,rel:!0});var gg=i(Xt);Qh=r(gg,"facebook/detr-resnet-50"),gg.forEach(t),Kh=r(zn," architecture."),zn.forEach(t),Zh=c(Tt),Ce=s(Tt,"P",{});var jn=i(Ce);Jh=r(jn,"Configuration objects inherit from "),un=s(jn,"A",{href:!0});var _g=i(un);Xh=r(_g,"PretrainedConfig"),_g.forEach(t),em=r(jn,` and can be used to control the model outputs. Read the
documentation from `),gn=s(jn,"A",{href:!0});var bg=i(gn);tm=r(bg,"PretrainedConfig"),bg.forEach(t),om=r(jn," for more information."),jn.forEach(t),nm=c(Tt),v(Ge.$$.fragment,Tt),Tt.forEach(t),fs=c(o),ze=s(o,"H2",{class:!0});var Ms=i(ze);Be=s(Ms,"A",{id:!0,class:!0,href:!0});var vg=i(Be);ga=s(vg,"SPAN",{});var Dg=i(ga);v(eo.$$.fragment,Dg),Dg.forEach(t),vg.forEach(t),rm=c(Ms),_a=s(Ms,"SPAN",{});var yg=i(_a);am=r(yg,"DetrFeatureExtractor"),yg.forEach(t),Ms.forEach(t),us=c(o),O=s(o,"DIV",{class:!0});var S=i(O);v(to.$$.fragment,S),sm=c(S),ba=s(S,"P",{});var Tg=i(ba);im=r(Tg,"Constructs a DETR feature extractor."),Tg.forEach(t),dm=c(S),oo=s(S,"P",{});var As=i(oo);cm=r(As,"This feature extractor inherits from "),_n=s(As,"A",{href:!0});var xg=i(_n);lm=r(xg,"FeatureExtractionMixin"),xg.forEach(t),hm=r(As,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),As.forEach(t),mm=c(S),ue=s(S,"DIV",{class:!0});var qn=i(ue);v(no.$$.fragment,qn),pm=c(qn),va=s(qn,"P",{});var wg=i(va);fm=r(wg,`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),wg.forEach(t),um=c(qn),v(Ve.$$.fragment,qn),qn.forEach(t),gm=c(S),Ye=s(S,"DIV",{class:!0});var Is=i(Ye);v(ro.$$.fragment,Is),_m=c(Is),ao=s(Is,"P",{});var Rs=i(ao);bm=r(Rs,"Pad images up to the largest image in a batch and create a corresponding "),Da=s(Rs,"CODE",{});var Eg=i(Da);vm=r(Eg,"pixel_mask"),Eg.forEach(t),Dm=r(Rs,"."),Rs.forEach(t),Is.forEach(t),ym=c(S),Qe=s(S,"DIV",{class:!0});var Ls=i(Qe);v(so.$$.fragment,Ls),Tm=c(Ls),io=s(Ls,"P",{});var Hs=i(io);xm=r(Hs,"Converts the output of "),bn=s(Hs,"A",{href:!0});var Fg=i(bn);wm=r(Fg,"DetrForObjectDetection"),Fg.forEach(t),Em=r(Hs,` into the format expected by the COCO api. Only supports
PyTorch.`),Hs.forEach(t),Ls.forEach(t),Fm=c(S),Ke=s(S,"DIV",{class:!0});var Us=i(Ke);v(co.$$.fragment,Us),$m=c(Us),lo=s(Us,"P",{});var Ws=i(lo);Om=r(Ws,"Converts the output of "),vn=s(Ws,"A",{href:!0});var $g=i(vn);km=r($g,"DetrForSegmentation"),$g.forEach(t),Cm=r(Ws," into image segmentation predictions. Only supports PyTorch."),Ws.forEach(t),Us.forEach(t),zm=c(S),Ze=s(S,"DIV",{class:!0});var Gs=i(Ze);v(ho.$$.fragment,Gs),jm=c(Gs),mo=s(Gs,"P",{});var Bs=i(mo);qm=r(Bs,"Converts the output of "),Dn=s(Bs,"A",{href:!0});var Og=i(Dn);Pm=r(Og,"DetrForSegmentation"),Og.forEach(t),Nm=r(Bs," into actual panoptic predictions. Only supports PyTorch."),Bs.forEach(t),Gs.forEach(t),S.forEach(t),gs=c(o),je=s(o,"H2",{class:!0});var Vs=i(je);Je=s(Vs,"A",{id:!0,class:!0,href:!0});var kg=i(Je);ya=s(kg,"SPAN",{});var Cg=i(ya);v(po.$$.fragment,Cg),Cg.forEach(t),kg.forEach(t),Sm=c(Vs),Ta=s(Vs,"SPAN",{});var zg=i(Ta);Mm=r(zg,"DetrModel"),zg.forEach(t),Vs.forEach(t),_s=c(o),R=s(o,"DIV",{class:!0});var _e=i(R);v(fo.$$.fragment,_e),Am=c(_e),xa=s(_e,"P",{});var jg=i(xa);Im=r(jg,`The bare DETR Model (consisting of a backbone and encoder-decoder Transformer) outputting raw hidden-states without
any specific head on top.`),jg.forEach(t),Rm=c(_e),uo=s(_e,"P",{});var Ys=i(uo);Lm=r(Ys,"This model inherits from "),yn=s(Ys,"A",{href:!0});var qg=i(yn);Hm=r(qg,"PreTrainedModel"),qg.forEach(t),Um=r(Ys,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Ys.forEach(t),Wm=c(_e),go=s(_e,"P",{});var Qs=i(go);Gm=r(Qs,"This model is also a PyTorch "),_o=s(Qs,"A",{href:!0,rel:!0});var Pg=i(_o);Bm=r(Pg,"torch.nn.Module"),Pg.forEach(t),Vm=r(Qs,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Qs.forEach(t),Ym=c(_e),K=s(_e,"DIV",{class:!0});var xt=i(K);v(bo.$$.fragment,xt),Qm=c(xt),qe=s(xt,"P",{});var Pn=i(qe);Km=r(Pn,"The "),Tn=s(Pn,"A",{href:!0});var Ng=i(Tn);Zm=r(Ng,"DetrModel"),Ng.forEach(t),Jm=r(Pn," forward method, overrides the "),wa=s(Pn,"CODE",{});var Sg=i(wa);Xm=r(Sg,"__call__"),Sg.forEach(t),ep=r(Pn," special method."),Pn.forEach(t),tp=c(xt),v(Xe.$$.fragment,xt),op=c(xt),v(et.$$.fragment,xt),xt.forEach(t),_e.forEach(t),bs=c(o),Pe=s(o,"H2",{class:!0});var Ks=i(Pe);tt=s(Ks,"A",{id:!0,class:!0,href:!0});var Mg=i(tt);Ea=s(Mg,"SPAN",{});var Ag=i(Ea);v(vo.$$.fragment,Ag),Ag.forEach(t),Mg.forEach(t),np=c(Ks),Fa=s(Ks,"SPAN",{});var Ig=i(Fa);rp=r(Ig,"DetrForObjectDetection"),Ig.forEach(t),Ks.forEach(t),vs=c(o),L=s(o,"DIV",{class:!0});var be=i(L);v(Do.$$.fragment,be),ap=c(be),$a=s(be,"P",{});var Rg=i($a);sp=r(Rg,`DETR Model (consisting of a backbone and encoder-decoder Transformer) with object detection heads on top, for tasks
such as COCO detection.`),Rg.forEach(t),ip=c(be),yo=s(be,"P",{});var Zs=i(yo);dp=r(Zs,"This model inherits from "),xn=s(Zs,"A",{href:!0});var Lg=i(xn);cp=r(Lg,"PreTrainedModel"),Lg.forEach(t),lp=r(Zs,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zs.forEach(t),hp=c(be),To=s(be,"P",{});var Js=i(To);mp=r(Js,"This model is also a PyTorch "),xo=s(Js,"A",{href:!0,rel:!0});var Hg=i(xo);pp=r(Hg,"torch.nn.Module"),Hg.forEach(t),fp=r(Js,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Js.forEach(t),up=c(be),Z=s(be,"DIV",{class:!0});var wt=i(Z);v(wo.$$.fragment,wt),gp=c(wt),Ne=s(wt,"P",{});var Nn=i(Ne);_p=r(Nn,"The "),wn=s(Nn,"A",{href:!0});var Ug=i(wn);bp=r(Ug,"DetrForObjectDetection"),Ug.forEach(t),vp=r(Nn," forward method, overrides the "),Oa=s(Nn,"CODE",{});var Wg=i(Oa);Dp=r(Wg,"__call__"),Wg.forEach(t),yp=r(Nn," special method."),Nn.forEach(t),Tp=c(wt),v(ot.$$.fragment,wt),xp=c(wt),v(nt.$$.fragment,wt),wt.forEach(t),be.forEach(t),Ds=c(o),Se=s(o,"H2",{class:!0});var Xs=i(Se);rt=s(Xs,"A",{id:!0,class:!0,href:!0});var Gg=i(rt);ka=s(Gg,"SPAN",{});var Bg=i(ka);v(Eo.$$.fragment,Bg),Bg.forEach(t),Gg.forEach(t),wp=c(Xs),Ca=s(Xs,"SPAN",{});var Vg=i(Ca);Ep=r(Vg,"DetrForSegmentation"),Vg.forEach(t),Xs.forEach(t),ys=c(o),H=s(o,"DIV",{class:!0});var ve=i(H);v(Fo.$$.fragment,ve),Fp=c(ve),za=s(ve,"P",{});var Yg=i(za);$p=r(Yg,`DETR Model (consisting of a backbone and encoder-decoder Transformer) with a segmentation head on top, for tasks
such as COCO panoptic.`),Yg.forEach(t),Op=c(ve),$o=s(ve,"P",{});var ei=i($o);kp=r(ei,"This model inherits from "),En=s(ei,"A",{href:!0});var Qg=i(En);Cp=r(Qg,"PreTrainedModel"),Qg.forEach(t),zp=r(ei,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ei.forEach(t),jp=c(ve),Oo=s(ve,"P",{});var ti=i(Oo);qp=r(ti,"This model is also a PyTorch "),ko=s(ti,"A",{href:!0,rel:!0});var Kg=i(ko);Pp=r(Kg,"torch.nn.Module"),Kg.forEach(t),Np=r(ti,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ti.forEach(t),Sp=c(ve),J=s(ve,"DIV",{class:!0});var Et=i(J);v(Co.$$.fragment,Et),Mp=c(Et),Me=s(Et,"P",{});var Sn=i(Me);Ap=r(Sn,"The "),Fn=s(Sn,"A",{href:!0});var Zg=i(Fn);Ip=r(Zg,"DetrForSegmentation"),Zg.forEach(t),Rp=r(Sn," forward method, overrides the "),ja=s(Sn,"CODE",{});var Jg=i(ja);Lp=r(Jg,"__call__"),Jg.forEach(t),Hp=r(Sn," special method."),Sn.forEach(t),Up=c(Et),v(at.$$.fragment,Et),Wp=c(Et),v(st.$$.fragment,Et),Et.forEach(t),ve.forEach(t),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(p_)),l(u,"id","detr"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#detr"),l(g,"class","relative group"),l(Ae,"id","overview"),l(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ae,"href","#overview"),l(De,"class","relative group"),l(Ot,"href","https://arxiv.org/abs/2005.12872"),l(Ot,"rel","nofollow"),l(kt,"href","https://huggingface.co/nielsr"),l(kt,"rel","nofollow"),l(Ct,"href","https://github.com/facebookresearch/detr"),l(Ct,"rel","nofollow"),l(zt,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/DETR"),l(zt,"rel","nofollow"),l(So,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(jt,"href","https://en.wikipedia.org/wiki/Hungarian_algorithm"),l(jt,"rel","nofollow"),l(qt,"href","https://giou.stanford.edu/"),l(qt,"rel","nofollow"),l(Mo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(Ao,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Io,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Lo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),l(Ho,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),l(Uo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),l(Pt,"href","https://github.com/facebookresearch/detr/blob/a54b77800eb8e64e3ad0d8237789fcbf2f8350c5/models/detr.py#L227-L232"),l(Pt,"rel","nofollow"),l(Wo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Go,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(Nt,"href","https://github.com/rwightman/pytorch-image-models"),l(Nt,"rel","nofollow"),l(Bo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),l(Vo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),l(Yo,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.pad_and_create_pixel_mask"),l(St,"href","https://github.com/facebookresearch/detr/issues/150"),l(St,"rel","nofollow"),l(en,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(tn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(on,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(nn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),l(an,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process"),l(sn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_segmentation"),l(dn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_segmentation"),l(cn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor.post_process_panoptic"),l(ln,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),l(hn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),l(Ut,"href","https://github.com/facebookresearch/detr"),l(Ut,"rel","nofollow"),l(Wt,"href","https://github.com/NielsRogge/Transformers-Tutorials/tree/master/DETR"),l(Wt,"rel","nofollow"),l(Ue,"id","transformers.models.detr.modeling_detr.DetrModelOutput"),l(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ue,"href","#transformers.models.detr.modeling_detr.DetrModelOutput"),l(we,"class","relative group"),l(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(mn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(pn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(We,"id","transformers.DetrConfig"),l(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(We,"href","#transformers.DetrConfig"),l(Oe,"class","relative group"),l(fn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),l(Xt,"href","https://huggingface.co/facebook/detr-resnet-50"),l(Xt,"rel","nofollow"),l(un,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(gn,"href","/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Be,"id","transformers.DetrFeatureExtractor"),l(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Be,"href","#transformers.DetrFeatureExtractor"),l(ze,"class","relative group"),l(_n,"href","/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(bn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(vn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Dn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Je,"id","transformers.DetrModel"),l(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Je,"href","#transformers.DetrModel"),l(je,"class","relative group"),l(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),l(_o,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(_o,"rel","nofollow"),l(Tn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(tt,"id","transformers.DetrForObjectDetection"),l(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(tt,"href","#transformers.DetrForObjectDetection"),l(Pe,"class","relative group"),l(xn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),l(xo,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(xo,"rel","nofollow"),l(wn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),l(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(rt,"id","transformers.DetrForSegmentation"),l(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(rt,"href","#transformers.DetrForSegmentation"),l(Se,"class","relative group"),l(En,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel"),l(ko,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ko,"rel","nofollow"),l(Fn,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),l(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,h){e(document.head,f),p(o,E,h),p(o,g,h),e(g,u),e(u,w),D(m,w,null),e(g,_),e(g,U),e(U,ai),p(o,Ia,h),p(o,De,h),e(De,Ae),e(Ae,Mn),D($t,Mn,null),e(De,si),e(De,An),e(An,ii),p(o,Ra,h),p(o,Ie,h),e(Ie,di),e(Ie,Ot),e(Ot,ci),e(Ie,li),p(o,La,h),p(o,Po,h),e(Po,hi),p(o,Ha,h),p(o,No,h),e(No,In),e(In,mi),p(o,Ua,h),p(o,fe,h),e(fe,pi),e(fe,kt),e(kt,fi),e(fe,ui),e(fe,Ct),e(Ct,gi),e(fe,_i),p(o,Wa,h),p(o,Re,h),e(Re,bi),e(Re,zt),e(zt,vi),e(Re,Di),p(o,Ga,h),p(o,Le,h),e(Le,yi),e(Le,So),e(So,Ti),e(Le,xi),p(o,Ba,h),p(o,$,h),e($,wi),e($,Rn),e(Rn,Ei),e($,Fi),e($,Ln),e(Ln,$i),e($,Oi),e($,Hn),e(Hn,ki),e($,Ci),e($,Un),e(Un,zi),e($,ji),e($,Wn),e(Wn,qi),e($,Pi),e($,Gn),e(Gn,Ni),e($,Si),e($,Bn),e(Bn,Mi),e($,Ai),e($,Vn),e(Vn,Ii),e($,Ri),p(o,Va,h),p(o,j,h),e(j,Li),e(j,Yn),e(Yn,Hi),e(j,Ui),e(j,Qn),e(Qn,Wi),e(j,Gi),e(j,Kn),e(Kn,Bi),e(j,Vi),e(j,Zn),e(Zn,Yi),e(j,Qi),e(j,Jn),e(Jn,Ki),e(j,Zi),e(j,Xn),e(Xn,Ji),e(j,Xi),p(o,Ya,h),p(o,Y,h),e(Y,ed),e(Y,er),e(er,td),e(Y,od),e(Y,jt),e(jt,nd),e(Y,rd),e(Y,qt),e(qt,ad),e(Y,sd),p(o,Qa,h),p(o,Q,h),e(Q,id),e(Q,Mo),e(Mo,dd),e(Q,cd),e(Q,Ao),e(Ao,ld),e(Q,hd),e(Q,Io),e(Io,md),e(Q,pd),p(o,Ka,h),p(o,Ro,h),e(Ro,fd),p(o,Za,h),p(o,k,h),e(k,te),e(te,ud),e(te,tr),e(tr,gd),e(te,_d),e(te,or),e(or,bd),e(te,vd),e(te,Lo),e(Lo,Dd),e(te,yd),e(k,Td),e(k,nr),e(nr,xd),e(k,wd),e(k,oe),e(oe,Ed),e(oe,rr),e(rr,Fd),e(oe,$d),e(oe,Ho),e(Ho,Od),e(oe,kd),e(oe,ar),e(ar,Cd),e(oe,zd),e(k,jd),e(k,ne),e(ne,qd),e(ne,sr),e(sr,Pd),e(ne,Nd),e(ne,Uo),e(Uo,Sd),e(ne,Md),e(ne,ir),e(ir,Ad),e(ne,Id),e(k,Rd),e(k,G),e(G,Ld),e(G,dr),e(dr,Hd),e(G,Ud),e(G,cr),e(cr,Wd),e(G,Gd),e(G,lr),e(lr,Bd),e(G,Vd),e(G,Pt),e(Pt,Yd),e(G,Qd),e(k,Kd),e(k,P),e(P,Wo),e(Wo,Zd),e(P,Jd),e(P,Go),e(Go,Xd),e(P,ec),e(P,Nt),e(Nt,tc),e(P,oc),e(P,hr),e(hr,nc),e(P,rc),e(P,Bo),e(Bo,ac),e(P,sc),e(P,mr),e(mr,ic),e(P,dc),e(k,cc),e(k,re),e(re,lc),e(re,Vo),e(Vo,hc),e(re,mc),e(re,pr),e(pr,pc),e(re,fc),e(re,Yo),e(Yo,uc),e(re,gc),e(k,_c),e(k,ye),e(ye,bc),e(ye,fr),e(fr,vc),e(ye,Dc),e(ye,St),e(St,yc),e(ye,Tc),p(o,Ja,h),p(o,Qo,h),e(Qo,xc),p(o,Xa,h),p(o,Ko,h),e(Ko,wc),p(o,es,h),D(Mt,o,h),p(o,ts,h),p(o,Zo,h),e(Zo,Ec),p(o,os,h),D(At,o,h),p(o,ns,h),p(o,Jo,h),e(Jo,Fc),p(o,rs,h),D(It,o,h),p(o,as,h),p(o,Xo,h),e(Xo,$c),p(o,ss,h),p(o,He,h),e(He,ur),e(ur,ae),e(ae,gr),e(gr,Oc),e(ae,kc),e(ae,_r),e(_r,Cc),e(ae,zc),e(ae,br),e(br,jc),e(ae,qc),e(ae,vr),e(vr,Pc),e(He,Nc),e(He,A),e(A,se),e(se,Dr),e(Dr,yr),e(yr,Sc),e(se,Mc),e(se,Tr),e(Tr,Ac),e(se,Ic),e(se,xr),e(xr,Rc),e(se,Lc),e(se,wr),e(wr,Hc),e(A,Uc),e(A,ie),e(ie,Er),e(Er,Fr),e(Fr,Wc),e(ie,Gc),e(ie,$r),e($r,en),e(en,Bc),e(ie,Vc),e(ie,Or),e(Or,tn),e(tn,Yc),e(ie,Qc),e(ie,kr),e(kr,on),e(on,Kc),e(A,Zc),e(A,de),e(de,Cr),e(Cr,zr),e(zr,Jc),e(de,Xc),e(de,jr),e(jr,el),e(de,tl),e(de,qr),e(qr,ol),e(de,nl),e(de,Pr),e(Pr,rl),e(A,al),e(A,ce),e(ce,Rt),e(Rt,Nr),e(Nr,sl),e(Rt,il),e(Rt,nn),e(nn,dl),e(ce,cl),e(ce,Te),e(Te,ll),e(Te,Sr),e(Sr,hl),e(Te,ml),e(Te,Mr),e(Mr,pl),e(Te,fl),e(ce,ul),e(ce,I),e(I,gl),e(I,Ar),e(Ar,_l),e(I,bl),e(I,Ir),e(Ir,vl),e(I,Dl),e(I,Rr),e(Rr,yl),e(I,Tl),e(I,Lr),e(Lr,xl),e(I,wl),e(I,Hr),e(Hr,El),e(I,Fl),e(ce,$l),e(ce,le),e(le,Ol),e(le,Ur),e(Ur,kl),e(le,Cl),e(le,Wr),e(Wr,zl),e(le,jl),e(le,Gr),e(Gr,ql),e(le,Pl),e(A,Nl),e(A,he),e(he,rn),e(rn,Br),e(Br,Sl),e(rn,Ml),e(he,Al),e(he,Vr),e(Vr,an),e(an,Il),e(he,Rl),e(he,Yr),e(Yr,sn),e(sn,Ll),e(he,Hl),e(he,Lt),e(Lt,dn),e(dn,Ul),e(Lt,Wl),e(Lt,cn),e(cn,Gl),e(A,Bl),e(A,me),e(me,Qr),e(Qr,Kr),e(Kr,Vl),e(me,Yl),e(me,Ht),e(Ht,Zr),e(Zr,Ql),e(Ht,Kl),e(Ht,Jr),e(Jr,Zl),e(me,Jl),e(me,xe),e(xe,Xr),e(Xr,Xl),e(xe,eh),e(xe,ea),e(ea,th),e(xe,oh),e(xe,ta),e(ta,nh),e(me,rh),e(me,pe),e(pe,oa),e(oa,ah),e(pe,sh),e(pe,na),e(na,ih),e(pe,dh),e(pe,ra),e(ra,ch),e(pe,lh),e(pe,aa),e(aa,hh),p(o,is,h),p(o,F,h),e(F,mh),e(F,ln),e(ln,ph),e(F,fh),e(F,sa),e(sa,uh),e(F,gh),e(F,ia),e(ia,_h),e(F,bh),e(F,da),e(da,vh),e(F,Dh),e(F,hn),e(hn,yh),e(F,Th),e(F,ca),e(ca,xh),e(F,wh),e(F,la),e(la,Eh),e(F,Fh),e(F,Ut),e(Ut,$h),e(F,Oh),e(F,Wt),e(Wt,kh),e(F,Ch),p(o,ds,h),p(o,we,h),e(we,Ue),e(Ue,ha),D(Gt,ha,null),e(we,zh),e(we,ma),e(ma,jh),p(o,cs,h),p(o,Ee,h),D(Bt,Ee,null),e(Ee,qh),e(Ee,pa),e(pa,Ph),p(o,ls,h),p(o,Fe,h),D(Vt,Fe,null),e(Fe,Nh),e(Fe,Yt),e(Yt,Sh),e(Yt,mn),e(mn,Mh),e(Yt,Ah),p(o,hs,h),p(o,$e,h),D(Qt,$e,null),e($e,Ih),e($e,Kt),e(Kt,Rh),e(Kt,pn),e(pn,Lh),e(Kt,Hh),p(o,ms,h),p(o,Oe,h),e(Oe,We),e(We,fa),D(Zt,fa,null),e(Oe,Uh),e(Oe,ua),e(ua,Wh),p(o,ps,h),p(o,B,h),D(Jt,B,null),e(B,Gh),e(B,ke),e(ke,Bh),e(ke,fn),e(fn,Vh),e(ke,Yh),e(ke,Xt),e(Xt,Qh),e(ke,Kh),e(B,Zh),e(B,Ce),e(Ce,Jh),e(Ce,un),e(un,Xh),e(Ce,em),e(Ce,gn),e(gn,tm),e(Ce,om),e(B,nm),D(Ge,B,null),p(o,fs,h),p(o,ze,h),e(ze,Be),e(Be,ga),D(eo,ga,null),e(ze,rm),e(ze,_a),e(_a,am),p(o,us,h),p(o,O,h),D(to,O,null),e(O,sm),e(O,ba),e(ba,im),e(O,dm),e(O,oo),e(oo,cm),e(oo,_n),e(_n,lm),e(oo,hm),e(O,mm),e(O,ue),D(no,ue,null),e(ue,pm),e(ue,va),e(va,fm),e(ue,um),D(Ve,ue,null),e(O,gm),e(O,Ye),D(ro,Ye,null),e(Ye,_m),e(Ye,ao),e(ao,bm),e(ao,Da),e(Da,vm),e(ao,Dm),e(O,ym),e(O,Qe),D(so,Qe,null),e(Qe,Tm),e(Qe,io),e(io,xm),e(io,bn),e(bn,wm),e(io,Em),e(O,Fm),e(O,Ke),D(co,Ke,null),e(Ke,$m),e(Ke,lo),e(lo,Om),e(lo,vn),e(vn,km),e(lo,Cm),e(O,zm),e(O,Ze),D(ho,Ze,null),e(Ze,jm),e(Ze,mo),e(mo,qm),e(mo,Dn),e(Dn,Pm),e(mo,Nm),p(o,gs,h),p(o,je,h),e(je,Je),e(Je,ya),D(po,ya,null),e(je,Sm),e(je,Ta),e(Ta,Mm),p(o,_s,h),p(o,R,h),D(fo,R,null),e(R,Am),e(R,xa),e(xa,Im),e(R,Rm),e(R,uo),e(uo,Lm),e(uo,yn),e(yn,Hm),e(uo,Um),e(R,Wm),e(R,go),e(go,Gm),e(go,_o),e(_o,Bm),e(go,Vm),e(R,Ym),e(R,K),D(bo,K,null),e(K,Qm),e(K,qe),e(qe,Km),e(qe,Tn),e(Tn,Zm),e(qe,Jm),e(qe,wa),e(wa,Xm),e(qe,ep),e(K,tp),D(Xe,K,null),e(K,op),D(et,K,null),p(o,bs,h),p(o,Pe,h),e(Pe,tt),e(tt,Ea),D(vo,Ea,null),e(Pe,np),e(Pe,Fa),e(Fa,rp),p(o,vs,h),p(o,L,h),D(Do,L,null),e(L,ap),e(L,$a),e($a,sp),e(L,ip),e(L,yo),e(yo,dp),e(yo,xn),e(xn,cp),e(yo,lp),e(L,hp),e(L,To),e(To,mp),e(To,xo),e(xo,pp),e(To,fp),e(L,up),e(L,Z),D(wo,Z,null),e(Z,gp),e(Z,Ne),e(Ne,_p),e(Ne,wn),e(wn,bp),e(Ne,vp),e(Ne,Oa),e(Oa,Dp),e(Ne,yp),e(Z,Tp),D(ot,Z,null),e(Z,xp),D(nt,Z,null),p(o,Ds,h),p(o,Se,h),e(Se,rt),e(rt,ka),D(Eo,ka,null),e(Se,wp),e(Se,Ca),e(Ca,Ep),p(o,ys,h),p(o,H,h),D(Fo,H,null),e(H,Fp),e(H,za),e(za,$p),e(H,Op),e(H,$o),e($o,kp),e($o,En),e(En,Cp),e($o,zp),e(H,jp),e(H,Oo),e(Oo,qp),e(Oo,ko),e(ko,Pp),e(Oo,Np),e(H,Sp),e(H,J),D(Co,J,null),e(J,Mp),e(J,Me),e(Me,Ap),e(Me,Fn),e(Fn,Ip),e(Me,Rp),e(Me,ja),e(ja,Lp),e(Me,Hp),e(J,Up),D(at,J,null),e(J,Wp),D(st,J,null),Ts=!0},p(o,[h]){const zo={};h&2&&(zo.$$scope={dirty:h,ctx:o}),Ge.$set(zo);const qa={};h&2&&(qa.$$scope={dirty:h,ctx:o}),Ve.$set(qa);const Pa={};h&2&&(Pa.$$scope={dirty:h,ctx:o}),Xe.$set(Pa);const Na={};h&2&&(Na.$$scope={dirty:h,ctx:o}),et.$set(Na);const jo={};h&2&&(jo.$$scope={dirty:h,ctx:o}),ot.$set(jo);const Sa={};h&2&&(Sa.$$scope={dirty:h,ctx:o}),nt.$set(Sa);const Ma={};h&2&&(Ma.$$scope={dirty:h,ctx:o}),at.$set(Ma);const Aa={};h&2&&(Aa.$$scope={dirty:h,ctx:o}),st.$set(Aa)},i(o){Ts||(y(m.$$.fragment,o),y($t.$$.fragment,o),y(Mt.$$.fragment,o),y(At.$$.fragment,o),y(It.$$.fragment,o),y(Gt.$$.fragment,o),y(Bt.$$.fragment,o),y(Vt.$$.fragment,o),y(Qt.$$.fragment,o),y(Zt.$$.fragment,o),y(Jt.$$.fragment,o),y(Ge.$$.fragment,o),y(eo.$$.fragment,o),y(to.$$.fragment,o),y(no.$$.fragment,o),y(Ve.$$.fragment,o),y(ro.$$.fragment,o),y(so.$$.fragment,o),y(co.$$.fragment,o),y(ho.$$.fragment,o),y(po.$$.fragment,o),y(fo.$$.fragment,o),y(bo.$$.fragment,o),y(Xe.$$.fragment,o),y(et.$$.fragment,o),y(vo.$$.fragment,o),y(Do.$$.fragment,o),y(wo.$$.fragment,o),y(ot.$$.fragment,o),y(nt.$$.fragment,o),y(Eo.$$.fragment,o),y(Fo.$$.fragment,o),y(Co.$$.fragment,o),y(at.$$.fragment,o),y(st.$$.fragment,o),Ts=!0)},o(o){T(m.$$.fragment,o),T($t.$$.fragment,o),T(Mt.$$.fragment,o),T(At.$$.fragment,o),T(It.$$.fragment,o),T(Gt.$$.fragment,o),T(Bt.$$.fragment,o),T(Vt.$$.fragment,o),T(Qt.$$.fragment,o),T(Zt.$$.fragment,o),T(Jt.$$.fragment,o),T(Ge.$$.fragment,o),T(eo.$$.fragment,o),T(to.$$.fragment,o),T(no.$$.fragment,o),T(Ve.$$.fragment,o),T(ro.$$.fragment,o),T(so.$$.fragment,o),T(co.$$.fragment,o),T(ho.$$.fragment,o),T(po.$$.fragment,o),T(fo.$$.fragment,o),T(bo.$$.fragment,o),T(Xe.$$.fragment,o),T(et.$$.fragment,o),T(vo.$$.fragment,o),T(Do.$$.fragment,o),T(wo.$$.fragment,o),T(ot.$$.fragment,o),T(nt.$$.fragment,o),T(Eo.$$.fragment,o),T(Fo.$$.fragment,o),T(Co.$$.fragment,o),T(at.$$.fragment,o),T(st.$$.fragment,o),Ts=!1},d(o){t(f),o&&t(E),o&&t(g),x(m),o&&t(Ia),o&&t(De),x($t),o&&t(Ra),o&&t(Ie),o&&t(La),o&&t(Po),o&&t(Ha),o&&t(No),o&&t(Ua),o&&t(fe),o&&t(Wa),o&&t(Re),o&&t(Ga),o&&t(Le),o&&t(Ba),o&&t($),o&&t(Va),o&&t(j),o&&t(Ya),o&&t(Y),o&&t(Qa),o&&t(Q),o&&t(Ka),o&&t(Ro),o&&t(Za),o&&t(k),o&&t(Ja),o&&t(Qo),o&&t(Xa),o&&t(Ko),o&&t(es),x(Mt,o),o&&t(ts),o&&t(Zo),o&&t(os),x(At,o),o&&t(ns),o&&t(Jo),o&&t(rs),x(It,o),o&&t(as),o&&t(Xo),o&&t(ss),o&&t(He),o&&t(is),o&&t(F),o&&t(ds),o&&t(we),x(Gt),o&&t(cs),o&&t(Ee),x(Bt),o&&t(ls),o&&t(Fe),x(Vt),o&&t(hs),o&&t($e),x(Qt),o&&t(ms),o&&t(Oe),x(Zt),o&&t(ps),o&&t(B),x(Jt),x(Ge),o&&t(fs),o&&t(ze),x(eo),o&&t(us),o&&t(O),x(to),x(no),x(Ve),x(ro),x(so),x(co),x(ho),o&&t(gs),o&&t(je),x(po),o&&t(_s),o&&t(R),x(fo),x(bo),x(Xe),x(et),o&&t(bs),o&&t(Pe),x(vo),o&&t(vs),o&&t(L),x(Do),x(wo),x(ot),x(nt),o&&t(Ds),o&&t(Se),x(Eo),o&&t(ys),o&&t(H),x(Fo),x(Co),x(at),x(st)}}}const p_={local:"detr",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.detr.modeling_detr.DetrModelOutput",title:"DETR specific outputs"},{local:"transformers.DetrConfig",title:"DetrConfig"},{local:"transformers.DetrFeatureExtractor",title:"DetrFeatureExtractor"},{local:"transformers.DetrModel",title:"DetrModel"},{local:"transformers.DetrForObjectDetection",title:"DetrForObjectDetection"},{local:"transformers.DetrForSegmentation",title:"DetrForSegmentation"}],title:"DETR"};function f_(z){return n_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class y_ extends Xg{constructor(f){super();e_(this,f,f_,m_,t_,{})}}export{y_ as default,p_ as metadata};
