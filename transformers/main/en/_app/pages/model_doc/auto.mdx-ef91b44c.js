import{S as p0t,i as _0t,s as b0t,e as a,k as l,w as v,t as o,M as F0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as v0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function T0t(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,N6,fm,qe,Xe,ci,An,j6,yn,Ln,D6,mi,xn,G6,fi,gm,Ma;return{c(){g=a("p"),F=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mm=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),N6=o(")."),fm=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),j6=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),D6=o(`, make sure its
`),mi=a("code"),xn=o("config_class"),G6=o(` attribute is set to the same class you use when registering the model (here
`),fi=a("code"),gm=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);F=r(Ae,"If your "),u=n(Ae,"CODE",{});var n$=s(u);f=r(n$,"NewModelConfig"),n$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var s$=s(li);mm=r(s$,"model_type"),s$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var l$=s(ii);di=r(l$,'"new-model"'),l$.forEach(t),N6=r(Ae,")."),Ae.forEach(t),fm=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),j6=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var i$=s(yn);Ln=r(i$,"PreTrainedModel"),i$.forEach(t),D6=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var hm=s(mi);xn=r(hm,"config_class"),hm.forEach(t),G6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),fi=n(Eo,"CODE",{});var d$=s(fi);gm=r(d$,"NewModelConfig"),d$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,F),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mm),e(g,et),e(g,ii),e(ii,di),e(g,N6),b(ze,fm,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,j6),e(qe,yn),e(yn,Ln),e(qe,D6),e(qe,mi),e(mi,xn),e(qe,G6),e(qe,fi),e(fi,gm),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(fm),ze&&t(qe)}}}function M0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C0t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function w0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A0t(A){let g,F,u,f,p;return{c(){g=a("p"),F=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function y0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z0t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z6t(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ryt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ayt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function syt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function myt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pyt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _yt(A){let g,F,u,f,p;return f=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),u=l(),v(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function byt(A){let g,F,u,f,p,d,h,Mo,li,mm,et,ii,di,N6,fm,qe,Xe,ci,An,j6,yn,Ln,D6,mi,xn,G6,fi,gm,Ma,ze,Ae,n$,gi,s$,l$,Eo,Ea,i$,hm,d$,bje,lPe,hi,um,qZ,O6,Fje,NZ,vje,iPe,$n,Tje,jZ,Mje,Eje,DZ,Cje,wje,dPe,V6,cPe,c$,Aje,mPe,pm,fPe,ui,_m,GZ,X6,yje,OZ,Lje,gPe,Co,z6,xje,Q6,$je,m$,kje,Sje,Rje,W6,Bje,VZ,Pje,Ije,qje,Er,H6,Nje,XZ,jje,Dje,pi,Gje,zZ,Oje,Vje,QZ,Xje,zje,Qje,y,bm,WZ,Wje,Hje,f$,Uje,Jje,Yje,Fm,HZ,Kje,Zje,g$,eDe,oDe,rDe,vm,UZ,tDe,aDe,h$,nDe,sDe,lDe,Tm,JZ,iDe,dDe,u$,cDe,mDe,fDe,Mm,YZ,gDe,hDe,p$,uDe,pDe,_De,Em,KZ,bDe,FDe,_$,vDe,TDe,MDe,Cm,ZZ,EDe,CDe,b$,wDe,ADe,yDe,wm,eee,LDe,xDe,F$,$De,kDe,SDe,Am,oee,RDe,BDe,v$,PDe,IDe,qDe,ym,ree,NDe,jDe,T$,DDe,GDe,ODe,Lm,tee,VDe,XDe,M$,zDe,QDe,WDe,xm,aee,HDe,UDe,E$,JDe,YDe,KDe,$m,nee,ZDe,eGe,C$,oGe,rGe,tGe,km,see,aGe,nGe,w$,sGe,lGe,iGe,Sm,lee,dGe,cGe,A$,mGe,fGe,gGe,Rm,iee,hGe,uGe,y$,pGe,_Ge,bGe,Bm,dee,FGe,vGe,L$,TGe,MGe,EGe,Pm,cee,CGe,wGe,x$,AGe,yGe,LGe,Im,mee,xGe,$Ge,$$,kGe,SGe,RGe,qm,fee,BGe,PGe,k$,IGe,qGe,NGe,Nm,gee,jGe,DGe,S$,GGe,OGe,VGe,jm,hee,XGe,zGe,R$,QGe,WGe,HGe,Dm,uee,UGe,JGe,B$,YGe,KGe,ZGe,Gm,pee,eOe,oOe,P$,rOe,tOe,aOe,Om,_ee,nOe,sOe,I$,lOe,iOe,dOe,Vm,bee,cOe,mOe,q$,fOe,gOe,hOe,Xm,Fee,uOe,pOe,N$,_Oe,bOe,FOe,zm,vee,vOe,TOe,j$,MOe,EOe,COe,Qm,Tee,wOe,AOe,D$,yOe,LOe,xOe,Wm,Mee,$Oe,kOe,G$,SOe,ROe,BOe,Hm,Eee,POe,IOe,O$,qOe,NOe,jOe,Um,Cee,DOe,GOe,V$,OOe,VOe,XOe,Jm,wee,zOe,QOe,X$,WOe,HOe,UOe,Ym,Aee,JOe,YOe,z$,KOe,ZOe,eVe,Km,yee,oVe,rVe,Q$,tVe,aVe,nVe,Zm,Lee,sVe,lVe,W$,iVe,dVe,cVe,ef,xee,mVe,fVe,H$,gVe,hVe,uVe,of,$ee,pVe,_Ve,U$,bVe,FVe,vVe,rf,kee,TVe,MVe,J$,EVe,CVe,wVe,tf,See,AVe,yVe,Y$,LVe,xVe,$Ve,af,Ree,kVe,SVe,K$,RVe,BVe,PVe,nf,Bee,IVe,qVe,Z$,NVe,jVe,DVe,sf,Pee,GVe,OVe,ek,VVe,XVe,zVe,lf,Iee,QVe,WVe,ok,HVe,UVe,JVe,df,qee,YVe,KVe,rk,ZVe,eXe,oXe,cf,Nee,rXe,tXe,tk,aXe,nXe,sXe,mf,jee,lXe,iXe,ak,dXe,cXe,mXe,ff,Dee,fXe,gXe,nk,hXe,uXe,pXe,gf,Gee,_Xe,bXe,sk,FXe,vXe,TXe,hf,Oee,MXe,EXe,lk,CXe,wXe,AXe,uf,Vee,yXe,LXe,ik,xXe,$Xe,kXe,pf,Xee,SXe,RXe,dk,BXe,PXe,IXe,_f,zee,qXe,NXe,ck,jXe,DXe,GXe,bf,Qee,OXe,VXe,mk,XXe,zXe,QXe,Ff,Wee,WXe,HXe,fk,UXe,JXe,YXe,vf,Hee,KXe,ZXe,gk,eze,oze,rze,Tf,Uee,tze,aze,hk,nze,sze,lze,Mf,Jee,ize,dze,uk,cze,mze,fze,Ef,Yee,gze,hze,pk,uze,pze,_ze,Cf,Kee,bze,Fze,_k,vze,Tze,Mze,wf,Zee,Eze,Cze,bk,wze,Aze,yze,Af,eoe,Lze,xze,Fk,$ze,kze,Sze,yf,ooe,Rze,Bze,vk,Pze,Ize,qze,Lf,roe,Nze,jze,Tk,Dze,Gze,Oze,xf,toe,Vze,Xze,Mk,zze,Qze,Wze,$f,aoe,Hze,Uze,Ek,Jze,Yze,Kze,kf,noe,Zze,eQe,Ck,oQe,rQe,tQe,Sf,soe,aQe,nQe,wk,sQe,lQe,iQe,Rf,loe,dQe,cQe,Ak,mQe,fQe,gQe,Bf,ioe,hQe,uQe,yk,pQe,_Qe,bQe,Pf,doe,FQe,vQe,Lk,TQe,MQe,EQe,If,coe,CQe,wQe,xk,AQe,yQe,LQe,qf,moe,xQe,$Qe,$k,kQe,SQe,RQe,Nf,foe,BQe,PQe,kk,IQe,qQe,NQe,jf,goe,jQe,DQe,Sk,GQe,OQe,VQe,Df,hoe,XQe,zQe,Rk,QQe,WQe,HQe,Gf,uoe,UQe,JQe,Bk,YQe,KQe,ZQe,Of,poe,eWe,oWe,Pk,rWe,tWe,aWe,Vf,_oe,nWe,sWe,Ik,lWe,iWe,dWe,Xf,boe,cWe,mWe,qk,fWe,gWe,hWe,zf,Foe,uWe,pWe,Nk,_We,bWe,FWe,Qf,voe,vWe,TWe,jk,MWe,EWe,CWe,Wf,Toe,wWe,AWe,Dk,yWe,LWe,xWe,Hf,Moe,$We,kWe,Gk,SWe,RWe,BWe,Uf,Eoe,PWe,IWe,Ok,qWe,NWe,jWe,Jf,Coe,DWe,GWe,Vk,OWe,VWe,XWe,Yf,woe,zWe,QWe,Xk,WWe,HWe,UWe,Kf,Aoe,JWe,YWe,zk,KWe,ZWe,eHe,Zf,yoe,oHe,rHe,Qk,tHe,aHe,nHe,eg,Loe,sHe,lHe,Wk,iHe,dHe,cHe,og,xoe,mHe,fHe,Hk,gHe,hHe,uHe,rg,$oe,pHe,_He,Uk,bHe,FHe,vHe,tg,koe,THe,MHe,Jk,EHe,CHe,wHe,ag,Soe,AHe,yHe,Yk,LHe,xHe,$He,ng,Roe,kHe,SHe,Kk,RHe,BHe,PHe,sg,Boe,IHe,qHe,Zk,NHe,jHe,DHe,lg,Poe,GHe,OHe,eS,VHe,XHe,zHe,ig,Ioe,QHe,WHe,oS,HHe,UHe,JHe,dg,qoe,YHe,KHe,rS,ZHe,eUe,oUe,cg,Noe,rUe,tUe,tS,aUe,nUe,sUe,mg,joe,lUe,iUe,aS,dUe,cUe,mUe,fg,Doe,fUe,gUe,nS,hUe,uUe,pUe,gg,Goe,_Ue,bUe,sS,FUe,vUe,TUe,hg,MUe,ug,U6,EUe,Ooe,CUe,hPe,_i,pg,Voe,J6,wUe,Xoe,AUe,uPe,wo,Y6,yUe,K6,LUe,lS,xUe,$Ue,kUe,Z6,SUe,zoe,RUe,BUe,PUe,Cr,ey,IUe,Qoe,qUe,NUe,Ca,jUe,Woe,DUe,GUe,Hoe,OUe,VUe,Uoe,XUe,zUe,QUe,k,kn,Joe,WUe,HUe,iS,UUe,JUe,dS,YUe,KUe,ZUe,Sn,Yoe,eJe,oJe,cS,rJe,tJe,mS,aJe,nJe,sJe,Rn,Koe,lJe,iJe,fS,dJe,cJe,gS,mJe,fJe,gJe,_g,Zoe,hJe,uJe,hS,pJe,_Je,bJe,Bn,ere,FJe,vJe,uS,TJe,MJe,pS,EJe,CJe,wJe,bg,ore,AJe,yJe,_S,LJe,xJe,$Je,Fg,rre,kJe,SJe,bS,RJe,BJe,PJe,vg,tre,IJe,qJe,FS,NJe,jJe,DJe,Pn,are,GJe,OJe,vS,VJe,XJe,TS,zJe,QJe,WJe,In,nre,HJe,UJe,MS,JJe,YJe,ES,KJe,ZJe,eYe,qn,sre,oYe,rYe,CS,tYe,aYe,wS,nYe,sYe,lYe,Tg,lre,iYe,dYe,AS,cYe,mYe,fYe,Mg,ire,gYe,hYe,yS,uYe,pYe,_Ye,Nn,dre,bYe,FYe,LS,vYe,TYe,xS,MYe,EYe,CYe,Eg,cre,wYe,AYe,$S,yYe,LYe,xYe,jn,mre,$Ye,kYe,kS,SYe,RYe,SS,BYe,PYe,IYe,Dn,fre,qYe,NYe,RS,jYe,DYe,BS,GYe,OYe,VYe,Gn,gre,XYe,zYe,PS,QYe,WYe,IS,HYe,UYe,JYe,Cg,hre,YYe,KYe,qS,ZYe,eKe,oKe,On,ure,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,Vn,pre,dKe,cKe,DS,mKe,fKe,GS,gKe,hKe,uKe,Xn,_re,pKe,_Ke,OS,bKe,FKe,VS,vKe,TKe,MKe,zn,bre,EKe,CKe,XS,wKe,AKe,zS,yKe,LKe,xKe,Qn,Fre,$Ke,kKe,QS,SKe,RKe,WS,BKe,PKe,IKe,Wn,vre,qKe,NKe,HS,jKe,DKe,US,GKe,OKe,VKe,wg,Tre,XKe,zKe,JS,QKe,WKe,HKe,Hn,Mre,UKe,JKe,YS,YKe,KKe,KS,ZKe,eZe,oZe,Ag,Ere,rZe,tZe,ZS,aZe,nZe,sZe,Un,Cre,lZe,iZe,eR,dZe,cZe,oR,mZe,fZe,gZe,Jn,wre,hZe,uZe,rR,pZe,_Ze,tR,bZe,FZe,vZe,Yn,Are,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,Kn,yre,LZe,xZe,sR,$Ze,kZe,lR,SZe,RZe,BZe,Zn,Lre,PZe,IZe,iR,qZe,NZe,dR,jZe,DZe,GZe,yg,xre,OZe,VZe,cR,XZe,zZe,QZe,es,$re,WZe,HZe,mR,UZe,JZe,fR,YZe,KZe,ZZe,os,kre,eeo,oeo,gR,reo,teo,hR,aeo,neo,seo,rs,Sre,leo,ieo,uR,deo,ceo,pR,meo,feo,geo,ts,Rre,heo,ueo,_R,peo,_eo,bR,beo,Feo,veo,as,Bre,Teo,Meo,FR,Eeo,Ceo,vR,weo,Aeo,yeo,ns,Pre,Leo,xeo,TR,$eo,keo,MR,Seo,Reo,Beo,Lg,Ire,Peo,Ieo,ER,qeo,Neo,jeo,ss,qre,Deo,Geo,CR,Oeo,Veo,wR,Xeo,zeo,Qeo,xg,Nre,Weo,Heo,AR,Ueo,Jeo,Yeo,$g,jre,Keo,Zeo,yR,eoo,ooo,roo,ls,Dre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,is,Gre,coo,moo,$R,foo,goo,kR,hoo,uoo,poo,ds,Ore,_oo,boo,SR,Foo,voo,RR,Too,Moo,Eoo,kg,Vre,Coo,woo,BR,Aoo,yoo,Loo,cs,Xre,xoo,$oo,PR,koo,Soo,IR,Roo,Boo,Poo,ms,zre,Ioo,qoo,qR,Noo,joo,NR,Doo,Goo,Ooo,fs,Qre,Voo,Xoo,jR,zoo,Qoo,DR,Woo,Hoo,Uoo,gs,Wre,Joo,Yoo,GR,Koo,Zoo,OR,ero,oro,rro,hs,Hre,tro,aro,VR,nro,sro,XR,lro,iro,dro,us,Ure,cro,mro,zR,fro,gro,QR,hro,uro,pro,Sg,Jre,_ro,bro,WR,Fro,vro,Tro,Rg,Yre,Mro,Ero,HR,Cro,wro,Aro,Bg,Kre,yro,Lro,UR,xro,$ro,kro,Pg,Zre,Sro,Rro,JR,Bro,Pro,Iro,ps,ete,qro,Nro,YR,jro,Dro,KR,Gro,Oro,Vro,Ig,ote,Xro,zro,ZR,Qro,Wro,Hro,_s,rte,Uro,Jro,eB,Yro,Kro,oB,Zro,eto,oto,bs,tte,rto,tto,rB,ato,nto,tB,sto,lto,ito,Fs,ate,dto,cto,aB,mto,fto,nB,gto,hto,uto,vs,nte,pto,_to,sB,bto,Fto,lB,vto,Tto,Mto,Ts,ste,Eto,Cto,iB,wto,Ato,dB,yto,Lto,xto,Ms,lte,$to,kto,cB,Sto,Rto,mB,Bto,Pto,Ito,qg,ite,qto,Nto,fB,jto,Dto,Gto,Ng,dte,Oto,Vto,gB,Xto,zto,Qto,Es,cte,Wto,Hto,hB,Uto,Jto,uB,Yto,Kto,Zto,Cs,mte,eao,oao,pB,rao,tao,_B,aao,nao,sao,ws,fte,lao,iao,bB,dao,cao,FB,mao,fao,gao,jg,gte,hao,uao,vB,pao,_ao,bao,Dg,hte,Fao,vao,TB,Tao,Mao,Eao,Gg,ute,Cao,wao,MB,Aao,yao,Lao,As,pte,xao,$ao,EB,kao,Sao,CB,Rao,Bao,Pao,Og,_te,Iao,qao,wB,Nao,jao,Dao,Vg,bte,Gao,Oao,AB,Vao,Xao,zao,ys,Fte,Qao,Wao,yB,Hao,Uao,LB,Jao,Yao,Kao,Xg,vte,Zao,eno,xB,ono,rno,tno,zg,Tte,ano,nno,$B,sno,lno,ino,Ls,Mte,dno,cno,kB,mno,fno,SB,gno,hno,uno,xs,Ete,pno,_no,RB,bno,Fno,BB,vno,Tno,Mno,$s,Cte,Eno,Cno,PB,wno,Ano,IB,yno,Lno,xno,ks,wte,$no,kno,qB,Sno,Rno,NB,Bno,Pno,Ino,Qg,qno,Wg,oy,Nno,Ate,jno,pPe,bi,Hg,yte,ry,Dno,Lte,Gno,_Pe,Ao,ty,Ono,ay,Vno,jB,Xno,zno,Qno,ny,Wno,xte,Hno,Uno,Jno,Qe,sy,Yno,$te,Kno,Zno,wa,eso,kte,oso,rso,Ste,tso,aso,Rte,nso,sso,lso,te,Ug,Bte,iso,dso,DB,cso,mso,fso,Jg,Pte,gso,hso,GB,uso,pso,_so,Yg,Ite,bso,Fso,OB,vso,Tso,Mso,Kg,qte,Eso,Cso,VB,wso,Aso,yso,Zg,Nte,Lso,xso,XB,$so,kso,Sso,eh,jte,Rso,Bso,zB,Pso,Iso,qso,oh,Dte,Nso,jso,QB,Dso,Gso,Oso,rh,Gte,Vso,Xso,WB,zso,Qso,Wso,th,Ote,Hso,Uso,HB,Jso,Yso,Kso,ah,Vte,Zso,elo,UB,olo,rlo,tlo,nh,Xte,alo,nlo,JB,slo,llo,ilo,sh,zte,dlo,clo,YB,mlo,flo,glo,lh,Qte,hlo,ulo,KB,plo,_lo,blo,ih,Wte,Flo,vlo,ZB,Tlo,Mlo,Elo,dh,Hte,Clo,wlo,eP,Alo,ylo,Llo,ch,Ute,xlo,$lo,oP,klo,Slo,Rlo,mh,Jte,Blo,Plo,rP,Ilo,qlo,Nlo,fh,Yte,jlo,Dlo,tP,Glo,Olo,Vlo,gh,Kte,Xlo,zlo,aP,Qlo,Wlo,Hlo,hh,Zte,Ulo,Jlo,nP,Ylo,Klo,Zlo,uh,eae,eio,oio,sP,rio,tio,aio,ph,oae,nio,sio,lP,lio,iio,dio,_h,rae,cio,mio,iP,fio,gio,hio,bh,tae,uio,pio,dP,_io,bio,Fio,Fh,vio,vh,Tio,Th,ly,Mio,aae,Eio,bPe,Fi,Mh,nae,iy,Cio,sae,wio,FPe,yo,dy,Aio,cy,yio,cP,Lio,xio,$io,my,kio,lae,Sio,Rio,Bio,We,fy,Pio,iae,Iio,qio,vi,Nio,dae,jio,Dio,cae,Gio,Oio,Vio,be,Eh,mae,Xio,zio,mP,Qio,Wio,Hio,Ch,fae,Uio,Jio,fP,Yio,Kio,Zio,wh,gae,edo,odo,gP,rdo,tdo,ado,Ah,hae,ndo,sdo,hP,ldo,ido,ddo,yh,uae,cdo,mdo,uP,fdo,gdo,hdo,Lh,pae,udo,pdo,pP,_do,bdo,Fdo,xh,_ae,vdo,Tdo,_P,Mdo,Edo,Cdo,$h,bae,wdo,Ado,bP,ydo,Ldo,xdo,kh,Fae,$do,kdo,FP,Sdo,Rdo,Bdo,Sh,vae,Pdo,Ido,vP,qdo,Ndo,jdo,Rh,Tae,Ddo,Gdo,TP,Odo,Vdo,Xdo,Bh,Mae,zdo,Qdo,MP,Wdo,Hdo,Udo,Ph,Eae,Jdo,Ydo,EP,Kdo,Zdo,eco,Ih,Cae,oco,rco,CP,tco,aco,nco,qh,sco,Nh,lco,jh,gy,ico,wae,dco,vPe,Ti,Dh,Aae,hy,cco,yae,mco,TPe,Lo,uy,fco,Mi,gco,wP,hco,uco,AP,pco,_co,bco,py,Fco,Lae,vco,Tco,Mco,ot,_y,Eco,xae,Cco,wco,Ei,Aco,$ae,yco,Lco,yP,xco,$co,kco,Gh,Sco,He,by,Rco,kae,Bco,Pco,Aa,Ico,Sae,qco,Nco,Rae,jco,Dco,Bae,Gco,Oco,Vco,x,Oh,Pae,Xco,zco,LP,Qco,Wco,Hco,Vh,Iae,Uco,Jco,xP,Yco,Kco,Zco,Xh,qae,emo,omo,$P,rmo,tmo,amo,zh,Nae,nmo,smo,kP,lmo,imo,dmo,Qh,jae,cmo,mmo,SP,fmo,gmo,hmo,Wh,Dae,umo,pmo,RP,_mo,bmo,Fmo,Hh,Gae,vmo,Tmo,BP,Mmo,Emo,Cmo,Uh,Oae,wmo,Amo,PP,ymo,Lmo,xmo,Jh,Vae,$mo,kmo,IP,Smo,Rmo,Bmo,Yh,Xae,Pmo,Imo,qP,qmo,Nmo,jmo,Kh,zae,Dmo,Gmo,NP,Omo,Vmo,Xmo,Zh,Qae,zmo,Qmo,jP,Wmo,Hmo,Umo,eu,Wae,Jmo,Ymo,DP,Kmo,Zmo,efo,ou,Hae,ofo,rfo,GP,tfo,afo,nfo,ru,Uae,sfo,lfo,OP,ifo,dfo,cfo,tu,Jae,mfo,ffo,VP,gfo,hfo,ufo,au,Yae,pfo,_fo,XP,bfo,Ffo,vfo,nu,Kae,Tfo,Mfo,zP,Efo,Cfo,wfo,su,Zae,Afo,yfo,QP,Lfo,xfo,$fo,lu,ene,kfo,Sfo,WP,Rfo,Bfo,Pfo,iu,one,Ifo,qfo,HP,Nfo,jfo,Dfo,du,rne,Gfo,Ofo,UP,Vfo,Xfo,zfo,cu,tne,Qfo,Wfo,JP,Hfo,Ufo,Jfo,mu,ane,Yfo,Kfo,YP,Zfo,ego,ogo,fu,nne,rgo,tgo,KP,ago,ngo,sgo,gu,sne,lgo,igo,ZP,dgo,cgo,mgo,hu,lne,fgo,ggo,eI,hgo,ugo,pgo,uu,ine,_go,bgo,oI,Fgo,vgo,Tgo,pu,dne,Mgo,Ego,rI,Cgo,wgo,Ago,_u,cne,ygo,Lgo,tI,xgo,$go,kgo,Ss,mne,Sgo,Rgo,aI,Bgo,Pgo,nI,Igo,qgo,Ngo,bu,fne,jgo,Dgo,sI,Ggo,Ogo,Vgo,Fu,gne,Xgo,zgo,lI,Qgo,Wgo,Hgo,vu,hne,Ugo,Jgo,iI,Ygo,Kgo,Zgo,Tu,une,eho,oho,dI,rho,tho,aho,Mu,pne,nho,sho,cI,lho,iho,dho,Eu,_ne,cho,mho,mI,fho,gho,hho,Cu,bne,uho,pho,fI,_ho,bho,Fho,wu,Fne,vho,Tho,gI,Mho,Eho,Cho,Au,vne,who,Aho,hI,yho,Lho,xho,yu,Tne,$ho,kho,uI,Sho,Rho,Bho,Lu,Mne,Pho,Iho,pI,qho,Nho,jho,xu,Ene,Dho,Gho,_I,Oho,Vho,Xho,$u,Cne,zho,Qho,bI,Who,Hho,Uho,ku,wne,Jho,Yho,FI,Kho,Zho,euo,Su,Ane,ouo,ruo,vI,tuo,auo,nuo,Ru,yne,suo,luo,TI,iuo,duo,cuo,Bu,Lne,muo,fuo,MI,guo,huo,uuo,Pu,xne,puo,_uo,EI,buo,Fuo,vuo,Iu,$ne,Tuo,Muo,CI,Euo,Cuo,wuo,qu,kne,Auo,yuo,wI,Luo,xuo,$uo,Nu,Sne,kuo,Suo,AI,Ruo,Buo,Puo,ju,Rne,Iuo,quo,yI,Nuo,juo,Duo,Du,Bne,Guo,Ouo,LI,Vuo,Xuo,zuo,Gu,Pne,Quo,Wuo,xI,Huo,Uuo,Juo,Ou,Ine,Yuo,Kuo,$I,Zuo,epo,opo,Vu,qne,rpo,tpo,kI,apo,npo,spo,Xu,Nne,lpo,ipo,SI,dpo,cpo,mpo,zu,jne,fpo,gpo,RI,hpo,upo,ppo,Qu,Dne,_po,bpo,BI,Fpo,vpo,Tpo,Wu,Gne,Mpo,Epo,PI,Cpo,wpo,Apo,Hu,One,ypo,Lpo,II,xpo,$po,kpo,Uu,Vne,Spo,Rpo,qI,Bpo,Ppo,Ipo,Ju,Xne,qpo,Npo,NI,jpo,Dpo,Gpo,Yu,zne,Opo,Vpo,jI,Xpo,zpo,Qpo,Ku,Qne,Wpo,Hpo,DI,Upo,Jpo,Ypo,Zu,Wne,Kpo,Zpo,GI,e_o,o_o,r_o,ep,Hne,t_o,a_o,OI,n_o,s_o,l_o,op,Une,i_o,d_o,VI,c_o,m_o,f_o,rp,Jne,g_o,h_o,XI,u_o,p_o,__o,tp,Yne,b_o,F_o,zI,v_o,T_o,M_o,ap,Kne,E_o,C_o,QI,w_o,A_o,y_o,np,Zne,L_o,x_o,WI,$_o,k_o,S_o,sp,ese,R_o,B_o,HI,P_o,I_o,q_o,lp,ose,N_o,j_o,UI,D_o,G_o,O_o,ip,rse,V_o,X_o,JI,z_o,Q_o,W_o,dp,tse,H_o,U_o,YI,J_o,Y_o,K_o,cp,ase,Z_o,ebo,KI,obo,rbo,tbo,mp,nse,abo,nbo,ZI,sbo,lbo,ibo,fp,sse,dbo,cbo,eq,mbo,fbo,gbo,gp,lse,hbo,ubo,oq,pbo,_bo,bbo,hp,ise,Fbo,vbo,rq,Tbo,Mbo,Ebo,up,dse,Cbo,wbo,tq,Abo,ybo,Lbo,pp,cse,xbo,$bo,aq,kbo,Sbo,Rbo,_p,mse,Bbo,Pbo,nq,Ibo,qbo,Nbo,bp,fse,jbo,Dbo,sq,Gbo,Obo,Vbo,Fp,gse,Xbo,zbo,lq,Qbo,Wbo,Hbo,vp,hse,Ubo,Jbo,iq,Ybo,Kbo,Zbo,Tp,use,e2o,o2o,dq,r2o,t2o,a2o,Mp,pse,n2o,s2o,cq,l2o,i2o,d2o,Ep,_se,c2o,m2o,mq,f2o,g2o,h2o,Cp,bse,u2o,p2o,fq,_2o,b2o,F2o,wp,Fse,v2o,T2o,gq,M2o,E2o,C2o,Ap,vse,w2o,A2o,hq,y2o,L2o,x2o,yp,Tse,$2o,k2o,uq,S2o,R2o,B2o,Lp,P2o,Mse,I2o,q2o,Ese,N2o,j2o,xp,MPe,Ci,$p,Cse,Fy,D2o,wse,G2o,EPe,xo,vy,O2o,wi,V2o,pq,X2o,z2o,_q,Q2o,W2o,H2o,Ty,U2o,Ase,J2o,Y2o,K2o,rt,My,Z2o,yse,eFo,oFo,Ai,rFo,Lse,tFo,aFo,bq,nFo,sFo,lFo,kp,iFo,Ue,Ey,dFo,xse,cFo,mFo,ya,fFo,$se,gFo,hFo,kse,uFo,pFo,Sse,_Fo,bFo,FFo,G,Sp,Rse,vFo,TFo,Fq,MFo,EFo,CFo,Rp,Bse,wFo,AFo,vq,yFo,LFo,xFo,Bp,Pse,$Fo,kFo,Tq,SFo,RFo,BFo,Pp,Ise,PFo,IFo,Mq,qFo,NFo,jFo,Ip,qse,DFo,GFo,Eq,OFo,VFo,XFo,qp,Nse,zFo,QFo,Cq,WFo,HFo,UFo,Np,jse,JFo,YFo,wq,KFo,ZFo,evo,jp,Dse,ovo,rvo,Aq,tvo,avo,nvo,Dp,Gse,svo,lvo,yq,ivo,dvo,cvo,Gp,Ose,mvo,fvo,Lq,gvo,hvo,uvo,Op,Vse,pvo,_vo,xq,bvo,Fvo,vvo,Vp,Xse,Tvo,Mvo,$q,Evo,Cvo,wvo,Xp,zse,Avo,yvo,kq,Lvo,xvo,$vo,zp,Qse,kvo,Svo,Sq,Rvo,Bvo,Pvo,Qp,Wse,Ivo,qvo,Rq,Nvo,jvo,Dvo,Wp,Hse,Gvo,Ovo,Bq,Vvo,Xvo,zvo,Hp,Use,Qvo,Wvo,Pq,Hvo,Uvo,Jvo,Up,Jse,Yvo,Kvo,Iq,Zvo,e1o,o1o,Jp,Yse,r1o,t1o,qq,a1o,n1o,s1o,Yp,Kse,l1o,i1o,Nq,d1o,c1o,m1o,Kp,Zse,f1o,g1o,jq,h1o,u1o,p1o,Zp,ele,_1o,b1o,Dq,F1o,v1o,T1o,e_,ole,M1o,E1o,Gq,C1o,w1o,A1o,o_,rle,y1o,L1o,Oq,x1o,$1o,k1o,r_,tle,S1o,R1o,Vq,B1o,P1o,I1o,t_,ale,q1o,N1o,Xq,j1o,D1o,G1o,a_,nle,O1o,V1o,zq,X1o,z1o,Q1o,n_,sle,W1o,H1o,Qq,U1o,J1o,Y1o,s_,lle,K1o,Z1o,Wq,eTo,oTo,rTo,l_,ile,tTo,aTo,Hq,nTo,sTo,lTo,i_,dle,iTo,dTo,Uq,cTo,mTo,fTo,d_,cle,gTo,hTo,Jq,uTo,pTo,_To,c_,mle,bTo,FTo,Yq,vTo,TTo,MTo,m_,fle,ETo,CTo,Kq,wTo,ATo,yTo,f_,gle,LTo,xTo,Zq,$To,kTo,STo,g_,hle,RTo,BTo,eN,PTo,ITo,qTo,h_,ule,NTo,jTo,oN,DTo,GTo,OTo,u_,ple,VTo,XTo,rN,zTo,QTo,WTo,p_,_le,HTo,UTo,tN,JTo,YTo,KTo,__,ZTo,ble,eMo,oMo,Fle,rMo,tMo,b_,CPe,yi,F_,vle,Cy,aMo,Tle,nMo,wPe,$o,wy,sMo,Li,lMo,aN,iMo,dMo,nN,cMo,mMo,fMo,Ay,gMo,Mle,hMo,uMo,pMo,tt,yy,_Mo,Ele,bMo,FMo,xi,vMo,Cle,TMo,MMo,sN,EMo,CMo,wMo,v_,AMo,Je,Ly,yMo,wle,LMo,xMo,La,$Mo,Ale,kMo,SMo,yle,RMo,BMo,Lle,PMo,IMo,qMo,z,T_,xle,NMo,jMo,lN,DMo,GMo,OMo,M_,$le,VMo,XMo,iN,zMo,QMo,WMo,E_,kle,HMo,UMo,dN,JMo,YMo,KMo,C_,Sle,ZMo,e4o,cN,o4o,r4o,t4o,w_,Rle,a4o,n4o,mN,s4o,l4o,i4o,A_,Ble,d4o,c4o,fN,m4o,f4o,g4o,y_,Ple,h4o,u4o,gN,p4o,_4o,b4o,L_,Ile,F4o,v4o,hN,T4o,M4o,E4o,x_,qle,C4o,w4o,uN,A4o,y4o,L4o,$_,Nle,x4o,$4o,pN,k4o,S4o,R4o,k_,jle,B4o,P4o,_N,I4o,q4o,N4o,S_,Dle,j4o,D4o,bN,G4o,O4o,V4o,R_,Gle,X4o,z4o,FN,Q4o,W4o,H4o,B_,Ole,U4o,J4o,vN,Y4o,K4o,Z4o,P_,Vle,eEo,oEo,TN,rEo,tEo,aEo,I_,Xle,nEo,sEo,MN,lEo,iEo,dEo,q_,zle,cEo,mEo,EN,fEo,gEo,hEo,N_,Qle,uEo,pEo,CN,_Eo,bEo,FEo,j_,Wle,vEo,TEo,wN,MEo,EEo,CEo,D_,Hle,wEo,AEo,AN,yEo,LEo,xEo,G_,Ule,$Eo,kEo,yN,SEo,REo,BEo,O_,Jle,PEo,IEo,LN,qEo,NEo,jEo,V_,Yle,DEo,GEo,xN,OEo,VEo,XEo,X_,Kle,zEo,QEo,$N,WEo,HEo,UEo,z_,Zle,JEo,YEo,kN,KEo,ZEo,e5o,Q_,eie,o5o,r5o,SN,t5o,a5o,n5o,W_,oie,s5o,l5o,RN,i5o,d5o,c5o,H_,rie,m5o,f5o,BN,g5o,h5o,u5o,U_,tie,p5o,_5o,PN,b5o,F5o,v5o,J_,aie,T5o,M5o,IN,E5o,C5o,w5o,Y_,nie,A5o,y5o,qN,L5o,x5o,$5o,K_,sie,k5o,S5o,NN,R5o,B5o,P5o,Z_,lie,I5o,q5o,jN,N5o,j5o,D5o,eb,iie,G5o,O5o,DN,V5o,X5o,z5o,ob,die,Q5o,W5o,GN,H5o,U5o,J5o,rb,Y5o,cie,K5o,Z5o,mie,eCo,oCo,tb,APe,$i,ab,fie,xy,rCo,gie,tCo,yPe,ko,$y,aCo,ki,nCo,ON,sCo,lCo,VN,iCo,dCo,cCo,ky,mCo,hie,fCo,gCo,hCo,at,Sy,uCo,uie,pCo,_Co,Si,bCo,pie,FCo,vCo,XN,TCo,MCo,ECo,nb,CCo,Ye,Ry,wCo,_ie,ACo,yCo,xa,LCo,bie,xCo,$Co,Fie,kCo,SCo,vie,RCo,BCo,PCo,Q,sb,Tie,ICo,qCo,zN,NCo,jCo,DCo,lb,Mie,GCo,OCo,QN,VCo,XCo,zCo,ib,Eie,QCo,WCo,WN,HCo,UCo,JCo,db,Cie,YCo,KCo,HN,ZCo,e3o,o3o,cb,wie,r3o,t3o,UN,a3o,n3o,s3o,mb,Aie,l3o,i3o,JN,d3o,c3o,m3o,fb,yie,f3o,g3o,YN,h3o,u3o,p3o,gb,Lie,_3o,b3o,KN,F3o,v3o,T3o,hb,xie,M3o,E3o,ZN,C3o,w3o,A3o,ub,$ie,y3o,L3o,ej,x3o,$3o,k3o,pb,kie,S3o,R3o,oj,B3o,P3o,I3o,_b,Sie,q3o,N3o,rj,j3o,D3o,G3o,bb,Rie,O3o,V3o,tj,X3o,z3o,Q3o,Fb,Bie,W3o,H3o,aj,U3o,J3o,Y3o,vb,Pie,K3o,Z3o,nj,ewo,owo,rwo,Tb,Iie,two,awo,sj,nwo,swo,lwo,Mb,qie,iwo,dwo,lj,cwo,mwo,fwo,Eb,Nie,gwo,hwo,ij,uwo,pwo,_wo,Cb,jie,bwo,Fwo,dj,vwo,Two,Mwo,wb,Die,Ewo,Cwo,cj,wwo,Awo,ywo,Ab,Gie,Lwo,xwo,mj,$wo,kwo,Swo,yb,Oie,Rwo,Bwo,fj,Pwo,Iwo,qwo,Lb,Vie,Nwo,jwo,gj,Dwo,Gwo,Owo,xb,Xie,Vwo,Xwo,hj,zwo,Qwo,Wwo,$b,zie,Hwo,Uwo,uj,Jwo,Ywo,Kwo,kb,Qie,Zwo,eAo,pj,oAo,rAo,tAo,Sb,Wie,aAo,nAo,_j,sAo,lAo,iAo,Rb,Hie,dAo,cAo,bj,mAo,fAo,gAo,Bb,Uie,hAo,uAo,Fj,pAo,_Ao,bAo,Pb,Jie,FAo,vAo,vj,TAo,MAo,EAo,Ib,Yie,CAo,wAo,Kie,AAo,yAo,LAo,qb,Zie,xAo,$Ao,Tj,kAo,SAo,RAo,Nb,ede,BAo,PAo,Mj,IAo,qAo,NAo,jb,ode,jAo,DAo,Ej,GAo,OAo,VAo,Db,rde,XAo,zAo,Cj,QAo,WAo,HAo,Gb,UAo,tde,JAo,YAo,ade,KAo,ZAo,Ob,LPe,Ri,Vb,nde,By,e0o,sde,o0o,xPe,So,Py,r0o,Bi,t0o,wj,a0o,n0o,Aj,s0o,l0o,i0o,Iy,d0o,lde,c0o,m0o,f0o,nt,qy,g0o,ide,h0o,u0o,Pi,p0o,dde,_0o,b0o,yj,F0o,v0o,T0o,Xb,M0o,Ke,Ny,E0o,cde,C0o,w0o,$a,A0o,mde,y0o,L0o,fde,x0o,$0o,gde,k0o,S0o,R0o,he,zb,hde,B0o,P0o,Lj,I0o,q0o,N0o,Qb,ude,j0o,D0o,xj,G0o,O0o,V0o,Wb,pde,X0o,z0o,$j,Q0o,W0o,H0o,Hb,_de,U0o,J0o,kj,Y0o,K0o,Z0o,Ub,bde,e6o,o6o,Sj,r6o,t6o,a6o,Jb,Fde,n6o,s6o,Rj,l6o,i6o,d6o,Yb,vde,c6o,m6o,Bj,f6o,g6o,h6o,Kb,Tde,u6o,p6o,Pj,_6o,b6o,F6o,Zb,Mde,v6o,T6o,Ij,M6o,E6o,C6o,e2,Ede,w6o,A6o,qj,y6o,L6o,x6o,o2,Cde,$6o,k6o,Nj,S6o,R6o,B6o,r2,wde,P6o,I6o,jj,q6o,N6o,j6o,t2,Ade,D6o,G6o,Dj,O6o,V6o,X6o,a2,yde,z6o,Q6o,Gj,W6o,H6o,U6o,n2,Lde,J6o,Y6o,Oj,K6o,Z6o,eyo,s2,xde,oyo,ryo,Vj,tyo,ayo,nyo,l2,$de,syo,lyo,Xj,iyo,dyo,cyo,i2,myo,kde,fyo,gyo,Sde,hyo,uyo,d2,$Pe,Ii,c2,Rde,jy,pyo,Bde,_yo,kPe,Ro,Dy,byo,qi,Fyo,zj,vyo,Tyo,Qj,Myo,Eyo,Cyo,Gy,wyo,Pde,Ayo,yyo,Lyo,st,Oy,xyo,Ide,$yo,kyo,Ni,Syo,qde,Ryo,Byo,Wj,Pyo,Iyo,qyo,m2,Nyo,Ze,Vy,jyo,Nde,Dyo,Gyo,ka,Oyo,jde,Vyo,Xyo,Dde,zyo,Qyo,Gde,Wyo,Hyo,Uyo,q,f2,Ode,Jyo,Yyo,Hj,Kyo,Zyo,eLo,g2,Vde,oLo,rLo,Uj,tLo,aLo,nLo,h2,Xde,sLo,lLo,Jj,iLo,dLo,cLo,u2,zde,mLo,fLo,Yj,gLo,hLo,uLo,p2,Qde,pLo,_Lo,Kj,bLo,FLo,vLo,_2,Wde,TLo,MLo,Zj,ELo,CLo,wLo,b2,Hde,ALo,yLo,eD,LLo,xLo,$Lo,F2,Ude,kLo,SLo,oD,RLo,BLo,PLo,v2,Jde,ILo,qLo,rD,NLo,jLo,DLo,T2,Yde,GLo,OLo,tD,VLo,XLo,zLo,M2,Kde,QLo,WLo,aD,HLo,ULo,JLo,E2,Zde,YLo,KLo,nD,ZLo,e8o,o8o,C2,ece,r8o,t8o,sD,a8o,n8o,s8o,w2,oce,l8o,i8o,lD,d8o,c8o,m8o,A2,rce,f8o,g8o,iD,h8o,u8o,p8o,y2,tce,_8o,b8o,dD,F8o,v8o,T8o,L2,ace,M8o,E8o,cD,C8o,w8o,A8o,x2,nce,y8o,L8o,mD,x8o,$8o,k8o,$2,sce,S8o,R8o,fD,B8o,P8o,I8o,k2,lce,q8o,N8o,gD,j8o,D8o,G8o,S2,ice,O8o,V8o,hD,X8o,z8o,Q8o,R2,dce,W8o,H8o,uD,U8o,J8o,Y8o,B2,cce,K8o,Z8o,pD,exo,oxo,rxo,P2,mce,txo,axo,_D,nxo,sxo,lxo,I2,fce,ixo,dxo,bD,cxo,mxo,fxo,q2,gce,gxo,hxo,FD,uxo,pxo,_xo,N2,hce,bxo,Fxo,vD,vxo,Txo,Mxo,j2,uce,Exo,Cxo,TD,wxo,Axo,yxo,D2,pce,Lxo,xxo,MD,$xo,kxo,Sxo,G2,_ce,Rxo,Bxo,ED,Pxo,Ixo,qxo,O2,bce,Nxo,jxo,CD,Dxo,Gxo,Oxo,V2,Fce,Vxo,Xxo,wD,zxo,Qxo,Wxo,X2,vce,Hxo,Uxo,AD,Jxo,Yxo,Kxo,z2,Tce,Zxo,e7o,yD,o7o,r7o,t7o,Q2,Mce,a7o,n7o,LD,s7o,l7o,i7o,W2,Ece,d7o,c7o,xD,m7o,f7o,g7o,H2,Cce,h7o,u7o,$D,p7o,_7o,b7o,U2,wce,F7o,v7o,kD,T7o,M7o,E7o,J2,Ace,C7o,w7o,SD,A7o,y7o,L7o,Y2,yce,x7o,$7o,RD,k7o,S7o,R7o,K2,Lce,B7o,P7o,BD,I7o,q7o,N7o,Z2,xce,j7o,D7o,PD,G7o,O7o,V7o,eF,$ce,X7o,z7o,ID,Q7o,W7o,H7o,oF,kce,U7o,J7o,qD,Y7o,K7o,Z7o,rF,Sce,e9o,o9o,ND,r9o,t9o,a9o,tF,Rce,n9o,s9o,jD,l9o,i9o,d9o,aF,Bce,c9o,m9o,DD,f9o,g9o,h9o,nF,u9o,Pce,p9o,_9o,Ice,b9o,F9o,sF,SPe,ji,lF,qce,Xy,v9o,Nce,T9o,RPe,Bo,zy,M9o,Di,E9o,GD,C9o,w9o,OD,A9o,y9o,L9o,Qy,x9o,jce,$9o,k9o,S9o,lt,Wy,R9o,Dce,B9o,P9o,Gi,I9o,Gce,q9o,N9o,VD,j9o,D9o,G9o,iF,O9o,eo,Hy,V9o,Oce,X9o,z9o,Sa,Q9o,Vce,W9o,H9o,Xce,U9o,J9o,zce,Y9o,K9o,Z9o,Y,dF,Qce,e$o,o$o,XD,r$o,t$o,a$o,cF,Wce,n$o,s$o,zD,l$o,i$o,d$o,mF,Hce,c$o,m$o,QD,f$o,g$o,h$o,fF,Uce,u$o,p$o,WD,_$o,b$o,F$o,gF,Jce,v$o,T$o,HD,M$o,E$o,C$o,hF,Yce,w$o,A$o,UD,y$o,L$o,x$o,uF,Kce,$$o,k$o,JD,S$o,R$o,B$o,pF,Zce,P$o,I$o,YD,q$o,N$o,j$o,_F,eme,D$o,G$o,KD,O$o,V$o,X$o,bF,ome,z$o,Q$o,ZD,W$o,H$o,U$o,FF,rme,J$o,Y$o,eG,K$o,Z$o,eko,vF,tme,oko,rko,oG,tko,ako,nko,TF,ame,sko,lko,rG,iko,dko,cko,MF,nme,mko,fko,tG,gko,hko,uko,EF,sme,pko,_ko,aG,bko,Fko,vko,CF,lme,Tko,Mko,nG,Eko,Cko,wko,wF,ime,Ako,yko,sG,Lko,xko,$ko,AF,dme,kko,Sko,lG,Rko,Bko,Pko,yF,cme,Iko,qko,iG,Nko,jko,Dko,LF,mme,Gko,Oko,dG,Vko,Xko,zko,xF,fme,Qko,Wko,cG,Hko,Uko,Jko,$F,gme,Yko,Kko,mG,Zko,eSo,oSo,kF,hme,rSo,tSo,fG,aSo,nSo,sSo,SF,ume,lSo,iSo,gG,dSo,cSo,mSo,RF,pme,fSo,gSo,hG,hSo,uSo,pSo,BF,_me,_So,bSo,uG,FSo,vSo,TSo,PF,bme,MSo,ESo,pG,CSo,wSo,ASo,IF,Fme,ySo,LSo,_G,xSo,$So,kSo,qF,vme,SSo,RSo,bG,BSo,PSo,ISo,NF,qSo,Tme,NSo,jSo,Mme,DSo,GSo,jF,BPe,Oi,DF,Eme,Uy,OSo,Cme,VSo,PPe,Po,Jy,XSo,Vi,zSo,FG,QSo,WSo,vG,HSo,USo,JSo,Yy,YSo,wme,KSo,ZSo,eRo,it,Ky,oRo,Ame,rRo,tRo,Xi,aRo,yme,nRo,sRo,TG,lRo,iRo,dRo,GF,cRo,oo,Zy,mRo,Lme,fRo,gRo,Ra,hRo,xme,uRo,pRo,$me,_Ro,bRo,kme,FRo,vRo,TRo,Yr,OF,Sme,MRo,ERo,MG,CRo,wRo,ARo,VF,Rme,yRo,LRo,EG,xRo,$Ro,kRo,XF,Bme,SRo,RRo,CG,BRo,PRo,IRo,zF,Pme,qRo,NRo,wG,jRo,DRo,GRo,QF,Ime,ORo,VRo,AG,XRo,zRo,QRo,WF,WRo,qme,HRo,URo,Nme,JRo,YRo,HF,IPe,zi,UF,jme,eL,KRo,Dme,ZRo,qPe,Io,oL,eBo,Qi,oBo,yG,rBo,tBo,LG,aBo,nBo,sBo,rL,lBo,Gme,iBo,dBo,cBo,dt,tL,mBo,Ome,fBo,gBo,Wi,hBo,Vme,uBo,pBo,xG,_Bo,bBo,FBo,JF,vBo,ro,aL,TBo,Xme,MBo,EBo,Ba,CBo,zme,wBo,ABo,Qme,yBo,LBo,Wme,xBo,$Bo,kBo,U,YF,Hme,SBo,RBo,$G,BBo,PBo,IBo,KF,Ume,qBo,NBo,kG,jBo,DBo,GBo,ZF,Jme,OBo,VBo,SG,XBo,zBo,QBo,ev,Yme,WBo,HBo,RG,UBo,JBo,YBo,ov,Kme,KBo,ZBo,BG,ePo,oPo,rPo,rv,Zme,tPo,aPo,PG,nPo,sPo,lPo,tv,efe,iPo,dPo,IG,cPo,mPo,fPo,av,ofe,gPo,hPo,qG,uPo,pPo,_Po,nv,rfe,bPo,FPo,NG,vPo,TPo,MPo,sv,tfe,EPo,CPo,jG,wPo,APo,yPo,lv,afe,LPo,xPo,DG,$Po,kPo,SPo,iv,nfe,RPo,BPo,GG,PPo,IPo,qPo,dv,sfe,NPo,jPo,OG,DPo,GPo,OPo,cv,lfe,VPo,XPo,VG,zPo,QPo,WPo,mv,ife,HPo,UPo,XG,JPo,YPo,KPo,fv,dfe,ZPo,eIo,zG,oIo,rIo,tIo,gv,cfe,aIo,nIo,QG,sIo,lIo,iIo,hv,mfe,dIo,cIo,WG,mIo,fIo,gIo,uv,ffe,hIo,uIo,HG,pIo,_Io,bIo,pv,gfe,FIo,vIo,UG,TIo,MIo,EIo,_v,hfe,CIo,wIo,JG,AIo,yIo,LIo,bv,ufe,xIo,$Io,YG,kIo,SIo,RIo,Fv,pfe,BIo,PIo,KG,IIo,qIo,NIo,vv,_fe,jIo,DIo,ZG,GIo,OIo,VIo,Tv,bfe,XIo,zIo,eO,QIo,WIo,HIo,Mv,Ffe,UIo,JIo,oO,YIo,KIo,ZIo,Ev,vfe,eqo,oqo,rO,rqo,tqo,aqo,Cv,Tfe,nqo,sqo,tO,lqo,iqo,dqo,wv,Mfe,cqo,mqo,aO,fqo,gqo,hqo,Av,Efe,uqo,pqo,nO,_qo,bqo,Fqo,yv,Cfe,vqo,Tqo,sO,Mqo,Eqo,Cqo,Lv,wfe,wqo,Aqo,lO,yqo,Lqo,xqo,xv,Afe,$qo,kqo,iO,Sqo,Rqo,Bqo,$v,Pqo,yfe,Iqo,qqo,Lfe,Nqo,jqo,kv,NPe,Hi,Sv,xfe,nL,Dqo,$fe,Gqo,jPe,qo,sL,Oqo,Ui,Vqo,dO,Xqo,zqo,cO,Qqo,Wqo,Hqo,lL,Uqo,kfe,Jqo,Yqo,Kqo,ct,iL,Zqo,Sfe,eNo,oNo,Ji,rNo,Rfe,tNo,aNo,mO,nNo,sNo,lNo,Rv,iNo,to,dL,dNo,Bfe,cNo,mNo,Pa,fNo,Pfe,gNo,hNo,Ife,uNo,pNo,qfe,_No,bNo,FNo,O,Bv,Nfe,vNo,TNo,fO,MNo,ENo,CNo,Pv,jfe,wNo,ANo,gO,yNo,LNo,xNo,Iv,Dfe,$No,kNo,hO,SNo,RNo,BNo,qv,Gfe,PNo,INo,uO,qNo,NNo,jNo,Nv,Ofe,DNo,GNo,pO,ONo,VNo,XNo,jv,Vfe,zNo,QNo,_O,WNo,HNo,UNo,Dv,Xfe,JNo,YNo,bO,KNo,ZNo,ejo,Gv,zfe,ojo,rjo,FO,tjo,ajo,njo,Ov,Qfe,sjo,ljo,vO,ijo,djo,cjo,Vv,Wfe,mjo,fjo,TO,gjo,hjo,ujo,Xv,Hfe,pjo,_jo,MO,bjo,Fjo,vjo,zv,Ufe,Tjo,Mjo,EO,Ejo,Cjo,wjo,Qv,Jfe,Ajo,yjo,CO,Ljo,xjo,$jo,Wv,Yfe,kjo,Sjo,wO,Rjo,Bjo,Pjo,Hv,Kfe,Ijo,qjo,AO,Njo,jjo,Djo,Uv,Zfe,Gjo,Ojo,yO,Vjo,Xjo,zjo,Jv,ege,Qjo,Wjo,LO,Hjo,Ujo,Jjo,Yv,oge,Yjo,Kjo,xO,Zjo,eDo,oDo,Kv,rge,rDo,tDo,$O,aDo,nDo,sDo,Zv,tge,lDo,iDo,kO,dDo,cDo,mDo,e1,age,fDo,gDo,SO,hDo,uDo,pDo,o1,nge,_Do,bDo,RO,FDo,vDo,TDo,r1,sge,MDo,EDo,BO,CDo,wDo,ADo,t1,lge,yDo,LDo,PO,xDo,$Do,kDo,a1,ige,SDo,RDo,IO,BDo,PDo,IDo,n1,dge,qDo,NDo,qO,jDo,DDo,GDo,s1,cge,ODo,VDo,NO,XDo,zDo,QDo,l1,mge,WDo,HDo,jO,UDo,JDo,YDo,i1,fge,KDo,ZDo,DO,eGo,oGo,rGo,d1,gge,tGo,aGo,GO,nGo,sGo,lGo,c1,hge,iGo,dGo,OO,cGo,mGo,fGo,m1,uge,gGo,hGo,VO,uGo,pGo,_Go,f1,pge,bGo,FGo,XO,vGo,TGo,MGo,g1,_ge,EGo,CGo,zO,wGo,AGo,yGo,h1,bge,LGo,xGo,QO,$Go,kGo,SGo,u1,Fge,RGo,BGo,WO,PGo,IGo,qGo,p1,vge,NGo,jGo,HO,DGo,GGo,OGo,_1,Tge,VGo,XGo,UO,zGo,QGo,WGo,b1,Mge,HGo,UGo,JO,JGo,YGo,KGo,F1,ZGo,Ege,eOo,oOo,Cge,rOo,tOo,v1,DPe,Yi,T1,wge,cL,aOo,Age,nOo,GPe,No,mL,sOo,Ki,lOo,YO,iOo,dOo,KO,cOo,mOo,fOo,fL,gOo,yge,hOo,uOo,pOo,mt,gL,_Oo,Lge,bOo,FOo,Zi,vOo,xge,TOo,MOo,ZO,EOo,COo,wOo,M1,AOo,ao,hL,yOo,$ge,LOo,xOo,Ia,$Oo,kge,kOo,SOo,Sge,ROo,BOo,Rge,POo,IOo,qOo,Bge,E1,Pge,NOo,jOo,eV,DOo,GOo,OOo,C1,VOo,Ige,XOo,zOo,qge,QOo,WOo,w1,OPe,ed,A1,Nge,uL,HOo,jge,UOo,VPe,jo,pL,JOo,od,YOo,oV,KOo,ZOo,rV,eVo,oVo,rVo,_L,tVo,Dge,aVo,nVo,sVo,ft,bL,lVo,Gge,iVo,dVo,rd,cVo,Oge,mVo,fVo,tV,gVo,hVo,uVo,y1,pVo,no,FL,_Vo,Vge,bVo,FVo,qa,vVo,Xge,TVo,MVo,zge,EVo,CVo,Qge,wVo,AVo,yVo,Fe,L1,Wge,LVo,xVo,aV,$Vo,kVo,SVo,x1,Hge,RVo,BVo,nV,PVo,IVo,qVo,$1,Uge,NVo,jVo,sV,DVo,GVo,OVo,Rs,Jge,VVo,XVo,lV,zVo,QVo,iV,WVo,HVo,UVo,k1,Yge,JVo,YVo,dV,KVo,ZVo,eXo,gt,Kge,oXo,rXo,cV,tXo,aXo,mV,nXo,sXo,fV,lXo,iXo,dXo,S1,Zge,cXo,mXo,gV,fXo,gXo,hXo,R1,ehe,uXo,pXo,hV,_Xo,bXo,FXo,B1,ohe,vXo,TXo,uV,MXo,EXo,CXo,P1,rhe,wXo,AXo,pV,yXo,LXo,xXo,I1,the,$Xo,kXo,_V,SXo,RXo,BXo,q1,ahe,PXo,IXo,bV,qXo,NXo,jXo,N1,nhe,DXo,GXo,FV,OXo,VXo,XXo,j1,zXo,she,QXo,WXo,lhe,HXo,UXo,D1,XPe,td,G1,ihe,vL,JXo,dhe,YXo,zPe,Do,TL,KXo,ad,ZXo,vV,ezo,ozo,TV,rzo,tzo,azo,ML,nzo,che,szo,lzo,izo,ht,EL,dzo,mhe,czo,mzo,nd,fzo,fhe,gzo,hzo,MV,uzo,pzo,_zo,O1,bzo,so,CL,Fzo,ghe,vzo,Tzo,Na,Mzo,hhe,Ezo,Czo,uhe,wzo,Azo,phe,yzo,Lzo,xzo,_he,V1,bhe,$zo,kzo,EV,Szo,Rzo,Bzo,X1,Pzo,Fhe,Izo,qzo,vhe,Nzo,jzo,z1,QPe,sd,Q1,The,wL,Dzo,Mhe,Gzo,WPe,Go,AL,Ozo,ld,Vzo,CV,Xzo,zzo,wV,Qzo,Wzo,Hzo,yL,Uzo,Ehe,Jzo,Yzo,Kzo,ut,LL,Zzo,Che,eQo,oQo,id,rQo,whe,tQo,aQo,AV,nQo,sQo,lQo,W1,iQo,lo,xL,dQo,Ahe,cQo,mQo,ja,fQo,yhe,gQo,hQo,Lhe,uQo,pQo,xhe,_Qo,bQo,FQo,Ne,H1,$he,vQo,TQo,yV,MQo,EQo,CQo,U1,khe,wQo,AQo,LV,yQo,LQo,xQo,J1,She,$Qo,kQo,xV,SQo,RQo,BQo,Y1,Rhe,PQo,IQo,$V,qQo,NQo,jQo,K1,Bhe,DQo,GQo,kV,OQo,VQo,XQo,Z1,Phe,zQo,QQo,SV,WQo,HQo,UQo,eT,Ihe,JQo,YQo,RV,KQo,ZQo,eWo,oT,qhe,oWo,rWo,BV,tWo,aWo,nWo,rT,sWo,Nhe,lWo,iWo,jhe,dWo,cWo,tT,HPe,dd,aT,Dhe,$L,mWo,Ghe,fWo,UPe,Oo,kL,gWo,cd,hWo,PV,uWo,pWo,IV,_Wo,bWo,FWo,SL,vWo,Ohe,TWo,MWo,EWo,pt,RL,CWo,Vhe,wWo,AWo,md,yWo,Xhe,LWo,xWo,qV,$Wo,kWo,SWo,nT,RWo,io,BL,BWo,zhe,PWo,IWo,Da,qWo,Qhe,NWo,jWo,Whe,DWo,GWo,Hhe,OWo,VWo,XWo,Ga,sT,Uhe,zWo,QWo,NV,WWo,HWo,UWo,lT,Jhe,JWo,YWo,jV,KWo,ZWo,eHo,iT,Yhe,oHo,rHo,DV,tHo,aHo,nHo,dT,Khe,sHo,lHo,GV,iHo,dHo,cHo,cT,mHo,Zhe,fHo,gHo,eue,hHo,uHo,mT,JPe,fd,fT,oue,PL,pHo,rue,_Ho,YPe,Vo,IL,bHo,gd,FHo,OV,vHo,THo,VV,MHo,EHo,CHo,qL,wHo,tue,AHo,yHo,LHo,_t,NL,xHo,aue,$Ho,kHo,hd,SHo,nue,RHo,BHo,XV,PHo,IHo,qHo,gT,NHo,co,jL,jHo,sue,DHo,GHo,Oa,OHo,lue,VHo,XHo,iue,zHo,QHo,due,WHo,HHo,UHo,je,hT,cue,JHo,YHo,zV,KHo,ZHo,eUo,uT,mue,oUo,rUo,QV,tUo,aUo,nUo,pT,fue,sUo,lUo,WV,iUo,dUo,cUo,_T,gue,mUo,fUo,HV,gUo,hUo,uUo,bT,hue,pUo,_Uo,UV,bUo,FUo,vUo,FT,uue,TUo,MUo,JV,EUo,CUo,wUo,vT,pue,AUo,yUo,YV,LUo,xUo,$Uo,TT,_ue,kUo,SUo,KV,RUo,BUo,PUo,MT,IUo,bue,qUo,NUo,Fue,jUo,DUo,ET,KPe,ud,CT,vue,DL,GUo,Tue,OUo,ZPe,Xo,GL,VUo,pd,XUo,ZV,zUo,QUo,eX,WUo,HUo,UUo,OL,JUo,Mue,YUo,KUo,ZUo,bt,VL,eJo,Eue,oJo,rJo,_d,tJo,Cue,aJo,nJo,oX,sJo,lJo,iJo,wT,dJo,mo,XL,cJo,wue,mJo,fJo,Va,gJo,Aue,hJo,uJo,yue,pJo,_Jo,Lue,bJo,FJo,vJo,zL,AT,xue,TJo,MJo,rX,EJo,CJo,wJo,yT,$ue,AJo,yJo,tX,LJo,xJo,$Jo,LT,kJo,kue,SJo,RJo,Sue,BJo,PJo,xT,eIe,bd,$T,Rue,QL,IJo,Bue,qJo,oIe,zo,WL,NJo,Fd,jJo,aX,DJo,GJo,nX,OJo,VJo,XJo,HL,zJo,Pue,QJo,WJo,HJo,Ft,UL,UJo,Iue,JJo,YJo,vd,KJo,que,ZJo,eYo,sX,oYo,rYo,tYo,kT,aYo,fo,JL,nYo,Nue,sYo,lYo,Xa,iYo,jue,dYo,cYo,Due,mYo,fYo,Gue,gYo,hYo,uYo,za,ST,Oue,pYo,_Yo,lX,bYo,FYo,vYo,RT,Vue,TYo,MYo,iX,EYo,CYo,wYo,BT,Xue,AYo,yYo,dX,LYo,xYo,$Yo,PT,zue,kYo,SYo,cX,RYo,BYo,PYo,IT,IYo,Que,qYo,NYo,Wue,jYo,DYo,qT,rIe,Td,NT,Hue,YL,GYo,Uue,OYo,tIe,Qo,KL,VYo,Md,XYo,mX,zYo,QYo,fX,WYo,HYo,UYo,ZL,JYo,Jue,YYo,KYo,ZYo,vt,e8,eKo,Yue,oKo,rKo,Ed,tKo,Kue,aKo,nKo,gX,sKo,lKo,iKo,jT,dKo,go,o8,cKo,Zue,mKo,fKo,Qa,gKo,epe,hKo,uKo,ope,pKo,_Ko,rpe,bKo,FKo,vKo,Cd,DT,tpe,TKo,MKo,hX,EKo,CKo,wKo,GT,ape,AKo,yKo,uX,LKo,xKo,$Ko,OT,npe,kKo,SKo,pX,RKo,BKo,PKo,VT,IKo,spe,qKo,NKo,lpe,jKo,DKo,XT,aIe,wd,zT,ipe,r8,GKo,dpe,OKo,nIe,Wo,t8,VKo,Ad,XKo,_X,zKo,QKo,bX,WKo,HKo,UKo,a8,JKo,cpe,YKo,KKo,ZKo,Tt,n8,eZo,mpe,oZo,rZo,yd,tZo,fpe,aZo,nZo,FX,sZo,lZo,iZo,QT,dZo,ho,s8,cZo,gpe,mZo,fZo,Wa,gZo,hpe,hZo,uZo,upe,pZo,_Zo,ppe,bZo,FZo,vZo,l8,WT,_pe,TZo,MZo,vX,EZo,CZo,wZo,HT,bpe,AZo,yZo,TX,LZo,xZo,$Zo,UT,kZo,Fpe,SZo,RZo,vpe,BZo,PZo,JT,sIe,Ld,YT,Tpe,i8,IZo,Mpe,qZo,lIe,Ho,d8,NZo,xd,jZo,MX,DZo,GZo,EX,OZo,VZo,XZo,c8,zZo,Epe,QZo,WZo,HZo,Mt,m8,UZo,Cpe,JZo,YZo,$d,KZo,wpe,ZZo,eer,CX,oer,rer,ter,KT,aer,uo,f8,ner,Ape,ser,ler,Ha,ier,ype,der,cer,Lpe,mer,fer,xpe,ger,her,uer,$pe,ZT,kpe,per,_er,wX,ber,Fer,ver,eM,Ter,Spe,Mer,Eer,Rpe,Cer,wer,oM,iIe,kd,rM,Bpe,g8,Aer,Ppe,yer,dIe,Uo,h8,Ler,Sd,xer,AX,$er,ker,yX,Ser,Rer,Ber,u8,Per,Ipe,Ier,qer,Ner,Et,p8,jer,qpe,Der,Ger,Rd,Oer,Npe,Ver,Xer,LX,zer,Qer,Wer,tM,Her,po,_8,Uer,jpe,Jer,Yer,Ua,Ker,Dpe,Zer,eor,Gpe,oor,ror,Ope,tor,aor,nor,Ja,aM,Vpe,sor,lor,xX,ior,dor,cor,nM,Xpe,mor,gor,$X,hor,uor,por,sM,zpe,_or,bor,kX,For,vor,Tor,lM,Qpe,Mor,Eor,SX,Cor,wor,Aor,iM,yor,Wpe,Lor,xor,Hpe,$or,kor,dM,cIe,Bd,cM,Upe,b8,Sor,Jpe,Ror,mIe,Jo,F8,Bor,Pd,Por,RX,Ior,qor,BX,Nor,jor,Dor,v8,Gor,Ype,Oor,Vor,Xor,Ct,T8,zor,Kpe,Qor,Wor,Id,Hor,Zpe,Uor,Jor,PX,Yor,Kor,Zor,mM,err,_o,M8,orr,e_e,rrr,trr,Ya,arr,o_e,nrr,srr,r_e,lrr,irr,t_e,drr,crr,mrr,a_e,fM,n_e,frr,grr,IX,hrr,urr,prr,gM,_rr,s_e,brr,Frr,l_e,vrr,Trr,hM,fIe,qd,uM,i_e,E8,Mrr,d_e,Err,gIe,Yo,C8,Crr,Nd,wrr,qX,Arr,yrr,NX,Lrr,xrr,$rr,w8,krr,c_e,Srr,Rrr,Brr,wt,A8,Prr,m_e,Irr,qrr,jd,Nrr,f_e,jrr,Drr,jX,Grr,Orr,Vrr,pM,Xrr,wr,y8,zrr,g_e,Qrr,Wrr,Ka,Hrr,h_e,Urr,Jrr,u_e,Yrr,Krr,p_e,Zrr,etr,otr,j,_M,__e,rtr,ttr,DX,atr,ntr,str,bM,b_e,ltr,itr,GX,dtr,ctr,mtr,FM,F_e,ftr,gtr,OX,htr,utr,ptr,vM,v_e,_tr,btr,VX,Ftr,vtr,Ttr,TM,T_e,Mtr,Etr,XX,Ctr,wtr,Atr,MM,M_e,ytr,Ltr,zX,xtr,$tr,ktr,EM,E_e,Str,Rtr,QX,Btr,Ptr,Itr,CM,C_e,qtr,Ntr,WX,jtr,Dtr,Gtr,wM,w_e,Otr,Vtr,HX,Xtr,ztr,Qtr,AM,A_e,Wtr,Htr,UX,Utr,Jtr,Ytr,yM,y_e,Ktr,Ztr,JX,ear,oar,rar,LM,L_e,tar,aar,YX,nar,sar,lar,xM,x_e,iar,dar,KX,car,mar,far,$M,$_e,gar,har,ZX,uar,par,_ar,kM,k_e,bar,Far,ez,Tar,Mar,Ear,SM,S_e,Car,war,oz,Aar,yar,Lar,RM,R_e,xar,$ar,rz,kar,Sar,Rar,Bs,B_e,Bar,Par,tz,Iar,qar,az,Nar,jar,Dar,BM,P_e,Gar,Oar,nz,Var,Xar,zar,PM,I_e,Qar,War,sz,Har,Uar,Jar,IM,q_e,Yar,Kar,lz,Zar,enr,onr,qM,N_e,rnr,tnr,iz,anr,nnr,snr,NM,j_e,lnr,inr,dz,dnr,cnr,mnr,jM,D_e,fnr,gnr,cz,hnr,unr,pnr,DM,G_e,_nr,bnr,mz,Fnr,vnr,Tnr,GM,O_e,Mnr,Enr,fz,Cnr,wnr,Anr,OM,V_e,ynr,Lnr,gz,xnr,$nr,knr,VM,X_e,Snr,Rnr,hz,Bnr,Pnr,Inr,XM,z_e,qnr,Nnr,uz,jnr,Dnr,Gnr,zM,Q_e,Onr,Vnr,pz,Xnr,znr,Qnr,QM,W_e,Wnr,Hnr,_z,Unr,Jnr,Ynr,WM,H_e,Knr,Znr,bz,esr,osr,rsr,HM,U_e,tsr,asr,Fz,nsr,ssr,lsr,UM,J_e,isr,dsr,vz,csr,msr,fsr,JM,Y_e,gsr,hsr,Tz,usr,psr,_sr,YM,K_e,bsr,Fsr,Mz,vsr,Tsr,Msr,KM,Z_e,Esr,Csr,Ez,wsr,Asr,ysr,ZM,ebe,Lsr,xsr,Cz,$sr,ksr,Ssr,e4,obe,Rsr,Bsr,wz,Psr,Isr,qsr,o4,rbe,Nsr,jsr,Az,Dsr,Gsr,Osr,r4,tbe,Vsr,Xsr,yz,zsr,Qsr,Wsr,t4,abe,Hsr,Usr,Lz,Jsr,Ysr,Ksr,a4,nbe,Zsr,elr,xz,olr,rlr,tlr,n4,sbe,alr,nlr,$z,slr,llr,ilr,s4,lbe,dlr,clr,kz,mlr,flr,glr,l4,hIe,Dd,i4,ibe,L8,hlr,dbe,ulr,uIe,Ko,x8,plr,Gd,_lr,Sz,blr,Flr,Rz,vlr,Tlr,Mlr,$8,Elr,cbe,Clr,wlr,Alr,At,k8,ylr,mbe,Llr,xlr,Od,$lr,fbe,klr,Slr,Bz,Rlr,Blr,Plr,d4,Ilr,Ar,S8,qlr,gbe,Nlr,jlr,Za,Dlr,hbe,Glr,Olr,ube,Vlr,Xlr,pbe,zlr,Qlr,Wlr,ne,c4,_be,Hlr,Ulr,Pz,Jlr,Ylr,Klr,m4,bbe,Zlr,eir,Iz,oir,rir,tir,f4,Fbe,air,nir,qz,sir,lir,iir,g4,vbe,dir,cir,Nz,mir,fir,gir,h4,Tbe,hir,uir,jz,pir,_ir,bir,u4,Mbe,Fir,vir,Dz,Tir,Mir,Eir,p4,Ebe,Cir,wir,Gz,Air,yir,Lir,_4,Cbe,xir,$ir,Oz,kir,Sir,Rir,b4,wbe,Bir,Pir,Vz,Iir,qir,Nir,F4,Abe,jir,Dir,Xz,Gir,Oir,Vir,v4,ybe,Xir,zir,zz,Qir,Wir,Hir,T4,Lbe,Uir,Jir,Qz,Yir,Kir,Zir,M4,xbe,edr,odr,Wz,rdr,tdr,adr,E4,$be,ndr,sdr,Hz,ldr,idr,ddr,C4,kbe,cdr,mdr,Uz,fdr,gdr,hdr,w4,Sbe,udr,pdr,Jz,_dr,bdr,Fdr,A4,Rbe,vdr,Tdr,Yz,Mdr,Edr,Cdr,y4,Bbe,wdr,Adr,Kz,ydr,Ldr,xdr,L4,Pbe,$dr,kdr,Zz,Sdr,Rdr,Bdr,x4,Ibe,Pdr,Idr,eQ,qdr,Ndr,jdr,$4,qbe,Ddr,Gdr,oQ,Odr,Vdr,Xdr,k4,Nbe,zdr,Qdr,rQ,Wdr,Hdr,Udr,S4,jbe,Jdr,Ydr,tQ,Kdr,Zdr,ecr,R4,pIe,Vd,B4,Dbe,R8,ocr,Gbe,rcr,_Ie,Zo,B8,tcr,Xd,acr,aQ,ncr,scr,nQ,lcr,icr,dcr,P8,ccr,Obe,mcr,fcr,gcr,yt,I8,hcr,Vbe,ucr,pcr,zd,_cr,Xbe,bcr,Fcr,sQ,vcr,Tcr,Mcr,P4,Ecr,yr,q8,Ccr,zbe,wcr,Acr,en,ycr,Qbe,Lcr,xcr,Wbe,$cr,kcr,Hbe,Scr,Rcr,Bcr,Te,I4,Ube,Pcr,Icr,lQ,qcr,Ncr,jcr,q4,Jbe,Dcr,Gcr,iQ,Ocr,Vcr,Xcr,N4,Ybe,zcr,Qcr,dQ,Wcr,Hcr,Ucr,j4,Kbe,Jcr,Ycr,cQ,Kcr,Zcr,emr,D4,Zbe,omr,rmr,mQ,tmr,amr,nmr,G4,e2e,smr,lmr,fQ,imr,dmr,cmr,O4,o2e,mmr,fmr,gQ,gmr,hmr,umr,V4,r2e,pmr,_mr,hQ,bmr,Fmr,vmr,X4,t2e,Tmr,Mmr,uQ,Emr,Cmr,wmr,z4,a2e,Amr,ymr,pQ,Lmr,xmr,$mr,Q4,n2e,kmr,Smr,_Q,Rmr,Bmr,Pmr,W4,s2e,Imr,qmr,bQ,Nmr,jmr,Dmr,H4,bIe,Qd,U4,l2e,N8,Gmr,i2e,Omr,FIe,er,j8,Vmr,Wd,Xmr,FQ,zmr,Qmr,vQ,Wmr,Hmr,Umr,D8,Jmr,d2e,Ymr,Kmr,Zmr,Lt,G8,efr,c2e,ofr,rfr,Hd,tfr,m2e,afr,nfr,TQ,sfr,lfr,ifr,J4,dfr,Lr,O8,cfr,f2e,mfr,ffr,on,gfr,g2e,hfr,ufr,h2e,pfr,_fr,u2e,bfr,Ffr,vfr,Ud,Y4,p2e,Tfr,Mfr,MQ,Efr,Cfr,wfr,K4,_2e,Afr,yfr,EQ,Lfr,xfr,$fr,Z4,b2e,kfr,Sfr,CQ,Rfr,Bfr,Pfr,eE,vIe,Jd,oE,F2e,V8,Ifr,v2e,qfr,TIe,or,X8,Nfr,Yd,jfr,wQ,Dfr,Gfr,AQ,Ofr,Vfr,Xfr,z8,zfr,T2e,Qfr,Wfr,Hfr,xt,Q8,Ufr,M2e,Jfr,Yfr,Kd,Kfr,E2e,Zfr,egr,yQ,ogr,rgr,tgr,rE,agr,xr,W8,ngr,C2e,sgr,lgr,rn,igr,w2e,dgr,cgr,A2e,mgr,fgr,y2e,ggr,hgr,ugr,ie,tE,L2e,pgr,_gr,LQ,bgr,Fgr,vgr,aE,x2e,Tgr,Mgr,xQ,Egr,Cgr,wgr,nE,$2e,Agr,ygr,$Q,Lgr,xgr,$gr,sE,k2e,kgr,Sgr,kQ,Rgr,Bgr,Pgr,lE,S2e,Igr,qgr,SQ,Ngr,jgr,Dgr,iE,R2e,Ggr,Ogr,RQ,Vgr,Xgr,zgr,dE,B2e,Qgr,Wgr,BQ,Hgr,Ugr,Jgr,cE,P2e,Ygr,Kgr,PQ,Zgr,ehr,ohr,mE,I2e,rhr,thr,IQ,ahr,nhr,shr,fE,q2e,lhr,ihr,qQ,dhr,chr,mhr,gE,N2e,fhr,ghr,NQ,hhr,uhr,phr,hE,j2e,_hr,bhr,jQ,Fhr,vhr,Thr,uE,D2e,Mhr,Ehr,DQ,Chr,whr,Ahr,pE,G2e,yhr,Lhr,GQ,xhr,$hr,khr,_E,O2e,Shr,Rhr,OQ,Bhr,Phr,Ihr,bE,V2e,qhr,Nhr,VQ,jhr,Dhr,Ghr,FE,X2e,Ohr,Vhr,XQ,Xhr,zhr,Qhr,vE,z2e,Whr,Hhr,zQ,Uhr,Jhr,Yhr,TE,Q2e,Khr,Zhr,QQ,eur,our,rur,ME,W2e,tur,aur,WQ,nur,sur,lur,EE,MIe,Zd,CE,H2e,H8,iur,U2e,dur,EIe,rr,U8,cur,ec,mur,HQ,fur,gur,UQ,hur,uur,pur,J8,_ur,J2e,bur,Fur,vur,$t,Y8,Tur,Y2e,Mur,Eur,oc,Cur,K2e,wur,Aur,JQ,yur,Lur,xur,wE,$ur,$r,K8,kur,Z2e,Sur,Rur,tn,Bur,eFe,Pur,Iur,oFe,qur,Nur,rFe,jur,Dur,Gur,ye,AE,tFe,Our,Vur,YQ,Xur,zur,Qur,yE,aFe,Wur,Hur,KQ,Uur,Jur,Yur,LE,nFe,Kur,Zur,ZQ,epr,opr,rpr,xE,sFe,tpr,apr,eW,npr,spr,lpr,$E,lFe,ipr,dpr,oW,cpr,mpr,fpr,kE,iFe,gpr,hpr,rW,upr,ppr,_pr,SE,dFe,bpr,Fpr,tW,vpr,Tpr,Mpr,RE,cFe,Epr,Cpr,aW,wpr,Apr,ypr,BE,mFe,Lpr,xpr,nW,$pr,kpr,Spr,PE,fFe,Rpr,Bpr,sW,Ppr,Ipr,qpr,IE,CIe,rc,qE,gFe,Z8,Npr,hFe,jpr,wIe,tr,ex,Dpr,tc,Gpr,lW,Opr,Vpr,iW,Xpr,zpr,Qpr,ox,Wpr,uFe,Hpr,Upr,Jpr,kt,rx,Ypr,pFe,Kpr,Zpr,ac,e_r,_Fe,o_r,r_r,dW,t_r,a_r,n_r,NE,s_r,kr,tx,l_r,bFe,i_r,d_r,an,c_r,FFe,m_r,f_r,vFe,g_r,h_r,TFe,u_r,p_r,__r,Z,jE,MFe,b_r,F_r,cW,v_r,T_r,M_r,DE,EFe,E_r,C_r,mW,w_r,A_r,y_r,GE,CFe,L_r,x_r,fW,$_r,k_r,S_r,OE,wFe,R_r,B_r,gW,P_r,I_r,q_r,VE,AFe,N_r,j_r,hW,D_r,G_r,O_r,XE,yFe,V_r,X_r,uW,z_r,Q_r,W_r,zE,LFe,H_r,U_r,pW,J_r,Y_r,K_r,QE,xFe,Z_r,ebr,_W,obr,rbr,tbr,WE,$Fe,abr,nbr,bW,sbr,lbr,ibr,HE,kFe,dbr,cbr,FW,mbr,fbr,gbr,UE,SFe,hbr,ubr,vW,pbr,_br,bbr,JE,RFe,Fbr,vbr,TW,Tbr,Mbr,Ebr,YE,BFe,Cbr,wbr,MW,Abr,ybr,Lbr,KE,PFe,xbr,$br,EW,kbr,Sbr,Rbr,ZE,IFe,Bbr,Pbr,CW,Ibr,qbr,Nbr,e5,qFe,jbr,Dbr,wW,Gbr,Obr,Vbr,o5,NFe,Xbr,zbr,AW,Qbr,Wbr,Hbr,r5,jFe,Ubr,Jbr,yW,Ybr,Kbr,Zbr,t5,DFe,e2r,o2r,LW,r2r,t2r,a2r,a5,GFe,n2r,s2r,xW,l2r,i2r,d2r,n5,OFe,c2r,m2r,$W,f2r,g2r,h2r,s5,VFe,u2r,p2r,kW,_2r,b2r,F2r,l5,XFe,v2r,T2r,SW,M2r,E2r,C2r,i5,zFe,w2r,A2r,RW,y2r,L2r,x2r,d5,QFe,$2r,k2r,BW,S2r,R2r,B2r,c5,WFe,P2r,I2r,PW,q2r,N2r,j2r,m5,AIe,nc,f5,HFe,ax,D2r,UFe,G2r,yIe,ar,nx,O2r,sc,V2r,IW,X2r,z2r,qW,Q2r,W2r,H2r,sx,U2r,JFe,J2r,Y2r,K2r,St,lx,Z2r,YFe,eFr,oFr,lc,rFr,KFe,tFr,aFr,NW,nFr,sFr,lFr,g5,iFr,Sr,ix,dFr,ZFe,cFr,mFr,nn,fFr,eve,gFr,hFr,ove,uFr,pFr,rve,_Fr,bFr,FFr,ue,h5,tve,vFr,TFr,jW,MFr,EFr,CFr,u5,ave,wFr,AFr,DW,yFr,LFr,xFr,p5,nve,$Fr,kFr,GW,SFr,RFr,BFr,_5,sve,PFr,IFr,OW,qFr,NFr,jFr,b5,lve,DFr,GFr,VW,OFr,VFr,XFr,F5,ive,zFr,QFr,XW,WFr,HFr,UFr,v5,dve,JFr,YFr,zW,KFr,ZFr,evr,T5,cve,ovr,rvr,QW,tvr,avr,nvr,M5,mve,svr,lvr,WW,ivr,dvr,cvr,E5,fve,mvr,fvr,HW,gvr,hvr,uvr,C5,gve,pvr,_vr,UW,bvr,Fvr,vvr,w5,hve,Tvr,Mvr,JW,Evr,Cvr,wvr,A5,uve,Avr,yvr,YW,Lvr,xvr,$vr,y5,pve,kvr,Svr,KW,Rvr,Bvr,Pvr,L5,_ve,Ivr,qvr,ZW,Nvr,jvr,Dvr,x5,bve,Gvr,Ovr,eH,Vvr,Xvr,zvr,$5,Fve,Qvr,Wvr,oH,Hvr,Uvr,Jvr,k5,LIe,ic,S5,vve,dx,Yvr,Tve,Kvr,xIe,nr,cx,Zvr,dc,e1r,rH,o1r,r1r,tH,t1r,a1r,n1r,mx,s1r,Mve,l1r,i1r,d1r,Rt,fx,c1r,Eve,m1r,f1r,cc,g1r,Cve,h1r,u1r,aH,p1r,_1r,b1r,R5,F1r,Rr,gx,v1r,wve,T1r,M1r,sn,E1r,Ave,C1r,w1r,yve,A1r,y1r,Lve,L1r,x1r,$1r,hx,B5,xve,k1r,S1r,nH,R1r,B1r,P1r,P5,$ve,I1r,q1r,sH,N1r,j1r,D1r,I5,$Ie,mc,q5,kve,ux,G1r,Sve,O1r,kIe,sr,px,V1r,fc,X1r,lH,z1r,Q1r,iH,W1r,H1r,U1r,_x,J1r,Rve,Y1r,K1r,Z1r,Bt,bx,eTr,Bve,oTr,rTr,gc,tTr,Pve,aTr,nTr,dH,sTr,lTr,iTr,N5,dTr,Br,Fx,cTr,Ive,mTr,fTr,ln,gTr,qve,hTr,uTr,Nve,pTr,_Tr,jve,bTr,FTr,vTr,Dve,j5,Gve,TTr,MTr,cH,ETr,CTr,wTr,D5,SIe,hc,G5,Ove,vx,ATr,Vve,yTr,RIe,lr,Tx,LTr,uc,xTr,mH,$Tr,kTr,fH,STr,RTr,BTr,Mx,PTr,Xve,ITr,qTr,NTr,Pt,Ex,jTr,zve,DTr,GTr,pc,OTr,Qve,VTr,XTr,gH,zTr,QTr,WTr,O5,HTr,Pr,Cx,UTr,Wve,JTr,YTr,dn,KTr,Hve,ZTr,eMr,Uve,oMr,rMr,Jve,tMr,aMr,nMr,de,V5,Yve,sMr,lMr,hH,iMr,dMr,cMr,X5,Kve,mMr,fMr,uH,gMr,hMr,uMr,z5,Zve,pMr,_Mr,pH,bMr,FMr,vMr,Q5,e1e,TMr,MMr,_H,EMr,CMr,wMr,W5,o1e,AMr,yMr,bH,LMr,xMr,$Mr,H5,r1e,kMr,SMr,FH,RMr,BMr,PMr,U5,t1e,IMr,qMr,vH,NMr,jMr,DMr,J5,a1e,GMr,OMr,TH,VMr,XMr,zMr,Y5,n1e,QMr,WMr,MH,HMr,UMr,JMr,K5,s1e,YMr,KMr,EH,ZMr,e4r,o4r,Z5,l1e,r4r,t4r,CH,a4r,n4r,s4r,eC,i1e,l4r,i4r,wH,d4r,c4r,m4r,oC,d1e,f4r,g4r,AH,h4r,u4r,p4r,rC,c1e,_4r,b4r,yH,F4r,v4r,T4r,tC,m1e,M4r,E4r,LH,C4r,w4r,A4r,aC,f1e,y4r,L4r,xH,x4r,$4r,k4r,nC,g1e,S4r,R4r,$H,B4r,P4r,I4r,sC,h1e,q4r,N4r,kH,j4r,D4r,G4r,lC,u1e,O4r,V4r,SH,X4r,z4r,Q4r,iC,p1e,W4r,H4r,RH,U4r,J4r,Y4r,dC,BIe,_c,cC,_1e,wx,K4r,b1e,Z4r,PIe,ir,Ax,eEr,bc,oEr,BH,rEr,tEr,PH,aEr,nEr,sEr,yx,lEr,F1e,iEr,dEr,cEr,It,Lx,mEr,v1e,fEr,gEr,Fc,hEr,T1e,uEr,pEr,IH,_Er,bEr,FEr,mC,vEr,Ir,xx,TEr,M1e,MEr,EEr,cn,CEr,E1e,wEr,AEr,C1e,yEr,LEr,w1e,xEr,$Er,kEr,ce,fC,A1e,SEr,REr,qH,BEr,PEr,IEr,gC,y1e,qEr,NEr,NH,jEr,DEr,GEr,hC,L1e,OEr,VEr,jH,XEr,zEr,QEr,uC,x1e,WEr,HEr,DH,UEr,JEr,YEr,pC,$1e,KEr,ZEr,GH,e5r,o5r,r5r,_C,k1e,t5r,a5r,OH,n5r,s5r,l5r,bC,S1e,i5r,d5r,VH,c5r,m5r,f5r,FC,R1e,g5r,h5r,XH,u5r,p5r,_5r,vC,B1e,b5r,F5r,zH,v5r,T5r,M5r,TC,P1e,E5r,C5r,QH,w5r,A5r,y5r,MC,I1e,L5r,x5r,WH,$5r,k5r,S5r,EC,q1e,R5r,B5r,HH,P5r,I5r,q5r,CC,N1e,N5r,j5r,UH,D5r,G5r,O5r,wC,j1e,V5r,X5r,JH,z5r,Q5r,W5r,AC,D1e,H5r,U5r,YH,J5r,Y5r,K5r,yC,G1e,Z5r,eCr,KH,oCr,rCr,tCr,LC,O1e,aCr,nCr,ZH,sCr,lCr,iCr,xC,V1e,dCr,cCr,eU,mCr,fCr,gCr,$C,X1e,hCr,uCr,oU,pCr,_Cr,bCr,kC,z1e,FCr,vCr,rU,TCr,MCr,ECr,SC,IIe,vc,RC,Q1e,$x,CCr,W1e,wCr,qIe,dr,kx,ACr,Tc,yCr,tU,LCr,xCr,aU,$Cr,kCr,SCr,Sx,RCr,H1e,BCr,PCr,ICr,qt,Rx,qCr,U1e,NCr,jCr,Mc,DCr,J1e,GCr,OCr,nU,VCr,XCr,zCr,BC,QCr,qr,Bx,WCr,Y1e,HCr,UCr,mn,JCr,K1e,YCr,KCr,Z1e,ZCr,e3r,eTe,o3r,r3r,t3r,oTe,PC,rTe,a3r,n3r,sU,s3r,l3r,i3r,IC,NIe,Ec,qC,tTe,Px,d3r,aTe,c3r,jIe,cr,Ix,m3r,Cc,f3r,lU,g3r,h3r,iU,u3r,p3r,_3r,qx,b3r,nTe,F3r,v3r,T3r,Nt,Nx,M3r,sTe,E3r,C3r,wc,w3r,lTe,A3r,y3r,dU,L3r,x3r,$3r,NC,k3r,Nr,jx,S3r,iTe,R3r,B3r,fn,P3r,dTe,I3r,q3r,cTe,N3r,j3r,mTe,D3r,G3r,O3r,fTe,jC,gTe,V3r,X3r,cU,z3r,Q3r,W3r,DC,DIe,Ac,GC,hTe,Dx,H3r,uTe,U3r,GIe,mr,Gx,J3r,yc,Y3r,mU,K3r,Z3r,fU,ewr,owr,rwr,Ox,twr,pTe,awr,nwr,swr,jt,Vx,lwr,_Te,iwr,dwr,Lc,cwr,bTe,mwr,fwr,gU,gwr,hwr,uwr,OC,pwr,jr,Xx,_wr,FTe,bwr,Fwr,gn,vwr,vTe,Twr,Mwr,TTe,Ewr,Cwr,MTe,wwr,Awr,ywr,oe,VC,ETe,Lwr,xwr,hU,$wr,kwr,Swr,XC,CTe,Rwr,Bwr,uU,Pwr,Iwr,qwr,zC,wTe,Nwr,jwr,pU,Dwr,Gwr,Owr,QC,ATe,Vwr,Xwr,_U,zwr,Qwr,Wwr,WC,yTe,Hwr,Uwr,bU,Jwr,Ywr,Kwr,HC,LTe,Zwr,eAr,FU,oAr,rAr,tAr,UC,xTe,aAr,nAr,vU,sAr,lAr,iAr,JC,$Te,dAr,cAr,TU,mAr,fAr,gAr,YC,kTe,hAr,uAr,MU,pAr,_Ar,bAr,KC,STe,FAr,vAr,EU,TAr,MAr,EAr,ZC,RTe,CAr,wAr,CU,AAr,yAr,LAr,e3,BTe,xAr,$Ar,wU,kAr,SAr,RAr,o3,PTe,BAr,PAr,AU,IAr,qAr,NAr,r3,ITe,jAr,DAr,yU,GAr,OAr,VAr,t3,qTe,XAr,zAr,LU,QAr,WAr,HAr,a3,NTe,UAr,JAr,xU,YAr,KAr,ZAr,n3,jTe,e0r,o0r,$U,r0r,t0r,a0r,s3,DTe,n0r,s0r,kU,l0r,i0r,d0r,l3,GTe,c0r,m0r,SU,f0r,g0r,h0r,i3,OTe,u0r,p0r,RU,_0r,b0r,F0r,d3,VTe,v0r,T0r,BU,M0r,E0r,C0r,c3,XTe,w0r,A0r,PU,y0r,L0r,x0r,m3,zTe,$0r,k0r,IU,S0r,R0r,B0r,f3,QTe,P0r,I0r,qU,q0r,N0r,j0r,g3,WTe,D0r,G0r,NU,O0r,V0r,X0r,h3,OIe,xc,u3,HTe,zx,z0r,UTe,Q0r,VIe,fr,Qx,W0r,$c,H0r,jU,U0r,J0r,DU,Y0r,K0r,Z0r,Wx,e6r,JTe,o6r,r6r,t6r,Dt,Hx,a6r,YTe,n6r,s6r,kc,l6r,KTe,i6r,d6r,GU,c6r,m6r,f6r,p3,g6r,Dr,Ux,h6r,ZTe,u6r,p6r,hn,_6r,eMe,b6r,F6r,oMe,v6r,T6r,rMe,M6r,E6r,C6r,ke,_3,tMe,w6r,A6r,OU,y6r,L6r,x6r,b3,aMe,$6r,k6r,VU,S6r,R6r,B6r,F3,nMe,P6r,I6r,XU,q6r,N6r,j6r,v3,sMe,D6r,G6r,zU,O6r,V6r,X6r,T3,lMe,z6r,Q6r,QU,W6r,H6r,U6r,M3,iMe,J6r,Y6r,WU,K6r,Z6r,eyr,E3,dMe,oyr,ryr,HU,tyr,ayr,nyr,C3,cMe,syr,lyr,UU,iyr,dyr,cyr,w3,mMe,myr,fyr,JU,gyr,hyr,uyr,A3,XIe,Sc,y3,fMe,Jx,pyr,gMe,_yr,zIe,gr,Yx,byr,Rc,Fyr,YU,vyr,Tyr,KU,Myr,Eyr,Cyr,Kx,wyr,hMe,Ayr,yyr,Lyr,Gt,Zx,xyr,uMe,$yr,kyr,Bc,Syr,pMe,Ryr,Byr,ZU,Pyr,Iyr,qyr,L3,Nyr,Gr,e7,jyr,_Me,Dyr,Gyr,un,Oyr,bMe,Vyr,Xyr,FMe,zyr,Qyr,vMe,Wyr,Hyr,Uyr,Me,x3,TMe,Jyr,Yyr,eJ,Kyr,Zyr,eLr,$3,MMe,oLr,rLr,oJ,tLr,aLr,nLr,k3,EMe,sLr,lLr,rJ,iLr,dLr,cLr,S3,CMe,mLr,fLr,tJ,gLr,hLr,uLr,R3,wMe,pLr,_Lr,aJ,bLr,FLr,vLr,B3,AMe,TLr,MLr,nJ,ELr,CLr,wLr,P3,yMe,ALr,yLr,sJ,LLr,xLr,$Lr,I3,LMe,kLr,SLr,lJ,RLr,BLr,PLr,q3,xMe,ILr,qLr,iJ,NLr,jLr,DLr,N3,$Me,GLr,OLr,dJ,VLr,XLr,zLr,j3,kMe,QLr,WLr,cJ,HLr,ULr,JLr,D3,SMe,YLr,KLr,mJ,ZLr,e8r,o8r,G3,QIe,Pc,O3,RMe,o7,r8r,BMe,t8r,WIe,hr,r7,a8r,Ic,n8r,fJ,s8r,l8r,gJ,i8r,d8r,c8r,t7,m8r,PMe,f8r,g8r,h8r,Ot,a7,u8r,IMe,p8r,_8r,qc,b8r,qMe,F8r,v8r,hJ,T8r,M8r,E8r,V3,C8r,Or,n7,w8r,NMe,A8r,y8r,pn,L8r,jMe,x8r,$8r,DMe,k8r,S8r,GMe,R8r,B8r,P8r,Le,X3,OMe,I8r,q8r,uJ,N8r,j8r,D8r,z3,VMe,G8r,O8r,pJ,V8r,X8r,z8r,Q3,XMe,Q8r,W8r,_J,H8r,U8r,J8r,W3,zMe,Y8r,K8r,bJ,Z8r,exr,oxr,H3,QMe,rxr,txr,FJ,axr,nxr,sxr,U3,WMe,lxr,ixr,vJ,dxr,cxr,mxr,J3,HMe,fxr,gxr,TJ,hxr,uxr,pxr,Y3,UMe,_xr,bxr,MJ,Fxr,vxr,Txr,K3,JMe,Mxr,Exr,EJ,Cxr,wxr,Axr,Z3,YMe,yxr,Lxr,CJ,xxr,$xr,kxr,ew,HIe,Nc,ow,KMe,s7,Sxr,ZMe,Rxr,UIe,ur,l7,Bxr,jc,Pxr,wJ,Ixr,qxr,AJ,Nxr,jxr,Dxr,i7,Gxr,e4e,Oxr,Vxr,Xxr,Vt,d7,zxr,o4e,Qxr,Wxr,Dc,Hxr,r4e,Uxr,Jxr,yJ,Yxr,Kxr,Zxr,rw,e7r,Vr,c7,o7r,t4e,r7r,t7r,_n,a7r,a4e,n7r,s7r,n4e,l7r,i7r,s4e,d7r,c7r,m7r,Se,tw,l4e,f7r,g7r,LJ,h7r,u7r,p7r,aw,i4e,_7r,b7r,xJ,F7r,v7r,T7r,nw,d4e,M7r,E7r,$J,C7r,w7r,A7r,sw,c4e,y7r,L7r,kJ,x7r,$7r,k7r,lw,m4e,S7r,R7r,SJ,B7r,P7r,I7r,iw,f4e,q7r,N7r,RJ,j7r,D7r,G7r,dw,g4e,O7r,V7r,BJ,X7r,z7r,Q7r,cw,h4e,W7r,H7r,PJ,U7r,J7r,Y7r,mw,u4e,K7r,Z7r,IJ,e9r,o9r,r9r,fw,JIe,Gc,gw,p4e,m7,t9r,_4e,a9r,YIe,pr,f7,n9r,Oc,s9r,qJ,l9r,i9r,NJ,d9r,c9r,m9r,g7,f9r,b4e,g9r,h9r,u9r,Xt,h7,p9r,F4e,_9r,b9r,Vc,F9r,v4e,v9r,T9r,jJ,M9r,E9r,C9r,hw,w9r,Xr,u7,A9r,T4e,y9r,L9r,bn,x9r,M4e,$9r,k9r,E4e,S9r,R9r,C4e,B9r,P9r,I9r,xe,uw,w4e,q9r,N9r,DJ,j9r,D9r,G9r,pw,A4e,O9r,V9r,GJ,X9r,z9r,Q9r,_w,y4e,W9r,H9r,OJ,U9r,J9r,Y9r,bw,L4e,K9r,Z9r,VJ,e$r,o$r,r$r,Fw,x4e,t$r,a$r,XJ,n$r,s$r,l$r,vw,$4e,i$r,d$r,zJ,c$r,m$r,f$r,Tw,k4e,g$r,h$r,QJ,u$r,p$r,_$r,Mw,S4e,b$r,F$r,WJ,v$r,T$r,M$r,Ew,R4e,E$r,C$r,HJ,w$r,A$r,y$r,Cw,B4e,L$r,x$r,UJ,$$r,k$r,S$r,ww,KIe,Xc,Aw,P4e,p7,R$r,I4e,B$r,ZIe,_r,_7,P$r,zc,I$r,JJ,q$r,N$r,YJ,j$r,D$r,G$r,b7,O$r,q4e,V$r,X$r,z$r,zt,F7,Q$r,N4e,W$r,H$r,Qc,U$r,j4e,J$r,Y$r,KJ,K$r,Z$r,ekr,yw,okr,zr,v7,rkr,D4e,tkr,akr,Fn,nkr,G4e,skr,lkr,O4e,ikr,dkr,V4e,ckr,mkr,fkr,$e,Lw,X4e,gkr,hkr,ZJ,ukr,pkr,_kr,xw,z4e,bkr,Fkr,eY,vkr,Tkr,Mkr,$w,Q4e,Ekr,Ckr,oY,wkr,Akr,ykr,kw,W4e,Lkr,xkr,rY,$kr,kkr,Skr,Sw,H4e,Rkr,Bkr,tY,Pkr,Ikr,qkr,Rw,U4e,Nkr,jkr,aY,Dkr,Gkr,Okr,Bw,J4e,Vkr,Xkr,nY,zkr,Qkr,Wkr,Pw,Y4e,Hkr,Ukr,sY,Jkr,Ykr,Kkr,Iw,K4e,Zkr,eSr,lY,oSr,rSr,tSr,qw,Z4e,aSr,nSr,iY,sSr,lSr,iSr,Nw,eqe,Wc,jw,eEe,T7,dSr,oEe,cSr,oqe,br,M7,mSr,Hc,fSr,dY,gSr,hSr,cY,uSr,pSr,_Sr,E7,bSr,rEe,FSr,vSr,TSr,Qt,C7,MSr,tEe,ESr,CSr,Uc,wSr,aEe,ASr,ySr,mY,LSr,xSr,$Sr,Dw,kSr,Qr,w7,SSr,nEe,RSr,BSr,vn,PSr,sEe,ISr,qSr,lEe,NSr,jSr,iEe,DSr,GSr,OSr,De,Gw,dEe,VSr,XSr,fY,zSr,QSr,WSr,Ow,cEe,HSr,USr,gY,JSr,YSr,KSr,Vw,mEe,ZSr,eRr,hY,oRr,rRr,tRr,Xw,fEe,aRr,nRr,uY,sRr,lRr,iRr,zw,gEe,dRr,cRr,pY,mRr,fRr,gRr,Qw,hEe,hRr,uRr,_Y,pRr,_Rr,bRr,Ww,uEe,FRr,vRr,bY,TRr,MRr,ERr,Hw,pEe,CRr,wRr,FY,ARr,yRr,LRr,Uw,rqe,Jc,Jw,_Ee,A7,xRr,bEe,$Rr,tqe,Fr,y7,kRr,Yc,SRr,vY,RRr,BRr,TY,PRr,IRr,qRr,L7,NRr,FEe,jRr,DRr,GRr,Wt,x7,ORr,vEe,VRr,XRr,Kc,zRr,TEe,QRr,WRr,MY,HRr,URr,JRr,Yw,YRr,Wr,$7,KRr,MEe,ZRr,eBr,Tn,oBr,EEe,rBr,tBr,CEe,aBr,nBr,wEe,sBr,lBr,iBr,Ge,Kw,AEe,dBr,cBr,EY,mBr,fBr,gBr,Zw,yEe,hBr,uBr,CY,pBr,_Br,bBr,eA,LEe,FBr,vBr,wY,TBr,MBr,EBr,oA,xEe,CBr,wBr,AY,ABr,yBr,LBr,rA,$Ee,xBr,$Br,yY,kBr,SBr,RBr,tA,kEe,BBr,PBr,LY,IBr,qBr,NBr,aA,SEe,jBr,DBr,xY,GBr,OBr,VBr,nA,REe,XBr,zBr,$Y,QBr,WBr,HBr,sA,aqe,Zc,lA,BEe,k7,UBr,PEe,JBr,nqe,vr,S7,YBr,em,KBr,kY,ZBr,ePr,SY,oPr,rPr,tPr,R7,aPr,IEe,nPr,sPr,lPr,Ht,B7,iPr,qEe,dPr,cPr,om,mPr,NEe,fPr,gPr,RY,hPr,uPr,pPr,iA,_Pr,Hr,P7,bPr,jEe,FPr,vPr,Mn,TPr,DEe,MPr,EPr,GEe,CPr,wPr,OEe,APr,yPr,LPr,VEe,dA,XEe,xPr,$Pr,BY,kPr,SPr,RPr,cA,sqe,rm,mA,zEe,I7,BPr,QEe,PPr,lqe,Tr,q7,IPr,tm,qPr,PY,NPr,jPr,IY,DPr,GPr,OPr,N7,VPr,WEe,XPr,zPr,QPr,Ut,j7,WPr,HEe,HPr,UPr,am,JPr,UEe,YPr,KPr,qY,ZPr,eIr,oIr,fA,rIr,Ur,D7,tIr,JEe,aIr,nIr,En,sIr,YEe,lIr,iIr,KEe,dIr,cIr,ZEe,mIr,fIr,gIr,G7,gA,e5e,hIr,uIr,NY,pIr,_Ir,bIr,hA,o5e,FIr,vIr,jY,TIr,MIr,EIr,uA,iqe,nm,pA,r5e,O7,CIr,t5e,wIr,dqe,Mr,V7,AIr,sm,yIr,DY,LIr,xIr,GY,$Ir,kIr,SIr,X7,RIr,a5e,BIr,PIr,IIr,Jt,z7,qIr,n5e,NIr,jIr,lm,DIr,s5e,GIr,OIr,OY,VIr,XIr,zIr,_A,QIr,Jr,Q7,WIr,l5e,HIr,UIr,Cn,JIr,i5e,YIr,KIr,d5e,ZIr,eqr,c5e,oqr,rqr,tqr,m5e,bA,f5e,aqr,nqr,VY,sqr,lqr,iqr,FA,cqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),O6=new ee({}),V6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new dqr({props:{warning:!0,$$slots:{default:[T0t]},$$scope:{ctx:A}}}),X6=new ee({}),z6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L563"}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[M0t]},$$scope:{ctx:A}}}),U6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L708"}}),J6=new ee({}),Y6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L377"}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[E0t]},$$scope:{ctx:A}}}),oy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L587"}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Fh=new dqr({props:{$$slots:{default:[C0t]},$$scope:{ctx:A}}}),vh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[w0t]},$$scope:{ctx:A}}}),ly=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L76"}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new dqr({props:{$$slots:{default:[A0t]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[y0t]},$$scope:{ctx:A}}}),gy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L243"}}),hy=new ee({}),uy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L717"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[L0t]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[x0t]},$$scope:{ctx:A}}}),Fy=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L724"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$0t]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[k0t]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L739"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[S0t]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tb=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[R0t]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L746"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nb=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[B0t]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:A}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L753"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[I0t]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[q0t]},$$scope:{ctx:A}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L762"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[N0t]},$$scope:{ctx:A}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[j0t]},$$scope:{ctx:A}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L796"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[D0t]},$$scope:{ctx:A}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:A}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L803"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[O0t]},$$scope:{ctx:A}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:A}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L789"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[X0t]},$$scope:{ctx:A}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L771"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v1=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:A}}}),cL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:A}}}),uL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L812"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),vL=new ee({}),TL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L851"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[K0t]},$$scope:{ctx:A}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Z0t]},$$scope:{ctx:A}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L858"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W1=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L881"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L865"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L872"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L890"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L897"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L819"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L826"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),b8=new ee({}),F8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L835"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pM=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),N8=new ee({}),j8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),V8=new ee({}),X8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),H8=new ee({}),U8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),Z8=new ee({}),ex=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),ax=new ee({}),nx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),dx=new ee({}),cx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),ux=new ee({}),px=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),vx=new ee({}),Tx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),Jx=new ee({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),o7=new ee({}),r7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),a7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),s7=new ee({}),l7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),d7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fw=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),m7=new ee({}),f7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),h7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),p7=new ee({}),_7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),F7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),T7=new ee({}),M7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),A7=new ee({}),y7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),x7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),k7=new ee({}),S7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),B7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),I7=new ee({}),q7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),j7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),D7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),O7=new ee({}),V7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),z7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),F=l(),u=a("h1"),f=a("a"),p=a("span"),v(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mm=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),N6=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),j6=o("AutoConfig"),yn=o(", "),Ln=a("a"),D6=o("AutoModel"),mi=o(`, and
`),xn=a("a"),G6=o("AutoTokenizer"),fi=o(" will directly create a class of the relevant architecture. For instance"),gm=l(),v(Ma.$$.fragment),ze=l(),Ae=a("p"),n$=o("will create a model that is an instance of "),gi=a("a"),s$=o("BertModel"),l$=o("."),Eo=l(),Ea=a("p"),i$=o("There is one class of "),hm=a("code"),d$=o("AutoModel"),bje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lPe=l(),hi=a("h2"),um=a("a"),qZ=a("span"),v(O6.$$.fragment),Fje=l(),NZ=a("span"),vje=o("Extending the Auto Classes"),iPe=l(),$n=a("p"),Tje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=a("code"),Mje=o("NewModel"),Eje=o(", make sure you have a "),DZ=a("code"),Cje=o("NewModelConfig"),wje=o(` then you can add those to the auto
classes like this:`),dPe=l(),v(V6.$$.fragment),cPe=l(),c$=a("p"),Aje=o("You will then be able to use the auto classes like you would usually do!"),mPe=l(),v(pm.$$.fragment),fPe=l(),ui=a("h2"),_m=a("a"),GZ=a("span"),v(X6.$$.fragment),yje=l(),OZ=a("span"),Lje=o("AutoConfig"),gPe=l(),Co=a("div"),v(z6.$$.fragment),xje=l(),Q6=a("p"),$je=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m$=a("a"),kje=o("from_pretrained()"),Sje=o(" class method."),Rje=l(),W6=a("p"),Bje=o("This class cannot be instantiated directly using "),VZ=a("code"),Pje=o("__init__()"),Ije=o(" (throws an error)."),qje=l(),Er=a("div"),v(H6.$$.fragment),Nje=l(),XZ=a("p"),jje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Dje=l(),pi=a("p"),Gje=o("The configuration class to instantiate is selected based on the "),zZ=a("code"),Oje=o("model_type"),Vje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=a("code"),Xje=o("pretrained_model_name_or_path"),zje=o(":"),Qje=l(),y=a("ul"),bm=a("li"),WZ=a("strong"),Wje=o("albert"),Hje=o(" \u2014 "),f$=a("a"),Uje=o("AlbertConfig"),Jje=o(" (ALBERT model)"),Yje=l(),Fm=a("li"),HZ=a("strong"),Kje=o("bart"),Zje=o(" \u2014 "),g$=a("a"),eDe=o("BartConfig"),oDe=o(" (BART model)"),rDe=l(),vm=a("li"),UZ=a("strong"),tDe=o("beit"),aDe=o(" \u2014 "),h$=a("a"),nDe=o("BeitConfig"),sDe=o(" (BEiT model)"),lDe=l(),Tm=a("li"),JZ=a("strong"),iDe=o("bert"),dDe=o(" \u2014 "),u$=a("a"),cDe=o("BertConfig"),mDe=o(" (BERT model)"),fDe=l(),Mm=a("li"),YZ=a("strong"),gDe=o("bert-generation"),hDe=o(" \u2014 "),p$=a("a"),uDe=o("BertGenerationConfig"),pDe=o(" (Bert Generation model)"),_De=l(),Em=a("li"),KZ=a("strong"),bDe=o("big_bird"),FDe=o(" \u2014 "),_$=a("a"),vDe=o("BigBirdConfig"),TDe=o(" (BigBird model)"),MDe=l(),Cm=a("li"),ZZ=a("strong"),EDe=o("bigbird_pegasus"),CDe=o(" \u2014 "),b$=a("a"),wDe=o("BigBirdPegasusConfig"),ADe=o(" (BigBirdPegasus model)"),yDe=l(),wm=a("li"),eee=a("strong"),LDe=o("blenderbot"),xDe=o(" \u2014 "),F$=a("a"),$De=o("BlenderbotConfig"),kDe=o(" (Blenderbot model)"),SDe=l(),Am=a("li"),oee=a("strong"),RDe=o("blenderbot-small"),BDe=o(" \u2014 "),v$=a("a"),PDe=o("BlenderbotSmallConfig"),IDe=o(" (BlenderbotSmall model)"),qDe=l(),ym=a("li"),ree=a("strong"),NDe=o("camembert"),jDe=o(" \u2014 "),T$=a("a"),DDe=o("CamembertConfig"),GDe=o(" (CamemBERT model)"),ODe=l(),Lm=a("li"),tee=a("strong"),VDe=o("canine"),XDe=o(" \u2014 "),M$=a("a"),zDe=o("CanineConfig"),QDe=o(" (Canine model)"),WDe=l(),xm=a("li"),aee=a("strong"),HDe=o("clip"),UDe=o(" \u2014 "),E$=a("a"),JDe=o("CLIPConfig"),YDe=o(" (CLIP model)"),KDe=l(),$m=a("li"),nee=a("strong"),ZDe=o("convbert"),eGe=o(" \u2014 "),C$=a("a"),oGe=o("ConvBertConfig"),rGe=o(" (ConvBERT model)"),tGe=l(),km=a("li"),see=a("strong"),aGe=o("convnext"),nGe=o(" \u2014 "),w$=a("a"),sGe=o("ConvNextConfig"),lGe=o(" (ConvNext model)"),iGe=l(),Sm=a("li"),lee=a("strong"),dGe=o("ctrl"),cGe=o(" \u2014 "),A$=a("a"),mGe=o("CTRLConfig"),fGe=o(" (CTRL model)"),gGe=l(),Rm=a("li"),iee=a("strong"),hGe=o("data2vec-audio"),uGe=o(" \u2014 "),y$=a("a"),pGe=o("Data2VecAudioConfig"),_Ge=o(" (Data2VecAudio model)"),bGe=l(),Bm=a("li"),dee=a("strong"),FGe=o("data2vec-text"),vGe=o(" \u2014 "),L$=a("a"),TGe=o("Data2VecTextConfig"),MGe=o(" (Data2VecText model)"),EGe=l(),Pm=a("li"),cee=a("strong"),CGe=o("data2vec-vision"),wGe=o(" \u2014 "),x$=a("a"),AGe=o("Data2VecVisionConfig"),yGe=o(" (Data2VecVision model)"),LGe=l(),Im=a("li"),mee=a("strong"),xGe=o("deberta"),$Ge=o(" \u2014 "),$$=a("a"),kGe=o("DebertaConfig"),SGe=o(" (DeBERTa model)"),RGe=l(),qm=a("li"),fee=a("strong"),BGe=o("deberta-v2"),PGe=o(" \u2014 "),k$=a("a"),IGe=o("DebertaV2Config"),qGe=o(" (DeBERTa-v2 model)"),NGe=l(),Nm=a("li"),gee=a("strong"),jGe=o("decision_transformer"),DGe=o(" \u2014 "),S$=a("a"),GGe=o("DecisionTransformerConfig"),OGe=o(" (Decision Transformer model)"),VGe=l(),jm=a("li"),hee=a("strong"),XGe=o("deit"),zGe=o(" \u2014 "),R$=a("a"),QGe=o("DeiTConfig"),WGe=o(" (DeiT model)"),HGe=l(),Dm=a("li"),uee=a("strong"),UGe=o("detr"),JGe=o(" \u2014 "),B$=a("a"),YGe=o("DetrConfig"),KGe=o(" (DETR model)"),ZGe=l(),Gm=a("li"),pee=a("strong"),eOe=o("distilbert"),oOe=o(" \u2014 "),P$=a("a"),rOe=o("DistilBertConfig"),tOe=o(" (DistilBERT model)"),aOe=l(),Om=a("li"),_ee=a("strong"),nOe=o("dpr"),sOe=o(" \u2014 "),I$=a("a"),lOe=o("DPRConfig"),iOe=o(" (DPR model)"),dOe=l(),Vm=a("li"),bee=a("strong"),cOe=o("dpt"),mOe=o(" \u2014 "),q$=a("a"),fOe=o("DPTConfig"),gOe=o(" (DPT model)"),hOe=l(),Xm=a("li"),Fee=a("strong"),uOe=o("electra"),pOe=o(" \u2014 "),N$=a("a"),_Oe=o("ElectraConfig"),bOe=o(" (ELECTRA model)"),FOe=l(),zm=a("li"),vee=a("strong"),vOe=o("encoder-decoder"),TOe=o(" \u2014 "),j$=a("a"),MOe=o("EncoderDecoderConfig"),EOe=o(" (Encoder decoder model)"),COe=l(),Qm=a("li"),Tee=a("strong"),wOe=o("flaubert"),AOe=o(" \u2014 "),D$=a("a"),yOe=o("FlaubertConfig"),LOe=o(" (FlauBERT model)"),xOe=l(),Wm=a("li"),Mee=a("strong"),$Oe=o("fnet"),kOe=o(" \u2014 "),G$=a("a"),SOe=o("FNetConfig"),ROe=o(" (FNet model)"),BOe=l(),Hm=a("li"),Eee=a("strong"),POe=o("fsmt"),IOe=o(" \u2014 "),O$=a("a"),qOe=o("FSMTConfig"),NOe=o(" (FairSeq Machine-Translation model)"),jOe=l(),Um=a("li"),Cee=a("strong"),DOe=o("funnel"),GOe=o(" \u2014 "),V$=a("a"),OOe=o("FunnelConfig"),VOe=o(" (Funnel Transformer model)"),XOe=l(),Jm=a("li"),wee=a("strong"),zOe=o("glpn"),QOe=o(" \u2014 "),X$=a("a"),WOe=o("GLPNConfig"),HOe=o(" (GLPN model)"),UOe=l(),Ym=a("li"),Aee=a("strong"),JOe=o("gpt2"),YOe=o(" \u2014 "),z$=a("a"),KOe=o("GPT2Config"),ZOe=o(" (OpenAI GPT-2 model)"),eVe=l(),Km=a("li"),yee=a("strong"),oVe=o("gpt_neo"),rVe=o(" \u2014 "),Q$=a("a"),tVe=o("GPTNeoConfig"),aVe=o(" (GPT Neo model)"),nVe=l(),Zm=a("li"),Lee=a("strong"),sVe=o("gptj"),lVe=o(" \u2014 "),W$=a("a"),iVe=o("GPTJConfig"),dVe=o(" (GPT-J model)"),cVe=l(),ef=a("li"),xee=a("strong"),mVe=o("hubert"),fVe=o(" \u2014 "),H$=a("a"),gVe=o("HubertConfig"),hVe=o(" (Hubert model)"),uVe=l(),of=a("li"),$ee=a("strong"),pVe=o("ibert"),_Ve=o(" \u2014 "),U$=a("a"),bVe=o("IBertConfig"),FVe=o(" (I-BERT model)"),vVe=l(),rf=a("li"),kee=a("strong"),TVe=o("imagegpt"),MVe=o(" \u2014 "),J$=a("a"),EVe=o("ImageGPTConfig"),CVe=o(" (ImageGPT model)"),wVe=l(),tf=a("li"),See=a("strong"),AVe=o("layoutlm"),yVe=o(" \u2014 "),Y$=a("a"),LVe=o("LayoutLMConfig"),xVe=o(" (LayoutLM model)"),$Ve=l(),af=a("li"),Ree=a("strong"),kVe=o("layoutlmv2"),SVe=o(" \u2014 "),K$=a("a"),RVe=o("LayoutLMv2Config"),BVe=o(" (LayoutLMv2 model)"),PVe=l(),nf=a("li"),Bee=a("strong"),IVe=o("led"),qVe=o(" \u2014 "),Z$=a("a"),NVe=o("LEDConfig"),jVe=o(" (LED model)"),DVe=l(),sf=a("li"),Pee=a("strong"),GVe=o("longformer"),OVe=o(" \u2014 "),ek=a("a"),VVe=o("LongformerConfig"),XVe=o(" (Longformer model)"),zVe=l(),lf=a("li"),Iee=a("strong"),QVe=o("luke"),WVe=o(" \u2014 "),ok=a("a"),HVe=o("LukeConfig"),UVe=o(" (LUKE model)"),JVe=l(),df=a("li"),qee=a("strong"),YVe=o("lxmert"),KVe=o(" \u2014 "),rk=a("a"),ZVe=o("LxmertConfig"),eXe=o(" (LXMERT model)"),oXe=l(),cf=a("li"),Nee=a("strong"),rXe=o("m2m_100"),tXe=o(" \u2014 "),tk=a("a"),aXe=o("M2M100Config"),nXe=o(" (M2M100 model)"),sXe=l(),mf=a("li"),jee=a("strong"),lXe=o("marian"),iXe=o(" \u2014 "),ak=a("a"),dXe=o("MarianConfig"),cXe=o(" (Marian model)"),mXe=l(),ff=a("li"),Dee=a("strong"),fXe=o("maskformer"),gXe=o(" \u2014 "),nk=a("a"),hXe=o("MaskFormerConfig"),uXe=o(" (MaskFormer model)"),pXe=l(),gf=a("li"),Gee=a("strong"),_Xe=o("mbart"),bXe=o(" \u2014 "),sk=a("a"),FXe=o("MBartConfig"),vXe=o(" (mBART model)"),TXe=l(),hf=a("li"),Oee=a("strong"),MXe=o("megatron-bert"),EXe=o(" \u2014 "),lk=a("a"),CXe=o("MegatronBertConfig"),wXe=o(" (MegatronBert model)"),AXe=l(),uf=a("li"),Vee=a("strong"),yXe=o("mobilebert"),LXe=o(" \u2014 "),ik=a("a"),xXe=o("MobileBertConfig"),$Xe=o(" (MobileBERT model)"),kXe=l(),pf=a("li"),Xee=a("strong"),SXe=o("mpnet"),RXe=o(" \u2014 "),dk=a("a"),BXe=o("MPNetConfig"),PXe=o(" (MPNet model)"),IXe=l(),_f=a("li"),zee=a("strong"),qXe=o("mt5"),NXe=o(" \u2014 "),ck=a("a"),jXe=o("MT5Config"),DXe=o(" (mT5 model)"),GXe=l(),bf=a("li"),Qee=a("strong"),OXe=o("nystromformer"),VXe=o(" \u2014 "),mk=a("a"),XXe=o("NystromformerConfig"),zXe=o(" (Nystromformer model)"),QXe=l(),Ff=a("li"),Wee=a("strong"),WXe=o("openai-gpt"),HXe=o(" \u2014 "),fk=a("a"),UXe=o("OpenAIGPTConfig"),JXe=o(" (OpenAI GPT model)"),YXe=l(),vf=a("li"),Hee=a("strong"),KXe=o("pegasus"),ZXe=o(" \u2014 "),gk=a("a"),eze=o("PegasusConfig"),oze=o(" (Pegasus model)"),rze=l(),Tf=a("li"),Uee=a("strong"),tze=o("perceiver"),aze=o(" \u2014 "),hk=a("a"),nze=o("PerceiverConfig"),sze=o(" (Perceiver model)"),lze=l(),Mf=a("li"),Jee=a("strong"),ize=o("plbart"),dze=o(" \u2014 "),uk=a("a"),cze=o("PLBartConfig"),mze=o(" (PLBart model)"),fze=l(),Ef=a("li"),Yee=a("strong"),gze=o("poolformer"),hze=o(" \u2014 "),pk=a("a"),uze=o("PoolFormerConfig"),pze=o(" (PoolFormer model)"),_ze=l(),Cf=a("li"),Kee=a("strong"),bze=o("prophetnet"),Fze=o(" \u2014 "),_k=a("a"),vze=o("ProphetNetConfig"),Tze=o(" (ProphetNet model)"),Mze=l(),wf=a("li"),Zee=a("strong"),Eze=o("qdqbert"),Cze=o(" \u2014 "),bk=a("a"),wze=o("QDQBertConfig"),Aze=o(" (QDQBert model)"),yze=l(),Af=a("li"),eoe=a("strong"),Lze=o("rag"),xze=o(" \u2014 "),Fk=a("a"),$ze=o("RagConfig"),kze=o(" (RAG model)"),Sze=l(),yf=a("li"),ooe=a("strong"),Rze=o("realm"),Bze=o(" \u2014 "),vk=a("a"),Pze=o("RealmConfig"),Ize=o(" (Realm model)"),qze=l(),Lf=a("li"),roe=a("strong"),Nze=o("reformer"),jze=o(" \u2014 "),Tk=a("a"),Dze=o("ReformerConfig"),Gze=o(" (Reformer model)"),Oze=l(),xf=a("li"),toe=a("strong"),Vze=o("regnet"),Xze=o(" \u2014 "),Mk=a("a"),zze=o("RegNetConfig"),Qze=o(" (RegNet model)"),Wze=l(),$f=a("li"),aoe=a("strong"),Hze=o("rembert"),Uze=o(" \u2014 "),Ek=a("a"),Jze=o("RemBertConfig"),Yze=o(" (RemBERT model)"),Kze=l(),kf=a("li"),noe=a("strong"),Zze=o("resnet"),eQe=o(" \u2014 "),Ck=a("a"),oQe=o("ResNetConfig"),rQe=o(" (ResNet model)"),tQe=l(),Sf=a("li"),soe=a("strong"),aQe=o("retribert"),nQe=o(" \u2014 "),wk=a("a"),sQe=o("RetriBertConfig"),lQe=o(" (RetriBERT model)"),iQe=l(),Rf=a("li"),loe=a("strong"),dQe=o("roberta"),cQe=o(" \u2014 "),Ak=a("a"),mQe=o("RobertaConfig"),fQe=o(" (RoBERTa model)"),gQe=l(),Bf=a("li"),ioe=a("strong"),hQe=o("roformer"),uQe=o(" \u2014 "),yk=a("a"),pQe=o("RoFormerConfig"),_Qe=o(" (RoFormer model)"),bQe=l(),Pf=a("li"),doe=a("strong"),FQe=o("segformer"),vQe=o(" \u2014 "),Lk=a("a"),TQe=o("SegformerConfig"),MQe=o(" (SegFormer model)"),EQe=l(),If=a("li"),coe=a("strong"),CQe=o("sew"),wQe=o(" \u2014 "),xk=a("a"),AQe=o("SEWConfig"),yQe=o(" (SEW model)"),LQe=l(),qf=a("li"),moe=a("strong"),xQe=o("sew-d"),$Qe=o(" \u2014 "),$k=a("a"),kQe=o("SEWDConfig"),SQe=o(" (SEW-D model)"),RQe=l(),Nf=a("li"),foe=a("strong"),BQe=o("speech-encoder-decoder"),PQe=o(" \u2014 "),kk=a("a"),IQe=o("SpeechEncoderDecoderConfig"),qQe=o(" (Speech Encoder decoder model)"),NQe=l(),jf=a("li"),goe=a("strong"),jQe=o("speech_to_text"),DQe=o(" \u2014 "),Sk=a("a"),GQe=o("Speech2TextConfig"),OQe=o(" (Speech2Text model)"),VQe=l(),Df=a("li"),hoe=a("strong"),XQe=o("speech_to_text_2"),zQe=o(" \u2014 "),Rk=a("a"),QQe=o("Speech2Text2Config"),WQe=o(" (Speech2Text2 model)"),HQe=l(),Gf=a("li"),uoe=a("strong"),UQe=o("splinter"),JQe=o(" \u2014 "),Bk=a("a"),YQe=o("SplinterConfig"),KQe=o(" (Splinter model)"),ZQe=l(),Of=a("li"),poe=a("strong"),eWe=o("squeezebert"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("SqueezeBertConfig"),tWe=o(" (SqueezeBERT model)"),aWe=l(),Vf=a("li"),_oe=a("strong"),nWe=o("swin"),sWe=o(" \u2014 "),Ik=a("a"),lWe=o("SwinConfig"),iWe=o(" (Swin model)"),dWe=l(),Xf=a("li"),boe=a("strong"),cWe=o("t5"),mWe=o(" \u2014 "),qk=a("a"),fWe=o("T5Config"),gWe=o(" (T5 model)"),hWe=l(),zf=a("li"),Foe=a("strong"),uWe=o("tapas"),pWe=o(" \u2014 "),Nk=a("a"),_We=o("TapasConfig"),bWe=o(" (TAPAS model)"),FWe=l(),Qf=a("li"),voe=a("strong"),vWe=o("tapex"),TWe=o(" \u2014 "),jk=a("a"),MWe=o("BartConfig"),EWe=o(" (TAPEX model)"),CWe=l(),Wf=a("li"),Toe=a("strong"),wWe=o("transfo-xl"),AWe=o(" \u2014 "),Dk=a("a"),yWe=o("TransfoXLConfig"),LWe=o(" (Transformer-XL model)"),xWe=l(),Hf=a("li"),Moe=a("strong"),$We=o("trocr"),kWe=o(" \u2014 "),Gk=a("a"),SWe=o("TrOCRConfig"),RWe=o(" (TrOCR model)"),BWe=l(),Uf=a("li"),Eoe=a("strong"),PWe=o("unispeech"),IWe=o(" \u2014 "),Ok=a("a"),qWe=o("UniSpeechConfig"),NWe=o(" (UniSpeech model)"),jWe=l(),Jf=a("li"),Coe=a("strong"),DWe=o("unispeech-sat"),GWe=o(" \u2014 "),Vk=a("a"),OWe=o("UniSpeechSatConfig"),VWe=o(" (UniSpeechSat model)"),XWe=l(),Yf=a("li"),woe=a("strong"),zWe=o("van"),QWe=o(" \u2014 "),Xk=a("a"),WWe=o("VanConfig"),HWe=o(" (VAN model)"),UWe=l(),Kf=a("li"),Aoe=a("strong"),JWe=o("vilt"),YWe=o(" \u2014 "),zk=a("a"),KWe=o("ViltConfig"),ZWe=o(" (ViLT model)"),eHe=l(),Zf=a("li"),yoe=a("strong"),oHe=o("vision-encoder-decoder"),rHe=o(" \u2014 "),Qk=a("a"),tHe=o("VisionEncoderDecoderConfig"),aHe=o(" (Vision Encoder decoder model)"),nHe=l(),eg=a("li"),Loe=a("strong"),sHe=o("vision-text-dual-encoder"),lHe=o(" \u2014 "),Wk=a("a"),iHe=o("VisionTextDualEncoderConfig"),dHe=o(" (VisionTextDualEncoder model)"),cHe=l(),og=a("li"),xoe=a("strong"),mHe=o("visual_bert"),fHe=o(" \u2014 "),Hk=a("a"),gHe=o("VisualBertConfig"),hHe=o(" (VisualBert model)"),uHe=l(),rg=a("li"),$oe=a("strong"),pHe=o("vit"),_He=o(" \u2014 "),Uk=a("a"),bHe=o("ViTConfig"),FHe=o(" (ViT model)"),vHe=l(),tg=a("li"),koe=a("strong"),THe=o("vit_mae"),MHe=o(" \u2014 "),Jk=a("a"),EHe=o("ViTMAEConfig"),CHe=o(" (ViTMAE model)"),wHe=l(),ag=a("li"),Soe=a("strong"),AHe=o("wav2vec2"),yHe=o(" \u2014 "),Yk=a("a"),LHe=o("Wav2Vec2Config"),xHe=o(" (Wav2Vec2 model)"),$He=l(),ng=a("li"),Roe=a("strong"),kHe=o("wavlm"),SHe=o(" \u2014 "),Kk=a("a"),RHe=o("WavLMConfig"),BHe=o(" (WavLM model)"),PHe=l(),sg=a("li"),Boe=a("strong"),IHe=o("xglm"),qHe=o(" \u2014 "),Zk=a("a"),NHe=o("XGLMConfig"),jHe=o(" (XGLM model)"),DHe=l(),lg=a("li"),Poe=a("strong"),GHe=o("xlm"),OHe=o(" \u2014 "),eS=a("a"),VHe=o("XLMConfig"),XHe=o(" (XLM model)"),zHe=l(),ig=a("li"),Ioe=a("strong"),QHe=o("xlm-prophetnet"),WHe=o(" \u2014 "),oS=a("a"),HHe=o("XLMProphetNetConfig"),UHe=o(" (XLMProphetNet model)"),JHe=l(),dg=a("li"),qoe=a("strong"),YHe=o("xlm-roberta"),KHe=o(" \u2014 "),rS=a("a"),ZHe=o("XLMRobertaConfig"),eUe=o(" (XLM-RoBERTa model)"),oUe=l(),cg=a("li"),Noe=a("strong"),rUe=o("xlm-roberta-xl"),tUe=o(" \u2014 "),tS=a("a"),aUe=o("XLMRobertaXLConfig"),nUe=o(" (XLM-RoBERTa-XL model)"),sUe=l(),mg=a("li"),joe=a("strong"),lUe=o("xlnet"),iUe=o(" \u2014 "),aS=a("a"),dUe=o("XLNetConfig"),cUe=o(" (XLNet model)"),mUe=l(),fg=a("li"),Doe=a("strong"),fUe=o("yolos"),gUe=o(" \u2014 "),nS=a("a"),hUe=o("YolosConfig"),uUe=o(" (YOLOS model)"),pUe=l(),gg=a("li"),Goe=a("strong"),_Ue=o("yoso"),bUe=o(" \u2014 "),sS=a("a"),FUe=o("YosoConfig"),vUe=o(" (YOSO model)"),TUe=l(),v(hg.$$.fragment),MUe=l(),ug=a("div"),v(U6.$$.fragment),EUe=l(),Ooe=a("p"),CUe=o("Register a new configuration for this class."),hPe=l(),_i=a("h2"),pg=a("a"),Voe=a("span"),v(J6.$$.fragment),wUe=l(),Xoe=a("span"),AUe=o("AutoTokenizer"),uPe=l(),wo=a("div"),v(Y6.$$.fragment),yUe=l(),K6=a("p"),LUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=a("a"),xUe=o("AutoTokenizer.from_pretrained()"),$Ue=o(" class method."),kUe=l(),Z6=a("p"),SUe=o("This class cannot be instantiated directly using "),zoe=a("code"),RUe=o("__init__()"),BUe=o(" (throws an error)."),PUe=l(),Cr=a("div"),v(ey.$$.fragment),IUe=l(),Qoe=a("p"),qUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NUe=l(),Ca=a("p"),jUe=o("The tokenizer class to instantiate is selected based on the "),Woe=a("code"),DUe=o("model_type"),GUe=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),OUe=o("pretrained_model_name_or_path"),VUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),XUe=o("pretrained_model_name_or_path"),zUe=o(":"),QUe=l(),k=a("ul"),kn=a("li"),Joe=a("strong"),WUe=o("albert"),HUe=o(" \u2014 "),iS=a("a"),UUe=o("AlbertTokenizer"),JUe=o(" or "),dS=a("a"),YUe=o("AlbertTokenizerFast"),KUe=o(" (ALBERT model)"),ZUe=l(),Sn=a("li"),Yoe=a("strong"),eJe=o("bart"),oJe=o(" \u2014 "),cS=a("a"),rJe=o("BartTokenizer"),tJe=o(" or "),mS=a("a"),aJe=o("BartTokenizerFast"),nJe=o(" (BART model)"),sJe=l(),Rn=a("li"),Koe=a("strong"),lJe=o("barthez"),iJe=o(" \u2014 "),fS=a("a"),dJe=o("BarthezTokenizer"),cJe=o(" or "),gS=a("a"),mJe=o("BarthezTokenizerFast"),fJe=o(" (BARThez model)"),gJe=l(),_g=a("li"),Zoe=a("strong"),hJe=o("bartpho"),uJe=o(" \u2014 "),hS=a("a"),pJe=o("BartphoTokenizer"),_Je=o(" (BARTpho model)"),bJe=l(),Bn=a("li"),ere=a("strong"),FJe=o("bert"),vJe=o(" \u2014 "),uS=a("a"),TJe=o("BertTokenizer"),MJe=o(" or "),pS=a("a"),EJe=o("BertTokenizerFast"),CJe=o(" (BERT model)"),wJe=l(),bg=a("li"),ore=a("strong"),AJe=o("bert-generation"),yJe=o(" \u2014 "),_S=a("a"),LJe=o("BertGenerationTokenizer"),xJe=o(" (Bert Generation model)"),$Je=l(),Fg=a("li"),rre=a("strong"),kJe=o("bert-japanese"),SJe=o(" \u2014 "),bS=a("a"),RJe=o("BertJapaneseTokenizer"),BJe=o(" (BertJapanese model)"),PJe=l(),vg=a("li"),tre=a("strong"),IJe=o("bertweet"),qJe=o(" \u2014 "),FS=a("a"),NJe=o("BertweetTokenizer"),jJe=o(" (Bertweet model)"),DJe=l(),Pn=a("li"),are=a("strong"),GJe=o("big_bird"),OJe=o(" \u2014 "),vS=a("a"),VJe=o("BigBirdTokenizer"),XJe=o(" or "),TS=a("a"),zJe=o("BigBirdTokenizerFast"),QJe=o(" (BigBird model)"),WJe=l(),In=a("li"),nre=a("strong"),HJe=o("bigbird_pegasus"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("PegasusTokenizer"),YJe=o(" or "),ES=a("a"),KJe=o("PegasusTokenizerFast"),ZJe=o(" (BigBirdPegasus model)"),eYe=l(),qn=a("li"),sre=a("strong"),oYe=o("blenderbot"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("BlenderbotTokenizer"),aYe=o(" or "),wS=a("a"),nYe=o("BlenderbotTokenizerFast"),sYe=o(" (Blenderbot model)"),lYe=l(),Tg=a("li"),lre=a("strong"),iYe=o("blenderbot-small"),dYe=o(" \u2014 "),AS=a("a"),cYe=o("BlenderbotSmallTokenizer"),mYe=o(" (BlenderbotSmall model)"),fYe=l(),Mg=a("li"),ire=a("strong"),gYe=o("byt5"),hYe=o(" \u2014 "),yS=a("a"),uYe=o("ByT5Tokenizer"),pYe=o(" (ByT5 model)"),_Ye=l(),Nn=a("li"),dre=a("strong"),bYe=o("camembert"),FYe=o(" \u2014 "),LS=a("a"),vYe=o("CamembertTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("CamembertTokenizerFast"),EYe=o(" (CamemBERT model)"),CYe=l(),Eg=a("li"),cre=a("strong"),wYe=o("canine"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("CanineTokenizer"),LYe=o(" (Canine model)"),xYe=l(),jn=a("li"),mre=a("strong"),$Ye=o("clip"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("CLIPTokenizer"),RYe=o(" or "),SS=a("a"),BYe=o("CLIPTokenizerFast"),PYe=o(" (CLIP model)"),IYe=l(),Dn=a("li"),fre=a("strong"),qYe=o("convbert"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("ConvBertTokenizer"),DYe=o(" or "),BS=a("a"),GYe=o("ConvBertTokenizerFast"),OYe=o(" (ConvBERT model)"),VYe=l(),Gn=a("li"),gre=a("strong"),XYe=o("cpm"),zYe=o(" \u2014 "),PS=a("a"),QYe=o("CpmTokenizer"),WYe=o(" or "),IS=a("a"),HYe=o("CpmTokenizerFast"),UYe=o(" (CPM model)"),JYe=l(),Cg=a("li"),hre=a("strong"),YYe=o("ctrl"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("CTRLTokenizer"),eKe=o(" (CTRL model)"),oKe=l(),On=a("li"),ure=a("strong"),rKe=o("data2vec-text"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("RobertaTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("RobertaTokenizerFast"),lKe=o(" (Data2VecText model)"),iKe=l(),Vn=a("li"),pre=a("strong"),dKe=o("deberta"),cKe=o(" \u2014 "),DS=a("a"),mKe=o("DebertaTokenizer"),fKe=o(" or "),GS=a("a"),gKe=o("DebertaTokenizerFast"),hKe=o(" (DeBERTa model)"),uKe=l(),Xn=a("li"),_re=a("strong"),pKe=o("deberta-v2"),_Ke=o(" \u2014 "),OS=a("a"),bKe=o("DebertaV2Tokenizer"),FKe=o(" or "),VS=a("a"),vKe=o("DebertaV2TokenizerFast"),TKe=o(" (DeBERTa-v2 model)"),MKe=l(),zn=a("li"),bre=a("strong"),EKe=o("distilbert"),CKe=o(" \u2014 "),XS=a("a"),wKe=o("DistilBertTokenizer"),AKe=o(" or "),zS=a("a"),yKe=o("DistilBertTokenizerFast"),LKe=o(" (DistilBERT model)"),xKe=l(),Qn=a("li"),Fre=a("strong"),$Ke=o("dpr"),kKe=o(" \u2014 "),QS=a("a"),SKe=o("DPRQuestionEncoderTokenizer"),RKe=o(" or "),WS=a("a"),BKe=o("DPRQuestionEncoderTokenizerFast"),PKe=o(" (DPR model)"),IKe=l(),Wn=a("li"),vre=a("strong"),qKe=o("electra"),NKe=o(" \u2014 "),HS=a("a"),jKe=o("ElectraTokenizer"),DKe=o(" or "),US=a("a"),GKe=o("ElectraTokenizerFast"),OKe=o(" (ELECTRA model)"),VKe=l(),wg=a("li"),Tre=a("strong"),XKe=o("flaubert"),zKe=o(" \u2014 "),JS=a("a"),QKe=o("FlaubertTokenizer"),WKe=o(" (FlauBERT model)"),HKe=l(),Hn=a("li"),Mre=a("strong"),UKe=o("fnet"),JKe=o(" \u2014 "),YS=a("a"),YKe=o("FNetTokenizer"),KKe=o(" or "),KS=a("a"),ZKe=o("FNetTokenizerFast"),eZe=o(" (FNet model)"),oZe=l(),Ag=a("li"),Ere=a("strong"),rZe=o("fsmt"),tZe=o(" \u2014 "),ZS=a("a"),aZe=o("FSMTTokenizer"),nZe=o(" (FairSeq Machine-Translation model)"),sZe=l(),Un=a("li"),Cre=a("strong"),lZe=o("funnel"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("FunnelTokenizer"),cZe=o(" or "),oR=a("a"),mZe=o("FunnelTokenizerFast"),fZe=o(" (Funnel Transformer model)"),gZe=l(),Jn=a("li"),wre=a("strong"),hZe=o("gpt2"),uZe=o(" \u2014 "),rR=a("a"),pZe=o("GPT2Tokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("GPT2TokenizerFast"),FZe=o(" (OpenAI GPT-2 model)"),vZe=l(),Yn=a("li"),Are=a("strong"),TZe=o("gpt_neo"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("GPT2Tokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("GPT2TokenizerFast"),AZe=o(" (GPT Neo model)"),yZe=l(),Kn=a("li"),yre=a("strong"),LZe=o("gptj"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("GPT2Tokenizer"),kZe=o(" or "),lR=a("a"),SZe=o("GPT2TokenizerFast"),RZe=o(" (GPT-J model)"),BZe=l(),Zn=a("li"),Lre=a("strong"),PZe=o("herbert"),IZe=o(" \u2014 "),iR=a("a"),qZe=o("HerbertTokenizer"),NZe=o(" or "),dR=a("a"),jZe=o("HerbertTokenizerFast"),DZe=o(" (HerBERT model)"),GZe=l(),yg=a("li"),xre=a("strong"),OZe=o("hubert"),VZe=o(" \u2014 "),cR=a("a"),XZe=o("Wav2Vec2CTCTokenizer"),zZe=o(" (Hubert model)"),QZe=l(),es=a("li"),$re=a("strong"),WZe=o("ibert"),HZe=o(" \u2014 "),mR=a("a"),UZe=o("RobertaTokenizer"),JZe=o(" or "),fR=a("a"),YZe=o("RobertaTokenizerFast"),KZe=o(" (I-BERT model)"),ZZe=l(),os=a("li"),kre=a("strong"),eeo=o("layoutlm"),oeo=o(" \u2014 "),gR=a("a"),reo=o("LayoutLMTokenizer"),teo=o(" or "),hR=a("a"),aeo=o("LayoutLMTokenizerFast"),neo=o(" (LayoutLM model)"),seo=l(),rs=a("li"),Sre=a("strong"),leo=o("layoutlmv2"),ieo=o(" \u2014 "),uR=a("a"),deo=o("LayoutLMv2Tokenizer"),ceo=o(" or "),pR=a("a"),meo=o("LayoutLMv2TokenizerFast"),feo=o(" (LayoutLMv2 model)"),geo=l(),ts=a("li"),Rre=a("strong"),heo=o("layoutxlm"),ueo=o(" \u2014 "),_R=a("a"),peo=o("LayoutXLMTokenizer"),_eo=o(" or "),bR=a("a"),beo=o("LayoutXLMTokenizerFast"),Feo=o(" (LayoutXLM model)"),veo=l(),as=a("li"),Bre=a("strong"),Teo=o("led"),Meo=o(" \u2014 "),FR=a("a"),Eeo=o("LEDTokenizer"),Ceo=o(" or "),vR=a("a"),weo=o("LEDTokenizerFast"),Aeo=o(" (LED model)"),yeo=l(),ns=a("li"),Pre=a("strong"),Leo=o("longformer"),xeo=o(" \u2014 "),TR=a("a"),$eo=o("LongformerTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("LongformerTokenizerFast"),Reo=o(" (Longformer model)"),Beo=l(),Lg=a("li"),Ire=a("strong"),Peo=o("luke"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("LukeTokenizer"),Neo=o(" (LUKE model)"),jeo=l(),ss=a("li"),qre=a("strong"),Deo=o("lxmert"),Geo=o(" \u2014 "),CR=a("a"),Oeo=o("LxmertTokenizer"),Veo=o(" or "),wR=a("a"),Xeo=o("LxmertTokenizerFast"),zeo=o(" (LXMERT model)"),Qeo=l(),xg=a("li"),Nre=a("strong"),Weo=o("m2m_100"),Heo=o(" \u2014 "),AR=a("a"),Ueo=o("M2M100Tokenizer"),Jeo=o(" (M2M100 model)"),Yeo=l(),$g=a("li"),jre=a("strong"),Keo=o("marian"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("MarianTokenizer"),ooo=o(" (Marian model)"),roo=l(),ls=a("li"),Dre=a("strong"),too=o("mbart"),aoo=o(" \u2014 "),LR=a("a"),noo=o("MBartTokenizer"),soo=o(" or "),xR=a("a"),loo=o("MBartTokenizerFast"),ioo=o(" (mBART model)"),doo=l(),is=a("li"),Gre=a("strong"),coo=o("mbart50"),moo=o(" \u2014 "),$R=a("a"),foo=o("MBart50Tokenizer"),goo=o(" or "),kR=a("a"),hoo=o("MBart50TokenizerFast"),uoo=o(" (mBART-50 model)"),poo=l(),ds=a("li"),Ore=a("strong"),_oo=o("megatron-bert"),boo=o(" \u2014 "),SR=a("a"),Foo=o("BertTokenizer"),voo=o(" or "),RR=a("a"),Too=o("BertTokenizerFast"),Moo=o(" (MegatronBert model)"),Eoo=l(),kg=a("li"),Vre=a("strong"),Coo=o("mluke"),woo=o(" \u2014 "),BR=a("a"),Aoo=o("MLukeTokenizer"),yoo=o(" (mLUKE model)"),Loo=l(),cs=a("li"),Xre=a("strong"),xoo=o("mobilebert"),$oo=o(" \u2014 "),PR=a("a"),koo=o("MobileBertTokenizer"),Soo=o(" or "),IR=a("a"),Roo=o("MobileBertTokenizerFast"),Boo=o(" (MobileBERT model)"),Poo=l(),ms=a("li"),zre=a("strong"),Ioo=o("mpnet"),qoo=o(" \u2014 "),qR=a("a"),Noo=o("MPNetTokenizer"),joo=o(" or "),NR=a("a"),Doo=o("MPNetTokenizerFast"),Goo=o(" (MPNet model)"),Ooo=l(),fs=a("li"),Qre=a("strong"),Voo=o("mt5"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("MT5Tokenizer"),Qoo=o(" or "),DR=a("a"),Woo=o("MT5TokenizerFast"),Hoo=o(" (mT5 model)"),Uoo=l(),gs=a("li"),Wre=a("strong"),Joo=o("nystromformer"),Yoo=o(" \u2014 "),GR=a("a"),Koo=o("AlbertTokenizer"),Zoo=o(" or "),OR=a("a"),ero=o("AlbertTokenizerFast"),oro=o(" (Nystromformer model)"),rro=l(),hs=a("li"),Hre=a("strong"),tro=o("openai-gpt"),aro=o(" \u2014 "),VR=a("a"),nro=o("OpenAIGPTTokenizer"),sro=o(" or "),XR=a("a"),lro=o("OpenAIGPTTokenizerFast"),iro=o(" (OpenAI GPT model)"),dro=l(),us=a("li"),Ure=a("strong"),cro=o("pegasus"),mro=o(" \u2014 "),zR=a("a"),fro=o("PegasusTokenizer"),gro=o(" or "),QR=a("a"),hro=o("PegasusTokenizerFast"),uro=o(" (Pegasus model)"),pro=l(),Sg=a("li"),Jre=a("strong"),_ro=o("perceiver"),bro=o(" \u2014 "),WR=a("a"),Fro=o("PerceiverTokenizer"),vro=o(" (Perceiver model)"),Tro=l(),Rg=a("li"),Yre=a("strong"),Mro=o("phobert"),Ero=o(" \u2014 "),HR=a("a"),Cro=o("PhobertTokenizer"),wro=o(" (PhoBERT model)"),Aro=l(),Bg=a("li"),Kre=a("strong"),yro=o("plbart"),Lro=o(" \u2014 "),UR=a("a"),xro=o("PLBartTokenizer"),$ro=o(" (PLBart model)"),kro=l(),Pg=a("li"),Zre=a("strong"),Sro=o("prophetnet"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("ProphetNetTokenizer"),Pro=o(" (ProphetNet model)"),Iro=l(),ps=a("li"),ete=a("strong"),qro=o("qdqbert"),Nro=o(" \u2014 "),YR=a("a"),jro=o("BertTokenizer"),Dro=o(" or "),KR=a("a"),Gro=o("BertTokenizerFast"),Oro=o(" (QDQBert model)"),Vro=l(),Ig=a("li"),ote=a("strong"),Xro=o("rag"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("RagTokenizer"),Wro=o(" (RAG model)"),Hro=l(),_s=a("li"),rte=a("strong"),Uro=o("realm"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("RealmTokenizer"),Kro=o(" or "),oB=a("a"),Zro=o("RealmTokenizerFast"),eto=o(" (Realm model)"),oto=l(),bs=a("li"),tte=a("strong"),rto=o("reformer"),tto=o(" \u2014 "),rB=a("a"),ato=o("ReformerTokenizer"),nto=o(" or "),tB=a("a"),sto=o("ReformerTokenizerFast"),lto=o(" (Reformer model)"),ito=l(),Fs=a("li"),ate=a("strong"),dto=o("rembert"),cto=o(" \u2014 "),aB=a("a"),mto=o("RemBertTokenizer"),fto=o(" or "),nB=a("a"),gto=o("RemBertTokenizerFast"),hto=o(" (RemBERT model)"),uto=l(),vs=a("li"),nte=a("strong"),pto=o("retribert"),_to=o(" \u2014 "),sB=a("a"),bto=o("RetriBertTokenizer"),Fto=o(" or "),lB=a("a"),vto=o("RetriBertTokenizerFast"),Tto=o(" (RetriBERT model)"),Mto=l(),Ts=a("li"),ste=a("strong"),Eto=o("roberta"),Cto=o(" \u2014 "),iB=a("a"),wto=o("RobertaTokenizer"),Ato=o(" or "),dB=a("a"),yto=o("RobertaTokenizerFast"),Lto=o(" (RoBERTa model)"),xto=l(),Ms=a("li"),lte=a("strong"),$to=o("roformer"),kto=o(" \u2014 "),cB=a("a"),Sto=o("RoFormerTokenizer"),Rto=o(" or "),mB=a("a"),Bto=o("RoFormerTokenizerFast"),Pto=o(" (RoFormer model)"),Ito=l(),qg=a("li"),ite=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),fB=a("a"),jto=o("Speech2TextTokenizer"),Dto=o(" (Speech2Text model)"),Gto=l(),Ng=a("li"),dte=a("strong"),Oto=o("speech_to_text_2"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("Speech2Text2Tokenizer"),zto=o(" (Speech2Text2 model)"),Qto=l(),Es=a("li"),cte=a("strong"),Wto=o("splinter"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("SplinterTokenizer"),Jto=o(" or "),uB=a("a"),Yto=o("SplinterTokenizerFast"),Kto=o(" (Splinter model)"),Zto=l(),Cs=a("li"),mte=a("strong"),eao=o("squeezebert"),oao=o(" \u2014 "),pB=a("a"),rao=o("SqueezeBertTokenizer"),tao=o(" or "),_B=a("a"),aao=o("SqueezeBertTokenizerFast"),nao=o(" (SqueezeBERT model)"),sao=l(),ws=a("li"),fte=a("strong"),lao=o("t5"),iao=o(" \u2014 "),bB=a("a"),dao=o("T5Tokenizer"),cao=o(" or "),FB=a("a"),mao=o("T5TokenizerFast"),fao=o(" (T5 model)"),gao=l(),jg=a("li"),gte=a("strong"),hao=o("tapas"),uao=o(" \u2014 "),vB=a("a"),pao=o("TapasTokenizer"),_ao=o(" (TAPAS model)"),bao=l(),Dg=a("li"),hte=a("strong"),Fao=o("tapex"),vao=o(" \u2014 "),TB=a("a"),Tao=o("TapexTokenizer"),Mao=o(" (TAPEX model)"),Eao=l(),Gg=a("li"),ute=a("strong"),Cao=o("transfo-xl"),wao=o(" \u2014 "),MB=a("a"),Aao=o("TransfoXLTokenizer"),yao=o(" (Transformer-XL model)"),Lao=l(),As=a("li"),pte=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),EB=a("a"),kao=o("BertTokenizer"),Sao=o(" or "),CB=a("a"),Rao=o("BertTokenizerFast"),Bao=o(" (VisualBert model)"),Pao=l(),Og=a("li"),_te=a("strong"),Iao=o("wav2vec2"),qao=o(" \u2014 "),wB=a("a"),Nao=o("Wav2Vec2CTCTokenizer"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Vg=a("li"),bte=a("strong"),Gao=o("wav2vec2_phoneme"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("Wav2Vec2PhonemeCTCTokenizer"),Xao=o(" (Wav2Vec2Phoneme model)"),zao=l(),ys=a("li"),Fte=a("strong"),Qao=o("xglm"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("XGLMTokenizer"),Uao=o(" or "),LB=a("a"),Jao=o("XGLMTokenizerFast"),Yao=o(" (XGLM model)"),Kao=l(),Xg=a("li"),vte=a("strong"),Zao=o("xlm"),eno=o(" \u2014 "),xB=a("a"),ono=o("XLMTokenizer"),rno=o(" (XLM model)"),tno=l(),zg=a("li"),Tte=a("strong"),ano=o("xlm-prophetnet"),nno=o(" \u2014 "),$B=a("a"),sno=o("XLMProphetNetTokenizer"),lno=o(" (XLMProphetNet model)"),ino=l(),Ls=a("li"),Mte=a("strong"),dno=o("xlm-roberta"),cno=o(" \u2014 "),kB=a("a"),mno=o("XLMRobertaTokenizer"),fno=o(" or "),SB=a("a"),gno=o("XLMRobertaTokenizerFast"),hno=o(" (XLM-RoBERTa model)"),uno=l(),xs=a("li"),Ete=a("strong"),pno=o("xlm-roberta-xl"),_no=o(" \u2014 "),RB=a("a"),bno=o("RobertaTokenizer"),Fno=o(" or "),BB=a("a"),vno=o("RobertaTokenizerFast"),Tno=o(" (XLM-RoBERTa-XL model)"),Mno=l(),$s=a("li"),Cte=a("strong"),Eno=o("xlnet"),Cno=o(" \u2014 "),PB=a("a"),wno=o("XLNetTokenizer"),Ano=o(" or "),IB=a("a"),yno=o("XLNetTokenizerFast"),Lno=o(" (XLNet model)"),xno=l(),ks=a("li"),wte=a("strong"),$no=o("yoso"),kno=o(" \u2014 "),qB=a("a"),Sno=o("AlbertTokenizer"),Rno=o(" or "),NB=a("a"),Bno=o("AlbertTokenizerFast"),Pno=o(" (YOSO model)"),Ino=l(),v(Qg.$$.fragment),qno=l(),Wg=a("div"),v(oy.$$.fragment),Nno=l(),Ate=a("p"),jno=o("Register a new tokenizer in this mapping."),pPe=l(),bi=a("h2"),Hg=a("a"),yte=a("span"),v(ry.$$.fragment),Dno=l(),Lte=a("span"),Gno=o("AutoFeatureExtractor"),_Pe=l(),Ao=a("div"),v(ty.$$.fragment),Ono=l(),ay=a("p"),Vno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=a("a"),Xno=o("AutoFeatureExtractor.from_pretrained()"),zno=o(" class method."),Qno=l(),ny=a("p"),Wno=o("This class cannot be instantiated directly using "),xte=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),Qe=a("div"),v(sy.$$.fragment),Yno=l(),$te=a("p"),Kno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zno=l(),wa=a("p"),eso=o("The feature extractor class to instantiate is selected based on the "),kte=a("code"),oso=o("model_type"),rso=o(` property of the config object
(either passed as an argument or loaded from `),Ste=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),te=a("ul"),Ug=a("li"),Bte=a("strong"),iso=o("beit"),dso=o(" \u2014 "),DB=a("a"),cso=o("BeitFeatureExtractor"),mso=o(" (BEiT model)"),fso=l(),Jg=a("li"),Pte=a("strong"),gso=o("clip"),hso=o(" \u2014 "),GB=a("a"),uso=o("CLIPFeatureExtractor"),pso=o(" (CLIP model)"),_so=l(),Yg=a("li"),Ite=a("strong"),bso=o("convnext"),Fso=o(" \u2014 "),OB=a("a"),vso=o("ConvNextFeatureExtractor"),Tso=o(" (ConvNext model)"),Mso=l(),Kg=a("li"),qte=a("strong"),Eso=o("data2vec-audio"),Cso=o(" \u2014 "),VB=a("a"),wso=o("Wav2Vec2FeatureExtractor"),Aso=o(" (Data2VecAudio model)"),yso=l(),Zg=a("li"),Nte=a("strong"),Lso=o("data2vec-vision"),xso=o(" \u2014 "),XB=a("a"),$so=o("BeitFeatureExtractor"),kso=o(" (Data2VecVision model)"),Sso=l(),eh=a("li"),jte=a("strong"),Rso=o("deit"),Bso=o(" \u2014 "),zB=a("a"),Pso=o("DeiTFeatureExtractor"),Iso=o(" (DeiT model)"),qso=l(),oh=a("li"),Dte=a("strong"),Nso=o("detr"),jso=o(" \u2014 "),QB=a("a"),Dso=o("DetrFeatureExtractor"),Gso=o(" (DETR model)"),Oso=l(),rh=a("li"),Gte=a("strong"),Vso=o("dpt"),Xso=o(" \u2014 "),WB=a("a"),zso=o("DPTFeatureExtractor"),Qso=o(" (DPT model)"),Wso=l(),th=a("li"),Ote=a("strong"),Hso=o("glpn"),Uso=o(" \u2014 "),HB=a("a"),Jso=o("GLPNFeatureExtractor"),Yso=o(" (GLPN model)"),Kso=l(),ah=a("li"),Vte=a("strong"),Zso=o("hubert"),elo=o(" \u2014 "),UB=a("a"),olo=o("Wav2Vec2FeatureExtractor"),rlo=o(" (Hubert model)"),tlo=l(),nh=a("li"),Xte=a("strong"),alo=o("layoutlmv2"),nlo=o(" \u2014 "),JB=a("a"),slo=o("LayoutLMv2FeatureExtractor"),llo=o(" (LayoutLMv2 model)"),ilo=l(),sh=a("li"),zte=a("strong"),dlo=o("maskformer"),clo=o(" \u2014 "),YB=a("a"),mlo=o("MaskFormerFeatureExtractor"),flo=o(" (MaskFormer model)"),glo=l(),lh=a("li"),Qte=a("strong"),hlo=o("perceiver"),ulo=o(" \u2014 "),KB=a("a"),plo=o("PerceiverFeatureExtractor"),_lo=o(" (Perceiver model)"),blo=l(),ih=a("li"),Wte=a("strong"),Flo=o("poolformer"),vlo=o(" \u2014 "),ZB=a("a"),Tlo=o("PoolFormerFeatureExtractor"),Mlo=o(" (PoolFormer model)"),Elo=l(),dh=a("li"),Hte=a("strong"),Clo=o("regnet"),wlo=o(" \u2014 "),eP=a("a"),Alo=o("ConvNextFeatureExtractor"),ylo=o(" (RegNet model)"),Llo=l(),ch=a("li"),Ute=a("strong"),xlo=o("resnet"),$lo=o(" \u2014 "),oP=a("a"),klo=o("ConvNextFeatureExtractor"),Slo=o(" (ResNet model)"),Rlo=l(),mh=a("li"),Jte=a("strong"),Blo=o("segformer"),Plo=o(" \u2014 "),rP=a("a"),Ilo=o("SegformerFeatureExtractor"),qlo=o(" (SegFormer model)"),Nlo=l(),fh=a("li"),Yte=a("strong"),jlo=o("speech_to_text"),Dlo=o(" \u2014 "),tP=a("a"),Glo=o("Speech2TextFeatureExtractor"),Olo=o(" (Speech2Text model)"),Vlo=l(),gh=a("li"),Kte=a("strong"),Xlo=o("swin"),zlo=o(" \u2014 "),aP=a("a"),Qlo=o("ViTFeatureExtractor"),Wlo=o(" (Swin model)"),Hlo=l(),hh=a("li"),Zte=a("strong"),Ulo=o("van"),Jlo=o(" \u2014 "),nP=a("a"),Ylo=o("ConvNextFeatureExtractor"),Klo=o(" (VAN model)"),Zlo=l(),uh=a("li"),eae=a("strong"),eio=o("vit"),oio=o(" \u2014 "),sP=a("a"),rio=o("ViTFeatureExtractor"),tio=o(" (ViT model)"),aio=l(),ph=a("li"),oae=a("strong"),nio=o("vit_mae"),sio=o(" \u2014 "),lP=a("a"),lio=o("ViTFeatureExtractor"),iio=o(" (ViTMAE model)"),dio=l(),_h=a("li"),rae=a("strong"),cio=o("wav2vec2"),mio=o(" \u2014 "),iP=a("a"),fio=o("Wav2Vec2FeatureExtractor"),gio=o(" (Wav2Vec2 model)"),hio=l(),bh=a("li"),tae=a("strong"),uio=o("yolos"),pio=o(" \u2014 "),dP=a("a"),_io=o("YolosFeatureExtractor"),bio=o(" (YOLOS model)"),Fio=l(),v(Fh.$$.fragment),vio=l(),v(vh.$$.fragment),Tio=l(),Th=a("div"),v(ly.$$.fragment),Mio=l(),aae=a("p"),Eio=o("Register a new feature extractor for this class."),bPe=l(),Fi=a("h2"),Mh=a("a"),nae=a("span"),v(iy.$$.fragment),Cio=l(),sae=a("span"),wio=o("AutoProcessor"),FPe=l(),yo=a("div"),v(dy.$$.fragment),Aio=l(),cy=a("p"),yio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=a("a"),Lio=o("AutoProcessor.from_pretrained()"),xio=o(" class method."),$io=l(),my=a("p"),kio=o("This class cannot be instantiated directly using "),lae=a("code"),Sio=o("__init__()"),Rio=o(" (throws an error)."),Bio=l(),We=a("div"),v(fy.$$.fragment),Pio=l(),iae=a("p"),Iio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qio=l(),vi=a("p"),Nio=o("The processor class to instantiate is selected based on the "),dae=a("code"),jio=o("model_type"),Dio=o(` property of the config object (either
passed as an argument or loaded from `),cae=a("code"),Gio=o("pretrained_model_name_or_path"),Oio=o(" if possible):"),Vio=l(),be=a("ul"),Eh=a("li"),mae=a("strong"),Xio=o("clip"),zio=o(" \u2014 "),mP=a("a"),Qio=o("CLIPProcessor"),Wio=o(" (CLIP model)"),Hio=l(),Ch=a("li"),fae=a("strong"),Uio=o("layoutlmv2"),Jio=o(" \u2014 "),fP=a("a"),Yio=o("LayoutLMv2Processor"),Kio=o(" (LayoutLMv2 model)"),Zio=l(),wh=a("li"),gae=a("strong"),edo=o("layoutxlm"),odo=o(" \u2014 "),gP=a("a"),rdo=o("LayoutXLMProcessor"),tdo=o(" (LayoutXLM model)"),ado=l(),Ah=a("li"),hae=a("strong"),ndo=o("sew"),sdo=o(" \u2014 "),hP=a("a"),ldo=o("Wav2Vec2Processor"),ido=o(" (SEW model)"),ddo=l(),yh=a("li"),uae=a("strong"),cdo=o("sew-d"),mdo=o(" \u2014 "),uP=a("a"),fdo=o("Wav2Vec2Processor"),gdo=o(" (SEW-D model)"),hdo=l(),Lh=a("li"),pae=a("strong"),udo=o("speech_to_text"),pdo=o(" \u2014 "),pP=a("a"),_do=o("Speech2TextProcessor"),bdo=o(" (Speech2Text model)"),Fdo=l(),xh=a("li"),_ae=a("strong"),vdo=o("speech_to_text_2"),Tdo=o(" \u2014 "),_P=a("a"),Mdo=o("Speech2Text2Processor"),Edo=o(" (Speech2Text2 model)"),Cdo=l(),$h=a("li"),bae=a("strong"),wdo=o("trocr"),Ado=o(" \u2014 "),bP=a("a"),ydo=o("TrOCRProcessor"),Ldo=o(" (TrOCR model)"),xdo=l(),kh=a("li"),Fae=a("strong"),$do=o("unispeech"),kdo=o(" \u2014 "),FP=a("a"),Sdo=o("Wav2Vec2Processor"),Rdo=o(" (UniSpeech model)"),Bdo=l(),Sh=a("li"),vae=a("strong"),Pdo=o("unispeech-sat"),Ido=o(" \u2014 "),vP=a("a"),qdo=o("Wav2Vec2Processor"),Ndo=o(" (UniSpeechSat model)"),jdo=l(),Rh=a("li"),Tae=a("strong"),Ddo=o("vilt"),Gdo=o(" \u2014 "),TP=a("a"),Odo=o("ViltProcessor"),Vdo=o(" (ViLT model)"),Xdo=l(),Bh=a("li"),Mae=a("strong"),zdo=o("vision-text-dual-encoder"),Qdo=o(" \u2014 "),MP=a("a"),Wdo=o("VisionTextDualEncoderProcessor"),Hdo=o(" (VisionTextDualEncoder model)"),Udo=l(),Ph=a("li"),Eae=a("strong"),Jdo=o("wav2vec2"),Ydo=o(" \u2014 "),EP=a("a"),Kdo=o("Wav2Vec2Processor"),Zdo=o(" (Wav2Vec2 model)"),eco=l(),Ih=a("li"),Cae=a("strong"),oco=o("wavlm"),rco=o(" \u2014 "),CP=a("a"),tco=o("Wav2Vec2Processor"),aco=o(" (WavLM model)"),nco=l(),v(qh.$$.fragment),sco=l(),v(Nh.$$.fragment),lco=l(),jh=a("div"),v(gy.$$.fragment),ico=l(),wae=a("p"),dco=o("Register a new processor for this class."),vPe=l(),Ti=a("h2"),Dh=a("a"),Aae=a("span"),v(hy.$$.fragment),cco=l(),yae=a("span"),mco=o("AutoModel"),TPe=l(),Lo=a("div"),v(uy.$$.fragment),fco=l(),Mi=a("p"),gco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=a("a"),hco=o("from_pretrained()"),uco=o(" class method or the "),AP=a("a"),pco=o("from_config()"),_co=o(` class
method.`),bco=l(),py=a("p"),Fco=o("This class cannot be instantiated directly using "),Lae=a("code"),vco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),ot=a("div"),v(_y.$$.fragment),Eco=l(),xae=a("p"),Cco=o("Instantiates one of the base model classes of the library from a configuration."),wco=l(),Ei=a("p"),Aco=o(`Note:
Loading a model from its configuration file does `),$ae=a("strong"),yco=o("not"),Lco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=a("a"),xco=o("from_pretrained()"),$co=o(" to load the model weights."),kco=l(),v(Gh.$$.fragment),Sco=l(),He=a("div"),v(by.$$.fragment),Rco=l(),kae=a("p"),Bco=o("Instantiate one of the base model classes of the library from a pretrained model."),Pco=l(),Aa=a("p"),Ico=o("The model class to instantiate is selected based on the "),Sae=a("code"),qco=o("model_type"),Nco=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=a("code"),Gco=o("pretrained_model_name_or_path"),Oco=o(":"),Vco=l(),x=a("ul"),Oh=a("li"),Pae=a("strong"),Xco=o("albert"),zco=o(" \u2014 "),LP=a("a"),Qco=o("AlbertModel"),Wco=o(" (ALBERT model)"),Hco=l(),Vh=a("li"),Iae=a("strong"),Uco=o("bart"),Jco=o(" \u2014 "),xP=a("a"),Yco=o("BartModel"),Kco=o(" (BART model)"),Zco=l(),Xh=a("li"),qae=a("strong"),emo=o("beit"),omo=o(" \u2014 "),$P=a("a"),rmo=o("BeitModel"),tmo=o(" (BEiT model)"),amo=l(),zh=a("li"),Nae=a("strong"),nmo=o("bert"),smo=o(" \u2014 "),kP=a("a"),lmo=o("BertModel"),imo=o(" (BERT model)"),dmo=l(),Qh=a("li"),jae=a("strong"),cmo=o("bert-generation"),mmo=o(" \u2014 "),SP=a("a"),fmo=o("BertGenerationEncoder"),gmo=o(" (Bert Generation model)"),hmo=l(),Wh=a("li"),Dae=a("strong"),umo=o("big_bird"),pmo=o(" \u2014 "),RP=a("a"),_mo=o("BigBirdModel"),bmo=o(" (BigBird model)"),Fmo=l(),Hh=a("li"),Gae=a("strong"),vmo=o("bigbird_pegasus"),Tmo=o(" \u2014 "),BP=a("a"),Mmo=o("BigBirdPegasusModel"),Emo=o(" (BigBirdPegasus model)"),Cmo=l(),Uh=a("li"),Oae=a("strong"),wmo=o("blenderbot"),Amo=o(" \u2014 "),PP=a("a"),ymo=o("BlenderbotModel"),Lmo=o(" (Blenderbot model)"),xmo=l(),Jh=a("li"),Vae=a("strong"),$mo=o("blenderbot-small"),kmo=o(" \u2014 "),IP=a("a"),Smo=o("BlenderbotSmallModel"),Rmo=o(" (BlenderbotSmall model)"),Bmo=l(),Yh=a("li"),Xae=a("strong"),Pmo=o("camembert"),Imo=o(" \u2014 "),qP=a("a"),qmo=o("CamembertModel"),Nmo=o(" (CamemBERT model)"),jmo=l(),Kh=a("li"),zae=a("strong"),Dmo=o("canine"),Gmo=o(" \u2014 "),NP=a("a"),Omo=o("CanineModel"),Vmo=o(" (Canine model)"),Xmo=l(),Zh=a("li"),Qae=a("strong"),zmo=o("clip"),Qmo=o(" \u2014 "),jP=a("a"),Wmo=o("CLIPModel"),Hmo=o(" (CLIP model)"),Umo=l(),eu=a("li"),Wae=a("strong"),Jmo=o("convbert"),Ymo=o(" \u2014 "),DP=a("a"),Kmo=o("ConvBertModel"),Zmo=o(" (ConvBERT model)"),efo=l(),ou=a("li"),Hae=a("strong"),ofo=o("convnext"),rfo=o(" \u2014 "),GP=a("a"),tfo=o("ConvNextModel"),afo=o(" (ConvNext model)"),nfo=l(),ru=a("li"),Uae=a("strong"),sfo=o("ctrl"),lfo=o(" \u2014 "),OP=a("a"),ifo=o("CTRLModel"),dfo=o(" (CTRL model)"),cfo=l(),tu=a("li"),Jae=a("strong"),mfo=o("data2vec-audio"),ffo=o(" \u2014 "),VP=a("a"),gfo=o("Data2VecAudioModel"),hfo=o(" (Data2VecAudio model)"),ufo=l(),au=a("li"),Yae=a("strong"),pfo=o("data2vec-text"),_fo=o(" \u2014 "),XP=a("a"),bfo=o("Data2VecTextModel"),Ffo=o(" (Data2VecText model)"),vfo=l(),nu=a("li"),Kae=a("strong"),Tfo=o("data2vec-vision"),Mfo=o(" \u2014 "),zP=a("a"),Efo=o("Data2VecVisionModel"),Cfo=o(" (Data2VecVision model)"),wfo=l(),su=a("li"),Zae=a("strong"),Afo=o("deberta"),yfo=o(" \u2014 "),QP=a("a"),Lfo=o("DebertaModel"),xfo=o(" (DeBERTa model)"),$fo=l(),lu=a("li"),ene=a("strong"),kfo=o("deberta-v2"),Sfo=o(" \u2014 "),WP=a("a"),Rfo=o("DebertaV2Model"),Bfo=o(" (DeBERTa-v2 model)"),Pfo=l(),iu=a("li"),one=a("strong"),Ifo=o("decision_transformer"),qfo=o(" \u2014 "),HP=a("a"),Nfo=o("DecisionTransformerModel"),jfo=o(" (Decision Transformer model)"),Dfo=l(),du=a("li"),rne=a("strong"),Gfo=o("deit"),Ofo=o(" \u2014 "),UP=a("a"),Vfo=o("DeiTModel"),Xfo=o(" (DeiT model)"),zfo=l(),cu=a("li"),tne=a("strong"),Qfo=o("detr"),Wfo=o(" \u2014 "),JP=a("a"),Hfo=o("DetrModel"),Ufo=o(" (DETR model)"),Jfo=l(),mu=a("li"),ane=a("strong"),Yfo=o("distilbert"),Kfo=o(" \u2014 "),YP=a("a"),Zfo=o("DistilBertModel"),ego=o(" (DistilBERT model)"),ogo=l(),fu=a("li"),nne=a("strong"),rgo=o("dpr"),tgo=o(" \u2014 "),KP=a("a"),ago=o("DPRQuestionEncoder"),ngo=o(" (DPR model)"),sgo=l(),gu=a("li"),sne=a("strong"),lgo=o("dpt"),igo=o(" \u2014 "),ZP=a("a"),dgo=o("DPTModel"),cgo=o(" (DPT model)"),mgo=l(),hu=a("li"),lne=a("strong"),fgo=o("electra"),ggo=o(" \u2014 "),eI=a("a"),hgo=o("ElectraModel"),ugo=o(" (ELECTRA model)"),pgo=l(),uu=a("li"),ine=a("strong"),_go=o("flaubert"),bgo=o(" \u2014 "),oI=a("a"),Fgo=o("FlaubertModel"),vgo=o(" (FlauBERT model)"),Tgo=l(),pu=a("li"),dne=a("strong"),Mgo=o("fnet"),Ego=o(" \u2014 "),rI=a("a"),Cgo=o("FNetModel"),wgo=o(" (FNet model)"),Ago=l(),_u=a("li"),cne=a("strong"),ygo=o("fsmt"),Lgo=o(" \u2014 "),tI=a("a"),xgo=o("FSMTModel"),$go=o(" (FairSeq Machine-Translation model)"),kgo=l(),Ss=a("li"),mne=a("strong"),Sgo=o("funnel"),Rgo=o(" \u2014 "),aI=a("a"),Bgo=o("FunnelModel"),Pgo=o(" or "),nI=a("a"),Igo=o("FunnelBaseModel"),qgo=o(" (Funnel Transformer model)"),Ngo=l(),bu=a("li"),fne=a("strong"),jgo=o("glpn"),Dgo=o(" \u2014 "),sI=a("a"),Ggo=o("GLPNModel"),Ogo=o(" (GLPN model)"),Vgo=l(),Fu=a("li"),gne=a("strong"),Xgo=o("gpt2"),zgo=o(" \u2014 "),lI=a("a"),Qgo=o("GPT2Model"),Wgo=o(" (OpenAI GPT-2 model)"),Hgo=l(),vu=a("li"),hne=a("strong"),Ugo=o("gpt_neo"),Jgo=o(" \u2014 "),iI=a("a"),Ygo=o("GPTNeoModel"),Kgo=o(" (GPT Neo model)"),Zgo=l(),Tu=a("li"),une=a("strong"),eho=o("gptj"),oho=o(" \u2014 "),dI=a("a"),rho=o("GPTJModel"),tho=o(" (GPT-J model)"),aho=l(),Mu=a("li"),pne=a("strong"),nho=o("hubert"),sho=o(" \u2014 "),cI=a("a"),lho=o("HubertModel"),iho=o(" (Hubert model)"),dho=l(),Eu=a("li"),_ne=a("strong"),cho=o("ibert"),mho=o(" \u2014 "),mI=a("a"),fho=o("IBertModel"),gho=o(" (I-BERT model)"),hho=l(),Cu=a("li"),bne=a("strong"),uho=o("imagegpt"),pho=o(" \u2014 "),fI=a("a"),_ho=o("ImageGPTModel"),bho=o(" (ImageGPT model)"),Fho=l(),wu=a("li"),Fne=a("strong"),vho=o("layoutlm"),Tho=o(" \u2014 "),gI=a("a"),Mho=o("LayoutLMModel"),Eho=o(" (LayoutLM model)"),Cho=l(),Au=a("li"),vne=a("strong"),who=o("layoutlmv2"),Aho=o(" \u2014 "),hI=a("a"),yho=o("LayoutLMv2Model"),Lho=o(" (LayoutLMv2 model)"),xho=l(),yu=a("li"),Tne=a("strong"),$ho=o("led"),kho=o(" \u2014 "),uI=a("a"),Sho=o("LEDModel"),Rho=o(" (LED model)"),Bho=l(),Lu=a("li"),Mne=a("strong"),Pho=o("longformer"),Iho=o(" \u2014 "),pI=a("a"),qho=o("LongformerModel"),Nho=o(" (Longformer model)"),jho=l(),xu=a("li"),Ene=a("strong"),Dho=o("luke"),Gho=o(" \u2014 "),_I=a("a"),Oho=o("LukeModel"),Vho=o(" (LUKE model)"),Xho=l(),$u=a("li"),Cne=a("strong"),zho=o("lxmert"),Qho=o(" \u2014 "),bI=a("a"),Who=o("LxmertModel"),Hho=o(" (LXMERT model)"),Uho=l(),ku=a("li"),wne=a("strong"),Jho=o("m2m_100"),Yho=o(" \u2014 "),FI=a("a"),Kho=o("M2M100Model"),Zho=o(" (M2M100 model)"),euo=l(),Su=a("li"),Ane=a("strong"),ouo=o("marian"),ruo=o(" \u2014 "),vI=a("a"),tuo=o("MarianModel"),auo=o(" (Marian model)"),nuo=l(),Ru=a("li"),yne=a("strong"),suo=o("maskformer"),luo=o(" \u2014 "),TI=a("a"),iuo=o("MaskFormerModel"),duo=o(" (MaskFormer model)"),cuo=l(),Bu=a("li"),Lne=a("strong"),muo=o("mbart"),fuo=o(" \u2014 "),MI=a("a"),guo=o("MBartModel"),huo=o(" (mBART model)"),uuo=l(),Pu=a("li"),xne=a("strong"),puo=o("megatron-bert"),_uo=o(" \u2014 "),EI=a("a"),buo=o("MegatronBertModel"),Fuo=o(" (MegatronBert model)"),vuo=l(),Iu=a("li"),$ne=a("strong"),Tuo=o("mobilebert"),Muo=o(" \u2014 "),CI=a("a"),Euo=o("MobileBertModel"),Cuo=o(" (MobileBERT model)"),wuo=l(),qu=a("li"),kne=a("strong"),Auo=o("mpnet"),yuo=o(" \u2014 "),wI=a("a"),Luo=o("MPNetModel"),xuo=o(" (MPNet model)"),$uo=l(),Nu=a("li"),Sne=a("strong"),kuo=o("mt5"),Suo=o(" \u2014 "),AI=a("a"),Ruo=o("MT5Model"),Buo=o(" (mT5 model)"),Puo=l(),ju=a("li"),Rne=a("strong"),Iuo=o("nystromformer"),quo=o(" \u2014 "),yI=a("a"),Nuo=o("NystromformerModel"),juo=o(" (Nystromformer model)"),Duo=l(),Du=a("li"),Bne=a("strong"),Guo=o("openai-gpt"),Ouo=o(" \u2014 "),LI=a("a"),Vuo=o("OpenAIGPTModel"),Xuo=o(" (OpenAI GPT model)"),zuo=l(),Gu=a("li"),Pne=a("strong"),Quo=o("pegasus"),Wuo=o(" \u2014 "),xI=a("a"),Huo=o("PegasusModel"),Uuo=o(" (Pegasus model)"),Juo=l(),Ou=a("li"),Ine=a("strong"),Yuo=o("perceiver"),Kuo=o(" \u2014 "),$I=a("a"),Zuo=o("PerceiverModel"),epo=o(" (Perceiver model)"),opo=l(),Vu=a("li"),qne=a("strong"),rpo=o("plbart"),tpo=o(" \u2014 "),kI=a("a"),apo=o("PLBartModel"),npo=o(" (PLBart model)"),spo=l(),Xu=a("li"),Nne=a("strong"),lpo=o("poolformer"),ipo=o(" \u2014 "),SI=a("a"),dpo=o("PoolFormerModel"),cpo=o(" (PoolFormer model)"),mpo=l(),zu=a("li"),jne=a("strong"),fpo=o("prophetnet"),gpo=o(" \u2014 "),RI=a("a"),hpo=o("ProphetNetModel"),upo=o(" (ProphetNet model)"),ppo=l(),Qu=a("li"),Dne=a("strong"),_po=o("qdqbert"),bpo=o(" \u2014 "),BI=a("a"),Fpo=o("QDQBertModel"),vpo=o(" (QDQBert model)"),Tpo=l(),Wu=a("li"),Gne=a("strong"),Mpo=o("reformer"),Epo=o(" \u2014 "),PI=a("a"),Cpo=o("ReformerModel"),wpo=o(" (Reformer model)"),Apo=l(),Hu=a("li"),One=a("strong"),ypo=o("regnet"),Lpo=o(" \u2014 "),II=a("a"),xpo=o("RegNetModel"),$po=o(" (RegNet model)"),kpo=l(),Uu=a("li"),Vne=a("strong"),Spo=o("rembert"),Rpo=o(" \u2014 "),qI=a("a"),Bpo=o("RemBertModel"),Ppo=o(" (RemBERT model)"),Ipo=l(),Ju=a("li"),Xne=a("strong"),qpo=o("resnet"),Npo=o(" \u2014 "),NI=a("a"),jpo=o("ResNetModel"),Dpo=o(" (ResNet model)"),Gpo=l(),Yu=a("li"),zne=a("strong"),Opo=o("retribert"),Vpo=o(" \u2014 "),jI=a("a"),Xpo=o("RetriBertModel"),zpo=o(" (RetriBERT model)"),Qpo=l(),Ku=a("li"),Qne=a("strong"),Wpo=o("roberta"),Hpo=o(" \u2014 "),DI=a("a"),Upo=o("RobertaModel"),Jpo=o(" (RoBERTa model)"),Ypo=l(),Zu=a("li"),Wne=a("strong"),Kpo=o("roformer"),Zpo=o(" \u2014 "),GI=a("a"),e_o=o("RoFormerModel"),o_o=o(" (RoFormer model)"),r_o=l(),ep=a("li"),Hne=a("strong"),t_o=o("segformer"),a_o=o(" \u2014 "),OI=a("a"),n_o=o("SegformerModel"),s_o=o(" (SegFormer model)"),l_o=l(),op=a("li"),Une=a("strong"),i_o=o("sew"),d_o=o(" \u2014 "),VI=a("a"),c_o=o("SEWModel"),m_o=o(" (SEW model)"),f_o=l(),rp=a("li"),Jne=a("strong"),g_o=o("sew-d"),h_o=o(" \u2014 "),XI=a("a"),u_o=o("SEWDModel"),p_o=o(" (SEW-D model)"),__o=l(),tp=a("li"),Yne=a("strong"),b_o=o("speech_to_text"),F_o=o(" \u2014 "),zI=a("a"),v_o=o("Speech2TextModel"),T_o=o(" (Speech2Text model)"),M_o=l(),ap=a("li"),Kne=a("strong"),E_o=o("splinter"),C_o=o(" \u2014 "),QI=a("a"),w_o=o("SplinterModel"),A_o=o(" (Splinter model)"),y_o=l(),np=a("li"),Zne=a("strong"),L_o=o("squeezebert"),x_o=o(" \u2014 "),WI=a("a"),$_o=o("SqueezeBertModel"),k_o=o(" (SqueezeBERT model)"),S_o=l(),sp=a("li"),ese=a("strong"),R_o=o("swin"),B_o=o(" \u2014 "),HI=a("a"),P_o=o("SwinModel"),I_o=o(" (Swin model)"),q_o=l(),lp=a("li"),ose=a("strong"),N_o=o("t5"),j_o=o(" \u2014 "),UI=a("a"),D_o=o("T5Model"),G_o=o(" (T5 model)"),O_o=l(),ip=a("li"),rse=a("strong"),V_o=o("tapas"),X_o=o(" \u2014 "),JI=a("a"),z_o=o("TapasModel"),Q_o=o(" (TAPAS model)"),W_o=l(),dp=a("li"),tse=a("strong"),H_o=o("transfo-xl"),U_o=o(" \u2014 "),YI=a("a"),J_o=o("TransfoXLModel"),Y_o=o(" (Transformer-XL model)"),K_o=l(),cp=a("li"),ase=a("strong"),Z_o=o("unispeech"),ebo=o(" \u2014 "),KI=a("a"),obo=o("UniSpeechModel"),rbo=o(" (UniSpeech model)"),tbo=l(),mp=a("li"),nse=a("strong"),abo=o("unispeech-sat"),nbo=o(" \u2014 "),ZI=a("a"),sbo=o("UniSpeechSatModel"),lbo=o(" (UniSpeechSat model)"),ibo=l(),fp=a("li"),sse=a("strong"),dbo=o("van"),cbo=o(" \u2014 "),eq=a("a"),mbo=o("VanModel"),fbo=o(" (VAN model)"),gbo=l(),gp=a("li"),lse=a("strong"),hbo=o("vilt"),ubo=o(" \u2014 "),oq=a("a"),pbo=o("ViltModel"),_bo=o(" (ViLT model)"),bbo=l(),hp=a("li"),ise=a("strong"),Fbo=o("vision-text-dual-encoder"),vbo=o(" \u2014 "),rq=a("a"),Tbo=o("VisionTextDualEncoderModel"),Mbo=o(" (VisionTextDualEncoder model)"),Ebo=l(),up=a("li"),dse=a("strong"),Cbo=o("visual_bert"),wbo=o(" \u2014 "),tq=a("a"),Abo=o("VisualBertModel"),ybo=o(" (VisualBert model)"),Lbo=l(),pp=a("li"),cse=a("strong"),xbo=o("vit"),$bo=o(" \u2014 "),aq=a("a"),kbo=o("ViTModel"),Sbo=o(" (ViT model)"),Rbo=l(),_p=a("li"),mse=a("strong"),Bbo=o("vit_mae"),Pbo=o(" \u2014 "),nq=a("a"),Ibo=o("ViTMAEModel"),qbo=o(" (ViTMAE model)"),Nbo=l(),bp=a("li"),fse=a("strong"),jbo=o("wav2vec2"),Dbo=o(" \u2014 "),sq=a("a"),Gbo=o("Wav2Vec2Model"),Obo=o(" (Wav2Vec2 model)"),Vbo=l(),Fp=a("li"),gse=a("strong"),Xbo=o("wavlm"),zbo=o(" \u2014 "),lq=a("a"),Qbo=o("WavLMModel"),Wbo=o(" (WavLM model)"),Hbo=l(),vp=a("li"),hse=a("strong"),Ubo=o("xglm"),Jbo=o(" \u2014 "),iq=a("a"),Ybo=o("XGLMModel"),Kbo=o(" (XGLM model)"),Zbo=l(),Tp=a("li"),use=a("strong"),e2o=o("xlm"),o2o=o(" \u2014 "),dq=a("a"),r2o=o("XLMModel"),t2o=o(" (XLM model)"),a2o=l(),Mp=a("li"),pse=a("strong"),n2o=o("xlm-prophetnet"),s2o=o(" \u2014 "),cq=a("a"),l2o=o("XLMProphetNetModel"),i2o=o(" (XLMProphetNet model)"),d2o=l(),Ep=a("li"),_se=a("strong"),c2o=o("xlm-roberta"),m2o=o(" \u2014 "),mq=a("a"),f2o=o("XLMRobertaModel"),g2o=o(" (XLM-RoBERTa model)"),h2o=l(),Cp=a("li"),bse=a("strong"),u2o=o("xlm-roberta-xl"),p2o=o(" \u2014 "),fq=a("a"),_2o=o("XLMRobertaXLModel"),b2o=o(" (XLM-RoBERTa-XL model)"),F2o=l(),wp=a("li"),Fse=a("strong"),v2o=o("xlnet"),T2o=o(" \u2014 "),gq=a("a"),M2o=o("XLNetModel"),E2o=o(" (XLNet model)"),C2o=l(),Ap=a("li"),vse=a("strong"),w2o=o("yolos"),A2o=o(" \u2014 "),hq=a("a"),y2o=o("YolosModel"),L2o=o(" (YOLOS model)"),x2o=l(),yp=a("li"),Tse=a("strong"),$2o=o("yoso"),k2o=o(" \u2014 "),uq=a("a"),S2o=o("YosoModel"),R2o=o(" (YOSO model)"),B2o=l(),Lp=a("p"),P2o=o("The model is set in evaluation mode by default using "),Mse=a("code"),I2o=o("model.eval()"),q2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),N2o=o("model.train()"),j2o=l(),v(xp.$$.fragment),MPe=l(),Ci=a("h2"),$p=a("a"),Cse=a("span"),v(Fy.$$.fragment),D2o=l(),wse=a("span"),G2o=o("AutoModelForPreTraining"),EPe=l(),xo=a("div"),v(vy.$$.fragment),O2o=l(),wi=a("p"),V2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pq=a("a"),X2o=o("from_pretrained()"),z2o=o(" class method or the "),_q=a("a"),Q2o=o("from_config()"),W2o=o(` class
method.`),H2o=l(),Ty=a("p"),U2o=o("This class cannot be instantiated directly using "),Ase=a("code"),J2o=o("__init__()"),Y2o=o(" (throws an error)."),K2o=l(),rt=a("div"),v(My.$$.fragment),Z2o=l(),yse=a("p"),eFo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oFo=l(),Ai=a("p"),rFo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),tFo=o("not"),aFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=a("a"),nFo=o("from_pretrained()"),sFo=o(" to load the model weights."),lFo=l(),v(kp.$$.fragment),iFo=l(),Ue=a("div"),v(Ey.$$.fragment),dFo=l(),xse=a("p"),cFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mFo=l(),ya=a("p"),fFo=o("The model class to instantiate is selected based on the "),$se=a("code"),gFo=o("model_type"),hFo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),uFo=o("pretrained_model_name_or_path"),pFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),_Fo=o("pretrained_model_name_or_path"),bFo=o(":"),FFo=l(),G=a("ul"),Sp=a("li"),Rse=a("strong"),vFo=o("albert"),TFo=o(" \u2014 "),Fq=a("a"),MFo=o("AlbertForPreTraining"),EFo=o(" (ALBERT model)"),CFo=l(),Rp=a("li"),Bse=a("strong"),wFo=o("bart"),AFo=o(" \u2014 "),vq=a("a"),yFo=o("BartForConditionalGeneration"),LFo=o(" (BART model)"),xFo=l(),Bp=a("li"),Pse=a("strong"),$Fo=o("bert"),kFo=o(" \u2014 "),Tq=a("a"),SFo=o("BertForPreTraining"),RFo=o(" (BERT model)"),BFo=l(),Pp=a("li"),Ise=a("strong"),PFo=o("big_bird"),IFo=o(" \u2014 "),Mq=a("a"),qFo=o("BigBirdForPreTraining"),NFo=o(" (BigBird model)"),jFo=l(),Ip=a("li"),qse=a("strong"),DFo=o("camembert"),GFo=o(" \u2014 "),Eq=a("a"),OFo=o("CamembertForMaskedLM"),VFo=o(" (CamemBERT model)"),XFo=l(),qp=a("li"),Nse=a("strong"),zFo=o("ctrl"),QFo=o(" \u2014 "),Cq=a("a"),WFo=o("CTRLLMHeadModel"),HFo=o(" (CTRL model)"),UFo=l(),Np=a("li"),jse=a("strong"),JFo=o("data2vec-text"),YFo=o(" \u2014 "),wq=a("a"),KFo=o("Data2VecTextForMaskedLM"),ZFo=o(" (Data2VecText model)"),evo=l(),jp=a("li"),Dse=a("strong"),ovo=o("deberta"),rvo=o(" \u2014 "),Aq=a("a"),tvo=o("DebertaForMaskedLM"),avo=o(" (DeBERTa model)"),nvo=l(),Dp=a("li"),Gse=a("strong"),svo=o("deberta-v2"),lvo=o(" \u2014 "),yq=a("a"),ivo=o("DebertaV2ForMaskedLM"),dvo=o(" (DeBERTa-v2 model)"),cvo=l(),Gp=a("li"),Ose=a("strong"),mvo=o("distilbert"),fvo=o(" \u2014 "),Lq=a("a"),gvo=o("DistilBertForMaskedLM"),hvo=o(" (DistilBERT model)"),uvo=l(),Op=a("li"),Vse=a("strong"),pvo=o("electra"),_vo=o(" \u2014 "),xq=a("a"),bvo=o("ElectraForPreTraining"),Fvo=o(" (ELECTRA model)"),vvo=l(),Vp=a("li"),Xse=a("strong"),Tvo=o("flaubert"),Mvo=o(" \u2014 "),$q=a("a"),Evo=o("FlaubertWithLMHeadModel"),Cvo=o(" (FlauBERT model)"),wvo=l(),Xp=a("li"),zse=a("strong"),Avo=o("fnet"),yvo=o(" \u2014 "),kq=a("a"),Lvo=o("FNetForPreTraining"),xvo=o(" (FNet model)"),$vo=l(),zp=a("li"),Qse=a("strong"),kvo=o("fsmt"),Svo=o(" \u2014 "),Sq=a("a"),Rvo=o("FSMTForConditionalGeneration"),Bvo=o(" (FairSeq Machine-Translation model)"),Pvo=l(),Qp=a("li"),Wse=a("strong"),Ivo=o("funnel"),qvo=o(" \u2014 "),Rq=a("a"),Nvo=o("FunnelForPreTraining"),jvo=o(" (Funnel Transformer model)"),Dvo=l(),Wp=a("li"),Hse=a("strong"),Gvo=o("gpt2"),Ovo=o(" \u2014 "),Bq=a("a"),Vvo=o("GPT2LMHeadModel"),Xvo=o(" (OpenAI GPT-2 model)"),zvo=l(),Hp=a("li"),Use=a("strong"),Qvo=o("ibert"),Wvo=o(" \u2014 "),Pq=a("a"),Hvo=o("IBertForMaskedLM"),Uvo=o(" (I-BERT model)"),Jvo=l(),Up=a("li"),Jse=a("strong"),Yvo=o("layoutlm"),Kvo=o(" \u2014 "),Iq=a("a"),Zvo=o("LayoutLMForMaskedLM"),e1o=o(" (LayoutLM model)"),o1o=l(),Jp=a("li"),Yse=a("strong"),r1o=o("longformer"),t1o=o(" \u2014 "),qq=a("a"),a1o=o("LongformerForMaskedLM"),n1o=o(" (Longformer model)"),s1o=l(),Yp=a("li"),Kse=a("strong"),l1o=o("lxmert"),i1o=o(" \u2014 "),Nq=a("a"),d1o=o("LxmertForPreTraining"),c1o=o(" (LXMERT model)"),m1o=l(),Kp=a("li"),Zse=a("strong"),f1o=o("megatron-bert"),g1o=o(" \u2014 "),jq=a("a"),h1o=o("MegatronBertForPreTraining"),u1o=o(" (MegatronBert model)"),p1o=l(),Zp=a("li"),ele=a("strong"),_1o=o("mobilebert"),b1o=o(" \u2014 "),Dq=a("a"),F1o=o("MobileBertForPreTraining"),v1o=o(" (MobileBERT model)"),T1o=l(),e_=a("li"),ole=a("strong"),M1o=o("mpnet"),E1o=o(" \u2014 "),Gq=a("a"),C1o=o("MPNetForMaskedLM"),w1o=o(" (MPNet model)"),A1o=l(),o_=a("li"),rle=a("strong"),y1o=o("openai-gpt"),L1o=o(" \u2014 "),Oq=a("a"),x1o=o("OpenAIGPTLMHeadModel"),$1o=o(" (OpenAI GPT model)"),k1o=l(),r_=a("li"),tle=a("strong"),S1o=o("retribert"),R1o=o(" \u2014 "),Vq=a("a"),B1o=o("RetriBertModel"),P1o=o(" (RetriBERT model)"),I1o=l(),t_=a("li"),ale=a("strong"),q1o=o("roberta"),N1o=o(" \u2014 "),Xq=a("a"),j1o=o("RobertaForMaskedLM"),D1o=o(" (RoBERTa model)"),G1o=l(),a_=a("li"),nle=a("strong"),O1o=o("squeezebert"),V1o=o(" \u2014 "),zq=a("a"),X1o=o("SqueezeBertForMaskedLM"),z1o=o(" (SqueezeBERT model)"),Q1o=l(),n_=a("li"),sle=a("strong"),W1o=o("t5"),H1o=o(" \u2014 "),Qq=a("a"),U1o=o("T5ForConditionalGeneration"),J1o=o(" (T5 model)"),Y1o=l(),s_=a("li"),lle=a("strong"),K1o=o("tapas"),Z1o=o(" \u2014 "),Wq=a("a"),eTo=o("TapasForMaskedLM"),oTo=o(" (TAPAS model)"),rTo=l(),l_=a("li"),ile=a("strong"),tTo=o("transfo-xl"),aTo=o(" \u2014 "),Hq=a("a"),nTo=o("TransfoXLLMHeadModel"),sTo=o(" (Transformer-XL model)"),lTo=l(),i_=a("li"),dle=a("strong"),iTo=o("unispeech"),dTo=o(" \u2014 "),Uq=a("a"),cTo=o("UniSpeechForPreTraining"),mTo=o(" (UniSpeech model)"),fTo=l(),d_=a("li"),cle=a("strong"),gTo=o("unispeech-sat"),hTo=o(" \u2014 "),Jq=a("a"),uTo=o("UniSpeechSatForPreTraining"),pTo=o(" (UniSpeechSat model)"),_To=l(),c_=a("li"),mle=a("strong"),bTo=o("visual_bert"),FTo=o(" \u2014 "),Yq=a("a"),vTo=o("VisualBertForPreTraining"),TTo=o(" (VisualBert model)"),MTo=l(),m_=a("li"),fle=a("strong"),ETo=o("vit_mae"),CTo=o(" \u2014 "),Kq=a("a"),wTo=o("ViTMAEForPreTraining"),ATo=o(" (ViTMAE model)"),yTo=l(),f_=a("li"),gle=a("strong"),LTo=o("wav2vec2"),xTo=o(" \u2014 "),Zq=a("a"),$To=o("Wav2Vec2ForPreTraining"),kTo=o(" (Wav2Vec2 model)"),STo=l(),g_=a("li"),hle=a("strong"),RTo=o("xlm"),BTo=o(" \u2014 "),eN=a("a"),PTo=o("XLMWithLMHeadModel"),ITo=o(" (XLM model)"),qTo=l(),h_=a("li"),ule=a("strong"),NTo=o("xlm-roberta"),jTo=o(" \u2014 "),oN=a("a"),DTo=o("XLMRobertaForMaskedLM"),GTo=o(" (XLM-RoBERTa model)"),OTo=l(),u_=a("li"),ple=a("strong"),VTo=o("xlm-roberta-xl"),XTo=o(" \u2014 "),rN=a("a"),zTo=o("XLMRobertaXLForMaskedLM"),QTo=o(" (XLM-RoBERTa-XL model)"),WTo=l(),p_=a("li"),_le=a("strong"),HTo=o("xlnet"),UTo=o(" \u2014 "),tN=a("a"),JTo=o("XLNetLMHeadModel"),YTo=o(" (XLNet model)"),KTo=l(),__=a("p"),ZTo=o("The model is set in evaluation mode by default using "),ble=a("code"),eMo=o("model.eval()"),oMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),rMo=o("model.train()"),tMo=l(),v(b_.$$.fragment),CPe=l(),yi=a("h2"),F_=a("a"),vle=a("span"),v(Cy.$$.fragment),aMo=l(),Tle=a("span"),nMo=o("AutoModelForCausalLM"),wPe=l(),$o=a("div"),v(wy.$$.fragment),sMo=l(),Li=a("p"),lMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=a("a"),iMo=o("from_pretrained()"),dMo=o(" class method or the "),nN=a("a"),cMo=o("from_config()"),mMo=o(` class
method.`),fMo=l(),Ay=a("p"),gMo=o("This class cannot be instantiated directly using "),Mle=a("code"),hMo=o("__init__()"),uMo=o(" (throws an error)."),pMo=l(),tt=a("div"),v(yy.$$.fragment),_Mo=l(),Ele=a("p"),bMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FMo=l(),xi=a("p"),vMo=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),TMo=o("not"),MMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),EMo=o("from_pretrained()"),CMo=o(" to load the model weights."),wMo=l(),v(v_.$$.fragment),AMo=l(),Je=a("div"),v(Ly.$$.fragment),yMo=l(),wle=a("p"),LMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xMo=l(),La=a("p"),$Mo=o("The model class to instantiate is selected based on the "),Ale=a("code"),kMo=o("model_type"),SMo=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),RMo=o("pretrained_model_name_or_path"),BMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),PMo=o("pretrained_model_name_or_path"),IMo=o(":"),qMo=l(),z=a("ul"),T_=a("li"),xle=a("strong"),NMo=o("bart"),jMo=o(" \u2014 "),lN=a("a"),DMo=o("BartForCausalLM"),GMo=o(" (BART model)"),OMo=l(),M_=a("li"),$le=a("strong"),VMo=o("bert"),XMo=o(" \u2014 "),iN=a("a"),zMo=o("BertLMHeadModel"),QMo=o(" (BERT model)"),WMo=l(),E_=a("li"),kle=a("strong"),HMo=o("bert-generation"),UMo=o(" \u2014 "),dN=a("a"),JMo=o("BertGenerationDecoder"),YMo=o(" (Bert Generation model)"),KMo=l(),C_=a("li"),Sle=a("strong"),ZMo=o("big_bird"),e4o=o(" \u2014 "),cN=a("a"),o4o=o("BigBirdForCausalLM"),r4o=o(" (BigBird model)"),t4o=l(),w_=a("li"),Rle=a("strong"),a4o=o("bigbird_pegasus"),n4o=o(" \u2014 "),mN=a("a"),s4o=o("BigBirdPegasusForCausalLM"),l4o=o(" (BigBirdPegasus model)"),i4o=l(),A_=a("li"),Ble=a("strong"),d4o=o("blenderbot"),c4o=o(" \u2014 "),fN=a("a"),m4o=o("BlenderbotForCausalLM"),f4o=o(" (Blenderbot model)"),g4o=l(),y_=a("li"),Ple=a("strong"),h4o=o("blenderbot-small"),u4o=o(" \u2014 "),gN=a("a"),p4o=o("BlenderbotSmallForCausalLM"),_4o=o(" (BlenderbotSmall model)"),b4o=l(),L_=a("li"),Ile=a("strong"),F4o=o("camembert"),v4o=o(" \u2014 "),hN=a("a"),T4o=o("CamembertForCausalLM"),M4o=o(" (CamemBERT model)"),E4o=l(),x_=a("li"),qle=a("strong"),C4o=o("ctrl"),w4o=o(" \u2014 "),uN=a("a"),A4o=o("CTRLLMHeadModel"),y4o=o(" (CTRL model)"),L4o=l(),$_=a("li"),Nle=a("strong"),x4o=o("data2vec-text"),$4o=o(" \u2014 "),pN=a("a"),k4o=o("Data2VecTextForCausalLM"),S4o=o(" (Data2VecText model)"),R4o=l(),k_=a("li"),jle=a("strong"),B4o=o("electra"),P4o=o(" \u2014 "),_N=a("a"),I4o=o("ElectraForCausalLM"),q4o=o(" (ELECTRA model)"),N4o=l(),S_=a("li"),Dle=a("strong"),j4o=o("gpt2"),D4o=o(" \u2014 "),bN=a("a"),G4o=o("GPT2LMHeadModel"),O4o=o(" (OpenAI GPT-2 model)"),V4o=l(),R_=a("li"),Gle=a("strong"),X4o=o("gpt_neo"),z4o=o(" \u2014 "),FN=a("a"),Q4o=o("GPTNeoForCausalLM"),W4o=o(" (GPT Neo model)"),H4o=l(),B_=a("li"),Ole=a("strong"),U4o=o("gptj"),J4o=o(" \u2014 "),vN=a("a"),Y4o=o("GPTJForCausalLM"),K4o=o(" (GPT-J model)"),Z4o=l(),P_=a("li"),Vle=a("strong"),eEo=o("marian"),oEo=o(" \u2014 "),TN=a("a"),rEo=o("MarianForCausalLM"),tEo=o(" (Marian model)"),aEo=l(),I_=a("li"),Xle=a("strong"),nEo=o("mbart"),sEo=o(" \u2014 "),MN=a("a"),lEo=o("MBartForCausalLM"),iEo=o(" (mBART model)"),dEo=l(),q_=a("li"),zle=a("strong"),cEo=o("megatron-bert"),mEo=o(" \u2014 "),EN=a("a"),fEo=o("MegatronBertForCausalLM"),gEo=o(" (MegatronBert model)"),hEo=l(),N_=a("li"),Qle=a("strong"),uEo=o("openai-gpt"),pEo=o(" \u2014 "),CN=a("a"),_Eo=o("OpenAIGPTLMHeadModel"),bEo=o(" (OpenAI GPT model)"),FEo=l(),j_=a("li"),Wle=a("strong"),vEo=o("pegasus"),TEo=o(" \u2014 "),wN=a("a"),MEo=o("PegasusForCausalLM"),EEo=o(" (Pegasus model)"),CEo=l(),D_=a("li"),Hle=a("strong"),wEo=o("plbart"),AEo=o(" \u2014 "),AN=a("a"),yEo=o("PLBartForCausalLM"),LEo=o(" (PLBart model)"),xEo=l(),G_=a("li"),Ule=a("strong"),$Eo=o("prophetnet"),kEo=o(" \u2014 "),yN=a("a"),SEo=o("ProphetNetForCausalLM"),REo=o(" (ProphetNet model)"),BEo=l(),O_=a("li"),Jle=a("strong"),PEo=o("qdqbert"),IEo=o(" \u2014 "),LN=a("a"),qEo=o("QDQBertLMHeadModel"),NEo=o(" (QDQBert model)"),jEo=l(),V_=a("li"),Yle=a("strong"),DEo=o("reformer"),GEo=o(" \u2014 "),xN=a("a"),OEo=o("ReformerModelWithLMHead"),VEo=o(" (Reformer model)"),XEo=l(),X_=a("li"),Kle=a("strong"),zEo=o("rembert"),QEo=o(" \u2014 "),$N=a("a"),WEo=o("RemBertForCausalLM"),HEo=o(" (RemBERT model)"),UEo=l(),z_=a("li"),Zle=a("strong"),JEo=o("roberta"),YEo=o(" \u2014 "),kN=a("a"),KEo=o("RobertaForCausalLM"),ZEo=o(" (RoBERTa model)"),e5o=l(),Q_=a("li"),eie=a("strong"),o5o=o("roformer"),r5o=o(" \u2014 "),SN=a("a"),t5o=o("RoFormerForCausalLM"),a5o=o(" (RoFormer model)"),n5o=l(),W_=a("li"),oie=a("strong"),s5o=o("speech_to_text_2"),l5o=o(" \u2014 "),RN=a("a"),i5o=o("Speech2Text2ForCausalLM"),d5o=o(" (Speech2Text2 model)"),c5o=l(),H_=a("li"),rie=a("strong"),m5o=o("transfo-xl"),f5o=o(" \u2014 "),BN=a("a"),g5o=o("TransfoXLLMHeadModel"),h5o=o(" (Transformer-XL model)"),u5o=l(),U_=a("li"),tie=a("strong"),p5o=o("trocr"),_5o=o(" \u2014 "),PN=a("a"),b5o=o("TrOCRForCausalLM"),F5o=o(" (TrOCR model)"),v5o=l(),J_=a("li"),aie=a("strong"),T5o=o("xglm"),M5o=o(" \u2014 "),IN=a("a"),E5o=o("XGLMForCausalLM"),C5o=o(" (XGLM model)"),w5o=l(),Y_=a("li"),nie=a("strong"),A5o=o("xlm"),y5o=o(" \u2014 "),qN=a("a"),L5o=o("XLMWithLMHeadModel"),x5o=o(" (XLM model)"),$5o=l(),K_=a("li"),sie=a("strong"),k5o=o("xlm-prophetnet"),S5o=o(" \u2014 "),NN=a("a"),R5o=o("XLMProphetNetForCausalLM"),B5o=o(" (XLMProphetNet model)"),P5o=l(),Z_=a("li"),lie=a("strong"),I5o=o("xlm-roberta"),q5o=o(" \u2014 "),jN=a("a"),N5o=o("XLMRobertaForCausalLM"),j5o=o(" (XLM-RoBERTa model)"),D5o=l(),eb=a("li"),iie=a("strong"),G5o=o("xlm-roberta-xl"),O5o=o(" \u2014 "),DN=a("a"),V5o=o("XLMRobertaXLForCausalLM"),X5o=o(" (XLM-RoBERTa-XL model)"),z5o=l(),ob=a("li"),die=a("strong"),Q5o=o("xlnet"),W5o=o(" \u2014 "),GN=a("a"),H5o=o("XLNetLMHeadModel"),U5o=o(" (XLNet model)"),J5o=l(),rb=a("p"),Y5o=o("The model is set in evaluation mode by default using "),cie=a("code"),K5o=o("model.eval()"),Z5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),eCo=o("model.train()"),oCo=l(),v(tb.$$.fragment),APe=l(),$i=a("h2"),ab=a("a"),fie=a("span"),v(xy.$$.fragment),rCo=l(),gie=a("span"),tCo=o("AutoModelForMaskedLM"),yPe=l(),ko=a("div"),v($y.$$.fragment),aCo=l(),ki=a("p"),nCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=a("a"),sCo=o("from_pretrained()"),lCo=o(" class method or the "),VN=a("a"),iCo=o("from_config()"),dCo=o(` class
method.`),cCo=l(),ky=a("p"),mCo=o("This class cannot be instantiated directly using "),hie=a("code"),fCo=o("__init__()"),gCo=o(" (throws an error)."),hCo=l(),at=a("div"),v(Sy.$$.fragment),uCo=l(),uie=a("p"),pCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Co=l(),Si=a("p"),bCo=o(`Note:
Loading a model from its configuration file does `),pie=a("strong"),FCo=o("not"),vCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),TCo=o("from_pretrained()"),MCo=o(" to load the model weights."),ECo=l(),v(nb.$$.fragment),CCo=l(),Ye=a("div"),v(Ry.$$.fragment),wCo=l(),_ie=a("p"),ACo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yCo=l(),xa=a("p"),LCo=o("The model class to instantiate is selected based on the "),bie=a("code"),xCo=o("model_type"),$Co=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),kCo=o("pretrained_model_name_or_path"),SCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),RCo=o("pretrained_model_name_or_path"),BCo=o(":"),PCo=l(),Q=a("ul"),sb=a("li"),Tie=a("strong"),ICo=o("albert"),qCo=o(" \u2014 "),zN=a("a"),NCo=o("AlbertForMaskedLM"),jCo=o(" (ALBERT model)"),DCo=l(),lb=a("li"),Mie=a("strong"),GCo=o("bart"),OCo=o(" \u2014 "),QN=a("a"),VCo=o("BartForConditionalGeneration"),XCo=o(" (BART model)"),zCo=l(),ib=a("li"),Eie=a("strong"),QCo=o("bert"),WCo=o(" \u2014 "),WN=a("a"),HCo=o("BertForMaskedLM"),UCo=o(" (BERT model)"),JCo=l(),db=a("li"),Cie=a("strong"),YCo=o("big_bird"),KCo=o(" \u2014 "),HN=a("a"),ZCo=o("BigBirdForMaskedLM"),e3o=o(" (BigBird model)"),o3o=l(),cb=a("li"),wie=a("strong"),r3o=o("camembert"),t3o=o(" \u2014 "),UN=a("a"),a3o=o("CamembertForMaskedLM"),n3o=o(" (CamemBERT model)"),s3o=l(),mb=a("li"),Aie=a("strong"),l3o=o("convbert"),i3o=o(" \u2014 "),JN=a("a"),d3o=o("ConvBertForMaskedLM"),c3o=o(" (ConvBERT model)"),m3o=l(),fb=a("li"),yie=a("strong"),f3o=o("data2vec-text"),g3o=o(" \u2014 "),YN=a("a"),h3o=o("Data2VecTextForMaskedLM"),u3o=o(" (Data2VecText model)"),p3o=l(),gb=a("li"),Lie=a("strong"),_3o=o("deberta"),b3o=o(" \u2014 "),KN=a("a"),F3o=o("DebertaForMaskedLM"),v3o=o(" (DeBERTa model)"),T3o=l(),hb=a("li"),xie=a("strong"),M3o=o("deberta-v2"),E3o=o(" \u2014 "),ZN=a("a"),C3o=o("DebertaV2ForMaskedLM"),w3o=o(" (DeBERTa-v2 model)"),A3o=l(),ub=a("li"),$ie=a("strong"),y3o=o("distilbert"),L3o=o(" \u2014 "),ej=a("a"),x3o=o("DistilBertForMaskedLM"),$3o=o(" (DistilBERT model)"),k3o=l(),pb=a("li"),kie=a("strong"),S3o=o("electra"),R3o=o(" \u2014 "),oj=a("a"),B3o=o("ElectraForMaskedLM"),P3o=o(" (ELECTRA model)"),I3o=l(),_b=a("li"),Sie=a("strong"),q3o=o("flaubert"),N3o=o(" \u2014 "),rj=a("a"),j3o=o("FlaubertWithLMHeadModel"),D3o=o(" (FlauBERT model)"),G3o=l(),bb=a("li"),Rie=a("strong"),O3o=o("fnet"),V3o=o(" \u2014 "),tj=a("a"),X3o=o("FNetForMaskedLM"),z3o=o(" (FNet model)"),Q3o=l(),Fb=a("li"),Bie=a("strong"),W3o=o("funnel"),H3o=o(" \u2014 "),aj=a("a"),U3o=o("FunnelForMaskedLM"),J3o=o(" (Funnel Transformer model)"),Y3o=l(),vb=a("li"),Pie=a("strong"),K3o=o("ibert"),Z3o=o(" \u2014 "),nj=a("a"),ewo=o("IBertForMaskedLM"),owo=o(" (I-BERT model)"),rwo=l(),Tb=a("li"),Iie=a("strong"),two=o("layoutlm"),awo=o(" \u2014 "),sj=a("a"),nwo=o("LayoutLMForMaskedLM"),swo=o(" (LayoutLM model)"),lwo=l(),Mb=a("li"),qie=a("strong"),iwo=o("longformer"),dwo=o(" \u2014 "),lj=a("a"),cwo=o("LongformerForMaskedLM"),mwo=o(" (Longformer model)"),fwo=l(),Eb=a("li"),Nie=a("strong"),gwo=o("mbart"),hwo=o(" \u2014 "),ij=a("a"),uwo=o("MBartForConditionalGeneration"),pwo=o(" (mBART model)"),_wo=l(),Cb=a("li"),jie=a("strong"),bwo=o("megatron-bert"),Fwo=o(" \u2014 "),dj=a("a"),vwo=o("MegatronBertForMaskedLM"),Two=o(" (MegatronBert model)"),Mwo=l(),wb=a("li"),Die=a("strong"),Ewo=o("mobilebert"),Cwo=o(" \u2014 "),cj=a("a"),wwo=o("MobileBertForMaskedLM"),Awo=o(" (MobileBERT model)"),ywo=l(),Ab=a("li"),Gie=a("strong"),Lwo=o("mpnet"),xwo=o(" \u2014 "),mj=a("a"),$wo=o("MPNetForMaskedLM"),kwo=o(" (MPNet model)"),Swo=l(),yb=a("li"),Oie=a("strong"),Rwo=o("nystromformer"),Bwo=o(" \u2014 "),fj=a("a"),Pwo=o("NystromformerForMaskedLM"),Iwo=o(" (Nystromformer model)"),qwo=l(),Lb=a("li"),Vie=a("strong"),Nwo=o("perceiver"),jwo=o(" \u2014 "),gj=a("a"),Dwo=o("PerceiverForMaskedLM"),Gwo=o(" (Perceiver model)"),Owo=l(),xb=a("li"),Xie=a("strong"),Vwo=o("qdqbert"),Xwo=o(" \u2014 "),hj=a("a"),zwo=o("QDQBertForMaskedLM"),Qwo=o(" (QDQBert model)"),Wwo=l(),$b=a("li"),zie=a("strong"),Hwo=o("reformer"),Uwo=o(" \u2014 "),uj=a("a"),Jwo=o("ReformerForMaskedLM"),Ywo=o(" (Reformer model)"),Kwo=l(),kb=a("li"),Qie=a("strong"),Zwo=o("rembert"),eAo=o(" \u2014 "),pj=a("a"),oAo=o("RemBertForMaskedLM"),rAo=o(" (RemBERT model)"),tAo=l(),Sb=a("li"),Wie=a("strong"),aAo=o("roberta"),nAo=o(" \u2014 "),_j=a("a"),sAo=o("RobertaForMaskedLM"),lAo=o(" (RoBERTa model)"),iAo=l(),Rb=a("li"),Hie=a("strong"),dAo=o("roformer"),cAo=o(" \u2014 "),bj=a("a"),mAo=o("RoFormerForMaskedLM"),fAo=o(" (RoFormer model)"),gAo=l(),Bb=a("li"),Uie=a("strong"),hAo=o("squeezebert"),uAo=o(" \u2014 "),Fj=a("a"),pAo=o("SqueezeBertForMaskedLM"),_Ao=o(" (SqueezeBERT model)"),bAo=l(),Pb=a("li"),Jie=a("strong"),FAo=o("tapas"),vAo=o(" \u2014 "),vj=a("a"),TAo=o("TapasForMaskedLM"),MAo=o(" (TAPAS model)"),EAo=l(),Ib=a("li"),Yie=a("strong"),CAo=o("wav2vec2"),wAo=o(" \u2014 "),Kie=a("code"),AAo=o("Wav2Vec2ForMaskedLM"),yAo=o(" (Wav2Vec2 model)"),LAo=l(),qb=a("li"),Zie=a("strong"),xAo=o("xlm"),$Ao=o(" \u2014 "),Tj=a("a"),kAo=o("XLMWithLMHeadModel"),SAo=o(" (XLM model)"),RAo=l(),Nb=a("li"),ede=a("strong"),BAo=o("xlm-roberta"),PAo=o(" \u2014 "),Mj=a("a"),IAo=o("XLMRobertaForMaskedLM"),qAo=o(" (XLM-RoBERTa model)"),NAo=l(),jb=a("li"),ode=a("strong"),jAo=o("xlm-roberta-xl"),DAo=o(" \u2014 "),Ej=a("a"),GAo=o("XLMRobertaXLForMaskedLM"),OAo=o(" (XLM-RoBERTa-XL model)"),VAo=l(),Db=a("li"),rde=a("strong"),XAo=o("yoso"),zAo=o(" \u2014 "),Cj=a("a"),QAo=o("YosoForMaskedLM"),WAo=o(" (YOSO model)"),HAo=l(),Gb=a("p"),UAo=o("The model is set in evaluation mode by default using "),tde=a("code"),JAo=o("model.eval()"),YAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),KAo=o("model.train()"),ZAo=l(),v(Ob.$$.fragment),LPe=l(),Ri=a("h2"),Vb=a("a"),nde=a("span"),v(By.$$.fragment),e0o=l(),sde=a("span"),o0o=o("AutoModelForSeq2SeqLM"),xPe=l(),So=a("div"),v(Py.$$.fragment),r0o=l(),Bi=a("p"),t0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=a("a"),a0o=o("from_pretrained()"),n0o=o(" class method or the "),Aj=a("a"),s0o=o("from_config()"),l0o=o(` class
method.`),i0o=l(),Iy=a("p"),d0o=o("This class cannot be instantiated directly using "),lde=a("code"),c0o=o("__init__()"),m0o=o(" (throws an error)."),f0o=l(),nt=a("div"),v(qy.$$.fragment),g0o=l(),ide=a("p"),h0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),u0o=l(),Pi=a("p"),p0o=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),_0o=o("not"),b0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),F0o=o("from_pretrained()"),v0o=o(" to load the model weights."),T0o=l(),v(Xb.$$.fragment),M0o=l(),Ke=a("div"),v(Ny.$$.fragment),E0o=l(),cde=a("p"),C0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w0o=l(),$a=a("p"),A0o=o("The model class to instantiate is selected based on the "),mde=a("code"),y0o=o("model_type"),L0o=o(` property of the config object (either
passed as an argument or loaded from `),fde=a("code"),x0o=o("pretrained_model_name_or_path"),$0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),k0o=o("pretrained_model_name_or_path"),S0o=o(":"),R0o=l(),he=a("ul"),zb=a("li"),hde=a("strong"),B0o=o("bart"),P0o=o(" \u2014 "),Lj=a("a"),I0o=o("BartForConditionalGeneration"),q0o=o(" (BART model)"),N0o=l(),Qb=a("li"),ude=a("strong"),j0o=o("bigbird_pegasus"),D0o=o(" \u2014 "),xj=a("a"),G0o=o("BigBirdPegasusForConditionalGeneration"),O0o=o(" (BigBirdPegasus model)"),V0o=l(),Wb=a("li"),pde=a("strong"),X0o=o("blenderbot"),z0o=o(" \u2014 "),$j=a("a"),Q0o=o("BlenderbotForConditionalGeneration"),W0o=o(" (Blenderbot model)"),H0o=l(),Hb=a("li"),_de=a("strong"),U0o=o("blenderbot-small"),J0o=o(" \u2014 "),kj=a("a"),Y0o=o("BlenderbotSmallForConditionalGeneration"),K0o=o(" (BlenderbotSmall model)"),Z0o=l(),Ub=a("li"),bde=a("strong"),e6o=o("encoder-decoder"),o6o=o(" \u2014 "),Sj=a("a"),r6o=o("EncoderDecoderModel"),t6o=o(" (Encoder decoder model)"),a6o=l(),Jb=a("li"),Fde=a("strong"),n6o=o("fsmt"),s6o=o(" \u2014 "),Rj=a("a"),l6o=o("FSMTForConditionalGeneration"),i6o=o(" (FairSeq Machine-Translation model)"),d6o=l(),Yb=a("li"),vde=a("strong"),c6o=o("led"),m6o=o(" \u2014 "),Bj=a("a"),f6o=o("LEDForConditionalGeneration"),g6o=o(" (LED model)"),h6o=l(),Kb=a("li"),Tde=a("strong"),u6o=o("m2m_100"),p6o=o(" \u2014 "),Pj=a("a"),_6o=o("M2M100ForConditionalGeneration"),b6o=o(" (M2M100 model)"),F6o=l(),Zb=a("li"),Mde=a("strong"),v6o=o("marian"),T6o=o(" \u2014 "),Ij=a("a"),M6o=o("MarianMTModel"),E6o=o(" (Marian model)"),C6o=l(),e2=a("li"),Ede=a("strong"),w6o=o("mbart"),A6o=o(" \u2014 "),qj=a("a"),y6o=o("MBartForConditionalGeneration"),L6o=o(" (mBART model)"),x6o=l(),o2=a("li"),Cde=a("strong"),$6o=o("mt5"),k6o=o(" \u2014 "),Nj=a("a"),S6o=o("MT5ForConditionalGeneration"),R6o=o(" (mT5 model)"),B6o=l(),r2=a("li"),wde=a("strong"),P6o=o("pegasus"),I6o=o(" \u2014 "),jj=a("a"),q6o=o("PegasusForConditionalGeneration"),N6o=o(" (Pegasus model)"),j6o=l(),t2=a("li"),Ade=a("strong"),D6o=o("plbart"),G6o=o(" \u2014 "),Dj=a("a"),O6o=o("PLBartForConditionalGeneration"),V6o=o(" (PLBart model)"),X6o=l(),a2=a("li"),yde=a("strong"),z6o=o("prophetnet"),Q6o=o(" \u2014 "),Gj=a("a"),W6o=o("ProphetNetForConditionalGeneration"),H6o=o(" (ProphetNet model)"),U6o=l(),n2=a("li"),Lde=a("strong"),J6o=o("t5"),Y6o=o(" \u2014 "),Oj=a("a"),K6o=o("T5ForConditionalGeneration"),Z6o=o(" (T5 model)"),eyo=l(),s2=a("li"),xde=a("strong"),oyo=o("tapex"),ryo=o(" \u2014 "),Vj=a("a"),tyo=o("BartForConditionalGeneration"),ayo=o(" (TAPEX model)"),nyo=l(),l2=a("li"),$de=a("strong"),syo=o("xlm-prophetnet"),lyo=o(" \u2014 "),Xj=a("a"),iyo=o("XLMProphetNetForConditionalGeneration"),dyo=o(" (XLMProphetNet model)"),cyo=l(),i2=a("p"),myo=o("The model is set in evaluation mode by default using "),kde=a("code"),fyo=o("model.eval()"),gyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),hyo=o("model.train()"),uyo=l(),v(d2.$$.fragment),$Pe=l(),Ii=a("h2"),c2=a("a"),Rde=a("span"),v(jy.$$.fragment),pyo=l(),Bde=a("span"),_yo=o("AutoModelForSequenceClassification"),kPe=l(),Ro=a("div"),v(Dy.$$.fragment),byo=l(),qi=a("p"),Fyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=a("a"),vyo=o("from_pretrained()"),Tyo=o(" class method or the "),Qj=a("a"),Myo=o("from_config()"),Eyo=o(` class
method.`),Cyo=l(),Gy=a("p"),wyo=o("This class cannot be instantiated directly using "),Pde=a("code"),Ayo=o("__init__()"),yyo=o(" (throws an error)."),Lyo=l(),st=a("div"),v(Oy.$$.fragment),xyo=l(),Ide=a("p"),$yo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kyo=l(),Ni=a("p"),Syo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),Ryo=o("not"),Byo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),Pyo=o("from_pretrained()"),Iyo=o(" to load the model weights."),qyo=l(),v(m2.$$.fragment),Nyo=l(),Ze=a("div"),v(Vy.$$.fragment),jyo=l(),Nde=a("p"),Dyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Gyo=l(),ka=a("p"),Oyo=o("The model class to instantiate is selected based on the "),jde=a("code"),Vyo=o("model_type"),Xyo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),zyo=o("pretrained_model_name_or_path"),Qyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),Wyo=o("pretrained_model_name_or_path"),Hyo=o(":"),Uyo=l(),q=a("ul"),f2=a("li"),Ode=a("strong"),Jyo=o("albert"),Yyo=o(" \u2014 "),Hj=a("a"),Kyo=o("AlbertForSequenceClassification"),Zyo=o(" (ALBERT model)"),eLo=l(),g2=a("li"),Vde=a("strong"),oLo=o("bart"),rLo=o(" \u2014 "),Uj=a("a"),tLo=o("BartForSequenceClassification"),aLo=o(" (BART model)"),nLo=l(),h2=a("li"),Xde=a("strong"),sLo=o("bert"),lLo=o(" \u2014 "),Jj=a("a"),iLo=o("BertForSequenceClassification"),dLo=o(" (BERT model)"),cLo=l(),u2=a("li"),zde=a("strong"),mLo=o("big_bird"),fLo=o(" \u2014 "),Yj=a("a"),gLo=o("BigBirdForSequenceClassification"),hLo=o(" (BigBird model)"),uLo=l(),p2=a("li"),Qde=a("strong"),pLo=o("bigbird_pegasus"),_Lo=o(" \u2014 "),Kj=a("a"),bLo=o("BigBirdPegasusForSequenceClassification"),FLo=o(" (BigBirdPegasus model)"),vLo=l(),_2=a("li"),Wde=a("strong"),TLo=o("camembert"),MLo=o(" \u2014 "),Zj=a("a"),ELo=o("CamembertForSequenceClassification"),CLo=o(" (CamemBERT model)"),wLo=l(),b2=a("li"),Hde=a("strong"),ALo=o("canine"),yLo=o(" \u2014 "),eD=a("a"),LLo=o("CanineForSequenceClassification"),xLo=o(" (Canine model)"),$Lo=l(),F2=a("li"),Ude=a("strong"),kLo=o("convbert"),SLo=o(" \u2014 "),oD=a("a"),RLo=o("ConvBertForSequenceClassification"),BLo=o(" (ConvBERT model)"),PLo=l(),v2=a("li"),Jde=a("strong"),ILo=o("ctrl"),qLo=o(" \u2014 "),rD=a("a"),NLo=o("CTRLForSequenceClassification"),jLo=o(" (CTRL model)"),DLo=l(),T2=a("li"),Yde=a("strong"),GLo=o("data2vec-text"),OLo=o(" \u2014 "),tD=a("a"),VLo=o("Data2VecTextForSequenceClassification"),XLo=o(" (Data2VecText model)"),zLo=l(),M2=a("li"),Kde=a("strong"),QLo=o("deberta"),WLo=o(" \u2014 "),aD=a("a"),HLo=o("DebertaForSequenceClassification"),ULo=o(" (DeBERTa model)"),JLo=l(),E2=a("li"),Zde=a("strong"),YLo=o("deberta-v2"),KLo=o(" \u2014 "),nD=a("a"),ZLo=o("DebertaV2ForSequenceClassification"),e8o=o(" (DeBERTa-v2 model)"),o8o=l(),C2=a("li"),ece=a("strong"),r8o=o("distilbert"),t8o=o(" \u2014 "),sD=a("a"),a8o=o("DistilBertForSequenceClassification"),n8o=o(" (DistilBERT model)"),s8o=l(),w2=a("li"),oce=a("strong"),l8o=o("electra"),i8o=o(" \u2014 "),lD=a("a"),d8o=o("ElectraForSequenceClassification"),c8o=o(" (ELECTRA model)"),m8o=l(),A2=a("li"),rce=a("strong"),f8o=o("flaubert"),g8o=o(" \u2014 "),iD=a("a"),h8o=o("FlaubertForSequenceClassification"),u8o=o(" (FlauBERT model)"),p8o=l(),y2=a("li"),tce=a("strong"),_8o=o("fnet"),b8o=o(" \u2014 "),dD=a("a"),F8o=o("FNetForSequenceClassification"),v8o=o(" (FNet model)"),T8o=l(),L2=a("li"),ace=a("strong"),M8o=o("funnel"),E8o=o(" \u2014 "),cD=a("a"),C8o=o("FunnelForSequenceClassification"),w8o=o(" (Funnel Transformer model)"),A8o=l(),x2=a("li"),nce=a("strong"),y8o=o("gpt2"),L8o=o(" \u2014 "),mD=a("a"),x8o=o("GPT2ForSequenceClassification"),$8o=o(" (OpenAI GPT-2 model)"),k8o=l(),$2=a("li"),sce=a("strong"),S8o=o("gpt_neo"),R8o=o(" \u2014 "),fD=a("a"),B8o=o("GPTNeoForSequenceClassification"),P8o=o(" (GPT Neo model)"),I8o=l(),k2=a("li"),lce=a("strong"),q8o=o("gptj"),N8o=o(" \u2014 "),gD=a("a"),j8o=o("GPTJForSequenceClassification"),D8o=o(" (GPT-J model)"),G8o=l(),S2=a("li"),ice=a("strong"),O8o=o("ibert"),V8o=o(" \u2014 "),hD=a("a"),X8o=o("IBertForSequenceClassification"),z8o=o(" (I-BERT model)"),Q8o=l(),R2=a("li"),dce=a("strong"),W8o=o("layoutlm"),H8o=o(" \u2014 "),uD=a("a"),U8o=o("LayoutLMForSequenceClassification"),J8o=o(" (LayoutLM model)"),Y8o=l(),B2=a("li"),cce=a("strong"),K8o=o("layoutlmv2"),Z8o=o(" \u2014 "),pD=a("a"),exo=o("LayoutLMv2ForSequenceClassification"),oxo=o(" (LayoutLMv2 model)"),rxo=l(),P2=a("li"),mce=a("strong"),txo=o("led"),axo=o(" \u2014 "),_D=a("a"),nxo=o("LEDForSequenceClassification"),sxo=o(" (LED model)"),lxo=l(),I2=a("li"),fce=a("strong"),ixo=o("longformer"),dxo=o(" \u2014 "),bD=a("a"),cxo=o("LongformerForSequenceClassification"),mxo=o(" (Longformer model)"),fxo=l(),q2=a("li"),gce=a("strong"),gxo=o("mbart"),hxo=o(" \u2014 "),FD=a("a"),uxo=o("MBartForSequenceClassification"),pxo=o(" (mBART model)"),_xo=l(),N2=a("li"),hce=a("strong"),bxo=o("megatron-bert"),Fxo=o(" \u2014 "),vD=a("a"),vxo=o("MegatronBertForSequenceClassification"),Txo=o(" (MegatronBert model)"),Mxo=l(),j2=a("li"),uce=a("strong"),Exo=o("mobilebert"),Cxo=o(" \u2014 "),TD=a("a"),wxo=o("MobileBertForSequenceClassification"),Axo=o(" (MobileBERT model)"),yxo=l(),D2=a("li"),pce=a("strong"),Lxo=o("mpnet"),xxo=o(" \u2014 "),MD=a("a"),$xo=o("MPNetForSequenceClassification"),kxo=o(" (MPNet model)"),Sxo=l(),G2=a("li"),_ce=a("strong"),Rxo=o("nystromformer"),Bxo=o(" \u2014 "),ED=a("a"),Pxo=o("NystromformerForSequenceClassification"),Ixo=o(" (Nystromformer model)"),qxo=l(),O2=a("li"),bce=a("strong"),Nxo=o("openai-gpt"),jxo=o(" \u2014 "),CD=a("a"),Dxo=o("OpenAIGPTForSequenceClassification"),Gxo=o(" (OpenAI GPT model)"),Oxo=l(),V2=a("li"),Fce=a("strong"),Vxo=o("perceiver"),Xxo=o(" \u2014 "),wD=a("a"),zxo=o("PerceiverForSequenceClassification"),Qxo=o(" (Perceiver model)"),Wxo=l(),X2=a("li"),vce=a("strong"),Hxo=o("plbart"),Uxo=o(" \u2014 "),AD=a("a"),Jxo=o("PLBartForSequenceClassification"),Yxo=o(" (PLBart model)"),Kxo=l(),z2=a("li"),Tce=a("strong"),Zxo=o("qdqbert"),e7o=o(" \u2014 "),yD=a("a"),o7o=o("QDQBertForSequenceClassification"),r7o=o(" (QDQBert model)"),t7o=l(),Q2=a("li"),Mce=a("strong"),a7o=o("reformer"),n7o=o(" \u2014 "),LD=a("a"),s7o=o("ReformerForSequenceClassification"),l7o=o(" (Reformer model)"),i7o=l(),W2=a("li"),Ece=a("strong"),d7o=o("rembert"),c7o=o(" \u2014 "),xD=a("a"),m7o=o("RemBertForSequenceClassification"),f7o=o(" (RemBERT model)"),g7o=l(),H2=a("li"),Cce=a("strong"),h7o=o("roberta"),u7o=o(" \u2014 "),$D=a("a"),p7o=o("RobertaForSequenceClassification"),_7o=o(" (RoBERTa model)"),b7o=l(),U2=a("li"),wce=a("strong"),F7o=o("roformer"),v7o=o(" \u2014 "),kD=a("a"),T7o=o("RoFormerForSequenceClassification"),M7o=o(" (RoFormer model)"),E7o=l(),J2=a("li"),Ace=a("strong"),C7o=o("squeezebert"),w7o=o(" \u2014 "),SD=a("a"),A7o=o("SqueezeBertForSequenceClassification"),y7o=o(" (SqueezeBERT model)"),L7o=l(),Y2=a("li"),yce=a("strong"),x7o=o("tapas"),$7o=o(" \u2014 "),RD=a("a"),k7o=o("TapasForSequenceClassification"),S7o=o(" (TAPAS model)"),R7o=l(),K2=a("li"),Lce=a("strong"),B7o=o("tapex"),P7o=o(" \u2014 "),BD=a("a"),I7o=o("BartForSequenceClassification"),q7o=o(" (TAPEX model)"),N7o=l(),Z2=a("li"),xce=a("strong"),j7o=o("transfo-xl"),D7o=o(" \u2014 "),PD=a("a"),G7o=o("TransfoXLForSequenceClassification"),O7o=o(" (Transformer-XL model)"),V7o=l(),eF=a("li"),$ce=a("strong"),X7o=o("xlm"),z7o=o(" \u2014 "),ID=a("a"),Q7o=o("XLMForSequenceClassification"),W7o=o(" (XLM model)"),H7o=l(),oF=a("li"),kce=a("strong"),U7o=o("xlm-roberta"),J7o=o(" \u2014 "),qD=a("a"),Y7o=o("XLMRobertaForSequenceClassification"),K7o=o(" (XLM-RoBERTa model)"),Z7o=l(),rF=a("li"),Sce=a("strong"),e9o=o("xlm-roberta-xl"),o9o=o(" \u2014 "),ND=a("a"),r9o=o("XLMRobertaXLForSequenceClassification"),t9o=o(" (XLM-RoBERTa-XL model)"),a9o=l(),tF=a("li"),Rce=a("strong"),n9o=o("xlnet"),s9o=o(" \u2014 "),jD=a("a"),l9o=o("XLNetForSequenceClassification"),i9o=o(" (XLNet model)"),d9o=l(),aF=a("li"),Bce=a("strong"),c9o=o("yoso"),m9o=o(" \u2014 "),DD=a("a"),f9o=o("YosoForSequenceClassification"),g9o=o(" (YOSO model)"),h9o=l(),nF=a("p"),u9o=o("The model is set in evaluation mode by default using "),Pce=a("code"),p9o=o("model.eval()"),_9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),b9o=o("model.train()"),F9o=l(),v(sF.$$.fragment),SPe=l(),ji=a("h2"),lF=a("a"),qce=a("span"),v(Xy.$$.fragment),v9o=l(),Nce=a("span"),T9o=o("AutoModelForMultipleChoice"),RPe=l(),Bo=a("div"),v(zy.$$.fragment),M9o=l(),Di=a("p"),E9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=a("a"),C9o=o("from_pretrained()"),w9o=o(" class method or the "),OD=a("a"),A9o=o("from_config()"),y9o=o(` class
method.`),L9o=l(),Qy=a("p"),x9o=o("This class cannot be instantiated directly using "),jce=a("code"),$9o=o("__init__()"),k9o=o(" (throws an error)."),S9o=l(),lt=a("div"),v(Wy.$$.fragment),R9o=l(),Dce=a("p"),B9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P9o=l(),Gi=a("p"),I9o=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),q9o=o("not"),N9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),j9o=o("from_pretrained()"),D9o=o(" to load the model weights."),G9o=l(),v(iF.$$.fragment),O9o=l(),eo=a("div"),v(Hy.$$.fragment),V9o=l(),Oce=a("p"),X9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9o=l(),Sa=a("p"),Q9o=o("The model class to instantiate is selected based on the "),Vce=a("code"),W9o=o("model_type"),H9o=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),U9o=o("pretrained_model_name_or_path"),J9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),Y9o=o("pretrained_model_name_or_path"),K9o=o(":"),Z9o=l(),Y=a("ul"),dF=a("li"),Qce=a("strong"),e$o=o("albert"),o$o=o(" \u2014 "),XD=a("a"),r$o=o("AlbertForMultipleChoice"),t$o=o(" (ALBERT model)"),a$o=l(),cF=a("li"),Wce=a("strong"),n$o=o("bert"),s$o=o(" \u2014 "),zD=a("a"),l$o=o("BertForMultipleChoice"),i$o=o(" (BERT model)"),d$o=l(),mF=a("li"),Hce=a("strong"),c$o=o("big_bird"),m$o=o(" \u2014 "),QD=a("a"),f$o=o("BigBirdForMultipleChoice"),g$o=o(" (BigBird model)"),h$o=l(),fF=a("li"),Uce=a("strong"),u$o=o("camembert"),p$o=o(" \u2014 "),WD=a("a"),_$o=o("CamembertForMultipleChoice"),b$o=o(" (CamemBERT model)"),F$o=l(),gF=a("li"),Jce=a("strong"),v$o=o("canine"),T$o=o(" \u2014 "),HD=a("a"),M$o=o("CanineForMultipleChoice"),E$o=o(" (Canine model)"),C$o=l(),hF=a("li"),Yce=a("strong"),w$o=o("convbert"),A$o=o(" \u2014 "),UD=a("a"),y$o=o("ConvBertForMultipleChoice"),L$o=o(" (ConvBERT model)"),x$o=l(),uF=a("li"),Kce=a("strong"),$$o=o("data2vec-text"),k$o=o(" \u2014 "),JD=a("a"),S$o=o("Data2VecTextForMultipleChoice"),R$o=o(" (Data2VecText model)"),B$o=l(),pF=a("li"),Zce=a("strong"),P$o=o("deberta-v2"),I$o=o(" \u2014 "),YD=a("a"),q$o=o("DebertaV2ForMultipleChoice"),N$o=o(" (DeBERTa-v2 model)"),j$o=l(),_F=a("li"),eme=a("strong"),D$o=o("distilbert"),G$o=o(" \u2014 "),KD=a("a"),O$o=o("DistilBertForMultipleChoice"),V$o=o(" (DistilBERT model)"),X$o=l(),bF=a("li"),ome=a("strong"),z$o=o("electra"),Q$o=o(" \u2014 "),ZD=a("a"),W$o=o("ElectraForMultipleChoice"),H$o=o(" (ELECTRA model)"),U$o=l(),FF=a("li"),rme=a("strong"),J$o=o("flaubert"),Y$o=o(" \u2014 "),eG=a("a"),K$o=o("FlaubertForMultipleChoice"),Z$o=o(" (FlauBERT model)"),eko=l(),vF=a("li"),tme=a("strong"),oko=o("fnet"),rko=o(" \u2014 "),oG=a("a"),tko=o("FNetForMultipleChoice"),ako=o(" (FNet model)"),nko=l(),TF=a("li"),ame=a("strong"),sko=o("funnel"),lko=o(" \u2014 "),rG=a("a"),iko=o("FunnelForMultipleChoice"),dko=o(" (Funnel Transformer model)"),cko=l(),MF=a("li"),nme=a("strong"),mko=o("ibert"),fko=o(" \u2014 "),tG=a("a"),gko=o("IBertForMultipleChoice"),hko=o(" (I-BERT model)"),uko=l(),EF=a("li"),sme=a("strong"),pko=o("longformer"),_ko=o(" \u2014 "),aG=a("a"),bko=o("LongformerForMultipleChoice"),Fko=o(" (Longformer model)"),vko=l(),CF=a("li"),lme=a("strong"),Tko=o("megatron-bert"),Mko=o(" \u2014 "),nG=a("a"),Eko=o("MegatronBertForMultipleChoice"),Cko=o(" (MegatronBert model)"),wko=l(),wF=a("li"),ime=a("strong"),Ako=o("mobilebert"),yko=o(" \u2014 "),sG=a("a"),Lko=o("MobileBertForMultipleChoice"),xko=o(" (MobileBERT model)"),$ko=l(),AF=a("li"),dme=a("strong"),kko=o("mpnet"),Sko=o(" \u2014 "),lG=a("a"),Rko=o("MPNetForMultipleChoice"),Bko=o(" (MPNet model)"),Pko=l(),yF=a("li"),cme=a("strong"),Iko=o("nystromformer"),qko=o(" \u2014 "),iG=a("a"),Nko=o("NystromformerForMultipleChoice"),jko=o(" (Nystromformer model)"),Dko=l(),LF=a("li"),mme=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),dG=a("a"),Vko=o("QDQBertForMultipleChoice"),Xko=o(" (QDQBert model)"),zko=l(),xF=a("li"),fme=a("strong"),Qko=o("rembert"),Wko=o(" \u2014 "),cG=a("a"),Hko=o("RemBertForMultipleChoice"),Uko=o(" (RemBERT model)"),Jko=l(),$F=a("li"),gme=a("strong"),Yko=o("roberta"),Kko=o(" \u2014 "),mG=a("a"),Zko=o("RobertaForMultipleChoice"),eSo=o(" (RoBERTa model)"),oSo=l(),kF=a("li"),hme=a("strong"),rSo=o("roformer"),tSo=o(" \u2014 "),fG=a("a"),aSo=o("RoFormerForMultipleChoice"),nSo=o(" (RoFormer model)"),sSo=l(),SF=a("li"),ume=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),gG=a("a"),dSo=o("SqueezeBertForMultipleChoice"),cSo=o(" (SqueezeBERT model)"),mSo=l(),RF=a("li"),pme=a("strong"),fSo=o("xlm"),gSo=o(" \u2014 "),hG=a("a"),hSo=o("XLMForMultipleChoice"),uSo=o(" (XLM model)"),pSo=l(),BF=a("li"),_me=a("strong"),_So=o("xlm-roberta"),bSo=o(" \u2014 "),uG=a("a"),FSo=o("XLMRobertaForMultipleChoice"),vSo=o(" (XLM-RoBERTa model)"),TSo=l(),PF=a("li"),bme=a("strong"),MSo=o("xlm-roberta-xl"),ESo=o(" \u2014 "),pG=a("a"),CSo=o("XLMRobertaXLForMultipleChoice"),wSo=o(" (XLM-RoBERTa-XL model)"),ASo=l(),IF=a("li"),Fme=a("strong"),ySo=o("xlnet"),LSo=o(" \u2014 "),_G=a("a"),xSo=o("XLNetForMultipleChoice"),$So=o(" (XLNet model)"),kSo=l(),qF=a("li"),vme=a("strong"),SSo=o("yoso"),RSo=o(" \u2014 "),bG=a("a"),BSo=o("YosoForMultipleChoice"),PSo=o(" (YOSO model)"),ISo=l(),NF=a("p"),qSo=o("The model is set in evaluation mode by default using "),Tme=a("code"),NSo=o("model.eval()"),jSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),DSo=o("model.train()"),GSo=l(),v(jF.$$.fragment),BPe=l(),Oi=a("h2"),DF=a("a"),Eme=a("span"),v(Uy.$$.fragment),OSo=l(),Cme=a("span"),VSo=o("AutoModelForNextSentencePrediction"),PPe=l(),Po=a("div"),v(Jy.$$.fragment),XSo=l(),Vi=a("p"),zSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FG=a("a"),QSo=o("from_pretrained()"),WSo=o(" class method or the "),vG=a("a"),HSo=o("from_config()"),USo=o(` class
method.`),JSo=l(),Yy=a("p"),YSo=o("This class cannot be instantiated directly using "),wme=a("code"),KSo=o("__init__()"),ZSo=o(" (throws an error)."),eRo=l(),it=a("div"),v(Ky.$$.fragment),oRo=l(),Ame=a("p"),rRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRo=l(),Xi=a("p"),aRo=o(`Note:
Loading a model from its configuration file does `),yme=a("strong"),nRo=o("not"),sRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),lRo=o("from_pretrained()"),iRo=o(" to load the model weights."),dRo=l(),v(GF.$$.fragment),cRo=l(),oo=a("div"),v(Zy.$$.fragment),mRo=l(),Lme=a("p"),fRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gRo=l(),Ra=a("p"),hRo=o("The model class to instantiate is selected based on the "),xme=a("code"),uRo=o("model_type"),pRo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=a("code"),FRo=o("pretrained_model_name_or_path"),vRo=o(":"),TRo=l(),Yr=a("ul"),OF=a("li"),Sme=a("strong"),MRo=o("bert"),ERo=o(" \u2014 "),MG=a("a"),CRo=o("BertForNextSentencePrediction"),wRo=o(" (BERT model)"),ARo=l(),VF=a("li"),Rme=a("strong"),yRo=o("fnet"),LRo=o(" \u2014 "),EG=a("a"),xRo=o("FNetForNextSentencePrediction"),$Ro=o(" (FNet model)"),kRo=l(),XF=a("li"),Bme=a("strong"),SRo=o("megatron-bert"),RRo=o(" \u2014 "),CG=a("a"),BRo=o("MegatronBertForNextSentencePrediction"),PRo=o(" (MegatronBert model)"),IRo=l(),zF=a("li"),Pme=a("strong"),qRo=o("mobilebert"),NRo=o(" \u2014 "),wG=a("a"),jRo=o("MobileBertForNextSentencePrediction"),DRo=o(" (MobileBERT model)"),GRo=l(),QF=a("li"),Ime=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),AG=a("a"),XRo=o("QDQBertForNextSentencePrediction"),zRo=o(" (QDQBert model)"),QRo=l(),WF=a("p"),WRo=o("The model is set in evaluation mode by default using "),qme=a("code"),HRo=o("model.eval()"),URo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=a("code"),JRo=o("model.train()"),YRo=l(),v(HF.$$.fragment),IPe=l(),zi=a("h2"),UF=a("a"),jme=a("span"),v(eL.$$.fragment),KRo=l(),Dme=a("span"),ZRo=o("AutoModelForTokenClassification"),qPe=l(),Io=a("div"),v(oL.$$.fragment),eBo=l(),Qi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),LG=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),rL=a("p"),lBo=o("This class cannot be instantiated directly using "),Gme=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),dt=a("div"),v(tL.$$.fragment),mBo=l(),Ome=a("p"),fBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gBo=l(),Wi=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),uBo=o("not"),pBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),_Bo=o("from_pretrained()"),bBo=o(" to load the model weights."),FBo=l(),v(JF.$$.fragment),vBo=l(),ro=a("div"),v(aL.$$.fragment),TBo=l(),Xme=a("p"),MBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EBo=l(),Ba=a("p"),CBo=o("The model class to instantiate is selected based on the "),zme=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),U=a("ul"),YF=a("li"),Hme=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),$G=a("a"),BBo=o("AlbertForTokenClassification"),PBo=o(" (ALBERT model)"),IBo=l(),KF=a("li"),Ume=a("strong"),qBo=o("bert"),NBo=o(" \u2014 "),kG=a("a"),jBo=o("BertForTokenClassification"),DBo=o(" (BERT model)"),GBo=l(),ZF=a("li"),Jme=a("strong"),OBo=o("big_bird"),VBo=o(" \u2014 "),SG=a("a"),XBo=o("BigBirdForTokenClassification"),zBo=o(" (BigBird model)"),QBo=l(),ev=a("li"),Yme=a("strong"),WBo=o("camembert"),HBo=o(" \u2014 "),RG=a("a"),UBo=o("CamembertForTokenClassification"),JBo=o(" (CamemBERT model)"),YBo=l(),ov=a("li"),Kme=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),BG=a("a"),ePo=o("CanineForTokenClassification"),oPo=o(" (Canine model)"),rPo=l(),rv=a("li"),Zme=a("strong"),tPo=o("convbert"),aPo=o(" \u2014 "),PG=a("a"),nPo=o("ConvBertForTokenClassification"),sPo=o(" (ConvBERT model)"),lPo=l(),tv=a("li"),efe=a("strong"),iPo=o("data2vec-text"),dPo=o(" \u2014 "),IG=a("a"),cPo=o("Data2VecTextForTokenClassification"),mPo=o(" (Data2VecText model)"),fPo=l(),av=a("li"),ofe=a("strong"),gPo=o("deberta"),hPo=o(" \u2014 "),qG=a("a"),uPo=o("DebertaForTokenClassification"),pPo=o(" (DeBERTa model)"),_Po=l(),nv=a("li"),rfe=a("strong"),bPo=o("deberta-v2"),FPo=o(" \u2014 "),NG=a("a"),vPo=o("DebertaV2ForTokenClassification"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),sv=a("li"),tfe=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),jG=a("a"),wPo=o("DistilBertForTokenClassification"),APo=o(" (DistilBERT model)"),yPo=l(),lv=a("li"),afe=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),DG=a("a"),$Po=o("ElectraForTokenClassification"),kPo=o(" (ELECTRA model)"),SPo=l(),iv=a("li"),nfe=a("strong"),RPo=o("flaubert"),BPo=o(" \u2014 "),GG=a("a"),PPo=o("FlaubertForTokenClassification"),IPo=o(" (FlauBERT model)"),qPo=l(),dv=a("li"),sfe=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),OG=a("a"),DPo=o("FNetForTokenClassification"),GPo=o(" (FNet model)"),OPo=l(),cv=a("li"),lfe=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),VG=a("a"),zPo=o("FunnelForTokenClassification"),QPo=o(" (Funnel Transformer model)"),WPo=l(),mv=a("li"),ife=a("strong"),HPo=o("gpt2"),UPo=o(" \u2014 "),XG=a("a"),JPo=o("GPT2ForTokenClassification"),YPo=o(" (OpenAI GPT-2 model)"),KPo=l(),fv=a("li"),dfe=a("strong"),ZPo=o("ibert"),eIo=o(" \u2014 "),zG=a("a"),oIo=o("IBertForTokenClassification"),rIo=o(" (I-BERT model)"),tIo=l(),gv=a("li"),cfe=a("strong"),aIo=o("layoutlm"),nIo=o(" \u2014 "),QG=a("a"),sIo=o("LayoutLMForTokenClassification"),lIo=o(" (LayoutLM model)"),iIo=l(),hv=a("li"),mfe=a("strong"),dIo=o("layoutlmv2"),cIo=o(" \u2014 "),WG=a("a"),mIo=o("LayoutLMv2ForTokenClassification"),fIo=o(" (LayoutLMv2 model)"),gIo=l(),uv=a("li"),ffe=a("strong"),hIo=o("longformer"),uIo=o(" \u2014 "),HG=a("a"),pIo=o("LongformerForTokenClassification"),_Io=o(" (Longformer model)"),bIo=l(),pv=a("li"),gfe=a("strong"),FIo=o("megatron-bert"),vIo=o(" \u2014 "),UG=a("a"),TIo=o("MegatronBertForTokenClassification"),MIo=o(" (MegatronBert model)"),EIo=l(),_v=a("li"),hfe=a("strong"),CIo=o("mobilebert"),wIo=o(" \u2014 "),JG=a("a"),AIo=o("MobileBertForTokenClassification"),yIo=o(" (MobileBERT model)"),LIo=l(),bv=a("li"),ufe=a("strong"),xIo=o("mpnet"),$Io=o(" \u2014 "),YG=a("a"),kIo=o("MPNetForTokenClassification"),SIo=o(" (MPNet model)"),RIo=l(),Fv=a("li"),pfe=a("strong"),BIo=o("nystromformer"),PIo=o(" \u2014 "),KG=a("a"),IIo=o("NystromformerForTokenClassification"),qIo=o(" (Nystromformer model)"),NIo=l(),vv=a("li"),_fe=a("strong"),jIo=o("qdqbert"),DIo=o(" \u2014 "),ZG=a("a"),GIo=o("QDQBertForTokenClassification"),OIo=o(" (QDQBert model)"),VIo=l(),Tv=a("li"),bfe=a("strong"),XIo=o("rembert"),zIo=o(" \u2014 "),eO=a("a"),QIo=o("RemBertForTokenClassification"),WIo=o(" (RemBERT model)"),HIo=l(),Mv=a("li"),Ffe=a("strong"),UIo=o("roberta"),JIo=o(" \u2014 "),oO=a("a"),YIo=o("RobertaForTokenClassification"),KIo=o(" (RoBERTa model)"),ZIo=l(),Ev=a("li"),vfe=a("strong"),eqo=o("roformer"),oqo=o(" \u2014 "),rO=a("a"),rqo=o("RoFormerForTokenClassification"),tqo=o(" (RoFormer model)"),aqo=l(),Cv=a("li"),Tfe=a("strong"),nqo=o("squeezebert"),sqo=o(" \u2014 "),tO=a("a"),lqo=o("SqueezeBertForTokenClassification"),iqo=o(" (SqueezeBERT model)"),dqo=l(),wv=a("li"),Mfe=a("strong"),cqo=o("xlm"),mqo=o(" \u2014 "),aO=a("a"),fqo=o("XLMForTokenClassification"),gqo=o(" (XLM model)"),hqo=l(),Av=a("li"),Efe=a("strong"),uqo=o("xlm-roberta"),pqo=o(" \u2014 "),nO=a("a"),_qo=o("XLMRobertaForTokenClassification"),bqo=o(" (XLM-RoBERTa model)"),Fqo=l(),yv=a("li"),Cfe=a("strong"),vqo=o("xlm-roberta-xl"),Tqo=o(" \u2014 "),sO=a("a"),Mqo=o("XLMRobertaXLForTokenClassification"),Eqo=o(" (XLM-RoBERTa-XL model)"),Cqo=l(),Lv=a("li"),wfe=a("strong"),wqo=o("xlnet"),Aqo=o(" \u2014 "),lO=a("a"),yqo=o("XLNetForTokenClassification"),Lqo=o(" (XLNet model)"),xqo=l(),xv=a("li"),Afe=a("strong"),$qo=o("yoso"),kqo=o(" \u2014 "),iO=a("a"),Sqo=o("YosoForTokenClassification"),Rqo=o(" (YOSO model)"),Bqo=l(),$v=a("p"),Pqo=o("The model is set in evaluation mode by default using "),yfe=a("code"),Iqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),Nqo=o("model.train()"),jqo=l(),v(kv.$$.fragment),NPe=l(),Hi=a("h2"),Sv=a("a"),xfe=a("span"),v(nL.$$.fragment),Dqo=l(),$fe=a("span"),Gqo=o("AutoModelForQuestionAnswering"),jPe=l(),qo=a("div"),v(sL.$$.fragment),Oqo=l(),Ui=a("p"),Vqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=a("a"),Xqo=o("from_pretrained()"),zqo=o(" class method or the "),cO=a("a"),Qqo=o("from_config()"),Wqo=o(` class
method.`),Hqo=l(),lL=a("p"),Uqo=o("This class cannot be instantiated directly using "),kfe=a("code"),Jqo=o("__init__()"),Yqo=o(" (throws an error)."),Kqo=l(),ct=a("div"),v(iL.$$.fragment),Zqo=l(),Sfe=a("p"),eNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oNo=l(),Ji=a("p"),rNo=o(`Note:
Loading a model from its configuration file does `),Rfe=a("strong"),tNo=o("not"),aNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),nNo=o("from_pretrained()"),sNo=o(" to load the model weights."),lNo=l(),v(Rv.$$.fragment),iNo=l(),to=a("div"),v(dL.$$.fragment),dNo=l(),Bfe=a("p"),cNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mNo=l(),Pa=a("p"),fNo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),uNo=o("pretrained_model_name_or_path"),pNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),_No=o("pretrained_model_name_or_path"),bNo=o(":"),FNo=l(),O=a("ul"),Bv=a("li"),Nfe=a("strong"),vNo=o("albert"),TNo=o(" \u2014 "),fO=a("a"),MNo=o("AlbertForQuestionAnswering"),ENo=o(" (ALBERT model)"),CNo=l(),Pv=a("li"),jfe=a("strong"),wNo=o("bart"),ANo=o(" \u2014 "),gO=a("a"),yNo=o("BartForQuestionAnswering"),LNo=o(" (BART model)"),xNo=l(),Iv=a("li"),Dfe=a("strong"),$No=o("bert"),kNo=o(" \u2014 "),hO=a("a"),SNo=o("BertForQuestionAnswering"),RNo=o(" (BERT model)"),BNo=l(),qv=a("li"),Gfe=a("strong"),PNo=o("big_bird"),INo=o(" \u2014 "),uO=a("a"),qNo=o("BigBirdForQuestionAnswering"),NNo=o(" (BigBird model)"),jNo=l(),Nv=a("li"),Ofe=a("strong"),DNo=o("bigbird_pegasus"),GNo=o(" \u2014 "),pO=a("a"),ONo=o("BigBirdPegasusForQuestionAnswering"),VNo=o(" (BigBirdPegasus model)"),XNo=l(),jv=a("li"),Vfe=a("strong"),zNo=o("camembert"),QNo=o(" \u2014 "),_O=a("a"),WNo=o("CamembertForQuestionAnswering"),HNo=o(" (CamemBERT model)"),UNo=l(),Dv=a("li"),Xfe=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),bO=a("a"),KNo=o("CanineForQuestionAnswering"),ZNo=o(" (Canine model)"),ejo=l(),Gv=a("li"),zfe=a("strong"),ojo=o("convbert"),rjo=o(" \u2014 "),FO=a("a"),tjo=o("ConvBertForQuestionAnswering"),ajo=o(" (ConvBERT model)"),njo=l(),Ov=a("li"),Qfe=a("strong"),sjo=o("data2vec-text"),ljo=o(" \u2014 "),vO=a("a"),ijo=o("Data2VecTextForQuestionAnswering"),djo=o(" (Data2VecText model)"),cjo=l(),Vv=a("li"),Wfe=a("strong"),mjo=o("deberta"),fjo=o(" \u2014 "),TO=a("a"),gjo=o("DebertaForQuestionAnswering"),hjo=o(" (DeBERTa model)"),ujo=l(),Xv=a("li"),Hfe=a("strong"),pjo=o("deberta-v2"),_jo=o(" \u2014 "),MO=a("a"),bjo=o("DebertaV2ForQuestionAnswering"),Fjo=o(" (DeBERTa-v2 model)"),vjo=l(),zv=a("li"),Ufe=a("strong"),Tjo=o("distilbert"),Mjo=o(" \u2014 "),EO=a("a"),Ejo=o("DistilBertForQuestionAnswering"),Cjo=o(" (DistilBERT model)"),wjo=l(),Qv=a("li"),Jfe=a("strong"),Ajo=o("electra"),yjo=o(" \u2014 "),CO=a("a"),Ljo=o("ElectraForQuestionAnswering"),xjo=o(" (ELECTRA model)"),$jo=l(),Wv=a("li"),Yfe=a("strong"),kjo=o("flaubert"),Sjo=o(" \u2014 "),wO=a("a"),Rjo=o("FlaubertForQuestionAnsweringSimple"),Bjo=o(" (FlauBERT model)"),Pjo=l(),Hv=a("li"),Kfe=a("strong"),Ijo=o("fnet"),qjo=o(" \u2014 "),AO=a("a"),Njo=o("FNetForQuestionAnswering"),jjo=o(" (FNet model)"),Djo=l(),Uv=a("li"),Zfe=a("strong"),Gjo=o("funnel"),Ojo=o(" \u2014 "),yO=a("a"),Vjo=o("FunnelForQuestionAnswering"),Xjo=o(" (Funnel Transformer model)"),zjo=l(),Jv=a("li"),ege=a("strong"),Qjo=o("gptj"),Wjo=o(" \u2014 "),LO=a("a"),Hjo=o("GPTJForQuestionAnswering"),Ujo=o(" (GPT-J model)"),Jjo=l(),Yv=a("li"),oge=a("strong"),Yjo=o("ibert"),Kjo=o(" \u2014 "),xO=a("a"),Zjo=o("IBertForQuestionAnswering"),eDo=o(" (I-BERT model)"),oDo=l(),Kv=a("li"),rge=a("strong"),rDo=o("layoutlmv2"),tDo=o(" \u2014 "),$O=a("a"),aDo=o("LayoutLMv2ForQuestionAnswering"),nDo=o(" (LayoutLMv2 model)"),sDo=l(),Zv=a("li"),tge=a("strong"),lDo=o("led"),iDo=o(" \u2014 "),kO=a("a"),dDo=o("LEDForQuestionAnswering"),cDo=o(" (LED model)"),mDo=l(),e1=a("li"),age=a("strong"),fDo=o("longformer"),gDo=o(" \u2014 "),SO=a("a"),hDo=o("LongformerForQuestionAnswering"),uDo=o(" (Longformer model)"),pDo=l(),o1=a("li"),nge=a("strong"),_Do=o("lxmert"),bDo=o(" \u2014 "),RO=a("a"),FDo=o("LxmertForQuestionAnswering"),vDo=o(" (LXMERT model)"),TDo=l(),r1=a("li"),sge=a("strong"),MDo=o("mbart"),EDo=o(" \u2014 "),BO=a("a"),CDo=o("MBartForQuestionAnswering"),wDo=o(" (mBART model)"),ADo=l(),t1=a("li"),lge=a("strong"),yDo=o("megatron-bert"),LDo=o(" \u2014 "),PO=a("a"),xDo=o("MegatronBertForQuestionAnswering"),$Do=o(" (MegatronBert model)"),kDo=l(),a1=a("li"),ige=a("strong"),SDo=o("mobilebert"),RDo=o(" \u2014 "),IO=a("a"),BDo=o("MobileBertForQuestionAnswering"),PDo=o(" (MobileBERT model)"),IDo=l(),n1=a("li"),dge=a("strong"),qDo=o("mpnet"),NDo=o(" \u2014 "),qO=a("a"),jDo=o("MPNetForQuestionAnswering"),DDo=o(" (MPNet model)"),GDo=l(),s1=a("li"),cge=a("strong"),ODo=o("nystromformer"),VDo=o(" \u2014 "),NO=a("a"),XDo=o("NystromformerForQuestionAnswering"),zDo=o(" (Nystromformer model)"),QDo=l(),l1=a("li"),mge=a("strong"),WDo=o("qdqbert"),HDo=o(" \u2014 "),jO=a("a"),UDo=o("QDQBertForQuestionAnswering"),JDo=o(" (QDQBert model)"),YDo=l(),i1=a("li"),fge=a("strong"),KDo=o("reformer"),ZDo=o(" \u2014 "),DO=a("a"),eGo=o("ReformerForQuestionAnswering"),oGo=o(" (Reformer model)"),rGo=l(),d1=a("li"),gge=a("strong"),tGo=o("rembert"),aGo=o(" \u2014 "),GO=a("a"),nGo=o("RemBertForQuestionAnswering"),sGo=o(" (RemBERT model)"),lGo=l(),c1=a("li"),hge=a("strong"),iGo=o("roberta"),dGo=o(" \u2014 "),OO=a("a"),cGo=o("RobertaForQuestionAnswering"),mGo=o(" (RoBERTa model)"),fGo=l(),m1=a("li"),uge=a("strong"),gGo=o("roformer"),hGo=o(" \u2014 "),VO=a("a"),uGo=o("RoFormerForQuestionAnswering"),pGo=o(" (RoFormer model)"),_Go=l(),f1=a("li"),pge=a("strong"),bGo=o("splinter"),FGo=o(" \u2014 "),XO=a("a"),vGo=o("SplinterForQuestionAnswering"),TGo=o(" (Splinter model)"),MGo=l(),g1=a("li"),_ge=a("strong"),EGo=o("squeezebert"),CGo=o(" \u2014 "),zO=a("a"),wGo=o("SqueezeBertForQuestionAnswering"),AGo=o(" (SqueezeBERT model)"),yGo=l(),h1=a("li"),bge=a("strong"),LGo=o("xlm"),xGo=o(" \u2014 "),QO=a("a"),$Go=o("XLMForQuestionAnsweringSimple"),kGo=o(" (XLM model)"),SGo=l(),u1=a("li"),Fge=a("strong"),RGo=o("xlm-roberta"),BGo=o(" \u2014 "),WO=a("a"),PGo=o("XLMRobertaForQuestionAnswering"),IGo=o(" (XLM-RoBERTa model)"),qGo=l(),p1=a("li"),vge=a("strong"),NGo=o("xlm-roberta-xl"),jGo=o(" \u2014 "),HO=a("a"),DGo=o("XLMRobertaXLForQuestionAnswering"),GGo=o(" (XLM-RoBERTa-XL model)"),OGo=l(),_1=a("li"),Tge=a("strong"),VGo=o("xlnet"),XGo=o(" \u2014 "),UO=a("a"),zGo=o("XLNetForQuestionAnsweringSimple"),QGo=o(" (XLNet model)"),WGo=l(),b1=a("li"),Mge=a("strong"),HGo=o("yoso"),UGo=o(" \u2014 "),JO=a("a"),JGo=o("YosoForQuestionAnswering"),YGo=o(" (YOSO model)"),KGo=l(),F1=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Ege=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),rOo=o("model.train()"),tOo=l(),v(v1.$$.fragment),DPe=l(),Yi=a("h2"),T1=a("a"),wge=a("span"),v(cL.$$.fragment),aOo=l(),Age=a("span"),nOo=o("AutoModelForTableQuestionAnswering"),GPe=l(),No=a("div"),v(mL.$$.fragment),sOo=l(),Ki=a("p"),lOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=a("a"),iOo=o("from_pretrained()"),dOo=o(" class method or the "),KO=a("a"),cOo=o("from_config()"),mOo=o(` class
method.`),fOo=l(),fL=a("p"),gOo=o("This class cannot be instantiated directly using "),yge=a("code"),hOo=o("__init__()"),uOo=o(" (throws an error)."),pOo=l(),mt=a("div"),v(gL.$$.fragment),_Oo=l(),Lge=a("p"),bOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FOo=l(),Zi=a("p"),vOo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),TOo=o("not"),MOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),EOo=o("from_pretrained()"),COo=o(" to load the model weights."),wOo=l(),v(M1.$$.fragment),AOo=l(),ao=a("div"),v(hL.$$.fragment),yOo=l(),$ge=a("p"),LOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xOo=l(),Ia=a("p"),$Oo=o("The model class to instantiate is selected based on the "),kge=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),ROo=o("pretrained_model_name_or_path"),BOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),POo=o("pretrained_model_name_or_path"),IOo=o(":"),qOo=l(),Bge=a("ul"),E1=a("li"),Pge=a("strong"),NOo=o("tapas"),jOo=o(" \u2014 "),eV=a("a"),DOo=o("TapasForQuestionAnswering"),GOo=o(" (TAPAS model)"),OOo=l(),C1=a("p"),VOo=o("The model is set in evaluation mode by default using "),Ige=a("code"),XOo=o("model.eval()"),zOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),QOo=o("model.train()"),WOo=l(),v(w1.$$.fragment),OPe=l(),ed=a("h2"),A1=a("a"),Nge=a("span"),v(uL.$$.fragment),HOo=l(),jge=a("span"),UOo=o("AutoModelForImageClassification"),VPe=l(),jo=a("div"),v(pL.$$.fragment),JOo=l(),od=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=a("a"),KOo=o("from_pretrained()"),ZOo=o(" class method or the "),rV=a("a"),eVo=o("from_config()"),oVo=o(` class
method.`),rVo=l(),_L=a("p"),tVo=o("This class cannot be instantiated directly using "),Dge=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),ft=a("div"),v(bL.$$.fragment),lVo=l(),Gge=a("p"),iVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dVo=l(),rd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),mVo=o("not"),fVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),gVo=o("from_pretrained()"),hVo=o(" to load the model weights."),uVo=l(),v(y1.$$.fragment),pVo=l(),no=a("div"),v(FL.$$.fragment),_Vo=l(),Vge=a("p"),bVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FVo=l(),qa=a("p"),vVo=o("The model class to instantiate is selected based on the "),Xge=a("code"),TVo=o("model_type"),MVo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),EVo=o("pretrained_model_name_or_path"),CVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(":"),yVo=l(),Fe=a("ul"),L1=a("li"),Wge=a("strong"),LVo=o("beit"),xVo=o(" \u2014 "),aV=a("a"),$Vo=o("BeitForImageClassification"),kVo=o(" (BEiT model)"),SVo=l(),x1=a("li"),Hge=a("strong"),RVo=o("convnext"),BVo=o(" \u2014 "),nV=a("a"),PVo=o("ConvNextForImageClassification"),IVo=o(" (ConvNext model)"),qVo=l(),$1=a("li"),Uge=a("strong"),NVo=o("data2vec-vision"),jVo=o(" \u2014 "),sV=a("a"),DVo=o("Data2VecVisionForImageClassification"),GVo=o(" (Data2VecVision model)"),OVo=l(),Rs=a("li"),Jge=a("strong"),VVo=o("deit"),XVo=o(" \u2014 "),lV=a("a"),zVo=o("DeiTForImageClassification"),QVo=o(" or "),iV=a("a"),WVo=o("DeiTForImageClassificationWithTeacher"),HVo=o(" (DeiT model)"),UVo=l(),k1=a("li"),Yge=a("strong"),JVo=o("imagegpt"),YVo=o(" \u2014 "),dV=a("a"),KVo=o("ImageGPTForImageClassification"),ZVo=o(" (ImageGPT model)"),eXo=l(),gt=a("li"),Kge=a("strong"),oXo=o("perceiver"),rXo=o(" \u2014 "),cV=a("a"),tXo=o("PerceiverForImageClassificationLearned"),aXo=o(" or "),mV=a("a"),nXo=o("PerceiverForImageClassificationFourier"),sXo=o(" or "),fV=a("a"),lXo=o("PerceiverForImageClassificationConvProcessing"),iXo=o(" (Perceiver model)"),dXo=l(),S1=a("li"),Zge=a("strong"),cXo=o("poolformer"),mXo=o(" \u2014 "),gV=a("a"),fXo=o("PoolFormerForImageClassification"),gXo=o(" (PoolFormer model)"),hXo=l(),R1=a("li"),ehe=a("strong"),uXo=o("regnet"),pXo=o(" \u2014 "),hV=a("a"),_Xo=o("RegNetForImageClassification"),bXo=o(" (RegNet model)"),FXo=l(),B1=a("li"),ohe=a("strong"),vXo=o("resnet"),TXo=o(" \u2014 "),uV=a("a"),MXo=o("ResNetForImageClassification"),EXo=o(" (ResNet model)"),CXo=l(),P1=a("li"),rhe=a("strong"),wXo=o("segformer"),AXo=o(" \u2014 "),pV=a("a"),yXo=o("SegformerForImageClassification"),LXo=o(" (SegFormer model)"),xXo=l(),I1=a("li"),the=a("strong"),$Xo=o("swin"),kXo=o(" \u2014 "),_V=a("a"),SXo=o("SwinForImageClassification"),RXo=o(" (Swin model)"),BXo=l(),q1=a("li"),ahe=a("strong"),PXo=o("van"),IXo=o(" \u2014 "),bV=a("a"),qXo=o("VanForImageClassification"),NXo=o(" (VAN model)"),jXo=l(),N1=a("li"),nhe=a("strong"),DXo=o("vit"),GXo=o(" \u2014 "),FV=a("a"),OXo=o("ViTForImageClassification"),VXo=o(" (ViT model)"),XXo=l(),j1=a("p"),zXo=o("The model is set in evaluation mode by default using "),she=a("code"),QXo=o("model.eval()"),WXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),HXo=o("model.train()"),UXo=l(),v(D1.$$.fragment),XPe=l(),td=a("h2"),G1=a("a"),ihe=a("span"),v(vL.$$.fragment),JXo=l(),dhe=a("span"),YXo=o("AutoModelForVision2Seq"),zPe=l(),Do=a("div"),v(TL.$$.fragment),KXo=l(),ad=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vV=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),TV=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),ML=a("p"),nzo=o("This class cannot be instantiated directly using "),che=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),ht=a("div"),v(EL.$$.fragment),dzo=l(),mhe=a("p"),czo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mzo=l(),nd=a("p"),fzo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),uzo=o("from_pretrained()"),pzo=o(" to load the model weights."),_zo=l(),v(O1.$$.fragment),bzo=l(),so=a("div"),v(CL.$$.fragment),Fzo=l(),ghe=a("p"),vzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tzo=l(),Na=a("p"),Mzo=o("The model class to instantiate is selected based on the "),hhe=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(":"),xzo=l(),_he=a("ul"),V1=a("li"),bhe=a("strong"),$zo=o("vision-encoder-decoder"),kzo=o(" \u2014 "),EV=a("a"),Szo=o("VisionEncoderDecoderModel"),Rzo=o(" (Vision Encoder decoder model)"),Bzo=l(),X1=a("p"),Pzo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),Izo=o("model.eval()"),qzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),Nzo=o("model.train()"),jzo=l(),v(z1.$$.fragment),QPe=l(),sd=a("h2"),Q1=a("a"),The=a("span"),v(wL.$$.fragment),Dzo=l(),Mhe=a("span"),Gzo=o("AutoModelForAudioClassification"),WPe=l(),Go=a("div"),v(AL.$$.fragment),Ozo=l(),ld=a("p"),Vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=a("a"),Xzo=o("from_pretrained()"),zzo=o(" class method or the "),wV=a("a"),Qzo=o("from_config()"),Wzo=o(` class
method.`),Hzo=l(),yL=a("p"),Uzo=o("This class cannot be instantiated directly using "),Ehe=a("code"),Jzo=o("__init__()"),Yzo=o(" (throws an error)."),Kzo=l(),ut=a("div"),v(LL.$$.fragment),Zzo=l(),Che=a("p"),eQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oQo=l(),id=a("p"),rQo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),tQo=o("not"),aQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nQo=o("from_pretrained()"),sQo=o(" to load the model weights."),lQo=l(),v(W1.$$.fragment),iQo=l(),lo=a("div"),v(xL.$$.fragment),dQo=l(),Ahe=a("p"),cQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mQo=l(),ja=a("p"),fQo=o("The model class to instantiate is selected based on the "),yhe=a("code"),gQo=o("model_type"),hQo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),uQo=o("pretrained_model_name_or_path"),pQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),_Qo=o("pretrained_model_name_or_path"),bQo=o(":"),FQo=l(),Ne=a("ul"),H1=a("li"),$he=a("strong"),vQo=o("data2vec-audio"),TQo=o(" \u2014 "),yV=a("a"),MQo=o("Data2VecAudioForSequenceClassification"),EQo=o(" (Data2VecAudio model)"),CQo=l(),U1=a("li"),khe=a("strong"),wQo=o("hubert"),AQo=o(" \u2014 "),LV=a("a"),yQo=o("HubertForSequenceClassification"),LQo=o(" (Hubert model)"),xQo=l(),J1=a("li"),She=a("strong"),$Qo=o("sew"),kQo=o(" \u2014 "),xV=a("a"),SQo=o("SEWForSequenceClassification"),RQo=o(" (SEW model)"),BQo=l(),Y1=a("li"),Rhe=a("strong"),PQo=o("sew-d"),IQo=o(" \u2014 "),$V=a("a"),qQo=o("SEWDForSequenceClassification"),NQo=o(" (SEW-D model)"),jQo=l(),K1=a("li"),Bhe=a("strong"),DQo=o("unispeech"),GQo=o(" \u2014 "),kV=a("a"),OQo=o("UniSpeechForSequenceClassification"),VQo=o(" (UniSpeech model)"),XQo=l(),Z1=a("li"),Phe=a("strong"),zQo=o("unispeech-sat"),QQo=o(" \u2014 "),SV=a("a"),WQo=o("UniSpeechSatForSequenceClassification"),HQo=o(" (UniSpeechSat model)"),UQo=l(),eT=a("li"),Ihe=a("strong"),JQo=o("wav2vec2"),YQo=o(" \u2014 "),RV=a("a"),KQo=o("Wav2Vec2ForSequenceClassification"),ZQo=o(" (Wav2Vec2 model)"),eWo=l(),oT=a("li"),qhe=a("strong"),oWo=o("wavlm"),rWo=o(" \u2014 "),BV=a("a"),tWo=o("WavLMForSequenceClassification"),aWo=o(" (WavLM model)"),nWo=l(),rT=a("p"),sWo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),dWo=o("model.train()"),cWo=l(),v(tT.$$.fragment),HPe=l(),dd=a("h2"),aT=a("a"),Dhe=a("span"),v($L.$$.fragment),mWo=l(),Ghe=a("span"),fWo=o("AutoModelForAudioFrameClassification"),UPe=l(),Oo=a("div"),v(kL.$$.fragment),gWo=l(),cd=a("p"),hWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=a("a"),uWo=o("from_pretrained()"),pWo=o(" class method or the "),IV=a("a"),_Wo=o("from_config()"),bWo=o(` class
method.`),FWo=l(),SL=a("p"),vWo=o("This class cannot be instantiated directly using "),Ohe=a("code"),TWo=o("__init__()"),MWo=o(" (throws an error)."),EWo=l(),pt=a("div"),v(RL.$$.fragment),CWo=l(),Vhe=a("p"),wWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AWo=l(),md=a("p"),yWo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),LWo=o("not"),xWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),$Wo=o("from_pretrained()"),kWo=o(" to load the model weights."),SWo=l(),v(nT.$$.fragment),RWo=l(),io=a("div"),v(BL.$$.fragment),BWo=l(),zhe=a("p"),PWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IWo=l(),Da=a("p"),qWo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),NWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(":"),XWo=l(),Ga=a("ul"),sT=a("li"),Uhe=a("strong"),zWo=o("data2vec-audio"),QWo=o(" \u2014 "),NV=a("a"),WWo=o("Data2VecAudioForAudioFrameClassification"),HWo=o(" (Data2VecAudio model)"),UWo=l(),lT=a("li"),Jhe=a("strong"),JWo=o("unispeech-sat"),YWo=o(" \u2014 "),jV=a("a"),KWo=o("UniSpeechSatForAudioFrameClassification"),ZWo=o(" (UniSpeechSat model)"),eHo=l(),iT=a("li"),Yhe=a("strong"),oHo=o("wav2vec2"),rHo=o(" \u2014 "),DV=a("a"),tHo=o("Wav2Vec2ForAudioFrameClassification"),aHo=o(" (Wav2Vec2 model)"),nHo=l(),dT=a("li"),Khe=a("strong"),sHo=o("wavlm"),lHo=o(" \u2014 "),GV=a("a"),iHo=o("WavLMForAudioFrameClassification"),dHo=o(" (WavLM model)"),cHo=l(),cT=a("p"),mHo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),fHo=o("model.eval()"),gHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),hHo=o("model.train()"),uHo=l(),v(mT.$$.fragment),JPe=l(),fd=a("h2"),fT=a("a"),oue=a("span"),v(PL.$$.fragment),pHo=l(),rue=a("span"),_Ho=o("AutoModelForCTC"),YPe=l(),Vo=a("div"),v(IL.$$.fragment),bHo=l(),gd=a("p"),FHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=a("a"),vHo=o("from_pretrained()"),THo=o(" class method or the "),VV=a("a"),MHo=o("from_config()"),EHo=o(` class
method.`),CHo=l(),qL=a("p"),wHo=o("This class cannot be instantiated directly using "),tue=a("code"),AHo=o("__init__()"),yHo=o(" (throws an error)."),LHo=l(),_t=a("div"),v(NL.$$.fragment),xHo=l(),aue=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kHo=l(),hd=a("p"),SHo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),RHo=o("not"),BHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),PHo=o("from_pretrained()"),IHo=o(" to load the model weights."),qHo=l(),v(gT.$$.fragment),NHo=l(),co=a("div"),v(jL.$$.fragment),jHo=l(),sue=a("p"),DHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GHo=l(),Oa=a("p"),OHo=o("The model class to instantiate is selected based on the "),lue=a("code"),VHo=o("model_type"),XHo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),WHo=o("pretrained_model_name_or_path"),HHo=o(":"),UHo=l(),je=a("ul"),hT=a("li"),cue=a("strong"),JHo=o("data2vec-audio"),YHo=o(" \u2014 "),zV=a("a"),KHo=o("Data2VecAudioForCTC"),ZHo=o(" (Data2VecAudio model)"),eUo=l(),uT=a("li"),mue=a("strong"),oUo=o("hubert"),rUo=o(" \u2014 "),QV=a("a"),tUo=o("HubertForCTC"),aUo=o(" (Hubert model)"),nUo=l(),pT=a("li"),fue=a("strong"),sUo=o("sew"),lUo=o(" \u2014 "),WV=a("a"),iUo=o("SEWForCTC"),dUo=o(" (SEW model)"),cUo=l(),_T=a("li"),gue=a("strong"),mUo=o("sew-d"),fUo=o(" \u2014 "),HV=a("a"),gUo=o("SEWDForCTC"),hUo=o(" (SEW-D model)"),uUo=l(),bT=a("li"),hue=a("strong"),pUo=o("unispeech"),_Uo=o(" \u2014 "),UV=a("a"),bUo=o("UniSpeechForCTC"),FUo=o(" (UniSpeech model)"),vUo=l(),FT=a("li"),uue=a("strong"),TUo=o("unispeech-sat"),MUo=o(" \u2014 "),JV=a("a"),EUo=o("UniSpeechSatForCTC"),CUo=o(" (UniSpeechSat model)"),wUo=l(),vT=a("li"),pue=a("strong"),AUo=o("wav2vec2"),yUo=o(" \u2014 "),YV=a("a"),LUo=o("Wav2Vec2ForCTC"),xUo=o(" (Wav2Vec2 model)"),$Uo=l(),TT=a("li"),_ue=a("strong"),kUo=o("wavlm"),SUo=o(" \u2014 "),KV=a("a"),RUo=o("WavLMForCTC"),BUo=o(" (WavLM model)"),PUo=l(),MT=a("p"),IUo=o("The model is set in evaluation mode by default using "),bue=a("code"),qUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),jUo=o("model.train()"),DUo=l(),v(ET.$$.fragment),KPe=l(),ud=a("h2"),CT=a("a"),vue=a("span"),v(DL.$$.fragment),GUo=l(),Tue=a("span"),OUo=o("AutoModelForSpeechSeq2Seq"),ZPe=l(),Xo=a("div"),v(GL.$$.fragment),VUo=l(),pd=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=a("a"),zUo=o("from_pretrained()"),QUo=o(" class method or the "),eX=a("a"),WUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),OL=a("p"),JUo=o("This class cannot be instantiated directly using "),Mue=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),bt=a("div"),v(VL.$$.fragment),eJo=l(),Eue=a("p"),oJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJo=l(),_d=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),v(wT.$$.fragment),dJo=l(),mo=a("div"),v(XL.$$.fragment),cJo=l(),wue=a("p"),mJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fJo=l(),Va=a("p"),gJo=o("The model class to instantiate is selected based on the "),Aue=a("code"),hJo=o("model_type"),uJo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),pJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),bJo=o("pretrained_model_name_or_path"),FJo=o(":"),vJo=l(),zL=a("ul"),AT=a("li"),xue=a("strong"),TJo=o("speech-encoder-decoder"),MJo=o(" \u2014 "),rX=a("a"),EJo=o("SpeechEncoderDecoderModel"),CJo=o(" (Speech Encoder decoder model)"),wJo=l(),yT=a("li"),$ue=a("strong"),AJo=o("speech_to_text"),yJo=o(" \u2014 "),tX=a("a"),LJo=o("Speech2TextForConditionalGeneration"),xJo=o(" (Speech2Text model)"),$Jo=l(),LT=a("p"),kJo=o("The model is set in evaluation mode by default using "),kue=a("code"),SJo=o("model.eval()"),RJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),BJo=o("model.train()"),PJo=l(),v(xT.$$.fragment),eIe=l(),bd=a("h2"),$T=a("a"),Rue=a("span"),v(QL.$$.fragment),IJo=l(),Bue=a("span"),qJo=o("AutoModelForAudioXVector"),oIe=l(),zo=a("div"),v(WL.$$.fragment),NJo=l(),Fd=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),nX=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),HL=a("p"),zJo=o("This class cannot be instantiated directly using "),Pue=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),Ft=a("div"),v(UL.$$.fragment),UJo=l(),Iue=a("p"),JJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YJo=l(),vd=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),v(kT.$$.fragment),aYo=l(),fo=a("div"),v(JL.$$.fragment),nYo=l(),Nue=a("p"),sYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lYo=l(),Xa=a("p"),iYo=o("The model class to instantiate is selected based on the "),jue=a("code"),dYo=o("model_type"),cYo=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),mYo=o("pretrained_model_name_or_path"),fYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(":"),uYo=l(),za=a("ul"),ST=a("li"),Oue=a("strong"),pYo=o("data2vec-audio"),_Yo=o(" \u2014 "),lX=a("a"),bYo=o("Data2VecAudioForXVector"),FYo=o(" (Data2VecAudio model)"),vYo=l(),RT=a("li"),Vue=a("strong"),TYo=o("unispeech-sat"),MYo=o(" \u2014 "),iX=a("a"),EYo=o("UniSpeechSatForXVector"),CYo=o(" (UniSpeechSat model)"),wYo=l(),BT=a("li"),Xue=a("strong"),AYo=o("wav2vec2"),yYo=o(" \u2014 "),dX=a("a"),LYo=o("Wav2Vec2ForXVector"),xYo=o(" (Wav2Vec2 model)"),$Yo=l(),PT=a("li"),zue=a("strong"),kYo=o("wavlm"),SYo=o(" \u2014 "),cX=a("a"),RYo=o("WavLMForXVector"),BYo=o(" (WavLM model)"),PYo=l(),IT=a("p"),IYo=o("The model is set in evaluation mode by default using "),Que=a("code"),qYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),jYo=o("model.train()"),DYo=l(),v(qT.$$.fragment),rIe=l(),Td=a("h2"),NT=a("a"),Hue=a("span"),v(YL.$$.fragment),GYo=l(),Uue=a("span"),OYo=o("AutoModelForMaskedImageModeling"),tIe=l(),Qo=a("div"),v(KL.$$.fragment),VYo=l(),Md=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mX=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),fX=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),ZL=a("p"),JYo=o("This class cannot be instantiated directly using "),Jue=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),vt=a("div"),v(e8.$$.fragment),eKo=l(),Yue=a("p"),oKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rKo=l(),Ed=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),v(jT.$$.fragment),dKo=l(),go=a("div"),v(o8.$$.fragment),cKo=l(),Zue=a("p"),mKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fKo=l(),Qa=a("p"),gKo=o("The model class to instantiate is selected based on the "),epe=a("code"),hKo=o("model_type"),uKo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),pKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),bKo=o("pretrained_model_name_or_path"),FKo=o(":"),vKo=l(),Cd=a("ul"),DT=a("li"),tpe=a("strong"),TKo=o("deit"),MKo=o(" \u2014 "),hX=a("a"),EKo=o("DeiTForMaskedImageModeling"),CKo=o(" (DeiT model)"),wKo=l(),GT=a("li"),ape=a("strong"),AKo=o("swin"),yKo=o(" \u2014 "),uX=a("a"),LKo=o("SwinForMaskedImageModeling"),xKo=o(" (Swin model)"),$Ko=l(),OT=a("li"),npe=a("strong"),kKo=o("vit"),SKo=o(" \u2014 "),pX=a("a"),RKo=o("ViTForMaskedImageModeling"),BKo=o(" (ViT model)"),PKo=l(),VT=a("p"),IKo=o("The model is set in evaluation mode by default using "),spe=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),jKo=o("model.train()"),DKo=l(),v(XT.$$.fragment),aIe=l(),wd=a("h2"),zT=a("a"),ipe=a("span"),v(r8.$$.fragment),GKo=l(),dpe=a("span"),OKo=o("AutoModelForObjectDetection"),nIe=l(),Wo=a("div"),v(t8.$$.fragment),VKo=l(),Ad=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),bX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),a8=a("p"),JKo=o("This class cannot be instantiated directly using "),cpe=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),Tt=a("div"),v(n8.$$.fragment),eZo=l(),mpe=a("p"),oZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rZo=l(),yd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),v(QT.$$.fragment),dZo=l(),ho=a("div"),v(s8.$$.fragment),cZo=l(),gpe=a("p"),mZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fZo=l(),Wa=a("p"),gZo=o("The model class to instantiate is selected based on the "),hpe=a("code"),hZo=o("model_type"),uZo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),pZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),bZo=o("pretrained_model_name_or_path"),FZo=o(":"),vZo=l(),l8=a("ul"),WT=a("li"),_pe=a("strong"),TZo=o("detr"),MZo=o(" \u2014 "),vX=a("a"),EZo=o("DetrForObjectDetection"),CZo=o(" (DETR model)"),wZo=l(),HT=a("li"),bpe=a("strong"),AZo=o("yolos"),yZo=o(" \u2014 "),TX=a("a"),LZo=o("YolosForObjectDetection"),xZo=o(" (YOLOS model)"),$Zo=l(),UT=a("p"),kZo=o("The model is set in evaluation mode by default using "),Fpe=a("code"),SZo=o("model.eval()"),RZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),BZo=o("model.train()"),PZo=l(),v(JT.$$.fragment),sIe=l(),Ld=a("h2"),YT=a("a"),Tpe=a("span"),v(i8.$$.fragment),IZo=l(),Mpe=a("span"),qZo=o("AutoModelForImageSegmentation"),lIe=l(),Ho=a("div"),v(d8.$$.fragment),NZo=l(),xd=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),EX=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),c8=a("p"),zZo=o("This class cannot be instantiated directly using "),Epe=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),Mt=a("div"),v(m8.$$.fragment),UZo=l(),Cpe=a("p"),JZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YZo=l(),$d=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),v(KT.$$.fragment),aer=l(),uo=a("div"),v(f8.$$.fragment),ner=l(),Ape=a("p"),ser=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ler=l(),Ha=a("p"),ier=o("The model class to instantiate is selected based on the "),ype=a("code"),der=o("model_type"),cer=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),mer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),ger=o("pretrained_model_name_or_path"),her=o(":"),uer=l(),$pe=a("ul"),ZT=a("li"),kpe=a("strong"),per=o("detr"),_er=o(" \u2014 "),wX=a("a"),ber=o("DetrForSegmentation"),Fer=o(" (DETR model)"),ver=l(),eM=a("p"),Ter=o("The model is set in evaluation mode by default using "),Spe=a("code"),Mer=o("model.eval()"),Eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),Cer=o("model.train()"),wer=l(),v(oM.$$.fragment),iIe=l(),kd=a("h2"),rM=a("a"),Bpe=a("span"),v(g8.$$.fragment),Aer=l(),Ppe=a("span"),yer=o("AutoModelForSemanticSegmentation"),dIe=l(),Uo=a("div"),v(h8.$$.fragment),Ler=l(),Sd=a("p"),xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=a("a"),$er=o("from_pretrained()"),ker=o(" class method or the "),yX=a("a"),Ser=o("from_config()"),Rer=o(` class
method.`),Ber=l(),u8=a("p"),Per=o("This class cannot be instantiated directly using "),Ipe=a("code"),Ier=o("__init__()"),qer=o(" (throws an error)."),Ner=l(),Et=a("div"),v(p8.$$.fragment),jer=l(),qpe=a("p"),Der=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ger=l(),Rd=a("p"),Oer=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),Ver=o("not"),Xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),zer=o("from_pretrained()"),Qer=o(" to load the model weights."),Wer=l(),v(tM.$$.fragment),Her=l(),po=a("div"),v(_8.$$.fragment),Uer=l(),jpe=a("p"),Jer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Yer=l(),Ua=a("p"),Ker=o("The model class to instantiate is selected based on the "),Dpe=a("code"),Zer=o("model_type"),eor=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(":"),nor=l(),Ja=a("ul"),aM=a("li"),Vpe=a("strong"),sor=o("beit"),lor=o(" \u2014 "),xX=a("a"),ior=o("BeitForSemanticSegmentation"),dor=o(" (BEiT model)"),cor=l(),nM=a("li"),Xpe=a("strong"),mor=o("data2vec-vision"),gor=o(" \u2014 "),$X=a("a"),hor=o("Data2VecVisionForSemanticSegmentation"),uor=o(" (Data2VecVision model)"),por=l(),sM=a("li"),zpe=a("strong"),_or=o("dpt"),bor=o(" \u2014 "),kX=a("a"),For=o("DPTForSemanticSegmentation"),vor=o(" (DPT model)"),Tor=l(),lM=a("li"),Qpe=a("strong"),Mor=o("segformer"),Eor=o(" \u2014 "),SX=a("a"),Cor=o("SegformerForSemanticSegmentation"),wor=o(" (SegFormer model)"),Aor=l(),iM=a("p"),yor=o("The model is set in evaluation mode by default using "),Wpe=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),$or=o("model.train()"),kor=l(),v(dM.$$.fragment),cIe=l(),Bd=a("h2"),cM=a("a"),Upe=a("span"),v(b8.$$.fragment),Sor=l(),Jpe=a("span"),Ror=o("AutoModelForInstanceSegmentation"),mIe=l(),Jo=a("div"),v(F8.$$.fragment),Bor=l(),Pd=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),BX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),v8=a("p"),Gor=o("This class cannot be instantiated directly using "),Ype=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Ct=a("div"),v(T8.$$.fragment),zor=l(),Kpe=a("p"),Qor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wor=l(),Id=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),v(mM.$$.fragment),err=l(),_o=a("div"),v(M8.$$.fragment),orr=l(),e_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),trr=l(),Ya=a("p"),arr=o("The model class to instantiate is selected based on the "),o_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),mrr=l(),a_e=a("ul"),fM=a("li"),n_e=a("strong"),frr=o("maskformer"),grr=o(" \u2014 "),IX=a("a"),hrr=o("MaskFormerForInstanceSegmentation"),urr=o(" (MaskFormer model)"),prr=l(),gM=a("p"),_rr=o("The model is set in evaluation mode by default using "),s_e=a("code"),brr=o("model.eval()"),Frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),vrr=o("model.train()"),Trr=l(),v(hM.$$.fragment),fIe=l(),qd=a("h2"),uM=a("a"),i_e=a("span"),v(E8.$$.fragment),Mrr=l(),d_e=a("span"),Err=o("TFAutoModel"),gIe=l(),Yo=a("div"),v(C8.$$.fragment),Crr=l(),Nd=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=a("a"),Arr=o("from_pretrained()"),yrr=o(" class method or the "),NX=a("a"),Lrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),w8=a("p"),krr=o("This class cannot be instantiated directly using "),c_e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Brr=l(),wt=a("div"),v(A8.$$.fragment),Prr=l(),m_e=a("p"),Irr=o("Instantiates one of the base model classes of the library from a configuration."),qrr=l(),jd=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),v(pM.$$.fragment),Xrr=l(),wr=a("div"),v(y8.$$.fragment),zrr=l(),g_e=a("p"),Qrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wrr=l(),Ka=a("p"),Hrr=o("The model class to instantiate is selected based on the "),h_e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),j=a("ul"),_M=a("li"),__e=a("strong"),rtr=o("albert"),ttr=o(" \u2014 "),DX=a("a"),atr=o("TFAlbertModel"),ntr=o(" (ALBERT model)"),str=l(),bM=a("li"),b_e=a("strong"),ltr=o("bart"),itr=o(" \u2014 "),GX=a("a"),dtr=o("TFBartModel"),ctr=o(" (BART model)"),mtr=l(),FM=a("li"),F_e=a("strong"),ftr=o("bert"),gtr=o(" \u2014 "),OX=a("a"),htr=o("TFBertModel"),utr=o(" (BERT model)"),ptr=l(),vM=a("li"),v_e=a("strong"),_tr=o("blenderbot"),btr=o(" \u2014 "),VX=a("a"),Ftr=o("TFBlenderbotModel"),vtr=o(" (Blenderbot model)"),Ttr=l(),TM=a("li"),T_e=a("strong"),Mtr=o("blenderbot-small"),Etr=o(" \u2014 "),XX=a("a"),Ctr=o("TFBlenderbotSmallModel"),wtr=o(" (BlenderbotSmall model)"),Atr=l(),MM=a("li"),M_e=a("strong"),ytr=o("camembert"),Ltr=o(" \u2014 "),zX=a("a"),xtr=o("TFCamembertModel"),$tr=o(" (CamemBERT model)"),ktr=l(),EM=a("li"),E_e=a("strong"),Str=o("clip"),Rtr=o(" \u2014 "),QX=a("a"),Btr=o("TFCLIPModel"),Ptr=o(" (CLIP model)"),Itr=l(),CM=a("li"),C_e=a("strong"),qtr=o("convbert"),Ntr=o(" \u2014 "),WX=a("a"),jtr=o("TFConvBertModel"),Dtr=o(" (ConvBERT model)"),Gtr=l(),wM=a("li"),w_e=a("strong"),Otr=o("convnext"),Vtr=o(" \u2014 "),HX=a("a"),Xtr=o("TFConvNextModel"),ztr=o(" (ConvNext model)"),Qtr=l(),AM=a("li"),A_e=a("strong"),Wtr=o("ctrl"),Htr=o(" \u2014 "),UX=a("a"),Utr=o("TFCTRLModel"),Jtr=o(" (CTRL model)"),Ytr=l(),yM=a("li"),y_e=a("strong"),Ktr=o("data2vec-vision"),Ztr=o(" \u2014 "),JX=a("a"),ear=o("TFData2VecVisionModel"),oar=o(" (Data2VecVision model)"),rar=l(),LM=a("li"),L_e=a("strong"),tar=o("deberta"),aar=o(" \u2014 "),YX=a("a"),nar=o("TFDebertaModel"),sar=o(" (DeBERTa model)"),lar=l(),xM=a("li"),x_e=a("strong"),iar=o("deberta-v2"),dar=o(" \u2014 "),KX=a("a"),car=o("TFDebertaV2Model"),mar=o(" (DeBERTa-v2 model)"),far=l(),$M=a("li"),$_e=a("strong"),gar=o("distilbert"),har=o(" \u2014 "),ZX=a("a"),uar=o("TFDistilBertModel"),par=o(" (DistilBERT model)"),_ar=l(),kM=a("li"),k_e=a("strong"),bar=o("dpr"),Far=o(" \u2014 "),ez=a("a"),Tar=o("TFDPRQuestionEncoder"),Mar=o(" (DPR model)"),Ear=l(),SM=a("li"),S_e=a("strong"),Car=o("electra"),war=o(" \u2014 "),oz=a("a"),Aar=o("TFElectraModel"),yar=o(" (ELECTRA model)"),Lar=l(),RM=a("li"),R_e=a("strong"),xar=o("flaubert"),$ar=o(" \u2014 "),rz=a("a"),kar=o("TFFlaubertModel"),Sar=o(" (FlauBERT model)"),Rar=l(),Bs=a("li"),B_e=a("strong"),Bar=o("funnel"),Par=o(" \u2014 "),tz=a("a"),Iar=o("TFFunnelModel"),qar=o(" or "),az=a("a"),Nar=o("TFFunnelBaseModel"),jar=o(" (Funnel Transformer model)"),Dar=l(),BM=a("li"),P_e=a("strong"),Gar=o("gpt2"),Oar=o(" \u2014 "),nz=a("a"),Var=o("TFGPT2Model"),Xar=o(" (OpenAI GPT-2 model)"),zar=l(),PM=a("li"),I_e=a("strong"),Qar=o("gptj"),War=o(" \u2014 "),sz=a("a"),Har=o("TFGPTJModel"),Uar=o(" (GPT-J model)"),Jar=l(),IM=a("li"),q_e=a("strong"),Yar=o("hubert"),Kar=o(" \u2014 "),lz=a("a"),Zar=o("TFHubertModel"),enr=o(" (Hubert model)"),onr=l(),qM=a("li"),N_e=a("strong"),rnr=o("layoutlm"),tnr=o(" \u2014 "),iz=a("a"),anr=o("TFLayoutLMModel"),nnr=o(" (LayoutLM model)"),snr=l(),NM=a("li"),j_e=a("strong"),lnr=o("led"),inr=o(" \u2014 "),dz=a("a"),dnr=o("TFLEDModel"),cnr=o(" (LED model)"),mnr=l(),jM=a("li"),D_e=a("strong"),fnr=o("longformer"),gnr=o(" \u2014 "),cz=a("a"),hnr=o("TFLongformerModel"),unr=o(" (Longformer model)"),pnr=l(),DM=a("li"),G_e=a("strong"),_nr=o("lxmert"),bnr=o(" \u2014 "),mz=a("a"),Fnr=o("TFLxmertModel"),vnr=o(" (LXMERT model)"),Tnr=l(),GM=a("li"),O_e=a("strong"),Mnr=o("marian"),Enr=o(" \u2014 "),fz=a("a"),Cnr=o("TFMarianModel"),wnr=o(" (Marian model)"),Anr=l(),OM=a("li"),V_e=a("strong"),ynr=o("mbart"),Lnr=o(" \u2014 "),gz=a("a"),xnr=o("TFMBartModel"),$nr=o(" (mBART model)"),knr=l(),VM=a("li"),X_e=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFMobileBertModel"),Pnr=o(" (MobileBERT model)"),Inr=l(),XM=a("li"),z_e=a("strong"),qnr=o("mpnet"),Nnr=o(" \u2014 "),uz=a("a"),jnr=o("TFMPNetModel"),Dnr=o(" (MPNet model)"),Gnr=l(),zM=a("li"),Q_e=a("strong"),Onr=o("mt5"),Vnr=o(" \u2014 "),pz=a("a"),Xnr=o("TFMT5Model"),znr=o(" (mT5 model)"),Qnr=l(),QM=a("li"),W_e=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),_z=a("a"),Unr=o("TFOpenAIGPTModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),WM=a("li"),H_e=a("strong"),Knr=o("pegasus"),Znr=o(" \u2014 "),bz=a("a"),esr=o("TFPegasusModel"),osr=o(" (Pegasus model)"),rsr=l(),HM=a("li"),U_e=a("strong"),tsr=o("rembert"),asr=o(" \u2014 "),Fz=a("a"),nsr=o("TFRemBertModel"),ssr=o(" (RemBERT model)"),lsr=l(),UM=a("li"),J_e=a("strong"),isr=o("roberta"),dsr=o(" \u2014 "),vz=a("a"),csr=o("TFRobertaModel"),msr=o(" (RoBERTa model)"),fsr=l(),JM=a("li"),Y_e=a("strong"),gsr=o("roformer"),hsr=o(" \u2014 "),Tz=a("a"),usr=o("TFRoFormerModel"),psr=o(" (RoFormer model)"),_sr=l(),YM=a("li"),K_e=a("strong"),bsr=o("speech_to_text"),Fsr=o(" \u2014 "),Mz=a("a"),vsr=o("TFSpeech2TextModel"),Tsr=o(" (Speech2Text model)"),Msr=l(),KM=a("li"),Z_e=a("strong"),Esr=o("t5"),Csr=o(" \u2014 "),Ez=a("a"),wsr=o("TFT5Model"),Asr=o(" (T5 model)"),ysr=l(),ZM=a("li"),ebe=a("strong"),Lsr=o("tapas"),xsr=o(" \u2014 "),Cz=a("a"),$sr=o("TFTapasModel"),ksr=o(" (TAPAS model)"),Ssr=l(),e4=a("li"),obe=a("strong"),Rsr=o("transfo-xl"),Bsr=o(" \u2014 "),wz=a("a"),Psr=o("TFTransfoXLModel"),Isr=o(" (Transformer-XL model)"),qsr=l(),o4=a("li"),rbe=a("strong"),Nsr=o("vit"),jsr=o(" \u2014 "),Az=a("a"),Dsr=o("TFViTModel"),Gsr=o(" (ViT model)"),Osr=l(),r4=a("li"),tbe=a("strong"),Vsr=o("vit_mae"),Xsr=o(" \u2014 "),yz=a("a"),zsr=o("TFViTMAEModel"),Qsr=o(" (ViTMAE model)"),Wsr=l(),t4=a("li"),abe=a("strong"),Hsr=o("wav2vec2"),Usr=o(" \u2014 "),Lz=a("a"),Jsr=o("TFWav2Vec2Model"),Ysr=o(" (Wav2Vec2 model)"),Ksr=l(),a4=a("li"),nbe=a("strong"),Zsr=o("xlm"),elr=o(" \u2014 "),xz=a("a"),olr=o("TFXLMModel"),rlr=o(" (XLM model)"),tlr=l(),n4=a("li"),sbe=a("strong"),alr=o("xlm-roberta"),nlr=o(" \u2014 "),$z=a("a"),slr=o("TFXLMRobertaModel"),llr=o(" (XLM-RoBERTa model)"),ilr=l(),s4=a("li"),lbe=a("strong"),dlr=o("xlnet"),clr=o(" \u2014 "),kz=a("a"),mlr=o("TFXLNetModel"),flr=o(" (XLNet model)"),glr=l(),v(l4.$$.fragment),hIe=l(),Dd=a("h2"),i4=a("a"),ibe=a("span"),v(L8.$$.fragment),hlr=l(),dbe=a("span"),ulr=o("TFAutoModelForPreTraining"),uIe=l(),Ko=a("div"),v(x8.$$.fragment),plr=l(),Gd=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=a("a"),blr=o("from_pretrained()"),Flr=o(" class method or the "),Rz=a("a"),vlr=o("from_config()"),Tlr=o(` class
method.`),Mlr=l(),$8=a("p"),Elr=o("This class cannot be instantiated directly using "),cbe=a("code"),Clr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),At=a("div"),v(k8.$$.fragment),ylr=l(),mbe=a("p"),Llr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xlr=l(),Od=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),klr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Rlr=o("from_pretrained()"),Blr=o(" to load the model weights."),Plr=l(),v(d4.$$.fragment),Ilr=l(),Ar=a("div"),v(S8.$$.fragment),qlr=l(),gbe=a("p"),Nlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jlr=l(),Za=a("p"),Dlr=o("The model class to instantiate is selected based on the "),hbe=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),zlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Wlr=l(),ne=a("ul"),c4=a("li"),_be=a("strong"),Hlr=o("albert"),Ulr=o(" \u2014 "),Pz=a("a"),Jlr=o("TFAlbertForPreTraining"),Ylr=o(" (ALBERT model)"),Klr=l(),m4=a("li"),bbe=a("strong"),Zlr=o("bart"),eir=o(" \u2014 "),Iz=a("a"),oir=o("TFBartForConditionalGeneration"),rir=o(" (BART model)"),tir=l(),f4=a("li"),Fbe=a("strong"),air=o("bert"),nir=o(" \u2014 "),qz=a("a"),sir=o("TFBertForPreTraining"),lir=o(" (BERT model)"),iir=l(),g4=a("li"),vbe=a("strong"),dir=o("camembert"),cir=o(" \u2014 "),Nz=a("a"),mir=o("TFCamembertForMaskedLM"),fir=o(" (CamemBERT model)"),gir=l(),h4=a("li"),Tbe=a("strong"),hir=o("ctrl"),uir=o(" \u2014 "),jz=a("a"),pir=o("TFCTRLLMHeadModel"),_ir=o(" (CTRL model)"),bir=l(),u4=a("li"),Mbe=a("strong"),Fir=o("distilbert"),vir=o(" \u2014 "),Dz=a("a"),Tir=o("TFDistilBertForMaskedLM"),Mir=o(" (DistilBERT model)"),Eir=l(),p4=a("li"),Ebe=a("strong"),Cir=o("electra"),wir=o(" \u2014 "),Gz=a("a"),Air=o("TFElectraForPreTraining"),yir=o(" (ELECTRA model)"),Lir=l(),_4=a("li"),Cbe=a("strong"),xir=o("flaubert"),$ir=o(" \u2014 "),Oz=a("a"),kir=o("TFFlaubertWithLMHeadModel"),Sir=o(" (FlauBERT model)"),Rir=l(),b4=a("li"),wbe=a("strong"),Bir=o("funnel"),Pir=o(" \u2014 "),Vz=a("a"),Iir=o("TFFunnelForPreTraining"),qir=o(" (Funnel Transformer model)"),Nir=l(),F4=a("li"),Abe=a("strong"),jir=o("gpt2"),Dir=o(" \u2014 "),Xz=a("a"),Gir=o("TFGPT2LMHeadModel"),Oir=o(" (OpenAI GPT-2 model)"),Vir=l(),v4=a("li"),ybe=a("strong"),Xir=o("layoutlm"),zir=o(" \u2014 "),zz=a("a"),Qir=o("TFLayoutLMForMaskedLM"),Wir=o(" (LayoutLM model)"),Hir=l(),T4=a("li"),Lbe=a("strong"),Uir=o("lxmert"),Jir=o(" \u2014 "),Qz=a("a"),Yir=o("TFLxmertForPreTraining"),Kir=o(" (LXMERT model)"),Zir=l(),M4=a("li"),xbe=a("strong"),edr=o("mobilebert"),odr=o(" \u2014 "),Wz=a("a"),rdr=o("TFMobileBertForPreTraining"),tdr=o(" (MobileBERT model)"),adr=l(),E4=a("li"),$be=a("strong"),ndr=o("mpnet"),sdr=o(" \u2014 "),Hz=a("a"),ldr=o("TFMPNetForMaskedLM"),idr=o(" (MPNet model)"),ddr=l(),C4=a("li"),kbe=a("strong"),cdr=o("openai-gpt"),mdr=o(" \u2014 "),Uz=a("a"),fdr=o("TFOpenAIGPTLMHeadModel"),gdr=o(" (OpenAI GPT model)"),hdr=l(),w4=a("li"),Sbe=a("strong"),udr=o("roberta"),pdr=o(" \u2014 "),Jz=a("a"),_dr=o("TFRobertaForMaskedLM"),bdr=o(" (RoBERTa model)"),Fdr=l(),A4=a("li"),Rbe=a("strong"),vdr=o("t5"),Tdr=o(" \u2014 "),Yz=a("a"),Mdr=o("TFT5ForConditionalGeneration"),Edr=o(" (T5 model)"),Cdr=l(),y4=a("li"),Bbe=a("strong"),wdr=o("tapas"),Adr=o(" \u2014 "),Kz=a("a"),ydr=o("TFTapasForMaskedLM"),Ldr=o(" (TAPAS model)"),xdr=l(),L4=a("li"),Pbe=a("strong"),$dr=o("transfo-xl"),kdr=o(" \u2014 "),Zz=a("a"),Sdr=o("TFTransfoXLLMHeadModel"),Rdr=o(" (Transformer-XL model)"),Bdr=l(),x4=a("li"),Ibe=a("strong"),Pdr=o("vit_mae"),Idr=o(" \u2014 "),eQ=a("a"),qdr=o("TFViTMAEForPreTraining"),Ndr=o(" (ViTMAE model)"),jdr=l(),$4=a("li"),qbe=a("strong"),Ddr=o("xlm"),Gdr=o(" \u2014 "),oQ=a("a"),Odr=o("TFXLMWithLMHeadModel"),Vdr=o(" (XLM model)"),Xdr=l(),k4=a("li"),Nbe=a("strong"),zdr=o("xlm-roberta"),Qdr=o(" \u2014 "),rQ=a("a"),Wdr=o("TFXLMRobertaForMaskedLM"),Hdr=o(" (XLM-RoBERTa model)"),Udr=l(),S4=a("li"),jbe=a("strong"),Jdr=o("xlnet"),Ydr=o(" \u2014 "),tQ=a("a"),Kdr=o("TFXLNetLMHeadModel"),Zdr=o(" (XLNet model)"),ecr=l(),v(R4.$$.fragment),pIe=l(),Vd=a("h2"),B4=a("a"),Dbe=a("span"),v(R8.$$.fragment),ocr=l(),Gbe=a("span"),rcr=o("TFAutoModelForCausalLM"),_Ie=l(),Zo=a("div"),v(B8.$$.fragment),tcr=l(),Xd=a("p"),acr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=a("a"),ncr=o("from_pretrained()"),scr=o(" class method or the "),nQ=a("a"),lcr=o("from_config()"),icr=o(` class
method.`),dcr=l(),P8=a("p"),ccr=o("This class cannot be instantiated directly using "),Obe=a("code"),mcr=o("__init__()"),fcr=o(" (throws an error)."),gcr=l(),yt=a("div"),v(I8.$$.fragment),hcr=l(),Vbe=a("p"),ucr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pcr=l(),zd=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),bcr=o("not"),Fcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),vcr=o("from_pretrained()"),Tcr=o(" to load the model weights."),Mcr=l(),v(P4.$$.fragment),Ecr=l(),yr=a("div"),v(q8.$$.fragment),Ccr=l(),zbe=a("p"),wcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Acr=l(),en=a("p"),ycr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),Lcr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(":"),Bcr=l(),Te=a("ul"),I4=a("li"),Ube=a("strong"),Pcr=o("bert"),Icr=o(" \u2014 "),lQ=a("a"),qcr=o("TFBertLMHeadModel"),Ncr=o(" (BERT model)"),jcr=l(),q4=a("li"),Jbe=a("strong"),Dcr=o("camembert"),Gcr=o(" \u2014 "),iQ=a("a"),Ocr=o("TFCamembertForCausalLM"),Vcr=o(" (CamemBERT model)"),Xcr=l(),N4=a("li"),Ybe=a("strong"),zcr=o("ctrl"),Qcr=o(" \u2014 "),dQ=a("a"),Wcr=o("TFCTRLLMHeadModel"),Hcr=o(" (CTRL model)"),Ucr=l(),j4=a("li"),Kbe=a("strong"),Jcr=o("gpt2"),Ycr=o(" \u2014 "),cQ=a("a"),Kcr=o("TFGPT2LMHeadModel"),Zcr=o(" (OpenAI GPT-2 model)"),emr=l(),D4=a("li"),Zbe=a("strong"),omr=o("gptj"),rmr=o(" \u2014 "),mQ=a("a"),tmr=o("TFGPTJForCausalLM"),amr=o(" (GPT-J model)"),nmr=l(),G4=a("li"),e2e=a("strong"),smr=o("openai-gpt"),lmr=o(" \u2014 "),fQ=a("a"),imr=o("TFOpenAIGPTLMHeadModel"),dmr=o(" (OpenAI GPT model)"),cmr=l(),O4=a("li"),o2e=a("strong"),mmr=o("rembert"),fmr=o(" \u2014 "),gQ=a("a"),gmr=o("TFRemBertForCausalLM"),hmr=o(" (RemBERT model)"),umr=l(),V4=a("li"),r2e=a("strong"),pmr=o("roberta"),_mr=o(" \u2014 "),hQ=a("a"),bmr=o("TFRobertaForCausalLM"),Fmr=o(" (RoBERTa model)"),vmr=l(),X4=a("li"),t2e=a("strong"),Tmr=o("roformer"),Mmr=o(" \u2014 "),uQ=a("a"),Emr=o("TFRoFormerForCausalLM"),Cmr=o(" (RoFormer model)"),wmr=l(),z4=a("li"),a2e=a("strong"),Amr=o("transfo-xl"),ymr=o(" \u2014 "),pQ=a("a"),Lmr=o("TFTransfoXLLMHeadModel"),xmr=o(" (Transformer-XL model)"),$mr=l(),Q4=a("li"),n2e=a("strong"),kmr=o("xlm"),Smr=o(" \u2014 "),_Q=a("a"),Rmr=o("TFXLMWithLMHeadModel"),Bmr=o(" (XLM model)"),Pmr=l(),W4=a("li"),s2e=a("strong"),Imr=o("xlnet"),qmr=o(" \u2014 "),bQ=a("a"),Nmr=o("TFXLNetLMHeadModel"),jmr=o(" (XLNet model)"),Dmr=l(),v(H4.$$.fragment),bIe=l(),Qd=a("h2"),U4=a("a"),l2e=a("span"),v(N8.$$.fragment),Gmr=l(),i2e=a("span"),Omr=o("TFAutoModelForImageClassification"),FIe=l(),er=a("div"),v(j8.$$.fragment),Vmr=l(),Wd=a("p"),Xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=a("a"),zmr=o("from_pretrained()"),Qmr=o(" class method or the "),vQ=a("a"),Wmr=o("from_config()"),Hmr=o(` class
method.`),Umr=l(),D8=a("p"),Jmr=o("This class cannot be instantiated directly using "),d2e=a("code"),Ymr=o("__init__()"),Kmr=o(" (throws an error)."),Zmr=l(),Lt=a("div"),v(G8.$$.fragment),efr=l(),c2e=a("p"),ofr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rfr=l(),Hd=a("p"),tfr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),afr=o("not"),nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),sfr=o("from_pretrained()"),lfr=o(" to load the model weights."),ifr=l(),v(J4.$$.fragment),dfr=l(),Lr=a("div"),v(O8.$$.fragment),cfr=l(),f2e=a("p"),mfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ffr=l(),on=a("p"),gfr=o("The model class to instantiate is selected based on the "),g2e=a("code"),hfr=o("model_type"),ufr=o(` property of the config object (either
passed as an argument or loaded from `),h2e=a("code"),pfr=o("pretrained_model_name_or_path"),_fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),bfr=o("pretrained_model_name_or_path"),Ffr=o(":"),vfr=l(),Ud=a("ul"),Y4=a("li"),p2e=a("strong"),Tfr=o("convnext"),Mfr=o(" \u2014 "),MQ=a("a"),Efr=o("TFConvNextForImageClassification"),Cfr=o(" (ConvNext model)"),wfr=l(),K4=a("li"),_2e=a("strong"),Afr=o("data2vec-vision"),yfr=o(" \u2014 "),EQ=a("a"),Lfr=o("TFData2VecVisionForImageClassification"),xfr=o(" (Data2VecVision model)"),$fr=l(),Z4=a("li"),b2e=a("strong"),kfr=o("vit"),Sfr=o(" \u2014 "),CQ=a("a"),Rfr=o("TFViTForImageClassification"),Bfr=o(" (ViT model)"),Pfr=l(),v(eE.$$.fragment),vIe=l(),Jd=a("h2"),oE=a("a"),F2e=a("span"),v(V8.$$.fragment),Ifr=l(),v2e=a("span"),qfr=o("TFAutoModelForMaskedLM"),TIe=l(),or=a("div"),v(X8.$$.fragment),Nfr=l(),Yd=a("p"),jfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=a("a"),Dfr=o("from_pretrained()"),Gfr=o(" class method or the "),AQ=a("a"),Ofr=o("from_config()"),Vfr=o(` class
method.`),Xfr=l(),z8=a("p"),zfr=o("This class cannot be instantiated directly using "),T2e=a("code"),Qfr=o("__init__()"),Wfr=o(" (throws an error)."),Hfr=l(),xt=a("div"),v(Q8.$$.fragment),Ufr=l(),M2e=a("p"),Jfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yfr=l(),Kd=a("p"),Kfr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),Zfr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),v(rE.$$.fragment),agr=l(),xr=a("div"),v(W8.$$.fragment),ngr=l(),C2e=a("p"),sgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lgr=l(),rn=a("p"),igr=o("The model class to instantiate is selected based on the "),w2e=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),mgr=o("pretrained_model_name_or_path"),fgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),ugr=l(),ie=a("ul"),tE=a("li"),L2e=a("strong"),pgr=o("albert"),_gr=o(" \u2014 "),LQ=a("a"),bgr=o("TFAlbertForMaskedLM"),Fgr=o(" (ALBERT model)"),vgr=l(),aE=a("li"),x2e=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),xQ=a("a"),Egr=o("TFBertForMaskedLM"),Cgr=o(" (BERT model)"),wgr=l(),nE=a("li"),$2e=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),$Q=a("a"),Lgr=o("TFCamembertForMaskedLM"),xgr=o(" (CamemBERT model)"),$gr=l(),sE=a("li"),k2e=a("strong"),kgr=o("convbert"),Sgr=o(" \u2014 "),kQ=a("a"),Rgr=o("TFConvBertForMaskedLM"),Bgr=o(" (ConvBERT model)"),Pgr=l(),lE=a("li"),S2e=a("strong"),Igr=o("deberta"),qgr=o(" \u2014 "),SQ=a("a"),Ngr=o("TFDebertaForMaskedLM"),jgr=o(" (DeBERTa model)"),Dgr=l(),iE=a("li"),R2e=a("strong"),Ggr=o("deberta-v2"),Ogr=o(" \u2014 "),RQ=a("a"),Vgr=o("TFDebertaV2ForMaskedLM"),Xgr=o(" (DeBERTa-v2 model)"),zgr=l(),dE=a("li"),B2e=a("strong"),Qgr=o("distilbert"),Wgr=o(" \u2014 "),BQ=a("a"),Hgr=o("TFDistilBertForMaskedLM"),Ugr=o(" (DistilBERT model)"),Jgr=l(),cE=a("li"),P2e=a("strong"),Ygr=o("electra"),Kgr=o(" \u2014 "),PQ=a("a"),Zgr=o("TFElectraForMaskedLM"),ehr=o(" (ELECTRA model)"),ohr=l(),mE=a("li"),I2e=a("strong"),rhr=o("flaubert"),thr=o(" \u2014 "),IQ=a("a"),ahr=o("TFFlaubertWithLMHeadModel"),nhr=o(" (FlauBERT model)"),shr=l(),fE=a("li"),q2e=a("strong"),lhr=o("funnel"),ihr=o(" \u2014 "),qQ=a("a"),dhr=o("TFFunnelForMaskedLM"),chr=o(" (Funnel Transformer model)"),mhr=l(),gE=a("li"),N2e=a("strong"),fhr=o("layoutlm"),ghr=o(" \u2014 "),NQ=a("a"),hhr=o("TFLayoutLMForMaskedLM"),uhr=o(" (LayoutLM model)"),phr=l(),hE=a("li"),j2e=a("strong"),_hr=o("longformer"),bhr=o(" \u2014 "),jQ=a("a"),Fhr=o("TFLongformerForMaskedLM"),vhr=o(" (Longformer model)"),Thr=l(),uE=a("li"),D2e=a("strong"),Mhr=o("mobilebert"),Ehr=o(" \u2014 "),DQ=a("a"),Chr=o("TFMobileBertForMaskedLM"),whr=o(" (MobileBERT model)"),Ahr=l(),pE=a("li"),G2e=a("strong"),yhr=o("mpnet"),Lhr=o(" \u2014 "),GQ=a("a"),xhr=o("TFMPNetForMaskedLM"),$hr=o(" (MPNet model)"),khr=l(),_E=a("li"),O2e=a("strong"),Shr=o("rembert"),Rhr=o(" \u2014 "),OQ=a("a"),Bhr=o("TFRemBertForMaskedLM"),Phr=o(" (RemBERT model)"),Ihr=l(),bE=a("li"),V2e=a("strong"),qhr=o("roberta"),Nhr=o(" \u2014 "),VQ=a("a"),jhr=o("TFRobertaForMaskedLM"),Dhr=o(" (RoBERTa model)"),Ghr=l(),FE=a("li"),X2e=a("strong"),Ohr=o("roformer"),Vhr=o(" \u2014 "),XQ=a("a"),Xhr=o("TFRoFormerForMaskedLM"),zhr=o(" (RoFormer model)"),Qhr=l(),vE=a("li"),z2e=a("strong"),Whr=o("tapas"),Hhr=o(" \u2014 "),zQ=a("a"),Uhr=o("TFTapasForMaskedLM"),Jhr=o(" (TAPAS model)"),Yhr=l(),TE=a("li"),Q2e=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),QQ=a("a"),eur=o("TFXLMWithLMHeadModel"),our=o(" (XLM model)"),rur=l(),ME=a("li"),W2e=a("strong"),tur=o("xlm-roberta"),aur=o(" \u2014 "),WQ=a("a"),nur=o("TFXLMRobertaForMaskedLM"),sur=o(" (XLM-RoBERTa model)"),lur=l(),v(EE.$$.fragment),MIe=l(),Zd=a("h2"),CE=a("a"),H2e=a("span"),v(H8.$$.fragment),iur=l(),U2e=a("span"),dur=o("TFAutoModelForSeq2SeqLM"),EIe=l(),rr=a("div"),v(U8.$$.fragment),cur=l(),ec=a("p"),mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=a("a"),fur=o("from_pretrained()"),gur=o(" class method or the "),UQ=a("a"),hur=o("from_config()"),uur=o(` class
method.`),pur=l(),J8=a("p"),_ur=o("This class cannot be instantiated directly using "),J2e=a("code"),bur=o("__init__()"),Fur=o(" (throws an error)."),vur=l(),$t=a("div"),v(Y8.$$.fragment),Tur=l(),Y2e=a("p"),Mur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Eur=l(),oc=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),yur=o("from_pretrained()"),Lur=o(" to load the model weights."),xur=l(),v(wE.$$.fragment),$ur=l(),$r=a("div"),v(K8.$$.fragment),kur=l(),Z2e=a("p"),Sur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rur=l(),tn=a("p"),Bur=o("The model class to instantiate is selected based on the "),eFe=a("code"),Pur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),ye=a("ul"),AE=a("li"),tFe=a("strong"),Our=o("bart"),Vur=o(" \u2014 "),YQ=a("a"),Xur=o("TFBartForConditionalGeneration"),zur=o(" (BART model)"),Qur=l(),yE=a("li"),aFe=a("strong"),Wur=o("blenderbot"),Hur=o(" \u2014 "),KQ=a("a"),Uur=o("TFBlenderbotForConditionalGeneration"),Jur=o(" (Blenderbot model)"),Yur=l(),LE=a("li"),nFe=a("strong"),Kur=o("blenderbot-small"),Zur=o(" \u2014 "),ZQ=a("a"),epr=o("TFBlenderbotSmallForConditionalGeneration"),opr=o(" (BlenderbotSmall model)"),rpr=l(),xE=a("li"),sFe=a("strong"),tpr=o("encoder-decoder"),apr=o(" \u2014 "),eW=a("a"),npr=o("TFEncoderDecoderModel"),spr=o(" (Encoder decoder model)"),lpr=l(),$E=a("li"),lFe=a("strong"),ipr=o("led"),dpr=o(" \u2014 "),oW=a("a"),cpr=o("TFLEDForConditionalGeneration"),mpr=o(" (LED model)"),fpr=l(),kE=a("li"),iFe=a("strong"),gpr=o("marian"),hpr=o(" \u2014 "),rW=a("a"),upr=o("TFMarianMTModel"),ppr=o(" (Marian model)"),_pr=l(),SE=a("li"),dFe=a("strong"),bpr=o("mbart"),Fpr=o(" \u2014 "),tW=a("a"),vpr=o("TFMBartForConditionalGeneration"),Tpr=o(" (mBART model)"),Mpr=l(),RE=a("li"),cFe=a("strong"),Epr=o("mt5"),Cpr=o(" \u2014 "),aW=a("a"),wpr=o("TFMT5ForConditionalGeneration"),Apr=o(" (mT5 model)"),ypr=l(),BE=a("li"),mFe=a("strong"),Lpr=o("pegasus"),xpr=o(" \u2014 "),nW=a("a"),$pr=o("TFPegasusForConditionalGeneration"),kpr=o(" (Pegasus model)"),Spr=l(),PE=a("li"),fFe=a("strong"),Rpr=o("t5"),Bpr=o(" \u2014 "),sW=a("a"),Ppr=o("TFT5ForConditionalGeneration"),Ipr=o(" (T5 model)"),qpr=l(),v(IE.$$.fragment),CIe=l(),rc=a("h2"),qE=a("a"),gFe=a("span"),v(Z8.$$.fragment),Npr=l(),hFe=a("span"),jpr=o("TFAutoModelForSequenceClassification"),wIe=l(),tr=a("div"),v(ex.$$.fragment),Dpr=l(),tc=a("p"),Gpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=a("a"),Opr=o("from_pretrained()"),Vpr=o(" class method or the "),iW=a("a"),Xpr=o("from_config()"),zpr=o(` class
method.`),Qpr=l(),ox=a("p"),Wpr=o("This class cannot be instantiated directly using "),uFe=a("code"),Hpr=o("__init__()"),Upr=o(" (throws an error)."),Jpr=l(),kt=a("div"),v(rx.$$.fragment),Ypr=l(),pFe=a("p"),Kpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zpr=l(),ac=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),v(NE.$$.fragment),s_r=l(),kr=a("div"),v(tx.$$.fragment),l_r=l(),bFe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d_r=l(),an=a("p"),c_r=o("The model class to instantiate is selected based on the "),FFe=a("code"),m_r=o("model_type"),f_r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),u_r=o("pretrained_model_name_or_path"),p_r=o(":"),__r=l(),Z=a("ul"),jE=a("li"),MFe=a("strong"),b_r=o("albert"),F_r=o(" \u2014 "),cW=a("a"),v_r=o("TFAlbertForSequenceClassification"),T_r=o(" (ALBERT model)"),M_r=l(),DE=a("li"),EFe=a("strong"),E_r=o("bert"),C_r=o(" \u2014 "),mW=a("a"),w_r=o("TFBertForSequenceClassification"),A_r=o(" (BERT model)"),y_r=l(),GE=a("li"),CFe=a("strong"),L_r=o("camembert"),x_r=o(" \u2014 "),fW=a("a"),$_r=o("TFCamembertForSequenceClassification"),k_r=o(" (CamemBERT model)"),S_r=l(),OE=a("li"),wFe=a("strong"),R_r=o("convbert"),B_r=o(" \u2014 "),gW=a("a"),P_r=o("TFConvBertForSequenceClassification"),I_r=o(" (ConvBERT model)"),q_r=l(),VE=a("li"),AFe=a("strong"),N_r=o("ctrl"),j_r=o(" \u2014 "),hW=a("a"),D_r=o("TFCTRLForSequenceClassification"),G_r=o(" (CTRL model)"),O_r=l(),XE=a("li"),yFe=a("strong"),V_r=o("deberta"),X_r=o(" \u2014 "),uW=a("a"),z_r=o("TFDebertaForSequenceClassification"),Q_r=o(" (DeBERTa model)"),W_r=l(),zE=a("li"),LFe=a("strong"),H_r=o("deberta-v2"),U_r=o(" \u2014 "),pW=a("a"),J_r=o("TFDebertaV2ForSequenceClassification"),Y_r=o(" (DeBERTa-v2 model)"),K_r=l(),QE=a("li"),xFe=a("strong"),Z_r=o("distilbert"),ebr=o(" \u2014 "),_W=a("a"),obr=o("TFDistilBertForSequenceClassification"),rbr=o(" (DistilBERT model)"),tbr=l(),WE=a("li"),$Fe=a("strong"),abr=o("electra"),nbr=o(" \u2014 "),bW=a("a"),sbr=o("TFElectraForSequenceClassification"),lbr=o(" (ELECTRA model)"),ibr=l(),HE=a("li"),kFe=a("strong"),dbr=o("flaubert"),cbr=o(" \u2014 "),FW=a("a"),mbr=o("TFFlaubertForSequenceClassification"),fbr=o(" (FlauBERT model)"),gbr=l(),UE=a("li"),SFe=a("strong"),hbr=o("funnel"),ubr=o(" \u2014 "),vW=a("a"),pbr=o("TFFunnelForSequenceClassification"),_br=o(" (Funnel Transformer model)"),bbr=l(),JE=a("li"),RFe=a("strong"),Fbr=o("gpt2"),vbr=o(" \u2014 "),TW=a("a"),Tbr=o("TFGPT2ForSequenceClassification"),Mbr=o(" (OpenAI GPT-2 model)"),Ebr=l(),YE=a("li"),BFe=a("strong"),Cbr=o("gptj"),wbr=o(" \u2014 "),MW=a("a"),Abr=o("TFGPTJForSequenceClassification"),ybr=o(" (GPT-J model)"),Lbr=l(),KE=a("li"),PFe=a("strong"),xbr=o("layoutlm"),$br=o(" \u2014 "),EW=a("a"),kbr=o("TFLayoutLMForSequenceClassification"),Sbr=o(" (LayoutLM model)"),Rbr=l(),ZE=a("li"),IFe=a("strong"),Bbr=o("longformer"),Pbr=o(" \u2014 "),CW=a("a"),Ibr=o("TFLongformerForSequenceClassification"),qbr=o(" (Longformer model)"),Nbr=l(),e5=a("li"),qFe=a("strong"),jbr=o("mobilebert"),Dbr=o(" \u2014 "),wW=a("a"),Gbr=o("TFMobileBertForSequenceClassification"),Obr=o(" (MobileBERT model)"),Vbr=l(),o5=a("li"),NFe=a("strong"),Xbr=o("mpnet"),zbr=o(" \u2014 "),AW=a("a"),Qbr=o("TFMPNetForSequenceClassification"),Wbr=o(" (MPNet model)"),Hbr=l(),r5=a("li"),jFe=a("strong"),Ubr=o("openai-gpt"),Jbr=o(" \u2014 "),yW=a("a"),Ybr=o("TFOpenAIGPTForSequenceClassification"),Kbr=o(" (OpenAI GPT model)"),Zbr=l(),t5=a("li"),DFe=a("strong"),e2r=o("rembert"),o2r=o(" \u2014 "),LW=a("a"),r2r=o("TFRemBertForSequenceClassification"),t2r=o(" (RemBERT model)"),a2r=l(),a5=a("li"),GFe=a("strong"),n2r=o("roberta"),s2r=o(" \u2014 "),xW=a("a"),l2r=o("TFRobertaForSequenceClassification"),i2r=o(" (RoBERTa model)"),d2r=l(),n5=a("li"),OFe=a("strong"),c2r=o("roformer"),m2r=o(" \u2014 "),$W=a("a"),f2r=o("TFRoFormerForSequenceClassification"),g2r=o(" (RoFormer model)"),h2r=l(),s5=a("li"),VFe=a("strong"),u2r=o("tapas"),p2r=o(" \u2014 "),kW=a("a"),_2r=o("TFTapasForSequenceClassification"),b2r=o(" (TAPAS model)"),F2r=l(),l5=a("li"),XFe=a("strong"),v2r=o("transfo-xl"),T2r=o(" \u2014 "),SW=a("a"),M2r=o("TFTransfoXLForSequenceClassification"),E2r=o(" (Transformer-XL model)"),C2r=l(),i5=a("li"),zFe=a("strong"),w2r=o("xlm"),A2r=o(" \u2014 "),RW=a("a"),y2r=o("TFXLMForSequenceClassification"),L2r=o(" (XLM model)"),x2r=l(),d5=a("li"),QFe=a("strong"),$2r=o("xlm-roberta"),k2r=o(" \u2014 "),BW=a("a"),S2r=o("TFXLMRobertaForSequenceClassification"),R2r=o(" (XLM-RoBERTa model)"),B2r=l(),c5=a("li"),WFe=a("strong"),P2r=o("xlnet"),I2r=o(" \u2014 "),PW=a("a"),q2r=o("TFXLNetForSequenceClassification"),N2r=o(" (XLNet model)"),j2r=l(),v(m5.$$.fragment),AIe=l(),nc=a("h2"),f5=a("a"),HFe=a("span"),v(ax.$$.fragment),D2r=l(),UFe=a("span"),G2r=o("TFAutoModelForMultipleChoice"),yIe=l(),ar=a("div"),v(nx.$$.fragment),O2r=l(),sc=a("p"),V2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=a("a"),X2r=o("from_pretrained()"),z2r=o(" class method or the "),qW=a("a"),Q2r=o("from_config()"),W2r=o(` class
method.`),H2r=l(),sx=a("p"),U2r=o("This class cannot be instantiated directly using "),JFe=a("code"),J2r=o("__init__()"),Y2r=o(" (throws an error)."),K2r=l(),St=a("div"),v(lx.$$.fragment),Z2r=l(),YFe=a("p"),eFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oFr=l(),lc=a("p"),rFr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),tFr=o("not"),aFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),nFr=o("from_pretrained()"),sFr=o(" to load the model weights."),lFr=l(),v(g5.$$.fragment),iFr=l(),Sr=a("div"),v(ix.$$.fragment),dFr=l(),ZFe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mFr=l(),nn=a("p"),fFr=o("The model class to instantiate is selected based on the "),eve=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),uFr=o("pretrained_model_name_or_path"),pFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),_Fr=o("pretrained_model_name_or_path"),bFr=o(":"),FFr=l(),ue=a("ul"),h5=a("li"),tve=a("strong"),vFr=o("albert"),TFr=o(" \u2014 "),jW=a("a"),MFr=o("TFAlbertForMultipleChoice"),EFr=o(" (ALBERT model)"),CFr=l(),u5=a("li"),ave=a("strong"),wFr=o("bert"),AFr=o(" \u2014 "),DW=a("a"),yFr=o("TFBertForMultipleChoice"),LFr=o(" (BERT model)"),xFr=l(),p5=a("li"),nve=a("strong"),$Fr=o("camembert"),kFr=o(" \u2014 "),GW=a("a"),SFr=o("TFCamembertForMultipleChoice"),RFr=o(" (CamemBERT model)"),BFr=l(),_5=a("li"),sve=a("strong"),PFr=o("convbert"),IFr=o(" \u2014 "),OW=a("a"),qFr=o("TFConvBertForMultipleChoice"),NFr=o(" (ConvBERT model)"),jFr=l(),b5=a("li"),lve=a("strong"),DFr=o("distilbert"),GFr=o(" \u2014 "),VW=a("a"),OFr=o("TFDistilBertForMultipleChoice"),VFr=o(" (DistilBERT model)"),XFr=l(),F5=a("li"),ive=a("strong"),zFr=o("electra"),QFr=o(" \u2014 "),XW=a("a"),WFr=o("TFElectraForMultipleChoice"),HFr=o(" (ELECTRA model)"),UFr=l(),v5=a("li"),dve=a("strong"),JFr=o("flaubert"),YFr=o(" \u2014 "),zW=a("a"),KFr=o("TFFlaubertForMultipleChoice"),ZFr=o(" (FlauBERT model)"),evr=l(),T5=a("li"),cve=a("strong"),ovr=o("funnel"),rvr=o(" \u2014 "),QW=a("a"),tvr=o("TFFunnelForMultipleChoice"),avr=o(" (Funnel Transformer model)"),nvr=l(),M5=a("li"),mve=a("strong"),svr=o("longformer"),lvr=o(" \u2014 "),WW=a("a"),ivr=o("TFLongformerForMultipleChoice"),dvr=o(" (Longformer model)"),cvr=l(),E5=a("li"),fve=a("strong"),mvr=o("mobilebert"),fvr=o(" \u2014 "),HW=a("a"),gvr=o("TFMobileBertForMultipleChoice"),hvr=o(" (MobileBERT model)"),uvr=l(),C5=a("li"),gve=a("strong"),pvr=o("mpnet"),_vr=o(" \u2014 "),UW=a("a"),bvr=o("TFMPNetForMultipleChoice"),Fvr=o(" (MPNet model)"),vvr=l(),w5=a("li"),hve=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),JW=a("a"),Evr=o("TFRemBertForMultipleChoice"),Cvr=o(" (RemBERT model)"),wvr=l(),A5=a("li"),uve=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),YW=a("a"),Lvr=o("TFRobertaForMultipleChoice"),xvr=o(" (RoBERTa model)"),$vr=l(),y5=a("li"),pve=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),KW=a("a"),Rvr=o("TFRoFormerForMultipleChoice"),Bvr=o(" (RoFormer model)"),Pvr=l(),L5=a("li"),_ve=a("strong"),Ivr=o("xlm"),qvr=o(" \u2014 "),ZW=a("a"),Nvr=o("TFXLMForMultipleChoice"),jvr=o(" (XLM model)"),Dvr=l(),x5=a("li"),bve=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),eH=a("a"),Vvr=o("TFXLMRobertaForMultipleChoice"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),$5=a("li"),Fve=a("strong"),Qvr=o("xlnet"),Wvr=o(" \u2014 "),oH=a("a"),Hvr=o("TFXLNetForMultipleChoice"),Uvr=o(" (XLNet model)"),Jvr=l(),v(k5.$$.fragment),LIe=l(),ic=a("h2"),S5=a("a"),vve=a("span"),v(dx.$$.fragment),Yvr=l(),Tve=a("span"),Kvr=o("TFAutoModelForNextSentencePrediction"),xIe=l(),nr=a("div"),v(cx.$$.fragment),Zvr=l(),dc=a("p"),e1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=a("a"),o1r=o("from_pretrained()"),r1r=o(" class method or the "),tH=a("a"),t1r=o("from_config()"),a1r=o(` class
method.`),n1r=l(),mx=a("p"),s1r=o("This class cannot be instantiated directly using "),Mve=a("code"),l1r=o("__init__()"),i1r=o(" (throws an error)."),d1r=l(),Rt=a("div"),v(fx.$$.fragment),c1r=l(),Eve=a("p"),m1r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f1r=l(),cc=a("p"),g1r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),h1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),p1r=o("from_pretrained()"),_1r=o(" to load the model weights."),b1r=l(),v(R5.$$.fragment),F1r=l(),Rr=a("div"),v(gx.$$.fragment),v1r=l(),wve=a("p"),T1r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M1r=l(),sn=a("p"),E1r=o("The model class to instantiate is selected based on the "),Ave=a("code"),C1r=o("model_type"),w1r=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),A1r=o("pretrained_model_name_or_path"),y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),L1r=o("pretrained_model_name_or_path"),x1r=o(":"),$1r=l(),hx=a("ul"),B5=a("li"),xve=a("strong"),k1r=o("bert"),S1r=o(" \u2014 "),nH=a("a"),R1r=o("TFBertForNextSentencePrediction"),B1r=o(" (BERT model)"),P1r=l(),P5=a("li"),$ve=a("strong"),I1r=o("mobilebert"),q1r=o(" \u2014 "),sH=a("a"),N1r=o("TFMobileBertForNextSentencePrediction"),j1r=o(" (MobileBERT model)"),D1r=l(),v(I5.$$.fragment),$Ie=l(),mc=a("h2"),q5=a("a"),kve=a("span"),v(ux.$$.fragment),G1r=l(),Sve=a("span"),O1r=o("TFAutoModelForTableQuestionAnswering"),kIe=l(),sr=a("div"),v(px.$$.fragment),V1r=l(),fc=a("p"),X1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=a("a"),z1r=o("from_pretrained()"),Q1r=o(" class method or the "),iH=a("a"),W1r=o("from_config()"),H1r=o(` class
method.`),U1r=l(),_x=a("p"),J1r=o("This class cannot be instantiated directly using "),Rve=a("code"),Y1r=o("__init__()"),K1r=o(" (throws an error)."),Z1r=l(),Bt=a("div"),v(bx.$$.fragment),eTr=l(),Bve=a("p"),oTr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rTr=l(),gc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),v(N5.$$.fragment),dTr=l(),Br=a("div"),v(Fx.$$.fragment),cTr=l(),Ive=a("p"),mTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fTr=l(),ln=a("p"),gTr=o("The model class to instantiate is selected based on the "),qve=a("code"),hTr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),pTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),bTr=o("pretrained_model_name_or_path"),FTr=o(":"),vTr=l(),Dve=a("ul"),j5=a("li"),Gve=a("strong"),TTr=o("tapas"),MTr=o(" \u2014 "),cH=a("a"),ETr=o("TFTapasForQuestionAnswering"),CTr=o(" (TAPAS model)"),wTr=l(),v(D5.$$.fragment),SIe=l(),hc=a("h2"),G5=a("a"),Ove=a("span"),v(vx.$$.fragment),ATr=l(),Vve=a("span"),yTr=o("TFAutoModelForTokenClassification"),RIe=l(),lr=a("div"),v(Tx.$$.fragment),LTr=l(),uc=a("p"),xTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mH=a("a"),$Tr=o("from_pretrained()"),kTr=o(" class method or the "),fH=a("a"),STr=o("from_config()"),RTr=o(` class
method.`),BTr=l(),Mx=a("p"),PTr=o("This class cannot be instantiated directly using "),Xve=a("code"),ITr=o("__init__()"),qTr=o(" (throws an error)."),NTr=l(),Pt=a("div"),v(Ex.$$.fragment),jTr=l(),zve=a("p"),DTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GTr=l(),pc=a("p"),OTr=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),VTr=o("not"),XTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),zTr=o("from_pretrained()"),QTr=o(" to load the model weights."),WTr=l(),v(O5.$$.fragment),HTr=l(),Pr=a("div"),v(Cx.$$.fragment),UTr=l(),Wve=a("p"),JTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YTr=l(),dn=a("p"),KTr=o("The model class to instantiate is selected based on the "),Hve=a("code"),ZTr=o("model_type"),eMr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),tMr=o("pretrained_model_name_or_path"),aMr=o(":"),nMr=l(),de=a("ul"),V5=a("li"),Yve=a("strong"),sMr=o("albert"),lMr=o(" \u2014 "),hH=a("a"),iMr=o("TFAlbertForTokenClassification"),dMr=o(" (ALBERT model)"),cMr=l(),X5=a("li"),Kve=a("strong"),mMr=o("bert"),fMr=o(" \u2014 "),uH=a("a"),gMr=o("TFBertForTokenClassification"),hMr=o(" (BERT model)"),uMr=l(),z5=a("li"),Zve=a("strong"),pMr=o("camembert"),_Mr=o(" \u2014 "),pH=a("a"),bMr=o("TFCamembertForTokenClassification"),FMr=o(" (CamemBERT model)"),vMr=l(),Q5=a("li"),e1e=a("strong"),TMr=o("convbert"),MMr=o(" \u2014 "),_H=a("a"),EMr=o("TFConvBertForTokenClassification"),CMr=o(" (ConvBERT model)"),wMr=l(),W5=a("li"),o1e=a("strong"),AMr=o("deberta"),yMr=o(" \u2014 "),bH=a("a"),LMr=o("TFDebertaForTokenClassification"),xMr=o(" (DeBERTa model)"),$Mr=l(),H5=a("li"),r1e=a("strong"),kMr=o("deberta-v2"),SMr=o(" \u2014 "),FH=a("a"),RMr=o("TFDebertaV2ForTokenClassification"),BMr=o(" (DeBERTa-v2 model)"),PMr=l(),U5=a("li"),t1e=a("strong"),IMr=o("distilbert"),qMr=o(" \u2014 "),vH=a("a"),NMr=o("TFDistilBertForTokenClassification"),jMr=o(" (DistilBERT model)"),DMr=l(),J5=a("li"),a1e=a("strong"),GMr=o("electra"),OMr=o(" \u2014 "),TH=a("a"),VMr=o("TFElectraForTokenClassification"),XMr=o(" (ELECTRA model)"),zMr=l(),Y5=a("li"),n1e=a("strong"),QMr=o("flaubert"),WMr=o(" \u2014 "),MH=a("a"),HMr=o("TFFlaubertForTokenClassification"),UMr=o(" (FlauBERT model)"),JMr=l(),K5=a("li"),s1e=a("strong"),YMr=o("funnel"),KMr=o(" \u2014 "),EH=a("a"),ZMr=o("TFFunnelForTokenClassification"),e4r=o(" (Funnel Transformer model)"),o4r=l(),Z5=a("li"),l1e=a("strong"),r4r=o("layoutlm"),t4r=o(" \u2014 "),CH=a("a"),a4r=o("TFLayoutLMForTokenClassification"),n4r=o(" (LayoutLM model)"),s4r=l(),eC=a("li"),i1e=a("strong"),l4r=o("longformer"),i4r=o(" \u2014 "),wH=a("a"),d4r=o("TFLongformerForTokenClassification"),c4r=o(" (Longformer model)"),m4r=l(),oC=a("li"),d1e=a("strong"),f4r=o("mobilebert"),g4r=o(" \u2014 "),AH=a("a"),h4r=o("TFMobileBertForTokenClassification"),u4r=o(" (MobileBERT model)"),p4r=l(),rC=a("li"),c1e=a("strong"),_4r=o("mpnet"),b4r=o(" \u2014 "),yH=a("a"),F4r=o("TFMPNetForTokenClassification"),v4r=o(" (MPNet model)"),T4r=l(),tC=a("li"),m1e=a("strong"),M4r=o("rembert"),E4r=o(" \u2014 "),LH=a("a"),C4r=o("TFRemBertForTokenClassification"),w4r=o(" (RemBERT model)"),A4r=l(),aC=a("li"),f1e=a("strong"),y4r=o("roberta"),L4r=o(" \u2014 "),xH=a("a"),x4r=o("TFRobertaForTokenClassification"),$4r=o(" (RoBERTa model)"),k4r=l(),nC=a("li"),g1e=a("strong"),S4r=o("roformer"),R4r=o(" \u2014 "),$H=a("a"),B4r=o("TFRoFormerForTokenClassification"),P4r=o(" (RoFormer model)"),I4r=l(),sC=a("li"),h1e=a("strong"),q4r=o("xlm"),N4r=o(" \u2014 "),kH=a("a"),j4r=o("TFXLMForTokenClassification"),D4r=o(" (XLM model)"),G4r=l(),lC=a("li"),u1e=a("strong"),O4r=o("xlm-roberta"),V4r=o(" \u2014 "),SH=a("a"),X4r=o("TFXLMRobertaForTokenClassification"),z4r=o(" (XLM-RoBERTa model)"),Q4r=l(),iC=a("li"),p1e=a("strong"),W4r=o("xlnet"),H4r=o(" \u2014 "),RH=a("a"),U4r=o("TFXLNetForTokenClassification"),J4r=o(" (XLNet model)"),Y4r=l(),v(dC.$$.fragment),BIe=l(),_c=a("h2"),cC=a("a"),_1e=a("span"),v(wx.$$.fragment),K4r=l(),b1e=a("span"),Z4r=o("TFAutoModelForQuestionAnswering"),PIe=l(),ir=a("div"),v(Ax.$$.fragment),eEr=l(),bc=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=a("a"),rEr=o("from_pretrained()"),tEr=o(" class method or the "),PH=a("a"),aEr=o("from_config()"),nEr=o(` class
method.`),sEr=l(),yx=a("p"),lEr=o("This class cannot be instantiated directly using "),F1e=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),It=a("div"),v(Lx.$$.fragment),mEr=l(),v1e=a("p"),fEr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gEr=l(),Fc=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),uEr=o("not"),pEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),_Er=o("from_pretrained()"),bEr=o(" to load the model weights."),FEr=l(),v(mC.$$.fragment),vEr=l(),Ir=a("div"),v(xx.$$.fragment),TEr=l(),M1e=a("p"),MEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EEr=l(),cn=a("p"),CEr=o("The model class to instantiate is selected based on the "),E1e=a("code"),wEr=o("model_type"),AEr=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),yEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(":"),kEr=l(),ce=a("ul"),fC=a("li"),A1e=a("strong"),SEr=o("albert"),REr=o(" \u2014 "),qH=a("a"),BEr=o("TFAlbertForQuestionAnswering"),PEr=o(" (ALBERT model)"),IEr=l(),gC=a("li"),y1e=a("strong"),qEr=o("bert"),NEr=o(" \u2014 "),NH=a("a"),jEr=o("TFBertForQuestionAnswering"),DEr=o(" (BERT model)"),GEr=l(),hC=a("li"),L1e=a("strong"),OEr=o("camembert"),VEr=o(" \u2014 "),jH=a("a"),XEr=o("TFCamembertForQuestionAnswering"),zEr=o(" (CamemBERT model)"),QEr=l(),uC=a("li"),x1e=a("strong"),WEr=o("convbert"),HEr=o(" \u2014 "),DH=a("a"),UEr=o("TFConvBertForQuestionAnswering"),JEr=o(" (ConvBERT model)"),YEr=l(),pC=a("li"),$1e=a("strong"),KEr=o("deberta"),ZEr=o(" \u2014 "),GH=a("a"),e5r=o("TFDebertaForQuestionAnswering"),o5r=o(" (DeBERTa model)"),r5r=l(),_C=a("li"),k1e=a("strong"),t5r=o("deberta-v2"),a5r=o(" \u2014 "),OH=a("a"),n5r=o("TFDebertaV2ForQuestionAnswering"),s5r=o(" (DeBERTa-v2 model)"),l5r=l(),bC=a("li"),S1e=a("strong"),i5r=o("distilbert"),d5r=o(" \u2014 "),VH=a("a"),c5r=o("TFDistilBertForQuestionAnswering"),m5r=o(" (DistilBERT model)"),f5r=l(),FC=a("li"),R1e=a("strong"),g5r=o("electra"),h5r=o(" \u2014 "),XH=a("a"),u5r=o("TFElectraForQuestionAnswering"),p5r=o(" (ELECTRA model)"),_5r=l(),vC=a("li"),B1e=a("strong"),b5r=o("flaubert"),F5r=o(" \u2014 "),zH=a("a"),v5r=o("TFFlaubertForQuestionAnsweringSimple"),T5r=o(" (FlauBERT model)"),M5r=l(),TC=a("li"),P1e=a("strong"),E5r=o("funnel"),C5r=o(" \u2014 "),QH=a("a"),w5r=o("TFFunnelForQuestionAnswering"),A5r=o(" (Funnel Transformer model)"),y5r=l(),MC=a("li"),I1e=a("strong"),L5r=o("gptj"),x5r=o(" \u2014 "),WH=a("a"),$5r=o("TFGPTJForQuestionAnswering"),k5r=o(" (GPT-J model)"),S5r=l(),EC=a("li"),q1e=a("strong"),R5r=o("longformer"),B5r=o(" \u2014 "),HH=a("a"),P5r=o("TFLongformerForQuestionAnswering"),I5r=o(" (Longformer model)"),q5r=l(),CC=a("li"),N1e=a("strong"),N5r=o("mobilebert"),j5r=o(" \u2014 "),UH=a("a"),D5r=o("TFMobileBertForQuestionAnswering"),G5r=o(" (MobileBERT model)"),O5r=l(),wC=a("li"),j1e=a("strong"),V5r=o("mpnet"),X5r=o(" \u2014 "),JH=a("a"),z5r=o("TFMPNetForQuestionAnswering"),Q5r=o(" (MPNet model)"),W5r=l(),AC=a("li"),D1e=a("strong"),H5r=o("rembert"),U5r=o(" \u2014 "),YH=a("a"),J5r=o("TFRemBertForQuestionAnswering"),Y5r=o(" (RemBERT model)"),K5r=l(),yC=a("li"),G1e=a("strong"),Z5r=o("roberta"),eCr=o(" \u2014 "),KH=a("a"),oCr=o("TFRobertaForQuestionAnswering"),rCr=o(" (RoBERTa model)"),tCr=l(),LC=a("li"),O1e=a("strong"),aCr=o("roformer"),nCr=o(" \u2014 "),ZH=a("a"),sCr=o("TFRoFormerForQuestionAnswering"),lCr=o(" (RoFormer model)"),iCr=l(),xC=a("li"),V1e=a("strong"),dCr=o("xlm"),cCr=o(" \u2014 "),eU=a("a"),mCr=o("TFXLMForQuestionAnsweringSimple"),fCr=o(" (XLM model)"),gCr=l(),$C=a("li"),X1e=a("strong"),hCr=o("xlm-roberta"),uCr=o(" \u2014 "),oU=a("a"),pCr=o("TFXLMRobertaForQuestionAnswering"),_Cr=o(" (XLM-RoBERTa model)"),bCr=l(),kC=a("li"),z1e=a("strong"),FCr=o("xlnet"),vCr=o(" \u2014 "),rU=a("a"),TCr=o("TFXLNetForQuestionAnsweringSimple"),MCr=o(" (XLNet model)"),ECr=l(),v(SC.$$.fragment),IIe=l(),vc=a("h2"),RC=a("a"),Q1e=a("span"),v($x.$$.fragment),CCr=l(),W1e=a("span"),wCr=o("TFAutoModelForVision2Seq"),qIe=l(),dr=a("div"),v(kx.$$.fragment),ACr=l(),Tc=a("p"),yCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=a("a"),LCr=o("from_pretrained()"),xCr=o(" class method or the "),aU=a("a"),$Cr=o("from_config()"),kCr=o(` class
method.`),SCr=l(),Sx=a("p"),RCr=o("This class cannot be instantiated directly using "),H1e=a("code"),BCr=o("__init__()"),PCr=o(" (throws an error)."),ICr=l(),qt=a("div"),v(Rx.$$.fragment),qCr=l(),U1e=a("p"),NCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jCr=l(),Mc=a("p"),DCr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),GCr=o("not"),OCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),VCr=o("from_pretrained()"),XCr=o(" to load the model weights."),zCr=l(),v(BC.$$.fragment),QCr=l(),qr=a("div"),v(Bx.$$.fragment),WCr=l(),Y1e=a("p"),HCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UCr=l(),mn=a("p"),JCr=o("The model class to instantiate is selected based on the "),K1e=a("code"),YCr=o("model_type"),KCr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),ZCr=o("pretrained_model_name_or_path"),e3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(":"),t3r=l(),oTe=a("ul"),PC=a("li"),rTe=a("strong"),a3r=o("vision-encoder-decoder"),n3r=o(" \u2014 "),sU=a("a"),s3r=o("TFVisionEncoderDecoderModel"),l3r=o(" (Vision Encoder decoder model)"),i3r=l(),v(IC.$$.fragment),NIe=l(),Ec=a("h2"),qC=a("a"),tTe=a("span"),v(Px.$$.fragment),d3r=l(),aTe=a("span"),c3r=o("TFAutoModelForSpeechSeq2Seq"),jIe=l(),cr=a("div"),v(Ix.$$.fragment),m3r=l(),Cc=a("p"),f3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=a("a"),g3r=o("from_pretrained()"),h3r=o(" class method or the "),iU=a("a"),u3r=o("from_config()"),p3r=o(` class
method.`),_3r=l(),qx=a("p"),b3r=o("This class cannot be instantiated directly using "),nTe=a("code"),F3r=o("__init__()"),v3r=o(" (throws an error)."),T3r=l(),Nt=a("div"),v(Nx.$$.fragment),M3r=l(),sTe=a("p"),E3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C3r=l(),wc=a("p"),w3r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),A3r=o("not"),y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),L3r=o("from_pretrained()"),x3r=o(" to load the model weights."),$3r=l(),v(NC.$$.fragment),k3r=l(),Nr=a("div"),v(jx.$$.fragment),S3r=l(),iTe=a("p"),R3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),B3r=l(),fn=a("p"),P3r=o("The model class to instantiate is selected based on the "),dTe=a("code"),I3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),N3r=o("pretrained_model_name_or_path"),j3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(":"),O3r=l(),fTe=a("ul"),jC=a("li"),gTe=a("strong"),V3r=o("speech_to_text"),X3r=o(" \u2014 "),cU=a("a"),z3r=o("TFSpeech2TextForConditionalGeneration"),Q3r=o(" (Speech2Text model)"),W3r=l(),v(DC.$$.fragment),DIe=l(),Ac=a("h2"),GC=a("a"),hTe=a("span"),v(Dx.$$.fragment),H3r=l(),uTe=a("span"),U3r=o("FlaxAutoModel"),GIe=l(),mr=a("div"),v(Gx.$$.fragment),J3r=l(),yc=a("p"),Y3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=a("a"),K3r=o("from_pretrained()"),Z3r=o(" class method or the "),fU=a("a"),ewr=o("from_config()"),owr=o(` class
method.`),rwr=l(),Ox=a("p"),twr=o("This class cannot be instantiated directly using "),pTe=a("code"),awr=o("__init__()"),nwr=o(" (throws an error)."),swr=l(),jt=a("div"),v(Vx.$$.fragment),lwr=l(),_Te=a("p"),iwr=o("Instantiates one of the base model classes of the library from a configuration."),dwr=l(),Lc=a("p"),cwr=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),mwr=o("not"),fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),gwr=o("from_pretrained()"),hwr=o(" to load the model weights."),uwr=l(),v(OC.$$.fragment),pwr=l(),jr=a("div"),v(Xx.$$.fragment),_wr=l(),FTe=a("p"),bwr=o("Instantiate one of the base model classes of the library from a pretrained model."),Fwr=l(),gn=a("p"),vwr=o("The model class to instantiate is selected based on the "),vTe=a("code"),Twr=o("model_type"),Mwr=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),Ewr=o("pretrained_model_name_or_path"),Cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(":"),ywr=l(),oe=a("ul"),VC=a("li"),ETe=a("strong"),Lwr=o("albert"),xwr=o(" \u2014 "),hU=a("a"),$wr=o("FlaxAlbertModel"),kwr=o(" (ALBERT model)"),Swr=l(),XC=a("li"),CTe=a("strong"),Rwr=o("bart"),Bwr=o(" \u2014 "),uU=a("a"),Pwr=o("FlaxBartModel"),Iwr=o(" (BART model)"),qwr=l(),zC=a("li"),wTe=a("strong"),Nwr=o("beit"),jwr=o(" \u2014 "),pU=a("a"),Dwr=o("FlaxBeitModel"),Gwr=o(" (BEiT model)"),Owr=l(),QC=a("li"),ATe=a("strong"),Vwr=o("bert"),Xwr=o(" \u2014 "),_U=a("a"),zwr=o("FlaxBertModel"),Qwr=o(" (BERT model)"),Wwr=l(),WC=a("li"),yTe=a("strong"),Hwr=o("big_bird"),Uwr=o(" \u2014 "),bU=a("a"),Jwr=o("FlaxBigBirdModel"),Ywr=o(" (BigBird model)"),Kwr=l(),HC=a("li"),LTe=a("strong"),Zwr=o("blenderbot"),eAr=o(" \u2014 "),FU=a("a"),oAr=o("FlaxBlenderbotModel"),rAr=o(" (Blenderbot model)"),tAr=l(),UC=a("li"),xTe=a("strong"),aAr=o("blenderbot-small"),nAr=o(" \u2014 "),vU=a("a"),sAr=o("FlaxBlenderbotSmallModel"),lAr=o(" (BlenderbotSmall model)"),iAr=l(),JC=a("li"),$Te=a("strong"),dAr=o("clip"),cAr=o(" \u2014 "),TU=a("a"),mAr=o("FlaxCLIPModel"),fAr=o(" (CLIP model)"),gAr=l(),YC=a("li"),kTe=a("strong"),hAr=o("distilbert"),uAr=o(" \u2014 "),MU=a("a"),pAr=o("FlaxDistilBertModel"),_Ar=o(" (DistilBERT model)"),bAr=l(),KC=a("li"),STe=a("strong"),FAr=o("electra"),vAr=o(" \u2014 "),EU=a("a"),TAr=o("FlaxElectraModel"),MAr=o(" (ELECTRA model)"),EAr=l(),ZC=a("li"),RTe=a("strong"),CAr=o("gpt2"),wAr=o(" \u2014 "),CU=a("a"),AAr=o("FlaxGPT2Model"),yAr=o(" (OpenAI GPT-2 model)"),LAr=l(),e3=a("li"),BTe=a("strong"),xAr=o("gpt_neo"),$Ar=o(" \u2014 "),wU=a("a"),kAr=o("FlaxGPTNeoModel"),SAr=o(" (GPT Neo model)"),RAr=l(),o3=a("li"),PTe=a("strong"),BAr=o("gptj"),PAr=o(" \u2014 "),AU=a("a"),IAr=o("FlaxGPTJModel"),qAr=o(" (GPT-J model)"),NAr=l(),r3=a("li"),ITe=a("strong"),jAr=o("marian"),DAr=o(" \u2014 "),yU=a("a"),GAr=o("FlaxMarianModel"),OAr=o(" (Marian model)"),VAr=l(),t3=a("li"),qTe=a("strong"),XAr=o("mbart"),zAr=o(" \u2014 "),LU=a("a"),QAr=o("FlaxMBartModel"),WAr=o(" (mBART model)"),HAr=l(),a3=a("li"),NTe=a("strong"),UAr=o("mt5"),JAr=o(" \u2014 "),xU=a("a"),YAr=o("FlaxMT5Model"),KAr=o(" (mT5 model)"),ZAr=l(),n3=a("li"),jTe=a("strong"),e0r=o("pegasus"),o0r=o(" \u2014 "),$U=a("a"),r0r=o("FlaxPegasusModel"),t0r=o(" (Pegasus model)"),a0r=l(),s3=a("li"),DTe=a("strong"),n0r=o("roberta"),s0r=o(" \u2014 "),kU=a("a"),l0r=o("FlaxRobertaModel"),i0r=o(" (RoBERTa model)"),d0r=l(),l3=a("li"),GTe=a("strong"),c0r=o("roformer"),m0r=o(" \u2014 "),SU=a("a"),f0r=o("FlaxRoFormerModel"),g0r=o(" (RoFormer model)"),h0r=l(),i3=a("li"),OTe=a("strong"),u0r=o("t5"),p0r=o(" \u2014 "),RU=a("a"),_0r=o("FlaxT5Model"),b0r=o(" (T5 model)"),F0r=l(),d3=a("li"),VTe=a("strong"),v0r=o("vision-text-dual-encoder"),T0r=o(" \u2014 "),BU=a("a"),M0r=o("FlaxVisionTextDualEncoderModel"),E0r=o(" (VisionTextDualEncoder model)"),C0r=l(),c3=a("li"),XTe=a("strong"),w0r=o("vit"),A0r=o(" \u2014 "),PU=a("a"),y0r=o("FlaxViTModel"),L0r=o(" (ViT model)"),x0r=l(),m3=a("li"),zTe=a("strong"),$0r=o("wav2vec2"),k0r=o(" \u2014 "),IU=a("a"),S0r=o("FlaxWav2Vec2Model"),R0r=o(" (Wav2Vec2 model)"),B0r=l(),f3=a("li"),QTe=a("strong"),P0r=o("xglm"),I0r=o(" \u2014 "),qU=a("a"),q0r=o("FlaxXGLMModel"),N0r=o(" (XGLM model)"),j0r=l(),g3=a("li"),WTe=a("strong"),D0r=o("xlm-roberta"),G0r=o(" \u2014 "),NU=a("a"),O0r=o("FlaxXLMRobertaModel"),V0r=o(" (XLM-RoBERTa model)"),X0r=l(),v(h3.$$.fragment),OIe=l(),xc=a("h2"),u3=a("a"),HTe=a("span"),v(zx.$$.fragment),z0r=l(),UTe=a("span"),Q0r=o("FlaxAutoModelForCausalLM"),VIe=l(),fr=a("div"),v(Qx.$$.fragment),W0r=l(),$c=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),DU=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),Wx=a("p"),e6r=o("This class cannot be instantiated directly using "),JTe=a("code"),o6r=o("__init__()"),r6r=o(" (throws an error)."),t6r=l(),Dt=a("div"),v(Hx.$$.fragment),a6r=l(),YTe=a("p"),n6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s6r=l(),kc=a("p"),l6r=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),i6r=o("not"),d6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),c6r=o("from_pretrained()"),m6r=o(" to load the model weights."),f6r=l(),v(p3.$$.fragment),g6r=l(),Dr=a("div"),v(Ux.$$.fragment),h6r=l(),ZTe=a("p"),u6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),p6r=l(),hn=a("p"),_6r=o("The model class to instantiate is selected based on the "),eMe=a("code"),b6r=o("model_type"),F6r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),v6r=o("pretrained_model_name_or_path"),T6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),M6r=o("pretrained_model_name_or_path"),E6r=o(":"),C6r=l(),ke=a("ul"),_3=a("li"),tMe=a("strong"),w6r=o("bart"),A6r=o(" \u2014 "),OU=a("a"),y6r=o("FlaxBartForCausalLM"),L6r=o(" (BART model)"),x6r=l(),b3=a("li"),aMe=a("strong"),$6r=o("bert"),k6r=o(" \u2014 "),VU=a("a"),S6r=o("FlaxBertForCausalLM"),R6r=o(" (BERT model)"),B6r=l(),F3=a("li"),nMe=a("strong"),P6r=o("big_bird"),I6r=o(" \u2014 "),XU=a("a"),q6r=o("FlaxBigBirdForCausalLM"),N6r=o(" (BigBird model)"),j6r=l(),v3=a("li"),sMe=a("strong"),D6r=o("electra"),G6r=o(" \u2014 "),zU=a("a"),O6r=o("FlaxElectraForCausalLM"),V6r=o(" (ELECTRA model)"),X6r=l(),T3=a("li"),lMe=a("strong"),z6r=o("gpt2"),Q6r=o(" \u2014 "),QU=a("a"),W6r=o("FlaxGPT2LMHeadModel"),H6r=o(" (OpenAI GPT-2 model)"),U6r=l(),M3=a("li"),iMe=a("strong"),J6r=o("gpt_neo"),Y6r=o(" \u2014 "),WU=a("a"),K6r=o("FlaxGPTNeoForCausalLM"),Z6r=o(" (GPT Neo model)"),eyr=l(),E3=a("li"),dMe=a("strong"),oyr=o("gptj"),ryr=o(" \u2014 "),HU=a("a"),tyr=o("FlaxGPTJForCausalLM"),ayr=o(" (GPT-J model)"),nyr=l(),C3=a("li"),cMe=a("strong"),syr=o("roberta"),lyr=o(" \u2014 "),UU=a("a"),iyr=o("FlaxRobertaForCausalLM"),dyr=o(" (RoBERTa model)"),cyr=l(),w3=a("li"),mMe=a("strong"),myr=o("xglm"),fyr=o(" \u2014 "),JU=a("a"),gyr=o("FlaxXGLMForCausalLM"),hyr=o(" (XGLM model)"),uyr=l(),v(A3.$$.fragment),XIe=l(),Sc=a("h2"),y3=a("a"),fMe=a("span"),v(Jx.$$.fragment),pyr=l(),gMe=a("span"),_yr=o("FlaxAutoModelForPreTraining"),zIe=l(),gr=a("div"),v(Yx.$$.fragment),byr=l(),Rc=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=a("a"),vyr=o("from_pretrained()"),Tyr=o(" class method or the "),KU=a("a"),Myr=o("from_config()"),Eyr=o(` class
method.`),Cyr=l(),Kx=a("p"),wyr=o("This class cannot be instantiated directly using "),hMe=a("code"),Ayr=o("__init__()"),yyr=o(" (throws an error)."),Lyr=l(),Gt=a("div"),v(Zx.$$.fragment),xyr=l(),uMe=a("p"),$yr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kyr=l(),Bc=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),Ryr=o("not"),Byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),Pyr=o("from_pretrained()"),Iyr=o(" to load the model weights."),qyr=l(),v(L3.$$.fragment),Nyr=l(),Gr=a("div"),v(e7.$$.fragment),jyr=l(),_Me=a("p"),Dyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gyr=l(),un=a("p"),Oyr=o("The model class to instantiate is selected based on the "),bMe=a("code"),Vyr=o("model_type"),Xyr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),zyr=o("pretrained_model_name_or_path"),Qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),Wyr=o("pretrained_model_name_or_path"),Hyr=o(":"),Uyr=l(),Me=a("ul"),x3=a("li"),TMe=a("strong"),Jyr=o("albert"),Yyr=o(" \u2014 "),eJ=a("a"),Kyr=o("FlaxAlbertForPreTraining"),Zyr=o(" (ALBERT model)"),eLr=l(),$3=a("li"),MMe=a("strong"),oLr=o("bart"),rLr=o(" \u2014 "),oJ=a("a"),tLr=o("FlaxBartForConditionalGeneration"),aLr=o(" (BART model)"),nLr=l(),k3=a("li"),EMe=a("strong"),sLr=o("bert"),lLr=o(" \u2014 "),rJ=a("a"),iLr=o("FlaxBertForPreTraining"),dLr=o(" (BERT model)"),cLr=l(),S3=a("li"),CMe=a("strong"),mLr=o("big_bird"),fLr=o(" \u2014 "),tJ=a("a"),gLr=o("FlaxBigBirdForPreTraining"),hLr=o(" (BigBird model)"),uLr=l(),R3=a("li"),wMe=a("strong"),pLr=o("electra"),_Lr=o(" \u2014 "),aJ=a("a"),bLr=o("FlaxElectraForPreTraining"),FLr=o(" (ELECTRA model)"),vLr=l(),B3=a("li"),AMe=a("strong"),TLr=o("mbart"),MLr=o(" \u2014 "),nJ=a("a"),ELr=o("FlaxMBartForConditionalGeneration"),CLr=o(" (mBART model)"),wLr=l(),P3=a("li"),yMe=a("strong"),ALr=o("mt5"),yLr=o(" \u2014 "),sJ=a("a"),LLr=o("FlaxMT5ForConditionalGeneration"),xLr=o(" (mT5 model)"),$Lr=l(),I3=a("li"),LMe=a("strong"),kLr=o("roberta"),SLr=o(" \u2014 "),lJ=a("a"),RLr=o("FlaxRobertaForMaskedLM"),BLr=o(" (RoBERTa model)"),PLr=l(),q3=a("li"),xMe=a("strong"),ILr=o("roformer"),qLr=o(" \u2014 "),iJ=a("a"),NLr=o("FlaxRoFormerForMaskedLM"),jLr=o(" (RoFormer model)"),DLr=l(),N3=a("li"),$Me=a("strong"),GLr=o("t5"),OLr=o(" \u2014 "),dJ=a("a"),VLr=o("FlaxT5ForConditionalGeneration"),XLr=o(" (T5 model)"),zLr=l(),j3=a("li"),kMe=a("strong"),QLr=o("wav2vec2"),WLr=o(" \u2014 "),cJ=a("a"),HLr=o("FlaxWav2Vec2ForPreTraining"),ULr=o(" (Wav2Vec2 model)"),JLr=l(),D3=a("li"),SMe=a("strong"),YLr=o("xlm-roberta"),KLr=o(" \u2014 "),mJ=a("a"),ZLr=o("FlaxXLMRobertaForMaskedLM"),e8r=o(" (XLM-RoBERTa model)"),o8r=l(),v(G3.$$.fragment),QIe=l(),Pc=a("h2"),O3=a("a"),RMe=a("span"),v(o7.$$.fragment),r8r=l(),BMe=a("span"),t8r=o("FlaxAutoModelForMaskedLM"),WIe=l(),hr=a("div"),v(r7.$$.fragment),a8r=l(),Ic=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),gJ=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),t7=a("p"),m8r=o("This class cannot be instantiated directly using "),PMe=a("code"),f8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),Ot=a("div"),v(a7.$$.fragment),u8r=l(),IMe=a("p"),p8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_8r=l(),qc=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),F8r=o("not"),v8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),v(V3.$$.fragment),C8r=l(),Or=a("div"),v(n7.$$.fragment),w8r=l(),NMe=a("p"),A8r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y8r=l(),pn=a("p"),L8r=o("The model class to instantiate is selected based on the "),jMe=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),R8r=o("pretrained_model_name_or_path"),B8r=o(":"),P8r=l(),Le=a("ul"),X3=a("li"),OMe=a("strong"),I8r=o("albert"),q8r=o(" \u2014 "),uJ=a("a"),N8r=o("FlaxAlbertForMaskedLM"),j8r=o(" (ALBERT model)"),D8r=l(),z3=a("li"),VMe=a("strong"),G8r=o("bart"),O8r=o(" \u2014 "),pJ=a("a"),V8r=o("FlaxBartForConditionalGeneration"),X8r=o(" (BART model)"),z8r=l(),Q3=a("li"),XMe=a("strong"),Q8r=o("bert"),W8r=o(" \u2014 "),_J=a("a"),H8r=o("FlaxBertForMaskedLM"),U8r=o(" (BERT model)"),J8r=l(),W3=a("li"),zMe=a("strong"),Y8r=o("big_bird"),K8r=o(" \u2014 "),bJ=a("a"),Z8r=o("FlaxBigBirdForMaskedLM"),exr=o(" (BigBird model)"),oxr=l(),H3=a("li"),QMe=a("strong"),rxr=o("distilbert"),txr=o(" \u2014 "),FJ=a("a"),axr=o("FlaxDistilBertForMaskedLM"),nxr=o(" (DistilBERT model)"),sxr=l(),U3=a("li"),WMe=a("strong"),lxr=o("electra"),ixr=o(" \u2014 "),vJ=a("a"),dxr=o("FlaxElectraForMaskedLM"),cxr=o(" (ELECTRA model)"),mxr=l(),J3=a("li"),HMe=a("strong"),fxr=o("mbart"),gxr=o(" \u2014 "),TJ=a("a"),hxr=o("FlaxMBartForConditionalGeneration"),uxr=o(" (mBART model)"),pxr=l(),Y3=a("li"),UMe=a("strong"),_xr=o("roberta"),bxr=o(" \u2014 "),MJ=a("a"),Fxr=o("FlaxRobertaForMaskedLM"),vxr=o(" (RoBERTa model)"),Txr=l(),K3=a("li"),JMe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),EJ=a("a"),Cxr=o("FlaxRoFormerForMaskedLM"),wxr=o(" (RoFormer model)"),Axr=l(),Z3=a("li"),YMe=a("strong"),yxr=o("xlm-roberta"),Lxr=o(" \u2014 "),CJ=a("a"),xxr=o("FlaxXLMRobertaForMaskedLM"),$xr=o(" (XLM-RoBERTa model)"),kxr=l(),v(ew.$$.fragment),HIe=l(),Nc=a("h2"),ow=a("a"),KMe=a("span"),v(s7.$$.fragment),Sxr=l(),ZMe=a("span"),Rxr=o("FlaxAutoModelForSeq2SeqLM"),UIe=l(),ur=a("div"),v(l7.$$.fragment),Bxr=l(),jc=a("p"),Pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=a("a"),Ixr=o("from_pretrained()"),qxr=o(" class method or the "),AJ=a("a"),Nxr=o("from_config()"),jxr=o(` class
method.`),Dxr=l(),i7=a("p"),Gxr=o("This class cannot be instantiated directly using "),e4e=a("code"),Oxr=o("__init__()"),Vxr=o(" (throws an error)."),Xxr=l(),Vt=a("div"),v(d7.$$.fragment),zxr=l(),o4e=a("p"),Qxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wxr=l(),Dc=a("p"),Hxr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),Uxr=o("not"),Jxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Yxr=o("from_pretrained()"),Kxr=o(" to load the model weights."),Zxr=l(),v(rw.$$.fragment),e7r=l(),Vr=a("div"),v(c7.$$.fragment),o7r=l(),t4e=a("p"),r7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t7r=l(),_n=a("p"),a7r=o("The model class to instantiate is selected based on the "),a4e=a("code"),n7r=o("model_type"),s7r=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),d7r=o("pretrained_model_name_or_path"),c7r=o(":"),m7r=l(),Se=a("ul"),tw=a("li"),l4e=a("strong"),f7r=o("bart"),g7r=o(" \u2014 "),LJ=a("a"),h7r=o("FlaxBartForConditionalGeneration"),u7r=o(" (BART model)"),p7r=l(),aw=a("li"),i4e=a("strong"),_7r=o("blenderbot"),b7r=o(" \u2014 "),xJ=a("a"),F7r=o("FlaxBlenderbotForConditionalGeneration"),v7r=o(" (Blenderbot model)"),T7r=l(),nw=a("li"),d4e=a("strong"),M7r=o("blenderbot-small"),E7r=o(" \u2014 "),$J=a("a"),C7r=o("FlaxBlenderbotSmallForConditionalGeneration"),w7r=o(" (BlenderbotSmall model)"),A7r=l(),sw=a("li"),c4e=a("strong"),y7r=o("encoder-decoder"),L7r=o(" \u2014 "),kJ=a("a"),x7r=o("FlaxEncoderDecoderModel"),$7r=o(" (Encoder decoder model)"),k7r=l(),lw=a("li"),m4e=a("strong"),S7r=o("marian"),R7r=o(" \u2014 "),SJ=a("a"),B7r=o("FlaxMarianMTModel"),P7r=o(" (Marian model)"),I7r=l(),iw=a("li"),f4e=a("strong"),q7r=o("mbart"),N7r=o(" \u2014 "),RJ=a("a"),j7r=o("FlaxMBartForConditionalGeneration"),D7r=o(" (mBART model)"),G7r=l(),dw=a("li"),g4e=a("strong"),O7r=o("mt5"),V7r=o(" \u2014 "),BJ=a("a"),X7r=o("FlaxMT5ForConditionalGeneration"),z7r=o(" (mT5 model)"),Q7r=l(),cw=a("li"),h4e=a("strong"),W7r=o("pegasus"),H7r=o(" \u2014 "),PJ=a("a"),U7r=o("FlaxPegasusForConditionalGeneration"),J7r=o(" (Pegasus model)"),Y7r=l(),mw=a("li"),u4e=a("strong"),K7r=o("t5"),Z7r=o(" \u2014 "),IJ=a("a"),e9r=o("FlaxT5ForConditionalGeneration"),o9r=o(" (T5 model)"),r9r=l(),v(fw.$$.fragment),JIe=l(),Gc=a("h2"),gw=a("a"),p4e=a("span"),v(m7.$$.fragment),t9r=l(),_4e=a("span"),a9r=o("FlaxAutoModelForSequenceClassification"),YIe=l(),pr=a("div"),v(f7.$$.fragment),n9r=l(),Oc=a("p"),s9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=a("a"),l9r=o("from_pretrained()"),i9r=o(" class method or the "),NJ=a("a"),d9r=o("from_config()"),c9r=o(` class
method.`),m9r=l(),g7=a("p"),f9r=o("This class cannot be instantiated directly using "),b4e=a("code"),g9r=o("__init__()"),h9r=o(" (throws an error)."),u9r=l(),Xt=a("div"),v(h7.$$.fragment),p9r=l(),F4e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b9r=l(),Vc=a("p"),F9r=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),v9r=o("not"),T9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),M9r=o("from_pretrained()"),E9r=o(" to load the model weights."),C9r=l(),v(hw.$$.fragment),w9r=l(),Xr=a("div"),v(u7.$$.fragment),A9r=l(),T4e=a("p"),y9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L9r=l(),bn=a("p"),x9r=o("The model class to instantiate is selected based on the "),M4e=a("code"),$9r=o("model_type"),k9r=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),S9r=o("pretrained_model_name_or_path"),R9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),B9r=o("pretrained_model_name_or_path"),P9r=o(":"),I9r=l(),xe=a("ul"),uw=a("li"),w4e=a("strong"),q9r=o("albert"),N9r=o(" \u2014 "),DJ=a("a"),j9r=o("FlaxAlbertForSequenceClassification"),D9r=o(" (ALBERT model)"),G9r=l(),pw=a("li"),A4e=a("strong"),O9r=o("bart"),V9r=o(" \u2014 "),GJ=a("a"),X9r=o("FlaxBartForSequenceClassification"),z9r=o(" (BART model)"),Q9r=l(),_w=a("li"),y4e=a("strong"),W9r=o("bert"),H9r=o(" \u2014 "),OJ=a("a"),U9r=o("FlaxBertForSequenceClassification"),J9r=o(" (BERT model)"),Y9r=l(),bw=a("li"),L4e=a("strong"),K9r=o("big_bird"),Z9r=o(" \u2014 "),VJ=a("a"),e$r=o("FlaxBigBirdForSequenceClassification"),o$r=o(" (BigBird model)"),r$r=l(),Fw=a("li"),x4e=a("strong"),t$r=o("distilbert"),a$r=o(" \u2014 "),XJ=a("a"),n$r=o("FlaxDistilBertForSequenceClassification"),s$r=o(" (DistilBERT model)"),l$r=l(),vw=a("li"),$4e=a("strong"),i$r=o("electra"),d$r=o(" \u2014 "),zJ=a("a"),c$r=o("FlaxElectraForSequenceClassification"),m$r=o(" (ELECTRA model)"),f$r=l(),Tw=a("li"),k4e=a("strong"),g$r=o("mbart"),h$r=o(" \u2014 "),QJ=a("a"),u$r=o("FlaxMBartForSequenceClassification"),p$r=o(" (mBART model)"),_$r=l(),Mw=a("li"),S4e=a("strong"),b$r=o("roberta"),F$r=o(" \u2014 "),WJ=a("a"),v$r=o("FlaxRobertaForSequenceClassification"),T$r=o(" (RoBERTa model)"),M$r=l(),Ew=a("li"),R4e=a("strong"),E$r=o("roformer"),C$r=o(" \u2014 "),HJ=a("a"),w$r=o("FlaxRoFormerForSequenceClassification"),A$r=o(" (RoFormer model)"),y$r=l(),Cw=a("li"),B4e=a("strong"),L$r=o("xlm-roberta"),x$r=o(" \u2014 "),UJ=a("a"),$$r=o("FlaxXLMRobertaForSequenceClassification"),k$r=o(" (XLM-RoBERTa model)"),S$r=l(),v(ww.$$.fragment),KIe=l(),Xc=a("h2"),Aw=a("a"),P4e=a("span"),v(p7.$$.fragment),R$r=l(),I4e=a("span"),B$r=o("FlaxAutoModelForQuestionAnswering"),ZIe=l(),_r=a("div"),v(_7.$$.fragment),P$r=l(),zc=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=a("a"),q$r=o("from_pretrained()"),N$r=o(" class method or the "),YJ=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),b7=a("p"),O$r=o("This class cannot be instantiated directly using "),q4e=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),zt=a("div"),v(F7.$$.fragment),Q$r=l(),N4e=a("p"),W$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H$r=l(),Qc=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),ekr=l(),v(yw.$$.fragment),okr=l(),zr=a("div"),v(v7.$$.fragment),rkr=l(),D4e=a("p"),tkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),akr=l(),Fn=a("p"),nkr=o("The model class to instantiate is selected based on the "),G4e=a("code"),skr=o("model_type"),lkr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),ckr=o("pretrained_model_name_or_path"),mkr=o(":"),fkr=l(),$e=a("ul"),Lw=a("li"),X4e=a("strong"),gkr=o("albert"),hkr=o(" \u2014 "),ZJ=a("a"),ukr=o("FlaxAlbertForQuestionAnswering"),pkr=o(" (ALBERT model)"),_kr=l(),xw=a("li"),z4e=a("strong"),bkr=o("bart"),Fkr=o(" \u2014 "),eY=a("a"),vkr=o("FlaxBartForQuestionAnswering"),Tkr=o(" (BART model)"),Mkr=l(),$w=a("li"),Q4e=a("strong"),Ekr=o("bert"),Ckr=o(" \u2014 "),oY=a("a"),wkr=o("FlaxBertForQuestionAnswering"),Akr=o(" (BERT model)"),ykr=l(),kw=a("li"),W4e=a("strong"),Lkr=o("big_bird"),xkr=o(" \u2014 "),rY=a("a"),$kr=o("FlaxBigBirdForQuestionAnswering"),kkr=o(" (BigBird model)"),Skr=l(),Sw=a("li"),H4e=a("strong"),Rkr=o("distilbert"),Bkr=o(" \u2014 "),tY=a("a"),Pkr=o("FlaxDistilBertForQuestionAnswering"),Ikr=o(" (DistilBERT model)"),qkr=l(),Rw=a("li"),U4e=a("strong"),Nkr=o("electra"),jkr=o(" \u2014 "),aY=a("a"),Dkr=o("FlaxElectraForQuestionAnswering"),Gkr=o(" (ELECTRA model)"),Okr=l(),Bw=a("li"),J4e=a("strong"),Vkr=o("mbart"),Xkr=o(" \u2014 "),nY=a("a"),zkr=o("FlaxMBartForQuestionAnswering"),Qkr=o(" (mBART model)"),Wkr=l(),Pw=a("li"),Y4e=a("strong"),Hkr=o("roberta"),Ukr=o(" \u2014 "),sY=a("a"),Jkr=o("FlaxRobertaForQuestionAnswering"),Ykr=o(" (RoBERTa model)"),Kkr=l(),Iw=a("li"),K4e=a("strong"),Zkr=o("roformer"),eSr=o(" \u2014 "),lY=a("a"),oSr=o("FlaxRoFormerForQuestionAnswering"),rSr=o(" (RoFormer model)"),tSr=l(),qw=a("li"),Z4e=a("strong"),aSr=o("xlm-roberta"),nSr=o(" \u2014 "),iY=a("a"),sSr=o("FlaxXLMRobertaForQuestionAnswering"),lSr=o(" (XLM-RoBERTa model)"),iSr=l(),v(Nw.$$.fragment),eqe=l(),Wc=a("h2"),jw=a("a"),eEe=a("span"),v(T7.$$.fragment),dSr=l(),oEe=a("span"),cSr=o("FlaxAutoModelForTokenClassification"),oqe=l(),br=a("div"),v(M7.$$.fragment),mSr=l(),Hc=a("p"),fSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),cY=a("a"),uSr=o("from_config()"),pSr=o(` class
method.`),_Sr=l(),E7=a("p"),bSr=o("This class cannot be instantiated directly using "),rEe=a("code"),FSr=o("__init__()"),vSr=o(" (throws an error)."),TSr=l(),Qt=a("div"),v(C7.$$.fragment),MSr=l(),tEe=a("p"),ESr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CSr=l(),Uc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),ASr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),LSr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),v(Dw.$$.fragment),kSr=l(),Qr=a("div"),v(w7.$$.fragment),SSr=l(),nEe=a("p"),RSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BSr=l(),vn=a("p"),PSr=o("The model class to instantiate is selected based on the "),sEe=a("code"),ISr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),De=a("ul"),Gw=a("li"),dEe=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),fY=a("a"),zSr=o("FlaxAlbertForTokenClassification"),QSr=o(" (ALBERT model)"),WSr=l(),Ow=a("li"),cEe=a("strong"),HSr=o("bert"),USr=o(" \u2014 "),gY=a("a"),JSr=o("FlaxBertForTokenClassification"),YSr=o(" (BERT model)"),KSr=l(),Vw=a("li"),mEe=a("strong"),ZSr=o("big_bird"),eRr=o(" \u2014 "),hY=a("a"),oRr=o("FlaxBigBirdForTokenClassification"),rRr=o(" (BigBird model)"),tRr=l(),Xw=a("li"),fEe=a("strong"),aRr=o("distilbert"),nRr=o(" \u2014 "),uY=a("a"),sRr=o("FlaxDistilBertForTokenClassification"),lRr=o(" (DistilBERT model)"),iRr=l(),zw=a("li"),gEe=a("strong"),dRr=o("electra"),cRr=o(" \u2014 "),pY=a("a"),mRr=o("FlaxElectraForTokenClassification"),fRr=o(" (ELECTRA model)"),gRr=l(),Qw=a("li"),hEe=a("strong"),hRr=o("roberta"),uRr=o(" \u2014 "),_Y=a("a"),pRr=o("FlaxRobertaForTokenClassification"),_Rr=o(" (RoBERTa model)"),bRr=l(),Ww=a("li"),uEe=a("strong"),FRr=o("roformer"),vRr=o(" \u2014 "),bY=a("a"),TRr=o("FlaxRoFormerForTokenClassification"),MRr=o(" (RoFormer model)"),ERr=l(),Hw=a("li"),pEe=a("strong"),CRr=o("xlm-roberta"),wRr=o(" \u2014 "),FY=a("a"),ARr=o("FlaxXLMRobertaForTokenClassification"),yRr=o(" (XLM-RoBERTa model)"),LRr=l(),v(Uw.$$.fragment),rqe=l(),Jc=a("h2"),Jw=a("a"),_Ee=a("span"),v(A7.$$.fragment),xRr=l(),bEe=a("span"),$Rr=o("FlaxAutoModelForMultipleChoice"),tqe=l(),Fr=a("div"),v(y7.$$.fragment),kRr=l(),Yc=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),TY=a("a"),PRr=o("from_config()"),IRr=o(` class
method.`),qRr=l(),L7=a("p"),NRr=o("This class cannot be instantiated directly using "),FEe=a("code"),jRr=o("__init__()"),DRr=o(" (throws an error)."),GRr=l(),Wt=a("div"),v(x7.$$.fragment),ORr=l(),vEe=a("p"),VRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XRr=l(),Kc=a("p"),zRr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),QRr=o("not"),WRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),HRr=o("from_pretrained()"),URr=o(" to load the model weights."),JRr=l(),v(Yw.$$.fragment),YRr=l(),Wr=a("div"),v($7.$$.fragment),KRr=l(),MEe=a("p"),ZRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eBr=l(),Tn=a("p"),oBr=o("The model class to instantiate is selected based on the "),EEe=a("code"),rBr=o("model_type"),tBr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(":"),iBr=l(),Ge=a("ul"),Kw=a("li"),AEe=a("strong"),dBr=o("albert"),cBr=o(" \u2014 "),EY=a("a"),mBr=o("FlaxAlbertForMultipleChoice"),fBr=o(" (ALBERT model)"),gBr=l(),Zw=a("li"),yEe=a("strong"),hBr=o("bert"),uBr=o(" \u2014 "),CY=a("a"),pBr=o("FlaxBertForMultipleChoice"),_Br=o(" (BERT model)"),bBr=l(),eA=a("li"),LEe=a("strong"),FBr=o("big_bird"),vBr=o(" \u2014 "),wY=a("a"),TBr=o("FlaxBigBirdForMultipleChoice"),MBr=o(" (BigBird model)"),EBr=l(),oA=a("li"),xEe=a("strong"),CBr=o("distilbert"),wBr=o(" \u2014 "),AY=a("a"),ABr=o("FlaxDistilBertForMultipleChoice"),yBr=o(" (DistilBERT model)"),LBr=l(),rA=a("li"),$Ee=a("strong"),xBr=o("electra"),$Br=o(" \u2014 "),yY=a("a"),kBr=o("FlaxElectraForMultipleChoice"),SBr=o(" (ELECTRA model)"),RBr=l(),tA=a("li"),kEe=a("strong"),BBr=o("roberta"),PBr=o(" \u2014 "),LY=a("a"),IBr=o("FlaxRobertaForMultipleChoice"),qBr=o(" (RoBERTa model)"),NBr=l(),aA=a("li"),SEe=a("strong"),jBr=o("roformer"),DBr=o(" \u2014 "),xY=a("a"),GBr=o("FlaxRoFormerForMultipleChoice"),OBr=o(" (RoFormer model)"),VBr=l(),nA=a("li"),REe=a("strong"),XBr=o("xlm-roberta"),zBr=o(" \u2014 "),$Y=a("a"),QBr=o("FlaxXLMRobertaForMultipleChoice"),WBr=o(" (XLM-RoBERTa model)"),HBr=l(),v(sA.$$.fragment),aqe=l(),Zc=a("h2"),lA=a("a"),BEe=a("span"),v(k7.$$.fragment),UBr=l(),PEe=a("span"),JBr=o("FlaxAutoModelForNextSentencePrediction"),nqe=l(),vr=a("div"),v(S7.$$.fragment),YBr=l(),em=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=a("a"),ZBr=o("from_pretrained()"),ePr=o(" class method or the "),SY=a("a"),oPr=o("from_config()"),rPr=o(` class
method.`),tPr=l(),R7=a("p"),aPr=o("This class cannot be instantiated directly using "),IEe=a("code"),nPr=o("__init__()"),sPr=o(" (throws an error)."),lPr=l(),Ht=a("div"),v(B7.$$.fragment),iPr=l(),qEe=a("p"),dPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cPr=l(),om=a("p"),mPr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),fPr=o("not"),gPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),hPr=o("from_pretrained()"),uPr=o(" to load the model weights."),pPr=l(),v(iA.$$.fragment),_Pr=l(),Hr=a("div"),v(P7.$$.fragment),bPr=l(),jEe=a("p"),FPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vPr=l(),Mn=a("p"),TPr=o("The model class to instantiate is selected based on the "),DEe=a("code"),MPr=o("model_type"),EPr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(":"),LPr=l(),VEe=a("ul"),dA=a("li"),XEe=a("strong"),xPr=o("bert"),$Pr=o(" \u2014 "),BY=a("a"),kPr=o("FlaxBertForNextSentencePrediction"),SPr=o(" (BERT model)"),RPr=l(),v(cA.$$.fragment),sqe=l(),rm=a("h2"),mA=a("a"),zEe=a("span"),v(I7.$$.fragment),BPr=l(),QEe=a("span"),PPr=o("FlaxAutoModelForImageClassification"),lqe=l(),Tr=a("div"),v(q7.$$.fragment),IPr=l(),tm=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=a("a"),NPr=o("from_pretrained()"),jPr=o(" class method or the "),IY=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),N7=a("p"),VPr=o("This class cannot be instantiated directly using "),WEe=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Ut=a("div"),v(j7.$$.fragment),WPr=l(),HEe=a("p"),HPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UPr=l(),am=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),UEe=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),v(fA.$$.fragment),rIr=l(),Ur=a("div"),v(D7.$$.fragment),tIr=l(),JEe=a("p"),aIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nIr=l(),En=a("p"),sIr=o("The model class to instantiate is selected based on the "),YEe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),KEe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=a("code"),mIr=o("pretrained_model_name_or_path"),fIr=o(":"),gIr=l(),G7=a("ul"),gA=a("li"),e5e=a("strong"),hIr=o("beit"),uIr=o(" \u2014 "),NY=a("a"),pIr=o("FlaxBeitForImageClassification"),_Ir=o(" (BEiT model)"),bIr=l(),hA=a("li"),o5e=a("strong"),FIr=o("vit"),vIr=o(" \u2014 "),jY=a("a"),TIr=o("FlaxViTForImageClassification"),MIr=o(" (ViT model)"),EIr=l(),v(uA.$$.fragment),iqe=l(),nm=a("h2"),pA=a("a"),r5e=a("span"),v(O7.$$.fragment),CIr=l(),t5e=a("span"),wIr=o("FlaxAutoModelForVision2Seq"),dqe=l(),Mr=a("div"),v(V7.$$.fragment),AIr=l(),sm=a("p"),yIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=a("a"),LIr=o("from_pretrained()"),xIr=o(" class method or the "),GY=a("a"),$Ir=o("from_config()"),kIr=o(` class
method.`),SIr=l(),X7=a("p"),RIr=o("This class cannot be instantiated directly using "),a5e=a("code"),BIr=o("__init__()"),PIr=o(" (throws an error)."),IIr=l(),Jt=a("div"),v(z7.$$.fragment),qIr=l(),n5e=a("p"),NIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jIr=l(),lm=a("p"),DIr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),GIr=o("not"),OIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),VIr=o("from_pretrained()"),XIr=o(" to load the model weights."),zIr=l(),v(_A.$$.fragment),QIr=l(),Jr=a("div"),v(Q7.$$.fragment),WIr=l(),l5e=a("p"),HIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UIr=l(),Cn=a("p"),JIr=o("The model class to instantiate is selected based on the "),i5e=a("code"),YIr=o("model_type"),KIr=o(` property of the config object (either
passed as an argument or loaded from `),d5e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),m5e=a("ul"),bA=a("li"),f5e=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),VY=a("a"),sqr=o("FlaxVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),v(FA.$$.fragment),this.h()},l(m){const _=F0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(m),u=n(m,"H1",{class:!0});var W7=s(u);f=n(W7,"A",{id:!0,class:!0,href:!0});var g5e=s(f);p=n(g5e,"SPAN",{});var h5e=s(p);T(d.$$.fragment,h5e),h5e.forEach(t),g5e.forEach(t),h=i(W7),Mo=n(W7,"SPAN",{});var u5e=s(Mo);li=r(u5e,"Auto Classes"),u5e.forEach(t),W7.forEach(t),mm=i(m),et=n(m,"P",{});var H7=s(et);ii=r(H7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(H7,"CODE",{});var p5e=s(di);N6=r(p5e,"from_pretrained()"),p5e.forEach(t),fm=r(H7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),H7.forEach(t),qe=i(m),Xe=n(m,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var _5e=s(An);j6=r(_5e,"AutoConfig"),_5e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var b5e=s(Ln);D6=r(b5e,"AutoModel"),b5e.forEach(t),mi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var F5e=s(xn);G6=r(F5e,"AutoTokenizer"),F5e.forEach(t),fi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),gm=i(m),T(Ma.$$.fragment,m),ze=i(m),Ae=n(m,"P",{});var U7=s(Ae);n$=r(U7,"will create a model that is an instance of "),gi=n(U7,"A",{href:!0});var v5e=s(gi);s$=r(v5e,"BertModel"),v5e.forEach(t),l$=r(U7,"."),U7.forEach(t),Eo=i(m),Ea=n(m,"P",{});var J7=s(Ea);i$=r(J7,"There is one class of "),hm=n(J7,"CODE",{});var T5e=s(hm);d$=r(T5e,"AutoModel"),T5e.forEach(t),bje=r(J7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),J7.forEach(t),lPe=i(m),hi=n(m,"H2",{class:!0});var Y7=s(hi);um=n(Y7,"A",{id:!0,class:!0,href:!0});var M5e=s(um);qZ=n(M5e,"SPAN",{});var E5e=s(qZ);T(O6.$$.fragment,E5e),E5e.forEach(t),M5e.forEach(t),Fje=i(Y7),NZ=n(Y7,"SPAN",{});var C5e=s(NZ);vje=r(C5e,"Extending the Auto Classes"),C5e.forEach(t),Y7.forEach(t),iPe=i(m),$n=n(m,"P",{});var im=s($n);Tje=r(im,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=n(im,"CODE",{});var w5e=s(jZ);Mje=r(w5e,"NewModel"),w5e.forEach(t),Eje=r(im,", make sure you have a "),DZ=n(im,"CODE",{});var A5e=s(DZ);Cje=r(A5e,"NewModelConfig"),A5e.forEach(t),wje=r(im,` then you can add those to the auto
classes like this:`),im.forEach(t),dPe=i(m),T(V6.$$.fragment,m),cPe=i(m),c$=n(m,"P",{});var y5e=s(c$);Aje=r(y5e,"You will then be able to use the auto classes like you would usually do!"),y5e.forEach(t),mPe=i(m),T(pm.$$.fragment,m),fPe=i(m),ui=n(m,"H2",{class:!0});var K7=s(ui);_m=n(K7,"A",{id:!0,class:!0,href:!0});var L5e=s(_m);GZ=n(L5e,"SPAN",{});var x5e=s(GZ);T(X6.$$.fragment,x5e),x5e.forEach(t),L5e.forEach(t),yje=i(K7),OZ=n(K7,"SPAN",{});var $5e=s(OZ);Lje=r($5e,"AutoConfig"),$5e.forEach(t),K7.forEach(t),gPe=i(m),Co=n(m,"DIV",{class:!0});var Kr=s(Co);T(z6.$$.fragment,Kr),xje=i(Kr),Q6=n(Kr,"P",{});var Z7=s(Q6);$je=r(Z7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),m$=n(Z7,"A",{href:!0});var k5e=s(m$);kje=r(k5e,"from_pretrained()"),k5e.forEach(t),Sje=r(Z7," class method."),Z7.forEach(t),Rje=i(Kr),W6=n(Kr,"P",{});var e9=s(W6);Bje=r(e9,"This class cannot be instantiated directly using "),VZ=n(e9,"CODE",{});var S5e=s(VZ);Pje=r(S5e,"__init__()"),S5e.forEach(t),Ije=r(e9," (throws an error)."),e9.forEach(t),qje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(H6.$$.fragment,Zr),Nje=i(Zr),XZ=n(Zr,"P",{});var R5e=s(XZ);jje=r(R5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R5e.forEach(t),Dje=i(Zr),pi=n(Zr,"P",{});var dm=s(pi);Gje=r(dm,"The configuration class to instantiate is selected based on the "),zZ=n(dm,"CODE",{});var B5e=s(zZ);Oje=r(B5e,"model_type"),B5e.forEach(t),Vje=r(dm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=n(dm,"CODE",{});var P5e=s(QZ);Xje=r(P5e,"pretrained_model_name_or_path"),P5e.forEach(t),zje=r(dm,":"),dm.forEach(t),Qje=i(Zr),y=n(Zr,"UL",{});var L=s(y);bm=n(L,"LI",{});var vA=s(bm);WZ=n(vA,"STRONG",{});var I5e=s(WZ);Wje=r(I5e,"albert"),I5e.forEach(t),Hje=r(vA," \u2014 "),f$=n(vA,"A",{href:!0});var q5e=s(f$);Uje=r(q5e,"AlbertConfig"),q5e.forEach(t),Jje=r(vA," (ALBERT model)"),vA.forEach(t),Yje=i(L),Fm=n(L,"LI",{});var TA=s(Fm);HZ=n(TA,"STRONG",{});var N5e=s(HZ);Kje=r(N5e,"bart"),N5e.forEach(t),Zje=r(TA," \u2014 "),g$=n(TA,"A",{href:!0});var j5e=s(g$);eDe=r(j5e,"BartConfig"),j5e.forEach(t),oDe=r(TA," (BART model)"),TA.forEach(t),rDe=i(L),vm=n(L,"LI",{});var MA=s(vm);UZ=n(MA,"STRONG",{});var D5e=s(UZ);tDe=r(D5e,"beit"),D5e.forEach(t),aDe=r(MA," \u2014 "),h$=n(MA,"A",{href:!0});var G5e=s(h$);nDe=r(G5e,"BeitConfig"),G5e.forEach(t),sDe=r(MA," (BEiT model)"),MA.forEach(t),lDe=i(L),Tm=n(L,"LI",{});var EA=s(Tm);JZ=n(EA,"STRONG",{});var O5e=s(JZ);iDe=r(O5e,"bert"),O5e.forEach(t),dDe=r(EA," \u2014 "),u$=n(EA,"A",{href:!0});var V5e=s(u$);cDe=r(V5e,"BertConfig"),V5e.forEach(t),mDe=r(EA," (BERT model)"),EA.forEach(t),fDe=i(L),Mm=n(L,"LI",{});var CA=s(Mm);YZ=n(CA,"STRONG",{});var X5e=s(YZ);gDe=r(X5e,"bert-generation"),X5e.forEach(t),hDe=r(CA," \u2014 "),p$=n(CA,"A",{href:!0});var z5e=s(p$);uDe=r(z5e,"BertGenerationConfig"),z5e.forEach(t),pDe=r(CA," (Bert Generation model)"),CA.forEach(t),_De=i(L),Em=n(L,"LI",{});var wA=s(Em);KZ=n(wA,"STRONG",{});var Q5e=s(KZ);bDe=r(Q5e,"big_bird"),Q5e.forEach(t),FDe=r(wA," \u2014 "),_$=n(wA,"A",{href:!0});var W5e=s(_$);vDe=r(W5e,"BigBirdConfig"),W5e.forEach(t),TDe=r(wA," (BigBird model)"),wA.forEach(t),MDe=i(L),Cm=n(L,"LI",{});var AA=s(Cm);ZZ=n(AA,"STRONG",{});var H5e=s(ZZ);EDe=r(H5e,"bigbird_pegasus"),H5e.forEach(t),CDe=r(AA," \u2014 "),b$=n(AA,"A",{href:!0});var U5e=s(b$);wDe=r(U5e,"BigBirdPegasusConfig"),U5e.forEach(t),ADe=r(AA," (BigBirdPegasus model)"),AA.forEach(t),yDe=i(L),wm=n(L,"LI",{});var yA=s(wm);eee=n(yA,"STRONG",{});var J5e=s(eee);LDe=r(J5e,"blenderbot"),J5e.forEach(t),xDe=r(yA," \u2014 "),F$=n(yA,"A",{href:!0});var Y5e=s(F$);$De=r(Y5e,"BlenderbotConfig"),Y5e.forEach(t),kDe=r(yA," (Blenderbot model)"),yA.forEach(t),SDe=i(L),Am=n(L,"LI",{});var LA=s(Am);oee=n(LA,"STRONG",{});var K5e=s(oee);RDe=r(K5e,"blenderbot-small"),K5e.forEach(t),BDe=r(LA," \u2014 "),v$=n(LA,"A",{href:!0});var Z5e=s(v$);PDe=r(Z5e,"BlenderbotSmallConfig"),Z5e.forEach(t),IDe=r(LA," (BlenderbotSmall model)"),LA.forEach(t),qDe=i(L),ym=n(L,"LI",{});var xA=s(ym);ree=n(xA,"STRONG",{});var eCe=s(ree);NDe=r(eCe,"camembert"),eCe.forEach(t),jDe=r(xA," \u2014 "),T$=n(xA,"A",{href:!0});var oCe=s(T$);DDe=r(oCe,"CamembertConfig"),oCe.forEach(t),GDe=r(xA," (CamemBERT model)"),xA.forEach(t),ODe=i(L),Lm=n(L,"LI",{});var $A=s(Lm);tee=n($A,"STRONG",{});var rCe=s(tee);VDe=r(rCe,"canine"),rCe.forEach(t),XDe=r($A," \u2014 "),M$=n($A,"A",{href:!0});var tCe=s(M$);zDe=r(tCe,"CanineConfig"),tCe.forEach(t),QDe=r($A," (Canine model)"),$A.forEach(t),WDe=i(L),xm=n(L,"LI",{});var kA=s(xm);aee=n(kA,"STRONG",{});var aCe=s(aee);HDe=r(aCe,"clip"),aCe.forEach(t),UDe=r(kA," \u2014 "),E$=n(kA,"A",{href:!0});var nCe=s(E$);JDe=r(nCe,"CLIPConfig"),nCe.forEach(t),YDe=r(kA," (CLIP model)"),kA.forEach(t),KDe=i(L),$m=n(L,"LI",{});var SA=s($m);nee=n(SA,"STRONG",{});var sCe=s(nee);ZDe=r(sCe,"convbert"),sCe.forEach(t),eGe=r(SA," \u2014 "),C$=n(SA,"A",{href:!0});var lCe=s(C$);oGe=r(lCe,"ConvBertConfig"),lCe.forEach(t),rGe=r(SA," (ConvBERT model)"),SA.forEach(t),tGe=i(L),km=n(L,"LI",{});var RA=s(km);see=n(RA,"STRONG",{});var iCe=s(see);aGe=r(iCe,"convnext"),iCe.forEach(t),nGe=r(RA," \u2014 "),w$=n(RA,"A",{href:!0});var dCe=s(w$);sGe=r(dCe,"ConvNextConfig"),dCe.forEach(t),lGe=r(RA," (ConvNext model)"),RA.forEach(t),iGe=i(L),Sm=n(L,"LI",{});var BA=s(Sm);lee=n(BA,"STRONG",{});var cCe=s(lee);dGe=r(cCe,"ctrl"),cCe.forEach(t),cGe=r(BA," \u2014 "),A$=n(BA,"A",{href:!0});var mCe=s(A$);mGe=r(mCe,"CTRLConfig"),mCe.forEach(t),fGe=r(BA," (CTRL model)"),BA.forEach(t),gGe=i(L),Rm=n(L,"LI",{});var PA=s(Rm);iee=n(PA,"STRONG",{});var fCe=s(iee);hGe=r(fCe,"data2vec-audio"),fCe.forEach(t),uGe=r(PA," \u2014 "),y$=n(PA,"A",{href:!0});var gCe=s(y$);pGe=r(gCe,"Data2VecAudioConfig"),gCe.forEach(t),_Ge=r(PA," (Data2VecAudio model)"),PA.forEach(t),bGe=i(L),Bm=n(L,"LI",{});var IA=s(Bm);dee=n(IA,"STRONG",{});var hCe=s(dee);FGe=r(hCe,"data2vec-text"),hCe.forEach(t),vGe=r(IA," \u2014 "),L$=n(IA,"A",{href:!0});var uCe=s(L$);TGe=r(uCe,"Data2VecTextConfig"),uCe.forEach(t),MGe=r(IA," (Data2VecText model)"),IA.forEach(t),EGe=i(L),Pm=n(L,"LI",{});var qA=s(Pm);cee=n(qA,"STRONG",{});var pCe=s(cee);CGe=r(pCe,"data2vec-vision"),pCe.forEach(t),wGe=r(qA," \u2014 "),x$=n(qA,"A",{href:!0});var _Ce=s(x$);AGe=r(_Ce,"Data2VecVisionConfig"),_Ce.forEach(t),yGe=r(qA," (Data2VecVision model)"),qA.forEach(t),LGe=i(L),Im=n(L,"LI",{});var NA=s(Im);mee=n(NA,"STRONG",{});var bCe=s(mee);xGe=r(bCe,"deberta"),bCe.forEach(t),$Ge=r(NA," \u2014 "),$$=n(NA,"A",{href:!0});var FCe=s($$);kGe=r(FCe,"DebertaConfig"),FCe.forEach(t),SGe=r(NA," (DeBERTa model)"),NA.forEach(t),RGe=i(L),qm=n(L,"LI",{});var jA=s(qm);fee=n(jA,"STRONG",{});var vCe=s(fee);BGe=r(vCe,"deberta-v2"),vCe.forEach(t),PGe=r(jA," \u2014 "),k$=n(jA,"A",{href:!0});var TCe=s(k$);IGe=r(TCe,"DebertaV2Config"),TCe.forEach(t),qGe=r(jA," (DeBERTa-v2 model)"),jA.forEach(t),NGe=i(L),Nm=n(L,"LI",{});var DA=s(Nm);gee=n(DA,"STRONG",{});var MCe=s(gee);jGe=r(MCe,"decision_transformer"),MCe.forEach(t),DGe=r(DA," \u2014 "),S$=n(DA,"A",{href:!0});var ECe=s(S$);GGe=r(ECe,"DecisionTransformerConfig"),ECe.forEach(t),OGe=r(DA," (Decision Transformer model)"),DA.forEach(t),VGe=i(L),jm=n(L,"LI",{});var GA=s(jm);hee=n(GA,"STRONG",{});var CCe=s(hee);XGe=r(CCe,"deit"),CCe.forEach(t),zGe=r(GA," \u2014 "),R$=n(GA,"A",{href:!0});var wCe=s(R$);QGe=r(wCe,"DeiTConfig"),wCe.forEach(t),WGe=r(GA," (DeiT model)"),GA.forEach(t),HGe=i(L),Dm=n(L,"LI",{});var OA=s(Dm);uee=n(OA,"STRONG",{});var ACe=s(uee);UGe=r(ACe,"detr"),ACe.forEach(t),JGe=r(OA," \u2014 "),B$=n(OA,"A",{href:!0});var cqr=s(B$);YGe=r(cqr,"DetrConfig"),cqr.forEach(t),KGe=r(OA," (DETR model)"),OA.forEach(t),ZGe=i(L),Gm=n(L,"LI",{});var yCe=s(Gm);pee=n(yCe,"STRONG",{});var mqr=s(pee);eOe=r(mqr,"distilbert"),mqr.forEach(t),oOe=r(yCe," \u2014 "),P$=n(yCe,"A",{href:!0});var fqr=s(P$);rOe=r(fqr,"DistilBertConfig"),fqr.forEach(t),tOe=r(yCe," (DistilBERT model)"),yCe.forEach(t),aOe=i(L),Om=n(L,"LI",{});var LCe=s(Om);_ee=n(LCe,"STRONG",{});var gqr=s(_ee);nOe=r(gqr,"dpr"),gqr.forEach(t),sOe=r(LCe," \u2014 "),I$=n(LCe,"A",{href:!0});var hqr=s(I$);lOe=r(hqr,"DPRConfig"),hqr.forEach(t),iOe=r(LCe," (DPR model)"),LCe.forEach(t),dOe=i(L),Vm=n(L,"LI",{});var xCe=s(Vm);bee=n(xCe,"STRONG",{});var uqr=s(bee);cOe=r(uqr,"dpt"),uqr.forEach(t),mOe=r(xCe," \u2014 "),q$=n(xCe,"A",{href:!0});var pqr=s(q$);fOe=r(pqr,"DPTConfig"),pqr.forEach(t),gOe=r(xCe," (DPT model)"),xCe.forEach(t),hOe=i(L),Xm=n(L,"LI",{});var $Ce=s(Xm);Fee=n($Ce,"STRONG",{});var _qr=s(Fee);uOe=r(_qr,"electra"),_qr.forEach(t),pOe=r($Ce," \u2014 "),N$=n($Ce,"A",{href:!0});var bqr=s(N$);_Oe=r(bqr,"ElectraConfig"),bqr.forEach(t),bOe=r($Ce," (ELECTRA model)"),$Ce.forEach(t),FOe=i(L),zm=n(L,"LI",{});var kCe=s(zm);vee=n(kCe,"STRONG",{});var Fqr=s(vee);vOe=r(Fqr,"encoder-decoder"),Fqr.forEach(t),TOe=r(kCe," \u2014 "),j$=n(kCe,"A",{href:!0});var vqr=s(j$);MOe=r(vqr,"EncoderDecoderConfig"),vqr.forEach(t),EOe=r(kCe," (Encoder decoder model)"),kCe.forEach(t),COe=i(L),Qm=n(L,"LI",{});var SCe=s(Qm);Tee=n(SCe,"STRONG",{});var Tqr=s(Tee);wOe=r(Tqr,"flaubert"),Tqr.forEach(t),AOe=r(SCe," \u2014 "),D$=n(SCe,"A",{href:!0});var Mqr=s(D$);yOe=r(Mqr,"FlaubertConfig"),Mqr.forEach(t),LOe=r(SCe," (FlauBERT model)"),SCe.forEach(t),xOe=i(L),Wm=n(L,"LI",{});var RCe=s(Wm);Mee=n(RCe,"STRONG",{});var Eqr=s(Mee);$Oe=r(Eqr,"fnet"),Eqr.forEach(t),kOe=r(RCe," \u2014 "),G$=n(RCe,"A",{href:!0});var Cqr=s(G$);SOe=r(Cqr,"FNetConfig"),Cqr.forEach(t),ROe=r(RCe," (FNet model)"),RCe.forEach(t),BOe=i(L),Hm=n(L,"LI",{});var BCe=s(Hm);Eee=n(BCe,"STRONG",{});var wqr=s(Eee);POe=r(wqr,"fsmt"),wqr.forEach(t),IOe=r(BCe," \u2014 "),O$=n(BCe,"A",{href:!0});var Aqr=s(O$);qOe=r(Aqr,"FSMTConfig"),Aqr.forEach(t),NOe=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),jOe=i(L),Um=n(L,"LI",{});var PCe=s(Um);Cee=n(PCe,"STRONG",{});var yqr=s(Cee);DOe=r(yqr,"funnel"),yqr.forEach(t),GOe=r(PCe," \u2014 "),V$=n(PCe,"A",{href:!0});var Lqr=s(V$);OOe=r(Lqr,"FunnelConfig"),Lqr.forEach(t),VOe=r(PCe," (Funnel Transformer model)"),PCe.forEach(t),XOe=i(L),Jm=n(L,"LI",{});var ICe=s(Jm);wee=n(ICe,"STRONG",{});var xqr=s(wee);zOe=r(xqr,"glpn"),xqr.forEach(t),QOe=r(ICe," \u2014 "),X$=n(ICe,"A",{href:!0});var $qr=s(X$);WOe=r($qr,"GLPNConfig"),$qr.forEach(t),HOe=r(ICe," (GLPN model)"),ICe.forEach(t),UOe=i(L),Ym=n(L,"LI",{});var qCe=s(Ym);Aee=n(qCe,"STRONG",{});var kqr=s(Aee);JOe=r(kqr,"gpt2"),kqr.forEach(t),YOe=r(qCe," \u2014 "),z$=n(qCe,"A",{href:!0});var Sqr=s(z$);KOe=r(Sqr,"GPT2Config"),Sqr.forEach(t),ZOe=r(qCe," (OpenAI GPT-2 model)"),qCe.forEach(t),eVe=i(L),Km=n(L,"LI",{});var NCe=s(Km);yee=n(NCe,"STRONG",{});var Rqr=s(yee);oVe=r(Rqr,"gpt_neo"),Rqr.forEach(t),rVe=r(NCe," \u2014 "),Q$=n(NCe,"A",{href:!0});var Bqr=s(Q$);tVe=r(Bqr,"GPTNeoConfig"),Bqr.forEach(t),aVe=r(NCe," (GPT Neo model)"),NCe.forEach(t),nVe=i(L),Zm=n(L,"LI",{});var jCe=s(Zm);Lee=n(jCe,"STRONG",{});var Pqr=s(Lee);sVe=r(Pqr,"gptj"),Pqr.forEach(t),lVe=r(jCe," \u2014 "),W$=n(jCe,"A",{href:!0});var Iqr=s(W$);iVe=r(Iqr,"GPTJConfig"),Iqr.forEach(t),dVe=r(jCe," (GPT-J model)"),jCe.forEach(t),cVe=i(L),ef=n(L,"LI",{});var DCe=s(ef);xee=n(DCe,"STRONG",{});var qqr=s(xee);mVe=r(qqr,"hubert"),qqr.forEach(t),fVe=r(DCe," \u2014 "),H$=n(DCe,"A",{href:!0});var Nqr=s(H$);gVe=r(Nqr,"HubertConfig"),Nqr.forEach(t),hVe=r(DCe," (Hubert model)"),DCe.forEach(t),uVe=i(L),of=n(L,"LI",{});var GCe=s(of);$ee=n(GCe,"STRONG",{});var jqr=s($ee);pVe=r(jqr,"ibert"),jqr.forEach(t),_Ve=r(GCe," \u2014 "),U$=n(GCe,"A",{href:!0});var Dqr=s(U$);bVe=r(Dqr,"IBertConfig"),Dqr.forEach(t),FVe=r(GCe," (I-BERT model)"),GCe.forEach(t),vVe=i(L),rf=n(L,"LI",{});var OCe=s(rf);kee=n(OCe,"STRONG",{});var Gqr=s(kee);TVe=r(Gqr,"imagegpt"),Gqr.forEach(t),MVe=r(OCe," \u2014 "),J$=n(OCe,"A",{href:!0});var Oqr=s(J$);EVe=r(Oqr,"ImageGPTConfig"),Oqr.forEach(t),CVe=r(OCe," (ImageGPT model)"),OCe.forEach(t),wVe=i(L),tf=n(L,"LI",{});var VCe=s(tf);See=n(VCe,"STRONG",{});var Vqr=s(See);AVe=r(Vqr,"layoutlm"),Vqr.forEach(t),yVe=r(VCe," \u2014 "),Y$=n(VCe,"A",{href:!0});var Xqr=s(Y$);LVe=r(Xqr,"LayoutLMConfig"),Xqr.forEach(t),xVe=r(VCe," (LayoutLM model)"),VCe.forEach(t),$Ve=i(L),af=n(L,"LI",{});var XCe=s(af);Ree=n(XCe,"STRONG",{});var zqr=s(Ree);kVe=r(zqr,"layoutlmv2"),zqr.forEach(t),SVe=r(XCe," \u2014 "),K$=n(XCe,"A",{href:!0});var Qqr=s(K$);RVe=r(Qqr,"LayoutLMv2Config"),Qqr.forEach(t),BVe=r(XCe," (LayoutLMv2 model)"),XCe.forEach(t),PVe=i(L),nf=n(L,"LI",{});var zCe=s(nf);Bee=n(zCe,"STRONG",{});var Wqr=s(Bee);IVe=r(Wqr,"led"),Wqr.forEach(t),qVe=r(zCe," \u2014 "),Z$=n(zCe,"A",{href:!0});var Hqr=s(Z$);NVe=r(Hqr,"LEDConfig"),Hqr.forEach(t),jVe=r(zCe," (LED model)"),zCe.forEach(t),DVe=i(L),sf=n(L,"LI",{});var QCe=s(sf);Pee=n(QCe,"STRONG",{});var Uqr=s(Pee);GVe=r(Uqr,"longformer"),Uqr.forEach(t),OVe=r(QCe," \u2014 "),ek=n(QCe,"A",{href:!0});var Jqr=s(ek);VVe=r(Jqr,"LongformerConfig"),Jqr.forEach(t),XVe=r(QCe," (Longformer model)"),QCe.forEach(t),zVe=i(L),lf=n(L,"LI",{});var WCe=s(lf);Iee=n(WCe,"STRONG",{});var Yqr=s(Iee);QVe=r(Yqr,"luke"),Yqr.forEach(t),WVe=r(WCe," \u2014 "),ok=n(WCe,"A",{href:!0});var Kqr=s(ok);HVe=r(Kqr,"LukeConfig"),Kqr.forEach(t),UVe=r(WCe," (LUKE model)"),WCe.forEach(t),JVe=i(L),df=n(L,"LI",{});var HCe=s(df);qee=n(HCe,"STRONG",{});var Zqr=s(qee);YVe=r(Zqr,"lxmert"),Zqr.forEach(t),KVe=r(HCe," \u2014 "),rk=n(HCe,"A",{href:!0});var eNr=s(rk);ZVe=r(eNr,"LxmertConfig"),eNr.forEach(t),eXe=r(HCe," (LXMERT model)"),HCe.forEach(t),oXe=i(L),cf=n(L,"LI",{});var UCe=s(cf);Nee=n(UCe,"STRONG",{});var oNr=s(Nee);rXe=r(oNr,"m2m_100"),oNr.forEach(t),tXe=r(UCe," \u2014 "),tk=n(UCe,"A",{href:!0});var rNr=s(tk);aXe=r(rNr,"M2M100Config"),rNr.forEach(t),nXe=r(UCe," (M2M100 model)"),UCe.forEach(t),sXe=i(L),mf=n(L,"LI",{});var JCe=s(mf);jee=n(JCe,"STRONG",{});var tNr=s(jee);lXe=r(tNr,"marian"),tNr.forEach(t),iXe=r(JCe," \u2014 "),ak=n(JCe,"A",{href:!0});var aNr=s(ak);dXe=r(aNr,"MarianConfig"),aNr.forEach(t),cXe=r(JCe," (Marian model)"),JCe.forEach(t),mXe=i(L),ff=n(L,"LI",{});var YCe=s(ff);Dee=n(YCe,"STRONG",{});var nNr=s(Dee);fXe=r(nNr,"maskformer"),nNr.forEach(t),gXe=r(YCe," \u2014 "),nk=n(YCe,"A",{href:!0});var sNr=s(nk);hXe=r(sNr,"MaskFormerConfig"),sNr.forEach(t),uXe=r(YCe," (MaskFormer model)"),YCe.forEach(t),pXe=i(L),gf=n(L,"LI",{});var KCe=s(gf);Gee=n(KCe,"STRONG",{});var lNr=s(Gee);_Xe=r(lNr,"mbart"),lNr.forEach(t),bXe=r(KCe," \u2014 "),sk=n(KCe,"A",{href:!0});var iNr=s(sk);FXe=r(iNr,"MBartConfig"),iNr.forEach(t),vXe=r(KCe," (mBART model)"),KCe.forEach(t),TXe=i(L),hf=n(L,"LI",{});var ZCe=s(hf);Oee=n(ZCe,"STRONG",{});var dNr=s(Oee);MXe=r(dNr,"megatron-bert"),dNr.forEach(t),EXe=r(ZCe," \u2014 "),lk=n(ZCe,"A",{href:!0});var cNr=s(lk);CXe=r(cNr,"MegatronBertConfig"),cNr.forEach(t),wXe=r(ZCe," (MegatronBert model)"),ZCe.forEach(t),AXe=i(L),uf=n(L,"LI",{});var e3e=s(uf);Vee=n(e3e,"STRONG",{});var mNr=s(Vee);yXe=r(mNr,"mobilebert"),mNr.forEach(t),LXe=r(e3e," \u2014 "),ik=n(e3e,"A",{href:!0});var fNr=s(ik);xXe=r(fNr,"MobileBertConfig"),fNr.forEach(t),$Xe=r(e3e," (MobileBERT model)"),e3e.forEach(t),kXe=i(L),pf=n(L,"LI",{});var o3e=s(pf);Xee=n(o3e,"STRONG",{});var gNr=s(Xee);SXe=r(gNr,"mpnet"),gNr.forEach(t),RXe=r(o3e," \u2014 "),dk=n(o3e,"A",{href:!0});var hNr=s(dk);BXe=r(hNr,"MPNetConfig"),hNr.forEach(t),PXe=r(o3e," (MPNet model)"),o3e.forEach(t),IXe=i(L),_f=n(L,"LI",{});var r3e=s(_f);zee=n(r3e,"STRONG",{});var uNr=s(zee);qXe=r(uNr,"mt5"),uNr.forEach(t),NXe=r(r3e," \u2014 "),ck=n(r3e,"A",{href:!0});var pNr=s(ck);jXe=r(pNr,"MT5Config"),pNr.forEach(t),DXe=r(r3e," (mT5 model)"),r3e.forEach(t),GXe=i(L),bf=n(L,"LI",{});var t3e=s(bf);Qee=n(t3e,"STRONG",{});var _Nr=s(Qee);OXe=r(_Nr,"nystromformer"),_Nr.forEach(t),VXe=r(t3e," \u2014 "),mk=n(t3e,"A",{href:!0});var bNr=s(mk);XXe=r(bNr,"NystromformerConfig"),bNr.forEach(t),zXe=r(t3e," (Nystromformer model)"),t3e.forEach(t),QXe=i(L),Ff=n(L,"LI",{});var a3e=s(Ff);Wee=n(a3e,"STRONG",{});var FNr=s(Wee);WXe=r(FNr,"openai-gpt"),FNr.forEach(t),HXe=r(a3e," \u2014 "),fk=n(a3e,"A",{href:!0});var vNr=s(fk);UXe=r(vNr,"OpenAIGPTConfig"),vNr.forEach(t),JXe=r(a3e," (OpenAI GPT model)"),a3e.forEach(t),YXe=i(L),vf=n(L,"LI",{});var n3e=s(vf);Hee=n(n3e,"STRONG",{});var TNr=s(Hee);KXe=r(TNr,"pegasus"),TNr.forEach(t),ZXe=r(n3e," \u2014 "),gk=n(n3e,"A",{href:!0});var MNr=s(gk);eze=r(MNr,"PegasusConfig"),MNr.forEach(t),oze=r(n3e," (Pegasus model)"),n3e.forEach(t),rze=i(L),Tf=n(L,"LI",{});var s3e=s(Tf);Uee=n(s3e,"STRONG",{});var ENr=s(Uee);tze=r(ENr,"perceiver"),ENr.forEach(t),aze=r(s3e," \u2014 "),hk=n(s3e,"A",{href:!0});var CNr=s(hk);nze=r(CNr,"PerceiverConfig"),CNr.forEach(t),sze=r(s3e," (Perceiver model)"),s3e.forEach(t),lze=i(L),Mf=n(L,"LI",{});var l3e=s(Mf);Jee=n(l3e,"STRONG",{});var wNr=s(Jee);ize=r(wNr,"plbart"),wNr.forEach(t),dze=r(l3e," \u2014 "),uk=n(l3e,"A",{href:!0});var ANr=s(uk);cze=r(ANr,"PLBartConfig"),ANr.forEach(t),mze=r(l3e," (PLBart model)"),l3e.forEach(t),fze=i(L),Ef=n(L,"LI",{});var i3e=s(Ef);Yee=n(i3e,"STRONG",{});var yNr=s(Yee);gze=r(yNr,"poolformer"),yNr.forEach(t),hze=r(i3e," \u2014 "),pk=n(i3e,"A",{href:!0});var LNr=s(pk);uze=r(LNr,"PoolFormerConfig"),LNr.forEach(t),pze=r(i3e," (PoolFormer model)"),i3e.forEach(t),_ze=i(L),Cf=n(L,"LI",{});var d3e=s(Cf);Kee=n(d3e,"STRONG",{});var xNr=s(Kee);bze=r(xNr,"prophetnet"),xNr.forEach(t),Fze=r(d3e," \u2014 "),_k=n(d3e,"A",{href:!0});var $Nr=s(_k);vze=r($Nr,"ProphetNetConfig"),$Nr.forEach(t),Tze=r(d3e," (ProphetNet model)"),d3e.forEach(t),Mze=i(L),wf=n(L,"LI",{});var c3e=s(wf);Zee=n(c3e,"STRONG",{});var kNr=s(Zee);Eze=r(kNr,"qdqbert"),kNr.forEach(t),Cze=r(c3e," \u2014 "),bk=n(c3e,"A",{href:!0});var SNr=s(bk);wze=r(SNr,"QDQBertConfig"),SNr.forEach(t),Aze=r(c3e," (QDQBert model)"),c3e.forEach(t),yze=i(L),Af=n(L,"LI",{});var m3e=s(Af);eoe=n(m3e,"STRONG",{});var RNr=s(eoe);Lze=r(RNr,"rag"),RNr.forEach(t),xze=r(m3e," \u2014 "),Fk=n(m3e,"A",{href:!0});var BNr=s(Fk);$ze=r(BNr,"RagConfig"),BNr.forEach(t),kze=r(m3e," (RAG model)"),m3e.forEach(t),Sze=i(L),yf=n(L,"LI",{});var f3e=s(yf);ooe=n(f3e,"STRONG",{});var PNr=s(ooe);Rze=r(PNr,"realm"),PNr.forEach(t),Bze=r(f3e," \u2014 "),vk=n(f3e,"A",{href:!0});var INr=s(vk);Pze=r(INr,"RealmConfig"),INr.forEach(t),Ize=r(f3e," (Realm model)"),f3e.forEach(t),qze=i(L),Lf=n(L,"LI",{});var g3e=s(Lf);roe=n(g3e,"STRONG",{});var qNr=s(roe);Nze=r(qNr,"reformer"),qNr.forEach(t),jze=r(g3e," \u2014 "),Tk=n(g3e,"A",{href:!0});var NNr=s(Tk);Dze=r(NNr,"ReformerConfig"),NNr.forEach(t),Gze=r(g3e," (Reformer model)"),g3e.forEach(t),Oze=i(L),xf=n(L,"LI",{});var h3e=s(xf);toe=n(h3e,"STRONG",{});var jNr=s(toe);Vze=r(jNr,"regnet"),jNr.forEach(t),Xze=r(h3e," \u2014 "),Mk=n(h3e,"A",{href:!0});var DNr=s(Mk);zze=r(DNr,"RegNetConfig"),DNr.forEach(t),Qze=r(h3e," (RegNet model)"),h3e.forEach(t),Wze=i(L),$f=n(L,"LI",{});var u3e=s($f);aoe=n(u3e,"STRONG",{});var GNr=s(aoe);Hze=r(GNr,"rembert"),GNr.forEach(t),Uze=r(u3e," \u2014 "),Ek=n(u3e,"A",{href:!0});var ONr=s(Ek);Jze=r(ONr,"RemBertConfig"),ONr.forEach(t),Yze=r(u3e," (RemBERT model)"),u3e.forEach(t),Kze=i(L),kf=n(L,"LI",{});var p3e=s(kf);noe=n(p3e,"STRONG",{});var VNr=s(noe);Zze=r(VNr,"resnet"),VNr.forEach(t),eQe=r(p3e," \u2014 "),Ck=n(p3e,"A",{href:!0});var XNr=s(Ck);oQe=r(XNr,"ResNetConfig"),XNr.forEach(t),rQe=r(p3e," (ResNet model)"),p3e.forEach(t),tQe=i(L),Sf=n(L,"LI",{});var _3e=s(Sf);soe=n(_3e,"STRONG",{});var zNr=s(soe);aQe=r(zNr,"retribert"),zNr.forEach(t),nQe=r(_3e," \u2014 "),wk=n(_3e,"A",{href:!0});var QNr=s(wk);sQe=r(QNr,"RetriBertConfig"),QNr.forEach(t),lQe=r(_3e," (RetriBERT model)"),_3e.forEach(t),iQe=i(L),Rf=n(L,"LI",{});var b3e=s(Rf);loe=n(b3e,"STRONG",{});var WNr=s(loe);dQe=r(WNr,"roberta"),WNr.forEach(t),cQe=r(b3e," \u2014 "),Ak=n(b3e,"A",{href:!0});var HNr=s(Ak);mQe=r(HNr,"RobertaConfig"),HNr.forEach(t),fQe=r(b3e," (RoBERTa model)"),b3e.forEach(t),gQe=i(L),Bf=n(L,"LI",{});var F3e=s(Bf);ioe=n(F3e,"STRONG",{});var UNr=s(ioe);hQe=r(UNr,"roformer"),UNr.forEach(t),uQe=r(F3e," \u2014 "),yk=n(F3e,"A",{href:!0});var JNr=s(yk);pQe=r(JNr,"RoFormerConfig"),JNr.forEach(t),_Qe=r(F3e," (RoFormer model)"),F3e.forEach(t),bQe=i(L),Pf=n(L,"LI",{});var v3e=s(Pf);doe=n(v3e,"STRONG",{});var YNr=s(doe);FQe=r(YNr,"segformer"),YNr.forEach(t),vQe=r(v3e," \u2014 "),Lk=n(v3e,"A",{href:!0});var KNr=s(Lk);TQe=r(KNr,"SegformerConfig"),KNr.forEach(t),MQe=r(v3e," (SegFormer model)"),v3e.forEach(t),EQe=i(L),If=n(L,"LI",{});var T3e=s(If);coe=n(T3e,"STRONG",{});var ZNr=s(coe);CQe=r(ZNr,"sew"),ZNr.forEach(t),wQe=r(T3e," \u2014 "),xk=n(T3e,"A",{href:!0});var ejr=s(xk);AQe=r(ejr,"SEWConfig"),ejr.forEach(t),yQe=r(T3e," (SEW model)"),T3e.forEach(t),LQe=i(L),qf=n(L,"LI",{});var M3e=s(qf);moe=n(M3e,"STRONG",{});var ojr=s(moe);xQe=r(ojr,"sew-d"),ojr.forEach(t),$Qe=r(M3e," \u2014 "),$k=n(M3e,"A",{href:!0});var rjr=s($k);kQe=r(rjr,"SEWDConfig"),rjr.forEach(t),SQe=r(M3e," (SEW-D model)"),M3e.forEach(t),RQe=i(L),Nf=n(L,"LI",{});var E3e=s(Nf);foe=n(E3e,"STRONG",{});var tjr=s(foe);BQe=r(tjr,"speech-encoder-decoder"),tjr.forEach(t),PQe=r(E3e," \u2014 "),kk=n(E3e,"A",{href:!0});var ajr=s(kk);IQe=r(ajr,"SpeechEncoderDecoderConfig"),ajr.forEach(t),qQe=r(E3e," (Speech Encoder decoder model)"),E3e.forEach(t),NQe=i(L),jf=n(L,"LI",{});var C3e=s(jf);goe=n(C3e,"STRONG",{});var njr=s(goe);jQe=r(njr,"speech_to_text"),njr.forEach(t),DQe=r(C3e," \u2014 "),Sk=n(C3e,"A",{href:!0});var sjr=s(Sk);GQe=r(sjr,"Speech2TextConfig"),sjr.forEach(t),OQe=r(C3e," (Speech2Text model)"),C3e.forEach(t),VQe=i(L),Df=n(L,"LI",{});var w3e=s(Df);hoe=n(w3e,"STRONG",{});var ljr=s(hoe);XQe=r(ljr,"speech_to_text_2"),ljr.forEach(t),zQe=r(w3e," \u2014 "),Rk=n(w3e,"A",{href:!0});var ijr=s(Rk);QQe=r(ijr,"Speech2Text2Config"),ijr.forEach(t),WQe=r(w3e," (Speech2Text2 model)"),w3e.forEach(t),HQe=i(L),Gf=n(L,"LI",{});var A3e=s(Gf);uoe=n(A3e,"STRONG",{});var djr=s(uoe);UQe=r(djr,"splinter"),djr.forEach(t),JQe=r(A3e," \u2014 "),Bk=n(A3e,"A",{href:!0});var cjr=s(Bk);YQe=r(cjr,"SplinterConfig"),cjr.forEach(t),KQe=r(A3e," (Splinter model)"),A3e.forEach(t),ZQe=i(L),Of=n(L,"LI",{});var y3e=s(Of);poe=n(y3e,"STRONG",{});var mjr=s(poe);eWe=r(mjr,"squeezebert"),mjr.forEach(t),oWe=r(y3e," \u2014 "),Pk=n(y3e,"A",{href:!0});var fjr=s(Pk);rWe=r(fjr,"SqueezeBertConfig"),fjr.forEach(t),tWe=r(y3e," (SqueezeBERT model)"),y3e.forEach(t),aWe=i(L),Vf=n(L,"LI",{});var L3e=s(Vf);_oe=n(L3e,"STRONG",{});var gjr=s(_oe);nWe=r(gjr,"swin"),gjr.forEach(t),sWe=r(L3e," \u2014 "),Ik=n(L3e,"A",{href:!0});var hjr=s(Ik);lWe=r(hjr,"SwinConfig"),hjr.forEach(t),iWe=r(L3e," (Swin model)"),L3e.forEach(t),dWe=i(L),Xf=n(L,"LI",{});var x3e=s(Xf);boe=n(x3e,"STRONG",{});var ujr=s(boe);cWe=r(ujr,"t5"),ujr.forEach(t),mWe=r(x3e," \u2014 "),qk=n(x3e,"A",{href:!0});var pjr=s(qk);fWe=r(pjr,"T5Config"),pjr.forEach(t),gWe=r(x3e," (T5 model)"),x3e.forEach(t),hWe=i(L),zf=n(L,"LI",{});var $3e=s(zf);Foe=n($3e,"STRONG",{});var _jr=s(Foe);uWe=r(_jr,"tapas"),_jr.forEach(t),pWe=r($3e," \u2014 "),Nk=n($3e,"A",{href:!0});var bjr=s(Nk);_We=r(bjr,"TapasConfig"),bjr.forEach(t),bWe=r($3e," (TAPAS model)"),$3e.forEach(t),FWe=i(L),Qf=n(L,"LI",{});var k3e=s(Qf);voe=n(k3e,"STRONG",{});var Fjr=s(voe);vWe=r(Fjr,"tapex"),Fjr.forEach(t),TWe=r(k3e," \u2014 "),jk=n(k3e,"A",{href:!0});var vjr=s(jk);MWe=r(vjr,"BartConfig"),vjr.forEach(t),EWe=r(k3e," (TAPEX model)"),k3e.forEach(t),CWe=i(L),Wf=n(L,"LI",{});var S3e=s(Wf);Toe=n(S3e,"STRONG",{});var Tjr=s(Toe);wWe=r(Tjr,"transfo-xl"),Tjr.forEach(t),AWe=r(S3e," \u2014 "),Dk=n(S3e,"A",{href:!0});var Mjr=s(Dk);yWe=r(Mjr,"TransfoXLConfig"),Mjr.forEach(t),LWe=r(S3e," (Transformer-XL model)"),S3e.forEach(t),xWe=i(L),Hf=n(L,"LI",{});var R3e=s(Hf);Moe=n(R3e,"STRONG",{});var Ejr=s(Moe);$We=r(Ejr,"trocr"),Ejr.forEach(t),kWe=r(R3e," \u2014 "),Gk=n(R3e,"A",{href:!0});var Cjr=s(Gk);SWe=r(Cjr,"TrOCRConfig"),Cjr.forEach(t),RWe=r(R3e," (TrOCR model)"),R3e.forEach(t),BWe=i(L),Uf=n(L,"LI",{});var B3e=s(Uf);Eoe=n(B3e,"STRONG",{});var wjr=s(Eoe);PWe=r(wjr,"unispeech"),wjr.forEach(t),IWe=r(B3e," \u2014 "),Ok=n(B3e,"A",{href:!0});var Ajr=s(Ok);qWe=r(Ajr,"UniSpeechConfig"),Ajr.forEach(t),NWe=r(B3e," (UniSpeech model)"),B3e.forEach(t),jWe=i(L),Jf=n(L,"LI",{});var P3e=s(Jf);Coe=n(P3e,"STRONG",{});var yjr=s(Coe);DWe=r(yjr,"unispeech-sat"),yjr.forEach(t),GWe=r(P3e," \u2014 "),Vk=n(P3e,"A",{href:!0});var Ljr=s(Vk);OWe=r(Ljr,"UniSpeechSatConfig"),Ljr.forEach(t),VWe=r(P3e," (UniSpeechSat model)"),P3e.forEach(t),XWe=i(L),Yf=n(L,"LI",{});var I3e=s(Yf);woe=n(I3e,"STRONG",{});var xjr=s(woe);zWe=r(xjr,"van"),xjr.forEach(t),QWe=r(I3e," \u2014 "),Xk=n(I3e,"A",{href:!0});var $jr=s(Xk);WWe=r($jr,"VanConfig"),$jr.forEach(t),HWe=r(I3e," (VAN model)"),I3e.forEach(t),UWe=i(L),Kf=n(L,"LI",{});var q3e=s(Kf);Aoe=n(q3e,"STRONG",{});var kjr=s(Aoe);JWe=r(kjr,"vilt"),kjr.forEach(t),YWe=r(q3e," \u2014 "),zk=n(q3e,"A",{href:!0});var Sjr=s(zk);KWe=r(Sjr,"ViltConfig"),Sjr.forEach(t),ZWe=r(q3e," (ViLT model)"),q3e.forEach(t),eHe=i(L),Zf=n(L,"LI",{});var N3e=s(Zf);yoe=n(N3e,"STRONG",{});var Rjr=s(yoe);oHe=r(Rjr,"vision-encoder-decoder"),Rjr.forEach(t),rHe=r(N3e," \u2014 "),Qk=n(N3e,"A",{href:!0});var Bjr=s(Qk);tHe=r(Bjr,"VisionEncoderDecoderConfig"),Bjr.forEach(t),aHe=r(N3e," (Vision Encoder decoder model)"),N3e.forEach(t),nHe=i(L),eg=n(L,"LI",{});var j3e=s(eg);Loe=n(j3e,"STRONG",{});var Pjr=s(Loe);sHe=r(Pjr,"vision-text-dual-encoder"),Pjr.forEach(t),lHe=r(j3e," \u2014 "),Wk=n(j3e,"A",{href:!0});var Ijr=s(Wk);iHe=r(Ijr,"VisionTextDualEncoderConfig"),Ijr.forEach(t),dHe=r(j3e," (VisionTextDualEncoder model)"),j3e.forEach(t),cHe=i(L),og=n(L,"LI",{});var D3e=s(og);xoe=n(D3e,"STRONG",{});var qjr=s(xoe);mHe=r(qjr,"visual_bert"),qjr.forEach(t),fHe=r(D3e," \u2014 "),Hk=n(D3e,"A",{href:!0});var Njr=s(Hk);gHe=r(Njr,"VisualBertConfig"),Njr.forEach(t),hHe=r(D3e," (VisualBert model)"),D3e.forEach(t),uHe=i(L),rg=n(L,"LI",{});var G3e=s(rg);$oe=n(G3e,"STRONG",{});var jjr=s($oe);pHe=r(jjr,"vit"),jjr.forEach(t),_He=r(G3e," \u2014 "),Uk=n(G3e,"A",{href:!0});var Djr=s(Uk);bHe=r(Djr,"ViTConfig"),Djr.forEach(t),FHe=r(G3e," (ViT model)"),G3e.forEach(t),vHe=i(L),tg=n(L,"LI",{});var O3e=s(tg);koe=n(O3e,"STRONG",{});var Gjr=s(koe);THe=r(Gjr,"vit_mae"),Gjr.forEach(t),MHe=r(O3e," \u2014 "),Jk=n(O3e,"A",{href:!0});var Ojr=s(Jk);EHe=r(Ojr,"ViTMAEConfig"),Ojr.forEach(t),CHe=r(O3e," (ViTMAE model)"),O3e.forEach(t),wHe=i(L),ag=n(L,"LI",{});var V3e=s(ag);Soe=n(V3e,"STRONG",{});var Vjr=s(Soe);AHe=r(Vjr,"wav2vec2"),Vjr.forEach(t),yHe=r(V3e," \u2014 "),Yk=n(V3e,"A",{href:!0});var Xjr=s(Yk);LHe=r(Xjr,"Wav2Vec2Config"),Xjr.forEach(t),xHe=r(V3e," (Wav2Vec2 model)"),V3e.forEach(t),$He=i(L),ng=n(L,"LI",{});var X3e=s(ng);Roe=n(X3e,"STRONG",{});var zjr=s(Roe);kHe=r(zjr,"wavlm"),zjr.forEach(t),SHe=r(X3e," \u2014 "),Kk=n(X3e,"A",{href:!0});var Qjr=s(Kk);RHe=r(Qjr,"WavLMConfig"),Qjr.forEach(t),BHe=r(X3e," (WavLM model)"),X3e.forEach(t),PHe=i(L),sg=n(L,"LI",{});var z3e=s(sg);Boe=n(z3e,"STRONG",{});var Wjr=s(Boe);IHe=r(Wjr,"xglm"),Wjr.forEach(t),qHe=r(z3e," \u2014 "),Zk=n(z3e,"A",{href:!0});var Hjr=s(Zk);NHe=r(Hjr,"XGLMConfig"),Hjr.forEach(t),jHe=r(z3e," (XGLM model)"),z3e.forEach(t),DHe=i(L),lg=n(L,"LI",{});var Q3e=s(lg);Poe=n(Q3e,"STRONG",{});var Ujr=s(Poe);GHe=r(Ujr,"xlm"),Ujr.forEach(t),OHe=r(Q3e," \u2014 "),eS=n(Q3e,"A",{href:!0});var Jjr=s(eS);VHe=r(Jjr,"XLMConfig"),Jjr.forEach(t),XHe=r(Q3e," (XLM model)"),Q3e.forEach(t),zHe=i(L),ig=n(L,"LI",{});var W3e=s(ig);Ioe=n(W3e,"STRONG",{});var Yjr=s(Ioe);QHe=r(Yjr,"xlm-prophetnet"),Yjr.forEach(t),WHe=r(W3e," \u2014 "),oS=n(W3e,"A",{href:!0});var Kjr=s(oS);HHe=r(Kjr,"XLMProphetNetConfig"),Kjr.forEach(t),UHe=r(W3e," (XLMProphetNet model)"),W3e.forEach(t),JHe=i(L),dg=n(L,"LI",{});var H3e=s(dg);qoe=n(H3e,"STRONG",{});var Zjr=s(qoe);YHe=r(Zjr,"xlm-roberta"),Zjr.forEach(t),KHe=r(H3e," \u2014 "),rS=n(H3e,"A",{href:!0});var eDr=s(rS);ZHe=r(eDr,"XLMRobertaConfig"),eDr.forEach(t),eUe=r(H3e," (XLM-RoBERTa model)"),H3e.forEach(t),oUe=i(L),cg=n(L,"LI",{});var U3e=s(cg);Noe=n(U3e,"STRONG",{});var oDr=s(Noe);rUe=r(oDr,"xlm-roberta-xl"),oDr.forEach(t),tUe=r(U3e," \u2014 "),tS=n(U3e,"A",{href:!0});var rDr=s(tS);aUe=r(rDr,"XLMRobertaXLConfig"),rDr.forEach(t),nUe=r(U3e," (XLM-RoBERTa-XL model)"),U3e.forEach(t),sUe=i(L),mg=n(L,"LI",{});var J3e=s(mg);joe=n(J3e,"STRONG",{});var tDr=s(joe);lUe=r(tDr,"xlnet"),tDr.forEach(t),iUe=r(J3e," \u2014 "),aS=n(J3e,"A",{href:!0});var aDr=s(aS);dUe=r(aDr,"XLNetConfig"),aDr.forEach(t),cUe=r(J3e," (XLNet model)"),J3e.forEach(t),mUe=i(L),fg=n(L,"LI",{});var Y3e=s(fg);Doe=n(Y3e,"STRONG",{});var nDr=s(Doe);fUe=r(nDr,"yolos"),nDr.forEach(t),gUe=r(Y3e," \u2014 "),nS=n(Y3e,"A",{href:!0});var sDr=s(nS);hUe=r(sDr,"YolosConfig"),sDr.forEach(t),uUe=r(Y3e," (YOLOS model)"),Y3e.forEach(t),pUe=i(L),gg=n(L,"LI",{});var K3e=s(gg);Goe=n(K3e,"STRONG",{});var lDr=s(Goe);_Ue=r(lDr,"yoso"),lDr.forEach(t),bUe=r(K3e," \u2014 "),sS=n(K3e,"A",{href:!0});var iDr=s(sS);FUe=r(iDr,"YosoConfig"),iDr.forEach(t),vUe=r(K3e," (YOSO model)"),K3e.forEach(t),L.forEach(t),TUe=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),MUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var mqe=s(ug);T(U6.$$.fragment,mqe),EUe=i(mqe),Ooe=n(mqe,"P",{});var dDr=s(Ooe);CUe=r(dDr,"Register a new configuration for this class."),dDr.forEach(t),mqe.forEach(t),Kr.forEach(t),hPe=i(m),_i=n(m,"H2",{class:!0});var fqe=s(_i);pg=n(fqe,"A",{id:!0,class:!0,href:!0});var cDr=s(pg);Voe=n(cDr,"SPAN",{});var mDr=s(Voe);T(J6.$$.fragment,mDr),mDr.forEach(t),cDr.forEach(t),wUe=i(fqe),Xoe=n(fqe,"SPAN",{});var fDr=s(Xoe);AUe=r(fDr,"AutoTokenizer"),fDr.forEach(t),fqe.forEach(t),uPe=i(m),wo=n(m,"DIV",{class:!0});var Ps=s(wo);T(Y6.$$.fragment,Ps),yUe=i(Ps),K6=n(Ps,"P",{});var gqe=s(K6);LUe=r(gqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=n(gqe,"A",{href:!0});var gDr=s(lS);xUe=r(gDr,"AutoTokenizer.from_pretrained()"),gDr.forEach(t),$Ue=r(gqe," class method."),gqe.forEach(t),kUe=i(Ps),Z6=n(Ps,"P",{});var hqe=s(Z6);SUe=r(hqe,"This class cannot be instantiated directly using "),zoe=n(hqe,"CODE",{});var hDr=s(zoe);RUe=r(hDr,"__init__()"),hDr.forEach(t),BUe=r(hqe," (throws an error)."),hqe.forEach(t),PUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(ey.$$.fragment,Is),IUe=i(Is),Qoe=n(Is,"P",{});var uDr=s(Qoe);qUe=r(uDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uDr.forEach(t),NUe=i(Is),Ca=n(Is,"P",{});var VA=s(Ca);jUe=r(VA,"The tokenizer class to instantiate is selected based on the "),Woe=n(VA,"CODE",{});var pDr=s(Woe);DUe=r(pDr,"model_type"),pDr.forEach(t),GUe=r(VA,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(VA,"CODE",{});var _Dr=s(Hoe);OUe=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),VUe=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(VA,"CODE",{});var bDr=s(Uoe);XUe=r(bDr,"pretrained_model_name_or_path"),bDr.forEach(t),zUe=r(VA,":"),VA.forEach(t),QUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var o9=s(kn);Joe=n(o9,"STRONG",{});var FDr=s(Joe);WUe=r(FDr,"albert"),FDr.forEach(t),HUe=r(o9," \u2014 "),iS=n(o9,"A",{href:!0});var vDr=s(iS);UUe=r(vDr,"AlbertTokenizer"),vDr.forEach(t),JUe=r(o9," or "),dS=n(o9,"A",{href:!0});var TDr=s(dS);YUe=r(TDr,"AlbertTokenizerFast"),TDr.forEach(t),KUe=r(o9," (ALBERT model)"),o9.forEach(t),ZUe=i(S),Sn=n(S,"LI",{});var r9=s(Sn);Yoe=n(r9,"STRONG",{});var MDr=s(Yoe);eJe=r(MDr,"bart"),MDr.forEach(t),oJe=r(r9," \u2014 "),cS=n(r9,"A",{href:!0});var EDr=s(cS);rJe=r(EDr,"BartTokenizer"),EDr.forEach(t),tJe=r(r9," or "),mS=n(r9,"A",{href:!0});var CDr=s(mS);aJe=r(CDr,"BartTokenizerFast"),CDr.forEach(t),nJe=r(r9," (BART model)"),r9.forEach(t),sJe=i(S),Rn=n(S,"LI",{});var t9=s(Rn);Koe=n(t9,"STRONG",{});var wDr=s(Koe);lJe=r(wDr,"barthez"),wDr.forEach(t),iJe=r(t9," \u2014 "),fS=n(t9,"A",{href:!0});var ADr=s(fS);dJe=r(ADr,"BarthezTokenizer"),ADr.forEach(t),cJe=r(t9," or "),gS=n(t9,"A",{href:!0});var yDr=s(gS);mJe=r(yDr,"BarthezTokenizerFast"),yDr.forEach(t),fJe=r(t9," (BARThez model)"),t9.forEach(t),gJe=i(S),_g=n(S,"LI",{});var Z3e=s(_g);Zoe=n(Z3e,"STRONG",{});var LDr=s(Zoe);hJe=r(LDr,"bartpho"),LDr.forEach(t),uJe=r(Z3e," \u2014 "),hS=n(Z3e,"A",{href:!0});var xDr=s(hS);pJe=r(xDr,"BartphoTokenizer"),xDr.forEach(t),_Je=r(Z3e," (BARTpho model)"),Z3e.forEach(t),bJe=i(S),Bn=n(S,"LI",{});var a9=s(Bn);ere=n(a9,"STRONG",{});var $Dr=s(ere);FJe=r($Dr,"bert"),$Dr.forEach(t),vJe=r(a9," \u2014 "),uS=n(a9,"A",{href:!0});var kDr=s(uS);TJe=r(kDr,"BertTokenizer"),kDr.forEach(t),MJe=r(a9," or "),pS=n(a9,"A",{href:!0});var SDr=s(pS);EJe=r(SDr,"BertTokenizerFast"),SDr.forEach(t),CJe=r(a9," (BERT model)"),a9.forEach(t),wJe=i(S),bg=n(S,"LI",{});var ewe=s(bg);ore=n(ewe,"STRONG",{});var RDr=s(ore);AJe=r(RDr,"bert-generation"),RDr.forEach(t),yJe=r(ewe," \u2014 "),_S=n(ewe,"A",{href:!0});var BDr=s(_S);LJe=r(BDr,"BertGenerationTokenizer"),BDr.forEach(t),xJe=r(ewe," (Bert Generation model)"),ewe.forEach(t),$Je=i(S),Fg=n(S,"LI",{});var owe=s(Fg);rre=n(owe,"STRONG",{});var PDr=s(rre);kJe=r(PDr,"bert-japanese"),PDr.forEach(t),SJe=r(owe," \u2014 "),bS=n(owe,"A",{href:!0});var IDr=s(bS);RJe=r(IDr,"BertJapaneseTokenizer"),IDr.forEach(t),BJe=r(owe," (BertJapanese model)"),owe.forEach(t),PJe=i(S),vg=n(S,"LI",{});var rwe=s(vg);tre=n(rwe,"STRONG",{});var qDr=s(tre);IJe=r(qDr,"bertweet"),qDr.forEach(t),qJe=r(rwe," \u2014 "),FS=n(rwe,"A",{href:!0});var NDr=s(FS);NJe=r(NDr,"BertweetTokenizer"),NDr.forEach(t),jJe=r(rwe," (Bertweet model)"),rwe.forEach(t),DJe=i(S),Pn=n(S,"LI",{});var n9=s(Pn);are=n(n9,"STRONG",{});var jDr=s(are);GJe=r(jDr,"big_bird"),jDr.forEach(t),OJe=r(n9," \u2014 "),vS=n(n9,"A",{href:!0});var DDr=s(vS);VJe=r(DDr,"BigBirdTokenizer"),DDr.forEach(t),XJe=r(n9," or "),TS=n(n9,"A",{href:!0});var GDr=s(TS);zJe=r(GDr,"BigBirdTokenizerFast"),GDr.forEach(t),QJe=r(n9," (BigBird model)"),n9.forEach(t),WJe=i(S),In=n(S,"LI",{});var s9=s(In);nre=n(s9,"STRONG",{});var ODr=s(nre);HJe=r(ODr,"bigbird_pegasus"),ODr.forEach(t),UJe=r(s9," \u2014 "),MS=n(s9,"A",{href:!0});var VDr=s(MS);JJe=r(VDr,"PegasusTokenizer"),VDr.forEach(t),YJe=r(s9," or "),ES=n(s9,"A",{href:!0});var XDr=s(ES);KJe=r(XDr,"PegasusTokenizerFast"),XDr.forEach(t),ZJe=r(s9," (BigBirdPegasus model)"),s9.forEach(t),eYe=i(S),qn=n(S,"LI",{});var l9=s(qn);sre=n(l9,"STRONG",{});var zDr=s(sre);oYe=r(zDr,"blenderbot"),zDr.forEach(t),rYe=r(l9," \u2014 "),CS=n(l9,"A",{href:!0});var QDr=s(CS);tYe=r(QDr,"BlenderbotTokenizer"),QDr.forEach(t),aYe=r(l9," or "),wS=n(l9,"A",{href:!0});var WDr=s(wS);nYe=r(WDr,"BlenderbotTokenizerFast"),WDr.forEach(t),sYe=r(l9," (Blenderbot model)"),l9.forEach(t),lYe=i(S),Tg=n(S,"LI",{});var twe=s(Tg);lre=n(twe,"STRONG",{});var HDr=s(lre);iYe=r(HDr,"blenderbot-small"),HDr.forEach(t),dYe=r(twe," \u2014 "),AS=n(twe,"A",{href:!0});var UDr=s(AS);cYe=r(UDr,"BlenderbotSmallTokenizer"),UDr.forEach(t),mYe=r(twe," (BlenderbotSmall model)"),twe.forEach(t),fYe=i(S),Mg=n(S,"LI",{});var awe=s(Mg);ire=n(awe,"STRONG",{});var JDr=s(ire);gYe=r(JDr,"byt5"),JDr.forEach(t),hYe=r(awe," \u2014 "),yS=n(awe,"A",{href:!0});var YDr=s(yS);uYe=r(YDr,"ByT5Tokenizer"),YDr.forEach(t),pYe=r(awe," (ByT5 model)"),awe.forEach(t),_Ye=i(S),Nn=n(S,"LI",{});var i9=s(Nn);dre=n(i9,"STRONG",{});var KDr=s(dre);bYe=r(KDr,"camembert"),KDr.forEach(t),FYe=r(i9," \u2014 "),LS=n(i9,"A",{href:!0});var ZDr=s(LS);vYe=r(ZDr,"CamembertTokenizer"),ZDr.forEach(t),TYe=r(i9," or "),xS=n(i9,"A",{href:!0});var eGr=s(xS);MYe=r(eGr,"CamembertTokenizerFast"),eGr.forEach(t),EYe=r(i9," (CamemBERT model)"),i9.forEach(t),CYe=i(S),Eg=n(S,"LI",{});var nwe=s(Eg);cre=n(nwe,"STRONG",{});var oGr=s(cre);wYe=r(oGr,"canine"),oGr.forEach(t),AYe=r(nwe," \u2014 "),$S=n(nwe,"A",{href:!0});var rGr=s($S);yYe=r(rGr,"CanineTokenizer"),rGr.forEach(t),LYe=r(nwe," (Canine model)"),nwe.forEach(t),xYe=i(S),jn=n(S,"LI",{});var d9=s(jn);mre=n(d9,"STRONG",{});var tGr=s(mre);$Ye=r(tGr,"clip"),tGr.forEach(t),kYe=r(d9," \u2014 "),kS=n(d9,"A",{href:!0});var aGr=s(kS);SYe=r(aGr,"CLIPTokenizer"),aGr.forEach(t),RYe=r(d9," or "),SS=n(d9,"A",{href:!0});var nGr=s(SS);BYe=r(nGr,"CLIPTokenizerFast"),nGr.forEach(t),PYe=r(d9," (CLIP model)"),d9.forEach(t),IYe=i(S),Dn=n(S,"LI",{});var c9=s(Dn);fre=n(c9,"STRONG",{});var sGr=s(fre);qYe=r(sGr,"convbert"),sGr.forEach(t),NYe=r(c9," \u2014 "),RS=n(c9,"A",{href:!0});var lGr=s(RS);jYe=r(lGr,"ConvBertTokenizer"),lGr.forEach(t),DYe=r(c9," or "),BS=n(c9,"A",{href:!0});var iGr=s(BS);GYe=r(iGr,"ConvBertTokenizerFast"),iGr.forEach(t),OYe=r(c9," (ConvBERT model)"),c9.forEach(t),VYe=i(S),Gn=n(S,"LI",{});var m9=s(Gn);gre=n(m9,"STRONG",{});var dGr=s(gre);XYe=r(dGr,"cpm"),dGr.forEach(t),zYe=r(m9," \u2014 "),PS=n(m9,"A",{href:!0});var cGr=s(PS);QYe=r(cGr,"CpmTokenizer"),cGr.forEach(t),WYe=r(m9," or "),IS=n(m9,"A",{href:!0});var mGr=s(IS);HYe=r(mGr,"CpmTokenizerFast"),mGr.forEach(t),UYe=r(m9," (CPM model)"),m9.forEach(t),JYe=i(S),Cg=n(S,"LI",{});var swe=s(Cg);hre=n(swe,"STRONG",{});var fGr=s(hre);YYe=r(fGr,"ctrl"),fGr.forEach(t),KYe=r(swe," \u2014 "),qS=n(swe,"A",{href:!0});var gGr=s(qS);ZYe=r(gGr,"CTRLTokenizer"),gGr.forEach(t),eKe=r(swe," (CTRL model)"),swe.forEach(t),oKe=i(S),On=n(S,"LI",{});var f9=s(On);ure=n(f9,"STRONG",{});var hGr=s(ure);rKe=r(hGr,"data2vec-text"),hGr.forEach(t),tKe=r(f9," \u2014 "),NS=n(f9,"A",{href:!0});var uGr=s(NS);aKe=r(uGr,"RobertaTokenizer"),uGr.forEach(t),nKe=r(f9," or "),jS=n(f9,"A",{href:!0});var pGr=s(jS);sKe=r(pGr,"RobertaTokenizerFast"),pGr.forEach(t),lKe=r(f9," (Data2VecText model)"),f9.forEach(t),iKe=i(S),Vn=n(S,"LI",{});var g9=s(Vn);pre=n(g9,"STRONG",{});var _Gr=s(pre);dKe=r(_Gr,"deberta"),_Gr.forEach(t),cKe=r(g9," \u2014 "),DS=n(g9,"A",{href:!0});var bGr=s(DS);mKe=r(bGr,"DebertaTokenizer"),bGr.forEach(t),fKe=r(g9," or "),GS=n(g9,"A",{href:!0});var FGr=s(GS);gKe=r(FGr,"DebertaTokenizerFast"),FGr.forEach(t),hKe=r(g9," (DeBERTa model)"),g9.forEach(t),uKe=i(S),Xn=n(S,"LI",{});var h9=s(Xn);_re=n(h9,"STRONG",{});var vGr=s(_re);pKe=r(vGr,"deberta-v2"),vGr.forEach(t),_Ke=r(h9," \u2014 "),OS=n(h9,"A",{href:!0});var TGr=s(OS);bKe=r(TGr,"DebertaV2Tokenizer"),TGr.forEach(t),FKe=r(h9," or "),VS=n(h9,"A",{href:!0});var MGr=s(VS);vKe=r(MGr,"DebertaV2TokenizerFast"),MGr.forEach(t),TKe=r(h9," (DeBERTa-v2 model)"),h9.forEach(t),MKe=i(S),zn=n(S,"LI",{});var u9=s(zn);bre=n(u9,"STRONG",{});var EGr=s(bre);EKe=r(EGr,"distilbert"),EGr.forEach(t),CKe=r(u9," \u2014 "),XS=n(u9,"A",{href:!0});var CGr=s(XS);wKe=r(CGr,"DistilBertTokenizer"),CGr.forEach(t),AKe=r(u9," or "),zS=n(u9,"A",{href:!0});var wGr=s(zS);yKe=r(wGr,"DistilBertTokenizerFast"),wGr.forEach(t),LKe=r(u9," (DistilBERT model)"),u9.forEach(t),xKe=i(S),Qn=n(S,"LI",{});var p9=s(Qn);Fre=n(p9,"STRONG",{});var AGr=s(Fre);$Ke=r(AGr,"dpr"),AGr.forEach(t),kKe=r(p9," \u2014 "),QS=n(p9,"A",{href:!0});var yGr=s(QS);SKe=r(yGr,"DPRQuestionEncoderTokenizer"),yGr.forEach(t),RKe=r(p9," or "),WS=n(p9,"A",{href:!0});var LGr=s(WS);BKe=r(LGr,"DPRQuestionEncoderTokenizerFast"),LGr.forEach(t),PKe=r(p9," (DPR model)"),p9.forEach(t),IKe=i(S),Wn=n(S,"LI",{});var _9=s(Wn);vre=n(_9,"STRONG",{});var xGr=s(vre);qKe=r(xGr,"electra"),xGr.forEach(t),NKe=r(_9," \u2014 "),HS=n(_9,"A",{href:!0});var $Gr=s(HS);jKe=r($Gr,"ElectraTokenizer"),$Gr.forEach(t),DKe=r(_9," or "),US=n(_9,"A",{href:!0});var kGr=s(US);GKe=r(kGr,"ElectraTokenizerFast"),kGr.forEach(t),OKe=r(_9," (ELECTRA model)"),_9.forEach(t),VKe=i(S),wg=n(S,"LI",{});var lwe=s(wg);Tre=n(lwe,"STRONG",{});var SGr=s(Tre);XKe=r(SGr,"flaubert"),SGr.forEach(t),zKe=r(lwe," \u2014 "),JS=n(lwe,"A",{href:!0});var RGr=s(JS);QKe=r(RGr,"FlaubertTokenizer"),RGr.forEach(t),WKe=r(lwe," (FlauBERT model)"),lwe.forEach(t),HKe=i(S),Hn=n(S,"LI",{});var b9=s(Hn);Mre=n(b9,"STRONG",{});var BGr=s(Mre);UKe=r(BGr,"fnet"),BGr.forEach(t),JKe=r(b9," \u2014 "),YS=n(b9,"A",{href:!0});var PGr=s(YS);YKe=r(PGr,"FNetTokenizer"),PGr.forEach(t),KKe=r(b9," or "),KS=n(b9,"A",{href:!0});var IGr=s(KS);ZKe=r(IGr,"FNetTokenizerFast"),IGr.forEach(t),eZe=r(b9," (FNet model)"),b9.forEach(t),oZe=i(S),Ag=n(S,"LI",{});var iwe=s(Ag);Ere=n(iwe,"STRONG",{});var qGr=s(Ere);rZe=r(qGr,"fsmt"),qGr.forEach(t),tZe=r(iwe," \u2014 "),ZS=n(iwe,"A",{href:!0});var NGr=s(ZS);aZe=r(NGr,"FSMTTokenizer"),NGr.forEach(t),nZe=r(iwe," (FairSeq Machine-Translation model)"),iwe.forEach(t),sZe=i(S),Un=n(S,"LI",{});var F9=s(Un);Cre=n(F9,"STRONG",{});var jGr=s(Cre);lZe=r(jGr,"funnel"),jGr.forEach(t),iZe=r(F9," \u2014 "),eR=n(F9,"A",{href:!0});var DGr=s(eR);dZe=r(DGr,"FunnelTokenizer"),DGr.forEach(t),cZe=r(F9," or "),oR=n(F9,"A",{href:!0});var GGr=s(oR);mZe=r(GGr,"FunnelTokenizerFast"),GGr.forEach(t),fZe=r(F9," (Funnel Transformer model)"),F9.forEach(t),gZe=i(S),Jn=n(S,"LI",{});var v9=s(Jn);wre=n(v9,"STRONG",{});var OGr=s(wre);hZe=r(OGr,"gpt2"),OGr.forEach(t),uZe=r(v9," \u2014 "),rR=n(v9,"A",{href:!0});var VGr=s(rR);pZe=r(VGr,"GPT2Tokenizer"),VGr.forEach(t),_Ze=r(v9," or "),tR=n(v9,"A",{href:!0});var XGr=s(tR);bZe=r(XGr,"GPT2TokenizerFast"),XGr.forEach(t),FZe=r(v9," (OpenAI GPT-2 model)"),v9.forEach(t),vZe=i(S),Yn=n(S,"LI",{});var T9=s(Yn);Are=n(T9,"STRONG",{});var zGr=s(Are);TZe=r(zGr,"gpt_neo"),zGr.forEach(t),MZe=r(T9," \u2014 "),aR=n(T9,"A",{href:!0});var QGr=s(aR);EZe=r(QGr,"GPT2Tokenizer"),QGr.forEach(t),CZe=r(T9," or "),nR=n(T9,"A",{href:!0});var WGr=s(nR);wZe=r(WGr,"GPT2TokenizerFast"),WGr.forEach(t),AZe=r(T9," (GPT Neo model)"),T9.forEach(t),yZe=i(S),Kn=n(S,"LI",{});var M9=s(Kn);yre=n(M9,"STRONG",{});var HGr=s(yre);LZe=r(HGr,"gptj"),HGr.forEach(t),xZe=r(M9," \u2014 "),sR=n(M9,"A",{href:!0});var UGr=s(sR);$Ze=r(UGr,"GPT2Tokenizer"),UGr.forEach(t),kZe=r(M9," or "),lR=n(M9,"A",{href:!0});var JGr=s(lR);SZe=r(JGr,"GPT2TokenizerFast"),JGr.forEach(t),RZe=r(M9," (GPT-J model)"),M9.forEach(t),BZe=i(S),Zn=n(S,"LI",{});var E9=s(Zn);Lre=n(E9,"STRONG",{});var YGr=s(Lre);PZe=r(YGr,"herbert"),YGr.forEach(t),IZe=r(E9," \u2014 "),iR=n(E9,"A",{href:!0});var KGr=s(iR);qZe=r(KGr,"HerbertTokenizer"),KGr.forEach(t),NZe=r(E9," or "),dR=n(E9,"A",{href:!0});var ZGr=s(dR);jZe=r(ZGr,"HerbertTokenizerFast"),ZGr.forEach(t),DZe=r(E9," (HerBERT model)"),E9.forEach(t),GZe=i(S),yg=n(S,"LI",{});var dwe=s(yg);xre=n(dwe,"STRONG",{});var eOr=s(xre);OZe=r(eOr,"hubert"),eOr.forEach(t),VZe=r(dwe," \u2014 "),cR=n(dwe,"A",{href:!0});var oOr=s(cR);XZe=r(oOr,"Wav2Vec2CTCTokenizer"),oOr.forEach(t),zZe=r(dwe," (Hubert model)"),dwe.forEach(t),QZe=i(S),es=n(S,"LI",{});var C9=s(es);$re=n(C9,"STRONG",{});var rOr=s($re);WZe=r(rOr,"ibert"),rOr.forEach(t),HZe=r(C9," \u2014 "),mR=n(C9,"A",{href:!0});var tOr=s(mR);UZe=r(tOr,"RobertaTokenizer"),tOr.forEach(t),JZe=r(C9," or "),fR=n(C9,"A",{href:!0});var aOr=s(fR);YZe=r(aOr,"RobertaTokenizerFast"),aOr.forEach(t),KZe=r(C9," (I-BERT model)"),C9.forEach(t),ZZe=i(S),os=n(S,"LI",{});var w9=s(os);kre=n(w9,"STRONG",{});var nOr=s(kre);eeo=r(nOr,"layoutlm"),nOr.forEach(t),oeo=r(w9," \u2014 "),gR=n(w9,"A",{href:!0});var sOr=s(gR);reo=r(sOr,"LayoutLMTokenizer"),sOr.forEach(t),teo=r(w9," or "),hR=n(w9,"A",{href:!0});var lOr=s(hR);aeo=r(lOr,"LayoutLMTokenizerFast"),lOr.forEach(t),neo=r(w9," (LayoutLM model)"),w9.forEach(t),seo=i(S),rs=n(S,"LI",{});var A9=s(rs);Sre=n(A9,"STRONG",{});var iOr=s(Sre);leo=r(iOr,"layoutlmv2"),iOr.forEach(t),ieo=r(A9," \u2014 "),uR=n(A9,"A",{href:!0});var dOr=s(uR);deo=r(dOr,"LayoutLMv2Tokenizer"),dOr.forEach(t),ceo=r(A9," or "),pR=n(A9,"A",{href:!0});var cOr=s(pR);meo=r(cOr,"LayoutLMv2TokenizerFast"),cOr.forEach(t),feo=r(A9," (LayoutLMv2 model)"),A9.forEach(t),geo=i(S),ts=n(S,"LI",{});var y9=s(ts);Rre=n(y9,"STRONG",{});var mOr=s(Rre);heo=r(mOr,"layoutxlm"),mOr.forEach(t),ueo=r(y9," \u2014 "),_R=n(y9,"A",{href:!0});var fOr=s(_R);peo=r(fOr,"LayoutXLMTokenizer"),fOr.forEach(t),_eo=r(y9," or "),bR=n(y9,"A",{href:!0});var gOr=s(bR);beo=r(gOr,"LayoutXLMTokenizerFast"),gOr.forEach(t),Feo=r(y9," (LayoutXLM model)"),y9.forEach(t),veo=i(S),as=n(S,"LI",{});var L9=s(as);Bre=n(L9,"STRONG",{});var hOr=s(Bre);Teo=r(hOr,"led"),hOr.forEach(t),Meo=r(L9," \u2014 "),FR=n(L9,"A",{href:!0});var uOr=s(FR);Eeo=r(uOr,"LEDTokenizer"),uOr.forEach(t),Ceo=r(L9," or "),vR=n(L9,"A",{href:!0});var pOr=s(vR);weo=r(pOr,"LEDTokenizerFast"),pOr.forEach(t),Aeo=r(L9," (LED model)"),L9.forEach(t),yeo=i(S),ns=n(S,"LI",{});var x9=s(ns);Pre=n(x9,"STRONG",{});var _Or=s(Pre);Leo=r(_Or,"longformer"),_Or.forEach(t),xeo=r(x9," \u2014 "),TR=n(x9,"A",{href:!0});var bOr=s(TR);$eo=r(bOr,"LongformerTokenizer"),bOr.forEach(t),keo=r(x9," or "),MR=n(x9,"A",{href:!0});var FOr=s(MR);Seo=r(FOr,"LongformerTokenizerFast"),FOr.forEach(t),Reo=r(x9," (Longformer model)"),x9.forEach(t),Beo=i(S),Lg=n(S,"LI",{});var cwe=s(Lg);Ire=n(cwe,"STRONG",{});var vOr=s(Ire);Peo=r(vOr,"luke"),vOr.forEach(t),Ieo=r(cwe," \u2014 "),ER=n(cwe,"A",{href:!0});var TOr=s(ER);qeo=r(TOr,"LukeTokenizer"),TOr.forEach(t),Neo=r(cwe," (LUKE model)"),cwe.forEach(t),jeo=i(S),ss=n(S,"LI",{});var $9=s(ss);qre=n($9,"STRONG",{});var MOr=s(qre);Deo=r(MOr,"lxmert"),MOr.forEach(t),Geo=r($9," \u2014 "),CR=n($9,"A",{href:!0});var EOr=s(CR);Oeo=r(EOr,"LxmertTokenizer"),EOr.forEach(t),Veo=r($9," or "),wR=n($9,"A",{href:!0});var COr=s(wR);Xeo=r(COr,"LxmertTokenizerFast"),COr.forEach(t),zeo=r($9," (LXMERT model)"),$9.forEach(t),Qeo=i(S),xg=n(S,"LI",{});var mwe=s(xg);Nre=n(mwe,"STRONG",{});var wOr=s(Nre);Weo=r(wOr,"m2m_100"),wOr.forEach(t),Heo=r(mwe," \u2014 "),AR=n(mwe,"A",{href:!0});var AOr=s(AR);Ueo=r(AOr,"M2M100Tokenizer"),AOr.forEach(t),Jeo=r(mwe," (M2M100 model)"),mwe.forEach(t),Yeo=i(S),$g=n(S,"LI",{});var fwe=s($g);jre=n(fwe,"STRONG",{});var yOr=s(jre);Keo=r(yOr,"marian"),yOr.forEach(t),Zeo=r(fwe," \u2014 "),yR=n(fwe,"A",{href:!0});var LOr=s(yR);eoo=r(LOr,"MarianTokenizer"),LOr.forEach(t),ooo=r(fwe," (Marian model)"),fwe.forEach(t),roo=i(S),ls=n(S,"LI",{});var k9=s(ls);Dre=n(k9,"STRONG",{});var xOr=s(Dre);too=r(xOr,"mbart"),xOr.forEach(t),aoo=r(k9," \u2014 "),LR=n(k9,"A",{href:!0});var $Or=s(LR);noo=r($Or,"MBartTokenizer"),$Or.forEach(t),soo=r(k9," or "),xR=n(k9,"A",{href:!0});var kOr=s(xR);loo=r(kOr,"MBartTokenizerFast"),kOr.forEach(t),ioo=r(k9," (mBART model)"),k9.forEach(t),doo=i(S),is=n(S,"LI",{});var S9=s(is);Gre=n(S9,"STRONG",{});var SOr=s(Gre);coo=r(SOr,"mbart50"),SOr.forEach(t),moo=r(S9," \u2014 "),$R=n(S9,"A",{href:!0});var ROr=s($R);foo=r(ROr,"MBart50Tokenizer"),ROr.forEach(t),goo=r(S9," or "),kR=n(S9,"A",{href:!0});var BOr=s(kR);hoo=r(BOr,"MBart50TokenizerFast"),BOr.forEach(t),uoo=r(S9," (mBART-50 model)"),S9.forEach(t),poo=i(S),ds=n(S,"LI",{});var R9=s(ds);Ore=n(R9,"STRONG",{});var POr=s(Ore);_oo=r(POr,"megatron-bert"),POr.forEach(t),boo=r(R9," \u2014 "),SR=n(R9,"A",{href:!0});var IOr=s(SR);Foo=r(IOr,"BertTokenizer"),IOr.forEach(t),voo=r(R9," or "),RR=n(R9,"A",{href:!0});var qOr=s(RR);Too=r(qOr,"BertTokenizerFast"),qOr.forEach(t),Moo=r(R9," (MegatronBert model)"),R9.forEach(t),Eoo=i(S),kg=n(S,"LI",{});var gwe=s(kg);Vre=n(gwe,"STRONG",{});var NOr=s(Vre);Coo=r(NOr,"mluke"),NOr.forEach(t),woo=r(gwe," \u2014 "),BR=n(gwe,"A",{href:!0});var jOr=s(BR);Aoo=r(jOr,"MLukeTokenizer"),jOr.forEach(t),yoo=r(gwe," (mLUKE model)"),gwe.forEach(t),Loo=i(S),cs=n(S,"LI",{});var B9=s(cs);Xre=n(B9,"STRONG",{});var DOr=s(Xre);xoo=r(DOr,"mobilebert"),DOr.forEach(t),$oo=r(B9," \u2014 "),PR=n(B9,"A",{href:!0});var GOr=s(PR);koo=r(GOr,"MobileBertTokenizer"),GOr.forEach(t),Soo=r(B9," or "),IR=n(B9,"A",{href:!0});var OOr=s(IR);Roo=r(OOr,"MobileBertTokenizerFast"),OOr.forEach(t),Boo=r(B9," (MobileBERT model)"),B9.forEach(t),Poo=i(S),ms=n(S,"LI",{});var P9=s(ms);zre=n(P9,"STRONG",{});var VOr=s(zre);Ioo=r(VOr,"mpnet"),VOr.forEach(t),qoo=r(P9," \u2014 "),qR=n(P9,"A",{href:!0});var XOr=s(qR);Noo=r(XOr,"MPNetTokenizer"),XOr.forEach(t),joo=r(P9," or "),NR=n(P9,"A",{href:!0});var zOr=s(NR);Doo=r(zOr,"MPNetTokenizerFast"),zOr.forEach(t),Goo=r(P9," (MPNet model)"),P9.forEach(t),Ooo=i(S),fs=n(S,"LI",{});var I9=s(fs);Qre=n(I9,"STRONG",{});var QOr=s(Qre);Voo=r(QOr,"mt5"),QOr.forEach(t),Xoo=r(I9," \u2014 "),jR=n(I9,"A",{href:!0});var WOr=s(jR);zoo=r(WOr,"MT5Tokenizer"),WOr.forEach(t),Qoo=r(I9," or "),DR=n(I9,"A",{href:!0});var HOr=s(DR);Woo=r(HOr,"MT5TokenizerFast"),HOr.forEach(t),Hoo=r(I9," (mT5 model)"),I9.forEach(t),Uoo=i(S),gs=n(S,"LI",{});var q9=s(gs);Wre=n(q9,"STRONG",{});var UOr=s(Wre);Joo=r(UOr,"nystromformer"),UOr.forEach(t),Yoo=r(q9," \u2014 "),GR=n(q9,"A",{href:!0});var JOr=s(GR);Koo=r(JOr,"AlbertTokenizer"),JOr.forEach(t),Zoo=r(q9," or "),OR=n(q9,"A",{href:!0});var YOr=s(OR);ero=r(YOr,"AlbertTokenizerFast"),YOr.forEach(t),oro=r(q9," (Nystromformer model)"),q9.forEach(t),rro=i(S),hs=n(S,"LI",{});var N9=s(hs);Hre=n(N9,"STRONG",{});var KOr=s(Hre);tro=r(KOr,"openai-gpt"),KOr.forEach(t),aro=r(N9," \u2014 "),VR=n(N9,"A",{href:!0});var ZOr=s(VR);nro=r(ZOr,"OpenAIGPTTokenizer"),ZOr.forEach(t),sro=r(N9," or "),XR=n(N9,"A",{href:!0});var eVr=s(XR);lro=r(eVr,"OpenAIGPTTokenizerFast"),eVr.forEach(t),iro=r(N9," (OpenAI GPT model)"),N9.forEach(t),dro=i(S),us=n(S,"LI",{});var j9=s(us);Ure=n(j9,"STRONG",{});var oVr=s(Ure);cro=r(oVr,"pegasus"),oVr.forEach(t),mro=r(j9," \u2014 "),zR=n(j9,"A",{href:!0});var rVr=s(zR);fro=r(rVr,"PegasusTokenizer"),rVr.forEach(t),gro=r(j9," or "),QR=n(j9,"A",{href:!0});var tVr=s(QR);hro=r(tVr,"PegasusTokenizerFast"),tVr.forEach(t),uro=r(j9," (Pegasus model)"),j9.forEach(t),pro=i(S),Sg=n(S,"LI",{});var hwe=s(Sg);Jre=n(hwe,"STRONG",{});var aVr=s(Jre);_ro=r(aVr,"perceiver"),aVr.forEach(t),bro=r(hwe," \u2014 "),WR=n(hwe,"A",{href:!0});var nVr=s(WR);Fro=r(nVr,"PerceiverTokenizer"),nVr.forEach(t),vro=r(hwe," (Perceiver model)"),hwe.forEach(t),Tro=i(S),Rg=n(S,"LI",{});var uwe=s(Rg);Yre=n(uwe,"STRONG",{});var sVr=s(Yre);Mro=r(sVr,"phobert"),sVr.forEach(t),Ero=r(uwe," \u2014 "),HR=n(uwe,"A",{href:!0});var lVr=s(HR);Cro=r(lVr,"PhobertTokenizer"),lVr.forEach(t),wro=r(uwe," (PhoBERT model)"),uwe.forEach(t),Aro=i(S),Bg=n(S,"LI",{});var pwe=s(Bg);Kre=n(pwe,"STRONG",{});var iVr=s(Kre);yro=r(iVr,"plbart"),iVr.forEach(t),Lro=r(pwe," \u2014 "),UR=n(pwe,"A",{href:!0});var dVr=s(UR);xro=r(dVr,"PLBartTokenizer"),dVr.forEach(t),$ro=r(pwe," (PLBart model)"),pwe.forEach(t),kro=i(S),Pg=n(S,"LI",{});var _we=s(Pg);Zre=n(_we,"STRONG",{});var cVr=s(Zre);Sro=r(cVr,"prophetnet"),cVr.forEach(t),Rro=r(_we," \u2014 "),JR=n(_we,"A",{href:!0});var mVr=s(JR);Bro=r(mVr,"ProphetNetTokenizer"),mVr.forEach(t),Pro=r(_we," (ProphetNet model)"),_we.forEach(t),Iro=i(S),ps=n(S,"LI",{});var D9=s(ps);ete=n(D9,"STRONG",{});var fVr=s(ete);qro=r(fVr,"qdqbert"),fVr.forEach(t),Nro=r(D9," \u2014 "),YR=n(D9,"A",{href:!0});var gVr=s(YR);jro=r(gVr,"BertTokenizer"),gVr.forEach(t),Dro=r(D9," or "),KR=n(D9,"A",{href:!0});var hVr=s(KR);Gro=r(hVr,"BertTokenizerFast"),hVr.forEach(t),Oro=r(D9," (QDQBert model)"),D9.forEach(t),Vro=i(S),Ig=n(S,"LI",{});var bwe=s(Ig);ote=n(bwe,"STRONG",{});var uVr=s(ote);Xro=r(uVr,"rag"),uVr.forEach(t),zro=r(bwe," \u2014 "),ZR=n(bwe,"A",{href:!0});var pVr=s(ZR);Qro=r(pVr,"RagTokenizer"),pVr.forEach(t),Wro=r(bwe," (RAG model)"),bwe.forEach(t),Hro=i(S),_s=n(S,"LI",{});var G9=s(_s);rte=n(G9,"STRONG",{});var _Vr=s(rte);Uro=r(_Vr,"realm"),_Vr.forEach(t),Jro=r(G9," \u2014 "),eB=n(G9,"A",{href:!0});var bVr=s(eB);Yro=r(bVr,"RealmTokenizer"),bVr.forEach(t),Kro=r(G9," or "),oB=n(G9,"A",{href:!0});var FVr=s(oB);Zro=r(FVr,"RealmTokenizerFast"),FVr.forEach(t),eto=r(G9," (Realm model)"),G9.forEach(t),oto=i(S),bs=n(S,"LI",{});var O9=s(bs);tte=n(O9,"STRONG",{});var vVr=s(tte);rto=r(vVr,"reformer"),vVr.forEach(t),tto=r(O9," \u2014 "),rB=n(O9,"A",{href:!0});var TVr=s(rB);ato=r(TVr,"ReformerTokenizer"),TVr.forEach(t),nto=r(O9," or "),tB=n(O9,"A",{href:!0});var MVr=s(tB);sto=r(MVr,"ReformerTokenizerFast"),MVr.forEach(t),lto=r(O9," (Reformer model)"),O9.forEach(t),ito=i(S),Fs=n(S,"LI",{});var V9=s(Fs);ate=n(V9,"STRONG",{});var EVr=s(ate);dto=r(EVr,"rembert"),EVr.forEach(t),cto=r(V9," \u2014 "),aB=n(V9,"A",{href:!0});var CVr=s(aB);mto=r(CVr,"RemBertTokenizer"),CVr.forEach(t),fto=r(V9," or "),nB=n(V9,"A",{href:!0});var wVr=s(nB);gto=r(wVr,"RemBertTokenizerFast"),wVr.forEach(t),hto=r(V9," (RemBERT model)"),V9.forEach(t),uto=i(S),vs=n(S,"LI",{});var X9=s(vs);nte=n(X9,"STRONG",{});var AVr=s(nte);pto=r(AVr,"retribert"),AVr.forEach(t),_to=r(X9," \u2014 "),sB=n(X9,"A",{href:!0});var yVr=s(sB);bto=r(yVr,"RetriBertTokenizer"),yVr.forEach(t),Fto=r(X9," or "),lB=n(X9,"A",{href:!0});var LVr=s(lB);vto=r(LVr,"RetriBertTokenizerFast"),LVr.forEach(t),Tto=r(X9," (RetriBERT model)"),X9.forEach(t),Mto=i(S),Ts=n(S,"LI",{});var z9=s(Ts);ste=n(z9,"STRONG",{});var xVr=s(ste);Eto=r(xVr,"roberta"),xVr.forEach(t),Cto=r(z9," \u2014 "),iB=n(z9,"A",{href:!0});var $Vr=s(iB);wto=r($Vr,"RobertaTokenizer"),$Vr.forEach(t),Ato=r(z9," or "),dB=n(z9,"A",{href:!0});var kVr=s(dB);yto=r(kVr,"RobertaTokenizerFast"),kVr.forEach(t),Lto=r(z9," (RoBERTa model)"),z9.forEach(t),xto=i(S),Ms=n(S,"LI",{});var Q9=s(Ms);lte=n(Q9,"STRONG",{});var SVr=s(lte);$to=r(SVr,"roformer"),SVr.forEach(t),kto=r(Q9," \u2014 "),cB=n(Q9,"A",{href:!0});var RVr=s(cB);Sto=r(RVr,"RoFormerTokenizer"),RVr.forEach(t),Rto=r(Q9," or "),mB=n(Q9,"A",{href:!0});var BVr=s(mB);Bto=r(BVr,"RoFormerTokenizerFast"),BVr.forEach(t),Pto=r(Q9," (RoFormer model)"),Q9.forEach(t),Ito=i(S),qg=n(S,"LI",{});var Fwe=s(qg);ite=n(Fwe,"STRONG",{});var PVr=s(ite);qto=r(PVr,"speech_to_text"),PVr.forEach(t),Nto=r(Fwe," \u2014 "),fB=n(Fwe,"A",{href:!0});var IVr=s(fB);jto=r(IVr,"Speech2TextTokenizer"),IVr.forEach(t),Dto=r(Fwe," (Speech2Text model)"),Fwe.forEach(t),Gto=i(S),Ng=n(S,"LI",{});var vwe=s(Ng);dte=n(vwe,"STRONG",{});var qVr=s(dte);Oto=r(qVr,"speech_to_text_2"),qVr.forEach(t),Vto=r(vwe," \u2014 "),gB=n(vwe,"A",{href:!0});var NVr=s(gB);Xto=r(NVr,"Speech2Text2Tokenizer"),NVr.forEach(t),zto=r(vwe," (Speech2Text2 model)"),vwe.forEach(t),Qto=i(S),Es=n(S,"LI",{});var W9=s(Es);cte=n(W9,"STRONG",{});var jVr=s(cte);Wto=r(jVr,"splinter"),jVr.forEach(t),Hto=r(W9," \u2014 "),hB=n(W9,"A",{href:!0});var DVr=s(hB);Uto=r(DVr,"SplinterTokenizer"),DVr.forEach(t),Jto=r(W9," or "),uB=n(W9,"A",{href:!0});var GVr=s(uB);Yto=r(GVr,"SplinterTokenizerFast"),GVr.forEach(t),Kto=r(W9," (Splinter model)"),W9.forEach(t),Zto=i(S),Cs=n(S,"LI",{});var H9=s(Cs);mte=n(H9,"STRONG",{});var OVr=s(mte);eao=r(OVr,"squeezebert"),OVr.forEach(t),oao=r(H9," \u2014 "),pB=n(H9,"A",{href:!0});var VVr=s(pB);rao=r(VVr,"SqueezeBertTokenizer"),VVr.forEach(t),tao=r(H9," or "),_B=n(H9,"A",{href:!0});var XVr=s(_B);aao=r(XVr,"SqueezeBertTokenizerFast"),XVr.forEach(t),nao=r(H9," (SqueezeBERT model)"),H9.forEach(t),sao=i(S),ws=n(S,"LI",{});var U9=s(ws);fte=n(U9,"STRONG",{});var zVr=s(fte);lao=r(zVr,"t5"),zVr.forEach(t),iao=r(U9," \u2014 "),bB=n(U9,"A",{href:!0});var QVr=s(bB);dao=r(QVr,"T5Tokenizer"),QVr.forEach(t),cao=r(U9," or "),FB=n(U9,"A",{href:!0});var WVr=s(FB);mao=r(WVr,"T5TokenizerFast"),WVr.forEach(t),fao=r(U9," (T5 model)"),U9.forEach(t),gao=i(S),jg=n(S,"LI",{});var Twe=s(jg);gte=n(Twe,"STRONG",{});var HVr=s(gte);hao=r(HVr,"tapas"),HVr.forEach(t),uao=r(Twe," \u2014 "),vB=n(Twe,"A",{href:!0});var UVr=s(vB);pao=r(UVr,"TapasTokenizer"),UVr.forEach(t),_ao=r(Twe," (TAPAS model)"),Twe.forEach(t),bao=i(S),Dg=n(S,"LI",{});var Mwe=s(Dg);hte=n(Mwe,"STRONG",{});var JVr=s(hte);Fao=r(JVr,"tapex"),JVr.forEach(t),vao=r(Mwe," \u2014 "),TB=n(Mwe,"A",{href:!0});var YVr=s(TB);Tao=r(YVr,"TapexTokenizer"),YVr.forEach(t),Mao=r(Mwe," (TAPEX model)"),Mwe.forEach(t),Eao=i(S),Gg=n(S,"LI",{});var Ewe=s(Gg);ute=n(Ewe,"STRONG",{});var KVr=s(ute);Cao=r(KVr,"transfo-xl"),KVr.forEach(t),wao=r(Ewe," \u2014 "),MB=n(Ewe,"A",{href:!0});var ZVr=s(MB);Aao=r(ZVr,"TransfoXLTokenizer"),ZVr.forEach(t),yao=r(Ewe," (Transformer-XL model)"),Ewe.forEach(t),Lao=i(S),As=n(S,"LI",{});var J9=s(As);pte=n(J9,"STRONG",{});var eXr=s(pte);xao=r(eXr,"visual_bert"),eXr.forEach(t),$ao=r(J9," \u2014 "),EB=n(J9,"A",{href:!0});var oXr=s(EB);kao=r(oXr,"BertTokenizer"),oXr.forEach(t),Sao=r(J9," or "),CB=n(J9,"A",{href:!0});var rXr=s(CB);Rao=r(rXr,"BertTokenizerFast"),rXr.forEach(t),Bao=r(J9," (VisualBert model)"),J9.forEach(t),Pao=i(S),Og=n(S,"LI",{});var Cwe=s(Og);_te=n(Cwe,"STRONG",{});var tXr=s(_te);Iao=r(tXr,"wav2vec2"),tXr.forEach(t),qao=r(Cwe," \u2014 "),wB=n(Cwe,"A",{href:!0});var aXr=s(wB);Nao=r(aXr,"Wav2Vec2CTCTokenizer"),aXr.forEach(t),jao=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),Dao=i(S),Vg=n(S,"LI",{});var wwe=s(Vg);bte=n(wwe,"STRONG",{});var nXr=s(bte);Gao=r(nXr,"wav2vec2_phoneme"),nXr.forEach(t),Oao=r(wwe," \u2014 "),AB=n(wwe,"A",{href:!0});var sXr=s(AB);Vao=r(sXr,"Wav2Vec2PhonemeCTCTokenizer"),sXr.forEach(t),Xao=r(wwe," (Wav2Vec2Phoneme model)"),wwe.forEach(t),zao=i(S),ys=n(S,"LI",{});var Y9=s(ys);Fte=n(Y9,"STRONG",{});var lXr=s(Fte);Qao=r(lXr,"xglm"),lXr.forEach(t),Wao=r(Y9," \u2014 "),yB=n(Y9,"A",{href:!0});var iXr=s(yB);Hao=r(iXr,"XGLMTokenizer"),iXr.forEach(t),Uao=r(Y9," or "),LB=n(Y9,"A",{href:!0});var dXr=s(LB);Jao=r(dXr,"XGLMTokenizerFast"),dXr.forEach(t),Yao=r(Y9," (XGLM model)"),Y9.forEach(t),Kao=i(S),Xg=n(S,"LI",{});var Awe=s(Xg);vte=n(Awe,"STRONG",{});var cXr=s(vte);Zao=r(cXr,"xlm"),cXr.forEach(t),eno=r(Awe," \u2014 "),xB=n(Awe,"A",{href:!0});var mXr=s(xB);ono=r(mXr,"XLMTokenizer"),mXr.forEach(t),rno=r(Awe," (XLM model)"),Awe.forEach(t),tno=i(S),zg=n(S,"LI",{});var ywe=s(zg);Tte=n(ywe,"STRONG",{});var fXr=s(Tte);ano=r(fXr,"xlm-prophetnet"),fXr.forEach(t),nno=r(ywe," \u2014 "),$B=n(ywe,"A",{href:!0});var gXr=s($B);sno=r(gXr,"XLMProphetNetTokenizer"),gXr.forEach(t),lno=r(ywe," (XLMProphetNet model)"),ywe.forEach(t),ino=i(S),Ls=n(S,"LI",{});var K9=s(Ls);Mte=n(K9,"STRONG",{});var hXr=s(Mte);dno=r(hXr,"xlm-roberta"),hXr.forEach(t),cno=r(K9," \u2014 "),kB=n(K9,"A",{href:!0});var uXr=s(kB);mno=r(uXr,"XLMRobertaTokenizer"),uXr.forEach(t),fno=r(K9," or "),SB=n(K9,"A",{href:!0});var pXr=s(SB);gno=r(pXr,"XLMRobertaTokenizerFast"),pXr.forEach(t),hno=r(K9," (XLM-RoBERTa model)"),K9.forEach(t),uno=i(S),xs=n(S,"LI",{});var Z9=s(xs);Ete=n(Z9,"STRONG",{});var _Xr=s(Ete);pno=r(_Xr,"xlm-roberta-xl"),_Xr.forEach(t),_no=r(Z9," \u2014 "),RB=n(Z9,"A",{href:!0});var bXr=s(RB);bno=r(bXr,"RobertaTokenizer"),bXr.forEach(t),Fno=r(Z9," or "),BB=n(Z9,"A",{href:!0});var FXr=s(BB);vno=r(FXr,"RobertaTokenizerFast"),FXr.forEach(t),Tno=r(Z9," (XLM-RoBERTa-XL model)"),Z9.forEach(t),Mno=i(S),$s=n(S,"LI",{});var e$=s($s);Cte=n(e$,"STRONG",{});var vXr=s(Cte);Eno=r(vXr,"xlnet"),vXr.forEach(t),Cno=r(e$," \u2014 "),PB=n(e$,"A",{href:!0});var TXr=s(PB);wno=r(TXr,"XLNetTokenizer"),TXr.forEach(t),Ano=r(e$," or "),IB=n(e$,"A",{href:!0});var MXr=s(IB);yno=r(MXr,"XLNetTokenizerFast"),MXr.forEach(t),Lno=r(e$," (XLNet model)"),e$.forEach(t),xno=i(S),ks=n(S,"LI",{});var o$=s(ks);wte=n(o$,"STRONG",{});var EXr=s(wte);$no=r(EXr,"yoso"),EXr.forEach(t),kno=r(o$," \u2014 "),qB=n(o$,"A",{href:!0});var CXr=s(qB);Sno=r(CXr,"AlbertTokenizer"),CXr.forEach(t),Rno=r(o$," or "),NB=n(o$,"A",{href:!0});var wXr=s(NB);Bno=r(wXr,"AlbertTokenizerFast"),wXr.forEach(t),Pno=r(o$," (YOSO model)"),o$.forEach(t),S.forEach(t),Ino=i(Is),T(Qg.$$.fragment,Is),Is.forEach(t),qno=i(Ps),Wg=n(Ps,"DIV",{class:!0});var uqe=s(Wg);T(oy.$$.fragment,uqe),Nno=i(uqe),Ate=n(uqe,"P",{});var AXr=s(Ate);jno=r(AXr,"Register a new tokenizer in this mapping."),AXr.forEach(t),uqe.forEach(t),Ps.forEach(t),pPe=i(m),bi=n(m,"H2",{class:!0});var pqe=s(bi);Hg=n(pqe,"A",{id:!0,class:!0,href:!0});var yXr=s(Hg);yte=n(yXr,"SPAN",{});var LXr=s(yte);T(ry.$$.fragment,LXr),LXr.forEach(t),yXr.forEach(t),Dno=i(pqe),Lte=n(pqe,"SPAN",{});var xXr=s(Lte);Gno=r(xXr,"AutoFeatureExtractor"),xXr.forEach(t),pqe.forEach(t),_Pe=i(m),Ao=n(m,"DIV",{class:!0});var qs=s(Ao);T(ty.$$.fragment,qs),Ono=i(qs),ay=n(qs,"P",{});var _qe=s(ay);Vno=r(_qe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=n(_qe,"A",{href:!0});var $Xr=s(jB);Xno=r($Xr,"AutoFeatureExtractor.from_pretrained()"),$Xr.forEach(t),zno=r(_qe," class method."),_qe.forEach(t),Qno=i(qs),ny=n(qs,"P",{});var bqe=s(ny);Wno=r(bqe,"This class cannot be instantiated directly using "),xte=n(bqe,"CODE",{});var kXr=s(xte);Hno=r(kXr,"__init__()"),kXr.forEach(t),Uno=r(bqe," (throws an error)."),bqe.forEach(t),Jno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(sy.$$.fragment,Yt),Yno=i(Yt),$te=n(Yt,"P",{});var SXr=s($te);Kno=r(SXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SXr.forEach(t),Zno=i(Yt),wa=n(Yt,"P",{});var XA=s(wa);eso=r(XA,"The feature extractor class to instantiate is selected based on the "),kte=n(XA,"CODE",{});var RXr=s(kte);oso=r(RXr,"model_type"),RXr.forEach(t),rso=r(XA,` property of the config object
(either passed as an argument or loaded from `),Ste=n(XA,"CODE",{});var BXr=s(Ste);tso=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),aso=r(XA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=n(XA,"CODE",{});var PXr=s(Rte);nso=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),sso=r(XA,":"),XA.forEach(t),lso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var Lwe=s(Ug);Bte=n(Lwe,"STRONG",{});var IXr=s(Bte);iso=r(IXr,"beit"),IXr.forEach(t),dso=r(Lwe," \u2014 "),DB=n(Lwe,"A",{href:!0});var qXr=s(DB);cso=r(qXr,"BeitFeatureExtractor"),qXr.forEach(t),mso=r(Lwe," (BEiT model)"),Lwe.forEach(t),fso=i(se),Jg=n(se,"LI",{});var xwe=s(Jg);Pte=n(xwe,"STRONG",{});var NXr=s(Pte);gso=r(NXr,"clip"),NXr.forEach(t),hso=r(xwe," \u2014 "),GB=n(xwe,"A",{href:!0});var jXr=s(GB);uso=r(jXr,"CLIPFeatureExtractor"),jXr.forEach(t),pso=r(xwe," (CLIP model)"),xwe.forEach(t),_so=i(se),Yg=n(se,"LI",{});var $we=s(Yg);Ite=n($we,"STRONG",{});var DXr=s(Ite);bso=r(DXr,"convnext"),DXr.forEach(t),Fso=r($we," \u2014 "),OB=n($we,"A",{href:!0});var GXr=s(OB);vso=r(GXr,"ConvNextFeatureExtractor"),GXr.forEach(t),Tso=r($we," (ConvNext model)"),$we.forEach(t),Mso=i(se),Kg=n(se,"LI",{});var kwe=s(Kg);qte=n(kwe,"STRONG",{});var OXr=s(qte);Eso=r(OXr,"data2vec-audio"),OXr.forEach(t),Cso=r(kwe," \u2014 "),VB=n(kwe,"A",{href:!0});var VXr=s(VB);wso=r(VXr,"Wav2Vec2FeatureExtractor"),VXr.forEach(t),Aso=r(kwe," (Data2VecAudio model)"),kwe.forEach(t),yso=i(se),Zg=n(se,"LI",{});var Swe=s(Zg);Nte=n(Swe,"STRONG",{});var XXr=s(Nte);Lso=r(XXr,"data2vec-vision"),XXr.forEach(t),xso=r(Swe," \u2014 "),XB=n(Swe,"A",{href:!0});var zXr=s(XB);$so=r(zXr,"BeitFeatureExtractor"),zXr.forEach(t),kso=r(Swe," (Data2VecVision model)"),Swe.forEach(t),Sso=i(se),eh=n(se,"LI",{});var Rwe=s(eh);jte=n(Rwe,"STRONG",{});var QXr=s(jte);Rso=r(QXr,"deit"),QXr.forEach(t),Bso=r(Rwe," \u2014 "),zB=n(Rwe,"A",{href:!0});var WXr=s(zB);Pso=r(WXr,"DeiTFeatureExtractor"),WXr.forEach(t),Iso=r(Rwe," (DeiT model)"),Rwe.forEach(t),qso=i(se),oh=n(se,"LI",{});var Bwe=s(oh);Dte=n(Bwe,"STRONG",{});var HXr=s(Dte);Nso=r(HXr,"detr"),HXr.forEach(t),jso=r(Bwe," \u2014 "),QB=n(Bwe,"A",{href:!0});var UXr=s(QB);Dso=r(UXr,"DetrFeatureExtractor"),UXr.forEach(t),Gso=r(Bwe," (DETR model)"),Bwe.forEach(t),Oso=i(se),rh=n(se,"LI",{});var Pwe=s(rh);Gte=n(Pwe,"STRONG",{});var JXr=s(Gte);Vso=r(JXr,"dpt"),JXr.forEach(t),Xso=r(Pwe," \u2014 "),WB=n(Pwe,"A",{href:!0});var YXr=s(WB);zso=r(YXr,"DPTFeatureExtractor"),YXr.forEach(t),Qso=r(Pwe," (DPT model)"),Pwe.forEach(t),Wso=i(se),th=n(se,"LI",{});var Iwe=s(th);Ote=n(Iwe,"STRONG",{});var KXr=s(Ote);Hso=r(KXr,"glpn"),KXr.forEach(t),Uso=r(Iwe," \u2014 "),HB=n(Iwe,"A",{href:!0});var ZXr=s(HB);Jso=r(ZXr,"GLPNFeatureExtractor"),ZXr.forEach(t),Yso=r(Iwe," (GLPN model)"),Iwe.forEach(t),Kso=i(se),ah=n(se,"LI",{});var qwe=s(ah);Vte=n(qwe,"STRONG",{});var ezr=s(Vte);Zso=r(ezr,"hubert"),ezr.forEach(t),elo=r(qwe," \u2014 "),UB=n(qwe,"A",{href:!0});var ozr=s(UB);olo=r(ozr,"Wav2Vec2FeatureExtractor"),ozr.forEach(t),rlo=r(qwe," (Hubert model)"),qwe.forEach(t),tlo=i(se),nh=n(se,"LI",{});var Nwe=s(nh);Xte=n(Nwe,"STRONG",{});var rzr=s(Xte);alo=r(rzr,"layoutlmv2"),rzr.forEach(t),nlo=r(Nwe," \u2014 "),JB=n(Nwe,"A",{href:!0});var tzr=s(JB);slo=r(tzr,"LayoutLMv2FeatureExtractor"),tzr.forEach(t),llo=r(Nwe," (LayoutLMv2 model)"),Nwe.forEach(t),ilo=i(se),sh=n(se,"LI",{});var jwe=s(sh);zte=n(jwe,"STRONG",{});var azr=s(zte);dlo=r(azr,"maskformer"),azr.forEach(t),clo=r(jwe," \u2014 "),YB=n(jwe,"A",{href:!0});var nzr=s(YB);mlo=r(nzr,"MaskFormerFeatureExtractor"),nzr.forEach(t),flo=r(jwe," (MaskFormer model)"),jwe.forEach(t),glo=i(se),lh=n(se,"LI",{});var Dwe=s(lh);Qte=n(Dwe,"STRONG",{});var szr=s(Qte);hlo=r(szr,"perceiver"),szr.forEach(t),ulo=r(Dwe," \u2014 "),KB=n(Dwe,"A",{href:!0});var lzr=s(KB);plo=r(lzr,"PerceiverFeatureExtractor"),lzr.forEach(t),_lo=r(Dwe," (Perceiver model)"),Dwe.forEach(t),blo=i(se),ih=n(se,"LI",{});var Gwe=s(ih);Wte=n(Gwe,"STRONG",{});var izr=s(Wte);Flo=r(izr,"poolformer"),izr.forEach(t),vlo=r(Gwe," \u2014 "),ZB=n(Gwe,"A",{href:!0});var dzr=s(ZB);Tlo=r(dzr,"PoolFormerFeatureExtractor"),dzr.forEach(t),Mlo=r(Gwe," (PoolFormer model)"),Gwe.forEach(t),Elo=i(se),dh=n(se,"LI",{});var Owe=s(dh);Hte=n(Owe,"STRONG",{});var czr=s(Hte);Clo=r(czr,"regnet"),czr.forEach(t),wlo=r(Owe," \u2014 "),eP=n(Owe,"A",{href:!0});var mzr=s(eP);Alo=r(mzr,"ConvNextFeatureExtractor"),mzr.forEach(t),ylo=r(Owe," (RegNet model)"),Owe.forEach(t),Llo=i(se),ch=n(se,"LI",{});var Vwe=s(ch);Ute=n(Vwe,"STRONG",{});var fzr=s(Ute);xlo=r(fzr,"resnet"),fzr.forEach(t),$lo=r(Vwe," \u2014 "),oP=n(Vwe,"A",{href:!0});var gzr=s(oP);klo=r(gzr,"ConvNextFeatureExtractor"),gzr.forEach(t),Slo=r(Vwe," (ResNet model)"),Vwe.forEach(t),Rlo=i(se),mh=n(se,"LI",{});var Xwe=s(mh);Jte=n(Xwe,"STRONG",{});var hzr=s(Jte);Blo=r(hzr,"segformer"),hzr.forEach(t),Plo=r(Xwe," \u2014 "),rP=n(Xwe,"A",{href:!0});var uzr=s(rP);Ilo=r(uzr,"SegformerFeatureExtractor"),uzr.forEach(t),qlo=r(Xwe," (SegFormer model)"),Xwe.forEach(t),Nlo=i(se),fh=n(se,"LI",{});var zwe=s(fh);Yte=n(zwe,"STRONG",{});var pzr=s(Yte);jlo=r(pzr,"speech_to_text"),pzr.forEach(t),Dlo=r(zwe," \u2014 "),tP=n(zwe,"A",{href:!0});var _zr=s(tP);Glo=r(_zr,"Speech2TextFeatureExtractor"),_zr.forEach(t),Olo=r(zwe," (Speech2Text model)"),zwe.forEach(t),Vlo=i(se),gh=n(se,"LI",{});var Qwe=s(gh);Kte=n(Qwe,"STRONG",{});var bzr=s(Kte);Xlo=r(bzr,"swin"),bzr.forEach(t),zlo=r(Qwe," \u2014 "),aP=n(Qwe,"A",{href:!0});var Fzr=s(aP);Qlo=r(Fzr,"ViTFeatureExtractor"),Fzr.forEach(t),Wlo=r(Qwe," (Swin model)"),Qwe.forEach(t),Hlo=i(se),hh=n(se,"LI",{});var Wwe=s(hh);Zte=n(Wwe,"STRONG",{});var vzr=s(Zte);Ulo=r(vzr,"van"),vzr.forEach(t),Jlo=r(Wwe," \u2014 "),nP=n(Wwe,"A",{href:!0});var Tzr=s(nP);Ylo=r(Tzr,"ConvNextFeatureExtractor"),Tzr.forEach(t),Klo=r(Wwe," (VAN model)"),Wwe.forEach(t),Zlo=i(se),uh=n(se,"LI",{});var Hwe=s(uh);eae=n(Hwe,"STRONG",{});var Mzr=s(eae);eio=r(Mzr,"vit"),Mzr.forEach(t),oio=r(Hwe," \u2014 "),sP=n(Hwe,"A",{href:!0});var Ezr=s(sP);rio=r(Ezr,"ViTFeatureExtractor"),Ezr.forEach(t),tio=r(Hwe," (ViT model)"),Hwe.forEach(t),aio=i(se),ph=n(se,"LI",{});var Uwe=s(ph);oae=n(Uwe,"STRONG",{});var Czr=s(oae);nio=r(Czr,"vit_mae"),Czr.forEach(t),sio=r(Uwe," \u2014 "),lP=n(Uwe,"A",{href:!0});var wzr=s(lP);lio=r(wzr,"ViTFeatureExtractor"),wzr.forEach(t),iio=r(Uwe," (ViTMAE model)"),Uwe.forEach(t),dio=i(se),_h=n(se,"LI",{});var Jwe=s(_h);rae=n(Jwe,"STRONG",{});var Azr=s(rae);cio=r(Azr,"wav2vec2"),Azr.forEach(t),mio=r(Jwe," \u2014 "),iP=n(Jwe,"A",{href:!0});var yzr=s(iP);fio=r(yzr,"Wav2Vec2FeatureExtractor"),yzr.forEach(t),gio=r(Jwe," (Wav2Vec2 model)"),Jwe.forEach(t),hio=i(se),bh=n(se,"LI",{});var Ywe=s(bh);tae=n(Ywe,"STRONG",{});var Lzr=s(tae);uio=r(Lzr,"yolos"),Lzr.forEach(t),pio=r(Ywe," \u2014 "),dP=n(Ywe,"A",{href:!0});var xzr=s(dP);_io=r(xzr,"YolosFeatureExtractor"),xzr.forEach(t),bio=r(Ywe," (YOLOS model)"),Ywe.forEach(t),se.forEach(t),Fio=i(Yt),T(Fh.$$.fragment,Yt),vio=i(Yt),T(vh.$$.fragment,Yt),Yt.forEach(t),Tio=i(qs),Th=n(qs,"DIV",{class:!0});var Fqe=s(Th);T(ly.$$.fragment,Fqe),Mio=i(Fqe),aae=n(Fqe,"P",{});var $zr=s(aae);Eio=r($zr,"Register a new feature extractor for this class."),$zr.forEach(t),Fqe.forEach(t),qs.forEach(t),bPe=i(m),Fi=n(m,"H2",{class:!0});var vqe=s(Fi);Mh=n(vqe,"A",{id:!0,class:!0,href:!0});var kzr=s(Mh);nae=n(kzr,"SPAN",{});var Szr=s(nae);T(iy.$$.fragment,Szr),Szr.forEach(t),kzr.forEach(t),Cio=i(vqe),sae=n(vqe,"SPAN",{});var Rzr=s(sae);wio=r(Rzr,"AutoProcessor"),Rzr.forEach(t),vqe.forEach(t),FPe=i(m),yo=n(m,"DIV",{class:!0});var Ns=s(yo);T(dy.$$.fragment,Ns),Aio=i(Ns),cy=n(Ns,"P",{});var Tqe=s(cy);yio=r(Tqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=n(Tqe,"A",{href:!0});var Bzr=s(cP);Lio=r(Bzr,"AutoProcessor.from_pretrained()"),Bzr.forEach(t),xio=r(Tqe," class method."),Tqe.forEach(t),$io=i(Ns),my=n(Ns,"P",{});var Mqe=s(my);kio=r(Mqe,"This class cannot be instantiated directly using "),lae=n(Mqe,"CODE",{});var Pzr=s(lae);Sio=r(Pzr,"__init__()"),Pzr.forEach(t),Rio=r(Mqe," (throws an error)."),Mqe.forEach(t),Bio=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(fy.$$.fragment,Kt),Pio=i(Kt),iae=n(Kt,"P",{});var Izr=s(iae);Iio=r(Izr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Izr.forEach(t),qio=i(Kt),vi=n(Kt,"P",{});var XY=s(vi);Nio=r(XY,"The processor class to instantiate is selected based on the "),dae=n(XY,"CODE",{});var qzr=s(dae);jio=r(qzr,"model_type"),qzr.forEach(t),Dio=r(XY,` property of the config object (either
passed as an argument or loaded from `),cae=n(XY,"CODE",{});var Nzr=s(cae);Gio=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Oio=r(XY," if possible):"),XY.forEach(t),Vio=i(Kt),be=n(Kt,"UL",{});var ve=s(be);Eh=n(ve,"LI",{});var Kwe=s(Eh);mae=n(Kwe,"STRONG",{});var jzr=s(mae);Xio=r(jzr,"clip"),jzr.forEach(t),zio=r(Kwe," \u2014 "),mP=n(Kwe,"A",{href:!0});var Dzr=s(mP);Qio=r(Dzr,"CLIPProcessor"),Dzr.forEach(t),Wio=r(Kwe," (CLIP model)"),Kwe.forEach(t),Hio=i(ve),Ch=n(ve,"LI",{});var Zwe=s(Ch);fae=n(Zwe,"STRONG",{});var Gzr=s(fae);Uio=r(Gzr,"layoutlmv2"),Gzr.forEach(t),Jio=r(Zwe," \u2014 "),fP=n(Zwe,"A",{href:!0});var Ozr=s(fP);Yio=r(Ozr,"LayoutLMv2Processor"),Ozr.forEach(t),Kio=r(Zwe," (LayoutLMv2 model)"),Zwe.forEach(t),Zio=i(ve),wh=n(ve,"LI",{});var eAe=s(wh);gae=n(eAe,"STRONG",{});var Vzr=s(gae);edo=r(Vzr,"layoutxlm"),Vzr.forEach(t),odo=r(eAe," \u2014 "),gP=n(eAe,"A",{href:!0});var Xzr=s(gP);rdo=r(Xzr,"LayoutXLMProcessor"),Xzr.forEach(t),tdo=r(eAe," (LayoutXLM model)"),eAe.forEach(t),ado=i(ve),Ah=n(ve,"LI",{});var oAe=s(Ah);hae=n(oAe,"STRONG",{});var zzr=s(hae);ndo=r(zzr,"sew"),zzr.forEach(t),sdo=r(oAe," \u2014 "),hP=n(oAe,"A",{href:!0});var Qzr=s(hP);ldo=r(Qzr,"Wav2Vec2Processor"),Qzr.forEach(t),ido=r(oAe," (SEW model)"),oAe.forEach(t),ddo=i(ve),yh=n(ve,"LI",{});var rAe=s(yh);uae=n(rAe,"STRONG",{});var Wzr=s(uae);cdo=r(Wzr,"sew-d"),Wzr.forEach(t),mdo=r(rAe," \u2014 "),uP=n(rAe,"A",{href:!0});var Hzr=s(uP);fdo=r(Hzr,"Wav2Vec2Processor"),Hzr.forEach(t),gdo=r(rAe," (SEW-D model)"),rAe.forEach(t),hdo=i(ve),Lh=n(ve,"LI",{});var tAe=s(Lh);pae=n(tAe,"STRONG",{});var Uzr=s(pae);udo=r(Uzr,"speech_to_text"),Uzr.forEach(t),pdo=r(tAe," \u2014 "),pP=n(tAe,"A",{href:!0});var Jzr=s(pP);_do=r(Jzr,"Speech2TextProcessor"),Jzr.forEach(t),bdo=r(tAe," (Speech2Text model)"),tAe.forEach(t),Fdo=i(ve),xh=n(ve,"LI",{});var aAe=s(xh);_ae=n(aAe,"STRONG",{});var Yzr=s(_ae);vdo=r(Yzr,"speech_to_text_2"),Yzr.forEach(t),Tdo=r(aAe," \u2014 "),_P=n(aAe,"A",{href:!0});var Kzr=s(_P);Mdo=r(Kzr,"Speech2Text2Processor"),Kzr.forEach(t),Edo=r(aAe," (Speech2Text2 model)"),aAe.forEach(t),Cdo=i(ve),$h=n(ve,"LI",{});var nAe=s($h);bae=n(nAe,"STRONG",{});var Zzr=s(bae);wdo=r(Zzr,"trocr"),Zzr.forEach(t),Ado=r(nAe," \u2014 "),bP=n(nAe,"A",{href:!0});var eQr=s(bP);ydo=r(eQr,"TrOCRProcessor"),eQr.forEach(t),Ldo=r(nAe," (TrOCR model)"),nAe.forEach(t),xdo=i(ve),kh=n(ve,"LI",{});var sAe=s(kh);Fae=n(sAe,"STRONG",{});var oQr=s(Fae);$do=r(oQr,"unispeech"),oQr.forEach(t),kdo=r(sAe," \u2014 "),FP=n(sAe,"A",{href:!0});var rQr=s(FP);Sdo=r(rQr,"Wav2Vec2Processor"),rQr.forEach(t),Rdo=r(sAe," (UniSpeech model)"),sAe.forEach(t),Bdo=i(ve),Sh=n(ve,"LI",{});var lAe=s(Sh);vae=n(lAe,"STRONG",{});var tQr=s(vae);Pdo=r(tQr,"unispeech-sat"),tQr.forEach(t),Ido=r(lAe," \u2014 "),vP=n(lAe,"A",{href:!0});var aQr=s(vP);qdo=r(aQr,"Wav2Vec2Processor"),aQr.forEach(t),Ndo=r(lAe," (UniSpeechSat model)"),lAe.forEach(t),jdo=i(ve),Rh=n(ve,"LI",{});var iAe=s(Rh);Tae=n(iAe,"STRONG",{});var nQr=s(Tae);Ddo=r(nQr,"vilt"),nQr.forEach(t),Gdo=r(iAe," \u2014 "),TP=n(iAe,"A",{href:!0});var sQr=s(TP);Odo=r(sQr,"ViltProcessor"),sQr.forEach(t),Vdo=r(iAe," (ViLT model)"),iAe.forEach(t),Xdo=i(ve),Bh=n(ve,"LI",{});var dAe=s(Bh);Mae=n(dAe,"STRONG",{});var lQr=s(Mae);zdo=r(lQr,"vision-text-dual-encoder"),lQr.forEach(t),Qdo=r(dAe," \u2014 "),MP=n(dAe,"A",{href:!0});var iQr=s(MP);Wdo=r(iQr,"VisionTextDualEncoderProcessor"),iQr.forEach(t),Hdo=r(dAe," (VisionTextDualEncoder model)"),dAe.forEach(t),Udo=i(ve),Ph=n(ve,"LI",{});var cAe=s(Ph);Eae=n(cAe,"STRONG",{});var dQr=s(Eae);Jdo=r(dQr,"wav2vec2"),dQr.forEach(t),Ydo=r(cAe," \u2014 "),EP=n(cAe,"A",{href:!0});var cQr=s(EP);Kdo=r(cQr,"Wav2Vec2Processor"),cQr.forEach(t),Zdo=r(cAe," (Wav2Vec2 model)"),cAe.forEach(t),eco=i(ve),Ih=n(ve,"LI",{});var mAe=s(Ih);Cae=n(mAe,"STRONG",{});var mQr=s(Cae);oco=r(mQr,"wavlm"),mQr.forEach(t),rco=r(mAe," \u2014 "),CP=n(mAe,"A",{href:!0});var fQr=s(CP);tco=r(fQr,"Wav2Vec2Processor"),fQr.forEach(t),aco=r(mAe," (WavLM model)"),mAe.forEach(t),ve.forEach(t),nco=i(Kt),T(qh.$$.fragment,Kt),sco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),lco=i(Ns),jh=n(Ns,"DIV",{class:!0});var Eqe=s(jh);T(gy.$$.fragment,Eqe),ico=i(Eqe),wae=n(Eqe,"P",{});var gQr=s(wae);dco=r(gQr,"Register a new processor for this class."),gQr.forEach(t),Eqe.forEach(t),Ns.forEach(t),vPe=i(m),Ti=n(m,"H2",{class:!0});var Cqe=s(Ti);Dh=n(Cqe,"A",{id:!0,class:!0,href:!0});var hQr=s(Dh);Aae=n(hQr,"SPAN",{});var uQr=s(Aae);T(hy.$$.fragment,uQr),uQr.forEach(t),hQr.forEach(t),cco=i(Cqe),yae=n(Cqe,"SPAN",{});var pQr=s(yae);mco=r(pQr,"AutoModel"),pQr.forEach(t),Cqe.forEach(t),TPe=i(m),Lo=n(m,"DIV",{class:!0});var js=s(Lo);T(uy.$$.fragment,js),fco=i(js),Mi=n(js,"P",{});var zY=s(Mi);gco=r(zY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=n(zY,"A",{href:!0});var _Qr=s(wP);hco=r(_Qr,"from_pretrained()"),_Qr.forEach(t),uco=r(zY," class method or the "),AP=n(zY,"A",{href:!0});var bQr=s(AP);pco=r(bQr,"from_config()"),bQr.forEach(t),_co=r(zY,` class
method.`),zY.forEach(t),bco=i(js),py=n(js,"P",{});var wqe=s(py);Fco=r(wqe,"This class cannot be instantiated directly using "),Lae=n(wqe,"CODE",{});var FQr=s(Lae);vco=r(FQr,"__init__()"),FQr.forEach(t),Tco=r(wqe," (throws an error)."),wqe.forEach(t),Mco=i(js),ot=n(js,"DIV",{class:!0});var zA=s(ot);T(_y.$$.fragment,zA),Eco=i(zA),xae=n(zA,"P",{});var vQr=s(xae);Cco=r(vQr,"Instantiates one of the base model classes of the library from a configuration."),vQr.forEach(t),wco=i(zA),Ei=n(zA,"P",{});var QY=s(Ei);Aco=r(QY,`Note:
Loading a model from its configuration file does `),$ae=n(QY,"STRONG",{});var TQr=s($ae);yco=r(TQr,"not"),TQr.forEach(t),Lco=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=n(QY,"A",{href:!0});var MQr=s(yP);xco=r(MQr,"from_pretrained()"),MQr.forEach(t),$co=r(QY," to load the model weights."),QY.forEach(t),kco=i(zA),T(Gh.$$.fragment,zA),zA.forEach(t),Sco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(by.$$.fragment,Zt),Rco=i(Zt),kae=n(Zt,"P",{});var EQr=s(kae);Bco=r(EQr,"Instantiate one of the base model classes of the library from a pretrained model."),EQr.forEach(t),Pco=i(Zt),Aa=n(Zt,"P",{});var QA=s(Aa);Ico=r(QA,"The model class to instantiate is selected based on the "),Sae=n(QA,"CODE",{});var CQr=s(Sae);qco=r(CQr,"model_type"),CQr.forEach(t),Nco=r(QA,` property of the config object (either
passed as an argument or loaded from `),Rae=n(QA,"CODE",{});var wQr=s(Rae);jco=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),Dco=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=n(QA,"CODE",{});var AQr=s(Bae);Gco=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),Oco=r(QA,":"),QA.forEach(t),Vco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var fAe=s(Oh);Pae=n(fAe,"STRONG",{});var yQr=s(Pae);Xco=r(yQr,"albert"),yQr.forEach(t),zco=r(fAe," \u2014 "),LP=n(fAe,"A",{href:!0});var LQr=s(LP);Qco=r(LQr,"AlbertModel"),LQr.forEach(t),Wco=r(fAe," (ALBERT model)"),fAe.forEach(t),Hco=i($),Vh=n($,"LI",{});var gAe=s(Vh);Iae=n(gAe,"STRONG",{});var xQr=s(Iae);Uco=r(xQr,"bart"),xQr.forEach(t),Jco=r(gAe," \u2014 "),xP=n(gAe,"A",{href:!0});var $Qr=s(xP);Yco=r($Qr,"BartModel"),$Qr.forEach(t),Kco=r(gAe," (BART model)"),gAe.forEach(t),Zco=i($),Xh=n($,"LI",{});var hAe=s(Xh);qae=n(hAe,"STRONG",{});var kQr=s(qae);emo=r(kQr,"beit"),kQr.forEach(t),omo=r(hAe," \u2014 "),$P=n(hAe,"A",{href:!0});var SQr=s($P);rmo=r(SQr,"BeitModel"),SQr.forEach(t),tmo=r(hAe," (BEiT model)"),hAe.forEach(t),amo=i($),zh=n($,"LI",{});var uAe=s(zh);Nae=n(uAe,"STRONG",{});var RQr=s(Nae);nmo=r(RQr,"bert"),RQr.forEach(t),smo=r(uAe," \u2014 "),kP=n(uAe,"A",{href:!0});var BQr=s(kP);lmo=r(BQr,"BertModel"),BQr.forEach(t),imo=r(uAe," (BERT model)"),uAe.forEach(t),dmo=i($),Qh=n($,"LI",{});var pAe=s(Qh);jae=n(pAe,"STRONG",{});var PQr=s(jae);cmo=r(PQr,"bert-generation"),PQr.forEach(t),mmo=r(pAe," \u2014 "),SP=n(pAe,"A",{href:!0});var IQr=s(SP);fmo=r(IQr,"BertGenerationEncoder"),IQr.forEach(t),gmo=r(pAe," (Bert Generation model)"),pAe.forEach(t),hmo=i($),Wh=n($,"LI",{});var _Ae=s(Wh);Dae=n(_Ae,"STRONG",{});var qQr=s(Dae);umo=r(qQr,"big_bird"),qQr.forEach(t),pmo=r(_Ae," \u2014 "),RP=n(_Ae,"A",{href:!0});var NQr=s(RP);_mo=r(NQr,"BigBirdModel"),NQr.forEach(t),bmo=r(_Ae," (BigBird model)"),_Ae.forEach(t),Fmo=i($),Hh=n($,"LI",{});var bAe=s(Hh);Gae=n(bAe,"STRONG",{});var jQr=s(Gae);vmo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),Tmo=r(bAe," \u2014 "),BP=n(bAe,"A",{href:!0});var DQr=s(BP);Mmo=r(DQr,"BigBirdPegasusModel"),DQr.forEach(t),Emo=r(bAe," (BigBirdPegasus model)"),bAe.forEach(t),Cmo=i($),Uh=n($,"LI",{});var FAe=s(Uh);Oae=n(FAe,"STRONG",{});var GQr=s(Oae);wmo=r(GQr,"blenderbot"),GQr.forEach(t),Amo=r(FAe," \u2014 "),PP=n(FAe,"A",{href:!0});var OQr=s(PP);ymo=r(OQr,"BlenderbotModel"),OQr.forEach(t),Lmo=r(FAe," (Blenderbot model)"),FAe.forEach(t),xmo=i($),Jh=n($,"LI",{});var vAe=s(Jh);Vae=n(vAe,"STRONG",{});var VQr=s(Vae);$mo=r(VQr,"blenderbot-small"),VQr.forEach(t),kmo=r(vAe," \u2014 "),IP=n(vAe,"A",{href:!0});var XQr=s(IP);Smo=r(XQr,"BlenderbotSmallModel"),XQr.forEach(t),Rmo=r(vAe," (BlenderbotSmall model)"),vAe.forEach(t),Bmo=i($),Yh=n($,"LI",{});var TAe=s(Yh);Xae=n(TAe,"STRONG",{});var zQr=s(Xae);Pmo=r(zQr,"camembert"),zQr.forEach(t),Imo=r(TAe," \u2014 "),qP=n(TAe,"A",{href:!0});var QQr=s(qP);qmo=r(QQr,"CamembertModel"),QQr.forEach(t),Nmo=r(TAe," (CamemBERT model)"),TAe.forEach(t),jmo=i($),Kh=n($,"LI",{});var MAe=s(Kh);zae=n(MAe,"STRONG",{});var WQr=s(zae);Dmo=r(WQr,"canine"),WQr.forEach(t),Gmo=r(MAe," \u2014 "),NP=n(MAe,"A",{href:!0});var HQr=s(NP);Omo=r(HQr,"CanineModel"),HQr.forEach(t),Vmo=r(MAe," (Canine model)"),MAe.forEach(t),Xmo=i($),Zh=n($,"LI",{});var EAe=s(Zh);Qae=n(EAe,"STRONG",{});var UQr=s(Qae);zmo=r(UQr,"clip"),UQr.forEach(t),Qmo=r(EAe," \u2014 "),jP=n(EAe,"A",{href:!0});var JQr=s(jP);Wmo=r(JQr,"CLIPModel"),JQr.forEach(t),Hmo=r(EAe," (CLIP model)"),EAe.forEach(t),Umo=i($),eu=n($,"LI",{});var CAe=s(eu);Wae=n(CAe,"STRONG",{});var YQr=s(Wae);Jmo=r(YQr,"convbert"),YQr.forEach(t),Ymo=r(CAe," \u2014 "),DP=n(CAe,"A",{href:!0});var KQr=s(DP);Kmo=r(KQr,"ConvBertModel"),KQr.forEach(t),Zmo=r(CAe," (ConvBERT model)"),CAe.forEach(t),efo=i($),ou=n($,"LI",{});var wAe=s(ou);Hae=n(wAe,"STRONG",{});var ZQr=s(Hae);ofo=r(ZQr,"convnext"),ZQr.forEach(t),rfo=r(wAe," \u2014 "),GP=n(wAe,"A",{href:!0});var eWr=s(GP);tfo=r(eWr,"ConvNextModel"),eWr.forEach(t),afo=r(wAe," (ConvNext model)"),wAe.forEach(t),nfo=i($),ru=n($,"LI",{});var AAe=s(ru);Uae=n(AAe,"STRONG",{});var oWr=s(Uae);sfo=r(oWr,"ctrl"),oWr.forEach(t),lfo=r(AAe," \u2014 "),OP=n(AAe,"A",{href:!0});var rWr=s(OP);ifo=r(rWr,"CTRLModel"),rWr.forEach(t),dfo=r(AAe," (CTRL model)"),AAe.forEach(t),cfo=i($),tu=n($,"LI",{});var yAe=s(tu);Jae=n(yAe,"STRONG",{});var tWr=s(Jae);mfo=r(tWr,"data2vec-audio"),tWr.forEach(t),ffo=r(yAe," \u2014 "),VP=n(yAe,"A",{href:!0});var aWr=s(VP);gfo=r(aWr,"Data2VecAudioModel"),aWr.forEach(t),hfo=r(yAe," (Data2VecAudio model)"),yAe.forEach(t),ufo=i($),au=n($,"LI",{});var LAe=s(au);Yae=n(LAe,"STRONG",{});var nWr=s(Yae);pfo=r(nWr,"data2vec-text"),nWr.forEach(t),_fo=r(LAe," \u2014 "),XP=n(LAe,"A",{href:!0});var sWr=s(XP);bfo=r(sWr,"Data2VecTextModel"),sWr.forEach(t),Ffo=r(LAe," (Data2VecText model)"),LAe.forEach(t),vfo=i($),nu=n($,"LI",{});var xAe=s(nu);Kae=n(xAe,"STRONG",{});var lWr=s(Kae);Tfo=r(lWr,"data2vec-vision"),lWr.forEach(t),Mfo=r(xAe," \u2014 "),zP=n(xAe,"A",{href:!0});var iWr=s(zP);Efo=r(iWr,"Data2VecVisionModel"),iWr.forEach(t),Cfo=r(xAe," (Data2VecVision model)"),xAe.forEach(t),wfo=i($),su=n($,"LI",{});var $Ae=s(su);Zae=n($Ae,"STRONG",{});var dWr=s(Zae);Afo=r(dWr,"deberta"),dWr.forEach(t),yfo=r($Ae," \u2014 "),QP=n($Ae,"A",{href:!0});var cWr=s(QP);Lfo=r(cWr,"DebertaModel"),cWr.forEach(t),xfo=r($Ae," (DeBERTa model)"),$Ae.forEach(t),$fo=i($),lu=n($,"LI",{});var kAe=s(lu);ene=n(kAe,"STRONG",{});var mWr=s(ene);kfo=r(mWr,"deberta-v2"),mWr.forEach(t),Sfo=r(kAe," \u2014 "),WP=n(kAe,"A",{href:!0});var fWr=s(WP);Rfo=r(fWr,"DebertaV2Model"),fWr.forEach(t),Bfo=r(kAe," (DeBERTa-v2 model)"),kAe.forEach(t),Pfo=i($),iu=n($,"LI",{});var SAe=s(iu);one=n(SAe,"STRONG",{});var gWr=s(one);Ifo=r(gWr,"decision_transformer"),gWr.forEach(t),qfo=r(SAe," \u2014 "),HP=n(SAe,"A",{href:!0});var hWr=s(HP);Nfo=r(hWr,"DecisionTransformerModel"),hWr.forEach(t),jfo=r(SAe," (Decision Transformer model)"),SAe.forEach(t),Dfo=i($),du=n($,"LI",{});var RAe=s(du);rne=n(RAe,"STRONG",{});var uWr=s(rne);Gfo=r(uWr,"deit"),uWr.forEach(t),Ofo=r(RAe," \u2014 "),UP=n(RAe,"A",{href:!0});var pWr=s(UP);Vfo=r(pWr,"DeiTModel"),pWr.forEach(t),Xfo=r(RAe," (DeiT model)"),RAe.forEach(t),zfo=i($),cu=n($,"LI",{});var BAe=s(cu);tne=n(BAe,"STRONG",{});var _Wr=s(tne);Qfo=r(_Wr,"detr"),_Wr.forEach(t),Wfo=r(BAe," \u2014 "),JP=n(BAe,"A",{href:!0});var bWr=s(JP);Hfo=r(bWr,"DetrModel"),bWr.forEach(t),Ufo=r(BAe," (DETR model)"),BAe.forEach(t),Jfo=i($),mu=n($,"LI",{});var PAe=s(mu);ane=n(PAe,"STRONG",{});var FWr=s(ane);Yfo=r(FWr,"distilbert"),FWr.forEach(t),Kfo=r(PAe," \u2014 "),YP=n(PAe,"A",{href:!0});var vWr=s(YP);Zfo=r(vWr,"DistilBertModel"),vWr.forEach(t),ego=r(PAe," (DistilBERT model)"),PAe.forEach(t),ogo=i($),fu=n($,"LI",{});var IAe=s(fu);nne=n(IAe,"STRONG",{});var TWr=s(nne);rgo=r(TWr,"dpr"),TWr.forEach(t),tgo=r(IAe," \u2014 "),KP=n(IAe,"A",{href:!0});var MWr=s(KP);ago=r(MWr,"DPRQuestionEncoder"),MWr.forEach(t),ngo=r(IAe," (DPR model)"),IAe.forEach(t),sgo=i($),gu=n($,"LI",{});var qAe=s(gu);sne=n(qAe,"STRONG",{});var EWr=s(sne);lgo=r(EWr,"dpt"),EWr.forEach(t),igo=r(qAe," \u2014 "),ZP=n(qAe,"A",{href:!0});var CWr=s(ZP);dgo=r(CWr,"DPTModel"),CWr.forEach(t),cgo=r(qAe," (DPT model)"),qAe.forEach(t),mgo=i($),hu=n($,"LI",{});var NAe=s(hu);lne=n(NAe,"STRONG",{});var wWr=s(lne);fgo=r(wWr,"electra"),wWr.forEach(t),ggo=r(NAe," \u2014 "),eI=n(NAe,"A",{href:!0});var AWr=s(eI);hgo=r(AWr,"ElectraModel"),AWr.forEach(t),ugo=r(NAe," (ELECTRA model)"),NAe.forEach(t),pgo=i($),uu=n($,"LI",{});var jAe=s(uu);ine=n(jAe,"STRONG",{});var yWr=s(ine);_go=r(yWr,"flaubert"),yWr.forEach(t),bgo=r(jAe," \u2014 "),oI=n(jAe,"A",{href:!0});var LWr=s(oI);Fgo=r(LWr,"FlaubertModel"),LWr.forEach(t),vgo=r(jAe," (FlauBERT model)"),jAe.forEach(t),Tgo=i($),pu=n($,"LI",{});var DAe=s(pu);dne=n(DAe,"STRONG",{});var xWr=s(dne);Mgo=r(xWr,"fnet"),xWr.forEach(t),Ego=r(DAe," \u2014 "),rI=n(DAe,"A",{href:!0});var $Wr=s(rI);Cgo=r($Wr,"FNetModel"),$Wr.forEach(t),wgo=r(DAe," (FNet model)"),DAe.forEach(t),Ago=i($),_u=n($,"LI",{});var GAe=s(_u);cne=n(GAe,"STRONG",{});var kWr=s(cne);ygo=r(kWr,"fsmt"),kWr.forEach(t),Lgo=r(GAe," \u2014 "),tI=n(GAe,"A",{href:!0});var SWr=s(tI);xgo=r(SWr,"FSMTModel"),SWr.forEach(t),$go=r(GAe," (FairSeq Machine-Translation model)"),GAe.forEach(t),kgo=i($),Ss=n($,"LI",{});var r$=s(Ss);mne=n(r$,"STRONG",{});var RWr=s(mne);Sgo=r(RWr,"funnel"),RWr.forEach(t),Rgo=r(r$," \u2014 "),aI=n(r$,"A",{href:!0});var BWr=s(aI);Bgo=r(BWr,"FunnelModel"),BWr.forEach(t),Pgo=r(r$," or "),nI=n(r$,"A",{href:!0});var PWr=s(nI);Igo=r(PWr,"FunnelBaseModel"),PWr.forEach(t),qgo=r(r$," (Funnel Transformer model)"),r$.forEach(t),Ngo=i($),bu=n($,"LI",{});var OAe=s(bu);fne=n(OAe,"STRONG",{});var IWr=s(fne);jgo=r(IWr,"glpn"),IWr.forEach(t),Dgo=r(OAe," \u2014 "),sI=n(OAe,"A",{href:!0});var qWr=s(sI);Ggo=r(qWr,"GLPNModel"),qWr.forEach(t),Ogo=r(OAe," (GLPN model)"),OAe.forEach(t),Vgo=i($),Fu=n($,"LI",{});var VAe=s(Fu);gne=n(VAe,"STRONG",{});var NWr=s(gne);Xgo=r(NWr,"gpt2"),NWr.forEach(t),zgo=r(VAe," \u2014 "),lI=n(VAe,"A",{href:!0});var jWr=s(lI);Qgo=r(jWr,"GPT2Model"),jWr.forEach(t),Wgo=r(VAe," (OpenAI GPT-2 model)"),VAe.forEach(t),Hgo=i($),vu=n($,"LI",{});var XAe=s(vu);hne=n(XAe,"STRONG",{});var DWr=s(hne);Ugo=r(DWr,"gpt_neo"),DWr.forEach(t),Jgo=r(XAe," \u2014 "),iI=n(XAe,"A",{href:!0});var GWr=s(iI);Ygo=r(GWr,"GPTNeoModel"),GWr.forEach(t),Kgo=r(XAe," (GPT Neo model)"),XAe.forEach(t),Zgo=i($),Tu=n($,"LI",{});var zAe=s(Tu);une=n(zAe,"STRONG",{});var OWr=s(une);eho=r(OWr,"gptj"),OWr.forEach(t),oho=r(zAe," \u2014 "),dI=n(zAe,"A",{href:!0});var VWr=s(dI);rho=r(VWr,"GPTJModel"),VWr.forEach(t),tho=r(zAe," (GPT-J model)"),zAe.forEach(t),aho=i($),Mu=n($,"LI",{});var QAe=s(Mu);pne=n(QAe,"STRONG",{});var XWr=s(pne);nho=r(XWr,"hubert"),XWr.forEach(t),sho=r(QAe," \u2014 "),cI=n(QAe,"A",{href:!0});var zWr=s(cI);lho=r(zWr,"HubertModel"),zWr.forEach(t),iho=r(QAe," (Hubert model)"),QAe.forEach(t),dho=i($),Eu=n($,"LI",{});var WAe=s(Eu);_ne=n(WAe,"STRONG",{});var QWr=s(_ne);cho=r(QWr,"ibert"),QWr.forEach(t),mho=r(WAe," \u2014 "),mI=n(WAe,"A",{href:!0});var WWr=s(mI);fho=r(WWr,"IBertModel"),WWr.forEach(t),gho=r(WAe," (I-BERT model)"),WAe.forEach(t),hho=i($),Cu=n($,"LI",{});var HAe=s(Cu);bne=n(HAe,"STRONG",{});var HWr=s(bne);uho=r(HWr,"imagegpt"),HWr.forEach(t),pho=r(HAe," \u2014 "),fI=n(HAe,"A",{href:!0});var UWr=s(fI);_ho=r(UWr,"ImageGPTModel"),UWr.forEach(t),bho=r(HAe," (ImageGPT model)"),HAe.forEach(t),Fho=i($),wu=n($,"LI",{});var UAe=s(wu);Fne=n(UAe,"STRONG",{});var JWr=s(Fne);vho=r(JWr,"layoutlm"),JWr.forEach(t),Tho=r(UAe," \u2014 "),gI=n(UAe,"A",{href:!0});var YWr=s(gI);Mho=r(YWr,"LayoutLMModel"),YWr.forEach(t),Eho=r(UAe," (LayoutLM model)"),UAe.forEach(t),Cho=i($),Au=n($,"LI",{});var JAe=s(Au);vne=n(JAe,"STRONG",{});var KWr=s(vne);who=r(KWr,"layoutlmv2"),KWr.forEach(t),Aho=r(JAe," \u2014 "),hI=n(JAe,"A",{href:!0});var ZWr=s(hI);yho=r(ZWr,"LayoutLMv2Model"),ZWr.forEach(t),Lho=r(JAe," (LayoutLMv2 model)"),JAe.forEach(t),xho=i($),yu=n($,"LI",{});var YAe=s(yu);Tne=n(YAe,"STRONG",{});var eHr=s(Tne);$ho=r(eHr,"led"),eHr.forEach(t),kho=r(YAe," \u2014 "),uI=n(YAe,"A",{href:!0});var oHr=s(uI);Sho=r(oHr,"LEDModel"),oHr.forEach(t),Rho=r(YAe," (LED model)"),YAe.forEach(t),Bho=i($),Lu=n($,"LI",{});var KAe=s(Lu);Mne=n(KAe,"STRONG",{});var rHr=s(Mne);Pho=r(rHr,"longformer"),rHr.forEach(t),Iho=r(KAe," \u2014 "),pI=n(KAe,"A",{href:!0});var tHr=s(pI);qho=r(tHr,"LongformerModel"),tHr.forEach(t),Nho=r(KAe," (Longformer model)"),KAe.forEach(t),jho=i($),xu=n($,"LI",{});var ZAe=s(xu);Ene=n(ZAe,"STRONG",{});var aHr=s(Ene);Dho=r(aHr,"luke"),aHr.forEach(t),Gho=r(ZAe," \u2014 "),_I=n(ZAe,"A",{href:!0});var nHr=s(_I);Oho=r(nHr,"LukeModel"),nHr.forEach(t),Vho=r(ZAe," (LUKE model)"),ZAe.forEach(t),Xho=i($),$u=n($,"LI",{});var e0e=s($u);Cne=n(e0e,"STRONG",{});var sHr=s(Cne);zho=r(sHr,"lxmert"),sHr.forEach(t),Qho=r(e0e," \u2014 "),bI=n(e0e,"A",{href:!0});var lHr=s(bI);Who=r(lHr,"LxmertModel"),lHr.forEach(t),Hho=r(e0e," (LXMERT model)"),e0e.forEach(t),Uho=i($),ku=n($,"LI",{});var o0e=s(ku);wne=n(o0e,"STRONG",{});var iHr=s(wne);Jho=r(iHr,"m2m_100"),iHr.forEach(t),Yho=r(o0e," \u2014 "),FI=n(o0e,"A",{href:!0});var dHr=s(FI);Kho=r(dHr,"M2M100Model"),dHr.forEach(t),Zho=r(o0e," (M2M100 model)"),o0e.forEach(t),euo=i($),Su=n($,"LI",{});var r0e=s(Su);Ane=n(r0e,"STRONG",{});var cHr=s(Ane);ouo=r(cHr,"marian"),cHr.forEach(t),ruo=r(r0e," \u2014 "),vI=n(r0e,"A",{href:!0});var mHr=s(vI);tuo=r(mHr,"MarianModel"),mHr.forEach(t),auo=r(r0e," (Marian model)"),r0e.forEach(t),nuo=i($),Ru=n($,"LI",{});var t0e=s(Ru);yne=n(t0e,"STRONG",{});var fHr=s(yne);suo=r(fHr,"maskformer"),fHr.forEach(t),luo=r(t0e," \u2014 "),TI=n(t0e,"A",{href:!0});var gHr=s(TI);iuo=r(gHr,"MaskFormerModel"),gHr.forEach(t),duo=r(t0e," (MaskFormer model)"),t0e.forEach(t),cuo=i($),Bu=n($,"LI",{});var a0e=s(Bu);Lne=n(a0e,"STRONG",{});var hHr=s(Lne);muo=r(hHr,"mbart"),hHr.forEach(t),fuo=r(a0e," \u2014 "),MI=n(a0e,"A",{href:!0});var uHr=s(MI);guo=r(uHr,"MBartModel"),uHr.forEach(t),huo=r(a0e," (mBART model)"),a0e.forEach(t),uuo=i($),Pu=n($,"LI",{});var n0e=s(Pu);xne=n(n0e,"STRONG",{});var pHr=s(xne);puo=r(pHr,"megatron-bert"),pHr.forEach(t),_uo=r(n0e," \u2014 "),EI=n(n0e,"A",{href:!0});var _Hr=s(EI);buo=r(_Hr,"MegatronBertModel"),_Hr.forEach(t),Fuo=r(n0e," (MegatronBert model)"),n0e.forEach(t),vuo=i($),Iu=n($,"LI",{});var s0e=s(Iu);$ne=n(s0e,"STRONG",{});var bHr=s($ne);Tuo=r(bHr,"mobilebert"),bHr.forEach(t),Muo=r(s0e," \u2014 "),CI=n(s0e,"A",{href:!0});var FHr=s(CI);Euo=r(FHr,"MobileBertModel"),FHr.forEach(t),Cuo=r(s0e," (MobileBERT model)"),s0e.forEach(t),wuo=i($),qu=n($,"LI",{});var l0e=s(qu);kne=n(l0e,"STRONG",{});var vHr=s(kne);Auo=r(vHr,"mpnet"),vHr.forEach(t),yuo=r(l0e," \u2014 "),wI=n(l0e,"A",{href:!0});var THr=s(wI);Luo=r(THr,"MPNetModel"),THr.forEach(t),xuo=r(l0e," (MPNet model)"),l0e.forEach(t),$uo=i($),Nu=n($,"LI",{});var i0e=s(Nu);Sne=n(i0e,"STRONG",{});var MHr=s(Sne);kuo=r(MHr,"mt5"),MHr.forEach(t),Suo=r(i0e," \u2014 "),AI=n(i0e,"A",{href:!0});var EHr=s(AI);Ruo=r(EHr,"MT5Model"),EHr.forEach(t),Buo=r(i0e," (mT5 model)"),i0e.forEach(t),Puo=i($),ju=n($,"LI",{});var d0e=s(ju);Rne=n(d0e,"STRONG",{});var CHr=s(Rne);Iuo=r(CHr,"nystromformer"),CHr.forEach(t),quo=r(d0e," \u2014 "),yI=n(d0e,"A",{href:!0});var wHr=s(yI);Nuo=r(wHr,"NystromformerModel"),wHr.forEach(t),juo=r(d0e," (Nystromformer model)"),d0e.forEach(t),Duo=i($),Du=n($,"LI",{});var c0e=s(Du);Bne=n(c0e,"STRONG",{});var AHr=s(Bne);Guo=r(AHr,"openai-gpt"),AHr.forEach(t),Ouo=r(c0e," \u2014 "),LI=n(c0e,"A",{href:!0});var yHr=s(LI);Vuo=r(yHr,"OpenAIGPTModel"),yHr.forEach(t),Xuo=r(c0e," (OpenAI GPT model)"),c0e.forEach(t),zuo=i($),Gu=n($,"LI",{});var m0e=s(Gu);Pne=n(m0e,"STRONG",{});var LHr=s(Pne);Quo=r(LHr,"pegasus"),LHr.forEach(t),Wuo=r(m0e," \u2014 "),xI=n(m0e,"A",{href:!0});var xHr=s(xI);Huo=r(xHr,"PegasusModel"),xHr.forEach(t),Uuo=r(m0e," (Pegasus model)"),m0e.forEach(t),Juo=i($),Ou=n($,"LI",{});var f0e=s(Ou);Ine=n(f0e,"STRONG",{});var $Hr=s(Ine);Yuo=r($Hr,"perceiver"),$Hr.forEach(t),Kuo=r(f0e," \u2014 "),$I=n(f0e,"A",{href:!0});var kHr=s($I);Zuo=r(kHr,"PerceiverModel"),kHr.forEach(t),epo=r(f0e," (Perceiver model)"),f0e.forEach(t),opo=i($),Vu=n($,"LI",{});var g0e=s(Vu);qne=n(g0e,"STRONG",{});var SHr=s(qne);rpo=r(SHr,"plbart"),SHr.forEach(t),tpo=r(g0e," \u2014 "),kI=n(g0e,"A",{href:!0});var RHr=s(kI);apo=r(RHr,"PLBartModel"),RHr.forEach(t),npo=r(g0e," (PLBart model)"),g0e.forEach(t),spo=i($),Xu=n($,"LI",{});var h0e=s(Xu);Nne=n(h0e,"STRONG",{});var BHr=s(Nne);lpo=r(BHr,"poolformer"),BHr.forEach(t),ipo=r(h0e," \u2014 "),SI=n(h0e,"A",{href:!0});var PHr=s(SI);dpo=r(PHr,"PoolFormerModel"),PHr.forEach(t),cpo=r(h0e," (PoolFormer model)"),h0e.forEach(t),mpo=i($),zu=n($,"LI",{});var u0e=s(zu);jne=n(u0e,"STRONG",{});var IHr=s(jne);fpo=r(IHr,"prophetnet"),IHr.forEach(t),gpo=r(u0e," \u2014 "),RI=n(u0e,"A",{href:!0});var qHr=s(RI);hpo=r(qHr,"ProphetNetModel"),qHr.forEach(t),upo=r(u0e," (ProphetNet model)"),u0e.forEach(t),ppo=i($),Qu=n($,"LI",{});var p0e=s(Qu);Dne=n(p0e,"STRONG",{});var NHr=s(Dne);_po=r(NHr,"qdqbert"),NHr.forEach(t),bpo=r(p0e," \u2014 "),BI=n(p0e,"A",{href:!0});var jHr=s(BI);Fpo=r(jHr,"QDQBertModel"),jHr.forEach(t),vpo=r(p0e," (QDQBert model)"),p0e.forEach(t),Tpo=i($),Wu=n($,"LI",{});var _0e=s(Wu);Gne=n(_0e,"STRONG",{});var DHr=s(Gne);Mpo=r(DHr,"reformer"),DHr.forEach(t),Epo=r(_0e," \u2014 "),PI=n(_0e,"A",{href:!0});var GHr=s(PI);Cpo=r(GHr,"ReformerModel"),GHr.forEach(t),wpo=r(_0e," (Reformer model)"),_0e.forEach(t),Apo=i($),Hu=n($,"LI",{});var b0e=s(Hu);One=n(b0e,"STRONG",{});var OHr=s(One);ypo=r(OHr,"regnet"),OHr.forEach(t),Lpo=r(b0e," \u2014 "),II=n(b0e,"A",{href:!0});var VHr=s(II);xpo=r(VHr,"RegNetModel"),VHr.forEach(t),$po=r(b0e," (RegNet model)"),b0e.forEach(t),kpo=i($),Uu=n($,"LI",{});var F0e=s(Uu);Vne=n(F0e,"STRONG",{});var XHr=s(Vne);Spo=r(XHr,"rembert"),XHr.forEach(t),Rpo=r(F0e," \u2014 "),qI=n(F0e,"A",{href:!0});var zHr=s(qI);Bpo=r(zHr,"RemBertModel"),zHr.forEach(t),Ppo=r(F0e," (RemBERT model)"),F0e.forEach(t),Ipo=i($),Ju=n($,"LI",{});var v0e=s(Ju);Xne=n(v0e,"STRONG",{});var QHr=s(Xne);qpo=r(QHr,"resnet"),QHr.forEach(t),Npo=r(v0e," \u2014 "),NI=n(v0e,"A",{href:!0});var WHr=s(NI);jpo=r(WHr,"ResNetModel"),WHr.forEach(t),Dpo=r(v0e," (ResNet model)"),v0e.forEach(t),Gpo=i($),Yu=n($,"LI",{});var T0e=s(Yu);zne=n(T0e,"STRONG",{});var HHr=s(zne);Opo=r(HHr,"retribert"),HHr.forEach(t),Vpo=r(T0e," \u2014 "),jI=n(T0e,"A",{href:!0});var UHr=s(jI);Xpo=r(UHr,"RetriBertModel"),UHr.forEach(t),zpo=r(T0e," (RetriBERT model)"),T0e.forEach(t),Qpo=i($),Ku=n($,"LI",{});var M0e=s(Ku);Qne=n(M0e,"STRONG",{});var JHr=s(Qne);Wpo=r(JHr,"roberta"),JHr.forEach(t),Hpo=r(M0e," \u2014 "),DI=n(M0e,"A",{href:!0});var YHr=s(DI);Upo=r(YHr,"RobertaModel"),YHr.forEach(t),Jpo=r(M0e," (RoBERTa model)"),M0e.forEach(t),Ypo=i($),Zu=n($,"LI",{});var E0e=s(Zu);Wne=n(E0e,"STRONG",{});var KHr=s(Wne);Kpo=r(KHr,"roformer"),KHr.forEach(t),Zpo=r(E0e," \u2014 "),GI=n(E0e,"A",{href:!0});var ZHr=s(GI);e_o=r(ZHr,"RoFormerModel"),ZHr.forEach(t),o_o=r(E0e," (RoFormer model)"),E0e.forEach(t),r_o=i($),ep=n($,"LI",{});var C0e=s(ep);Hne=n(C0e,"STRONG",{});var eUr=s(Hne);t_o=r(eUr,"segformer"),eUr.forEach(t),a_o=r(C0e," \u2014 "),OI=n(C0e,"A",{href:!0});var oUr=s(OI);n_o=r(oUr,"SegformerModel"),oUr.forEach(t),s_o=r(C0e," (SegFormer model)"),C0e.forEach(t),l_o=i($),op=n($,"LI",{});var w0e=s(op);Une=n(w0e,"STRONG",{});var rUr=s(Une);i_o=r(rUr,"sew"),rUr.forEach(t),d_o=r(w0e," \u2014 "),VI=n(w0e,"A",{href:!0});var tUr=s(VI);c_o=r(tUr,"SEWModel"),tUr.forEach(t),m_o=r(w0e," (SEW model)"),w0e.forEach(t),f_o=i($),rp=n($,"LI",{});var A0e=s(rp);Jne=n(A0e,"STRONG",{});var aUr=s(Jne);g_o=r(aUr,"sew-d"),aUr.forEach(t),h_o=r(A0e," \u2014 "),XI=n(A0e,"A",{href:!0});var nUr=s(XI);u_o=r(nUr,"SEWDModel"),nUr.forEach(t),p_o=r(A0e," (SEW-D model)"),A0e.forEach(t),__o=i($),tp=n($,"LI",{});var y0e=s(tp);Yne=n(y0e,"STRONG",{});var sUr=s(Yne);b_o=r(sUr,"speech_to_text"),sUr.forEach(t),F_o=r(y0e," \u2014 "),zI=n(y0e,"A",{href:!0});var lUr=s(zI);v_o=r(lUr,"Speech2TextModel"),lUr.forEach(t),T_o=r(y0e," (Speech2Text model)"),y0e.forEach(t),M_o=i($),ap=n($,"LI",{});var L0e=s(ap);Kne=n(L0e,"STRONG",{});var iUr=s(Kne);E_o=r(iUr,"splinter"),iUr.forEach(t),C_o=r(L0e," \u2014 "),QI=n(L0e,"A",{href:!0});var dUr=s(QI);w_o=r(dUr,"SplinterModel"),dUr.forEach(t),A_o=r(L0e," (Splinter model)"),L0e.forEach(t),y_o=i($),np=n($,"LI",{});var x0e=s(np);Zne=n(x0e,"STRONG",{});var cUr=s(Zne);L_o=r(cUr,"squeezebert"),cUr.forEach(t),x_o=r(x0e," \u2014 "),WI=n(x0e,"A",{href:!0});var mUr=s(WI);$_o=r(mUr,"SqueezeBertModel"),mUr.forEach(t),k_o=r(x0e," (SqueezeBERT model)"),x0e.forEach(t),S_o=i($),sp=n($,"LI",{});var $0e=s(sp);ese=n($0e,"STRONG",{});var fUr=s(ese);R_o=r(fUr,"swin"),fUr.forEach(t),B_o=r($0e," \u2014 "),HI=n($0e,"A",{href:!0});var gUr=s(HI);P_o=r(gUr,"SwinModel"),gUr.forEach(t),I_o=r($0e," (Swin model)"),$0e.forEach(t),q_o=i($),lp=n($,"LI",{});var k0e=s(lp);ose=n(k0e,"STRONG",{});var hUr=s(ose);N_o=r(hUr,"t5"),hUr.forEach(t),j_o=r(k0e," \u2014 "),UI=n(k0e,"A",{href:!0});var uUr=s(UI);D_o=r(uUr,"T5Model"),uUr.forEach(t),G_o=r(k0e," (T5 model)"),k0e.forEach(t),O_o=i($),ip=n($,"LI",{});var S0e=s(ip);rse=n(S0e,"STRONG",{});var pUr=s(rse);V_o=r(pUr,"tapas"),pUr.forEach(t),X_o=r(S0e," \u2014 "),JI=n(S0e,"A",{href:!0});var _Ur=s(JI);z_o=r(_Ur,"TapasModel"),_Ur.forEach(t),Q_o=r(S0e," (TAPAS model)"),S0e.forEach(t),W_o=i($),dp=n($,"LI",{});var R0e=s(dp);tse=n(R0e,"STRONG",{});var bUr=s(tse);H_o=r(bUr,"transfo-xl"),bUr.forEach(t),U_o=r(R0e," \u2014 "),YI=n(R0e,"A",{href:!0});var FUr=s(YI);J_o=r(FUr,"TransfoXLModel"),FUr.forEach(t),Y_o=r(R0e," (Transformer-XL model)"),R0e.forEach(t),K_o=i($),cp=n($,"LI",{});var B0e=s(cp);ase=n(B0e,"STRONG",{});var vUr=s(ase);Z_o=r(vUr,"unispeech"),vUr.forEach(t),ebo=r(B0e," \u2014 "),KI=n(B0e,"A",{href:!0});var TUr=s(KI);obo=r(TUr,"UniSpeechModel"),TUr.forEach(t),rbo=r(B0e," (UniSpeech model)"),B0e.forEach(t),tbo=i($),mp=n($,"LI",{});var P0e=s(mp);nse=n(P0e,"STRONG",{});var MUr=s(nse);abo=r(MUr,"unispeech-sat"),MUr.forEach(t),nbo=r(P0e," \u2014 "),ZI=n(P0e,"A",{href:!0});var EUr=s(ZI);sbo=r(EUr,"UniSpeechSatModel"),EUr.forEach(t),lbo=r(P0e," (UniSpeechSat model)"),P0e.forEach(t),ibo=i($),fp=n($,"LI",{});var I0e=s(fp);sse=n(I0e,"STRONG",{});var CUr=s(sse);dbo=r(CUr,"van"),CUr.forEach(t),cbo=r(I0e," \u2014 "),eq=n(I0e,"A",{href:!0});var wUr=s(eq);mbo=r(wUr,"VanModel"),wUr.forEach(t),fbo=r(I0e," (VAN model)"),I0e.forEach(t),gbo=i($),gp=n($,"LI",{});var q0e=s(gp);lse=n(q0e,"STRONG",{});var AUr=s(lse);hbo=r(AUr,"vilt"),AUr.forEach(t),ubo=r(q0e," \u2014 "),oq=n(q0e,"A",{href:!0});var yUr=s(oq);pbo=r(yUr,"ViltModel"),yUr.forEach(t),_bo=r(q0e," (ViLT model)"),q0e.forEach(t),bbo=i($),hp=n($,"LI",{});var N0e=s(hp);ise=n(N0e,"STRONG",{});var LUr=s(ise);Fbo=r(LUr,"vision-text-dual-encoder"),LUr.forEach(t),vbo=r(N0e," \u2014 "),rq=n(N0e,"A",{href:!0});var xUr=s(rq);Tbo=r(xUr,"VisionTextDualEncoderModel"),xUr.forEach(t),Mbo=r(N0e," (VisionTextDualEncoder model)"),N0e.forEach(t),Ebo=i($),up=n($,"LI",{});var j0e=s(up);dse=n(j0e,"STRONG",{});var $Ur=s(dse);Cbo=r($Ur,"visual_bert"),$Ur.forEach(t),wbo=r(j0e," \u2014 "),tq=n(j0e,"A",{href:!0});var kUr=s(tq);Abo=r(kUr,"VisualBertModel"),kUr.forEach(t),ybo=r(j0e," (VisualBert model)"),j0e.forEach(t),Lbo=i($),pp=n($,"LI",{});var D0e=s(pp);cse=n(D0e,"STRONG",{});var SUr=s(cse);xbo=r(SUr,"vit"),SUr.forEach(t),$bo=r(D0e," \u2014 "),aq=n(D0e,"A",{href:!0});var RUr=s(aq);kbo=r(RUr,"ViTModel"),RUr.forEach(t),Sbo=r(D0e," (ViT model)"),D0e.forEach(t),Rbo=i($),_p=n($,"LI",{});var G0e=s(_p);mse=n(G0e,"STRONG",{});var BUr=s(mse);Bbo=r(BUr,"vit_mae"),BUr.forEach(t),Pbo=r(G0e," \u2014 "),nq=n(G0e,"A",{href:!0});var PUr=s(nq);Ibo=r(PUr,"ViTMAEModel"),PUr.forEach(t),qbo=r(G0e," (ViTMAE model)"),G0e.forEach(t),Nbo=i($),bp=n($,"LI",{});var O0e=s(bp);fse=n(O0e,"STRONG",{});var IUr=s(fse);jbo=r(IUr,"wav2vec2"),IUr.forEach(t),Dbo=r(O0e," \u2014 "),sq=n(O0e,"A",{href:!0});var qUr=s(sq);Gbo=r(qUr,"Wav2Vec2Model"),qUr.forEach(t),Obo=r(O0e," (Wav2Vec2 model)"),O0e.forEach(t),Vbo=i($),Fp=n($,"LI",{});var V0e=s(Fp);gse=n(V0e,"STRONG",{});var NUr=s(gse);Xbo=r(NUr,"wavlm"),NUr.forEach(t),zbo=r(V0e," \u2014 "),lq=n(V0e,"A",{href:!0});var jUr=s(lq);Qbo=r(jUr,"WavLMModel"),jUr.forEach(t),Wbo=r(V0e," (WavLM model)"),V0e.forEach(t),Hbo=i($),vp=n($,"LI",{});var X0e=s(vp);hse=n(X0e,"STRONG",{});var DUr=s(hse);Ubo=r(DUr,"xglm"),DUr.forEach(t),Jbo=r(X0e," \u2014 "),iq=n(X0e,"A",{href:!0});var GUr=s(iq);Ybo=r(GUr,"XGLMModel"),GUr.forEach(t),Kbo=r(X0e," (XGLM model)"),X0e.forEach(t),Zbo=i($),Tp=n($,"LI",{});var z0e=s(Tp);use=n(z0e,"STRONG",{});var OUr=s(use);e2o=r(OUr,"xlm"),OUr.forEach(t),o2o=r(z0e," \u2014 "),dq=n(z0e,"A",{href:!0});var VUr=s(dq);r2o=r(VUr,"XLMModel"),VUr.forEach(t),t2o=r(z0e," (XLM model)"),z0e.forEach(t),a2o=i($),Mp=n($,"LI",{});var Q0e=s(Mp);pse=n(Q0e,"STRONG",{});var XUr=s(pse);n2o=r(XUr,"xlm-prophetnet"),XUr.forEach(t),s2o=r(Q0e," \u2014 "),cq=n(Q0e,"A",{href:!0});var zUr=s(cq);l2o=r(zUr,"XLMProphetNetModel"),zUr.forEach(t),i2o=r(Q0e," (XLMProphetNet model)"),Q0e.forEach(t),d2o=i($),Ep=n($,"LI",{});var W0e=s(Ep);_se=n(W0e,"STRONG",{});var QUr=s(_se);c2o=r(QUr,"xlm-roberta"),QUr.forEach(t),m2o=r(W0e," \u2014 "),mq=n(W0e,"A",{href:!0});var WUr=s(mq);f2o=r(WUr,"XLMRobertaModel"),WUr.forEach(t),g2o=r(W0e," (XLM-RoBERTa model)"),W0e.forEach(t),h2o=i($),Cp=n($,"LI",{});var H0e=s(Cp);bse=n(H0e,"STRONG",{});var HUr=s(bse);u2o=r(HUr,"xlm-roberta-xl"),HUr.forEach(t),p2o=r(H0e," \u2014 "),fq=n(H0e,"A",{href:!0});var UUr=s(fq);_2o=r(UUr,"XLMRobertaXLModel"),UUr.forEach(t),b2o=r(H0e," (XLM-RoBERTa-XL model)"),H0e.forEach(t),F2o=i($),wp=n($,"LI",{});var U0e=s(wp);Fse=n(U0e,"STRONG",{});var JUr=s(Fse);v2o=r(JUr,"xlnet"),JUr.forEach(t),T2o=r(U0e," \u2014 "),gq=n(U0e,"A",{href:!0});var YUr=s(gq);M2o=r(YUr,"XLNetModel"),YUr.forEach(t),E2o=r(U0e," (XLNet model)"),U0e.forEach(t),C2o=i($),Ap=n($,"LI",{});var J0e=s(Ap);vse=n(J0e,"STRONG",{});var KUr=s(vse);w2o=r(KUr,"yolos"),KUr.forEach(t),A2o=r(J0e," \u2014 "),hq=n(J0e,"A",{href:!0});var ZUr=s(hq);y2o=r(ZUr,"YolosModel"),ZUr.forEach(t),L2o=r(J0e," (YOLOS model)"),J0e.forEach(t),x2o=i($),yp=n($,"LI",{});var Y0e=s(yp);Tse=n(Y0e,"STRONG",{});var eJr=s(Tse);$2o=r(eJr,"yoso"),eJr.forEach(t),k2o=r(Y0e," \u2014 "),uq=n(Y0e,"A",{href:!0});var oJr=s(uq);S2o=r(oJr,"YosoModel"),oJr.forEach(t),R2o=r(Y0e," (YOSO model)"),Y0e.forEach(t),$.forEach(t),B2o=i(Zt),Lp=n(Zt,"P",{});var K0e=s(Lp);P2o=r(K0e,"The model is set in evaluation mode by default using "),Mse=n(K0e,"CODE",{});var rJr=s(Mse);I2o=r(rJr,"model.eval()"),rJr.forEach(t),q2o=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(K0e,"CODE",{});var tJr=s(Ese);N2o=r(tJr,"model.train()"),tJr.forEach(t),K0e.forEach(t),j2o=i(Zt),T(xp.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),MPe=i(m),Ci=n(m,"H2",{class:!0});var Aqe=s(Ci);$p=n(Aqe,"A",{id:!0,class:!0,href:!0});var aJr=s($p);Cse=n(aJr,"SPAN",{});var nJr=s(Cse);T(Fy.$$.fragment,nJr),nJr.forEach(t),aJr.forEach(t),D2o=i(Aqe),wse=n(Aqe,"SPAN",{});var sJr=s(wse);G2o=r(sJr,"AutoModelForPreTraining"),sJr.forEach(t),Aqe.forEach(t),EPe=i(m),xo=n(m,"DIV",{class:!0});var Ds=s(xo);T(vy.$$.fragment,Ds),O2o=i(Ds),wi=n(Ds,"P",{});var WY=s(wi);V2o=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pq=n(WY,"A",{href:!0});var lJr=s(pq);X2o=r(lJr,"from_pretrained()"),lJr.forEach(t),z2o=r(WY," class method or the "),_q=n(WY,"A",{href:!0});var iJr=s(_q);Q2o=r(iJr,"from_config()"),iJr.forEach(t),W2o=r(WY,` class
method.`),WY.forEach(t),H2o=i(Ds),Ty=n(Ds,"P",{});var yqe=s(Ty);U2o=r(yqe,"This class cannot be instantiated directly using "),Ase=n(yqe,"CODE",{});var dJr=s(Ase);J2o=r(dJr,"__init__()"),dJr.forEach(t),Y2o=r(yqe," (throws an error)."),yqe.forEach(t),K2o=i(Ds),rt=n(Ds,"DIV",{class:!0});var WA=s(rt);T(My.$$.fragment,WA),Z2o=i(WA),yse=n(WA,"P",{});var cJr=s(yse);eFo=r(cJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cJr.forEach(t),oFo=i(WA),Ai=n(WA,"P",{});var HY=s(Ai);rFo=r(HY,`Note:
Loading a model from its configuration file does `),Lse=n(HY,"STRONG",{});var mJr=s(Lse);tFo=r(mJr,"not"),mJr.forEach(t),aFo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=n(HY,"A",{href:!0});var fJr=s(bq);nFo=r(fJr,"from_pretrained()"),fJr.forEach(t),sFo=r(HY," to load the model weights."),HY.forEach(t),lFo=i(WA),T(kp.$$.fragment,WA),WA.forEach(t),iFo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Ey.$$.fragment,ea),dFo=i(ea),xse=n(ea,"P",{});var gJr=s(xse);cFo=r(gJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gJr.forEach(t),mFo=i(ea),ya=n(ea,"P",{});var HA=s(ya);fFo=r(HA,"The model class to instantiate is selected based on the "),$se=n(HA,"CODE",{});var hJr=s($se);gFo=r(hJr,"model_type"),hJr.forEach(t),hFo=r(HA,` property of the config object (either
passed as an argument or loaded from `),kse=n(HA,"CODE",{});var uJr=s(kse);uFo=r(uJr,"pretrained_model_name_or_path"),uJr.forEach(t),pFo=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(HA,"CODE",{});var pJr=s(Sse);_Fo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),bFo=r(HA,":"),HA.forEach(t),FFo=i(ea),G=n(ea,"UL",{});var V=s(G);Sp=n(V,"LI",{});var Z0e=s(Sp);Rse=n(Z0e,"STRONG",{});var _Jr=s(Rse);vFo=r(_Jr,"albert"),_Jr.forEach(t),TFo=r(Z0e," \u2014 "),Fq=n(Z0e,"A",{href:!0});var bJr=s(Fq);MFo=r(bJr,"AlbertForPreTraining"),bJr.forEach(t),EFo=r(Z0e," (ALBERT model)"),Z0e.forEach(t),CFo=i(V),Rp=n(V,"LI",{});var e6e=s(Rp);Bse=n(e6e,"STRONG",{});var FJr=s(Bse);wFo=r(FJr,"bart"),FJr.forEach(t),AFo=r(e6e," \u2014 "),vq=n(e6e,"A",{href:!0});var vJr=s(vq);yFo=r(vJr,"BartForConditionalGeneration"),vJr.forEach(t),LFo=r(e6e," (BART model)"),e6e.forEach(t),xFo=i(V),Bp=n(V,"LI",{});var o6e=s(Bp);Pse=n(o6e,"STRONG",{});var TJr=s(Pse);$Fo=r(TJr,"bert"),TJr.forEach(t),kFo=r(o6e," \u2014 "),Tq=n(o6e,"A",{href:!0});var MJr=s(Tq);SFo=r(MJr,"BertForPreTraining"),MJr.forEach(t),RFo=r(o6e," (BERT model)"),o6e.forEach(t),BFo=i(V),Pp=n(V,"LI",{});var r6e=s(Pp);Ise=n(r6e,"STRONG",{});var EJr=s(Ise);PFo=r(EJr,"big_bird"),EJr.forEach(t),IFo=r(r6e," \u2014 "),Mq=n(r6e,"A",{href:!0});var CJr=s(Mq);qFo=r(CJr,"BigBirdForPreTraining"),CJr.forEach(t),NFo=r(r6e," (BigBird model)"),r6e.forEach(t),jFo=i(V),Ip=n(V,"LI",{});var t6e=s(Ip);qse=n(t6e,"STRONG",{});var wJr=s(qse);DFo=r(wJr,"camembert"),wJr.forEach(t),GFo=r(t6e," \u2014 "),Eq=n(t6e,"A",{href:!0});var AJr=s(Eq);OFo=r(AJr,"CamembertForMaskedLM"),AJr.forEach(t),VFo=r(t6e," (CamemBERT model)"),t6e.forEach(t),XFo=i(V),qp=n(V,"LI",{});var a6e=s(qp);Nse=n(a6e,"STRONG",{});var yJr=s(Nse);zFo=r(yJr,"ctrl"),yJr.forEach(t),QFo=r(a6e," \u2014 "),Cq=n(a6e,"A",{href:!0});var LJr=s(Cq);WFo=r(LJr,"CTRLLMHeadModel"),LJr.forEach(t),HFo=r(a6e," (CTRL model)"),a6e.forEach(t),UFo=i(V),Np=n(V,"LI",{});var n6e=s(Np);jse=n(n6e,"STRONG",{});var xJr=s(jse);JFo=r(xJr,"data2vec-text"),xJr.forEach(t),YFo=r(n6e," \u2014 "),wq=n(n6e,"A",{href:!0});var $Jr=s(wq);KFo=r($Jr,"Data2VecTextForMaskedLM"),$Jr.forEach(t),ZFo=r(n6e," (Data2VecText model)"),n6e.forEach(t),evo=i(V),jp=n(V,"LI",{});var s6e=s(jp);Dse=n(s6e,"STRONG",{});var kJr=s(Dse);ovo=r(kJr,"deberta"),kJr.forEach(t),rvo=r(s6e," \u2014 "),Aq=n(s6e,"A",{href:!0});var SJr=s(Aq);tvo=r(SJr,"DebertaForMaskedLM"),SJr.forEach(t),avo=r(s6e," (DeBERTa model)"),s6e.forEach(t),nvo=i(V),Dp=n(V,"LI",{});var l6e=s(Dp);Gse=n(l6e,"STRONG",{});var RJr=s(Gse);svo=r(RJr,"deberta-v2"),RJr.forEach(t),lvo=r(l6e," \u2014 "),yq=n(l6e,"A",{href:!0});var BJr=s(yq);ivo=r(BJr,"DebertaV2ForMaskedLM"),BJr.forEach(t),dvo=r(l6e," (DeBERTa-v2 model)"),l6e.forEach(t),cvo=i(V),Gp=n(V,"LI",{});var i6e=s(Gp);Ose=n(i6e,"STRONG",{});var PJr=s(Ose);mvo=r(PJr,"distilbert"),PJr.forEach(t),fvo=r(i6e," \u2014 "),Lq=n(i6e,"A",{href:!0});var IJr=s(Lq);gvo=r(IJr,"DistilBertForMaskedLM"),IJr.forEach(t),hvo=r(i6e," (DistilBERT model)"),i6e.forEach(t),uvo=i(V),Op=n(V,"LI",{});var d6e=s(Op);Vse=n(d6e,"STRONG",{});var qJr=s(Vse);pvo=r(qJr,"electra"),qJr.forEach(t),_vo=r(d6e," \u2014 "),xq=n(d6e,"A",{href:!0});var NJr=s(xq);bvo=r(NJr,"ElectraForPreTraining"),NJr.forEach(t),Fvo=r(d6e," (ELECTRA model)"),d6e.forEach(t),vvo=i(V),Vp=n(V,"LI",{});var c6e=s(Vp);Xse=n(c6e,"STRONG",{});var jJr=s(Xse);Tvo=r(jJr,"flaubert"),jJr.forEach(t),Mvo=r(c6e," \u2014 "),$q=n(c6e,"A",{href:!0});var DJr=s($q);Evo=r(DJr,"FlaubertWithLMHeadModel"),DJr.forEach(t),Cvo=r(c6e," (FlauBERT model)"),c6e.forEach(t),wvo=i(V),Xp=n(V,"LI",{});var m6e=s(Xp);zse=n(m6e,"STRONG",{});var GJr=s(zse);Avo=r(GJr,"fnet"),GJr.forEach(t),yvo=r(m6e," \u2014 "),kq=n(m6e,"A",{href:!0});var OJr=s(kq);Lvo=r(OJr,"FNetForPreTraining"),OJr.forEach(t),xvo=r(m6e," (FNet model)"),m6e.forEach(t),$vo=i(V),zp=n(V,"LI",{});var f6e=s(zp);Qse=n(f6e,"STRONG",{});var VJr=s(Qse);kvo=r(VJr,"fsmt"),VJr.forEach(t),Svo=r(f6e," \u2014 "),Sq=n(f6e,"A",{href:!0});var XJr=s(Sq);Rvo=r(XJr,"FSMTForConditionalGeneration"),XJr.forEach(t),Bvo=r(f6e," (FairSeq Machine-Translation model)"),f6e.forEach(t),Pvo=i(V),Qp=n(V,"LI",{});var g6e=s(Qp);Wse=n(g6e,"STRONG",{});var zJr=s(Wse);Ivo=r(zJr,"funnel"),zJr.forEach(t),qvo=r(g6e," \u2014 "),Rq=n(g6e,"A",{href:!0});var QJr=s(Rq);Nvo=r(QJr,"FunnelForPreTraining"),QJr.forEach(t),jvo=r(g6e," (Funnel Transformer model)"),g6e.forEach(t),Dvo=i(V),Wp=n(V,"LI",{});var h6e=s(Wp);Hse=n(h6e,"STRONG",{});var WJr=s(Hse);Gvo=r(WJr,"gpt2"),WJr.forEach(t),Ovo=r(h6e," \u2014 "),Bq=n(h6e,"A",{href:!0});var HJr=s(Bq);Vvo=r(HJr,"GPT2LMHeadModel"),HJr.forEach(t),Xvo=r(h6e," (OpenAI GPT-2 model)"),h6e.forEach(t),zvo=i(V),Hp=n(V,"LI",{});var u6e=s(Hp);Use=n(u6e,"STRONG",{});var UJr=s(Use);Qvo=r(UJr,"ibert"),UJr.forEach(t),Wvo=r(u6e," \u2014 "),Pq=n(u6e,"A",{href:!0});var JJr=s(Pq);Hvo=r(JJr,"IBertForMaskedLM"),JJr.forEach(t),Uvo=r(u6e," (I-BERT model)"),u6e.forEach(t),Jvo=i(V),Up=n(V,"LI",{});var p6e=s(Up);Jse=n(p6e,"STRONG",{});var YJr=s(Jse);Yvo=r(YJr,"layoutlm"),YJr.forEach(t),Kvo=r(p6e," \u2014 "),Iq=n(p6e,"A",{href:!0});var KJr=s(Iq);Zvo=r(KJr,"LayoutLMForMaskedLM"),KJr.forEach(t),e1o=r(p6e," (LayoutLM model)"),p6e.forEach(t),o1o=i(V),Jp=n(V,"LI",{});var _6e=s(Jp);Yse=n(_6e,"STRONG",{});var ZJr=s(Yse);r1o=r(ZJr,"longformer"),ZJr.forEach(t),t1o=r(_6e," \u2014 "),qq=n(_6e,"A",{href:!0});var eYr=s(qq);a1o=r(eYr,"LongformerForMaskedLM"),eYr.forEach(t),n1o=r(_6e," (Longformer model)"),_6e.forEach(t),s1o=i(V),Yp=n(V,"LI",{});var b6e=s(Yp);Kse=n(b6e,"STRONG",{});var oYr=s(Kse);l1o=r(oYr,"lxmert"),oYr.forEach(t),i1o=r(b6e," \u2014 "),Nq=n(b6e,"A",{href:!0});var rYr=s(Nq);d1o=r(rYr,"LxmertForPreTraining"),rYr.forEach(t),c1o=r(b6e," (LXMERT model)"),b6e.forEach(t),m1o=i(V),Kp=n(V,"LI",{});var F6e=s(Kp);Zse=n(F6e,"STRONG",{});var tYr=s(Zse);f1o=r(tYr,"megatron-bert"),tYr.forEach(t),g1o=r(F6e," \u2014 "),jq=n(F6e,"A",{href:!0});var aYr=s(jq);h1o=r(aYr,"MegatronBertForPreTraining"),aYr.forEach(t),u1o=r(F6e," (MegatronBert model)"),F6e.forEach(t),p1o=i(V),Zp=n(V,"LI",{});var v6e=s(Zp);ele=n(v6e,"STRONG",{});var nYr=s(ele);_1o=r(nYr,"mobilebert"),nYr.forEach(t),b1o=r(v6e," \u2014 "),Dq=n(v6e,"A",{href:!0});var sYr=s(Dq);F1o=r(sYr,"MobileBertForPreTraining"),sYr.forEach(t),v1o=r(v6e," (MobileBERT model)"),v6e.forEach(t),T1o=i(V),e_=n(V,"LI",{});var T6e=s(e_);ole=n(T6e,"STRONG",{});var lYr=s(ole);M1o=r(lYr,"mpnet"),lYr.forEach(t),E1o=r(T6e," \u2014 "),Gq=n(T6e,"A",{href:!0});var iYr=s(Gq);C1o=r(iYr,"MPNetForMaskedLM"),iYr.forEach(t),w1o=r(T6e," (MPNet model)"),T6e.forEach(t),A1o=i(V),o_=n(V,"LI",{});var M6e=s(o_);rle=n(M6e,"STRONG",{});var dYr=s(rle);y1o=r(dYr,"openai-gpt"),dYr.forEach(t),L1o=r(M6e," \u2014 "),Oq=n(M6e,"A",{href:!0});var cYr=s(Oq);x1o=r(cYr,"OpenAIGPTLMHeadModel"),cYr.forEach(t),$1o=r(M6e," (OpenAI GPT model)"),M6e.forEach(t),k1o=i(V),r_=n(V,"LI",{});var E6e=s(r_);tle=n(E6e,"STRONG",{});var mYr=s(tle);S1o=r(mYr,"retribert"),mYr.forEach(t),R1o=r(E6e," \u2014 "),Vq=n(E6e,"A",{href:!0});var fYr=s(Vq);B1o=r(fYr,"RetriBertModel"),fYr.forEach(t),P1o=r(E6e," (RetriBERT model)"),E6e.forEach(t),I1o=i(V),t_=n(V,"LI",{});var C6e=s(t_);ale=n(C6e,"STRONG",{});var gYr=s(ale);q1o=r(gYr,"roberta"),gYr.forEach(t),N1o=r(C6e," \u2014 "),Xq=n(C6e,"A",{href:!0});var hYr=s(Xq);j1o=r(hYr,"RobertaForMaskedLM"),hYr.forEach(t),D1o=r(C6e," (RoBERTa model)"),C6e.forEach(t),G1o=i(V),a_=n(V,"LI",{});var w6e=s(a_);nle=n(w6e,"STRONG",{});var uYr=s(nle);O1o=r(uYr,"squeezebert"),uYr.forEach(t),V1o=r(w6e," \u2014 "),zq=n(w6e,"A",{href:!0});var pYr=s(zq);X1o=r(pYr,"SqueezeBertForMaskedLM"),pYr.forEach(t),z1o=r(w6e," (SqueezeBERT model)"),w6e.forEach(t),Q1o=i(V),n_=n(V,"LI",{});var A6e=s(n_);sle=n(A6e,"STRONG",{});var _Yr=s(sle);W1o=r(_Yr,"t5"),_Yr.forEach(t),H1o=r(A6e," \u2014 "),Qq=n(A6e,"A",{href:!0});var bYr=s(Qq);U1o=r(bYr,"T5ForConditionalGeneration"),bYr.forEach(t),J1o=r(A6e," (T5 model)"),A6e.forEach(t),Y1o=i(V),s_=n(V,"LI",{});var y6e=s(s_);lle=n(y6e,"STRONG",{});var FYr=s(lle);K1o=r(FYr,"tapas"),FYr.forEach(t),Z1o=r(y6e," \u2014 "),Wq=n(y6e,"A",{href:!0});var vYr=s(Wq);eTo=r(vYr,"TapasForMaskedLM"),vYr.forEach(t),oTo=r(y6e," (TAPAS model)"),y6e.forEach(t),rTo=i(V),l_=n(V,"LI",{});var L6e=s(l_);ile=n(L6e,"STRONG",{});var TYr=s(ile);tTo=r(TYr,"transfo-xl"),TYr.forEach(t),aTo=r(L6e," \u2014 "),Hq=n(L6e,"A",{href:!0});var MYr=s(Hq);nTo=r(MYr,"TransfoXLLMHeadModel"),MYr.forEach(t),sTo=r(L6e," (Transformer-XL model)"),L6e.forEach(t),lTo=i(V),i_=n(V,"LI",{});var x6e=s(i_);dle=n(x6e,"STRONG",{});var EYr=s(dle);iTo=r(EYr,"unispeech"),EYr.forEach(t),dTo=r(x6e," \u2014 "),Uq=n(x6e,"A",{href:!0});var CYr=s(Uq);cTo=r(CYr,"UniSpeechForPreTraining"),CYr.forEach(t),mTo=r(x6e," (UniSpeech model)"),x6e.forEach(t),fTo=i(V),d_=n(V,"LI",{});var $6e=s(d_);cle=n($6e,"STRONG",{});var wYr=s(cle);gTo=r(wYr,"unispeech-sat"),wYr.forEach(t),hTo=r($6e," \u2014 "),Jq=n($6e,"A",{href:!0});var AYr=s(Jq);uTo=r(AYr,"UniSpeechSatForPreTraining"),AYr.forEach(t),pTo=r($6e," (UniSpeechSat model)"),$6e.forEach(t),_To=i(V),c_=n(V,"LI",{});var k6e=s(c_);mle=n(k6e,"STRONG",{});var yYr=s(mle);bTo=r(yYr,"visual_bert"),yYr.forEach(t),FTo=r(k6e," \u2014 "),Yq=n(k6e,"A",{href:!0});var LYr=s(Yq);vTo=r(LYr,"VisualBertForPreTraining"),LYr.forEach(t),TTo=r(k6e," (VisualBert model)"),k6e.forEach(t),MTo=i(V),m_=n(V,"LI",{});var S6e=s(m_);fle=n(S6e,"STRONG",{});var xYr=s(fle);ETo=r(xYr,"vit_mae"),xYr.forEach(t),CTo=r(S6e," \u2014 "),Kq=n(S6e,"A",{href:!0});var $Yr=s(Kq);wTo=r($Yr,"ViTMAEForPreTraining"),$Yr.forEach(t),ATo=r(S6e," (ViTMAE model)"),S6e.forEach(t),yTo=i(V),f_=n(V,"LI",{});var R6e=s(f_);gle=n(R6e,"STRONG",{});var kYr=s(gle);LTo=r(kYr,"wav2vec2"),kYr.forEach(t),xTo=r(R6e," \u2014 "),Zq=n(R6e,"A",{href:!0});var SYr=s(Zq);$To=r(SYr,"Wav2Vec2ForPreTraining"),SYr.forEach(t),kTo=r(R6e," (Wav2Vec2 model)"),R6e.forEach(t),STo=i(V),g_=n(V,"LI",{});var B6e=s(g_);hle=n(B6e,"STRONG",{});var RYr=s(hle);RTo=r(RYr,"xlm"),RYr.forEach(t),BTo=r(B6e," \u2014 "),eN=n(B6e,"A",{href:!0});var BYr=s(eN);PTo=r(BYr,"XLMWithLMHeadModel"),BYr.forEach(t),ITo=r(B6e," (XLM model)"),B6e.forEach(t),qTo=i(V),h_=n(V,"LI",{});var P6e=s(h_);ule=n(P6e,"STRONG",{});var PYr=s(ule);NTo=r(PYr,"xlm-roberta"),PYr.forEach(t),jTo=r(P6e," \u2014 "),oN=n(P6e,"A",{href:!0});var IYr=s(oN);DTo=r(IYr,"XLMRobertaForMaskedLM"),IYr.forEach(t),GTo=r(P6e," (XLM-RoBERTa model)"),P6e.forEach(t),OTo=i(V),u_=n(V,"LI",{});var I6e=s(u_);ple=n(I6e,"STRONG",{});var qYr=s(ple);VTo=r(qYr,"xlm-roberta-xl"),qYr.forEach(t),XTo=r(I6e," \u2014 "),rN=n(I6e,"A",{href:!0});var NYr=s(rN);zTo=r(NYr,"XLMRobertaXLForMaskedLM"),NYr.forEach(t),QTo=r(I6e," (XLM-RoBERTa-XL model)"),I6e.forEach(t),WTo=i(V),p_=n(V,"LI",{});var q6e=s(p_);_le=n(q6e,"STRONG",{});var jYr=s(_le);HTo=r(jYr,"xlnet"),jYr.forEach(t),UTo=r(q6e," \u2014 "),tN=n(q6e,"A",{href:!0});var DYr=s(tN);JTo=r(DYr,"XLNetLMHeadModel"),DYr.forEach(t),YTo=r(q6e," (XLNet model)"),q6e.forEach(t),V.forEach(t),KTo=i(ea),__=n(ea,"P",{});var N6e=s(__);ZTo=r(N6e,"The model is set in evaluation mode by default using "),ble=n(N6e,"CODE",{});var GYr=s(ble);eMo=r(GYr,"model.eval()"),GYr.forEach(t),oMo=r(N6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(N6e,"CODE",{});var OYr=s(Fle);rMo=r(OYr,"model.train()"),OYr.forEach(t),N6e.forEach(t),tMo=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),CPe=i(m),yi=n(m,"H2",{class:!0});var Lqe=s(yi);F_=n(Lqe,"A",{id:!0,class:!0,href:!0});var VYr=s(F_);vle=n(VYr,"SPAN",{});var XYr=s(vle);T(Cy.$$.fragment,XYr),XYr.forEach(t),VYr.forEach(t),aMo=i(Lqe),Tle=n(Lqe,"SPAN",{});var zYr=s(Tle);nMo=r(zYr,"AutoModelForCausalLM"),zYr.forEach(t),Lqe.forEach(t),wPe=i(m),$o=n(m,"DIV",{class:!0});var Gs=s($o);T(wy.$$.fragment,Gs),sMo=i(Gs),Li=n(Gs,"P",{});var UY=s(Li);lMo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=n(UY,"A",{href:!0});var QYr=s(aN);iMo=r(QYr,"from_pretrained()"),QYr.forEach(t),dMo=r(UY," class method or the "),nN=n(UY,"A",{href:!0});var WYr=s(nN);cMo=r(WYr,"from_config()"),WYr.forEach(t),mMo=r(UY,` class
method.`),UY.forEach(t),fMo=i(Gs),Ay=n(Gs,"P",{});var xqe=s(Ay);gMo=r(xqe,"This class cannot be instantiated directly using "),Mle=n(xqe,"CODE",{});var HYr=s(Mle);hMo=r(HYr,"__init__()"),HYr.forEach(t),uMo=r(xqe," (throws an error)."),xqe.forEach(t),pMo=i(Gs),tt=n(Gs,"DIV",{class:!0});var UA=s(tt);T(yy.$$.fragment,UA),_Mo=i(UA),Ele=n(UA,"P",{});var UYr=s(Ele);bMo=r(UYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UYr.forEach(t),FMo=i(UA),xi=n(UA,"P",{});var JY=s(xi);vMo=r(JY,`Note:
Loading a model from its configuration file does `),Cle=n(JY,"STRONG",{});var JYr=s(Cle);TMo=r(JYr,"not"),JYr.forEach(t),MMo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(JY,"A",{href:!0});var YYr=s(sN);EMo=r(YYr,"from_pretrained()"),YYr.forEach(t),CMo=r(JY," to load the model weights."),JY.forEach(t),wMo=i(UA),T(v_.$$.fragment,UA),UA.forEach(t),AMo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(Ly.$$.fragment,oa),yMo=i(oa),wle=n(oa,"P",{});var KYr=s(wle);LMo=r(KYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KYr.forEach(t),xMo=i(oa),La=n(oa,"P",{});var JA=s(La);$Mo=r(JA,"The model class to instantiate is selected based on the "),Ale=n(JA,"CODE",{});var ZYr=s(Ale);kMo=r(ZYr,"model_type"),ZYr.forEach(t),SMo=r(JA,` property of the config object (either
passed as an argument or loaded from `),yle=n(JA,"CODE",{});var eKr=s(yle);RMo=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),BMo=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(JA,"CODE",{});var oKr=s(Lle);PMo=r(oKr,"pretrained_model_name_or_path"),oKr.forEach(t),IMo=r(JA,":"),JA.forEach(t),qMo=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var j6e=s(T_);xle=n(j6e,"STRONG",{});var rKr=s(xle);NMo=r(rKr,"bart"),rKr.forEach(t),jMo=r(j6e," \u2014 "),lN=n(j6e,"A",{href:!0});var tKr=s(lN);DMo=r(tKr,"BartForCausalLM"),tKr.forEach(t),GMo=r(j6e," (BART model)"),j6e.forEach(t),OMo=i(W),M_=n(W,"LI",{});var D6e=s(M_);$le=n(D6e,"STRONG",{});var aKr=s($le);VMo=r(aKr,"bert"),aKr.forEach(t),XMo=r(D6e," \u2014 "),iN=n(D6e,"A",{href:!0});var nKr=s(iN);zMo=r(nKr,"BertLMHeadModel"),nKr.forEach(t),QMo=r(D6e," (BERT model)"),D6e.forEach(t),WMo=i(W),E_=n(W,"LI",{});var G6e=s(E_);kle=n(G6e,"STRONG",{});var sKr=s(kle);HMo=r(sKr,"bert-generation"),sKr.forEach(t),UMo=r(G6e," \u2014 "),dN=n(G6e,"A",{href:!0});var lKr=s(dN);JMo=r(lKr,"BertGenerationDecoder"),lKr.forEach(t),YMo=r(G6e," (Bert Generation model)"),G6e.forEach(t),KMo=i(W),C_=n(W,"LI",{});var O6e=s(C_);Sle=n(O6e,"STRONG",{});var iKr=s(Sle);ZMo=r(iKr,"big_bird"),iKr.forEach(t),e4o=r(O6e," \u2014 "),cN=n(O6e,"A",{href:!0});var dKr=s(cN);o4o=r(dKr,"BigBirdForCausalLM"),dKr.forEach(t),r4o=r(O6e," (BigBird model)"),O6e.forEach(t),t4o=i(W),w_=n(W,"LI",{});var V6e=s(w_);Rle=n(V6e,"STRONG",{});var cKr=s(Rle);a4o=r(cKr,"bigbird_pegasus"),cKr.forEach(t),n4o=r(V6e," \u2014 "),mN=n(V6e,"A",{href:!0});var mKr=s(mN);s4o=r(mKr,"BigBirdPegasusForCausalLM"),mKr.forEach(t),l4o=r(V6e," (BigBirdPegasus model)"),V6e.forEach(t),i4o=i(W),A_=n(W,"LI",{});var X6e=s(A_);Ble=n(X6e,"STRONG",{});var fKr=s(Ble);d4o=r(fKr,"blenderbot"),fKr.forEach(t),c4o=r(X6e," \u2014 "),fN=n(X6e,"A",{href:!0});var gKr=s(fN);m4o=r(gKr,"BlenderbotForCausalLM"),gKr.forEach(t),f4o=r(X6e," (Blenderbot model)"),X6e.forEach(t),g4o=i(W),y_=n(W,"LI",{});var z6e=s(y_);Ple=n(z6e,"STRONG",{});var hKr=s(Ple);h4o=r(hKr,"blenderbot-small"),hKr.forEach(t),u4o=r(z6e," \u2014 "),gN=n(z6e,"A",{href:!0});var uKr=s(gN);p4o=r(uKr,"BlenderbotSmallForCausalLM"),uKr.forEach(t),_4o=r(z6e," (BlenderbotSmall model)"),z6e.forEach(t),b4o=i(W),L_=n(W,"LI",{});var Q6e=s(L_);Ile=n(Q6e,"STRONG",{});var pKr=s(Ile);F4o=r(pKr,"camembert"),pKr.forEach(t),v4o=r(Q6e," \u2014 "),hN=n(Q6e,"A",{href:!0});var _Kr=s(hN);T4o=r(_Kr,"CamembertForCausalLM"),_Kr.forEach(t),M4o=r(Q6e," (CamemBERT model)"),Q6e.forEach(t),E4o=i(W),x_=n(W,"LI",{});var W6e=s(x_);qle=n(W6e,"STRONG",{});var bKr=s(qle);C4o=r(bKr,"ctrl"),bKr.forEach(t),w4o=r(W6e," \u2014 "),uN=n(W6e,"A",{href:!0});var FKr=s(uN);A4o=r(FKr,"CTRLLMHeadModel"),FKr.forEach(t),y4o=r(W6e," (CTRL model)"),W6e.forEach(t),L4o=i(W),$_=n(W,"LI",{});var H6e=s($_);Nle=n(H6e,"STRONG",{});var vKr=s(Nle);x4o=r(vKr,"data2vec-text"),vKr.forEach(t),$4o=r(H6e," \u2014 "),pN=n(H6e,"A",{href:!0});var TKr=s(pN);k4o=r(TKr,"Data2VecTextForCausalLM"),TKr.forEach(t),S4o=r(H6e," (Data2VecText model)"),H6e.forEach(t),R4o=i(W),k_=n(W,"LI",{});var U6e=s(k_);jle=n(U6e,"STRONG",{});var MKr=s(jle);B4o=r(MKr,"electra"),MKr.forEach(t),P4o=r(U6e," \u2014 "),_N=n(U6e,"A",{href:!0});var EKr=s(_N);I4o=r(EKr,"ElectraForCausalLM"),EKr.forEach(t),q4o=r(U6e," (ELECTRA model)"),U6e.forEach(t),N4o=i(W),S_=n(W,"LI",{});var J6e=s(S_);Dle=n(J6e,"STRONG",{});var CKr=s(Dle);j4o=r(CKr,"gpt2"),CKr.forEach(t),D4o=r(J6e," \u2014 "),bN=n(J6e,"A",{href:!0});var wKr=s(bN);G4o=r(wKr,"GPT2LMHeadModel"),wKr.forEach(t),O4o=r(J6e," (OpenAI GPT-2 model)"),J6e.forEach(t),V4o=i(W),R_=n(W,"LI",{});var Y6e=s(R_);Gle=n(Y6e,"STRONG",{});var AKr=s(Gle);X4o=r(AKr,"gpt_neo"),AKr.forEach(t),z4o=r(Y6e," \u2014 "),FN=n(Y6e,"A",{href:!0});var yKr=s(FN);Q4o=r(yKr,"GPTNeoForCausalLM"),yKr.forEach(t),W4o=r(Y6e," (GPT Neo model)"),Y6e.forEach(t),H4o=i(W),B_=n(W,"LI",{});var K6e=s(B_);Ole=n(K6e,"STRONG",{});var LKr=s(Ole);U4o=r(LKr,"gptj"),LKr.forEach(t),J4o=r(K6e," \u2014 "),vN=n(K6e,"A",{href:!0});var xKr=s(vN);Y4o=r(xKr,"GPTJForCausalLM"),xKr.forEach(t),K4o=r(K6e," (GPT-J model)"),K6e.forEach(t),Z4o=i(W),P_=n(W,"LI",{});var Z6e=s(P_);Vle=n(Z6e,"STRONG",{});var $Kr=s(Vle);eEo=r($Kr,"marian"),$Kr.forEach(t),oEo=r(Z6e," \u2014 "),TN=n(Z6e,"A",{href:!0});var kKr=s(TN);rEo=r(kKr,"MarianForCausalLM"),kKr.forEach(t),tEo=r(Z6e," (Marian model)"),Z6e.forEach(t),aEo=i(W),I_=n(W,"LI",{});var eye=s(I_);Xle=n(eye,"STRONG",{});var SKr=s(Xle);nEo=r(SKr,"mbart"),SKr.forEach(t),sEo=r(eye," \u2014 "),MN=n(eye,"A",{href:!0});var RKr=s(MN);lEo=r(RKr,"MBartForCausalLM"),RKr.forEach(t),iEo=r(eye," (mBART model)"),eye.forEach(t),dEo=i(W),q_=n(W,"LI",{});var oye=s(q_);zle=n(oye,"STRONG",{});var BKr=s(zle);cEo=r(BKr,"megatron-bert"),BKr.forEach(t),mEo=r(oye," \u2014 "),EN=n(oye,"A",{href:!0});var PKr=s(EN);fEo=r(PKr,"MegatronBertForCausalLM"),PKr.forEach(t),gEo=r(oye," (MegatronBert model)"),oye.forEach(t),hEo=i(W),N_=n(W,"LI",{});var rye=s(N_);Qle=n(rye,"STRONG",{});var IKr=s(Qle);uEo=r(IKr,"openai-gpt"),IKr.forEach(t),pEo=r(rye," \u2014 "),CN=n(rye,"A",{href:!0});var qKr=s(CN);_Eo=r(qKr,"OpenAIGPTLMHeadModel"),qKr.forEach(t),bEo=r(rye," (OpenAI GPT model)"),rye.forEach(t),FEo=i(W),j_=n(W,"LI",{});var tye=s(j_);Wle=n(tye,"STRONG",{});var NKr=s(Wle);vEo=r(NKr,"pegasus"),NKr.forEach(t),TEo=r(tye," \u2014 "),wN=n(tye,"A",{href:!0});var jKr=s(wN);MEo=r(jKr,"PegasusForCausalLM"),jKr.forEach(t),EEo=r(tye," (Pegasus model)"),tye.forEach(t),CEo=i(W),D_=n(W,"LI",{});var aye=s(D_);Hle=n(aye,"STRONG",{});var DKr=s(Hle);wEo=r(DKr,"plbart"),DKr.forEach(t),AEo=r(aye," \u2014 "),AN=n(aye,"A",{href:!0});var GKr=s(AN);yEo=r(GKr,"PLBartForCausalLM"),GKr.forEach(t),LEo=r(aye," (PLBart model)"),aye.forEach(t),xEo=i(W),G_=n(W,"LI",{});var nye=s(G_);Ule=n(nye,"STRONG",{});var OKr=s(Ule);$Eo=r(OKr,"prophetnet"),OKr.forEach(t),kEo=r(nye," \u2014 "),yN=n(nye,"A",{href:!0});var VKr=s(yN);SEo=r(VKr,"ProphetNetForCausalLM"),VKr.forEach(t),REo=r(nye," (ProphetNet model)"),nye.forEach(t),BEo=i(W),O_=n(W,"LI",{});var sye=s(O_);Jle=n(sye,"STRONG",{});var XKr=s(Jle);PEo=r(XKr,"qdqbert"),XKr.forEach(t),IEo=r(sye," \u2014 "),LN=n(sye,"A",{href:!0});var zKr=s(LN);qEo=r(zKr,"QDQBertLMHeadModel"),zKr.forEach(t),NEo=r(sye," (QDQBert model)"),sye.forEach(t),jEo=i(W),V_=n(W,"LI",{});var lye=s(V_);Yle=n(lye,"STRONG",{});var QKr=s(Yle);DEo=r(QKr,"reformer"),QKr.forEach(t),GEo=r(lye," \u2014 "),xN=n(lye,"A",{href:!0});var WKr=s(xN);OEo=r(WKr,"ReformerModelWithLMHead"),WKr.forEach(t),VEo=r(lye," (Reformer model)"),lye.forEach(t),XEo=i(W),X_=n(W,"LI",{});var iye=s(X_);Kle=n(iye,"STRONG",{});var HKr=s(Kle);zEo=r(HKr,"rembert"),HKr.forEach(t),QEo=r(iye," \u2014 "),$N=n(iye,"A",{href:!0});var UKr=s($N);WEo=r(UKr,"RemBertForCausalLM"),UKr.forEach(t),HEo=r(iye," (RemBERT model)"),iye.forEach(t),UEo=i(W),z_=n(W,"LI",{});var dye=s(z_);Zle=n(dye,"STRONG",{});var JKr=s(Zle);JEo=r(JKr,"roberta"),JKr.forEach(t),YEo=r(dye," \u2014 "),kN=n(dye,"A",{href:!0});var YKr=s(kN);KEo=r(YKr,"RobertaForCausalLM"),YKr.forEach(t),ZEo=r(dye," (RoBERTa model)"),dye.forEach(t),e5o=i(W),Q_=n(W,"LI",{});var cye=s(Q_);eie=n(cye,"STRONG",{});var KKr=s(eie);o5o=r(KKr,"roformer"),KKr.forEach(t),r5o=r(cye," \u2014 "),SN=n(cye,"A",{href:!0});var ZKr=s(SN);t5o=r(ZKr,"RoFormerForCausalLM"),ZKr.forEach(t),a5o=r(cye," (RoFormer model)"),cye.forEach(t),n5o=i(W),W_=n(W,"LI",{});var mye=s(W_);oie=n(mye,"STRONG",{});var eZr=s(oie);s5o=r(eZr,"speech_to_text_2"),eZr.forEach(t),l5o=r(mye," \u2014 "),RN=n(mye,"A",{href:!0});var oZr=s(RN);i5o=r(oZr,"Speech2Text2ForCausalLM"),oZr.forEach(t),d5o=r(mye," (Speech2Text2 model)"),mye.forEach(t),c5o=i(W),H_=n(W,"LI",{});var fye=s(H_);rie=n(fye,"STRONG",{});var rZr=s(rie);m5o=r(rZr,"transfo-xl"),rZr.forEach(t),f5o=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var tZr=s(BN);g5o=r(tZr,"TransfoXLLMHeadModel"),tZr.forEach(t),h5o=r(fye," (Transformer-XL model)"),fye.forEach(t),u5o=i(W),U_=n(W,"LI",{});var gye=s(U_);tie=n(gye,"STRONG",{});var aZr=s(tie);p5o=r(aZr,"trocr"),aZr.forEach(t),_5o=r(gye," \u2014 "),PN=n(gye,"A",{href:!0});var nZr=s(PN);b5o=r(nZr,"TrOCRForCausalLM"),nZr.forEach(t),F5o=r(gye," (TrOCR model)"),gye.forEach(t),v5o=i(W),J_=n(W,"LI",{});var hye=s(J_);aie=n(hye,"STRONG",{});var sZr=s(aie);T5o=r(sZr,"xglm"),sZr.forEach(t),M5o=r(hye," \u2014 "),IN=n(hye,"A",{href:!0});var lZr=s(IN);E5o=r(lZr,"XGLMForCausalLM"),lZr.forEach(t),C5o=r(hye," (XGLM model)"),hye.forEach(t),w5o=i(W),Y_=n(W,"LI",{});var uye=s(Y_);nie=n(uye,"STRONG",{});var iZr=s(nie);A5o=r(iZr,"xlm"),iZr.forEach(t),y5o=r(uye," \u2014 "),qN=n(uye,"A",{href:!0});var dZr=s(qN);L5o=r(dZr,"XLMWithLMHeadModel"),dZr.forEach(t),x5o=r(uye," (XLM model)"),uye.forEach(t),$5o=i(W),K_=n(W,"LI",{});var pye=s(K_);sie=n(pye,"STRONG",{});var cZr=s(sie);k5o=r(cZr,"xlm-prophetnet"),cZr.forEach(t),S5o=r(pye," \u2014 "),NN=n(pye,"A",{href:!0});var mZr=s(NN);R5o=r(mZr,"XLMProphetNetForCausalLM"),mZr.forEach(t),B5o=r(pye," (XLMProphetNet model)"),pye.forEach(t),P5o=i(W),Z_=n(W,"LI",{});var _ye=s(Z_);lie=n(_ye,"STRONG",{});var fZr=s(lie);I5o=r(fZr,"xlm-roberta"),fZr.forEach(t),q5o=r(_ye," \u2014 "),jN=n(_ye,"A",{href:!0});var gZr=s(jN);N5o=r(gZr,"XLMRobertaForCausalLM"),gZr.forEach(t),j5o=r(_ye," (XLM-RoBERTa model)"),_ye.forEach(t),D5o=i(W),eb=n(W,"LI",{});var bye=s(eb);iie=n(bye,"STRONG",{});var hZr=s(iie);G5o=r(hZr,"xlm-roberta-xl"),hZr.forEach(t),O5o=r(bye," \u2014 "),DN=n(bye,"A",{href:!0});var uZr=s(DN);V5o=r(uZr,"XLMRobertaXLForCausalLM"),uZr.forEach(t),X5o=r(bye," (XLM-RoBERTa-XL model)"),bye.forEach(t),z5o=i(W),ob=n(W,"LI",{});var Fye=s(ob);die=n(Fye,"STRONG",{});var pZr=s(die);Q5o=r(pZr,"xlnet"),pZr.forEach(t),W5o=r(Fye," \u2014 "),GN=n(Fye,"A",{href:!0});var _Zr=s(GN);H5o=r(_Zr,"XLNetLMHeadModel"),_Zr.forEach(t),U5o=r(Fye," (XLNet model)"),Fye.forEach(t),W.forEach(t),J5o=i(oa),rb=n(oa,"P",{});var vye=s(rb);Y5o=r(vye,"The model is set in evaluation mode by default using "),cie=n(vye,"CODE",{});var bZr=s(cie);K5o=r(bZr,"model.eval()"),bZr.forEach(t),Z5o=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(vye,"CODE",{});var FZr=s(mie);eCo=r(FZr,"model.train()"),FZr.forEach(t),vye.forEach(t),oCo=i(oa),T(tb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),APe=i(m),$i=n(m,"H2",{class:!0});var $qe=s($i);ab=n($qe,"A",{id:!0,class:!0,href:!0});var vZr=s(ab);fie=n(vZr,"SPAN",{});var TZr=s(fie);T(xy.$$.fragment,TZr),TZr.forEach(t),vZr.forEach(t),rCo=i($qe),gie=n($qe,"SPAN",{});var MZr=s(gie);tCo=r(MZr,"AutoModelForMaskedLM"),MZr.forEach(t),$qe.forEach(t),yPe=i(m),ko=n(m,"DIV",{class:!0});var Os=s(ko);T($y.$$.fragment,Os),aCo=i(Os),ki=n(Os,"P",{});var YY=s(ki);nCo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=n(YY,"A",{href:!0});var EZr=s(ON);sCo=r(EZr,"from_pretrained()"),EZr.forEach(t),lCo=r(YY," class method or the "),VN=n(YY,"A",{href:!0});var CZr=s(VN);iCo=r(CZr,"from_config()"),CZr.forEach(t),dCo=r(YY,` class
method.`),YY.forEach(t),cCo=i(Os),ky=n(Os,"P",{});var kqe=s(ky);mCo=r(kqe,"This class cannot be instantiated directly using "),hie=n(kqe,"CODE",{});var wZr=s(hie);fCo=r(wZr,"__init__()"),wZr.forEach(t),gCo=r(kqe," (throws an error)."),kqe.forEach(t),hCo=i(Os),at=n(Os,"DIV",{class:!0});var YA=s(at);T(Sy.$$.fragment,YA),uCo=i(YA),uie=n(YA,"P",{});var AZr=s(uie);pCo=r(AZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AZr.forEach(t),_Co=i(YA),Si=n(YA,"P",{});var KY=s(Si);bCo=r(KY,`Note:
Loading a model from its configuration file does `),pie=n(KY,"STRONG",{});var yZr=s(pie);FCo=r(yZr,"not"),yZr.forEach(t),vCo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(KY,"A",{href:!0});var LZr=s(XN);TCo=r(LZr,"from_pretrained()"),LZr.forEach(t),MCo=r(KY," to load the model weights."),KY.forEach(t),ECo=i(YA),T(nb.$$.fragment,YA),YA.forEach(t),CCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(Ry.$$.fragment,ra),wCo=i(ra),_ie=n(ra,"P",{});var xZr=s(_ie);ACo=r(xZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xZr.forEach(t),yCo=i(ra),xa=n(ra,"P",{});var KA=s(xa);LCo=r(KA,"The model class to instantiate is selected based on the "),bie=n(KA,"CODE",{});var $Zr=s(bie);xCo=r($Zr,"model_type"),$Zr.forEach(t),$Co=r(KA,` property of the config object (either
passed as an argument or loaded from `),Fie=n(KA,"CODE",{});var kZr=s(Fie);kCo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),SCo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(KA,"CODE",{});var SZr=s(vie);RCo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),BCo=r(KA,":"),KA.forEach(t),PCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);sb=n(H,"LI",{});var Tye=s(sb);Tie=n(Tye,"STRONG",{});var RZr=s(Tie);ICo=r(RZr,"albert"),RZr.forEach(t),qCo=r(Tye," \u2014 "),zN=n(Tye,"A",{href:!0});var BZr=s(zN);NCo=r(BZr,"AlbertForMaskedLM"),BZr.forEach(t),jCo=r(Tye," (ALBERT model)"),Tye.forEach(t),DCo=i(H),lb=n(H,"LI",{});var Mye=s(lb);Mie=n(Mye,"STRONG",{});var PZr=s(Mie);GCo=r(PZr,"bart"),PZr.forEach(t),OCo=r(Mye," \u2014 "),QN=n(Mye,"A",{href:!0});var IZr=s(QN);VCo=r(IZr,"BartForConditionalGeneration"),IZr.forEach(t),XCo=r(Mye," (BART model)"),Mye.forEach(t),zCo=i(H),ib=n(H,"LI",{});var Eye=s(ib);Eie=n(Eye,"STRONG",{});var qZr=s(Eie);QCo=r(qZr,"bert"),qZr.forEach(t),WCo=r(Eye," \u2014 "),WN=n(Eye,"A",{href:!0});var NZr=s(WN);HCo=r(NZr,"BertForMaskedLM"),NZr.forEach(t),UCo=r(Eye," (BERT model)"),Eye.forEach(t),JCo=i(H),db=n(H,"LI",{});var Cye=s(db);Cie=n(Cye,"STRONG",{});var jZr=s(Cie);YCo=r(jZr,"big_bird"),jZr.forEach(t),KCo=r(Cye," \u2014 "),HN=n(Cye,"A",{href:!0});var DZr=s(HN);ZCo=r(DZr,"BigBirdForMaskedLM"),DZr.forEach(t),e3o=r(Cye," (BigBird model)"),Cye.forEach(t),o3o=i(H),cb=n(H,"LI",{});var wye=s(cb);wie=n(wye,"STRONG",{});var GZr=s(wie);r3o=r(GZr,"camembert"),GZr.forEach(t),t3o=r(wye," \u2014 "),UN=n(wye,"A",{href:!0});var OZr=s(UN);a3o=r(OZr,"CamembertForMaskedLM"),OZr.forEach(t),n3o=r(wye," (CamemBERT model)"),wye.forEach(t),s3o=i(H),mb=n(H,"LI",{});var Aye=s(mb);Aie=n(Aye,"STRONG",{});var VZr=s(Aie);l3o=r(VZr,"convbert"),VZr.forEach(t),i3o=r(Aye," \u2014 "),JN=n(Aye,"A",{href:!0});var XZr=s(JN);d3o=r(XZr,"ConvBertForMaskedLM"),XZr.forEach(t),c3o=r(Aye," (ConvBERT model)"),Aye.forEach(t),m3o=i(H),fb=n(H,"LI",{});var yye=s(fb);yie=n(yye,"STRONG",{});var zZr=s(yie);f3o=r(zZr,"data2vec-text"),zZr.forEach(t),g3o=r(yye," \u2014 "),YN=n(yye,"A",{href:!0});var QZr=s(YN);h3o=r(QZr,"Data2VecTextForMaskedLM"),QZr.forEach(t),u3o=r(yye," (Data2VecText model)"),yye.forEach(t),p3o=i(H),gb=n(H,"LI",{});var Lye=s(gb);Lie=n(Lye,"STRONG",{});var WZr=s(Lie);_3o=r(WZr,"deberta"),WZr.forEach(t),b3o=r(Lye," \u2014 "),KN=n(Lye,"A",{href:!0});var HZr=s(KN);F3o=r(HZr,"DebertaForMaskedLM"),HZr.forEach(t),v3o=r(Lye," (DeBERTa model)"),Lye.forEach(t),T3o=i(H),hb=n(H,"LI",{});var xye=s(hb);xie=n(xye,"STRONG",{});var UZr=s(xie);M3o=r(UZr,"deberta-v2"),UZr.forEach(t),E3o=r(xye," \u2014 "),ZN=n(xye,"A",{href:!0});var JZr=s(ZN);C3o=r(JZr,"DebertaV2ForMaskedLM"),JZr.forEach(t),w3o=r(xye," (DeBERTa-v2 model)"),xye.forEach(t),A3o=i(H),ub=n(H,"LI",{});var $ye=s(ub);$ie=n($ye,"STRONG",{});var YZr=s($ie);y3o=r(YZr,"distilbert"),YZr.forEach(t),L3o=r($ye," \u2014 "),ej=n($ye,"A",{href:!0});var KZr=s(ej);x3o=r(KZr,"DistilBertForMaskedLM"),KZr.forEach(t),$3o=r($ye," (DistilBERT model)"),$ye.forEach(t),k3o=i(H),pb=n(H,"LI",{});var kye=s(pb);kie=n(kye,"STRONG",{});var ZZr=s(kie);S3o=r(ZZr,"electra"),ZZr.forEach(t),R3o=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var eet=s(oj);B3o=r(eet,"ElectraForMaskedLM"),eet.forEach(t),P3o=r(kye," (ELECTRA model)"),kye.forEach(t),I3o=i(H),_b=n(H,"LI",{});var Sye=s(_b);Sie=n(Sye,"STRONG",{});var oet=s(Sie);q3o=r(oet,"flaubert"),oet.forEach(t),N3o=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var ret=s(rj);j3o=r(ret,"FlaubertWithLMHeadModel"),ret.forEach(t),D3o=r(Sye," (FlauBERT model)"),Sye.forEach(t),G3o=i(H),bb=n(H,"LI",{});var Rye=s(bb);Rie=n(Rye,"STRONG",{});var tet=s(Rie);O3o=r(tet,"fnet"),tet.forEach(t),V3o=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var aet=s(tj);X3o=r(aet,"FNetForMaskedLM"),aet.forEach(t),z3o=r(Rye," (FNet model)"),Rye.forEach(t),Q3o=i(H),Fb=n(H,"LI",{});var Bye=s(Fb);Bie=n(Bye,"STRONG",{});var net=s(Bie);W3o=r(net,"funnel"),net.forEach(t),H3o=r(Bye," \u2014 "),aj=n(Bye,"A",{href:!0});var set=s(aj);U3o=r(set,"FunnelForMaskedLM"),set.forEach(t),J3o=r(Bye," (Funnel Transformer model)"),Bye.forEach(t),Y3o=i(H),vb=n(H,"LI",{});var Pye=s(vb);Pie=n(Pye,"STRONG",{});var iet=s(Pie);K3o=r(iet,"ibert"),iet.forEach(t),Z3o=r(Pye," \u2014 "),nj=n(Pye,"A",{href:!0});var det=s(nj);ewo=r(det,"IBertForMaskedLM"),det.forEach(t),owo=r(Pye," (I-BERT model)"),Pye.forEach(t),rwo=i(H),Tb=n(H,"LI",{});var Iye=s(Tb);Iie=n(Iye,"STRONG",{});var cet=s(Iie);two=r(cet,"layoutlm"),cet.forEach(t),awo=r(Iye," \u2014 "),sj=n(Iye,"A",{href:!0});var met=s(sj);nwo=r(met,"LayoutLMForMaskedLM"),met.forEach(t),swo=r(Iye," (LayoutLM model)"),Iye.forEach(t),lwo=i(H),Mb=n(H,"LI",{});var qye=s(Mb);qie=n(qye,"STRONG",{});var fet=s(qie);iwo=r(fet,"longformer"),fet.forEach(t),dwo=r(qye," \u2014 "),lj=n(qye,"A",{href:!0});var get=s(lj);cwo=r(get,"LongformerForMaskedLM"),get.forEach(t),mwo=r(qye," (Longformer model)"),qye.forEach(t),fwo=i(H),Eb=n(H,"LI",{});var Nye=s(Eb);Nie=n(Nye,"STRONG",{});var het=s(Nie);gwo=r(het,"mbart"),het.forEach(t),hwo=r(Nye," \u2014 "),ij=n(Nye,"A",{href:!0});var uet=s(ij);uwo=r(uet,"MBartForConditionalGeneration"),uet.forEach(t),pwo=r(Nye," (mBART model)"),Nye.forEach(t),_wo=i(H),Cb=n(H,"LI",{});var jye=s(Cb);jie=n(jye,"STRONG",{});var pet=s(jie);bwo=r(pet,"megatron-bert"),pet.forEach(t),Fwo=r(jye," \u2014 "),dj=n(jye,"A",{href:!0});var _et=s(dj);vwo=r(_et,"MegatronBertForMaskedLM"),_et.forEach(t),Two=r(jye," (MegatronBert model)"),jye.forEach(t),Mwo=i(H),wb=n(H,"LI",{});var Dye=s(wb);Die=n(Dye,"STRONG",{});var bet=s(Die);Ewo=r(bet,"mobilebert"),bet.forEach(t),Cwo=r(Dye," \u2014 "),cj=n(Dye,"A",{href:!0});var Fet=s(cj);wwo=r(Fet,"MobileBertForMaskedLM"),Fet.forEach(t),Awo=r(Dye," (MobileBERT model)"),Dye.forEach(t),ywo=i(H),Ab=n(H,"LI",{});var Gye=s(Ab);Gie=n(Gye,"STRONG",{});var vet=s(Gie);Lwo=r(vet,"mpnet"),vet.forEach(t),xwo=r(Gye," \u2014 "),mj=n(Gye,"A",{href:!0});var Tet=s(mj);$wo=r(Tet,"MPNetForMaskedLM"),Tet.forEach(t),kwo=r(Gye," (MPNet model)"),Gye.forEach(t),Swo=i(H),yb=n(H,"LI",{});var Oye=s(yb);Oie=n(Oye,"STRONG",{});var Met=s(Oie);Rwo=r(Met,"nystromformer"),Met.forEach(t),Bwo=r(Oye," \u2014 "),fj=n(Oye,"A",{href:!0});var Eet=s(fj);Pwo=r(Eet,"NystromformerForMaskedLM"),Eet.forEach(t),Iwo=r(Oye," (Nystromformer model)"),Oye.forEach(t),qwo=i(H),Lb=n(H,"LI",{});var Vye=s(Lb);Vie=n(Vye,"STRONG",{});var Cet=s(Vie);Nwo=r(Cet,"perceiver"),Cet.forEach(t),jwo=r(Vye," \u2014 "),gj=n(Vye,"A",{href:!0});var wet=s(gj);Dwo=r(wet,"PerceiverForMaskedLM"),wet.forEach(t),Gwo=r(Vye," (Perceiver model)"),Vye.forEach(t),Owo=i(H),xb=n(H,"LI",{});var Xye=s(xb);Xie=n(Xye,"STRONG",{});var Aet=s(Xie);Vwo=r(Aet,"qdqbert"),Aet.forEach(t),Xwo=r(Xye," \u2014 "),hj=n(Xye,"A",{href:!0});var yet=s(hj);zwo=r(yet,"QDQBertForMaskedLM"),yet.forEach(t),Qwo=r(Xye," (QDQBert model)"),Xye.forEach(t),Wwo=i(H),$b=n(H,"LI",{});var zye=s($b);zie=n(zye,"STRONG",{});var Let=s(zie);Hwo=r(Let,"reformer"),Let.forEach(t),Uwo=r(zye," \u2014 "),uj=n(zye,"A",{href:!0});var xet=s(uj);Jwo=r(xet,"ReformerForMaskedLM"),xet.forEach(t),Ywo=r(zye," (Reformer model)"),zye.forEach(t),Kwo=i(H),kb=n(H,"LI",{});var Qye=s(kb);Qie=n(Qye,"STRONG",{});var $et=s(Qie);Zwo=r($et,"rembert"),$et.forEach(t),eAo=r(Qye," \u2014 "),pj=n(Qye,"A",{href:!0});var ket=s(pj);oAo=r(ket,"RemBertForMaskedLM"),ket.forEach(t),rAo=r(Qye," (RemBERT model)"),Qye.forEach(t),tAo=i(H),Sb=n(H,"LI",{});var Wye=s(Sb);Wie=n(Wye,"STRONG",{});var Set=s(Wie);aAo=r(Set,"roberta"),Set.forEach(t),nAo=r(Wye," \u2014 "),_j=n(Wye,"A",{href:!0});var Ret=s(_j);sAo=r(Ret,"RobertaForMaskedLM"),Ret.forEach(t),lAo=r(Wye," (RoBERTa model)"),Wye.forEach(t),iAo=i(H),Rb=n(H,"LI",{});var Hye=s(Rb);Hie=n(Hye,"STRONG",{});var Bet=s(Hie);dAo=r(Bet,"roformer"),Bet.forEach(t),cAo=r(Hye," \u2014 "),bj=n(Hye,"A",{href:!0});var Pet=s(bj);mAo=r(Pet,"RoFormerForMaskedLM"),Pet.forEach(t),fAo=r(Hye," (RoFormer model)"),Hye.forEach(t),gAo=i(H),Bb=n(H,"LI",{});var Uye=s(Bb);Uie=n(Uye,"STRONG",{});var Iet=s(Uie);hAo=r(Iet,"squeezebert"),Iet.forEach(t),uAo=r(Uye," \u2014 "),Fj=n(Uye,"A",{href:!0});var qet=s(Fj);pAo=r(qet,"SqueezeBertForMaskedLM"),qet.forEach(t),_Ao=r(Uye," (SqueezeBERT model)"),Uye.forEach(t),bAo=i(H),Pb=n(H,"LI",{});var Jye=s(Pb);Jie=n(Jye,"STRONG",{});var Net=s(Jie);FAo=r(Net,"tapas"),Net.forEach(t),vAo=r(Jye," \u2014 "),vj=n(Jye,"A",{href:!0});var jet=s(vj);TAo=r(jet,"TapasForMaskedLM"),jet.forEach(t),MAo=r(Jye," (TAPAS model)"),Jye.forEach(t),EAo=i(H),Ib=n(H,"LI",{});var Yye=s(Ib);Yie=n(Yye,"STRONG",{});var Det=s(Yie);CAo=r(Det,"wav2vec2"),Det.forEach(t),wAo=r(Yye," \u2014 "),Kie=n(Yye,"CODE",{});var Get=s(Kie);AAo=r(Get,"Wav2Vec2ForMaskedLM"),Get.forEach(t),yAo=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),LAo=i(H),qb=n(H,"LI",{});var Kye=s(qb);Zie=n(Kye,"STRONG",{});var Oet=s(Zie);xAo=r(Oet,"xlm"),Oet.forEach(t),$Ao=r(Kye," \u2014 "),Tj=n(Kye,"A",{href:!0});var Vet=s(Tj);kAo=r(Vet,"XLMWithLMHeadModel"),Vet.forEach(t),SAo=r(Kye," (XLM model)"),Kye.forEach(t),RAo=i(H),Nb=n(H,"LI",{});var Zye=s(Nb);ede=n(Zye,"STRONG",{});var Xet=s(ede);BAo=r(Xet,"xlm-roberta"),Xet.forEach(t),PAo=r(Zye," \u2014 "),Mj=n(Zye,"A",{href:!0});var zet=s(Mj);IAo=r(zet,"XLMRobertaForMaskedLM"),zet.forEach(t),qAo=r(Zye," (XLM-RoBERTa model)"),Zye.forEach(t),NAo=i(H),jb=n(H,"LI",{});var eLe=s(jb);ode=n(eLe,"STRONG",{});var Qet=s(ode);jAo=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),DAo=r(eLe," \u2014 "),Ej=n(eLe,"A",{href:!0});var Wet=s(Ej);GAo=r(Wet,"XLMRobertaXLForMaskedLM"),Wet.forEach(t),OAo=r(eLe," (XLM-RoBERTa-XL model)"),eLe.forEach(t),VAo=i(H),Db=n(H,"LI",{});var oLe=s(Db);rde=n(oLe,"STRONG",{});var Het=s(rde);XAo=r(Het,"yoso"),Het.forEach(t),zAo=r(oLe," \u2014 "),Cj=n(oLe,"A",{href:!0});var Uet=s(Cj);QAo=r(Uet,"YosoForMaskedLM"),Uet.forEach(t),WAo=r(oLe," (YOSO model)"),oLe.forEach(t),H.forEach(t),HAo=i(ra),Gb=n(ra,"P",{});var rLe=s(Gb);UAo=r(rLe,"The model is set in evaluation mode by default using "),tde=n(rLe,"CODE",{});var Jet=s(tde);JAo=r(Jet,"model.eval()"),Jet.forEach(t),YAo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(rLe,"CODE",{});var Yet=s(ade);KAo=r(Yet,"model.train()"),Yet.forEach(t),rLe.forEach(t),ZAo=i(ra),T(Ob.$$.fragment,ra),ra.forEach(t),Os.forEach(t),LPe=i(m),Ri=n(m,"H2",{class:!0});var Sqe=s(Ri);Vb=n(Sqe,"A",{id:!0,class:!0,href:!0});var Ket=s(Vb);nde=n(Ket,"SPAN",{});var Zet=s(nde);T(By.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),e0o=i(Sqe),sde=n(Sqe,"SPAN",{});var eot=s(sde);o0o=r(eot,"AutoModelForSeq2SeqLM"),eot.forEach(t),Sqe.forEach(t),xPe=i(m),So=n(m,"DIV",{class:!0});var Vs=s(So);T(Py.$$.fragment,Vs),r0o=i(Vs),Bi=n(Vs,"P",{});var ZY=s(Bi);t0o=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=n(ZY,"A",{href:!0});var oot=s(wj);a0o=r(oot,"from_pretrained()"),oot.forEach(t),n0o=r(ZY," class method or the "),Aj=n(ZY,"A",{href:!0});var rot=s(Aj);s0o=r(rot,"from_config()"),rot.forEach(t),l0o=r(ZY,` class
method.`),ZY.forEach(t),i0o=i(Vs),Iy=n(Vs,"P",{});var Rqe=s(Iy);d0o=r(Rqe,"This class cannot be instantiated directly using "),lde=n(Rqe,"CODE",{});var tot=s(lde);c0o=r(tot,"__init__()"),tot.forEach(t),m0o=r(Rqe," (throws an error)."),Rqe.forEach(t),f0o=i(Vs),nt=n(Vs,"DIV",{class:!0});var ZA=s(nt);T(qy.$$.fragment,ZA),g0o=i(ZA),ide=n(ZA,"P",{});var aot=s(ide);h0o=r(aot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aot.forEach(t),u0o=i(ZA),Pi=n(ZA,"P",{});var eK=s(Pi);p0o=r(eK,`Note:
Loading a model from its configuration file does `),dde=n(eK,"STRONG",{});var not=s(dde);_0o=r(not,"not"),not.forEach(t),b0o=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(eK,"A",{href:!0});var sot=s(yj);F0o=r(sot,"from_pretrained()"),sot.forEach(t),v0o=r(eK," to load the model weights."),eK.forEach(t),T0o=i(ZA),T(Xb.$$.fragment,ZA),ZA.forEach(t),M0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Ny.$$.fragment,ta),E0o=i(ta),cde=n(ta,"P",{});var lot=s(cde);C0o=r(lot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lot.forEach(t),w0o=i(ta),$a=n(ta,"P",{});var e0=s($a);A0o=r(e0,"The model class to instantiate is selected based on the "),mde=n(e0,"CODE",{});var iot=s(mde);y0o=r(iot,"model_type"),iot.forEach(t),L0o=r(e0,` property of the config object (either
passed as an argument or loaded from `),fde=n(e0,"CODE",{});var dot=s(fde);x0o=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),$0o=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(e0,"CODE",{});var cot=s(gde);k0o=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),S0o=r(e0,":"),e0.forEach(t),R0o=i(ta),he=n(ta,"UL",{});var pe=s(he);zb=n(pe,"LI",{});var tLe=s(zb);hde=n(tLe,"STRONG",{});var mot=s(hde);B0o=r(mot,"bart"),mot.forEach(t),P0o=r(tLe," \u2014 "),Lj=n(tLe,"A",{href:!0});var fot=s(Lj);I0o=r(fot,"BartForConditionalGeneration"),fot.forEach(t),q0o=r(tLe," (BART model)"),tLe.forEach(t),N0o=i(pe),Qb=n(pe,"LI",{});var aLe=s(Qb);ude=n(aLe,"STRONG",{});var got=s(ude);j0o=r(got,"bigbird_pegasus"),got.forEach(t),D0o=r(aLe," \u2014 "),xj=n(aLe,"A",{href:!0});var hot=s(xj);G0o=r(hot,"BigBirdPegasusForConditionalGeneration"),hot.forEach(t),O0o=r(aLe," (BigBirdPegasus model)"),aLe.forEach(t),V0o=i(pe),Wb=n(pe,"LI",{});var nLe=s(Wb);pde=n(nLe,"STRONG",{});var uot=s(pde);X0o=r(uot,"blenderbot"),uot.forEach(t),z0o=r(nLe," \u2014 "),$j=n(nLe,"A",{href:!0});var pot=s($j);Q0o=r(pot,"BlenderbotForConditionalGeneration"),pot.forEach(t),W0o=r(nLe," (Blenderbot model)"),nLe.forEach(t),H0o=i(pe),Hb=n(pe,"LI",{});var sLe=s(Hb);_de=n(sLe,"STRONG",{});var _ot=s(_de);U0o=r(_ot,"blenderbot-small"),_ot.forEach(t),J0o=r(sLe," \u2014 "),kj=n(sLe,"A",{href:!0});var bot=s(kj);Y0o=r(bot,"BlenderbotSmallForConditionalGeneration"),bot.forEach(t),K0o=r(sLe," (BlenderbotSmall model)"),sLe.forEach(t),Z0o=i(pe),Ub=n(pe,"LI",{});var lLe=s(Ub);bde=n(lLe,"STRONG",{});var Fot=s(bde);e6o=r(Fot,"encoder-decoder"),Fot.forEach(t),o6o=r(lLe," \u2014 "),Sj=n(lLe,"A",{href:!0});var vot=s(Sj);r6o=r(vot,"EncoderDecoderModel"),vot.forEach(t),t6o=r(lLe," (Encoder decoder model)"),lLe.forEach(t),a6o=i(pe),Jb=n(pe,"LI",{});var iLe=s(Jb);Fde=n(iLe,"STRONG",{});var Tot=s(Fde);n6o=r(Tot,"fsmt"),Tot.forEach(t),s6o=r(iLe," \u2014 "),Rj=n(iLe,"A",{href:!0});var Mot=s(Rj);l6o=r(Mot,"FSMTForConditionalGeneration"),Mot.forEach(t),i6o=r(iLe," (FairSeq Machine-Translation model)"),iLe.forEach(t),d6o=i(pe),Yb=n(pe,"LI",{});var dLe=s(Yb);vde=n(dLe,"STRONG",{});var Eot=s(vde);c6o=r(Eot,"led"),Eot.forEach(t),m6o=r(dLe," \u2014 "),Bj=n(dLe,"A",{href:!0});var Cot=s(Bj);f6o=r(Cot,"LEDForConditionalGeneration"),Cot.forEach(t),g6o=r(dLe," (LED model)"),dLe.forEach(t),h6o=i(pe),Kb=n(pe,"LI",{});var cLe=s(Kb);Tde=n(cLe,"STRONG",{});var wot=s(Tde);u6o=r(wot,"m2m_100"),wot.forEach(t),p6o=r(cLe," \u2014 "),Pj=n(cLe,"A",{href:!0});var Aot=s(Pj);_6o=r(Aot,"M2M100ForConditionalGeneration"),Aot.forEach(t),b6o=r(cLe," (M2M100 model)"),cLe.forEach(t),F6o=i(pe),Zb=n(pe,"LI",{});var mLe=s(Zb);Mde=n(mLe,"STRONG",{});var yot=s(Mde);v6o=r(yot,"marian"),yot.forEach(t),T6o=r(mLe," \u2014 "),Ij=n(mLe,"A",{href:!0});var Lot=s(Ij);M6o=r(Lot,"MarianMTModel"),Lot.forEach(t),E6o=r(mLe," (Marian model)"),mLe.forEach(t),C6o=i(pe),e2=n(pe,"LI",{});var fLe=s(e2);Ede=n(fLe,"STRONG",{});var xot=s(Ede);w6o=r(xot,"mbart"),xot.forEach(t),A6o=r(fLe," \u2014 "),qj=n(fLe,"A",{href:!0});var $ot=s(qj);y6o=r($ot,"MBartForConditionalGeneration"),$ot.forEach(t),L6o=r(fLe," (mBART model)"),fLe.forEach(t),x6o=i(pe),o2=n(pe,"LI",{});var gLe=s(o2);Cde=n(gLe,"STRONG",{});var kot=s(Cde);$6o=r(kot,"mt5"),kot.forEach(t),k6o=r(gLe," \u2014 "),Nj=n(gLe,"A",{href:!0});var Sot=s(Nj);S6o=r(Sot,"MT5ForConditionalGeneration"),Sot.forEach(t),R6o=r(gLe," (mT5 model)"),gLe.forEach(t),B6o=i(pe),r2=n(pe,"LI",{});var hLe=s(r2);wde=n(hLe,"STRONG",{});var Rot=s(wde);P6o=r(Rot,"pegasus"),Rot.forEach(t),I6o=r(hLe," \u2014 "),jj=n(hLe,"A",{href:!0});var Bot=s(jj);q6o=r(Bot,"PegasusForConditionalGeneration"),Bot.forEach(t),N6o=r(hLe," (Pegasus model)"),hLe.forEach(t),j6o=i(pe),t2=n(pe,"LI",{});var uLe=s(t2);Ade=n(uLe,"STRONG",{});var Pot=s(Ade);D6o=r(Pot,"plbart"),Pot.forEach(t),G6o=r(uLe," \u2014 "),Dj=n(uLe,"A",{href:!0});var Iot=s(Dj);O6o=r(Iot,"PLBartForConditionalGeneration"),Iot.forEach(t),V6o=r(uLe," (PLBart model)"),uLe.forEach(t),X6o=i(pe),a2=n(pe,"LI",{});var pLe=s(a2);yde=n(pLe,"STRONG",{});var qot=s(yde);z6o=r(qot,"prophetnet"),qot.forEach(t),Q6o=r(pLe," \u2014 "),Gj=n(pLe,"A",{href:!0});var Not=s(Gj);W6o=r(Not,"ProphetNetForConditionalGeneration"),Not.forEach(t),H6o=r(pLe," (ProphetNet model)"),pLe.forEach(t),U6o=i(pe),n2=n(pe,"LI",{});var _Le=s(n2);Lde=n(_Le,"STRONG",{});var jot=s(Lde);J6o=r(jot,"t5"),jot.forEach(t),Y6o=r(_Le," \u2014 "),Oj=n(_Le,"A",{href:!0});var Dot=s(Oj);K6o=r(Dot,"T5ForConditionalGeneration"),Dot.forEach(t),Z6o=r(_Le," (T5 model)"),_Le.forEach(t),eyo=i(pe),s2=n(pe,"LI",{});var bLe=s(s2);xde=n(bLe,"STRONG",{});var Got=s(xde);oyo=r(Got,"tapex"),Got.forEach(t),ryo=r(bLe," \u2014 "),Vj=n(bLe,"A",{href:!0});var Oot=s(Vj);tyo=r(Oot,"BartForConditionalGeneration"),Oot.forEach(t),ayo=r(bLe," (TAPEX model)"),bLe.forEach(t),nyo=i(pe),l2=n(pe,"LI",{});var FLe=s(l2);$de=n(FLe,"STRONG",{});var Vot=s($de);syo=r(Vot,"xlm-prophetnet"),Vot.forEach(t),lyo=r(FLe," \u2014 "),Xj=n(FLe,"A",{href:!0});var Xot=s(Xj);iyo=r(Xot,"XLMProphetNetForConditionalGeneration"),Xot.forEach(t),dyo=r(FLe," (XLMProphetNet model)"),FLe.forEach(t),pe.forEach(t),cyo=i(ta),i2=n(ta,"P",{});var vLe=s(i2);myo=r(vLe,"The model is set in evaluation mode by default using "),kde=n(vLe,"CODE",{});var zot=s(kde);fyo=r(zot,"model.eval()"),zot.forEach(t),gyo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(vLe,"CODE",{});var Qot=s(Sde);hyo=r(Qot,"model.train()"),Qot.forEach(t),vLe.forEach(t),uyo=i(ta),T(d2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),$Pe=i(m),Ii=n(m,"H2",{class:!0});var Bqe=s(Ii);c2=n(Bqe,"A",{id:!0,class:!0,href:!0});var Wot=s(c2);Rde=n(Wot,"SPAN",{});var Hot=s(Rde);T(jy.$$.fragment,Hot),Hot.forEach(t),Wot.forEach(t),pyo=i(Bqe),Bde=n(Bqe,"SPAN",{});var Uot=s(Bde);_yo=r(Uot,"AutoModelForSequenceClassification"),Uot.forEach(t),Bqe.forEach(t),kPe=i(m),Ro=n(m,"DIV",{class:!0});var Xs=s(Ro);T(Dy.$$.fragment,Xs),byo=i(Xs),qi=n(Xs,"P",{});var oK=s(qi);Fyo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=n(oK,"A",{href:!0});var Jot=s(zj);vyo=r(Jot,"from_pretrained()"),Jot.forEach(t),Tyo=r(oK," class method or the "),Qj=n(oK,"A",{href:!0});var Yot=s(Qj);Myo=r(Yot,"from_config()"),Yot.forEach(t),Eyo=r(oK,` class
method.`),oK.forEach(t),Cyo=i(Xs),Gy=n(Xs,"P",{});var Pqe=s(Gy);wyo=r(Pqe,"This class cannot be instantiated directly using "),Pde=n(Pqe,"CODE",{});var Kot=s(Pde);Ayo=r(Kot,"__init__()"),Kot.forEach(t),yyo=r(Pqe," (throws an error)."),Pqe.forEach(t),Lyo=i(Xs),st=n(Xs,"DIV",{class:!0});var o0=s(st);T(Oy.$$.fragment,o0),xyo=i(o0),Ide=n(o0,"P",{});var Zot=s(Ide);$yo=r(Zot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zot.forEach(t),kyo=i(o0),Ni=n(o0,"P",{});var rK=s(Ni);Syo=r(rK,`Note:
Loading a model from its configuration file does `),qde=n(rK,"STRONG",{});var ert=s(qde);Ryo=r(ert,"not"),ert.forEach(t),Byo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(rK,"A",{href:!0});var ort=s(Wj);Pyo=r(ort,"from_pretrained()"),ort.forEach(t),Iyo=r(rK," to load the model weights."),rK.forEach(t),qyo=i(o0),T(m2.$$.fragment,o0),o0.forEach(t),Nyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Vy.$$.fragment,aa),jyo=i(aa),Nde=n(aa,"P",{});var rrt=s(Nde);Dyo=r(rrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rrt.forEach(t),Gyo=i(aa),ka=n(aa,"P",{});var r0=s(ka);Oyo=r(r0,"The model class to instantiate is selected based on the "),jde=n(r0,"CODE",{});var trt=s(jde);Vyo=r(trt,"model_type"),trt.forEach(t),Xyo=r(r0,` property of the config object (either
passed as an argument or loaded from `),Dde=n(r0,"CODE",{});var art=s(Dde);zyo=r(art,"pretrained_model_name_or_path"),art.forEach(t),Qyo=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(r0,"CODE",{});var nrt=s(Gde);Wyo=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),Hyo=r(r0,":"),r0.forEach(t),Uyo=i(aa),q=n(aa,"UL",{});var N=s(q);f2=n(N,"LI",{});var TLe=s(f2);Ode=n(TLe,"STRONG",{});var srt=s(Ode);Jyo=r(srt,"albert"),srt.forEach(t),Yyo=r(TLe," \u2014 "),Hj=n(TLe,"A",{href:!0});var lrt=s(Hj);Kyo=r(lrt,"AlbertForSequenceClassification"),lrt.forEach(t),Zyo=r(TLe," (ALBERT model)"),TLe.forEach(t),eLo=i(N),g2=n(N,"LI",{});var MLe=s(g2);Vde=n(MLe,"STRONG",{});var irt=s(Vde);oLo=r(irt,"bart"),irt.forEach(t),rLo=r(MLe," \u2014 "),Uj=n(MLe,"A",{href:!0});var drt=s(Uj);tLo=r(drt,"BartForSequenceClassification"),drt.forEach(t),aLo=r(MLe," (BART model)"),MLe.forEach(t),nLo=i(N),h2=n(N,"LI",{});var ELe=s(h2);Xde=n(ELe,"STRONG",{});var crt=s(Xde);sLo=r(crt,"bert"),crt.forEach(t),lLo=r(ELe," \u2014 "),Jj=n(ELe,"A",{href:!0});var mrt=s(Jj);iLo=r(mrt,"BertForSequenceClassification"),mrt.forEach(t),dLo=r(ELe," (BERT model)"),ELe.forEach(t),cLo=i(N),u2=n(N,"LI",{});var CLe=s(u2);zde=n(CLe,"STRONG",{});var frt=s(zde);mLo=r(frt,"big_bird"),frt.forEach(t),fLo=r(CLe," \u2014 "),Yj=n(CLe,"A",{href:!0});var grt=s(Yj);gLo=r(grt,"BigBirdForSequenceClassification"),grt.forEach(t),hLo=r(CLe," (BigBird model)"),CLe.forEach(t),uLo=i(N),p2=n(N,"LI",{});var wLe=s(p2);Qde=n(wLe,"STRONG",{});var hrt=s(Qde);pLo=r(hrt,"bigbird_pegasus"),hrt.forEach(t),_Lo=r(wLe," \u2014 "),Kj=n(wLe,"A",{href:!0});var urt=s(Kj);bLo=r(urt,"BigBirdPegasusForSequenceClassification"),urt.forEach(t),FLo=r(wLe," (BigBirdPegasus model)"),wLe.forEach(t),vLo=i(N),_2=n(N,"LI",{});var ALe=s(_2);Wde=n(ALe,"STRONG",{});var prt=s(Wde);TLo=r(prt,"camembert"),prt.forEach(t),MLo=r(ALe," \u2014 "),Zj=n(ALe,"A",{href:!0});var _rt=s(Zj);ELo=r(_rt,"CamembertForSequenceClassification"),_rt.forEach(t),CLo=r(ALe," (CamemBERT model)"),ALe.forEach(t),wLo=i(N),b2=n(N,"LI",{});var yLe=s(b2);Hde=n(yLe,"STRONG",{});var brt=s(Hde);ALo=r(brt,"canine"),brt.forEach(t),yLo=r(yLe," \u2014 "),eD=n(yLe,"A",{href:!0});var Frt=s(eD);LLo=r(Frt,"CanineForSequenceClassification"),Frt.forEach(t),xLo=r(yLe," (Canine model)"),yLe.forEach(t),$Lo=i(N),F2=n(N,"LI",{});var LLe=s(F2);Ude=n(LLe,"STRONG",{});var vrt=s(Ude);kLo=r(vrt,"convbert"),vrt.forEach(t),SLo=r(LLe," \u2014 "),oD=n(LLe,"A",{href:!0});var Trt=s(oD);RLo=r(Trt,"ConvBertForSequenceClassification"),Trt.forEach(t),BLo=r(LLe," (ConvBERT model)"),LLe.forEach(t),PLo=i(N),v2=n(N,"LI",{});var xLe=s(v2);Jde=n(xLe,"STRONG",{});var Mrt=s(Jde);ILo=r(Mrt,"ctrl"),Mrt.forEach(t),qLo=r(xLe," \u2014 "),rD=n(xLe,"A",{href:!0});var Ert=s(rD);NLo=r(Ert,"CTRLForSequenceClassification"),Ert.forEach(t),jLo=r(xLe," (CTRL model)"),xLe.forEach(t),DLo=i(N),T2=n(N,"LI",{});var $Le=s(T2);Yde=n($Le,"STRONG",{});var Crt=s(Yde);GLo=r(Crt,"data2vec-text"),Crt.forEach(t),OLo=r($Le," \u2014 "),tD=n($Le,"A",{href:!0});var wrt=s(tD);VLo=r(wrt,"Data2VecTextForSequenceClassification"),wrt.forEach(t),XLo=r($Le," (Data2VecText model)"),$Le.forEach(t),zLo=i(N),M2=n(N,"LI",{});var kLe=s(M2);Kde=n(kLe,"STRONG",{});var Art=s(Kde);QLo=r(Art,"deberta"),Art.forEach(t),WLo=r(kLe," \u2014 "),aD=n(kLe,"A",{href:!0});var yrt=s(aD);HLo=r(yrt,"DebertaForSequenceClassification"),yrt.forEach(t),ULo=r(kLe," (DeBERTa model)"),kLe.forEach(t),JLo=i(N),E2=n(N,"LI",{});var SLe=s(E2);Zde=n(SLe,"STRONG",{});var Lrt=s(Zde);YLo=r(Lrt,"deberta-v2"),Lrt.forEach(t),KLo=r(SLe," \u2014 "),nD=n(SLe,"A",{href:!0});var xrt=s(nD);ZLo=r(xrt,"DebertaV2ForSequenceClassification"),xrt.forEach(t),e8o=r(SLe," (DeBERTa-v2 model)"),SLe.forEach(t),o8o=i(N),C2=n(N,"LI",{});var RLe=s(C2);ece=n(RLe,"STRONG",{});var $rt=s(ece);r8o=r($rt,"distilbert"),$rt.forEach(t),t8o=r(RLe," \u2014 "),sD=n(RLe,"A",{href:!0});var krt=s(sD);a8o=r(krt,"DistilBertForSequenceClassification"),krt.forEach(t),n8o=r(RLe," (DistilBERT model)"),RLe.forEach(t),s8o=i(N),w2=n(N,"LI",{});var BLe=s(w2);oce=n(BLe,"STRONG",{});var Srt=s(oce);l8o=r(Srt,"electra"),Srt.forEach(t),i8o=r(BLe," \u2014 "),lD=n(BLe,"A",{href:!0});var Rrt=s(lD);d8o=r(Rrt,"ElectraForSequenceClassification"),Rrt.forEach(t),c8o=r(BLe," (ELECTRA model)"),BLe.forEach(t),m8o=i(N),A2=n(N,"LI",{});var PLe=s(A2);rce=n(PLe,"STRONG",{});var Brt=s(rce);f8o=r(Brt,"flaubert"),Brt.forEach(t),g8o=r(PLe," \u2014 "),iD=n(PLe,"A",{href:!0});var Prt=s(iD);h8o=r(Prt,"FlaubertForSequenceClassification"),Prt.forEach(t),u8o=r(PLe," (FlauBERT model)"),PLe.forEach(t),p8o=i(N),y2=n(N,"LI",{});var ILe=s(y2);tce=n(ILe,"STRONG",{});var Irt=s(tce);_8o=r(Irt,"fnet"),Irt.forEach(t),b8o=r(ILe," \u2014 "),dD=n(ILe,"A",{href:!0});var qrt=s(dD);F8o=r(qrt,"FNetForSequenceClassification"),qrt.forEach(t),v8o=r(ILe," (FNet model)"),ILe.forEach(t),T8o=i(N),L2=n(N,"LI",{});var qLe=s(L2);ace=n(qLe,"STRONG",{});var Nrt=s(ace);M8o=r(Nrt,"funnel"),Nrt.forEach(t),E8o=r(qLe," \u2014 "),cD=n(qLe,"A",{href:!0});var jrt=s(cD);C8o=r(jrt,"FunnelForSequenceClassification"),jrt.forEach(t),w8o=r(qLe," (Funnel Transformer model)"),qLe.forEach(t),A8o=i(N),x2=n(N,"LI",{});var NLe=s(x2);nce=n(NLe,"STRONG",{});var Drt=s(nce);y8o=r(Drt,"gpt2"),Drt.forEach(t),L8o=r(NLe," \u2014 "),mD=n(NLe,"A",{href:!0});var Grt=s(mD);x8o=r(Grt,"GPT2ForSequenceClassification"),Grt.forEach(t),$8o=r(NLe," (OpenAI GPT-2 model)"),NLe.forEach(t),k8o=i(N),$2=n(N,"LI",{});var jLe=s($2);sce=n(jLe,"STRONG",{});var Ort=s(sce);S8o=r(Ort,"gpt_neo"),Ort.forEach(t),R8o=r(jLe," \u2014 "),fD=n(jLe,"A",{href:!0});var Vrt=s(fD);B8o=r(Vrt,"GPTNeoForSequenceClassification"),Vrt.forEach(t),P8o=r(jLe," (GPT Neo model)"),jLe.forEach(t),I8o=i(N),k2=n(N,"LI",{});var DLe=s(k2);lce=n(DLe,"STRONG",{});var Xrt=s(lce);q8o=r(Xrt,"gptj"),Xrt.forEach(t),N8o=r(DLe," \u2014 "),gD=n(DLe,"A",{href:!0});var zrt=s(gD);j8o=r(zrt,"GPTJForSequenceClassification"),zrt.forEach(t),D8o=r(DLe," (GPT-J model)"),DLe.forEach(t),G8o=i(N),S2=n(N,"LI",{});var GLe=s(S2);ice=n(GLe,"STRONG",{});var Qrt=s(ice);O8o=r(Qrt,"ibert"),Qrt.forEach(t),V8o=r(GLe," \u2014 "),hD=n(GLe,"A",{href:!0});var Wrt=s(hD);X8o=r(Wrt,"IBertForSequenceClassification"),Wrt.forEach(t),z8o=r(GLe," (I-BERT model)"),GLe.forEach(t),Q8o=i(N),R2=n(N,"LI",{});var OLe=s(R2);dce=n(OLe,"STRONG",{});var Hrt=s(dce);W8o=r(Hrt,"layoutlm"),Hrt.forEach(t),H8o=r(OLe," \u2014 "),uD=n(OLe,"A",{href:!0});var Urt=s(uD);U8o=r(Urt,"LayoutLMForSequenceClassification"),Urt.forEach(t),J8o=r(OLe," (LayoutLM model)"),OLe.forEach(t),Y8o=i(N),B2=n(N,"LI",{});var VLe=s(B2);cce=n(VLe,"STRONG",{});var Jrt=s(cce);K8o=r(Jrt,"layoutlmv2"),Jrt.forEach(t),Z8o=r(VLe," \u2014 "),pD=n(VLe,"A",{href:!0});var Yrt=s(pD);exo=r(Yrt,"LayoutLMv2ForSequenceClassification"),Yrt.forEach(t),oxo=r(VLe," (LayoutLMv2 model)"),VLe.forEach(t),rxo=i(N),P2=n(N,"LI",{});var XLe=s(P2);mce=n(XLe,"STRONG",{});var Krt=s(mce);txo=r(Krt,"led"),Krt.forEach(t),axo=r(XLe," \u2014 "),_D=n(XLe,"A",{href:!0});var Zrt=s(_D);nxo=r(Zrt,"LEDForSequenceClassification"),Zrt.forEach(t),sxo=r(XLe," (LED model)"),XLe.forEach(t),lxo=i(N),I2=n(N,"LI",{});var zLe=s(I2);fce=n(zLe,"STRONG",{});var ett=s(fce);ixo=r(ett,"longformer"),ett.forEach(t),dxo=r(zLe," \u2014 "),bD=n(zLe,"A",{href:!0});var ott=s(bD);cxo=r(ott,"LongformerForSequenceClassification"),ott.forEach(t),mxo=r(zLe," (Longformer model)"),zLe.forEach(t),fxo=i(N),q2=n(N,"LI",{});var QLe=s(q2);gce=n(QLe,"STRONG",{});var rtt=s(gce);gxo=r(rtt,"mbart"),rtt.forEach(t),hxo=r(QLe," \u2014 "),FD=n(QLe,"A",{href:!0});var ttt=s(FD);uxo=r(ttt,"MBartForSequenceClassification"),ttt.forEach(t),pxo=r(QLe," (mBART model)"),QLe.forEach(t),_xo=i(N),N2=n(N,"LI",{});var WLe=s(N2);hce=n(WLe,"STRONG",{});var att=s(hce);bxo=r(att,"megatron-bert"),att.forEach(t),Fxo=r(WLe," \u2014 "),vD=n(WLe,"A",{href:!0});var ntt=s(vD);vxo=r(ntt,"MegatronBertForSequenceClassification"),ntt.forEach(t),Txo=r(WLe," (MegatronBert model)"),WLe.forEach(t),Mxo=i(N),j2=n(N,"LI",{});var HLe=s(j2);uce=n(HLe,"STRONG",{});var stt=s(uce);Exo=r(stt,"mobilebert"),stt.forEach(t),Cxo=r(HLe," \u2014 "),TD=n(HLe,"A",{href:!0});var ltt=s(TD);wxo=r(ltt,"MobileBertForSequenceClassification"),ltt.forEach(t),Axo=r(HLe," (MobileBERT model)"),HLe.forEach(t),yxo=i(N),D2=n(N,"LI",{});var ULe=s(D2);pce=n(ULe,"STRONG",{});var itt=s(pce);Lxo=r(itt,"mpnet"),itt.forEach(t),xxo=r(ULe," \u2014 "),MD=n(ULe,"A",{href:!0});var dtt=s(MD);$xo=r(dtt,"MPNetForSequenceClassification"),dtt.forEach(t),kxo=r(ULe," (MPNet model)"),ULe.forEach(t),Sxo=i(N),G2=n(N,"LI",{});var JLe=s(G2);_ce=n(JLe,"STRONG",{});var ctt=s(_ce);Rxo=r(ctt,"nystromformer"),ctt.forEach(t),Bxo=r(JLe," \u2014 "),ED=n(JLe,"A",{href:!0});var mtt=s(ED);Pxo=r(mtt,"NystromformerForSequenceClassification"),mtt.forEach(t),Ixo=r(JLe," (Nystromformer model)"),JLe.forEach(t),qxo=i(N),O2=n(N,"LI",{});var YLe=s(O2);bce=n(YLe,"STRONG",{});var ftt=s(bce);Nxo=r(ftt,"openai-gpt"),ftt.forEach(t),jxo=r(YLe," \u2014 "),CD=n(YLe,"A",{href:!0});var gtt=s(CD);Dxo=r(gtt,"OpenAIGPTForSequenceClassification"),gtt.forEach(t),Gxo=r(YLe," (OpenAI GPT model)"),YLe.forEach(t),Oxo=i(N),V2=n(N,"LI",{});var KLe=s(V2);Fce=n(KLe,"STRONG",{});var htt=s(Fce);Vxo=r(htt,"perceiver"),htt.forEach(t),Xxo=r(KLe," \u2014 "),wD=n(KLe,"A",{href:!0});var utt=s(wD);zxo=r(utt,"PerceiverForSequenceClassification"),utt.forEach(t),Qxo=r(KLe," (Perceiver model)"),KLe.forEach(t),Wxo=i(N),X2=n(N,"LI",{});var ZLe=s(X2);vce=n(ZLe,"STRONG",{});var ptt=s(vce);Hxo=r(ptt,"plbart"),ptt.forEach(t),Uxo=r(ZLe," \u2014 "),AD=n(ZLe,"A",{href:!0});var _tt=s(AD);Jxo=r(_tt,"PLBartForSequenceClassification"),_tt.forEach(t),Yxo=r(ZLe," (PLBart model)"),ZLe.forEach(t),Kxo=i(N),z2=n(N,"LI",{});var e8e=s(z2);Tce=n(e8e,"STRONG",{});var btt=s(Tce);Zxo=r(btt,"qdqbert"),btt.forEach(t),e7o=r(e8e," \u2014 "),yD=n(e8e,"A",{href:!0});var Ftt=s(yD);o7o=r(Ftt,"QDQBertForSequenceClassification"),Ftt.forEach(t),r7o=r(e8e," (QDQBert model)"),e8e.forEach(t),t7o=i(N),Q2=n(N,"LI",{});var o8e=s(Q2);Mce=n(o8e,"STRONG",{});var vtt=s(Mce);a7o=r(vtt,"reformer"),vtt.forEach(t),n7o=r(o8e," \u2014 "),LD=n(o8e,"A",{href:!0});var Ttt=s(LD);s7o=r(Ttt,"ReformerForSequenceClassification"),Ttt.forEach(t),l7o=r(o8e," (Reformer model)"),o8e.forEach(t),i7o=i(N),W2=n(N,"LI",{});var r8e=s(W2);Ece=n(r8e,"STRONG",{});var Mtt=s(Ece);d7o=r(Mtt,"rembert"),Mtt.forEach(t),c7o=r(r8e," \u2014 "),xD=n(r8e,"A",{href:!0});var Ett=s(xD);m7o=r(Ett,"RemBertForSequenceClassification"),Ett.forEach(t),f7o=r(r8e," (RemBERT model)"),r8e.forEach(t),g7o=i(N),H2=n(N,"LI",{});var t8e=s(H2);Cce=n(t8e,"STRONG",{});var Ctt=s(Cce);h7o=r(Ctt,"roberta"),Ctt.forEach(t),u7o=r(t8e," \u2014 "),$D=n(t8e,"A",{href:!0});var wtt=s($D);p7o=r(wtt,"RobertaForSequenceClassification"),wtt.forEach(t),_7o=r(t8e," (RoBERTa model)"),t8e.forEach(t),b7o=i(N),U2=n(N,"LI",{});var a8e=s(U2);wce=n(a8e,"STRONG",{});var Att=s(wce);F7o=r(Att,"roformer"),Att.forEach(t),v7o=r(a8e," \u2014 "),kD=n(a8e,"A",{href:!0});var ytt=s(kD);T7o=r(ytt,"RoFormerForSequenceClassification"),ytt.forEach(t),M7o=r(a8e," (RoFormer model)"),a8e.forEach(t),E7o=i(N),J2=n(N,"LI",{});var n8e=s(J2);Ace=n(n8e,"STRONG",{});var Ltt=s(Ace);C7o=r(Ltt,"squeezebert"),Ltt.forEach(t),w7o=r(n8e," \u2014 "),SD=n(n8e,"A",{href:!0});var xtt=s(SD);A7o=r(xtt,"SqueezeBertForSequenceClassification"),xtt.forEach(t),y7o=r(n8e," (SqueezeBERT model)"),n8e.forEach(t),L7o=i(N),Y2=n(N,"LI",{});var s8e=s(Y2);yce=n(s8e,"STRONG",{});var $tt=s(yce);x7o=r($tt,"tapas"),$tt.forEach(t),$7o=r(s8e," \u2014 "),RD=n(s8e,"A",{href:!0});var ktt=s(RD);k7o=r(ktt,"TapasForSequenceClassification"),ktt.forEach(t),S7o=r(s8e," (TAPAS model)"),s8e.forEach(t),R7o=i(N),K2=n(N,"LI",{});var l8e=s(K2);Lce=n(l8e,"STRONG",{});var Stt=s(Lce);B7o=r(Stt,"tapex"),Stt.forEach(t),P7o=r(l8e," \u2014 "),BD=n(l8e,"A",{href:!0});var Rtt=s(BD);I7o=r(Rtt,"BartForSequenceClassification"),Rtt.forEach(t),q7o=r(l8e," (TAPEX model)"),l8e.forEach(t),N7o=i(N),Z2=n(N,"LI",{});var i8e=s(Z2);xce=n(i8e,"STRONG",{});var Btt=s(xce);j7o=r(Btt,"transfo-xl"),Btt.forEach(t),D7o=r(i8e," \u2014 "),PD=n(i8e,"A",{href:!0});var Ptt=s(PD);G7o=r(Ptt,"TransfoXLForSequenceClassification"),Ptt.forEach(t),O7o=r(i8e," (Transformer-XL model)"),i8e.forEach(t),V7o=i(N),eF=n(N,"LI",{});var d8e=s(eF);$ce=n(d8e,"STRONG",{});var Itt=s($ce);X7o=r(Itt,"xlm"),Itt.forEach(t),z7o=r(d8e," \u2014 "),ID=n(d8e,"A",{href:!0});var qtt=s(ID);Q7o=r(qtt,"XLMForSequenceClassification"),qtt.forEach(t),W7o=r(d8e," (XLM model)"),d8e.forEach(t),H7o=i(N),oF=n(N,"LI",{});var c8e=s(oF);kce=n(c8e,"STRONG",{});var Ntt=s(kce);U7o=r(Ntt,"xlm-roberta"),Ntt.forEach(t),J7o=r(c8e," \u2014 "),qD=n(c8e,"A",{href:!0});var jtt=s(qD);Y7o=r(jtt,"XLMRobertaForSequenceClassification"),jtt.forEach(t),K7o=r(c8e," (XLM-RoBERTa model)"),c8e.forEach(t),Z7o=i(N),rF=n(N,"LI",{});var m8e=s(rF);Sce=n(m8e,"STRONG",{});var Dtt=s(Sce);e9o=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),o9o=r(m8e," \u2014 "),ND=n(m8e,"A",{href:!0});var Gtt=s(ND);r9o=r(Gtt,"XLMRobertaXLForSequenceClassification"),Gtt.forEach(t),t9o=r(m8e," (XLM-RoBERTa-XL model)"),m8e.forEach(t),a9o=i(N),tF=n(N,"LI",{});var f8e=s(tF);Rce=n(f8e,"STRONG",{});var Ott=s(Rce);n9o=r(Ott,"xlnet"),Ott.forEach(t),s9o=r(f8e," \u2014 "),jD=n(f8e,"A",{href:!0});var Vtt=s(jD);l9o=r(Vtt,"XLNetForSequenceClassification"),Vtt.forEach(t),i9o=r(f8e," (XLNet model)"),f8e.forEach(t),d9o=i(N),aF=n(N,"LI",{});var g8e=s(aF);Bce=n(g8e,"STRONG",{});var Xtt=s(Bce);c9o=r(Xtt,"yoso"),Xtt.forEach(t),m9o=r(g8e," \u2014 "),DD=n(g8e,"A",{href:!0});var ztt=s(DD);f9o=r(ztt,"YosoForSequenceClassification"),ztt.forEach(t),g9o=r(g8e," (YOSO model)"),g8e.forEach(t),N.forEach(t),h9o=i(aa),nF=n(aa,"P",{});var h8e=s(nF);u9o=r(h8e,"The model is set in evaluation mode by default using "),Pce=n(h8e,"CODE",{});var Qtt=s(Pce);p9o=r(Qtt,"model.eval()"),Qtt.forEach(t),_9o=r(h8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(h8e,"CODE",{});var Wtt=s(Ice);b9o=r(Wtt,"model.train()"),Wtt.forEach(t),h8e.forEach(t),F9o=i(aa),T(sF.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),SPe=i(m),ji=n(m,"H2",{class:!0});var Iqe=s(ji);lF=n(Iqe,"A",{id:!0,class:!0,href:!0});var Htt=s(lF);qce=n(Htt,"SPAN",{});var Utt=s(qce);T(Xy.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),v9o=i(Iqe),Nce=n(Iqe,"SPAN",{});var Jtt=s(Nce);T9o=r(Jtt,"AutoModelForMultipleChoice"),Jtt.forEach(t),Iqe.forEach(t),RPe=i(m),Bo=n(m,"DIV",{class:!0});var zs=s(Bo);T(zy.$$.fragment,zs),M9o=i(zs),Di=n(zs,"P",{});var tK=s(Di);E9o=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=n(tK,"A",{href:!0});var Ytt=s(GD);C9o=r(Ytt,"from_pretrained()"),Ytt.forEach(t),w9o=r(tK," class method or the "),OD=n(tK,"A",{href:!0});var Ktt=s(OD);A9o=r(Ktt,"from_config()"),Ktt.forEach(t),y9o=r(tK,` class
method.`),tK.forEach(t),L9o=i(zs),Qy=n(zs,"P",{});var qqe=s(Qy);x9o=r(qqe,"This class cannot be instantiated directly using "),jce=n(qqe,"CODE",{});var Ztt=s(jce);$9o=r(Ztt,"__init__()"),Ztt.forEach(t),k9o=r(qqe," (throws an error)."),qqe.forEach(t),S9o=i(zs),lt=n(zs,"DIV",{class:!0});var t0=s(lt);T(Wy.$$.fragment,t0),R9o=i(t0),Dce=n(t0,"P",{});var eat=s(Dce);B9o=r(eat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eat.forEach(t),P9o=i(t0),Gi=n(t0,"P",{});var aK=s(Gi);I9o=r(aK,`Note:
Loading a model from its configuration file does `),Gce=n(aK,"STRONG",{});var oat=s(Gce);q9o=r(oat,"not"),oat.forEach(t),N9o=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(aK,"A",{href:!0});var rat=s(VD);j9o=r(rat,"from_pretrained()"),rat.forEach(t),D9o=r(aK," to load the model weights."),aK.forEach(t),G9o=i(t0),T(iF.$$.fragment,t0),t0.forEach(t),O9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Hy.$$.fragment,na),V9o=i(na),Oce=n(na,"P",{});var tat=s(Oce);X9o=r(tat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tat.forEach(t),z9o=i(na),Sa=n(na,"P",{});var a0=s(Sa);Q9o=r(a0,"The model class to instantiate is selected based on the "),Vce=n(a0,"CODE",{});var aat=s(Vce);W9o=r(aat,"model_type"),aat.forEach(t),H9o=r(a0,` property of the config object (either
passed as an argument or loaded from `),Xce=n(a0,"CODE",{});var nat=s(Xce);U9o=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),J9o=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(a0,"CODE",{});var sat=s(zce);Y9o=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),K9o=r(a0,":"),a0.forEach(t),Z9o=i(na),Y=n(na,"UL",{});var K=s(Y);dF=n(K,"LI",{});var u8e=s(dF);Qce=n(u8e,"STRONG",{});var lat=s(Qce);e$o=r(lat,"albert"),lat.forEach(t),o$o=r(u8e," \u2014 "),XD=n(u8e,"A",{href:!0});var iat=s(XD);r$o=r(iat,"AlbertForMultipleChoice"),iat.forEach(t),t$o=r(u8e," (ALBERT model)"),u8e.forEach(t),a$o=i(K),cF=n(K,"LI",{});var p8e=s(cF);Wce=n(p8e,"STRONG",{});var dat=s(Wce);n$o=r(dat,"bert"),dat.forEach(t),s$o=r(p8e," \u2014 "),zD=n(p8e,"A",{href:!0});var cat=s(zD);l$o=r(cat,"BertForMultipleChoice"),cat.forEach(t),i$o=r(p8e," (BERT model)"),p8e.forEach(t),d$o=i(K),mF=n(K,"LI",{});var _8e=s(mF);Hce=n(_8e,"STRONG",{});var mat=s(Hce);c$o=r(mat,"big_bird"),mat.forEach(t),m$o=r(_8e," \u2014 "),QD=n(_8e,"A",{href:!0});var fat=s(QD);f$o=r(fat,"BigBirdForMultipleChoice"),fat.forEach(t),g$o=r(_8e," (BigBird model)"),_8e.forEach(t),h$o=i(K),fF=n(K,"LI",{});var b8e=s(fF);Uce=n(b8e,"STRONG",{});var gat=s(Uce);u$o=r(gat,"camembert"),gat.forEach(t),p$o=r(b8e," \u2014 "),WD=n(b8e,"A",{href:!0});var hat=s(WD);_$o=r(hat,"CamembertForMultipleChoice"),hat.forEach(t),b$o=r(b8e," (CamemBERT model)"),b8e.forEach(t),F$o=i(K),gF=n(K,"LI",{});var F8e=s(gF);Jce=n(F8e,"STRONG",{});var uat=s(Jce);v$o=r(uat,"canine"),uat.forEach(t),T$o=r(F8e," \u2014 "),HD=n(F8e,"A",{href:!0});var pat=s(HD);M$o=r(pat,"CanineForMultipleChoice"),pat.forEach(t),E$o=r(F8e," (Canine model)"),F8e.forEach(t),C$o=i(K),hF=n(K,"LI",{});var v8e=s(hF);Yce=n(v8e,"STRONG",{});var _at=s(Yce);w$o=r(_at,"convbert"),_at.forEach(t),A$o=r(v8e," \u2014 "),UD=n(v8e,"A",{href:!0});var bat=s(UD);y$o=r(bat,"ConvBertForMultipleChoice"),bat.forEach(t),L$o=r(v8e," (ConvBERT model)"),v8e.forEach(t),x$o=i(K),uF=n(K,"LI",{});var T8e=s(uF);Kce=n(T8e,"STRONG",{});var Fat=s(Kce);$$o=r(Fat,"data2vec-text"),Fat.forEach(t),k$o=r(T8e," \u2014 "),JD=n(T8e,"A",{href:!0});var vat=s(JD);S$o=r(vat,"Data2VecTextForMultipleChoice"),vat.forEach(t),R$o=r(T8e," (Data2VecText model)"),T8e.forEach(t),B$o=i(K),pF=n(K,"LI",{});var M8e=s(pF);Zce=n(M8e,"STRONG",{});var Tat=s(Zce);P$o=r(Tat,"deberta-v2"),Tat.forEach(t),I$o=r(M8e," \u2014 "),YD=n(M8e,"A",{href:!0});var Mat=s(YD);q$o=r(Mat,"DebertaV2ForMultipleChoice"),Mat.forEach(t),N$o=r(M8e," (DeBERTa-v2 model)"),M8e.forEach(t),j$o=i(K),_F=n(K,"LI",{});var E8e=s(_F);eme=n(E8e,"STRONG",{});var Eat=s(eme);D$o=r(Eat,"distilbert"),Eat.forEach(t),G$o=r(E8e," \u2014 "),KD=n(E8e,"A",{href:!0});var Cat=s(KD);O$o=r(Cat,"DistilBertForMultipleChoice"),Cat.forEach(t),V$o=r(E8e," (DistilBERT model)"),E8e.forEach(t),X$o=i(K),bF=n(K,"LI",{});var C8e=s(bF);ome=n(C8e,"STRONG",{});var wat=s(ome);z$o=r(wat,"electra"),wat.forEach(t),Q$o=r(C8e," \u2014 "),ZD=n(C8e,"A",{href:!0});var Aat=s(ZD);W$o=r(Aat,"ElectraForMultipleChoice"),Aat.forEach(t),H$o=r(C8e," (ELECTRA model)"),C8e.forEach(t),U$o=i(K),FF=n(K,"LI",{});var w8e=s(FF);rme=n(w8e,"STRONG",{});var yat=s(rme);J$o=r(yat,"flaubert"),yat.forEach(t),Y$o=r(w8e," \u2014 "),eG=n(w8e,"A",{href:!0});var Lat=s(eG);K$o=r(Lat,"FlaubertForMultipleChoice"),Lat.forEach(t),Z$o=r(w8e," (FlauBERT model)"),w8e.forEach(t),eko=i(K),vF=n(K,"LI",{});var A8e=s(vF);tme=n(A8e,"STRONG",{});var xat=s(tme);oko=r(xat,"fnet"),xat.forEach(t),rko=r(A8e," \u2014 "),oG=n(A8e,"A",{href:!0});var $at=s(oG);tko=r($at,"FNetForMultipleChoice"),$at.forEach(t),ako=r(A8e," (FNet model)"),A8e.forEach(t),nko=i(K),TF=n(K,"LI",{});var y8e=s(TF);ame=n(y8e,"STRONG",{});var kat=s(ame);sko=r(kat,"funnel"),kat.forEach(t),lko=r(y8e," \u2014 "),rG=n(y8e,"A",{href:!0});var Sat=s(rG);iko=r(Sat,"FunnelForMultipleChoice"),Sat.forEach(t),dko=r(y8e," (Funnel Transformer model)"),y8e.forEach(t),cko=i(K),MF=n(K,"LI",{});var L8e=s(MF);nme=n(L8e,"STRONG",{});var Rat=s(nme);mko=r(Rat,"ibert"),Rat.forEach(t),fko=r(L8e," \u2014 "),tG=n(L8e,"A",{href:!0});var Bat=s(tG);gko=r(Bat,"IBertForMultipleChoice"),Bat.forEach(t),hko=r(L8e," (I-BERT model)"),L8e.forEach(t),uko=i(K),EF=n(K,"LI",{});var x8e=s(EF);sme=n(x8e,"STRONG",{});var Pat=s(sme);pko=r(Pat,"longformer"),Pat.forEach(t),_ko=r(x8e," \u2014 "),aG=n(x8e,"A",{href:!0});var Iat=s(aG);bko=r(Iat,"LongformerForMultipleChoice"),Iat.forEach(t),Fko=r(x8e," (Longformer model)"),x8e.forEach(t),vko=i(K),CF=n(K,"LI",{});var $8e=s(CF);lme=n($8e,"STRONG",{});var qat=s(lme);Tko=r(qat,"megatron-bert"),qat.forEach(t),Mko=r($8e," \u2014 "),nG=n($8e,"A",{href:!0});var Nat=s(nG);Eko=r(Nat,"MegatronBertForMultipleChoice"),Nat.forEach(t),Cko=r($8e," (MegatronBert model)"),$8e.forEach(t),wko=i(K),wF=n(K,"LI",{});var k8e=s(wF);ime=n(k8e,"STRONG",{});var jat=s(ime);Ako=r(jat,"mobilebert"),jat.forEach(t),yko=r(k8e," \u2014 "),sG=n(k8e,"A",{href:!0});var Dat=s(sG);Lko=r(Dat,"MobileBertForMultipleChoice"),Dat.forEach(t),xko=r(k8e," (MobileBERT model)"),k8e.forEach(t),$ko=i(K),AF=n(K,"LI",{});var S8e=s(AF);dme=n(S8e,"STRONG",{});var Gat=s(dme);kko=r(Gat,"mpnet"),Gat.forEach(t),Sko=r(S8e," \u2014 "),lG=n(S8e,"A",{href:!0});var Oat=s(lG);Rko=r(Oat,"MPNetForMultipleChoice"),Oat.forEach(t),Bko=r(S8e," (MPNet model)"),S8e.forEach(t),Pko=i(K),yF=n(K,"LI",{});var R8e=s(yF);cme=n(R8e,"STRONG",{});var Vat=s(cme);Iko=r(Vat,"nystromformer"),Vat.forEach(t),qko=r(R8e," \u2014 "),iG=n(R8e,"A",{href:!0});var Xat=s(iG);Nko=r(Xat,"NystromformerForMultipleChoice"),Xat.forEach(t),jko=r(R8e," (Nystromformer model)"),R8e.forEach(t),Dko=i(K),LF=n(K,"LI",{});var B8e=s(LF);mme=n(B8e,"STRONG",{});var zat=s(mme);Gko=r(zat,"qdqbert"),zat.forEach(t),Oko=r(B8e," \u2014 "),dG=n(B8e,"A",{href:!0});var Qat=s(dG);Vko=r(Qat,"QDQBertForMultipleChoice"),Qat.forEach(t),Xko=r(B8e," (QDQBert model)"),B8e.forEach(t),zko=i(K),xF=n(K,"LI",{});var P8e=s(xF);fme=n(P8e,"STRONG",{});var Wat=s(fme);Qko=r(Wat,"rembert"),Wat.forEach(t),Wko=r(P8e," \u2014 "),cG=n(P8e,"A",{href:!0});var Hat=s(cG);Hko=r(Hat,"RemBertForMultipleChoice"),Hat.forEach(t),Uko=r(P8e," (RemBERT model)"),P8e.forEach(t),Jko=i(K),$F=n(K,"LI",{});var I8e=s($F);gme=n(I8e,"STRONG",{});var Uat=s(gme);Yko=r(Uat,"roberta"),Uat.forEach(t),Kko=r(I8e," \u2014 "),mG=n(I8e,"A",{href:!0});var Jat=s(mG);Zko=r(Jat,"RobertaForMultipleChoice"),Jat.forEach(t),eSo=r(I8e," (RoBERTa model)"),I8e.forEach(t),oSo=i(K),kF=n(K,"LI",{});var q8e=s(kF);hme=n(q8e,"STRONG",{});var Yat=s(hme);rSo=r(Yat,"roformer"),Yat.forEach(t),tSo=r(q8e," \u2014 "),fG=n(q8e,"A",{href:!0});var Kat=s(fG);aSo=r(Kat,"RoFormerForMultipleChoice"),Kat.forEach(t),nSo=r(q8e," (RoFormer model)"),q8e.forEach(t),sSo=i(K),SF=n(K,"LI",{});var N8e=s(SF);ume=n(N8e,"STRONG",{});var Zat=s(ume);lSo=r(Zat,"squeezebert"),Zat.forEach(t),iSo=r(N8e," \u2014 "),gG=n(N8e,"A",{href:!0});var ent=s(gG);dSo=r(ent,"SqueezeBertForMultipleChoice"),ent.forEach(t),cSo=r(N8e," (SqueezeBERT model)"),N8e.forEach(t),mSo=i(K),RF=n(K,"LI",{});var j8e=s(RF);pme=n(j8e,"STRONG",{});var ont=s(pme);fSo=r(ont,"xlm"),ont.forEach(t),gSo=r(j8e," \u2014 "),hG=n(j8e,"A",{href:!0});var rnt=s(hG);hSo=r(rnt,"XLMForMultipleChoice"),rnt.forEach(t),uSo=r(j8e," (XLM model)"),j8e.forEach(t),pSo=i(K),BF=n(K,"LI",{});var D8e=s(BF);_me=n(D8e,"STRONG",{});var tnt=s(_me);_So=r(tnt,"xlm-roberta"),tnt.forEach(t),bSo=r(D8e," \u2014 "),uG=n(D8e,"A",{href:!0});var ant=s(uG);FSo=r(ant,"XLMRobertaForMultipleChoice"),ant.forEach(t),vSo=r(D8e," (XLM-RoBERTa model)"),D8e.forEach(t),TSo=i(K),PF=n(K,"LI",{});var G8e=s(PF);bme=n(G8e,"STRONG",{});var nnt=s(bme);MSo=r(nnt,"xlm-roberta-xl"),nnt.forEach(t),ESo=r(G8e," \u2014 "),pG=n(G8e,"A",{href:!0});var snt=s(pG);CSo=r(snt,"XLMRobertaXLForMultipleChoice"),snt.forEach(t),wSo=r(G8e," (XLM-RoBERTa-XL model)"),G8e.forEach(t),ASo=i(K),IF=n(K,"LI",{});var O8e=s(IF);Fme=n(O8e,"STRONG",{});var lnt=s(Fme);ySo=r(lnt,"xlnet"),lnt.forEach(t),LSo=r(O8e," \u2014 "),_G=n(O8e,"A",{href:!0});var int=s(_G);xSo=r(int,"XLNetForMultipleChoice"),int.forEach(t),$So=r(O8e," (XLNet model)"),O8e.forEach(t),kSo=i(K),qF=n(K,"LI",{});var V8e=s(qF);vme=n(V8e,"STRONG",{});var dnt=s(vme);SSo=r(dnt,"yoso"),dnt.forEach(t),RSo=r(V8e," \u2014 "),bG=n(V8e,"A",{href:!0});var cnt=s(bG);BSo=r(cnt,"YosoForMultipleChoice"),cnt.forEach(t),PSo=r(V8e," (YOSO model)"),V8e.forEach(t),K.forEach(t),ISo=i(na),NF=n(na,"P",{});var X8e=s(NF);qSo=r(X8e,"The model is set in evaluation mode by default using "),Tme=n(X8e,"CODE",{});var mnt=s(Tme);NSo=r(mnt,"model.eval()"),mnt.forEach(t),jSo=r(X8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(X8e,"CODE",{});var fnt=s(Mme);DSo=r(fnt,"model.train()"),fnt.forEach(t),X8e.forEach(t),GSo=i(na),T(jF.$$.fragment,na),na.forEach(t),zs.forEach(t),BPe=i(m),Oi=n(m,"H2",{class:!0});var Nqe=s(Oi);DF=n(Nqe,"A",{id:!0,class:!0,href:!0});var gnt=s(DF);Eme=n(gnt,"SPAN",{});var hnt=s(Eme);T(Uy.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),OSo=i(Nqe),Cme=n(Nqe,"SPAN",{});var unt=s(Cme);VSo=r(unt,"AutoModelForNextSentencePrediction"),unt.forEach(t),Nqe.forEach(t),PPe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(Jy.$$.fragment,Qs),XSo=i(Qs),Vi=n(Qs,"P",{});var nK=s(Vi);zSo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FG=n(nK,"A",{href:!0});var pnt=s(FG);QSo=r(pnt,"from_pretrained()"),pnt.forEach(t),WSo=r(nK," class method or the "),vG=n(nK,"A",{href:!0});var _nt=s(vG);HSo=r(_nt,"from_config()"),_nt.forEach(t),USo=r(nK,` class
method.`),nK.forEach(t),JSo=i(Qs),Yy=n(Qs,"P",{});var jqe=s(Yy);YSo=r(jqe,"This class cannot be instantiated directly using "),wme=n(jqe,"CODE",{});var bnt=s(wme);KSo=r(bnt,"__init__()"),bnt.forEach(t),ZSo=r(jqe," (throws an error)."),jqe.forEach(t),eRo=i(Qs),it=n(Qs,"DIV",{class:!0});var n0=s(it);T(Ky.$$.fragment,n0),oRo=i(n0),Ame=n(n0,"P",{});var Fnt=s(Ame);rRo=r(Fnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Fnt.forEach(t),tRo=i(n0),Xi=n(n0,"P",{});var sK=s(Xi);aRo=r(sK,`Note:
Loading a model from its configuration file does `),yme=n(sK,"STRONG",{});var vnt=s(yme);nRo=r(vnt,"not"),vnt.forEach(t),sRo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(sK,"A",{href:!0});var Tnt=s(TG);lRo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),iRo=r(sK," to load the model weights."),sK.forEach(t),dRo=i(n0),T(GF.$$.fragment,n0),n0.forEach(t),cRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Zy.$$.fragment,sa),mRo=i(sa),Lme=n(sa,"P",{});var Mnt=s(Lme);fRo=r(Mnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mnt.forEach(t),gRo=i(sa),Ra=n(sa,"P",{});var s0=s(Ra);hRo=r(s0,"The model class to instantiate is selected based on the "),xme=n(s0,"CODE",{});var Ent=s(xme);uRo=r(Ent,"model_type"),Ent.forEach(t),pRo=r(s0,` property of the config object (either
passed as an argument or loaded from `),$me=n(s0,"CODE",{});var Cnt=s($me);_Ro=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),bRo=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kme=n(s0,"CODE",{});var wnt=s(kme);FRo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),vRo=r(s0,":"),s0.forEach(t),TRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);OF=n(Ws,"LI",{});var z8e=s(OF);Sme=n(z8e,"STRONG",{});var Ant=s(Sme);MRo=r(Ant,"bert"),Ant.forEach(t),ERo=r(z8e," \u2014 "),MG=n(z8e,"A",{href:!0});var ynt=s(MG);CRo=r(ynt,"BertForNextSentencePrediction"),ynt.forEach(t),wRo=r(z8e," (BERT model)"),z8e.forEach(t),ARo=i(Ws),VF=n(Ws,"LI",{});var Q8e=s(VF);Rme=n(Q8e,"STRONG",{});var Lnt=s(Rme);yRo=r(Lnt,"fnet"),Lnt.forEach(t),LRo=r(Q8e," \u2014 "),EG=n(Q8e,"A",{href:!0});var xnt=s(EG);xRo=r(xnt,"FNetForNextSentencePrediction"),xnt.forEach(t),$Ro=r(Q8e," (FNet model)"),Q8e.forEach(t),kRo=i(Ws),XF=n(Ws,"LI",{});var W8e=s(XF);Bme=n(W8e,"STRONG",{});var $nt=s(Bme);SRo=r($nt,"megatron-bert"),$nt.forEach(t),RRo=r(W8e," \u2014 "),CG=n(W8e,"A",{href:!0});var knt=s(CG);BRo=r(knt,"MegatronBertForNextSentencePrediction"),knt.forEach(t),PRo=r(W8e," (MegatronBert model)"),W8e.forEach(t),IRo=i(Ws),zF=n(Ws,"LI",{});var H8e=s(zF);Pme=n(H8e,"STRONG",{});var Snt=s(Pme);qRo=r(Snt,"mobilebert"),Snt.forEach(t),NRo=r(H8e," \u2014 "),wG=n(H8e,"A",{href:!0});var Rnt=s(wG);jRo=r(Rnt,"MobileBertForNextSentencePrediction"),Rnt.forEach(t),DRo=r(H8e," (MobileBERT model)"),H8e.forEach(t),GRo=i(Ws),QF=n(Ws,"LI",{});var U8e=s(QF);Ime=n(U8e,"STRONG",{});var Bnt=s(Ime);ORo=r(Bnt,"qdqbert"),Bnt.forEach(t),VRo=r(U8e," \u2014 "),AG=n(U8e,"A",{href:!0});var Pnt=s(AG);XRo=r(Pnt,"QDQBertForNextSentencePrediction"),Pnt.forEach(t),zRo=r(U8e," (QDQBert model)"),U8e.forEach(t),Ws.forEach(t),QRo=i(sa),WF=n(sa,"P",{});var J8e=s(WF);WRo=r(J8e,"The model is set in evaluation mode by default using "),qme=n(J8e,"CODE",{});var Int=s(qme);HRo=r(Int,"model.eval()"),Int.forEach(t),URo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nme=n(J8e,"CODE",{});var qnt=s(Nme);JRo=r(qnt,"model.train()"),qnt.forEach(t),J8e.forEach(t),YRo=i(sa),T(HF.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),IPe=i(m),zi=n(m,"H2",{class:!0});var Dqe=s(zi);UF=n(Dqe,"A",{id:!0,class:!0,href:!0});var Nnt=s(UF);jme=n(Nnt,"SPAN",{});var jnt=s(jme);T(eL.$$.fragment,jnt),jnt.forEach(t),Nnt.forEach(t),KRo=i(Dqe),Dme=n(Dqe,"SPAN",{});var Dnt=s(Dme);ZRo=r(Dnt,"AutoModelForTokenClassification"),Dnt.forEach(t),Dqe.forEach(t),qPe=i(m),Io=n(m,"DIV",{class:!0});var Hs=s(Io);T(oL.$$.fragment,Hs),eBo=i(Hs),Qi=n(Hs,"P",{});var lK=s(Qi);oBo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=n(lK,"A",{href:!0});var Gnt=s(yG);rBo=r(Gnt,"from_pretrained()"),Gnt.forEach(t),tBo=r(lK," class method or the "),LG=n(lK,"A",{href:!0});var Ont=s(LG);aBo=r(Ont,"from_config()"),Ont.forEach(t),nBo=r(lK,` class
method.`),lK.forEach(t),sBo=i(Hs),rL=n(Hs,"P",{});var Gqe=s(rL);lBo=r(Gqe,"This class cannot be instantiated directly using "),Gme=n(Gqe,"CODE",{});var Vnt=s(Gme);iBo=r(Vnt,"__init__()"),Vnt.forEach(t),dBo=r(Gqe," (throws an error)."),Gqe.forEach(t),cBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var l0=s(dt);T(tL.$$.fragment,l0),mBo=i(l0),Ome=n(l0,"P",{});var Xnt=s(Ome);fBo=r(Xnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xnt.forEach(t),gBo=i(l0),Wi=n(l0,"P",{});var iK=s(Wi);hBo=r(iK,`Note:
Loading a model from its configuration file does `),Vme=n(iK,"STRONG",{});var znt=s(Vme);uBo=r(znt,"not"),znt.forEach(t),pBo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(iK,"A",{href:!0});var Qnt=s(xG);_Bo=r(Qnt,"from_pretrained()"),Qnt.forEach(t),bBo=r(iK," to load the model weights."),iK.forEach(t),FBo=i(l0),T(JF.$$.fragment,l0),l0.forEach(t),vBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(aL.$$.fragment,la),TBo=i(la),Xme=n(la,"P",{});var Wnt=s(Xme);MBo=r(Wnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wnt.forEach(t),EBo=i(la),Ba=n(la,"P",{});var i0=s(Ba);CBo=r(i0,"The model class to instantiate is selected based on the "),zme=n(i0,"CODE",{});var Hnt=s(zme);wBo=r(Hnt,"model_type"),Hnt.forEach(t),ABo=r(i0,` property of the config object (either
passed as an argument or loaded from `),Qme=n(i0,"CODE",{});var Unt=s(Qme);yBo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),LBo=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wme=n(i0,"CODE",{});var Jnt=s(Wme);xBo=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),$Bo=r(i0,":"),i0.forEach(t),kBo=i(la),U=n(la,"UL",{});var J=s(U);YF=n(J,"LI",{});var Y8e=s(YF);Hme=n(Y8e,"STRONG",{});var Ynt=s(Hme);SBo=r(Ynt,"albert"),Ynt.forEach(t),RBo=r(Y8e," \u2014 "),$G=n(Y8e,"A",{href:!0});var Knt=s($G);BBo=r(Knt,"AlbertForTokenClassification"),Knt.forEach(t),PBo=r(Y8e," (ALBERT model)"),Y8e.forEach(t),IBo=i(J),KF=n(J,"LI",{});var K8e=s(KF);Ume=n(K8e,"STRONG",{});var Znt=s(Ume);qBo=r(Znt,"bert"),Znt.forEach(t),NBo=r(K8e," \u2014 "),kG=n(K8e,"A",{href:!0});var est=s(kG);jBo=r(est,"BertForTokenClassification"),est.forEach(t),DBo=r(K8e," (BERT model)"),K8e.forEach(t),GBo=i(J),ZF=n(J,"LI",{});var Z8e=s(ZF);Jme=n(Z8e,"STRONG",{});var ost=s(Jme);OBo=r(ost,"big_bird"),ost.forEach(t),VBo=r(Z8e," \u2014 "),SG=n(Z8e,"A",{href:!0});var rst=s(SG);XBo=r(rst,"BigBirdForTokenClassification"),rst.forEach(t),zBo=r(Z8e," (BigBird model)"),Z8e.forEach(t),QBo=i(J),ev=n(J,"LI",{});var exe=s(ev);Yme=n(exe,"STRONG",{});var tst=s(Yme);WBo=r(tst,"camembert"),tst.forEach(t),HBo=r(exe," \u2014 "),RG=n(exe,"A",{href:!0});var ast=s(RG);UBo=r(ast,"CamembertForTokenClassification"),ast.forEach(t),JBo=r(exe," (CamemBERT model)"),exe.forEach(t),YBo=i(J),ov=n(J,"LI",{});var oxe=s(ov);Kme=n(oxe,"STRONG",{});var nst=s(Kme);KBo=r(nst,"canine"),nst.forEach(t),ZBo=r(oxe," \u2014 "),BG=n(oxe,"A",{href:!0});var sst=s(BG);ePo=r(sst,"CanineForTokenClassification"),sst.forEach(t),oPo=r(oxe," (Canine model)"),oxe.forEach(t),rPo=i(J),rv=n(J,"LI",{});var rxe=s(rv);Zme=n(rxe,"STRONG",{});var lst=s(Zme);tPo=r(lst,"convbert"),lst.forEach(t),aPo=r(rxe," \u2014 "),PG=n(rxe,"A",{href:!0});var ist=s(PG);nPo=r(ist,"ConvBertForTokenClassification"),ist.forEach(t),sPo=r(rxe," (ConvBERT model)"),rxe.forEach(t),lPo=i(J),tv=n(J,"LI",{});var txe=s(tv);efe=n(txe,"STRONG",{});var dst=s(efe);iPo=r(dst,"data2vec-text"),dst.forEach(t),dPo=r(txe," \u2014 "),IG=n(txe,"A",{href:!0});var cst=s(IG);cPo=r(cst,"Data2VecTextForTokenClassification"),cst.forEach(t),mPo=r(txe," (Data2VecText model)"),txe.forEach(t),fPo=i(J),av=n(J,"LI",{});var axe=s(av);ofe=n(axe,"STRONG",{});var mst=s(ofe);gPo=r(mst,"deberta"),mst.forEach(t),hPo=r(axe," \u2014 "),qG=n(axe,"A",{href:!0});var fst=s(qG);uPo=r(fst,"DebertaForTokenClassification"),fst.forEach(t),pPo=r(axe," (DeBERTa model)"),axe.forEach(t),_Po=i(J),nv=n(J,"LI",{});var nxe=s(nv);rfe=n(nxe,"STRONG",{});var gst=s(rfe);bPo=r(gst,"deberta-v2"),gst.forEach(t),FPo=r(nxe," \u2014 "),NG=n(nxe,"A",{href:!0});var hst=s(NG);vPo=r(hst,"DebertaV2ForTokenClassification"),hst.forEach(t),TPo=r(nxe," (DeBERTa-v2 model)"),nxe.forEach(t),MPo=i(J),sv=n(J,"LI",{});var sxe=s(sv);tfe=n(sxe,"STRONG",{});var ust=s(tfe);EPo=r(ust,"distilbert"),ust.forEach(t),CPo=r(sxe," \u2014 "),jG=n(sxe,"A",{href:!0});var pst=s(jG);wPo=r(pst,"DistilBertForTokenClassification"),pst.forEach(t),APo=r(sxe," (DistilBERT model)"),sxe.forEach(t),yPo=i(J),lv=n(J,"LI",{});var lxe=s(lv);afe=n(lxe,"STRONG",{});var _st=s(afe);LPo=r(_st,"electra"),_st.forEach(t),xPo=r(lxe," \u2014 "),DG=n(lxe,"A",{href:!0});var bst=s(DG);$Po=r(bst,"ElectraForTokenClassification"),bst.forEach(t),kPo=r(lxe," (ELECTRA model)"),lxe.forEach(t),SPo=i(J),iv=n(J,"LI",{});var ixe=s(iv);nfe=n(ixe,"STRONG",{});var Fst=s(nfe);RPo=r(Fst,"flaubert"),Fst.forEach(t),BPo=r(ixe," \u2014 "),GG=n(ixe,"A",{href:!0});var vst=s(GG);PPo=r(vst,"FlaubertForTokenClassification"),vst.forEach(t),IPo=r(ixe," (FlauBERT model)"),ixe.forEach(t),qPo=i(J),dv=n(J,"LI",{});var dxe=s(dv);sfe=n(dxe,"STRONG",{});var Tst=s(sfe);NPo=r(Tst,"fnet"),Tst.forEach(t),jPo=r(dxe," \u2014 "),OG=n(dxe,"A",{href:!0});var Mst=s(OG);DPo=r(Mst,"FNetForTokenClassification"),Mst.forEach(t),GPo=r(dxe," (FNet model)"),dxe.forEach(t),OPo=i(J),cv=n(J,"LI",{});var cxe=s(cv);lfe=n(cxe,"STRONG",{});var Est=s(lfe);VPo=r(Est,"funnel"),Est.forEach(t),XPo=r(cxe," \u2014 "),VG=n(cxe,"A",{href:!0});var Cst=s(VG);zPo=r(Cst,"FunnelForTokenClassification"),Cst.forEach(t),QPo=r(cxe," (Funnel Transformer model)"),cxe.forEach(t),WPo=i(J),mv=n(J,"LI",{});var mxe=s(mv);ife=n(mxe,"STRONG",{});var wst=s(ife);HPo=r(wst,"gpt2"),wst.forEach(t),UPo=r(mxe," \u2014 "),XG=n(mxe,"A",{href:!0});var Ast=s(XG);JPo=r(Ast,"GPT2ForTokenClassification"),Ast.forEach(t),YPo=r(mxe," (OpenAI GPT-2 model)"),mxe.forEach(t),KPo=i(J),fv=n(J,"LI",{});var fxe=s(fv);dfe=n(fxe,"STRONG",{});var yst=s(dfe);ZPo=r(yst,"ibert"),yst.forEach(t),eIo=r(fxe," \u2014 "),zG=n(fxe,"A",{href:!0});var Lst=s(zG);oIo=r(Lst,"IBertForTokenClassification"),Lst.forEach(t),rIo=r(fxe," (I-BERT model)"),fxe.forEach(t),tIo=i(J),gv=n(J,"LI",{});var gxe=s(gv);cfe=n(gxe,"STRONG",{});var xst=s(cfe);aIo=r(xst,"layoutlm"),xst.forEach(t),nIo=r(gxe," \u2014 "),QG=n(gxe,"A",{href:!0});var $st=s(QG);sIo=r($st,"LayoutLMForTokenClassification"),$st.forEach(t),lIo=r(gxe," (LayoutLM model)"),gxe.forEach(t),iIo=i(J),hv=n(J,"LI",{});var hxe=s(hv);mfe=n(hxe,"STRONG",{});var kst=s(mfe);dIo=r(kst,"layoutlmv2"),kst.forEach(t),cIo=r(hxe," \u2014 "),WG=n(hxe,"A",{href:!0});var Sst=s(WG);mIo=r(Sst,"LayoutLMv2ForTokenClassification"),Sst.forEach(t),fIo=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),gIo=i(J),uv=n(J,"LI",{});var uxe=s(uv);ffe=n(uxe,"STRONG",{});var Rst=s(ffe);hIo=r(Rst,"longformer"),Rst.forEach(t),uIo=r(uxe," \u2014 "),HG=n(uxe,"A",{href:!0});var Bst=s(HG);pIo=r(Bst,"LongformerForTokenClassification"),Bst.forEach(t),_Io=r(uxe," (Longformer model)"),uxe.forEach(t),bIo=i(J),pv=n(J,"LI",{});var pxe=s(pv);gfe=n(pxe,"STRONG",{});var Pst=s(gfe);FIo=r(Pst,"megatron-bert"),Pst.forEach(t),vIo=r(pxe," \u2014 "),UG=n(pxe,"A",{href:!0});var Ist=s(UG);TIo=r(Ist,"MegatronBertForTokenClassification"),Ist.forEach(t),MIo=r(pxe," (MegatronBert model)"),pxe.forEach(t),EIo=i(J),_v=n(J,"LI",{});var _xe=s(_v);hfe=n(_xe,"STRONG",{});var qst=s(hfe);CIo=r(qst,"mobilebert"),qst.forEach(t),wIo=r(_xe," \u2014 "),JG=n(_xe,"A",{href:!0});var Nst=s(JG);AIo=r(Nst,"MobileBertForTokenClassification"),Nst.forEach(t),yIo=r(_xe," (MobileBERT model)"),_xe.forEach(t),LIo=i(J),bv=n(J,"LI",{});var bxe=s(bv);ufe=n(bxe,"STRONG",{});var jst=s(ufe);xIo=r(jst,"mpnet"),jst.forEach(t),$Io=r(bxe," \u2014 "),YG=n(bxe,"A",{href:!0});var Dst=s(YG);kIo=r(Dst,"MPNetForTokenClassification"),Dst.forEach(t),SIo=r(bxe," (MPNet model)"),bxe.forEach(t),RIo=i(J),Fv=n(J,"LI",{});var Fxe=s(Fv);pfe=n(Fxe,"STRONG",{});var Gst=s(pfe);BIo=r(Gst,"nystromformer"),Gst.forEach(t),PIo=r(Fxe," \u2014 "),KG=n(Fxe,"A",{href:!0});var Ost=s(KG);IIo=r(Ost,"NystromformerForTokenClassification"),Ost.forEach(t),qIo=r(Fxe," (Nystromformer model)"),Fxe.forEach(t),NIo=i(J),vv=n(J,"LI",{});var vxe=s(vv);_fe=n(vxe,"STRONG",{});var Vst=s(_fe);jIo=r(Vst,"qdqbert"),Vst.forEach(t),DIo=r(vxe," \u2014 "),ZG=n(vxe,"A",{href:!0});var Xst=s(ZG);GIo=r(Xst,"QDQBertForTokenClassification"),Xst.forEach(t),OIo=r(vxe," (QDQBert model)"),vxe.forEach(t),VIo=i(J),Tv=n(J,"LI",{});var Txe=s(Tv);bfe=n(Txe,"STRONG",{});var zst=s(bfe);XIo=r(zst,"rembert"),zst.forEach(t),zIo=r(Txe," \u2014 "),eO=n(Txe,"A",{href:!0});var Qst=s(eO);QIo=r(Qst,"RemBertForTokenClassification"),Qst.forEach(t),WIo=r(Txe," (RemBERT model)"),Txe.forEach(t),HIo=i(J),Mv=n(J,"LI",{});var Mxe=s(Mv);Ffe=n(Mxe,"STRONG",{});var Wst=s(Ffe);UIo=r(Wst,"roberta"),Wst.forEach(t),JIo=r(Mxe," \u2014 "),oO=n(Mxe,"A",{href:!0});var Hst=s(oO);YIo=r(Hst,"RobertaForTokenClassification"),Hst.forEach(t),KIo=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),ZIo=i(J),Ev=n(J,"LI",{});var Exe=s(Ev);vfe=n(Exe,"STRONG",{});var Ust=s(vfe);eqo=r(Ust,"roformer"),Ust.forEach(t),oqo=r(Exe," \u2014 "),rO=n(Exe,"A",{href:!0});var Jst=s(rO);rqo=r(Jst,"RoFormerForTokenClassification"),Jst.forEach(t),tqo=r(Exe," (RoFormer model)"),Exe.forEach(t),aqo=i(J),Cv=n(J,"LI",{});var Cxe=s(Cv);Tfe=n(Cxe,"STRONG",{});var Yst=s(Tfe);nqo=r(Yst,"squeezebert"),Yst.forEach(t),sqo=r(Cxe," \u2014 "),tO=n(Cxe,"A",{href:!0});var Kst=s(tO);lqo=r(Kst,"SqueezeBertForTokenClassification"),Kst.forEach(t),iqo=r(Cxe," (SqueezeBERT model)"),Cxe.forEach(t),dqo=i(J),wv=n(J,"LI",{});var wxe=s(wv);Mfe=n(wxe,"STRONG",{});var Zst=s(Mfe);cqo=r(Zst,"xlm"),Zst.forEach(t),mqo=r(wxe," \u2014 "),aO=n(wxe,"A",{href:!0});var elt=s(aO);fqo=r(elt,"XLMForTokenClassification"),elt.forEach(t),gqo=r(wxe," (XLM model)"),wxe.forEach(t),hqo=i(J),Av=n(J,"LI",{});var Axe=s(Av);Efe=n(Axe,"STRONG",{});var olt=s(Efe);uqo=r(olt,"xlm-roberta"),olt.forEach(t),pqo=r(Axe," \u2014 "),nO=n(Axe,"A",{href:!0});var rlt=s(nO);_qo=r(rlt,"XLMRobertaForTokenClassification"),rlt.forEach(t),bqo=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),Fqo=i(J),yv=n(J,"LI",{});var yxe=s(yv);Cfe=n(yxe,"STRONG",{});var tlt=s(Cfe);vqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),Tqo=r(yxe," \u2014 "),sO=n(yxe,"A",{href:!0});var alt=s(sO);Mqo=r(alt,"XLMRobertaXLForTokenClassification"),alt.forEach(t),Eqo=r(yxe," (XLM-RoBERTa-XL model)"),yxe.forEach(t),Cqo=i(J),Lv=n(J,"LI",{});var Lxe=s(Lv);wfe=n(Lxe,"STRONG",{});var nlt=s(wfe);wqo=r(nlt,"xlnet"),nlt.forEach(t),Aqo=r(Lxe," \u2014 "),lO=n(Lxe,"A",{href:!0});var slt=s(lO);yqo=r(slt,"XLNetForTokenClassification"),slt.forEach(t),Lqo=r(Lxe," (XLNet model)"),Lxe.forEach(t),xqo=i(J),xv=n(J,"LI",{});var xxe=s(xv);Afe=n(xxe,"STRONG",{});var llt=s(Afe);$qo=r(llt,"yoso"),llt.forEach(t),kqo=r(xxe," \u2014 "),iO=n(xxe,"A",{href:!0});var ilt=s(iO);Sqo=r(ilt,"YosoForTokenClassification"),ilt.forEach(t),Rqo=r(xxe," (YOSO model)"),xxe.forEach(t),J.forEach(t),Bqo=i(la),$v=n(la,"P",{});var $xe=s($v);Pqo=r($xe,"The model is set in evaluation mode by default using "),yfe=n($xe,"CODE",{});var dlt=s(yfe);Iqo=r(dlt,"model.eval()"),dlt.forEach(t),qqo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n($xe,"CODE",{});var clt=s(Lfe);Nqo=r(clt,"model.train()"),clt.forEach(t),$xe.forEach(t),jqo=i(la),T(kv.$$.fragment,la),la.forEach(t),Hs.forEach(t),NPe=i(m),Hi=n(m,"H2",{class:!0});var Oqe=s(Hi);Sv=n(Oqe,"A",{id:!0,class:!0,href:!0});var mlt=s(Sv);xfe=n(mlt,"SPAN",{});var flt=s(xfe);T(nL.$$.fragment,flt),flt.forEach(t),mlt.forEach(t),Dqo=i(Oqe),$fe=n(Oqe,"SPAN",{});var glt=s($fe);Gqo=r(glt,"AutoModelForQuestionAnswering"),glt.forEach(t),Oqe.forEach(t),jPe=i(m),qo=n(m,"DIV",{class:!0});var Us=s(qo);T(sL.$$.fragment,Us),Oqo=i(Us),Ui=n(Us,"P",{});var dK=s(Ui);Vqo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=n(dK,"A",{href:!0});var hlt=s(dO);Xqo=r(hlt,"from_pretrained()"),hlt.forEach(t),zqo=r(dK," class method or the "),cO=n(dK,"A",{href:!0});var ult=s(cO);Qqo=r(ult,"from_config()"),ult.forEach(t),Wqo=r(dK,` class
method.`),dK.forEach(t),Hqo=i(Us),lL=n(Us,"P",{});var Vqe=s(lL);Uqo=r(Vqe,"This class cannot be instantiated directly using "),kfe=n(Vqe,"CODE",{});var plt=s(kfe);Jqo=r(plt,"__init__()"),plt.forEach(t),Yqo=r(Vqe," (throws an error)."),Vqe.forEach(t),Kqo=i(Us),ct=n(Us,"DIV",{class:!0});var d0=s(ct);T(iL.$$.fragment,d0),Zqo=i(d0),Sfe=n(d0,"P",{});var _lt=s(Sfe);eNo=r(_lt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_lt.forEach(t),oNo=i(d0),Ji=n(d0,"P",{});var cK=s(Ji);rNo=r(cK,`Note:
Loading a model from its configuration file does `),Rfe=n(cK,"STRONG",{});var blt=s(Rfe);tNo=r(blt,"not"),blt.forEach(t),aNo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(cK,"A",{href:!0});var Flt=s(mO);nNo=r(Flt,"from_pretrained()"),Flt.forEach(t),sNo=r(cK," to load the model weights."),cK.forEach(t),lNo=i(d0),T(Rv.$$.fragment,d0),d0.forEach(t),iNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(dL.$$.fragment,ia),dNo=i(ia),Bfe=n(ia,"P",{});var vlt=s(Bfe);cNo=r(vlt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vlt.forEach(t),mNo=i(ia),Pa=n(ia,"P",{});var c0=s(Pa);fNo=r(c0,"The model class to instantiate is selected based on the "),Pfe=n(c0,"CODE",{});var Tlt=s(Pfe);gNo=r(Tlt,"model_type"),Tlt.forEach(t),hNo=r(c0,` property of the config object (either
passed as an argument or loaded from `),Ife=n(c0,"CODE",{});var Mlt=s(Ife);uNo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),pNo=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n(c0,"CODE",{});var Elt=s(qfe);_No=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),bNo=r(c0,":"),c0.forEach(t),FNo=i(ia),O=n(ia,"UL",{});var X=s(O);Bv=n(X,"LI",{});var kxe=s(Bv);Nfe=n(kxe,"STRONG",{});var Clt=s(Nfe);vNo=r(Clt,"albert"),Clt.forEach(t),TNo=r(kxe," \u2014 "),fO=n(kxe,"A",{href:!0});var wlt=s(fO);MNo=r(wlt,"AlbertForQuestionAnswering"),wlt.forEach(t),ENo=r(kxe," (ALBERT model)"),kxe.forEach(t),CNo=i(X),Pv=n(X,"LI",{});var Sxe=s(Pv);jfe=n(Sxe,"STRONG",{});var Alt=s(jfe);wNo=r(Alt,"bart"),Alt.forEach(t),ANo=r(Sxe," \u2014 "),gO=n(Sxe,"A",{href:!0});var ylt=s(gO);yNo=r(ylt,"BartForQuestionAnswering"),ylt.forEach(t),LNo=r(Sxe," (BART model)"),Sxe.forEach(t),xNo=i(X),Iv=n(X,"LI",{});var Rxe=s(Iv);Dfe=n(Rxe,"STRONG",{});var Llt=s(Dfe);$No=r(Llt,"bert"),Llt.forEach(t),kNo=r(Rxe," \u2014 "),hO=n(Rxe,"A",{href:!0});var xlt=s(hO);SNo=r(xlt,"BertForQuestionAnswering"),xlt.forEach(t),RNo=r(Rxe," (BERT model)"),Rxe.forEach(t),BNo=i(X),qv=n(X,"LI",{});var Bxe=s(qv);Gfe=n(Bxe,"STRONG",{});var $lt=s(Gfe);PNo=r($lt,"big_bird"),$lt.forEach(t),INo=r(Bxe," \u2014 "),uO=n(Bxe,"A",{href:!0});var klt=s(uO);qNo=r(klt,"BigBirdForQuestionAnswering"),klt.forEach(t),NNo=r(Bxe," (BigBird model)"),Bxe.forEach(t),jNo=i(X),Nv=n(X,"LI",{});var Pxe=s(Nv);Ofe=n(Pxe,"STRONG",{});var Slt=s(Ofe);DNo=r(Slt,"bigbird_pegasus"),Slt.forEach(t),GNo=r(Pxe," \u2014 "),pO=n(Pxe,"A",{href:!0});var Rlt=s(pO);ONo=r(Rlt,"BigBirdPegasusForQuestionAnswering"),Rlt.forEach(t),VNo=r(Pxe," (BigBirdPegasus model)"),Pxe.forEach(t),XNo=i(X),jv=n(X,"LI",{});var Ixe=s(jv);Vfe=n(Ixe,"STRONG",{});var Blt=s(Vfe);zNo=r(Blt,"camembert"),Blt.forEach(t),QNo=r(Ixe," \u2014 "),_O=n(Ixe,"A",{href:!0});var Plt=s(_O);WNo=r(Plt,"CamembertForQuestionAnswering"),Plt.forEach(t),HNo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),UNo=i(X),Dv=n(X,"LI",{});var qxe=s(Dv);Xfe=n(qxe,"STRONG",{});var Ilt=s(Xfe);JNo=r(Ilt,"canine"),Ilt.forEach(t),YNo=r(qxe," \u2014 "),bO=n(qxe,"A",{href:!0});var qlt=s(bO);KNo=r(qlt,"CanineForQuestionAnswering"),qlt.forEach(t),ZNo=r(qxe," (Canine model)"),qxe.forEach(t),ejo=i(X),Gv=n(X,"LI",{});var Nxe=s(Gv);zfe=n(Nxe,"STRONG",{});var Nlt=s(zfe);ojo=r(Nlt,"convbert"),Nlt.forEach(t),rjo=r(Nxe," \u2014 "),FO=n(Nxe,"A",{href:!0});var jlt=s(FO);tjo=r(jlt,"ConvBertForQuestionAnswering"),jlt.forEach(t),ajo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),njo=i(X),Ov=n(X,"LI",{});var jxe=s(Ov);Qfe=n(jxe,"STRONG",{});var Dlt=s(Qfe);sjo=r(Dlt,"data2vec-text"),Dlt.forEach(t),ljo=r(jxe," \u2014 "),vO=n(jxe,"A",{href:!0});var Glt=s(vO);ijo=r(Glt,"Data2VecTextForQuestionAnswering"),Glt.forEach(t),djo=r(jxe," (Data2VecText model)"),jxe.forEach(t),cjo=i(X),Vv=n(X,"LI",{});var Dxe=s(Vv);Wfe=n(Dxe,"STRONG",{});var Olt=s(Wfe);mjo=r(Olt,"deberta"),Olt.forEach(t),fjo=r(Dxe," \u2014 "),TO=n(Dxe,"A",{href:!0});var Vlt=s(TO);gjo=r(Vlt,"DebertaForQuestionAnswering"),Vlt.forEach(t),hjo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),ujo=i(X),Xv=n(X,"LI",{});var Gxe=s(Xv);Hfe=n(Gxe,"STRONG",{});var Xlt=s(Hfe);pjo=r(Xlt,"deberta-v2"),Xlt.forEach(t),_jo=r(Gxe," \u2014 "),MO=n(Gxe,"A",{href:!0});var zlt=s(MO);bjo=r(zlt,"DebertaV2ForQuestionAnswering"),zlt.forEach(t),Fjo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),vjo=i(X),zv=n(X,"LI",{});var Oxe=s(zv);Ufe=n(Oxe,"STRONG",{});var Qlt=s(Ufe);Tjo=r(Qlt,"distilbert"),Qlt.forEach(t),Mjo=r(Oxe," \u2014 "),EO=n(Oxe,"A",{href:!0});var Wlt=s(EO);Ejo=r(Wlt,"DistilBertForQuestionAnswering"),Wlt.forEach(t),Cjo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),wjo=i(X),Qv=n(X,"LI",{});var Vxe=s(Qv);Jfe=n(Vxe,"STRONG",{});var Hlt=s(Jfe);Ajo=r(Hlt,"electra"),Hlt.forEach(t),yjo=r(Vxe," \u2014 "),CO=n(Vxe,"A",{href:!0});var Ult=s(CO);Ljo=r(Ult,"ElectraForQuestionAnswering"),Ult.forEach(t),xjo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),$jo=i(X),Wv=n(X,"LI",{});var Xxe=s(Wv);Yfe=n(Xxe,"STRONG",{});var Jlt=s(Yfe);kjo=r(Jlt,"flaubert"),Jlt.forEach(t),Sjo=r(Xxe," \u2014 "),wO=n(Xxe,"A",{href:!0});var Ylt=s(wO);Rjo=r(Ylt,"FlaubertForQuestionAnsweringSimple"),Ylt.forEach(t),Bjo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),Pjo=i(X),Hv=n(X,"LI",{});var zxe=s(Hv);Kfe=n(zxe,"STRONG",{});var Klt=s(Kfe);Ijo=r(Klt,"fnet"),Klt.forEach(t),qjo=r(zxe," \u2014 "),AO=n(zxe,"A",{href:!0});var Zlt=s(AO);Njo=r(Zlt,"FNetForQuestionAnswering"),Zlt.forEach(t),jjo=r(zxe," (FNet model)"),zxe.forEach(t),Djo=i(X),Uv=n(X,"LI",{});var Qxe=s(Uv);Zfe=n(Qxe,"STRONG",{});var eit=s(Zfe);Gjo=r(eit,"funnel"),eit.forEach(t),Ojo=r(Qxe," \u2014 "),yO=n(Qxe,"A",{href:!0});var oit=s(yO);Vjo=r(oit,"FunnelForQuestionAnswering"),oit.forEach(t),Xjo=r(Qxe," (Funnel Transformer model)"),Qxe.forEach(t),zjo=i(X),Jv=n(X,"LI",{});var Wxe=s(Jv);ege=n(Wxe,"STRONG",{});var rit=s(ege);Qjo=r(rit,"gptj"),rit.forEach(t),Wjo=r(Wxe," \u2014 "),LO=n(Wxe,"A",{href:!0});var tit=s(LO);Hjo=r(tit,"GPTJForQuestionAnswering"),tit.forEach(t),Ujo=r(Wxe," (GPT-J model)"),Wxe.forEach(t),Jjo=i(X),Yv=n(X,"LI",{});var Hxe=s(Yv);oge=n(Hxe,"STRONG",{});var ait=s(oge);Yjo=r(ait,"ibert"),ait.forEach(t),Kjo=r(Hxe," \u2014 "),xO=n(Hxe,"A",{href:!0});var nit=s(xO);Zjo=r(nit,"IBertForQuestionAnswering"),nit.forEach(t),eDo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),oDo=i(X),Kv=n(X,"LI",{});var Uxe=s(Kv);rge=n(Uxe,"STRONG",{});var sit=s(rge);rDo=r(sit,"layoutlmv2"),sit.forEach(t),tDo=r(Uxe," \u2014 "),$O=n(Uxe,"A",{href:!0});var lit=s($O);aDo=r(lit,"LayoutLMv2ForQuestionAnswering"),lit.forEach(t),nDo=r(Uxe," (LayoutLMv2 model)"),Uxe.forEach(t),sDo=i(X),Zv=n(X,"LI",{});var Jxe=s(Zv);tge=n(Jxe,"STRONG",{});var iit=s(tge);lDo=r(iit,"led"),iit.forEach(t),iDo=r(Jxe," \u2014 "),kO=n(Jxe,"A",{href:!0});var dit=s(kO);dDo=r(dit,"LEDForQuestionAnswering"),dit.forEach(t),cDo=r(Jxe," (LED model)"),Jxe.forEach(t),mDo=i(X),e1=n(X,"LI",{});var Yxe=s(e1);age=n(Yxe,"STRONG",{});var cit=s(age);fDo=r(cit,"longformer"),cit.forEach(t),gDo=r(Yxe," \u2014 "),SO=n(Yxe,"A",{href:!0});var mit=s(SO);hDo=r(mit,"LongformerForQuestionAnswering"),mit.forEach(t),uDo=r(Yxe," (Longformer model)"),Yxe.forEach(t),pDo=i(X),o1=n(X,"LI",{});var Kxe=s(o1);nge=n(Kxe,"STRONG",{});var fit=s(nge);_Do=r(fit,"lxmert"),fit.forEach(t),bDo=r(Kxe," \u2014 "),RO=n(Kxe,"A",{href:!0});var git=s(RO);FDo=r(git,"LxmertForQuestionAnswering"),git.forEach(t),vDo=r(Kxe," (LXMERT model)"),Kxe.forEach(t),TDo=i(X),r1=n(X,"LI",{});var Zxe=s(r1);sge=n(Zxe,"STRONG",{});var hit=s(sge);MDo=r(hit,"mbart"),hit.forEach(t),EDo=r(Zxe," \u2014 "),BO=n(Zxe,"A",{href:!0});var uit=s(BO);CDo=r(uit,"MBartForQuestionAnswering"),uit.forEach(t),wDo=r(Zxe," (mBART model)"),Zxe.forEach(t),ADo=i(X),t1=n(X,"LI",{});var e7e=s(t1);lge=n(e7e,"STRONG",{});var pit=s(lge);yDo=r(pit,"megatron-bert"),pit.forEach(t),LDo=r(e7e," \u2014 "),PO=n(e7e,"A",{href:!0});var _it=s(PO);xDo=r(_it,"MegatronBertForQuestionAnswering"),_it.forEach(t),$Do=r(e7e," (MegatronBert model)"),e7e.forEach(t),kDo=i(X),a1=n(X,"LI",{});var o7e=s(a1);ige=n(o7e,"STRONG",{});var bit=s(ige);SDo=r(bit,"mobilebert"),bit.forEach(t),RDo=r(o7e," \u2014 "),IO=n(o7e,"A",{href:!0});var Fit=s(IO);BDo=r(Fit,"MobileBertForQuestionAnswering"),Fit.forEach(t),PDo=r(o7e," (MobileBERT model)"),o7e.forEach(t),IDo=i(X),n1=n(X,"LI",{});var r7e=s(n1);dge=n(r7e,"STRONG",{});var vit=s(dge);qDo=r(vit,"mpnet"),vit.forEach(t),NDo=r(r7e," \u2014 "),qO=n(r7e,"A",{href:!0});var Tit=s(qO);jDo=r(Tit,"MPNetForQuestionAnswering"),Tit.forEach(t),DDo=r(r7e," (MPNet model)"),r7e.forEach(t),GDo=i(X),s1=n(X,"LI",{});var t7e=s(s1);cge=n(t7e,"STRONG",{});var Mit=s(cge);ODo=r(Mit,"nystromformer"),Mit.forEach(t),VDo=r(t7e," \u2014 "),NO=n(t7e,"A",{href:!0});var Eit=s(NO);XDo=r(Eit,"NystromformerForQuestionAnswering"),Eit.forEach(t),zDo=r(t7e," (Nystromformer model)"),t7e.forEach(t),QDo=i(X),l1=n(X,"LI",{});var a7e=s(l1);mge=n(a7e,"STRONG",{});var Cit=s(mge);WDo=r(Cit,"qdqbert"),Cit.forEach(t),HDo=r(a7e," \u2014 "),jO=n(a7e,"A",{href:!0});var wit=s(jO);UDo=r(wit,"QDQBertForQuestionAnswering"),wit.forEach(t),JDo=r(a7e," (QDQBert model)"),a7e.forEach(t),YDo=i(X),i1=n(X,"LI",{});var n7e=s(i1);fge=n(n7e,"STRONG",{});var Ait=s(fge);KDo=r(Ait,"reformer"),Ait.forEach(t),ZDo=r(n7e," \u2014 "),DO=n(n7e,"A",{href:!0});var yit=s(DO);eGo=r(yit,"ReformerForQuestionAnswering"),yit.forEach(t),oGo=r(n7e," (Reformer model)"),n7e.forEach(t),rGo=i(X),d1=n(X,"LI",{});var s7e=s(d1);gge=n(s7e,"STRONG",{});var Lit=s(gge);tGo=r(Lit,"rembert"),Lit.forEach(t),aGo=r(s7e," \u2014 "),GO=n(s7e,"A",{href:!0});var xit=s(GO);nGo=r(xit,"RemBertForQuestionAnswering"),xit.forEach(t),sGo=r(s7e," (RemBERT model)"),s7e.forEach(t),lGo=i(X),c1=n(X,"LI",{});var l7e=s(c1);hge=n(l7e,"STRONG",{});var $it=s(hge);iGo=r($it,"roberta"),$it.forEach(t),dGo=r(l7e," \u2014 "),OO=n(l7e,"A",{href:!0});var kit=s(OO);cGo=r(kit,"RobertaForQuestionAnswering"),kit.forEach(t),mGo=r(l7e," (RoBERTa model)"),l7e.forEach(t),fGo=i(X),m1=n(X,"LI",{});var i7e=s(m1);uge=n(i7e,"STRONG",{});var Sit=s(uge);gGo=r(Sit,"roformer"),Sit.forEach(t),hGo=r(i7e," \u2014 "),VO=n(i7e,"A",{href:!0});var Rit=s(VO);uGo=r(Rit,"RoFormerForQuestionAnswering"),Rit.forEach(t),pGo=r(i7e," (RoFormer model)"),i7e.forEach(t),_Go=i(X),f1=n(X,"LI",{});var d7e=s(f1);pge=n(d7e,"STRONG",{});var Bit=s(pge);bGo=r(Bit,"splinter"),Bit.forEach(t),FGo=r(d7e," \u2014 "),XO=n(d7e,"A",{href:!0});var Pit=s(XO);vGo=r(Pit,"SplinterForQuestionAnswering"),Pit.forEach(t),TGo=r(d7e," (Splinter model)"),d7e.forEach(t),MGo=i(X),g1=n(X,"LI",{});var c7e=s(g1);_ge=n(c7e,"STRONG",{});var Iit=s(_ge);EGo=r(Iit,"squeezebert"),Iit.forEach(t),CGo=r(c7e," \u2014 "),zO=n(c7e,"A",{href:!0});var qit=s(zO);wGo=r(qit,"SqueezeBertForQuestionAnswering"),qit.forEach(t),AGo=r(c7e," (SqueezeBERT model)"),c7e.forEach(t),yGo=i(X),h1=n(X,"LI",{});var m7e=s(h1);bge=n(m7e,"STRONG",{});var Nit=s(bge);LGo=r(Nit,"xlm"),Nit.forEach(t),xGo=r(m7e," \u2014 "),QO=n(m7e,"A",{href:!0});var jit=s(QO);$Go=r(jit,"XLMForQuestionAnsweringSimple"),jit.forEach(t),kGo=r(m7e," (XLM model)"),m7e.forEach(t),SGo=i(X),u1=n(X,"LI",{});var f7e=s(u1);Fge=n(f7e,"STRONG",{});var Dit=s(Fge);RGo=r(Dit,"xlm-roberta"),Dit.forEach(t),BGo=r(f7e," \u2014 "),WO=n(f7e,"A",{href:!0});var Git=s(WO);PGo=r(Git,"XLMRobertaForQuestionAnswering"),Git.forEach(t),IGo=r(f7e," (XLM-RoBERTa model)"),f7e.forEach(t),qGo=i(X),p1=n(X,"LI",{});var g7e=s(p1);vge=n(g7e,"STRONG",{});var Oit=s(vge);NGo=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),jGo=r(g7e," \u2014 "),HO=n(g7e,"A",{href:!0});var Vit=s(HO);DGo=r(Vit,"XLMRobertaXLForQuestionAnswering"),Vit.forEach(t),GGo=r(g7e," (XLM-RoBERTa-XL model)"),g7e.forEach(t),OGo=i(X),_1=n(X,"LI",{});var h7e=s(_1);Tge=n(h7e,"STRONG",{});var Xit=s(Tge);VGo=r(Xit,"xlnet"),Xit.forEach(t),XGo=r(h7e," \u2014 "),UO=n(h7e,"A",{href:!0});var zit=s(UO);zGo=r(zit,"XLNetForQuestionAnsweringSimple"),zit.forEach(t),QGo=r(h7e," (XLNet model)"),h7e.forEach(t),WGo=i(X),b1=n(X,"LI",{});var u7e=s(b1);Mge=n(u7e,"STRONG",{});var Qit=s(Mge);HGo=r(Qit,"yoso"),Qit.forEach(t),UGo=r(u7e," \u2014 "),JO=n(u7e,"A",{href:!0});var Wit=s(JO);JGo=r(Wit,"YosoForQuestionAnswering"),Wit.forEach(t),YGo=r(u7e," (YOSO model)"),u7e.forEach(t),X.forEach(t),KGo=i(ia),F1=n(ia,"P",{});var p7e=s(F1);ZGo=r(p7e,"The model is set in evaluation mode by default using "),Ege=n(p7e,"CODE",{});var Hit=s(Ege);eOo=r(Hit,"model.eval()"),Hit.forEach(t),oOo=r(p7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(p7e,"CODE",{});var Uit=s(Cge);rOo=r(Uit,"model.train()"),Uit.forEach(t),p7e.forEach(t),tOo=i(ia),T(v1.$$.fragment,ia),ia.forEach(t),Us.forEach(t),DPe=i(m),Yi=n(m,"H2",{class:!0});var Xqe=s(Yi);T1=n(Xqe,"A",{id:!0,class:!0,href:!0});var Jit=s(T1);wge=n(Jit,"SPAN",{});var Yit=s(wge);T(cL.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),aOo=i(Xqe),Age=n(Xqe,"SPAN",{});var Kit=s(Age);nOo=r(Kit,"AutoModelForTableQuestionAnswering"),Kit.forEach(t),Xqe.forEach(t),GPe=i(m),No=n(m,"DIV",{class:!0});var Js=s(No);T(mL.$$.fragment,Js),sOo=i(Js),Ki=n(Js,"P",{});var mK=s(Ki);lOo=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=n(mK,"A",{href:!0});var Zit=s(YO);iOo=r(Zit,"from_pretrained()"),Zit.forEach(t),dOo=r(mK," class method or the "),KO=n(mK,"A",{href:!0});var edt=s(KO);cOo=r(edt,"from_config()"),edt.forEach(t),mOo=r(mK,` class
method.`),mK.forEach(t),fOo=i(Js),fL=n(Js,"P",{});var zqe=s(fL);gOo=r(zqe,"This class cannot be instantiated directly using "),yge=n(zqe,"CODE",{});var odt=s(yge);hOo=r(odt,"__init__()"),odt.forEach(t),uOo=r(zqe," (throws an error)."),zqe.forEach(t),pOo=i(Js),mt=n(Js,"DIV",{class:!0});var m0=s(mt);T(gL.$$.fragment,m0),_Oo=i(m0),Lge=n(m0,"P",{});var rdt=s(Lge);bOo=r(rdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rdt.forEach(t),FOo=i(m0),Zi=n(m0,"P",{});var fK=s(Zi);vOo=r(fK,`Note:
Loading a model from its configuration file does `),xge=n(fK,"STRONG",{});var tdt=s(xge);TOo=r(tdt,"not"),tdt.forEach(t),MOo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(fK,"A",{href:!0});var adt=s(ZO);EOo=r(adt,"from_pretrained()"),adt.forEach(t),COo=r(fK," to load the model weights."),fK.forEach(t),wOo=i(m0),T(M1.$$.fragment,m0),m0.forEach(t),AOo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(hL.$$.fragment,da),yOo=i(da),$ge=n(da,"P",{});var ndt=s($ge);LOo=r(ndt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ndt.forEach(t),xOo=i(da),Ia=n(da,"P",{});var f0=s(Ia);$Oo=r(f0,"The model class to instantiate is selected based on the "),kge=n(f0,"CODE",{});var sdt=s(kge);kOo=r(sdt,"model_type"),sdt.forEach(t),SOo=r(f0,` property of the config object (either
passed as an argument or loaded from `),Sge=n(f0,"CODE",{});var ldt=s(Sge);ROo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),BOo=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(f0,"CODE",{});var idt=s(Rge);POo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),IOo=r(f0,":"),f0.forEach(t),qOo=i(da),Bge=n(da,"UL",{});var ddt=s(Bge);E1=n(ddt,"LI",{});var _7e=s(E1);Pge=n(_7e,"STRONG",{});var cdt=s(Pge);NOo=r(cdt,"tapas"),cdt.forEach(t),jOo=r(_7e," \u2014 "),eV=n(_7e,"A",{href:!0});var mdt=s(eV);DOo=r(mdt,"TapasForQuestionAnswering"),mdt.forEach(t),GOo=r(_7e," (TAPAS model)"),_7e.forEach(t),ddt.forEach(t),OOo=i(da),C1=n(da,"P",{});var b7e=s(C1);VOo=r(b7e,"The model is set in evaluation mode by default using "),Ige=n(b7e,"CODE",{});var fdt=s(Ige);XOo=r(fdt,"model.eval()"),fdt.forEach(t),zOo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(b7e,"CODE",{});var gdt=s(qge);QOo=r(gdt,"model.train()"),gdt.forEach(t),b7e.forEach(t),WOo=i(da),T(w1.$$.fragment,da),da.forEach(t),Js.forEach(t),OPe=i(m),ed=n(m,"H2",{class:!0});var Qqe=s(ed);A1=n(Qqe,"A",{id:!0,class:!0,href:!0});var hdt=s(A1);Nge=n(hdt,"SPAN",{});var udt=s(Nge);T(uL.$$.fragment,udt),udt.forEach(t),hdt.forEach(t),HOo=i(Qqe),jge=n(Qqe,"SPAN",{});var pdt=s(jge);UOo=r(pdt,"AutoModelForImageClassification"),pdt.forEach(t),Qqe.forEach(t),VPe=i(m),jo=n(m,"DIV",{class:!0});var Ys=s(jo);T(pL.$$.fragment,Ys),JOo=i(Ys),od=n(Ys,"P",{});var gK=s(od);YOo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=n(gK,"A",{href:!0});var _dt=s(oV);KOo=r(_dt,"from_pretrained()"),_dt.forEach(t),ZOo=r(gK," class method or the "),rV=n(gK,"A",{href:!0});var bdt=s(rV);eVo=r(bdt,"from_config()"),bdt.forEach(t),oVo=r(gK,` class
method.`),gK.forEach(t),rVo=i(Ys),_L=n(Ys,"P",{});var Wqe=s(_L);tVo=r(Wqe,"This class cannot be instantiated directly using "),Dge=n(Wqe,"CODE",{});var Fdt=s(Dge);aVo=r(Fdt,"__init__()"),Fdt.forEach(t),nVo=r(Wqe," (throws an error)."),Wqe.forEach(t),sVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var g0=s(ft);T(bL.$$.fragment,g0),lVo=i(g0),Gge=n(g0,"P",{});var vdt=s(Gge);iVo=r(vdt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vdt.forEach(t),dVo=i(g0),rd=n(g0,"P",{});var hK=s(rd);cVo=r(hK,`Note:
Loading a model from its configuration file does `),Oge=n(hK,"STRONG",{});var Tdt=s(Oge);mVo=r(Tdt,"not"),Tdt.forEach(t),fVo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(hK,"A",{href:!0});var Mdt=s(tV);gVo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),hVo=r(hK," to load the model weights."),hK.forEach(t),uVo=i(g0),T(y1.$$.fragment,g0),g0.forEach(t),pVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(FL.$$.fragment,ca),_Vo=i(ca),Vge=n(ca,"P",{});var Edt=s(Vge);bVo=r(Edt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Edt.forEach(t),FVo=i(ca),qa=n(ca,"P",{});var h0=s(qa);vVo=r(h0,"The model class to instantiate is selected based on the "),Xge=n(h0,"CODE",{});var Cdt=s(Xge);TVo=r(Cdt,"model_type"),Cdt.forEach(t),MVo=r(h0,` property of the config object (either
passed as an argument or loaded from `),zge=n(h0,"CODE",{});var wdt=s(zge);EVo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),CVo=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(h0,"CODE",{});var Adt=s(Qge);wVo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),AVo=r(h0,":"),h0.forEach(t),yVo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);L1=n(Ee,"LI",{});var F7e=s(L1);Wge=n(F7e,"STRONG",{});var ydt=s(Wge);LVo=r(ydt,"beit"),ydt.forEach(t),xVo=r(F7e," \u2014 "),aV=n(F7e,"A",{href:!0});var Ldt=s(aV);$Vo=r(Ldt,"BeitForImageClassification"),Ldt.forEach(t),kVo=r(F7e," (BEiT model)"),F7e.forEach(t),SVo=i(Ee),x1=n(Ee,"LI",{});var v7e=s(x1);Hge=n(v7e,"STRONG",{});var xdt=s(Hge);RVo=r(xdt,"convnext"),xdt.forEach(t),BVo=r(v7e," \u2014 "),nV=n(v7e,"A",{href:!0});var $dt=s(nV);PVo=r($dt,"ConvNextForImageClassification"),$dt.forEach(t),IVo=r(v7e," (ConvNext model)"),v7e.forEach(t),qVo=i(Ee),$1=n(Ee,"LI",{});var T7e=s($1);Uge=n(T7e,"STRONG",{});var kdt=s(Uge);NVo=r(kdt,"data2vec-vision"),kdt.forEach(t),jVo=r(T7e," \u2014 "),sV=n(T7e,"A",{href:!0});var Sdt=s(sV);DVo=r(Sdt,"Data2VecVisionForImageClassification"),Sdt.forEach(t),GVo=r(T7e," (Data2VecVision model)"),T7e.forEach(t),OVo=i(Ee),Rs=n(Ee,"LI",{});var t$=s(Rs);Jge=n(t$,"STRONG",{});var Rdt=s(Jge);VVo=r(Rdt,"deit"),Rdt.forEach(t),XVo=r(t$," \u2014 "),lV=n(t$,"A",{href:!0});var Bdt=s(lV);zVo=r(Bdt,"DeiTForImageClassification"),Bdt.forEach(t),QVo=r(t$," or "),iV=n(t$,"A",{href:!0});var Pdt=s(iV);WVo=r(Pdt,"DeiTForImageClassificationWithTeacher"),Pdt.forEach(t),HVo=r(t$," (DeiT model)"),t$.forEach(t),UVo=i(Ee),k1=n(Ee,"LI",{});var M7e=s(k1);Yge=n(M7e,"STRONG",{});var Idt=s(Yge);JVo=r(Idt,"imagegpt"),Idt.forEach(t),YVo=r(M7e," \u2014 "),dV=n(M7e,"A",{href:!0});var qdt=s(dV);KVo=r(qdt,"ImageGPTForImageClassification"),qdt.forEach(t),ZVo=r(M7e," (ImageGPT model)"),M7e.forEach(t),eXo=i(Ee),gt=n(Ee,"LI",{});var cm=s(gt);Kge=n(cm,"STRONG",{});var Ndt=s(Kge);oXo=r(Ndt,"perceiver"),Ndt.forEach(t),rXo=r(cm," \u2014 "),cV=n(cm,"A",{href:!0});var jdt=s(cV);tXo=r(jdt,"PerceiverForImageClassificationLearned"),jdt.forEach(t),aXo=r(cm," or "),mV=n(cm,"A",{href:!0});var Ddt=s(mV);nXo=r(Ddt,"PerceiverForImageClassificationFourier"),Ddt.forEach(t),sXo=r(cm," or "),fV=n(cm,"A",{href:!0});var Gdt=s(fV);lXo=r(Gdt,"PerceiverForImageClassificationConvProcessing"),Gdt.forEach(t),iXo=r(cm," (Perceiver model)"),cm.forEach(t),dXo=i(Ee),S1=n(Ee,"LI",{});var E7e=s(S1);Zge=n(E7e,"STRONG",{});var Odt=s(Zge);cXo=r(Odt,"poolformer"),Odt.forEach(t),mXo=r(E7e," \u2014 "),gV=n(E7e,"A",{href:!0});var Vdt=s(gV);fXo=r(Vdt,"PoolFormerForImageClassification"),Vdt.forEach(t),gXo=r(E7e," (PoolFormer model)"),E7e.forEach(t),hXo=i(Ee),R1=n(Ee,"LI",{});var C7e=s(R1);ehe=n(C7e,"STRONG",{});var Xdt=s(ehe);uXo=r(Xdt,"regnet"),Xdt.forEach(t),pXo=r(C7e," \u2014 "),hV=n(C7e,"A",{href:!0});var zdt=s(hV);_Xo=r(zdt,"RegNetForImageClassification"),zdt.forEach(t),bXo=r(C7e," (RegNet model)"),C7e.forEach(t),FXo=i(Ee),B1=n(Ee,"LI",{});var w7e=s(B1);ohe=n(w7e,"STRONG",{});var Qdt=s(ohe);vXo=r(Qdt,"resnet"),Qdt.forEach(t),TXo=r(w7e," \u2014 "),uV=n(w7e,"A",{href:!0});var Wdt=s(uV);MXo=r(Wdt,"ResNetForImageClassification"),Wdt.forEach(t),EXo=r(w7e," (ResNet model)"),w7e.forEach(t),CXo=i(Ee),P1=n(Ee,"LI",{});var A7e=s(P1);rhe=n(A7e,"STRONG",{});var Hdt=s(rhe);wXo=r(Hdt,"segformer"),Hdt.forEach(t),AXo=r(A7e," \u2014 "),pV=n(A7e,"A",{href:!0});var Udt=s(pV);yXo=r(Udt,"SegformerForImageClassification"),Udt.forEach(t),LXo=r(A7e," (SegFormer model)"),A7e.forEach(t),xXo=i(Ee),I1=n(Ee,"LI",{});var y7e=s(I1);the=n(y7e,"STRONG",{});var Jdt=s(the);$Xo=r(Jdt,"swin"),Jdt.forEach(t),kXo=r(y7e," \u2014 "),_V=n(y7e,"A",{href:!0});var Ydt=s(_V);SXo=r(Ydt,"SwinForImageClassification"),Ydt.forEach(t),RXo=r(y7e," (Swin model)"),y7e.forEach(t),BXo=i(Ee),q1=n(Ee,"LI",{});var L7e=s(q1);ahe=n(L7e,"STRONG",{});var Kdt=s(ahe);PXo=r(Kdt,"van"),Kdt.forEach(t),IXo=r(L7e," \u2014 "),bV=n(L7e,"A",{href:!0});var Zdt=s(bV);qXo=r(Zdt,"VanForImageClassification"),Zdt.forEach(t),NXo=r(L7e," (VAN model)"),L7e.forEach(t),jXo=i(Ee),N1=n(Ee,"LI",{});var x7e=s(N1);nhe=n(x7e,"STRONG",{});var ect=s(nhe);DXo=r(ect,"vit"),ect.forEach(t),GXo=r(x7e," \u2014 "),FV=n(x7e,"A",{href:!0});var oct=s(FV);OXo=r(oct,"ViTForImageClassification"),oct.forEach(t),VXo=r(x7e," (ViT model)"),x7e.forEach(t),Ee.forEach(t),XXo=i(ca),j1=n(ca,"P",{});var $7e=s(j1);zXo=r($7e,"The model is set in evaluation mode by default using "),she=n($7e,"CODE",{});var rct=s(she);QXo=r(rct,"model.eval()"),rct.forEach(t),WXo=r($7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n($7e,"CODE",{});var tct=s(lhe);HXo=r(tct,"model.train()"),tct.forEach(t),$7e.forEach(t),UXo=i(ca),T(D1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),XPe=i(m),td=n(m,"H2",{class:!0});var Hqe=s(td);G1=n(Hqe,"A",{id:!0,class:!0,href:!0});var act=s(G1);ihe=n(act,"SPAN",{});var nct=s(ihe);T(vL.$$.fragment,nct),nct.forEach(t),act.forEach(t),JXo=i(Hqe),dhe=n(Hqe,"SPAN",{});var sct=s(dhe);YXo=r(sct,"AutoModelForVision2Seq"),sct.forEach(t),Hqe.forEach(t),zPe=i(m),Do=n(m,"DIV",{class:!0});var Ks=s(Do);T(TL.$$.fragment,Ks),KXo=i(Ks),ad=n(Ks,"P",{});var uK=s(ad);ZXo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vV=n(uK,"A",{href:!0});var lct=s(vV);ezo=r(lct,"from_pretrained()"),lct.forEach(t),ozo=r(uK," class method or the "),TV=n(uK,"A",{href:!0});var ict=s(TV);rzo=r(ict,"from_config()"),ict.forEach(t),tzo=r(uK,` class
method.`),uK.forEach(t),azo=i(Ks),ML=n(Ks,"P",{});var Uqe=s(ML);nzo=r(Uqe,"This class cannot be instantiated directly using "),che=n(Uqe,"CODE",{});var dct=s(che);szo=r(dct,"__init__()"),dct.forEach(t),lzo=r(Uqe," (throws an error)."),Uqe.forEach(t),izo=i(Ks),ht=n(Ks,"DIV",{class:!0});var u0=s(ht);T(EL.$$.fragment,u0),dzo=i(u0),mhe=n(u0,"P",{});var cct=s(mhe);czo=r(cct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cct.forEach(t),mzo=i(u0),nd=n(u0,"P",{});var pK=s(nd);fzo=r(pK,`Note:
Loading a model from its configuration file does `),fhe=n(pK,"STRONG",{});var mct=s(fhe);gzo=r(mct,"not"),mct.forEach(t),hzo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(pK,"A",{href:!0});var fct=s(MV);uzo=r(fct,"from_pretrained()"),fct.forEach(t),pzo=r(pK," to load the model weights."),pK.forEach(t),_zo=i(u0),T(O1.$$.fragment,u0),u0.forEach(t),bzo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(CL.$$.fragment,ma),Fzo=i(ma),ghe=n(ma,"P",{});var gct=s(ghe);vzo=r(gct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gct.forEach(t),Tzo=i(ma),Na=n(ma,"P",{});var p0=s(Na);Mzo=r(p0,"The model class to instantiate is selected based on the "),hhe=n(p0,"CODE",{});var hct=s(hhe);Ezo=r(hct,"model_type"),hct.forEach(t),Czo=r(p0,` property of the config object (either
passed as an argument or loaded from `),uhe=n(p0,"CODE",{});var uct=s(uhe);wzo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Azo=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(p0,"CODE",{});var pct=s(phe);yzo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),Lzo=r(p0,":"),p0.forEach(t),xzo=i(ma),_he=n(ma,"UL",{});var _ct=s(_he);V1=n(_ct,"LI",{});var k7e=s(V1);bhe=n(k7e,"STRONG",{});var bct=s(bhe);$zo=r(bct,"vision-encoder-decoder"),bct.forEach(t),kzo=r(k7e," \u2014 "),EV=n(k7e,"A",{href:!0});var Fct=s(EV);Szo=r(Fct,"VisionEncoderDecoderModel"),Fct.forEach(t),Rzo=r(k7e," (Vision Encoder decoder model)"),k7e.forEach(t),_ct.forEach(t),Bzo=i(ma),X1=n(ma,"P",{});var S7e=s(X1);Pzo=r(S7e,"The model is set in evaluation mode by default using "),Fhe=n(S7e,"CODE",{});var vct=s(Fhe);Izo=r(vct,"model.eval()"),vct.forEach(t),qzo=r(S7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(S7e,"CODE",{});var Tct=s(vhe);Nzo=r(Tct,"model.train()"),Tct.forEach(t),S7e.forEach(t),jzo=i(ma),T(z1.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),QPe=i(m),sd=n(m,"H2",{class:!0});var Jqe=s(sd);Q1=n(Jqe,"A",{id:!0,class:!0,href:!0});var Mct=s(Q1);The=n(Mct,"SPAN",{});var Ect=s(The);T(wL.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),Dzo=i(Jqe),Mhe=n(Jqe,"SPAN",{});var Cct=s(Mhe);Gzo=r(Cct,"AutoModelForAudioClassification"),Cct.forEach(t),Jqe.forEach(t),WPe=i(m),Go=n(m,"DIV",{class:!0});var Zs=s(Go);T(AL.$$.fragment,Zs),Ozo=i(Zs),ld=n(Zs,"P",{});var _K=s(ld);Vzo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=n(_K,"A",{href:!0});var wct=s(CV);Xzo=r(wct,"from_pretrained()"),wct.forEach(t),zzo=r(_K," class method or the "),wV=n(_K,"A",{href:!0});var Act=s(wV);Qzo=r(Act,"from_config()"),Act.forEach(t),Wzo=r(_K,` class
method.`),_K.forEach(t),Hzo=i(Zs),yL=n(Zs,"P",{});var Yqe=s(yL);Uzo=r(Yqe,"This class cannot be instantiated directly using "),Ehe=n(Yqe,"CODE",{});var yct=s(Ehe);Jzo=r(yct,"__init__()"),yct.forEach(t),Yzo=r(Yqe," (throws an error)."),Yqe.forEach(t),Kzo=i(Zs),ut=n(Zs,"DIV",{class:!0});var _0=s(ut);T(LL.$$.fragment,_0),Zzo=i(_0),Che=n(_0,"P",{});var Lct=s(Che);eQo=r(Lct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lct.forEach(t),oQo=i(_0),id=n(_0,"P",{});var bK=s(id);rQo=r(bK,`Note:
Loading a model from its configuration file does `),whe=n(bK,"STRONG",{});var xct=s(whe);tQo=r(xct,"not"),xct.forEach(t),aQo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(bK,"A",{href:!0});var $ct=s(AV);nQo=r($ct,"from_pretrained()"),$ct.forEach(t),sQo=r(bK," to load the model weights."),bK.forEach(t),lQo=i(_0),T(W1.$$.fragment,_0),_0.forEach(t),iQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(xL.$$.fragment,fa),dQo=i(fa),Ahe=n(fa,"P",{});var kct=s(Ahe);cQo=r(kct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kct.forEach(t),mQo=i(fa),ja=n(fa,"P",{});var b0=s(ja);fQo=r(b0,"The model class to instantiate is selected based on the "),yhe=n(b0,"CODE",{});var Sct=s(yhe);gQo=r(Sct,"model_type"),Sct.forEach(t),hQo=r(b0,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(b0,"CODE",{});var Rct=s(Lhe);uQo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),pQo=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(b0,"CODE",{});var Bct=s(xhe);_Qo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),bQo=r(b0,":"),b0.forEach(t),FQo=i(fa),Ne=n(fa,"UL",{});var bo=s(Ne);H1=n(bo,"LI",{});var R7e=s(H1);$he=n(R7e,"STRONG",{});var Pct=s($he);vQo=r(Pct,"data2vec-audio"),Pct.forEach(t),TQo=r(R7e," \u2014 "),yV=n(R7e,"A",{href:!0});var Ict=s(yV);MQo=r(Ict,"Data2VecAudioForSequenceClassification"),Ict.forEach(t),EQo=r(R7e," (Data2VecAudio model)"),R7e.forEach(t),CQo=i(bo),U1=n(bo,"LI",{});var B7e=s(U1);khe=n(B7e,"STRONG",{});var qct=s(khe);wQo=r(qct,"hubert"),qct.forEach(t),AQo=r(B7e," \u2014 "),LV=n(B7e,"A",{href:!0});var Nct=s(LV);yQo=r(Nct,"HubertForSequenceClassification"),Nct.forEach(t),LQo=r(B7e," (Hubert model)"),B7e.forEach(t),xQo=i(bo),J1=n(bo,"LI",{});var P7e=s(J1);She=n(P7e,"STRONG",{});var jct=s(She);$Qo=r(jct,"sew"),jct.forEach(t),kQo=r(P7e," \u2014 "),xV=n(P7e,"A",{href:!0});var Dct=s(xV);SQo=r(Dct,"SEWForSequenceClassification"),Dct.forEach(t),RQo=r(P7e," (SEW model)"),P7e.forEach(t),BQo=i(bo),Y1=n(bo,"LI",{});var I7e=s(Y1);Rhe=n(I7e,"STRONG",{});var Gct=s(Rhe);PQo=r(Gct,"sew-d"),Gct.forEach(t),IQo=r(I7e," \u2014 "),$V=n(I7e,"A",{href:!0});var Oct=s($V);qQo=r(Oct,"SEWDForSequenceClassification"),Oct.forEach(t),NQo=r(I7e," (SEW-D model)"),I7e.forEach(t),jQo=i(bo),K1=n(bo,"LI",{});var q7e=s(K1);Bhe=n(q7e,"STRONG",{});var Vct=s(Bhe);DQo=r(Vct,"unispeech"),Vct.forEach(t),GQo=r(q7e," \u2014 "),kV=n(q7e,"A",{href:!0});var Xct=s(kV);OQo=r(Xct,"UniSpeechForSequenceClassification"),Xct.forEach(t),VQo=r(q7e," (UniSpeech model)"),q7e.forEach(t),XQo=i(bo),Z1=n(bo,"LI",{});var N7e=s(Z1);Phe=n(N7e,"STRONG",{});var zct=s(Phe);zQo=r(zct,"unispeech-sat"),zct.forEach(t),QQo=r(N7e," \u2014 "),SV=n(N7e,"A",{href:!0});var Qct=s(SV);WQo=r(Qct,"UniSpeechSatForSequenceClassification"),Qct.forEach(t),HQo=r(N7e," (UniSpeechSat model)"),N7e.forEach(t),UQo=i(bo),eT=n(bo,"LI",{});var j7e=s(eT);Ihe=n(j7e,"STRONG",{});var Wct=s(Ihe);JQo=r(Wct,"wav2vec2"),Wct.forEach(t),YQo=r(j7e," \u2014 "),RV=n(j7e,"A",{href:!0});var Hct=s(RV);KQo=r(Hct,"Wav2Vec2ForSequenceClassification"),Hct.forEach(t),ZQo=r(j7e," (Wav2Vec2 model)"),j7e.forEach(t),eWo=i(bo),oT=n(bo,"LI",{});var D7e=s(oT);qhe=n(D7e,"STRONG",{});var Uct=s(qhe);oWo=r(Uct,"wavlm"),Uct.forEach(t),rWo=r(D7e," \u2014 "),BV=n(D7e,"A",{href:!0});var Jct=s(BV);tWo=r(Jct,"WavLMForSequenceClassification"),Jct.forEach(t),aWo=r(D7e," (WavLM model)"),D7e.forEach(t),bo.forEach(t),nWo=i(fa),rT=n(fa,"P",{});var G7e=s(rT);sWo=r(G7e,"The model is set in evaluation mode by default using "),Nhe=n(G7e,"CODE",{});var Yct=s(Nhe);lWo=r(Yct,"model.eval()"),Yct.forEach(t),iWo=r(G7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(G7e,"CODE",{});var Kct=s(jhe);dWo=r(Kct,"model.train()"),Kct.forEach(t),G7e.forEach(t),cWo=i(fa),T(tT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),HPe=i(m),dd=n(m,"H2",{class:!0});var Kqe=s(dd);aT=n(Kqe,"A",{id:!0,class:!0,href:!0});var Zct=s(aT);Dhe=n(Zct,"SPAN",{});var emt=s(Dhe);T($L.$$.fragment,emt),emt.forEach(t),Zct.forEach(t),mWo=i(Kqe),Ghe=n(Kqe,"SPAN",{});var omt=s(Ghe);fWo=r(omt,"AutoModelForAudioFrameClassification"),omt.forEach(t),Kqe.forEach(t),UPe=i(m),Oo=n(m,"DIV",{class:!0});var el=s(Oo);T(kL.$$.fragment,el),gWo=i(el),cd=n(el,"P",{});var FK=s(cd);hWo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=n(FK,"A",{href:!0});var rmt=s(PV);uWo=r(rmt,"from_pretrained()"),rmt.forEach(t),pWo=r(FK," class method or the "),IV=n(FK,"A",{href:!0});var tmt=s(IV);_Wo=r(tmt,"from_config()"),tmt.forEach(t),bWo=r(FK,` class
method.`),FK.forEach(t),FWo=i(el),SL=n(el,"P",{});var Zqe=s(SL);vWo=r(Zqe,"This class cannot be instantiated directly using "),Ohe=n(Zqe,"CODE",{});var amt=s(Ohe);TWo=r(amt,"__init__()"),amt.forEach(t),MWo=r(Zqe," (throws an error)."),Zqe.forEach(t),EWo=i(el),pt=n(el,"DIV",{class:!0});var F0=s(pt);T(RL.$$.fragment,F0),CWo=i(F0),Vhe=n(F0,"P",{});var nmt=s(Vhe);wWo=r(nmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nmt.forEach(t),AWo=i(F0),md=n(F0,"P",{});var vK=s(md);yWo=r(vK,`Note:
Loading a model from its configuration file does `),Xhe=n(vK,"STRONG",{});var smt=s(Xhe);LWo=r(smt,"not"),smt.forEach(t),xWo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(vK,"A",{href:!0});var lmt=s(qV);$Wo=r(lmt,"from_pretrained()"),lmt.forEach(t),kWo=r(vK," to load the model weights."),vK.forEach(t),SWo=i(F0),T(nT.$$.fragment,F0),F0.forEach(t),RWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(BL.$$.fragment,ga),BWo=i(ga),zhe=n(ga,"P",{});var imt=s(zhe);PWo=r(imt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),imt.forEach(t),IWo=i(ga),Da=n(ga,"P",{});var v0=s(Da);qWo=r(v0,"The model class to instantiate is selected based on the "),Qhe=n(v0,"CODE",{});var dmt=s(Qhe);NWo=r(dmt,"model_type"),dmt.forEach(t),jWo=r(v0,` property of the config object (either
passed as an argument or loaded from `),Whe=n(v0,"CODE",{});var cmt=s(Whe);DWo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),GWo=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(v0,"CODE",{});var mmt=s(Hhe);OWo=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),VWo=r(v0,":"),v0.forEach(t),XWo=i(ga),Ga=n(ga,"UL",{});var T0=s(Ga);sT=n(T0,"LI",{});var O7e=s(sT);Uhe=n(O7e,"STRONG",{});var fmt=s(Uhe);zWo=r(fmt,"data2vec-audio"),fmt.forEach(t),QWo=r(O7e," \u2014 "),NV=n(O7e,"A",{href:!0});var gmt=s(NV);WWo=r(gmt,"Data2VecAudioForAudioFrameClassification"),gmt.forEach(t),HWo=r(O7e," (Data2VecAudio model)"),O7e.forEach(t),UWo=i(T0),lT=n(T0,"LI",{});var V7e=s(lT);Jhe=n(V7e,"STRONG",{});var hmt=s(Jhe);JWo=r(hmt,"unispeech-sat"),hmt.forEach(t),YWo=r(V7e," \u2014 "),jV=n(V7e,"A",{href:!0});var umt=s(jV);KWo=r(umt,"UniSpeechSatForAudioFrameClassification"),umt.forEach(t),ZWo=r(V7e," (UniSpeechSat model)"),V7e.forEach(t),eHo=i(T0),iT=n(T0,"LI",{});var X7e=s(iT);Yhe=n(X7e,"STRONG",{});var pmt=s(Yhe);oHo=r(pmt,"wav2vec2"),pmt.forEach(t),rHo=r(X7e," \u2014 "),DV=n(X7e,"A",{href:!0});var _mt=s(DV);tHo=r(_mt,"Wav2Vec2ForAudioFrameClassification"),_mt.forEach(t),aHo=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),nHo=i(T0),dT=n(T0,"LI",{});var z7e=s(dT);Khe=n(z7e,"STRONG",{});var bmt=s(Khe);sHo=r(bmt,"wavlm"),bmt.forEach(t),lHo=r(z7e," \u2014 "),GV=n(z7e,"A",{href:!0});var Fmt=s(GV);iHo=r(Fmt,"WavLMForAudioFrameClassification"),Fmt.forEach(t),dHo=r(z7e," (WavLM model)"),z7e.forEach(t),T0.forEach(t),cHo=i(ga),cT=n(ga,"P",{});var Q7e=s(cT);mHo=r(Q7e,"The model is set in evaluation mode by default using "),Zhe=n(Q7e,"CODE",{});var vmt=s(Zhe);fHo=r(vmt,"model.eval()"),vmt.forEach(t),gHo=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(Q7e,"CODE",{});var Tmt=s(eue);hHo=r(Tmt,"model.train()"),Tmt.forEach(t),Q7e.forEach(t),uHo=i(ga),T(mT.$$.fragment,ga),ga.forEach(t),el.forEach(t),JPe=i(m),fd=n(m,"H2",{class:!0});var eNe=s(fd);fT=n(eNe,"A",{id:!0,class:!0,href:!0});var Mmt=s(fT);oue=n(Mmt,"SPAN",{});var Emt=s(oue);T(PL.$$.fragment,Emt),Emt.forEach(t),Mmt.forEach(t),pHo=i(eNe),rue=n(eNe,"SPAN",{});var Cmt=s(rue);_Ho=r(Cmt,"AutoModelForCTC"),Cmt.forEach(t),eNe.forEach(t),YPe=i(m),Vo=n(m,"DIV",{class:!0});var ol=s(Vo);T(IL.$$.fragment,ol),bHo=i(ol),gd=n(ol,"P",{});var TK=s(gd);FHo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=n(TK,"A",{href:!0});var wmt=s(OV);vHo=r(wmt,"from_pretrained()"),wmt.forEach(t),THo=r(TK," class method or the "),VV=n(TK,"A",{href:!0});var Amt=s(VV);MHo=r(Amt,"from_config()"),Amt.forEach(t),EHo=r(TK,` class
method.`),TK.forEach(t),CHo=i(ol),qL=n(ol,"P",{});var oNe=s(qL);wHo=r(oNe,"This class cannot be instantiated directly using "),tue=n(oNe,"CODE",{});var ymt=s(tue);AHo=r(ymt,"__init__()"),ymt.forEach(t),yHo=r(oNe," (throws an error)."),oNe.forEach(t),LHo=i(ol),_t=n(ol,"DIV",{class:!0});var M0=s(_t);T(NL.$$.fragment,M0),xHo=i(M0),aue=n(M0,"P",{});var Lmt=s(aue);$Ho=r(Lmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lmt.forEach(t),kHo=i(M0),hd=n(M0,"P",{});var MK=s(hd);SHo=r(MK,`Note:
Loading a model from its configuration file does `),nue=n(MK,"STRONG",{});var xmt=s(nue);RHo=r(xmt,"not"),xmt.forEach(t),BHo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(MK,"A",{href:!0});var $mt=s(XV);PHo=r($mt,"from_pretrained()"),$mt.forEach(t),IHo=r(MK," to load the model weights."),MK.forEach(t),qHo=i(M0),T(gT.$$.fragment,M0),M0.forEach(t),NHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(jL.$$.fragment,ha),jHo=i(ha),sue=n(ha,"P",{});var kmt=s(sue);DHo=r(kmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kmt.forEach(t),GHo=i(ha),Oa=n(ha,"P",{});var E0=s(Oa);OHo=r(E0,"The model class to instantiate is selected based on the "),lue=n(E0,"CODE",{});var Smt=s(lue);VHo=r(Smt,"model_type"),Smt.forEach(t),XHo=r(E0,` property of the config object (either
passed as an argument or loaded from `),iue=n(E0,"CODE",{});var Rmt=s(iue);zHo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),QHo=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(E0,"CODE",{});var Bmt=s(due);WHo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),HHo=r(E0,":"),E0.forEach(t),UHo=i(ha),je=n(ha,"UL",{});var Fo=s(je);hT=n(Fo,"LI",{});var W7e=s(hT);cue=n(W7e,"STRONG",{});var Pmt=s(cue);JHo=r(Pmt,"data2vec-audio"),Pmt.forEach(t),YHo=r(W7e," \u2014 "),zV=n(W7e,"A",{href:!0});var Imt=s(zV);KHo=r(Imt,"Data2VecAudioForCTC"),Imt.forEach(t),ZHo=r(W7e," (Data2VecAudio model)"),W7e.forEach(t),eUo=i(Fo),uT=n(Fo,"LI",{});var H7e=s(uT);mue=n(H7e,"STRONG",{});var qmt=s(mue);oUo=r(qmt,"hubert"),qmt.forEach(t),rUo=r(H7e," \u2014 "),QV=n(H7e,"A",{href:!0});var Nmt=s(QV);tUo=r(Nmt,"HubertForCTC"),Nmt.forEach(t),aUo=r(H7e," (Hubert model)"),H7e.forEach(t),nUo=i(Fo),pT=n(Fo,"LI",{});var U7e=s(pT);fue=n(U7e,"STRONG",{});var jmt=s(fue);sUo=r(jmt,"sew"),jmt.forEach(t),lUo=r(U7e," \u2014 "),WV=n(U7e,"A",{href:!0});var Dmt=s(WV);iUo=r(Dmt,"SEWForCTC"),Dmt.forEach(t),dUo=r(U7e," (SEW model)"),U7e.forEach(t),cUo=i(Fo),_T=n(Fo,"LI",{});var J7e=s(_T);gue=n(J7e,"STRONG",{});var Gmt=s(gue);mUo=r(Gmt,"sew-d"),Gmt.forEach(t),fUo=r(J7e," \u2014 "),HV=n(J7e,"A",{href:!0});var Omt=s(HV);gUo=r(Omt,"SEWDForCTC"),Omt.forEach(t),hUo=r(J7e," (SEW-D model)"),J7e.forEach(t),uUo=i(Fo),bT=n(Fo,"LI",{});var Y7e=s(bT);hue=n(Y7e,"STRONG",{});var Vmt=s(hue);pUo=r(Vmt,"unispeech"),Vmt.forEach(t),_Uo=r(Y7e," \u2014 "),UV=n(Y7e,"A",{href:!0});var Xmt=s(UV);bUo=r(Xmt,"UniSpeechForCTC"),Xmt.forEach(t),FUo=r(Y7e," (UniSpeech model)"),Y7e.forEach(t),vUo=i(Fo),FT=n(Fo,"LI",{});var K7e=s(FT);uue=n(K7e,"STRONG",{});var zmt=s(uue);TUo=r(zmt,"unispeech-sat"),zmt.forEach(t),MUo=r(K7e," \u2014 "),JV=n(K7e,"A",{href:!0});var Qmt=s(JV);EUo=r(Qmt,"UniSpeechSatForCTC"),Qmt.forEach(t),CUo=r(K7e," (UniSpeechSat model)"),K7e.forEach(t),wUo=i(Fo),vT=n(Fo,"LI",{});var Z7e=s(vT);pue=n(Z7e,"STRONG",{});var Wmt=s(pue);AUo=r(Wmt,"wav2vec2"),Wmt.forEach(t),yUo=r(Z7e," \u2014 "),YV=n(Z7e,"A",{href:!0});var Hmt=s(YV);LUo=r(Hmt,"Wav2Vec2ForCTC"),Hmt.forEach(t),xUo=r(Z7e," (Wav2Vec2 model)"),Z7e.forEach(t),$Uo=i(Fo),TT=n(Fo,"LI",{});var e9e=s(TT);_ue=n(e9e,"STRONG",{});var Umt=s(_ue);kUo=r(Umt,"wavlm"),Umt.forEach(t),SUo=r(e9e," \u2014 "),KV=n(e9e,"A",{href:!0});var Jmt=s(KV);RUo=r(Jmt,"WavLMForCTC"),Jmt.forEach(t),BUo=r(e9e," (WavLM model)"),e9e.forEach(t),Fo.forEach(t),PUo=i(ha),MT=n(ha,"P",{});var o9e=s(MT);IUo=r(o9e,"The model is set in evaluation mode by default using "),bue=n(o9e,"CODE",{});var Ymt=s(bue);qUo=r(Ymt,"model.eval()"),Ymt.forEach(t),NUo=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(o9e,"CODE",{});var Kmt=s(Fue);jUo=r(Kmt,"model.train()"),Kmt.forEach(t),o9e.forEach(t),DUo=i(ha),T(ET.$$.fragment,ha),ha.forEach(t),ol.forEach(t),KPe=i(m),ud=n(m,"H2",{class:!0});var rNe=s(ud);CT=n(rNe,"A",{id:!0,class:!0,href:!0});var Zmt=s(CT);vue=n(Zmt,"SPAN",{});var eft=s(vue);T(DL.$$.fragment,eft),eft.forEach(t),Zmt.forEach(t),GUo=i(rNe),Tue=n(rNe,"SPAN",{});var oft=s(Tue);OUo=r(oft,"AutoModelForSpeechSeq2Seq"),oft.forEach(t),rNe.forEach(t),ZPe=i(m),Xo=n(m,"DIV",{class:!0});var rl=s(Xo);T(GL.$$.fragment,rl),VUo=i(rl),pd=n(rl,"P",{});var EK=s(pd);XUo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=n(EK,"A",{href:!0});var rft=s(ZV);zUo=r(rft,"from_pretrained()"),rft.forEach(t),QUo=r(EK," class method or the "),eX=n(EK,"A",{href:!0});var tft=s(eX);WUo=r(tft,"from_config()"),tft.forEach(t),HUo=r(EK,` class
method.`),EK.forEach(t),UUo=i(rl),OL=n(rl,"P",{});var tNe=s(OL);JUo=r(tNe,"This class cannot be instantiated directly using "),Mue=n(tNe,"CODE",{});var aft=s(Mue);YUo=r(aft,"__init__()"),aft.forEach(t),KUo=r(tNe," (throws an error)."),tNe.forEach(t),ZUo=i(rl),bt=n(rl,"DIV",{class:!0});var C0=s(bt);T(VL.$$.fragment,C0),eJo=i(C0),Eue=n(C0,"P",{});var nft=s(Eue);oJo=r(nft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nft.forEach(t),rJo=i(C0),_d=n(C0,"P",{});var CK=s(_d);tJo=r(CK,`Note:
Loading a model from its configuration file does `),Cue=n(CK,"STRONG",{});var sft=s(Cue);aJo=r(sft,"not"),sft.forEach(t),nJo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(CK,"A",{href:!0});var lft=s(oX);sJo=r(lft,"from_pretrained()"),lft.forEach(t),lJo=r(CK," to load the model weights."),CK.forEach(t),iJo=i(C0),T(wT.$$.fragment,C0),C0.forEach(t),dJo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(XL.$$.fragment,ua),cJo=i(ua),wue=n(ua,"P",{});var ift=s(wue);mJo=r(ift,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ift.forEach(t),fJo=i(ua),Va=n(ua,"P",{});var w0=s(Va);gJo=r(w0,"The model class to instantiate is selected based on the "),Aue=n(w0,"CODE",{});var dft=s(Aue);hJo=r(dft,"model_type"),dft.forEach(t),uJo=r(w0,` property of the config object (either
passed as an argument or loaded from `),yue=n(w0,"CODE",{});var cft=s(yue);pJo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),_Jo=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(w0,"CODE",{});var mft=s(Lue);bJo=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),FJo=r(w0,":"),w0.forEach(t),vJo=i(ua),zL=n(ua,"UL",{});var aNe=s(zL);AT=n(aNe,"LI",{});var r9e=s(AT);xue=n(r9e,"STRONG",{});var fft=s(xue);TJo=r(fft,"speech-encoder-decoder"),fft.forEach(t),MJo=r(r9e," \u2014 "),rX=n(r9e,"A",{href:!0});var gft=s(rX);EJo=r(gft,"SpeechEncoderDecoderModel"),gft.forEach(t),CJo=r(r9e," (Speech Encoder decoder model)"),r9e.forEach(t),wJo=i(aNe),yT=n(aNe,"LI",{});var t9e=s(yT);$ue=n(t9e,"STRONG",{});var hft=s($ue);AJo=r(hft,"speech_to_text"),hft.forEach(t),yJo=r(t9e," \u2014 "),tX=n(t9e,"A",{href:!0});var uft=s(tX);LJo=r(uft,"Speech2TextForConditionalGeneration"),uft.forEach(t),xJo=r(t9e," (Speech2Text model)"),t9e.forEach(t),aNe.forEach(t),$Jo=i(ua),LT=n(ua,"P",{});var a9e=s(LT);kJo=r(a9e,"The model is set in evaluation mode by default using "),kue=n(a9e,"CODE",{});var pft=s(kue);SJo=r(pft,"model.eval()"),pft.forEach(t),RJo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(a9e,"CODE",{});var _ft=s(Sue);BJo=r(_ft,"model.train()"),_ft.forEach(t),a9e.forEach(t),PJo=i(ua),T(xT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),eIe=i(m),bd=n(m,"H2",{class:!0});var nNe=s(bd);$T=n(nNe,"A",{id:!0,class:!0,href:!0});var bft=s($T);Rue=n(bft,"SPAN",{});var Fft=s(Rue);T(QL.$$.fragment,Fft),Fft.forEach(t),bft.forEach(t),IJo=i(nNe),Bue=n(nNe,"SPAN",{});var vft=s(Bue);qJo=r(vft,"AutoModelForAudioXVector"),vft.forEach(t),nNe.forEach(t),oIe=i(m),zo=n(m,"DIV",{class:!0});var tl=s(zo);T(WL.$$.fragment,tl),NJo=i(tl),Fd=n(tl,"P",{});var wK=s(Fd);jJo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=n(wK,"A",{href:!0});var Tft=s(aX);DJo=r(Tft,"from_pretrained()"),Tft.forEach(t),GJo=r(wK," class method or the "),nX=n(wK,"A",{href:!0});var Mft=s(nX);OJo=r(Mft,"from_config()"),Mft.forEach(t),VJo=r(wK,` class
method.`),wK.forEach(t),XJo=i(tl),HL=n(tl,"P",{});var sNe=s(HL);zJo=r(sNe,"This class cannot be instantiated directly using "),Pue=n(sNe,"CODE",{});var Eft=s(Pue);QJo=r(Eft,"__init__()"),Eft.forEach(t),WJo=r(sNe," (throws an error)."),sNe.forEach(t),HJo=i(tl),Ft=n(tl,"DIV",{class:!0});var A0=s(Ft);T(UL.$$.fragment,A0),UJo=i(A0),Iue=n(A0,"P",{});var Cft=s(Iue);JJo=r(Cft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Cft.forEach(t),YJo=i(A0),vd=n(A0,"P",{});var AK=s(vd);KJo=r(AK,`Note:
Loading a model from its configuration file does `),que=n(AK,"STRONG",{});var wft=s(que);ZJo=r(wft,"not"),wft.forEach(t),eYo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(AK,"A",{href:!0});var Aft=s(sX);oYo=r(Aft,"from_pretrained()"),Aft.forEach(t),rYo=r(AK," to load the model weights."),AK.forEach(t),tYo=i(A0),T(kT.$$.fragment,A0),A0.forEach(t),aYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(JL.$$.fragment,pa),nYo=i(pa),Nue=n(pa,"P",{});var yft=s(Nue);sYo=r(yft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),yft.forEach(t),lYo=i(pa),Xa=n(pa,"P",{});var y0=s(Xa);iYo=r(y0,"The model class to instantiate is selected based on the "),jue=n(y0,"CODE",{});var Lft=s(jue);dYo=r(Lft,"model_type"),Lft.forEach(t),cYo=r(y0,` property of the config object (either
passed as an argument or loaded from `),Due=n(y0,"CODE",{});var xft=s(Due);mYo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),fYo=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(y0,"CODE",{});var $ft=s(Gue);gYo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),hYo=r(y0,":"),y0.forEach(t),uYo=i(pa),za=n(pa,"UL",{});var L0=s(za);ST=n(L0,"LI",{});var n9e=s(ST);Oue=n(n9e,"STRONG",{});var kft=s(Oue);pYo=r(kft,"data2vec-audio"),kft.forEach(t),_Yo=r(n9e," \u2014 "),lX=n(n9e,"A",{href:!0});var Sft=s(lX);bYo=r(Sft,"Data2VecAudioForXVector"),Sft.forEach(t),FYo=r(n9e," (Data2VecAudio model)"),n9e.forEach(t),vYo=i(L0),RT=n(L0,"LI",{});var s9e=s(RT);Vue=n(s9e,"STRONG",{});var Rft=s(Vue);TYo=r(Rft,"unispeech-sat"),Rft.forEach(t),MYo=r(s9e," \u2014 "),iX=n(s9e,"A",{href:!0});var Bft=s(iX);EYo=r(Bft,"UniSpeechSatForXVector"),Bft.forEach(t),CYo=r(s9e," (UniSpeechSat model)"),s9e.forEach(t),wYo=i(L0),BT=n(L0,"LI",{});var l9e=s(BT);Xue=n(l9e,"STRONG",{});var Pft=s(Xue);AYo=r(Pft,"wav2vec2"),Pft.forEach(t),yYo=r(l9e," \u2014 "),dX=n(l9e,"A",{href:!0});var Ift=s(dX);LYo=r(Ift,"Wav2Vec2ForXVector"),Ift.forEach(t),xYo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),$Yo=i(L0),PT=n(L0,"LI",{});var i9e=s(PT);zue=n(i9e,"STRONG",{});var qft=s(zue);kYo=r(qft,"wavlm"),qft.forEach(t),SYo=r(i9e," \u2014 "),cX=n(i9e,"A",{href:!0});var Nft=s(cX);RYo=r(Nft,"WavLMForXVector"),Nft.forEach(t),BYo=r(i9e," (WavLM model)"),i9e.forEach(t),L0.forEach(t),PYo=i(pa),IT=n(pa,"P",{});var d9e=s(IT);IYo=r(d9e,"The model is set in evaluation mode by default using "),Que=n(d9e,"CODE",{});var jft=s(Que);qYo=r(jft,"model.eval()"),jft.forEach(t),NYo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(d9e,"CODE",{});var Dft=s(Wue);jYo=r(Dft,"model.train()"),Dft.forEach(t),d9e.forEach(t),DYo=i(pa),T(qT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),rIe=i(m),Td=n(m,"H2",{class:!0});var lNe=s(Td);NT=n(lNe,"A",{id:!0,class:!0,href:!0});var Gft=s(NT);Hue=n(Gft,"SPAN",{});var Oft=s(Hue);T(YL.$$.fragment,Oft),Oft.forEach(t),Gft.forEach(t),GYo=i(lNe),Uue=n(lNe,"SPAN",{});var Vft=s(Uue);OYo=r(Vft,"AutoModelForMaskedImageModeling"),Vft.forEach(t),lNe.forEach(t),tIe=i(m),Qo=n(m,"DIV",{class:!0});var al=s(Qo);T(KL.$$.fragment,al),VYo=i(al),Md=n(al,"P",{});var yK=s(Md);XYo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mX=n(yK,"A",{href:!0});var Xft=s(mX);zYo=r(Xft,"from_pretrained()"),Xft.forEach(t),QYo=r(yK," class method or the "),fX=n(yK,"A",{href:!0});var zft=s(fX);WYo=r(zft,"from_config()"),zft.forEach(t),HYo=r(yK,` class
method.`),yK.forEach(t),UYo=i(al),ZL=n(al,"P",{});var iNe=s(ZL);JYo=r(iNe,"This class cannot be instantiated directly using "),Jue=n(iNe,"CODE",{});var Qft=s(Jue);YYo=r(Qft,"__init__()"),Qft.forEach(t),KYo=r(iNe," (throws an error)."),iNe.forEach(t),ZYo=i(al),vt=n(al,"DIV",{class:!0});var x0=s(vt);T(e8.$$.fragment,x0),eKo=i(x0),Yue=n(x0,"P",{});var Wft=s(Yue);oKo=r(Wft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wft.forEach(t),rKo=i(x0),Ed=n(x0,"P",{});var LK=s(Ed);tKo=r(LK,`Note:
Loading a model from its configuration file does `),Kue=n(LK,"STRONG",{});var Hft=s(Kue);aKo=r(Hft,"not"),Hft.forEach(t),nKo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(LK,"A",{href:!0});var Uft=s(gX);sKo=r(Uft,"from_pretrained()"),Uft.forEach(t),lKo=r(LK," to load the model weights."),LK.forEach(t),iKo=i(x0),T(jT.$$.fragment,x0),x0.forEach(t),dKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(o8.$$.fragment,_a),cKo=i(_a),Zue=n(_a,"P",{});var Jft=s(Zue);mKo=r(Jft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jft.forEach(t),fKo=i(_a),Qa=n(_a,"P",{});var $0=s(Qa);gKo=r($0,"The model class to instantiate is selected based on the "),epe=n($0,"CODE",{});var Yft=s(epe);hKo=r(Yft,"model_type"),Yft.forEach(t),uKo=r($0,` property of the config object (either
passed as an argument or loaded from `),ope=n($0,"CODE",{});var Kft=s(ope);pKo=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),_Ko=r($0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n($0,"CODE",{});var Zft=s(rpe);bKo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),FKo=r($0,":"),$0.forEach(t),vKo=i(_a),Cd=n(_a,"UL",{});var xK=s(Cd);DT=n(xK,"LI",{});var c9e=s(DT);tpe=n(c9e,"STRONG",{});var egt=s(tpe);TKo=r(egt,"deit"),egt.forEach(t),MKo=r(c9e," \u2014 "),hX=n(c9e,"A",{href:!0});var ogt=s(hX);EKo=r(ogt,"DeiTForMaskedImageModeling"),ogt.forEach(t),CKo=r(c9e," (DeiT model)"),c9e.forEach(t),wKo=i(xK),GT=n(xK,"LI",{});var m9e=s(GT);ape=n(m9e,"STRONG",{});var rgt=s(ape);AKo=r(rgt,"swin"),rgt.forEach(t),yKo=r(m9e," \u2014 "),uX=n(m9e,"A",{href:!0});var tgt=s(uX);LKo=r(tgt,"SwinForMaskedImageModeling"),tgt.forEach(t),xKo=r(m9e," (Swin model)"),m9e.forEach(t),$Ko=i(xK),OT=n(xK,"LI",{});var f9e=s(OT);npe=n(f9e,"STRONG",{});var agt=s(npe);kKo=r(agt,"vit"),agt.forEach(t),SKo=r(f9e," \u2014 "),pX=n(f9e,"A",{href:!0});var ngt=s(pX);RKo=r(ngt,"ViTForMaskedImageModeling"),ngt.forEach(t),BKo=r(f9e," (ViT model)"),f9e.forEach(t),xK.forEach(t),PKo=i(_a),VT=n(_a,"P",{});var g9e=s(VT);IKo=r(g9e,"The model is set in evaluation mode by default using "),spe=n(g9e,"CODE",{});var sgt=s(spe);qKo=r(sgt,"model.eval()"),sgt.forEach(t),NKo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(g9e,"CODE",{});var lgt=s(lpe);jKo=r(lgt,"model.train()"),lgt.forEach(t),g9e.forEach(t),DKo=i(_a),T(XT.$$.fragment,_a),_a.forEach(t),al.forEach(t),aIe=i(m),wd=n(m,"H2",{class:!0});var dNe=s(wd);zT=n(dNe,"A",{id:!0,class:!0,href:!0});var igt=s(zT);ipe=n(igt,"SPAN",{});var dgt=s(ipe);T(r8.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),GKo=i(dNe),dpe=n(dNe,"SPAN",{});var cgt=s(dpe);OKo=r(cgt,"AutoModelForObjectDetection"),cgt.forEach(t),dNe.forEach(t),nIe=i(m),Wo=n(m,"DIV",{class:!0});var nl=s(Wo);T(t8.$$.fragment,nl),VKo=i(nl),Ad=n(nl,"P",{});var $K=s(Ad);XKo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=n($K,"A",{href:!0});var mgt=s(_X);zKo=r(mgt,"from_pretrained()"),mgt.forEach(t),QKo=r($K," class method or the "),bX=n($K,"A",{href:!0});var fgt=s(bX);WKo=r(fgt,"from_config()"),fgt.forEach(t),HKo=r($K,` class
method.`),$K.forEach(t),UKo=i(nl),a8=n(nl,"P",{});var cNe=s(a8);JKo=r(cNe,"This class cannot be instantiated directly using "),cpe=n(cNe,"CODE",{});var ggt=s(cpe);YKo=r(ggt,"__init__()"),ggt.forEach(t),KKo=r(cNe," (throws an error)."),cNe.forEach(t),ZKo=i(nl),Tt=n(nl,"DIV",{class:!0});var k0=s(Tt);T(n8.$$.fragment,k0),eZo=i(k0),mpe=n(k0,"P",{});var hgt=s(mpe);oZo=r(hgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hgt.forEach(t),rZo=i(k0),yd=n(k0,"P",{});var kK=s(yd);tZo=r(kK,`Note:
Loading a model from its configuration file does `),fpe=n(kK,"STRONG",{});var ugt=s(fpe);aZo=r(ugt,"not"),ugt.forEach(t),nZo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(kK,"A",{href:!0});var pgt=s(FX);sZo=r(pgt,"from_pretrained()"),pgt.forEach(t),lZo=r(kK," to load the model weights."),kK.forEach(t),iZo=i(k0),T(QT.$$.fragment,k0),k0.forEach(t),dZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(s8.$$.fragment,ba),cZo=i(ba),gpe=n(ba,"P",{});var _gt=s(gpe);mZo=r(_gt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_gt.forEach(t),fZo=i(ba),Wa=n(ba,"P",{});var S0=s(Wa);gZo=r(S0,"The model class to instantiate is selected based on the "),hpe=n(S0,"CODE",{});var bgt=s(hpe);hZo=r(bgt,"model_type"),bgt.forEach(t),uZo=r(S0,` property of the config object (either
passed as an argument or loaded from `),upe=n(S0,"CODE",{});var Fgt=s(upe);pZo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),_Zo=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(S0,"CODE",{});var vgt=s(ppe);bZo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),FZo=r(S0,":"),S0.forEach(t),vZo=i(ba),l8=n(ba,"UL",{});var mNe=s(l8);WT=n(mNe,"LI",{});var h9e=s(WT);_pe=n(h9e,"STRONG",{});var Tgt=s(_pe);TZo=r(Tgt,"detr"),Tgt.forEach(t),MZo=r(h9e," \u2014 "),vX=n(h9e,"A",{href:!0});var Mgt=s(vX);EZo=r(Mgt,"DetrForObjectDetection"),Mgt.forEach(t),CZo=r(h9e," (DETR model)"),h9e.forEach(t),wZo=i(mNe),HT=n(mNe,"LI",{});var u9e=s(HT);bpe=n(u9e,"STRONG",{});var Egt=s(bpe);AZo=r(Egt,"yolos"),Egt.forEach(t),yZo=r(u9e," \u2014 "),TX=n(u9e,"A",{href:!0});var Cgt=s(TX);LZo=r(Cgt,"YolosForObjectDetection"),Cgt.forEach(t),xZo=r(u9e," (YOLOS model)"),u9e.forEach(t),mNe.forEach(t),$Zo=i(ba),UT=n(ba,"P",{});var p9e=s(UT);kZo=r(p9e,"The model is set in evaluation mode by default using "),Fpe=n(p9e,"CODE",{});var wgt=s(Fpe);SZo=r(wgt,"model.eval()"),wgt.forEach(t),RZo=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(p9e,"CODE",{});var Agt=s(vpe);BZo=r(Agt,"model.train()"),Agt.forEach(t),p9e.forEach(t),PZo=i(ba),T(JT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),sIe=i(m),Ld=n(m,"H2",{class:!0});var fNe=s(Ld);YT=n(fNe,"A",{id:!0,class:!0,href:!0});var ygt=s(YT);Tpe=n(ygt,"SPAN",{});var Lgt=s(Tpe);T(i8.$$.fragment,Lgt),Lgt.forEach(t),ygt.forEach(t),IZo=i(fNe),Mpe=n(fNe,"SPAN",{});var xgt=s(Mpe);qZo=r(xgt,"AutoModelForImageSegmentation"),xgt.forEach(t),fNe.forEach(t),lIe=i(m),Ho=n(m,"DIV",{class:!0});var sl=s(Ho);T(d8.$$.fragment,sl),NZo=i(sl),xd=n(sl,"P",{});var SK=s(xd);jZo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=n(SK,"A",{href:!0});var $gt=s(MX);DZo=r($gt,"from_pretrained()"),$gt.forEach(t),GZo=r(SK," class method or the "),EX=n(SK,"A",{href:!0});var kgt=s(EX);OZo=r(kgt,"from_config()"),kgt.forEach(t),VZo=r(SK,` class
method.`),SK.forEach(t),XZo=i(sl),c8=n(sl,"P",{});var gNe=s(c8);zZo=r(gNe,"This class cannot be instantiated directly using "),Epe=n(gNe,"CODE",{});var Sgt=s(Epe);QZo=r(Sgt,"__init__()"),Sgt.forEach(t),WZo=r(gNe," (throws an error)."),gNe.forEach(t),HZo=i(sl),Mt=n(sl,"DIV",{class:!0});var R0=s(Mt);T(m8.$$.fragment,R0),UZo=i(R0),Cpe=n(R0,"P",{});var Rgt=s(Cpe);JZo=r(Rgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rgt.forEach(t),YZo=i(R0),$d=n(R0,"P",{});var RK=s($d);KZo=r(RK,`Note:
Loading a model from its configuration file does `),wpe=n(RK,"STRONG",{});var Bgt=s(wpe);ZZo=r(Bgt,"not"),Bgt.forEach(t),eer=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(RK,"A",{href:!0});var Pgt=s(CX);oer=r(Pgt,"from_pretrained()"),Pgt.forEach(t),rer=r(RK," to load the model weights."),RK.forEach(t),ter=i(R0),T(KT.$$.fragment,R0),R0.forEach(t),aer=i(sl),uo=n(sl,"DIV",{class:!0});var Fa=s(uo);T(f8.$$.fragment,Fa),ner=i(Fa),Ape=n(Fa,"P",{});var Igt=s(Ape);ser=r(Igt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Igt.forEach(t),ler=i(Fa),Ha=n(Fa,"P",{});var B0=s(Ha);ier=r(B0,"The model class to instantiate is selected based on the "),ype=n(B0,"CODE",{});var qgt=s(ype);der=r(qgt,"model_type"),qgt.forEach(t),cer=r(B0,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(B0,"CODE",{});var Ngt=s(Lpe);mer=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),fer=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(B0,"CODE",{});var jgt=s(xpe);ger=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),her=r(B0,":"),B0.forEach(t),uer=i(Fa),$pe=n(Fa,"UL",{});var Dgt=s($pe);ZT=n(Dgt,"LI",{});var _9e=s(ZT);kpe=n(_9e,"STRONG",{});var Ggt=s(kpe);per=r(Ggt,"detr"),Ggt.forEach(t),_er=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var Ogt=s(wX);ber=r(Ogt,"DetrForSegmentation"),Ogt.forEach(t),Fer=r(_9e," (DETR model)"),_9e.forEach(t),Dgt.forEach(t),ver=i(Fa),eM=n(Fa,"P",{});var b9e=s(eM);Ter=r(b9e,"The model is set in evaluation mode by default using "),Spe=n(b9e,"CODE",{});var Vgt=s(Spe);Mer=r(Vgt,"model.eval()"),Vgt.forEach(t),Eer=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(b9e,"CODE",{});var Xgt=s(Rpe);Cer=r(Xgt,"model.train()"),Xgt.forEach(t),b9e.forEach(t),wer=i(Fa),T(oM.$$.fragment,Fa),Fa.forEach(t),sl.forEach(t),iIe=i(m),kd=n(m,"H2",{class:!0});var hNe=s(kd);rM=n(hNe,"A",{id:!0,class:!0,href:!0});var zgt=s(rM);Bpe=n(zgt,"SPAN",{});var Qgt=s(Bpe);T(g8.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),Aer=i(hNe),Ppe=n(hNe,"SPAN",{});var Wgt=s(Ppe);yer=r(Wgt,"AutoModelForSemanticSegmentation"),Wgt.forEach(t),hNe.forEach(t),dIe=i(m),Uo=n(m,"DIV",{class:!0});var ll=s(Uo);T(h8.$$.fragment,ll),Ler=i(ll),Sd=n(ll,"P",{});var BK=s(Sd);xer=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=n(BK,"A",{href:!0});var Hgt=s(AX);$er=r(Hgt,"from_pretrained()"),Hgt.forEach(t),ker=r(BK," class method or the "),yX=n(BK,"A",{href:!0});var Ugt=s(yX);Ser=r(Ugt,"from_config()"),Ugt.forEach(t),Rer=r(BK,` class
method.`),BK.forEach(t),Ber=i(ll),u8=n(ll,"P",{});var uNe=s(u8);Per=r(uNe,"This class cannot be instantiated directly using "),Ipe=n(uNe,"CODE",{});var Jgt=s(Ipe);Ier=r(Jgt,"__init__()"),Jgt.forEach(t),qer=r(uNe," (throws an error)."),uNe.forEach(t),Ner=i(ll),Et=n(ll,"DIV",{class:!0});var P0=s(Et);T(p8.$$.fragment,P0),jer=i(P0),qpe=n(P0,"P",{});var Ygt=s(qpe);Der=r(Ygt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ygt.forEach(t),Ger=i(P0),Rd=n(P0,"P",{});var PK=s(Rd);Oer=r(PK,`Note:
Loading a model from its configuration file does `),Npe=n(PK,"STRONG",{});var Kgt=s(Npe);Ver=r(Kgt,"not"),Kgt.forEach(t),Xer=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(PK,"A",{href:!0});var Zgt=s(LX);zer=r(Zgt,"from_pretrained()"),Zgt.forEach(t),Qer=r(PK," to load the model weights."),PK.forEach(t),Wer=i(P0),T(tM.$$.fragment,P0),P0.forEach(t),Her=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(_8.$$.fragment,va),Uer=i(va),jpe=n(va,"P",{});var eht=s(jpe);Jer=r(eht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eht.forEach(t),Yer=i(va),Ua=n(va,"P",{});var I0=s(Ua);Ker=r(I0,"The model class to instantiate is selected based on the "),Dpe=n(I0,"CODE",{});var oht=s(Dpe);Zer=r(oht,"model_type"),oht.forEach(t),eor=r(I0,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(I0,"CODE",{});var rht=s(Gpe);oor=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),ror=r(I0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(I0,"CODE",{});var tht=s(Ope);tor=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),aor=r(I0,":"),I0.forEach(t),nor=i(va),Ja=n(va,"UL",{});var q0=s(Ja);aM=n(q0,"LI",{});var F9e=s(aM);Vpe=n(F9e,"STRONG",{});var aht=s(Vpe);sor=r(aht,"beit"),aht.forEach(t),lor=r(F9e," \u2014 "),xX=n(F9e,"A",{href:!0});var nht=s(xX);ior=r(nht,"BeitForSemanticSegmentation"),nht.forEach(t),dor=r(F9e," (BEiT model)"),F9e.forEach(t),cor=i(q0),nM=n(q0,"LI",{});var v9e=s(nM);Xpe=n(v9e,"STRONG",{});var sht=s(Xpe);mor=r(sht,"data2vec-vision"),sht.forEach(t),gor=r(v9e," \u2014 "),$X=n(v9e,"A",{href:!0});var lht=s($X);hor=r(lht,"Data2VecVisionForSemanticSegmentation"),lht.forEach(t),uor=r(v9e," (Data2VecVision model)"),v9e.forEach(t),por=i(q0),sM=n(q0,"LI",{});var T9e=s(sM);zpe=n(T9e,"STRONG",{});var iht=s(zpe);_or=r(iht,"dpt"),iht.forEach(t),bor=r(T9e," \u2014 "),kX=n(T9e,"A",{href:!0});var dht=s(kX);For=r(dht,"DPTForSemanticSegmentation"),dht.forEach(t),vor=r(T9e," (DPT model)"),T9e.forEach(t),Tor=i(q0),lM=n(q0,"LI",{});var M9e=s(lM);Qpe=n(M9e,"STRONG",{});var cht=s(Qpe);Mor=r(cht,"segformer"),cht.forEach(t),Eor=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var mht=s(SX);Cor=r(mht,"SegformerForSemanticSegmentation"),mht.forEach(t),wor=r(M9e," (SegFormer model)"),M9e.forEach(t),q0.forEach(t),Aor=i(va),iM=n(va,"P",{});var E9e=s(iM);yor=r(E9e,"The model is set in evaluation mode by default using "),Wpe=n(E9e,"CODE",{});var fht=s(Wpe);Lor=r(fht,"model.eval()"),fht.forEach(t),xor=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(E9e,"CODE",{});var ght=s(Hpe);$or=r(ght,"model.train()"),ght.forEach(t),E9e.forEach(t),kor=i(va),T(dM.$$.fragment,va),va.forEach(t),ll.forEach(t),cIe=i(m),Bd=n(m,"H2",{class:!0});var pNe=s(Bd);cM=n(pNe,"A",{id:!0,class:!0,href:!0});var hht=s(cM);Upe=n(hht,"SPAN",{});var uht=s(Upe);T(b8.$$.fragment,uht),uht.forEach(t),hht.forEach(t),Sor=i(pNe),Jpe=n(pNe,"SPAN",{});var pht=s(Jpe);Ror=r(pht,"AutoModelForInstanceSegmentation"),pht.forEach(t),pNe.forEach(t),mIe=i(m),Jo=n(m,"DIV",{class:!0});var il=s(Jo);T(F8.$$.fragment,il),Bor=i(il),Pd=n(il,"P",{});var IK=s(Pd);Por=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=n(IK,"A",{href:!0});var _ht=s(RX);Ior=r(_ht,"from_pretrained()"),_ht.forEach(t),qor=r(IK," class method or the "),BX=n(IK,"A",{href:!0});var bht=s(BX);Nor=r(bht,"from_config()"),bht.forEach(t),jor=r(IK,` class
method.`),IK.forEach(t),Dor=i(il),v8=n(il,"P",{});var _Ne=s(v8);Gor=r(_Ne,"This class cannot be instantiated directly using "),Ype=n(_Ne,"CODE",{});var Fht=s(Ype);Oor=r(Fht,"__init__()"),Fht.forEach(t),Vor=r(_Ne," (throws an error)."),_Ne.forEach(t),Xor=i(il),Ct=n(il,"DIV",{class:!0});var N0=s(Ct);T(T8.$$.fragment,N0),zor=i(N0),Kpe=n(N0,"P",{});var vht=s(Kpe);Qor=r(vht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),vht.forEach(t),Wor=i(N0),Id=n(N0,"P",{});var qK=s(Id);Hor=r(qK,`Note:
Loading a model from its configuration file does `),Zpe=n(qK,"STRONG",{});var Tht=s(Zpe);Uor=r(Tht,"not"),Tht.forEach(t),Jor=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(qK,"A",{href:!0});var Mht=s(PX);Yor=r(Mht,"from_pretrained()"),Mht.forEach(t),Kor=r(qK," to load the model weights."),qK.forEach(t),Zor=i(N0),T(mM.$$.fragment,N0),N0.forEach(t),err=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(M8.$$.fragment,Ta),orr=i(Ta),e_e=n(Ta,"P",{});var Eht=s(e_e);rrr=r(Eht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eht.forEach(t),trr=i(Ta),Ya=n(Ta,"P",{});var j0=s(Ya);arr=r(j0,"The model class to instantiate is selected based on the "),o_e=n(j0,"CODE",{});var Cht=s(o_e);nrr=r(Cht,"model_type"),Cht.forEach(t),srr=r(j0,` property of the config object (either
passed as an argument or loaded from `),r_e=n(j0,"CODE",{});var wht=s(r_e);lrr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),irr=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(j0,"CODE",{});var Aht=s(t_e);drr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),crr=r(j0,":"),j0.forEach(t),mrr=i(Ta),a_e=n(Ta,"UL",{});var yht=s(a_e);fM=n(yht,"LI",{});var C9e=s(fM);n_e=n(C9e,"STRONG",{});var Lht=s(n_e);frr=r(Lht,"maskformer"),Lht.forEach(t),grr=r(C9e," \u2014 "),IX=n(C9e,"A",{href:!0});var xht=s(IX);hrr=r(xht,"MaskFormerForInstanceSegmentation"),xht.forEach(t),urr=r(C9e," (MaskFormer model)"),C9e.forEach(t),yht.forEach(t),prr=i(Ta),gM=n(Ta,"P",{});var w9e=s(gM);_rr=r(w9e,"The model is set in evaluation mode by default using "),s_e=n(w9e,"CODE",{});var $ht=s(s_e);brr=r($ht,"model.eval()"),$ht.forEach(t),Frr=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(w9e,"CODE",{});var kht=s(l_e);vrr=r(kht,"model.train()"),kht.forEach(t),w9e.forEach(t),Trr=i(Ta),T(hM.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),fIe=i(m),qd=n(m,"H2",{class:!0});var bNe=s(qd);uM=n(bNe,"A",{id:!0,class:!0,href:!0});var Sht=s(uM);i_e=n(Sht,"SPAN",{});var Rht=s(i_e);T(E8.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),Mrr=i(bNe),d_e=n(bNe,"SPAN",{});var Bht=s(d_e);Err=r(Bht,"TFAutoModel"),Bht.forEach(t),bNe.forEach(t),gIe=i(m),Yo=n(m,"DIV",{class:!0});var dl=s(Yo);T(C8.$$.fragment,dl),Crr=i(dl),Nd=n(dl,"P",{});var NK=s(Nd);wrr=r(NK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=n(NK,"A",{href:!0});var Pht=s(qX);Arr=r(Pht,"from_pretrained()"),Pht.forEach(t),yrr=r(NK," class method or the "),NX=n(NK,"A",{href:!0});var Iht=s(NX);Lrr=r(Iht,"from_config()"),Iht.forEach(t),xrr=r(NK,` class
method.`),NK.forEach(t),$rr=i(dl),w8=n(dl,"P",{});var FNe=s(w8);krr=r(FNe,"This class cannot be instantiated directly using "),c_e=n(FNe,"CODE",{});var qht=s(c_e);Srr=r(qht,"__init__()"),qht.forEach(t),Rrr=r(FNe," (throws an error)."),FNe.forEach(t),Brr=i(dl),wt=n(dl,"DIV",{class:!0});var D0=s(wt);T(A8.$$.fragment,D0),Prr=i(D0),m_e=n(D0,"P",{});var Nht=s(m_e);Irr=r(Nht,"Instantiates one of the base model classes of the library from a configuration."),Nht.forEach(t),qrr=i(D0),jd=n(D0,"P",{});var jK=s(jd);Nrr=r(jK,`Note:
Loading a model from its configuration file does `),f_e=n(jK,"STRONG",{});var jht=s(f_e);jrr=r(jht,"not"),jht.forEach(t),Drr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(jK,"A",{href:!0});var Dht=s(jX);Grr=r(Dht,"from_pretrained()"),Dht.forEach(t),Orr=r(jK," to load the model weights."),jK.forEach(t),Vrr=i(D0),T(pM.$$.fragment,D0),D0.forEach(t),Xrr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(y8.$$.fragment,cl),zrr=i(cl),g_e=n(cl,"P",{});var Ght=s(g_e);Qrr=r(Ght,"Instantiate one of the base model classes of the library from a pretrained model."),Ght.forEach(t),Wrr=i(cl),Ka=n(cl,"P",{});var G0=s(Ka);Hrr=r(G0,"The model class to instantiate is selected based on the "),h_e=n(G0,"CODE",{});var Oht=s(h_e);Urr=r(Oht,"model_type"),Oht.forEach(t),Jrr=r(G0,` property of the config object (either
passed as an argument or loaded from `),u_e=n(G0,"CODE",{});var Vht=s(u_e);Yrr=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),Krr=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(G0,"CODE",{});var Xht=s(p_e);Zrr=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),etr=r(G0,":"),G0.forEach(t),otr=i(cl),j=n(cl,"UL",{});var D=s(j);_M=n(D,"LI",{});var A9e=s(_M);__e=n(A9e,"STRONG",{});var zht=s(__e);rtr=r(zht,"albert"),zht.forEach(t),ttr=r(A9e," \u2014 "),DX=n(A9e,"A",{href:!0});var Qht=s(DX);atr=r(Qht,"TFAlbertModel"),Qht.forEach(t),ntr=r(A9e," (ALBERT model)"),A9e.forEach(t),str=i(D),bM=n(D,"LI",{});var y9e=s(bM);b_e=n(y9e,"STRONG",{});var Wht=s(b_e);ltr=r(Wht,"bart"),Wht.forEach(t),itr=r(y9e," \u2014 "),GX=n(y9e,"A",{href:!0});var Hht=s(GX);dtr=r(Hht,"TFBartModel"),Hht.forEach(t),ctr=r(y9e," (BART model)"),y9e.forEach(t),mtr=i(D),FM=n(D,"LI",{});var L9e=s(FM);F_e=n(L9e,"STRONG",{});var Uht=s(F_e);ftr=r(Uht,"bert"),Uht.forEach(t),gtr=r(L9e," \u2014 "),OX=n(L9e,"A",{href:!0});var Jht=s(OX);htr=r(Jht,"TFBertModel"),Jht.forEach(t),utr=r(L9e," (BERT model)"),L9e.forEach(t),ptr=i(D),vM=n(D,"LI",{});var x9e=s(vM);v_e=n(x9e,"STRONG",{});var Yht=s(v_e);_tr=r(Yht,"blenderbot"),Yht.forEach(t),btr=r(x9e," \u2014 "),VX=n(x9e,"A",{href:!0});var Kht=s(VX);Ftr=r(Kht,"TFBlenderbotModel"),Kht.forEach(t),vtr=r(x9e," (Blenderbot model)"),x9e.forEach(t),Ttr=i(D),TM=n(D,"LI",{});var $9e=s(TM);T_e=n($9e,"STRONG",{});var Zht=s(T_e);Mtr=r(Zht,"blenderbot-small"),Zht.forEach(t),Etr=r($9e," \u2014 "),XX=n($9e,"A",{href:!0});var eut=s(XX);Ctr=r(eut,"TFBlenderbotSmallModel"),eut.forEach(t),wtr=r($9e," (BlenderbotSmall model)"),$9e.forEach(t),Atr=i(D),MM=n(D,"LI",{});var k9e=s(MM);M_e=n(k9e,"STRONG",{});var out=s(M_e);ytr=r(out,"camembert"),out.forEach(t),Ltr=r(k9e," \u2014 "),zX=n(k9e,"A",{href:!0});var rut=s(zX);xtr=r(rut,"TFCamembertModel"),rut.forEach(t),$tr=r(k9e," (CamemBERT model)"),k9e.forEach(t),ktr=i(D),EM=n(D,"LI",{});var S9e=s(EM);E_e=n(S9e,"STRONG",{});var tut=s(E_e);Str=r(tut,"clip"),tut.forEach(t),Rtr=r(S9e," \u2014 "),QX=n(S9e,"A",{href:!0});var aut=s(QX);Btr=r(aut,"TFCLIPModel"),aut.forEach(t),Ptr=r(S9e," (CLIP model)"),S9e.forEach(t),Itr=i(D),CM=n(D,"LI",{});var R9e=s(CM);C_e=n(R9e,"STRONG",{});var nut=s(C_e);qtr=r(nut,"convbert"),nut.forEach(t),Ntr=r(R9e," \u2014 "),WX=n(R9e,"A",{href:!0});var sut=s(WX);jtr=r(sut,"TFConvBertModel"),sut.forEach(t),Dtr=r(R9e," (ConvBERT model)"),R9e.forEach(t),Gtr=i(D),wM=n(D,"LI",{});var B9e=s(wM);w_e=n(B9e,"STRONG",{});var lut=s(w_e);Otr=r(lut,"convnext"),lut.forEach(t),Vtr=r(B9e," \u2014 "),HX=n(B9e,"A",{href:!0});var iut=s(HX);Xtr=r(iut,"TFConvNextModel"),iut.forEach(t),ztr=r(B9e," (ConvNext model)"),B9e.forEach(t),Qtr=i(D),AM=n(D,"LI",{});var P9e=s(AM);A_e=n(P9e,"STRONG",{});var dut=s(A_e);Wtr=r(dut,"ctrl"),dut.forEach(t),Htr=r(P9e," \u2014 "),UX=n(P9e,"A",{href:!0});var cut=s(UX);Utr=r(cut,"TFCTRLModel"),cut.forEach(t),Jtr=r(P9e," (CTRL model)"),P9e.forEach(t),Ytr=i(D),yM=n(D,"LI",{});var I9e=s(yM);y_e=n(I9e,"STRONG",{});var mut=s(y_e);Ktr=r(mut,"data2vec-vision"),mut.forEach(t),Ztr=r(I9e," \u2014 "),JX=n(I9e,"A",{href:!0});var fut=s(JX);ear=r(fut,"TFData2VecVisionModel"),fut.forEach(t),oar=r(I9e," (Data2VecVision model)"),I9e.forEach(t),rar=i(D),LM=n(D,"LI",{});var q9e=s(LM);L_e=n(q9e,"STRONG",{});var gut=s(L_e);tar=r(gut,"deberta"),gut.forEach(t),aar=r(q9e," \u2014 "),YX=n(q9e,"A",{href:!0});var hut=s(YX);nar=r(hut,"TFDebertaModel"),hut.forEach(t),sar=r(q9e," (DeBERTa model)"),q9e.forEach(t),lar=i(D),xM=n(D,"LI",{});var N9e=s(xM);x_e=n(N9e,"STRONG",{});var uut=s(x_e);iar=r(uut,"deberta-v2"),uut.forEach(t),dar=r(N9e," \u2014 "),KX=n(N9e,"A",{href:!0});var put=s(KX);car=r(put,"TFDebertaV2Model"),put.forEach(t),mar=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),far=i(D),$M=n(D,"LI",{});var j9e=s($M);$_e=n(j9e,"STRONG",{});var _ut=s($_e);gar=r(_ut,"distilbert"),_ut.forEach(t),har=r(j9e," \u2014 "),ZX=n(j9e,"A",{href:!0});var but=s(ZX);uar=r(but,"TFDistilBertModel"),but.forEach(t),par=r(j9e," (DistilBERT model)"),j9e.forEach(t),_ar=i(D),kM=n(D,"LI",{});var D9e=s(kM);k_e=n(D9e,"STRONG",{});var Fut=s(k_e);bar=r(Fut,"dpr"),Fut.forEach(t),Far=r(D9e," \u2014 "),ez=n(D9e,"A",{href:!0});var vut=s(ez);Tar=r(vut,"TFDPRQuestionEncoder"),vut.forEach(t),Mar=r(D9e," (DPR model)"),D9e.forEach(t),Ear=i(D),SM=n(D,"LI",{});var G9e=s(SM);S_e=n(G9e,"STRONG",{});var Tut=s(S_e);Car=r(Tut,"electra"),Tut.forEach(t),war=r(G9e," \u2014 "),oz=n(G9e,"A",{href:!0});var Mut=s(oz);Aar=r(Mut,"TFElectraModel"),Mut.forEach(t),yar=r(G9e," (ELECTRA model)"),G9e.forEach(t),Lar=i(D),RM=n(D,"LI",{});var O9e=s(RM);R_e=n(O9e,"STRONG",{});var Eut=s(R_e);xar=r(Eut,"flaubert"),Eut.forEach(t),$ar=r(O9e," \u2014 "),rz=n(O9e,"A",{href:!0});var Cut=s(rz);kar=r(Cut,"TFFlaubertModel"),Cut.forEach(t),Sar=r(O9e," (FlauBERT model)"),O9e.forEach(t),Rar=i(D),Bs=n(D,"LI",{});var a$=s(Bs);B_e=n(a$,"STRONG",{});var wut=s(B_e);Bar=r(wut,"funnel"),wut.forEach(t),Par=r(a$," \u2014 "),tz=n(a$,"A",{href:!0});var Aut=s(tz);Iar=r(Aut,"TFFunnelModel"),Aut.forEach(t),qar=r(a$," or "),az=n(a$,"A",{href:!0});var yut=s(az);Nar=r(yut,"TFFunnelBaseModel"),yut.forEach(t),jar=r(a$," (Funnel Transformer model)"),a$.forEach(t),Dar=i(D),BM=n(D,"LI",{});var V9e=s(BM);P_e=n(V9e,"STRONG",{});var Lut=s(P_e);Gar=r(Lut,"gpt2"),Lut.forEach(t),Oar=r(V9e," \u2014 "),nz=n(V9e,"A",{href:!0});var xut=s(nz);Var=r(xut,"TFGPT2Model"),xut.forEach(t),Xar=r(V9e," (OpenAI GPT-2 model)"),V9e.forEach(t),zar=i(D),PM=n(D,"LI",{});var X9e=s(PM);I_e=n(X9e,"STRONG",{});var $ut=s(I_e);Qar=r($ut,"gptj"),$ut.forEach(t),War=r(X9e," \u2014 "),sz=n(X9e,"A",{href:!0});var kut=s(sz);Har=r(kut,"TFGPTJModel"),kut.forEach(t),Uar=r(X9e," (GPT-J model)"),X9e.forEach(t),Jar=i(D),IM=n(D,"LI",{});var z9e=s(IM);q_e=n(z9e,"STRONG",{});var Sut=s(q_e);Yar=r(Sut,"hubert"),Sut.forEach(t),Kar=r(z9e," \u2014 "),lz=n(z9e,"A",{href:!0});var Rut=s(lz);Zar=r(Rut,"TFHubertModel"),Rut.forEach(t),enr=r(z9e," (Hubert model)"),z9e.forEach(t),onr=i(D),qM=n(D,"LI",{});var Q9e=s(qM);N_e=n(Q9e,"STRONG",{});var But=s(N_e);rnr=r(But,"layoutlm"),But.forEach(t),tnr=r(Q9e," \u2014 "),iz=n(Q9e,"A",{href:!0});var Put=s(iz);anr=r(Put,"TFLayoutLMModel"),Put.forEach(t),nnr=r(Q9e," (LayoutLM model)"),Q9e.forEach(t),snr=i(D),NM=n(D,"LI",{});var W9e=s(NM);j_e=n(W9e,"STRONG",{});var Iut=s(j_e);lnr=r(Iut,"led"),Iut.forEach(t),inr=r(W9e," \u2014 "),dz=n(W9e,"A",{href:!0});var qut=s(dz);dnr=r(qut,"TFLEDModel"),qut.forEach(t),cnr=r(W9e," (LED model)"),W9e.forEach(t),mnr=i(D),jM=n(D,"LI",{});var H9e=s(jM);D_e=n(H9e,"STRONG",{});var Nut=s(D_e);fnr=r(Nut,"longformer"),Nut.forEach(t),gnr=r(H9e," \u2014 "),cz=n(H9e,"A",{href:!0});var jut=s(cz);hnr=r(jut,"TFLongformerModel"),jut.forEach(t),unr=r(H9e," (Longformer model)"),H9e.forEach(t),pnr=i(D),DM=n(D,"LI",{});var U9e=s(DM);G_e=n(U9e,"STRONG",{});var Dut=s(G_e);_nr=r(Dut,"lxmert"),Dut.forEach(t),bnr=r(U9e," \u2014 "),mz=n(U9e,"A",{href:!0});var Gut=s(mz);Fnr=r(Gut,"TFLxmertModel"),Gut.forEach(t),vnr=r(U9e," (LXMERT model)"),U9e.forEach(t),Tnr=i(D),GM=n(D,"LI",{});var J9e=s(GM);O_e=n(J9e,"STRONG",{});var Out=s(O_e);Mnr=r(Out,"marian"),Out.forEach(t),Enr=r(J9e," \u2014 "),fz=n(J9e,"A",{href:!0});var Vut=s(fz);Cnr=r(Vut,"TFMarianModel"),Vut.forEach(t),wnr=r(J9e," (Marian model)"),J9e.forEach(t),Anr=i(D),OM=n(D,"LI",{});var Y9e=s(OM);V_e=n(Y9e,"STRONG",{});var Xut=s(V_e);ynr=r(Xut,"mbart"),Xut.forEach(t),Lnr=r(Y9e," \u2014 "),gz=n(Y9e,"A",{href:!0});var zut=s(gz);xnr=r(zut,"TFMBartModel"),zut.forEach(t),$nr=r(Y9e," (mBART model)"),Y9e.forEach(t),knr=i(D),VM=n(D,"LI",{});var K9e=s(VM);X_e=n(K9e,"STRONG",{});var Qut=s(X_e);Snr=r(Qut,"mobilebert"),Qut.forEach(t),Rnr=r(K9e," \u2014 "),hz=n(K9e,"A",{href:!0});var Wut=s(hz);Bnr=r(Wut,"TFMobileBertModel"),Wut.forEach(t),Pnr=r(K9e," (MobileBERT model)"),K9e.forEach(t),Inr=i(D),XM=n(D,"LI",{});var Z9e=s(XM);z_e=n(Z9e,"STRONG",{});var Hut=s(z_e);qnr=r(Hut,"mpnet"),Hut.forEach(t),Nnr=r(Z9e," \u2014 "),uz=n(Z9e,"A",{href:!0});var Uut=s(uz);jnr=r(Uut,"TFMPNetModel"),Uut.forEach(t),Dnr=r(Z9e," (MPNet model)"),Z9e.forEach(t),Gnr=i(D),zM=n(D,"LI",{});var e$e=s(zM);Q_e=n(e$e,"STRONG",{});var Jut=s(Q_e);Onr=r(Jut,"mt5"),Jut.forEach(t),Vnr=r(e$e," \u2014 "),pz=n(e$e,"A",{href:!0});var Yut=s(pz);Xnr=r(Yut,"TFMT5Model"),Yut.forEach(t),znr=r(e$e," (mT5 model)"),e$e.forEach(t),Qnr=i(D),QM=n(D,"LI",{});var o$e=s(QM);W_e=n(o$e,"STRONG",{});var Kut=s(W_e);Wnr=r(Kut,"openai-gpt"),Kut.forEach(t),Hnr=r(o$e," \u2014 "),_z=n(o$e,"A",{href:!0});var Zut=s(_z);Unr=r(Zut,"TFOpenAIGPTModel"),Zut.forEach(t),Jnr=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),Ynr=i(D),WM=n(D,"LI",{});var r$e=s(WM);H_e=n(r$e,"STRONG",{});var ept=s(H_e);Knr=r(ept,"pegasus"),ept.forEach(t),Znr=r(r$e," \u2014 "),bz=n(r$e,"A",{href:!0});var opt=s(bz);esr=r(opt,"TFPegasusModel"),opt.forEach(t),osr=r(r$e," (Pegasus model)"),r$e.forEach(t),rsr=i(D),HM=n(D,"LI",{});var t$e=s(HM);U_e=n(t$e,"STRONG",{});var rpt=s(U_e);tsr=r(rpt,"rembert"),rpt.forEach(t),asr=r(t$e," \u2014 "),Fz=n(t$e,"A",{href:!0});var tpt=s(Fz);nsr=r(tpt,"TFRemBertModel"),tpt.forEach(t),ssr=r(t$e," (RemBERT model)"),t$e.forEach(t),lsr=i(D),UM=n(D,"LI",{});var a$e=s(UM);J_e=n(a$e,"STRONG",{});var apt=s(J_e);isr=r(apt,"roberta"),apt.forEach(t),dsr=r(a$e," \u2014 "),vz=n(a$e,"A",{href:!0});var npt=s(vz);csr=r(npt,"TFRobertaModel"),npt.forEach(t),msr=r(a$e," (RoBERTa model)"),a$e.forEach(t),fsr=i(D),JM=n(D,"LI",{});var n$e=s(JM);Y_e=n(n$e,"STRONG",{});var spt=s(Y_e);gsr=r(spt,"roformer"),spt.forEach(t),hsr=r(n$e," \u2014 "),Tz=n(n$e,"A",{href:!0});var lpt=s(Tz);usr=r(lpt,"TFRoFormerModel"),lpt.forEach(t),psr=r(n$e," (RoFormer model)"),n$e.forEach(t),_sr=i(D),YM=n(D,"LI",{});var s$e=s(YM);K_e=n(s$e,"STRONG",{});var ipt=s(K_e);bsr=r(ipt,"speech_to_text"),ipt.forEach(t),Fsr=r(s$e," \u2014 "),Mz=n(s$e,"A",{href:!0});var dpt=s(Mz);vsr=r(dpt,"TFSpeech2TextModel"),dpt.forEach(t),Tsr=r(s$e," (Speech2Text model)"),s$e.forEach(t),Msr=i(D),KM=n(D,"LI",{});var l$e=s(KM);Z_e=n(l$e,"STRONG",{});var cpt=s(Z_e);Esr=r(cpt,"t5"),cpt.forEach(t),Csr=r(l$e," \u2014 "),Ez=n(l$e,"A",{href:!0});var mpt=s(Ez);wsr=r(mpt,"TFT5Model"),mpt.forEach(t),Asr=r(l$e," (T5 model)"),l$e.forEach(t),ysr=i(D),ZM=n(D,"LI",{});var i$e=s(ZM);ebe=n(i$e,"STRONG",{});var fpt=s(ebe);Lsr=r(fpt,"tapas"),fpt.forEach(t),xsr=r(i$e," \u2014 "),Cz=n(i$e,"A",{href:!0});var gpt=s(Cz);$sr=r(gpt,"TFTapasModel"),gpt.forEach(t),ksr=r(i$e," (TAPAS model)"),i$e.forEach(t),Ssr=i(D),e4=n(D,"LI",{});var d$e=s(e4);obe=n(d$e,"STRONG",{});var hpt=s(obe);Rsr=r(hpt,"transfo-xl"),hpt.forEach(t),Bsr=r(d$e," \u2014 "),wz=n(d$e,"A",{href:!0});var upt=s(wz);Psr=r(upt,"TFTransfoXLModel"),upt.forEach(t),Isr=r(d$e," (Transformer-XL model)"),d$e.forEach(t),qsr=i(D),o4=n(D,"LI",{});var c$e=s(o4);rbe=n(c$e,"STRONG",{});var ppt=s(rbe);Nsr=r(ppt,"vit"),ppt.forEach(t),jsr=r(c$e," \u2014 "),Az=n(c$e,"A",{href:!0});var _pt=s(Az);Dsr=r(_pt,"TFViTModel"),_pt.forEach(t),Gsr=r(c$e," (ViT model)"),c$e.forEach(t),Osr=i(D),r4=n(D,"LI",{});var m$e=s(r4);tbe=n(m$e,"STRONG",{});var bpt=s(tbe);Vsr=r(bpt,"vit_mae"),bpt.forEach(t),Xsr=r(m$e," \u2014 "),yz=n(m$e,"A",{href:!0});var Fpt=s(yz);zsr=r(Fpt,"TFViTMAEModel"),Fpt.forEach(t),Qsr=r(m$e," (ViTMAE model)"),m$e.forEach(t),Wsr=i(D),t4=n(D,"LI",{});var f$e=s(t4);abe=n(f$e,"STRONG",{});var vpt=s(abe);Hsr=r(vpt,"wav2vec2"),vpt.forEach(t),Usr=r(f$e," \u2014 "),Lz=n(f$e,"A",{href:!0});var Tpt=s(Lz);Jsr=r(Tpt,"TFWav2Vec2Model"),Tpt.forEach(t),Ysr=r(f$e," (Wav2Vec2 model)"),f$e.forEach(t),Ksr=i(D),a4=n(D,"LI",{});var g$e=s(a4);nbe=n(g$e,"STRONG",{});var Mpt=s(nbe);Zsr=r(Mpt,"xlm"),Mpt.forEach(t),elr=r(g$e," \u2014 "),xz=n(g$e,"A",{href:!0});var Ept=s(xz);olr=r(Ept,"TFXLMModel"),Ept.forEach(t),rlr=r(g$e," (XLM model)"),g$e.forEach(t),tlr=i(D),n4=n(D,"LI",{});var h$e=s(n4);sbe=n(h$e,"STRONG",{});var Cpt=s(sbe);alr=r(Cpt,"xlm-roberta"),Cpt.forEach(t),nlr=r(h$e," \u2014 "),$z=n(h$e,"A",{href:!0});var wpt=s($z);slr=r(wpt,"TFXLMRobertaModel"),wpt.forEach(t),llr=r(h$e," (XLM-RoBERTa model)"),h$e.forEach(t),ilr=i(D),s4=n(D,"LI",{});var u$e=s(s4);lbe=n(u$e,"STRONG",{});var Apt=s(lbe);dlr=r(Apt,"xlnet"),Apt.forEach(t),clr=r(u$e," \u2014 "),kz=n(u$e,"A",{href:!0});var ypt=s(kz);mlr=r(ypt,"TFXLNetModel"),ypt.forEach(t),flr=r(u$e," (XLNet model)"),u$e.forEach(t),D.forEach(t),glr=i(cl),T(l4.$$.fragment,cl),cl.forEach(t),dl.forEach(t),hIe=i(m),Dd=n(m,"H2",{class:!0});var vNe=s(Dd);i4=n(vNe,"A",{id:!0,class:!0,href:!0});var Lpt=s(i4);ibe=n(Lpt,"SPAN",{});var xpt=s(ibe);T(L8.$$.fragment,xpt),xpt.forEach(t),Lpt.forEach(t),hlr=i(vNe),dbe=n(vNe,"SPAN",{});var $pt=s(dbe);ulr=r($pt,"TFAutoModelForPreTraining"),$pt.forEach(t),vNe.forEach(t),uIe=i(m),Ko=n(m,"DIV",{class:!0});var ml=s(Ko);T(x8.$$.fragment,ml),plr=i(ml),Gd=n(ml,"P",{});var DK=s(Gd);_lr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=n(DK,"A",{href:!0});var kpt=s(Sz);blr=r(kpt,"from_pretrained()"),kpt.forEach(t),Flr=r(DK," class method or the "),Rz=n(DK,"A",{href:!0});var Spt=s(Rz);vlr=r(Spt,"from_config()"),Spt.forEach(t),Tlr=r(DK,` class
method.`),DK.forEach(t),Mlr=i(ml),$8=n(ml,"P",{});var TNe=s($8);Elr=r(TNe,"This class cannot be instantiated directly using "),cbe=n(TNe,"CODE",{});var Rpt=s(cbe);Clr=r(Rpt,"__init__()"),Rpt.forEach(t),wlr=r(TNe," (throws an error)."),TNe.forEach(t),Alr=i(ml),At=n(ml,"DIV",{class:!0});var O0=s(At);T(k8.$$.fragment,O0),ylr=i(O0),mbe=n(O0,"P",{});var Bpt=s(mbe);Llr=r(Bpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bpt.forEach(t),xlr=i(O0),Od=n(O0,"P",{});var GK=s(Od);$lr=r(GK,`Note:
Loading a model from its configuration file does `),fbe=n(GK,"STRONG",{});var Ppt=s(fbe);klr=r(Ppt,"not"),Ppt.forEach(t),Slr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(GK,"A",{href:!0});var Ipt=s(Bz);Rlr=r(Ipt,"from_pretrained()"),Ipt.forEach(t),Blr=r(GK," to load the model weights."),GK.forEach(t),Plr=i(O0),T(d4.$$.fragment,O0),O0.forEach(t),Ilr=i(ml),Ar=n(ml,"DIV",{class:!0});var fl=s(Ar);T(S8.$$.fragment,fl),qlr=i(fl),gbe=n(fl,"P",{});var qpt=s(gbe);Nlr=r(qpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qpt.forEach(t),jlr=i(fl),Za=n(fl,"P",{});var V0=s(Za);Dlr=r(V0,"The model class to instantiate is selected based on the "),hbe=n(V0,"CODE",{});var Npt=s(hbe);Glr=r(Npt,"model_type"),Npt.forEach(t),Olr=r(V0,` property of the config object (either
passed as an argument or loaded from `),ube=n(V0,"CODE",{});var jpt=s(ube);Vlr=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),Xlr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(V0,"CODE",{});var Dpt=s(pbe);zlr=r(Dpt,"pretrained_model_name_or_path"),Dpt.forEach(t),Qlr=r(V0,":"),V0.forEach(t),Wlr=i(fl),ne=n(fl,"UL",{});var le=s(ne);c4=n(le,"LI",{});var p$e=s(c4);_be=n(p$e,"STRONG",{});var Gpt=s(_be);Hlr=r(Gpt,"albert"),Gpt.forEach(t),Ulr=r(p$e," \u2014 "),Pz=n(p$e,"A",{href:!0});var Opt=s(Pz);Jlr=r(Opt,"TFAlbertForPreTraining"),Opt.forEach(t),Ylr=r(p$e," (ALBERT model)"),p$e.forEach(t),Klr=i(le),m4=n(le,"LI",{});var _$e=s(m4);bbe=n(_$e,"STRONG",{});var Vpt=s(bbe);Zlr=r(Vpt,"bart"),Vpt.forEach(t),eir=r(_$e," \u2014 "),Iz=n(_$e,"A",{href:!0});var Xpt=s(Iz);oir=r(Xpt,"TFBartForConditionalGeneration"),Xpt.forEach(t),rir=r(_$e," (BART model)"),_$e.forEach(t),tir=i(le),f4=n(le,"LI",{});var b$e=s(f4);Fbe=n(b$e,"STRONG",{});var zpt=s(Fbe);air=r(zpt,"bert"),zpt.forEach(t),nir=r(b$e," \u2014 "),qz=n(b$e,"A",{href:!0});var Qpt=s(qz);sir=r(Qpt,"TFBertForPreTraining"),Qpt.forEach(t),lir=r(b$e," (BERT model)"),b$e.forEach(t),iir=i(le),g4=n(le,"LI",{});var F$e=s(g4);vbe=n(F$e,"STRONG",{});var Wpt=s(vbe);dir=r(Wpt,"camembert"),Wpt.forEach(t),cir=r(F$e," \u2014 "),Nz=n(F$e,"A",{href:!0});var Hpt=s(Nz);mir=r(Hpt,"TFCamembertForMaskedLM"),Hpt.forEach(t),fir=r(F$e," (CamemBERT model)"),F$e.forEach(t),gir=i(le),h4=n(le,"LI",{});var v$e=s(h4);Tbe=n(v$e,"STRONG",{});var Upt=s(Tbe);hir=r(Upt,"ctrl"),Upt.forEach(t),uir=r(v$e," \u2014 "),jz=n(v$e,"A",{href:!0});var Jpt=s(jz);pir=r(Jpt,"TFCTRLLMHeadModel"),Jpt.forEach(t),_ir=r(v$e," (CTRL model)"),v$e.forEach(t),bir=i(le),u4=n(le,"LI",{});var T$e=s(u4);Mbe=n(T$e,"STRONG",{});var Ypt=s(Mbe);Fir=r(Ypt,"distilbert"),Ypt.forEach(t),vir=r(T$e," \u2014 "),Dz=n(T$e,"A",{href:!0});var Kpt=s(Dz);Tir=r(Kpt,"TFDistilBertForMaskedLM"),Kpt.forEach(t),Mir=r(T$e," (DistilBERT model)"),T$e.forEach(t),Eir=i(le),p4=n(le,"LI",{});var M$e=s(p4);Ebe=n(M$e,"STRONG",{});var Zpt=s(Ebe);Cir=r(Zpt,"electra"),Zpt.forEach(t),wir=r(M$e," \u2014 "),Gz=n(M$e,"A",{href:!0});var e_t=s(Gz);Air=r(e_t,"TFElectraForPreTraining"),e_t.forEach(t),yir=r(M$e," (ELECTRA model)"),M$e.forEach(t),Lir=i(le),_4=n(le,"LI",{});var E$e=s(_4);Cbe=n(E$e,"STRONG",{});var o_t=s(Cbe);xir=r(o_t,"flaubert"),o_t.forEach(t),$ir=r(E$e," \u2014 "),Oz=n(E$e,"A",{href:!0});var r_t=s(Oz);kir=r(r_t,"TFFlaubertWithLMHeadModel"),r_t.forEach(t),Sir=r(E$e," (FlauBERT model)"),E$e.forEach(t),Rir=i(le),b4=n(le,"LI",{});var C$e=s(b4);wbe=n(C$e,"STRONG",{});var t_t=s(wbe);Bir=r(t_t,"funnel"),t_t.forEach(t),Pir=r(C$e," \u2014 "),Vz=n(C$e,"A",{href:!0});var a_t=s(Vz);Iir=r(a_t,"TFFunnelForPreTraining"),a_t.forEach(t),qir=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),Nir=i(le),F4=n(le,"LI",{});var w$e=s(F4);Abe=n(w$e,"STRONG",{});var n_t=s(Abe);jir=r(n_t,"gpt2"),n_t.forEach(t),Dir=r(w$e," \u2014 "),Xz=n(w$e,"A",{href:!0});var s_t=s(Xz);Gir=r(s_t,"TFGPT2LMHeadModel"),s_t.forEach(t),Oir=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),Vir=i(le),v4=n(le,"LI",{});var A$e=s(v4);ybe=n(A$e,"STRONG",{});var l_t=s(ybe);Xir=r(l_t,"layoutlm"),l_t.forEach(t),zir=r(A$e," \u2014 "),zz=n(A$e,"A",{href:!0});var i_t=s(zz);Qir=r(i_t,"TFLayoutLMForMaskedLM"),i_t.forEach(t),Wir=r(A$e," (LayoutLM model)"),A$e.forEach(t),Hir=i(le),T4=n(le,"LI",{});var y$e=s(T4);Lbe=n(y$e,"STRONG",{});var d_t=s(Lbe);Uir=r(d_t,"lxmert"),d_t.forEach(t),Jir=r(y$e," \u2014 "),Qz=n(y$e,"A",{href:!0});var c_t=s(Qz);Yir=r(c_t,"TFLxmertForPreTraining"),c_t.forEach(t),Kir=r(y$e," (LXMERT model)"),y$e.forEach(t),Zir=i(le),M4=n(le,"LI",{});var L$e=s(M4);xbe=n(L$e,"STRONG",{});var m_t=s(xbe);edr=r(m_t,"mobilebert"),m_t.forEach(t),odr=r(L$e," \u2014 "),Wz=n(L$e,"A",{href:!0});var f_t=s(Wz);rdr=r(f_t,"TFMobileBertForPreTraining"),f_t.forEach(t),tdr=r(L$e," (MobileBERT model)"),L$e.forEach(t),adr=i(le),E4=n(le,"LI",{});var x$e=s(E4);$be=n(x$e,"STRONG",{});var g_t=s($be);ndr=r(g_t,"mpnet"),g_t.forEach(t),sdr=r(x$e," \u2014 "),Hz=n(x$e,"A",{href:!0});var h_t=s(Hz);ldr=r(h_t,"TFMPNetForMaskedLM"),h_t.forEach(t),idr=r(x$e," (MPNet model)"),x$e.forEach(t),ddr=i(le),C4=n(le,"LI",{});var $$e=s(C4);kbe=n($$e,"STRONG",{});var u_t=s(kbe);cdr=r(u_t,"openai-gpt"),u_t.forEach(t),mdr=r($$e," \u2014 "),Uz=n($$e,"A",{href:!0});var p_t=s(Uz);fdr=r(p_t,"TFOpenAIGPTLMHeadModel"),p_t.forEach(t),gdr=r($$e," (OpenAI GPT model)"),$$e.forEach(t),hdr=i(le),w4=n(le,"LI",{});var k$e=s(w4);Sbe=n(k$e,"STRONG",{});var __t=s(Sbe);udr=r(__t,"roberta"),__t.forEach(t),pdr=r(k$e," \u2014 "),Jz=n(k$e,"A",{href:!0});var b_t=s(Jz);_dr=r(b_t,"TFRobertaForMaskedLM"),b_t.forEach(t),bdr=r(k$e," (RoBERTa model)"),k$e.forEach(t),Fdr=i(le),A4=n(le,"LI",{});var S$e=s(A4);Rbe=n(S$e,"STRONG",{});var F_t=s(Rbe);vdr=r(F_t,"t5"),F_t.forEach(t),Tdr=r(S$e," \u2014 "),Yz=n(S$e,"A",{href:!0});var v_t=s(Yz);Mdr=r(v_t,"TFT5ForConditionalGeneration"),v_t.forEach(t),Edr=r(S$e," (T5 model)"),S$e.forEach(t),Cdr=i(le),y4=n(le,"LI",{});var R$e=s(y4);Bbe=n(R$e,"STRONG",{});var T_t=s(Bbe);wdr=r(T_t,"tapas"),T_t.forEach(t),Adr=r(R$e," \u2014 "),Kz=n(R$e,"A",{href:!0});var M_t=s(Kz);ydr=r(M_t,"TFTapasForMaskedLM"),M_t.forEach(t),Ldr=r(R$e," (TAPAS model)"),R$e.forEach(t),xdr=i(le),L4=n(le,"LI",{});var B$e=s(L4);Pbe=n(B$e,"STRONG",{});var E_t=s(Pbe);$dr=r(E_t,"transfo-xl"),E_t.forEach(t),kdr=r(B$e," \u2014 "),Zz=n(B$e,"A",{href:!0});var C_t=s(Zz);Sdr=r(C_t,"TFTransfoXLLMHeadModel"),C_t.forEach(t),Rdr=r(B$e," (Transformer-XL model)"),B$e.forEach(t),Bdr=i(le),x4=n(le,"LI",{});var P$e=s(x4);Ibe=n(P$e,"STRONG",{});var w_t=s(Ibe);Pdr=r(w_t,"vit_mae"),w_t.forEach(t),Idr=r(P$e," \u2014 "),eQ=n(P$e,"A",{href:!0});var A_t=s(eQ);qdr=r(A_t,"TFViTMAEForPreTraining"),A_t.forEach(t),Ndr=r(P$e," (ViTMAE model)"),P$e.forEach(t),jdr=i(le),$4=n(le,"LI",{});var I$e=s($4);qbe=n(I$e,"STRONG",{});var y_t=s(qbe);Ddr=r(y_t,"xlm"),y_t.forEach(t),Gdr=r(I$e," \u2014 "),oQ=n(I$e,"A",{href:!0});var L_t=s(oQ);Odr=r(L_t,"TFXLMWithLMHeadModel"),L_t.forEach(t),Vdr=r(I$e," (XLM model)"),I$e.forEach(t),Xdr=i(le),k4=n(le,"LI",{});var q$e=s(k4);Nbe=n(q$e,"STRONG",{});var x_t=s(Nbe);zdr=r(x_t,"xlm-roberta"),x_t.forEach(t),Qdr=r(q$e," \u2014 "),rQ=n(q$e,"A",{href:!0});var $_t=s(rQ);Wdr=r($_t,"TFXLMRobertaForMaskedLM"),$_t.forEach(t),Hdr=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),Udr=i(le),S4=n(le,"LI",{});var N$e=s(S4);jbe=n(N$e,"STRONG",{});var k_t=s(jbe);Jdr=r(k_t,"xlnet"),k_t.forEach(t),Ydr=r(N$e," \u2014 "),tQ=n(N$e,"A",{href:!0});var S_t=s(tQ);Kdr=r(S_t,"TFXLNetLMHeadModel"),S_t.forEach(t),Zdr=r(N$e," (XLNet model)"),N$e.forEach(t),le.forEach(t),ecr=i(fl),T(R4.$$.fragment,fl),fl.forEach(t),ml.forEach(t),pIe=i(m),Vd=n(m,"H2",{class:!0});var MNe=s(Vd);B4=n(MNe,"A",{id:!0,class:!0,href:!0});var R_t=s(B4);Dbe=n(R_t,"SPAN",{});var B_t=s(Dbe);T(R8.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),ocr=i(MNe),Gbe=n(MNe,"SPAN",{});var P_t=s(Gbe);rcr=r(P_t,"TFAutoModelForCausalLM"),P_t.forEach(t),MNe.forEach(t),_Ie=i(m),Zo=n(m,"DIV",{class:!0});var gl=s(Zo);T(B8.$$.fragment,gl),tcr=i(gl),Xd=n(gl,"P",{});var OK=s(Xd);acr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=n(OK,"A",{href:!0});var I_t=s(aQ);ncr=r(I_t,"from_pretrained()"),I_t.forEach(t),scr=r(OK," class method or the "),nQ=n(OK,"A",{href:!0});var q_t=s(nQ);lcr=r(q_t,"from_config()"),q_t.forEach(t),icr=r(OK,` class
method.`),OK.forEach(t),dcr=i(gl),P8=n(gl,"P",{});var ENe=s(P8);ccr=r(ENe,"This class cannot be instantiated directly using "),Obe=n(ENe,"CODE",{});var N_t=s(Obe);mcr=r(N_t,"__init__()"),N_t.forEach(t),fcr=r(ENe," (throws an error)."),ENe.forEach(t),gcr=i(gl),yt=n(gl,"DIV",{class:!0});var X0=s(yt);T(I8.$$.fragment,X0),hcr=i(X0),Vbe=n(X0,"P",{});var j_t=s(Vbe);ucr=r(j_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j_t.forEach(t),pcr=i(X0),zd=n(X0,"P",{});var VK=s(zd);_cr=r(VK,`Note:
Loading a model from its configuration file does `),Xbe=n(VK,"STRONG",{});var D_t=s(Xbe);bcr=r(D_t,"not"),D_t.forEach(t),Fcr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(VK,"A",{href:!0});var G_t=s(sQ);vcr=r(G_t,"from_pretrained()"),G_t.forEach(t),Tcr=r(VK," to load the model weights."),VK.forEach(t),Mcr=i(X0),T(P4.$$.fragment,X0),X0.forEach(t),Ecr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(q8.$$.fragment,hl),Ccr=i(hl),zbe=n(hl,"P",{});var O_t=s(zbe);wcr=r(O_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O_t.forEach(t),Acr=i(hl),en=n(hl,"P",{});var z0=s(en);ycr=r(z0,"The model class to instantiate is selected based on the "),Qbe=n(z0,"CODE",{});var V_t=s(Qbe);Lcr=r(V_t,"model_type"),V_t.forEach(t),xcr=r(z0,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(z0,"CODE",{});var X_t=s(Wbe);$cr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),kcr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(z0,"CODE",{});var z_t=s(Hbe);Scr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Rcr=r(z0,":"),z0.forEach(t),Bcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);I4=n(Ce,"LI",{});var j$e=s(I4);Ube=n(j$e,"STRONG",{});var Q_t=s(Ube);Pcr=r(Q_t,"bert"),Q_t.forEach(t),Icr=r(j$e," \u2014 "),lQ=n(j$e,"A",{href:!0});var W_t=s(lQ);qcr=r(W_t,"TFBertLMHeadModel"),W_t.forEach(t),Ncr=r(j$e," (BERT model)"),j$e.forEach(t),jcr=i(Ce),q4=n(Ce,"LI",{});var D$e=s(q4);Jbe=n(D$e,"STRONG",{});var H_t=s(Jbe);Dcr=r(H_t,"camembert"),H_t.forEach(t),Gcr=r(D$e," \u2014 "),iQ=n(D$e,"A",{href:!0});var U_t=s(iQ);Ocr=r(U_t,"TFCamembertForCausalLM"),U_t.forEach(t),Vcr=r(D$e," (CamemBERT model)"),D$e.forEach(t),Xcr=i(Ce),N4=n(Ce,"LI",{});var G$e=s(N4);Ybe=n(G$e,"STRONG",{});var J_t=s(Ybe);zcr=r(J_t,"ctrl"),J_t.forEach(t),Qcr=r(G$e," \u2014 "),dQ=n(G$e,"A",{href:!0});var Y_t=s(dQ);Wcr=r(Y_t,"TFCTRLLMHeadModel"),Y_t.forEach(t),Hcr=r(G$e," (CTRL model)"),G$e.forEach(t),Ucr=i(Ce),j4=n(Ce,"LI",{});var O$e=s(j4);Kbe=n(O$e,"STRONG",{});var K_t=s(Kbe);Jcr=r(K_t,"gpt2"),K_t.forEach(t),Ycr=r(O$e," \u2014 "),cQ=n(O$e,"A",{href:!0});var Z_t=s(cQ);Kcr=r(Z_t,"TFGPT2LMHeadModel"),Z_t.forEach(t),Zcr=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),emr=i(Ce),D4=n(Ce,"LI",{});var V$e=s(D4);Zbe=n(V$e,"STRONG",{});var ebt=s(Zbe);omr=r(ebt,"gptj"),ebt.forEach(t),rmr=r(V$e," \u2014 "),mQ=n(V$e,"A",{href:!0});var obt=s(mQ);tmr=r(obt,"TFGPTJForCausalLM"),obt.forEach(t),amr=r(V$e," (GPT-J model)"),V$e.forEach(t),nmr=i(Ce),G4=n(Ce,"LI",{});var X$e=s(G4);e2e=n(X$e,"STRONG",{});var rbt=s(e2e);smr=r(rbt,"openai-gpt"),rbt.forEach(t),lmr=r(X$e," \u2014 "),fQ=n(X$e,"A",{href:!0});var tbt=s(fQ);imr=r(tbt,"TFOpenAIGPTLMHeadModel"),tbt.forEach(t),dmr=r(X$e," (OpenAI GPT model)"),X$e.forEach(t),cmr=i(Ce),O4=n(Ce,"LI",{});var z$e=s(O4);o2e=n(z$e,"STRONG",{});var abt=s(o2e);mmr=r(abt,"rembert"),abt.forEach(t),fmr=r(z$e," \u2014 "),gQ=n(z$e,"A",{href:!0});var nbt=s(gQ);gmr=r(nbt,"TFRemBertForCausalLM"),nbt.forEach(t),hmr=r(z$e," (RemBERT model)"),z$e.forEach(t),umr=i(Ce),V4=n(Ce,"LI",{});var Q$e=s(V4);r2e=n(Q$e,"STRONG",{});var sbt=s(r2e);pmr=r(sbt,"roberta"),sbt.forEach(t),_mr=r(Q$e," \u2014 "),hQ=n(Q$e,"A",{href:!0});var lbt=s(hQ);bmr=r(lbt,"TFRobertaForCausalLM"),lbt.forEach(t),Fmr=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),vmr=i(Ce),X4=n(Ce,"LI",{});var W$e=s(X4);t2e=n(W$e,"STRONG",{});var ibt=s(t2e);Tmr=r(ibt,"roformer"),ibt.forEach(t),Mmr=r(W$e," \u2014 "),uQ=n(W$e,"A",{href:!0});var dbt=s(uQ);Emr=r(dbt,"TFRoFormerForCausalLM"),dbt.forEach(t),Cmr=r(W$e," (RoFormer model)"),W$e.forEach(t),wmr=i(Ce),z4=n(Ce,"LI",{});var H$e=s(z4);a2e=n(H$e,"STRONG",{});var cbt=s(a2e);Amr=r(cbt,"transfo-xl"),cbt.forEach(t),ymr=r(H$e," \u2014 "),pQ=n(H$e,"A",{href:!0});var mbt=s(pQ);Lmr=r(mbt,"TFTransfoXLLMHeadModel"),mbt.forEach(t),xmr=r(H$e," (Transformer-XL model)"),H$e.forEach(t),$mr=i(Ce),Q4=n(Ce,"LI",{});var U$e=s(Q4);n2e=n(U$e,"STRONG",{});var fbt=s(n2e);kmr=r(fbt,"xlm"),fbt.forEach(t),Smr=r(U$e," \u2014 "),_Q=n(U$e,"A",{href:!0});var gbt=s(_Q);Rmr=r(gbt,"TFXLMWithLMHeadModel"),gbt.forEach(t),Bmr=r(U$e," (XLM model)"),U$e.forEach(t),Pmr=i(Ce),W4=n(Ce,"LI",{});var J$e=s(W4);s2e=n(J$e,"STRONG",{});var hbt=s(s2e);Imr=r(hbt,"xlnet"),hbt.forEach(t),qmr=r(J$e," \u2014 "),bQ=n(J$e,"A",{href:!0});var ubt=s(bQ);Nmr=r(ubt,"TFXLNetLMHeadModel"),ubt.forEach(t),jmr=r(J$e," (XLNet model)"),J$e.forEach(t),Ce.forEach(t),Dmr=i(hl),T(H4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),bIe=i(m),Qd=n(m,"H2",{class:!0});var CNe=s(Qd);U4=n(CNe,"A",{id:!0,class:!0,href:!0});var pbt=s(U4);l2e=n(pbt,"SPAN",{});var _bt=s(l2e);T(N8.$$.fragment,_bt),_bt.forEach(t),pbt.forEach(t),Gmr=i(CNe),i2e=n(CNe,"SPAN",{});var bbt=s(i2e);Omr=r(bbt,"TFAutoModelForImageClassification"),bbt.forEach(t),CNe.forEach(t),FIe=i(m),er=n(m,"DIV",{class:!0});var ul=s(er);T(j8.$$.fragment,ul),Vmr=i(ul),Wd=n(ul,"P",{});var XK=s(Wd);Xmr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FQ=n(XK,"A",{href:!0});var Fbt=s(FQ);zmr=r(Fbt,"from_pretrained()"),Fbt.forEach(t),Qmr=r(XK," class method or the "),vQ=n(XK,"A",{href:!0});var vbt=s(vQ);Wmr=r(vbt,"from_config()"),vbt.forEach(t),Hmr=r(XK,` class
method.`),XK.forEach(t),Umr=i(ul),D8=n(ul,"P",{});var wNe=s(D8);Jmr=r(wNe,"This class cannot be instantiated directly using "),d2e=n(wNe,"CODE",{});var Tbt=s(d2e);Ymr=r(Tbt,"__init__()"),Tbt.forEach(t),Kmr=r(wNe," (throws an error)."),wNe.forEach(t),Zmr=i(ul),Lt=n(ul,"DIV",{class:!0});var Q0=s(Lt);T(G8.$$.fragment,Q0),efr=i(Q0),c2e=n(Q0,"P",{});var Mbt=s(c2e);ofr=r(Mbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mbt.forEach(t),rfr=i(Q0),Hd=n(Q0,"P",{});var zK=s(Hd);tfr=r(zK,`Note:
Loading a model from its configuration file does `),m2e=n(zK,"STRONG",{});var Ebt=s(m2e);afr=r(Ebt,"not"),Ebt.forEach(t),nfr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(zK,"A",{href:!0});var Cbt=s(TQ);sfr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),lfr=r(zK," to load the model weights."),zK.forEach(t),ifr=i(Q0),T(J4.$$.fragment,Q0),Q0.forEach(t),dfr=i(ul),Lr=n(ul,"DIV",{class:!0});var pl=s(Lr);T(O8.$$.fragment,pl),cfr=i(pl),f2e=n(pl,"P",{});var wbt=s(f2e);mfr=r(wbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wbt.forEach(t),ffr=i(pl),on=n(pl,"P",{});var W0=s(on);gfr=r(W0,"The model class to instantiate is selected based on the "),g2e=n(W0,"CODE",{});var Abt=s(g2e);hfr=r(Abt,"model_type"),Abt.forEach(t),ufr=r(W0,` property of the config object (either
passed as an argument or loaded from `),h2e=n(W0,"CODE",{});var ybt=s(h2e);pfr=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),_fr=r(W0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(W0,"CODE",{});var Lbt=s(u2e);bfr=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),Ffr=r(W0,":"),W0.forEach(t),vfr=i(pl),Ud=n(pl,"UL",{});var QK=s(Ud);Y4=n(QK,"LI",{});var Y$e=s(Y4);p2e=n(Y$e,"STRONG",{});var xbt=s(p2e);Tfr=r(xbt,"convnext"),xbt.forEach(t),Mfr=r(Y$e," \u2014 "),MQ=n(Y$e,"A",{href:!0});var $bt=s(MQ);Efr=r($bt,"TFConvNextForImageClassification"),$bt.forEach(t),Cfr=r(Y$e," (ConvNext model)"),Y$e.forEach(t),wfr=i(QK),K4=n(QK,"LI",{});var K$e=s(K4);_2e=n(K$e,"STRONG",{});var kbt=s(_2e);Afr=r(kbt,"data2vec-vision"),kbt.forEach(t),yfr=r(K$e," \u2014 "),EQ=n(K$e,"A",{href:!0});var Sbt=s(EQ);Lfr=r(Sbt,"TFData2VecVisionForImageClassification"),Sbt.forEach(t),xfr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),$fr=i(QK),Z4=n(QK,"LI",{});var Z$e=s(Z4);b2e=n(Z$e,"STRONG",{});var Rbt=s(b2e);kfr=r(Rbt,"vit"),Rbt.forEach(t),Sfr=r(Z$e," \u2014 "),CQ=n(Z$e,"A",{href:!0});var Bbt=s(CQ);Rfr=r(Bbt,"TFViTForImageClassification"),Bbt.forEach(t),Bfr=r(Z$e," (ViT model)"),Z$e.forEach(t),QK.forEach(t),Pfr=i(pl),T(eE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),vIe=i(m),Jd=n(m,"H2",{class:!0});var ANe=s(Jd);oE=n(ANe,"A",{id:!0,class:!0,href:!0});var Pbt=s(oE);F2e=n(Pbt,"SPAN",{});var Ibt=s(F2e);T(V8.$$.fragment,Ibt),Ibt.forEach(t),Pbt.forEach(t),Ifr=i(ANe),v2e=n(ANe,"SPAN",{});var qbt=s(v2e);qfr=r(qbt,"TFAutoModelForMaskedLM"),qbt.forEach(t),ANe.forEach(t),TIe=i(m),or=n(m,"DIV",{class:!0});var _l=s(or);T(X8.$$.fragment,_l),Nfr=i(_l),Yd=n(_l,"P",{});var WK=s(Yd);jfr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=n(WK,"A",{href:!0});var Nbt=s(wQ);Dfr=r(Nbt,"from_pretrained()"),Nbt.forEach(t),Gfr=r(WK," class method or the "),AQ=n(WK,"A",{href:!0});var jbt=s(AQ);Ofr=r(jbt,"from_config()"),jbt.forEach(t),Vfr=r(WK,` class
method.`),WK.forEach(t),Xfr=i(_l),z8=n(_l,"P",{});var yNe=s(z8);zfr=r(yNe,"This class cannot be instantiated directly using "),T2e=n(yNe,"CODE",{});var Dbt=s(T2e);Qfr=r(Dbt,"__init__()"),Dbt.forEach(t),Wfr=r(yNe," (throws an error)."),yNe.forEach(t),Hfr=i(_l),xt=n(_l,"DIV",{class:!0});var H0=s(xt);T(Q8.$$.fragment,H0),Ufr=i(H0),M2e=n(H0,"P",{});var Gbt=s(M2e);Jfr=r(Gbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Gbt.forEach(t),Yfr=i(H0),Kd=n(H0,"P",{});var HK=s(Kd);Kfr=r(HK,`Note:
Loading a model from its configuration file does `),E2e=n(HK,"STRONG",{});var Obt=s(E2e);Zfr=r(Obt,"not"),Obt.forEach(t),egr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(HK,"A",{href:!0});var Vbt=s(yQ);ogr=r(Vbt,"from_pretrained()"),Vbt.forEach(t),rgr=r(HK," to load the model weights."),HK.forEach(t),tgr=i(H0),T(rE.$$.fragment,H0),H0.forEach(t),agr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(W8.$$.fragment,bl),ngr=i(bl),C2e=n(bl,"P",{});var Xbt=s(C2e);sgr=r(Xbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Xbt.forEach(t),lgr=i(bl),rn=n(bl,"P",{});var U0=s(rn);igr=r(U0,"The model class to instantiate is selected based on the "),w2e=n(U0,"CODE",{});var zbt=s(w2e);dgr=r(zbt,"model_type"),zbt.forEach(t),cgr=r(U0,` property of the config object (either
passed as an argument or loaded from `),A2e=n(U0,"CODE",{});var Qbt=s(A2e);mgr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),fgr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(U0,"CODE",{});var Wbt=s(y2e);ggr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),hgr=r(U0,":"),U0.forEach(t),ugr=i(bl),ie=n(bl,"UL",{});var me=s(ie);tE=n(me,"LI",{});var eke=s(tE);L2e=n(eke,"STRONG",{});var Hbt=s(L2e);pgr=r(Hbt,"albert"),Hbt.forEach(t),_gr=r(eke," \u2014 "),LQ=n(eke,"A",{href:!0});var Ubt=s(LQ);bgr=r(Ubt,"TFAlbertForMaskedLM"),Ubt.forEach(t),Fgr=r(eke," (ALBERT model)"),eke.forEach(t),vgr=i(me),aE=n(me,"LI",{});var oke=s(aE);x2e=n(oke,"STRONG",{});var Jbt=s(x2e);Tgr=r(Jbt,"bert"),Jbt.forEach(t),Mgr=r(oke," \u2014 "),xQ=n(oke,"A",{href:!0});var Ybt=s(xQ);Egr=r(Ybt,"TFBertForMaskedLM"),Ybt.forEach(t),Cgr=r(oke," (BERT model)"),oke.forEach(t),wgr=i(me),nE=n(me,"LI",{});var rke=s(nE);$2e=n(rke,"STRONG",{});var Kbt=s($2e);Agr=r(Kbt,"camembert"),Kbt.forEach(t),ygr=r(rke," \u2014 "),$Q=n(rke,"A",{href:!0});var Zbt=s($Q);Lgr=r(Zbt,"TFCamembertForMaskedLM"),Zbt.forEach(t),xgr=r(rke," (CamemBERT model)"),rke.forEach(t),$gr=i(me),sE=n(me,"LI",{});var tke=s(sE);k2e=n(tke,"STRONG",{});var e2t=s(k2e);kgr=r(e2t,"convbert"),e2t.forEach(t),Sgr=r(tke," \u2014 "),kQ=n(tke,"A",{href:!0});var o2t=s(kQ);Rgr=r(o2t,"TFConvBertForMaskedLM"),o2t.forEach(t),Bgr=r(tke," (ConvBERT model)"),tke.forEach(t),Pgr=i(me),lE=n(me,"LI",{});var ake=s(lE);S2e=n(ake,"STRONG",{});var r2t=s(S2e);Igr=r(r2t,"deberta"),r2t.forEach(t),qgr=r(ake," \u2014 "),SQ=n(ake,"A",{href:!0});var t2t=s(SQ);Ngr=r(t2t,"TFDebertaForMaskedLM"),t2t.forEach(t),jgr=r(ake," (DeBERTa model)"),ake.forEach(t),Dgr=i(me),iE=n(me,"LI",{});var nke=s(iE);R2e=n(nke,"STRONG",{});var a2t=s(R2e);Ggr=r(a2t,"deberta-v2"),a2t.forEach(t),Ogr=r(nke," \u2014 "),RQ=n(nke,"A",{href:!0});var n2t=s(RQ);Vgr=r(n2t,"TFDebertaV2ForMaskedLM"),n2t.forEach(t),Xgr=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),zgr=i(me),dE=n(me,"LI",{});var ske=s(dE);B2e=n(ske,"STRONG",{});var s2t=s(B2e);Qgr=r(s2t,"distilbert"),s2t.forEach(t),Wgr=r(ske," \u2014 "),BQ=n(ske,"A",{href:!0});var l2t=s(BQ);Hgr=r(l2t,"TFDistilBertForMaskedLM"),l2t.forEach(t),Ugr=r(ske," (DistilBERT model)"),ske.forEach(t),Jgr=i(me),cE=n(me,"LI",{});var lke=s(cE);P2e=n(lke,"STRONG",{});var i2t=s(P2e);Ygr=r(i2t,"electra"),i2t.forEach(t),Kgr=r(lke," \u2014 "),PQ=n(lke,"A",{href:!0});var d2t=s(PQ);Zgr=r(d2t,"TFElectraForMaskedLM"),d2t.forEach(t),ehr=r(lke," (ELECTRA model)"),lke.forEach(t),ohr=i(me),mE=n(me,"LI",{});var ike=s(mE);I2e=n(ike,"STRONG",{});var c2t=s(I2e);rhr=r(c2t,"flaubert"),c2t.forEach(t),thr=r(ike," \u2014 "),IQ=n(ike,"A",{href:!0});var m2t=s(IQ);ahr=r(m2t,"TFFlaubertWithLMHeadModel"),m2t.forEach(t),nhr=r(ike," (FlauBERT model)"),ike.forEach(t),shr=i(me),fE=n(me,"LI",{});var dke=s(fE);q2e=n(dke,"STRONG",{});var f2t=s(q2e);lhr=r(f2t,"funnel"),f2t.forEach(t),ihr=r(dke," \u2014 "),qQ=n(dke,"A",{href:!0});var g2t=s(qQ);dhr=r(g2t,"TFFunnelForMaskedLM"),g2t.forEach(t),chr=r(dke," (Funnel Transformer model)"),dke.forEach(t),mhr=i(me),gE=n(me,"LI",{});var cke=s(gE);N2e=n(cke,"STRONG",{});var h2t=s(N2e);fhr=r(h2t,"layoutlm"),h2t.forEach(t),ghr=r(cke," \u2014 "),NQ=n(cke,"A",{href:!0});var u2t=s(NQ);hhr=r(u2t,"TFLayoutLMForMaskedLM"),u2t.forEach(t),uhr=r(cke," (LayoutLM model)"),cke.forEach(t),phr=i(me),hE=n(me,"LI",{});var mke=s(hE);j2e=n(mke,"STRONG",{});var p2t=s(j2e);_hr=r(p2t,"longformer"),p2t.forEach(t),bhr=r(mke," \u2014 "),jQ=n(mke,"A",{href:!0});var _2t=s(jQ);Fhr=r(_2t,"TFLongformerForMaskedLM"),_2t.forEach(t),vhr=r(mke," (Longformer model)"),mke.forEach(t),Thr=i(me),uE=n(me,"LI",{});var fke=s(uE);D2e=n(fke,"STRONG",{});var b2t=s(D2e);Mhr=r(b2t,"mobilebert"),b2t.forEach(t),Ehr=r(fke," \u2014 "),DQ=n(fke,"A",{href:!0});var F2t=s(DQ);Chr=r(F2t,"TFMobileBertForMaskedLM"),F2t.forEach(t),whr=r(fke," (MobileBERT model)"),fke.forEach(t),Ahr=i(me),pE=n(me,"LI",{});var gke=s(pE);G2e=n(gke,"STRONG",{});var v2t=s(G2e);yhr=r(v2t,"mpnet"),v2t.forEach(t),Lhr=r(gke," \u2014 "),GQ=n(gke,"A",{href:!0});var T2t=s(GQ);xhr=r(T2t,"TFMPNetForMaskedLM"),T2t.forEach(t),$hr=r(gke," (MPNet model)"),gke.forEach(t),khr=i(me),_E=n(me,"LI",{});var hke=s(_E);O2e=n(hke,"STRONG",{});var M2t=s(O2e);Shr=r(M2t,"rembert"),M2t.forEach(t),Rhr=r(hke," \u2014 "),OQ=n(hke,"A",{href:!0});var E2t=s(OQ);Bhr=r(E2t,"TFRemBertForMaskedLM"),E2t.forEach(t),Phr=r(hke," (RemBERT model)"),hke.forEach(t),Ihr=i(me),bE=n(me,"LI",{});var uke=s(bE);V2e=n(uke,"STRONG",{});var C2t=s(V2e);qhr=r(C2t,"roberta"),C2t.forEach(t),Nhr=r(uke," \u2014 "),VQ=n(uke,"A",{href:!0});var w2t=s(VQ);jhr=r(w2t,"TFRobertaForMaskedLM"),w2t.forEach(t),Dhr=r(uke," (RoBERTa model)"),uke.forEach(t),Ghr=i(me),FE=n(me,"LI",{});var pke=s(FE);X2e=n(pke,"STRONG",{});var A2t=s(X2e);Ohr=r(A2t,"roformer"),A2t.forEach(t),Vhr=r(pke," \u2014 "),XQ=n(pke,"A",{href:!0});var y2t=s(XQ);Xhr=r(y2t,"TFRoFormerForMaskedLM"),y2t.forEach(t),zhr=r(pke," (RoFormer model)"),pke.forEach(t),Qhr=i(me),vE=n(me,"LI",{});var _ke=s(vE);z2e=n(_ke,"STRONG",{});var L2t=s(z2e);Whr=r(L2t,"tapas"),L2t.forEach(t),Hhr=r(_ke," \u2014 "),zQ=n(_ke,"A",{href:!0});var x2t=s(zQ);Uhr=r(x2t,"TFTapasForMaskedLM"),x2t.forEach(t),Jhr=r(_ke," (TAPAS model)"),_ke.forEach(t),Yhr=i(me),TE=n(me,"LI",{});var bke=s(TE);Q2e=n(bke,"STRONG",{});var $2t=s(Q2e);Khr=r($2t,"xlm"),$2t.forEach(t),Zhr=r(bke," \u2014 "),QQ=n(bke,"A",{href:!0});var k2t=s(QQ);eur=r(k2t,"TFXLMWithLMHeadModel"),k2t.forEach(t),our=r(bke," (XLM model)"),bke.forEach(t),rur=i(me),ME=n(me,"LI",{});var Fke=s(ME);W2e=n(Fke,"STRONG",{});var S2t=s(W2e);tur=r(S2t,"xlm-roberta"),S2t.forEach(t),aur=r(Fke," \u2014 "),WQ=n(Fke,"A",{href:!0});var R2t=s(WQ);nur=r(R2t,"TFXLMRobertaForMaskedLM"),R2t.forEach(t),sur=r(Fke," (XLM-RoBERTa model)"),Fke.forEach(t),me.forEach(t),lur=i(bl),T(EE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),MIe=i(m),Zd=n(m,"H2",{class:!0});var LNe=s(Zd);CE=n(LNe,"A",{id:!0,class:!0,href:!0});var B2t=s(CE);H2e=n(B2t,"SPAN",{});var P2t=s(H2e);T(H8.$$.fragment,P2t),P2t.forEach(t),B2t.forEach(t),iur=i(LNe),U2e=n(LNe,"SPAN",{});var I2t=s(U2e);dur=r(I2t,"TFAutoModelForSeq2SeqLM"),I2t.forEach(t),LNe.forEach(t),EIe=i(m),rr=n(m,"DIV",{class:!0});var Fl=s(rr);T(U8.$$.fragment,Fl),cur=i(Fl),ec=n(Fl,"P",{});var UK=s(ec);mur=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=n(UK,"A",{href:!0});var q2t=s(HQ);fur=r(q2t,"from_pretrained()"),q2t.forEach(t),gur=r(UK," class method or the "),UQ=n(UK,"A",{href:!0});var N2t=s(UQ);hur=r(N2t,"from_config()"),N2t.forEach(t),uur=r(UK,` class
method.`),UK.forEach(t),pur=i(Fl),J8=n(Fl,"P",{});var xNe=s(J8);_ur=r(xNe,"This class cannot be instantiated directly using "),J2e=n(xNe,"CODE",{});var j2t=s(J2e);bur=r(j2t,"__init__()"),j2t.forEach(t),Fur=r(xNe," (throws an error)."),xNe.forEach(t),vur=i(Fl),$t=n(Fl,"DIV",{class:!0});var J0=s($t);T(Y8.$$.fragment,J0),Tur=i(J0),Y2e=n(J0,"P",{});var D2t=s(Y2e);Mur=r(D2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D2t.forEach(t),Eur=i(J0),oc=n(J0,"P",{});var JK=s(oc);Cur=r(JK,`Note:
Loading a model from its configuration file does `),K2e=n(JK,"STRONG",{});var G2t=s(K2e);wur=r(G2t,"not"),G2t.forEach(t),Aur=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(JK,"A",{href:!0});var O2t=s(JQ);yur=r(O2t,"from_pretrained()"),O2t.forEach(t),Lur=r(JK," to load the model weights."),JK.forEach(t),xur=i(J0),T(wE.$$.fragment,J0),J0.forEach(t),$ur=i(Fl),$r=n(Fl,"DIV",{class:!0});var vl=s($r);T(K8.$$.fragment,vl),kur=i(vl),Z2e=n(vl,"P",{});var V2t=s(Z2e);Sur=r(V2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V2t.forEach(t),Rur=i(vl),tn=n(vl,"P",{});var Y0=s(tn);Bur=r(Y0,"The model class to instantiate is selected based on the "),eFe=n(Y0,"CODE",{});var X2t=s(eFe);Pur=r(X2t,"model_type"),X2t.forEach(t),Iur=r(Y0,` property of the config object (either
passed as an argument or loaded from `),oFe=n(Y0,"CODE",{});var z2t=s(oFe);qur=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),Nur=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(Y0,"CODE",{});var Q2t=s(rFe);jur=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),Dur=r(Y0,":"),Y0.forEach(t),Gur=i(vl),ye=n(vl,"UL",{});var Re=s(ye);AE=n(Re,"LI",{});var vke=s(AE);tFe=n(vke,"STRONG",{});var W2t=s(tFe);Our=r(W2t,"bart"),W2t.forEach(t),Vur=r(vke," \u2014 "),YQ=n(vke,"A",{href:!0});var H2t=s(YQ);Xur=r(H2t,"TFBartForConditionalGeneration"),H2t.forEach(t),zur=r(vke," (BART model)"),vke.forEach(t),Qur=i(Re),yE=n(Re,"LI",{});var Tke=s(yE);aFe=n(Tke,"STRONG",{});var U2t=s(aFe);Wur=r(U2t,"blenderbot"),U2t.forEach(t),Hur=r(Tke," \u2014 "),KQ=n(Tke,"A",{href:!0});var J2t=s(KQ);Uur=r(J2t,"TFBlenderbotForConditionalGeneration"),J2t.forEach(t),Jur=r(Tke," (Blenderbot model)"),Tke.forEach(t),Yur=i(Re),LE=n(Re,"LI",{});var Mke=s(LE);nFe=n(Mke,"STRONG",{});var Y2t=s(nFe);Kur=r(Y2t,"blenderbot-small"),Y2t.forEach(t),Zur=r(Mke," \u2014 "),ZQ=n(Mke,"A",{href:!0});var K2t=s(ZQ);epr=r(K2t,"TFBlenderbotSmallForConditionalGeneration"),K2t.forEach(t),opr=r(Mke," (BlenderbotSmall model)"),Mke.forEach(t),rpr=i(Re),xE=n(Re,"LI",{});var Eke=s(xE);sFe=n(Eke,"STRONG",{});var Z2t=s(sFe);tpr=r(Z2t,"encoder-decoder"),Z2t.forEach(t),apr=r(Eke," \u2014 "),eW=n(Eke,"A",{href:!0});var eFt=s(eW);npr=r(eFt,"TFEncoderDecoderModel"),eFt.forEach(t),spr=r(Eke," (Encoder decoder model)"),Eke.forEach(t),lpr=i(Re),$E=n(Re,"LI",{});var Cke=s($E);lFe=n(Cke,"STRONG",{});var oFt=s(lFe);ipr=r(oFt,"led"),oFt.forEach(t),dpr=r(Cke," \u2014 "),oW=n(Cke,"A",{href:!0});var rFt=s(oW);cpr=r(rFt,"TFLEDForConditionalGeneration"),rFt.forEach(t),mpr=r(Cke," (LED model)"),Cke.forEach(t),fpr=i(Re),kE=n(Re,"LI",{});var wke=s(kE);iFe=n(wke,"STRONG",{});var tFt=s(iFe);gpr=r(tFt,"marian"),tFt.forEach(t),hpr=r(wke," \u2014 "),rW=n(wke,"A",{href:!0});var aFt=s(rW);upr=r(aFt,"TFMarianMTModel"),aFt.forEach(t),ppr=r(wke," (Marian model)"),wke.forEach(t),_pr=i(Re),SE=n(Re,"LI",{});var Ake=s(SE);dFe=n(Ake,"STRONG",{});var nFt=s(dFe);bpr=r(nFt,"mbart"),nFt.forEach(t),Fpr=r(Ake," \u2014 "),tW=n(Ake,"A",{href:!0});var sFt=s(tW);vpr=r(sFt,"TFMBartForConditionalGeneration"),sFt.forEach(t),Tpr=r(Ake," (mBART model)"),Ake.forEach(t),Mpr=i(Re),RE=n(Re,"LI",{});var yke=s(RE);cFe=n(yke,"STRONG",{});var lFt=s(cFe);Epr=r(lFt,"mt5"),lFt.forEach(t),Cpr=r(yke," \u2014 "),aW=n(yke,"A",{href:!0});var iFt=s(aW);wpr=r(iFt,"TFMT5ForConditionalGeneration"),iFt.forEach(t),Apr=r(yke," (mT5 model)"),yke.forEach(t),ypr=i(Re),BE=n(Re,"LI",{});var Lke=s(BE);mFe=n(Lke,"STRONG",{});var dFt=s(mFe);Lpr=r(dFt,"pegasus"),dFt.forEach(t),xpr=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var cFt=s(nW);$pr=r(cFt,"TFPegasusForConditionalGeneration"),cFt.forEach(t),kpr=r(Lke," (Pegasus model)"),Lke.forEach(t),Spr=i(Re),PE=n(Re,"LI",{});var xke=s(PE);fFe=n(xke,"STRONG",{});var mFt=s(fFe);Rpr=r(mFt,"t5"),mFt.forEach(t),Bpr=r(xke," \u2014 "),sW=n(xke,"A",{href:!0});var fFt=s(sW);Ppr=r(fFt,"TFT5ForConditionalGeneration"),fFt.forEach(t),Ipr=r(xke," (T5 model)"),xke.forEach(t),Re.forEach(t),qpr=i(vl),T(IE.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),CIe=i(m),rc=n(m,"H2",{class:!0});var $Ne=s(rc);qE=n($Ne,"A",{id:!0,class:!0,href:!0});var gFt=s(qE);gFe=n(gFt,"SPAN",{});var hFt=s(gFe);T(Z8.$$.fragment,hFt),hFt.forEach(t),gFt.forEach(t),Npr=i($Ne),hFe=n($Ne,"SPAN",{});var uFt=s(hFe);jpr=r(uFt,"TFAutoModelForSequenceClassification"),uFt.forEach(t),$Ne.forEach(t),wIe=i(m),tr=n(m,"DIV",{class:!0});var Tl=s(tr);T(ex.$$.fragment,Tl),Dpr=i(Tl),tc=n(Tl,"P",{});var YK=s(tc);Gpr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=n(YK,"A",{href:!0});var pFt=s(lW);Opr=r(pFt,"from_pretrained()"),pFt.forEach(t),Vpr=r(YK," class method or the "),iW=n(YK,"A",{href:!0});var _Ft=s(iW);Xpr=r(_Ft,"from_config()"),_Ft.forEach(t),zpr=r(YK,` class
method.`),YK.forEach(t),Qpr=i(Tl),ox=n(Tl,"P",{});var kNe=s(ox);Wpr=r(kNe,"This class cannot be instantiated directly using "),uFe=n(kNe,"CODE",{});var bFt=s(uFe);Hpr=r(bFt,"__init__()"),bFt.forEach(t),Upr=r(kNe," (throws an error)."),kNe.forEach(t),Jpr=i(Tl),kt=n(Tl,"DIV",{class:!0});var K0=s(kt);T(rx.$$.fragment,K0),Ypr=i(K0),pFe=n(K0,"P",{});var FFt=s(pFe);Kpr=r(FFt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),FFt.forEach(t),Zpr=i(K0),ac=n(K0,"P",{});var KK=s(ac);e_r=r(KK,`Note:
Loading a model from its configuration file does `),_Fe=n(KK,"STRONG",{});var vFt=s(_Fe);o_r=r(vFt,"not"),vFt.forEach(t),r_r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(KK,"A",{href:!0});var TFt=s(dW);t_r=r(TFt,"from_pretrained()"),TFt.forEach(t),a_r=r(KK," to load the model weights."),KK.forEach(t),n_r=i(K0),T(NE.$$.fragment,K0),K0.forEach(t),s_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(tx.$$.fragment,Ml),l_r=i(Ml),bFe=n(Ml,"P",{});var MFt=s(bFe);i_r=r(MFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MFt.forEach(t),d_r=i(Ml),an=n(Ml,"P",{});var Z0=s(an);c_r=r(Z0,"The model class to instantiate is selected based on the "),FFe=n(Z0,"CODE",{});var EFt=s(FFe);m_r=r(EFt,"model_type"),EFt.forEach(t),f_r=r(Z0,` property of the config object (either
passed as an argument or loaded from `),vFe=n(Z0,"CODE",{});var CFt=s(vFe);g_r=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),h_r=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(Z0,"CODE",{});var wFt=s(TFe);u_r=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),p_r=r(Z0,":"),Z0.forEach(t),__r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);jE=n(re,"LI",{});var $ke=s(jE);MFe=n($ke,"STRONG",{});var AFt=s(MFe);b_r=r(AFt,"albert"),AFt.forEach(t),F_r=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var yFt=s(cW);v_r=r(yFt,"TFAlbertForSequenceClassification"),yFt.forEach(t),T_r=r($ke," (ALBERT model)"),$ke.forEach(t),M_r=i(re),DE=n(re,"LI",{});var kke=s(DE);EFe=n(kke,"STRONG",{});var LFt=s(EFe);E_r=r(LFt,"bert"),LFt.forEach(t),C_r=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var xFt=s(mW);w_r=r(xFt,"TFBertForSequenceClassification"),xFt.forEach(t),A_r=r(kke," (BERT model)"),kke.forEach(t),y_r=i(re),GE=n(re,"LI",{});var Ske=s(GE);CFe=n(Ske,"STRONG",{});var $Ft=s(CFe);L_r=r($Ft,"camembert"),$Ft.forEach(t),x_r=r(Ske," \u2014 "),fW=n(Ske,"A",{href:!0});var kFt=s(fW);$_r=r(kFt,"TFCamembertForSequenceClassification"),kFt.forEach(t),k_r=r(Ske," (CamemBERT model)"),Ske.forEach(t),S_r=i(re),OE=n(re,"LI",{});var Rke=s(OE);wFe=n(Rke,"STRONG",{});var SFt=s(wFe);R_r=r(SFt,"convbert"),SFt.forEach(t),B_r=r(Rke," \u2014 "),gW=n(Rke,"A",{href:!0});var RFt=s(gW);P_r=r(RFt,"TFConvBertForSequenceClassification"),RFt.forEach(t),I_r=r(Rke," (ConvBERT model)"),Rke.forEach(t),q_r=i(re),VE=n(re,"LI",{});var Bke=s(VE);AFe=n(Bke,"STRONG",{});var BFt=s(AFe);N_r=r(BFt,"ctrl"),BFt.forEach(t),j_r=r(Bke," \u2014 "),hW=n(Bke,"A",{href:!0});var PFt=s(hW);D_r=r(PFt,"TFCTRLForSequenceClassification"),PFt.forEach(t),G_r=r(Bke," (CTRL model)"),Bke.forEach(t),O_r=i(re),XE=n(re,"LI",{});var Pke=s(XE);yFe=n(Pke,"STRONG",{});var IFt=s(yFe);V_r=r(IFt,"deberta"),IFt.forEach(t),X_r=r(Pke," \u2014 "),uW=n(Pke,"A",{href:!0});var qFt=s(uW);z_r=r(qFt,"TFDebertaForSequenceClassification"),qFt.forEach(t),Q_r=r(Pke," (DeBERTa model)"),Pke.forEach(t),W_r=i(re),zE=n(re,"LI",{});var Ike=s(zE);LFe=n(Ike,"STRONG",{});var NFt=s(LFe);H_r=r(NFt,"deberta-v2"),NFt.forEach(t),U_r=r(Ike," \u2014 "),pW=n(Ike,"A",{href:!0});var jFt=s(pW);J_r=r(jFt,"TFDebertaV2ForSequenceClassification"),jFt.forEach(t),Y_r=r(Ike," (DeBERTa-v2 model)"),Ike.forEach(t),K_r=i(re),QE=n(re,"LI",{});var qke=s(QE);xFe=n(qke,"STRONG",{});var DFt=s(xFe);Z_r=r(DFt,"distilbert"),DFt.forEach(t),ebr=r(qke," \u2014 "),_W=n(qke,"A",{href:!0});var GFt=s(_W);obr=r(GFt,"TFDistilBertForSequenceClassification"),GFt.forEach(t),rbr=r(qke," (DistilBERT model)"),qke.forEach(t),tbr=i(re),WE=n(re,"LI",{});var Nke=s(WE);$Fe=n(Nke,"STRONG",{});var OFt=s($Fe);abr=r(OFt,"electra"),OFt.forEach(t),nbr=r(Nke," \u2014 "),bW=n(Nke,"A",{href:!0});var VFt=s(bW);sbr=r(VFt,"TFElectraForSequenceClassification"),VFt.forEach(t),lbr=r(Nke," (ELECTRA model)"),Nke.forEach(t),ibr=i(re),HE=n(re,"LI",{});var jke=s(HE);kFe=n(jke,"STRONG",{});var XFt=s(kFe);dbr=r(XFt,"flaubert"),XFt.forEach(t),cbr=r(jke," \u2014 "),FW=n(jke,"A",{href:!0});var zFt=s(FW);mbr=r(zFt,"TFFlaubertForSequenceClassification"),zFt.forEach(t),fbr=r(jke," (FlauBERT model)"),jke.forEach(t),gbr=i(re),UE=n(re,"LI",{});var Dke=s(UE);SFe=n(Dke,"STRONG",{});var QFt=s(SFe);hbr=r(QFt,"funnel"),QFt.forEach(t),ubr=r(Dke," \u2014 "),vW=n(Dke,"A",{href:!0});var WFt=s(vW);pbr=r(WFt,"TFFunnelForSequenceClassification"),WFt.forEach(t),_br=r(Dke," (Funnel Transformer model)"),Dke.forEach(t),bbr=i(re),JE=n(re,"LI",{});var Gke=s(JE);RFe=n(Gke,"STRONG",{});var HFt=s(RFe);Fbr=r(HFt,"gpt2"),HFt.forEach(t),vbr=r(Gke," \u2014 "),TW=n(Gke,"A",{href:!0});var UFt=s(TW);Tbr=r(UFt,"TFGPT2ForSequenceClassification"),UFt.forEach(t),Mbr=r(Gke," (OpenAI GPT-2 model)"),Gke.forEach(t),Ebr=i(re),YE=n(re,"LI",{});var Oke=s(YE);BFe=n(Oke,"STRONG",{});var JFt=s(BFe);Cbr=r(JFt,"gptj"),JFt.forEach(t),wbr=r(Oke," \u2014 "),MW=n(Oke,"A",{href:!0});var YFt=s(MW);Abr=r(YFt,"TFGPTJForSequenceClassification"),YFt.forEach(t),ybr=r(Oke," (GPT-J model)"),Oke.forEach(t),Lbr=i(re),KE=n(re,"LI",{});var Vke=s(KE);PFe=n(Vke,"STRONG",{});var KFt=s(PFe);xbr=r(KFt,"layoutlm"),KFt.forEach(t),$br=r(Vke," \u2014 "),EW=n(Vke,"A",{href:!0});var ZFt=s(EW);kbr=r(ZFt,"TFLayoutLMForSequenceClassification"),ZFt.forEach(t),Sbr=r(Vke," (LayoutLM model)"),Vke.forEach(t),Rbr=i(re),ZE=n(re,"LI",{});var Xke=s(ZE);IFe=n(Xke,"STRONG",{});var evt=s(IFe);Bbr=r(evt,"longformer"),evt.forEach(t),Pbr=r(Xke," \u2014 "),CW=n(Xke,"A",{href:!0});var ovt=s(CW);Ibr=r(ovt,"TFLongformerForSequenceClassification"),ovt.forEach(t),qbr=r(Xke," (Longformer model)"),Xke.forEach(t),Nbr=i(re),e5=n(re,"LI",{});var zke=s(e5);qFe=n(zke,"STRONG",{});var rvt=s(qFe);jbr=r(rvt,"mobilebert"),rvt.forEach(t),Dbr=r(zke," \u2014 "),wW=n(zke,"A",{href:!0});var tvt=s(wW);Gbr=r(tvt,"TFMobileBertForSequenceClassification"),tvt.forEach(t),Obr=r(zke," (MobileBERT model)"),zke.forEach(t),Vbr=i(re),o5=n(re,"LI",{});var Qke=s(o5);NFe=n(Qke,"STRONG",{});var avt=s(NFe);Xbr=r(avt,"mpnet"),avt.forEach(t),zbr=r(Qke," \u2014 "),AW=n(Qke,"A",{href:!0});var nvt=s(AW);Qbr=r(nvt,"TFMPNetForSequenceClassification"),nvt.forEach(t),Wbr=r(Qke," (MPNet model)"),Qke.forEach(t),Hbr=i(re),r5=n(re,"LI",{});var Wke=s(r5);jFe=n(Wke,"STRONG",{});var svt=s(jFe);Ubr=r(svt,"openai-gpt"),svt.forEach(t),Jbr=r(Wke," \u2014 "),yW=n(Wke,"A",{href:!0});var lvt=s(yW);Ybr=r(lvt,"TFOpenAIGPTForSequenceClassification"),lvt.forEach(t),Kbr=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),Zbr=i(re),t5=n(re,"LI",{});var Hke=s(t5);DFe=n(Hke,"STRONG",{});var ivt=s(DFe);e2r=r(ivt,"rembert"),ivt.forEach(t),o2r=r(Hke," \u2014 "),LW=n(Hke,"A",{href:!0});var dvt=s(LW);r2r=r(dvt,"TFRemBertForSequenceClassification"),dvt.forEach(t),t2r=r(Hke," (RemBERT model)"),Hke.forEach(t),a2r=i(re),a5=n(re,"LI",{});var Uke=s(a5);GFe=n(Uke,"STRONG",{});var cvt=s(GFe);n2r=r(cvt,"roberta"),cvt.forEach(t),s2r=r(Uke," \u2014 "),xW=n(Uke,"A",{href:!0});var mvt=s(xW);l2r=r(mvt,"TFRobertaForSequenceClassification"),mvt.forEach(t),i2r=r(Uke," (RoBERTa model)"),Uke.forEach(t),d2r=i(re),n5=n(re,"LI",{});var Jke=s(n5);OFe=n(Jke,"STRONG",{});var fvt=s(OFe);c2r=r(fvt,"roformer"),fvt.forEach(t),m2r=r(Jke," \u2014 "),$W=n(Jke,"A",{href:!0});var gvt=s($W);f2r=r(gvt,"TFRoFormerForSequenceClassification"),gvt.forEach(t),g2r=r(Jke," (RoFormer model)"),Jke.forEach(t),h2r=i(re),s5=n(re,"LI",{});var Yke=s(s5);VFe=n(Yke,"STRONG",{});var hvt=s(VFe);u2r=r(hvt,"tapas"),hvt.forEach(t),p2r=r(Yke," \u2014 "),kW=n(Yke,"A",{href:!0});var uvt=s(kW);_2r=r(uvt,"TFTapasForSequenceClassification"),uvt.forEach(t),b2r=r(Yke," (TAPAS model)"),Yke.forEach(t),F2r=i(re),l5=n(re,"LI",{});var Kke=s(l5);XFe=n(Kke,"STRONG",{});var pvt=s(XFe);v2r=r(pvt,"transfo-xl"),pvt.forEach(t),T2r=r(Kke," \u2014 "),SW=n(Kke,"A",{href:!0});var _vt=s(SW);M2r=r(_vt,"TFTransfoXLForSequenceClassification"),_vt.forEach(t),E2r=r(Kke," (Transformer-XL model)"),Kke.forEach(t),C2r=i(re),i5=n(re,"LI",{});var Zke=s(i5);zFe=n(Zke,"STRONG",{});var bvt=s(zFe);w2r=r(bvt,"xlm"),bvt.forEach(t),A2r=r(Zke," \u2014 "),RW=n(Zke,"A",{href:!0});var Fvt=s(RW);y2r=r(Fvt,"TFXLMForSequenceClassification"),Fvt.forEach(t),L2r=r(Zke," (XLM model)"),Zke.forEach(t),x2r=i(re),d5=n(re,"LI",{});var eSe=s(d5);QFe=n(eSe,"STRONG",{});var vvt=s(QFe);$2r=r(vvt,"xlm-roberta"),vvt.forEach(t),k2r=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var Tvt=s(BW);S2r=r(Tvt,"TFXLMRobertaForSequenceClassification"),Tvt.forEach(t),R2r=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),B2r=i(re),c5=n(re,"LI",{});var oSe=s(c5);WFe=n(oSe,"STRONG",{});var Mvt=s(WFe);P2r=r(Mvt,"xlnet"),Mvt.forEach(t),I2r=r(oSe," \u2014 "),PW=n(oSe,"A",{href:!0});var Evt=s(PW);q2r=r(Evt,"TFXLNetForSequenceClassification"),Evt.forEach(t),N2r=r(oSe," (XLNet model)"),oSe.forEach(t),re.forEach(t),j2r=i(Ml),T(m5.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),AIe=i(m),nc=n(m,"H2",{class:!0});var SNe=s(nc);f5=n(SNe,"A",{id:!0,class:!0,href:!0});var Cvt=s(f5);HFe=n(Cvt,"SPAN",{});var wvt=s(HFe);T(ax.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),D2r=i(SNe),UFe=n(SNe,"SPAN",{});var Avt=s(UFe);G2r=r(Avt,"TFAutoModelForMultipleChoice"),Avt.forEach(t),SNe.forEach(t),yIe=i(m),ar=n(m,"DIV",{class:!0});var El=s(ar);T(nx.$$.fragment,El),O2r=i(El),sc=n(El,"P",{});var ZK=s(sc);V2r=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=n(ZK,"A",{href:!0});var yvt=s(IW);X2r=r(yvt,"from_pretrained()"),yvt.forEach(t),z2r=r(ZK," class method or the "),qW=n(ZK,"A",{href:!0});var Lvt=s(qW);Q2r=r(Lvt,"from_config()"),Lvt.forEach(t),W2r=r(ZK,` class
method.`),ZK.forEach(t),H2r=i(El),sx=n(El,"P",{});var RNe=s(sx);U2r=r(RNe,"This class cannot be instantiated directly using "),JFe=n(RNe,"CODE",{});var xvt=s(JFe);J2r=r(xvt,"__init__()"),xvt.forEach(t),Y2r=r(RNe," (throws an error)."),RNe.forEach(t),K2r=i(El),St=n(El,"DIV",{class:!0});var e6=s(St);T(lx.$$.fragment,e6),Z2r=i(e6),YFe=n(e6,"P",{});var $vt=s(YFe);eFr=r($vt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$vt.forEach(t),oFr=i(e6),lc=n(e6,"P",{});var eZ=s(lc);rFr=r(eZ,`Note:
Loading a model from its configuration file does `),KFe=n(eZ,"STRONG",{});var kvt=s(KFe);tFr=r(kvt,"not"),kvt.forEach(t),aFr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(eZ,"A",{href:!0});var Svt=s(NW);nFr=r(Svt,"from_pretrained()"),Svt.forEach(t),sFr=r(eZ," to load the model weights."),eZ.forEach(t),lFr=i(e6),T(g5.$$.fragment,e6),e6.forEach(t),iFr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(ix.$$.fragment,Cl),dFr=i(Cl),ZFe=n(Cl,"P",{});var Rvt=s(ZFe);cFr=r(Rvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rvt.forEach(t),mFr=i(Cl),nn=n(Cl,"P",{});var o6=s(nn);fFr=r(o6,"The model class to instantiate is selected based on the "),eve=n(o6,"CODE",{});var Bvt=s(eve);gFr=r(Bvt,"model_type"),Bvt.forEach(t),hFr=r(o6,` property of the config object (either
passed as an argument or loaded from `),ove=n(o6,"CODE",{});var Pvt=s(ove);uFr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),pFr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(o6,"CODE",{});var Ivt=s(rve);_Fr=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),bFr=r(o6,":"),o6.forEach(t),FFr=i(Cl),ue=n(Cl,"UL",{});var _e=s(ue);h5=n(_e,"LI",{});var rSe=s(h5);tve=n(rSe,"STRONG",{});var qvt=s(tve);vFr=r(qvt,"albert"),qvt.forEach(t),TFr=r(rSe," \u2014 "),jW=n(rSe,"A",{href:!0});var Nvt=s(jW);MFr=r(Nvt,"TFAlbertForMultipleChoice"),Nvt.forEach(t),EFr=r(rSe," (ALBERT model)"),rSe.forEach(t),CFr=i(_e),u5=n(_e,"LI",{});var tSe=s(u5);ave=n(tSe,"STRONG",{});var jvt=s(ave);wFr=r(jvt,"bert"),jvt.forEach(t),AFr=r(tSe," \u2014 "),DW=n(tSe,"A",{href:!0});var Dvt=s(DW);yFr=r(Dvt,"TFBertForMultipleChoice"),Dvt.forEach(t),LFr=r(tSe," (BERT model)"),tSe.forEach(t),xFr=i(_e),p5=n(_e,"LI",{});var aSe=s(p5);nve=n(aSe,"STRONG",{});var Gvt=s(nve);$Fr=r(Gvt,"camembert"),Gvt.forEach(t),kFr=r(aSe," \u2014 "),GW=n(aSe,"A",{href:!0});var Ovt=s(GW);SFr=r(Ovt,"TFCamembertForMultipleChoice"),Ovt.forEach(t),RFr=r(aSe," (CamemBERT model)"),aSe.forEach(t),BFr=i(_e),_5=n(_e,"LI",{});var nSe=s(_5);sve=n(nSe,"STRONG",{});var Vvt=s(sve);PFr=r(Vvt,"convbert"),Vvt.forEach(t),IFr=r(nSe," \u2014 "),OW=n(nSe,"A",{href:!0});var Xvt=s(OW);qFr=r(Xvt,"TFConvBertForMultipleChoice"),Xvt.forEach(t),NFr=r(nSe," (ConvBERT model)"),nSe.forEach(t),jFr=i(_e),b5=n(_e,"LI",{});var sSe=s(b5);lve=n(sSe,"STRONG",{});var zvt=s(lve);DFr=r(zvt,"distilbert"),zvt.forEach(t),GFr=r(sSe," \u2014 "),VW=n(sSe,"A",{href:!0});var Qvt=s(VW);OFr=r(Qvt,"TFDistilBertForMultipleChoice"),Qvt.forEach(t),VFr=r(sSe," (DistilBERT model)"),sSe.forEach(t),XFr=i(_e),F5=n(_e,"LI",{});var lSe=s(F5);ive=n(lSe,"STRONG",{});var Wvt=s(ive);zFr=r(Wvt,"electra"),Wvt.forEach(t),QFr=r(lSe," \u2014 "),XW=n(lSe,"A",{href:!0});var Hvt=s(XW);WFr=r(Hvt,"TFElectraForMultipleChoice"),Hvt.forEach(t),HFr=r(lSe," (ELECTRA model)"),lSe.forEach(t),UFr=i(_e),v5=n(_e,"LI",{});var iSe=s(v5);dve=n(iSe,"STRONG",{});var Uvt=s(dve);JFr=r(Uvt,"flaubert"),Uvt.forEach(t),YFr=r(iSe," \u2014 "),zW=n(iSe,"A",{href:!0});var Jvt=s(zW);KFr=r(Jvt,"TFFlaubertForMultipleChoice"),Jvt.forEach(t),ZFr=r(iSe," (FlauBERT model)"),iSe.forEach(t),evr=i(_e),T5=n(_e,"LI",{});var dSe=s(T5);cve=n(dSe,"STRONG",{});var Yvt=s(cve);ovr=r(Yvt,"funnel"),Yvt.forEach(t),rvr=r(dSe," \u2014 "),QW=n(dSe,"A",{href:!0});var Kvt=s(QW);tvr=r(Kvt,"TFFunnelForMultipleChoice"),Kvt.forEach(t),avr=r(dSe," (Funnel Transformer model)"),dSe.forEach(t),nvr=i(_e),M5=n(_e,"LI",{});var cSe=s(M5);mve=n(cSe,"STRONG",{});var Zvt=s(mve);svr=r(Zvt,"longformer"),Zvt.forEach(t),lvr=r(cSe," \u2014 "),WW=n(cSe,"A",{href:!0});var e1t=s(WW);ivr=r(e1t,"TFLongformerForMultipleChoice"),e1t.forEach(t),dvr=r(cSe," (Longformer model)"),cSe.forEach(t),cvr=i(_e),E5=n(_e,"LI",{});var mSe=s(E5);fve=n(mSe,"STRONG",{});var o1t=s(fve);mvr=r(o1t,"mobilebert"),o1t.forEach(t),fvr=r(mSe," \u2014 "),HW=n(mSe,"A",{href:!0});var r1t=s(HW);gvr=r(r1t,"TFMobileBertForMultipleChoice"),r1t.forEach(t),hvr=r(mSe," (MobileBERT model)"),mSe.forEach(t),uvr=i(_e),C5=n(_e,"LI",{});var fSe=s(C5);gve=n(fSe,"STRONG",{});var t1t=s(gve);pvr=r(t1t,"mpnet"),t1t.forEach(t),_vr=r(fSe," \u2014 "),UW=n(fSe,"A",{href:!0});var a1t=s(UW);bvr=r(a1t,"TFMPNetForMultipleChoice"),a1t.forEach(t),Fvr=r(fSe," (MPNet model)"),fSe.forEach(t),vvr=i(_e),w5=n(_e,"LI",{});var gSe=s(w5);hve=n(gSe,"STRONG",{});var n1t=s(hve);Tvr=r(n1t,"rembert"),n1t.forEach(t),Mvr=r(gSe," \u2014 "),JW=n(gSe,"A",{href:!0});var s1t=s(JW);Evr=r(s1t,"TFRemBertForMultipleChoice"),s1t.forEach(t),Cvr=r(gSe," (RemBERT model)"),gSe.forEach(t),wvr=i(_e),A5=n(_e,"LI",{});var hSe=s(A5);uve=n(hSe,"STRONG",{});var l1t=s(uve);Avr=r(l1t,"roberta"),l1t.forEach(t),yvr=r(hSe," \u2014 "),YW=n(hSe,"A",{href:!0});var i1t=s(YW);Lvr=r(i1t,"TFRobertaForMultipleChoice"),i1t.forEach(t),xvr=r(hSe," (RoBERTa model)"),hSe.forEach(t),$vr=i(_e),y5=n(_e,"LI",{});var uSe=s(y5);pve=n(uSe,"STRONG",{});var d1t=s(pve);kvr=r(d1t,"roformer"),d1t.forEach(t),Svr=r(uSe," \u2014 "),KW=n(uSe,"A",{href:!0});var c1t=s(KW);Rvr=r(c1t,"TFRoFormerForMultipleChoice"),c1t.forEach(t),Bvr=r(uSe," (RoFormer model)"),uSe.forEach(t),Pvr=i(_e),L5=n(_e,"LI",{});var pSe=s(L5);_ve=n(pSe,"STRONG",{});var m1t=s(_ve);Ivr=r(m1t,"xlm"),m1t.forEach(t),qvr=r(pSe," \u2014 "),ZW=n(pSe,"A",{href:!0});var f1t=s(ZW);Nvr=r(f1t,"TFXLMForMultipleChoice"),f1t.forEach(t),jvr=r(pSe," (XLM model)"),pSe.forEach(t),Dvr=i(_e),x5=n(_e,"LI",{});var _Se=s(x5);bve=n(_Se,"STRONG",{});var g1t=s(bve);Gvr=r(g1t,"xlm-roberta"),g1t.forEach(t),Ovr=r(_Se," \u2014 "),eH=n(_Se,"A",{href:!0});var h1t=s(eH);Vvr=r(h1t,"TFXLMRobertaForMultipleChoice"),h1t.forEach(t),Xvr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),zvr=i(_e),$5=n(_e,"LI",{});var bSe=s($5);Fve=n(bSe,"STRONG",{});var u1t=s(Fve);Qvr=r(u1t,"xlnet"),u1t.forEach(t),Wvr=r(bSe," \u2014 "),oH=n(bSe,"A",{href:!0});var p1t=s(oH);Hvr=r(p1t,"TFXLNetForMultipleChoice"),p1t.forEach(t),Uvr=r(bSe," (XLNet model)"),bSe.forEach(t),_e.forEach(t),Jvr=i(Cl),T(k5.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),LIe=i(m),ic=n(m,"H2",{class:!0});var BNe=s(ic);S5=n(BNe,"A",{id:!0,class:!0,href:!0});var _1t=s(S5);vve=n(_1t,"SPAN",{});var b1t=s(vve);T(dx.$$.fragment,b1t),b1t.forEach(t),_1t.forEach(t),Yvr=i(BNe),Tve=n(BNe,"SPAN",{});var F1t=s(Tve);Kvr=r(F1t,"TFAutoModelForNextSentencePrediction"),F1t.forEach(t),BNe.forEach(t),xIe=i(m),nr=n(m,"DIV",{class:!0});var wl=s(nr);T(cx.$$.fragment,wl),Zvr=i(wl),dc=n(wl,"P",{});var oZ=s(dc);e1r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=n(oZ,"A",{href:!0});var v1t=s(rH);o1r=r(v1t,"from_pretrained()"),v1t.forEach(t),r1r=r(oZ," class method or the "),tH=n(oZ,"A",{href:!0});var T1t=s(tH);t1r=r(T1t,"from_config()"),T1t.forEach(t),a1r=r(oZ,` class
method.`),oZ.forEach(t),n1r=i(wl),mx=n(wl,"P",{});var PNe=s(mx);s1r=r(PNe,"This class cannot be instantiated directly using "),Mve=n(PNe,"CODE",{});var M1t=s(Mve);l1r=r(M1t,"__init__()"),M1t.forEach(t),i1r=r(PNe," (throws an error)."),PNe.forEach(t),d1r=i(wl),Rt=n(wl,"DIV",{class:!0});var r6=s(Rt);T(fx.$$.fragment,r6),c1r=i(r6),Eve=n(r6,"P",{});var E1t=s(Eve);m1r=r(E1t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E1t.forEach(t),f1r=i(r6),cc=n(r6,"P",{});var rZ=s(cc);g1r=r(rZ,`Note:
Loading a model from its configuration file does `),Cve=n(rZ,"STRONG",{});var C1t=s(Cve);h1r=r(C1t,"not"),C1t.forEach(t),u1r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(rZ,"A",{href:!0});var w1t=s(aH);p1r=r(w1t,"from_pretrained()"),w1t.forEach(t),_1r=r(rZ," to load the model weights."),rZ.forEach(t),b1r=i(r6),T(R5.$$.fragment,r6),r6.forEach(t),F1r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(gx.$$.fragment,Al),v1r=i(Al),wve=n(Al,"P",{});var A1t=s(wve);T1r=r(A1t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A1t.forEach(t),M1r=i(Al),sn=n(Al,"P",{});var t6=s(sn);E1r=r(t6,"The model class to instantiate is selected based on the "),Ave=n(t6,"CODE",{});var y1t=s(Ave);C1r=r(y1t,"model_type"),y1t.forEach(t),w1r=r(t6,` property of the config object (either
passed as an argument or loaded from `),yve=n(t6,"CODE",{});var L1t=s(yve);A1r=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),y1r=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(t6,"CODE",{});var x1t=s(Lve);L1r=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),x1r=r(t6,":"),t6.forEach(t),$1r=i(Al),hx=n(Al,"UL",{});var INe=s(hx);B5=n(INe,"LI",{});var FSe=s(B5);xve=n(FSe,"STRONG",{});var $1t=s(xve);k1r=r($1t,"bert"),$1t.forEach(t),S1r=r(FSe," \u2014 "),nH=n(FSe,"A",{href:!0});var k1t=s(nH);R1r=r(k1t,"TFBertForNextSentencePrediction"),k1t.forEach(t),B1r=r(FSe," (BERT model)"),FSe.forEach(t),P1r=i(INe),P5=n(INe,"LI",{});var vSe=s(P5);$ve=n(vSe,"STRONG",{});var S1t=s($ve);I1r=r(S1t,"mobilebert"),S1t.forEach(t),q1r=r(vSe," \u2014 "),sH=n(vSe,"A",{href:!0});var R1t=s(sH);N1r=r(R1t,"TFMobileBertForNextSentencePrediction"),R1t.forEach(t),j1r=r(vSe," (MobileBERT model)"),vSe.forEach(t),INe.forEach(t),D1r=i(Al),T(I5.$$.fragment,Al),Al.forEach(t),wl.forEach(t),$Ie=i(m),mc=n(m,"H2",{class:!0});var qNe=s(mc);q5=n(qNe,"A",{id:!0,class:!0,href:!0});var B1t=s(q5);kve=n(B1t,"SPAN",{});var P1t=s(kve);T(ux.$$.fragment,P1t),P1t.forEach(t),B1t.forEach(t),G1r=i(qNe),Sve=n(qNe,"SPAN",{});var I1t=s(Sve);O1r=r(I1t,"TFAutoModelForTableQuestionAnswering"),I1t.forEach(t),qNe.forEach(t),kIe=i(m),sr=n(m,"DIV",{class:!0});var yl=s(sr);T(px.$$.fragment,yl),V1r=i(yl),fc=n(yl,"P",{});var tZ=s(fc);X1r=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=n(tZ,"A",{href:!0});var q1t=s(lH);z1r=r(q1t,"from_pretrained()"),q1t.forEach(t),Q1r=r(tZ," class method or the "),iH=n(tZ,"A",{href:!0});var N1t=s(iH);W1r=r(N1t,"from_config()"),N1t.forEach(t),H1r=r(tZ,` class
method.`),tZ.forEach(t),U1r=i(yl),_x=n(yl,"P",{});var NNe=s(_x);J1r=r(NNe,"This class cannot be instantiated directly using "),Rve=n(NNe,"CODE",{});var j1t=s(Rve);Y1r=r(j1t,"__init__()"),j1t.forEach(t),K1r=r(NNe," (throws an error)."),NNe.forEach(t),Z1r=i(yl),Bt=n(yl,"DIV",{class:!0});var a6=s(Bt);T(bx.$$.fragment,a6),eTr=i(a6),Bve=n(a6,"P",{});var D1t=s(Bve);oTr=r(D1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D1t.forEach(t),rTr=i(a6),gc=n(a6,"P",{});var aZ=s(gc);tTr=r(aZ,`Note:
Loading a model from its configuration file does `),Pve=n(aZ,"STRONG",{});var G1t=s(Pve);aTr=r(G1t,"not"),G1t.forEach(t),nTr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(aZ,"A",{href:!0});var O1t=s(dH);sTr=r(O1t,"from_pretrained()"),O1t.forEach(t),lTr=r(aZ," to load the model weights."),aZ.forEach(t),iTr=i(a6),T(N5.$$.fragment,a6),a6.forEach(t),dTr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(Fx.$$.fragment,Ll),cTr=i(Ll),Ive=n(Ll,"P",{});var V1t=s(Ive);mTr=r(V1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),V1t.forEach(t),fTr=i(Ll),ln=n(Ll,"P",{});var n6=s(ln);gTr=r(n6,"The model class to instantiate is selected based on the "),qve=n(n6,"CODE",{});var X1t=s(qve);hTr=r(X1t,"model_type"),X1t.forEach(t),uTr=r(n6,` property of the config object (either
passed as an argument or loaded from `),Nve=n(n6,"CODE",{});var z1t=s(Nve);pTr=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),_Tr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(n6,"CODE",{});var Q1t=s(jve);bTr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),FTr=r(n6,":"),n6.forEach(t),vTr=i(Ll),Dve=n(Ll,"UL",{});var W1t=s(Dve);j5=n(W1t,"LI",{});var TSe=s(j5);Gve=n(TSe,"STRONG",{});var H1t=s(Gve);TTr=r(H1t,"tapas"),H1t.forEach(t),MTr=r(TSe," \u2014 "),cH=n(TSe,"A",{href:!0});var U1t=s(cH);ETr=r(U1t,"TFTapasForQuestionAnswering"),U1t.forEach(t),CTr=r(TSe," (TAPAS model)"),TSe.forEach(t),W1t.forEach(t),wTr=i(Ll),T(D5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),SIe=i(m),hc=n(m,"H2",{class:!0});var jNe=s(hc);G5=n(jNe,"A",{id:!0,class:!0,href:!0});var J1t=s(G5);Ove=n(J1t,"SPAN",{});var Y1t=s(Ove);T(vx.$$.fragment,Y1t),Y1t.forEach(t),J1t.forEach(t),ATr=i(jNe),Vve=n(jNe,"SPAN",{});var K1t=s(Vve);yTr=r(K1t,"TFAutoModelForTokenClassification"),K1t.forEach(t),jNe.forEach(t),RIe=i(m),lr=n(m,"DIV",{class:!0});var xl=s(lr);T(Tx.$$.fragment,xl),LTr=i(xl),uc=n(xl,"P",{});var nZ=s(uc);xTr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mH=n(nZ,"A",{href:!0});var Z1t=s(mH);$Tr=r(Z1t,"from_pretrained()"),Z1t.forEach(t),kTr=r(nZ," class method or the "),fH=n(nZ,"A",{href:!0});var eTt=s(fH);STr=r(eTt,"from_config()"),eTt.forEach(t),RTr=r(nZ,` class
method.`),nZ.forEach(t),BTr=i(xl),Mx=n(xl,"P",{});var DNe=s(Mx);PTr=r(DNe,"This class cannot be instantiated directly using "),Xve=n(DNe,"CODE",{});var oTt=s(Xve);ITr=r(oTt,"__init__()"),oTt.forEach(t),qTr=r(DNe," (throws an error)."),DNe.forEach(t),NTr=i(xl),Pt=n(xl,"DIV",{class:!0});var s6=s(Pt);T(Ex.$$.fragment,s6),jTr=i(s6),zve=n(s6,"P",{});var rTt=s(zve);DTr=r(rTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rTt.forEach(t),GTr=i(s6),pc=n(s6,"P",{});var sZ=s(pc);OTr=r(sZ,`Note:
Loading a model from its configuration file does `),Qve=n(sZ,"STRONG",{});var tTt=s(Qve);VTr=r(tTt,"not"),tTt.forEach(t),XTr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(sZ,"A",{href:!0});var aTt=s(gH);zTr=r(aTt,"from_pretrained()"),aTt.forEach(t),QTr=r(sZ," to load the model weights."),sZ.forEach(t),WTr=i(s6),T(O5.$$.fragment,s6),s6.forEach(t),HTr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(Cx.$$.fragment,$l),UTr=i($l),Wve=n($l,"P",{});var nTt=s(Wve);JTr=r(nTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nTt.forEach(t),YTr=i($l),dn=n($l,"P",{});var l6=s(dn);KTr=r(l6,"The model class to instantiate is selected based on the "),Hve=n(l6,"CODE",{});var sTt=s(Hve);ZTr=r(sTt,"model_type"),sTt.forEach(t),eMr=r(l6,` property of the config object (either
passed as an argument or loaded from `),Uve=n(l6,"CODE",{});var lTt=s(Uve);oMr=r(lTt,"pretrained_model_name_or_path"),lTt.forEach(t),rMr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(l6,"CODE",{});var iTt=s(Jve);tMr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),aMr=r(l6,":"),l6.forEach(t),nMr=i($l),de=n($l,"UL",{});var fe=s(de);V5=n(fe,"LI",{});var MSe=s(V5);Yve=n(MSe,"STRONG",{});var dTt=s(Yve);sMr=r(dTt,"albert"),dTt.forEach(t),lMr=r(MSe," \u2014 "),hH=n(MSe,"A",{href:!0});var cTt=s(hH);iMr=r(cTt,"TFAlbertForTokenClassification"),cTt.forEach(t),dMr=r(MSe," (ALBERT model)"),MSe.forEach(t),cMr=i(fe),X5=n(fe,"LI",{});var ESe=s(X5);Kve=n(ESe,"STRONG",{});var mTt=s(Kve);mMr=r(mTt,"bert"),mTt.forEach(t),fMr=r(ESe," \u2014 "),uH=n(ESe,"A",{href:!0});var fTt=s(uH);gMr=r(fTt,"TFBertForTokenClassification"),fTt.forEach(t),hMr=r(ESe," (BERT model)"),ESe.forEach(t),uMr=i(fe),z5=n(fe,"LI",{});var CSe=s(z5);Zve=n(CSe,"STRONG",{});var gTt=s(Zve);pMr=r(gTt,"camembert"),gTt.forEach(t),_Mr=r(CSe," \u2014 "),pH=n(CSe,"A",{href:!0});var hTt=s(pH);bMr=r(hTt,"TFCamembertForTokenClassification"),hTt.forEach(t),FMr=r(CSe," (CamemBERT model)"),CSe.forEach(t),vMr=i(fe),Q5=n(fe,"LI",{});var wSe=s(Q5);e1e=n(wSe,"STRONG",{});var uTt=s(e1e);TMr=r(uTt,"convbert"),uTt.forEach(t),MMr=r(wSe," \u2014 "),_H=n(wSe,"A",{href:!0});var pTt=s(_H);EMr=r(pTt,"TFConvBertForTokenClassification"),pTt.forEach(t),CMr=r(wSe," (ConvBERT model)"),wSe.forEach(t),wMr=i(fe),W5=n(fe,"LI",{});var ASe=s(W5);o1e=n(ASe,"STRONG",{});var _Tt=s(o1e);AMr=r(_Tt,"deberta"),_Tt.forEach(t),yMr=r(ASe," \u2014 "),bH=n(ASe,"A",{href:!0});var bTt=s(bH);LMr=r(bTt,"TFDebertaForTokenClassification"),bTt.forEach(t),xMr=r(ASe," (DeBERTa model)"),ASe.forEach(t),$Mr=i(fe),H5=n(fe,"LI",{});var ySe=s(H5);r1e=n(ySe,"STRONG",{});var FTt=s(r1e);kMr=r(FTt,"deberta-v2"),FTt.forEach(t),SMr=r(ySe," \u2014 "),FH=n(ySe,"A",{href:!0});var vTt=s(FH);RMr=r(vTt,"TFDebertaV2ForTokenClassification"),vTt.forEach(t),BMr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),PMr=i(fe),U5=n(fe,"LI",{});var LSe=s(U5);t1e=n(LSe,"STRONG",{});var TTt=s(t1e);IMr=r(TTt,"distilbert"),TTt.forEach(t),qMr=r(LSe," \u2014 "),vH=n(LSe,"A",{href:!0});var MTt=s(vH);NMr=r(MTt,"TFDistilBertForTokenClassification"),MTt.forEach(t),jMr=r(LSe," (DistilBERT model)"),LSe.forEach(t),DMr=i(fe),J5=n(fe,"LI",{});var xSe=s(J5);a1e=n(xSe,"STRONG",{});var ETt=s(a1e);GMr=r(ETt,"electra"),ETt.forEach(t),OMr=r(xSe," \u2014 "),TH=n(xSe,"A",{href:!0});var CTt=s(TH);VMr=r(CTt,"TFElectraForTokenClassification"),CTt.forEach(t),XMr=r(xSe," (ELECTRA model)"),xSe.forEach(t),zMr=i(fe),Y5=n(fe,"LI",{});var $Se=s(Y5);n1e=n($Se,"STRONG",{});var wTt=s(n1e);QMr=r(wTt,"flaubert"),wTt.forEach(t),WMr=r($Se," \u2014 "),MH=n($Se,"A",{href:!0});var ATt=s(MH);HMr=r(ATt,"TFFlaubertForTokenClassification"),ATt.forEach(t),UMr=r($Se," (FlauBERT model)"),$Se.forEach(t),JMr=i(fe),K5=n(fe,"LI",{});var kSe=s(K5);s1e=n(kSe,"STRONG",{});var yTt=s(s1e);YMr=r(yTt,"funnel"),yTt.forEach(t),KMr=r(kSe," \u2014 "),EH=n(kSe,"A",{href:!0});var LTt=s(EH);ZMr=r(LTt,"TFFunnelForTokenClassification"),LTt.forEach(t),e4r=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),o4r=i(fe),Z5=n(fe,"LI",{});var SSe=s(Z5);l1e=n(SSe,"STRONG",{});var xTt=s(l1e);r4r=r(xTt,"layoutlm"),xTt.forEach(t),t4r=r(SSe," \u2014 "),CH=n(SSe,"A",{href:!0});var $Tt=s(CH);a4r=r($Tt,"TFLayoutLMForTokenClassification"),$Tt.forEach(t),n4r=r(SSe," (LayoutLM model)"),SSe.forEach(t),s4r=i(fe),eC=n(fe,"LI",{});var RSe=s(eC);i1e=n(RSe,"STRONG",{});var kTt=s(i1e);l4r=r(kTt,"longformer"),kTt.forEach(t),i4r=r(RSe," \u2014 "),wH=n(RSe,"A",{href:!0});var STt=s(wH);d4r=r(STt,"TFLongformerForTokenClassification"),STt.forEach(t),c4r=r(RSe," (Longformer model)"),RSe.forEach(t),m4r=i(fe),oC=n(fe,"LI",{});var BSe=s(oC);d1e=n(BSe,"STRONG",{});var RTt=s(d1e);f4r=r(RTt,"mobilebert"),RTt.forEach(t),g4r=r(BSe," \u2014 "),AH=n(BSe,"A",{href:!0});var BTt=s(AH);h4r=r(BTt,"TFMobileBertForTokenClassification"),BTt.forEach(t),u4r=r(BSe," (MobileBERT model)"),BSe.forEach(t),p4r=i(fe),rC=n(fe,"LI",{});var PSe=s(rC);c1e=n(PSe,"STRONG",{});var PTt=s(c1e);_4r=r(PTt,"mpnet"),PTt.forEach(t),b4r=r(PSe," \u2014 "),yH=n(PSe,"A",{href:!0});var ITt=s(yH);F4r=r(ITt,"TFMPNetForTokenClassification"),ITt.forEach(t),v4r=r(PSe," (MPNet model)"),PSe.forEach(t),T4r=i(fe),tC=n(fe,"LI",{});var ISe=s(tC);m1e=n(ISe,"STRONG",{});var qTt=s(m1e);M4r=r(qTt,"rembert"),qTt.forEach(t),E4r=r(ISe," \u2014 "),LH=n(ISe,"A",{href:!0});var NTt=s(LH);C4r=r(NTt,"TFRemBertForTokenClassification"),NTt.forEach(t),w4r=r(ISe," (RemBERT model)"),ISe.forEach(t),A4r=i(fe),aC=n(fe,"LI",{});var qSe=s(aC);f1e=n(qSe,"STRONG",{});var jTt=s(f1e);y4r=r(jTt,"roberta"),jTt.forEach(t),L4r=r(qSe," \u2014 "),xH=n(qSe,"A",{href:!0});var DTt=s(xH);x4r=r(DTt,"TFRobertaForTokenClassification"),DTt.forEach(t),$4r=r(qSe," (RoBERTa model)"),qSe.forEach(t),k4r=i(fe),nC=n(fe,"LI",{});var NSe=s(nC);g1e=n(NSe,"STRONG",{});var GTt=s(g1e);S4r=r(GTt,"roformer"),GTt.forEach(t),R4r=r(NSe," \u2014 "),$H=n(NSe,"A",{href:!0});var OTt=s($H);B4r=r(OTt,"TFRoFormerForTokenClassification"),OTt.forEach(t),P4r=r(NSe," (RoFormer model)"),NSe.forEach(t),I4r=i(fe),sC=n(fe,"LI",{});var jSe=s(sC);h1e=n(jSe,"STRONG",{});var VTt=s(h1e);q4r=r(VTt,"xlm"),VTt.forEach(t),N4r=r(jSe," \u2014 "),kH=n(jSe,"A",{href:!0});var XTt=s(kH);j4r=r(XTt,"TFXLMForTokenClassification"),XTt.forEach(t),D4r=r(jSe," (XLM model)"),jSe.forEach(t),G4r=i(fe),lC=n(fe,"LI",{});var DSe=s(lC);u1e=n(DSe,"STRONG",{});var zTt=s(u1e);O4r=r(zTt,"xlm-roberta"),zTt.forEach(t),V4r=r(DSe," \u2014 "),SH=n(DSe,"A",{href:!0});var QTt=s(SH);X4r=r(QTt,"TFXLMRobertaForTokenClassification"),QTt.forEach(t),z4r=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Q4r=i(fe),iC=n(fe,"LI",{});var GSe=s(iC);p1e=n(GSe,"STRONG",{});var WTt=s(p1e);W4r=r(WTt,"xlnet"),WTt.forEach(t),H4r=r(GSe," \u2014 "),RH=n(GSe,"A",{href:!0});var HTt=s(RH);U4r=r(HTt,"TFXLNetForTokenClassification"),HTt.forEach(t),J4r=r(GSe," (XLNet model)"),GSe.forEach(t),fe.forEach(t),Y4r=i($l),T(dC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),BIe=i(m),_c=n(m,"H2",{class:!0});var GNe=s(_c);cC=n(GNe,"A",{id:!0,class:!0,href:!0});var UTt=s(cC);_1e=n(UTt,"SPAN",{});var JTt=s(_1e);T(wx.$$.fragment,JTt),JTt.forEach(t),UTt.forEach(t),K4r=i(GNe),b1e=n(GNe,"SPAN",{});var YTt=s(b1e);Z4r=r(YTt,"TFAutoModelForQuestionAnswering"),YTt.forEach(t),GNe.forEach(t),PIe=i(m),ir=n(m,"DIV",{class:!0});var kl=s(ir);T(Ax.$$.fragment,kl),eEr=i(kl),bc=n(kl,"P",{});var lZ=s(bc);oEr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=n(lZ,"A",{href:!0});var KTt=s(BH);rEr=r(KTt,"from_pretrained()"),KTt.forEach(t),tEr=r(lZ," class method or the "),PH=n(lZ,"A",{href:!0});var ZTt=s(PH);aEr=r(ZTt,"from_config()"),ZTt.forEach(t),nEr=r(lZ,` class
method.`),lZ.forEach(t),sEr=i(kl),yx=n(kl,"P",{});var ONe=s(yx);lEr=r(ONe,"This class cannot be instantiated directly using "),F1e=n(ONe,"CODE",{});var eMt=s(F1e);iEr=r(eMt,"__init__()"),eMt.forEach(t),dEr=r(ONe," (throws an error)."),ONe.forEach(t),cEr=i(kl),It=n(kl,"DIV",{class:!0});var i6=s(It);T(Lx.$$.fragment,i6),mEr=i(i6),v1e=n(i6,"P",{});var oMt=s(v1e);fEr=r(oMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oMt.forEach(t),gEr=i(i6),Fc=n(i6,"P",{});var iZ=s(Fc);hEr=r(iZ,`Note:
Loading a model from its configuration file does `),T1e=n(iZ,"STRONG",{});var rMt=s(T1e);uEr=r(rMt,"not"),rMt.forEach(t),pEr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(iZ,"A",{href:!0});var tMt=s(IH);_Er=r(tMt,"from_pretrained()"),tMt.forEach(t),bEr=r(iZ," to load the model weights."),iZ.forEach(t),FEr=i(i6),T(mC.$$.fragment,i6),i6.forEach(t),vEr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(xx.$$.fragment,Sl),TEr=i(Sl),M1e=n(Sl,"P",{});var aMt=s(M1e);MEr=r(aMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aMt.forEach(t),EEr=i(Sl),cn=n(Sl,"P",{});var d6=s(cn);CEr=r(d6,"The model class to instantiate is selected based on the "),E1e=n(d6,"CODE",{});var nMt=s(E1e);wEr=r(nMt,"model_type"),nMt.forEach(t),AEr=r(d6,` property of the config object (either
passed as an argument or loaded from `),C1e=n(d6,"CODE",{});var sMt=s(C1e);yEr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),LEr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(d6,"CODE",{});var lMt=s(w1e);xEr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),$Er=r(d6,":"),d6.forEach(t),kEr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);fC=n(ge,"LI",{});var OSe=s(fC);A1e=n(OSe,"STRONG",{});var iMt=s(A1e);SEr=r(iMt,"albert"),iMt.forEach(t),REr=r(OSe," \u2014 "),qH=n(OSe,"A",{href:!0});var dMt=s(qH);BEr=r(dMt,"TFAlbertForQuestionAnswering"),dMt.forEach(t),PEr=r(OSe," (ALBERT model)"),OSe.forEach(t),IEr=i(ge),gC=n(ge,"LI",{});var VSe=s(gC);y1e=n(VSe,"STRONG",{});var cMt=s(y1e);qEr=r(cMt,"bert"),cMt.forEach(t),NEr=r(VSe," \u2014 "),NH=n(VSe,"A",{href:!0});var mMt=s(NH);jEr=r(mMt,"TFBertForQuestionAnswering"),mMt.forEach(t),DEr=r(VSe," (BERT model)"),VSe.forEach(t),GEr=i(ge),hC=n(ge,"LI",{});var XSe=s(hC);L1e=n(XSe,"STRONG",{});var fMt=s(L1e);OEr=r(fMt,"camembert"),fMt.forEach(t),VEr=r(XSe," \u2014 "),jH=n(XSe,"A",{href:!0});var gMt=s(jH);XEr=r(gMt,"TFCamembertForQuestionAnswering"),gMt.forEach(t),zEr=r(XSe," (CamemBERT model)"),XSe.forEach(t),QEr=i(ge),uC=n(ge,"LI",{});var zSe=s(uC);x1e=n(zSe,"STRONG",{});var hMt=s(x1e);WEr=r(hMt,"convbert"),hMt.forEach(t),HEr=r(zSe," \u2014 "),DH=n(zSe,"A",{href:!0});var uMt=s(DH);UEr=r(uMt,"TFConvBertForQuestionAnswering"),uMt.forEach(t),JEr=r(zSe," (ConvBERT model)"),zSe.forEach(t),YEr=i(ge),pC=n(ge,"LI",{});var QSe=s(pC);$1e=n(QSe,"STRONG",{});var pMt=s($1e);KEr=r(pMt,"deberta"),pMt.forEach(t),ZEr=r(QSe," \u2014 "),GH=n(QSe,"A",{href:!0});var _Mt=s(GH);e5r=r(_Mt,"TFDebertaForQuestionAnswering"),_Mt.forEach(t),o5r=r(QSe," (DeBERTa model)"),QSe.forEach(t),r5r=i(ge),_C=n(ge,"LI",{});var WSe=s(_C);k1e=n(WSe,"STRONG",{});var bMt=s(k1e);t5r=r(bMt,"deberta-v2"),bMt.forEach(t),a5r=r(WSe," \u2014 "),OH=n(WSe,"A",{href:!0});var FMt=s(OH);n5r=r(FMt,"TFDebertaV2ForQuestionAnswering"),FMt.forEach(t),s5r=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),l5r=i(ge),bC=n(ge,"LI",{});var HSe=s(bC);S1e=n(HSe,"STRONG",{});var vMt=s(S1e);i5r=r(vMt,"distilbert"),vMt.forEach(t),d5r=r(HSe," \u2014 "),VH=n(HSe,"A",{href:!0});var TMt=s(VH);c5r=r(TMt,"TFDistilBertForQuestionAnswering"),TMt.forEach(t),m5r=r(HSe," (DistilBERT model)"),HSe.forEach(t),f5r=i(ge),FC=n(ge,"LI",{});var USe=s(FC);R1e=n(USe,"STRONG",{});var MMt=s(R1e);g5r=r(MMt,"electra"),MMt.forEach(t),h5r=r(USe," \u2014 "),XH=n(USe,"A",{href:!0});var EMt=s(XH);u5r=r(EMt,"TFElectraForQuestionAnswering"),EMt.forEach(t),p5r=r(USe," (ELECTRA model)"),USe.forEach(t),_5r=i(ge),vC=n(ge,"LI",{});var JSe=s(vC);B1e=n(JSe,"STRONG",{});var CMt=s(B1e);b5r=r(CMt,"flaubert"),CMt.forEach(t),F5r=r(JSe," \u2014 "),zH=n(JSe,"A",{href:!0});var wMt=s(zH);v5r=r(wMt,"TFFlaubertForQuestionAnsweringSimple"),wMt.forEach(t),T5r=r(JSe," (FlauBERT model)"),JSe.forEach(t),M5r=i(ge),TC=n(ge,"LI",{});var YSe=s(TC);P1e=n(YSe,"STRONG",{});var AMt=s(P1e);E5r=r(AMt,"funnel"),AMt.forEach(t),C5r=r(YSe," \u2014 "),QH=n(YSe,"A",{href:!0});var yMt=s(QH);w5r=r(yMt,"TFFunnelForQuestionAnswering"),yMt.forEach(t),A5r=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),y5r=i(ge),MC=n(ge,"LI",{});var KSe=s(MC);I1e=n(KSe,"STRONG",{});var LMt=s(I1e);L5r=r(LMt,"gptj"),LMt.forEach(t),x5r=r(KSe," \u2014 "),WH=n(KSe,"A",{href:!0});var xMt=s(WH);$5r=r(xMt,"TFGPTJForQuestionAnswering"),xMt.forEach(t),k5r=r(KSe," (GPT-J model)"),KSe.forEach(t),S5r=i(ge),EC=n(ge,"LI",{});var ZSe=s(EC);q1e=n(ZSe,"STRONG",{});var $Mt=s(q1e);R5r=r($Mt,"longformer"),$Mt.forEach(t),B5r=r(ZSe," \u2014 "),HH=n(ZSe,"A",{href:!0});var kMt=s(HH);P5r=r(kMt,"TFLongformerForQuestionAnswering"),kMt.forEach(t),I5r=r(ZSe," (Longformer model)"),ZSe.forEach(t),q5r=i(ge),CC=n(ge,"LI",{});var eRe=s(CC);N1e=n(eRe,"STRONG",{});var SMt=s(N1e);N5r=r(SMt,"mobilebert"),SMt.forEach(t),j5r=r(eRe," \u2014 "),UH=n(eRe,"A",{href:!0});var RMt=s(UH);D5r=r(RMt,"TFMobileBertForQuestionAnswering"),RMt.forEach(t),G5r=r(eRe," (MobileBERT model)"),eRe.forEach(t),O5r=i(ge),wC=n(ge,"LI",{});var oRe=s(wC);j1e=n(oRe,"STRONG",{});var BMt=s(j1e);V5r=r(BMt,"mpnet"),BMt.forEach(t),X5r=r(oRe," \u2014 "),JH=n(oRe,"A",{href:!0});var PMt=s(JH);z5r=r(PMt,"TFMPNetForQuestionAnswering"),PMt.forEach(t),Q5r=r(oRe," (MPNet model)"),oRe.forEach(t),W5r=i(ge),AC=n(ge,"LI",{});var rRe=s(AC);D1e=n(rRe,"STRONG",{});var IMt=s(D1e);H5r=r(IMt,"rembert"),IMt.forEach(t),U5r=r(rRe," \u2014 "),YH=n(rRe,"A",{href:!0});var qMt=s(YH);J5r=r(qMt,"TFRemBertForQuestionAnswering"),qMt.forEach(t),Y5r=r(rRe," (RemBERT model)"),rRe.forEach(t),K5r=i(ge),yC=n(ge,"LI",{});var tRe=s(yC);G1e=n(tRe,"STRONG",{});var NMt=s(G1e);Z5r=r(NMt,"roberta"),NMt.forEach(t),eCr=r(tRe," \u2014 "),KH=n(tRe,"A",{href:!0});var jMt=s(KH);oCr=r(jMt,"TFRobertaForQuestionAnswering"),jMt.forEach(t),rCr=r(tRe," (RoBERTa model)"),tRe.forEach(t),tCr=i(ge),LC=n(ge,"LI",{});var aRe=s(LC);O1e=n(aRe,"STRONG",{});var DMt=s(O1e);aCr=r(DMt,"roformer"),DMt.forEach(t),nCr=r(aRe," \u2014 "),ZH=n(aRe,"A",{href:!0});var GMt=s(ZH);sCr=r(GMt,"TFRoFormerForQuestionAnswering"),GMt.forEach(t),lCr=r(aRe," (RoFormer model)"),aRe.forEach(t),iCr=i(ge),xC=n(ge,"LI",{});var nRe=s(xC);V1e=n(nRe,"STRONG",{});var OMt=s(V1e);dCr=r(OMt,"xlm"),OMt.forEach(t),cCr=r(nRe," \u2014 "),eU=n(nRe,"A",{href:!0});var VMt=s(eU);mCr=r(VMt,"TFXLMForQuestionAnsweringSimple"),VMt.forEach(t),fCr=r(nRe," (XLM model)"),nRe.forEach(t),gCr=i(ge),$C=n(ge,"LI",{});var sRe=s($C);X1e=n(sRe,"STRONG",{});var XMt=s(X1e);hCr=r(XMt,"xlm-roberta"),XMt.forEach(t),uCr=r(sRe," \u2014 "),oU=n(sRe,"A",{href:!0});var zMt=s(oU);pCr=r(zMt,"TFXLMRobertaForQuestionAnswering"),zMt.forEach(t),_Cr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),bCr=i(ge),kC=n(ge,"LI",{});var lRe=s(kC);z1e=n(lRe,"STRONG",{});var QMt=s(z1e);FCr=r(QMt,"xlnet"),QMt.forEach(t),vCr=r(lRe," \u2014 "),rU=n(lRe,"A",{href:!0});var WMt=s(rU);TCr=r(WMt,"TFXLNetForQuestionAnsweringSimple"),WMt.forEach(t),MCr=r(lRe," (XLNet model)"),lRe.forEach(t),ge.forEach(t),ECr=i(Sl),T(SC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),IIe=i(m),vc=n(m,"H2",{class:!0});var VNe=s(vc);RC=n(VNe,"A",{id:!0,class:!0,href:!0});var HMt=s(RC);Q1e=n(HMt,"SPAN",{});var UMt=s(Q1e);T($x.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),CCr=i(VNe),W1e=n(VNe,"SPAN",{});var JMt=s(W1e);wCr=r(JMt,"TFAutoModelForVision2Seq"),JMt.forEach(t),VNe.forEach(t),qIe=i(m),dr=n(m,"DIV",{class:!0});var Rl=s(dr);T(kx.$$.fragment,Rl),ACr=i(Rl),Tc=n(Rl,"P",{});var dZ=s(Tc);yCr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=n(dZ,"A",{href:!0});var YMt=s(tU);LCr=r(YMt,"from_pretrained()"),YMt.forEach(t),xCr=r(dZ," class method or the "),aU=n(dZ,"A",{href:!0});var KMt=s(aU);$Cr=r(KMt,"from_config()"),KMt.forEach(t),kCr=r(dZ,` class
method.`),dZ.forEach(t),SCr=i(Rl),Sx=n(Rl,"P",{});var XNe=s(Sx);RCr=r(XNe,"This class cannot be instantiated directly using "),H1e=n(XNe,"CODE",{});var ZMt=s(H1e);BCr=r(ZMt,"__init__()"),ZMt.forEach(t),PCr=r(XNe," (throws an error)."),XNe.forEach(t),ICr=i(Rl),qt=n(Rl,"DIV",{class:!0});var c6=s(qt);T(Rx.$$.fragment,c6),qCr=i(c6),U1e=n(c6,"P",{});var e4t=s(U1e);NCr=r(e4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e4t.forEach(t),jCr=i(c6),Mc=n(c6,"P",{});var cZ=s(Mc);DCr=r(cZ,`Note:
Loading a model from its configuration file does `),J1e=n(cZ,"STRONG",{});var o4t=s(J1e);GCr=r(o4t,"not"),o4t.forEach(t),OCr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(cZ,"A",{href:!0});var r4t=s(nU);VCr=r(r4t,"from_pretrained()"),r4t.forEach(t),XCr=r(cZ," to load the model weights."),cZ.forEach(t),zCr=i(c6),T(BC.$$.fragment,c6),c6.forEach(t),QCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Bx.$$.fragment,Bl),WCr=i(Bl),Y1e=n(Bl,"P",{});var t4t=s(Y1e);HCr=r(t4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),t4t.forEach(t),UCr=i(Bl),mn=n(Bl,"P",{});var m6=s(mn);JCr=r(m6,"The model class to instantiate is selected based on the "),K1e=n(m6,"CODE",{});var a4t=s(K1e);YCr=r(a4t,"model_type"),a4t.forEach(t),KCr=r(m6,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(m6,"CODE",{});var n4t=s(Z1e);ZCr=r(n4t,"pretrained_model_name_or_path"),n4t.forEach(t),e3r=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(m6,"CODE",{});var s4t=s(eTe);o3r=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),r3r=r(m6,":"),m6.forEach(t),t3r=i(Bl),oTe=n(Bl,"UL",{});var l4t=s(oTe);PC=n(l4t,"LI",{});var iRe=s(PC);rTe=n(iRe,"STRONG",{});var i4t=s(rTe);a3r=r(i4t,"vision-encoder-decoder"),i4t.forEach(t),n3r=r(iRe," \u2014 "),sU=n(iRe,"A",{href:!0});var d4t=s(sU);s3r=r(d4t,"TFVisionEncoderDecoderModel"),d4t.forEach(t),l3r=r(iRe," (Vision Encoder decoder model)"),iRe.forEach(t),l4t.forEach(t),i3r=i(Bl),T(IC.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),NIe=i(m),Ec=n(m,"H2",{class:!0});var zNe=s(Ec);qC=n(zNe,"A",{id:!0,class:!0,href:!0});var c4t=s(qC);tTe=n(c4t,"SPAN",{});var m4t=s(tTe);T(Px.$$.fragment,m4t),m4t.forEach(t),c4t.forEach(t),d3r=i(zNe),aTe=n(zNe,"SPAN",{});var f4t=s(aTe);c3r=r(f4t,"TFAutoModelForSpeechSeq2Seq"),f4t.forEach(t),zNe.forEach(t),jIe=i(m),cr=n(m,"DIV",{class:!0});var Pl=s(cr);T(Ix.$$.fragment,Pl),m3r=i(Pl),Cc=n(Pl,"P",{});var mZ=s(Cc);f3r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=n(mZ,"A",{href:!0});var g4t=s(lU);g3r=r(g4t,"from_pretrained()"),g4t.forEach(t),h3r=r(mZ," class method or the "),iU=n(mZ,"A",{href:!0});var h4t=s(iU);u3r=r(h4t,"from_config()"),h4t.forEach(t),p3r=r(mZ,` class
method.`),mZ.forEach(t),_3r=i(Pl),qx=n(Pl,"P",{});var QNe=s(qx);b3r=r(QNe,"This class cannot be instantiated directly using "),nTe=n(QNe,"CODE",{});var u4t=s(nTe);F3r=r(u4t,"__init__()"),u4t.forEach(t),v3r=r(QNe," (throws an error)."),QNe.forEach(t),T3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var f6=s(Nt);T(Nx.$$.fragment,f6),M3r=i(f6),sTe=n(f6,"P",{});var p4t=s(sTe);E3r=r(p4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),p4t.forEach(t),C3r=i(f6),wc=n(f6,"P",{});var fZ=s(wc);w3r=r(fZ,`Note:
Loading a model from its configuration file does `),lTe=n(fZ,"STRONG",{});var _4t=s(lTe);A3r=r(_4t,"not"),_4t.forEach(t),y3r=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(fZ,"A",{href:!0});var b4t=s(dU);L3r=r(b4t,"from_pretrained()"),b4t.forEach(t),x3r=r(fZ," to load the model weights."),fZ.forEach(t),$3r=i(f6),T(NC.$$.fragment,f6),f6.forEach(t),k3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(jx.$$.fragment,Il),S3r=i(Il),iTe=n(Il,"P",{});var F4t=s(iTe);R3r=r(F4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F4t.forEach(t),B3r=i(Il),fn=n(Il,"P",{});var g6=s(fn);P3r=r(g6,"The model class to instantiate is selected based on the "),dTe=n(g6,"CODE",{});var v4t=s(dTe);I3r=r(v4t,"model_type"),v4t.forEach(t),q3r=r(g6,` property of the config object (either
passed as an argument or loaded from `),cTe=n(g6,"CODE",{});var T4t=s(cTe);N3r=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),j3r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(g6,"CODE",{});var M4t=s(mTe);D3r=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),G3r=r(g6,":"),g6.forEach(t),O3r=i(Il),fTe=n(Il,"UL",{});var E4t=s(fTe);jC=n(E4t,"LI",{});var dRe=s(jC);gTe=n(dRe,"STRONG",{});var C4t=s(gTe);V3r=r(C4t,"speech_to_text"),C4t.forEach(t),X3r=r(dRe," \u2014 "),cU=n(dRe,"A",{href:!0});var w4t=s(cU);z3r=r(w4t,"TFSpeech2TextForConditionalGeneration"),w4t.forEach(t),Q3r=r(dRe," (Speech2Text model)"),dRe.forEach(t),E4t.forEach(t),W3r=i(Il),T(DC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),DIe=i(m),Ac=n(m,"H2",{class:!0});var WNe=s(Ac);GC=n(WNe,"A",{id:!0,class:!0,href:!0});var A4t=s(GC);hTe=n(A4t,"SPAN",{});var y4t=s(hTe);T(Dx.$$.fragment,y4t),y4t.forEach(t),A4t.forEach(t),H3r=i(WNe),uTe=n(WNe,"SPAN",{});var L4t=s(uTe);U3r=r(L4t,"FlaxAutoModel"),L4t.forEach(t),WNe.forEach(t),GIe=i(m),mr=n(m,"DIV",{class:!0});var ql=s(mr);T(Gx.$$.fragment,ql),J3r=i(ql),yc=n(ql,"P",{});var gZ=s(yc);Y3r=r(gZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mU=n(gZ,"A",{href:!0});var x4t=s(mU);K3r=r(x4t,"from_pretrained()"),x4t.forEach(t),Z3r=r(gZ," class method or the "),fU=n(gZ,"A",{href:!0});var $4t=s(fU);ewr=r($4t,"from_config()"),$4t.forEach(t),owr=r(gZ,` class
method.`),gZ.forEach(t),rwr=i(ql),Ox=n(ql,"P",{});var HNe=s(Ox);twr=r(HNe,"This class cannot be instantiated directly using "),pTe=n(HNe,"CODE",{});var k4t=s(pTe);awr=r(k4t,"__init__()"),k4t.forEach(t),nwr=r(HNe," (throws an error)."),HNe.forEach(t),swr=i(ql),jt=n(ql,"DIV",{class:!0});var h6=s(jt);T(Vx.$$.fragment,h6),lwr=i(h6),_Te=n(h6,"P",{});var S4t=s(_Te);iwr=r(S4t,"Instantiates one of the base model classes of the library from a configuration."),S4t.forEach(t),dwr=i(h6),Lc=n(h6,"P",{});var hZ=s(Lc);cwr=r(hZ,`Note:
Loading a model from its configuration file does `),bTe=n(hZ,"STRONG",{});var R4t=s(bTe);mwr=r(R4t,"not"),R4t.forEach(t),fwr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(hZ,"A",{href:!0});var B4t=s(gU);gwr=r(B4t,"from_pretrained()"),B4t.forEach(t),hwr=r(hZ," to load the model weights."),hZ.forEach(t),uwr=i(h6),T(OC.$$.fragment,h6),h6.forEach(t),pwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Xx.$$.fragment,Nl),_wr=i(Nl),FTe=n(Nl,"P",{});var P4t=s(FTe);bwr=r(P4t,"Instantiate one of the base model classes of the library from a pretrained model."),P4t.forEach(t),Fwr=i(Nl),gn=n(Nl,"P",{});var u6=s(gn);vwr=r(u6,"The model class to instantiate is selected based on the "),vTe=n(u6,"CODE",{});var I4t=s(vTe);Twr=r(I4t,"model_type"),I4t.forEach(t),Mwr=r(u6,` property of the config object (either
passed as an argument or loaded from `),TTe=n(u6,"CODE",{});var q4t=s(TTe);Ewr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),Cwr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(u6,"CODE",{});var N4t=s(MTe);wwr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),Awr=r(u6,":"),u6.forEach(t),ywr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);VC=n(ae,"LI",{});var cRe=s(VC);ETe=n(cRe,"STRONG",{});var j4t=s(ETe);Lwr=r(j4t,"albert"),j4t.forEach(t),xwr=r(cRe," \u2014 "),hU=n(cRe,"A",{href:!0});var D4t=s(hU);$wr=r(D4t,"FlaxAlbertModel"),D4t.forEach(t),kwr=r(cRe," (ALBERT model)"),cRe.forEach(t),Swr=i(ae),XC=n(ae,"LI",{});var mRe=s(XC);CTe=n(mRe,"STRONG",{});var G4t=s(CTe);Rwr=r(G4t,"bart"),G4t.forEach(t),Bwr=r(mRe," \u2014 "),uU=n(mRe,"A",{href:!0});var O4t=s(uU);Pwr=r(O4t,"FlaxBartModel"),O4t.forEach(t),Iwr=r(mRe," (BART model)"),mRe.forEach(t),qwr=i(ae),zC=n(ae,"LI",{});var fRe=s(zC);wTe=n(fRe,"STRONG",{});var V4t=s(wTe);Nwr=r(V4t,"beit"),V4t.forEach(t),jwr=r(fRe," \u2014 "),pU=n(fRe,"A",{href:!0});var X4t=s(pU);Dwr=r(X4t,"FlaxBeitModel"),X4t.forEach(t),Gwr=r(fRe," (BEiT model)"),fRe.forEach(t),Owr=i(ae),QC=n(ae,"LI",{});var gRe=s(QC);ATe=n(gRe,"STRONG",{});var z4t=s(ATe);Vwr=r(z4t,"bert"),z4t.forEach(t),Xwr=r(gRe," \u2014 "),_U=n(gRe,"A",{href:!0});var Q4t=s(_U);zwr=r(Q4t,"FlaxBertModel"),Q4t.forEach(t),Qwr=r(gRe," (BERT model)"),gRe.forEach(t),Wwr=i(ae),WC=n(ae,"LI",{});var hRe=s(WC);yTe=n(hRe,"STRONG",{});var W4t=s(yTe);Hwr=r(W4t,"big_bird"),W4t.forEach(t),Uwr=r(hRe," \u2014 "),bU=n(hRe,"A",{href:!0});var H4t=s(bU);Jwr=r(H4t,"FlaxBigBirdModel"),H4t.forEach(t),Ywr=r(hRe," (BigBird model)"),hRe.forEach(t),Kwr=i(ae),HC=n(ae,"LI",{});var uRe=s(HC);LTe=n(uRe,"STRONG",{});var U4t=s(LTe);Zwr=r(U4t,"blenderbot"),U4t.forEach(t),eAr=r(uRe," \u2014 "),FU=n(uRe,"A",{href:!0});var J4t=s(FU);oAr=r(J4t,"FlaxBlenderbotModel"),J4t.forEach(t),rAr=r(uRe," (Blenderbot model)"),uRe.forEach(t),tAr=i(ae),UC=n(ae,"LI",{});var pRe=s(UC);xTe=n(pRe,"STRONG",{});var Y4t=s(xTe);aAr=r(Y4t,"blenderbot-small"),Y4t.forEach(t),nAr=r(pRe," \u2014 "),vU=n(pRe,"A",{href:!0});var K4t=s(vU);sAr=r(K4t,"FlaxBlenderbotSmallModel"),K4t.forEach(t),lAr=r(pRe," (BlenderbotSmall model)"),pRe.forEach(t),iAr=i(ae),JC=n(ae,"LI",{});var _Re=s(JC);$Te=n(_Re,"STRONG",{});var Z4t=s($Te);dAr=r(Z4t,"clip"),Z4t.forEach(t),cAr=r(_Re," \u2014 "),TU=n(_Re,"A",{href:!0});var eEt=s(TU);mAr=r(eEt,"FlaxCLIPModel"),eEt.forEach(t),fAr=r(_Re," (CLIP model)"),_Re.forEach(t),gAr=i(ae),YC=n(ae,"LI",{});var bRe=s(YC);kTe=n(bRe,"STRONG",{});var oEt=s(kTe);hAr=r(oEt,"distilbert"),oEt.forEach(t),uAr=r(bRe," \u2014 "),MU=n(bRe,"A",{href:!0});var rEt=s(MU);pAr=r(rEt,"FlaxDistilBertModel"),rEt.forEach(t),_Ar=r(bRe," (DistilBERT model)"),bRe.forEach(t),bAr=i(ae),KC=n(ae,"LI",{});var FRe=s(KC);STe=n(FRe,"STRONG",{});var tEt=s(STe);FAr=r(tEt,"electra"),tEt.forEach(t),vAr=r(FRe," \u2014 "),EU=n(FRe,"A",{href:!0});var aEt=s(EU);TAr=r(aEt,"FlaxElectraModel"),aEt.forEach(t),MAr=r(FRe," (ELECTRA model)"),FRe.forEach(t),EAr=i(ae),ZC=n(ae,"LI",{});var vRe=s(ZC);RTe=n(vRe,"STRONG",{});var nEt=s(RTe);CAr=r(nEt,"gpt2"),nEt.forEach(t),wAr=r(vRe," \u2014 "),CU=n(vRe,"A",{href:!0});var sEt=s(CU);AAr=r(sEt,"FlaxGPT2Model"),sEt.forEach(t),yAr=r(vRe," (OpenAI GPT-2 model)"),vRe.forEach(t),LAr=i(ae),e3=n(ae,"LI",{});var TRe=s(e3);BTe=n(TRe,"STRONG",{});var lEt=s(BTe);xAr=r(lEt,"gpt_neo"),lEt.forEach(t),$Ar=r(TRe," \u2014 "),wU=n(TRe,"A",{href:!0});var iEt=s(wU);kAr=r(iEt,"FlaxGPTNeoModel"),iEt.forEach(t),SAr=r(TRe," (GPT Neo model)"),TRe.forEach(t),RAr=i(ae),o3=n(ae,"LI",{});var MRe=s(o3);PTe=n(MRe,"STRONG",{});var dEt=s(PTe);BAr=r(dEt,"gptj"),dEt.forEach(t),PAr=r(MRe," \u2014 "),AU=n(MRe,"A",{href:!0});var cEt=s(AU);IAr=r(cEt,"FlaxGPTJModel"),cEt.forEach(t),qAr=r(MRe," (GPT-J model)"),MRe.forEach(t),NAr=i(ae),r3=n(ae,"LI",{});var ERe=s(r3);ITe=n(ERe,"STRONG",{});var mEt=s(ITe);jAr=r(mEt,"marian"),mEt.forEach(t),DAr=r(ERe," \u2014 "),yU=n(ERe,"A",{href:!0});var fEt=s(yU);GAr=r(fEt,"FlaxMarianModel"),fEt.forEach(t),OAr=r(ERe," (Marian model)"),ERe.forEach(t),VAr=i(ae),t3=n(ae,"LI",{});var CRe=s(t3);qTe=n(CRe,"STRONG",{});var gEt=s(qTe);XAr=r(gEt,"mbart"),gEt.forEach(t),zAr=r(CRe," \u2014 "),LU=n(CRe,"A",{href:!0});var hEt=s(LU);QAr=r(hEt,"FlaxMBartModel"),hEt.forEach(t),WAr=r(CRe," (mBART model)"),CRe.forEach(t),HAr=i(ae),a3=n(ae,"LI",{});var wRe=s(a3);NTe=n(wRe,"STRONG",{});var uEt=s(NTe);UAr=r(uEt,"mt5"),uEt.forEach(t),JAr=r(wRe," \u2014 "),xU=n(wRe,"A",{href:!0});var pEt=s(xU);YAr=r(pEt,"FlaxMT5Model"),pEt.forEach(t),KAr=r(wRe," (mT5 model)"),wRe.forEach(t),ZAr=i(ae),n3=n(ae,"LI",{});var ARe=s(n3);jTe=n(ARe,"STRONG",{});var _Et=s(jTe);e0r=r(_Et,"pegasus"),_Et.forEach(t),o0r=r(ARe," \u2014 "),$U=n(ARe,"A",{href:!0});var bEt=s($U);r0r=r(bEt,"FlaxPegasusModel"),bEt.forEach(t),t0r=r(ARe," (Pegasus model)"),ARe.forEach(t),a0r=i(ae),s3=n(ae,"LI",{});var yRe=s(s3);DTe=n(yRe,"STRONG",{});var FEt=s(DTe);n0r=r(FEt,"roberta"),FEt.forEach(t),s0r=r(yRe," \u2014 "),kU=n(yRe,"A",{href:!0});var vEt=s(kU);l0r=r(vEt,"FlaxRobertaModel"),vEt.forEach(t),i0r=r(yRe," (RoBERTa model)"),yRe.forEach(t),d0r=i(ae),l3=n(ae,"LI",{});var LRe=s(l3);GTe=n(LRe,"STRONG",{});var TEt=s(GTe);c0r=r(TEt,"roformer"),TEt.forEach(t),m0r=r(LRe," \u2014 "),SU=n(LRe,"A",{href:!0});var MEt=s(SU);f0r=r(MEt,"FlaxRoFormerModel"),MEt.forEach(t),g0r=r(LRe," (RoFormer model)"),LRe.forEach(t),h0r=i(ae),i3=n(ae,"LI",{});var xRe=s(i3);OTe=n(xRe,"STRONG",{});var EEt=s(OTe);u0r=r(EEt,"t5"),EEt.forEach(t),p0r=r(xRe," \u2014 "),RU=n(xRe,"A",{href:!0});var CEt=s(RU);_0r=r(CEt,"FlaxT5Model"),CEt.forEach(t),b0r=r(xRe," (T5 model)"),xRe.forEach(t),F0r=i(ae),d3=n(ae,"LI",{});var $Re=s(d3);VTe=n($Re,"STRONG",{});var wEt=s(VTe);v0r=r(wEt,"vision-text-dual-encoder"),wEt.forEach(t),T0r=r($Re," \u2014 "),BU=n($Re,"A",{href:!0});var AEt=s(BU);M0r=r(AEt,"FlaxVisionTextDualEncoderModel"),AEt.forEach(t),E0r=r($Re," (VisionTextDualEncoder model)"),$Re.forEach(t),C0r=i(ae),c3=n(ae,"LI",{});var kRe=s(c3);XTe=n(kRe,"STRONG",{});var yEt=s(XTe);w0r=r(yEt,"vit"),yEt.forEach(t),A0r=r(kRe," \u2014 "),PU=n(kRe,"A",{href:!0});var LEt=s(PU);y0r=r(LEt,"FlaxViTModel"),LEt.forEach(t),L0r=r(kRe," (ViT model)"),kRe.forEach(t),x0r=i(ae),m3=n(ae,"LI",{});var SRe=s(m3);zTe=n(SRe,"STRONG",{});var xEt=s(zTe);$0r=r(xEt,"wav2vec2"),xEt.forEach(t),k0r=r(SRe," \u2014 "),IU=n(SRe,"A",{href:!0});var $Et=s(IU);S0r=r($Et,"FlaxWav2Vec2Model"),$Et.forEach(t),R0r=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),B0r=i(ae),f3=n(ae,"LI",{});var RRe=s(f3);QTe=n(RRe,"STRONG",{});var kEt=s(QTe);P0r=r(kEt,"xglm"),kEt.forEach(t),I0r=r(RRe," \u2014 "),qU=n(RRe,"A",{href:!0});var SEt=s(qU);q0r=r(SEt,"FlaxXGLMModel"),SEt.forEach(t),N0r=r(RRe," (XGLM model)"),RRe.forEach(t),j0r=i(ae),g3=n(ae,"LI",{});var BRe=s(g3);WTe=n(BRe,"STRONG",{});var REt=s(WTe);D0r=r(REt,"xlm-roberta"),REt.forEach(t),G0r=r(BRe," \u2014 "),NU=n(BRe,"A",{href:!0});var BEt=s(NU);O0r=r(BEt,"FlaxXLMRobertaModel"),BEt.forEach(t),V0r=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),ae.forEach(t),X0r=i(Nl),T(h3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),OIe=i(m),xc=n(m,"H2",{class:!0});var UNe=s(xc);u3=n(UNe,"A",{id:!0,class:!0,href:!0});var PEt=s(u3);HTe=n(PEt,"SPAN",{});var IEt=s(HTe);T(zx.$$.fragment,IEt),IEt.forEach(t),PEt.forEach(t),z0r=i(UNe),UTe=n(UNe,"SPAN",{});var qEt=s(UTe);Q0r=r(qEt,"FlaxAutoModelForCausalLM"),qEt.forEach(t),UNe.forEach(t),VIe=i(m),fr=n(m,"DIV",{class:!0});var jl=s(fr);T(Qx.$$.fragment,jl),W0r=i(jl),$c=n(jl,"P",{});var uZ=s($c);H0r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=n(uZ,"A",{href:!0});var NEt=s(jU);U0r=r(NEt,"from_pretrained()"),NEt.forEach(t),J0r=r(uZ," class method or the "),DU=n(uZ,"A",{href:!0});var jEt=s(DU);Y0r=r(jEt,"from_config()"),jEt.forEach(t),K0r=r(uZ,` class
method.`),uZ.forEach(t),Z0r=i(jl),Wx=n(jl,"P",{});var JNe=s(Wx);e6r=r(JNe,"This class cannot be instantiated directly using "),JTe=n(JNe,"CODE",{});var DEt=s(JTe);o6r=r(DEt,"__init__()"),DEt.forEach(t),r6r=r(JNe," (throws an error)."),JNe.forEach(t),t6r=i(jl),Dt=n(jl,"DIV",{class:!0});var p6=s(Dt);T(Hx.$$.fragment,p6),a6r=i(p6),YTe=n(p6,"P",{});var GEt=s(YTe);n6r=r(GEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GEt.forEach(t),s6r=i(p6),kc=n(p6,"P",{});var pZ=s(kc);l6r=r(pZ,`Note:
Loading a model from its configuration file does `),KTe=n(pZ,"STRONG",{});var OEt=s(KTe);i6r=r(OEt,"not"),OEt.forEach(t),d6r=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(pZ,"A",{href:!0});var VEt=s(GU);c6r=r(VEt,"from_pretrained()"),VEt.forEach(t),m6r=r(pZ," to load the model weights."),pZ.forEach(t),f6r=i(p6),T(p3.$$.fragment,p6),p6.forEach(t),g6r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(Ux.$$.fragment,Dl),h6r=i(Dl),ZTe=n(Dl,"P",{});var XEt=s(ZTe);u6r=r(XEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XEt.forEach(t),p6r=i(Dl),hn=n(Dl,"P",{});var _6=s(hn);_6r=r(_6,"The model class to instantiate is selected based on the "),eMe=n(_6,"CODE",{});var zEt=s(eMe);b6r=r(zEt,"model_type"),zEt.forEach(t),F6r=r(_6,` property of the config object (either
passed as an argument or loaded from `),oMe=n(_6,"CODE",{});var QEt=s(oMe);v6r=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),T6r=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(_6,"CODE",{});var WEt=s(rMe);M6r=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),E6r=r(_6,":"),_6.forEach(t),C6r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);_3=n(Oe,"LI",{});var PRe=s(_3);tMe=n(PRe,"STRONG",{});var HEt=s(tMe);w6r=r(HEt,"bart"),HEt.forEach(t),A6r=r(PRe," \u2014 "),OU=n(PRe,"A",{href:!0});var UEt=s(OU);y6r=r(UEt,"FlaxBartForCausalLM"),UEt.forEach(t),L6r=r(PRe," (BART model)"),PRe.forEach(t),x6r=i(Oe),b3=n(Oe,"LI",{});var IRe=s(b3);aMe=n(IRe,"STRONG",{});var JEt=s(aMe);$6r=r(JEt,"bert"),JEt.forEach(t),k6r=r(IRe," \u2014 "),VU=n(IRe,"A",{href:!0});var YEt=s(VU);S6r=r(YEt,"FlaxBertForCausalLM"),YEt.forEach(t),R6r=r(IRe," (BERT model)"),IRe.forEach(t),B6r=i(Oe),F3=n(Oe,"LI",{});var qRe=s(F3);nMe=n(qRe,"STRONG",{});var KEt=s(nMe);P6r=r(KEt,"big_bird"),KEt.forEach(t),I6r=r(qRe," \u2014 "),XU=n(qRe,"A",{href:!0});var ZEt=s(XU);q6r=r(ZEt,"FlaxBigBirdForCausalLM"),ZEt.forEach(t),N6r=r(qRe," (BigBird model)"),qRe.forEach(t),j6r=i(Oe),v3=n(Oe,"LI",{});var NRe=s(v3);sMe=n(NRe,"STRONG",{});var e5t=s(sMe);D6r=r(e5t,"electra"),e5t.forEach(t),G6r=r(NRe," \u2014 "),zU=n(NRe,"A",{href:!0});var o5t=s(zU);O6r=r(o5t,"FlaxElectraForCausalLM"),o5t.forEach(t),V6r=r(NRe," (ELECTRA model)"),NRe.forEach(t),X6r=i(Oe),T3=n(Oe,"LI",{});var jRe=s(T3);lMe=n(jRe,"STRONG",{});var r5t=s(lMe);z6r=r(r5t,"gpt2"),r5t.forEach(t),Q6r=r(jRe," \u2014 "),QU=n(jRe,"A",{href:!0});var t5t=s(QU);W6r=r(t5t,"FlaxGPT2LMHeadModel"),t5t.forEach(t),H6r=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),U6r=i(Oe),M3=n(Oe,"LI",{});var DRe=s(M3);iMe=n(DRe,"STRONG",{});var a5t=s(iMe);J6r=r(a5t,"gpt_neo"),a5t.forEach(t),Y6r=r(DRe," \u2014 "),WU=n(DRe,"A",{href:!0});var n5t=s(WU);K6r=r(n5t,"FlaxGPTNeoForCausalLM"),n5t.forEach(t),Z6r=r(DRe," (GPT Neo model)"),DRe.forEach(t),eyr=i(Oe),E3=n(Oe,"LI",{});var GRe=s(E3);dMe=n(GRe,"STRONG",{});var s5t=s(dMe);oyr=r(s5t,"gptj"),s5t.forEach(t),ryr=r(GRe," \u2014 "),HU=n(GRe,"A",{href:!0});var l5t=s(HU);tyr=r(l5t,"FlaxGPTJForCausalLM"),l5t.forEach(t),ayr=r(GRe," (GPT-J model)"),GRe.forEach(t),nyr=i(Oe),C3=n(Oe,"LI",{});var ORe=s(C3);cMe=n(ORe,"STRONG",{});var i5t=s(cMe);syr=r(i5t,"roberta"),i5t.forEach(t),lyr=r(ORe," \u2014 "),UU=n(ORe,"A",{href:!0});var d5t=s(UU);iyr=r(d5t,"FlaxRobertaForCausalLM"),d5t.forEach(t),dyr=r(ORe," (RoBERTa model)"),ORe.forEach(t),cyr=i(Oe),w3=n(Oe,"LI",{});var VRe=s(w3);mMe=n(VRe,"STRONG",{});var c5t=s(mMe);myr=r(c5t,"xglm"),c5t.forEach(t),fyr=r(VRe," \u2014 "),JU=n(VRe,"A",{href:!0});var m5t=s(JU);gyr=r(m5t,"FlaxXGLMForCausalLM"),m5t.forEach(t),hyr=r(VRe," (XGLM model)"),VRe.forEach(t),Oe.forEach(t),uyr=i(Dl),T(A3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),XIe=i(m),Sc=n(m,"H2",{class:!0});var YNe=s(Sc);y3=n(YNe,"A",{id:!0,class:!0,href:!0});var f5t=s(y3);fMe=n(f5t,"SPAN",{});var g5t=s(fMe);T(Jx.$$.fragment,g5t),g5t.forEach(t),f5t.forEach(t),pyr=i(YNe),gMe=n(YNe,"SPAN",{});var h5t=s(gMe);_yr=r(h5t,"FlaxAutoModelForPreTraining"),h5t.forEach(t),YNe.forEach(t),zIe=i(m),gr=n(m,"DIV",{class:!0});var Gl=s(gr);T(Yx.$$.fragment,Gl),byr=i(Gl),Rc=n(Gl,"P",{});var _Z=s(Rc);Fyr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=n(_Z,"A",{href:!0});var u5t=s(YU);vyr=r(u5t,"from_pretrained()"),u5t.forEach(t),Tyr=r(_Z," class method or the "),KU=n(_Z,"A",{href:!0});var p5t=s(KU);Myr=r(p5t,"from_config()"),p5t.forEach(t),Eyr=r(_Z,` class
method.`),_Z.forEach(t),Cyr=i(Gl),Kx=n(Gl,"P",{});var KNe=s(Kx);wyr=r(KNe,"This class cannot be instantiated directly using "),hMe=n(KNe,"CODE",{});var _5t=s(hMe);Ayr=r(_5t,"__init__()"),_5t.forEach(t),yyr=r(KNe," (throws an error)."),KNe.forEach(t),Lyr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var b6=s(Gt);T(Zx.$$.fragment,b6),xyr=i(b6),uMe=n(b6,"P",{});var b5t=s(uMe);$yr=r(b5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b5t.forEach(t),kyr=i(b6),Bc=n(b6,"P",{});var bZ=s(Bc);Syr=r(bZ,`Note:
Loading a model from its configuration file does `),pMe=n(bZ,"STRONG",{});var F5t=s(pMe);Ryr=r(F5t,"not"),F5t.forEach(t),Byr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(bZ,"A",{href:!0});var v5t=s(ZU);Pyr=r(v5t,"from_pretrained()"),v5t.forEach(t),Iyr=r(bZ," to load the model weights."),bZ.forEach(t),qyr=i(b6),T(L3.$$.fragment,b6),b6.forEach(t),Nyr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(e7.$$.fragment,Ol),jyr=i(Ol),_Me=n(Ol,"P",{});var T5t=s(_Me);Dyr=r(T5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T5t.forEach(t),Gyr=i(Ol),un=n(Ol,"P",{});var F6=s(un);Oyr=r(F6,"The model class to instantiate is selected based on the "),bMe=n(F6,"CODE",{});var M5t=s(bMe);Vyr=r(M5t,"model_type"),M5t.forEach(t),Xyr=r(F6,` property of the config object (either
passed as an argument or loaded from `),FMe=n(F6,"CODE",{});var E5t=s(FMe);zyr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),Qyr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(F6,"CODE",{});var C5t=s(vMe);Wyr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),Hyr=r(F6,":"),F6.forEach(t),Uyr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);x3=n(we,"LI",{});var XRe=s(x3);TMe=n(XRe,"STRONG",{});var w5t=s(TMe);Jyr=r(w5t,"albert"),w5t.forEach(t),Yyr=r(XRe," \u2014 "),eJ=n(XRe,"A",{href:!0});var A5t=s(eJ);Kyr=r(A5t,"FlaxAlbertForPreTraining"),A5t.forEach(t),Zyr=r(XRe," (ALBERT model)"),XRe.forEach(t),eLr=i(we),$3=n(we,"LI",{});var zRe=s($3);MMe=n(zRe,"STRONG",{});var y5t=s(MMe);oLr=r(y5t,"bart"),y5t.forEach(t),rLr=r(zRe," \u2014 "),oJ=n(zRe,"A",{href:!0});var L5t=s(oJ);tLr=r(L5t,"FlaxBartForConditionalGeneration"),L5t.forEach(t),aLr=r(zRe," (BART model)"),zRe.forEach(t),nLr=i(we),k3=n(we,"LI",{});var QRe=s(k3);EMe=n(QRe,"STRONG",{});var x5t=s(EMe);sLr=r(x5t,"bert"),x5t.forEach(t),lLr=r(QRe," \u2014 "),rJ=n(QRe,"A",{href:!0});var $5t=s(rJ);iLr=r($5t,"FlaxBertForPreTraining"),$5t.forEach(t),dLr=r(QRe," (BERT model)"),QRe.forEach(t),cLr=i(we),S3=n(we,"LI",{});var WRe=s(S3);CMe=n(WRe,"STRONG",{});var k5t=s(CMe);mLr=r(k5t,"big_bird"),k5t.forEach(t),fLr=r(WRe," \u2014 "),tJ=n(WRe,"A",{href:!0});var S5t=s(tJ);gLr=r(S5t,"FlaxBigBirdForPreTraining"),S5t.forEach(t),hLr=r(WRe," (BigBird model)"),WRe.forEach(t),uLr=i(we),R3=n(we,"LI",{});var HRe=s(R3);wMe=n(HRe,"STRONG",{});var R5t=s(wMe);pLr=r(R5t,"electra"),R5t.forEach(t),_Lr=r(HRe," \u2014 "),aJ=n(HRe,"A",{href:!0});var B5t=s(aJ);bLr=r(B5t,"FlaxElectraForPreTraining"),B5t.forEach(t),FLr=r(HRe," (ELECTRA model)"),HRe.forEach(t),vLr=i(we),B3=n(we,"LI",{});var URe=s(B3);AMe=n(URe,"STRONG",{});var P5t=s(AMe);TLr=r(P5t,"mbart"),P5t.forEach(t),MLr=r(URe," \u2014 "),nJ=n(URe,"A",{href:!0});var I5t=s(nJ);ELr=r(I5t,"FlaxMBartForConditionalGeneration"),I5t.forEach(t),CLr=r(URe," (mBART model)"),URe.forEach(t),wLr=i(we),P3=n(we,"LI",{});var JRe=s(P3);yMe=n(JRe,"STRONG",{});var q5t=s(yMe);ALr=r(q5t,"mt5"),q5t.forEach(t),yLr=r(JRe," \u2014 "),sJ=n(JRe,"A",{href:!0});var N5t=s(sJ);LLr=r(N5t,"FlaxMT5ForConditionalGeneration"),N5t.forEach(t),xLr=r(JRe," (mT5 model)"),JRe.forEach(t),$Lr=i(we),I3=n(we,"LI",{});var YRe=s(I3);LMe=n(YRe,"STRONG",{});var j5t=s(LMe);kLr=r(j5t,"roberta"),j5t.forEach(t),SLr=r(YRe," \u2014 "),lJ=n(YRe,"A",{href:!0});var D5t=s(lJ);RLr=r(D5t,"FlaxRobertaForMaskedLM"),D5t.forEach(t),BLr=r(YRe," (RoBERTa model)"),YRe.forEach(t),PLr=i(we),q3=n(we,"LI",{});var KRe=s(q3);xMe=n(KRe,"STRONG",{});var G5t=s(xMe);ILr=r(G5t,"roformer"),G5t.forEach(t),qLr=r(KRe," \u2014 "),iJ=n(KRe,"A",{href:!0});var O5t=s(iJ);NLr=r(O5t,"FlaxRoFormerForMaskedLM"),O5t.forEach(t),jLr=r(KRe," (RoFormer model)"),KRe.forEach(t),DLr=i(we),N3=n(we,"LI",{});var ZRe=s(N3);$Me=n(ZRe,"STRONG",{});var V5t=s($Me);GLr=r(V5t,"t5"),V5t.forEach(t),OLr=r(ZRe," \u2014 "),dJ=n(ZRe,"A",{href:!0});var X5t=s(dJ);VLr=r(X5t,"FlaxT5ForConditionalGeneration"),X5t.forEach(t),XLr=r(ZRe," (T5 model)"),ZRe.forEach(t),zLr=i(we),j3=n(we,"LI",{});var eBe=s(j3);kMe=n(eBe,"STRONG",{});var z5t=s(kMe);QLr=r(z5t,"wav2vec2"),z5t.forEach(t),WLr=r(eBe," \u2014 "),cJ=n(eBe,"A",{href:!0});var Q5t=s(cJ);HLr=r(Q5t,"FlaxWav2Vec2ForPreTraining"),Q5t.forEach(t),ULr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),JLr=i(we),D3=n(we,"LI",{});var oBe=s(D3);SMe=n(oBe,"STRONG",{});var W5t=s(SMe);YLr=r(W5t,"xlm-roberta"),W5t.forEach(t),KLr=r(oBe," \u2014 "),mJ=n(oBe,"A",{href:!0});var H5t=s(mJ);ZLr=r(H5t,"FlaxXLMRobertaForMaskedLM"),H5t.forEach(t),e8r=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),we.forEach(t),o8r=i(Ol),T(G3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),QIe=i(m),Pc=n(m,"H2",{class:!0});var ZNe=s(Pc);O3=n(ZNe,"A",{id:!0,class:!0,href:!0});var U5t=s(O3);RMe=n(U5t,"SPAN",{});var J5t=s(RMe);T(o7.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),r8r=i(ZNe),BMe=n(ZNe,"SPAN",{});var Y5t=s(BMe);t8r=r(Y5t,"FlaxAutoModelForMaskedLM"),Y5t.forEach(t),ZNe.forEach(t),WIe=i(m),hr=n(m,"DIV",{class:!0});var Vl=s(hr);T(r7.$$.fragment,Vl),a8r=i(Vl),Ic=n(Vl,"P",{});var FZ=s(Ic);n8r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fJ=n(FZ,"A",{href:!0});var K5t=s(fJ);s8r=r(K5t,"from_pretrained()"),K5t.forEach(t),l8r=r(FZ," class method or the "),gJ=n(FZ,"A",{href:!0});var Z5t=s(gJ);i8r=r(Z5t,"from_config()"),Z5t.forEach(t),d8r=r(FZ,` class
method.`),FZ.forEach(t),c8r=i(Vl),t7=n(Vl,"P",{});var eje=s(t7);m8r=r(eje,"This class cannot be instantiated directly using "),PMe=n(eje,"CODE",{});var eCt=s(PMe);f8r=r(eCt,"__init__()"),eCt.forEach(t),g8r=r(eje," (throws an error)."),eje.forEach(t),h8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var v6=s(Ot);T(a7.$$.fragment,v6),u8r=i(v6),IMe=n(v6,"P",{});var oCt=s(IMe);p8r=r(oCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oCt.forEach(t),_8r=i(v6),qc=n(v6,"P",{});var vZ=s(qc);b8r=r(vZ,`Note:
Loading a model from its configuration file does `),qMe=n(vZ,"STRONG",{});var rCt=s(qMe);F8r=r(rCt,"not"),rCt.forEach(t),v8r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(vZ,"A",{href:!0});var tCt=s(hJ);T8r=r(tCt,"from_pretrained()"),tCt.forEach(t),M8r=r(vZ," to load the model weights."),vZ.forEach(t),E8r=i(v6),T(V3.$$.fragment,v6),v6.forEach(t),C8r=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(n7.$$.fragment,Xl),w8r=i(Xl),NMe=n(Xl,"P",{});var aCt=s(NMe);A8r=r(aCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aCt.forEach(t),y8r=i(Xl),pn=n(Xl,"P",{});var T6=s(pn);L8r=r(T6,"The model class to instantiate is selected based on the "),jMe=n(T6,"CODE",{});var nCt=s(jMe);x8r=r(nCt,"model_type"),nCt.forEach(t),$8r=r(T6,` property of the config object (either
passed as an argument or loaded from `),DMe=n(T6,"CODE",{});var sCt=s(DMe);k8r=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),S8r=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(T6,"CODE",{});var lCt=s(GMe);R8r=r(lCt,"pretrained_model_name_or_path"),lCt.forEach(t),B8r=r(T6,":"),T6.forEach(t),P8r=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);X3=n(Be,"LI",{});var rBe=s(X3);OMe=n(rBe,"STRONG",{});var iCt=s(OMe);I8r=r(iCt,"albert"),iCt.forEach(t),q8r=r(rBe," \u2014 "),uJ=n(rBe,"A",{href:!0});var dCt=s(uJ);N8r=r(dCt,"FlaxAlbertForMaskedLM"),dCt.forEach(t),j8r=r(rBe," (ALBERT model)"),rBe.forEach(t),D8r=i(Be),z3=n(Be,"LI",{});var tBe=s(z3);VMe=n(tBe,"STRONG",{});var cCt=s(VMe);G8r=r(cCt,"bart"),cCt.forEach(t),O8r=r(tBe," \u2014 "),pJ=n(tBe,"A",{href:!0});var mCt=s(pJ);V8r=r(mCt,"FlaxBartForConditionalGeneration"),mCt.forEach(t),X8r=r(tBe," (BART model)"),tBe.forEach(t),z8r=i(Be),Q3=n(Be,"LI",{});var aBe=s(Q3);XMe=n(aBe,"STRONG",{});var fCt=s(XMe);Q8r=r(fCt,"bert"),fCt.forEach(t),W8r=r(aBe," \u2014 "),_J=n(aBe,"A",{href:!0});var gCt=s(_J);H8r=r(gCt,"FlaxBertForMaskedLM"),gCt.forEach(t),U8r=r(aBe," (BERT model)"),aBe.forEach(t),J8r=i(Be),W3=n(Be,"LI",{});var nBe=s(W3);zMe=n(nBe,"STRONG",{});var hCt=s(zMe);Y8r=r(hCt,"big_bird"),hCt.forEach(t),K8r=r(nBe," \u2014 "),bJ=n(nBe,"A",{href:!0});var uCt=s(bJ);Z8r=r(uCt,"FlaxBigBirdForMaskedLM"),uCt.forEach(t),exr=r(nBe," (BigBird model)"),nBe.forEach(t),oxr=i(Be),H3=n(Be,"LI",{});var sBe=s(H3);QMe=n(sBe,"STRONG",{});var pCt=s(QMe);rxr=r(pCt,"distilbert"),pCt.forEach(t),txr=r(sBe," \u2014 "),FJ=n(sBe,"A",{href:!0});var _Ct=s(FJ);axr=r(_Ct,"FlaxDistilBertForMaskedLM"),_Ct.forEach(t),nxr=r(sBe," (DistilBERT model)"),sBe.forEach(t),sxr=i(Be),U3=n(Be,"LI",{});var lBe=s(U3);WMe=n(lBe,"STRONG",{});var bCt=s(WMe);lxr=r(bCt,"electra"),bCt.forEach(t),ixr=r(lBe," \u2014 "),vJ=n(lBe,"A",{href:!0});var FCt=s(vJ);dxr=r(FCt,"FlaxElectraForMaskedLM"),FCt.forEach(t),cxr=r(lBe," (ELECTRA model)"),lBe.forEach(t),mxr=i(Be),J3=n(Be,"LI",{});var iBe=s(J3);HMe=n(iBe,"STRONG",{});var vCt=s(HMe);fxr=r(vCt,"mbart"),vCt.forEach(t),gxr=r(iBe," \u2014 "),TJ=n(iBe,"A",{href:!0});var TCt=s(TJ);hxr=r(TCt,"FlaxMBartForConditionalGeneration"),TCt.forEach(t),uxr=r(iBe," (mBART model)"),iBe.forEach(t),pxr=i(Be),Y3=n(Be,"LI",{});var dBe=s(Y3);UMe=n(dBe,"STRONG",{});var MCt=s(UMe);_xr=r(MCt,"roberta"),MCt.forEach(t),bxr=r(dBe," \u2014 "),MJ=n(dBe,"A",{href:!0});var ECt=s(MJ);Fxr=r(ECt,"FlaxRobertaForMaskedLM"),ECt.forEach(t),vxr=r(dBe," (RoBERTa model)"),dBe.forEach(t),Txr=i(Be),K3=n(Be,"LI",{});var cBe=s(K3);JMe=n(cBe,"STRONG",{});var CCt=s(JMe);Mxr=r(CCt,"roformer"),CCt.forEach(t),Exr=r(cBe," \u2014 "),EJ=n(cBe,"A",{href:!0});var wCt=s(EJ);Cxr=r(wCt,"FlaxRoFormerForMaskedLM"),wCt.forEach(t),wxr=r(cBe," (RoFormer model)"),cBe.forEach(t),Axr=i(Be),Z3=n(Be,"LI",{});var mBe=s(Z3);YMe=n(mBe,"STRONG",{});var ACt=s(YMe);yxr=r(ACt,"xlm-roberta"),ACt.forEach(t),Lxr=r(mBe," \u2014 "),CJ=n(mBe,"A",{href:!0});var yCt=s(CJ);xxr=r(yCt,"FlaxXLMRobertaForMaskedLM"),yCt.forEach(t),$xr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),Be.forEach(t),kxr=i(Xl),T(ew.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),HIe=i(m),Nc=n(m,"H2",{class:!0});var oje=s(Nc);ow=n(oje,"A",{id:!0,class:!0,href:!0});var LCt=s(ow);KMe=n(LCt,"SPAN",{});var xCt=s(KMe);T(s7.$$.fragment,xCt),xCt.forEach(t),LCt.forEach(t),Sxr=i(oje),ZMe=n(oje,"SPAN",{});var $Ct=s(ZMe);Rxr=r($Ct,"FlaxAutoModelForSeq2SeqLM"),$Ct.forEach(t),oje.forEach(t),UIe=i(m),ur=n(m,"DIV",{class:!0});var zl=s(ur);T(l7.$$.fragment,zl),Bxr=i(zl),jc=n(zl,"P",{});var TZ=s(jc);Pxr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=n(TZ,"A",{href:!0});var kCt=s(wJ);Ixr=r(kCt,"from_pretrained()"),kCt.forEach(t),qxr=r(TZ," class method or the "),AJ=n(TZ,"A",{href:!0});var SCt=s(AJ);Nxr=r(SCt,"from_config()"),SCt.forEach(t),jxr=r(TZ,` class
method.`),TZ.forEach(t),Dxr=i(zl),i7=n(zl,"P",{});var rje=s(i7);Gxr=r(rje,"This class cannot be instantiated directly using "),e4e=n(rje,"CODE",{});var RCt=s(e4e);Oxr=r(RCt,"__init__()"),RCt.forEach(t),Vxr=r(rje," (throws an error)."),rje.forEach(t),Xxr=i(zl),Vt=n(zl,"DIV",{class:!0});var M6=s(Vt);T(d7.$$.fragment,M6),zxr=i(M6),o4e=n(M6,"P",{});var BCt=s(o4e);Qxr=r(BCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BCt.forEach(t),Wxr=i(M6),Dc=n(M6,"P",{});var MZ=s(Dc);Hxr=r(MZ,`Note:
Loading a model from its configuration file does `),r4e=n(MZ,"STRONG",{});var PCt=s(r4e);Uxr=r(PCt,"not"),PCt.forEach(t),Jxr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(MZ,"A",{href:!0});var ICt=s(yJ);Yxr=r(ICt,"from_pretrained()"),ICt.forEach(t),Kxr=r(MZ," to load the model weights."),MZ.forEach(t),Zxr=i(M6),T(rw.$$.fragment,M6),M6.forEach(t),e7r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(c7.$$.fragment,Ql),o7r=i(Ql),t4e=n(Ql,"P",{});var qCt=s(t4e);r7r=r(qCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qCt.forEach(t),t7r=i(Ql),_n=n(Ql,"P",{});var E6=s(_n);a7r=r(E6,"The model class to instantiate is selected based on the "),a4e=n(E6,"CODE",{});var NCt=s(a4e);n7r=r(NCt,"model_type"),NCt.forEach(t),s7r=r(E6,` property of the config object (either
passed as an argument or loaded from `),n4e=n(E6,"CODE",{});var jCt=s(n4e);l7r=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),i7r=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(E6,"CODE",{});var DCt=s(s4e);d7r=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),c7r=r(E6,":"),E6.forEach(t),m7r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);tw=n(Ve,"LI",{});var fBe=s(tw);l4e=n(fBe,"STRONG",{});var GCt=s(l4e);f7r=r(GCt,"bart"),GCt.forEach(t),g7r=r(fBe," \u2014 "),LJ=n(fBe,"A",{href:!0});var OCt=s(LJ);h7r=r(OCt,"FlaxBartForConditionalGeneration"),OCt.forEach(t),u7r=r(fBe," (BART model)"),fBe.forEach(t),p7r=i(Ve),aw=n(Ve,"LI",{});var gBe=s(aw);i4e=n(gBe,"STRONG",{});var VCt=s(i4e);_7r=r(VCt,"blenderbot"),VCt.forEach(t),b7r=r(gBe," \u2014 "),xJ=n(gBe,"A",{href:!0});var XCt=s(xJ);F7r=r(XCt,"FlaxBlenderbotForConditionalGeneration"),XCt.forEach(t),v7r=r(gBe," (Blenderbot model)"),gBe.forEach(t),T7r=i(Ve),nw=n(Ve,"LI",{});var hBe=s(nw);d4e=n(hBe,"STRONG",{});var zCt=s(d4e);M7r=r(zCt,"blenderbot-small"),zCt.forEach(t),E7r=r(hBe," \u2014 "),$J=n(hBe,"A",{href:!0});var QCt=s($J);C7r=r(QCt,"FlaxBlenderbotSmallForConditionalGeneration"),QCt.forEach(t),w7r=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),A7r=i(Ve),sw=n(Ve,"LI",{});var uBe=s(sw);c4e=n(uBe,"STRONG",{});var WCt=s(c4e);y7r=r(WCt,"encoder-decoder"),WCt.forEach(t),L7r=r(uBe," \u2014 "),kJ=n(uBe,"A",{href:!0});var HCt=s(kJ);x7r=r(HCt,"FlaxEncoderDecoderModel"),HCt.forEach(t),$7r=r(uBe," (Encoder decoder model)"),uBe.forEach(t),k7r=i(Ve),lw=n(Ve,"LI",{});var pBe=s(lw);m4e=n(pBe,"STRONG",{});var UCt=s(m4e);S7r=r(UCt,"marian"),UCt.forEach(t),R7r=r(pBe," \u2014 "),SJ=n(pBe,"A",{href:!0});var JCt=s(SJ);B7r=r(JCt,"FlaxMarianMTModel"),JCt.forEach(t),P7r=r(pBe," (Marian model)"),pBe.forEach(t),I7r=i(Ve),iw=n(Ve,"LI",{});var _Be=s(iw);f4e=n(_Be,"STRONG",{});var YCt=s(f4e);q7r=r(YCt,"mbart"),YCt.forEach(t),N7r=r(_Be," \u2014 "),RJ=n(_Be,"A",{href:!0});var KCt=s(RJ);j7r=r(KCt,"FlaxMBartForConditionalGeneration"),KCt.forEach(t),D7r=r(_Be," (mBART model)"),_Be.forEach(t),G7r=i(Ve),dw=n(Ve,"LI",{});var bBe=s(dw);g4e=n(bBe,"STRONG",{});var ZCt=s(g4e);O7r=r(ZCt,"mt5"),ZCt.forEach(t),V7r=r(bBe," \u2014 "),BJ=n(bBe,"A",{href:!0});var e3t=s(BJ);X7r=r(e3t,"FlaxMT5ForConditionalGeneration"),e3t.forEach(t),z7r=r(bBe," (mT5 model)"),bBe.forEach(t),Q7r=i(Ve),cw=n(Ve,"LI",{});var FBe=s(cw);h4e=n(FBe,"STRONG",{});var o3t=s(h4e);W7r=r(o3t,"pegasus"),o3t.forEach(t),H7r=r(FBe," \u2014 "),PJ=n(FBe,"A",{href:!0});var r3t=s(PJ);U7r=r(r3t,"FlaxPegasusForConditionalGeneration"),r3t.forEach(t),J7r=r(FBe," (Pegasus model)"),FBe.forEach(t),Y7r=i(Ve),mw=n(Ve,"LI",{});var vBe=s(mw);u4e=n(vBe,"STRONG",{});var t3t=s(u4e);K7r=r(t3t,"t5"),t3t.forEach(t),Z7r=r(vBe," \u2014 "),IJ=n(vBe,"A",{href:!0});var a3t=s(IJ);e9r=r(a3t,"FlaxT5ForConditionalGeneration"),a3t.forEach(t),o9r=r(vBe," (T5 model)"),vBe.forEach(t),Ve.forEach(t),r9r=i(Ql),T(fw.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),JIe=i(m),Gc=n(m,"H2",{class:!0});var tje=s(Gc);gw=n(tje,"A",{id:!0,class:!0,href:!0});var n3t=s(gw);p4e=n(n3t,"SPAN",{});var s3t=s(p4e);T(m7.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),t9r=i(tje),_4e=n(tje,"SPAN",{});var l3t=s(_4e);a9r=r(l3t,"FlaxAutoModelForSequenceClassification"),l3t.forEach(t),tje.forEach(t),YIe=i(m),pr=n(m,"DIV",{class:!0});var Wl=s(pr);T(f7.$$.fragment,Wl),n9r=i(Wl),Oc=n(Wl,"P",{});var EZ=s(Oc);s9r=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=n(EZ,"A",{href:!0});var i3t=s(qJ);l9r=r(i3t,"from_pretrained()"),i3t.forEach(t),i9r=r(EZ," class method or the "),NJ=n(EZ,"A",{href:!0});var d3t=s(NJ);d9r=r(d3t,"from_config()"),d3t.forEach(t),c9r=r(EZ,` class
method.`),EZ.forEach(t),m9r=i(Wl),g7=n(Wl,"P",{});var aje=s(g7);f9r=r(aje,"This class cannot be instantiated directly using "),b4e=n(aje,"CODE",{});var c3t=s(b4e);g9r=r(c3t,"__init__()"),c3t.forEach(t),h9r=r(aje," (throws an error)."),aje.forEach(t),u9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var C6=s(Xt);T(h7.$$.fragment,C6),p9r=i(C6),F4e=n(C6,"P",{});var m3t=s(F4e);_9r=r(m3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m3t.forEach(t),b9r=i(C6),Vc=n(C6,"P",{});var CZ=s(Vc);F9r=r(CZ,`Note:
Loading a model from its configuration file does `),v4e=n(CZ,"STRONG",{});var f3t=s(v4e);v9r=r(f3t,"not"),f3t.forEach(t),T9r=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(CZ,"A",{href:!0});var g3t=s(jJ);M9r=r(g3t,"from_pretrained()"),g3t.forEach(t),E9r=r(CZ," to load the model weights."),CZ.forEach(t),C9r=i(C6),T(hw.$$.fragment,C6),C6.forEach(t),w9r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(u7.$$.fragment,Hl),A9r=i(Hl),T4e=n(Hl,"P",{});var h3t=s(T4e);y9r=r(h3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h3t.forEach(t),L9r=i(Hl),bn=n(Hl,"P",{});var w6=s(bn);x9r=r(w6,"The model class to instantiate is selected based on the "),M4e=n(w6,"CODE",{});var u3t=s(M4e);$9r=r(u3t,"model_type"),u3t.forEach(t),k9r=r(w6,` property of the config object (either
passed as an argument or loaded from `),E4e=n(w6,"CODE",{});var p3t=s(E4e);S9r=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),R9r=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(w6,"CODE",{});var _3t=s(C4e);B9r=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),P9r=r(w6,":"),w6.forEach(t),I9r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);uw=n(Pe,"LI",{});var TBe=s(uw);w4e=n(TBe,"STRONG",{});var b3t=s(w4e);q9r=r(b3t,"albert"),b3t.forEach(t),N9r=r(TBe," \u2014 "),DJ=n(TBe,"A",{href:!0});var F3t=s(DJ);j9r=r(F3t,"FlaxAlbertForSequenceClassification"),F3t.forEach(t),D9r=r(TBe," (ALBERT model)"),TBe.forEach(t),G9r=i(Pe),pw=n(Pe,"LI",{});var MBe=s(pw);A4e=n(MBe,"STRONG",{});var v3t=s(A4e);O9r=r(v3t,"bart"),v3t.forEach(t),V9r=r(MBe," \u2014 "),GJ=n(MBe,"A",{href:!0});var T3t=s(GJ);X9r=r(T3t,"FlaxBartForSequenceClassification"),T3t.forEach(t),z9r=r(MBe," (BART model)"),MBe.forEach(t),Q9r=i(Pe),_w=n(Pe,"LI",{});var EBe=s(_w);y4e=n(EBe,"STRONG",{});var M3t=s(y4e);W9r=r(M3t,"bert"),M3t.forEach(t),H9r=r(EBe," \u2014 "),OJ=n(EBe,"A",{href:!0});var E3t=s(OJ);U9r=r(E3t,"FlaxBertForSequenceClassification"),E3t.forEach(t),J9r=r(EBe," (BERT model)"),EBe.forEach(t),Y9r=i(Pe),bw=n(Pe,"LI",{});var CBe=s(bw);L4e=n(CBe,"STRONG",{});var C3t=s(L4e);K9r=r(C3t,"big_bird"),C3t.forEach(t),Z9r=r(CBe," \u2014 "),VJ=n(CBe,"A",{href:!0});var w3t=s(VJ);e$r=r(w3t,"FlaxBigBirdForSequenceClassification"),w3t.forEach(t),o$r=r(CBe," (BigBird model)"),CBe.forEach(t),r$r=i(Pe),Fw=n(Pe,"LI",{});var wBe=s(Fw);x4e=n(wBe,"STRONG",{});var A3t=s(x4e);t$r=r(A3t,"distilbert"),A3t.forEach(t),a$r=r(wBe," \u2014 "),XJ=n(wBe,"A",{href:!0});var y3t=s(XJ);n$r=r(y3t,"FlaxDistilBertForSequenceClassification"),y3t.forEach(t),s$r=r(wBe," (DistilBERT model)"),wBe.forEach(t),l$r=i(Pe),vw=n(Pe,"LI",{});var ABe=s(vw);$4e=n(ABe,"STRONG",{});var L3t=s($4e);i$r=r(L3t,"electra"),L3t.forEach(t),d$r=r(ABe," \u2014 "),zJ=n(ABe,"A",{href:!0});var x3t=s(zJ);c$r=r(x3t,"FlaxElectraForSequenceClassification"),x3t.forEach(t),m$r=r(ABe," (ELECTRA model)"),ABe.forEach(t),f$r=i(Pe),Tw=n(Pe,"LI",{});var yBe=s(Tw);k4e=n(yBe,"STRONG",{});var $3t=s(k4e);g$r=r($3t,"mbart"),$3t.forEach(t),h$r=r(yBe," \u2014 "),QJ=n(yBe,"A",{href:!0});var k3t=s(QJ);u$r=r(k3t,"FlaxMBartForSequenceClassification"),k3t.forEach(t),p$r=r(yBe," (mBART model)"),yBe.forEach(t),_$r=i(Pe),Mw=n(Pe,"LI",{});var LBe=s(Mw);S4e=n(LBe,"STRONG",{});var S3t=s(S4e);b$r=r(S3t,"roberta"),S3t.forEach(t),F$r=r(LBe," \u2014 "),WJ=n(LBe,"A",{href:!0});var R3t=s(WJ);v$r=r(R3t,"FlaxRobertaForSequenceClassification"),R3t.forEach(t),T$r=r(LBe," (RoBERTa model)"),LBe.forEach(t),M$r=i(Pe),Ew=n(Pe,"LI",{});var xBe=s(Ew);R4e=n(xBe,"STRONG",{});var B3t=s(R4e);E$r=r(B3t,"roformer"),B3t.forEach(t),C$r=r(xBe," \u2014 "),HJ=n(xBe,"A",{href:!0});var P3t=s(HJ);w$r=r(P3t,"FlaxRoFormerForSequenceClassification"),P3t.forEach(t),A$r=r(xBe," (RoFormer model)"),xBe.forEach(t),y$r=i(Pe),Cw=n(Pe,"LI",{});var $Be=s(Cw);B4e=n($Be,"STRONG",{});var I3t=s(B4e);L$r=r(I3t,"xlm-roberta"),I3t.forEach(t),x$r=r($Be," \u2014 "),UJ=n($Be,"A",{href:!0});var q3t=s(UJ);$$r=r(q3t,"FlaxXLMRobertaForSequenceClassification"),q3t.forEach(t),k$r=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Pe.forEach(t),S$r=i(Hl),T(ww.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),KIe=i(m),Xc=n(m,"H2",{class:!0});var nje=s(Xc);Aw=n(nje,"A",{id:!0,class:!0,href:!0});var N3t=s(Aw);P4e=n(N3t,"SPAN",{});var j3t=s(P4e);T(p7.$$.fragment,j3t),j3t.forEach(t),N3t.forEach(t),R$r=i(nje),I4e=n(nje,"SPAN",{});var D3t=s(I4e);B$r=r(D3t,"FlaxAutoModelForQuestionAnswering"),D3t.forEach(t),nje.forEach(t),ZIe=i(m),_r=n(m,"DIV",{class:!0});var Ul=s(_r);T(_7.$$.fragment,Ul),P$r=i(Ul),zc=n(Ul,"P",{});var wZ=s(zc);I$r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=n(wZ,"A",{href:!0});var G3t=s(JJ);q$r=r(G3t,"from_pretrained()"),G3t.forEach(t),N$r=r(wZ," class method or the "),YJ=n(wZ,"A",{href:!0});var O3t=s(YJ);j$r=r(O3t,"from_config()"),O3t.forEach(t),D$r=r(wZ,` class
method.`),wZ.forEach(t),G$r=i(Ul),b7=n(Ul,"P",{});var sje=s(b7);O$r=r(sje,"This class cannot be instantiated directly using "),q4e=n(sje,"CODE",{});var V3t=s(q4e);V$r=r(V3t,"__init__()"),V3t.forEach(t),X$r=r(sje," (throws an error)."),sje.forEach(t),z$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var A6=s(zt);T(F7.$$.fragment,A6),Q$r=i(A6),N4e=n(A6,"P",{});var X3t=s(N4e);W$r=r(X3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X3t.forEach(t),H$r=i(A6),Qc=n(A6,"P",{});var AZ=s(Qc);U$r=r(AZ,`Note:
Loading a model from its configuration file does `),j4e=n(AZ,"STRONG",{});var z3t=s(j4e);J$r=r(z3t,"not"),z3t.forEach(t),Y$r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(AZ,"A",{href:!0});var Q3t=s(KJ);K$r=r(Q3t,"from_pretrained()"),Q3t.forEach(t),Z$r=r(AZ," to load the model weights."),AZ.forEach(t),ekr=i(A6),T(yw.$$.fragment,A6),A6.forEach(t),okr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(v7.$$.fragment,Jl),rkr=i(Jl),D4e=n(Jl,"P",{});var W3t=s(D4e);tkr=r(W3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W3t.forEach(t),akr=i(Jl),Fn=n(Jl,"P",{});var y6=s(Fn);nkr=r(y6,"The model class to instantiate is selected based on the "),G4e=n(y6,"CODE",{});var H3t=s(G4e);skr=r(H3t,"model_type"),H3t.forEach(t),lkr=r(y6,` property of the config object (either
passed as an argument or loaded from `),O4e=n(y6,"CODE",{});var U3t=s(O4e);ikr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),dkr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(y6,"CODE",{});var J3t=s(V4e);ckr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),mkr=r(y6,":"),y6.forEach(t),fkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);Lw=n(Ie,"LI",{});var kBe=s(Lw);X4e=n(kBe,"STRONG",{});var Y3t=s(X4e);gkr=r(Y3t,"albert"),Y3t.forEach(t),hkr=r(kBe," \u2014 "),ZJ=n(kBe,"A",{href:!0});var K3t=s(ZJ);ukr=r(K3t,"FlaxAlbertForQuestionAnswering"),K3t.forEach(t),pkr=r(kBe," (ALBERT model)"),kBe.forEach(t),_kr=i(Ie),xw=n(Ie,"LI",{});var SBe=s(xw);z4e=n(SBe,"STRONG",{});var Z3t=s(z4e);bkr=r(Z3t,"bart"),Z3t.forEach(t),Fkr=r(SBe," \u2014 "),eY=n(SBe,"A",{href:!0});var ewt=s(eY);vkr=r(ewt,"FlaxBartForQuestionAnswering"),ewt.forEach(t),Tkr=r(SBe," (BART model)"),SBe.forEach(t),Mkr=i(Ie),$w=n(Ie,"LI",{});var RBe=s($w);Q4e=n(RBe,"STRONG",{});var owt=s(Q4e);Ekr=r(owt,"bert"),owt.forEach(t),Ckr=r(RBe," \u2014 "),oY=n(RBe,"A",{href:!0});var rwt=s(oY);wkr=r(rwt,"FlaxBertForQuestionAnswering"),rwt.forEach(t),Akr=r(RBe," (BERT model)"),RBe.forEach(t),ykr=i(Ie),kw=n(Ie,"LI",{});var BBe=s(kw);W4e=n(BBe,"STRONG",{});var twt=s(W4e);Lkr=r(twt,"big_bird"),twt.forEach(t),xkr=r(BBe," \u2014 "),rY=n(BBe,"A",{href:!0});var awt=s(rY);$kr=r(awt,"FlaxBigBirdForQuestionAnswering"),awt.forEach(t),kkr=r(BBe," (BigBird model)"),BBe.forEach(t),Skr=i(Ie),Sw=n(Ie,"LI",{});var PBe=s(Sw);H4e=n(PBe,"STRONG",{});var nwt=s(H4e);Rkr=r(nwt,"distilbert"),nwt.forEach(t),Bkr=r(PBe," \u2014 "),tY=n(PBe,"A",{href:!0});var swt=s(tY);Pkr=r(swt,"FlaxDistilBertForQuestionAnswering"),swt.forEach(t),Ikr=r(PBe," (DistilBERT model)"),PBe.forEach(t),qkr=i(Ie),Rw=n(Ie,"LI",{});var IBe=s(Rw);U4e=n(IBe,"STRONG",{});var lwt=s(U4e);Nkr=r(lwt,"electra"),lwt.forEach(t),jkr=r(IBe," \u2014 "),aY=n(IBe,"A",{href:!0});var iwt=s(aY);Dkr=r(iwt,"FlaxElectraForQuestionAnswering"),iwt.forEach(t),Gkr=r(IBe," (ELECTRA model)"),IBe.forEach(t),Okr=i(Ie),Bw=n(Ie,"LI",{});var qBe=s(Bw);J4e=n(qBe,"STRONG",{});var dwt=s(J4e);Vkr=r(dwt,"mbart"),dwt.forEach(t),Xkr=r(qBe," \u2014 "),nY=n(qBe,"A",{href:!0});var cwt=s(nY);zkr=r(cwt,"FlaxMBartForQuestionAnswering"),cwt.forEach(t),Qkr=r(qBe," (mBART model)"),qBe.forEach(t),Wkr=i(Ie),Pw=n(Ie,"LI",{});var NBe=s(Pw);Y4e=n(NBe,"STRONG",{});var mwt=s(Y4e);Hkr=r(mwt,"roberta"),mwt.forEach(t),Ukr=r(NBe," \u2014 "),sY=n(NBe,"A",{href:!0});var fwt=s(sY);Jkr=r(fwt,"FlaxRobertaForQuestionAnswering"),fwt.forEach(t),Ykr=r(NBe," (RoBERTa model)"),NBe.forEach(t),Kkr=i(Ie),Iw=n(Ie,"LI",{});var jBe=s(Iw);K4e=n(jBe,"STRONG",{});var gwt=s(K4e);Zkr=r(gwt,"roformer"),gwt.forEach(t),eSr=r(jBe," \u2014 "),lY=n(jBe,"A",{href:!0});var hwt=s(lY);oSr=r(hwt,"FlaxRoFormerForQuestionAnswering"),hwt.forEach(t),rSr=r(jBe," (RoFormer model)"),jBe.forEach(t),tSr=i(Ie),qw=n(Ie,"LI",{});var DBe=s(qw);Z4e=n(DBe,"STRONG",{});var uwt=s(Z4e);aSr=r(uwt,"xlm-roberta"),uwt.forEach(t),nSr=r(DBe," \u2014 "),iY=n(DBe,"A",{href:!0});var pwt=s(iY);sSr=r(pwt,"FlaxXLMRobertaForQuestionAnswering"),pwt.forEach(t),lSr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),Ie.forEach(t),iSr=i(Jl),T(Nw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),eqe=i(m),Wc=n(m,"H2",{class:!0});var lje=s(Wc);jw=n(lje,"A",{id:!0,class:!0,href:!0});var _wt=s(jw);eEe=n(_wt,"SPAN",{});var bwt=s(eEe);T(T7.$$.fragment,bwt),bwt.forEach(t),_wt.forEach(t),dSr=i(lje),oEe=n(lje,"SPAN",{});var Fwt=s(oEe);cSr=r(Fwt,"FlaxAutoModelForTokenClassification"),Fwt.forEach(t),lje.forEach(t),oqe=i(m),br=n(m,"DIV",{class:!0});var Yl=s(br);T(M7.$$.fragment,Yl),mSr=i(Yl),Hc=n(Yl,"P",{});var yZ=s(Hc);fSr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=n(yZ,"A",{href:!0});var vwt=s(dY);gSr=r(vwt,"from_pretrained()"),vwt.forEach(t),hSr=r(yZ," class method or the "),cY=n(yZ,"A",{href:!0});var Twt=s(cY);uSr=r(Twt,"from_config()"),Twt.forEach(t),pSr=r(yZ,` class
method.`),yZ.forEach(t),_Sr=i(Yl),E7=n(Yl,"P",{});var ije=s(E7);bSr=r(ije,"This class cannot be instantiated directly using "),rEe=n(ije,"CODE",{});var Mwt=s(rEe);FSr=r(Mwt,"__init__()"),Mwt.forEach(t),vSr=r(ije," (throws an error)."),ije.forEach(t),TSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var L6=s(Qt);T(C7.$$.fragment,L6),MSr=i(L6),tEe=n(L6,"P",{});var Ewt=s(tEe);ESr=r(Ewt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ewt.forEach(t),CSr=i(L6),Uc=n(L6,"P",{});var LZ=s(Uc);wSr=r(LZ,`Note:
Loading a model from its configuration file does `),aEe=n(LZ,"STRONG",{});var Cwt=s(aEe);ASr=r(Cwt,"not"),Cwt.forEach(t),ySr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(LZ,"A",{href:!0});var wwt=s(mY);LSr=r(wwt,"from_pretrained()"),wwt.forEach(t),xSr=r(LZ," to load the model weights."),LZ.forEach(t),$Sr=i(L6),T(Dw.$$.fragment,L6),L6.forEach(t),kSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(w7.$$.fragment,Kl),SSr=i(Kl),nEe=n(Kl,"P",{});var Awt=s(nEe);RSr=r(Awt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Awt.forEach(t),BSr=i(Kl),vn=n(Kl,"P",{});var x6=s(vn);PSr=r(x6,"The model class to instantiate is selected based on the "),sEe=n(x6,"CODE",{});var ywt=s(sEe);ISr=r(ywt,"model_type"),ywt.forEach(t),qSr=r(x6,` property of the config object (either
passed as an argument or loaded from `),lEe=n(x6,"CODE",{});var Lwt=s(lEe);NSr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),jSr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(x6,"CODE",{});var xwt=s(iEe);DSr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),GSr=r(x6,":"),x6.forEach(t),OSr=i(Kl),De=n(Kl,"UL",{});var vo=s(De);Gw=n(vo,"LI",{});var GBe=s(Gw);dEe=n(GBe,"STRONG",{});var $wt=s(dEe);VSr=r($wt,"albert"),$wt.forEach(t),XSr=r(GBe," \u2014 "),fY=n(GBe,"A",{href:!0});var kwt=s(fY);zSr=r(kwt,"FlaxAlbertForTokenClassification"),kwt.forEach(t),QSr=r(GBe," (ALBERT model)"),GBe.forEach(t),WSr=i(vo),Ow=n(vo,"LI",{});var OBe=s(Ow);cEe=n(OBe,"STRONG",{});var Swt=s(cEe);HSr=r(Swt,"bert"),Swt.forEach(t),USr=r(OBe," \u2014 "),gY=n(OBe,"A",{href:!0});var Rwt=s(gY);JSr=r(Rwt,"FlaxBertForTokenClassification"),Rwt.forEach(t),YSr=r(OBe," (BERT model)"),OBe.forEach(t),KSr=i(vo),Vw=n(vo,"LI",{});var VBe=s(Vw);mEe=n(VBe,"STRONG",{});var Bwt=s(mEe);ZSr=r(Bwt,"big_bird"),Bwt.forEach(t),eRr=r(VBe," \u2014 "),hY=n(VBe,"A",{href:!0});var Pwt=s(hY);oRr=r(Pwt,"FlaxBigBirdForTokenClassification"),Pwt.forEach(t),rRr=r(VBe," (BigBird model)"),VBe.forEach(t),tRr=i(vo),Xw=n(vo,"LI",{});var XBe=s(Xw);fEe=n(XBe,"STRONG",{});var Iwt=s(fEe);aRr=r(Iwt,"distilbert"),Iwt.forEach(t),nRr=r(XBe," \u2014 "),uY=n(XBe,"A",{href:!0});var qwt=s(uY);sRr=r(qwt,"FlaxDistilBertForTokenClassification"),qwt.forEach(t),lRr=r(XBe," (DistilBERT model)"),XBe.forEach(t),iRr=i(vo),zw=n(vo,"LI",{});var zBe=s(zw);gEe=n(zBe,"STRONG",{});var Nwt=s(gEe);dRr=r(Nwt,"electra"),Nwt.forEach(t),cRr=r(zBe," \u2014 "),pY=n(zBe,"A",{href:!0});var jwt=s(pY);mRr=r(jwt,"FlaxElectraForTokenClassification"),jwt.forEach(t),fRr=r(zBe," (ELECTRA model)"),zBe.forEach(t),gRr=i(vo),Qw=n(vo,"LI",{});var QBe=s(Qw);hEe=n(QBe,"STRONG",{});var Dwt=s(hEe);hRr=r(Dwt,"roberta"),Dwt.forEach(t),uRr=r(QBe," \u2014 "),_Y=n(QBe,"A",{href:!0});var Gwt=s(_Y);pRr=r(Gwt,"FlaxRobertaForTokenClassification"),Gwt.forEach(t),_Rr=r(QBe," (RoBERTa model)"),QBe.forEach(t),bRr=i(vo),Ww=n(vo,"LI",{});var WBe=s(Ww);uEe=n(WBe,"STRONG",{});var Owt=s(uEe);FRr=r(Owt,"roformer"),Owt.forEach(t),vRr=r(WBe," \u2014 "),bY=n(WBe,"A",{href:!0});var Vwt=s(bY);TRr=r(Vwt,"FlaxRoFormerForTokenClassification"),Vwt.forEach(t),MRr=r(WBe," (RoFormer model)"),WBe.forEach(t),ERr=i(vo),Hw=n(vo,"LI",{});var HBe=s(Hw);pEe=n(HBe,"STRONG",{});var Xwt=s(pEe);CRr=r(Xwt,"xlm-roberta"),Xwt.forEach(t),wRr=r(HBe," \u2014 "),FY=n(HBe,"A",{href:!0});var zwt=s(FY);ARr=r(zwt,"FlaxXLMRobertaForTokenClassification"),zwt.forEach(t),yRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),vo.forEach(t),LRr=i(Kl),T(Uw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),rqe=i(m),Jc=n(m,"H2",{class:!0});var dje=s(Jc);Jw=n(dje,"A",{id:!0,class:!0,href:!0});var Qwt=s(Jw);_Ee=n(Qwt,"SPAN",{});var Wwt=s(_Ee);T(A7.$$.fragment,Wwt),Wwt.forEach(t),Qwt.forEach(t),xRr=i(dje),bEe=n(dje,"SPAN",{});var Hwt=s(bEe);$Rr=r(Hwt,"FlaxAutoModelForMultipleChoice"),Hwt.forEach(t),dje.forEach(t),tqe=i(m),Fr=n(m,"DIV",{class:!0});var Zl=s(Fr);T(y7.$$.fragment,Zl),kRr=i(Zl),Yc=n(Zl,"P",{});var xZ=s(Yc);SRr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vY=n(xZ,"A",{href:!0});var Uwt=s(vY);RRr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),BRr=r(xZ," class method or the "),TY=n(xZ,"A",{href:!0});var Jwt=s(TY);PRr=r(Jwt,"from_config()"),Jwt.forEach(t),IRr=r(xZ,` class
method.`),xZ.forEach(t),qRr=i(Zl),L7=n(Zl,"P",{});var cje=s(L7);NRr=r(cje,"This class cannot be instantiated directly using "),FEe=n(cje,"CODE",{});var Ywt=s(FEe);jRr=r(Ywt,"__init__()"),Ywt.forEach(t),DRr=r(cje," (throws an error)."),cje.forEach(t),GRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var $6=s(Wt);T(x7.$$.fragment,$6),ORr=i($6),vEe=n($6,"P",{});var Kwt=s(vEe);VRr=r(Kwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kwt.forEach(t),XRr=i($6),Kc=n($6,"P",{});var $Z=s(Kc);zRr=r($Z,`Note:
Loading a model from its configuration file does `),TEe=n($Z,"STRONG",{});var Zwt=s(TEe);QRr=r(Zwt,"not"),Zwt.forEach(t),WRr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n($Z,"A",{href:!0});var eAt=s(MY);HRr=r(eAt,"from_pretrained()"),eAt.forEach(t),URr=r($Z," to load the model weights."),$Z.forEach(t),JRr=i($6),T(Yw.$$.fragment,$6),$6.forEach(t),YRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T($7.$$.fragment,ei),KRr=i(ei),MEe=n(ei,"P",{});var oAt=s(MEe);ZRr=r(oAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oAt.forEach(t),eBr=i(ei),Tn=n(ei,"P",{});var k6=s(Tn);oBr=r(k6,"The model class to instantiate is selected based on the "),EEe=n(k6,"CODE",{});var rAt=s(EEe);rBr=r(rAt,"model_type"),rAt.forEach(t),tBr=r(k6,` property of the config object (either
passed as an argument or loaded from `),CEe=n(k6,"CODE",{});var tAt=s(CEe);aBr=r(tAt,"pretrained_model_name_or_path"),tAt.forEach(t),nBr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(k6,"CODE",{});var aAt=s(wEe);sBr=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),lBr=r(k6,":"),k6.forEach(t),iBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);Kw=n(To,"LI",{});var UBe=s(Kw);AEe=n(UBe,"STRONG",{});var nAt=s(AEe);dBr=r(nAt,"albert"),nAt.forEach(t),cBr=r(UBe," \u2014 "),EY=n(UBe,"A",{href:!0});var sAt=s(EY);mBr=r(sAt,"FlaxAlbertForMultipleChoice"),sAt.forEach(t),fBr=r(UBe," (ALBERT model)"),UBe.forEach(t),gBr=i(To),Zw=n(To,"LI",{});var JBe=s(Zw);yEe=n(JBe,"STRONG",{});var lAt=s(yEe);hBr=r(lAt,"bert"),lAt.forEach(t),uBr=r(JBe," \u2014 "),CY=n(JBe,"A",{href:!0});var iAt=s(CY);pBr=r(iAt,"FlaxBertForMultipleChoice"),iAt.forEach(t),_Br=r(JBe," (BERT model)"),JBe.forEach(t),bBr=i(To),eA=n(To,"LI",{});var YBe=s(eA);LEe=n(YBe,"STRONG",{});var dAt=s(LEe);FBr=r(dAt,"big_bird"),dAt.forEach(t),vBr=r(YBe," \u2014 "),wY=n(YBe,"A",{href:!0});var cAt=s(wY);TBr=r(cAt,"FlaxBigBirdForMultipleChoice"),cAt.forEach(t),MBr=r(YBe," (BigBird model)"),YBe.forEach(t),EBr=i(To),oA=n(To,"LI",{});var KBe=s(oA);xEe=n(KBe,"STRONG",{});var mAt=s(xEe);CBr=r(mAt,"distilbert"),mAt.forEach(t),wBr=r(KBe," \u2014 "),AY=n(KBe,"A",{href:!0});var fAt=s(AY);ABr=r(fAt,"FlaxDistilBertForMultipleChoice"),fAt.forEach(t),yBr=r(KBe," (DistilBERT model)"),KBe.forEach(t),LBr=i(To),rA=n(To,"LI",{});var ZBe=s(rA);$Ee=n(ZBe,"STRONG",{});var gAt=s($Ee);xBr=r(gAt,"electra"),gAt.forEach(t),$Br=r(ZBe," \u2014 "),yY=n(ZBe,"A",{href:!0});var hAt=s(yY);kBr=r(hAt,"FlaxElectraForMultipleChoice"),hAt.forEach(t),SBr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),RBr=i(To),tA=n(To,"LI",{});var ePe=s(tA);kEe=n(ePe,"STRONG",{});var uAt=s(kEe);BBr=r(uAt,"roberta"),uAt.forEach(t),PBr=r(ePe," \u2014 "),LY=n(ePe,"A",{href:!0});var pAt=s(LY);IBr=r(pAt,"FlaxRobertaForMultipleChoice"),pAt.forEach(t),qBr=r(ePe," (RoBERTa model)"),ePe.forEach(t),NBr=i(To),aA=n(To,"LI",{});var oPe=s(aA);SEe=n(oPe,"STRONG",{});var _At=s(SEe);jBr=r(_At,"roformer"),_At.forEach(t),DBr=r(oPe," \u2014 "),xY=n(oPe,"A",{href:!0});var bAt=s(xY);GBr=r(bAt,"FlaxRoFormerForMultipleChoice"),bAt.forEach(t),OBr=r(oPe," (RoFormer model)"),oPe.forEach(t),VBr=i(To),nA=n(To,"LI",{});var rPe=s(nA);REe=n(rPe,"STRONG",{});var FAt=s(REe);XBr=r(FAt,"xlm-roberta"),FAt.forEach(t),zBr=r(rPe," \u2014 "),$Y=n(rPe,"A",{href:!0});var vAt=s($Y);QBr=r(vAt,"FlaxXLMRobertaForMultipleChoice"),vAt.forEach(t),WBr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),To.forEach(t),HBr=i(ei),T(sA.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),aqe=i(m),Zc=n(m,"H2",{class:!0});var mje=s(Zc);lA=n(mje,"A",{id:!0,class:!0,href:!0});var TAt=s(lA);BEe=n(TAt,"SPAN",{});var MAt=s(BEe);T(k7.$$.fragment,MAt),MAt.forEach(t),TAt.forEach(t),UBr=i(mje),PEe=n(mje,"SPAN",{});var EAt=s(PEe);JBr=r(EAt,"FlaxAutoModelForNextSentencePrediction"),EAt.forEach(t),mje.forEach(t),nqe=i(m),vr=n(m,"DIV",{class:!0});var oi=s(vr);T(S7.$$.fragment,oi),YBr=i(oi),em=n(oi,"P",{});var kZ=s(em);KBr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=n(kZ,"A",{href:!0});var CAt=s(kY);ZBr=r(CAt,"from_pretrained()"),CAt.forEach(t),ePr=r(kZ," class method or the "),SY=n(kZ,"A",{href:!0});var wAt=s(SY);oPr=r(wAt,"from_config()"),wAt.forEach(t),rPr=r(kZ,` class
method.`),kZ.forEach(t),tPr=i(oi),R7=n(oi,"P",{});var fje=s(R7);aPr=r(fje,"This class cannot be instantiated directly using "),IEe=n(fje,"CODE",{});var AAt=s(IEe);nPr=r(AAt,"__init__()"),AAt.forEach(t),sPr=r(fje," (throws an error)."),fje.forEach(t),lPr=i(oi),Ht=n(oi,"DIV",{class:!0});var S6=s(Ht);T(B7.$$.fragment,S6),iPr=i(S6),qEe=n(S6,"P",{});var yAt=s(qEe);dPr=r(yAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yAt.forEach(t),cPr=i(S6),om=n(S6,"P",{});var SZ=s(om);mPr=r(SZ,`Note:
Loading a model from its configuration file does `),NEe=n(SZ,"STRONG",{});var LAt=s(NEe);fPr=r(LAt,"not"),LAt.forEach(t),gPr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(SZ,"A",{href:!0});var xAt=s(RY);hPr=r(xAt,"from_pretrained()"),xAt.forEach(t),uPr=r(SZ," to load the model weights."),SZ.forEach(t),pPr=i(S6),T(iA.$$.fragment,S6),S6.forEach(t),_Pr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(P7.$$.fragment,ri),bPr=i(ri),jEe=n(ri,"P",{});var $At=s(jEe);FPr=r($At,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$At.forEach(t),vPr=i(ri),Mn=n(ri,"P",{});var R6=s(Mn);TPr=r(R6,"The model class to instantiate is selected based on the "),DEe=n(R6,"CODE",{});var kAt=s(DEe);MPr=r(kAt,"model_type"),kAt.forEach(t),EPr=r(R6,` property of the config object (either
passed as an argument or loaded from `),GEe=n(R6,"CODE",{});var SAt=s(GEe);CPr=r(SAt,"pretrained_model_name_or_path"),SAt.forEach(t),wPr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(R6,"CODE",{});var RAt=s(OEe);APr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),yPr=r(R6,":"),R6.forEach(t),LPr=i(ri),VEe=n(ri,"UL",{});var BAt=s(VEe);dA=n(BAt,"LI",{});var tPe=s(dA);XEe=n(tPe,"STRONG",{});var PAt=s(XEe);xPr=r(PAt,"bert"),PAt.forEach(t),$Pr=r(tPe," \u2014 "),BY=n(tPe,"A",{href:!0});var IAt=s(BY);kPr=r(IAt,"FlaxBertForNextSentencePrediction"),IAt.forEach(t),SPr=r(tPe," (BERT model)"),tPe.forEach(t),BAt.forEach(t),RPr=i(ri),T(cA.$$.fragment,ri),ri.forEach(t),oi.forEach(t),sqe=i(m),rm=n(m,"H2",{class:!0});var gje=s(rm);mA=n(gje,"A",{id:!0,class:!0,href:!0});var qAt=s(mA);zEe=n(qAt,"SPAN",{});var NAt=s(zEe);T(I7.$$.fragment,NAt),NAt.forEach(t),qAt.forEach(t),BPr=i(gje),QEe=n(gje,"SPAN",{});var jAt=s(QEe);PPr=r(jAt,"FlaxAutoModelForImageClassification"),jAt.forEach(t),gje.forEach(t),lqe=i(m),Tr=n(m,"DIV",{class:!0});var ti=s(Tr);T(q7.$$.fragment,ti),IPr=i(ti),tm=n(ti,"P",{});var RZ=s(tm);qPr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=n(RZ,"A",{href:!0});var DAt=s(PY);NPr=r(DAt,"from_pretrained()"),DAt.forEach(t),jPr=r(RZ," class method or the "),IY=n(RZ,"A",{href:!0});var GAt=s(IY);DPr=r(GAt,"from_config()"),GAt.forEach(t),GPr=r(RZ,` class
method.`),RZ.forEach(t),OPr=i(ti),N7=n(ti,"P",{});var hje=s(N7);VPr=r(hje,"This class cannot be instantiated directly using "),WEe=n(hje,"CODE",{});var OAt=s(WEe);XPr=r(OAt,"__init__()"),OAt.forEach(t),zPr=r(hje," (throws an error)."),hje.forEach(t),QPr=i(ti),Ut=n(ti,"DIV",{class:!0});var B6=s(Ut);T(j7.$$.fragment,B6),WPr=i(B6),HEe=n(B6,"P",{});var VAt=s(HEe);HPr=r(VAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VAt.forEach(t),UPr=i(B6),am=n(B6,"P",{});var BZ=s(am);JPr=r(BZ,`Note:
Loading a model from its configuration file does `),UEe=n(BZ,"STRONG",{});var XAt=s(UEe);YPr=r(XAt,"not"),XAt.forEach(t),KPr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(BZ,"A",{href:!0});var zAt=s(qY);ZPr=r(zAt,"from_pretrained()"),zAt.forEach(t),eIr=r(BZ," to load the model weights."),BZ.forEach(t),oIr=i(B6),T(fA.$$.fragment,B6),B6.forEach(t),rIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(D7.$$.fragment,ai),tIr=i(ai),JEe=n(ai,"P",{});var QAt=s(JEe);aIr=r(QAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QAt.forEach(t),nIr=i(ai),En=n(ai,"P",{});var P6=s(En);sIr=r(P6,"The model class to instantiate is selected based on the "),YEe=n(P6,"CODE",{});var WAt=s(YEe);lIr=r(WAt,"model_type"),WAt.forEach(t),iIr=r(P6,` property of the config object (either
passed as an argument or loaded from `),KEe=n(P6,"CODE",{});var HAt=s(KEe);dIr=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),cIr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=n(P6,"CODE",{});var UAt=s(ZEe);mIr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),fIr=r(P6,":"),P6.forEach(t),gIr=i(ai),G7=n(ai,"UL",{});var uje=s(G7);gA=n(uje,"LI",{});var aPe=s(gA);e5e=n(aPe,"STRONG",{});var JAt=s(e5e);hIr=r(JAt,"beit"),JAt.forEach(t),uIr=r(aPe," \u2014 "),NY=n(aPe,"A",{href:!0});var YAt=s(NY);pIr=r(YAt,"FlaxBeitForImageClassification"),YAt.forEach(t),_Ir=r(aPe," (BEiT model)"),aPe.forEach(t),bIr=i(uje),hA=n(uje,"LI",{});var nPe=s(hA);o5e=n(nPe,"STRONG",{});var KAt=s(o5e);FIr=r(KAt,"vit"),KAt.forEach(t),vIr=r(nPe," \u2014 "),jY=n(nPe,"A",{href:!0});var ZAt=s(jY);TIr=r(ZAt,"FlaxViTForImageClassification"),ZAt.forEach(t),MIr=r(nPe," (ViT model)"),nPe.forEach(t),uje.forEach(t),EIr=i(ai),T(uA.$$.fragment,ai),ai.forEach(t),ti.forEach(t),iqe=i(m),nm=n(m,"H2",{class:!0});var pje=s(nm);pA=n(pje,"A",{id:!0,class:!0,href:!0});var e0t=s(pA);r5e=n(e0t,"SPAN",{});var o0t=s(r5e);T(O7.$$.fragment,o0t),o0t.forEach(t),e0t.forEach(t),CIr=i(pje),t5e=n(pje,"SPAN",{});var r0t=s(t5e);wIr=r(r0t,"FlaxAutoModelForVision2Seq"),r0t.forEach(t),pje.forEach(t),dqe=i(m),Mr=n(m,"DIV",{class:!0});var ni=s(Mr);T(V7.$$.fragment,ni),AIr=i(ni),sm=n(ni,"P",{});var PZ=s(sm);yIr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=n(PZ,"A",{href:!0});var t0t=s(DY);LIr=r(t0t,"from_pretrained()"),t0t.forEach(t),xIr=r(PZ," class method or the "),GY=n(PZ,"A",{href:!0});var a0t=s(GY);$Ir=r(a0t,"from_config()"),a0t.forEach(t),kIr=r(PZ,` class
method.`),PZ.forEach(t),SIr=i(ni),X7=n(ni,"P",{});var _je=s(X7);RIr=r(_je,"This class cannot be instantiated directly using "),a5e=n(_je,"CODE",{});var n0t=s(a5e);BIr=r(n0t,"__init__()"),n0t.forEach(t),PIr=r(_je," (throws an error)."),_je.forEach(t),IIr=i(ni),Jt=n(ni,"DIV",{class:!0});var I6=s(Jt);T(z7.$$.fragment,I6),qIr=i(I6),n5e=n(I6,"P",{});var s0t=s(n5e);NIr=r(s0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s0t.forEach(t),jIr=i(I6),lm=n(I6,"P",{});var IZ=s(lm);DIr=r(IZ,`Note:
Loading a model from its configuration file does `),s5e=n(IZ,"STRONG",{});var l0t=s(s5e);GIr=r(l0t,"not"),l0t.forEach(t),OIr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(IZ,"A",{href:!0});var i0t=s(OY);VIr=r(i0t,"from_pretrained()"),i0t.forEach(t),XIr=r(IZ," to load the model weights."),IZ.forEach(t),zIr=i(I6),T(_A.$$.fragment,I6),I6.forEach(t),QIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Q7.$$.fragment,si),WIr=i(si),l5e=n(si,"P",{});var d0t=s(l5e);HIr=r(d0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d0t.forEach(t),UIr=i(si),Cn=n(si,"P",{});var q6=s(Cn);JIr=r(q6,"The model class to instantiate is selected based on the "),i5e=n(q6,"CODE",{});var c0t=s(i5e);YIr=r(c0t,"model_type"),c0t.forEach(t),KIr=r(q6,` property of the config object (either
passed as an argument or loaded from `),d5e=n(q6,"CODE",{});var m0t=s(d5e);ZIr=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),eqr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c5e=n(q6,"CODE",{});var f0t=s(c5e);oqr=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),rqr=r(q6,":"),q6.forEach(t),tqr=i(si),m5e=n(si,"UL",{});var g0t=s(m5e);bA=n(g0t,"LI",{});var sPe=s(bA);f5e=n(sPe,"STRONG",{});var h0t=s(f5e);aqr=r(h0t,"vision-encoder-decoder"),h0t.forEach(t),nqr=r(sPe," \u2014 "),VY=n(sPe,"A",{href:!0});var u0t=s(VY);sqr=r(u0t,"FlaxVisionEncoderDecoderModel"),u0t.forEach(t),lqr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),g0t.forEach(t),iqr=i(si),T(FA.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Fyt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(An,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(um,"id","extending-the-auto-classes"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(_m,"id","transformers.AutoConfig"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(m$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(f$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(g$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(h$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(u$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(p$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(_$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(b$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(F$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(v$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(T$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(M$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(E$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(C$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(w$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(A$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(y$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(L$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(x$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c($$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(k$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(S$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(Q$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Z$,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(ak,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(mk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c($k,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Bk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(Nk,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Kk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"id","transformers.AutoTokenizer"),c(pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(lS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(dS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(mS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(fS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(uS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(pS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(_S,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(FS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ES,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yS,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($S,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(SS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(IS,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(KS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(uR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_R,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(jB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(DB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(eP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(tP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(aP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(cP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(fP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(hP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(_P,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(bP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(FP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(MP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(EP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(wP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yP,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(xP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c($P,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(kP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(SP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(BP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(PP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(IP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(qP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(NP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(jP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(DP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(GP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(OP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(VP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(XP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(WP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(UP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(JP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(YP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(KP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ZP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(eI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(oI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(rI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(tI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(aI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(nI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(lI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(iI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(cI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(fI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(uI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(pI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(_I,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(bI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(FI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(vI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(TI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(MI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(EI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(CI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(wI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(AI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(yI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(LI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(xI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c($I,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(kI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(SI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(RI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(BI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(PI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(II,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(qI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(NI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(jI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(DI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(GI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(OI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(VI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(XI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(zI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(QI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(WI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(HI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(UI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(JI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(YI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(KI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(eq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(oq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(rq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(tq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(aq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(nq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(sq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(lq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(iq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(dq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(cq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(mq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(fq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(hq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(uq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModelForPreTraining"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(pq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(vq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Mq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Eq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Cq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Aq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Lq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c($q,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Sq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Bq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Iq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Dq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Gq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Qq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Wq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Hq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Jq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Yq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Kq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F_,"id","transformers.AutoModelForCausalLM"),c(F_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(aN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(iN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(dN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(cN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(mN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(gN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(hN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(uN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(pN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(_N,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(vN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(TN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(MN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(EN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(CN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(yN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($N,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(BN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(IN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(qN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ab,"id","transformers.AutoModelForMaskedLM"),c(ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ab,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(ON,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(QN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(UN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(aj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(nj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_j,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForSeq2SeqLM"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($j,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Sj,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Bj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Pj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Ij,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(qj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(jj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Dj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Oj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Vj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c2,"id","transformers.AutoModelForSequenceClassification"),c(c2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c2,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(zj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Uj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Jj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Yj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Kj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Zj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(mD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(uD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_D,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(FD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ED,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(yD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForMultipleChoice"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(GD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(zD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(WD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(UD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(JD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(YD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(KD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ZD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(eG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(oG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(rG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(tG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(aG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(nG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(sG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(lG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(iG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(fG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForNextSentencePrediction"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForTokenClassification"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(yG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForQuestionAnswering"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(gO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(hO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(uO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(pO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(_O,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(bO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(FO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(vO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(TO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(MO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(EO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(CO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(wO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(AO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(yO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(LO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(xO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c($O,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(SO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(RO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(BO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(PO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(IO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(qO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(jO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(DO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(VO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(XO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(WO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForTableQuestionAnswering"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(YO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForImageClassification"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(oV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(fV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForVision2Seq"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q1,"id","transformers.AutoModelForAudioClassification"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(CV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($V,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForAudioFrameClassification"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForCTC"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForCTC"),c(fd,"class","relative group"),c(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(QV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(WV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(HV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(UV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(JV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(YV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(KV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForAudioXVector"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForMaskedImageModeling"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(pX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForObjectDetection"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(_X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(TX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForImageSegmentation"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForSemanticSegmentation"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(AX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($X,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kX,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(SX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.AutoModelForInstanceSegmentation"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModel"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(qX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(GX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(OX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(VX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(XX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(QX,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(WX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(HX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(UX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(JX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(YX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(KX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ZX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(ez,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(rz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(az,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(sz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(lz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(iz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(cz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(mz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(fz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(gz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(hz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(pz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(_z,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(bz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Fz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(vz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Tz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Cz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(wz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Az,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(yz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c($z,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForPreTraining"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Iz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Nz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Gz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Oz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Xz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Qz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Wz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Hz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Kz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(oQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.TFAutoModelForCausalLM"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(aQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(iQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForImageClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForMaskedLM"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(wQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(IQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(ZQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(eW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(oW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(rW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(tW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(aW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(nW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(sW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForSequenceClassification"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.TFAutoModelForMultipleChoice"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(DW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(GW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(OW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(VW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(XW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(WW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(UW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(sH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(mc,"class","relative group"),c(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForTokenClassification"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c($H,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.TFAutoModelForQuestionAnswering"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(jH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(DH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(VH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(XH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(zH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(WH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(HH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(UH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(JH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(YH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(KH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ZH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(eU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(oU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(rU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForVision2Seq"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForVision2Seq"),c(vc,"class","relative group"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.FlaxAutoModel"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(pU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(_U,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(bU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(FU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(vU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(TU,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(CU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yU,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(LU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c($U,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(SU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(RU,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(BU,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(IU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForCausalLM"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(VU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(XU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(QU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(HU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(UU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JU,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y3,"id","transformers.FlaxAutoModelForPreTraining"),c(y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(mJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForMaskedLM"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(pJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_J,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($J,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(QJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(WJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForTokenClassification"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(LY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Y,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mA,"id","transformers.FlaxAutoModelForImageClassification"),c(mA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mA,"href","#transformers.FlaxAutoModelForImageClassification"),c(rm,"class","relative group"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForVision2Seq"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nm,"class","relative group"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,F,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,li),b(m,mm,_),b(m,et,_),e(et,ii),e(et,di),e(di,N6),e(et,fm),b(m,qe,_),b(m,Xe,_),e(Xe,ci),e(Xe,An),e(An,j6),e(Xe,yn),e(Xe,Ln),e(Ln,D6),e(Xe,mi),e(Xe,xn),e(xn,G6),e(Xe,fi),b(m,gm,_),M(Ma,m,_),b(m,ze,_),b(m,Ae,_),e(Ae,n$),e(Ae,gi),e(gi,s$),e(Ae,l$),b(m,Eo,_),b(m,Ea,_),e(Ea,i$),e(Ea,hm),e(hm,d$),e(Ea,bje),b(m,lPe,_),b(m,hi,_),e(hi,um),e(um,qZ),M(O6,qZ,null),e(hi,Fje),e(hi,NZ),e(NZ,vje),b(m,iPe,_),b(m,$n,_),e($n,Tje),e($n,jZ),e(jZ,Mje),e($n,Eje),e($n,DZ),e(DZ,Cje),e($n,wje),b(m,dPe,_),M(V6,m,_),b(m,cPe,_),b(m,c$,_),e(c$,Aje),b(m,mPe,_),M(pm,m,_),b(m,fPe,_),b(m,ui,_),e(ui,_m),e(_m,GZ),M(X6,GZ,null),e(ui,yje),e(ui,OZ),e(OZ,Lje),b(m,gPe,_),b(m,Co,_),M(z6,Co,null),e(Co,xje),e(Co,Q6),e(Q6,$je),e(Q6,m$),e(m$,kje),e(Q6,Sje),e(Co,Rje),e(Co,W6),e(W6,Bje),e(W6,VZ),e(VZ,Pje),e(W6,Ije),e(Co,qje),e(Co,Er),M(H6,Er,null),e(Er,Nje),e(Er,XZ),e(XZ,jje),e(Er,Dje),e(Er,pi),e(pi,Gje),e(pi,zZ),e(zZ,Oje),e(pi,Vje),e(pi,QZ),e(QZ,Xje),e(pi,zje),e(Er,Qje),e(Er,y),e(y,bm),e(bm,WZ),e(WZ,Wje),e(bm,Hje),e(bm,f$),e(f$,Uje),e(bm,Jje),e(y,Yje),e(y,Fm),e(Fm,HZ),e(HZ,Kje),e(Fm,Zje),e(Fm,g$),e(g$,eDe),e(Fm,oDe),e(y,rDe),e(y,vm),e(vm,UZ),e(UZ,tDe),e(vm,aDe),e(vm,h$),e(h$,nDe),e(vm,sDe),e(y,lDe),e(y,Tm),e(Tm,JZ),e(JZ,iDe),e(Tm,dDe),e(Tm,u$),e(u$,cDe),e(Tm,mDe),e(y,fDe),e(y,Mm),e(Mm,YZ),e(YZ,gDe),e(Mm,hDe),e(Mm,p$),e(p$,uDe),e(Mm,pDe),e(y,_De),e(y,Em),e(Em,KZ),e(KZ,bDe),e(Em,FDe),e(Em,_$),e(_$,vDe),e(Em,TDe),e(y,MDe),e(y,Cm),e(Cm,ZZ),e(ZZ,EDe),e(Cm,CDe),e(Cm,b$),e(b$,wDe),e(Cm,ADe),e(y,yDe),e(y,wm),e(wm,eee),e(eee,LDe),e(wm,xDe),e(wm,F$),e(F$,$De),e(wm,kDe),e(y,SDe),e(y,Am),e(Am,oee),e(oee,RDe),e(Am,BDe),e(Am,v$),e(v$,PDe),e(Am,IDe),e(y,qDe),e(y,ym),e(ym,ree),e(ree,NDe),e(ym,jDe),e(ym,T$),e(T$,DDe),e(ym,GDe),e(y,ODe),e(y,Lm),e(Lm,tee),e(tee,VDe),e(Lm,XDe),e(Lm,M$),e(M$,zDe),e(Lm,QDe),e(y,WDe),e(y,xm),e(xm,aee),e(aee,HDe),e(xm,UDe),e(xm,E$),e(E$,JDe),e(xm,YDe),e(y,KDe),e(y,$m),e($m,nee),e(nee,ZDe),e($m,eGe),e($m,C$),e(C$,oGe),e($m,rGe),e(y,tGe),e(y,km),e(km,see),e(see,aGe),e(km,nGe),e(km,w$),e(w$,sGe),e(km,lGe),e(y,iGe),e(y,Sm),e(Sm,lee),e(lee,dGe),e(Sm,cGe),e(Sm,A$),e(A$,mGe),e(Sm,fGe),e(y,gGe),e(y,Rm),e(Rm,iee),e(iee,hGe),e(Rm,uGe),e(Rm,y$),e(y$,pGe),e(Rm,_Ge),e(y,bGe),e(y,Bm),e(Bm,dee),e(dee,FGe),e(Bm,vGe),e(Bm,L$),e(L$,TGe),e(Bm,MGe),e(y,EGe),e(y,Pm),e(Pm,cee),e(cee,CGe),e(Pm,wGe),e(Pm,x$),e(x$,AGe),e(Pm,yGe),e(y,LGe),e(y,Im),e(Im,mee),e(mee,xGe),e(Im,$Ge),e(Im,$$),e($$,kGe),e(Im,SGe),e(y,RGe),e(y,qm),e(qm,fee),e(fee,BGe),e(qm,PGe),e(qm,k$),e(k$,IGe),e(qm,qGe),e(y,NGe),e(y,Nm),e(Nm,gee),e(gee,jGe),e(Nm,DGe),e(Nm,S$),e(S$,GGe),e(Nm,OGe),e(y,VGe),e(y,jm),e(jm,hee),e(hee,XGe),e(jm,zGe),e(jm,R$),e(R$,QGe),e(jm,WGe),e(y,HGe),e(y,Dm),e(Dm,uee),e(uee,UGe),e(Dm,JGe),e(Dm,B$),e(B$,YGe),e(Dm,KGe),e(y,ZGe),e(y,Gm),e(Gm,pee),e(pee,eOe),e(Gm,oOe),e(Gm,P$),e(P$,rOe),e(Gm,tOe),e(y,aOe),e(y,Om),e(Om,_ee),e(_ee,nOe),e(Om,sOe),e(Om,I$),e(I$,lOe),e(Om,iOe),e(y,dOe),e(y,Vm),e(Vm,bee),e(bee,cOe),e(Vm,mOe),e(Vm,q$),e(q$,fOe),e(Vm,gOe),e(y,hOe),e(y,Xm),e(Xm,Fee),e(Fee,uOe),e(Xm,pOe),e(Xm,N$),e(N$,_Oe),e(Xm,bOe),e(y,FOe),e(y,zm),e(zm,vee),e(vee,vOe),e(zm,TOe),e(zm,j$),e(j$,MOe),e(zm,EOe),e(y,COe),e(y,Qm),e(Qm,Tee),e(Tee,wOe),e(Qm,AOe),e(Qm,D$),e(D$,yOe),e(Qm,LOe),e(y,xOe),e(y,Wm),e(Wm,Mee),e(Mee,$Oe),e(Wm,kOe),e(Wm,G$),e(G$,SOe),e(Wm,ROe),e(y,BOe),e(y,Hm),e(Hm,Eee),e(Eee,POe),e(Hm,IOe),e(Hm,O$),e(O$,qOe),e(Hm,NOe),e(y,jOe),e(y,Um),e(Um,Cee),e(Cee,DOe),e(Um,GOe),e(Um,V$),e(V$,OOe),e(Um,VOe),e(y,XOe),e(y,Jm),e(Jm,wee),e(wee,zOe),e(Jm,QOe),e(Jm,X$),e(X$,WOe),e(Jm,HOe),e(y,UOe),e(y,Ym),e(Ym,Aee),e(Aee,JOe),e(Ym,YOe),e(Ym,z$),e(z$,KOe),e(Ym,ZOe),e(y,eVe),e(y,Km),e(Km,yee),e(yee,oVe),e(Km,rVe),e(Km,Q$),e(Q$,tVe),e(Km,aVe),e(y,nVe),e(y,Zm),e(Zm,Lee),e(Lee,sVe),e(Zm,lVe),e(Zm,W$),e(W$,iVe),e(Zm,dVe),e(y,cVe),e(y,ef),e(ef,xee),e(xee,mVe),e(ef,fVe),e(ef,H$),e(H$,gVe),e(ef,hVe),e(y,uVe),e(y,of),e(of,$ee),e($ee,pVe),e(of,_Ve),e(of,U$),e(U$,bVe),e(of,FVe),e(y,vVe),e(y,rf),e(rf,kee),e(kee,TVe),e(rf,MVe),e(rf,J$),e(J$,EVe),e(rf,CVe),e(y,wVe),e(y,tf),e(tf,See),e(See,AVe),e(tf,yVe),e(tf,Y$),e(Y$,LVe),e(tf,xVe),e(y,$Ve),e(y,af),e(af,Ree),e(Ree,kVe),e(af,SVe),e(af,K$),e(K$,RVe),e(af,BVe),e(y,PVe),e(y,nf),e(nf,Bee),e(Bee,IVe),e(nf,qVe),e(nf,Z$),e(Z$,NVe),e(nf,jVe),e(y,DVe),e(y,sf),e(sf,Pee),e(Pee,GVe),e(sf,OVe),e(sf,ek),e(ek,VVe),e(sf,XVe),e(y,zVe),e(y,lf),e(lf,Iee),e(Iee,QVe),e(lf,WVe),e(lf,ok),e(ok,HVe),e(lf,UVe),e(y,JVe),e(y,df),e(df,qee),e(qee,YVe),e(df,KVe),e(df,rk),e(rk,ZVe),e(df,eXe),e(y,oXe),e(y,cf),e(cf,Nee),e(Nee,rXe),e(cf,tXe),e(cf,tk),e(tk,aXe),e(cf,nXe),e(y,sXe),e(y,mf),e(mf,jee),e(jee,lXe),e(mf,iXe),e(mf,ak),e(ak,dXe),e(mf,cXe),e(y,mXe),e(y,ff),e(ff,Dee),e(Dee,fXe),e(ff,gXe),e(ff,nk),e(nk,hXe),e(ff,uXe),e(y,pXe),e(y,gf),e(gf,Gee),e(Gee,_Xe),e(gf,bXe),e(gf,sk),e(sk,FXe),e(gf,vXe),e(y,TXe),e(y,hf),e(hf,Oee),e(Oee,MXe),e(hf,EXe),e(hf,lk),e(lk,CXe),e(hf,wXe),e(y,AXe),e(y,uf),e(uf,Vee),e(Vee,yXe),e(uf,LXe),e(uf,ik),e(ik,xXe),e(uf,$Xe),e(y,kXe),e(y,pf),e(pf,Xee),e(Xee,SXe),e(pf,RXe),e(pf,dk),e(dk,BXe),e(pf,PXe),e(y,IXe),e(y,_f),e(_f,zee),e(zee,qXe),e(_f,NXe),e(_f,ck),e(ck,jXe),e(_f,DXe),e(y,GXe),e(y,bf),e(bf,Qee),e(Qee,OXe),e(bf,VXe),e(bf,mk),e(mk,XXe),e(bf,zXe),e(y,QXe),e(y,Ff),e(Ff,Wee),e(Wee,WXe),e(Ff,HXe),e(Ff,fk),e(fk,UXe),e(Ff,JXe),e(y,YXe),e(y,vf),e(vf,Hee),e(Hee,KXe),e(vf,ZXe),e(vf,gk),e(gk,eze),e(vf,oze),e(y,rze),e(y,Tf),e(Tf,Uee),e(Uee,tze),e(Tf,aze),e(Tf,hk),e(hk,nze),e(Tf,sze),e(y,lze),e(y,Mf),e(Mf,Jee),e(Jee,ize),e(Mf,dze),e(Mf,uk),e(uk,cze),e(Mf,mze),e(y,fze),e(y,Ef),e(Ef,Yee),e(Yee,gze),e(Ef,hze),e(Ef,pk),e(pk,uze),e(Ef,pze),e(y,_ze),e(y,Cf),e(Cf,Kee),e(Kee,bze),e(Cf,Fze),e(Cf,_k),e(_k,vze),e(Cf,Tze),e(y,Mze),e(y,wf),e(wf,Zee),e(Zee,Eze),e(wf,Cze),e(wf,bk),e(bk,wze),e(wf,Aze),e(y,yze),e(y,Af),e(Af,eoe),e(eoe,Lze),e(Af,xze),e(Af,Fk),e(Fk,$ze),e(Af,kze),e(y,Sze),e(y,yf),e(yf,ooe),e(ooe,Rze),e(yf,Bze),e(yf,vk),e(vk,Pze),e(yf,Ize),e(y,qze),e(y,Lf),e(Lf,roe),e(roe,Nze),e(Lf,jze),e(Lf,Tk),e(Tk,Dze),e(Lf,Gze),e(y,Oze),e(y,xf),e(xf,toe),e(toe,Vze),e(xf,Xze),e(xf,Mk),e(Mk,zze),e(xf,Qze),e(y,Wze),e(y,$f),e($f,aoe),e(aoe,Hze),e($f,Uze),e($f,Ek),e(Ek,Jze),e($f,Yze),e(y,Kze),e(y,kf),e(kf,noe),e(noe,Zze),e(kf,eQe),e(kf,Ck),e(Ck,oQe),e(kf,rQe),e(y,tQe),e(y,Sf),e(Sf,soe),e(soe,aQe),e(Sf,nQe),e(Sf,wk),e(wk,sQe),e(Sf,lQe),e(y,iQe),e(y,Rf),e(Rf,loe),e(loe,dQe),e(Rf,cQe),e(Rf,Ak),e(Ak,mQe),e(Rf,fQe),e(y,gQe),e(y,Bf),e(Bf,ioe),e(ioe,hQe),e(Bf,uQe),e(Bf,yk),e(yk,pQe),e(Bf,_Qe),e(y,bQe),e(y,Pf),e(Pf,doe),e(doe,FQe),e(Pf,vQe),e(Pf,Lk),e(Lk,TQe),e(Pf,MQe),e(y,EQe),e(y,If),e(If,coe),e(coe,CQe),e(If,wQe),e(If,xk),e(xk,AQe),e(If,yQe),e(y,LQe),e(y,qf),e(qf,moe),e(moe,xQe),e(qf,$Qe),e(qf,$k),e($k,kQe),e(qf,SQe),e(y,RQe),e(y,Nf),e(Nf,foe),e(foe,BQe),e(Nf,PQe),e(Nf,kk),e(kk,IQe),e(Nf,qQe),e(y,NQe),e(y,jf),e(jf,goe),e(goe,jQe),e(jf,DQe),e(jf,Sk),e(Sk,GQe),e(jf,OQe),e(y,VQe),e(y,Df),e(Df,hoe),e(hoe,XQe),e(Df,zQe),e(Df,Rk),e(Rk,QQe),e(Df,WQe),e(y,HQe),e(y,Gf),e(Gf,uoe),e(uoe,UQe),e(Gf,JQe),e(Gf,Bk),e(Bk,YQe),e(Gf,KQe),e(y,ZQe),e(y,Of),e(Of,poe),e(poe,eWe),e(Of,oWe),e(Of,Pk),e(Pk,rWe),e(Of,tWe),e(y,aWe),e(y,Vf),e(Vf,_oe),e(_oe,nWe),e(Vf,sWe),e(Vf,Ik),e(Ik,lWe),e(Vf,iWe),e(y,dWe),e(y,Xf),e(Xf,boe),e(boe,cWe),e(Xf,mWe),e(Xf,qk),e(qk,fWe),e(Xf,gWe),e(y,hWe),e(y,zf),e(zf,Foe),e(Foe,uWe),e(zf,pWe),e(zf,Nk),e(Nk,_We),e(zf,bWe),e(y,FWe),e(y,Qf),e(Qf,voe),e(voe,vWe),e(Qf,TWe),e(Qf,jk),e(jk,MWe),e(Qf,EWe),e(y,CWe),e(y,Wf),e(Wf,Toe),e(Toe,wWe),e(Wf,AWe),e(Wf,Dk),e(Dk,yWe),e(Wf,LWe),e(y,xWe),e(y,Hf),e(Hf,Moe),e(Moe,$We),e(Hf,kWe),e(Hf,Gk),e(Gk,SWe),e(Hf,RWe),e(y,BWe),e(y,Uf),e(Uf,Eoe),e(Eoe,PWe),e(Uf,IWe),e(Uf,Ok),e(Ok,qWe),e(Uf,NWe),e(y,jWe),e(y,Jf),e(Jf,Coe),e(Coe,DWe),e(Jf,GWe),e(Jf,Vk),e(Vk,OWe),e(Jf,VWe),e(y,XWe),e(y,Yf),e(Yf,woe),e(woe,zWe),e(Yf,QWe),e(Yf,Xk),e(Xk,WWe),e(Yf,HWe),e(y,UWe),e(y,Kf),e(Kf,Aoe),e(Aoe,JWe),e(Kf,YWe),e(Kf,zk),e(zk,KWe),e(Kf,ZWe),e(y,eHe),e(y,Zf),e(Zf,yoe),e(yoe,oHe),e(Zf,rHe),e(Zf,Qk),e(Qk,tHe),e(Zf,aHe),e(y,nHe),e(y,eg),e(eg,Loe),e(Loe,sHe),e(eg,lHe),e(eg,Wk),e(Wk,iHe),e(eg,dHe),e(y,cHe),e(y,og),e(og,xoe),e(xoe,mHe),e(og,fHe),e(og,Hk),e(Hk,gHe),e(og,hHe),e(y,uHe),e(y,rg),e(rg,$oe),e($oe,pHe),e(rg,_He),e(rg,Uk),e(Uk,bHe),e(rg,FHe),e(y,vHe),e(y,tg),e(tg,koe),e(koe,THe),e(tg,MHe),e(tg,Jk),e(Jk,EHe),e(tg,CHe),e(y,wHe),e(y,ag),e(ag,Soe),e(Soe,AHe),e(ag,yHe),e(ag,Yk),e(Yk,LHe),e(ag,xHe),e(y,$He),e(y,ng),e(ng,Roe),e(Roe,kHe),e(ng,SHe),e(ng,Kk),e(Kk,RHe),e(ng,BHe),e(y,PHe),e(y,sg),e(sg,Boe),e(Boe,IHe),e(sg,qHe),e(sg,Zk),e(Zk,NHe),e(sg,jHe),e(y,DHe),e(y,lg),e(lg,Poe),e(Poe,GHe),e(lg,OHe),e(lg,eS),e(eS,VHe),e(lg,XHe),e(y,zHe),e(y,ig),e(ig,Ioe),e(Ioe,QHe),e(ig,WHe),e(ig,oS),e(oS,HHe),e(ig,UHe),e(y,JHe),e(y,dg),e(dg,qoe),e(qoe,YHe),e(dg,KHe),e(dg,rS),e(rS,ZHe),e(dg,eUe),e(y,oUe),e(y,cg),e(cg,Noe),e(Noe,rUe),e(cg,tUe),e(cg,tS),e(tS,aUe),e(cg,nUe),e(y,sUe),e(y,mg),e(mg,joe),e(joe,lUe),e(mg,iUe),e(mg,aS),e(aS,dUe),e(mg,cUe),e(y,mUe),e(y,fg),e(fg,Doe),e(Doe,fUe),e(fg,gUe),e(fg,nS),e(nS,hUe),e(fg,uUe),e(y,pUe),e(y,gg),e(gg,Goe),e(Goe,_Ue),e(gg,bUe),e(gg,sS),e(sS,FUe),e(gg,vUe),e(Er,TUe),M(hg,Er,null),e(Co,MUe),e(Co,ug),M(U6,ug,null),e(ug,EUe),e(ug,Ooe),e(Ooe,CUe),b(m,hPe,_),b(m,_i,_),e(_i,pg),e(pg,Voe),M(J6,Voe,null),e(_i,wUe),e(_i,Xoe),e(Xoe,AUe),b(m,uPe,_),b(m,wo,_),M(Y6,wo,null),e(wo,yUe),e(wo,K6),e(K6,LUe),e(K6,lS),e(lS,xUe),e(K6,$Ue),e(wo,kUe),e(wo,Z6),e(Z6,SUe),e(Z6,zoe),e(zoe,RUe),e(Z6,BUe),e(wo,PUe),e(wo,Cr),M(ey,Cr,null),e(Cr,IUe),e(Cr,Qoe),e(Qoe,qUe),e(Cr,NUe),e(Cr,Ca),e(Ca,jUe),e(Ca,Woe),e(Woe,DUe),e(Ca,GUe),e(Ca,Hoe),e(Hoe,OUe),e(Ca,VUe),e(Ca,Uoe),e(Uoe,XUe),e(Ca,zUe),e(Cr,QUe),e(Cr,k),e(k,kn),e(kn,Joe),e(Joe,WUe),e(kn,HUe),e(kn,iS),e(iS,UUe),e(kn,JUe),e(kn,dS),e(dS,YUe),e(kn,KUe),e(k,ZUe),e(k,Sn),e(Sn,Yoe),e(Yoe,eJe),e(Sn,oJe),e(Sn,cS),e(cS,rJe),e(Sn,tJe),e(Sn,mS),e(mS,aJe),e(Sn,nJe),e(k,sJe),e(k,Rn),e(Rn,Koe),e(Koe,lJe),e(Rn,iJe),e(Rn,fS),e(fS,dJe),e(Rn,cJe),e(Rn,gS),e(gS,mJe),e(Rn,fJe),e(k,gJe),e(k,_g),e(_g,Zoe),e(Zoe,hJe),e(_g,uJe),e(_g,hS),e(hS,pJe),e(_g,_Je),e(k,bJe),e(k,Bn),e(Bn,ere),e(ere,FJe),e(Bn,vJe),e(Bn,uS),e(uS,TJe),e(Bn,MJe),e(Bn,pS),e(pS,EJe),e(Bn,CJe),e(k,wJe),e(k,bg),e(bg,ore),e(ore,AJe),e(bg,yJe),e(bg,_S),e(_S,LJe),e(bg,xJe),e(k,$Je),e(k,Fg),e(Fg,rre),e(rre,kJe),e(Fg,SJe),e(Fg,bS),e(bS,RJe),e(Fg,BJe),e(k,PJe),e(k,vg),e(vg,tre),e(tre,IJe),e(vg,qJe),e(vg,FS),e(FS,NJe),e(vg,jJe),e(k,DJe),e(k,Pn),e(Pn,are),e(are,GJe),e(Pn,OJe),e(Pn,vS),e(vS,VJe),e(Pn,XJe),e(Pn,TS),e(TS,zJe),e(Pn,QJe),e(k,WJe),e(k,In),e(In,nre),e(nre,HJe),e(In,UJe),e(In,MS),e(MS,JJe),e(In,YJe),e(In,ES),e(ES,KJe),e(In,ZJe),e(k,eYe),e(k,qn),e(qn,sre),e(sre,oYe),e(qn,rYe),e(qn,CS),e(CS,tYe),e(qn,aYe),e(qn,wS),e(wS,nYe),e(qn,sYe),e(k,lYe),e(k,Tg),e(Tg,lre),e(lre,iYe),e(Tg,dYe),e(Tg,AS),e(AS,cYe),e(Tg,mYe),e(k,fYe),e(k,Mg),e(Mg,ire),e(ire,gYe),e(Mg,hYe),e(Mg,yS),e(yS,uYe),e(Mg,pYe),e(k,_Ye),e(k,Nn),e(Nn,dre),e(dre,bYe),e(Nn,FYe),e(Nn,LS),e(LS,vYe),e(Nn,TYe),e(Nn,xS),e(xS,MYe),e(Nn,EYe),e(k,CYe),e(k,Eg),e(Eg,cre),e(cre,wYe),e(Eg,AYe),e(Eg,$S),e($S,yYe),e(Eg,LYe),e(k,xYe),e(k,jn),e(jn,mre),e(mre,$Ye),e(jn,kYe),e(jn,kS),e(kS,SYe),e(jn,RYe),e(jn,SS),e(SS,BYe),e(jn,PYe),e(k,IYe),e(k,Dn),e(Dn,fre),e(fre,qYe),e(Dn,NYe),e(Dn,RS),e(RS,jYe),e(Dn,DYe),e(Dn,BS),e(BS,GYe),e(Dn,OYe),e(k,VYe),e(k,Gn),e(Gn,gre),e(gre,XYe),e(Gn,zYe),e(Gn,PS),e(PS,QYe),e(Gn,WYe),e(Gn,IS),e(IS,HYe),e(Gn,UYe),e(k,JYe),e(k,Cg),e(Cg,hre),e(hre,YYe),e(Cg,KYe),e(Cg,qS),e(qS,ZYe),e(Cg,eKe),e(k,oKe),e(k,On),e(On,ure),e(ure,rKe),e(On,tKe),e(On,NS),e(NS,aKe),e(On,nKe),e(On,jS),e(jS,sKe),e(On,lKe),e(k,iKe),e(k,Vn),e(Vn,pre),e(pre,dKe),e(Vn,cKe),e(Vn,DS),e(DS,mKe),e(Vn,fKe),e(Vn,GS),e(GS,gKe),e(Vn,hKe),e(k,uKe),e(k,Xn),e(Xn,_re),e(_re,pKe),e(Xn,_Ke),e(Xn,OS),e(OS,bKe),e(Xn,FKe),e(Xn,VS),e(VS,vKe),e(Xn,TKe),e(k,MKe),e(k,zn),e(zn,bre),e(bre,EKe),e(zn,CKe),e(zn,XS),e(XS,wKe),e(zn,AKe),e(zn,zS),e(zS,yKe),e(zn,LKe),e(k,xKe),e(k,Qn),e(Qn,Fre),e(Fre,$Ke),e(Qn,kKe),e(Qn,QS),e(QS,SKe),e(Qn,RKe),e(Qn,WS),e(WS,BKe),e(Qn,PKe),e(k,IKe),e(k,Wn),e(Wn,vre),e(vre,qKe),e(Wn,NKe),e(Wn,HS),e(HS,jKe),e(Wn,DKe),e(Wn,US),e(US,GKe),e(Wn,OKe),e(k,VKe),e(k,wg),e(wg,Tre),e(Tre,XKe),e(wg,zKe),e(wg,JS),e(JS,QKe),e(wg,WKe),e(k,HKe),e(k,Hn),e(Hn,Mre),e(Mre,UKe),e(Hn,JKe),e(Hn,YS),e(YS,YKe),e(Hn,KKe),e(Hn,KS),e(KS,ZKe),e(Hn,eZe),e(k,oZe),e(k,Ag),e(Ag,Ere),e(Ere,rZe),e(Ag,tZe),e(Ag,ZS),e(ZS,aZe),e(Ag,nZe),e(k,sZe),e(k,Un),e(Un,Cre),e(Cre,lZe),e(Un,iZe),e(Un,eR),e(eR,dZe),e(Un,cZe),e(Un,oR),e(oR,mZe),e(Un,fZe),e(k,gZe),e(k,Jn),e(Jn,wre),e(wre,hZe),e(Jn,uZe),e(Jn,rR),e(rR,pZe),e(Jn,_Ze),e(Jn,tR),e(tR,bZe),e(Jn,FZe),e(k,vZe),e(k,Yn),e(Yn,Are),e(Are,TZe),e(Yn,MZe),e(Yn,aR),e(aR,EZe),e(Yn,CZe),e(Yn,nR),e(nR,wZe),e(Yn,AZe),e(k,yZe),e(k,Kn),e(Kn,yre),e(yre,LZe),e(Kn,xZe),e(Kn,sR),e(sR,$Ze),e(Kn,kZe),e(Kn,lR),e(lR,SZe),e(Kn,RZe),e(k,BZe),e(k,Zn),e(Zn,Lre),e(Lre,PZe),e(Zn,IZe),e(Zn,iR),e(iR,qZe),e(Zn,NZe),e(Zn,dR),e(dR,jZe),e(Zn,DZe),e(k,GZe),e(k,yg),e(yg,xre),e(xre,OZe),e(yg,VZe),e(yg,cR),e(cR,XZe),e(yg,zZe),e(k,QZe),e(k,es),e(es,$re),e($re,WZe),e(es,HZe),e(es,mR),e(mR,UZe),e(es,JZe),e(es,fR),e(fR,YZe),e(es,KZe),e(k,ZZe),e(k,os),e(os,kre),e(kre,eeo),e(os,oeo),e(os,gR),e(gR,reo),e(os,teo),e(os,hR),e(hR,aeo),e(os,neo),e(k,seo),e(k,rs),e(rs,Sre),e(Sre,leo),e(rs,ieo),e(rs,uR),e(uR,deo),e(rs,ceo),e(rs,pR),e(pR,meo),e(rs,feo),e(k,geo),e(k,ts),e(ts,Rre),e(Rre,heo),e(ts,ueo),e(ts,_R),e(_R,peo),e(ts,_eo),e(ts,bR),e(bR,beo),e(ts,Feo),e(k,veo),e(k,as),e(as,Bre),e(Bre,Teo),e(as,Meo),e(as,FR),e(FR,Eeo),e(as,Ceo),e(as,vR),e(vR,weo),e(as,Aeo),e(k,yeo),e(k,ns),e(ns,Pre),e(Pre,Leo),e(ns,xeo),e(ns,TR),e(TR,$eo),e(ns,keo),e(ns,MR),e(MR,Seo),e(ns,Reo),e(k,Beo),e(k,Lg),e(Lg,Ire),e(Ire,Peo),e(Lg,Ieo),e(Lg,ER),e(ER,qeo),e(Lg,Neo),e(k,jeo),e(k,ss),e(ss,qre),e(qre,Deo),e(ss,Geo),e(ss,CR),e(CR,Oeo),e(ss,Veo),e(ss,wR),e(wR,Xeo),e(ss,zeo),e(k,Qeo),e(k,xg),e(xg,Nre),e(Nre,Weo),e(xg,Heo),e(xg,AR),e(AR,Ueo),e(xg,Jeo),e(k,Yeo),e(k,$g),e($g,jre),e(jre,Keo),e($g,Zeo),e($g,yR),e(yR,eoo),e($g,ooo),e(k,roo),e(k,ls),e(ls,Dre),e(Dre,too),e(ls,aoo),e(ls,LR),e(LR,noo),e(ls,soo),e(ls,xR),e(xR,loo),e(ls,ioo),e(k,doo),e(k,is),e(is,Gre),e(Gre,coo),e(is,moo),e(is,$R),e($R,foo),e(is,goo),e(is,kR),e(kR,hoo),e(is,uoo),e(k,poo),e(k,ds),e(ds,Ore),e(Ore,_oo),e(ds,boo),e(ds,SR),e(SR,Foo),e(ds,voo),e(ds,RR),e(RR,Too),e(ds,Moo),e(k,Eoo),e(k,kg),e(kg,Vre),e(Vre,Coo),e(kg,woo),e(kg,BR),e(BR,Aoo),e(kg,yoo),e(k,Loo),e(k,cs),e(cs,Xre),e(Xre,xoo),e(cs,$oo),e(cs,PR),e(PR,koo),e(cs,Soo),e(cs,IR),e(IR,Roo),e(cs,Boo),e(k,Poo),e(k,ms),e(ms,zre),e(zre,Ioo),e(ms,qoo),e(ms,qR),e(qR,Noo),e(ms,joo),e(ms,NR),e(NR,Doo),e(ms,Goo),e(k,Ooo),e(k,fs),e(fs,Qre),e(Qre,Voo),e(fs,Xoo),e(fs,jR),e(jR,zoo),e(fs,Qoo),e(fs,DR),e(DR,Woo),e(fs,Hoo),e(k,Uoo),e(k,gs),e(gs,Wre),e(Wre,Joo),e(gs,Yoo),e(gs,GR),e(GR,Koo),e(gs,Zoo),e(gs,OR),e(OR,ero),e(gs,oro),e(k,rro),e(k,hs),e(hs,Hre),e(Hre,tro),e(hs,aro),e(hs,VR),e(VR,nro),e(hs,sro),e(hs,XR),e(XR,lro),e(hs,iro),e(k,dro),e(k,us),e(us,Ure),e(Ure,cro),e(us,mro),e(us,zR),e(zR,fro),e(us,gro),e(us,QR),e(QR,hro),e(us,uro),e(k,pro),e(k,Sg),e(Sg,Jre),e(Jre,_ro),e(Sg,bro),e(Sg,WR),e(WR,Fro),e(Sg,vro),e(k,Tro),e(k,Rg),e(Rg,Yre),e(Yre,Mro),e(Rg,Ero),e(Rg,HR),e(HR,Cro),e(Rg,wro),e(k,Aro),e(k,Bg),e(Bg,Kre),e(Kre,yro),e(Bg,Lro),e(Bg,UR),e(UR,xro),e(Bg,$ro),e(k,kro),e(k,Pg),e(Pg,Zre),e(Zre,Sro),e(Pg,Rro),e(Pg,JR),e(JR,Bro),e(Pg,Pro),e(k,Iro),e(k,ps),e(ps,ete),e(ete,qro),e(ps,Nro),e(ps,YR),e(YR,jro),e(ps,Dro),e(ps,KR),e(KR,Gro),e(ps,Oro),e(k,Vro),e(k,Ig),e(Ig,ote),e(ote,Xro),e(Ig,zro),e(Ig,ZR),e(ZR,Qro),e(Ig,Wro),e(k,Hro),e(k,_s),e(_s,rte),e(rte,Uro),e(_s,Jro),e(_s,eB),e(eB,Yro),e(_s,Kro),e(_s,oB),e(oB,Zro),e(_s,eto),e(k,oto),e(k,bs),e(bs,tte),e(tte,rto),e(bs,tto),e(bs,rB),e(rB,ato),e(bs,nto),e(bs,tB),e(tB,sto),e(bs,lto),e(k,ito),e(k,Fs),e(Fs,ate),e(ate,dto),e(Fs,cto),e(Fs,aB),e(aB,mto),e(Fs,fto),e(Fs,nB),e(nB,gto),e(Fs,hto),e(k,uto),e(k,vs),e(vs,nte),e(nte,pto),e(vs,_to),e(vs,sB),e(sB,bto),e(vs,Fto),e(vs,lB),e(lB,vto),e(vs,Tto),e(k,Mto),e(k,Ts),e(Ts,ste),e(ste,Eto),e(Ts,Cto),e(Ts,iB),e(iB,wto),e(Ts,Ato),e(Ts,dB),e(dB,yto),e(Ts,Lto),e(k,xto),e(k,Ms),e(Ms,lte),e(lte,$to),e(Ms,kto),e(Ms,cB),e(cB,Sto),e(Ms,Rto),e(Ms,mB),e(mB,Bto),e(Ms,Pto),e(k,Ito),e(k,qg),e(qg,ite),e(ite,qto),e(qg,Nto),e(qg,fB),e(fB,jto),e(qg,Dto),e(k,Gto),e(k,Ng),e(Ng,dte),e(dte,Oto),e(Ng,Vto),e(Ng,gB),e(gB,Xto),e(Ng,zto),e(k,Qto),e(k,Es),e(Es,cte),e(cte,Wto),e(Es,Hto),e(Es,hB),e(hB,Uto),e(Es,Jto),e(Es,uB),e(uB,Yto),e(Es,Kto),e(k,Zto),e(k,Cs),e(Cs,mte),e(mte,eao),e(Cs,oao),e(Cs,pB),e(pB,rao),e(Cs,tao),e(Cs,_B),e(_B,aao),e(Cs,nao),e(k,sao),e(k,ws),e(ws,fte),e(fte,lao),e(ws,iao),e(ws,bB),e(bB,dao),e(ws,cao),e(ws,FB),e(FB,mao),e(ws,fao),e(k,gao),e(k,jg),e(jg,gte),e(gte,hao),e(jg,uao),e(jg,vB),e(vB,pao),e(jg,_ao),e(k,bao),e(k,Dg),e(Dg,hte),e(hte,Fao),e(Dg,vao),e(Dg,TB),e(TB,Tao),e(Dg,Mao),e(k,Eao),e(k,Gg),e(Gg,ute),e(ute,Cao),e(Gg,wao),e(Gg,MB),e(MB,Aao),e(Gg,yao),e(k,Lao),e(k,As),e(As,pte),e(pte,xao),e(As,$ao),e(As,EB),e(EB,kao),e(As,Sao),e(As,CB),e(CB,Rao),e(As,Bao),e(k,Pao),e(k,Og),e(Og,_te),e(_te,Iao),e(Og,qao),e(Og,wB),e(wB,Nao),e(Og,jao),e(k,Dao),e(k,Vg),e(Vg,bte),e(bte,Gao),e(Vg,Oao),e(Vg,AB),e(AB,Vao),e(Vg,Xao),e(k,zao),e(k,ys),e(ys,Fte),e(Fte,Qao),e(ys,Wao),e(ys,yB),e(yB,Hao),e(ys,Uao),e(ys,LB),e(LB,Jao),e(ys,Yao),e(k,Kao),e(k,Xg),e(Xg,vte),e(vte,Zao),e(Xg,eno),e(Xg,xB),e(xB,ono),e(Xg,rno),e(k,tno),e(k,zg),e(zg,Tte),e(Tte,ano),e(zg,nno),e(zg,$B),e($B,sno),e(zg,lno),e(k,ino),e(k,Ls),e(Ls,Mte),e(Mte,dno),e(Ls,cno),e(Ls,kB),e(kB,mno),e(Ls,fno),e(Ls,SB),e(SB,gno),e(Ls,hno),e(k,uno),e(k,xs),e(xs,Ete),e(Ete,pno),e(xs,_no),e(xs,RB),e(RB,bno),e(xs,Fno),e(xs,BB),e(BB,vno),e(xs,Tno),e(k,Mno),e(k,$s),e($s,Cte),e(Cte,Eno),e($s,Cno),e($s,PB),e(PB,wno),e($s,Ano),e($s,IB),e(IB,yno),e($s,Lno),e(k,xno),e(k,ks),e(ks,wte),e(wte,$no),e(ks,kno),e(ks,qB),e(qB,Sno),e(ks,Rno),e(ks,NB),e(NB,Bno),e(ks,Pno),e(Cr,Ino),M(Qg,Cr,null),e(wo,qno),e(wo,Wg),M(oy,Wg,null),e(Wg,Nno),e(Wg,Ate),e(Ate,jno),b(m,pPe,_),b(m,bi,_),e(bi,Hg),e(Hg,yte),M(ry,yte,null),e(bi,Dno),e(bi,Lte),e(Lte,Gno),b(m,_Pe,_),b(m,Ao,_),M(ty,Ao,null),e(Ao,Ono),e(Ao,ay),e(ay,Vno),e(ay,jB),e(jB,Xno),e(ay,zno),e(Ao,Qno),e(Ao,ny),e(ny,Wno),e(ny,xte),e(xte,Hno),e(ny,Uno),e(Ao,Jno),e(Ao,Qe),M(sy,Qe,null),e(Qe,Yno),e(Qe,$te),e($te,Kno),e(Qe,Zno),e(Qe,wa),e(wa,eso),e(wa,kte),e(kte,oso),e(wa,rso),e(wa,Ste),e(Ste,tso),e(wa,aso),e(wa,Rte),e(Rte,nso),e(wa,sso),e(Qe,lso),e(Qe,te),e(te,Ug),e(Ug,Bte),e(Bte,iso),e(Ug,dso),e(Ug,DB),e(DB,cso),e(Ug,mso),e(te,fso),e(te,Jg),e(Jg,Pte),e(Pte,gso),e(Jg,hso),e(Jg,GB),e(GB,uso),e(Jg,pso),e(te,_so),e(te,Yg),e(Yg,Ite),e(Ite,bso),e(Yg,Fso),e(Yg,OB),e(OB,vso),e(Yg,Tso),e(te,Mso),e(te,Kg),e(Kg,qte),e(qte,Eso),e(Kg,Cso),e(Kg,VB),e(VB,wso),e(Kg,Aso),e(te,yso),e(te,Zg),e(Zg,Nte),e(Nte,Lso),e(Zg,xso),e(Zg,XB),e(XB,$so),e(Zg,kso),e(te,Sso),e(te,eh),e(eh,jte),e(jte,Rso),e(eh,Bso),e(eh,zB),e(zB,Pso),e(eh,Iso),e(te,qso),e(te,oh),e(oh,Dte),e(Dte,Nso),e(oh,jso),e(oh,QB),e(QB,Dso),e(oh,Gso),e(te,Oso),e(te,rh),e(rh,Gte),e(Gte,Vso),e(rh,Xso),e(rh,WB),e(WB,zso),e(rh,Qso),e(te,Wso),e(te,th),e(th,Ote),e(Ote,Hso),e(th,Uso),e(th,HB),e(HB,Jso),e(th,Yso),e(te,Kso),e(te,ah),e(ah,Vte),e(Vte,Zso),e(ah,elo),e(ah,UB),e(UB,olo),e(ah,rlo),e(te,tlo),e(te,nh),e(nh,Xte),e(Xte,alo),e(nh,nlo),e(nh,JB),e(JB,slo),e(nh,llo),e(te,ilo),e(te,sh),e(sh,zte),e(zte,dlo),e(sh,clo),e(sh,YB),e(YB,mlo),e(sh,flo),e(te,glo),e(te,lh),e(lh,Qte),e(Qte,hlo),e(lh,ulo),e(lh,KB),e(KB,plo),e(lh,_lo),e(te,blo),e(te,ih),e(ih,Wte),e(Wte,Flo),e(ih,vlo),e(ih,ZB),e(ZB,Tlo),e(ih,Mlo),e(te,Elo),e(te,dh),e(dh,Hte),e(Hte,Clo),e(dh,wlo),e(dh,eP),e(eP,Alo),e(dh,ylo),e(te,Llo),e(te,ch),e(ch,Ute),e(Ute,xlo),e(ch,$lo),e(ch,oP),e(oP,klo),e(ch,Slo),e(te,Rlo),e(te,mh),e(mh,Jte),e(Jte,Blo),e(mh,Plo),e(mh,rP),e(rP,Ilo),e(mh,qlo),e(te,Nlo),e(te,fh),e(fh,Yte),e(Yte,jlo),e(fh,Dlo),e(fh,tP),e(tP,Glo),e(fh,Olo),e(te,Vlo),e(te,gh),e(gh,Kte),e(Kte,Xlo),e(gh,zlo),e(gh,aP),e(aP,Qlo),e(gh,Wlo),e(te,Hlo),e(te,hh),e(hh,Zte),e(Zte,Ulo),e(hh,Jlo),e(hh,nP),e(nP,Ylo),e(hh,Klo),e(te,Zlo),e(te,uh),e(uh,eae),e(eae,eio),e(uh,oio),e(uh,sP),e(sP,rio),e(uh,tio),e(te,aio),e(te,ph),e(ph,oae),e(oae,nio),e(ph,sio),e(ph,lP),e(lP,lio),e(ph,iio),e(te,dio),e(te,_h),e(_h,rae),e(rae,cio),e(_h,mio),e(_h,iP),e(iP,fio),e(_h,gio),e(te,hio),e(te,bh),e(bh,tae),e(tae,uio),e(bh,pio),e(bh,dP),e(dP,_io),e(bh,bio),e(Qe,Fio),M(Fh,Qe,null),e(Qe,vio),M(vh,Qe,null),e(Ao,Tio),e(Ao,Th),M(ly,Th,null),e(Th,Mio),e(Th,aae),e(aae,Eio),b(m,bPe,_),b(m,Fi,_),e(Fi,Mh),e(Mh,nae),M(iy,nae,null),e(Fi,Cio),e(Fi,sae),e(sae,wio),b(m,FPe,_),b(m,yo,_),M(dy,yo,null),e(yo,Aio),e(yo,cy),e(cy,yio),e(cy,cP),e(cP,Lio),e(cy,xio),e(yo,$io),e(yo,my),e(my,kio),e(my,lae),e(lae,Sio),e(my,Rio),e(yo,Bio),e(yo,We),M(fy,We,null),e(We,Pio),e(We,iae),e(iae,Iio),e(We,qio),e(We,vi),e(vi,Nio),e(vi,dae),e(dae,jio),e(vi,Dio),e(vi,cae),e(cae,Gio),e(vi,Oio),e(We,Vio),e(We,be),e(be,Eh),e(Eh,mae),e(mae,Xio),e(Eh,zio),e(Eh,mP),e(mP,Qio),e(Eh,Wio),e(be,Hio),e(be,Ch),e(Ch,fae),e(fae,Uio),e(Ch,Jio),e(Ch,fP),e(fP,Yio),e(Ch,Kio),e(be,Zio),e(be,wh),e(wh,gae),e(gae,edo),e(wh,odo),e(wh,gP),e(gP,rdo),e(wh,tdo),e(be,ado),e(be,Ah),e(Ah,hae),e(hae,ndo),e(Ah,sdo),e(Ah,hP),e(hP,ldo),e(Ah,ido),e(be,ddo),e(be,yh),e(yh,uae),e(uae,cdo),e(yh,mdo),e(yh,uP),e(uP,fdo),e(yh,gdo),e(be,hdo),e(be,Lh),e(Lh,pae),e(pae,udo),e(Lh,pdo),e(Lh,pP),e(pP,_do),e(Lh,bdo),e(be,Fdo),e(be,xh),e(xh,_ae),e(_ae,vdo),e(xh,Tdo),e(xh,_P),e(_P,Mdo),e(xh,Edo),e(be,Cdo),e(be,$h),e($h,bae),e(bae,wdo),e($h,Ado),e($h,bP),e(bP,ydo),e($h,Ldo),e(be,xdo),e(be,kh),e(kh,Fae),e(Fae,$do),e(kh,kdo),e(kh,FP),e(FP,Sdo),e(kh,Rdo),e(be,Bdo),e(be,Sh),e(Sh,vae),e(vae,Pdo),e(Sh,Ido),e(Sh,vP),e(vP,qdo),e(Sh,Ndo),e(be,jdo),e(be,Rh),e(Rh,Tae),e(Tae,Ddo),e(Rh,Gdo),e(Rh,TP),e(TP,Odo),e(Rh,Vdo),e(be,Xdo),e(be,Bh),e(Bh,Mae),e(Mae,zdo),e(Bh,Qdo),e(Bh,MP),e(MP,Wdo),e(Bh,Hdo),e(be,Udo),e(be,Ph),e(Ph,Eae),e(Eae,Jdo),e(Ph,Ydo),e(Ph,EP),e(EP,Kdo),e(Ph,Zdo),e(be,eco),e(be,Ih),e(Ih,Cae),e(Cae,oco),e(Ih,rco),e(Ih,CP),e(CP,tco),e(Ih,aco),e(We,nco),M(qh,We,null),e(We,sco),M(Nh,We,null),e(yo,lco),e(yo,jh),M(gy,jh,null),e(jh,ico),e(jh,wae),e(wae,dco),b(m,vPe,_),b(m,Ti,_),e(Ti,Dh),e(Dh,Aae),M(hy,Aae,null),e(Ti,cco),e(Ti,yae),e(yae,mco),b(m,TPe,_),b(m,Lo,_),M(uy,Lo,null),e(Lo,fco),e(Lo,Mi),e(Mi,gco),e(Mi,wP),e(wP,hco),e(Mi,uco),e(Mi,AP),e(AP,pco),e(Mi,_co),e(Lo,bco),e(Lo,py),e(py,Fco),e(py,Lae),e(Lae,vco),e(py,Tco),e(Lo,Mco),e(Lo,ot),M(_y,ot,null),e(ot,Eco),e(ot,xae),e(xae,Cco),e(ot,wco),e(ot,Ei),e(Ei,Aco),e(Ei,$ae),e($ae,yco),e(Ei,Lco),e(Ei,yP),e(yP,xco),e(Ei,$co),e(ot,kco),M(Gh,ot,null),e(Lo,Sco),e(Lo,He),M(by,He,null),e(He,Rco),e(He,kae),e(kae,Bco),e(He,Pco),e(He,Aa),e(Aa,Ico),e(Aa,Sae),e(Sae,qco),e(Aa,Nco),e(Aa,Rae),e(Rae,jco),e(Aa,Dco),e(Aa,Bae),e(Bae,Gco),e(Aa,Oco),e(He,Vco),e(He,x),e(x,Oh),e(Oh,Pae),e(Pae,Xco),e(Oh,zco),e(Oh,LP),e(LP,Qco),e(Oh,Wco),e(x,Hco),e(x,Vh),e(Vh,Iae),e(Iae,Uco),e(Vh,Jco),e(Vh,xP),e(xP,Yco),e(Vh,Kco),e(x,Zco),e(x,Xh),e(Xh,qae),e(qae,emo),e(Xh,omo),e(Xh,$P),e($P,rmo),e(Xh,tmo),e(x,amo),e(x,zh),e(zh,Nae),e(Nae,nmo),e(zh,smo),e(zh,kP),e(kP,lmo),e(zh,imo),e(x,dmo),e(x,Qh),e(Qh,jae),e(jae,cmo),e(Qh,mmo),e(Qh,SP),e(SP,fmo),e(Qh,gmo),e(x,hmo),e(x,Wh),e(Wh,Dae),e(Dae,umo),e(Wh,pmo),e(Wh,RP),e(RP,_mo),e(Wh,bmo),e(x,Fmo),e(x,Hh),e(Hh,Gae),e(Gae,vmo),e(Hh,Tmo),e(Hh,BP),e(BP,Mmo),e(Hh,Emo),e(x,Cmo),e(x,Uh),e(Uh,Oae),e(Oae,wmo),e(Uh,Amo),e(Uh,PP),e(PP,ymo),e(Uh,Lmo),e(x,xmo),e(x,Jh),e(Jh,Vae),e(Vae,$mo),e(Jh,kmo),e(Jh,IP),e(IP,Smo),e(Jh,Rmo),e(x,Bmo),e(x,Yh),e(Yh,Xae),e(Xae,Pmo),e(Yh,Imo),e(Yh,qP),e(qP,qmo),e(Yh,Nmo),e(x,jmo),e(x,Kh),e(Kh,zae),e(zae,Dmo),e(Kh,Gmo),e(Kh,NP),e(NP,Omo),e(Kh,Vmo),e(x,Xmo),e(x,Zh),e(Zh,Qae),e(Qae,zmo),e(Zh,Qmo),e(Zh,jP),e(jP,Wmo),e(Zh,Hmo),e(x,Umo),e(x,eu),e(eu,Wae),e(Wae,Jmo),e(eu,Ymo),e(eu,DP),e(DP,Kmo),e(eu,Zmo),e(x,efo),e(x,ou),e(ou,Hae),e(Hae,ofo),e(ou,rfo),e(ou,GP),e(GP,tfo),e(ou,afo),e(x,nfo),e(x,ru),e(ru,Uae),e(Uae,sfo),e(ru,lfo),e(ru,OP),e(OP,ifo),e(ru,dfo),e(x,cfo),e(x,tu),e(tu,Jae),e(Jae,mfo),e(tu,ffo),e(tu,VP),e(VP,gfo),e(tu,hfo),e(x,ufo),e(x,au),e(au,Yae),e(Yae,pfo),e(au,_fo),e(au,XP),e(XP,bfo),e(au,Ffo),e(x,vfo),e(x,nu),e(nu,Kae),e(Kae,Tfo),e(nu,Mfo),e(nu,zP),e(zP,Efo),e(nu,Cfo),e(x,wfo),e(x,su),e(su,Zae),e(Zae,Afo),e(su,yfo),e(su,QP),e(QP,Lfo),e(su,xfo),e(x,$fo),e(x,lu),e(lu,ene),e(ene,kfo),e(lu,Sfo),e(lu,WP),e(WP,Rfo),e(lu,Bfo),e(x,Pfo),e(x,iu),e(iu,one),e(one,Ifo),e(iu,qfo),e(iu,HP),e(HP,Nfo),e(iu,jfo),e(x,Dfo),e(x,du),e(du,rne),e(rne,Gfo),e(du,Ofo),e(du,UP),e(UP,Vfo),e(du,Xfo),e(x,zfo),e(x,cu),e(cu,tne),e(tne,Qfo),e(cu,Wfo),e(cu,JP),e(JP,Hfo),e(cu,Ufo),e(x,Jfo),e(x,mu),e(mu,ane),e(ane,Yfo),e(mu,Kfo),e(mu,YP),e(YP,Zfo),e(mu,ego),e(x,ogo),e(x,fu),e(fu,nne),e(nne,rgo),e(fu,tgo),e(fu,KP),e(KP,ago),e(fu,ngo),e(x,sgo),e(x,gu),e(gu,sne),e(sne,lgo),e(gu,igo),e(gu,ZP),e(ZP,dgo),e(gu,cgo),e(x,mgo),e(x,hu),e(hu,lne),e(lne,fgo),e(hu,ggo),e(hu,eI),e(eI,hgo),e(hu,ugo),e(x,pgo),e(x,uu),e(uu,ine),e(ine,_go),e(uu,bgo),e(uu,oI),e(oI,Fgo),e(uu,vgo),e(x,Tgo),e(x,pu),e(pu,dne),e(dne,Mgo),e(pu,Ego),e(pu,rI),e(rI,Cgo),e(pu,wgo),e(x,Ago),e(x,_u),e(_u,cne),e(cne,ygo),e(_u,Lgo),e(_u,tI),e(tI,xgo),e(_u,$go),e(x,kgo),e(x,Ss),e(Ss,mne),e(mne,Sgo),e(Ss,Rgo),e(Ss,aI),e(aI,Bgo),e(Ss,Pgo),e(Ss,nI),e(nI,Igo),e(Ss,qgo),e(x,Ngo),e(x,bu),e(bu,fne),e(fne,jgo),e(bu,Dgo),e(bu,sI),e(sI,Ggo),e(bu,Ogo),e(x,Vgo),e(x,Fu),e(Fu,gne),e(gne,Xgo),e(Fu,zgo),e(Fu,lI),e(lI,Qgo),e(Fu,Wgo),e(x,Hgo),e(x,vu),e(vu,hne),e(hne,Ugo),e(vu,Jgo),e(vu,iI),e(iI,Ygo),e(vu,Kgo),e(x,Zgo),e(x,Tu),e(Tu,une),e(une,eho),e(Tu,oho),e(Tu,dI),e(dI,rho),e(Tu,tho),e(x,aho),e(x,Mu),e(Mu,pne),e(pne,nho),e(Mu,sho),e(Mu,cI),e(cI,lho),e(Mu,iho),e(x,dho),e(x,Eu),e(Eu,_ne),e(_ne,cho),e(Eu,mho),e(Eu,mI),e(mI,fho),e(Eu,gho),e(x,hho),e(x,Cu),e(Cu,bne),e(bne,uho),e(Cu,pho),e(Cu,fI),e(fI,_ho),e(Cu,bho),e(x,Fho),e(x,wu),e(wu,Fne),e(Fne,vho),e(wu,Tho),e(wu,gI),e(gI,Mho),e(wu,Eho),e(x,Cho),e(x,Au),e(Au,vne),e(vne,who),e(Au,Aho),e(Au,hI),e(hI,yho),e(Au,Lho),e(x,xho),e(x,yu),e(yu,Tne),e(Tne,$ho),e(yu,kho),e(yu,uI),e(uI,Sho),e(yu,Rho),e(x,Bho),e(x,Lu),e(Lu,Mne),e(Mne,Pho),e(Lu,Iho),e(Lu,pI),e(pI,qho),e(Lu,Nho),e(x,jho),e(x,xu),e(xu,Ene),e(Ene,Dho),e(xu,Gho),e(xu,_I),e(_I,Oho),e(xu,Vho),e(x,Xho),e(x,$u),e($u,Cne),e(Cne,zho),e($u,Qho),e($u,bI),e(bI,Who),e($u,Hho),e(x,Uho),e(x,ku),e(ku,wne),e(wne,Jho),e(ku,Yho),e(ku,FI),e(FI,Kho),e(ku,Zho),e(x,euo),e(x,Su),e(Su,Ane),e(Ane,ouo),e(Su,ruo),e(Su,vI),e(vI,tuo),e(Su,auo),e(x,nuo),e(x,Ru),e(Ru,yne),e(yne,suo),e(Ru,luo),e(Ru,TI),e(TI,iuo),e(Ru,duo),e(x,cuo),e(x,Bu),e(Bu,Lne),e(Lne,muo),e(Bu,fuo),e(Bu,MI),e(MI,guo),e(Bu,huo),e(x,uuo),e(x,Pu),e(Pu,xne),e(xne,puo),e(Pu,_uo),e(Pu,EI),e(EI,buo),e(Pu,Fuo),e(x,vuo),e(x,Iu),e(Iu,$ne),e($ne,Tuo),e(Iu,Muo),e(Iu,CI),e(CI,Euo),e(Iu,Cuo),e(x,wuo),e(x,qu),e(qu,kne),e(kne,Auo),e(qu,yuo),e(qu,wI),e(wI,Luo),e(qu,xuo),e(x,$uo),e(x,Nu),e(Nu,Sne),e(Sne,kuo),e(Nu,Suo),e(Nu,AI),e(AI,Ruo),e(Nu,Buo),e(x,Puo),e(x,ju),e(ju,Rne),e(Rne,Iuo),e(ju,quo),e(ju,yI),e(yI,Nuo),e(ju,juo),e(x,Duo),e(x,Du),e(Du,Bne),e(Bne,Guo),e(Du,Ouo),e(Du,LI),e(LI,Vuo),e(Du,Xuo),e(x,zuo),e(x,Gu),e(Gu,Pne),e(Pne,Quo),e(Gu,Wuo),e(Gu,xI),e(xI,Huo),e(Gu,Uuo),e(x,Juo),e(x,Ou),e(Ou,Ine),e(Ine,Yuo),e(Ou,Kuo),e(Ou,$I),e($I,Zuo),e(Ou,epo),e(x,opo),e(x,Vu),e(Vu,qne),e(qne,rpo),e(Vu,tpo),e(Vu,kI),e(kI,apo),e(Vu,npo),e(x,spo),e(x,Xu),e(Xu,Nne),e(Nne,lpo),e(Xu,ipo),e(Xu,SI),e(SI,dpo),e(Xu,cpo),e(x,mpo),e(x,zu),e(zu,jne),e(jne,fpo),e(zu,gpo),e(zu,RI),e(RI,hpo),e(zu,upo),e(x,ppo),e(x,Qu),e(Qu,Dne),e(Dne,_po),e(Qu,bpo),e(Qu,BI),e(BI,Fpo),e(Qu,vpo),e(x,Tpo),e(x,Wu),e(Wu,Gne),e(Gne,Mpo),e(Wu,Epo),e(Wu,PI),e(PI,Cpo),e(Wu,wpo),e(x,Apo),e(x,Hu),e(Hu,One),e(One,ypo),e(Hu,Lpo),e(Hu,II),e(II,xpo),e(Hu,$po),e(x,kpo),e(x,Uu),e(Uu,Vne),e(Vne,Spo),e(Uu,Rpo),e(Uu,qI),e(qI,Bpo),e(Uu,Ppo),e(x,Ipo),e(x,Ju),e(Ju,Xne),e(Xne,qpo),e(Ju,Npo),e(Ju,NI),e(NI,jpo),e(Ju,Dpo),e(x,Gpo),e(x,Yu),e(Yu,zne),e(zne,Opo),e(Yu,Vpo),e(Yu,jI),e(jI,Xpo),e(Yu,zpo),e(x,Qpo),e(x,Ku),e(Ku,Qne),e(Qne,Wpo),e(Ku,Hpo),e(Ku,DI),e(DI,Upo),e(Ku,Jpo),e(x,Ypo),e(x,Zu),e(Zu,Wne),e(Wne,Kpo),e(Zu,Zpo),e(Zu,GI),e(GI,e_o),e(Zu,o_o),e(x,r_o),e(x,ep),e(ep,Hne),e(Hne,t_o),e(ep,a_o),e(ep,OI),e(OI,n_o),e(ep,s_o),e(x,l_o),e(x,op),e(op,Une),e(Une,i_o),e(op,d_o),e(op,VI),e(VI,c_o),e(op,m_o),e(x,f_o),e(x,rp),e(rp,Jne),e(Jne,g_o),e(rp,h_o),e(rp,XI),e(XI,u_o),e(rp,p_o),e(x,__o),e(x,tp),e(tp,Yne),e(Yne,b_o),e(tp,F_o),e(tp,zI),e(zI,v_o),e(tp,T_o),e(x,M_o),e(x,ap),e(ap,Kne),e(Kne,E_o),e(ap,C_o),e(ap,QI),e(QI,w_o),e(ap,A_o),e(x,y_o),e(x,np),e(np,Zne),e(Zne,L_o),e(np,x_o),e(np,WI),e(WI,$_o),e(np,k_o),e(x,S_o),e(x,sp),e(sp,ese),e(ese,R_o),e(sp,B_o),e(sp,HI),e(HI,P_o),e(sp,I_o),e(x,q_o),e(x,lp),e(lp,ose),e(ose,N_o),e(lp,j_o),e(lp,UI),e(UI,D_o),e(lp,G_o),e(x,O_o),e(x,ip),e(ip,rse),e(rse,V_o),e(ip,X_o),e(ip,JI),e(JI,z_o),e(ip,Q_o),e(x,W_o),e(x,dp),e(dp,tse),e(tse,H_o),e(dp,U_o),e(dp,YI),e(YI,J_o),e(dp,Y_o),e(x,K_o),e(x,cp),e(cp,ase),e(ase,Z_o),e(cp,ebo),e(cp,KI),e(KI,obo),e(cp,rbo),e(x,tbo),e(x,mp),e(mp,nse),e(nse,abo),e(mp,nbo),e(mp,ZI),e(ZI,sbo),e(mp,lbo),e(x,ibo),e(x,fp),e(fp,sse),e(sse,dbo),e(fp,cbo),e(fp,eq),e(eq,mbo),e(fp,fbo),e(x,gbo),e(x,gp),e(gp,lse),e(lse,hbo),e(gp,ubo),e(gp,oq),e(oq,pbo),e(gp,_bo),e(x,bbo),e(x,hp),e(hp,ise),e(ise,Fbo),e(hp,vbo),e(hp,rq),e(rq,Tbo),e(hp,Mbo),e(x,Ebo),e(x,up),e(up,dse),e(dse,Cbo),e(up,wbo),e(up,tq),e(tq,Abo),e(up,ybo),e(x,Lbo),e(x,pp),e(pp,cse),e(cse,xbo),e(pp,$bo),e(pp,aq),e(aq,kbo),e(pp,Sbo),e(x,Rbo),e(x,_p),e(_p,mse),e(mse,Bbo),e(_p,Pbo),e(_p,nq),e(nq,Ibo),e(_p,qbo),e(x,Nbo),e(x,bp),e(bp,fse),e(fse,jbo),e(bp,Dbo),e(bp,sq),e(sq,Gbo),e(bp,Obo),e(x,Vbo),e(x,Fp),e(Fp,gse),e(gse,Xbo),e(Fp,zbo),e(Fp,lq),e(lq,Qbo),e(Fp,Wbo),e(x,Hbo),e(x,vp),e(vp,hse),e(hse,Ubo),e(vp,Jbo),e(vp,iq),e(iq,Ybo),e(vp,Kbo),e(x,Zbo),e(x,Tp),e(Tp,use),e(use,e2o),e(Tp,o2o),e(Tp,dq),e(dq,r2o),e(Tp,t2o),e(x,a2o),e(x,Mp),e(Mp,pse),e(pse,n2o),e(Mp,s2o),e(Mp,cq),e(cq,l2o),e(Mp,i2o),e(x,d2o),e(x,Ep),e(Ep,_se),e(_se,c2o),e(Ep,m2o),e(Ep,mq),e(mq,f2o),e(Ep,g2o),e(x,h2o),e(x,Cp),e(Cp,bse),e(bse,u2o),e(Cp,p2o),e(Cp,fq),e(fq,_2o),e(Cp,b2o),e(x,F2o),e(x,wp),e(wp,Fse),e(Fse,v2o),e(wp,T2o),e(wp,gq),e(gq,M2o),e(wp,E2o),e(x,C2o),e(x,Ap),e(Ap,vse),e(vse,w2o),e(Ap,A2o),e(Ap,hq),e(hq,y2o),e(Ap,L2o),e(x,x2o),e(x,yp),e(yp,Tse),e(Tse,$2o),e(yp,k2o),e(yp,uq),e(uq,S2o),e(yp,R2o),e(He,B2o),e(He,Lp),e(Lp,P2o),e(Lp,Mse),e(Mse,I2o),e(Lp,q2o),e(Lp,Ese),e(Ese,N2o),e(He,j2o),M(xp,He,null),b(m,MPe,_),b(m,Ci,_),e(Ci,$p),e($p,Cse),M(Fy,Cse,null),e(Ci,D2o),e(Ci,wse),e(wse,G2o),b(m,EPe,_),b(m,xo,_),M(vy,xo,null),e(xo,O2o),e(xo,wi),e(wi,V2o),e(wi,pq),e(pq,X2o),e(wi,z2o),e(wi,_q),e(_q,Q2o),e(wi,W2o),e(xo,H2o),e(xo,Ty),e(Ty,U2o),e(Ty,Ase),e(Ase,J2o),e(Ty,Y2o),e(xo,K2o),e(xo,rt),M(My,rt,null),e(rt,Z2o),e(rt,yse),e(yse,eFo),e(rt,oFo),e(rt,Ai),e(Ai,rFo),e(Ai,Lse),e(Lse,tFo),e(Ai,aFo),e(Ai,bq),e(bq,nFo),e(Ai,sFo),e(rt,lFo),M(kp,rt,null),e(xo,iFo),e(xo,Ue),M(Ey,Ue,null),e(Ue,dFo),e(Ue,xse),e(xse,cFo),e(Ue,mFo),e(Ue,ya),e(ya,fFo),e(ya,$se),e($se,gFo),e(ya,hFo),e(ya,kse),e(kse,uFo),e(ya,pFo),e(ya,Sse),e(Sse,_Fo),e(ya,bFo),e(Ue,FFo),e(Ue,G),e(G,Sp),e(Sp,Rse),e(Rse,vFo),e(Sp,TFo),e(Sp,Fq),e(Fq,MFo),e(Sp,EFo),e(G,CFo),e(G,Rp),e(Rp,Bse),e(Bse,wFo),e(Rp,AFo),e(Rp,vq),e(vq,yFo),e(Rp,LFo),e(G,xFo),e(G,Bp),e(Bp,Pse),e(Pse,$Fo),e(Bp,kFo),e(Bp,Tq),e(Tq,SFo),e(Bp,RFo),e(G,BFo),e(G,Pp),e(Pp,Ise),e(Ise,PFo),e(Pp,IFo),e(Pp,Mq),e(Mq,qFo),e(Pp,NFo),e(G,jFo),e(G,Ip),e(Ip,qse),e(qse,DFo),e(Ip,GFo),e(Ip,Eq),e(Eq,OFo),e(Ip,VFo),e(G,XFo),e(G,qp),e(qp,Nse),e(Nse,zFo),e(qp,QFo),e(qp,Cq),e(Cq,WFo),e(qp,HFo),e(G,UFo),e(G,Np),e(Np,jse),e(jse,JFo),e(Np,YFo),e(Np,wq),e(wq,KFo),e(Np,ZFo),e(G,evo),e(G,jp),e(jp,Dse),e(Dse,ovo),e(jp,rvo),e(jp,Aq),e(Aq,tvo),e(jp,avo),e(G,nvo),e(G,Dp),e(Dp,Gse),e(Gse,svo),e(Dp,lvo),e(Dp,yq),e(yq,ivo),e(Dp,dvo),e(G,cvo),e(G,Gp),e(Gp,Ose),e(Ose,mvo),e(Gp,fvo),e(Gp,Lq),e(Lq,gvo),e(Gp,hvo),e(G,uvo),e(G,Op),e(Op,Vse),e(Vse,pvo),e(Op,_vo),e(Op,xq),e(xq,bvo),e(Op,Fvo),e(G,vvo),e(G,Vp),e(Vp,Xse),e(Xse,Tvo),e(Vp,Mvo),e(Vp,$q),e($q,Evo),e(Vp,Cvo),e(G,wvo),e(G,Xp),e(Xp,zse),e(zse,Avo),e(Xp,yvo),e(Xp,kq),e(kq,Lvo),e(Xp,xvo),e(G,$vo),e(G,zp),e(zp,Qse),e(Qse,kvo),e(zp,Svo),e(zp,Sq),e(Sq,Rvo),e(zp,Bvo),e(G,Pvo),e(G,Qp),e(Qp,Wse),e(Wse,Ivo),e(Qp,qvo),e(Qp,Rq),e(Rq,Nvo),e(Qp,jvo),e(G,Dvo),e(G,Wp),e(Wp,Hse),e(Hse,Gvo),e(Wp,Ovo),e(Wp,Bq),e(Bq,Vvo),e(Wp,Xvo),e(G,zvo),e(G,Hp),e(Hp,Use),e(Use,Qvo),e(Hp,Wvo),e(Hp,Pq),e(Pq,Hvo),e(Hp,Uvo),e(G,Jvo),e(G,Up),e(Up,Jse),e(Jse,Yvo),e(Up,Kvo),e(Up,Iq),e(Iq,Zvo),e(Up,e1o),e(G,o1o),e(G,Jp),e(Jp,Yse),e(Yse,r1o),e(Jp,t1o),e(Jp,qq),e(qq,a1o),e(Jp,n1o),e(G,s1o),e(G,Yp),e(Yp,Kse),e(Kse,l1o),e(Yp,i1o),e(Yp,Nq),e(Nq,d1o),e(Yp,c1o),e(G,m1o),e(G,Kp),e(Kp,Zse),e(Zse,f1o),e(Kp,g1o),e(Kp,jq),e(jq,h1o),e(Kp,u1o),e(G,p1o),e(G,Zp),e(Zp,ele),e(ele,_1o),e(Zp,b1o),e(Zp,Dq),e(Dq,F1o),e(Zp,v1o),e(G,T1o),e(G,e_),e(e_,ole),e(ole,M1o),e(e_,E1o),e(e_,Gq),e(Gq,C1o),e(e_,w1o),e(G,A1o),e(G,o_),e(o_,rle),e(rle,y1o),e(o_,L1o),e(o_,Oq),e(Oq,x1o),e(o_,$1o),e(G,k1o),e(G,r_),e(r_,tle),e(tle,S1o),e(r_,R1o),e(r_,Vq),e(Vq,B1o),e(r_,P1o),e(G,I1o),e(G,t_),e(t_,ale),e(ale,q1o),e(t_,N1o),e(t_,Xq),e(Xq,j1o),e(t_,D1o),e(G,G1o),e(G,a_),e(a_,nle),e(nle,O1o),e(a_,V1o),e(a_,zq),e(zq,X1o),e(a_,z1o),e(G,Q1o),e(G,n_),e(n_,sle),e(sle,W1o),e(n_,H1o),e(n_,Qq),e(Qq,U1o),e(n_,J1o),e(G,Y1o),e(G,s_),e(s_,lle),e(lle,K1o),e(s_,Z1o),e(s_,Wq),e(Wq,eTo),e(s_,oTo),e(G,rTo),e(G,l_),e(l_,ile),e(ile,tTo),e(l_,aTo),e(l_,Hq),e(Hq,nTo),e(l_,sTo),e(G,lTo),e(G,i_),e(i_,dle),e(dle,iTo),e(i_,dTo),e(i_,Uq),e(Uq,cTo),e(i_,mTo),e(G,fTo),e(G,d_),e(d_,cle),e(cle,gTo),e(d_,hTo),e(d_,Jq),e(Jq,uTo),e(d_,pTo),e(G,_To),e(G,c_),e(c_,mle),e(mle,bTo),e(c_,FTo),e(c_,Yq),e(Yq,vTo),e(c_,TTo),e(G,MTo),e(G,m_),e(m_,fle),e(fle,ETo),e(m_,CTo),e(m_,Kq),e(Kq,wTo),e(m_,ATo),e(G,yTo),e(G,f_),e(f_,gle),e(gle,LTo),e(f_,xTo),e(f_,Zq),e(Zq,$To),e(f_,kTo),e(G,STo),e(G,g_),e(g_,hle),e(hle,RTo),e(g_,BTo),e(g_,eN),e(eN,PTo),e(g_,ITo),e(G,qTo),e(G,h_),e(h_,ule),e(ule,NTo),e(h_,jTo),e(h_,oN),e(oN,DTo),e(h_,GTo),e(G,OTo),e(G,u_),e(u_,ple),e(ple,VTo),e(u_,XTo),e(u_,rN),e(rN,zTo),e(u_,QTo),e(G,WTo),e(G,p_),e(p_,_le),e(_le,HTo),e(p_,UTo),e(p_,tN),e(tN,JTo),e(p_,YTo),e(Ue,KTo),e(Ue,__),e(__,ZTo),e(__,ble),e(ble,eMo),e(__,oMo),e(__,Fle),e(Fle,rMo),e(Ue,tMo),M(b_,Ue,null),b(m,CPe,_),b(m,yi,_),e(yi,F_),e(F_,vle),M(Cy,vle,null),e(yi,aMo),e(yi,Tle),e(Tle,nMo),b(m,wPe,_),b(m,$o,_),M(wy,$o,null),e($o,sMo),e($o,Li),e(Li,lMo),e(Li,aN),e(aN,iMo),e(Li,dMo),e(Li,nN),e(nN,cMo),e(Li,mMo),e($o,fMo),e($o,Ay),e(Ay,gMo),e(Ay,Mle),e(Mle,hMo),e(Ay,uMo),e($o,pMo),e($o,tt),M(yy,tt,null),e(tt,_Mo),e(tt,Ele),e(Ele,bMo),e(tt,FMo),e(tt,xi),e(xi,vMo),e(xi,Cle),e(Cle,TMo),e(xi,MMo),e(xi,sN),e(sN,EMo),e(xi,CMo),e(tt,wMo),M(v_,tt,null),e($o,AMo),e($o,Je),M(Ly,Je,null),e(Je,yMo),e(Je,wle),e(wle,LMo),e(Je,xMo),e(Je,La),e(La,$Mo),e(La,Ale),e(Ale,kMo),e(La,SMo),e(La,yle),e(yle,RMo),e(La,BMo),e(La,Lle),e(Lle,PMo),e(La,IMo),e(Je,qMo),e(Je,z),e(z,T_),e(T_,xle),e(xle,NMo),e(T_,jMo),e(T_,lN),e(lN,DMo),e(T_,GMo),e(z,OMo),e(z,M_),e(M_,$le),e($le,VMo),e(M_,XMo),e(M_,iN),e(iN,zMo),e(M_,QMo),e(z,WMo),e(z,E_),e(E_,kle),e(kle,HMo),e(E_,UMo),e(E_,dN),e(dN,JMo),e(E_,YMo),e(z,KMo),e(z,C_),e(C_,Sle),e(Sle,ZMo),e(C_,e4o),e(C_,cN),e(cN,o4o),e(C_,r4o),e(z,t4o),e(z,w_),e(w_,Rle),e(Rle,a4o),e(w_,n4o),e(w_,mN),e(mN,s4o),e(w_,l4o),e(z,i4o),e(z,A_),e(A_,Ble),e(Ble,d4o),e(A_,c4o),e(A_,fN),e(fN,m4o),e(A_,f4o),e(z,g4o),e(z,y_),e(y_,Ple),e(Ple,h4o),e(y_,u4o),e(y_,gN),e(gN,p4o),e(y_,_4o),e(z,b4o),e(z,L_),e(L_,Ile),e(Ile,F4o),e(L_,v4o),e(L_,hN),e(hN,T4o),e(L_,M4o),e(z,E4o),e(z,x_),e(x_,qle),e(qle,C4o),e(x_,w4o),e(x_,uN),e(uN,A4o),e(x_,y4o),e(z,L4o),e(z,$_),e($_,Nle),e(Nle,x4o),e($_,$4o),e($_,pN),e(pN,k4o),e($_,S4o),e(z,R4o),e(z,k_),e(k_,jle),e(jle,B4o),e(k_,P4o),e(k_,_N),e(_N,I4o),e(k_,q4o),e(z,N4o),e(z,S_),e(S_,Dle),e(Dle,j4o),e(S_,D4o),e(S_,bN),e(bN,G4o),e(S_,O4o),e(z,V4o),e(z,R_),e(R_,Gle),e(Gle,X4o),e(R_,z4o),e(R_,FN),e(FN,Q4o),e(R_,W4o),e(z,H4o),e(z,B_),e(B_,Ole),e(Ole,U4o),e(B_,J4o),e(B_,vN),e(vN,Y4o),e(B_,K4o),e(z,Z4o),e(z,P_),e(P_,Vle),e(Vle,eEo),e(P_,oEo),e(P_,TN),e(TN,rEo),e(P_,tEo),e(z,aEo),e(z,I_),e(I_,Xle),e(Xle,nEo),e(I_,sEo),e(I_,MN),e(MN,lEo),e(I_,iEo),e(z,dEo),e(z,q_),e(q_,zle),e(zle,cEo),e(q_,mEo),e(q_,EN),e(EN,fEo),e(q_,gEo),e(z,hEo),e(z,N_),e(N_,Qle),e(Qle,uEo),e(N_,pEo),e(N_,CN),e(CN,_Eo),e(N_,bEo),e(z,FEo),e(z,j_),e(j_,Wle),e(Wle,vEo),e(j_,TEo),e(j_,wN),e(wN,MEo),e(j_,EEo),e(z,CEo),e(z,D_),e(D_,Hle),e(Hle,wEo),e(D_,AEo),e(D_,AN),e(AN,yEo),e(D_,LEo),e(z,xEo),e(z,G_),e(G_,Ule),e(Ule,$Eo),e(G_,kEo),e(G_,yN),e(yN,SEo),e(G_,REo),e(z,BEo),e(z,O_),e(O_,Jle),e(Jle,PEo),e(O_,IEo),e(O_,LN),e(LN,qEo),e(O_,NEo),e(z,jEo),e(z,V_),e(V_,Yle),e(Yle,DEo),e(V_,GEo),e(V_,xN),e(xN,OEo),e(V_,VEo),e(z,XEo),e(z,X_),e(X_,Kle),e(Kle,zEo),e(X_,QEo),e(X_,$N),e($N,WEo),e(X_,HEo),e(z,UEo),e(z,z_),e(z_,Zle),e(Zle,JEo),e(z_,YEo),e(z_,kN),e(kN,KEo),e(z_,ZEo),e(z,e5o),e(z,Q_),e(Q_,eie),e(eie,o5o),e(Q_,r5o),e(Q_,SN),e(SN,t5o),e(Q_,a5o),e(z,n5o),e(z,W_),e(W_,oie),e(oie,s5o),e(W_,l5o),e(W_,RN),e(RN,i5o),e(W_,d5o),e(z,c5o),e(z,H_),e(H_,rie),e(rie,m5o),e(H_,f5o),e(H_,BN),e(BN,g5o),e(H_,h5o),e(z,u5o),e(z,U_),e(U_,tie),e(tie,p5o),e(U_,_5o),e(U_,PN),e(PN,b5o),e(U_,F5o),e(z,v5o),e(z,J_),e(J_,aie),e(aie,T5o),e(J_,M5o),e(J_,IN),e(IN,E5o),e(J_,C5o),e(z,w5o),e(z,Y_),e(Y_,nie),e(nie,A5o),e(Y_,y5o),e(Y_,qN),e(qN,L5o),e(Y_,x5o),e(z,$5o),e(z,K_),e(K_,sie),e(sie,k5o),e(K_,S5o),e(K_,NN),e(NN,R5o),e(K_,B5o),e(z,P5o),e(z,Z_),e(Z_,lie),e(lie,I5o),e(Z_,q5o),e(Z_,jN),e(jN,N5o),e(Z_,j5o),e(z,D5o),e(z,eb),e(eb,iie),e(iie,G5o),e(eb,O5o),e(eb,DN),e(DN,V5o),e(eb,X5o),e(z,z5o),e(z,ob),e(ob,die),e(die,Q5o),e(ob,W5o),e(ob,GN),e(GN,H5o),e(ob,U5o),e(Je,J5o),e(Je,rb),e(rb,Y5o),e(rb,cie),e(cie,K5o),e(rb,Z5o),e(rb,mie),e(mie,eCo),e(Je,oCo),M(tb,Je,null),b(m,APe,_),b(m,$i,_),e($i,ab),e(ab,fie),M(xy,fie,null),e($i,rCo),e($i,gie),e(gie,tCo),b(m,yPe,_),b(m,ko,_),M($y,ko,null),e(ko,aCo),e(ko,ki),e(ki,nCo),e(ki,ON),e(ON,sCo),e(ki,lCo),e(ki,VN),e(VN,iCo),e(ki,dCo),e(ko,cCo),e(ko,ky),e(ky,mCo),e(ky,hie),e(hie,fCo),e(ky,gCo),e(ko,hCo),e(ko,at),M(Sy,at,null),e(at,uCo),e(at,uie),e(uie,pCo),e(at,_Co),e(at,Si),e(Si,bCo),e(Si,pie),e(pie,FCo),e(Si,vCo),e(Si,XN),e(XN,TCo),e(Si,MCo),e(at,ECo),M(nb,at,null),e(ko,CCo),e(ko,Ye),M(Ry,Ye,null),e(Ye,wCo),e(Ye,_ie),e(_ie,ACo),e(Ye,yCo),e(Ye,xa),e(xa,LCo),e(xa,bie),e(bie,xCo),e(xa,$Co),e(xa,Fie),e(Fie,kCo),e(xa,SCo),e(xa,vie),e(vie,RCo),e(xa,BCo),e(Ye,PCo),e(Ye,Q),e(Q,sb),e(sb,Tie),e(Tie,ICo),e(sb,qCo),e(sb,zN),e(zN,NCo),e(sb,jCo),e(Q,DCo),e(Q,lb),e(lb,Mie),e(Mie,GCo),e(lb,OCo),e(lb,QN),e(QN,VCo),e(lb,XCo),e(Q,zCo),e(Q,ib),e(ib,Eie),e(Eie,QCo),e(ib,WCo),e(ib,WN),e(WN,HCo),e(ib,UCo),e(Q,JCo),e(Q,db),e(db,Cie),e(Cie,YCo),e(db,KCo),e(db,HN),e(HN,ZCo),e(db,e3o),e(Q,o3o),e(Q,cb),e(cb,wie),e(wie,r3o),e(cb,t3o),e(cb,UN),e(UN,a3o),e(cb,n3o),e(Q,s3o),e(Q,mb),e(mb,Aie),e(Aie,l3o),e(mb,i3o),e(mb,JN),e(JN,d3o),e(mb,c3o),e(Q,m3o),e(Q,fb),e(fb,yie),e(yie,f3o),e(fb,g3o),e(fb,YN),e(YN,h3o),e(fb,u3o),e(Q,p3o),e(Q,gb),e(gb,Lie),e(Lie,_3o),e(gb,b3o),e(gb,KN),e(KN,F3o),e(gb,v3o),e(Q,T3o),e(Q,hb),e(hb,xie),e(xie,M3o),e(hb,E3o),e(hb,ZN),e(ZN,C3o),e(hb,w3o),e(Q,A3o),e(Q,ub),e(ub,$ie),e($ie,y3o),e(ub,L3o),e(ub,ej),e(ej,x3o),e(ub,$3o),e(Q,k3o),e(Q,pb),e(pb,kie),e(kie,S3o),e(pb,R3o),e(pb,oj),e(oj,B3o),e(pb,P3o),e(Q,I3o),e(Q,_b),e(_b,Sie),e(Sie,q3o),e(_b,N3o),e(_b,rj),e(rj,j3o),e(_b,D3o),e(Q,G3o),e(Q,bb),e(bb,Rie),e(Rie,O3o),e(bb,V3o),e(bb,tj),e(tj,X3o),e(bb,z3o),e(Q,Q3o),e(Q,Fb),e(Fb,Bie),e(Bie,W3o),e(Fb,H3o),e(Fb,aj),e(aj,U3o),e(Fb,J3o),e(Q,Y3o),e(Q,vb),e(vb,Pie),e(Pie,K3o),e(vb,Z3o),e(vb,nj),e(nj,ewo),e(vb,owo),e(Q,rwo),e(Q,Tb),e(Tb,Iie),e(Iie,two),e(Tb,awo),e(Tb,sj),e(sj,nwo),e(Tb,swo),e(Q,lwo),e(Q,Mb),e(Mb,qie),e(qie,iwo),e(Mb,dwo),e(Mb,lj),e(lj,cwo),e(Mb,mwo),e(Q,fwo),e(Q,Eb),e(Eb,Nie),e(Nie,gwo),e(Eb,hwo),e(Eb,ij),e(ij,uwo),e(Eb,pwo),e(Q,_wo),e(Q,Cb),e(Cb,jie),e(jie,bwo),e(Cb,Fwo),e(Cb,dj),e(dj,vwo),e(Cb,Two),e(Q,Mwo),e(Q,wb),e(wb,Die),e(Die,Ewo),e(wb,Cwo),e(wb,cj),e(cj,wwo),e(wb,Awo),e(Q,ywo),e(Q,Ab),e(Ab,Gie),e(Gie,Lwo),e(Ab,xwo),e(Ab,mj),e(mj,$wo),e(Ab,kwo),e(Q,Swo),e(Q,yb),e(yb,Oie),e(Oie,Rwo),e(yb,Bwo),e(yb,fj),e(fj,Pwo),e(yb,Iwo),e(Q,qwo),e(Q,Lb),e(Lb,Vie),e(Vie,Nwo),e(Lb,jwo),e(Lb,gj),e(gj,Dwo),e(Lb,Gwo),e(Q,Owo),e(Q,xb),e(xb,Xie),e(Xie,Vwo),e(xb,Xwo),e(xb,hj),e(hj,zwo),e(xb,Qwo),e(Q,Wwo),e(Q,$b),e($b,zie),e(zie,Hwo),e($b,Uwo),e($b,uj),e(uj,Jwo),e($b,Ywo),e(Q,Kwo),e(Q,kb),e(kb,Qie),e(Qie,Zwo),e(kb,eAo),e(kb,pj),e(pj,oAo),e(kb,rAo),e(Q,tAo),e(Q,Sb),e(Sb,Wie),e(Wie,aAo),e(Sb,nAo),e(Sb,_j),e(_j,sAo),e(Sb,lAo),e(Q,iAo),e(Q,Rb),e(Rb,Hie),e(Hie,dAo),e(Rb,cAo),e(Rb,bj),e(bj,mAo),e(Rb,fAo),e(Q,gAo),e(Q,Bb),e(Bb,Uie),e(Uie,hAo),e(Bb,uAo),e(Bb,Fj),e(Fj,pAo),e(Bb,_Ao),e(Q,bAo),e(Q,Pb),e(Pb,Jie),e(Jie,FAo),e(Pb,vAo),e(Pb,vj),e(vj,TAo),e(Pb,MAo),e(Q,EAo),e(Q,Ib),e(Ib,Yie),e(Yie,CAo),e(Ib,wAo),e(Ib,Kie),e(Kie,AAo),e(Ib,yAo),e(Q,LAo),e(Q,qb),e(qb,Zie),e(Zie,xAo),e(qb,$Ao),e(qb,Tj),e(Tj,kAo),e(qb,SAo),e(Q,RAo),e(Q,Nb),e(Nb,ede),e(ede,BAo),e(Nb,PAo),e(Nb,Mj),e(Mj,IAo),e(Nb,qAo),e(Q,NAo),e(Q,jb),e(jb,ode),e(ode,jAo),e(jb,DAo),e(jb,Ej),e(Ej,GAo),e(jb,OAo),e(Q,VAo),e(Q,Db),e(Db,rde),e(rde,XAo),e(Db,zAo),e(Db,Cj),e(Cj,QAo),e(Db,WAo),e(Ye,HAo),e(Ye,Gb),e(Gb,UAo),e(Gb,tde),e(tde,JAo),e(Gb,YAo),e(Gb,ade),e(ade,KAo),e(Ye,ZAo),M(Ob,Ye,null),b(m,LPe,_),b(m,Ri,_),e(Ri,Vb),e(Vb,nde),M(By,nde,null),e(Ri,e0o),e(Ri,sde),e(sde,o0o),b(m,xPe,_),b(m,So,_),M(Py,So,null),e(So,r0o),e(So,Bi),e(Bi,t0o),e(Bi,wj),e(wj,a0o),e(Bi,n0o),e(Bi,Aj),e(Aj,s0o),e(Bi,l0o),e(So,i0o),e(So,Iy),e(Iy,d0o),e(Iy,lde),e(lde,c0o),e(Iy,m0o),e(So,f0o),e(So,nt),M(qy,nt,null),e(nt,g0o),e(nt,ide),e(ide,h0o),e(nt,u0o),e(nt,Pi),e(Pi,p0o),e(Pi,dde),e(dde,_0o),e(Pi,b0o),e(Pi,yj),e(yj,F0o),e(Pi,v0o),e(nt,T0o),M(Xb,nt,null),e(So,M0o),e(So,Ke),M(Ny,Ke,null),e(Ke,E0o),e(Ke,cde),e(cde,C0o),e(Ke,w0o),e(Ke,$a),e($a,A0o),e($a,mde),e(mde,y0o),e($a,L0o),e($a,fde),e(fde,x0o),e($a,$0o),e($a,gde),e(gde,k0o),e($a,S0o),e(Ke,R0o),e(Ke,he),e(he,zb),e(zb,hde),e(hde,B0o),e(zb,P0o),e(zb,Lj),e(Lj,I0o),e(zb,q0o),e(he,N0o),e(he,Qb),e(Qb,ude),e(ude,j0o),e(Qb,D0o),e(Qb,xj),e(xj,G0o),e(Qb,O0o),e(he,V0o),e(he,Wb),e(Wb,pde),e(pde,X0o),e(Wb,z0o),e(Wb,$j),e($j,Q0o),e(Wb,W0o),e(he,H0o),e(he,Hb),e(Hb,_de),e(_de,U0o),e(Hb,J0o),e(Hb,kj),e(kj,Y0o),e(Hb,K0o),e(he,Z0o),e(he,Ub),e(Ub,bde),e(bde,e6o),e(Ub,o6o),e(Ub,Sj),e(Sj,r6o),e(Ub,t6o),e(he,a6o),e(he,Jb),e(Jb,Fde),e(Fde,n6o),e(Jb,s6o),e(Jb,Rj),e(Rj,l6o),e(Jb,i6o),e(he,d6o),e(he,Yb),e(Yb,vde),e(vde,c6o),e(Yb,m6o),e(Yb,Bj),e(Bj,f6o),e(Yb,g6o),e(he,h6o),e(he,Kb),e(Kb,Tde),e(Tde,u6o),e(Kb,p6o),e(Kb,Pj),e(Pj,_6o),e(Kb,b6o),e(he,F6o),e(he,Zb),e(Zb,Mde),e(Mde,v6o),e(Zb,T6o),e(Zb,Ij),e(Ij,M6o),e(Zb,E6o),e(he,C6o),e(he,e2),e(e2,Ede),e(Ede,w6o),e(e2,A6o),e(e2,qj),e(qj,y6o),e(e2,L6o),e(he,x6o),e(he,o2),e(o2,Cde),e(Cde,$6o),e(o2,k6o),e(o2,Nj),e(Nj,S6o),e(o2,R6o),e(he,B6o),e(he,r2),e(r2,wde),e(wde,P6o),e(r2,I6o),e(r2,jj),e(jj,q6o),e(r2,N6o),e(he,j6o),e(he,t2),e(t2,Ade),e(Ade,D6o),e(t2,G6o),e(t2,Dj),e(Dj,O6o),e(t2,V6o),e(he,X6o),e(he,a2),e(a2,yde),e(yde,z6o),e(a2,Q6o),e(a2,Gj),e(Gj,W6o),e(a2,H6o),e(he,U6o),e(he,n2),e(n2,Lde),e(Lde,J6o),e(n2,Y6o),e(n2,Oj),e(Oj,K6o),e(n2,Z6o),e(he,eyo),e(he,s2),e(s2,xde),e(xde,oyo),e(s2,ryo),e(s2,Vj),e(Vj,tyo),e(s2,ayo),e(he,nyo),e(he,l2),e(l2,$de),e($de,syo),e(l2,lyo),e(l2,Xj),e(Xj,iyo),e(l2,dyo),e(Ke,cyo),e(Ke,i2),e(i2,myo),e(i2,kde),e(kde,fyo),e(i2,gyo),e(i2,Sde),e(Sde,hyo),e(Ke,uyo),M(d2,Ke,null),b(m,$Pe,_),b(m,Ii,_),e(Ii,c2),e(c2,Rde),M(jy,Rde,null),e(Ii,pyo),e(Ii,Bde),e(Bde,_yo),b(m,kPe,_),b(m,Ro,_),M(Dy,Ro,null),e(Ro,byo),e(Ro,qi),e(qi,Fyo),e(qi,zj),e(zj,vyo),e(qi,Tyo),e(qi,Qj),e(Qj,Myo),e(qi,Eyo),e(Ro,Cyo),e(Ro,Gy),e(Gy,wyo),e(Gy,Pde),e(Pde,Ayo),e(Gy,yyo),e(Ro,Lyo),e(Ro,st),M(Oy,st,null),e(st,xyo),e(st,Ide),e(Ide,$yo),e(st,kyo),e(st,Ni),e(Ni,Syo),e(Ni,qde),e(qde,Ryo),e(Ni,Byo),e(Ni,Wj),e(Wj,Pyo),e(Ni,Iyo),e(st,qyo),M(m2,st,null),e(Ro,Nyo),e(Ro,Ze),M(Vy,Ze,null),e(Ze,jyo),e(Ze,Nde),e(Nde,Dyo),e(Ze,Gyo),e(Ze,ka),e(ka,Oyo),e(ka,jde),e(jde,Vyo),e(ka,Xyo),e(ka,Dde),e(Dde,zyo),e(ka,Qyo),e(ka,Gde),e(Gde,Wyo),e(ka,Hyo),e(Ze,Uyo),e(Ze,q),e(q,f2),e(f2,Ode),e(Ode,Jyo),e(f2,Yyo),e(f2,Hj),e(Hj,Kyo),e(f2,Zyo),e(q,eLo),e(q,g2),e(g2,Vde),e(Vde,oLo),e(g2,rLo),e(g2,Uj),e(Uj,tLo),e(g2,aLo),e(q,nLo),e(q,h2),e(h2,Xde),e(Xde,sLo),e(h2,lLo),e(h2,Jj),e(Jj,iLo),e(h2,dLo),e(q,cLo),e(q,u2),e(u2,zde),e(zde,mLo),e(u2,fLo),e(u2,Yj),e(Yj,gLo),e(u2,hLo),e(q,uLo),e(q,p2),e(p2,Qde),e(Qde,pLo),e(p2,_Lo),e(p2,Kj),e(Kj,bLo),e(p2,FLo),e(q,vLo),e(q,_2),e(_2,Wde),e(Wde,TLo),e(_2,MLo),e(_2,Zj),e(Zj,ELo),e(_2,CLo),e(q,wLo),e(q,b2),e(b2,Hde),e(Hde,ALo),e(b2,yLo),e(b2,eD),e(eD,LLo),e(b2,xLo),e(q,$Lo),e(q,F2),e(F2,Ude),e(Ude,kLo),e(F2,SLo),e(F2,oD),e(oD,RLo),e(F2,BLo),e(q,PLo),e(q,v2),e(v2,Jde),e(Jde,ILo),e(v2,qLo),e(v2,rD),e(rD,NLo),e(v2,jLo),e(q,DLo),e(q,T2),e(T2,Yde),e(Yde,GLo),e(T2,OLo),e(T2,tD),e(tD,VLo),e(T2,XLo),e(q,zLo),e(q,M2),e(M2,Kde),e(Kde,QLo),e(M2,WLo),e(M2,aD),e(aD,HLo),e(M2,ULo),e(q,JLo),e(q,E2),e(E2,Zde),e(Zde,YLo),e(E2,KLo),e(E2,nD),e(nD,ZLo),e(E2,e8o),e(q,o8o),e(q,C2),e(C2,ece),e(ece,r8o),e(C2,t8o),e(C2,sD),e(sD,a8o),e(C2,n8o),e(q,s8o),e(q,w2),e(w2,oce),e(oce,l8o),e(w2,i8o),e(w2,lD),e(lD,d8o),e(w2,c8o),e(q,m8o),e(q,A2),e(A2,rce),e(rce,f8o),e(A2,g8o),e(A2,iD),e(iD,h8o),e(A2,u8o),e(q,p8o),e(q,y2),e(y2,tce),e(tce,_8o),e(y2,b8o),e(y2,dD),e(dD,F8o),e(y2,v8o),e(q,T8o),e(q,L2),e(L2,ace),e(ace,M8o),e(L2,E8o),e(L2,cD),e(cD,C8o),e(L2,w8o),e(q,A8o),e(q,x2),e(x2,nce),e(nce,y8o),e(x2,L8o),e(x2,mD),e(mD,x8o),e(x2,$8o),e(q,k8o),e(q,$2),e($2,sce),e(sce,S8o),e($2,R8o),e($2,fD),e(fD,B8o),e($2,P8o),e(q,I8o),e(q,k2),e(k2,lce),e(lce,q8o),e(k2,N8o),e(k2,gD),e(gD,j8o),e(k2,D8o),e(q,G8o),e(q,S2),e(S2,ice),e(ice,O8o),e(S2,V8o),e(S2,hD),e(hD,X8o),e(S2,z8o),e(q,Q8o),e(q,R2),e(R2,dce),e(dce,W8o),e(R2,H8o),e(R2,uD),e(uD,U8o),e(R2,J8o),e(q,Y8o),e(q,B2),e(B2,cce),e(cce,K8o),e(B2,Z8o),e(B2,pD),e(pD,exo),e(B2,oxo),e(q,rxo),e(q,P2),e(P2,mce),e(mce,txo),e(P2,axo),e(P2,_D),e(_D,nxo),e(P2,sxo),e(q,lxo),e(q,I2),e(I2,fce),e(fce,ixo),e(I2,dxo),e(I2,bD),e(bD,cxo),e(I2,mxo),e(q,fxo),e(q,q2),e(q2,gce),e(gce,gxo),e(q2,hxo),e(q2,FD),e(FD,uxo),e(q2,pxo),e(q,_xo),e(q,N2),e(N2,hce),e(hce,bxo),e(N2,Fxo),e(N2,vD),e(vD,vxo),e(N2,Txo),e(q,Mxo),e(q,j2),e(j2,uce),e(uce,Exo),e(j2,Cxo),e(j2,TD),e(TD,wxo),e(j2,Axo),e(q,yxo),e(q,D2),e(D2,pce),e(pce,Lxo),e(D2,xxo),e(D2,MD),e(MD,$xo),e(D2,kxo),e(q,Sxo),e(q,G2),e(G2,_ce),e(_ce,Rxo),e(G2,Bxo),e(G2,ED),e(ED,Pxo),e(G2,Ixo),e(q,qxo),e(q,O2),e(O2,bce),e(bce,Nxo),e(O2,jxo),e(O2,CD),e(CD,Dxo),e(O2,Gxo),e(q,Oxo),e(q,V2),e(V2,Fce),e(Fce,Vxo),e(V2,Xxo),e(V2,wD),e(wD,zxo),e(V2,Qxo),e(q,Wxo),e(q,X2),e(X2,vce),e(vce,Hxo),e(X2,Uxo),e(X2,AD),e(AD,Jxo),e(X2,Yxo),e(q,Kxo),e(q,z2),e(z2,Tce),e(Tce,Zxo),e(z2,e7o),e(z2,yD),e(yD,o7o),e(z2,r7o),e(q,t7o),e(q,Q2),e(Q2,Mce),e(Mce,a7o),e(Q2,n7o),e(Q2,LD),e(LD,s7o),e(Q2,l7o),e(q,i7o),e(q,W2),e(W2,Ece),e(Ece,d7o),e(W2,c7o),e(W2,xD),e(xD,m7o),e(W2,f7o),e(q,g7o),e(q,H2),e(H2,Cce),e(Cce,h7o),e(H2,u7o),e(H2,$D),e($D,p7o),e(H2,_7o),e(q,b7o),e(q,U2),e(U2,wce),e(wce,F7o),e(U2,v7o),e(U2,kD),e(kD,T7o),e(U2,M7o),e(q,E7o),e(q,J2),e(J2,Ace),e(Ace,C7o),e(J2,w7o),e(J2,SD),e(SD,A7o),e(J2,y7o),e(q,L7o),e(q,Y2),e(Y2,yce),e(yce,x7o),e(Y2,$7o),e(Y2,RD),e(RD,k7o),e(Y2,S7o),e(q,R7o),e(q,K2),e(K2,Lce),e(Lce,B7o),e(K2,P7o),e(K2,BD),e(BD,I7o),e(K2,q7o),e(q,N7o),e(q,Z2),e(Z2,xce),e(xce,j7o),e(Z2,D7o),e(Z2,PD),e(PD,G7o),e(Z2,O7o),e(q,V7o),e(q,eF),e(eF,$ce),e($ce,X7o),e(eF,z7o),e(eF,ID),e(ID,Q7o),e(eF,W7o),e(q,H7o),e(q,oF),e(oF,kce),e(kce,U7o),e(oF,J7o),e(oF,qD),e(qD,Y7o),e(oF,K7o),e(q,Z7o),e(q,rF),e(rF,Sce),e(Sce,e9o),e(rF,o9o),e(rF,ND),e(ND,r9o),e(rF,t9o),e(q,a9o),e(q,tF),e(tF,Rce),e(Rce,n9o),e(tF,s9o),e(tF,jD),e(jD,l9o),e(tF,i9o),e(q,d9o),e(q,aF),e(aF,Bce),e(Bce,c9o),e(aF,m9o),e(aF,DD),e(DD,f9o),e(aF,g9o),e(Ze,h9o),e(Ze,nF),e(nF,u9o),e(nF,Pce),e(Pce,p9o),e(nF,_9o),e(nF,Ice),e(Ice,b9o),e(Ze,F9o),M(sF,Ze,null),b(m,SPe,_),b(m,ji,_),e(ji,lF),e(lF,qce),M(Xy,qce,null),e(ji,v9o),e(ji,Nce),e(Nce,T9o),b(m,RPe,_),b(m,Bo,_),M(zy,Bo,null),e(Bo,M9o),e(Bo,Di),e(Di,E9o),e(Di,GD),e(GD,C9o),e(Di,w9o),e(Di,OD),e(OD,A9o),e(Di,y9o),e(Bo,L9o),e(Bo,Qy),e(Qy,x9o),e(Qy,jce),e(jce,$9o),e(Qy,k9o),e(Bo,S9o),e(Bo,lt),M(Wy,lt,null),e(lt,R9o),e(lt,Dce),e(Dce,B9o),e(lt,P9o),e(lt,Gi),e(Gi,I9o),e(Gi,Gce),e(Gce,q9o),e(Gi,N9o),e(Gi,VD),e(VD,j9o),e(Gi,D9o),e(lt,G9o),M(iF,lt,null),e(Bo,O9o),e(Bo,eo),M(Hy,eo,null),e(eo,V9o),e(eo,Oce),e(Oce,X9o),e(eo,z9o),e(eo,Sa),e(Sa,Q9o),e(Sa,Vce),e(Vce,W9o),e(Sa,H9o),e(Sa,Xce),e(Xce,U9o),e(Sa,J9o),e(Sa,zce),e(zce,Y9o),e(Sa,K9o),e(eo,Z9o),e(eo,Y),e(Y,dF),e(dF,Qce),e(Qce,e$o),e(dF,o$o),e(dF,XD),e(XD,r$o),e(dF,t$o),e(Y,a$o),e(Y,cF),e(cF,Wce),e(Wce,n$o),e(cF,s$o),e(cF,zD),e(zD,l$o),e(cF,i$o),e(Y,d$o),e(Y,mF),e(mF,Hce),e(Hce,c$o),e(mF,m$o),e(mF,QD),e(QD,f$o),e(mF,g$o),e(Y,h$o),e(Y,fF),e(fF,Uce),e(Uce,u$o),e(fF,p$o),e(fF,WD),e(WD,_$o),e(fF,b$o),e(Y,F$o),e(Y,gF),e(gF,Jce),e(Jce,v$o),e(gF,T$o),e(gF,HD),e(HD,M$o),e(gF,E$o),e(Y,C$o),e(Y,hF),e(hF,Yce),e(Yce,w$o),e(hF,A$o),e(hF,UD),e(UD,y$o),e(hF,L$o),e(Y,x$o),e(Y,uF),e(uF,Kce),e(Kce,$$o),e(uF,k$o),e(uF,JD),e(JD,S$o),e(uF,R$o),e(Y,B$o),e(Y,pF),e(pF,Zce),e(Zce,P$o),e(pF,I$o),e(pF,YD),e(YD,q$o),e(pF,N$o),e(Y,j$o),e(Y,_F),e(_F,eme),e(eme,D$o),e(_F,G$o),e(_F,KD),e(KD,O$o),e(_F,V$o),e(Y,X$o),e(Y,bF),e(bF,ome),e(ome,z$o),e(bF,Q$o),e(bF,ZD),e(ZD,W$o),e(bF,H$o),e(Y,U$o),e(Y,FF),e(FF,rme),e(rme,J$o),e(FF,Y$o),e(FF,eG),e(eG,K$o),e(FF,Z$o),e(Y,eko),e(Y,vF),e(vF,tme),e(tme,oko),e(vF,rko),e(vF,oG),e(oG,tko),e(vF,ako),e(Y,nko),e(Y,TF),e(TF,ame),e(ame,sko),e(TF,lko),e(TF,rG),e(rG,iko),e(TF,dko),e(Y,cko),e(Y,MF),e(MF,nme),e(nme,mko),e(MF,fko),e(MF,tG),e(tG,gko),e(MF,hko),e(Y,uko),e(Y,EF),e(EF,sme),e(sme,pko),e(EF,_ko),e(EF,aG),e(aG,bko),e(EF,Fko),e(Y,vko),e(Y,CF),e(CF,lme),e(lme,Tko),e(CF,Mko),e(CF,nG),e(nG,Eko),e(CF,Cko),e(Y,wko),e(Y,wF),e(wF,ime),e(ime,Ako),e(wF,yko),e(wF,sG),e(sG,Lko),e(wF,xko),e(Y,$ko),e(Y,AF),e(AF,dme),e(dme,kko),e(AF,Sko),e(AF,lG),e(lG,Rko),e(AF,Bko),e(Y,Pko),e(Y,yF),e(yF,cme),e(cme,Iko),e(yF,qko),e(yF,iG),e(iG,Nko),e(yF,jko),e(Y,Dko),e(Y,LF),e(LF,mme),e(mme,Gko),e(LF,Oko),e(LF,dG),e(dG,Vko),e(LF,Xko),e(Y,zko),e(Y,xF),e(xF,fme),e(fme,Qko),e(xF,Wko),e(xF,cG),e(cG,Hko),e(xF,Uko),e(Y,Jko),e(Y,$F),e($F,gme),e(gme,Yko),e($F,Kko),e($F,mG),e(mG,Zko),e($F,eSo),e(Y,oSo),e(Y,kF),e(kF,hme),e(hme,rSo),e(kF,tSo),e(kF,fG),e(fG,aSo),e(kF,nSo),e(Y,sSo),e(Y,SF),e(SF,ume),e(ume,lSo),e(SF,iSo),e(SF,gG),e(gG,dSo),e(SF,cSo),e(Y,mSo),e(Y,RF),e(RF,pme),e(pme,fSo),e(RF,gSo),e(RF,hG),e(hG,hSo),e(RF,uSo),e(Y,pSo),e(Y,BF),e(BF,_me),e(_me,_So),e(BF,bSo),e(BF,uG),e(uG,FSo),e(BF,vSo),e(Y,TSo),e(Y,PF),e(PF,bme),e(bme,MSo),e(PF,ESo),e(PF,pG),e(pG,CSo),e(PF,wSo),e(Y,ASo),e(Y,IF),e(IF,Fme),e(Fme,ySo),e(IF,LSo),e(IF,_G),e(_G,xSo),e(IF,$So),e(Y,kSo),e(Y,qF),e(qF,vme),e(vme,SSo),e(qF,RSo),e(qF,bG),e(bG,BSo),e(qF,PSo),e(eo,ISo),e(eo,NF),e(NF,qSo),e(NF,Tme),e(Tme,NSo),e(NF,jSo),e(NF,Mme),e(Mme,DSo),e(eo,GSo),M(jF,eo,null),b(m,BPe,_),b(m,Oi,_),e(Oi,DF),e(DF,Eme),M(Uy,Eme,null),e(Oi,OSo),e(Oi,Cme),e(Cme,VSo),b(m,PPe,_),b(m,Po,_),M(Jy,Po,null),e(Po,XSo),e(Po,Vi),e(Vi,zSo),e(Vi,FG),e(FG,QSo),e(Vi,WSo),e(Vi,vG),e(vG,HSo),e(Vi,USo),e(Po,JSo),e(Po,Yy),e(Yy,YSo),e(Yy,wme),e(wme,KSo),e(Yy,ZSo),e(Po,eRo),e(Po,it),M(Ky,it,null),e(it,oRo),e(it,Ame),e(Ame,rRo),e(it,tRo),e(it,Xi),e(Xi,aRo),e(Xi,yme),e(yme,nRo),e(Xi,sRo),e(Xi,TG),e(TG,lRo),e(Xi,iRo),e(it,dRo),M(GF,it,null),e(Po,cRo),e(Po,oo),M(Zy,oo,null),e(oo,mRo),e(oo,Lme),e(Lme,fRo),e(oo,gRo),e(oo,Ra),e(Ra,hRo),e(Ra,xme),e(xme,uRo),e(Ra,pRo),e(Ra,$me),e($me,_Ro),e(Ra,bRo),e(Ra,kme),e(kme,FRo),e(Ra,vRo),e(oo,TRo),e(oo,Yr),e(Yr,OF),e(OF,Sme),e(Sme,MRo),e(OF,ERo),e(OF,MG),e(MG,CRo),e(OF,wRo),e(Yr,ARo),e(Yr,VF),e(VF,Rme),e(Rme,yRo),e(VF,LRo),e(VF,EG),e(EG,xRo),e(VF,$Ro),e(Yr,kRo),e(Yr,XF),e(XF,Bme),e(Bme,SRo),e(XF,RRo),e(XF,CG),e(CG,BRo),e(XF,PRo),e(Yr,IRo),e(Yr,zF),e(zF,Pme),e(Pme,qRo),e(zF,NRo),e(zF,wG),e(wG,jRo),e(zF,DRo),e(Yr,GRo),e(Yr,QF),e(QF,Ime),e(Ime,ORo),e(QF,VRo),e(QF,AG),e(AG,XRo),e(QF,zRo),e(oo,QRo),e(oo,WF),e(WF,WRo),e(WF,qme),e(qme,HRo),e(WF,URo),e(WF,Nme),e(Nme,JRo),e(oo,YRo),M(HF,oo,null),b(m,IPe,_),b(m,zi,_),e(zi,UF),e(UF,jme),M(eL,jme,null),e(zi,KRo),e(zi,Dme),e(Dme,ZRo),b(m,qPe,_),b(m,Io,_),M(oL,Io,null),e(Io,eBo),e(Io,Qi),e(Qi,oBo),e(Qi,yG),e(yG,rBo),e(Qi,tBo),e(Qi,LG),e(LG,aBo),e(Qi,nBo),e(Io,sBo),e(Io,rL),e(rL,lBo),e(rL,Gme),e(Gme,iBo),e(rL,dBo),e(Io,cBo),e(Io,dt),M(tL,dt,null),e(dt,mBo),e(dt,Ome),e(Ome,fBo),e(dt,gBo),e(dt,Wi),e(Wi,hBo),e(Wi,Vme),e(Vme,uBo),e(Wi,pBo),e(Wi,xG),e(xG,_Bo),e(Wi,bBo),e(dt,FBo),M(JF,dt,null),e(Io,vBo),e(Io,ro),M(aL,ro,null),e(ro,TBo),e(ro,Xme),e(Xme,MBo),e(ro,EBo),e(ro,Ba),e(Ba,CBo),e(Ba,zme),e(zme,wBo),e(Ba,ABo),e(Ba,Qme),e(Qme,yBo),e(Ba,LBo),e(Ba,Wme),e(Wme,xBo),e(Ba,$Bo),e(ro,kBo),e(ro,U),e(U,YF),e(YF,Hme),e(Hme,SBo),e(YF,RBo),e(YF,$G),e($G,BBo),e(YF,PBo),e(U,IBo),e(U,KF),e(KF,Ume),e(Ume,qBo),e(KF,NBo),e(KF,kG),e(kG,jBo),e(KF,DBo),e(U,GBo),e(U,ZF),e(ZF,Jme),e(Jme,OBo),e(ZF,VBo),e(ZF,SG),e(SG,XBo),e(ZF,zBo),e(U,QBo),e(U,ev),e(ev,Yme),e(Yme,WBo),e(ev,HBo),e(ev,RG),e(RG,UBo),e(ev,JBo),e(U,YBo),e(U,ov),e(ov,Kme),e(Kme,KBo),e(ov,ZBo),e(ov,BG),e(BG,ePo),e(ov,oPo),e(U,rPo),e(U,rv),e(rv,Zme),e(Zme,tPo),e(rv,aPo),e(rv,PG),e(PG,nPo),e(rv,sPo),e(U,lPo),e(U,tv),e(tv,efe),e(efe,iPo),e(tv,dPo),e(tv,IG),e(IG,cPo),e(tv,mPo),e(U,fPo),e(U,av),e(av,ofe),e(ofe,gPo),e(av,hPo),e(av,qG),e(qG,uPo),e(av,pPo),e(U,_Po),e(U,nv),e(nv,rfe),e(rfe,bPo),e(nv,FPo),e(nv,NG),e(NG,vPo),e(nv,TPo),e(U,MPo),e(U,sv),e(sv,tfe),e(tfe,EPo),e(sv,CPo),e(sv,jG),e(jG,wPo),e(sv,APo),e(U,yPo),e(U,lv),e(lv,afe),e(afe,LPo),e(lv,xPo),e(lv,DG),e(DG,$Po),e(lv,kPo),e(U,SPo),e(U,iv),e(iv,nfe),e(nfe,RPo),e(iv,BPo),e(iv,GG),e(GG,PPo),e(iv,IPo),e(U,qPo),e(U,dv),e(dv,sfe),e(sfe,NPo),e(dv,jPo),e(dv,OG),e(OG,DPo),e(dv,GPo),e(U,OPo),e(U,cv),e(cv,lfe),e(lfe,VPo),e(cv,XPo),e(cv,VG),e(VG,zPo),e(cv,QPo),e(U,WPo),e(U,mv),e(mv,ife),e(ife,HPo),e(mv,UPo),e(mv,XG),e(XG,JPo),e(mv,YPo),e(U,KPo),e(U,fv),e(fv,dfe),e(dfe,ZPo),e(fv,eIo),e(fv,zG),e(zG,oIo),e(fv,rIo),e(U,tIo),e(U,gv),e(gv,cfe),e(cfe,aIo),e(gv,nIo),e(gv,QG),e(QG,sIo),e(gv,lIo),e(U,iIo),e(U,hv),e(hv,mfe),e(mfe,dIo),e(hv,cIo),e(hv,WG),e(WG,mIo),e(hv,fIo),e(U,gIo),e(U,uv),e(uv,ffe),e(ffe,hIo),e(uv,uIo),e(uv,HG),e(HG,pIo),e(uv,_Io),e(U,bIo),e(U,pv),e(pv,gfe),e(gfe,FIo),e(pv,vIo),e(pv,UG),e(UG,TIo),e(pv,MIo),e(U,EIo),e(U,_v),e(_v,hfe),e(hfe,CIo),e(_v,wIo),e(_v,JG),e(JG,AIo),e(_v,yIo),e(U,LIo),e(U,bv),e(bv,ufe),e(ufe,xIo),e(bv,$Io),e(bv,YG),e(YG,kIo),e(bv,SIo),e(U,RIo),e(U,Fv),e(Fv,pfe),e(pfe,BIo),e(Fv,PIo),e(Fv,KG),e(KG,IIo),e(Fv,qIo),e(U,NIo),e(U,vv),e(vv,_fe),e(_fe,jIo),e(vv,DIo),e(vv,ZG),e(ZG,GIo),e(vv,OIo),e(U,VIo),e(U,Tv),e(Tv,bfe),e(bfe,XIo),e(Tv,zIo),e(Tv,eO),e(eO,QIo),e(Tv,WIo),e(U,HIo),e(U,Mv),e(Mv,Ffe),e(Ffe,UIo),e(Mv,JIo),e(Mv,oO),e(oO,YIo),e(Mv,KIo),e(U,ZIo),e(U,Ev),e(Ev,vfe),e(vfe,eqo),e(Ev,oqo),e(Ev,rO),e(rO,rqo),e(Ev,tqo),e(U,aqo),e(U,Cv),e(Cv,Tfe),e(Tfe,nqo),e(Cv,sqo),e(Cv,tO),e(tO,lqo),e(Cv,iqo),e(U,dqo),e(U,wv),e(wv,Mfe),e(Mfe,cqo),e(wv,mqo),e(wv,aO),e(aO,fqo),e(wv,gqo),e(U,hqo),e(U,Av),e(Av,Efe),e(Efe,uqo),e(Av,pqo),e(Av,nO),e(nO,_qo),e(Av,bqo),e(U,Fqo),e(U,yv),e(yv,Cfe),e(Cfe,vqo),e(yv,Tqo),e(yv,sO),e(sO,Mqo),e(yv,Eqo),e(U,Cqo),e(U,Lv),e(Lv,wfe),e(wfe,wqo),e(Lv,Aqo),e(Lv,lO),e(lO,yqo),e(Lv,Lqo),e(U,xqo),e(U,xv),e(xv,Afe),e(Afe,$qo),e(xv,kqo),e(xv,iO),e(iO,Sqo),e(xv,Rqo),e(ro,Bqo),e(ro,$v),e($v,Pqo),e($v,yfe),e(yfe,Iqo),e($v,qqo),e($v,Lfe),e(Lfe,Nqo),e(ro,jqo),M(kv,ro,null),b(m,NPe,_),b(m,Hi,_),e(Hi,Sv),e(Sv,xfe),M(nL,xfe,null),e(Hi,Dqo),e(Hi,$fe),e($fe,Gqo),b(m,jPe,_),b(m,qo,_),M(sL,qo,null),e(qo,Oqo),e(qo,Ui),e(Ui,Vqo),e(Ui,dO),e(dO,Xqo),e(Ui,zqo),e(Ui,cO),e(cO,Qqo),e(Ui,Wqo),e(qo,Hqo),e(qo,lL),e(lL,Uqo),e(lL,kfe),e(kfe,Jqo),e(lL,Yqo),e(qo,Kqo),e(qo,ct),M(iL,ct,null),e(ct,Zqo),e(ct,Sfe),e(Sfe,eNo),e(ct,oNo),e(ct,Ji),e(Ji,rNo),e(Ji,Rfe),e(Rfe,tNo),e(Ji,aNo),e(Ji,mO),e(mO,nNo),e(Ji,sNo),e(ct,lNo),M(Rv,ct,null),e(qo,iNo),e(qo,to),M(dL,to,null),e(to,dNo),e(to,Bfe),e(Bfe,cNo),e(to,mNo),e(to,Pa),e(Pa,fNo),e(Pa,Pfe),e(Pfe,gNo),e(Pa,hNo),e(Pa,Ife),e(Ife,uNo),e(Pa,pNo),e(Pa,qfe),e(qfe,_No),e(Pa,bNo),e(to,FNo),e(to,O),e(O,Bv),e(Bv,Nfe),e(Nfe,vNo),e(Bv,TNo),e(Bv,fO),e(fO,MNo),e(Bv,ENo),e(O,CNo),e(O,Pv),e(Pv,jfe),e(jfe,wNo),e(Pv,ANo),e(Pv,gO),e(gO,yNo),e(Pv,LNo),e(O,xNo),e(O,Iv),e(Iv,Dfe),e(Dfe,$No),e(Iv,kNo),e(Iv,hO),e(hO,SNo),e(Iv,RNo),e(O,BNo),e(O,qv),e(qv,Gfe),e(Gfe,PNo),e(qv,INo),e(qv,uO),e(uO,qNo),e(qv,NNo),e(O,jNo),e(O,Nv),e(Nv,Ofe),e(Ofe,DNo),e(Nv,GNo),e(Nv,pO),e(pO,ONo),e(Nv,VNo),e(O,XNo),e(O,jv),e(jv,Vfe),e(Vfe,zNo),e(jv,QNo),e(jv,_O),e(_O,WNo),e(jv,HNo),e(O,UNo),e(O,Dv),e(Dv,Xfe),e(Xfe,JNo),e(Dv,YNo),e(Dv,bO),e(bO,KNo),e(Dv,ZNo),e(O,ejo),e(O,Gv),e(Gv,zfe),e(zfe,ojo),e(Gv,rjo),e(Gv,FO),e(FO,tjo),e(Gv,ajo),e(O,njo),e(O,Ov),e(Ov,Qfe),e(Qfe,sjo),e(Ov,ljo),e(Ov,vO),e(vO,ijo),e(Ov,djo),e(O,cjo),e(O,Vv),e(Vv,Wfe),e(Wfe,mjo),e(Vv,fjo),e(Vv,TO),e(TO,gjo),e(Vv,hjo),e(O,ujo),e(O,Xv),e(Xv,Hfe),e(Hfe,pjo),e(Xv,_jo),e(Xv,MO),e(MO,bjo),e(Xv,Fjo),e(O,vjo),e(O,zv),e(zv,Ufe),e(Ufe,Tjo),e(zv,Mjo),e(zv,EO),e(EO,Ejo),e(zv,Cjo),e(O,wjo),e(O,Qv),e(Qv,Jfe),e(Jfe,Ajo),e(Qv,yjo),e(Qv,CO),e(CO,Ljo),e(Qv,xjo),e(O,$jo),e(O,Wv),e(Wv,Yfe),e(Yfe,kjo),e(Wv,Sjo),e(Wv,wO),e(wO,Rjo),e(Wv,Bjo),e(O,Pjo),e(O,Hv),e(Hv,Kfe),e(Kfe,Ijo),e(Hv,qjo),e(Hv,AO),e(AO,Njo),e(Hv,jjo),e(O,Djo),e(O,Uv),e(Uv,Zfe),e(Zfe,Gjo),e(Uv,Ojo),e(Uv,yO),e(yO,Vjo),e(Uv,Xjo),e(O,zjo),e(O,Jv),e(Jv,ege),e(ege,Qjo),e(Jv,Wjo),e(Jv,LO),e(LO,Hjo),e(Jv,Ujo),e(O,Jjo),e(O,Yv),e(Yv,oge),e(oge,Yjo),e(Yv,Kjo),e(Yv,xO),e(xO,Zjo),e(Yv,eDo),e(O,oDo),e(O,Kv),e(Kv,rge),e(rge,rDo),e(Kv,tDo),e(Kv,$O),e($O,aDo),e(Kv,nDo),e(O,sDo),e(O,Zv),e(Zv,tge),e(tge,lDo),e(Zv,iDo),e(Zv,kO),e(kO,dDo),e(Zv,cDo),e(O,mDo),e(O,e1),e(e1,age),e(age,fDo),e(e1,gDo),e(e1,SO),e(SO,hDo),e(e1,uDo),e(O,pDo),e(O,o1),e(o1,nge),e(nge,_Do),e(o1,bDo),e(o1,RO),e(RO,FDo),e(o1,vDo),e(O,TDo),e(O,r1),e(r1,sge),e(sge,MDo),e(r1,EDo),e(r1,BO),e(BO,CDo),e(r1,wDo),e(O,ADo),e(O,t1),e(t1,lge),e(lge,yDo),e(t1,LDo),e(t1,PO),e(PO,xDo),e(t1,$Do),e(O,kDo),e(O,a1),e(a1,ige),e(ige,SDo),e(a1,RDo),e(a1,IO),e(IO,BDo),e(a1,PDo),e(O,IDo),e(O,n1),e(n1,dge),e(dge,qDo),e(n1,NDo),e(n1,qO),e(qO,jDo),e(n1,DDo),e(O,GDo),e(O,s1),e(s1,cge),e(cge,ODo),e(s1,VDo),e(s1,NO),e(NO,XDo),e(s1,zDo),e(O,QDo),e(O,l1),e(l1,mge),e(mge,WDo),e(l1,HDo),e(l1,jO),e(jO,UDo),e(l1,JDo),e(O,YDo),e(O,i1),e(i1,fge),e(fge,KDo),e(i1,ZDo),e(i1,DO),e(DO,eGo),e(i1,oGo),e(O,rGo),e(O,d1),e(d1,gge),e(gge,tGo),e(d1,aGo),e(d1,GO),e(GO,nGo),e(d1,sGo),e(O,lGo),e(O,c1),e(c1,hge),e(hge,iGo),e(c1,dGo),e(c1,OO),e(OO,cGo),e(c1,mGo),e(O,fGo),e(O,m1),e(m1,uge),e(uge,gGo),e(m1,hGo),e(m1,VO),e(VO,uGo),e(m1,pGo),e(O,_Go),e(O,f1),e(f1,pge),e(pge,bGo),e(f1,FGo),e(f1,XO),e(XO,vGo),e(f1,TGo),e(O,MGo),e(O,g1),e(g1,_ge),e(_ge,EGo),e(g1,CGo),e(g1,zO),e(zO,wGo),e(g1,AGo),e(O,yGo),e(O,h1),e(h1,bge),e(bge,LGo),e(h1,xGo),e(h1,QO),e(QO,$Go),e(h1,kGo),e(O,SGo),e(O,u1),e(u1,Fge),e(Fge,RGo),e(u1,BGo),e(u1,WO),e(WO,PGo),e(u1,IGo),e(O,qGo),e(O,p1),e(p1,vge),e(vge,NGo),e(p1,jGo),e(p1,HO),e(HO,DGo),e(p1,GGo),e(O,OGo),e(O,_1),e(_1,Tge),e(Tge,VGo),e(_1,XGo),e(_1,UO),e(UO,zGo),e(_1,QGo),e(O,WGo),e(O,b1),e(b1,Mge),e(Mge,HGo),e(b1,UGo),e(b1,JO),e(JO,JGo),e(b1,YGo),e(to,KGo),e(to,F1),e(F1,ZGo),e(F1,Ege),e(Ege,eOo),e(F1,oOo),e(F1,Cge),e(Cge,rOo),e(to,tOo),M(v1,to,null),b(m,DPe,_),b(m,Yi,_),e(Yi,T1),e(T1,wge),M(cL,wge,null),e(Yi,aOo),e(Yi,Age),e(Age,nOo),b(m,GPe,_),b(m,No,_),M(mL,No,null),e(No,sOo),e(No,Ki),e(Ki,lOo),e(Ki,YO),e(YO,iOo),e(Ki,dOo),e(Ki,KO),e(KO,cOo),e(Ki,mOo),e(No,fOo),e(No,fL),e(fL,gOo),e(fL,yge),e(yge,hOo),e(fL,uOo),e(No,pOo),e(No,mt),M(gL,mt,null),e(mt,_Oo),e(mt,Lge),e(Lge,bOo),e(mt,FOo),e(mt,Zi),e(Zi,vOo),e(Zi,xge),e(xge,TOo),e(Zi,MOo),e(Zi,ZO),e(ZO,EOo),e(Zi,COo),e(mt,wOo),M(M1,mt,null),e(No,AOo),e(No,ao),M(hL,ao,null),e(ao,yOo),e(ao,$ge),e($ge,LOo),e(ao,xOo),e(ao,Ia),e(Ia,$Oo),e(Ia,kge),e(kge,kOo),e(Ia,SOo),e(Ia,Sge),e(Sge,ROo),e(Ia,BOo),e(Ia,Rge),e(Rge,POo),e(Ia,IOo),e(ao,qOo),e(ao,Bge),e(Bge,E1),e(E1,Pge),e(Pge,NOo),e(E1,jOo),e(E1,eV),e(eV,DOo),e(E1,GOo),e(ao,OOo),e(ao,C1),e(C1,VOo),e(C1,Ige),e(Ige,XOo),e(C1,zOo),e(C1,qge),e(qge,QOo),e(ao,WOo),M(w1,ao,null),b(m,OPe,_),b(m,ed,_),e(ed,A1),e(A1,Nge),M(uL,Nge,null),e(ed,HOo),e(ed,jge),e(jge,UOo),b(m,VPe,_),b(m,jo,_),M(pL,jo,null),e(jo,JOo),e(jo,od),e(od,YOo),e(od,oV),e(oV,KOo),e(od,ZOo),e(od,rV),e(rV,eVo),e(od,oVo),e(jo,rVo),e(jo,_L),e(_L,tVo),e(_L,Dge),e(Dge,aVo),e(_L,nVo),e(jo,sVo),e(jo,ft),M(bL,ft,null),e(ft,lVo),e(ft,Gge),e(Gge,iVo),e(ft,dVo),e(ft,rd),e(rd,cVo),e(rd,Oge),e(Oge,mVo),e(rd,fVo),e(rd,tV),e(tV,gVo),e(rd,hVo),e(ft,uVo),M(y1,ft,null),e(jo,pVo),e(jo,no),M(FL,no,null),e(no,_Vo),e(no,Vge),e(Vge,bVo),e(no,FVo),e(no,qa),e(qa,vVo),e(qa,Xge),e(Xge,TVo),e(qa,MVo),e(qa,zge),e(zge,EVo),e(qa,CVo),e(qa,Qge),e(Qge,wVo),e(qa,AVo),e(no,yVo),e(no,Fe),e(Fe,L1),e(L1,Wge),e(Wge,LVo),e(L1,xVo),e(L1,aV),e(aV,$Vo),e(L1,kVo),e(Fe,SVo),e(Fe,x1),e(x1,Hge),e(Hge,RVo),e(x1,BVo),e(x1,nV),e(nV,PVo),e(x1,IVo),e(Fe,qVo),e(Fe,$1),e($1,Uge),e(Uge,NVo),e($1,jVo),e($1,sV),e(sV,DVo),e($1,GVo),e(Fe,OVo),e(Fe,Rs),e(Rs,Jge),e(Jge,VVo),e(Rs,XVo),e(Rs,lV),e(lV,zVo),e(Rs,QVo),e(Rs,iV),e(iV,WVo),e(Rs,HVo),e(Fe,UVo),e(Fe,k1),e(k1,Yge),e(Yge,JVo),e(k1,YVo),e(k1,dV),e(dV,KVo),e(k1,ZVo),e(Fe,eXo),e(Fe,gt),e(gt,Kge),e(Kge,oXo),e(gt,rXo),e(gt,cV),e(cV,tXo),e(gt,aXo),e(gt,mV),e(mV,nXo),e(gt,sXo),e(gt,fV),e(fV,lXo),e(gt,iXo),e(Fe,dXo),e(Fe,S1),e(S1,Zge),e(Zge,cXo),e(S1,mXo),e(S1,gV),e(gV,fXo),e(S1,gXo),e(Fe,hXo),e(Fe,R1),e(R1,ehe),e(ehe,uXo),e(R1,pXo),e(R1,hV),e(hV,_Xo),e(R1,bXo),e(Fe,FXo),e(Fe,B1),e(B1,ohe),e(ohe,vXo),e(B1,TXo),e(B1,uV),e(uV,MXo),e(B1,EXo),e(Fe,CXo),e(Fe,P1),e(P1,rhe),e(rhe,wXo),e(P1,AXo),e(P1,pV),e(pV,yXo),e(P1,LXo),e(Fe,xXo),e(Fe,I1),e(I1,the),e(the,$Xo),e(I1,kXo),e(I1,_V),e(_V,SXo),e(I1,RXo),e(Fe,BXo),e(Fe,q1),e(q1,ahe),e(ahe,PXo),e(q1,IXo),e(q1,bV),e(bV,qXo),e(q1,NXo),e(Fe,jXo),e(Fe,N1),e(N1,nhe),e(nhe,DXo),e(N1,GXo),e(N1,FV),e(FV,OXo),e(N1,VXo),e(no,XXo),e(no,j1),e(j1,zXo),e(j1,she),e(she,QXo),e(j1,WXo),e(j1,lhe),e(lhe,HXo),e(no,UXo),M(D1,no,null),b(m,XPe,_),b(m,td,_),e(td,G1),e(G1,ihe),M(vL,ihe,null),e(td,JXo),e(td,dhe),e(dhe,YXo),b(m,zPe,_),b(m,Do,_),M(TL,Do,null),e(Do,KXo),e(Do,ad),e(ad,ZXo),e(ad,vV),e(vV,ezo),e(ad,ozo),e(ad,TV),e(TV,rzo),e(ad,tzo),e(Do,azo),e(Do,ML),e(ML,nzo),e(ML,che),e(che,szo),e(ML,lzo),e(Do,izo),e(Do,ht),M(EL,ht,null),e(ht,dzo),e(ht,mhe),e(mhe,czo),e(ht,mzo),e(ht,nd),e(nd,fzo),e(nd,fhe),e(fhe,gzo),e(nd,hzo),e(nd,MV),e(MV,uzo),e(nd,pzo),e(ht,_zo),M(O1,ht,null),e(Do,bzo),e(Do,so),M(CL,so,null),e(so,Fzo),e(so,ghe),e(ghe,vzo),e(so,Tzo),e(so,Na),e(Na,Mzo),e(Na,hhe),e(hhe,Ezo),e(Na,Czo),e(Na,uhe),e(uhe,wzo),e(Na,Azo),e(Na,phe),e(phe,yzo),e(Na,Lzo),e(so,xzo),e(so,_he),e(_he,V1),e(V1,bhe),e(bhe,$zo),e(V1,kzo),e(V1,EV),e(EV,Szo),e(V1,Rzo),e(so,Bzo),e(so,X1),e(X1,Pzo),e(X1,Fhe),e(Fhe,Izo),e(X1,qzo),e(X1,vhe),e(vhe,Nzo),e(so,jzo),M(z1,so,null),b(m,QPe,_),b(m,sd,_),e(sd,Q1),e(Q1,The),M(wL,The,null),e(sd,Dzo),e(sd,Mhe),e(Mhe,Gzo),b(m,WPe,_),b(m,Go,_),M(AL,Go,null),e(Go,Ozo),e(Go,ld),e(ld,Vzo),e(ld,CV),e(CV,Xzo),e(ld,zzo),e(ld,wV),e(wV,Qzo),e(ld,Wzo),e(Go,Hzo),e(Go,yL),e(yL,Uzo),e(yL,Ehe),e(Ehe,Jzo),e(yL,Yzo),e(Go,Kzo),e(Go,ut),M(LL,ut,null),e(ut,Zzo),e(ut,Che),e(Che,eQo),e(ut,oQo),e(ut,id),e(id,rQo),e(id,whe),e(whe,tQo),e(id,aQo),e(id,AV),e(AV,nQo),e(id,sQo),e(ut,lQo),M(W1,ut,null),e(Go,iQo),e(Go,lo),M(xL,lo,null),e(lo,dQo),e(lo,Ahe),e(Ahe,cQo),e(lo,mQo),e(lo,ja),e(ja,fQo),e(ja,yhe),e(yhe,gQo),e(ja,hQo),e(ja,Lhe),e(Lhe,uQo),e(ja,pQo),e(ja,xhe),e(xhe,_Qo),e(ja,bQo),e(lo,FQo),e(lo,Ne),e(Ne,H1),e(H1,$he),e($he,vQo),e(H1,TQo),e(H1,yV),e(yV,MQo),e(H1,EQo),e(Ne,CQo),e(Ne,U1),e(U1,khe),e(khe,wQo),e(U1,AQo),e(U1,LV),e(LV,yQo),e(U1,LQo),e(Ne,xQo),e(Ne,J1),e(J1,She),e(She,$Qo),e(J1,kQo),e(J1,xV),e(xV,SQo),e(J1,RQo),e(Ne,BQo),e(Ne,Y1),e(Y1,Rhe),e(Rhe,PQo),e(Y1,IQo),e(Y1,$V),e($V,qQo),e(Y1,NQo),e(Ne,jQo),e(Ne,K1),e(K1,Bhe),e(Bhe,DQo),e(K1,GQo),e(K1,kV),e(kV,OQo),e(K1,VQo),e(Ne,XQo),e(Ne,Z1),e(Z1,Phe),e(Phe,zQo),e(Z1,QQo),e(Z1,SV),e(SV,WQo),e(Z1,HQo),e(Ne,UQo),e(Ne,eT),e(eT,Ihe),e(Ihe,JQo),e(eT,YQo),e(eT,RV),e(RV,KQo),e(eT,ZQo),e(Ne,eWo),e(Ne,oT),e(oT,qhe),e(qhe,oWo),e(oT,rWo),e(oT,BV),e(BV,tWo),e(oT,aWo),e(lo,nWo),e(lo,rT),e(rT,sWo),e(rT,Nhe),e(Nhe,lWo),e(rT,iWo),e(rT,jhe),e(jhe,dWo),e(lo,cWo),M(tT,lo,null),b(m,HPe,_),b(m,dd,_),e(dd,aT),e(aT,Dhe),M($L,Dhe,null),e(dd,mWo),e(dd,Ghe),e(Ghe,fWo),b(m,UPe,_),b(m,Oo,_),M(kL,Oo,null),e(Oo,gWo),e(Oo,cd),e(cd,hWo),e(cd,PV),e(PV,uWo),e(cd,pWo),e(cd,IV),e(IV,_Wo),e(cd,bWo),e(Oo,FWo),e(Oo,SL),e(SL,vWo),e(SL,Ohe),e(Ohe,TWo),e(SL,MWo),e(Oo,EWo),e(Oo,pt),M(RL,pt,null),e(pt,CWo),e(pt,Vhe),e(Vhe,wWo),e(pt,AWo),e(pt,md),e(md,yWo),e(md,Xhe),e(Xhe,LWo),e(md,xWo),e(md,qV),e(qV,$Wo),e(md,kWo),e(pt,SWo),M(nT,pt,null),e(Oo,RWo),e(Oo,io),M(BL,io,null),e(io,BWo),e(io,zhe),e(zhe,PWo),e(io,IWo),e(io,Da),e(Da,qWo),e(Da,Qhe),e(Qhe,NWo),e(Da,jWo),e(Da,Whe),e(Whe,DWo),e(Da,GWo),e(Da,Hhe),e(Hhe,OWo),e(Da,VWo),e(io,XWo),e(io,Ga),e(Ga,sT),e(sT,Uhe),e(Uhe,zWo),e(sT,QWo),e(sT,NV),e(NV,WWo),e(sT,HWo),e(Ga,UWo),e(Ga,lT),e(lT,Jhe),e(Jhe,JWo),e(lT,YWo),e(lT,jV),e(jV,KWo),e(lT,ZWo),e(Ga,eHo),e(Ga,iT),e(iT,Yhe),e(Yhe,oHo),e(iT,rHo),e(iT,DV),e(DV,tHo),e(iT,aHo),e(Ga,nHo),e(Ga,dT),e(dT,Khe),e(Khe,sHo),e(dT,lHo),e(dT,GV),e(GV,iHo),e(dT,dHo),e(io,cHo),e(io,cT),e(cT,mHo),e(cT,Zhe),e(Zhe,fHo),e(cT,gHo),e(cT,eue),e(eue,hHo),e(io,uHo),M(mT,io,null),b(m,JPe,_),b(m,fd,_),e(fd,fT),e(fT,oue),M(PL,oue,null),e(fd,pHo),e(fd,rue),e(rue,_Ho),b(m,YPe,_),b(m,Vo,_),M(IL,Vo,null),e(Vo,bHo),e(Vo,gd),e(gd,FHo),e(gd,OV),e(OV,vHo),e(gd,THo),e(gd,VV),e(VV,MHo),e(gd,EHo),e(Vo,CHo),e(Vo,qL),e(qL,wHo),e(qL,tue),e(tue,AHo),e(qL,yHo),e(Vo,LHo),e(Vo,_t),M(NL,_t,null),e(_t,xHo),e(_t,aue),e(aue,$Ho),e(_t,kHo),e(_t,hd),e(hd,SHo),e(hd,nue),e(nue,RHo),e(hd,BHo),e(hd,XV),e(XV,PHo),e(hd,IHo),e(_t,qHo),M(gT,_t,null),e(Vo,NHo),e(Vo,co),M(jL,co,null),e(co,jHo),e(co,sue),e(sue,DHo),e(co,GHo),e(co,Oa),e(Oa,OHo),e(Oa,lue),e(lue,VHo),e(Oa,XHo),e(Oa,iue),e(iue,zHo),e(Oa,QHo),e(Oa,due),e(due,WHo),e(Oa,HHo),e(co,UHo),e(co,je),e(je,hT),e(hT,cue),e(cue,JHo),e(hT,YHo),e(hT,zV),e(zV,KHo),e(hT,ZHo),e(je,eUo),e(je,uT),e(uT,mue),e(mue,oUo),e(uT,rUo),e(uT,QV),e(QV,tUo),e(uT,aUo),e(je,nUo),e(je,pT),e(pT,fue),e(fue,sUo),e(pT,lUo),e(pT,WV),e(WV,iUo),e(pT,dUo),e(je,cUo),e(je,_T),e(_T,gue),e(gue,mUo),e(_T,fUo),e(_T,HV),e(HV,gUo),e(_T,hUo),e(je,uUo),e(je,bT),e(bT,hue),e(hue,pUo),e(bT,_Uo),e(bT,UV),e(UV,bUo),e(bT,FUo),e(je,vUo),e(je,FT),e(FT,uue),e(uue,TUo),e(FT,MUo),e(FT,JV),e(JV,EUo),e(FT,CUo),e(je,wUo),e(je,vT),e(vT,pue),e(pue,AUo),e(vT,yUo),e(vT,YV),e(YV,LUo),e(vT,xUo),e(je,$Uo),e(je,TT),e(TT,_ue),e(_ue,kUo),e(TT,SUo),e(TT,KV),e(KV,RUo),e(TT,BUo),e(co,PUo),e(co,MT),e(MT,IUo),e(MT,bue),e(bue,qUo),e(MT,NUo),e(MT,Fue),e(Fue,jUo),e(co,DUo),M(ET,co,null),b(m,KPe,_),b(m,ud,_),e(ud,CT),e(CT,vue),M(DL,vue,null),e(ud,GUo),e(ud,Tue),e(Tue,OUo),b(m,ZPe,_),b(m,Xo,_),M(GL,Xo,null),e(Xo,VUo),e(Xo,pd),e(pd,XUo),e(pd,ZV),e(ZV,zUo),e(pd,QUo),e(pd,eX),e(eX,WUo),e(pd,HUo),e(Xo,UUo),e(Xo,OL),e(OL,JUo),e(OL,Mue),e(Mue,YUo),e(OL,KUo),e(Xo,ZUo),e(Xo,bt),M(VL,bt,null),e(bt,eJo),e(bt,Eue),e(Eue,oJo),e(bt,rJo),e(bt,_d),e(_d,tJo),e(_d,Cue),e(Cue,aJo),e(_d,nJo),e(_d,oX),e(oX,sJo),e(_d,lJo),e(bt,iJo),M(wT,bt,null),e(Xo,dJo),e(Xo,mo),M(XL,mo,null),e(mo,cJo),e(mo,wue),e(wue,mJo),e(mo,fJo),e(mo,Va),e(Va,gJo),e(Va,Aue),e(Aue,hJo),e(Va,uJo),e(Va,yue),e(yue,pJo),e(Va,_Jo),e(Va,Lue),e(Lue,bJo),e(Va,FJo),e(mo,vJo),e(mo,zL),e(zL,AT),e(AT,xue),e(xue,TJo),e(AT,MJo),e(AT,rX),e(rX,EJo),e(AT,CJo),e(zL,wJo),e(zL,yT),e(yT,$ue),e($ue,AJo),e(yT,yJo),e(yT,tX),e(tX,LJo),e(yT,xJo),e(mo,$Jo),e(mo,LT),e(LT,kJo),e(LT,kue),e(kue,SJo),e(LT,RJo),e(LT,Sue),e(Sue,BJo),e(mo,PJo),M(xT,mo,null),b(m,eIe,_),b(m,bd,_),e(bd,$T),e($T,Rue),M(QL,Rue,null),e(bd,IJo),e(bd,Bue),e(Bue,qJo),b(m,oIe,_),b(m,zo,_),M(WL,zo,null),e(zo,NJo),e(zo,Fd),e(Fd,jJo),e(Fd,aX),e(aX,DJo),e(Fd,GJo),e(Fd,nX),e(nX,OJo),e(Fd,VJo),e(zo,XJo),e(zo,HL),e(HL,zJo),e(HL,Pue),e(Pue,QJo),e(HL,WJo),e(zo,HJo),e(zo,Ft),M(UL,Ft,null),e(Ft,UJo),e(Ft,Iue),e(Iue,JJo),e(Ft,YJo),e(Ft,vd),e(vd,KJo),e(vd,que),e(que,ZJo),e(vd,eYo),e(vd,sX),e(sX,oYo),e(vd,rYo),e(Ft,tYo),M(kT,Ft,null),e(zo,aYo),e(zo,fo),M(JL,fo,null),e(fo,nYo),e(fo,Nue),e(Nue,sYo),e(fo,lYo),e(fo,Xa),e(Xa,iYo),e(Xa,jue),e(jue,dYo),e(Xa,cYo),e(Xa,Due),e(Due,mYo),e(Xa,fYo),e(Xa,Gue),e(Gue,gYo),e(Xa,hYo),e(fo,uYo),e(fo,za),e(za,ST),e(ST,Oue),e(Oue,pYo),e(ST,_Yo),e(ST,lX),e(lX,bYo),e(ST,FYo),e(za,vYo),e(za,RT),e(RT,Vue),e(Vue,TYo),e(RT,MYo),e(RT,iX),e(iX,EYo),e(RT,CYo),e(za,wYo),e(za,BT),e(BT,Xue),e(Xue,AYo),e(BT,yYo),e(BT,dX),e(dX,LYo),e(BT,xYo),e(za,$Yo),e(za,PT),e(PT,zue),e(zue,kYo),e(PT,SYo),e(PT,cX),e(cX,RYo),e(PT,BYo),e(fo,PYo),e(fo,IT),e(IT,IYo),e(IT,Que),e(Que,qYo),e(IT,NYo),e(IT,Wue),e(Wue,jYo),e(fo,DYo),M(qT,fo,null),b(m,rIe,_),b(m,Td,_),e(Td,NT),e(NT,Hue),M(YL,Hue,null),e(Td,GYo),e(Td,Uue),e(Uue,OYo),b(m,tIe,_),b(m,Qo,_),M(KL,Qo,null),e(Qo,VYo),e(Qo,Md),e(Md,XYo),e(Md,mX),e(mX,zYo),e(Md,QYo),e(Md,fX),e(fX,WYo),e(Md,HYo),e(Qo,UYo),e(Qo,ZL),e(ZL,JYo),e(ZL,Jue),e(Jue,YYo),e(ZL,KYo),e(Qo,ZYo),e(Qo,vt),M(e8,vt,null),e(vt,eKo),e(vt,Yue),e(Yue,oKo),e(vt,rKo),e(vt,Ed),e(Ed,tKo),e(Ed,Kue),e(Kue,aKo),e(Ed,nKo),e(Ed,gX),e(gX,sKo),e(Ed,lKo),e(vt,iKo),M(jT,vt,null),e(Qo,dKo),e(Qo,go),M(o8,go,null),e(go,cKo),e(go,Zue),e(Zue,mKo),e(go,fKo),e(go,Qa),e(Qa,gKo),e(Qa,epe),e(epe,hKo),e(Qa,uKo),e(Qa,ope),e(ope,pKo),e(Qa,_Ko),e(Qa,rpe),e(rpe,bKo),e(Qa,FKo),e(go,vKo),e(go,Cd),e(Cd,DT),e(DT,tpe),e(tpe,TKo),e(DT,MKo),e(DT,hX),e(hX,EKo),e(DT,CKo),e(Cd,wKo),e(Cd,GT),e(GT,ape),e(ape,AKo),e(GT,yKo),e(GT,uX),e(uX,LKo),e(GT,xKo),e(Cd,$Ko),e(Cd,OT),e(OT,npe),e(npe,kKo),e(OT,SKo),e(OT,pX),e(pX,RKo),e(OT,BKo),e(go,PKo),e(go,VT),e(VT,IKo),e(VT,spe),e(spe,qKo),e(VT,NKo),e(VT,lpe),e(lpe,jKo),e(go,DKo),M(XT,go,null),b(m,aIe,_),b(m,wd,_),e(wd,zT),e(zT,ipe),M(r8,ipe,null),e(wd,GKo),e(wd,dpe),e(dpe,OKo),b(m,nIe,_),b(m,Wo,_),M(t8,Wo,null),e(Wo,VKo),e(Wo,Ad),e(Ad,XKo),e(Ad,_X),e(_X,zKo),e(Ad,QKo),e(Ad,bX),e(bX,WKo),e(Ad,HKo),e(Wo,UKo),e(Wo,a8),e(a8,JKo),e(a8,cpe),e(cpe,YKo),e(a8,KKo),e(Wo,ZKo),e(Wo,Tt),M(n8,Tt,null),e(Tt,eZo),e(Tt,mpe),e(mpe,oZo),e(Tt,rZo),e(Tt,yd),e(yd,tZo),e(yd,fpe),e(fpe,aZo),e(yd,nZo),e(yd,FX),e(FX,sZo),e(yd,lZo),e(Tt,iZo),M(QT,Tt,null),e(Wo,dZo),e(Wo,ho),M(s8,ho,null),e(ho,cZo),e(ho,gpe),e(gpe,mZo),e(ho,fZo),e(ho,Wa),e(Wa,gZo),e(Wa,hpe),e(hpe,hZo),e(Wa,uZo),e(Wa,upe),e(upe,pZo),e(Wa,_Zo),e(Wa,ppe),e(ppe,bZo),e(Wa,FZo),e(ho,vZo),e(ho,l8),e(l8,WT),e(WT,_pe),e(_pe,TZo),e(WT,MZo),e(WT,vX),e(vX,EZo),e(WT,CZo),e(l8,wZo),e(l8,HT),e(HT,bpe),e(bpe,AZo),e(HT,yZo),e(HT,TX),e(TX,LZo),e(HT,xZo),e(ho,$Zo),e(ho,UT),e(UT,kZo),e(UT,Fpe),e(Fpe,SZo),e(UT,RZo),e(UT,vpe),e(vpe,BZo),e(ho,PZo),M(JT,ho,null),b(m,sIe,_),b(m,Ld,_),e(Ld,YT),e(YT,Tpe),M(i8,Tpe,null),e(Ld,IZo),e(Ld,Mpe),e(Mpe,qZo),b(m,lIe,_),b(m,Ho,_),M(d8,Ho,null),e(Ho,NZo),e(Ho,xd),e(xd,jZo),e(xd,MX),e(MX,DZo),e(xd,GZo),e(xd,EX),e(EX,OZo),e(xd,VZo),e(Ho,XZo),e(Ho,c8),e(c8,zZo),e(c8,Epe),e(Epe,QZo),e(c8,WZo),e(Ho,HZo),e(Ho,Mt),M(m8,Mt,null),e(Mt,UZo),e(Mt,Cpe),e(Cpe,JZo),e(Mt,YZo),e(Mt,$d),e($d,KZo),e($d,wpe),e(wpe,ZZo),e($d,eer),e($d,CX),e(CX,oer),e($d,rer),e(Mt,ter),M(KT,Mt,null),e(Ho,aer),e(Ho,uo),M(f8,uo,null),e(uo,ner),e(uo,Ape),e(Ape,ser),e(uo,ler),e(uo,Ha),e(Ha,ier),e(Ha,ype),e(ype,der),e(Ha,cer),e(Ha,Lpe),e(Lpe,mer),e(Ha,fer),e(Ha,xpe),e(xpe,ger),e(Ha,her),e(uo,uer),e(uo,$pe),e($pe,ZT),e(ZT,kpe),e(kpe,per),e(ZT,_er),e(ZT,wX),e(wX,ber),e(ZT,Fer),e(uo,ver),e(uo,eM),e(eM,Ter),e(eM,Spe),e(Spe,Mer),e(eM,Eer),e(eM,Rpe),e(Rpe,Cer),e(uo,wer),M(oM,uo,null),b(m,iIe,_),b(m,kd,_),e(kd,rM),e(rM,Bpe),M(g8,Bpe,null),e(kd,Aer),e(kd,Ppe),e(Ppe,yer),b(m,dIe,_),b(m,Uo,_),M(h8,Uo,null),e(Uo,Ler),e(Uo,Sd),e(Sd,xer),e(Sd,AX),e(AX,$er),e(Sd,ker),e(Sd,yX),e(yX,Ser),e(Sd,Rer),e(Uo,Ber),e(Uo,u8),e(u8,Per),e(u8,Ipe),e(Ipe,Ier),e(u8,qer),e(Uo,Ner),e(Uo,Et),M(p8,Et,null),e(Et,jer),e(Et,qpe),e(qpe,Der),e(Et,Ger),e(Et,Rd),e(Rd,Oer),e(Rd,Npe),e(Npe,Ver),e(Rd,Xer),e(Rd,LX),e(LX,zer),e(Rd,Qer),e(Et,Wer),M(tM,Et,null),e(Uo,Her),e(Uo,po),M(_8,po,null),e(po,Uer),e(po,jpe),e(jpe,Jer),e(po,Yer),e(po,Ua),e(Ua,Ker),e(Ua,Dpe),e(Dpe,Zer),e(Ua,eor),e(Ua,Gpe),e(Gpe,oor),e(Ua,ror),e(Ua,Ope),e(Ope,tor),e(Ua,aor),e(po,nor),e(po,Ja),e(Ja,aM),e(aM,Vpe),e(Vpe,sor),e(aM,lor),e(aM,xX),e(xX,ior),e(aM,dor),e(Ja,cor),e(Ja,nM),e(nM,Xpe),e(Xpe,mor),e(nM,gor),e(nM,$X),e($X,hor),e(nM,uor),e(Ja,por),e(Ja,sM),e(sM,zpe),e(zpe,_or),e(sM,bor),e(sM,kX),e(kX,For),e(sM,vor),e(Ja,Tor),e(Ja,lM),e(lM,Qpe),e(Qpe,Mor),e(lM,Eor),e(lM,SX),e(SX,Cor),e(lM,wor),e(po,Aor),e(po,iM),e(iM,yor),e(iM,Wpe),e(Wpe,Lor),e(iM,xor),e(iM,Hpe),e(Hpe,$or),e(po,kor),M(dM,po,null),b(m,cIe,_),b(m,Bd,_),e(Bd,cM),e(cM,Upe),M(b8,Upe,null),e(Bd,Sor),e(Bd,Jpe),e(Jpe,Ror),b(m,mIe,_),b(m,Jo,_),M(F8,Jo,null),e(Jo,Bor),e(Jo,Pd),e(Pd,Por),e(Pd,RX),e(RX,Ior),e(Pd,qor),e(Pd,BX),e(BX,Nor),e(Pd,jor),e(Jo,Dor),e(Jo,v8),e(v8,Gor),e(v8,Ype),e(Ype,Oor),e(v8,Vor),e(Jo,Xor),e(Jo,Ct),M(T8,Ct,null),e(Ct,zor),e(Ct,Kpe),e(Kpe,Qor),e(Ct,Wor),e(Ct,Id),e(Id,Hor),e(Id,Zpe),e(Zpe,Uor),e(Id,Jor),e(Id,PX),e(PX,Yor),e(Id,Kor),e(Ct,Zor),M(mM,Ct,null),e(Jo,err),e(Jo,_o),M(M8,_o,null),e(_o,orr),e(_o,e_e),e(e_e,rrr),e(_o,trr),e(_o,Ya),e(Ya,arr),e(Ya,o_e),e(o_e,nrr),e(Ya,srr),e(Ya,r_e),e(r_e,lrr),e(Ya,irr),e(Ya,t_e),e(t_e,drr),e(Ya,crr),e(_o,mrr),e(_o,a_e),e(a_e,fM),e(fM,n_e),e(n_e,frr),e(fM,grr),e(fM,IX),e(IX,hrr),e(fM,urr),e(_o,prr),e(_o,gM),e(gM,_rr),e(gM,s_e),e(s_e,brr),e(gM,Frr),e(gM,l_e),e(l_e,vrr),e(_o,Trr),M(hM,_o,null),b(m,fIe,_),b(m,qd,_),e(qd,uM),e(uM,i_e),M(E8,i_e,null),e(qd,Mrr),e(qd,d_e),e(d_e,Err),b(m,gIe,_),b(m,Yo,_),M(C8,Yo,null),e(Yo,Crr),e(Yo,Nd),e(Nd,wrr),e(Nd,qX),e(qX,Arr),e(Nd,yrr),e(Nd,NX),e(NX,Lrr),e(Nd,xrr),e(Yo,$rr),e(Yo,w8),e(w8,krr),e(w8,c_e),e(c_e,Srr),e(w8,Rrr),e(Yo,Brr),e(Yo,wt),M(A8,wt,null),e(wt,Prr),e(wt,m_e),e(m_e,Irr),e(wt,qrr),e(wt,jd),e(jd,Nrr),e(jd,f_e),e(f_e,jrr),e(jd,Drr),e(jd,jX),e(jX,Grr),e(jd,Orr),e(wt,Vrr),M(pM,wt,null),e(Yo,Xrr),e(Yo,wr),M(y8,wr,null),e(wr,zrr),e(wr,g_e),e(g_e,Qrr),e(wr,Wrr),e(wr,Ka),e(Ka,Hrr),e(Ka,h_e),e(h_e,Urr),e(Ka,Jrr),e(Ka,u_e),e(u_e,Yrr),e(Ka,Krr),e(Ka,p_e),e(p_e,Zrr),e(Ka,etr),e(wr,otr),e(wr,j),e(j,_M),e(_M,__e),e(__e,rtr),e(_M,ttr),e(_M,DX),e(DX,atr),e(_M,ntr),e(j,str),e(j,bM),e(bM,b_e),e(b_e,ltr),e(bM,itr),e(bM,GX),e(GX,dtr),e(bM,ctr),e(j,mtr),e(j,FM),e(FM,F_e),e(F_e,ftr),e(FM,gtr),e(FM,OX),e(OX,htr),e(FM,utr),e(j,ptr),e(j,vM),e(vM,v_e),e(v_e,_tr),e(vM,btr),e(vM,VX),e(VX,Ftr),e(vM,vtr),e(j,Ttr),e(j,TM),e(TM,T_e),e(T_e,Mtr),e(TM,Etr),e(TM,XX),e(XX,Ctr),e(TM,wtr),e(j,Atr),e(j,MM),e(MM,M_e),e(M_e,ytr),e(MM,Ltr),e(MM,zX),e(zX,xtr),e(MM,$tr),e(j,ktr),e(j,EM),e(EM,E_e),e(E_e,Str),e(EM,Rtr),e(EM,QX),e(QX,Btr),e(EM,Ptr),e(j,Itr),e(j,CM),e(CM,C_e),e(C_e,qtr),e(CM,Ntr),e(CM,WX),e(WX,jtr),e(CM,Dtr),e(j,Gtr),e(j,wM),e(wM,w_e),e(w_e,Otr),e(wM,Vtr),e(wM,HX),e(HX,Xtr),e(wM,ztr),e(j,Qtr),e(j,AM),e(AM,A_e),e(A_e,Wtr),e(AM,Htr),e(AM,UX),e(UX,Utr),e(AM,Jtr),e(j,Ytr),e(j,yM),e(yM,y_e),e(y_e,Ktr),e(yM,Ztr),e(yM,JX),e(JX,ear),e(yM,oar),e(j,rar),e(j,LM),e(LM,L_e),e(L_e,tar),e(LM,aar),e(LM,YX),e(YX,nar),e(LM,sar),e(j,lar),e(j,xM),e(xM,x_e),e(x_e,iar),e(xM,dar),e(xM,KX),e(KX,car),e(xM,mar),e(j,far),e(j,$M),e($M,$_e),e($_e,gar),e($M,har),e($M,ZX),e(ZX,uar),e($M,par),e(j,_ar),e(j,kM),e(kM,k_e),e(k_e,bar),e(kM,Far),e(kM,ez),e(ez,Tar),e(kM,Mar),e(j,Ear),e(j,SM),e(SM,S_e),e(S_e,Car),e(SM,war),e(SM,oz),e(oz,Aar),e(SM,yar),e(j,Lar),e(j,RM),e(RM,R_e),e(R_e,xar),e(RM,$ar),e(RM,rz),e(rz,kar),e(RM,Sar),e(j,Rar),e(j,Bs),e(Bs,B_e),e(B_e,Bar),e(Bs,Par),e(Bs,tz),e(tz,Iar),e(Bs,qar),e(Bs,az),e(az,Nar),e(Bs,jar),e(j,Dar),e(j,BM),e(BM,P_e),e(P_e,Gar),e(BM,Oar),e(BM,nz),e(nz,Var),e(BM,Xar),e(j,zar),e(j,PM),e(PM,I_e),e(I_e,Qar),e(PM,War),e(PM,sz),e(sz,Har),e(PM,Uar),e(j,Jar),e(j,IM),e(IM,q_e),e(q_e,Yar),e(IM,Kar),e(IM,lz),e(lz,Zar),e(IM,enr),e(j,onr),e(j,qM),e(qM,N_e),e(N_e,rnr),e(qM,tnr),e(qM,iz),e(iz,anr),e(qM,nnr),e(j,snr),e(j,NM),e(NM,j_e),e(j_e,lnr),e(NM,inr),e(NM,dz),e(dz,dnr),e(NM,cnr),e(j,mnr),e(j,jM),e(jM,D_e),e(D_e,fnr),e(jM,gnr),e(jM,cz),e(cz,hnr),e(jM,unr),e(j,pnr),e(j,DM),e(DM,G_e),e(G_e,_nr),e(DM,bnr),e(DM,mz),e(mz,Fnr),e(DM,vnr),e(j,Tnr),e(j,GM),e(GM,O_e),e(O_e,Mnr),e(GM,Enr),e(GM,fz),e(fz,Cnr),e(GM,wnr),e(j,Anr),e(j,OM),e(OM,V_e),e(V_e,ynr),e(OM,Lnr),e(OM,gz),e(gz,xnr),e(OM,$nr),e(j,knr),e(j,VM),e(VM,X_e),e(X_e,Snr),e(VM,Rnr),e(VM,hz),e(hz,Bnr),e(VM,Pnr),e(j,Inr),e(j,XM),e(XM,z_e),e(z_e,qnr),e(XM,Nnr),e(XM,uz),e(uz,jnr),e(XM,Dnr),e(j,Gnr),e(j,zM),e(zM,Q_e),e(Q_e,Onr),e(zM,Vnr),e(zM,pz),e(pz,Xnr),e(zM,znr),e(j,Qnr),e(j,QM),e(QM,W_e),e(W_e,Wnr),e(QM,Hnr),e(QM,_z),e(_z,Unr),e(QM,Jnr),e(j,Ynr),e(j,WM),e(WM,H_e),e(H_e,Knr),e(WM,Znr),e(WM,bz),e(bz,esr),e(WM,osr),e(j,rsr),e(j,HM),e(HM,U_e),e(U_e,tsr),e(HM,asr),e(HM,Fz),e(Fz,nsr),e(HM,ssr),e(j,lsr),e(j,UM),e(UM,J_e),e(J_e,isr),e(UM,dsr),e(UM,vz),e(vz,csr),e(UM,msr),e(j,fsr),e(j,JM),e(JM,Y_e),e(Y_e,gsr),e(JM,hsr),e(JM,Tz),e(Tz,usr),e(JM,psr),e(j,_sr),e(j,YM),e(YM,K_e),e(K_e,bsr),e(YM,Fsr),e(YM,Mz),e(Mz,vsr),e(YM,Tsr),e(j,Msr),e(j,KM),e(KM,Z_e),e(Z_e,Esr),e(KM,Csr),e(KM,Ez),e(Ez,wsr),e(KM,Asr),e(j,ysr),e(j,ZM),e(ZM,ebe),e(ebe,Lsr),e(ZM,xsr),e(ZM,Cz),e(Cz,$sr),e(ZM,ksr),e(j,Ssr),e(j,e4),e(e4,obe),e(obe,Rsr),e(e4,Bsr),e(e4,wz),e(wz,Psr),e(e4,Isr),e(j,qsr),e(j,o4),e(o4,rbe),e(rbe,Nsr),e(o4,jsr),e(o4,Az),e(Az,Dsr),e(o4,Gsr),e(j,Osr),e(j,r4),e(r4,tbe),e(tbe,Vsr),e(r4,Xsr),e(r4,yz),e(yz,zsr),e(r4,Qsr),e(j,Wsr),e(j,t4),e(t4,abe),e(abe,Hsr),e(t4,Usr),e(t4,Lz),e(Lz,Jsr),e(t4,Ysr),e(j,Ksr),e(j,a4),e(a4,nbe),e(nbe,Zsr),e(a4,elr),e(a4,xz),e(xz,olr),e(a4,rlr),e(j,tlr),e(j,n4),e(n4,sbe),e(sbe,alr),e(n4,nlr),e(n4,$z),e($z,slr),e(n4,llr),e(j,ilr),e(j,s4),e(s4,lbe),e(lbe,dlr),e(s4,clr),e(s4,kz),e(kz,mlr),e(s4,flr),e(wr,glr),M(l4,wr,null),b(m,hIe,_),b(m,Dd,_),e(Dd,i4),e(i4,ibe),M(L8,ibe,null),e(Dd,hlr),e(Dd,dbe),e(dbe,ulr),b(m,uIe,_),b(m,Ko,_),M(x8,Ko,null),e(Ko,plr),e(Ko,Gd),e(Gd,_lr),e(Gd,Sz),e(Sz,blr),e(Gd,Flr),e(Gd,Rz),e(Rz,vlr),e(Gd,Tlr),e(Ko,Mlr),e(Ko,$8),e($8,Elr),e($8,cbe),e(cbe,Clr),e($8,wlr),e(Ko,Alr),e(Ko,At),M(k8,At,null),e(At,ylr),e(At,mbe),e(mbe,Llr),e(At,xlr),e(At,Od),e(Od,$lr),e(Od,fbe),e(fbe,klr),e(Od,Slr),e(Od,Bz),e(Bz,Rlr),e(Od,Blr),e(At,Plr),M(d4,At,null),e(Ko,Ilr),e(Ko,Ar),M(S8,Ar,null),e(Ar,qlr),e(Ar,gbe),e(gbe,Nlr),e(Ar,jlr),e(Ar,Za),e(Za,Dlr),e(Za,hbe),e(hbe,Glr),e(Za,Olr),e(Za,ube),e(ube,Vlr),e(Za,Xlr),e(Za,pbe),e(pbe,zlr),e(Za,Qlr),e(Ar,Wlr),e(Ar,ne),e(ne,c4),e(c4,_be),e(_be,Hlr),e(c4,Ulr),e(c4,Pz),e(Pz,Jlr),e(c4,Ylr),e(ne,Klr),e(ne,m4),e(m4,bbe),e(bbe,Zlr),e(m4,eir),e(m4,Iz),e(Iz,oir),e(m4,rir),e(ne,tir),e(ne,f4),e(f4,Fbe),e(Fbe,air),e(f4,nir),e(f4,qz),e(qz,sir),e(f4,lir),e(ne,iir),e(ne,g4),e(g4,vbe),e(vbe,dir),e(g4,cir),e(g4,Nz),e(Nz,mir),e(g4,fir),e(ne,gir),e(ne,h4),e(h4,Tbe),e(Tbe,hir),e(h4,uir),e(h4,jz),e(jz,pir),e(h4,_ir),e(ne,bir),e(ne,u4),e(u4,Mbe),e(Mbe,Fir),e(u4,vir),e(u4,Dz),e(Dz,Tir),e(u4,Mir),e(ne,Eir),e(ne,p4),e(p4,Ebe),e(Ebe,Cir),e(p4,wir),e(p4,Gz),e(Gz,Air),e(p4,yir),e(ne,Lir),e(ne,_4),e(_4,Cbe),e(Cbe,xir),e(_4,$ir),e(_4,Oz),e(Oz,kir),e(_4,Sir),e(ne,Rir),e(ne,b4),e(b4,wbe),e(wbe,Bir),e(b4,Pir),e(b4,Vz),e(Vz,Iir),e(b4,qir),e(ne,Nir),e(ne,F4),e(F4,Abe),e(Abe,jir),e(F4,Dir),e(F4,Xz),e(Xz,Gir),e(F4,Oir),e(ne,Vir),e(ne,v4),e(v4,ybe),e(ybe,Xir),e(v4,zir),e(v4,zz),e(zz,Qir),e(v4,Wir),e(ne,Hir),e(ne,T4),e(T4,Lbe),e(Lbe,Uir),e(T4,Jir),e(T4,Qz),e(Qz,Yir),e(T4,Kir),e(ne,Zir),e(ne,M4),e(M4,xbe),e(xbe,edr),e(M4,odr),e(M4,Wz),e(Wz,rdr),e(M4,tdr),e(ne,adr),e(ne,E4),e(E4,$be),e($be,ndr),e(E4,sdr),e(E4,Hz),e(Hz,ldr),e(E4,idr),e(ne,ddr),e(ne,C4),e(C4,kbe),e(kbe,cdr),e(C4,mdr),e(C4,Uz),e(Uz,fdr),e(C4,gdr),e(ne,hdr),e(ne,w4),e(w4,Sbe),e(Sbe,udr),e(w4,pdr),e(w4,Jz),e(Jz,_dr),e(w4,bdr),e(ne,Fdr),e(ne,A4),e(A4,Rbe),e(Rbe,vdr),e(A4,Tdr),e(A4,Yz),e(Yz,Mdr),e(A4,Edr),e(ne,Cdr),e(ne,y4),e(y4,Bbe),e(Bbe,wdr),e(y4,Adr),e(y4,Kz),e(Kz,ydr),e(y4,Ldr),e(ne,xdr),e(ne,L4),e(L4,Pbe),e(Pbe,$dr),e(L4,kdr),e(L4,Zz),e(Zz,Sdr),e(L4,Rdr),e(ne,Bdr),e(ne,x4),e(x4,Ibe),e(Ibe,Pdr),e(x4,Idr),e(x4,eQ),e(eQ,qdr),e(x4,Ndr),e(ne,jdr),e(ne,$4),e($4,qbe),e(qbe,Ddr),e($4,Gdr),e($4,oQ),e(oQ,Odr),e($4,Vdr),e(ne,Xdr),e(ne,k4),e(k4,Nbe),e(Nbe,zdr),e(k4,Qdr),e(k4,rQ),e(rQ,Wdr),e(k4,Hdr),e(ne,Udr),e(ne,S4),e(S4,jbe),e(jbe,Jdr),e(S4,Ydr),e(S4,tQ),e(tQ,Kdr),e(S4,Zdr),e(Ar,ecr),M(R4,Ar,null),b(m,pIe,_),b(m,Vd,_),e(Vd,B4),e(B4,Dbe),M(R8,Dbe,null),e(Vd,ocr),e(Vd,Gbe),e(Gbe,rcr),b(m,_Ie,_),b(m,Zo,_),M(B8,Zo,null),e(Zo,tcr),e(Zo,Xd),e(Xd,acr),e(Xd,aQ),e(aQ,ncr),e(Xd,scr),e(Xd,nQ),e(nQ,lcr),e(Xd,icr),e(Zo,dcr),e(Zo,P8),e(P8,ccr),e(P8,Obe),e(Obe,mcr),e(P8,fcr),e(Zo,gcr),e(Zo,yt),M(I8,yt,null),e(yt,hcr),e(yt,Vbe),e(Vbe,ucr),e(yt,pcr),e(yt,zd),e(zd,_cr),e(zd,Xbe),e(Xbe,bcr),e(zd,Fcr),e(zd,sQ),e(sQ,vcr),e(zd,Tcr),e(yt,Mcr),M(P4,yt,null),e(Zo,Ecr),e(Zo,yr),M(q8,yr,null),e(yr,Ccr),e(yr,zbe),e(zbe,wcr),e(yr,Acr),e(yr,en),e(en,ycr),e(en,Qbe),e(Qbe,Lcr),e(en,xcr),e(en,Wbe),e(Wbe,$cr),e(en,kcr),e(en,Hbe),e(Hbe,Scr),e(en,Rcr),e(yr,Bcr),e(yr,Te),e(Te,I4),e(I4,Ube),e(Ube,Pcr),e(I4,Icr),e(I4,lQ),e(lQ,qcr),e(I4,Ncr),e(Te,jcr),e(Te,q4),e(q4,Jbe),e(Jbe,Dcr),e(q4,Gcr),e(q4,iQ),e(iQ,Ocr),e(q4,Vcr),e(Te,Xcr),e(Te,N4),e(N4,Ybe),e(Ybe,zcr),e(N4,Qcr),e(N4,dQ),e(dQ,Wcr),e(N4,Hcr),e(Te,Ucr),e(Te,j4),e(j4,Kbe),e(Kbe,Jcr),e(j4,Ycr),e(j4,cQ),e(cQ,Kcr),e(j4,Zcr),e(Te,emr),e(Te,D4),e(D4,Zbe),e(Zbe,omr),e(D4,rmr),e(D4,mQ),e(mQ,tmr),e(D4,amr),e(Te,nmr),e(Te,G4),e(G4,e2e),e(e2e,smr),e(G4,lmr),e(G4,fQ),e(fQ,imr),e(G4,dmr),e(Te,cmr),e(Te,O4),e(O4,o2e),e(o2e,mmr),e(O4,fmr),e(O4,gQ),e(gQ,gmr),e(O4,hmr),e(Te,umr),e(Te,V4),e(V4,r2e),e(r2e,pmr),e(V4,_mr),e(V4,hQ),e(hQ,bmr),e(V4,Fmr),e(Te,vmr),e(Te,X4),e(X4,t2e),e(t2e,Tmr),e(X4,Mmr),e(X4,uQ),e(uQ,Emr),e(X4,Cmr),e(Te,wmr),e(Te,z4),e(z4,a2e),e(a2e,Amr),e(z4,ymr),e(z4,pQ),e(pQ,Lmr),e(z4,xmr),e(Te,$mr),e(Te,Q4),e(Q4,n2e),e(n2e,kmr),e(Q4,Smr),e(Q4,_Q),e(_Q,Rmr),e(Q4,Bmr),e(Te,Pmr),e(Te,W4),e(W4,s2e),e(s2e,Imr),e(W4,qmr),e(W4,bQ),e(bQ,Nmr),e(W4,jmr),e(yr,Dmr),M(H4,yr,null),b(m,bIe,_),b(m,Qd,_),e(Qd,U4),e(U4,l2e),M(N8,l2e,null),e(Qd,Gmr),e(Qd,i2e),e(i2e,Omr),b(m,FIe,_),b(m,er,_),M(j8,er,null),e(er,Vmr),e(er,Wd),e(Wd,Xmr),e(Wd,FQ),e(FQ,zmr),e(Wd,Qmr),e(Wd,vQ),e(vQ,Wmr),e(Wd,Hmr),e(er,Umr),e(er,D8),e(D8,Jmr),e(D8,d2e),e(d2e,Ymr),e(D8,Kmr),e(er,Zmr),e(er,Lt),M(G8,Lt,null),e(Lt,efr),e(Lt,c2e),e(c2e,ofr),e(Lt,rfr),e(Lt,Hd),e(Hd,tfr),e(Hd,m2e),e(m2e,afr),e(Hd,nfr),e(Hd,TQ),e(TQ,sfr),e(Hd,lfr),e(Lt,ifr),M(J4,Lt,null),e(er,dfr),e(er,Lr),M(O8,Lr,null),e(Lr,cfr),e(Lr,f2e),e(f2e,mfr),e(Lr,ffr),e(Lr,on),e(on,gfr),e(on,g2e),e(g2e,hfr),e(on,ufr),e(on,h2e),e(h2e,pfr),e(on,_fr),e(on,u2e),e(u2e,bfr),e(on,Ffr),e(Lr,vfr),e(Lr,Ud),e(Ud,Y4),e(Y4,p2e),e(p2e,Tfr),e(Y4,Mfr),e(Y4,MQ),e(MQ,Efr),e(Y4,Cfr),e(Ud,wfr),e(Ud,K4),e(K4,_2e),e(_2e,Afr),e(K4,yfr),e(K4,EQ),e(EQ,Lfr),e(K4,xfr),e(Ud,$fr),e(Ud,Z4),e(Z4,b2e),e(b2e,kfr),e(Z4,Sfr),e(Z4,CQ),e(CQ,Rfr),e(Z4,Bfr),e(Lr,Pfr),M(eE,Lr,null),b(m,vIe,_),b(m,Jd,_),e(Jd,oE),e(oE,F2e),M(V8,F2e,null),e(Jd,Ifr),e(Jd,v2e),e(v2e,qfr),b(m,TIe,_),b(m,or,_),M(X8,or,null),e(or,Nfr),e(or,Yd),e(Yd,jfr),e(Yd,wQ),e(wQ,Dfr),e(Yd,Gfr),e(Yd,AQ),e(AQ,Ofr),e(Yd,Vfr),e(or,Xfr),e(or,z8),e(z8,zfr),e(z8,T2e),e(T2e,Qfr),e(z8,Wfr),e(or,Hfr),e(or,xt),M(Q8,xt,null),e(xt,Ufr),e(xt,M2e),e(M2e,Jfr),e(xt,Yfr),e(xt,Kd),e(Kd,Kfr),e(Kd,E2e),e(E2e,Zfr),e(Kd,egr),e(Kd,yQ),e(yQ,ogr),e(Kd,rgr),e(xt,tgr),M(rE,xt,null),e(or,agr),e(or,xr),M(W8,xr,null),e(xr,ngr),e(xr,C2e),e(C2e,sgr),e(xr,lgr),e(xr,rn),e(rn,igr),e(rn,w2e),e(w2e,dgr),e(rn,cgr),e(rn,A2e),e(A2e,mgr),e(rn,fgr),e(rn,y2e),e(y2e,ggr),e(rn,hgr),e(xr,ugr),e(xr,ie),e(ie,tE),e(tE,L2e),e(L2e,pgr),e(tE,_gr),e(tE,LQ),e(LQ,bgr),e(tE,Fgr),e(ie,vgr),e(ie,aE),e(aE,x2e),e(x2e,Tgr),e(aE,Mgr),e(aE,xQ),e(xQ,Egr),e(aE,Cgr),e(ie,wgr),e(ie,nE),e(nE,$2e),e($2e,Agr),e(nE,ygr),e(nE,$Q),e($Q,Lgr),e(nE,xgr),e(ie,$gr),e(ie,sE),e(sE,k2e),e(k2e,kgr),e(sE,Sgr),e(sE,kQ),e(kQ,Rgr),e(sE,Bgr),e(ie,Pgr),e(ie,lE),e(lE,S2e),e(S2e,Igr),e(lE,qgr),e(lE,SQ),e(SQ,Ngr),e(lE,jgr),e(ie,Dgr),e(ie,iE),e(iE,R2e),e(R2e,Ggr),e(iE,Ogr),e(iE,RQ),e(RQ,Vgr),e(iE,Xgr),e(ie,zgr),e(ie,dE),e(dE,B2e),e(B2e,Qgr),e(dE,Wgr),e(dE,BQ),e(BQ,Hgr),e(dE,Ugr),e(ie,Jgr),e(ie,cE),e(cE,P2e),e(P2e,Ygr),e(cE,Kgr),e(cE,PQ),e(PQ,Zgr),e(cE,ehr),e(ie,ohr),e(ie,mE),e(mE,I2e),e(I2e,rhr),e(mE,thr),e(mE,IQ),e(IQ,ahr),e(mE,nhr),e(ie,shr),e(ie,fE),e(fE,q2e),e(q2e,lhr),e(fE,ihr),e(fE,qQ),e(qQ,dhr),e(fE,chr),e(ie,mhr),e(ie,gE),e(gE,N2e),e(N2e,fhr),e(gE,ghr),e(gE,NQ),e(NQ,hhr),e(gE,uhr),e(ie,phr),e(ie,hE),e(hE,j2e),e(j2e,_hr),e(hE,bhr),e(hE,jQ),e(jQ,Fhr),e(hE,vhr),e(ie,Thr),e(ie,uE),e(uE,D2e),e(D2e,Mhr),e(uE,Ehr),e(uE,DQ),e(DQ,Chr),e(uE,whr),e(ie,Ahr),e(ie,pE),e(pE,G2e),e(G2e,yhr),e(pE,Lhr),e(pE,GQ),e(GQ,xhr),e(pE,$hr),e(ie,khr),e(ie,_E),e(_E,O2e),e(O2e,Shr),e(_E,Rhr),e(_E,OQ),e(OQ,Bhr),e(_E,Phr),e(ie,Ihr),e(ie,bE),e(bE,V2e),e(V2e,qhr),e(bE,Nhr),e(bE,VQ),e(VQ,jhr),e(bE,Dhr),e(ie,Ghr),e(ie,FE),e(FE,X2e),e(X2e,Ohr),e(FE,Vhr),e(FE,XQ),e(XQ,Xhr),e(FE,zhr),e(ie,Qhr),e(ie,vE),e(vE,z2e),e(z2e,Whr),e(vE,Hhr),e(vE,zQ),e(zQ,Uhr),e(vE,Jhr),e(ie,Yhr),e(ie,TE),e(TE,Q2e),e(Q2e,Khr),e(TE,Zhr),e(TE,QQ),e(QQ,eur),e(TE,our),e(ie,rur),e(ie,ME),e(ME,W2e),e(W2e,tur),e(ME,aur),e(ME,WQ),e(WQ,nur),e(ME,sur),e(xr,lur),M(EE,xr,null),b(m,MIe,_),b(m,Zd,_),e(Zd,CE),e(CE,H2e),M(H8,H2e,null),e(Zd,iur),e(Zd,U2e),e(U2e,dur),b(m,EIe,_),b(m,rr,_),M(U8,rr,null),e(rr,cur),e(rr,ec),e(ec,mur),e(ec,HQ),e(HQ,fur),e(ec,gur),e(ec,UQ),e(UQ,hur),e(ec,uur),e(rr,pur),e(rr,J8),e(J8,_ur),e(J8,J2e),e(J2e,bur),e(J8,Fur),e(rr,vur),e(rr,$t),M(Y8,$t,null),e($t,Tur),e($t,Y2e),e(Y2e,Mur),e($t,Eur),e($t,oc),e(oc,Cur),e(oc,K2e),e(K2e,wur),e(oc,Aur),e(oc,JQ),e(JQ,yur),e(oc,Lur),e($t,xur),M(wE,$t,null),e(rr,$ur),e(rr,$r),M(K8,$r,null),e($r,kur),e($r,Z2e),e(Z2e,Sur),e($r,Rur),e($r,tn),e(tn,Bur),e(tn,eFe),e(eFe,Pur),e(tn,Iur),e(tn,oFe),e(oFe,qur),e(tn,Nur),e(tn,rFe),e(rFe,jur),e(tn,Dur),e($r,Gur),e($r,ye),e(ye,AE),e(AE,tFe),e(tFe,Our),e(AE,Vur),e(AE,YQ),e(YQ,Xur),e(AE,zur),e(ye,Qur),e(ye,yE),e(yE,aFe),e(aFe,Wur),e(yE,Hur),e(yE,KQ),e(KQ,Uur),e(yE,Jur),e(ye,Yur),e(ye,LE),e(LE,nFe),e(nFe,Kur),e(LE,Zur),e(LE,ZQ),e(ZQ,epr),e(LE,opr),e(ye,rpr),e(ye,xE),e(xE,sFe),e(sFe,tpr),e(xE,apr),e(xE,eW),e(eW,npr),e(xE,spr),e(ye,lpr),e(ye,$E),e($E,lFe),e(lFe,ipr),e($E,dpr),e($E,oW),e(oW,cpr),e($E,mpr),e(ye,fpr),e(ye,kE),e(kE,iFe),e(iFe,gpr),e(kE,hpr),e(kE,rW),e(rW,upr),e(kE,ppr),e(ye,_pr),e(ye,SE),e(SE,dFe),e(dFe,bpr),e(SE,Fpr),e(SE,tW),e(tW,vpr),e(SE,Tpr),e(ye,Mpr),e(ye,RE),e(RE,cFe),e(cFe,Epr),e(RE,Cpr),e(RE,aW),e(aW,wpr),e(RE,Apr),e(ye,ypr),e(ye,BE),e(BE,mFe),e(mFe,Lpr),e(BE,xpr),e(BE,nW),e(nW,$pr),e(BE,kpr),e(ye,Spr),e(ye,PE),e(PE,fFe),e(fFe,Rpr),e(PE,Bpr),e(PE,sW),e(sW,Ppr),e(PE,Ipr),e($r,qpr),M(IE,$r,null),b(m,CIe,_),b(m,rc,_),e(rc,qE),e(qE,gFe),M(Z8,gFe,null),e(rc,Npr),e(rc,hFe),e(hFe,jpr),b(m,wIe,_),b(m,tr,_),M(ex,tr,null),e(tr,Dpr),e(tr,tc),e(tc,Gpr),e(tc,lW),e(lW,Opr),e(tc,Vpr),e(tc,iW),e(iW,Xpr),e(tc,zpr),e(tr,Qpr),e(tr,ox),e(ox,Wpr),e(ox,uFe),e(uFe,Hpr),e(ox,Upr),e(tr,Jpr),e(tr,kt),M(rx,kt,null),e(kt,Ypr),e(kt,pFe),e(pFe,Kpr),e(kt,Zpr),e(kt,ac),e(ac,e_r),e(ac,_Fe),e(_Fe,o_r),e(ac,r_r),e(ac,dW),e(dW,t_r),e(ac,a_r),e(kt,n_r),M(NE,kt,null),e(tr,s_r),e(tr,kr),M(tx,kr,null),e(kr,l_r),e(kr,bFe),e(bFe,i_r),e(kr,d_r),e(kr,an),e(an,c_r),e(an,FFe),e(FFe,m_r),e(an,f_r),e(an,vFe),e(vFe,g_r),e(an,h_r),e(an,TFe),e(TFe,u_r),e(an,p_r),e(kr,__r),e(kr,Z),e(Z,jE),e(jE,MFe),e(MFe,b_r),e(jE,F_r),e(jE,cW),e(cW,v_r),e(jE,T_r),e(Z,M_r),e(Z,DE),e(DE,EFe),e(EFe,E_r),e(DE,C_r),e(DE,mW),e(mW,w_r),e(DE,A_r),e(Z,y_r),e(Z,GE),e(GE,CFe),e(CFe,L_r),e(GE,x_r),e(GE,fW),e(fW,$_r),e(GE,k_r),e(Z,S_r),e(Z,OE),e(OE,wFe),e(wFe,R_r),e(OE,B_r),e(OE,gW),e(gW,P_r),e(OE,I_r),e(Z,q_r),e(Z,VE),e(VE,AFe),e(AFe,N_r),e(VE,j_r),e(VE,hW),e(hW,D_r),e(VE,G_r),e(Z,O_r),e(Z,XE),e(XE,yFe),e(yFe,V_r),e(XE,X_r),e(XE,uW),e(uW,z_r),e(XE,Q_r),e(Z,W_r),e(Z,zE),e(zE,LFe),e(LFe,H_r),e(zE,U_r),e(zE,pW),e(pW,J_r),e(zE,Y_r),e(Z,K_r),e(Z,QE),e(QE,xFe),e(xFe,Z_r),e(QE,ebr),e(QE,_W),e(_W,obr),e(QE,rbr),e(Z,tbr),e(Z,WE),e(WE,$Fe),e($Fe,abr),e(WE,nbr),e(WE,bW),e(bW,sbr),e(WE,lbr),e(Z,ibr),e(Z,HE),e(HE,kFe),e(kFe,dbr),e(HE,cbr),e(HE,FW),e(FW,mbr),e(HE,fbr),e(Z,gbr),e(Z,UE),e(UE,SFe),e(SFe,hbr),e(UE,ubr),e(UE,vW),e(vW,pbr),e(UE,_br),e(Z,bbr),e(Z,JE),e(JE,RFe),e(RFe,Fbr),e(JE,vbr),e(JE,TW),e(TW,Tbr),e(JE,Mbr),e(Z,Ebr),e(Z,YE),e(YE,BFe),e(BFe,Cbr),e(YE,wbr),e(YE,MW),e(MW,Abr),e(YE,ybr),e(Z,Lbr),e(Z,KE),e(KE,PFe),e(PFe,xbr),e(KE,$br),e(KE,EW),e(EW,kbr),e(KE,Sbr),e(Z,Rbr),e(Z,ZE),e(ZE,IFe),e(IFe,Bbr),e(ZE,Pbr),e(ZE,CW),e(CW,Ibr),e(ZE,qbr),e(Z,Nbr),e(Z,e5),e(e5,qFe),e(qFe,jbr),e(e5,Dbr),e(e5,wW),e(wW,Gbr),e(e5,Obr),e(Z,Vbr),e(Z,o5),e(o5,NFe),e(NFe,Xbr),e(o5,zbr),e(o5,AW),e(AW,Qbr),e(o5,Wbr),e(Z,Hbr),e(Z,r5),e(r5,jFe),e(jFe,Ubr),e(r5,Jbr),e(r5,yW),e(yW,Ybr),e(r5,Kbr),e(Z,Zbr),e(Z,t5),e(t5,DFe),e(DFe,e2r),e(t5,o2r),e(t5,LW),e(LW,r2r),e(t5,t2r),e(Z,a2r),e(Z,a5),e(a5,GFe),e(GFe,n2r),e(a5,s2r),e(a5,xW),e(xW,l2r),e(a5,i2r),e(Z,d2r),e(Z,n5),e(n5,OFe),e(OFe,c2r),e(n5,m2r),e(n5,$W),e($W,f2r),e(n5,g2r),e(Z,h2r),e(Z,s5),e(s5,VFe),e(VFe,u2r),e(s5,p2r),e(s5,kW),e(kW,_2r),e(s5,b2r),e(Z,F2r),e(Z,l5),e(l5,XFe),e(XFe,v2r),e(l5,T2r),e(l5,SW),e(SW,M2r),e(l5,E2r),e(Z,C2r),e(Z,i5),e(i5,zFe),e(zFe,w2r),e(i5,A2r),e(i5,RW),e(RW,y2r),e(i5,L2r),e(Z,x2r),e(Z,d5),e(d5,QFe),e(QFe,$2r),e(d5,k2r),e(d5,BW),e(BW,S2r),e(d5,R2r),e(Z,B2r),e(Z,c5),e(c5,WFe),e(WFe,P2r),e(c5,I2r),e(c5,PW),e(PW,q2r),e(c5,N2r),e(kr,j2r),M(m5,kr,null),b(m,AIe,_),b(m,nc,_),e(nc,f5),e(f5,HFe),M(ax,HFe,null),e(nc,D2r),e(nc,UFe),e(UFe,G2r),b(m,yIe,_),b(m,ar,_),M(nx,ar,null),e(ar,O2r),e(ar,sc),e(sc,V2r),e(sc,IW),e(IW,X2r),e(sc,z2r),e(sc,qW),e(qW,Q2r),e(sc,W2r),e(ar,H2r),e(ar,sx),e(sx,U2r),e(sx,JFe),e(JFe,J2r),e(sx,Y2r),e(ar,K2r),e(ar,St),M(lx,St,null),e(St,Z2r),e(St,YFe),e(YFe,eFr),e(St,oFr),e(St,lc),e(lc,rFr),e(lc,KFe),e(KFe,tFr),e(lc,aFr),e(lc,NW),e(NW,nFr),e(lc,sFr),e(St,lFr),M(g5,St,null),e(ar,iFr),e(ar,Sr),M(ix,Sr,null),e(Sr,dFr),e(Sr,ZFe),e(ZFe,cFr),e(Sr,mFr),e(Sr,nn),e(nn,fFr),e(nn,eve),e(eve,gFr),e(nn,hFr),e(nn,ove),e(ove,uFr),e(nn,pFr),e(nn,rve),e(rve,_Fr),e(nn,bFr),e(Sr,FFr),e(Sr,ue),e(ue,h5),e(h5,tve),e(tve,vFr),e(h5,TFr),e(h5,jW),e(jW,MFr),e(h5,EFr),e(ue,CFr),e(ue,u5),e(u5,ave),e(ave,wFr),e(u5,AFr),e(u5,DW),e(DW,yFr),e(u5,LFr),e(ue,xFr),e(ue,p5),e(p5,nve),e(nve,$Fr),e(p5,kFr),e(p5,GW),e(GW,SFr),e(p5,RFr),e(ue,BFr),e(ue,_5),e(_5,sve),e(sve,PFr),e(_5,IFr),e(_5,OW),e(OW,qFr),e(_5,NFr),e(ue,jFr),e(ue,b5),e(b5,lve),e(lve,DFr),e(b5,GFr),e(b5,VW),e(VW,OFr),e(b5,VFr),e(ue,XFr),e(ue,F5),e(F5,ive),e(ive,zFr),e(F5,QFr),e(F5,XW),e(XW,WFr),e(F5,HFr),e(ue,UFr),e(ue,v5),e(v5,dve),e(dve,JFr),e(v5,YFr),e(v5,zW),e(zW,KFr),e(v5,ZFr),e(ue,evr),e(ue,T5),e(T5,cve),e(cve,ovr),e(T5,rvr),e(T5,QW),e(QW,tvr),e(T5,avr),e(ue,nvr),e(ue,M5),e(M5,mve),e(mve,svr),e(M5,lvr),e(M5,WW),e(WW,ivr),e(M5,dvr),e(ue,cvr),e(ue,E5),e(E5,fve),e(fve,mvr),e(E5,fvr),e(E5,HW),e(HW,gvr),e(E5,hvr),e(ue,uvr),e(ue,C5),e(C5,gve),e(gve,pvr),e(C5,_vr),e(C5,UW),e(UW,bvr),e(C5,Fvr),e(ue,vvr),e(ue,w5),e(w5,hve),e(hve,Tvr),e(w5,Mvr),e(w5,JW),e(JW,Evr),e(w5,Cvr),e(ue,wvr),e(ue,A5),e(A5,uve),e(uve,Avr),e(A5,yvr),e(A5,YW),e(YW,Lvr),e(A5,xvr),e(ue,$vr),e(ue,y5),e(y5,pve),e(pve,kvr),e(y5,Svr),e(y5,KW),e(KW,Rvr),e(y5,Bvr),e(ue,Pvr),e(ue,L5),e(L5,_ve),e(_ve,Ivr),e(L5,qvr),e(L5,ZW),e(ZW,Nvr),e(L5,jvr),e(ue,Dvr),e(ue,x5),e(x5,bve),e(bve,Gvr),e(x5,Ovr),e(x5,eH),e(eH,Vvr),e(x5,Xvr),e(ue,zvr),e(ue,$5),e($5,Fve),e(Fve,Qvr),e($5,Wvr),e($5,oH),e(oH,Hvr),e($5,Uvr),e(Sr,Jvr),M(k5,Sr,null),b(m,LIe,_),b(m,ic,_),e(ic,S5),e(S5,vve),M(dx,vve,null),e(ic,Yvr),e(ic,Tve),e(Tve,Kvr),b(m,xIe,_),b(m,nr,_),M(cx,nr,null),e(nr,Zvr),e(nr,dc),e(dc,e1r),e(dc,rH),e(rH,o1r),e(dc,r1r),e(dc,tH),e(tH,t1r),e(dc,a1r),e(nr,n1r),e(nr,mx),e(mx,s1r),e(mx,Mve),e(Mve,l1r),e(mx,i1r),e(nr,d1r),e(nr,Rt),M(fx,Rt,null),e(Rt,c1r),e(Rt,Eve),e(Eve,m1r),e(Rt,f1r),e(Rt,cc),e(cc,g1r),e(cc,Cve),e(Cve,h1r),e(cc,u1r),e(cc,aH),e(aH,p1r),e(cc,_1r),e(Rt,b1r),M(R5,Rt,null),e(nr,F1r),e(nr,Rr),M(gx,Rr,null),e(Rr,v1r),e(Rr,wve),e(wve,T1r),e(Rr,M1r),e(Rr,sn),e(sn,E1r),e(sn,Ave),e(Ave,C1r),e(sn,w1r),e(sn,yve),e(yve,A1r),e(sn,y1r),e(sn,Lve),e(Lve,L1r),e(sn,x1r),e(Rr,$1r),e(Rr,hx),e(hx,B5),e(B5,xve),e(xve,k1r),e(B5,S1r),e(B5,nH),e(nH,R1r),e(B5,B1r),e(hx,P1r),e(hx,P5),e(P5,$ve),e($ve,I1r),e(P5,q1r),e(P5,sH),e(sH,N1r),e(P5,j1r),e(Rr,D1r),M(I5,Rr,null),b(m,$Ie,_),b(m,mc,_),e(mc,q5),e(q5,kve),M(ux,kve,null),e(mc,G1r),e(mc,Sve),e(Sve,O1r),b(m,kIe,_),b(m,sr,_),M(px,sr,null),e(sr,V1r),e(sr,fc),e(fc,X1r),e(fc,lH),e(lH,z1r),e(fc,Q1r),e(fc,iH),e(iH,W1r),e(fc,H1r),e(sr,U1r),e(sr,_x),e(_x,J1r),e(_x,Rve),e(Rve,Y1r),e(_x,K1r),e(sr,Z1r),e(sr,Bt),M(bx,Bt,null),e(Bt,eTr),e(Bt,Bve),e(Bve,oTr),e(Bt,rTr),e(Bt,gc),e(gc,tTr),e(gc,Pve),e(Pve,aTr),e(gc,nTr),e(gc,dH),e(dH,sTr),e(gc,lTr),e(Bt,iTr),M(N5,Bt,null),e(sr,dTr),e(sr,Br),M(Fx,Br,null),e(Br,cTr),e(Br,Ive),e(Ive,mTr),e(Br,fTr),e(Br,ln),e(ln,gTr),e(ln,qve),e(qve,hTr),e(ln,uTr),e(ln,Nve),e(Nve,pTr),e(ln,_Tr),e(ln,jve),e(jve,bTr),e(ln,FTr),e(Br,vTr),e(Br,Dve),e(Dve,j5),e(j5,Gve),e(Gve,TTr),e(j5,MTr),e(j5,cH),e(cH,ETr),e(j5,CTr),e(Br,wTr),M(D5,Br,null),b(m,SIe,_),b(m,hc,_),e(hc,G5),e(G5,Ove),M(vx,Ove,null),e(hc,ATr),e(hc,Vve),e(Vve,yTr),b(m,RIe,_),b(m,lr,_),M(Tx,lr,null),e(lr,LTr),e(lr,uc),e(uc,xTr),e(uc,mH),e(mH,$Tr),e(uc,kTr),e(uc,fH),e(fH,STr),e(uc,RTr),e(lr,BTr),e(lr,Mx),e(Mx,PTr),e(Mx,Xve),e(Xve,ITr),e(Mx,qTr),e(lr,NTr),e(lr,Pt),M(Ex,Pt,null),e(Pt,jTr),e(Pt,zve),e(zve,DTr),e(Pt,GTr),e(Pt,pc),e(pc,OTr),e(pc,Qve),e(Qve,VTr),e(pc,XTr),e(pc,gH),e(gH,zTr),e(pc,QTr),e(Pt,WTr),M(O5,Pt,null),e(lr,HTr),e(lr,Pr),M(Cx,Pr,null),e(Pr,UTr),e(Pr,Wve),e(Wve,JTr),e(Pr,YTr),e(Pr,dn),e(dn,KTr),e(dn,Hve),e(Hve,ZTr),e(dn,eMr),e(dn,Uve),e(Uve,oMr),e(dn,rMr),e(dn,Jve),e(Jve,tMr),e(dn,aMr),e(Pr,nMr),e(Pr,de),e(de,V5),e(V5,Yve),e(Yve,sMr),e(V5,lMr),e(V5,hH),e(hH,iMr),e(V5,dMr),e(de,cMr),e(de,X5),e(X5,Kve),e(Kve,mMr),e(X5,fMr),e(X5,uH),e(uH,gMr),e(X5,hMr),e(de,uMr),e(de,z5),e(z5,Zve),e(Zve,pMr),e(z5,_Mr),e(z5,pH),e(pH,bMr),e(z5,FMr),e(de,vMr),e(de,Q5),e(Q5,e1e),e(e1e,TMr),e(Q5,MMr),e(Q5,_H),e(_H,EMr),e(Q5,CMr),e(de,wMr),e(de,W5),e(W5,o1e),e(o1e,AMr),e(W5,yMr),e(W5,bH),e(bH,LMr),e(W5,xMr),e(de,$Mr),e(de,H5),e(H5,r1e),e(r1e,kMr),e(H5,SMr),e(H5,FH),e(FH,RMr),e(H5,BMr),e(de,PMr),e(de,U5),e(U5,t1e),e(t1e,IMr),e(U5,qMr),e(U5,vH),e(vH,NMr),e(U5,jMr),e(de,DMr),e(de,J5),e(J5,a1e),e(a1e,GMr),e(J5,OMr),e(J5,TH),e(TH,VMr),e(J5,XMr),e(de,zMr),e(de,Y5),e(Y5,n1e),e(n1e,QMr),e(Y5,WMr),e(Y5,MH),e(MH,HMr),e(Y5,UMr),e(de,JMr),e(de,K5),e(K5,s1e),e(s1e,YMr),e(K5,KMr),e(K5,EH),e(EH,ZMr),e(K5,e4r),e(de,o4r),e(de,Z5),e(Z5,l1e),e(l1e,r4r),e(Z5,t4r),e(Z5,CH),e(CH,a4r),e(Z5,n4r),e(de,s4r),e(de,eC),e(eC,i1e),e(i1e,l4r),e(eC,i4r),e(eC,wH),e(wH,d4r),e(eC,c4r),e(de,m4r),e(de,oC),e(oC,d1e),e(d1e,f4r),e(oC,g4r),e(oC,AH),e(AH,h4r),e(oC,u4r),e(de,p4r),e(de,rC),e(rC,c1e),e(c1e,_4r),e(rC,b4r),e(rC,yH),e(yH,F4r),e(rC,v4r),e(de,T4r),e(de,tC),e(tC,m1e),e(m1e,M4r),e(tC,E4r),e(tC,LH),e(LH,C4r),e(tC,w4r),e(de,A4r),e(de,aC),e(aC,f1e),e(f1e,y4r),e(aC,L4r),e(aC,xH),e(xH,x4r),e(aC,$4r),e(de,k4r),e(de,nC),e(nC,g1e),e(g1e,S4r),e(nC,R4r),e(nC,$H),e($H,B4r),e(nC,P4r),e(de,I4r),e(de,sC),e(sC,h1e),e(h1e,q4r),e(sC,N4r),e(sC,kH),e(kH,j4r),e(sC,D4r),e(de,G4r),e(de,lC),e(lC,u1e),e(u1e,O4r),e(lC,V4r),e(lC,SH),e(SH,X4r),e(lC,z4r),e(de,Q4r),e(de,iC),e(iC,p1e),e(p1e,W4r),e(iC,H4r),e(iC,RH),e(RH,U4r),e(iC,J4r),e(Pr,Y4r),M(dC,Pr,null),b(m,BIe,_),b(m,_c,_),e(_c,cC),e(cC,_1e),M(wx,_1e,null),e(_c,K4r),e(_c,b1e),e(b1e,Z4r),b(m,PIe,_),b(m,ir,_),M(Ax,ir,null),e(ir,eEr),e(ir,bc),e(bc,oEr),e(bc,BH),e(BH,rEr),e(bc,tEr),e(bc,PH),e(PH,aEr),e(bc,nEr),e(ir,sEr),e(ir,yx),e(yx,lEr),e(yx,F1e),e(F1e,iEr),e(yx,dEr),e(ir,cEr),e(ir,It),M(Lx,It,null),e(It,mEr),e(It,v1e),e(v1e,fEr),e(It,gEr),e(It,Fc),e(Fc,hEr),e(Fc,T1e),e(T1e,uEr),e(Fc,pEr),e(Fc,IH),e(IH,_Er),e(Fc,bEr),e(It,FEr),M(mC,It,null),e(ir,vEr),e(ir,Ir),M(xx,Ir,null),e(Ir,TEr),e(Ir,M1e),e(M1e,MEr),e(Ir,EEr),e(Ir,cn),e(cn,CEr),e(cn,E1e),e(E1e,wEr),e(cn,AEr),e(cn,C1e),e(C1e,yEr),e(cn,LEr),e(cn,w1e),e(w1e,xEr),e(cn,$Er),e(Ir,kEr),e(Ir,ce),e(ce,fC),e(fC,A1e),e(A1e,SEr),e(fC,REr),e(fC,qH),e(qH,BEr),e(fC,PEr),e(ce,IEr),e(ce,gC),e(gC,y1e),e(y1e,qEr),e(gC,NEr),e(gC,NH),e(NH,jEr),e(gC,DEr),e(ce,GEr),e(ce,hC),e(hC,L1e),e(L1e,OEr),e(hC,VEr),e(hC,jH),e(jH,XEr),e(hC,zEr),e(ce,QEr),e(ce,uC),e(uC,x1e),e(x1e,WEr),e(uC,HEr),e(uC,DH),e(DH,UEr),e(uC,JEr),e(ce,YEr),e(ce,pC),e(pC,$1e),e($1e,KEr),e(pC,ZEr),e(pC,GH),e(GH,e5r),e(pC,o5r),e(ce,r5r),e(ce,_C),e(_C,k1e),e(k1e,t5r),e(_C,a5r),e(_C,OH),e(OH,n5r),e(_C,s5r),e(ce,l5r),e(ce,bC),e(bC,S1e),e(S1e,i5r),e(bC,d5r),e(bC,VH),e(VH,c5r),e(bC,m5r),e(ce,f5r),e(ce,FC),e(FC,R1e),e(R1e,g5r),e(FC,h5r),e(FC,XH),e(XH,u5r),e(FC,p5r),e(ce,_5r),e(ce,vC),e(vC,B1e),e(B1e,b5r),e(vC,F5r),e(vC,zH),e(zH,v5r),e(vC,T5r),e(ce,M5r),e(ce,TC),e(TC,P1e),e(P1e,E5r),e(TC,C5r),e(TC,QH),e(QH,w5r),e(TC,A5r),e(ce,y5r),e(ce,MC),e(MC,I1e),e(I1e,L5r),e(MC,x5r),e(MC,WH),e(WH,$5r),e(MC,k5r),e(ce,S5r),e(ce,EC),e(EC,q1e),e(q1e,R5r),e(EC,B5r),e(EC,HH),e(HH,P5r),e(EC,I5r),e(ce,q5r),e(ce,CC),e(CC,N1e),e(N1e,N5r),e(CC,j5r),e(CC,UH),e(UH,D5r),e(CC,G5r),e(ce,O5r),e(ce,wC),e(wC,j1e),e(j1e,V5r),e(wC,X5r),e(wC,JH),e(JH,z5r),e(wC,Q5r),e(ce,W5r),e(ce,AC),e(AC,D1e),e(D1e,H5r),e(AC,U5r),e(AC,YH),e(YH,J5r),e(AC,Y5r),e(ce,K5r),e(ce,yC),e(yC,G1e),e(G1e,Z5r),e(yC,eCr),e(yC,KH),e(KH,oCr),e(yC,rCr),e(ce,tCr),e(ce,LC),e(LC,O1e),e(O1e,aCr),e(LC,nCr),e(LC,ZH),e(ZH,sCr),e(LC,lCr),e(ce,iCr),e(ce,xC),e(xC,V1e),e(V1e,dCr),e(xC,cCr),e(xC,eU),e(eU,mCr),e(xC,fCr),e(ce,gCr),e(ce,$C),e($C,X1e),e(X1e,hCr),e($C,uCr),e($C,oU),e(oU,pCr),e($C,_Cr),e(ce,bCr),e(ce,kC),e(kC,z1e),e(z1e,FCr),e(kC,vCr),e(kC,rU),e(rU,TCr),e(kC,MCr),e(Ir,ECr),M(SC,Ir,null),b(m,IIe,_),b(m,vc,_),e(vc,RC),e(RC,Q1e),M($x,Q1e,null),e(vc,CCr),e(vc,W1e),e(W1e,wCr),b(m,qIe,_),b(m,dr,_),M(kx,dr,null),e(dr,ACr),e(dr,Tc),e(Tc,yCr),e(Tc,tU),e(tU,LCr),e(Tc,xCr),e(Tc,aU),e(aU,$Cr),e(Tc,kCr),e(dr,SCr),e(dr,Sx),e(Sx,RCr),e(Sx,H1e),e(H1e,BCr),e(Sx,PCr),e(dr,ICr),e(dr,qt),M(Rx,qt,null),e(qt,qCr),e(qt,U1e),e(U1e,NCr),e(qt,jCr),e(qt,Mc),e(Mc,DCr),e(Mc,J1e),e(J1e,GCr),e(Mc,OCr),e(Mc,nU),e(nU,VCr),e(Mc,XCr),e(qt,zCr),M(BC,qt,null),e(dr,QCr),e(dr,qr),M(Bx,qr,null),e(qr,WCr),e(qr,Y1e),e(Y1e,HCr),e(qr,UCr),e(qr,mn),e(mn,JCr),e(mn,K1e),e(K1e,YCr),e(mn,KCr),e(mn,Z1e),e(Z1e,ZCr),e(mn,e3r),e(mn,eTe),e(eTe,o3r),e(mn,r3r),e(qr,t3r),e(qr,oTe),e(oTe,PC),e(PC,rTe),e(rTe,a3r),e(PC,n3r),e(PC,sU),e(sU,s3r),e(PC,l3r),e(qr,i3r),M(IC,qr,null),b(m,NIe,_),b(m,Ec,_),e(Ec,qC),e(qC,tTe),M(Px,tTe,null),e(Ec,d3r),e(Ec,aTe),e(aTe,c3r),b(m,jIe,_),b(m,cr,_),M(Ix,cr,null),e(cr,m3r),e(cr,Cc),e(Cc,f3r),e(Cc,lU),e(lU,g3r),e(Cc,h3r),e(Cc,iU),e(iU,u3r),e(Cc,p3r),e(cr,_3r),e(cr,qx),e(qx,b3r),e(qx,nTe),e(nTe,F3r),e(qx,v3r),e(cr,T3r),e(cr,Nt),M(Nx,Nt,null),e(Nt,M3r),e(Nt,sTe),e(sTe,E3r),e(Nt,C3r),e(Nt,wc),e(wc,w3r),e(wc,lTe),e(lTe,A3r),e(wc,y3r),e(wc,dU),e(dU,L3r),e(wc,x3r),e(Nt,$3r),M(NC,Nt,null),e(cr,k3r),e(cr,Nr),M(jx,Nr,null),e(Nr,S3r),e(Nr,iTe),e(iTe,R3r),e(Nr,B3r),e(Nr,fn),e(fn,P3r),e(fn,dTe),e(dTe,I3r),e(fn,q3r),e(fn,cTe),e(cTe,N3r),e(fn,j3r),e(fn,mTe),e(mTe,D3r),e(fn,G3r),e(Nr,O3r),e(Nr,fTe),e(fTe,jC),e(jC,gTe),e(gTe,V3r),e(jC,X3r),e(jC,cU),e(cU,z3r),e(jC,Q3r),e(Nr,W3r),M(DC,Nr,null),b(m,DIe,_),b(m,Ac,_),e(Ac,GC),e(GC,hTe),M(Dx,hTe,null),e(Ac,H3r),e(Ac,uTe),e(uTe,U3r),b(m,GIe,_),b(m,mr,_),M(Gx,mr,null),e(mr,J3r),e(mr,yc),e(yc,Y3r),e(yc,mU),e(mU,K3r),e(yc,Z3r),e(yc,fU),e(fU,ewr),e(yc,owr),e(mr,rwr),e(mr,Ox),e(Ox,twr),e(Ox,pTe),e(pTe,awr),e(Ox,nwr),e(mr,swr),e(mr,jt),M(Vx,jt,null),e(jt,lwr),e(jt,_Te),e(_Te,iwr),e(jt,dwr),e(jt,Lc),e(Lc,cwr),e(Lc,bTe),e(bTe,mwr),e(Lc,fwr),e(Lc,gU),e(gU,gwr),e(Lc,hwr),e(jt,uwr),M(OC,jt,null),e(mr,pwr),e(mr,jr),M(Xx,jr,null),e(jr,_wr),e(jr,FTe),e(FTe,bwr),e(jr,Fwr),e(jr,gn),e(gn,vwr),e(gn,vTe),e(vTe,Twr),e(gn,Mwr),e(gn,TTe),e(TTe,Ewr),e(gn,Cwr),e(gn,MTe),e(MTe,wwr),e(gn,Awr),e(jr,ywr),e(jr,oe),e(oe,VC),e(VC,ETe),e(ETe,Lwr),e(VC,xwr),e(VC,hU),e(hU,$wr),e(VC,kwr),e(oe,Swr),e(oe,XC),e(XC,CTe),e(CTe,Rwr),e(XC,Bwr),e(XC,uU),e(uU,Pwr),e(XC,Iwr),e(oe,qwr),e(oe,zC),e(zC,wTe),e(wTe,Nwr),e(zC,jwr),e(zC,pU),e(pU,Dwr),e(zC,Gwr),e(oe,Owr),e(oe,QC),e(QC,ATe),e(ATe,Vwr),e(QC,Xwr),e(QC,_U),e(_U,zwr),e(QC,Qwr),e(oe,Wwr),e(oe,WC),e(WC,yTe),e(yTe,Hwr),e(WC,Uwr),e(WC,bU),e(bU,Jwr),e(WC,Ywr),e(oe,Kwr),e(oe,HC),e(HC,LTe),e(LTe,Zwr),e(HC,eAr),e(HC,FU),e(FU,oAr),e(HC,rAr),e(oe,tAr),e(oe,UC),e(UC,xTe),e(xTe,aAr),e(UC,nAr),e(UC,vU),e(vU,sAr),e(UC,lAr),e(oe,iAr),e(oe,JC),e(JC,$Te),e($Te,dAr),e(JC,cAr),e(JC,TU),e(TU,mAr),e(JC,fAr),e(oe,gAr),e(oe,YC),e(YC,kTe),e(kTe,hAr),e(YC,uAr),e(YC,MU),e(MU,pAr),e(YC,_Ar),e(oe,bAr),e(oe,KC),e(KC,STe),e(STe,FAr),e(KC,vAr),e(KC,EU),e(EU,TAr),e(KC,MAr),e(oe,EAr),e(oe,ZC),e(ZC,RTe),e(RTe,CAr),e(ZC,wAr),e(ZC,CU),e(CU,AAr),e(ZC,yAr),e(oe,LAr),e(oe,e3),e(e3,BTe),e(BTe,xAr),e(e3,$Ar),e(e3,wU),e(wU,kAr),e(e3,SAr),e(oe,RAr),e(oe,o3),e(o3,PTe),e(PTe,BAr),e(o3,PAr),e(o3,AU),e(AU,IAr),e(o3,qAr),e(oe,NAr),e(oe,r3),e(r3,ITe),e(ITe,jAr),e(r3,DAr),e(r3,yU),e(yU,GAr),e(r3,OAr),e(oe,VAr),e(oe,t3),e(t3,qTe),e(qTe,XAr),e(t3,zAr),e(t3,LU),e(LU,QAr),e(t3,WAr),e(oe,HAr),e(oe,a3),e(a3,NTe),e(NTe,UAr),e(a3,JAr),e(a3,xU),e(xU,YAr),e(a3,KAr),e(oe,ZAr),e(oe,n3),e(n3,jTe),e(jTe,e0r),e(n3,o0r),e(n3,$U),e($U,r0r),e(n3,t0r),e(oe,a0r),e(oe,s3),e(s3,DTe),e(DTe,n0r),e(s3,s0r),e(s3,kU),e(kU,l0r),e(s3,i0r),e(oe,d0r),e(oe,l3),e(l3,GTe),e(GTe,c0r),e(l3,m0r),e(l3,SU),e(SU,f0r),e(l3,g0r),e(oe,h0r),e(oe,i3),e(i3,OTe),e(OTe,u0r),e(i3,p0r),e(i3,RU),e(RU,_0r),e(i3,b0r),e(oe,F0r),e(oe,d3),e(d3,VTe),e(VTe,v0r),e(d3,T0r),e(d3,BU),e(BU,M0r),e(d3,E0r),e(oe,C0r),e(oe,c3),e(c3,XTe),e(XTe,w0r),e(c3,A0r),e(c3,PU),e(PU,y0r),e(c3,L0r),e(oe,x0r),e(oe,m3),e(m3,zTe),e(zTe,$0r),e(m3,k0r),e(m3,IU),e(IU,S0r),e(m3,R0r),e(oe,B0r),e(oe,f3),e(f3,QTe),e(QTe,P0r),e(f3,I0r),e(f3,qU),e(qU,q0r),e(f3,N0r),e(oe,j0r),e(oe,g3),e(g3,WTe),e(WTe,D0r),e(g3,G0r),e(g3,NU),e(NU,O0r),e(g3,V0r),e(jr,X0r),M(h3,jr,null),b(m,OIe,_),b(m,xc,_),e(xc,u3),e(u3,HTe),M(zx,HTe,null),e(xc,z0r),e(xc,UTe),e(UTe,Q0r),b(m,VIe,_),b(m,fr,_),M(Qx,fr,null),e(fr,W0r),e(fr,$c),e($c,H0r),e($c,jU),e(jU,U0r),e($c,J0r),e($c,DU),e(DU,Y0r),e($c,K0r),e(fr,Z0r),e(fr,Wx),e(Wx,e6r),e(Wx,JTe),e(JTe,o6r),e(Wx,r6r),e(fr,t6r),e(fr,Dt),M(Hx,Dt,null),e(Dt,a6r),e(Dt,YTe),e(YTe,n6r),e(Dt,s6r),e(Dt,kc),e(kc,l6r),e(kc,KTe),e(KTe,i6r),e(kc,d6r),e(kc,GU),e(GU,c6r),e(kc,m6r),e(Dt,f6r),M(p3,Dt,null),e(fr,g6r),e(fr,Dr),M(Ux,Dr,null),e(Dr,h6r),e(Dr,ZTe),e(ZTe,u6r),e(Dr,p6r),e(Dr,hn),e(hn,_6r),e(hn,eMe),e(eMe,b6r),e(hn,F6r),e(hn,oMe),e(oMe,v6r),e(hn,T6r),e(hn,rMe),e(rMe,M6r),e(hn,E6r),e(Dr,C6r),e(Dr,ke),e(ke,_3),e(_3,tMe),e(tMe,w6r),e(_3,A6r),e(_3,OU),e(OU,y6r),e(_3,L6r),e(ke,x6r),e(ke,b3),e(b3,aMe),e(aMe,$6r),e(b3,k6r),e(b3,VU),e(VU,S6r),e(b3,R6r),e(ke,B6r),e(ke,F3),e(F3,nMe),e(nMe,P6r),e(F3,I6r),e(F3,XU),e(XU,q6r),e(F3,N6r),e(ke,j6r),e(ke,v3),e(v3,sMe),e(sMe,D6r),e(v3,G6r),e(v3,zU),e(zU,O6r),e(v3,V6r),e(ke,X6r),e(ke,T3),e(T3,lMe),e(lMe,z6r),e(T3,Q6r),e(T3,QU),e(QU,W6r),e(T3,H6r),e(ke,U6r),e(ke,M3),e(M3,iMe),e(iMe,J6r),e(M3,Y6r),e(M3,WU),e(WU,K6r),e(M3,Z6r),e(ke,eyr),e(ke,E3),e(E3,dMe),e(dMe,oyr),e(E3,ryr),e(E3,HU),e(HU,tyr),e(E3,ayr),e(ke,nyr),e(ke,C3),e(C3,cMe),e(cMe,syr),e(C3,lyr),e(C3,UU),e(UU,iyr),e(C3,dyr),e(ke,cyr),e(ke,w3),e(w3,mMe),e(mMe,myr),e(w3,fyr),e(w3,JU),e(JU,gyr),e(w3,hyr),e(Dr,uyr),M(A3,Dr,null),b(m,XIe,_),b(m,Sc,_),e(Sc,y3),e(y3,fMe),M(Jx,fMe,null),e(Sc,pyr),e(Sc,gMe),e(gMe,_yr),b(m,zIe,_),b(m,gr,_),M(Yx,gr,null),e(gr,byr),e(gr,Rc),e(Rc,Fyr),e(Rc,YU),e(YU,vyr),e(Rc,Tyr),e(Rc,KU),e(KU,Myr),e(Rc,Eyr),e(gr,Cyr),e(gr,Kx),e(Kx,wyr),e(Kx,hMe),e(hMe,Ayr),e(Kx,yyr),e(gr,Lyr),e(gr,Gt),M(Zx,Gt,null),e(Gt,xyr),e(Gt,uMe),e(uMe,$yr),e(Gt,kyr),e(Gt,Bc),e(Bc,Syr),e(Bc,pMe),e(pMe,Ryr),e(Bc,Byr),e(Bc,ZU),e(ZU,Pyr),e(Bc,Iyr),e(Gt,qyr),M(L3,Gt,null),e(gr,Nyr),e(gr,Gr),M(e7,Gr,null),e(Gr,jyr),e(Gr,_Me),e(_Me,Dyr),e(Gr,Gyr),e(Gr,un),e(un,Oyr),e(un,bMe),e(bMe,Vyr),e(un,Xyr),e(un,FMe),e(FMe,zyr),e(un,Qyr),e(un,vMe),e(vMe,Wyr),e(un,Hyr),e(Gr,Uyr),e(Gr,Me),e(Me,x3),e(x3,TMe),e(TMe,Jyr),e(x3,Yyr),e(x3,eJ),e(eJ,Kyr),e(x3,Zyr),e(Me,eLr),e(Me,$3),e($3,MMe),e(MMe,oLr),e($3,rLr),e($3,oJ),e(oJ,tLr),e($3,aLr),e(Me,nLr),e(Me,k3),e(k3,EMe),e(EMe,sLr),e(k3,lLr),e(k3,rJ),e(rJ,iLr),e(k3,dLr),e(Me,cLr),e(Me,S3),e(S3,CMe),e(CMe,mLr),e(S3,fLr),e(S3,tJ),e(tJ,gLr),e(S3,hLr),e(Me,uLr),e(Me,R3),e(R3,wMe),e(wMe,pLr),e(R3,_Lr),e(R3,aJ),e(aJ,bLr),e(R3,FLr),e(Me,vLr),e(Me,B3),e(B3,AMe),e(AMe,TLr),e(B3,MLr),e(B3,nJ),e(nJ,ELr),e(B3,CLr),e(Me,wLr),e(Me,P3),e(P3,yMe),e(yMe,ALr),e(P3,yLr),e(P3,sJ),e(sJ,LLr),e(P3,xLr),e(Me,$Lr),e(Me,I3),e(I3,LMe),e(LMe,kLr),e(I3,SLr),e(I3,lJ),e(lJ,RLr),e(I3,BLr),e(Me,PLr),e(Me,q3),e(q3,xMe),e(xMe,ILr),e(q3,qLr),e(q3,iJ),e(iJ,NLr),e(q3,jLr),e(Me,DLr),e(Me,N3),e(N3,$Me),e($Me,GLr),e(N3,OLr),e(N3,dJ),e(dJ,VLr),e(N3,XLr),e(Me,zLr),e(Me,j3),e(j3,kMe),e(kMe,QLr),e(j3,WLr),e(j3,cJ),e(cJ,HLr),e(j3,ULr),e(Me,JLr),e(Me,D3),e(D3,SMe),e(SMe,YLr),e(D3,KLr),e(D3,mJ),e(mJ,ZLr),e(D3,e8r),e(Gr,o8r),M(G3,Gr,null),b(m,QIe,_),b(m,Pc,_),e(Pc,O3),e(O3,RMe),M(o7,RMe,null),e(Pc,r8r),e(Pc,BMe),e(BMe,t8r),b(m,WIe,_),b(m,hr,_),M(r7,hr,null),e(hr,a8r),e(hr,Ic),e(Ic,n8r),e(Ic,fJ),e(fJ,s8r),e(Ic,l8r),e(Ic,gJ),e(gJ,i8r),e(Ic,d8r),e(hr,c8r),e(hr,t7),e(t7,m8r),e(t7,PMe),e(PMe,f8r),e(t7,g8r),e(hr,h8r),e(hr,Ot),M(a7,Ot,null),e(Ot,u8r),e(Ot,IMe),e(IMe,p8r),e(Ot,_8r),e(Ot,qc),e(qc,b8r),e(qc,qMe),e(qMe,F8r),e(qc,v8r),e(qc,hJ),e(hJ,T8r),e(qc,M8r),e(Ot,E8r),M(V3,Ot,null),e(hr,C8r),e(hr,Or),M(n7,Or,null),e(Or,w8r),e(Or,NMe),e(NMe,A8r),e(Or,y8r),e(Or,pn),e(pn,L8r),e(pn,jMe),e(jMe,x8r),e(pn,$8r),e(pn,DMe),e(DMe,k8r),e(pn,S8r),e(pn,GMe),e(GMe,R8r),e(pn,B8r),e(Or,P8r),e(Or,Le),e(Le,X3),e(X3,OMe),e(OMe,I8r),e(X3,q8r),e(X3,uJ),e(uJ,N8r),e(X3,j8r),e(Le,D8r),e(Le,z3),e(z3,VMe),e(VMe,G8r),e(z3,O8r),e(z3,pJ),e(pJ,V8r),e(z3,X8r),e(Le,z8r),e(Le,Q3),e(Q3,XMe),e(XMe,Q8r),e(Q3,W8r),e(Q3,_J),e(_J,H8r),e(Q3,U8r),e(Le,J8r),e(Le,W3),e(W3,zMe),e(zMe,Y8r),e(W3,K8r),e(W3,bJ),e(bJ,Z8r),e(W3,exr),e(Le,oxr),e(Le,H3),e(H3,QMe),e(QMe,rxr),e(H3,txr),e(H3,FJ),e(FJ,axr),e(H3,nxr),e(Le,sxr),e(Le,U3),e(U3,WMe),e(WMe,lxr),e(U3,ixr),e(U3,vJ),e(vJ,dxr),e(U3,cxr),e(Le,mxr),e(Le,J3),e(J3,HMe),e(HMe,fxr),e(J3,gxr),e(J3,TJ),e(TJ,hxr),e(J3,uxr),e(Le,pxr),e(Le,Y3),e(Y3,UMe),e(UMe,_xr),e(Y3,bxr),e(Y3,MJ),e(MJ,Fxr),e(Y3,vxr),e(Le,Txr),e(Le,K3),e(K3,JMe),e(JMe,Mxr),e(K3,Exr),e(K3,EJ),e(EJ,Cxr),e(K3,wxr),e(Le,Axr),e(Le,Z3),e(Z3,YMe),e(YMe,yxr),e(Z3,Lxr),e(Z3,CJ),e(CJ,xxr),e(Z3,$xr),e(Or,kxr),M(ew,Or,null),b(m,HIe,_),b(m,Nc,_),e(Nc,ow),e(ow,KMe),M(s7,KMe,null),e(Nc,Sxr),e(Nc,ZMe),e(ZMe,Rxr),b(m,UIe,_),b(m,ur,_),M(l7,ur,null),e(ur,Bxr),e(ur,jc),e(jc,Pxr),e(jc,wJ),e(wJ,Ixr),e(jc,qxr),e(jc,AJ),e(AJ,Nxr),e(jc,jxr),e(ur,Dxr),e(ur,i7),e(i7,Gxr),e(i7,e4e),e(e4e,Oxr),e(i7,Vxr),e(ur,Xxr),e(ur,Vt),M(d7,Vt,null),e(Vt,zxr),e(Vt,o4e),e(o4e,Qxr),e(Vt,Wxr),e(Vt,Dc),e(Dc,Hxr),e(Dc,r4e),e(r4e,Uxr),e(Dc,Jxr),e(Dc,yJ),e(yJ,Yxr),e(Dc,Kxr),e(Vt,Zxr),M(rw,Vt,null),e(ur,e7r),e(ur,Vr),M(c7,Vr,null),e(Vr,o7r),e(Vr,t4e),e(t4e,r7r),e(Vr,t7r),e(Vr,_n),e(_n,a7r),e(_n,a4e),e(a4e,n7r),e(_n,s7r),e(_n,n4e),e(n4e,l7r),e(_n,i7r),e(_n,s4e),e(s4e,d7r),e(_n,c7r),e(Vr,m7r),e(Vr,Se),e(Se,tw),e(tw,l4e),e(l4e,f7r),e(tw,g7r),e(tw,LJ),e(LJ,h7r),e(tw,u7r),e(Se,p7r),e(Se,aw),e(aw,i4e),e(i4e,_7r),e(aw,b7r),e(aw,xJ),e(xJ,F7r),e(aw,v7r),e(Se,T7r),e(Se,nw),e(nw,d4e),e(d4e,M7r),e(nw,E7r),e(nw,$J),e($J,C7r),e(nw,w7r),e(Se,A7r),e(Se,sw),e(sw,c4e),e(c4e,y7r),e(sw,L7r),e(sw,kJ),e(kJ,x7r),e(sw,$7r),e(Se,k7r),e(Se,lw),e(lw,m4e),e(m4e,S7r),e(lw,R7r),e(lw,SJ),e(SJ,B7r),e(lw,P7r),e(Se,I7r),e(Se,iw),e(iw,f4e),e(f4e,q7r),e(iw,N7r),e(iw,RJ),e(RJ,j7r),e(iw,D7r),e(Se,G7r),e(Se,dw),e(dw,g4e),e(g4e,O7r),e(dw,V7r),e(dw,BJ),e(BJ,X7r),e(dw,z7r),e(Se,Q7r),e(Se,cw),e(cw,h4e),e(h4e,W7r),e(cw,H7r),e(cw,PJ),e(PJ,U7r),e(cw,J7r),e(Se,Y7r),e(Se,mw),e(mw,u4e),e(u4e,K7r),e(mw,Z7r),e(mw,IJ),e(IJ,e9r),e(mw,o9r),e(Vr,r9r),M(fw,Vr,null),b(m,JIe,_),b(m,Gc,_),e(Gc,gw),e(gw,p4e),M(m7,p4e,null),e(Gc,t9r),e(Gc,_4e),e(_4e,a9r),b(m,YIe,_),b(m,pr,_),M(f7,pr,null),e(pr,n9r),e(pr,Oc),e(Oc,s9r),e(Oc,qJ),e(qJ,l9r),e(Oc,i9r),e(Oc,NJ),e(NJ,d9r),e(Oc,c9r),e(pr,m9r),e(pr,g7),e(g7,f9r),e(g7,b4e),e(b4e,g9r),e(g7,h9r),e(pr,u9r),e(pr,Xt),M(h7,Xt,null),e(Xt,p9r),e(Xt,F4e),e(F4e,_9r),e(Xt,b9r),e(Xt,Vc),e(Vc,F9r),e(Vc,v4e),e(v4e,v9r),e(Vc,T9r),e(Vc,jJ),e(jJ,M9r),e(Vc,E9r),e(Xt,C9r),M(hw,Xt,null),e(pr,w9r),e(pr,Xr),M(u7,Xr,null),e(Xr,A9r),e(Xr,T4e),e(T4e,y9r),e(Xr,L9r),e(Xr,bn),e(bn,x9r),e(bn,M4e),e(M4e,$9r),e(bn,k9r),e(bn,E4e),e(E4e,S9r),e(bn,R9r),e(bn,C4e),e(C4e,B9r),e(bn,P9r),e(Xr,I9r),e(Xr,xe),e(xe,uw),e(uw,w4e),e(w4e,q9r),e(uw,N9r),e(uw,DJ),e(DJ,j9r),e(uw,D9r),e(xe,G9r),e(xe,pw),e(pw,A4e),e(A4e,O9r),e(pw,V9r),e(pw,GJ),e(GJ,X9r),e(pw,z9r),e(xe,Q9r),e(xe,_w),e(_w,y4e),e(y4e,W9r),e(_w,H9r),e(_w,OJ),e(OJ,U9r),e(_w,J9r),e(xe,Y9r),e(xe,bw),e(bw,L4e),e(L4e,K9r),e(bw,Z9r),e(bw,VJ),e(VJ,e$r),e(bw,o$r),e(xe,r$r),e(xe,Fw),e(Fw,x4e),e(x4e,t$r),e(Fw,a$r),e(Fw,XJ),e(XJ,n$r),e(Fw,s$r),e(xe,l$r),e(xe,vw),e(vw,$4e),e($4e,i$r),e(vw,d$r),e(vw,zJ),e(zJ,c$r),e(vw,m$r),e(xe,f$r),e(xe,Tw),e(Tw,k4e),e(k4e,g$r),e(Tw,h$r),e(Tw,QJ),e(QJ,u$r),e(Tw,p$r),e(xe,_$r),e(xe,Mw),e(Mw,S4e),e(S4e,b$r),e(Mw,F$r),e(Mw,WJ),e(WJ,v$r),e(Mw,T$r),e(xe,M$r),e(xe,Ew),e(Ew,R4e),e(R4e,E$r),e(Ew,C$r),e(Ew,HJ),e(HJ,w$r),e(Ew,A$r),e(xe,y$r),e(xe,Cw),e(Cw,B4e),e(B4e,L$r),e(Cw,x$r),e(Cw,UJ),e(UJ,$$r),e(Cw,k$r),e(Xr,S$r),M(ww,Xr,null),b(m,KIe,_),b(m,Xc,_),e(Xc,Aw),e(Aw,P4e),M(p7,P4e,null),e(Xc,R$r),e(Xc,I4e),e(I4e,B$r),b(m,ZIe,_),b(m,_r,_),M(_7,_r,null),e(_r,P$r),e(_r,zc),e(zc,I$r),e(zc,JJ),e(JJ,q$r),e(zc,N$r),e(zc,YJ),e(YJ,j$r),e(zc,D$r),e(_r,G$r),e(_r,b7),e(b7,O$r),e(b7,q4e),e(q4e,V$r),e(b7,X$r),e(_r,z$r),e(_r,zt),M(F7,zt,null),e(zt,Q$r),e(zt,N4e),e(N4e,W$r),e(zt,H$r),e(zt,Qc),e(Qc,U$r),e(Qc,j4e),e(j4e,J$r),e(Qc,Y$r),e(Qc,KJ),e(KJ,K$r),e(Qc,Z$r),e(zt,ekr),M(yw,zt,null),e(_r,okr),e(_r,zr),M(v7,zr,null),e(zr,rkr),e(zr,D4e),e(D4e,tkr),e(zr,akr),e(zr,Fn),e(Fn,nkr),e(Fn,G4e),e(G4e,skr),e(Fn,lkr),e(Fn,O4e),e(O4e,ikr),e(Fn,dkr),e(Fn,V4e),e(V4e,ckr),e(Fn,mkr),e(zr,fkr),e(zr,$e),e($e,Lw),e(Lw,X4e),e(X4e,gkr),e(Lw,hkr),e(Lw,ZJ),e(ZJ,ukr),e(Lw,pkr),e($e,_kr),e($e,xw),e(xw,z4e),e(z4e,bkr),e(xw,Fkr),e(xw,eY),e(eY,vkr),e(xw,Tkr),e($e,Mkr),e($e,$w),e($w,Q4e),e(Q4e,Ekr),e($w,Ckr),e($w,oY),e(oY,wkr),e($w,Akr),e($e,ykr),e($e,kw),e(kw,W4e),e(W4e,Lkr),e(kw,xkr),e(kw,rY),e(rY,$kr),e(kw,kkr),e($e,Skr),e($e,Sw),e(Sw,H4e),e(H4e,Rkr),e(Sw,Bkr),e(Sw,tY),e(tY,Pkr),e(Sw,Ikr),e($e,qkr),e($e,Rw),e(Rw,U4e),e(U4e,Nkr),e(Rw,jkr),e(Rw,aY),e(aY,Dkr),e(Rw,Gkr),e($e,Okr),e($e,Bw),e(Bw,J4e),e(J4e,Vkr),e(Bw,Xkr),e(Bw,nY),e(nY,zkr),e(Bw,Qkr),e($e,Wkr),e($e,Pw),e(Pw,Y4e),e(Y4e,Hkr),e(Pw,Ukr),e(Pw,sY),e(sY,Jkr),e(Pw,Ykr),e($e,Kkr),e($e,Iw),e(Iw,K4e),e(K4e,Zkr),e(Iw,eSr),e(Iw,lY),e(lY,oSr),e(Iw,rSr),e($e,tSr),e($e,qw),e(qw,Z4e),e(Z4e,aSr),e(qw,nSr),e(qw,iY),e(iY,sSr),e(qw,lSr),e(zr,iSr),M(Nw,zr,null),b(m,eqe,_),b(m,Wc,_),e(Wc,jw),e(jw,eEe),M(T7,eEe,null),e(Wc,dSr),e(Wc,oEe),e(oEe,cSr),b(m,oqe,_),b(m,br,_),M(M7,br,null),e(br,mSr),e(br,Hc),e(Hc,fSr),e(Hc,dY),e(dY,gSr),e(Hc,hSr),e(Hc,cY),e(cY,uSr),e(Hc,pSr),e(br,_Sr),e(br,E7),e(E7,bSr),e(E7,rEe),e(rEe,FSr),e(E7,vSr),e(br,TSr),e(br,Qt),M(C7,Qt,null),e(Qt,MSr),e(Qt,tEe),e(tEe,ESr),e(Qt,CSr),e(Qt,Uc),e(Uc,wSr),e(Uc,aEe),e(aEe,ASr),e(Uc,ySr),e(Uc,mY),e(mY,LSr),e(Uc,xSr),e(Qt,$Sr),M(Dw,Qt,null),e(br,kSr),e(br,Qr),M(w7,Qr,null),e(Qr,SSr),e(Qr,nEe),e(nEe,RSr),e(Qr,BSr),e(Qr,vn),e(vn,PSr),e(vn,sEe),e(sEe,ISr),e(vn,qSr),e(vn,lEe),e(lEe,NSr),e(vn,jSr),e(vn,iEe),e(iEe,DSr),e(vn,GSr),e(Qr,OSr),e(Qr,De),e(De,Gw),e(Gw,dEe),e(dEe,VSr),e(Gw,XSr),e(Gw,fY),e(fY,zSr),e(Gw,QSr),e(De,WSr),e(De,Ow),e(Ow,cEe),e(cEe,HSr),e(Ow,USr),e(Ow,gY),e(gY,JSr),e(Ow,YSr),e(De,KSr),e(De,Vw),e(Vw,mEe),e(mEe,ZSr),e(Vw,eRr),e(Vw,hY),e(hY,oRr),e(Vw,rRr),e(De,tRr),e(De,Xw),e(Xw,fEe),e(fEe,aRr),e(Xw,nRr),e(Xw,uY),e(uY,sRr),e(Xw,lRr),e(De,iRr),e(De,zw),e(zw,gEe),e(gEe,dRr),e(zw,cRr),e(zw,pY),e(pY,mRr),e(zw,fRr),e(De,gRr),e(De,Qw),e(Qw,hEe),e(hEe,hRr),e(Qw,uRr),e(Qw,_Y),e(_Y,pRr),e(Qw,_Rr),e(De,bRr),e(De,Ww),e(Ww,uEe),e(uEe,FRr),e(Ww,vRr),e(Ww,bY),e(bY,TRr),e(Ww,MRr),e(De,ERr),e(De,Hw),e(Hw,pEe),e(pEe,CRr),e(Hw,wRr),e(Hw,FY),e(FY,ARr),e(Hw,yRr),e(Qr,LRr),M(Uw,Qr,null),b(m,rqe,_),b(m,Jc,_),e(Jc,Jw),e(Jw,_Ee),M(A7,_Ee,null),e(Jc,xRr),e(Jc,bEe),e(bEe,$Rr),b(m,tqe,_),b(m,Fr,_),M(y7,Fr,null),e(Fr,kRr),e(Fr,Yc),e(Yc,SRr),e(Yc,vY),e(vY,RRr),e(Yc,BRr),e(Yc,TY),e(TY,PRr),e(Yc,IRr),e(Fr,qRr),e(Fr,L7),e(L7,NRr),e(L7,FEe),e(FEe,jRr),e(L7,DRr),e(Fr,GRr),e(Fr,Wt),M(x7,Wt,null),e(Wt,ORr),e(Wt,vEe),e(vEe,VRr),e(Wt,XRr),e(Wt,Kc),e(Kc,zRr),e(Kc,TEe),e(TEe,QRr),e(Kc,WRr),e(Kc,MY),e(MY,HRr),e(Kc,URr),e(Wt,JRr),M(Yw,Wt,null),e(Fr,YRr),e(Fr,Wr),M($7,Wr,null),e(Wr,KRr),e(Wr,MEe),e(MEe,ZRr),e(Wr,eBr),e(Wr,Tn),e(Tn,oBr),e(Tn,EEe),e(EEe,rBr),e(Tn,tBr),e(Tn,CEe),e(CEe,aBr),e(Tn,nBr),e(Tn,wEe),e(wEe,sBr),e(Tn,lBr),e(Wr,iBr),e(Wr,Ge),e(Ge,Kw),e(Kw,AEe),e(AEe,dBr),e(Kw,cBr),e(Kw,EY),e(EY,mBr),e(Kw,fBr),e(Ge,gBr),e(Ge,Zw),e(Zw,yEe),e(yEe,hBr),e(Zw,uBr),e(Zw,CY),e(CY,pBr),e(Zw,_Br),e(Ge,bBr),e(Ge,eA),e(eA,LEe),e(LEe,FBr),e(eA,vBr),e(eA,wY),e(wY,TBr),e(eA,MBr),e(Ge,EBr),e(Ge,oA),e(oA,xEe),e(xEe,CBr),e(oA,wBr),e(oA,AY),e(AY,ABr),e(oA,yBr),e(Ge,LBr),e(Ge,rA),e(rA,$Ee),e($Ee,xBr),e(rA,$Br),e(rA,yY),e(yY,kBr),e(rA,SBr),e(Ge,RBr),e(Ge,tA),e(tA,kEe),e(kEe,BBr),e(tA,PBr),e(tA,LY),e(LY,IBr),e(tA,qBr),e(Ge,NBr),e(Ge,aA),e(aA,SEe),e(SEe,jBr),e(aA,DBr),e(aA,xY),e(xY,GBr),e(aA,OBr),e(Ge,VBr),e(Ge,nA),e(nA,REe),e(REe,XBr),e(nA,zBr),e(nA,$Y),e($Y,QBr),e(nA,WBr),e(Wr,HBr),M(sA,Wr,null),b(m,aqe,_),b(m,Zc,_),e(Zc,lA),e(lA,BEe),M(k7,BEe,null),e(Zc,UBr),e(Zc,PEe),e(PEe,JBr),b(m,nqe,_),b(m,vr,_),M(S7,vr,null),e(vr,YBr),e(vr,em),e(em,KBr),e(em,kY),e(kY,ZBr),e(em,ePr),e(em,SY),e(SY,oPr),e(em,rPr),e(vr,tPr),e(vr,R7),e(R7,aPr),e(R7,IEe),e(IEe,nPr),e(R7,sPr),e(vr,lPr),e(vr,Ht),M(B7,Ht,null),e(Ht,iPr),e(Ht,qEe),e(qEe,dPr),e(Ht,cPr),e(Ht,om),e(om,mPr),e(om,NEe),e(NEe,fPr),e(om,gPr),e(om,RY),e(RY,hPr),e(om,uPr),e(Ht,pPr),M(iA,Ht,null),e(vr,_Pr),e(vr,Hr),M(P7,Hr,null),e(Hr,bPr),e(Hr,jEe),e(jEe,FPr),e(Hr,vPr),e(Hr,Mn),e(Mn,TPr),e(Mn,DEe),e(DEe,MPr),e(Mn,EPr),e(Mn,GEe),e(GEe,CPr),e(Mn,wPr),e(Mn,OEe),e(OEe,APr),e(Mn,yPr),e(Hr,LPr),e(Hr,VEe),e(VEe,dA),e(dA,XEe),e(XEe,xPr),e(dA,$Pr),e(dA,BY),e(BY,kPr),e(dA,SPr),e(Hr,RPr),M(cA,Hr,null),b(m,sqe,_),b(m,rm,_),e(rm,mA),e(mA,zEe),M(I7,zEe,null),e(rm,BPr),e(rm,QEe),e(QEe,PPr),b(m,lqe,_),b(m,Tr,_),M(q7,Tr,null),e(Tr,IPr),e(Tr,tm),e(tm,qPr),e(tm,PY),e(PY,NPr),e(tm,jPr),e(tm,IY),e(IY,DPr),e(tm,GPr),e(Tr,OPr),e(Tr,N7),e(N7,VPr),e(N7,WEe),e(WEe,XPr),e(N7,zPr),e(Tr,QPr),e(Tr,Ut),M(j7,Ut,null),e(Ut,WPr),e(Ut,HEe),e(HEe,HPr),e(Ut,UPr),e(Ut,am),e(am,JPr),e(am,UEe),e(UEe,YPr),e(am,KPr),e(am,qY),e(qY,ZPr),e(am,eIr),e(Ut,oIr),M(fA,Ut,null),e(Tr,rIr),e(Tr,Ur),M(D7,Ur,null),e(Ur,tIr),e(Ur,JEe),e(JEe,aIr),e(Ur,nIr),e(Ur,En),e(En,sIr),e(En,YEe),e(YEe,lIr),e(En,iIr),e(En,KEe),e(KEe,dIr),e(En,cIr),e(En,ZEe),e(ZEe,mIr),e(En,fIr),e(Ur,gIr),e(Ur,G7),e(G7,gA),e(gA,e5e),e(e5e,hIr),e(gA,uIr),e(gA,NY),e(NY,pIr),e(gA,_Ir),e(G7,bIr),e(G7,hA),e(hA,o5e),e(o5e,FIr),e(hA,vIr),e(hA,jY),e(jY,TIr),e(hA,MIr),e(Ur,EIr),M(uA,Ur,null),b(m,iqe,_),b(m,nm,_),e(nm,pA),e(pA,r5e),M(O7,r5e,null),e(nm,CIr),e(nm,t5e),e(t5e,wIr),b(m,dqe,_),b(m,Mr,_),M(V7,Mr,null),e(Mr,AIr),e(Mr,sm),e(sm,yIr),e(sm,DY),e(DY,LIr),e(sm,xIr),e(sm,GY),e(GY,$Ir),e(sm,kIr),e(Mr,SIr),e(Mr,X7),e(X7,RIr),e(X7,a5e),e(a5e,BIr),e(X7,PIr),e(Mr,IIr),e(Mr,Jt),M(z7,Jt,null),e(Jt,qIr),e(Jt,n5e),e(n5e,NIr),e(Jt,jIr),e(Jt,lm),e(lm,DIr),e(lm,s5e),e(s5e,GIr),e(lm,OIr),e(lm,OY),e(OY,VIr),e(lm,XIr),e(Jt,zIr),M(_A,Jt,null),e(Mr,QIr),e(Mr,Jr),M(Q7,Jr,null),e(Jr,WIr),e(Jr,l5e),e(l5e,HIr),e(Jr,UIr),e(Jr,Cn),e(Cn,JIr),e(Cn,i5e),e(i5e,YIr),e(Cn,KIr),e(Cn,d5e),e(d5e,ZIr),e(Cn,eqr),e(Cn,c5e),e(c5e,oqr),e(Cn,rqr),e(Jr,tqr),e(Jr,m5e),e(m5e,bA),e(bA,f5e),e(f5e,aqr),e(bA,nqr),e(bA,VY),e(VY,sqr),e(bA,lqr),e(Jr,iqr),M(FA,Jr,null),cqe=!0},p(m,[_]){const W7={};_&2&&(W7.$$scope={dirty:_,ctx:m}),pm.$set(W7);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:m}),hg.$set(g5e);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:m}),Qg.$set(h5e);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:m}),Fh.$set(u5e);const H7={};_&2&&(H7.$$scope={dirty:_,ctx:m}),vh.$set(H7);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),qh.$set(p5e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:m}),Nh.$set(wn);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:m}),Gh.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:m}),xp.$set(b5e);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:m}),kp.$set(F5e);const U7={};_&2&&(U7.$$scope={dirty:_,ctx:m}),b_.$set(U7);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:m}),v_.$set(v5e);const J7={};_&2&&(J7.$$scope={dirty:_,ctx:m}),tb.$set(J7);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:m}),nb.$set(T5e);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:m}),Ob.$set(Y7);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),Xb.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),d2.$set(E5e);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),m2.$set(C5e);const im={};_&2&&(im.$$scope={dirty:_,ctx:m}),sF.$set(im);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),iF.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),jF.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),GF.$set(y5e);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),HF.$set(K7);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),JF.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:m}),kv.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:m}),Rv.$set($5e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:m}),v1.$set(Kr);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),M1.$set(Z7);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),w1.$set(k5e);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:m}),y1.$set(e9);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),D1.$set(S5e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:m}),O1.$set(Zr);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),z1.$set(R5e);const dm={};_&2&&(dm.$$scope={dirty:_,ctx:m}),W1.$set(dm);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),tT.$set(B5e);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),nT.$set(P5e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),mT.$set(L);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),gT.$set(vA);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),ET.$set(I5e);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),wT.$set(q5e);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),xT.$set(TA);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),kT.$set(N5e);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),qT.$set(j5e);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),jT.$set(MA);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),XT.$set(D5e);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),QT.$set(G5e);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),JT.$set(EA);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),KT.$set(O5e);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),oM.$set(V5e);const CA={};_&2&&(CA.$$scope={dirty:_,ctx:m}),tM.$set(CA);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),dM.$set(X5e);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),mM.$set(z5e);const wA={};_&2&&(wA.$$scope={dirty:_,ctx:m}),hM.$set(wA);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),pM.$set(Q5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),l4.$set(W5e);const AA={};_&2&&(AA.$$scope={dirty:_,ctx:m}),d4.$set(AA);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),R4.$set(H5e);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),P4.$set(U5e);const yA={};_&2&&(yA.$$scope={dirty:_,ctx:m}),H4.$set(yA);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),J4.$set(J5e);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),eE.$set(Y5e);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),rE.$set(LA);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),EE.$set(K5e);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),wE.$set(Z5e);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),IE.$set(xA);const eCe={};_&2&&(eCe.$$scope={dirty:_,ctx:m}),NE.$set(eCe);const oCe={};_&2&&(oCe.$$scope={dirty:_,ctx:m}),m5.$set(oCe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),g5.$set($A);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:m}),k5.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:m}),R5.$set(tCe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),I5.$set(kA);const aCe={};_&2&&(aCe.$$scope={dirty:_,ctx:m}),N5.$set(aCe);const nCe={};_&2&&(nCe.$$scope={dirty:_,ctx:m}),D5.$set(nCe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),O5.$set(SA);const sCe={};_&2&&(sCe.$$scope={dirty:_,ctx:m}),dC.$set(sCe);const lCe={};_&2&&(lCe.$$scope={dirty:_,ctx:m}),mC.$set(lCe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),SC.$set(RA);const iCe={};_&2&&(iCe.$$scope={dirty:_,ctx:m}),BC.$set(iCe);const dCe={};_&2&&(dCe.$$scope={dirty:_,ctx:m}),IC.$set(dCe);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),NC.$set(BA);const cCe={};_&2&&(cCe.$$scope={dirty:_,ctx:m}),DC.$set(cCe);const mCe={};_&2&&(mCe.$$scope={dirty:_,ctx:m}),OC.$set(mCe);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),h3.$set(PA);const fCe={};_&2&&(fCe.$$scope={dirty:_,ctx:m}),p3.$set(fCe);const gCe={};_&2&&(gCe.$$scope={dirty:_,ctx:m}),A3.$set(gCe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),L3.$set(IA);const hCe={};_&2&&(hCe.$$scope={dirty:_,ctx:m}),G3.$set(hCe);const uCe={};_&2&&(uCe.$$scope={dirty:_,ctx:m}),V3.$set(uCe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),ew.$set(qA);const pCe={};_&2&&(pCe.$$scope={dirty:_,ctx:m}),rw.$set(pCe);const _Ce={};_&2&&(_Ce.$$scope={dirty:_,ctx:m}),fw.$set(_Ce);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),hw.$set(NA);const bCe={};_&2&&(bCe.$$scope={dirty:_,ctx:m}),ww.$set(bCe);const FCe={};_&2&&(FCe.$$scope={dirty:_,ctx:m}),yw.$set(FCe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),Nw.$set(jA);const vCe={};_&2&&(vCe.$$scope={dirty:_,ctx:m}),Dw.$set(vCe);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:m}),Uw.$set(TCe);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),Yw.$set(DA);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:m}),sA.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:m}),iA.$set(ECe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),cA.$set(GA);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:m}),fA.$set(CCe);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:m}),uA.$set(wCe);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),_A.$set(OA);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:m}),FA.$set(ACe)},i(m){cqe||(E(d.$$.fragment,m),E(Ma.$$.fragment,m),E(O6.$$.fragment,m),E(V6.$$.fragment,m),E(pm.$$.fragment,m),E(X6.$$.fragment,m),E(z6.$$.fragment,m),E(H6.$$.fragment,m),E(hg.$$.fragment,m),E(U6.$$.fragment,m),E(J6.$$.fragment,m),E(Y6.$$.fragment,m),E(ey.$$.fragment,m),E(Qg.$$.fragment,m),E(oy.$$.fragment,m),E(ry.$$.fragment,m),E(ty.$$.fragment,m),E(sy.$$.fragment,m),E(Fh.$$.fragment,m),E(vh.$$.fragment,m),E(ly.$$.fragment,m),E(iy.$$.fragment,m),E(dy.$$.fragment,m),E(fy.$$.fragment,m),E(qh.$$.fragment,m),E(Nh.$$.fragment,m),E(gy.$$.fragment,m),E(hy.$$.fragment,m),E(uy.$$.fragment,m),E(_y.$$.fragment,m),E(Gh.$$.fragment,m),E(by.$$.fragment,m),E(xp.$$.fragment,m),E(Fy.$$.fragment,m),E(vy.$$.fragment,m),E(My.$$.fragment,m),E(kp.$$.fragment,m),E(Ey.$$.fragment,m),E(b_.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(yy.$$.fragment,m),E(v_.$$.fragment,m),E(Ly.$$.fragment,m),E(tb.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(Sy.$$.fragment,m),E(nb.$$.fragment,m),E(Ry.$$.fragment,m),E(Ob.$$.fragment,m),E(By.$$.fragment,m),E(Py.$$.fragment,m),E(qy.$$.fragment,m),E(Xb.$$.fragment,m),E(Ny.$$.fragment,m),E(d2.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Oy.$$.fragment,m),E(m2.$$.fragment,m),E(Vy.$$.fragment,m),E(sF.$$.fragment,m),E(Xy.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(iF.$$.fragment,m),E(Hy.$$.fragment,m),E(jF.$$.fragment,m),E(Uy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ky.$$.fragment,m),E(GF.$$.fragment,m),E(Zy.$$.fragment,m),E(HF.$$.fragment,m),E(eL.$$.fragment,m),E(oL.$$.fragment,m),E(tL.$$.fragment,m),E(JF.$$.fragment,m),E(aL.$$.fragment,m),E(kv.$$.fragment,m),E(nL.$$.fragment,m),E(sL.$$.fragment,m),E(iL.$$.fragment,m),E(Rv.$$.fragment,m),E(dL.$$.fragment,m),E(v1.$$.fragment,m),E(cL.$$.fragment,m),E(mL.$$.fragment,m),E(gL.$$.fragment,m),E(M1.$$.fragment,m),E(hL.$$.fragment,m),E(w1.$$.fragment,m),E(uL.$$.fragment,m),E(pL.$$.fragment,m),E(bL.$$.fragment,m),E(y1.$$.fragment,m),E(FL.$$.fragment,m),E(D1.$$.fragment,m),E(vL.$$.fragment,m),E(TL.$$.fragment,m),E(EL.$$.fragment,m),E(O1.$$.fragment,m),E(CL.$$.fragment,m),E(z1.$$.fragment,m),E(wL.$$.fragment,m),E(AL.$$.fragment,m),E(LL.$$.fragment,m),E(W1.$$.fragment,m),E(xL.$$.fragment,m),E(tT.$$.fragment,m),E($L.$$.fragment,m),E(kL.$$.fragment,m),E(RL.$$.fragment,m),E(nT.$$.fragment,m),E(BL.$$.fragment,m),E(mT.$$.fragment,m),E(PL.$$.fragment,m),E(IL.$$.fragment,m),E(NL.$$.fragment,m),E(gT.$$.fragment,m),E(jL.$$.fragment,m),E(ET.$$.fragment,m),E(DL.$$.fragment,m),E(GL.$$.fragment,m),E(VL.$$.fragment,m),E(wT.$$.fragment,m),E(XL.$$.fragment,m),E(xT.$$.fragment,m),E(QL.$$.fragment,m),E(WL.$$.fragment,m),E(UL.$$.fragment,m),E(kT.$$.fragment,m),E(JL.$$.fragment,m),E(qT.$$.fragment,m),E(YL.$$.fragment,m),E(KL.$$.fragment,m),E(e8.$$.fragment,m),E(jT.$$.fragment,m),E(o8.$$.fragment,m),E(XT.$$.fragment,m),E(r8.$$.fragment,m),E(t8.$$.fragment,m),E(n8.$$.fragment,m),E(QT.$$.fragment,m),E(s8.$$.fragment,m),E(JT.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(KT.$$.fragment,m),E(f8.$$.fragment,m),E(oM.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(tM.$$.fragment,m),E(_8.$$.fragment,m),E(dM.$$.fragment,m),E(b8.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(mM.$$.fragment,m),E(M8.$$.fragment,m),E(hM.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(pM.$$.fragment,m),E(y8.$$.fragment,m),E(l4.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(d4.$$.fragment,m),E(S8.$$.fragment,m),E(R4.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(P4.$$.fragment,m),E(q8.$$.fragment,m),E(H4.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(J4.$$.fragment,m),E(O8.$$.fragment,m),E(eE.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(Q8.$$.fragment,m),E(rE.$$.fragment,m),E(W8.$$.fragment,m),E(EE.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(wE.$$.fragment,m),E(K8.$$.fragment,m),E(IE.$$.fragment,m),E(Z8.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(NE.$$.fragment,m),E(tx.$$.fragment,m),E(m5.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(g5.$$.fragment,m),E(ix.$$.fragment,m),E(k5.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(R5.$$.fragment,m),E(gx.$$.fragment,m),E(I5.$$.fragment,m),E(ux.$$.fragment,m),E(px.$$.fragment,m),E(bx.$$.fragment,m),E(N5.$$.fragment,m),E(Fx.$$.fragment,m),E(D5.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(Ex.$$.fragment,m),E(O5.$$.fragment,m),E(Cx.$$.fragment,m),E(dC.$$.fragment,m),E(wx.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(mC.$$.fragment,m),E(xx.$$.fragment,m),E(SC.$$.fragment,m),E($x.$$.fragment,m),E(kx.$$.fragment,m),E(Rx.$$.fragment,m),E(BC.$$.fragment,m),E(Bx.$$.fragment,m),E(IC.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(NC.$$.fragment,m),E(jx.$$.fragment,m),E(DC.$$.fragment,m),E(Dx.$$.fragment,m),E(Gx.$$.fragment,m),E(Vx.$$.fragment,m),E(OC.$$.fragment,m),E(Xx.$$.fragment,m),E(h3.$$.fragment,m),E(zx.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(p3.$$.fragment,m),E(Ux.$$.fragment,m),E(A3.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(L3.$$.fragment,m),E(e7.$$.fragment,m),E(G3.$$.fragment,m),E(o7.$$.fragment,m),E(r7.$$.fragment,m),E(a7.$$.fragment,m),E(V3.$$.fragment,m),E(n7.$$.fragment,m),E(ew.$$.fragment,m),E(s7.$$.fragment,m),E(l7.$$.fragment,m),E(d7.$$.fragment,m),E(rw.$$.fragment,m),E(c7.$$.fragment,m),E(fw.$$.fragment,m),E(m7.$$.fragment,m),E(f7.$$.fragment,m),E(h7.$$.fragment,m),E(hw.$$.fragment,m),E(u7.$$.fragment,m),E(ww.$$.fragment,m),E(p7.$$.fragment,m),E(_7.$$.fragment,m),E(F7.$$.fragment,m),E(yw.$$.fragment,m),E(v7.$$.fragment,m),E(Nw.$$.fragment,m),E(T7.$$.fragment,m),E(M7.$$.fragment,m),E(C7.$$.fragment,m),E(Dw.$$.fragment,m),E(w7.$$.fragment,m),E(Uw.$$.fragment,m),E(A7.$$.fragment,m),E(y7.$$.fragment,m),E(x7.$$.fragment,m),E(Yw.$$.fragment,m),E($7.$$.fragment,m),E(sA.$$.fragment,m),E(k7.$$.fragment,m),E(S7.$$.fragment,m),E(B7.$$.fragment,m),E(iA.$$.fragment,m),E(P7.$$.fragment,m),E(cA.$$.fragment,m),E(I7.$$.fragment,m),E(q7.$$.fragment,m),E(j7.$$.fragment,m),E(fA.$$.fragment,m),E(D7.$$.fragment,m),E(uA.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(z7.$$.fragment,m),E(_A.$$.fragment,m),E(Q7.$$.fragment,m),E(FA.$$.fragment,m),cqe=!0)},o(m){C(d.$$.fragment,m),C(Ma.$$.fragment,m),C(O6.$$.fragment,m),C(V6.$$.fragment,m),C(pm.$$.fragment,m),C(X6.$$.fragment,m),C(z6.$$.fragment,m),C(H6.$$.fragment,m),C(hg.$$.fragment,m),C(U6.$$.fragment,m),C(J6.$$.fragment,m),C(Y6.$$.fragment,m),C(ey.$$.fragment,m),C(Qg.$$.fragment,m),C(oy.$$.fragment,m),C(ry.$$.fragment,m),C(ty.$$.fragment,m),C(sy.$$.fragment,m),C(Fh.$$.fragment,m),C(vh.$$.fragment,m),C(ly.$$.fragment,m),C(iy.$$.fragment,m),C(dy.$$.fragment,m),C(fy.$$.fragment,m),C(qh.$$.fragment,m),C(Nh.$$.fragment,m),C(gy.$$.fragment,m),C(hy.$$.fragment,m),C(uy.$$.fragment,m),C(_y.$$.fragment,m),C(Gh.$$.fragment,m),C(by.$$.fragment,m),C(xp.$$.fragment,m),C(Fy.$$.fragment,m),C(vy.$$.fragment,m),C(My.$$.fragment,m),C(kp.$$.fragment,m),C(Ey.$$.fragment,m),C(b_.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(yy.$$.fragment,m),C(v_.$$.fragment,m),C(Ly.$$.fragment,m),C(tb.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(Sy.$$.fragment,m),C(nb.$$.fragment,m),C(Ry.$$.fragment,m),C(Ob.$$.fragment,m),C(By.$$.fragment,m),C(Py.$$.fragment,m),C(qy.$$.fragment,m),C(Xb.$$.fragment,m),C(Ny.$$.fragment,m),C(d2.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Oy.$$.fragment,m),C(m2.$$.fragment,m),C(Vy.$$.fragment,m),C(sF.$$.fragment,m),C(Xy.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(iF.$$.fragment,m),C(Hy.$$.fragment,m),C(jF.$$.fragment,m),C(Uy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ky.$$.fragment,m),C(GF.$$.fragment,m),C(Zy.$$.fragment,m),C(HF.$$.fragment,m),C(eL.$$.fragment,m),C(oL.$$.fragment,m),C(tL.$$.fragment,m),C(JF.$$.fragment,m),C(aL.$$.fragment,m),C(kv.$$.fragment,m),C(nL.$$.fragment,m),C(sL.$$.fragment,m),C(iL.$$.fragment,m),C(Rv.$$.fragment,m),C(dL.$$.fragment,m),C(v1.$$.fragment,m),C(cL.$$.fragment,m),C(mL.$$.fragment,m),C(gL.$$.fragment,m),C(M1.$$.fragment,m),C(hL.$$.fragment,m),C(w1.$$.fragment,m),C(uL.$$.fragment,m),C(pL.$$.fragment,m),C(bL.$$.fragment,m),C(y1.$$.fragment,m),C(FL.$$.fragment,m),C(D1.$$.fragment,m),C(vL.$$.fragment,m),C(TL.$$.fragment,m),C(EL.$$.fragment,m),C(O1.$$.fragment,m),C(CL.$$.fragment,m),C(z1.$$.fragment,m),C(wL.$$.fragment,m),C(AL.$$.fragment,m),C(LL.$$.fragment,m),C(W1.$$.fragment,m),C(xL.$$.fragment,m),C(tT.$$.fragment,m),C($L.$$.fragment,m),C(kL.$$.fragment,m),C(RL.$$.fragment,m),C(nT.$$.fragment,m),C(BL.$$.fragment,m),C(mT.$$.fragment,m),C(PL.$$.fragment,m),C(IL.$$.fragment,m),C(NL.$$.fragment,m),C(gT.$$.fragment,m),C(jL.$$.fragment,m),C(ET.$$.fragment,m),C(DL.$$.fragment,m),C(GL.$$.fragment,m),C(VL.$$.fragment,m),C(wT.$$.fragment,m),C(XL.$$.fragment,m),C(xT.$$.fragment,m),C(QL.$$.fragment,m),C(WL.$$.fragment,m),C(UL.$$.fragment,m),C(kT.$$.fragment,m),C(JL.$$.fragment,m),C(qT.$$.fragment,m),C(YL.$$.fragment,m),C(KL.$$.fragment,m),C(e8.$$.fragment,m),C(jT.$$.fragment,m),C(o8.$$.fragment,m),C(XT.$$.fragment,m),C(r8.$$.fragment,m),C(t8.$$.fragment,m),C(n8.$$.fragment,m),C(QT.$$.fragment,m),C(s8.$$.fragment,m),C(JT.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(KT.$$.fragment,m),C(f8.$$.fragment,m),C(oM.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(tM.$$.fragment,m),C(_8.$$.fragment,m),C(dM.$$.fragment,m),C(b8.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(mM.$$.fragment,m),C(M8.$$.fragment,m),C(hM.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(pM.$$.fragment,m),C(y8.$$.fragment,m),C(l4.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(d4.$$.fragment,m),C(S8.$$.fragment,m),C(R4.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(P4.$$.fragment,m),C(q8.$$.fragment,m),C(H4.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(J4.$$.fragment,m),C(O8.$$.fragment,m),C(eE.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(Q8.$$.fragment,m),C(rE.$$.fragment,m),C(W8.$$.fragment,m),C(EE.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(wE.$$.fragment,m),C(K8.$$.fragment,m),C(IE.$$.fragment,m),C(Z8.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(NE.$$.fragment,m),C(tx.$$.fragment,m),C(m5.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(g5.$$.fragment,m),C(ix.$$.fragment,m),C(k5.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(R5.$$.fragment,m),C(gx.$$.fragment,m),C(I5.$$.fragment,m),C(ux.$$.fragment,m),C(px.$$.fragment,m),C(bx.$$.fragment,m),C(N5.$$.fragment,m),C(Fx.$$.fragment,m),C(D5.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(Ex.$$.fragment,m),C(O5.$$.fragment,m),C(Cx.$$.fragment,m),C(dC.$$.fragment,m),C(wx.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(mC.$$.fragment,m),C(xx.$$.fragment,m),C(SC.$$.fragment,m),C($x.$$.fragment,m),C(kx.$$.fragment,m),C(Rx.$$.fragment,m),C(BC.$$.fragment,m),C(Bx.$$.fragment,m),C(IC.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(NC.$$.fragment,m),C(jx.$$.fragment,m),C(DC.$$.fragment,m),C(Dx.$$.fragment,m),C(Gx.$$.fragment,m),C(Vx.$$.fragment,m),C(OC.$$.fragment,m),C(Xx.$$.fragment,m),C(h3.$$.fragment,m),C(zx.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(p3.$$.fragment,m),C(Ux.$$.fragment,m),C(A3.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(L3.$$.fragment,m),C(e7.$$.fragment,m),C(G3.$$.fragment,m),C(o7.$$.fragment,m),C(r7.$$.fragment,m),C(a7.$$.fragment,m),C(V3.$$.fragment,m),C(n7.$$.fragment,m),C(ew.$$.fragment,m),C(s7.$$.fragment,m),C(l7.$$.fragment,m),C(d7.$$.fragment,m),C(rw.$$.fragment,m),C(c7.$$.fragment,m),C(fw.$$.fragment,m),C(m7.$$.fragment,m),C(f7.$$.fragment,m),C(h7.$$.fragment,m),C(hw.$$.fragment,m),C(u7.$$.fragment,m),C(ww.$$.fragment,m),C(p7.$$.fragment,m),C(_7.$$.fragment,m),C(F7.$$.fragment,m),C(yw.$$.fragment,m),C(v7.$$.fragment,m),C(Nw.$$.fragment,m),C(T7.$$.fragment,m),C(M7.$$.fragment,m),C(C7.$$.fragment,m),C(Dw.$$.fragment,m),C(w7.$$.fragment,m),C(Uw.$$.fragment,m),C(A7.$$.fragment,m),C(y7.$$.fragment,m),C(x7.$$.fragment,m),C(Yw.$$.fragment,m),C($7.$$.fragment,m),C(sA.$$.fragment,m),C(k7.$$.fragment,m),C(S7.$$.fragment,m),C(B7.$$.fragment,m),C(iA.$$.fragment,m),C(P7.$$.fragment,m),C(cA.$$.fragment,m),C(I7.$$.fragment,m),C(q7.$$.fragment,m),C(j7.$$.fragment,m),C(fA.$$.fragment,m),C(D7.$$.fragment,m),C(uA.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(z7.$$.fragment,m),C(_A.$$.fragment,m),C(Q7.$$.fragment,m),C(FA.$$.fragment,m),cqe=!1},d(m){t(g),m&&t(F),m&&t(u),w(d),m&&t(mm),m&&t(et),m&&t(qe),m&&t(Xe),m&&t(gm),w(Ma,m),m&&t(ze),m&&t(Ae),m&&t(Eo),m&&t(Ea),m&&t(lPe),m&&t(hi),w(O6),m&&t(iPe),m&&t($n),m&&t(dPe),w(V6,m),m&&t(cPe),m&&t(c$),m&&t(mPe),w(pm,m),m&&t(fPe),m&&t(ui),w(X6),m&&t(gPe),m&&t(Co),w(z6),w(H6),w(hg),w(U6),m&&t(hPe),m&&t(_i),w(J6),m&&t(uPe),m&&t(wo),w(Y6),w(ey),w(Qg),w(oy),m&&t(pPe),m&&t(bi),w(ry),m&&t(_Pe),m&&t(Ao),w(ty),w(sy),w(Fh),w(vh),w(ly),m&&t(bPe),m&&t(Fi),w(iy),m&&t(FPe),m&&t(yo),w(dy),w(fy),w(qh),w(Nh),w(gy),m&&t(vPe),m&&t(Ti),w(hy),m&&t(TPe),m&&t(Lo),w(uy),w(_y),w(Gh),w(by),w(xp),m&&t(MPe),m&&t(Ci),w(Fy),m&&t(EPe),m&&t(xo),w(vy),w(My),w(kp),w(Ey),w(b_),m&&t(CPe),m&&t(yi),w(Cy),m&&t(wPe),m&&t($o),w(wy),w(yy),w(v_),w(Ly),w(tb),m&&t(APe),m&&t($i),w(xy),m&&t(yPe),m&&t(ko),w($y),w(Sy),w(nb),w(Ry),w(Ob),m&&t(LPe),m&&t(Ri),w(By),m&&t(xPe),m&&t(So),w(Py),w(qy),w(Xb),w(Ny),w(d2),m&&t($Pe),m&&t(Ii),w(jy),m&&t(kPe),m&&t(Ro),w(Dy),w(Oy),w(m2),w(Vy),w(sF),m&&t(SPe),m&&t(ji),w(Xy),m&&t(RPe),m&&t(Bo),w(zy),w(Wy),w(iF),w(Hy),w(jF),m&&t(BPe),m&&t(Oi),w(Uy),m&&t(PPe),m&&t(Po),w(Jy),w(Ky),w(GF),w(Zy),w(HF),m&&t(IPe),m&&t(zi),w(eL),m&&t(qPe),m&&t(Io),w(oL),w(tL),w(JF),w(aL),w(kv),m&&t(NPe),m&&t(Hi),w(nL),m&&t(jPe),m&&t(qo),w(sL),w(iL),w(Rv),w(dL),w(v1),m&&t(DPe),m&&t(Yi),w(cL),m&&t(GPe),m&&t(No),w(mL),w(gL),w(M1),w(hL),w(w1),m&&t(OPe),m&&t(ed),w(uL),m&&t(VPe),m&&t(jo),w(pL),w(bL),w(y1),w(FL),w(D1),m&&t(XPe),m&&t(td),w(vL),m&&t(zPe),m&&t(Do),w(TL),w(EL),w(O1),w(CL),w(z1),m&&t(QPe),m&&t(sd),w(wL),m&&t(WPe),m&&t(Go),w(AL),w(LL),w(W1),w(xL),w(tT),m&&t(HPe),m&&t(dd),w($L),m&&t(UPe),m&&t(Oo),w(kL),w(RL),w(nT),w(BL),w(mT),m&&t(JPe),m&&t(fd),w(PL),m&&t(YPe),m&&t(Vo),w(IL),w(NL),w(gT),w(jL),w(ET),m&&t(KPe),m&&t(ud),w(DL),m&&t(ZPe),m&&t(Xo),w(GL),w(VL),w(wT),w(XL),w(xT),m&&t(eIe),m&&t(bd),w(QL),m&&t(oIe),m&&t(zo),w(WL),w(UL),w(kT),w(JL),w(qT),m&&t(rIe),m&&t(Td),w(YL),m&&t(tIe),m&&t(Qo),w(KL),w(e8),w(jT),w(o8),w(XT),m&&t(aIe),m&&t(wd),w(r8),m&&t(nIe),m&&t(Wo),w(t8),w(n8),w(QT),w(s8),w(JT),m&&t(sIe),m&&t(Ld),w(i8),m&&t(lIe),m&&t(Ho),w(d8),w(m8),w(KT),w(f8),w(oM),m&&t(iIe),m&&t(kd),w(g8),m&&t(dIe),m&&t(Uo),w(h8),w(p8),w(tM),w(_8),w(dM),m&&t(cIe),m&&t(Bd),w(b8),m&&t(mIe),m&&t(Jo),w(F8),w(T8),w(mM),w(M8),w(hM),m&&t(fIe),m&&t(qd),w(E8),m&&t(gIe),m&&t(Yo),w(C8),w(A8),w(pM),w(y8),w(l4),m&&t(hIe),m&&t(Dd),w(L8),m&&t(uIe),m&&t(Ko),w(x8),w(k8),w(d4),w(S8),w(R4),m&&t(pIe),m&&t(Vd),w(R8),m&&t(_Ie),m&&t(Zo),w(B8),w(I8),w(P4),w(q8),w(H4),m&&t(bIe),m&&t(Qd),w(N8),m&&t(FIe),m&&t(er),w(j8),w(G8),w(J4),w(O8),w(eE),m&&t(vIe),m&&t(Jd),w(V8),m&&t(TIe),m&&t(or),w(X8),w(Q8),w(rE),w(W8),w(EE),m&&t(MIe),m&&t(Zd),w(H8),m&&t(EIe),m&&t(rr),w(U8),w(Y8),w(wE),w(K8),w(IE),m&&t(CIe),m&&t(rc),w(Z8),m&&t(wIe),m&&t(tr),w(ex),w(rx),w(NE),w(tx),w(m5),m&&t(AIe),m&&t(nc),w(ax),m&&t(yIe),m&&t(ar),w(nx),w(lx),w(g5),w(ix),w(k5),m&&t(LIe),m&&t(ic),w(dx),m&&t(xIe),m&&t(nr),w(cx),w(fx),w(R5),w(gx),w(I5),m&&t($Ie),m&&t(mc),w(ux),m&&t(kIe),m&&t(sr),w(px),w(bx),w(N5),w(Fx),w(D5),m&&t(SIe),m&&t(hc),w(vx),m&&t(RIe),m&&t(lr),w(Tx),w(Ex),w(O5),w(Cx),w(dC),m&&t(BIe),m&&t(_c),w(wx),m&&t(PIe),m&&t(ir),w(Ax),w(Lx),w(mC),w(xx),w(SC),m&&t(IIe),m&&t(vc),w($x),m&&t(qIe),m&&t(dr),w(kx),w(Rx),w(BC),w(Bx),w(IC),m&&t(NIe),m&&t(Ec),w(Px),m&&t(jIe),m&&t(cr),w(Ix),w(Nx),w(NC),w(jx),w(DC),m&&t(DIe),m&&t(Ac),w(Dx),m&&t(GIe),m&&t(mr),w(Gx),w(Vx),w(OC),w(Xx),w(h3),m&&t(OIe),m&&t(xc),w(zx),m&&t(VIe),m&&t(fr),w(Qx),w(Hx),w(p3),w(Ux),w(A3),m&&t(XIe),m&&t(Sc),w(Jx),m&&t(zIe),m&&t(gr),w(Yx),w(Zx),w(L3),w(e7),w(G3),m&&t(QIe),m&&t(Pc),w(o7),m&&t(WIe),m&&t(hr),w(r7),w(a7),w(V3),w(n7),w(ew),m&&t(HIe),m&&t(Nc),w(s7),m&&t(UIe),m&&t(ur),w(l7),w(d7),w(rw),w(c7),w(fw),m&&t(JIe),m&&t(Gc),w(m7),m&&t(YIe),m&&t(pr),w(f7),w(h7),w(hw),w(u7),w(ww),m&&t(KIe),m&&t(Xc),w(p7),m&&t(ZIe),m&&t(_r),w(_7),w(F7),w(yw),w(v7),w(Nw),m&&t(eqe),m&&t(Wc),w(T7),m&&t(oqe),m&&t(br),w(M7),w(C7),w(Dw),w(w7),w(Uw),m&&t(rqe),m&&t(Jc),w(A7),m&&t(tqe),m&&t(Fr),w(y7),w(x7),w(Yw),w($7),w(sA),m&&t(aqe),m&&t(Zc),w(k7),m&&t(nqe),m&&t(vr),w(S7),w(B7),w(iA),w(P7),w(cA),m&&t(sqe),m&&t(rm),w(I7),m&&t(lqe),m&&t(Tr),w(q7),w(j7),w(fA),w(D7),w(uA),m&&t(iqe),m&&t(nm),w(O7),m&&t(dqe),m&&t(Mr),w(V7),w(z7),w(_A),w(Q7),w(FA)}}}const Fyt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vyt(A){return v0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class yyt extends p0t{constructor(g){super();_0t(this,g,vyt,byt,b0t,{})}}export{yyt as default,Fyt as metadata};
