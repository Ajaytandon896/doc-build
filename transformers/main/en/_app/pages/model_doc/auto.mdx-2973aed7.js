import{S as UEt,i as JEt,s as YEt,e as a,k as l,w as m,t as o,M as KEt,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as ZEt}from"../../chunks/vendor-6b77c823.js";import{T as Vkr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";function e3t(Pm){let Z,io,de,Ee,lo,fe,Ce,Vo,Ii,$m,ma,ji,Ni,dy,Im,Be,co,Di,Gn,cy,On,Xn,my,qi,Vn,fy,Gi,jm,qa;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Ni=o('"new-model"'),dy=o(")."),Im=l(),Be=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),cy=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),my=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),fy=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){Z=n(mo,"P",{});var pe=s(Z);io=r(pe,"If your "),de=n(pe,"CODE",{});var r9=s(de);Ee=r(r9,"NewModelConfig"),r9.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Oi=s(fe);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var t9=s(Ii);$m=r(t9,"model_type"),t9.forEach(t),ma=r(pe," attribute is set to the same key you use when registering the config (here "),ji=n(pe,"CODE",{});var a9=s(ji);Ni=r(a9,'"new-model"'),a9.forEach(t),dy=r(pe,")."),pe.forEach(t),Im=i(mo),Be=n(mo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),cy=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var n9=s(On);Xn=r(n9,"PreTrainedModel"),n9.forEach(t),my=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var Nm=s(qi);Vn=r(Nm,"config_class"),Nm.forEach(t),fy=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var s9=s(Gi);jm=r(s9,"NewModelConfig"),s9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,pe){b(mo,Z,pe),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo),e(Z,fe),e(fe,Ce),e(Z,Vo),e(Z,Ii),e(Ii,$m),e(Z,ma),e(Z,ji),e(ji,Ni),e(Z,dy),b(mo,Im,pe),b(mo,Be,pe),e(Be,co),e(Be,Di),e(Di,Gn),e(Be,cy),e(Be,On),e(On,Xn),e(Be,my),e(Be,qi),e(qi,Vn),e(Be,fy),e(Be,Gi),e(Gi,jm),e(Be,qa)},d(mo){mo&&t(Z),mo&&t(Im),mo&&t(Be)}}}function o3t(Pm){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){Z=n(fe,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(fe){fe&&t(Z)}}}function r3t(Pm){let Z,io,de,Ee,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){Z=n(fe,"P",{});var Ce=s(Z);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,Z,Ce),e(Z,io),e(Z,de),e(de,Ee),e(Z,lo)},d(fe){fe&&t(Z)}}}function t3t(Pm){let Z,io,de,Ee,lo,fe,Ce,Vo,Ii,$m,ma,ji,Ni,dy,Im,Be,co,Di,Gn,cy,On,Xn,my,qi,Vn,fy,Gi,jm,qa,mo,pe,r9,Oi,t9,a9,zo,Ga,n9,Nm,s9,x$e,pke,Xi,Dm,WQ,gy,k$e,QQ,R$e,_ke,zn,S$e,HQ,P$e,$$e,UQ,I$e,j$e,bke,hy,vke,l9,N$e,Tke,qm,Fke,Vi,Gm,JQ,uy,D$e,YQ,q$e,Cke,Wo,py,G$e,_y,O$e,i9,X$e,V$e,z$e,by,W$e,KQ,Q$e,H$e,U$e,fo,vy,J$e,ZQ,Y$e,K$e,zi,Z$e,eH,eIe,oIe,oH,rIe,tIe,aIe,v,Om,rH,nIe,sIe,d9,lIe,iIe,dIe,Xm,tH,cIe,mIe,c9,fIe,gIe,hIe,Vm,aH,uIe,pIe,m9,_Ie,bIe,vIe,zm,nH,TIe,FIe,f9,CIe,MIe,EIe,Wm,sH,yIe,wIe,g9,AIe,LIe,BIe,Qm,lH,xIe,kIe,h9,RIe,SIe,PIe,Hm,iH,$Ie,IIe,u9,jIe,NIe,DIe,Um,dH,qIe,GIe,p9,OIe,XIe,VIe,Jm,cH,zIe,WIe,_9,QIe,HIe,UIe,Ym,mH,JIe,YIe,b9,KIe,ZIe,eje,Km,fH,oje,rje,v9,tje,aje,nje,Zm,gH,sje,lje,T9,ije,dje,cje,ef,hH,mje,fje,F9,gje,hje,uje,of,uH,pje,_je,C9,bje,vje,Tje,rf,pH,Fje,Cje,M9,Mje,Eje,yje,tf,_H,wje,Aje,E9,Lje,Bje,xje,af,bH,kje,Rje,y9,Sje,Pje,$je,nf,vH,Ije,jje,w9,Nje,Dje,qje,sf,TH,Gje,Oje,A9,Xje,Vje,zje,lf,FH,Wje,Qje,L9,Hje,Uje,Jje,df,CH,Yje,Kje,B9,Zje,eNe,oNe,cf,MH,rNe,tNe,x9,aNe,nNe,sNe,mf,EH,lNe,iNe,k9,dNe,cNe,mNe,ff,yH,fNe,gNe,R9,hNe,uNe,pNe,gf,wH,_Ne,bNe,S9,vNe,TNe,FNe,hf,AH,CNe,MNe,P9,ENe,yNe,wNe,uf,LH,ANe,LNe,$9,BNe,xNe,kNe,pf,BH,RNe,SNe,I9,PNe,$Ne,INe,_f,xH,jNe,NNe,j9,DNe,qNe,GNe,bf,kH,ONe,XNe,N9,VNe,zNe,WNe,vf,RH,QNe,HNe,D9,UNe,JNe,YNe,Tf,SH,KNe,ZNe,q9,eDe,oDe,rDe,Ff,PH,tDe,aDe,G9,nDe,sDe,lDe,Cf,$H,iDe,dDe,O9,cDe,mDe,fDe,Mf,IH,gDe,hDe,X9,uDe,pDe,_De,Ef,jH,bDe,vDe,V9,TDe,FDe,CDe,yf,NH,MDe,EDe,z9,yDe,wDe,ADe,wf,DH,LDe,BDe,W9,xDe,kDe,RDe,Af,qH,SDe,PDe,Q9,$De,IDe,jDe,Lf,GH,NDe,DDe,H9,qDe,GDe,ODe,Bf,OH,XDe,VDe,U9,zDe,WDe,QDe,xf,XH,HDe,UDe,J9,JDe,YDe,KDe,kf,VH,ZDe,eqe,Y9,oqe,rqe,tqe,Rf,zH,aqe,nqe,K9,sqe,lqe,iqe,Sf,WH,dqe,cqe,Z9,mqe,fqe,gqe,Pf,QH,hqe,uqe,eB,pqe,_qe,bqe,$f,HH,vqe,Tqe,oB,Fqe,Cqe,Mqe,If,UH,Eqe,yqe,rB,wqe,Aqe,Lqe,jf,JH,Bqe,xqe,tB,kqe,Rqe,Sqe,Nf,YH,Pqe,$qe,aB,Iqe,jqe,Nqe,Df,KH,Dqe,qqe,nB,Gqe,Oqe,Xqe,qf,ZH,Vqe,zqe,sB,Wqe,Qqe,Hqe,Gf,eU,Uqe,Jqe,lB,Yqe,Kqe,Zqe,Of,oU,eGe,oGe,iB,rGe,tGe,aGe,Xf,rU,nGe,sGe,dB,lGe,iGe,dGe,Vf,tU,cGe,mGe,cB,fGe,gGe,hGe,zf,aU,uGe,pGe,mB,_Ge,bGe,vGe,Wf,nU,TGe,FGe,fB,CGe,MGe,EGe,Qf,sU,yGe,wGe,gB,AGe,LGe,BGe,Hf,lU,xGe,kGe,hB,RGe,SGe,PGe,Uf,iU,$Ge,IGe,uB,jGe,NGe,DGe,Jf,dU,qGe,GGe,pB,OGe,XGe,VGe,Yf,cU,zGe,WGe,_B,QGe,HGe,UGe,Kf,mU,JGe,YGe,bB,KGe,ZGe,eOe,Zf,fU,oOe,rOe,vB,tOe,aOe,nOe,eg,gU,sOe,lOe,TB,iOe,dOe,cOe,og,hU,mOe,fOe,FB,gOe,hOe,uOe,rg,uU,pOe,_Oe,CB,bOe,vOe,TOe,tg,pU,FOe,COe,MB,MOe,EOe,yOe,ag,_U,wOe,AOe,EB,LOe,BOe,xOe,ng,bU,kOe,ROe,yB,SOe,POe,$Oe,sg,vU,IOe,jOe,wB,NOe,DOe,qOe,lg,TU,GOe,OOe,AB,XOe,VOe,zOe,ig,FU,WOe,QOe,LB,HOe,UOe,JOe,dg,CU,YOe,KOe,BB,ZOe,eXe,oXe,cg,MU,rXe,tXe,xB,aXe,nXe,sXe,mg,EU,lXe,iXe,kB,dXe,cXe,mXe,fg,yU,fXe,gXe,RB,hXe,uXe,pXe,gg,wU,_Xe,bXe,SB,vXe,TXe,FXe,hg,AU,CXe,MXe,PB,EXe,yXe,wXe,ug,LU,AXe,LXe,$B,BXe,xXe,kXe,pg,BU,RXe,SXe,IB,PXe,$Xe,IXe,_g,xU,jXe,NXe,jB,DXe,qXe,GXe,bg,kU,OXe,XXe,NB,VXe,zXe,WXe,vg,RU,QXe,HXe,DB,UXe,JXe,YXe,Tg,SU,KXe,ZXe,qB,eVe,oVe,rVe,Fg,PU,tVe,aVe,GB,nVe,sVe,lVe,Cg,$U,iVe,dVe,OB,cVe,mVe,fVe,Mg,IU,gVe,hVe,XB,uVe,pVe,_Ve,Eg,jU,bVe,vVe,VB,TVe,FVe,CVe,yg,NU,MVe,EVe,zB,yVe,wVe,AVe,wg,DU,LVe,BVe,WB,xVe,kVe,RVe,Ag,qU,SVe,PVe,QB,$Ve,IVe,jVe,Lg,GU,NVe,DVe,HB,qVe,GVe,OVe,Bg,OU,XVe,VVe,UB,zVe,WVe,QVe,xg,XU,HVe,UVe,JB,JVe,YVe,KVe,kg,VU,ZVe,eze,YB,oze,rze,tze,Rg,zU,aze,nze,KB,sze,lze,ize,WU,dze,cze,Ty,mze,Sg,Fy,fze,QU,gze,Mke,Wi,Pg,HU,Cy,hze,UU,uze,Eke,Qo,My,pze,Ey,_ze,ZB,bze,vze,Tze,yy,Fze,JU,Cze,Mze,Eze,go,wy,yze,YU,wze,Aze,Oa,Lze,KU,Bze,xze,ZU,kze,Rze,eJ,Sze,Pze,$ze,E,Wn,oJ,Ize,jze,ex,Nze,Dze,ox,qze,Gze,Oze,Qn,rJ,Xze,Vze,rx,zze,Wze,tx,Qze,Hze,Uze,Hn,tJ,Jze,Yze,ax,Kze,Zze,nx,eWe,oWe,rWe,$g,aJ,tWe,aWe,sx,nWe,sWe,lWe,Un,nJ,iWe,dWe,lx,cWe,mWe,ix,fWe,gWe,hWe,Ig,sJ,uWe,pWe,dx,_We,bWe,vWe,jg,lJ,TWe,FWe,cx,CWe,MWe,EWe,Ng,iJ,yWe,wWe,mx,AWe,LWe,BWe,Jn,dJ,xWe,kWe,fx,RWe,SWe,gx,PWe,$We,IWe,Yn,cJ,jWe,NWe,hx,DWe,qWe,ux,GWe,OWe,XWe,Kn,mJ,VWe,zWe,px,WWe,QWe,_x,HWe,UWe,JWe,Dg,fJ,YWe,KWe,bx,ZWe,eQe,oQe,qg,gJ,rQe,tQe,vx,aQe,nQe,sQe,Zn,hJ,lQe,iQe,Tx,dQe,cQe,Fx,mQe,fQe,gQe,Gg,uJ,hQe,uQe,Cx,pQe,_Qe,bQe,es,pJ,vQe,TQe,Mx,FQe,CQe,Ex,MQe,EQe,yQe,os,_J,wQe,AQe,yx,LQe,BQe,wx,xQe,kQe,RQe,rs,bJ,SQe,PQe,Ax,$Qe,IQe,vJ,jQe,NQe,DQe,Og,TJ,qQe,GQe,Lx,OQe,XQe,VQe,ts,FJ,zQe,WQe,Bx,QQe,HQe,xx,UQe,JQe,YQe,Xg,CJ,KQe,ZQe,kx,eHe,oHe,rHe,as,MJ,tHe,aHe,Rx,nHe,sHe,Sx,lHe,iHe,dHe,ns,EJ,cHe,mHe,Px,fHe,gHe,$x,hHe,uHe,pHe,ss,yJ,_He,bHe,Ix,vHe,THe,jx,FHe,CHe,MHe,Vg,wJ,EHe,yHe,Nx,wHe,AHe,LHe,ls,AJ,BHe,xHe,Dx,kHe,RHe,qx,SHe,PHe,$He,zg,LJ,IHe,jHe,Gx,NHe,DHe,qHe,is,BJ,GHe,OHe,Ox,XHe,VHe,Xx,zHe,WHe,QHe,ds,xJ,HHe,UHe,Vx,JHe,YHe,zx,KHe,ZHe,eUe,cs,kJ,oUe,rUe,Wx,tUe,aUe,Qx,nUe,sUe,lUe,ms,RJ,iUe,dUe,Hx,cUe,mUe,Ux,fUe,gUe,hUe,Wg,SJ,uUe,pUe,Jx,_Ue,bUe,vUe,fs,PJ,TUe,FUe,Yx,CUe,MUe,Kx,EUe,yUe,wUe,gs,$J,AUe,LUe,Zx,BUe,xUe,ek,kUe,RUe,SUe,hs,IJ,PUe,$Ue,ok,IUe,jUe,rk,NUe,DUe,qUe,us,jJ,GUe,OUe,tk,XUe,VUe,ak,zUe,WUe,QUe,ps,NJ,HUe,UUe,nk,JUe,YUe,sk,KUe,ZUe,eJe,_s,DJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Qg,qJ,iJe,dJe,dk,cJe,mJe,fJe,bs,GJ,gJe,hJe,ck,uJe,pJe,mk,_Je,bJe,vJe,Hg,OJ,TJe,FJe,fk,CJe,MJe,EJe,Ug,XJ,yJe,wJe,gk,AJe,LJe,BJe,vs,VJ,xJe,kJe,hk,RJe,SJe,uk,PJe,$Je,IJe,Ts,zJ,jJe,NJe,pk,DJe,qJe,_k,GJe,OJe,XJe,Jg,WJ,VJe,zJe,bk,WJe,QJe,HJe,Fs,QJ,UJe,JJe,vk,YJe,KJe,Tk,ZJe,eYe,oYe,Cs,HJ,rYe,tYe,Fk,aYe,nYe,Ck,sYe,lYe,iYe,Ms,UJ,dYe,cYe,Mk,mYe,fYe,Ek,gYe,hYe,uYe,Es,JJ,pYe,_Ye,yk,bYe,vYe,wk,TYe,FYe,CYe,ys,YJ,MYe,EYe,Ak,yYe,wYe,Lk,AYe,LYe,BYe,Yg,KJ,xYe,kYe,Bk,RYe,SYe,PYe,Kg,ZJ,$Ye,IYe,xk,jYe,NYe,DYe,Zg,eY,qYe,GYe,kk,OYe,XYe,VYe,eh,oY,zYe,WYe,Rk,QYe,HYe,UYe,ws,rY,JYe,YYe,Sk,KYe,ZYe,Pk,eKe,oKe,rKe,oh,tY,tKe,aKe,$k,nKe,sKe,lKe,As,aY,iKe,dKe,Ik,cKe,mKe,jk,fKe,gKe,hKe,Ls,nY,uKe,pKe,Nk,_Ke,bKe,Dk,vKe,TKe,FKe,Bs,sY,CKe,MKe,qk,EKe,yKe,Gk,wKe,AKe,LKe,xs,lY,BKe,xKe,Ok,kKe,RKe,Xk,SKe,PKe,$Ke,ks,iY,IKe,jKe,Vk,NKe,DKe,zk,qKe,GKe,OKe,Rs,dY,XKe,VKe,Wk,zKe,WKe,Qk,QKe,HKe,UKe,rh,cY,JKe,YKe,Hk,KKe,ZKe,eZe,th,mY,oZe,rZe,Uk,tZe,aZe,nZe,Ss,fY,sZe,lZe,Jk,iZe,dZe,Yk,cZe,mZe,fZe,Ps,gY,gZe,hZe,Kk,uZe,pZe,Zk,_Ze,bZe,vZe,$s,hY,TZe,FZe,eR,CZe,MZe,oR,EZe,yZe,wZe,ah,uY,AZe,LZe,rR,BZe,xZe,kZe,nh,pY,RZe,SZe,tR,PZe,$Ze,IZe,sh,_Y,jZe,NZe,aR,DZe,qZe,GZe,lh,bY,OZe,XZe,nR,VZe,zZe,WZe,Is,vY,QZe,HZe,sR,UZe,JZe,lR,YZe,KZe,ZZe,ih,TY,eeo,oeo,iR,reo,teo,aeo,dh,FY,neo,seo,dR,leo,ieo,deo,js,CY,ceo,meo,cR,feo,geo,mR,heo,ueo,peo,Ns,MY,_eo,beo,fR,veo,Teo,gR,Feo,Ceo,Meo,EY,Eeo,yeo,Ay,weo,ch,Ly,Aeo,yY,Leo,yke,Qi,mh,wY,By,Beo,AY,xeo,wke,Ho,xy,keo,ky,Reo,hR,Seo,Peo,$eo,Ry,Ieo,LY,jeo,Neo,Deo,$e,Sy,qeo,BY,Geo,Oeo,Xa,Xeo,xY,Veo,zeo,kY,Weo,Qeo,RY,Heo,Ueo,Jeo,te,fh,SY,Yeo,Keo,uR,Zeo,eoo,ooo,gh,PY,roo,too,pR,aoo,noo,soo,hh,$Y,loo,ioo,_R,doo,coo,moo,uh,IY,foo,goo,bR,hoo,uoo,poo,ph,jY,_oo,boo,vR,voo,Too,Foo,_h,NY,Coo,Moo,TR,Eoo,yoo,woo,bh,DY,Aoo,Loo,FR,Boo,xoo,koo,vh,qY,Roo,Soo,CR,Poo,$oo,Ioo,Th,GY,joo,Noo,MR,Doo,qoo,Goo,Fh,OY,Ooo,Xoo,ER,Voo,zoo,Woo,Ch,XY,Qoo,Hoo,yR,Uoo,Joo,Yoo,Mh,VY,Koo,Zoo,wR,ero,oro,rro,Eh,zY,tro,aro,AR,nro,sro,lro,yh,WY,iro,dro,LR,cro,mro,fro,wh,QY,gro,hro,BR,uro,pro,_ro,Ah,HY,bro,vro,xR,Tro,Fro,Cro,Lh,UY,Mro,Ero,kR,yro,wro,Aro,Bh,JY,Lro,Bro,RR,xro,kro,Rro,xh,Sro,YY,Pro,$ro,Py,Iro,kh,$y,jro,KY,Nro,Ake,Hi,Rh,ZY,Iy,Dro,eK,qro,Lke,Uo,jy,Gro,Ny,Oro,SR,Xro,Vro,zro,Dy,Wro,oK,Qro,Hro,Uro,Ie,qy,Jro,rK,Yro,Kro,Ui,Zro,tK,eto,oto,aK,rto,tto,ato,xe,Sh,nK,nto,sto,PR,lto,ito,dto,Ph,sK,cto,mto,$R,fto,gto,hto,$h,lK,uto,pto,IR,_to,bto,vto,Ih,iK,Tto,Fto,jR,Cto,Mto,Eto,jh,dK,yto,wto,NR,Ato,Lto,Bto,Nh,cK,xto,kto,DR,Rto,Sto,Pto,Dh,mK,$to,Ito,qR,jto,Nto,Dto,qh,fK,qto,Gto,GR,Oto,Xto,Vto,Gh,zto,gK,Wto,Qto,Gy,Hto,Oh,Oy,Uto,hK,Jto,Bke,Ji,Xh,uK,Xy,Yto,pK,Kto,xke,Jo,Vy,Zto,Yi,eao,_K,oao,rao,bK,tao,aao,nao,zy,sao,vK,lao,iao,dao,Vr,Wy,cao,TK,mao,fao,Ki,gao,FK,hao,uao,CK,pao,_ao,bao,MK,vao,Tao,Qy,Fao,je,Hy,Cao,EK,Mao,Eao,Va,yao,yK,wao,Aao,wK,Lao,Bao,AK,xao,kao,Rao,F,Vh,LK,Sao,Pao,OR,$ao,Iao,jao,zh,BK,Nao,Dao,XR,qao,Gao,Oao,Wh,xK,Xao,Vao,VR,zao,Wao,Qao,Qh,kK,Hao,Uao,zR,Jao,Yao,Kao,Hh,RK,Zao,eno,WR,ono,rno,tno,Uh,SK,ano,nno,QR,sno,lno,ino,Jh,PK,dno,cno,HR,mno,fno,gno,Yh,$K,hno,uno,UR,pno,_no,bno,Kh,IK,vno,Tno,JR,Fno,Cno,Mno,Zh,jK,Eno,yno,YR,wno,Ano,Lno,eu,NK,Bno,xno,KR,kno,Rno,Sno,ou,DK,Pno,$no,ZR,Ino,jno,Nno,ru,qK,Dno,qno,eS,Gno,Ono,Xno,tu,GK,Vno,zno,oS,Wno,Qno,Hno,au,OK,Uno,Jno,rS,Yno,Kno,Zno,nu,XK,eso,oso,tS,rso,tso,aso,su,VK,nso,sso,aS,lso,iso,dso,lu,zK,cso,mso,nS,fso,gso,hso,iu,WK,uso,pso,sS,_so,bso,vso,du,QK,Tso,Fso,lS,Cso,Mso,Eso,cu,HK,yso,wso,iS,Aso,Lso,Bso,mu,UK,xso,kso,dS,Rso,Sso,Pso,fu,JK,$so,Iso,cS,jso,Nso,Dso,gu,YK,qso,Gso,mS,Oso,Xso,Vso,hu,KK,zso,Wso,fS,Qso,Hso,Uso,uu,ZK,Jso,Yso,gS,Kso,Zso,elo,pu,eZ,olo,rlo,hS,tlo,alo,nlo,_u,oZ,slo,llo,uS,ilo,dlo,clo,Ds,rZ,mlo,flo,pS,glo,hlo,_S,ulo,plo,_lo,bu,tZ,blo,vlo,bS,Tlo,Flo,Clo,vu,aZ,Mlo,Elo,vS,ylo,wlo,Alo,Tu,nZ,Llo,Blo,TS,xlo,klo,Rlo,Fu,sZ,Slo,Plo,FS,$lo,Ilo,jlo,Cu,lZ,Nlo,Dlo,CS,qlo,Glo,Olo,Mu,iZ,Xlo,Vlo,MS,zlo,Wlo,Qlo,Eu,dZ,Hlo,Ulo,ES,Jlo,Ylo,Klo,yu,cZ,Zlo,eio,yS,oio,rio,tio,wu,mZ,aio,nio,wS,sio,lio,iio,Au,fZ,dio,cio,AS,mio,fio,gio,Lu,gZ,hio,uio,LS,pio,_io,bio,Bu,hZ,vio,Tio,BS,Fio,Cio,Mio,xu,uZ,Eio,yio,xS,wio,Aio,Lio,ku,pZ,Bio,xio,kS,kio,Rio,Sio,Ru,_Z,Pio,$io,RS,Iio,jio,Nio,Su,bZ,Dio,qio,SS,Gio,Oio,Xio,Pu,vZ,Vio,zio,PS,Wio,Qio,Hio,$u,TZ,Uio,Jio,$S,Yio,Kio,Zio,Iu,FZ,edo,odo,IS,rdo,tdo,ado,ju,CZ,ndo,sdo,jS,ldo,ido,ddo,Nu,MZ,cdo,mdo,NS,fdo,gdo,hdo,Du,EZ,udo,pdo,DS,_do,bdo,vdo,qu,yZ,Tdo,Fdo,qS,Cdo,Mdo,Edo,Gu,wZ,ydo,wdo,GS,Ado,Ldo,Bdo,Ou,AZ,xdo,kdo,OS,Rdo,Sdo,Pdo,Xu,LZ,$do,Ido,XS,jdo,Ndo,Ddo,Vu,BZ,qdo,Gdo,VS,Odo,Xdo,Vdo,zu,xZ,zdo,Wdo,zS,Qdo,Hdo,Udo,Wu,kZ,Jdo,Ydo,WS,Kdo,Zdo,eco,Qu,RZ,oco,rco,QS,tco,aco,nco,Hu,SZ,sco,lco,HS,ico,dco,cco,Uu,PZ,mco,fco,US,gco,hco,uco,Ju,$Z,pco,_co,JS,bco,vco,Tco,Yu,IZ,Fco,Cco,YS,Mco,Eco,yco,Ku,jZ,wco,Aco,KS,Lco,Bco,xco,Zu,NZ,kco,Rco,ZS,Sco,Pco,$co,ep,DZ,Ico,jco,eP,Nco,Dco,qco,op,qZ,Gco,Oco,oP,Xco,Vco,zco,rp,GZ,Wco,Qco,rP,Hco,Uco,Jco,tp,OZ,Yco,Kco,tP,Zco,emo,omo,ap,XZ,rmo,tmo,aP,amo,nmo,smo,np,VZ,lmo,imo,nP,dmo,cmo,mmo,sp,zZ,fmo,gmo,sP,hmo,umo,pmo,lp,WZ,_mo,bmo,lP,vmo,Tmo,Fmo,ip,QZ,Cmo,Mmo,iP,Emo,ymo,wmo,dp,HZ,Amo,Lmo,dP,Bmo,xmo,kmo,cp,UZ,Rmo,Smo,cP,Pmo,$mo,Imo,mp,JZ,jmo,Nmo,mP,Dmo,qmo,Gmo,fp,YZ,Omo,Xmo,fP,Vmo,zmo,Wmo,gp,KZ,Qmo,Hmo,gP,Umo,Jmo,Ymo,hp,ZZ,Kmo,Zmo,hP,efo,ofo,rfo,up,eee,tfo,afo,uP,nfo,sfo,lfo,pp,oee,ifo,dfo,pP,cfo,mfo,ffo,_p,ree,gfo,hfo,_P,ufo,pfo,_fo,bp,tee,bfo,vfo,bP,Tfo,Ffo,Cfo,vp,aee,Mfo,Efo,vP,yfo,wfo,Afo,Tp,nee,Lfo,Bfo,TP,xfo,kfo,Rfo,Fp,see,Sfo,Pfo,FP,$fo,Ifo,jfo,Cp,lee,Nfo,Dfo,CP,qfo,Gfo,Ofo,Mp,iee,Xfo,Vfo,MP,zfo,Wfo,Qfo,Ep,dee,Hfo,Ufo,EP,Jfo,Yfo,Kfo,yp,cee,Zfo,ego,yP,ogo,rgo,tgo,wp,ago,mee,ngo,sgo,fee,lgo,igo,gee,dgo,cgo,Uy,kke,Zi,Ap,hee,Jy,mgo,uee,fgo,Rke,Yo,Yy,ggo,ed,hgo,pee,ugo,pgo,_ee,_go,bgo,vgo,Ky,Tgo,bee,Fgo,Cgo,Mgo,zr,Zy,Ego,vee,ygo,wgo,od,Ago,Tee,Lgo,Bgo,Fee,xgo,kgo,Rgo,Cee,Sgo,Pgo,ew,$go,Ne,ow,Igo,Mee,jgo,Ngo,za,Dgo,Eee,qgo,Ggo,yee,Ogo,Xgo,wee,Vgo,zgo,Wgo,k,Lp,Aee,Qgo,Hgo,wP,Ugo,Jgo,Ygo,Bp,Lee,Kgo,Zgo,AP,eho,oho,rho,xp,Bee,tho,aho,LP,nho,sho,lho,kp,xee,iho,dho,BP,cho,mho,fho,Rp,kee,gho,hho,xP,uho,pho,_ho,Sp,Ree,bho,vho,kP,Tho,Fho,Cho,Pp,See,Mho,Eho,RP,yho,who,Aho,$p,Pee,Lho,Bho,SP,xho,kho,Rho,Ip,$ee,Sho,Pho,PP,$ho,Iho,jho,jp,Iee,Nho,Dho,$P,qho,Gho,Oho,Np,jee,Xho,Vho,IP,zho,Who,Qho,Dp,Nee,Hho,Uho,jP,Jho,Yho,Kho,qp,Dee,Zho,euo,NP,ouo,ruo,tuo,Gp,qee,auo,nuo,DP,suo,luo,iuo,Op,Gee,duo,cuo,qP,muo,fuo,guo,Xp,Oee,huo,uuo,GP,puo,_uo,buo,Vp,Xee,vuo,Tuo,OP,Fuo,Cuo,Muo,zp,Vee,Euo,yuo,XP,wuo,Auo,Luo,Wp,zee,Buo,xuo,VP,kuo,Ruo,Suo,Qp,Wee,Puo,$uo,zP,Iuo,juo,Nuo,Hp,Qee,Duo,quo,WP,Guo,Ouo,Xuo,Up,Hee,Vuo,zuo,QP,Wuo,Quo,Huo,Jp,Uee,Uuo,Juo,HP,Yuo,Kuo,Zuo,Yp,Jee,epo,opo,UP,rpo,tpo,apo,Kp,Yee,npo,spo,JP,lpo,ipo,dpo,Zp,Kee,cpo,mpo,YP,fpo,gpo,hpo,e_,Zee,upo,ppo,KP,_po,bpo,vpo,o_,eoe,Tpo,Fpo,ZP,Cpo,Mpo,Epo,r_,ooe,ypo,wpo,e$,Apo,Lpo,Bpo,t_,roe,xpo,kpo,o$,Rpo,Spo,Ppo,a_,toe,$po,Ipo,r$,jpo,Npo,Dpo,n_,aoe,qpo,Gpo,t$,Opo,Xpo,Vpo,s_,noe,zpo,Wpo,a$,Qpo,Hpo,Upo,l_,soe,Jpo,Ypo,n$,Kpo,Zpo,e_o,i_,loe,o_o,r_o,s$,t_o,a_o,n_o,d_,ioe,s_o,l_o,l$,i_o,d_o,c_o,c_,doe,m_o,f_o,i$,g_o,h_o,u_o,m_,coe,p_o,__o,d$,b_o,v_o,T_o,f_,moe,F_o,C_o,c$,M_o,E_o,y_o,g_,w_o,foe,A_o,L_o,goe,B_o,x_o,hoe,k_o,R_o,rw,Ske,rd,h_,uoe,tw,S_o,poe,P_o,Pke,Ko,aw,$_o,td,I_o,_oe,j_o,N_o,boe,D_o,q_o,G_o,nw,O_o,voe,X_o,V_o,z_o,Wr,sw,W_o,Toe,Q_o,H_o,ad,U_o,Foe,J_o,Y_o,Coe,K_o,Z_o,ebo,Moe,obo,rbo,lw,tbo,De,iw,abo,Eoe,nbo,sbo,Wa,lbo,yoe,ibo,dbo,woe,cbo,mbo,Aoe,fbo,gbo,hbo,$,u_,Loe,ubo,pbo,m$,_bo,bbo,vbo,p_,Boe,Tbo,Fbo,f$,Cbo,Mbo,Ebo,__,xoe,ybo,wbo,g$,Abo,Lbo,Bbo,b_,koe,xbo,kbo,h$,Rbo,Sbo,Pbo,v_,Roe,$bo,Ibo,u$,jbo,Nbo,Dbo,T_,Soe,qbo,Gbo,p$,Obo,Xbo,Vbo,F_,Poe,zbo,Wbo,_$,Qbo,Hbo,Ubo,C_,$oe,Jbo,Ybo,b$,Kbo,Zbo,e2o,M_,Ioe,o2o,r2o,v$,t2o,a2o,n2o,E_,joe,s2o,l2o,T$,i2o,d2o,c2o,y_,Noe,m2o,f2o,F$,g2o,h2o,u2o,w_,Doe,p2o,_2o,C$,b2o,v2o,T2o,A_,qoe,F2o,C2o,M$,M2o,E2o,y2o,L_,Goe,w2o,A2o,E$,L2o,B2o,x2o,B_,Ooe,k2o,R2o,y$,S2o,P2o,$2o,x_,Xoe,I2o,j2o,w$,N2o,D2o,q2o,k_,Voe,G2o,O2o,A$,X2o,V2o,z2o,R_,zoe,W2o,Q2o,L$,H2o,U2o,J2o,S_,Woe,Y2o,K2o,B$,Z2o,evo,ovo,P_,Qoe,rvo,tvo,x$,avo,nvo,svo,$_,Hoe,lvo,ivo,k$,dvo,cvo,mvo,I_,Uoe,fvo,gvo,R$,hvo,uvo,pvo,j_,Joe,_vo,bvo,S$,vvo,Tvo,Fvo,N_,Yoe,Cvo,Mvo,P$,Evo,yvo,wvo,D_,Koe,Avo,Lvo,$$,Bvo,xvo,kvo,q_,Zoe,Rvo,Svo,I$,Pvo,$vo,Ivo,G_,ere,jvo,Nvo,j$,Dvo,qvo,Gvo,O_,ore,Ovo,Xvo,N$,Vvo,zvo,Wvo,X_,rre,Qvo,Hvo,D$,Uvo,Jvo,Yvo,V_,tre,Kvo,Zvo,q$,eTo,oTo,rTo,z_,are,tTo,aTo,G$,nTo,sTo,lTo,W_,nre,iTo,dTo,O$,cTo,mTo,fTo,Q_,sre,gTo,hTo,X$,uTo,pTo,_To,H_,lre,bTo,vTo,V$,TTo,FTo,CTo,U_,ire,MTo,ETo,z$,yTo,wTo,ATo,J_,LTo,dre,BTo,xTo,cre,kTo,RTo,mre,STo,PTo,dw,$ke,nd,Y_,fre,cw,$To,gre,ITo,Ike,Zo,mw,jTo,sd,NTo,hre,DTo,qTo,ure,GTo,OTo,XTo,fw,VTo,pre,zTo,WTo,QTo,Qr,gw,HTo,_re,UTo,JTo,ld,YTo,bre,KTo,ZTo,vre,e1o,o1o,r1o,Tre,t1o,a1o,hw,n1o,qe,uw,s1o,Fre,l1o,i1o,Qa,d1o,Cre,c1o,m1o,Mre,f1o,g1o,Ere,h1o,u1o,p1o,I,K_,yre,_1o,b1o,W$,v1o,T1o,F1o,Z_,wre,C1o,M1o,Q$,E1o,y1o,w1o,eb,Are,A1o,L1o,H$,B1o,x1o,k1o,ob,Lre,R1o,S1o,U$,P1o,$1o,I1o,rb,Bre,j1o,N1o,J$,D1o,q1o,G1o,tb,xre,O1o,X1o,Y$,V1o,z1o,W1o,ab,kre,Q1o,H1o,K$,U1o,J1o,Y1o,nb,Rre,K1o,Z1o,Z$,eFo,oFo,rFo,sb,Sre,tFo,aFo,eI,nFo,sFo,lFo,lb,Pre,iFo,dFo,oI,cFo,mFo,fFo,ib,$re,gFo,hFo,rI,uFo,pFo,_Fo,db,Ire,bFo,vFo,tI,TFo,FFo,CFo,cb,jre,MFo,EFo,aI,yFo,wFo,AFo,mb,Nre,LFo,BFo,nI,xFo,kFo,RFo,fb,Dre,SFo,PFo,sI,$Fo,IFo,jFo,gb,qre,NFo,DFo,lI,qFo,GFo,OFo,hb,Gre,XFo,VFo,iI,zFo,WFo,QFo,ub,Ore,HFo,UFo,dI,JFo,YFo,KFo,pb,Xre,ZFo,eCo,cI,oCo,rCo,tCo,_b,Vre,aCo,nCo,mI,sCo,lCo,iCo,bb,zre,dCo,cCo,fI,mCo,fCo,gCo,vb,Wre,hCo,uCo,gI,pCo,_Co,bCo,Tb,Qre,vCo,TCo,hI,FCo,CCo,MCo,Fb,Hre,ECo,yCo,uI,wCo,ACo,LCo,Cb,Ure,BCo,xCo,pI,kCo,RCo,SCo,Mb,Jre,PCo,$Co,_I,ICo,jCo,NCo,Eb,Yre,DCo,qCo,bI,GCo,OCo,XCo,yb,Kre,VCo,zCo,vI,WCo,QCo,HCo,wb,Zre,UCo,JCo,TI,YCo,KCo,ZCo,Ab,ete,eMo,oMo,FI,rMo,tMo,aMo,Lb,ote,nMo,sMo,rte,lMo,iMo,dMo,Bb,tte,cMo,mMo,CI,fMo,gMo,hMo,xb,ate,uMo,pMo,MI,_Mo,bMo,vMo,kb,nte,TMo,FMo,EI,CMo,MMo,EMo,Rb,ste,yMo,wMo,yI,AMo,LMo,BMo,Sb,xMo,lte,kMo,RMo,ite,SMo,PMo,dte,$Mo,IMo,pw,jke,id,Pb,cte,_w,jMo,mte,NMo,Nke,er,bw,DMo,dd,qMo,fte,GMo,OMo,gte,XMo,VMo,zMo,vw,WMo,hte,QMo,HMo,UMo,Hr,Tw,JMo,ute,YMo,KMo,cd,ZMo,pte,e4o,o4o,_te,r4o,t4o,a4o,bte,n4o,s4o,Fw,l4o,Ge,Cw,i4o,vte,d4o,c4o,Ha,m4o,Tte,f4o,g4o,Fte,h4o,u4o,Cte,p4o,_4o,b4o,se,$b,Mte,v4o,T4o,wI,F4o,C4o,M4o,Ib,Ete,E4o,y4o,AI,w4o,A4o,L4o,jb,yte,B4o,x4o,LI,k4o,R4o,S4o,Nb,wte,P4o,$4o,BI,I4o,j4o,N4o,Db,Ate,D4o,q4o,xI,G4o,O4o,X4o,qb,Lte,V4o,z4o,kI,W4o,Q4o,H4o,Gb,Bte,U4o,J4o,RI,Y4o,K4o,Z4o,Ob,xte,eEo,oEo,SI,rEo,tEo,aEo,Xb,kte,nEo,sEo,PI,lEo,iEo,dEo,Vb,Rte,cEo,mEo,$I,fEo,gEo,hEo,zb,Ste,uEo,pEo,II,_Eo,bEo,vEo,Wb,Pte,TEo,FEo,jI,CEo,MEo,EEo,Qb,$te,yEo,wEo,NI,AEo,LEo,BEo,Hb,Ite,xEo,kEo,DI,REo,SEo,PEo,Ub,jte,$Eo,IEo,qI,jEo,NEo,DEo,Jb,Nte,qEo,GEo,GI,OEo,XEo,VEo,Yb,zEo,Dte,WEo,QEo,qte,HEo,UEo,Gte,JEo,YEo,Mw,Dke,md,Kb,Ote,Ew,KEo,Xte,ZEo,qke,or,yw,e3o,fd,o3o,Vte,r3o,t3o,zte,a3o,n3o,s3o,ww,l3o,Wte,i3o,d3o,c3o,Ur,Aw,m3o,Qte,f3o,g3o,gd,h3o,Hte,u3o,p3o,Ute,_3o,b3o,v3o,Jte,T3o,F3o,Lw,C3o,Oe,Bw,M3o,Yte,E3o,y3o,Ua,w3o,Kte,A3o,L3o,Zte,B3o,x3o,eae,k3o,R3o,S3o,A,Zb,oae,P3o,$3o,OI,I3o,j3o,N3o,e2,rae,D3o,q3o,XI,G3o,O3o,X3o,o2,tae,V3o,z3o,VI,W3o,Q3o,H3o,r2,aae,U3o,J3o,zI,Y3o,K3o,Z3o,t2,nae,e5o,o5o,WI,r5o,t5o,a5o,a2,sae,n5o,s5o,QI,l5o,i5o,d5o,n2,lae,c5o,m5o,HI,f5o,g5o,h5o,s2,iae,u5o,p5o,UI,_5o,b5o,v5o,l2,dae,T5o,F5o,JI,C5o,M5o,E5o,i2,cae,y5o,w5o,YI,A5o,L5o,B5o,d2,mae,x5o,k5o,KI,R5o,S5o,P5o,c2,fae,$5o,I5o,ZI,j5o,N5o,D5o,m2,gae,q5o,G5o,ej,O5o,X5o,V5o,f2,hae,z5o,W5o,oj,Q5o,H5o,U5o,g2,uae,J5o,Y5o,rj,K5o,Z5o,eyo,h2,pae,oyo,ryo,tj,tyo,ayo,nyo,u2,_ae,syo,lyo,aj,iyo,dyo,cyo,p2,bae,myo,fyo,nj,gyo,hyo,uyo,_2,vae,pyo,_yo,sj,byo,vyo,Tyo,b2,Tae,Fyo,Cyo,lj,Myo,Eyo,yyo,v2,Fae,wyo,Ayo,ij,Lyo,Byo,xyo,T2,Cae,kyo,Ryo,dj,Syo,Pyo,$yo,F2,Mae,Iyo,jyo,cj,Nyo,Dyo,qyo,C2,Eae,Gyo,Oyo,mj,Xyo,Vyo,zyo,M2,yae,Wyo,Qyo,fj,Hyo,Uyo,Jyo,E2,wae,Yyo,Kyo,gj,Zyo,ewo,owo,y2,Aae,rwo,two,hj,awo,nwo,swo,w2,Lae,lwo,iwo,uj,dwo,cwo,mwo,A2,Bae,fwo,gwo,pj,hwo,uwo,pwo,L2,xae,_wo,bwo,_j,vwo,Two,Fwo,B2,kae,Cwo,Mwo,bj,Ewo,ywo,wwo,x2,Rae,Awo,Lwo,vj,Bwo,xwo,kwo,k2,Sae,Rwo,Swo,Tj,Pwo,$wo,Iwo,R2,Pae,jwo,Nwo,Fj,Dwo,qwo,Gwo,S2,$ae,Owo,Xwo,Cj,Vwo,zwo,Wwo,P2,Iae,Qwo,Hwo,Mj,Uwo,Jwo,Ywo,$2,jae,Kwo,Zwo,Ej,e6o,o6o,r6o,I2,Nae,t6o,a6o,yj,n6o,s6o,l6o,j2,Dae,i6o,d6o,wj,c6o,m6o,f6o,N2,qae,g6o,h6o,Aj,u6o,p6o,_6o,D2,Gae,b6o,v6o,Lj,T6o,F6o,C6o,q2,Oae,M6o,E6o,Bj,y6o,w6o,A6o,G2,Xae,L6o,B6o,xj,x6o,k6o,R6o,O2,Vae,S6o,P6o,kj,$6o,I6o,j6o,X2,zae,N6o,D6o,Rj,q6o,G6o,O6o,V2,Wae,X6o,V6o,Sj,z6o,W6o,Q6o,z2,H6o,Qae,U6o,J6o,Hae,Y6o,K6o,Uae,Z6o,eAo,xw,Gke,hd,W2,Jae,kw,oAo,Yae,rAo,Oke,rr,Rw,tAo,ud,aAo,Kae,nAo,sAo,Zae,lAo,iAo,dAo,Sw,cAo,ene,mAo,fAo,gAo,Jr,Pw,hAo,one,uAo,pAo,pd,_Ao,rne,bAo,vAo,tne,TAo,FAo,CAo,ane,MAo,EAo,$w,yAo,Xe,Iw,wAo,nne,AAo,LAo,Ja,BAo,sne,xAo,kAo,lne,RAo,SAo,ine,PAo,$Ao,IAo,G,Q2,dne,jAo,NAo,Pj,DAo,qAo,GAo,H2,cne,OAo,XAo,$j,VAo,zAo,WAo,U2,mne,QAo,HAo,Ij,UAo,JAo,YAo,J2,fne,KAo,ZAo,jj,e0o,o0o,r0o,Y2,gne,t0o,a0o,Nj,n0o,s0o,l0o,K2,hne,i0o,d0o,Dj,c0o,m0o,f0o,Z2,une,g0o,h0o,qj,u0o,p0o,_0o,ev,pne,b0o,v0o,Gj,T0o,F0o,C0o,ov,_ne,M0o,E0o,Oj,y0o,w0o,A0o,rv,bne,L0o,B0o,Xj,x0o,k0o,R0o,tv,vne,S0o,P0o,Vj,$0o,I0o,j0o,av,Tne,N0o,D0o,zj,q0o,G0o,O0o,nv,Fne,X0o,V0o,Wj,z0o,W0o,Q0o,sv,Cne,H0o,U0o,Qj,J0o,Y0o,K0o,lv,Mne,Z0o,eLo,Hj,oLo,rLo,tLo,iv,Ene,aLo,nLo,Uj,sLo,lLo,iLo,dv,yne,dLo,cLo,Jj,mLo,fLo,gLo,cv,wne,hLo,uLo,Yj,pLo,_Lo,bLo,mv,Ane,vLo,TLo,Kj,FLo,CLo,MLo,fv,Lne,ELo,yLo,Zj,wLo,ALo,LLo,gv,Bne,BLo,xLo,eN,kLo,RLo,SLo,hv,xne,PLo,$Lo,oN,ILo,jLo,NLo,uv,kne,DLo,qLo,rN,GLo,OLo,XLo,pv,Rne,VLo,zLo,tN,WLo,QLo,HLo,_v,Sne,ULo,JLo,aN,YLo,KLo,ZLo,bv,Pne,e7o,o7o,nN,r7o,t7o,a7o,vv,$ne,n7o,s7o,sN,l7o,i7o,d7o,Tv,Ine,c7o,m7o,lN,f7o,g7o,h7o,Fv,u7o,jne,p7o,_7o,Nne,b7o,v7o,Dne,T7o,F7o,jw,Xke,_d,Cv,qne,Nw,C7o,Gne,M7o,Vke,tr,Dw,E7o,bd,y7o,One,w7o,A7o,Xne,L7o,B7o,x7o,qw,k7o,Vne,R7o,S7o,P7o,Yr,Gw,$7o,zne,I7o,j7o,vd,N7o,Wne,D7o,q7o,Qne,G7o,O7o,X7o,Hne,V7o,z7o,Ow,W7o,Ve,Xw,Q7o,Une,H7o,U7o,Ya,J7o,Jne,Y7o,K7o,Yne,Z7o,e8o,Kne,o8o,r8o,t8o,da,Mv,Zne,a8o,n8o,iN,s8o,l8o,i8o,Ev,ese,d8o,c8o,dN,m8o,f8o,g8o,yv,ose,h8o,u8o,cN,p8o,_8o,b8o,wv,rse,v8o,T8o,mN,F8o,C8o,M8o,Av,tse,E8o,y8o,fN,w8o,A8o,L8o,Lv,B8o,ase,x8o,k8o,nse,R8o,S8o,sse,P8o,$8o,Vw,zke,Td,Bv,lse,zw,I8o,ise,j8o,Wke,ar,Ww,N8o,Fd,D8o,dse,q8o,G8o,cse,O8o,X8o,V8o,Qw,z8o,mse,W8o,Q8o,H8o,Kr,Hw,U8o,fse,J8o,Y8o,Cd,K8o,gse,Z8o,e9o,hse,o9o,r9o,t9o,use,a9o,n9o,Uw,s9o,ze,Jw,l9o,pse,i9o,d9o,Ka,c9o,_se,m9o,f9o,bse,g9o,h9o,vse,u9o,p9o,_9o,D,xv,Tse,b9o,v9o,gN,T9o,F9o,C9o,kv,Fse,M9o,E9o,hN,y9o,w9o,A9o,Rv,Cse,L9o,B9o,uN,x9o,k9o,R9o,Sv,Mse,S9o,P9o,pN,$9o,I9o,j9o,Pv,Ese,N9o,D9o,_N,q9o,G9o,O9o,$v,yse,X9o,V9o,bN,z9o,W9o,Q9o,Iv,wse,H9o,U9o,vN,J9o,Y9o,K9o,jv,Ase,Z9o,eBo,TN,oBo,rBo,tBo,Nv,Lse,aBo,nBo,FN,sBo,lBo,iBo,Dv,Bse,dBo,cBo,CN,mBo,fBo,gBo,qv,xse,hBo,uBo,MN,pBo,_Bo,bBo,Gv,kse,vBo,TBo,EN,FBo,CBo,MBo,Ov,Rse,EBo,yBo,yN,wBo,ABo,LBo,Xv,Sse,BBo,xBo,wN,kBo,RBo,SBo,Vv,Pse,PBo,$Bo,AN,IBo,jBo,NBo,zv,$se,DBo,qBo,LN,GBo,OBo,XBo,Wv,Ise,VBo,zBo,BN,WBo,QBo,HBo,Qv,jse,UBo,JBo,xN,YBo,KBo,ZBo,Hv,Nse,exo,oxo,kN,rxo,txo,axo,Uv,Dse,nxo,sxo,RN,lxo,ixo,dxo,Jv,qse,cxo,mxo,SN,fxo,gxo,hxo,Yv,Gse,uxo,pxo,PN,_xo,bxo,vxo,Kv,Ose,Txo,Fxo,$N,Cxo,Mxo,Exo,Zv,Xse,yxo,wxo,IN,Axo,Lxo,Bxo,eT,Vse,xxo,kxo,jN,Rxo,Sxo,Pxo,oT,zse,$xo,Ixo,NN,jxo,Nxo,Dxo,rT,Wse,qxo,Gxo,DN,Oxo,Xxo,Vxo,tT,Qse,zxo,Wxo,qN,Qxo,Hxo,Uxo,aT,Hse,Jxo,Yxo,GN,Kxo,Zxo,eko,nT,Use,oko,rko,ON,tko,ako,nko,sT,Jse,sko,lko,XN,iko,dko,cko,lT,Yse,mko,fko,VN,gko,hko,uko,iT,Kse,pko,_ko,zN,bko,vko,Tko,dT,Fko,Zse,Cko,Mko,ele,Eko,yko,ole,wko,Ako,Yw,Qke,Md,cT,rle,Kw,Lko,tle,Bko,Hke,nr,Zw,xko,Ed,kko,ale,Rko,Sko,nle,Pko,$ko,Iko,e6,jko,sle,Nko,Dko,qko,Zr,o6,Gko,lle,Oko,Xko,yd,Vko,ile,zko,Wko,dle,Qko,Hko,Uko,cle,Jko,Yko,r6,Kko,We,t6,Zko,mle,eRo,oRo,Za,rRo,fle,tRo,aRo,gle,nRo,sRo,hle,lRo,iRo,dRo,R,mT,ule,cRo,mRo,WN,fRo,gRo,hRo,fT,ple,uRo,pRo,QN,_Ro,bRo,vRo,gT,_le,TRo,FRo,HN,CRo,MRo,ERo,hT,ble,yRo,wRo,UN,ARo,LRo,BRo,uT,vle,xRo,kRo,JN,RRo,SRo,PRo,pT,Tle,$Ro,IRo,YN,jRo,NRo,DRo,_T,Fle,qRo,GRo,KN,ORo,XRo,VRo,bT,Cle,zRo,WRo,ZN,QRo,HRo,URo,vT,Mle,JRo,YRo,eD,KRo,ZRo,eSo,TT,Ele,oSo,rSo,oD,tSo,aSo,nSo,FT,yle,sSo,lSo,rD,iSo,dSo,cSo,CT,wle,mSo,fSo,tD,gSo,hSo,uSo,MT,Ale,pSo,_So,aD,bSo,vSo,TSo,ET,Lle,FSo,CSo,nD,MSo,ESo,ySo,yT,Ble,wSo,ASo,sD,LSo,BSo,xSo,wT,xle,kSo,RSo,lD,SSo,PSo,$So,AT,kle,ISo,jSo,iD,NSo,DSo,qSo,LT,Rle,GSo,OSo,dD,XSo,VSo,zSo,BT,Sle,WSo,QSo,cD,HSo,USo,JSo,xT,Ple,YSo,KSo,mD,ZSo,ePo,oPo,kT,$le,rPo,tPo,fD,aPo,nPo,sPo,RT,Ile,lPo,iPo,gD,dPo,cPo,mPo,ST,jle,fPo,gPo,hD,hPo,uPo,pPo,PT,Nle,_Po,bPo,uD,vPo,TPo,FPo,$T,Dle,CPo,MPo,pD,EPo,yPo,wPo,IT,qle,APo,LPo,_D,BPo,xPo,kPo,jT,Gle,RPo,SPo,bD,PPo,$Po,IPo,NT,Ole,jPo,NPo,vD,DPo,qPo,GPo,DT,Xle,OPo,XPo,TD,VPo,zPo,WPo,qT,Vle,QPo,HPo,FD,UPo,JPo,YPo,GT,zle,KPo,ZPo,CD,e$o,o$o,r$o,OT,Wle,t$o,a$o,MD,n$o,s$o,l$o,XT,Qle,i$o,d$o,ED,c$o,m$o,f$o,VT,Hle,g$o,h$o,yD,u$o,p$o,_$o,zT,Ule,b$o,v$o,wD,T$o,F$o,C$o,WT,Jle,M$o,E$o,AD,y$o,w$o,A$o,QT,Yle,L$o,B$o,LD,x$o,k$o,R$o,HT,Kle,S$o,P$o,BD,$$o,I$o,j$o,UT,Zle,N$o,D$o,xD,q$o,G$o,O$o,JT,X$o,eie,V$o,z$o,oie,W$o,Q$o,rie,H$o,U$o,a6,Uke,wd,YT,tie,n6,J$o,aie,Y$o,Jke,sr,s6,K$o,Ad,Z$o,nie,eIo,oIo,sie,rIo,tIo,aIo,l6,nIo,lie,sIo,lIo,iIo,et,i6,dIo,iie,cIo,mIo,Ld,fIo,die,gIo,hIo,cie,uIo,pIo,_Io,mie,bIo,vIo,d6,TIo,Qe,c6,FIo,fie,CIo,MIo,en,EIo,gie,yIo,wIo,hie,AIo,LIo,uie,BIo,xIo,kIo,pie,KT,_ie,RIo,SIo,kD,PIo,$Io,IIo,ZT,jIo,bie,NIo,DIo,vie,qIo,GIo,Tie,OIo,XIo,m6,Yke,Bd,e1,Fie,f6,VIo,Cie,zIo,Kke,lr,g6,WIo,xd,QIo,Mie,HIo,UIo,Eie,JIo,YIo,KIo,h6,ZIo,yie,ejo,ojo,rjo,ot,u6,tjo,wie,ajo,njo,kd,sjo,Aie,ljo,ijo,Lie,djo,cjo,mjo,Bie,fjo,gjo,p6,hjo,He,_6,ujo,xie,pjo,_jo,on,bjo,kie,vjo,Tjo,Rie,Fjo,Cjo,Sie,Mjo,Ejo,yjo,ge,o1,Pie,wjo,Ajo,RD,Ljo,Bjo,xjo,r1,$ie,kjo,Rjo,SD,Sjo,Pjo,$jo,qs,Iie,Ijo,jjo,PD,Njo,Djo,$D,qjo,Gjo,Ojo,t1,jie,Xjo,Vjo,ID,zjo,Wjo,Qjo,fa,Nie,Hjo,Ujo,jD,Jjo,Yjo,ND,Kjo,Zjo,DD,eNo,oNo,rNo,a1,Die,tNo,aNo,qD,nNo,sNo,lNo,n1,qie,iNo,dNo,GD,cNo,mNo,fNo,s1,Gie,gNo,hNo,OD,uNo,pNo,_No,l1,Oie,bNo,vNo,XD,TNo,FNo,CNo,i1,Xie,MNo,ENo,VD,yNo,wNo,ANo,d1,Vie,LNo,BNo,zD,xNo,kNo,RNo,c1,SNo,zie,PNo,$No,Wie,INo,jNo,Qie,NNo,DNo,b6,Zke,Rd,m1,Hie,v6,qNo,Uie,GNo,eRe,ir,T6,ONo,Sd,XNo,Jie,VNo,zNo,Yie,WNo,QNo,HNo,F6,UNo,Kie,JNo,YNo,KNo,rt,C6,ZNo,Zie,eDo,oDo,Pd,rDo,ede,tDo,aDo,ode,nDo,sDo,lDo,rde,iDo,dDo,M6,cDo,Ue,E6,mDo,tde,fDo,gDo,rn,hDo,ade,uDo,pDo,nde,_Do,bDo,sde,vDo,TDo,FDo,lde,f1,ide,CDo,MDo,WD,EDo,yDo,wDo,g1,ADo,dde,LDo,BDo,cde,xDo,kDo,mde,RDo,SDo,y6,oRe,$d,h1,fde,w6,PDo,gde,$Do,rRe,dr,A6,IDo,Id,jDo,hde,NDo,DDo,ude,qDo,GDo,ODo,L6,XDo,pde,VDo,zDo,WDo,tt,B6,QDo,_de,HDo,UDo,jd,JDo,bde,YDo,KDo,vde,ZDo,eqo,oqo,Tde,rqo,tqo,x6,aqo,Je,k6,nqo,Fde,sqo,lqo,tn,iqo,Cde,dqo,cqo,Mde,mqo,fqo,Ede,gqo,hqo,uqo,ke,u1,yde,pqo,_qo,QD,bqo,vqo,Tqo,p1,wde,Fqo,Cqo,HD,Mqo,Eqo,yqo,_1,Ade,wqo,Aqo,UD,Lqo,Bqo,xqo,b1,Lde,kqo,Rqo,JD,Sqo,Pqo,$qo,v1,Bde,Iqo,jqo,YD,Nqo,Dqo,qqo,T1,xde,Gqo,Oqo,KD,Xqo,Vqo,zqo,F1,kde,Wqo,Qqo,ZD,Hqo,Uqo,Jqo,C1,Rde,Yqo,Kqo,eq,Zqo,eGo,oGo,M1,rGo,Sde,tGo,aGo,Pde,nGo,sGo,$de,lGo,iGo,R6,tRe,Nd,E1,Ide,S6,dGo,jde,cGo,aRe,cr,P6,mGo,Dd,fGo,Nde,gGo,hGo,Dde,uGo,pGo,_Go,$6,bGo,qde,vGo,TGo,FGo,at,I6,CGo,Gde,MGo,EGo,qd,yGo,Ode,wGo,AGo,Xde,LGo,BGo,xGo,Vde,kGo,RGo,j6,SGo,Ye,N6,PGo,zde,$Go,IGo,an,jGo,Wde,NGo,DGo,Qde,qGo,GGo,Hde,OGo,XGo,VGo,nn,y1,Ude,zGo,WGo,oq,QGo,HGo,UGo,w1,Jde,JGo,YGo,rq,KGo,ZGo,eOo,A1,Yde,oOo,rOo,tq,tOo,aOo,nOo,L1,Kde,sOo,lOo,aq,iOo,dOo,cOo,B1,mOo,Zde,fOo,gOo,ece,hOo,uOo,oce,pOo,_Oo,D6,nRe,Gd,x1,rce,q6,bOo,tce,vOo,sRe,mr,G6,TOo,Od,FOo,ace,COo,MOo,nce,EOo,yOo,wOo,O6,AOo,sce,LOo,BOo,xOo,nt,X6,kOo,lce,ROo,SOo,Xd,POo,ice,$Oo,IOo,dce,jOo,NOo,DOo,cce,qOo,GOo,V6,OOo,Ke,z6,XOo,mce,VOo,zOo,sn,WOo,fce,QOo,HOo,gce,UOo,JOo,hce,YOo,KOo,ZOo,Re,k1,uce,eXo,oXo,nq,rXo,tXo,aXo,R1,pce,nXo,sXo,sq,lXo,iXo,dXo,S1,_ce,cXo,mXo,lq,fXo,gXo,hXo,P1,bce,uXo,pXo,iq,_Xo,bXo,vXo,$1,vce,TXo,FXo,dq,CXo,MXo,EXo,I1,Tce,yXo,wXo,cq,AXo,LXo,BXo,j1,Fce,xXo,kXo,mq,RXo,SXo,PXo,N1,Cce,$Xo,IXo,fq,jXo,NXo,DXo,D1,qXo,Mce,GXo,OXo,Ece,XXo,VXo,yce,zXo,WXo,W6,lRe,Vd,q1,wce,Q6,QXo,Ace,HXo,iRe,fr,H6,UXo,zd,JXo,Lce,YXo,KXo,Bce,ZXo,eVo,oVo,U6,rVo,xce,tVo,aVo,nVo,st,J6,sVo,kce,lVo,iVo,Wd,dVo,Rce,cVo,mVo,Sce,fVo,gVo,hVo,Pce,uVo,pVo,Y6,_Vo,Ze,K6,bVo,$ce,vVo,TVo,ln,FVo,Ice,CVo,MVo,jce,EVo,yVo,Nce,wVo,AVo,LVo,Z6,G1,Dce,BVo,xVo,gq,kVo,RVo,SVo,O1,qce,PVo,$Vo,hq,IVo,jVo,NVo,X1,DVo,Gce,qVo,GVo,Oce,OVo,XVo,Xce,VVo,zVo,eA,dRe,Qd,V1,Vce,oA,WVo,zce,QVo,cRe,gr,rA,HVo,Hd,UVo,Wce,JVo,YVo,Qce,KVo,ZVo,ezo,tA,ozo,Hce,rzo,tzo,azo,lt,aA,nzo,Uce,szo,lzo,Ud,izo,Jce,dzo,czo,Yce,mzo,fzo,gzo,Kce,hzo,uzo,nA,pzo,eo,sA,_zo,Zce,bzo,vzo,dn,Tzo,eme,Fzo,Czo,ome,Mzo,Ezo,rme,yzo,wzo,Azo,cn,z1,tme,Lzo,Bzo,uq,xzo,kzo,Rzo,W1,ame,Szo,Pzo,pq,$zo,Izo,jzo,Q1,nme,Nzo,Dzo,_q,qzo,Gzo,Ozo,H1,sme,Xzo,Vzo,bq,zzo,Wzo,Qzo,U1,Hzo,lme,Uzo,Jzo,ime,Yzo,Kzo,dme,Zzo,eWo,lA,mRe,Jd,J1,cme,iA,oWo,mme,rWo,fRe,hr,dA,tWo,Yd,aWo,fme,nWo,sWo,gme,lWo,iWo,dWo,cA,cWo,hme,mWo,fWo,gWo,it,mA,hWo,ume,uWo,pWo,Kd,_Wo,pme,bWo,vWo,_me,TWo,FWo,CWo,bme,MWo,EWo,fA,yWo,oo,gA,wWo,vme,AWo,LWo,mn,BWo,Tme,xWo,kWo,Fme,RWo,SWo,Cme,PWo,$Wo,IWo,Zd,Y1,Mme,jWo,NWo,vq,DWo,qWo,GWo,K1,Eme,OWo,XWo,Tq,VWo,zWo,WWo,Z1,yme,QWo,HWo,Fq,UWo,JWo,YWo,eF,KWo,wme,ZWo,eQo,Ame,oQo,rQo,Lme,tQo,aQo,hA,gRe,ec,oF,Bme,uA,nQo,xme,sQo,hRe,ur,pA,lQo,oc,iQo,kme,dQo,cQo,Rme,mQo,fQo,gQo,_A,hQo,Sme,uQo,pQo,_Qo,dt,bA,bQo,Pme,vQo,TQo,rc,FQo,$me,CQo,MQo,Ime,EQo,yQo,wQo,jme,AQo,LQo,vA,BQo,ro,TA,xQo,Nme,kQo,RQo,fn,SQo,Dme,PQo,$Qo,qme,IQo,jQo,Gme,NQo,DQo,qQo,Ome,rF,Xme,GQo,OQo,Cq,XQo,VQo,zQo,tF,WQo,Vme,QQo,HQo,zme,UQo,JQo,Wme,YQo,KQo,FA,uRe,tc,aF,Qme,CA,ZQo,Hme,eHo,pRe,pr,MA,oHo,ac,rHo,Ume,tHo,aHo,Jme,nHo,sHo,lHo,EA,iHo,Yme,dHo,cHo,mHo,ct,yA,fHo,Kme,gHo,hHo,nc,uHo,Zme,pHo,_Ho,efe,bHo,vHo,THo,ofe,FHo,CHo,wA,MHo,to,AA,EHo,rfe,yHo,wHo,gn,AHo,tfe,LHo,BHo,afe,xHo,kHo,nfe,RHo,SHo,PHo,sfe,nF,lfe,$Ho,IHo,Mq,jHo,NHo,DHo,sF,qHo,ife,GHo,OHo,dfe,XHo,VHo,cfe,zHo,WHo,LA,_Re,sc,lF,mfe,BA,QHo,ffe,HHo,bRe,_r,xA,UHo,lc,JHo,gfe,YHo,KHo,hfe,ZHo,eUo,oUo,kA,rUo,ufe,tUo,aUo,nUo,mt,RA,sUo,pfe,lUo,iUo,ic,dUo,_fe,cUo,mUo,bfe,fUo,gUo,hUo,vfe,uUo,pUo,SA,_Uo,ao,PA,bUo,Tfe,vUo,TUo,hn,FUo,Ffe,CUo,MUo,Cfe,EUo,yUo,Mfe,wUo,AUo,LUo,$A,iF,Efe,BUo,xUo,Eq,kUo,RUo,SUo,dF,yfe,PUo,$Uo,yq,IUo,jUo,NUo,cF,DUo,wfe,qUo,GUo,Afe,OUo,XUo,Lfe,VUo,zUo,IA,vRe,dc,mF,Bfe,jA,WUo,xfe,QUo,TRe,br,NA,HUo,cc,UUo,kfe,JUo,YUo,Rfe,KUo,ZUo,eJo,DA,oJo,Sfe,rJo,tJo,aJo,ft,qA,nJo,Pfe,sJo,lJo,mc,iJo,$fe,dJo,cJo,Ife,mJo,fJo,gJo,jfe,hJo,uJo,GA,pJo,no,OA,_Jo,Nfe,bJo,vJo,un,TJo,Dfe,FJo,CJo,qfe,MJo,EJo,Gfe,yJo,wJo,AJo,Ofe,fF,Xfe,LJo,BJo,wq,xJo,kJo,RJo,gF,SJo,Vfe,PJo,$Jo,zfe,IJo,jJo,Wfe,NJo,DJo,XA,FRe,fc,hF,Qfe,VA,qJo,Hfe,GJo,CRe,vr,zA,OJo,gc,XJo,Ufe,VJo,zJo,Jfe,WJo,QJo,HJo,WA,UJo,Yfe,JJo,YJo,KJo,gt,QA,ZJo,Kfe,eYo,oYo,hc,rYo,Zfe,tYo,aYo,ege,nYo,sYo,lYo,oge,iYo,dYo,HA,cYo,ho,UA,mYo,rge,fYo,gYo,pn,hYo,tge,uYo,pYo,age,_Yo,bYo,nge,vYo,TYo,FYo,B,uF,sge,CYo,MYo,Aq,EYo,yYo,wYo,pF,lge,AYo,LYo,Lq,BYo,xYo,kYo,_F,ige,RYo,SYo,Bq,PYo,$Yo,IYo,bF,dge,jYo,NYo,xq,DYo,qYo,GYo,vF,cge,OYo,XYo,kq,VYo,zYo,WYo,TF,mge,QYo,HYo,Rq,UYo,JYo,YYo,FF,fge,KYo,ZYo,Sq,eKo,oKo,rKo,CF,gge,tKo,aKo,Pq,nKo,sKo,lKo,MF,hge,iKo,dKo,$q,cKo,mKo,fKo,EF,uge,gKo,hKo,Iq,uKo,pKo,_Ko,yF,pge,bKo,vKo,jq,TKo,FKo,CKo,wF,_ge,MKo,EKo,Nq,yKo,wKo,AKo,AF,bge,LKo,BKo,Dq,xKo,kKo,RKo,LF,vge,SKo,PKo,qq,$Ko,IKo,jKo,BF,Tge,NKo,DKo,Gq,qKo,GKo,OKo,xF,Fge,XKo,VKo,Oq,zKo,WKo,QKo,Gs,Cge,HKo,UKo,Xq,JKo,YKo,Vq,KKo,ZKo,eZo,kF,Mge,oZo,rZo,zq,tZo,aZo,nZo,RF,Ege,sZo,lZo,Wq,iZo,dZo,cZo,SF,yge,mZo,fZo,Qq,gZo,hZo,uZo,PF,wge,pZo,_Zo,Hq,bZo,vZo,TZo,$F,Age,FZo,CZo,Uq,MZo,EZo,yZo,IF,Lge,wZo,AZo,Jq,LZo,BZo,xZo,jF,Bge,kZo,RZo,Yq,SZo,PZo,$Zo,NF,xge,IZo,jZo,Kq,NZo,DZo,qZo,DF,kge,GZo,OZo,Zq,XZo,VZo,zZo,qF,Rge,WZo,QZo,eG,HZo,UZo,JZo,GF,Sge,YZo,KZo,oG,ZZo,eer,oer,OF,Pge,rer,ter,rG,aer,ner,ser,XF,$ge,ler,ier,tG,der,cer,mer,VF,Ige,fer,ger,aG,her,uer,per,zF,jge,_er,ber,nG,ver,Ter,Fer,WF,Nge,Cer,Mer,sG,Eer,yer,wer,QF,Dge,Aer,Ler,lG,Ber,xer,ker,HF,qge,Rer,Ser,iG,Per,$er,Ier,UF,Gge,jer,Ner,dG,Der,qer,Ger,JF,Oge,Oer,Xer,cG,Ver,zer,Wer,YF,Xge,Qer,Her,mG,Uer,Jer,Yer,KF,Vge,Ker,Zer,fG,eor,oor,ror,ZF,zge,tor,aor,gG,nor,sor,lor,eC,Wge,ior,dor,hG,cor,mor,gor,oC,Qge,hor,uor,uG,por,_or,bor,rC,Hge,vor,Tor,pG,For,Cor,Mor,Uge,Eor,yor,JA,MRe,uc,tC,Jge,YA,wor,Yge,Aor,ERe,Tr,KA,Lor,pc,Bor,Kge,xor,kor,Zge,Ror,Sor,Por,ZA,$or,ehe,Ior,jor,Nor,ht,e0,Dor,ohe,qor,Gor,_c,Oor,rhe,Xor,Vor,the,zor,Wor,Qor,ahe,Hor,Uor,o0,Jor,uo,r0,Yor,nhe,Kor,Zor,_n,err,she,orr,rrr,lhe,trr,arr,ihe,nrr,srr,lrr,H,aC,dhe,irr,drr,_G,crr,mrr,frr,nC,che,grr,hrr,bG,urr,prr,_rr,sC,mhe,brr,vrr,vG,Trr,Frr,Crr,lC,fhe,Mrr,Err,TG,yrr,wrr,Arr,iC,ghe,Lrr,Brr,FG,xrr,krr,Rrr,dC,hhe,Srr,Prr,CG,$rr,Irr,jrr,cC,uhe,Nrr,Drr,MG,qrr,Grr,Orr,mC,phe,Xrr,Vrr,EG,zrr,Wrr,Qrr,fC,_he,Hrr,Urr,yG,Jrr,Yrr,Krr,gC,bhe,Zrr,etr,wG,otr,rtr,ttr,hC,vhe,atr,ntr,AG,str,ltr,itr,uC,The,dtr,ctr,LG,mtr,ftr,gtr,pC,Fhe,htr,utr,BG,ptr,_tr,btr,_C,Che,vtr,Ttr,xG,Ftr,Ctr,Mtr,bC,Mhe,Etr,ytr,kG,wtr,Atr,Ltr,vC,Ehe,Btr,xtr,RG,ktr,Rtr,Str,TC,yhe,Ptr,$tr,SG,Itr,jtr,Ntr,FC,whe,Dtr,qtr,PG,Gtr,Otr,Xtr,CC,Ahe,Vtr,ztr,$G,Wtr,Qtr,Htr,MC,Lhe,Utr,Jtr,IG,Ytr,Ktr,Ztr,EC,Bhe,ear,oar,jG,rar,tar,aar,yC,xhe,nar,sar,NG,lar,iar,dar,khe,car,mar,t0,yRe,bc,wC,Rhe,a0,far,She,gar,wRe,Fr,n0,har,vc,uar,Phe,par,_ar,$he,bar,Tar,Far,s0,Car,Ihe,Mar,Ear,yar,ut,l0,war,jhe,Aar,Lar,Tc,Bar,Nhe,xar,kar,Dhe,Rar,Sar,Par,qhe,$ar,Iar,i0,jar,po,d0,Nar,Ghe,Dar,qar,bn,Gar,Ohe,Oar,Xar,Xhe,Var,zar,Vhe,War,Qar,Har,ce,AC,zhe,Uar,Jar,DG,Yar,Kar,Zar,LC,Whe,enr,onr,qG,rnr,tnr,anr,BC,Qhe,nnr,snr,GG,lnr,inr,dnr,xC,Hhe,cnr,mnr,OG,fnr,gnr,hnr,kC,Uhe,unr,pnr,XG,_nr,bnr,vnr,RC,Jhe,Tnr,Fnr,VG,Cnr,Mnr,Enr,SC,Yhe,ynr,wnr,zG,Anr,Lnr,Bnr,PC,Khe,xnr,knr,WG,Rnr,Snr,Pnr,$C,Zhe,$nr,Inr,QG,jnr,Nnr,Dnr,IC,eue,qnr,Gnr,HG,Onr,Xnr,Vnr,jC,oue,znr,Wnr,UG,Qnr,Hnr,Unr,NC,rue,Jnr,Ynr,JG,Knr,Znr,esr,tue,osr,rsr,c0,ARe,Fc,DC,aue,m0,tsr,nue,asr,LRe,Cr,f0,nsr,Cc,ssr,sue,lsr,isr,lue,dsr,csr,msr,g0,fsr,iue,gsr,hsr,usr,pt,h0,psr,due,_sr,bsr,Mc,vsr,cue,Tsr,Fsr,mue,Csr,Msr,Esr,fue,ysr,wsr,u0,Asr,_o,p0,Lsr,gue,Bsr,xsr,vn,ksr,hue,Rsr,Ssr,uue,Psr,$sr,pue,Isr,jsr,Nsr,_0,qC,_ue,Dsr,qsr,YG,Gsr,Osr,Xsr,GC,bue,Vsr,zsr,KG,Wsr,Qsr,Hsr,vue,Usr,Jsr,b0,BRe,Ec,OC,Tue,v0,Ysr,Fue,Ksr,xRe,Mr,T0,Zsr,yc,elr,Cue,olr,rlr,Mue,tlr,alr,nlr,F0,slr,Eue,llr,ilr,dlr,_t,C0,clr,yue,mlr,flr,wc,glr,wue,hlr,ulr,Aue,plr,_lr,blr,Lue,vlr,Tlr,M0,Flr,bo,E0,Clr,Bue,Mlr,Elr,Tn,ylr,xue,wlr,Alr,kue,Llr,Blr,Rue,xlr,klr,Rlr,J,XC,Sue,Slr,Plr,ZG,$lr,Ilr,jlr,VC,Pue,Nlr,Dlr,eO,qlr,Glr,Olr,zC,$ue,Xlr,Vlr,oO,zlr,Wlr,Qlr,WC,Iue,Hlr,Ulr,rO,Jlr,Ylr,Klr,QC,jue,Zlr,eir,tO,oir,rir,tir,HC,Nue,air,nir,aO,sir,lir,iir,UC,Due,dir,cir,nO,mir,fir,gir,JC,que,hir,uir,sO,pir,_ir,bir,YC,Gue,vir,Tir,lO,Fir,Cir,Mir,KC,Oue,Eir,yir,iO,wir,Air,Lir,ZC,Xue,Bir,xir,dO,kir,Rir,Sir,eM,Vue,Pir,$ir,cO,Iir,jir,Nir,oM,zue,Dir,qir,mO,Gir,Oir,Xir,rM,Wue,Vir,zir,fO,Wir,Qir,Hir,tM,Que,Uir,Jir,gO,Yir,Kir,Zir,aM,Hue,edr,odr,hO,rdr,tdr,adr,nM,Uue,ndr,sdr,uO,ldr,idr,ddr,sM,Jue,cdr,mdr,pO,fdr,gdr,hdr,lM,Yue,udr,pdr,_O,_dr,bdr,vdr,iM,Kue,Tdr,Fdr,bO,Cdr,Mdr,Edr,Zue,ydr,wdr,y0,kRe,Ac,dM,epe,w0,Adr,ope,Ldr,RRe,Er,A0,Bdr,Lc,xdr,rpe,kdr,Rdr,tpe,Sdr,Pdr,$dr,L0,Idr,ape,jdr,Ndr,Ddr,bt,B0,qdr,npe,Gdr,Odr,Bc,Xdr,spe,Vdr,zdr,lpe,Wdr,Qdr,Hdr,ipe,Udr,Jdr,x0,Ydr,vo,k0,Kdr,dpe,Zdr,ecr,Fn,ocr,cpe,rcr,tcr,mpe,acr,ncr,fpe,scr,lcr,icr,_e,cM,gpe,dcr,ccr,vO,mcr,fcr,gcr,mM,hpe,hcr,ucr,TO,pcr,_cr,bcr,fM,upe,vcr,Tcr,FO,Fcr,Ccr,Mcr,gM,ppe,Ecr,ycr,CO,wcr,Acr,Lcr,hM,_pe,Bcr,xcr,MO,kcr,Rcr,Scr,uM,bpe,Pcr,$cr,EO,Icr,jcr,Ncr,pM,vpe,Dcr,qcr,yO,Gcr,Ocr,Xcr,_M,Tpe,Vcr,zcr,wO,Wcr,Qcr,Hcr,bM,Fpe,Ucr,Jcr,AO,Ycr,Kcr,Zcr,vM,Cpe,emr,omr,LO,rmr,tmr,amr,Mpe,nmr,smr,R0,SRe,xc,TM,Epe,S0,lmr,ype,imr,PRe,yr,P0,dmr,kc,cmr,wpe,mmr,fmr,Ape,gmr,hmr,umr,$0,pmr,Lpe,_mr,bmr,vmr,vt,I0,Tmr,Bpe,Fmr,Cmr,Rc,Mmr,xpe,Emr,ymr,kpe,wmr,Amr,Lmr,Rpe,Bmr,xmr,j0,kmr,To,N0,Rmr,Spe,Smr,Pmr,Cn,$mr,Ppe,Imr,jmr,$pe,Nmr,Dmr,Ipe,qmr,Gmr,Omr,X,FM,jpe,Xmr,Vmr,BO,zmr,Wmr,Qmr,CM,Npe,Hmr,Umr,xO,Jmr,Ymr,Kmr,MM,Dpe,Zmr,efr,kO,ofr,rfr,tfr,EM,qpe,afr,nfr,RO,sfr,lfr,ifr,yM,Gpe,dfr,cfr,SO,mfr,ffr,gfr,wM,Ope,hfr,ufr,PO,pfr,_fr,bfr,AM,Xpe,vfr,Tfr,$O,Ffr,Cfr,Mfr,LM,Vpe,Efr,yfr,IO,wfr,Afr,Lfr,BM,zpe,Bfr,xfr,jO,kfr,Rfr,Sfr,xM,Wpe,Pfr,$fr,NO,Ifr,jfr,Nfr,kM,Qpe,Dfr,qfr,DO,Gfr,Ofr,Xfr,RM,Hpe,Vfr,zfr,qO,Wfr,Qfr,Hfr,SM,Upe,Ufr,Jfr,GO,Yfr,Kfr,Zfr,PM,Jpe,egr,ogr,OO,rgr,tgr,agr,$M,Ype,ngr,sgr,XO,lgr,igr,dgr,IM,Kpe,cgr,mgr,VO,fgr,ggr,hgr,jM,Zpe,ugr,pgr,zO,_gr,bgr,vgr,NM,e_e,Tgr,Fgr,WO,Cgr,Mgr,Egr,DM,o_e,ygr,wgr,QO,Agr,Lgr,Bgr,qM,r_e,xgr,kgr,HO,Rgr,Sgr,Pgr,GM,t_e,$gr,Igr,UO,jgr,Ngr,Dgr,OM,a_e,qgr,Ggr,JO,Ogr,Xgr,Vgr,XM,n_e,zgr,Wgr,YO,Qgr,Hgr,Ugr,VM,s_e,Jgr,Ygr,KO,Kgr,Zgr,ehr,zM,l_e,ohr,rhr,ZO,thr,ahr,nhr,WM,i_e,shr,lhr,eX,ihr,dhr,chr,d_e,mhr,fhr,D0,$Re,Sc,QM,c_e,q0,ghr,m_e,hhr,IRe,wr,G0,uhr,Pc,phr,f_e,_hr,bhr,g_e,vhr,Thr,Fhr,O0,Chr,h_e,Mhr,Ehr,yhr,Tt,X0,whr,u_e,Ahr,Lhr,$c,Bhr,p_e,xhr,khr,__e,Rhr,Shr,Phr,b_e,$hr,Ihr,V0,jhr,Fo,z0,Nhr,v_e,Dhr,qhr,Mn,Ghr,T_e,Ohr,Xhr,F_e,Vhr,zhr,C_e,Whr,Qhr,Hhr,ae,HM,M_e,Uhr,Jhr,oX,Yhr,Khr,Zhr,UM,E_e,eur,our,rX,rur,tur,aur,JM,y_e,nur,sur,tX,lur,iur,dur,YM,w_e,cur,mur,aX,fur,gur,hur,KM,A_e,uur,pur,nX,_ur,bur,vur,ZM,L_e,Tur,Fur,sX,Cur,Mur,Eur,e4,B_e,yur,wur,lX,Aur,Lur,Bur,o4,x_e,xur,kur,iX,Rur,Sur,Pur,r4,k_e,$ur,Iur,dX,jur,Nur,Dur,t4,R_e,qur,Gur,cX,Our,Xur,Vur,a4,S_e,zur,Wur,mX,Qur,Hur,Uur,n4,P_e,Jur,Yur,fX,Kur,Zur,epr,s4,$_e,opr,rpr,gX,tpr,apr,npr,l4,I_e,spr,lpr,hX,ipr,dpr,cpr,i4,j_e,mpr,fpr,uX,gpr,hpr,upr,d4,N_e,ppr,_pr,pX,bpr,vpr,Tpr,c4,D_e,Fpr,Cpr,_X,Mpr,Epr,ypr,q_e,wpr,Apr,W0,jRe,Ic,m4,G_e,Q0,Lpr,O_e,Bpr,NRe,Ar,H0,xpr,jc,kpr,X_e,Rpr,Spr,V_e,Ppr,$pr,Ipr,U0,jpr,z_e,Npr,Dpr,qpr,Ft,J0,Gpr,W_e,Opr,Xpr,Nc,Vpr,Q_e,zpr,Wpr,H_e,Qpr,Hpr,Upr,U_e,Jpr,Ypr,Y0,Kpr,Co,K0,Zpr,J_e,e_r,o_r,En,r_r,Y_e,t_r,a_r,K_e,n_r,s_r,Z_e,l_r,i_r,d_r,ebe,f4,obe,c_r,m_r,bX,f_r,g_r,h_r,rbe,u_r,p_r,Z0,DRe,Dc,g4,tbe,eL,__r,abe,b_r,qRe,Lr,oL,v_r,qc,T_r,nbe,F_r,C_r,sbe,M_r,E_r,y_r,rL,w_r,lbe,A_r,L_r,B_r,Ct,tL,x_r,ibe,k_r,R_r,Gc,S_r,dbe,P_r,$_r,cbe,I_r,j_r,N_r,mbe,D_r,q_r,aL,G_r,Mo,nL,O_r,fbe,X_r,V_r,yn,z_r,gbe,W_r,Q_r,hbe,H_r,U_r,ube,J_r,Y_r,K_r,Y,h4,pbe,Z_r,ebr,vX,obr,rbr,tbr,u4,_be,abr,nbr,TX,sbr,lbr,ibr,p4,bbe,dbr,cbr,FX,mbr,fbr,gbr,_4,vbe,hbr,ubr,CX,pbr,_br,bbr,b4,Tbe,vbr,Tbr,MX,Fbr,Cbr,Mbr,v4,Fbe,Ebr,ybr,EX,wbr,Abr,Lbr,T4,Cbe,Bbr,xbr,yX,kbr,Rbr,Sbr,F4,Mbe,Pbr,$br,wX,Ibr,jbr,Nbr,C4,Ebe,Dbr,qbr,AX,Gbr,Obr,Xbr,M4,ybe,Vbr,zbr,LX,Wbr,Qbr,Hbr,E4,wbe,Ubr,Jbr,BX,Ybr,Kbr,Zbr,y4,Abe,e2r,o2r,xX,r2r,t2r,a2r,w4,Lbe,n2r,s2r,kX,l2r,i2r,d2r,A4,Bbe,c2r,m2r,RX,f2r,g2r,h2r,L4,xbe,u2r,p2r,SX,_2r,b2r,v2r,B4,kbe,T2r,F2r,PX,C2r,M2r,E2r,x4,Rbe,y2r,w2r,$X,A2r,L2r,B2r,k4,Sbe,x2r,k2r,IX,R2r,S2r,P2r,R4,Pbe,$2r,I2r,jX,j2r,N2r,D2r,S4,$be,q2r,G2r,NX,O2r,X2r,V2r,Ibe,z2r,W2r,sL,GRe,Oc,P4,jbe,lL,Q2r,Nbe,H2r,ORe,Br,iL,U2r,Xc,J2r,Dbe,Y2r,K2r,qbe,Z2r,evr,ovr,dL,rvr,Gbe,tvr,avr,nvr,Mt,cL,svr,Obe,lvr,ivr,Vc,dvr,Xbe,cvr,mvr,Vbe,fvr,gvr,hvr,zbe,uvr,pvr,mL,_vr,Eo,fL,bvr,Wbe,vvr,Tvr,wn,Fvr,Qbe,Cvr,Mvr,Hbe,Evr,yvr,Ube,wvr,Avr,Lvr,K,$4,Jbe,Bvr,xvr,DX,kvr,Rvr,Svr,I4,Ybe,Pvr,$vr,qX,Ivr,jvr,Nvr,j4,Kbe,Dvr,qvr,GX,Gvr,Ovr,Xvr,N4,Zbe,Vvr,zvr,OX,Wvr,Qvr,Hvr,D4,e2e,Uvr,Jvr,XX,Yvr,Kvr,Zvr,q4,o2e,eTr,oTr,VX,rTr,tTr,aTr,G4,r2e,nTr,sTr,zX,lTr,iTr,dTr,O4,t2e,cTr,mTr,WX,fTr,gTr,hTr,X4,a2e,uTr,pTr,QX,_Tr,bTr,vTr,V4,n2e,TTr,FTr,HX,CTr,MTr,ETr,z4,s2e,yTr,wTr,UX,ATr,LTr,BTr,W4,l2e,xTr,kTr,JX,RTr,STr,PTr,Q4,i2e,$Tr,ITr,YX,jTr,NTr,DTr,H4,d2e,qTr,GTr,KX,OTr,XTr,VTr,U4,c2e,zTr,WTr,ZX,QTr,HTr,UTr,J4,m2e,JTr,YTr,eV,KTr,ZTr,e1r,Y4,f2e,o1r,r1r,oV,t1r,a1r,n1r,K4,g2e,s1r,l1r,rV,i1r,d1r,c1r,Z4,h2e,m1r,f1r,tV,g1r,h1r,u1r,eE,u2e,p1r,_1r,aV,b1r,v1r,T1r,p2e,F1r,C1r,gL,XRe,zc,oE,_2e,hL,M1r,b2e,E1r,VRe,xr,uL,y1r,Wc,w1r,v2e,A1r,L1r,T2e,B1r,x1r,k1r,pL,R1r,F2e,S1r,P1r,$1r,Et,_L,I1r,C2e,j1r,N1r,Qc,D1r,M2e,q1r,G1r,E2e,O1r,X1r,V1r,y2e,z1r,W1r,bL,Q1r,yo,vL,H1r,w2e,U1r,J1r,An,Y1r,A2e,K1r,Z1r,L2e,eFr,oFr,B2e,rFr,tFr,aFr,x2e,rE,k2e,nFr,sFr,nV,lFr,iFr,dFr,R2e,cFr,mFr,TL,zRe,Hc,tE,S2e,FL,fFr,P2e,gFr,WRe,kr,CL,hFr,Uc,uFr,$2e,pFr,_Fr,I2e,bFr,vFr,TFr,ML,FFr,j2e,CFr,MFr,EFr,yt,EL,yFr,N2e,wFr,AFr,Jc,LFr,D2e,BFr,xFr,q2e,kFr,RFr,SFr,G2e,PFr,$Fr,yL,IFr,wo,wL,jFr,O2e,NFr,DFr,Ln,qFr,X2e,GFr,OFr,V2e,XFr,VFr,z2e,zFr,WFr,QFr,W2e,aE,Q2e,HFr,UFr,sV,JFr,YFr,KFr,H2e,ZFr,eCr,AL,QRe,Yc,nE,U2e,LL,oCr,J2e,rCr,HRe,Rr,BL,tCr,Kc,aCr,Y2e,nCr,sCr,K2e,lCr,iCr,dCr,xL,cCr,Z2e,mCr,fCr,gCr,wt,kL,hCr,eve,uCr,pCr,Zc,_Cr,ove,bCr,vCr,rve,TCr,FCr,CCr,tve,MCr,ECr,RL,yCr,Ao,SL,wCr,ave,ACr,LCr,Bn,BCr,nve,xCr,kCr,sve,RCr,SCr,lve,PCr,$Cr,ICr,z,sE,ive,jCr,NCr,lV,DCr,qCr,GCr,lE,dve,OCr,XCr,iV,VCr,zCr,WCr,iE,cve,QCr,HCr,dV,UCr,JCr,YCr,dE,mve,KCr,ZCr,cV,eMr,oMr,rMr,cE,fve,tMr,aMr,mV,nMr,sMr,lMr,mE,gve,iMr,dMr,fV,cMr,mMr,fMr,fE,hve,gMr,hMr,gV,uMr,pMr,_Mr,gE,uve,bMr,vMr,hV,TMr,FMr,CMr,hE,pve,MMr,EMr,uV,yMr,wMr,AMr,uE,_ve,LMr,BMr,pV,xMr,kMr,RMr,pE,bve,SMr,PMr,_V,$Mr,IMr,jMr,_E,vve,NMr,DMr,bV,qMr,GMr,OMr,bE,Tve,XMr,VMr,vV,zMr,WMr,QMr,vE,Fve,HMr,UMr,TV,JMr,YMr,KMr,TE,Cve,ZMr,e4r,FV,o4r,r4r,t4r,FE,Mve,a4r,n4r,CV,s4r,l4r,i4r,CE,Eve,d4r,c4r,MV,m4r,f4r,g4r,ME,yve,h4r,u4r,EV,p4r,_4r,b4r,EE,wve,v4r,T4r,yV,F4r,C4r,M4r,yE,Ave,E4r,y4r,wV,w4r,A4r,L4r,wE,Lve,B4r,x4r,AV,k4r,R4r,S4r,AE,Bve,P4r,$4r,LV,I4r,j4r,N4r,LE,xve,D4r,q4r,BV,G4r,O4r,X4r,BE,kve,V4r,z4r,xV,W4r,Q4r,H4r,xE,Rve,U4r,J4r,kV,Y4r,K4r,Z4r,Sve,eEr,oEr,PL,URe,em,kE,Pve,$L,rEr,$ve,tEr,JRe,Sr,IL,aEr,om,nEr,Ive,sEr,lEr,jve,iEr,dEr,cEr,jL,mEr,Nve,fEr,gEr,hEr,At,NL,uEr,Dve,pEr,_Er,rm,bEr,qve,vEr,TEr,Gve,FEr,CEr,MEr,Ove,EEr,yEr,DL,wEr,Lo,qL,AEr,Xve,LEr,BEr,xn,xEr,Vve,kEr,REr,zve,SEr,PEr,Wve,$Er,IEr,jEr,ca,RE,Qve,NEr,DEr,RV,qEr,GEr,OEr,SE,Hve,XEr,VEr,SV,zEr,WEr,QEr,PE,Uve,HEr,UEr,PV,JEr,YEr,KEr,$E,Jve,ZEr,e3r,$V,o3r,r3r,t3r,IE,Yve,a3r,n3r,IV,s3r,l3r,i3r,Kve,d3r,c3r,GL,YRe,tm,jE,Zve,OL,m3r,eTe,f3r,KRe,Pr,XL,g3r,am,h3r,oTe,u3r,p3r,rTe,_3r,b3r,v3r,VL,T3r,tTe,F3r,C3r,M3r,Lt,zL,E3r,aTe,y3r,w3r,nm,A3r,nTe,L3r,B3r,sTe,x3r,k3r,R3r,lTe,S3r,P3r,WL,$3r,Bo,QL,I3r,iTe,j3r,N3r,kn,D3r,dTe,q3r,G3r,cTe,O3r,X3r,mTe,V3r,z3r,W3r,me,NE,fTe,Q3r,H3r,jV,U3r,J3r,Y3r,DE,gTe,K3r,Z3r,NV,e5r,o5r,r5r,qE,hTe,t5r,a5r,DV,n5r,s5r,l5r,GE,uTe,i5r,d5r,qV,c5r,m5r,f5r,OE,pTe,g5r,h5r,GV,u5r,p5r,_5r,XE,_Te,b5r,v5r,OV,T5r,F5r,C5r,VE,bTe,M5r,E5r,XV,y5r,w5r,A5r,zE,vTe,L5r,B5r,VV,x5r,k5r,R5r,WE,TTe,S5r,P5r,zV,$5r,I5r,j5r,QE,FTe,N5r,D5r,WV,q5r,G5r,O5r,HE,CTe,X5r,V5r,QV,z5r,W5r,Q5r,UE,MTe,H5r,U5r,HV,J5r,Y5r,K5r,ETe,Z5r,eyr,HL,ZRe,sm,JE,yTe,UL,oyr,wTe,ryr,eSe,$r,JL,tyr,lm,ayr,ATe,nyr,syr,LTe,lyr,iyr,dyr,YL,cyr,BTe,myr,fyr,gyr,Bt,KL,hyr,xTe,uyr,pyr,im,_yr,kTe,byr,vyr,RTe,Tyr,Fyr,Cyr,STe,Myr,Eyr,ZL,yyr,xo,e7,wyr,PTe,Ayr,Lyr,Rn,Byr,$Te,xyr,kyr,ITe,Ryr,Syr,jTe,Pyr,$yr,Iyr,be,YE,NTe,jyr,Nyr,UV,Dyr,qyr,Gyr,KE,DTe,Oyr,Xyr,JV,Vyr,zyr,Wyr,ZE,qTe,Qyr,Hyr,YV,Uyr,Jyr,Yyr,e3,GTe,Kyr,Zyr,KV,ewr,owr,rwr,o3,OTe,twr,awr,ZV,nwr,swr,lwr,r3,XTe,iwr,dwr,ez,cwr,mwr,fwr,t3,VTe,gwr,hwr,oz,uwr,pwr,_wr,a3,zTe,bwr,vwr,rz,Twr,Fwr,Cwr,n3,WTe,Mwr,Ewr,tz,ywr,wwr,Awr,s3,QTe,Lwr,Bwr,az,xwr,kwr,Rwr,HTe,Swr,Pwr,o7,oSe,dm,l3,UTe,r7,$wr,JTe,Iwr,rSe,Ir,t7,jwr,cm,Nwr,YTe,Dwr,qwr,KTe,Gwr,Owr,Xwr,a7,Vwr,ZTe,zwr,Wwr,Qwr,xt,n7,Hwr,e1e,Uwr,Jwr,mm,Ywr,o1e,Kwr,Zwr,r1e,e6r,o6r,r6r,t1e,t6r,a6r,s7,n6r,ko,l7,s6r,a1e,l6r,i6r,Sn,d6r,n1e,c6r,m6r,s1e,f6r,g6r,l1e,h6r,u6r,p6r,Me,i3,i1e,_6r,b6r,nz,v6r,T6r,F6r,d3,d1e,C6r,M6r,sz,E6r,y6r,w6r,c3,c1e,A6r,L6r,lz,B6r,x6r,k6r,m3,m1e,R6r,S6r,iz,P6r,$6r,I6r,f3,f1e,j6r,N6r,dz,D6r,q6r,G6r,g3,g1e,O6r,X6r,cz,V6r,z6r,W6r,h3,h1e,Q6r,H6r,mz,U6r,J6r,Y6r,u3,u1e,K6r,Z6r,fz,eAr,oAr,rAr,p3,p1e,tAr,aAr,gz,nAr,sAr,lAr,_1e,iAr,dAr,i7,tSe,fm,_3,b1e,d7,cAr,v1e,mAr,aSe,jr,c7,fAr,gm,gAr,T1e,hAr,uAr,F1e,pAr,_Ar,bAr,m7,vAr,C1e,TAr,FAr,CAr,kt,f7,MAr,M1e,EAr,yAr,hm,wAr,E1e,AAr,LAr,y1e,BAr,xAr,kAr,w1e,RAr,SAr,g7,PAr,Ro,h7,$Ar,A1e,IAr,jAr,Pn,NAr,L1e,DAr,qAr,B1e,GAr,OAr,x1e,XAr,VAr,zAr,ve,b3,k1e,WAr,QAr,hz,HAr,UAr,JAr,v3,R1e,YAr,KAr,uz,ZAr,e0r,o0r,T3,S1e,r0r,t0r,pz,a0r,n0r,s0r,F3,P1e,l0r,i0r,_z,d0r,c0r,m0r,C3,$1e,f0r,g0r,bz,h0r,u0r,p0r,M3,I1e,_0r,b0r,vz,v0r,T0r,F0r,E3,j1e,C0r,M0r,Tz,E0r,y0r,w0r,y3,N1e,A0r,L0r,Fz,B0r,x0r,k0r,w3,D1e,R0r,S0r,Cz,P0r,$0r,I0r,A3,q1e,j0r,N0r,Mz,D0r,q0r,G0r,G1e,O0r,X0r,u7,nSe,um,L3,O1e,p7,V0r,X1e,z0r,sSe,Nr,_7,W0r,pm,Q0r,V1e,H0r,U0r,z1e,J0r,Y0r,K0r,b7,Z0r,W1e,eLr,oLr,rLr,Rt,v7,tLr,Q1e,aLr,nLr,_m,sLr,H1e,lLr,iLr,U1e,dLr,cLr,mLr,J1e,fLr,gLr,T7,hLr,So,F7,uLr,Y1e,pLr,_Lr,$n,bLr,K1e,vLr,TLr,Z1e,FLr,CLr,eFe,MLr,ELr,yLr,Te,B3,oFe,wLr,ALr,Ez,LLr,BLr,xLr,x3,rFe,kLr,RLr,yz,SLr,PLr,$Lr,k3,tFe,ILr,jLr,wz,NLr,DLr,qLr,R3,aFe,GLr,OLr,Az,XLr,VLr,zLr,S3,nFe,WLr,QLr,Lz,HLr,ULr,JLr,P3,sFe,YLr,KLr,Bz,ZLr,e7r,o7r,$3,lFe,r7r,t7r,xz,a7r,n7r,s7r,I3,iFe,l7r,i7r,kz,d7r,c7r,m7r,j3,dFe,f7r,g7r,Rz,h7r,u7r,p7r,N3,cFe,_7r,b7r,Sz,v7r,T7r,F7r,mFe,C7r,M7r,C7,lSe,bm,D3,fFe,M7,E7r,gFe,y7r,iSe,Dr,E7,w7r,vm,A7r,hFe,L7r,B7r,uFe,x7r,k7r,R7r,y7,S7r,pFe,P7r,$7r,I7r,St,w7,j7r,_Fe,N7r,D7r,Tm,q7r,bFe,G7r,O7r,vFe,X7r,V7r,z7r,TFe,W7r,Q7r,A7,H7r,Po,L7,U7r,FFe,J7r,Y7r,In,K7r,CFe,Z7r,e8r,MFe,o8r,r8r,EFe,t8r,a8r,n8r,Se,q3,yFe,s8r,l8r,Pz,i8r,d8r,c8r,G3,wFe,m8r,f8r,$z,g8r,h8r,u8r,O3,AFe,p8r,_8r,Iz,b8r,v8r,T8r,X3,LFe,F8r,C8r,jz,M8r,E8r,y8r,V3,BFe,w8r,A8r,Nz,L8r,B8r,x8r,z3,xFe,k8r,R8r,Dz,S8r,P8r,$8r,W3,kFe,I8r,j8r,qz,N8r,D8r,q8r,Q3,RFe,G8r,O8r,Gz,X8r,V8r,z8r,SFe,W8r,Q8r,B7,dSe,Fm,H3,PFe,x7,H8r,$Fe,U8r,cSe,qr,k7,J8r,Cm,Y8r,IFe,K8r,Z8r,jFe,e9r,o9r,r9r,R7,t9r,NFe,a9r,n9r,s9r,Pt,S7,l9r,DFe,i9r,d9r,Mm,c9r,qFe,m9r,f9r,GFe,g9r,h9r,u9r,OFe,p9r,_9r,P7,b9r,$o,$7,v9r,XFe,T9r,F9r,jn,C9r,VFe,M9r,E9r,zFe,y9r,w9r,WFe,A9r,L9r,B9r,Pe,U3,QFe,x9r,k9r,Oz,R9r,S9r,P9r,J3,HFe,$9r,I9r,Xz,j9r,N9r,D9r,Y3,UFe,q9r,G9r,Vz,O9r,X9r,V9r,K3,JFe,z9r,W9r,zz,Q9r,H9r,U9r,Z3,YFe,J9r,Y9r,Wz,K9r,Z9r,eBr,e5,KFe,oBr,rBr,Qz,tBr,aBr,nBr,o5,ZFe,sBr,lBr,Hz,iBr,dBr,cBr,r5,eCe,mBr,fBr,Uz,gBr,hBr,uBr,oCe,pBr,_Br,I7,mSe,Em,t5,rCe,j7,bBr,tCe,vBr,fSe,Gr,N7,TBr,ym,FBr,aCe,CBr,MBr,nCe,EBr,yBr,wBr,D7,ABr,sCe,LBr,BBr,xBr,$t,q7,kBr,lCe,RBr,SBr,wm,PBr,iCe,$Br,IBr,dCe,jBr,NBr,DBr,cCe,qBr,GBr,G7,OBr,Io,O7,XBr,mCe,VBr,zBr,Nn,WBr,fCe,QBr,HBr,gCe,UBr,JBr,hCe,YBr,KBr,ZBr,uCe,a5,pCe,exr,oxr,Jz,rxr,txr,axr,_Ce,nxr,sxr,X7,gSe,Am,n5,bCe,V7,lxr,vCe,ixr,hSe,Or,z7,dxr,Lm,cxr,TCe,mxr,fxr,FCe,gxr,hxr,uxr,W7,pxr,CCe,_xr,bxr,vxr,It,Q7,Txr,MCe,Fxr,Cxr,Bm,Mxr,ECe,Exr,yxr,yCe,wxr,Axr,Lxr,wCe,Bxr,xxr,H7,kxr,jo,U7,Rxr,ACe,Sxr,Pxr,Dn,$xr,LCe,Ixr,jxr,BCe,Nxr,Dxr,xCe,qxr,Gxr,Oxr,J7,s5,kCe,Xxr,Vxr,Yz,zxr,Wxr,Qxr,l5,RCe,Hxr,Uxr,Kz,Jxr,Yxr,Kxr,SCe,Zxr,ekr,Y7,uSe,xm,i5,PCe,K7,okr,$Ce,rkr,pSe,Xr,Z7,tkr,km,akr,ICe,nkr,skr,jCe,lkr,ikr,dkr,e8,ckr,NCe,mkr,fkr,gkr,jt,o8,hkr,DCe,ukr,pkr,Rm,_kr,qCe,bkr,vkr,GCe,Tkr,Fkr,Ckr,OCe,Mkr,Ekr,r8,ykr,No,t8,wkr,XCe,Akr,Lkr,qn,Bkr,VCe,xkr,kkr,zCe,Rkr,Skr,WCe,Pkr,$kr,Ikr,QCe,d5,HCe,jkr,Nkr,Zz,Dkr,qkr,Gkr,UCe,Okr,Xkr,a8,_Se;return fe=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),gy=new V({}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new Vkr({props:{warning:!0,$$slots:{default:[e3t]},$$scope:{ctx:Pm}}}),uy=new V({}),py=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L538"}}),vy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Fy=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),Cy=new V({}),My=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L351"}}),wy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),Ay=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Ly=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),By=new V({}),xy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),Sy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),xh=new Vkr({props:{$$slots:{default:[o3t]},$$scope:{ctx:Pm}}}),Py=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),$y=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Iy=new V({}),jy=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),qy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gh=new Vkr({props:{$$slots:{default:[r3t]},$$scope:{ctx:Pm}}}),Gy=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),Oy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Xy=new V({}),Vy=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L705"}}),Wy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Hy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new V({}),Yy=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L712"}}),Zy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new V({}),aw=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L727"}}),sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new V({}),mw=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L734"}}),gw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),uw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new V({}),bw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L741"}}),Tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new V({}),yw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),Aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new V({}),Rw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L784"}}),Pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new V({}),Dw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L791"}}),Gw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new V({}),Ww=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L777"}}),Hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new V({}),Zw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),o6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),t6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a6=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n6=new V({}),s6=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L766"}}),i6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),c6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new V({}),g6=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),u6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),_6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v6=new V({}),T6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),C6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),E6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new V({}),A6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),B6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),k6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new V({}),P6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),I6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),j6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),N6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new V({}),G6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),X6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),z6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new V({}),H6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),J6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),K6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new V({}),rA=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),aA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),nA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),sA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new V({}),dA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),mA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),gA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new V({}),pA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),bA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),vA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),TA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new V({}),MA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),yA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),wA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),AA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new V({}),xA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),RA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),SA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),PA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new V({}),NA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),qA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),OA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new V({}),zA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L379"}}),QA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),UA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new V({}),KA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L386"}}),e0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),r0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new V({}),n0=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),l0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),d0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new V({}),f0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),h0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),p0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new V({}),T0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L422"}}),C0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),E0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new V({}),A0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L429"}}),B0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),k0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new V({}),P0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),I0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),N0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new V({}),G0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L474"}}),X0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new V({}),H0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),J0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),K0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new V({}),oL=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L465"}}),tL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),nL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new V({}),iL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L447"}}),cL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),fL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new V({}),uL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),_L=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),vL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new V({}),CL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),EL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),wL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new V({}),BL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),kL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),SL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new V({}),IL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),NL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),DL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),qL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new V({}),XL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),zL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),QL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new V({}),JL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),KL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),e7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r7=new V({}),t7=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),n7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),s7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),l7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d7=new V({}),c7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),f7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),g7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),h7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new V({}),_7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),v7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),T7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),F7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M7=new V({}),E7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),w7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),A7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),L7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x7=new V({}),k7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),S7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),P7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),$7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j7=new V({}),N7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),G7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),O7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V7=new V({}),z7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Q7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),H7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),U7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K7=new V({}),Z7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),o8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),r8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),t8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),m(fe.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),$m=l(),ma=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),dy=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),cy=o("AutoConfig"),On=o(", "),Xn=a("a"),my=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),fy=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jm=l(),m(qa.$$.fragment),mo=l(),pe=a("p"),r9=o("will create a model that is an instance of "),Oi=a("a"),t9=o("BertModel"),a9=o("."),zo=l(),Ga=a("p"),n9=o("There is one class of "),Nm=a("code"),s9=o("AutoModel"),x$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pke=l(),Xi=a("h2"),Dm=a("a"),WQ=a("span"),m(gy.$$.fragment),k$e=l(),QQ=a("span"),R$e=o("Extending the Auto Classes"),_ke=l(),zn=a("p"),S$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=a("code"),P$e=o("NewModel"),$$e=o(", make sure you have a "),UQ=a("code"),I$e=o("NewModelConfig"),j$e=o(` then you can add those to the auto
classes like this:`),bke=l(),m(hy.$$.fragment),vke=l(),l9=a("p"),N$e=o("You will then be able to use the auto classes like you would usually do!"),Tke=l(),m(qm.$$.fragment),Fke=l(),Vi=a("h2"),Gm=a("a"),JQ=a("span"),m(uy.$$.fragment),D$e=l(),YQ=a("span"),q$e=o("AutoConfig"),Cke=l(),Wo=a("div"),m(py.$$.fragment),G$e=l(),_y=a("p"),O$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=a("a"),X$e=o("from_pretrained()"),V$e=o(" class method."),z$e=l(),by=a("p"),W$e=o("This class cannot be instantiated directly using "),KQ=a("code"),Q$e=o("__init__()"),H$e=o(" (throws an error)."),U$e=l(),fo=a("div"),m(vy.$$.fragment),J$e=l(),ZQ=a("p"),Y$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),K$e=l(),zi=a("p"),Z$e=o("The configuration class to instantiate is selected based on the "),eH=a("code"),eIe=o("model_type"),oIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=a("code"),rIe=o("pretrained_model_name_or_path"),tIe=o(":"),aIe=l(),v=a("ul"),Om=a("li"),rH=a("strong"),nIe=o("albert"),sIe=o(" \u2014 "),d9=a("a"),lIe=o("AlbertConfig"),iIe=o(" (ALBERT model)"),dIe=l(),Xm=a("li"),tH=a("strong"),cIe=o("bart"),mIe=o(" \u2014 "),c9=a("a"),fIe=o("BartConfig"),gIe=o(" (BART model)"),hIe=l(),Vm=a("li"),aH=a("strong"),uIe=o("beit"),pIe=o(" \u2014 "),m9=a("a"),_Ie=o("BeitConfig"),bIe=o(" (BEiT model)"),vIe=l(),zm=a("li"),nH=a("strong"),TIe=o("bert"),FIe=o(" \u2014 "),f9=a("a"),CIe=o("BertConfig"),MIe=o(" (BERT model)"),EIe=l(),Wm=a("li"),sH=a("strong"),yIe=o("bert-generation"),wIe=o(" \u2014 "),g9=a("a"),AIe=o("BertGenerationConfig"),LIe=o(" (Bert Generation model)"),BIe=l(),Qm=a("li"),lH=a("strong"),xIe=o("big_bird"),kIe=o(" \u2014 "),h9=a("a"),RIe=o("BigBirdConfig"),SIe=o(" (BigBird model)"),PIe=l(),Hm=a("li"),iH=a("strong"),$Ie=o("bigbird_pegasus"),IIe=o(" \u2014 "),u9=a("a"),jIe=o("BigBirdPegasusConfig"),NIe=o(" (BigBirdPegasus model)"),DIe=l(),Um=a("li"),dH=a("strong"),qIe=o("blenderbot"),GIe=o(" \u2014 "),p9=a("a"),OIe=o("BlenderbotConfig"),XIe=o(" (Blenderbot model)"),VIe=l(),Jm=a("li"),cH=a("strong"),zIe=o("blenderbot-small"),WIe=o(" \u2014 "),_9=a("a"),QIe=o("BlenderbotSmallConfig"),HIe=o(" (BlenderbotSmall model)"),UIe=l(),Ym=a("li"),mH=a("strong"),JIe=o("camembert"),YIe=o(" \u2014 "),b9=a("a"),KIe=o("CamembertConfig"),ZIe=o(" (CamemBERT model)"),eje=l(),Km=a("li"),fH=a("strong"),oje=o("canine"),rje=o(" \u2014 "),v9=a("a"),tje=o("CanineConfig"),aje=o(" (Canine model)"),nje=l(),Zm=a("li"),gH=a("strong"),sje=o("clip"),lje=o(" \u2014 "),T9=a("a"),ije=o("CLIPConfig"),dje=o(" (CLIP model)"),cje=l(),ef=a("li"),hH=a("strong"),mje=o("convbert"),fje=o(" \u2014 "),F9=a("a"),gje=o("ConvBertConfig"),hje=o(" (ConvBERT model)"),uje=l(),of=a("li"),uH=a("strong"),pje=o("convnext"),_je=o(" \u2014 "),C9=a("a"),bje=o("ConvNextConfig"),vje=o(" (ConvNext model)"),Tje=l(),rf=a("li"),pH=a("strong"),Fje=o("ctrl"),Cje=o(" \u2014 "),M9=a("a"),Mje=o("CTRLConfig"),Eje=o(" (CTRL model)"),yje=l(),tf=a("li"),_H=a("strong"),wje=o("data2vec-audio"),Aje=o(" \u2014 "),E9=a("a"),Lje=o("Data2VecAudioConfig"),Bje=o(" (Data2VecAudio model)"),xje=l(),af=a("li"),bH=a("strong"),kje=o("data2vec-text"),Rje=o(" \u2014 "),y9=a("a"),Sje=o("Data2VecTextConfig"),Pje=o(" (Data2VecText model)"),$je=l(),nf=a("li"),vH=a("strong"),Ije=o("deberta"),jje=o(" \u2014 "),w9=a("a"),Nje=o("DebertaConfig"),Dje=o(" (DeBERTa model)"),qje=l(),sf=a("li"),TH=a("strong"),Gje=o("deberta-v2"),Oje=o(" \u2014 "),A9=a("a"),Xje=o("DebertaV2Config"),Vje=o(" (DeBERTa-v2 model)"),zje=l(),lf=a("li"),FH=a("strong"),Wje=o("decision_transformer"),Qje=o(" \u2014 "),L9=a("a"),Hje=o("DecisionTransformerConfig"),Uje=o(" (Decision Transformer model)"),Jje=l(),df=a("li"),CH=a("strong"),Yje=o("deit"),Kje=o(" \u2014 "),B9=a("a"),Zje=o("DeiTConfig"),eNe=o(" (DeiT model)"),oNe=l(),cf=a("li"),MH=a("strong"),rNe=o("detr"),tNe=o(" \u2014 "),x9=a("a"),aNe=o("DetrConfig"),nNe=o(" (DETR model)"),sNe=l(),mf=a("li"),EH=a("strong"),lNe=o("distilbert"),iNe=o(" \u2014 "),k9=a("a"),dNe=o("DistilBertConfig"),cNe=o(" (DistilBERT model)"),mNe=l(),ff=a("li"),yH=a("strong"),fNe=o("dpr"),gNe=o(" \u2014 "),R9=a("a"),hNe=o("DPRConfig"),uNe=o(" (DPR model)"),pNe=l(),gf=a("li"),wH=a("strong"),_Ne=o("electra"),bNe=o(" \u2014 "),S9=a("a"),vNe=o("ElectraConfig"),TNe=o(" (ELECTRA model)"),FNe=l(),hf=a("li"),AH=a("strong"),CNe=o("encoder-decoder"),MNe=o(" \u2014 "),P9=a("a"),ENe=o("EncoderDecoderConfig"),yNe=o(" (Encoder decoder model)"),wNe=l(),uf=a("li"),LH=a("strong"),ANe=o("flaubert"),LNe=o(" \u2014 "),$9=a("a"),BNe=o("FlaubertConfig"),xNe=o(" (FlauBERT model)"),kNe=l(),pf=a("li"),BH=a("strong"),RNe=o("fnet"),SNe=o(" \u2014 "),I9=a("a"),PNe=o("FNetConfig"),$Ne=o(" (FNet model)"),INe=l(),_f=a("li"),xH=a("strong"),jNe=o("fsmt"),NNe=o(" \u2014 "),j9=a("a"),DNe=o("FSMTConfig"),qNe=o(" (FairSeq Machine-Translation model)"),GNe=l(),bf=a("li"),kH=a("strong"),ONe=o("funnel"),XNe=o(" \u2014 "),N9=a("a"),VNe=o("FunnelConfig"),zNe=o(" (Funnel Transformer model)"),WNe=l(),vf=a("li"),RH=a("strong"),QNe=o("glpn"),HNe=o(" \u2014 "),D9=a("a"),UNe=o("GLPNConfig"),JNe=o(" (GLPN model)"),YNe=l(),Tf=a("li"),SH=a("strong"),KNe=o("gpt2"),ZNe=o(" \u2014 "),q9=a("a"),eDe=o("GPT2Config"),oDe=o(" (OpenAI GPT-2 model)"),rDe=l(),Ff=a("li"),PH=a("strong"),tDe=o("gpt_neo"),aDe=o(" \u2014 "),G9=a("a"),nDe=o("GPTNeoConfig"),sDe=o(" (GPT Neo model)"),lDe=l(),Cf=a("li"),$H=a("strong"),iDe=o("gptj"),dDe=o(" \u2014 "),O9=a("a"),cDe=o("GPTJConfig"),mDe=o(" (GPT-J model)"),fDe=l(),Mf=a("li"),IH=a("strong"),gDe=o("hubert"),hDe=o(" \u2014 "),X9=a("a"),uDe=o("HubertConfig"),pDe=o(" (Hubert model)"),_De=l(),Ef=a("li"),jH=a("strong"),bDe=o("ibert"),vDe=o(" \u2014 "),V9=a("a"),TDe=o("IBertConfig"),FDe=o(" (I-BERT model)"),CDe=l(),yf=a("li"),NH=a("strong"),MDe=o("imagegpt"),EDe=o(" \u2014 "),z9=a("a"),yDe=o("ImageGPTConfig"),wDe=o(" (ImageGPT model)"),ADe=l(),wf=a("li"),DH=a("strong"),LDe=o("layoutlm"),BDe=o(" \u2014 "),W9=a("a"),xDe=o("LayoutLMConfig"),kDe=o(" (LayoutLM model)"),RDe=l(),Af=a("li"),qH=a("strong"),SDe=o("layoutlmv2"),PDe=o(" \u2014 "),Q9=a("a"),$De=o("LayoutLMv2Config"),IDe=o(" (LayoutLMv2 model)"),jDe=l(),Lf=a("li"),GH=a("strong"),NDe=o("led"),DDe=o(" \u2014 "),H9=a("a"),qDe=o("LEDConfig"),GDe=o(" (LED model)"),ODe=l(),Bf=a("li"),OH=a("strong"),XDe=o("longformer"),VDe=o(" \u2014 "),U9=a("a"),zDe=o("LongformerConfig"),WDe=o(" (Longformer model)"),QDe=l(),xf=a("li"),XH=a("strong"),HDe=o("luke"),UDe=o(" \u2014 "),J9=a("a"),JDe=o("LukeConfig"),YDe=o(" (LUKE model)"),KDe=l(),kf=a("li"),VH=a("strong"),ZDe=o("lxmert"),eqe=o(" \u2014 "),Y9=a("a"),oqe=o("LxmertConfig"),rqe=o(" (LXMERT model)"),tqe=l(),Rf=a("li"),zH=a("strong"),aqe=o("m2m_100"),nqe=o(" \u2014 "),K9=a("a"),sqe=o("M2M100Config"),lqe=o(" (M2M100 model)"),iqe=l(),Sf=a("li"),WH=a("strong"),dqe=o("marian"),cqe=o(" \u2014 "),Z9=a("a"),mqe=o("MarianConfig"),fqe=o(" (Marian model)"),gqe=l(),Pf=a("li"),QH=a("strong"),hqe=o("maskformer"),uqe=o(" \u2014 "),eB=a("a"),pqe=o("MaskFormerConfig"),_qe=o(" (MaskFormer model)"),bqe=l(),$f=a("li"),HH=a("strong"),vqe=o("mbart"),Tqe=o(" \u2014 "),oB=a("a"),Fqe=o("MBartConfig"),Cqe=o(" (mBART model)"),Mqe=l(),If=a("li"),UH=a("strong"),Eqe=o("megatron-bert"),yqe=o(" \u2014 "),rB=a("a"),wqe=o("MegatronBertConfig"),Aqe=o(" (MegatronBert model)"),Lqe=l(),jf=a("li"),JH=a("strong"),Bqe=o("mobilebert"),xqe=o(" \u2014 "),tB=a("a"),kqe=o("MobileBertConfig"),Rqe=o(" (MobileBERT model)"),Sqe=l(),Nf=a("li"),YH=a("strong"),Pqe=o("mpnet"),$qe=o(" \u2014 "),aB=a("a"),Iqe=o("MPNetConfig"),jqe=o(" (MPNet model)"),Nqe=l(),Df=a("li"),KH=a("strong"),Dqe=o("mt5"),qqe=o(" \u2014 "),nB=a("a"),Gqe=o("MT5Config"),Oqe=o(" (mT5 model)"),Xqe=l(),qf=a("li"),ZH=a("strong"),Vqe=o("nystromformer"),zqe=o(" \u2014 "),sB=a("a"),Wqe=o("NystromformerConfig"),Qqe=o(" (Nystromformer model)"),Hqe=l(),Gf=a("li"),eU=a("strong"),Uqe=o("openai-gpt"),Jqe=o(" \u2014 "),lB=a("a"),Yqe=o("OpenAIGPTConfig"),Kqe=o(" (OpenAI GPT model)"),Zqe=l(),Of=a("li"),oU=a("strong"),eGe=o("pegasus"),oGe=o(" \u2014 "),iB=a("a"),rGe=o("PegasusConfig"),tGe=o(" (Pegasus model)"),aGe=l(),Xf=a("li"),rU=a("strong"),nGe=o("perceiver"),sGe=o(" \u2014 "),dB=a("a"),lGe=o("PerceiverConfig"),iGe=o(" (Perceiver model)"),dGe=l(),Vf=a("li"),tU=a("strong"),cGe=o("plbart"),mGe=o(" \u2014 "),cB=a("a"),fGe=o("PLBartConfig"),gGe=o(" (PLBart model)"),hGe=l(),zf=a("li"),aU=a("strong"),uGe=o("poolformer"),pGe=o(" \u2014 "),mB=a("a"),_Ge=o("PoolFormerConfig"),bGe=o(" (PoolFormer model)"),vGe=l(),Wf=a("li"),nU=a("strong"),TGe=o("prophetnet"),FGe=o(" \u2014 "),fB=a("a"),CGe=o("ProphetNetConfig"),MGe=o(" (ProphetNet model)"),EGe=l(),Qf=a("li"),sU=a("strong"),yGe=o("qdqbert"),wGe=o(" \u2014 "),gB=a("a"),AGe=o("QDQBertConfig"),LGe=o(" (QDQBert model)"),BGe=l(),Hf=a("li"),lU=a("strong"),xGe=o("rag"),kGe=o(" \u2014 "),hB=a("a"),RGe=o("RagConfig"),SGe=o(" (RAG model)"),PGe=l(),Uf=a("li"),iU=a("strong"),$Ge=o("realm"),IGe=o(" \u2014 "),uB=a("a"),jGe=o("RealmConfig"),NGe=o(" (Realm model)"),DGe=l(),Jf=a("li"),dU=a("strong"),qGe=o("reformer"),GGe=o(" \u2014 "),pB=a("a"),OGe=o("ReformerConfig"),XGe=o(" (Reformer model)"),VGe=l(),Yf=a("li"),cU=a("strong"),zGe=o("rembert"),WGe=o(" \u2014 "),_B=a("a"),QGe=o("RemBertConfig"),HGe=o(" (RemBERT model)"),UGe=l(),Kf=a("li"),mU=a("strong"),JGe=o("resnet"),YGe=o(" \u2014 "),bB=a("a"),KGe=o("ResNetConfig"),ZGe=o(" (ResNet model)"),eOe=l(),Zf=a("li"),fU=a("strong"),oOe=o("retribert"),rOe=o(" \u2014 "),vB=a("a"),tOe=o("RetriBertConfig"),aOe=o(" (RetriBERT model)"),nOe=l(),eg=a("li"),gU=a("strong"),sOe=o("roberta"),lOe=o(" \u2014 "),TB=a("a"),iOe=o("RobertaConfig"),dOe=o(" (RoBERTa model)"),cOe=l(),og=a("li"),hU=a("strong"),mOe=o("roformer"),fOe=o(" \u2014 "),FB=a("a"),gOe=o("RoFormerConfig"),hOe=o(" (RoFormer model)"),uOe=l(),rg=a("li"),uU=a("strong"),pOe=o("segformer"),_Oe=o(" \u2014 "),CB=a("a"),bOe=o("SegformerConfig"),vOe=o(" (SegFormer model)"),TOe=l(),tg=a("li"),pU=a("strong"),FOe=o("sew"),COe=o(" \u2014 "),MB=a("a"),MOe=o("SEWConfig"),EOe=o(" (SEW model)"),yOe=l(),ag=a("li"),_U=a("strong"),wOe=o("sew-d"),AOe=o(" \u2014 "),EB=a("a"),LOe=o("SEWDConfig"),BOe=o(" (SEW-D model)"),xOe=l(),ng=a("li"),bU=a("strong"),kOe=o("speech-encoder-decoder"),ROe=o(" \u2014 "),yB=a("a"),SOe=o("SpeechEncoderDecoderConfig"),POe=o(" (Speech Encoder decoder model)"),$Oe=l(),sg=a("li"),vU=a("strong"),IOe=o("speech_to_text"),jOe=o(" \u2014 "),wB=a("a"),NOe=o("Speech2TextConfig"),DOe=o(" (Speech2Text model)"),qOe=l(),lg=a("li"),TU=a("strong"),GOe=o("speech_to_text_2"),OOe=o(" \u2014 "),AB=a("a"),XOe=o("Speech2Text2Config"),VOe=o(" (Speech2Text2 model)"),zOe=l(),ig=a("li"),FU=a("strong"),WOe=o("splinter"),QOe=o(" \u2014 "),LB=a("a"),HOe=o("SplinterConfig"),UOe=o(" (Splinter model)"),JOe=l(),dg=a("li"),CU=a("strong"),YOe=o("squeezebert"),KOe=o(" \u2014 "),BB=a("a"),ZOe=o("SqueezeBertConfig"),eXe=o(" (SqueezeBERT model)"),oXe=l(),cg=a("li"),MU=a("strong"),rXe=o("swin"),tXe=o(" \u2014 "),xB=a("a"),aXe=o("SwinConfig"),nXe=o(" (Swin model)"),sXe=l(),mg=a("li"),EU=a("strong"),lXe=o("t5"),iXe=o(" \u2014 "),kB=a("a"),dXe=o("T5Config"),cXe=o(" (T5 model)"),mXe=l(),fg=a("li"),yU=a("strong"),fXe=o("tapas"),gXe=o(" \u2014 "),RB=a("a"),hXe=o("TapasConfig"),uXe=o(" (TAPAS model)"),pXe=l(),gg=a("li"),wU=a("strong"),_Xe=o("transfo-xl"),bXe=o(" \u2014 "),SB=a("a"),vXe=o("TransfoXLConfig"),TXe=o(" (Transformer-XL model)"),FXe=l(),hg=a("li"),AU=a("strong"),CXe=o("trocr"),MXe=o(" \u2014 "),PB=a("a"),EXe=o("TrOCRConfig"),yXe=o(" (TrOCR model)"),wXe=l(),ug=a("li"),LU=a("strong"),AXe=o("unispeech"),LXe=o(" \u2014 "),$B=a("a"),BXe=o("UniSpeechConfig"),xXe=o(" (UniSpeech model)"),kXe=l(),pg=a("li"),BU=a("strong"),RXe=o("unispeech-sat"),SXe=o(" \u2014 "),IB=a("a"),PXe=o("UniSpeechSatConfig"),$Xe=o(" (UniSpeechSat model)"),IXe=l(),_g=a("li"),xU=a("strong"),jXe=o("van"),NXe=o(" \u2014 "),jB=a("a"),DXe=o("VanConfig"),qXe=o(" (VAN model)"),GXe=l(),bg=a("li"),kU=a("strong"),OXe=o("vilt"),XXe=o(" \u2014 "),NB=a("a"),VXe=o("ViltConfig"),zXe=o(" (ViLT model)"),WXe=l(),vg=a("li"),RU=a("strong"),QXe=o("vision-encoder-decoder"),HXe=o(" \u2014 "),DB=a("a"),UXe=o("VisionEncoderDecoderConfig"),JXe=o(" (Vision Encoder decoder model)"),YXe=l(),Tg=a("li"),SU=a("strong"),KXe=o("vision-text-dual-encoder"),ZXe=o(" \u2014 "),qB=a("a"),eVe=o("VisionTextDualEncoderConfig"),oVe=o(" (VisionTextDualEncoder model)"),rVe=l(),Fg=a("li"),PU=a("strong"),tVe=o("visual_bert"),aVe=o(" \u2014 "),GB=a("a"),nVe=o("VisualBertConfig"),sVe=o(" (VisualBert model)"),lVe=l(),Cg=a("li"),$U=a("strong"),iVe=o("vit"),dVe=o(" \u2014 "),OB=a("a"),cVe=o("ViTConfig"),mVe=o(" (ViT model)"),fVe=l(),Mg=a("li"),IU=a("strong"),gVe=o("vit_mae"),hVe=o(" \u2014 "),XB=a("a"),uVe=o("ViTMAEConfig"),pVe=o(" (ViTMAE model)"),_Ve=l(),Eg=a("li"),jU=a("strong"),bVe=o("wav2vec2"),vVe=o(" \u2014 "),VB=a("a"),TVe=o("Wav2Vec2Config"),FVe=o(" (Wav2Vec2 model)"),CVe=l(),yg=a("li"),NU=a("strong"),MVe=o("wavlm"),EVe=o(" \u2014 "),zB=a("a"),yVe=o("WavLMConfig"),wVe=o(" (WavLM model)"),AVe=l(),wg=a("li"),DU=a("strong"),LVe=o("xglm"),BVe=o(" \u2014 "),WB=a("a"),xVe=o("XGLMConfig"),kVe=o(" (XGLM model)"),RVe=l(),Ag=a("li"),qU=a("strong"),SVe=o("xlm"),PVe=o(" \u2014 "),QB=a("a"),$Ve=o("XLMConfig"),IVe=o(" (XLM model)"),jVe=l(),Lg=a("li"),GU=a("strong"),NVe=o("xlm-prophetnet"),DVe=o(" \u2014 "),HB=a("a"),qVe=o("XLMProphetNetConfig"),GVe=o(" (XLMProphetNet model)"),OVe=l(),Bg=a("li"),OU=a("strong"),XVe=o("xlm-roberta"),VVe=o(" \u2014 "),UB=a("a"),zVe=o("XLMRobertaConfig"),WVe=o(" (XLM-RoBERTa model)"),QVe=l(),xg=a("li"),XU=a("strong"),HVe=o("xlm-roberta-xl"),UVe=o(" \u2014 "),JB=a("a"),JVe=o("XLMRobertaXLConfig"),YVe=o(" (XLM-RoBERTa-XL model)"),KVe=l(),kg=a("li"),VU=a("strong"),ZVe=o("xlnet"),eze=o(" \u2014 "),YB=a("a"),oze=o("XLNetConfig"),rze=o(" (XLNet model)"),tze=l(),Rg=a("li"),zU=a("strong"),aze=o("yoso"),nze=o(" \u2014 "),KB=a("a"),sze=o("YosoConfig"),lze=o(" (YOSO model)"),ize=l(),WU=a("p"),dze=o("Examples:"),cze=l(),m(Ty.$$.fragment),mze=l(),Sg=a("div"),m(Fy.$$.fragment),fze=l(),QU=a("p"),gze=o("Register a new configuration for this class."),Mke=l(),Wi=a("h2"),Pg=a("a"),HU=a("span"),m(Cy.$$.fragment),hze=l(),UU=a("span"),uze=o("AutoTokenizer"),Eke=l(),Qo=a("div"),m(My.$$.fragment),pze=l(),Ey=a("p"),_ze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=a("a"),bze=o("AutoTokenizer.from_pretrained()"),vze=o(" class method."),Tze=l(),yy=a("p"),Fze=o("This class cannot be instantiated directly using "),JU=a("code"),Cze=o("__init__()"),Mze=o(" (throws an error)."),Eze=l(),go=a("div"),m(wy.$$.fragment),yze=l(),YU=a("p"),wze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Aze=l(),Oa=a("p"),Lze=o("The tokenizer class to instantiate is selected based on the "),KU=a("code"),Bze=o("model_type"),xze=o(` property of the config object (either
passed as an argument or loaded from `),ZU=a("code"),kze=o("pretrained_model_name_or_path"),Rze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=a("code"),Sze=o("pretrained_model_name_or_path"),Pze=o(":"),$ze=l(),E=a("ul"),Wn=a("li"),oJ=a("strong"),Ize=o("albert"),jze=o(" \u2014 "),ex=a("a"),Nze=o("AlbertTokenizer"),Dze=o(" or "),ox=a("a"),qze=o("AlbertTokenizerFast"),Gze=o(" (ALBERT model)"),Oze=l(),Qn=a("li"),rJ=a("strong"),Xze=o("bart"),Vze=o(" \u2014 "),rx=a("a"),zze=o("BartTokenizer"),Wze=o(" or "),tx=a("a"),Qze=o("BartTokenizerFast"),Hze=o(" (BART model)"),Uze=l(),Hn=a("li"),tJ=a("strong"),Jze=o("barthez"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BarthezTokenizer"),Zze=o(" or "),nx=a("a"),eWe=o("BarthezTokenizerFast"),oWe=o(" (BARThez model)"),rWe=l(),$g=a("li"),aJ=a("strong"),tWe=o("bartpho"),aWe=o(" \u2014 "),sx=a("a"),nWe=o("BartphoTokenizer"),sWe=o(" (BARTpho model)"),lWe=l(),Un=a("li"),nJ=a("strong"),iWe=o("bert"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("BertTokenizer"),mWe=o(" or "),ix=a("a"),fWe=o("BertTokenizerFast"),gWe=o(" (BERT model)"),hWe=l(),Ig=a("li"),sJ=a("strong"),uWe=o("bert-generation"),pWe=o(" \u2014 "),dx=a("a"),_We=o("BertGenerationTokenizer"),bWe=o(" (Bert Generation model)"),vWe=l(),jg=a("li"),lJ=a("strong"),TWe=o("bert-japanese"),FWe=o(" \u2014 "),cx=a("a"),CWe=o("BertJapaneseTokenizer"),MWe=o(" (BertJapanese model)"),EWe=l(),Ng=a("li"),iJ=a("strong"),yWe=o("bertweet"),wWe=o(" \u2014 "),mx=a("a"),AWe=o("BertweetTokenizer"),LWe=o(" (Bertweet model)"),BWe=l(),Jn=a("li"),dJ=a("strong"),xWe=o("big_bird"),kWe=o(" \u2014 "),fx=a("a"),RWe=o("BigBirdTokenizer"),SWe=o(" or "),gx=a("a"),PWe=o("BigBirdTokenizerFast"),$We=o(" (BigBird model)"),IWe=l(),Yn=a("li"),cJ=a("strong"),jWe=o("bigbird_pegasus"),NWe=o(" \u2014 "),hx=a("a"),DWe=o("PegasusTokenizer"),qWe=o(" or "),ux=a("a"),GWe=o("PegasusTokenizerFast"),OWe=o(" (BigBirdPegasus model)"),XWe=l(),Kn=a("li"),mJ=a("strong"),VWe=o("blenderbot"),zWe=o(" \u2014 "),px=a("a"),WWe=o("BlenderbotTokenizer"),QWe=o(" or "),_x=a("a"),HWe=o("BlenderbotTokenizerFast"),UWe=o(" (Blenderbot model)"),JWe=l(),Dg=a("li"),fJ=a("strong"),YWe=o("blenderbot-small"),KWe=o(" \u2014 "),bx=a("a"),ZWe=o("BlenderbotSmallTokenizer"),eQe=o(" (BlenderbotSmall model)"),oQe=l(),qg=a("li"),gJ=a("strong"),rQe=o("byt5"),tQe=o(" \u2014 "),vx=a("a"),aQe=o("ByT5Tokenizer"),nQe=o(" (ByT5 model)"),sQe=l(),Zn=a("li"),hJ=a("strong"),lQe=o("camembert"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("CamembertTokenizer"),cQe=o(" or "),Fx=a("a"),mQe=o("CamembertTokenizerFast"),fQe=o(" (CamemBERT model)"),gQe=l(),Gg=a("li"),uJ=a("strong"),hQe=o("canine"),uQe=o(" \u2014 "),Cx=a("a"),pQe=o("CanineTokenizer"),_Qe=o(" (Canine model)"),bQe=l(),es=a("li"),pJ=a("strong"),vQe=o("clip"),TQe=o(" \u2014 "),Mx=a("a"),FQe=o("CLIPTokenizer"),CQe=o(" or "),Ex=a("a"),MQe=o("CLIPTokenizerFast"),EQe=o(" (CLIP model)"),yQe=l(),os=a("li"),_J=a("strong"),wQe=o("convbert"),AQe=o(" \u2014 "),yx=a("a"),LQe=o("ConvBertTokenizer"),BQe=o(" or "),wx=a("a"),xQe=o("ConvBertTokenizerFast"),kQe=o(" (ConvBERT model)"),RQe=l(),rs=a("li"),bJ=a("strong"),SQe=o("cpm"),PQe=o(" \u2014 "),Ax=a("a"),$Qe=o("CpmTokenizer"),IQe=o(" or "),vJ=a("code"),jQe=o("CpmTokenizerFast"),NQe=o(" (CPM model)"),DQe=l(),Og=a("li"),TJ=a("strong"),qQe=o("ctrl"),GQe=o(" \u2014 "),Lx=a("a"),OQe=o("CTRLTokenizer"),XQe=o(" (CTRL model)"),VQe=l(),ts=a("li"),FJ=a("strong"),zQe=o("deberta"),WQe=o(" \u2014 "),Bx=a("a"),QQe=o("DebertaTokenizer"),HQe=o(" or "),xx=a("a"),UQe=o("DebertaTokenizerFast"),JQe=o(" (DeBERTa model)"),YQe=l(),Xg=a("li"),CJ=a("strong"),KQe=o("deberta-v2"),ZQe=o(" \u2014 "),kx=a("a"),eHe=o("DebertaV2Tokenizer"),oHe=o(" (DeBERTa-v2 model)"),rHe=l(),as=a("li"),MJ=a("strong"),tHe=o("distilbert"),aHe=o(" \u2014 "),Rx=a("a"),nHe=o("DistilBertTokenizer"),sHe=o(" or "),Sx=a("a"),lHe=o("DistilBertTokenizerFast"),iHe=o(" (DistilBERT model)"),dHe=l(),ns=a("li"),EJ=a("strong"),cHe=o("dpr"),mHe=o(" \u2014 "),Px=a("a"),fHe=o("DPRQuestionEncoderTokenizer"),gHe=o(" or "),$x=a("a"),hHe=o("DPRQuestionEncoderTokenizerFast"),uHe=o(" (DPR model)"),pHe=l(),ss=a("li"),yJ=a("strong"),_He=o("electra"),bHe=o(" \u2014 "),Ix=a("a"),vHe=o("ElectraTokenizer"),THe=o(" or "),jx=a("a"),FHe=o("ElectraTokenizerFast"),CHe=o(" (ELECTRA model)"),MHe=l(),Vg=a("li"),wJ=a("strong"),EHe=o("flaubert"),yHe=o(" \u2014 "),Nx=a("a"),wHe=o("FlaubertTokenizer"),AHe=o(" (FlauBERT model)"),LHe=l(),ls=a("li"),AJ=a("strong"),BHe=o("fnet"),xHe=o(" \u2014 "),Dx=a("a"),kHe=o("FNetTokenizer"),RHe=o(" or "),qx=a("a"),SHe=o("FNetTokenizerFast"),PHe=o(" (FNet model)"),$He=l(),zg=a("li"),LJ=a("strong"),IHe=o("fsmt"),jHe=o(" \u2014 "),Gx=a("a"),NHe=o("FSMTTokenizer"),DHe=o(" (FairSeq Machine-Translation model)"),qHe=l(),is=a("li"),BJ=a("strong"),GHe=o("funnel"),OHe=o(" \u2014 "),Ox=a("a"),XHe=o("FunnelTokenizer"),VHe=o(" or "),Xx=a("a"),zHe=o("FunnelTokenizerFast"),WHe=o(" (Funnel Transformer model)"),QHe=l(),ds=a("li"),xJ=a("strong"),HHe=o("gpt2"),UHe=o(" \u2014 "),Vx=a("a"),JHe=o("GPT2Tokenizer"),YHe=o(" or "),zx=a("a"),KHe=o("GPT2TokenizerFast"),ZHe=o(" (OpenAI GPT-2 model)"),eUe=l(),cs=a("li"),kJ=a("strong"),oUe=o("gpt_neo"),rUe=o(" \u2014 "),Wx=a("a"),tUe=o("GPT2Tokenizer"),aUe=o(" or "),Qx=a("a"),nUe=o("GPT2TokenizerFast"),sUe=o(" (GPT Neo model)"),lUe=l(),ms=a("li"),RJ=a("strong"),iUe=o("herbert"),dUe=o(" \u2014 "),Hx=a("a"),cUe=o("HerbertTokenizer"),mUe=o(" or "),Ux=a("a"),fUe=o("HerbertTokenizerFast"),gUe=o(" (HerBERT model)"),hUe=l(),Wg=a("li"),SJ=a("strong"),uUe=o("hubert"),pUe=o(" \u2014 "),Jx=a("a"),_Ue=o("Wav2Vec2CTCTokenizer"),bUe=o(" (Hubert model)"),vUe=l(),fs=a("li"),PJ=a("strong"),TUe=o("ibert"),FUe=o(" \u2014 "),Yx=a("a"),CUe=o("RobertaTokenizer"),MUe=o(" or "),Kx=a("a"),EUe=o("RobertaTokenizerFast"),yUe=o(" (I-BERT model)"),wUe=l(),gs=a("li"),$J=a("strong"),AUe=o("layoutlm"),LUe=o(" \u2014 "),Zx=a("a"),BUe=o("LayoutLMTokenizer"),xUe=o(" or "),ek=a("a"),kUe=o("LayoutLMTokenizerFast"),RUe=o(" (LayoutLM model)"),SUe=l(),hs=a("li"),IJ=a("strong"),PUe=o("layoutlmv2"),$Ue=o(" \u2014 "),ok=a("a"),IUe=o("LayoutLMv2Tokenizer"),jUe=o(" or "),rk=a("a"),NUe=o("LayoutLMv2TokenizerFast"),DUe=o(" (LayoutLMv2 model)"),qUe=l(),us=a("li"),jJ=a("strong"),GUe=o("layoutxlm"),OUe=o(" \u2014 "),tk=a("a"),XUe=o("LayoutXLMTokenizer"),VUe=o(" or "),ak=a("a"),zUe=o("LayoutXLMTokenizerFast"),WUe=o(" (LayoutXLM model)"),QUe=l(),ps=a("li"),NJ=a("strong"),HUe=o("led"),UUe=o(" \u2014 "),nk=a("a"),JUe=o("LEDTokenizer"),YUe=o(" or "),sk=a("a"),KUe=o("LEDTokenizerFast"),ZUe=o(" (LED model)"),eJe=l(),_s=a("li"),DJ=a("strong"),oJe=o("longformer"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("LongformerTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("LongformerTokenizerFast"),sJe=o(" (Longformer model)"),lJe=l(),Qg=a("li"),qJ=a("strong"),iJe=o("luke"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("LukeTokenizer"),mJe=o(" (LUKE model)"),fJe=l(),bs=a("li"),GJ=a("strong"),gJe=o("lxmert"),hJe=o(" \u2014 "),ck=a("a"),uJe=o("LxmertTokenizer"),pJe=o(" or "),mk=a("a"),_Je=o("LxmertTokenizerFast"),bJe=o(" (LXMERT model)"),vJe=l(),Hg=a("li"),OJ=a("strong"),TJe=o("m2m_100"),FJe=o(" \u2014 "),fk=a("a"),CJe=o("M2M100Tokenizer"),MJe=o(" (M2M100 model)"),EJe=l(),Ug=a("li"),XJ=a("strong"),yJe=o("marian"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("MarianTokenizer"),LJe=o(" (Marian model)"),BJe=l(),vs=a("li"),VJ=a("strong"),xJe=o("mbart"),kJe=o(" \u2014 "),hk=a("a"),RJe=o("MBartTokenizer"),SJe=o(" or "),uk=a("a"),PJe=o("MBartTokenizerFast"),$Je=o(" (mBART model)"),IJe=l(),Ts=a("li"),zJ=a("strong"),jJe=o("mbart50"),NJe=o(" \u2014 "),pk=a("a"),DJe=o("MBart50Tokenizer"),qJe=o(" or "),_k=a("a"),GJe=o("MBart50TokenizerFast"),OJe=o(" (mBART-50 model)"),XJe=l(),Jg=a("li"),WJ=a("strong"),VJe=o("mluke"),zJe=o(" \u2014 "),bk=a("a"),WJe=o("MLukeTokenizer"),QJe=o(" (mLUKE model)"),HJe=l(),Fs=a("li"),QJ=a("strong"),UJe=o("mobilebert"),JJe=o(" \u2014 "),vk=a("a"),YJe=o("MobileBertTokenizer"),KJe=o(" or "),Tk=a("a"),ZJe=o("MobileBertTokenizerFast"),eYe=o(" (MobileBERT model)"),oYe=l(),Cs=a("li"),HJ=a("strong"),rYe=o("mpnet"),tYe=o(" \u2014 "),Fk=a("a"),aYe=o("MPNetTokenizer"),nYe=o(" or "),Ck=a("a"),sYe=o("MPNetTokenizerFast"),lYe=o(" (MPNet model)"),iYe=l(),Ms=a("li"),UJ=a("strong"),dYe=o("mt5"),cYe=o(" \u2014 "),Mk=a("a"),mYe=o("MT5Tokenizer"),fYe=o(" or "),Ek=a("a"),gYe=o("MT5TokenizerFast"),hYe=o(" (mT5 model)"),uYe=l(),Es=a("li"),JJ=a("strong"),pYe=o("openai-gpt"),_Ye=o(" \u2014 "),yk=a("a"),bYe=o("OpenAIGPTTokenizer"),vYe=o(" or "),wk=a("a"),TYe=o("OpenAIGPTTokenizerFast"),FYe=o(" (OpenAI GPT model)"),CYe=l(),ys=a("li"),YJ=a("strong"),MYe=o("pegasus"),EYe=o(" \u2014 "),Ak=a("a"),yYe=o("PegasusTokenizer"),wYe=o(" or "),Lk=a("a"),AYe=o("PegasusTokenizerFast"),LYe=o(" (Pegasus model)"),BYe=l(),Yg=a("li"),KJ=a("strong"),xYe=o("perceiver"),kYe=o(" \u2014 "),Bk=a("a"),RYe=o("PerceiverTokenizer"),SYe=o(" (Perceiver model)"),PYe=l(),Kg=a("li"),ZJ=a("strong"),$Ye=o("phobert"),IYe=o(" \u2014 "),xk=a("a"),jYe=o("PhobertTokenizer"),NYe=o(" (PhoBERT model)"),DYe=l(),Zg=a("li"),eY=a("strong"),qYe=o("plbart"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("PLBartTokenizer"),XYe=o(" (PLBart model)"),VYe=l(),eh=a("li"),oY=a("strong"),zYe=o("prophetnet"),WYe=o(" \u2014 "),Rk=a("a"),QYe=o("ProphetNetTokenizer"),HYe=o(" (ProphetNet model)"),UYe=l(),ws=a("li"),rY=a("strong"),JYe=o("qdqbert"),YYe=o(" \u2014 "),Sk=a("a"),KYe=o("BertTokenizer"),ZYe=o(" or "),Pk=a("a"),eKe=o("BertTokenizerFast"),oKe=o(" (QDQBert model)"),rKe=l(),oh=a("li"),tY=a("strong"),tKe=o("rag"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("RagTokenizer"),sKe=o(" (RAG model)"),lKe=l(),As=a("li"),aY=a("strong"),iKe=o("realm"),dKe=o(" \u2014 "),Ik=a("a"),cKe=o("RealmTokenizer"),mKe=o(" or "),jk=a("a"),fKe=o("RealmTokenizerFast"),gKe=o(" (Realm model)"),hKe=l(),Ls=a("li"),nY=a("strong"),uKe=o("reformer"),pKe=o(" \u2014 "),Nk=a("a"),_Ke=o("ReformerTokenizer"),bKe=o(" or "),Dk=a("a"),vKe=o("ReformerTokenizerFast"),TKe=o(" (Reformer model)"),FKe=l(),Bs=a("li"),sY=a("strong"),CKe=o("rembert"),MKe=o(" \u2014 "),qk=a("a"),EKe=o("RemBertTokenizer"),yKe=o(" or "),Gk=a("a"),wKe=o("RemBertTokenizerFast"),AKe=o(" (RemBERT model)"),LKe=l(),xs=a("li"),lY=a("strong"),BKe=o("retribert"),xKe=o(" \u2014 "),Ok=a("a"),kKe=o("RetriBertTokenizer"),RKe=o(" or "),Xk=a("a"),SKe=o("RetriBertTokenizerFast"),PKe=o(" (RetriBERT model)"),$Ke=l(),ks=a("li"),iY=a("strong"),IKe=o("roberta"),jKe=o(" \u2014 "),Vk=a("a"),NKe=o("RobertaTokenizer"),DKe=o(" or "),zk=a("a"),qKe=o("RobertaTokenizerFast"),GKe=o(" (RoBERTa model)"),OKe=l(),Rs=a("li"),dY=a("strong"),XKe=o("roformer"),VKe=o(" \u2014 "),Wk=a("a"),zKe=o("RoFormerTokenizer"),WKe=o(" or "),Qk=a("a"),QKe=o("RoFormerTokenizerFast"),HKe=o(" (RoFormer model)"),UKe=l(),rh=a("li"),cY=a("strong"),JKe=o("speech_to_text"),YKe=o(" \u2014 "),Hk=a("a"),KKe=o("Speech2TextTokenizer"),ZKe=o(" (Speech2Text model)"),eZe=l(),th=a("li"),mY=a("strong"),oZe=o("speech_to_text_2"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("Speech2Text2Tokenizer"),aZe=o(" (Speech2Text2 model)"),nZe=l(),Ss=a("li"),fY=a("strong"),sZe=o("splinter"),lZe=o(" \u2014 "),Jk=a("a"),iZe=o("SplinterTokenizer"),dZe=o(" or "),Yk=a("a"),cZe=o("SplinterTokenizerFast"),mZe=o(" (Splinter model)"),fZe=l(),Ps=a("li"),gY=a("strong"),gZe=o("squeezebert"),hZe=o(" \u2014 "),Kk=a("a"),uZe=o("SqueezeBertTokenizer"),pZe=o(" or "),Zk=a("a"),_Ze=o("SqueezeBertTokenizerFast"),bZe=o(" (SqueezeBERT model)"),vZe=l(),$s=a("li"),hY=a("strong"),TZe=o("t5"),FZe=o(" \u2014 "),eR=a("a"),CZe=o("T5Tokenizer"),MZe=o(" or "),oR=a("a"),EZe=o("T5TokenizerFast"),yZe=o(" (T5 model)"),wZe=l(),ah=a("li"),uY=a("strong"),AZe=o("tapas"),LZe=o(" \u2014 "),rR=a("a"),BZe=o("TapasTokenizer"),xZe=o(" (TAPAS model)"),kZe=l(),nh=a("li"),pY=a("strong"),RZe=o("transfo-xl"),SZe=o(" \u2014 "),tR=a("a"),PZe=o("TransfoXLTokenizer"),$Ze=o(" (Transformer-XL model)"),IZe=l(),sh=a("li"),_Y=a("strong"),jZe=o("wav2vec2"),NZe=o(" \u2014 "),aR=a("a"),DZe=o("Wav2Vec2CTCTokenizer"),qZe=o(" (Wav2Vec2 model)"),GZe=l(),lh=a("li"),bY=a("strong"),OZe=o("wav2vec2_phoneme"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("Wav2Vec2PhonemeCTCTokenizer"),zZe=o(" (Wav2Vec2Phoneme model)"),WZe=l(),Is=a("li"),vY=a("strong"),QZe=o("xglm"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("XGLMTokenizer"),JZe=o(" or "),lR=a("a"),YZe=o("XGLMTokenizerFast"),KZe=o(" (XGLM model)"),ZZe=l(),ih=a("li"),TY=a("strong"),eeo=o("xlm"),oeo=o(" \u2014 "),iR=a("a"),reo=o("XLMTokenizer"),teo=o(" (XLM model)"),aeo=l(),dh=a("li"),FY=a("strong"),neo=o("xlm-prophetnet"),seo=o(" \u2014 "),dR=a("a"),leo=o("XLMProphetNetTokenizer"),ieo=o(" (XLMProphetNet model)"),deo=l(),js=a("li"),CY=a("strong"),ceo=o("xlm-roberta"),meo=o(" \u2014 "),cR=a("a"),feo=o("XLMRobertaTokenizer"),geo=o(" or "),mR=a("a"),heo=o("XLMRobertaTokenizerFast"),ueo=o(" (XLM-RoBERTa model)"),peo=l(),Ns=a("li"),MY=a("strong"),_eo=o("xlnet"),beo=o(" \u2014 "),fR=a("a"),veo=o("XLNetTokenizer"),Teo=o(" or "),gR=a("a"),Feo=o("XLNetTokenizerFast"),Ceo=o(" (XLNet model)"),Meo=l(),EY=a("p"),Eeo=o("Examples:"),yeo=l(),m(Ay.$$.fragment),weo=l(),ch=a("div"),m(Ly.$$.fragment),Aeo=l(),yY=a("p"),Leo=o("Register a new tokenizer in this mapping."),yke=l(),Qi=a("h2"),mh=a("a"),wY=a("span"),m(By.$$.fragment),Beo=l(),AY=a("span"),xeo=o("AutoFeatureExtractor"),wke=l(),Ho=a("div"),m(xy.$$.fragment),keo=l(),ky=a("p"),Reo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=a("a"),Seo=o("AutoFeatureExtractor.from_pretrained()"),Peo=o(" class method."),$eo=l(),Ry=a("p"),Ieo=o("This class cannot be instantiated directly using "),LY=a("code"),jeo=o("__init__()"),Neo=o(" (throws an error)."),Deo=l(),$e=a("div"),m(Sy.$$.fragment),qeo=l(),BY=a("p"),Geo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Oeo=l(),Xa=a("p"),Xeo=o("The feature extractor class to instantiate is selected based on the "),xY=a("code"),Veo=o("model_type"),zeo=o(` property of the config object
(either passed as an argument or loaded from `),kY=a("code"),Weo=o("pretrained_model_name_or_path"),Qeo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=a("code"),Heo=o("pretrained_model_name_or_path"),Ueo=o(":"),Jeo=l(),te=a("ul"),fh=a("li"),SY=a("strong"),Yeo=o("beit"),Keo=o(" \u2014 "),uR=a("a"),Zeo=o("BeitFeatureExtractor"),eoo=o(" (BEiT model)"),ooo=l(),gh=a("li"),PY=a("strong"),roo=o("clip"),too=o(" \u2014 "),pR=a("a"),aoo=o("CLIPFeatureExtractor"),noo=o(" (CLIP model)"),soo=l(),hh=a("li"),$Y=a("strong"),loo=o("convnext"),ioo=o(" \u2014 "),_R=a("a"),doo=o("ConvNextFeatureExtractor"),coo=o(" (ConvNext model)"),moo=l(),uh=a("li"),IY=a("strong"),foo=o("deit"),goo=o(" \u2014 "),bR=a("a"),hoo=o("DeiTFeatureExtractor"),uoo=o(" (DeiT model)"),poo=l(),ph=a("li"),jY=a("strong"),_oo=o("detr"),boo=o(" \u2014 "),vR=a("a"),voo=o("DetrFeatureExtractor"),Too=o(" (DETR model)"),Foo=l(),_h=a("li"),NY=a("strong"),Coo=o("hubert"),Moo=o(" \u2014 "),TR=a("a"),Eoo=o("Wav2Vec2FeatureExtractor"),yoo=o(" (Hubert model)"),woo=l(),bh=a("li"),DY=a("strong"),Aoo=o("layoutlmv2"),Loo=o(" \u2014 "),FR=a("a"),Boo=o("LayoutLMv2FeatureExtractor"),xoo=o(" (LayoutLMv2 model)"),koo=l(),vh=a("li"),qY=a("strong"),Roo=o("maskformer"),Soo=o(" \u2014 "),CR=a("a"),Poo=o("MaskFormerFeatureExtractor"),$oo=o(" (MaskFormer model)"),Ioo=l(),Th=a("li"),GY=a("strong"),joo=o("perceiver"),Noo=o(" \u2014 "),MR=a("a"),Doo=o("PerceiverFeatureExtractor"),qoo=o(" (Perceiver model)"),Goo=l(),Fh=a("li"),OY=a("strong"),Ooo=o("poolformer"),Xoo=o(" \u2014 "),ER=a("a"),Voo=o("PoolFormerFeatureExtractor"),zoo=o(" (PoolFormer model)"),Woo=l(),Ch=a("li"),XY=a("strong"),Qoo=o("resnet"),Hoo=o(" \u2014 "),yR=a("a"),Uoo=o("ConvNextFeatureExtractor"),Joo=o(" (ResNet model)"),Yoo=l(),Mh=a("li"),VY=a("strong"),Koo=o("segformer"),Zoo=o(" \u2014 "),wR=a("a"),ero=o("SegformerFeatureExtractor"),oro=o(" (SegFormer model)"),rro=l(),Eh=a("li"),zY=a("strong"),tro=o("speech_to_text"),aro=o(" \u2014 "),AR=a("a"),nro=o("Speech2TextFeatureExtractor"),sro=o(" (Speech2Text model)"),lro=l(),yh=a("li"),WY=a("strong"),iro=o("swin"),dro=o(" \u2014 "),LR=a("a"),cro=o("ViTFeatureExtractor"),mro=o(" (Swin model)"),fro=l(),wh=a("li"),QY=a("strong"),gro=o("van"),hro=o(" \u2014 "),BR=a("a"),uro=o("ConvNextFeatureExtractor"),pro=o(" (VAN model)"),_ro=l(),Ah=a("li"),HY=a("strong"),bro=o("vit"),vro=o(" \u2014 "),xR=a("a"),Tro=o("ViTFeatureExtractor"),Fro=o(" (ViT model)"),Cro=l(),Lh=a("li"),UY=a("strong"),Mro=o("vit_mae"),Ero=o(" \u2014 "),kR=a("a"),yro=o("ViTFeatureExtractor"),wro=o(" (ViTMAE model)"),Aro=l(),Bh=a("li"),JY=a("strong"),Lro=o("wav2vec2"),Bro=o(" \u2014 "),RR=a("a"),xro=o("Wav2Vec2FeatureExtractor"),kro=o(" (Wav2Vec2 model)"),Rro=l(),m(xh.$$.fragment),Sro=l(),YY=a("p"),Pro=o("Examples:"),$ro=l(),m(Py.$$.fragment),Iro=l(),kh=a("div"),m($y.$$.fragment),jro=l(),KY=a("p"),Nro=o("Register a new feature extractor for this class."),Ake=l(),Hi=a("h2"),Rh=a("a"),ZY=a("span"),m(Iy.$$.fragment),Dro=l(),eK=a("span"),qro=o("AutoProcessor"),Lke=l(),Uo=a("div"),m(jy.$$.fragment),Gro=l(),Ny=a("p"),Oro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=a("a"),Xro=o("AutoProcessor.from_pretrained()"),Vro=o(" class method."),zro=l(),Dy=a("p"),Wro=o("This class cannot be instantiated directly using "),oK=a("code"),Qro=o("__init__()"),Hro=o(" (throws an error)."),Uro=l(),Ie=a("div"),m(qy.$$.fragment),Jro=l(),rK=a("p"),Yro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Kro=l(),Ui=a("p"),Zro=o("The processor class to instantiate is selected based on the "),tK=a("code"),eto=o("model_type"),oto=o(` property of the config object (either
passed as an argument or loaded from `),aK=a("code"),rto=o("pretrained_model_name_or_path"),tto=o(" if possible):"),ato=l(),xe=a("ul"),Sh=a("li"),nK=a("strong"),nto=o("clip"),sto=o(" \u2014 "),PR=a("a"),lto=o("CLIPProcessor"),ito=o(" (CLIP model)"),dto=l(),Ph=a("li"),sK=a("strong"),cto=o("layoutlmv2"),mto=o(" \u2014 "),$R=a("a"),fto=o("LayoutLMv2Processor"),gto=o(" (LayoutLMv2 model)"),hto=l(),$h=a("li"),lK=a("strong"),uto=o("layoutxlm"),pto=o(" \u2014 "),IR=a("a"),_to=o("LayoutXLMProcessor"),bto=o(" (LayoutXLM model)"),vto=l(),Ih=a("li"),iK=a("strong"),Tto=o("speech_to_text"),Fto=o(" \u2014 "),jR=a("a"),Cto=o("Speech2TextProcessor"),Mto=o(" (Speech2Text model)"),Eto=l(),jh=a("li"),dK=a("strong"),yto=o("speech_to_text_2"),wto=o(" \u2014 "),NR=a("a"),Ato=o("Speech2Text2Processor"),Lto=o(" (Speech2Text2 model)"),Bto=l(),Nh=a("li"),cK=a("strong"),xto=o("trocr"),kto=o(" \u2014 "),DR=a("a"),Rto=o("TrOCRProcessor"),Sto=o(" (TrOCR model)"),Pto=l(),Dh=a("li"),mK=a("strong"),$to=o("vision-text-dual-encoder"),Ito=o(" \u2014 "),qR=a("a"),jto=o("VisionTextDualEncoderProcessor"),Nto=o(" (VisionTextDualEncoder model)"),Dto=l(),qh=a("li"),fK=a("strong"),qto=o("wav2vec2"),Gto=o(" \u2014 "),GR=a("a"),Oto=o("Wav2Vec2Processor"),Xto=o(" (Wav2Vec2 model)"),Vto=l(),m(Gh.$$.fragment),zto=l(),gK=a("p"),Wto=o("Examples:"),Qto=l(),m(Gy.$$.fragment),Hto=l(),Oh=a("div"),m(Oy.$$.fragment),Uto=l(),hK=a("p"),Jto=o("Register a new processor for this class."),Bke=l(),Ji=a("h2"),Xh=a("a"),uK=a("span"),m(Xy.$$.fragment),Yto=l(),pK=a("span"),Kto=o("AutoModel"),xke=l(),Jo=a("div"),m(Vy.$$.fragment),Zto=l(),Yi=a("p"),eao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_K=a("code"),oao=o("from_pretrained()"),rao=o("class method or the "),bK=a("code"),tao=o("from_config()"),aao=o(`class
method.`),nao=l(),zy=a("p"),sao=o("This class cannot be instantiated directly using "),vK=a("code"),lao=o("__init__()"),iao=o(" (throws an error)."),dao=l(),Vr=a("div"),m(Wy.$$.fragment),cao=l(),TK=a("p"),mao=o("Instantiates one of the base model classes of the library from a configuration."),fao=l(),Ki=a("p"),gao=o(`Note:
Loading a model from its configuration file does `),FK=a("strong"),hao=o("not"),uao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=a("code"),pao=o("from_pretrained()"),_ao=o("to load the model weights."),bao=l(),MK=a("p"),vao=o("Examples:"),Tao=l(),m(Qy.$$.fragment),Fao=l(),je=a("div"),m(Hy.$$.fragment),Cao=l(),EK=a("p"),Mao=o("Instantiate one of the base model classes of the library from a pretrained model."),Eao=l(),Va=a("p"),yao=o("The model class to instantiate is selected based on the "),yK=a("code"),wao=o("model_type"),Aao=o(` property of the config object (either
passed as an argument or loaded from `),wK=a("code"),Lao=o("pretrained_model_name_or_path"),Bao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=a("code"),xao=o("pretrained_model_name_or_path"),kao=o(":"),Rao=l(),F=a("ul"),Vh=a("li"),LK=a("strong"),Sao=o("albert"),Pao=o(" \u2014 "),OR=a("a"),$ao=o("AlbertModel"),Iao=o(" (ALBERT model)"),jao=l(),zh=a("li"),BK=a("strong"),Nao=o("bart"),Dao=o(" \u2014 "),XR=a("a"),qao=o("BartModel"),Gao=o(" (BART model)"),Oao=l(),Wh=a("li"),xK=a("strong"),Xao=o("beit"),Vao=o(" \u2014 "),VR=a("a"),zao=o("BeitModel"),Wao=o(" (BEiT model)"),Qao=l(),Qh=a("li"),kK=a("strong"),Hao=o("bert"),Uao=o(" \u2014 "),zR=a("a"),Jao=o("BertModel"),Yao=o(" (BERT model)"),Kao=l(),Hh=a("li"),RK=a("strong"),Zao=o("bert-generation"),eno=o(" \u2014 "),WR=a("a"),ono=o("BertGenerationEncoder"),rno=o(" (Bert Generation model)"),tno=l(),Uh=a("li"),SK=a("strong"),ano=o("big_bird"),nno=o(" \u2014 "),QR=a("a"),sno=o("BigBirdModel"),lno=o(" (BigBird model)"),ino=l(),Jh=a("li"),PK=a("strong"),dno=o("bigbird_pegasus"),cno=o(" \u2014 "),HR=a("a"),mno=o("BigBirdPegasusModel"),fno=o(" (BigBirdPegasus model)"),gno=l(),Yh=a("li"),$K=a("strong"),hno=o("blenderbot"),uno=o(" \u2014 "),UR=a("a"),pno=o("BlenderbotModel"),_no=o(" (Blenderbot model)"),bno=l(),Kh=a("li"),IK=a("strong"),vno=o("blenderbot-small"),Tno=o(" \u2014 "),JR=a("a"),Fno=o("BlenderbotSmallModel"),Cno=o(" (BlenderbotSmall model)"),Mno=l(),Zh=a("li"),jK=a("strong"),Eno=o("camembert"),yno=o(" \u2014 "),YR=a("a"),wno=o("CamembertModel"),Ano=o(" (CamemBERT model)"),Lno=l(),eu=a("li"),NK=a("strong"),Bno=o("canine"),xno=o(" \u2014 "),KR=a("a"),kno=o("CanineModel"),Rno=o(" (Canine model)"),Sno=l(),ou=a("li"),DK=a("strong"),Pno=o("clip"),$no=o(" \u2014 "),ZR=a("a"),Ino=o("CLIPModel"),jno=o(" (CLIP model)"),Nno=l(),ru=a("li"),qK=a("strong"),Dno=o("convbert"),qno=o(" \u2014 "),eS=a("a"),Gno=o("ConvBertModel"),Ono=o(" (ConvBERT model)"),Xno=l(),tu=a("li"),GK=a("strong"),Vno=o("convnext"),zno=o(" \u2014 "),oS=a("a"),Wno=o("ConvNextModel"),Qno=o(" (ConvNext model)"),Hno=l(),au=a("li"),OK=a("strong"),Uno=o("ctrl"),Jno=o(" \u2014 "),rS=a("a"),Yno=o("CTRLModel"),Kno=o(" (CTRL model)"),Zno=l(),nu=a("li"),XK=a("strong"),eso=o("data2vec-audio"),oso=o(" \u2014 "),tS=a("a"),rso=o("Data2VecAudioModel"),tso=o(" (Data2VecAudio model)"),aso=l(),su=a("li"),VK=a("strong"),nso=o("data2vec-text"),sso=o(" \u2014 "),aS=a("a"),lso=o("Data2VecTextModel"),iso=o(" (Data2VecText model)"),dso=l(),lu=a("li"),zK=a("strong"),cso=o("deberta"),mso=o(" \u2014 "),nS=a("a"),fso=o("DebertaModel"),gso=o(" (DeBERTa model)"),hso=l(),iu=a("li"),WK=a("strong"),uso=o("deberta-v2"),pso=o(" \u2014 "),sS=a("a"),_so=o("DebertaV2Model"),bso=o(" (DeBERTa-v2 model)"),vso=l(),du=a("li"),QK=a("strong"),Tso=o("decision_transformer"),Fso=o(" \u2014 "),lS=a("a"),Cso=o("DecisionTransformerModel"),Mso=o(" (Decision Transformer model)"),Eso=l(),cu=a("li"),HK=a("strong"),yso=o("deit"),wso=o(" \u2014 "),iS=a("a"),Aso=o("DeiTModel"),Lso=o(" (DeiT model)"),Bso=l(),mu=a("li"),UK=a("strong"),xso=o("detr"),kso=o(" \u2014 "),dS=a("a"),Rso=o("DetrModel"),Sso=o(" (DETR model)"),Pso=l(),fu=a("li"),JK=a("strong"),$so=o("distilbert"),Iso=o(" \u2014 "),cS=a("a"),jso=o("DistilBertModel"),Nso=o(" (DistilBERT model)"),Dso=l(),gu=a("li"),YK=a("strong"),qso=o("dpr"),Gso=o(" \u2014 "),mS=a("a"),Oso=o("DPRQuestionEncoder"),Xso=o(" (DPR model)"),Vso=l(),hu=a("li"),KK=a("strong"),zso=o("electra"),Wso=o(" \u2014 "),fS=a("a"),Qso=o("ElectraModel"),Hso=o(" (ELECTRA model)"),Uso=l(),uu=a("li"),ZK=a("strong"),Jso=o("flaubert"),Yso=o(" \u2014 "),gS=a("a"),Kso=o("FlaubertModel"),Zso=o(" (FlauBERT model)"),elo=l(),pu=a("li"),eZ=a("strong"),olo=o("fnet"),rlo=o(" \u2014 "),hS=a("a"),tlo=o("FNetModel"),alo=o(" (FNet model)"),nlo=l(),_u=a("li"),oZ=a("strong"),slo=o("fsmt"),llo=o(" \u2014 "),uS=a("a"),ilo=o("FSMTModel"),dlo=o(" (FairSeq Machine-Translation model)"),clo=l(),Ds=a("li"),rZ=a("strong"),mlo=o("funnel"),flo=o(" \u2014 "),pS=a("a"),glo=o("FunnelModel"),hlo=o(" or "),_S=a("a"),ulo=o("FunnelBaseModel"),plo=o(" (Funnel Transformer model)"),_lo=l(),bu=a("li"),tZ=a("strong"),blo=o("glpn"),vlo=o(" \u2014 "),bS=a("a"),Tlo=o("GLPNModel"),Flo=o(" (GLPN model)"),Clo=l(),vu=a("li"),aZ=a("strong"),Mlo=o("gpt2"),Elo=o(" \u2014 "),vS=a("a"),ylo=o("GPT2Model"),wlo=o(" (OpenAI GPT-2 model)"),Alo=l(),Tu=a("li"),nZ=a("strong"),Llo=o("gpt_neo"),Blo=o(" \u2014 "),TS=a("a"),xlo=o("GPTNeoModel"),klo=o(" (GPT Neo model)"),Rlo=l(),Fu=a("li"),sZ=a("strong"),Slo=o("gptj"),Plo=o(" \u2014 "),FS=a("a"),$lo=o("GPTJModel"),Ilo=o(" (GPT-J model)"),jlo=l(),Cu=a("li"),lZ=a("strong"),Nlo=o("hubert"),Dlo=o(" \u2014 "),CS=a("a"),qlo=o("HubertModel"),Glo=o(" (Hubert model)"),Olo=l(),Mu=a("li"),iZ=a("strong"),Xlo=o("ibert"),Vlo=o(" \u2014 "),MS=a("a"),zlo=o("IBertModel"),Wlo=o(" (I-BERT model)"),Qlo=l(),Eu=a("li"),dZ=a("strong"),Hlo=o("imagegpt"),Ulo=o(" \u2014 "),ES=a("a"),Jlo=o("ImageGPTModel"),Ylo=o(" (ImageGPT model)"),Klo=l(),yu=a("li"),cZ=a("strong"),Zlo=o("layoutlm"),eio=o(" \u2014 "),yS=a("a"),oio=o("LayoutLMModel"),rio=o(" (LayoutLM model)"),tio=l(),wu=a("li"),mZ=a("strong"),aio=o("layoutlmv2"),nio=o(" \u2014 "),wS=a("a"),sio=o("LayoutLMv2Model"),lio=o(" (LayoutLMv2 model)"),iio=l(),Au=a("li"),fZ=a("strong"),dio=o("led"),cio=o(" \u2014 "),AS=a("a"),mio=o("LEDModel"),fio=o(" (LED model)"),gio=l(),Lu=a("li"),gZ=a("strong"),hio=o("longformer"),uio=o(" \u2014 "),LS=a("a"),pio=o("LongformerModel"),_io=o(" (Longformer model)"),bio=l(),Bu=a("li"),hZ=a("strong"),vio=o("luke"),Tio=o(" \u2014 "),BS=a("a"),Fio=o("LukeModel"),Cio=o(" (LUKE model)"),Mio=l(),xu=a("li"),uZ=a("strong"),Eio=o("lxmert"),yio=o(" \u2014 "),xS=a("a"),wio=o("LxmertModel"),Aio=o(" (LXMERT model)"),Lio=l(),ku=a("li"),pZ=a("strong"),Bio=o("m2m_100"),xio=o(" \u2014 "),kS=a("a"),kio=o("M2M100Model"),Rio=o(" (M2M100 model)"),Sio=l(),Ru=a("li"),_Z=a("strong"),Pio=o("marian"),$io=o(" \u2014 "),RS=a("a"),Iio=o("MarianModel"),jio=o(" (Marian model)"),Nio=l(),Su=a("li"),bZ=a("strong"),Dio=o("maskformer"),qio=o(" \u2014 "),SS=a("a"),Gio=o("MaskFormerModel"),Oio=o(" (MaskFormer model)"),Xio=l(),Pu=a("li"),vZ=a("strong"),Vio=o("mbart"),zio=o(" \u2014 "),PS=a("a"),Wio=o("MBartModel"),Qio=o(" (mBART model)"),Hio=l(),$u=a("li"),TZ=a("strong"),Uio=o("megatron-bert"),Jio=o(" \u2014 "),$S=a("a"),Yio=o("MegatronBertModel"),Kio=o(" (MegatronBert model)"),Zio=l(),Iu=a("li"),FZ=a("strong"),edo=o("mobilebert"),odo=o(" \u2014 "),IS=a("a"),rdo=o("MobileBertModel"),tdo=o(" (MobileBERT model)"),ado=l(),ju=a("li"),CZ=a("strong"),ndo=o("mpnet"),sdo=o(" \u2014 "),jS=a("a"),ldo=o("MPNetModel"),ido=o(" (MPNet model)"),ddo=l(),Nu=a("li"),MZ=a("strong"),cdo=o("mt5"),mdo=o(" \u2014 "),NS=a("a"),fdo=o("MT5Model"),gdo=o(" (mT5 model)"),hdo=l(),Du=a("li"),EZ=a("strong"),udo=o("nystromformer"),pdo=o(" \u2014 "),DS=a("a"),_do=o("NystromformerModel"),bdo=o(" (Nystromformer model)"),vdo=l(),qu=a("li"),yZ=a("strong"),Tdo=o("openai-gpt"),Fdo=o(" \u2014 "),qS=a("a"),Cdo=o("OpenAIGPTModel"),Mdo=o(" (OpenAI GPT model)"),Edo=l(),Gu=a("li"),wZ=a("strong"),ydo=o("pegasus"),wdo=o(" \u2014 "),GS=a("a"),Ado=o("PegasusModel"),Ldo=o(" (Pegasus model)"),Bdo=l(),Ou=a("li"),AZ=a("strong"),xdo=o("perceiver"),kdo=o(" \u2014 "),OS=a("a"),Rdo=o("PerceiverModel"),Sdo=o(" (Perceiver model)"),Pdo=l(),Xu=a("li"),LZ=a("strong"),$do=o("plbart"),Ido=o(" \u2014 "),XS=a("a"),jdo=o("PLBartModel"),Ndo=o(" (PLBart model)"),Ddo=l(),Vu=a("li"),BZ=a("strong"),qdo=o("poolformer"),Gdo=o(" \u2014 "),VS=a("a"),Odo=o("PoolFormerModel"),Xdo=o(" (PoolFormer model)"),Vdo=l(),zu=a("li"),xZ=a("strong"),zdo=o("prophetnet"),Wdo=o(" \u2014 "),zS=a("a"),Qdo=o("ProphetNetModel"),Hdo=o(" (ProphetNet model)"),Udo=l(),Wu=a("li"),kZ=a("strong"),Jdo=o("qdqbert"),Ydo=o(" \u2014 "),WS=a("a"),Kdo=o("QDQBertModel"),Zdo=o(" (QDQBert model)"),eco=l(),Qu=a("li"),RZ=a("strong"),oco=o("reformer"),rco=o(" \u2014 "),QS=a("a"),tco=o("ReformerModel"),aco=o(" (Reformer model)"),nco=l(),Hu=a("li"),SZ=a("strong"),sco=o("rembert"),lco=o(" \u2014 "),HS=a("a"),ico=o("RemBertModel"),dco=o(" (RemBERT model)"),cco=l(),Uu=a("li"),PZ=a("strong"),mco=o("resnet"),fco=o(" \u2014 "),US=a("a"),gco=o("ResNetModel"),hco=o(" (ResNet model)"),uco=l(),Ju=a("li"),$Z=a("strong"),pco=o("retribert"),_co=o(" \u2014 "),JS=a("a"),bco=o("RetriBertModel"),vco=o(" (RetriBERT model)"),Tco=l(),Yu=a("li"),IZ=a("strong"),Fco=o("roberta"),Cco=o(" \u2014 "),YS=a("a"),Mco=o("RobertaModel"),Eco=o(" (RoBERTa model)"),yco=l(),Ku=a("li"),jZ=a("strong"),wco=o("roformer"),Aco=o(" \u2014 "),KS=a("a"),Lco=o("RoFormerModel"),Bco=o(" (RoFormer model)"),xco=l(),Zu=a("li"),NZ=a("strong"),kco=o("segformer"),Rco=o(" \u2014 "),ZS=a("a"),Sco=o("SegformerModel"),Pco=o(" (SegFormer model)"),$co=l(),ep=a("li"),DZ=a("strong"),Ico=o("sew"),jco=o(" \u2014 "),eP=a("a"),Nco=o("SEWModel"),Dco=o(" (SEW model)"),qco=l(),op=a("li"),qZ=a("strong"),Gco=o("sew-d"),Oco=o(" \u2014 "),oP=a("a"),Xco=o("SEWDModel"),Vco=o(" (SEW-D model)"),zco=l(),rp=a("li"),GZ=a("strong"),Wco=o("speech_to_text"),Qco=o(" \u2014 "),rP=a("a"),Hco=o("Speech2TextModel"),Uco=o(" (Speech2Text model)"),Jco=l(),tp=a("li"),OZ=a("strong"),Yco=o("splinter"),Kco=o(" \u2014 "),tP=a("a"),Zco=o("SplinterModel"),emo=o(" (Splinter model)"),omo=l(),ap=a("li"),XZ=a("strong"),rmo=o("squeezebert"),tmo=o(" \u2014 "),aP=a("a"),amo=o("SqueezeBertModel"),nmo=o(" (SqueezeBERT model)"),smo=l(),np=a("li"),VZ=a("strong"),lmo=o("swin"),imo=o(" \u2014 "),nP=a("a"),dmo=o("SwinModel"),cmo=o(" (Swin model)"),mmo=l(),sp=a("li"),zZ=a("strong"),fmo=o("t5"),gmo=o(" \u2014 "),sP=a("a"),hmo=o("T5Model"),umo=o(" (T5 model)"),pmo=l(),lp=a("li"),WZ=a("strong"),_mo=o("tapas"),bmo=o(" \u2014 "),lP=a("a"),vmo=o("TapasModel"),Tmo=o(" (TAPAS model)"),Fmo=l(),ip=a("li"),QZ=a("strong"),Cmo=o("transfo-xl"),Mmo=o(" \u2014 "),iP=a("a"),Emo=o("TransfoXLModel"),ymo=o(" (Transformer-XL model)"),wmo=l(),dp=a("li"),HZ=a("strong"),Amo=o("unispeech"),Lmo=o(" \u2014 "),dP=a("a"),Bmo=o("UniSpeechModel"),xmo=o(" (UniSpeech model)"),kmo=l(),cp=a("li"),UZ=a("strong"),Rmo=o("unispeech-sat"),Smo=o(" \u2014 "),cP=a("a"),Pmo=o("UniSpeechSatModel"),$mo=o(" (UniSpeechSat model)"),Imo=l(),mp=a("li"),JZ=a("strong"),jmo=o("van"),Nmo=o(" \u2014 "),mP=a("a"),Dmo=o("VanModel"),qmo=o(" (VAN model)"),Gmo=l(),fp=a("li"),YZ=a("strong"),Omo=o("vilt"),Xmo=o(" \u2014 "),fP=a("a"),Vmo=o("ViltModel"),zmo=o(" (ViLT model)"),Wmo=l(),gp=a("li"),KZ=a("strong"),Qmo=o("vision-text-dual-encoder"),Hmo=o(" \u2014 "),gP=a("a"),Umo=o("VisionTextDualEncoderModel"),Jmo=o(" (VisionTextDualEncoder model)"),Ymo=l(),hp=a("li"),ZZ=a("strong"),Kmo=o("visual_bert"),Zmo=o(" \u2014 "),hP=a("a"),efo=o("VisualBertModel"),ofo=o(" (VisualBert model)"),rfo=l(),up=a("li"),eee=a("strong"),tfo=o("vit"),afo=o(" \u2014 "),uP=a("a"),nfo=o("ViTModel"),sfo=o(" (ViT model)"),lfo=l(),pp=a("li"),oee=a("strong"),ifo=o("vit_mae"),dfo=o(" \u2014 "),pP=a("a"),cfo=o("ViTMAEModel"),mfo=o(" (ViTMAE model)"),ffo=l(),_p=a("li"),ree=a("strong"),gfo=o("wav2vec2"),hfo=o(" \u2014 "),_P=a("a"),ufo=o("Wav2Vec2Model"),pfo=o(" (Wav2Vec2 model)"),_fo=l(),bp=a("li"),tee=a("strong"),bfo=o("wavlm"),vfo=o(" \u2014 "),bP=a("a"),Tfo=o("WavLMModel"),Ffo=o(" (WavLM model)"),Cfo=l(),vp=a("li"),aee=a("strong"),Mfo=o("xglm"),Efo=o(" \u2014 "),vP=a("a"),yfo=o("XGLMModel"),wfo=o(" (XGLM model)"),Afo=l(),Tp=a("li"),nee=a("strong"),Lfo=o("xlm"),Bfo=o(" \u2014 "),TP=a("a"),xfo=o("XLMModel"),kfo=o(" (XLM model)"),Rfo=l(),Fp=a("li"),see=a("strong"),Sfo=o("xlm-prophetnet"),Pfo=o(" \u2014 "),FP=a("a"),$fo=o("XLMProphetNetModel"),Ifo=o(" (XLMProphetNet model)"),jfo=l(),Cp=a("li"),lee=a("strong"),Nfo=o("xlm-roberta"),Dfo=o(" \u2014 "),CP=a("a"),qfo=o("XLMRobertaModel"),Gfo=o(" (XLM-RoBERTa model)"),Ofo=l(),Mp=a("li"),iee=a("strong"),Xfo=o("xlm-roberta-xl"),Vfo=o(" \u2014 "),MP=a("a"),zfo=o("XLMRobertaXLModel"),Wfo=o(" (XLM-RoBERTa-XL model)"),Qfo=l(),Ep=a("li"),dee=a("strong"),Hfo=o("xlnet"),Ufo=o(" \u2014 "),EP=a("a"),Jfo=o("XLNetModel"),Yfo=o(" (XLNet model)"),Kfo=l(),yp=a("li"),cee=a("strong"),Zfo=o("yoso"),ego=o(" \u2014 "),yP=a("a"),ogo=o("YosoModel"),rgo=o(" (YOSO model)"),tgo=l(),wp=a("p"),ago=o("The model is set in evaluation mode by default using "),mee=a("code"),ngo=o("model.eval()"),sgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fee=a("code"),lgo=o("model.train()"),igo=l(),gee=a("p"),dgo=o("Examples:"),cgo=l(),m(Uy.$$.fragment),kke=l(),Zi=a("h2"),Ap=a("a"),hee=a("span"),m(Jy.$$.fragment),mgo=l(),uee=a("span"),fgo=o("AutoModelForPreTraining"),Rke=l(),Yo=a("div"),m(Yy.$$.fragment),ggo=l(),ed=a("p"),hgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=a("code"),ugo=o("from_pretrained()"),pgo=o("class method or the "),_ee=a("code"),_go=o("from_config()"),bgo=o(`class
method.`),vgo=l(),Ky=a("p"),Tgo=o("This class cannot be instantiated directly using "),bee=a("code"),Fgo=o("__init__()"),Cgo=o(" (throws an error)."),Mgo=l(),zr=a("div"),m(Zy.$$.fragment),Ego=l(),vee=a("p"),ygo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wgo=l(),od=a("p"),Ago=o(`Note:
Loading a model from its configuration file does `),Tee=a("strong"),Lgo=o("not"),Bgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=a("code"),xgo=o("from_pretrained()"),kgo=o("to load the model weights."),Rgo=l(),Cee=a("p"),Sgo=o("Examples:"),Pgo=l(),m(ew.$$.fragment),$go=l(),Ne=a("div"),m(ow.$$.fragment),Igo=l(),Mee=a("p"),jgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ngo=l(),za=a("p"),Dgo=o("The model class to instantiate is selected based on the "),Eee=a("code"),qgo=o("model_type"),Ggo=o(` property of the config object (either
passed as an argument or loaded from `),yee=a("code"),Ogo=o("pretrained_model_name_or_path"),Xgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wee=a("code"),Vgo=o("pretrained_model_name_or_path"),zgo=o(":"),Wgo=l(),k=a("ul"),Lp=a("li"),Aee=a("strong"),Qgo=o("albert"),Hgo=o(" \u2014 "),wP=a("a"),Ugo=o("AlbertForPreTraining"),Jgo=o(" (ALBERT model)"),Ygo=l(),Bp=a("li"),Lee=a("strong"),Kgo=o("bart"),Zgo=o(" \u2014 "),AP=a("a"),eho=o("BartForConditionalGeneration"),oho=o(" (BART model)"),rho=l(),xp=a("li"),Bee=a("strong"),tho=o("bert"),aho=o(" \u2014 "),LP=a("a"),nho=o("BertForPreTraining"),sho=o(" (BERT model)"),lho=l(),kp=a("li"),xee=a("strong"),iho=o("big_bird"),dho=o(" \u2014 "),BP=a("a"),cho=o("BigBirdForPreTraining"),mho=o(" (BigBird model)"),fho=l(),Rp=a("li"),kee=a("strong"),gho=o("camembert"),hho=o(" \u2014 "),xP=a("a"),uho=o("CamembertForMaskedLM"),pho=o(" (CamemBERT model)"),_ho=l(),Sp=a("li"),Ree=a("strong"),bho=o("ctrl"),vho=o(" \u2014 "),kP=a("a"),Tho=o("CTRLLMHeadModel"),Fho=o(" (CTRL model)"),Cho=l(),Pp=a("li"),See=a("strong"),Mho=o("data2vec-text"),Eho=o(" \u2014 "),RP=a("a"),yho=o("Data2VecTextForMaskedLM"),who=o(" (Data2VecText model)"),Aho=l(),$p=a("li"),Pee=a("strong"),Lho=o("deberta"),Bho=o(" \u2014 "),SP=a("a"),xho=o("DebertaForMaskedLM"),kho=o(" (DeBERTa model)"),Rho=l(),Ip=a("li"),$ee=a("strong"),Sho=o("deberta-v2"),Pho=o(" \u2014 "),PP=a("a"),$ho=o("DebertaV2ForMaskedLM"),Iho=o(" (DeBERTa-v2 model)"),jho=l(),jp=a("li"),Iee=a("strong"),Nho=o("distilbert"),Dho=o(" \u2014 "),$P=a("a"),qho=o("DistilBertForMaskedLM"),Gho=o(" (DistilBERT model)"),Oho=l(),Np=a("li"),jee=a("strong"),Xho=o("electra"),Vho=o(" \u2014 "),IP=a("a"),zho=o("ElectraForPreTraining"),Who=o(" (ELECTRA model)"),Qho=l(),Dp=a("li"),Nee=a("strong"),Hho=o("flaubert"),Uho=o(" \u2014 "),jP=a("a"),Jho=o("FlaubertWithLMHeadModel"),Yho=o(" (FlauBERT model)"),Kho=l(),qp=a("li"),Dee=a("strong"),Zho=o("fnet"),euo=o(" \u2014 "),NP=a("a"),ouo=o("FNetForPreTraining"),ruo=o(" (FNet model)"),tuo=l(),Gp=a("li"),qee=a("strong"),auo=o("fsmt"),nuo=o(" \u2014 "),DP=a("a"),suo=o("FSMTForConditionalGeneration"),luo=o(" (FairSeq Machine-Translation model)"),iuo=l(),Op=a("li"),Gee=a("strong"),duo=o("funnel"),cuo=o(" \u2014 "),qP=a("a"),muo=o("FunnelForPreTraining"),fuo=o(" (Funnel Transformer model)"),guo=l(),Xp=a("li"),Oee=a("strong"),huo=o("gpt2"),uuo=o(" \u2014 "),GP=a("a"),puo=o("GPT2LMHeadModel"),_uo=o(" (OpenAI GPT-2 model)"),buo=l(),Vp=a("li"),Xee=a("strong"),vuo=o("ibert"),Tuo=o(" \u2014 "),OP=a("a"),Fuo=o("IBertForMaskedLM"),Cuo=o(" (I-BERT model)"),Muo=l(),zp=a("li"),Vee=a("strong"),Euo=o("layoutlm"),yuo=o(" \u2014 "),XP=a("a"),wuo=o("LayoutLMForMaskedLM"),Auo=o(" (LayoutLM model)"),Luo=l(),Wp=a("li"),zee=a("strong"),Buo=o("longformer"),xuo=o(" \u2014 "),VP=a("a"),kuo=o("LongformerForMaskedLM"),Ruo=o(" (Longformer model)"),Suo=l(),Qp=a("li"),Wee=a("strong"),Puo=o("lxmert"),$uo=o(" \u2014 "),zP=a("a"),Iuo=o("LxmertForPreTraining"),juo=o(" (LXMERT model)"),Nuo=l(),Hp=a("li"),Qee=a("strong"),Duo=o("megatron-bert"),quo=o(" \u2014 "),WP=a("a"),Guo=o("MegatronBertForPreTraining"),Ouo=o(" (MegatronBert model)"),Xuo=l(),Up=a("li"),Hee=a("strong"),Vuo=o("mobilebert"),zuo=o(" \u2014 "),QP=a("a"),Wuo=o("MobileBertForPreTraining"),Quo=o(" (MobileBERT model)"),Huo=l(),Jp=a("li"),Uee=a("strong"),Uuo=o("mpnet"),Juo=o(" \u2014 "),HP=a("a"),Yuo=o("MPNetForMaskedLM"),Kuo=o(" (MPNet model)"),Zuo=l(),Yp=a("li"),Jee=a("strong"),epo=o("openai-gpt"),opo=o(" \u2014 "),UP=a("a"),rpo=o("OpenAIGPTLMHeadModel"),tpo=o(" (OpenAI GPT model)"),apo=l(),Kp=a("li"),Yee=a("strong"),npo=o("retribert"),spo=o(" \u2014 "),JP=a("a"),lpo=o("RetriBertModel"),ipo=o(" (RetriBERT model)"),dpo=l(),Zp=a("li"),Kee=a("strong"),cpo=o("roberta"),mpo=o(" \u2014 "),YP=a("a"),fpo=o("RobertaForMaskedLM"),gpo=o(" (RoBERTa model)"),hpo=l(),e_=a("li"),Zee=a("strong"),upo=o("squeezebert"),ppo=o(" \u2014 "),KP=a("a"),_po=o("SqueezeBertForMaskedLM"),bpo=o(" (SqueezeBERT model)"),vpo=l(),o_=a("li"),eoe=a("strong"),Tpo=o("t5"),Fpo=o(" \u2014 "),ZP=a("a"),Cpo=o("T5ForConditionalGeneration"),Mpo=o(" (T5 model)"),Epo=l(),r_=a("li"),ooe=a("strong"),ypo=o("tapas"),wpo=o(" \u2014 "),e$=a("a"),Apo=o("TapasForMaskedLM"),Lpo=o(" (TAPAS model)"),Bpo=l(),t_=a("li"),roe=a("strong"),xpo=o("transfo-xl"),kpo=o(" \u2014 "),o$=a("a"),Rpo=o("TransfoXLLMHeadModel"),Spo=o(" (Transformer-XL model)"),Ppo=l(),a_=a("li"),toe=a("strong"),$po=o("unispeech"),Ipo=o(" \u2014 "),r$=a("a"),jpo=o("UniSpeechForPreTraining"),Npo=o(" (UniSpeech model)"),Dpo=l(),n_=a("li"),aoe=a("strong"),qpo=o("unispeech-sat"),Gpo=o(" \u2014 "),t$=a("a"),Opo=o("UniSpeechSatForPreTraining"),Xpo=o(" (UniSpeechSat model)"),Vpo=l(),s_=a("li"),noe=a("strong"),zpo=o("visual_bert"),Wpo=o(" \u2014 "),a$=a("a"),Qpo=o("VisualBertForPreTraining"),Hpo=o(" (VisualBert model)"),Upo=l(),l_=a("li"),soe=a("strong"),Jpo=o("vit_mae"),Ypo=o(" \u2014 "),n$=a("a"),Kpo=o("ViTMAEForPreTraining"),Zpo=o(" (ViTMAE model)"),e_o=l(),i_=a("li"),loe=a("strong"),o_o=o("wav2vec2"),r_o=o(" \u2014 "),s$=a("a"),t_o=o("Wav2Vec2ForPreTraining"),a_o=o(" (Wav2Vec2 model)"),n_o=l(),d_=a("li"),ioe=a("strong"),s_o=o("xlm"),l_o=o(" \u2014 "),l$=a("a"),i_o=o("XLMWithLMHeadModel"),d_o=o(" (XLM model)"),c_o=l(),c_=a("li"),doe=a("strong"),m_o=o("xlm-roberta"),f_o=o(" \u2014 "),i$=a("a"),g_o=o("XLMRobertaForMaskedLM"),h_o=o(" (XLM-RoBERTa model)"),u_o=l(),m_=a("li"),coe=a("strong"),p_o=o("xlm-roberta-xl"),__o=o(" \u2014 "),d$=a("a"),b_o=o("XLMRobertaXLForMaskedLM"),v_o=o(" (XLM-RoBERTa-XL model)"),T_o=l(),f_=a("li"),moe=a("strong"),F_o=o("xlnet"),C_o=o(" \u2014 "),c$=a("a"),M_o=o("XLNetLMHeadModel"),E_o=o(" (XLNet model)"),y_o=l(),g_=a("p"),w_o=o("The model is set in evaluation mode by default using "),foe=a("code"),A_o=o("model.eval()"),L_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=a("code"),B_o=o("model.train()"),x_o=l(),hoe=a("p"),k_o=o("Examples:"),R_o=l(),m(rw.$$.fragment),Ske=l(),rd=a("h2"),h_=a("a"),uoe=a("span"),m(tw.$$.fragment),S_o=l(),poe=a("span"),P_o=o("AutoModelForCausalLM"),Pke=l(),Ko=a("div"),m(aw.$$.fragment),$_o=l(),td=a("p"),I_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_oe=a("code"),j_o=o("from_pretrained()"),N_o=o("class method or the "),boe=a("code"),D_o=o("from_config()"),q_o=o(`class
method.`),G_o=l(),nw=a("p"),O_o=o("This class cannot be instantiated directly using "),voe=a("code"),X_o=o("__init__()"),V_o=o(" (throws an error)."),z_o=l(),Wr=a("div"),m(sw.$$.fragment),W_o=l(),Toe=a("p"),Q_o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),H_o=l(),ad=a("p"),U_o=o(`Note:
Loading a model from its configuration file does `),Foe=a("strong"),J_o=o("not"),Y_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=a("code"),K_o=o("from_pretrained()"),Z_o=o("to load the model weights."),ebo=l(),Moe=a("p"),obo=o("Examples:"),rbo=l(),m(lw.$$.fragment),tbo=l(),De=a("div"),m(iw.$$.fragment),abo=l(),Eoe=a("p"),nbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sbo=l(),Wa=a("p"),lbo=o("The model class to instantiate is selected based on the "),yoe=a("code"),ibo=o("model_type"),dbo=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),cbo=o("pretrained_model_name_or_path"),mbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),fbo=o("pretrained_model_name_or_path"),gbo=o(":"),hbo=l(),$=a("ul"),u_=a("li"),Loe=a("strong"),ubo=o("bart"),pbo=o(" \u2014 "),m$=a("a"),_bo=o("BartForCausalLM"),bbo=o(" (BART model)"),vbo=l(),p_=a("li"),Boe=a("strong"),Tbo=o("bert"),Fbo=o(" \u2014 "),f$=a("a"),Cbo=o("BertLMHeadModel"),Mbo=o(" (BERT model)"),Ebo=l(),__=a("li"),xoe=a("strong"),ybo=o("bert-generation"),wbo=o(" \u2014 "),g$=a("a"),Abo=o("BertGenerationDecoder"),Lbo=o(" (Bert Generation model)"),Bbo=l(),b_=a("li"),koe=a("strong"),xbo=o("big_bird"),kbo=o(" \u2014 "),h$=a("a"),Rbo=o("BigBirdForCausalLM"),Sbo=o(" (BigBird model)"),Pbo=l(),v_=a("li"),Roe=a("strong"),$bo=o("bigbird_pegasus"),Ibo=o(" \u2014 "),u$=a("a"),jbo=o("BigBirdPegasusForCausalLM"),Nbo=o(" (BigBirdPegasus model)"),Dbo=l(),T_=a("li"),Soe=a("strong"),qbo=o("blenderbot"),Gbo=o(" \u2014 "),p$=a("a"),Obo=o("BlenderbotForCausalLM"),Xbo=o(" (Blenderbot model)"),Vbo=l(),F_=a("li"),Poe=a("strong"),zbo=o("blenderbot-small"),Wbo=o(" \u2014 "),_$=a("a"),Qbo=o("BlenderbotSmallForCausalLM"),Hbo=o(" (BlenderbotSmall model)"),Ubo=l(),C_=a("li"),$oe=a("strong"),Jbo=o("camembert"),Ybo=o(" \u2014 "),b$=a("a"),Kbo=o("CamembertForCausalLM"),Zbo=o(" (CamemBERT model)"),e2o=l(),M_=a("li"),Ioe=a("strong"),o2o=o("ctrl"),r2o=o(" \u2014 "),v$=a("a"),t2o=o("CTRLLMHeadModel"),a2o=o(" (CTRL model)"),n2o=l(),E_=a("li"),joe=a("strong"),s2o=o("data2vec-text"),l2o=o(" \u2014 "),T$=a("a"),i2o=o("Data2VecTextForCausalLM"),d2o=o(" (Data2VecText model)"),c2o=l(),y_=a("li"),Noe=a("strong"),m2o=o("electra"),f2o=o(" \u2014 "),F$=a("a"),g2o=o("ElectraForCausalLM"),h2o=o(" (ELECTRA model)"),u2o=l(),w_=a("li"),Doe=a("strong"),p2o=o("gpt2"),_2o=o(" \u2014 "),C$=a("a"),b2o=o("GPT2LMHeadModel"),v2o=o(" (OpenAI GPT-2 model)"),T2o=l(),A_=a("li"),qoe=a("strong"),F2o=o("gpt_neo"),C2o=o(" \u2014 "),M$=a("a"),M2o=o("GPTNeoForCausalLM"),E2o=o(" (GPT Neo model)"),y2o=l(),L_=a("li"),Goe=a("strong"),w2o=o("gptj"),A2o=o(" \u2014 "),E$=a("a"),L2o=o("GPTJForCausalLM"),B2o=o(" (GPT-J model)"),x2o=l(),B_=a("li"),Ooe=a("strong"),k2o=o("marian"),R2o=o(" \u2014 "),y$=a("a"),S2o=o("MarianForCausalLM"),P2o=o(" (Marian model)"),$2o=l(),x_=a("li"),Xoe=a("strong"),I2o=o("mbart"),j2o=o(" \u2014 "),w$=a("a"),N2o=o("MBartForCausalLM"),D2o=o(" (mBART model)"),q2o=l(),k_=a("li"),Voe=a("strong"),G2o=o("megatron-bert"),O2o=o(" \u2014 "),A$=a("a"),X2o=o("MegatronBertForCausalLM"),V2o=o(" (MegatronBert model)"),z2o=l(),R_=a("li"),zoe=a("strong"),W2o=o("openai-gpt"),Q2o=o(" \u2014 "),L$=a("a"),H2o=o("OpenAIGPTLMHeadModel"),U2o=o(" (OpenAI GPT model)"),J2o=l(),S_=a("li"),Woe=a("strong"),Y2o=o("pegasus"),K2o=o(" \u2014 "),B$=a("a"),Z2o=o("PegasusForCausalLM"),evo=o(" (Pegasus model)"),ovo=l(),P_=a("li"),Qoe=a("strong"),rvo=o("plbart"),tvo=o(" \u2014 "),x$=a("a"),avo=o("PLBartForCausalLM"),nvo=o(" (PLBart model)"),svo=l(),$_=a("li"),Hoe=a("strong"),lvo=o("prophetnet"),ivo=o(" \u2014 "),k$=a("a"),dvo=o("ProphetNetForCausalLM"),cvo=o(" (ProphetNet model)"),mvo=l(),I_=a("li"),Uoe=a("strong"),fvo=o("qdqbert"),gvo=o(" \u2014 "),R$=a("a"),hvo=o("QDQBertLMHeadModel"),uvo=o(" (QDQBert model)"),pvo=l(),j_=a("li"),Joe=a("strong"),_vo=o("reformer"),bvo=o(" \u2014 "),S$=a("a"),vvo=o("ReformerModelWithLMHead"),Tvo=o(" (Reformer model)"),Fvo=l(),N_=a("li"),Yoe=a("strong"),Cvo=o("rembert"),Mvo=o(" \u2014 "),P$=a("a"),Evo=o("RemBertForCausalLM"),yvo=o(" (RemBERT model)"),wvo=l(),D_=a("li"),Koe=a("strong"),Avo=o("roberta"),Lvo=o(" \u2014 "),$$=a("a"),Bvo=o("RobertaForCausalLM"),xvo=o(" (RoBERTa model)"),kvo=l(),q_=a("li"),Zoe=a("strong"),Rvo=o("roformer"),Svo=o(" \u2014 "),I$=a("a"),Pvo=o("RoFormerForCausalLM"),$vo=o(" (RoFormer model)"),Ivo=l(),G_=a("li"),ere=a("strong"),jvo=o("speech_to_text_2"),Nvo=o(" \u2014 "),j$=a("a"),Dvo=o("Speech2Text2ForCausalLM"),qvo=o(" (Speech2Text2 model)"),Gvo=l(),O_=a("li"),ore=a("strong"),Ovo=o("transfo-xl"),Xvo=o(" \u2014 "),N$=a("a"),Vvo=o("TransfoXLLMHeadModel"),zvo=o(" (Transformer-XL model)"),Wvo=l(),X_=a("li"),rre=a("strong"),Qvo=o("trocr"),Hvo=o(" \u2014 "),D$=a("a"),Uvo=o("TrOCRForCausalLM"),Jvo=o(" (TrOCR model)"),Yvo=l(),V_=a("li"),tre=a("strong"),Kvo=o("xglm"),Zvo=o(" \u2014 "),q$=a("a"),eTo=o("XGLMForCausalLM"),oTo=o(" (XGLM model)"),rTo=l(),z_=a("li"),are=a("strong"),tTo=o("xlm"),aTo=o(" \u2014 "),G$=a("a"),nTo=o("XLMWithLMHeadModel"),sTo=o(" (XLM model)"),lTo=l(),W_=a("li"),nre=a("strong"),iTo=o("xlm-prophetnet"),dTo=o(" \u2014 "),O$=a("a"),cTo=o("XLMProphetNetForCausalLM"),mTo=o(" (XLMProphetNet model)"),fTo=l(),Q_=a("li"),sre=a("strong"),gTo=o("xlm-roberta"),hTo=o(" \u2014 "),X$=a("a"),uTo=o("XLMRobertaForCausalLM"),pTo=o(" (XLM-RoBERTa model)"),_To=l(),H_=a("li"),lre=a("strong"),bTo=o("xlm-roberta-xl"),vTo=o(" \u2014 "),V$=a("a"),TTo=o("XLMRobertaXLForCausalLM"),FTo=o(" (XLM-RoBERTa-XL model)"),CTo=l(),U_=a("li"),ire=a("strong"),MTo=o("xlnet"),ETo=o(" \u2014 "),z$=a("a"),yTo=o("XLNetLMHeadModel"),wTo=o(" (XLNet model)"),ATo=l(),J_=a("p"),LTo=o("The model is set in evaluation mode by default using "),dre=a("code"),BTo=o("model.eval()"),xTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=a("code"),kTo=o("model.train()"),RTo=l(),mre=a("p"),STo=o("Examples:"),PTo=l(),m(dw.$$.fragment),$ke=l(),nd=a("h2"),Y_=a("a"),fre=a("span"),m(cw.$$.fragment),$To=l(),gre=a("span"),ITo=o("AutoModelForMaskedLM"),Ike=l(),Zo=a("div"),m(mw.$$.fragment),jTo=l(),sd=a("p"),NTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hre=a("code"),DTo=o("from_pretrained()"),qTo=o("class method or the "),ure=a("code"),GTo=o("from_config()"),OTo=o(`class
method.`),XTo=l(),fw=a("p"),VTo=o("This class cannot be instantiated directly using "),pre=a("code"),zTo=o("__init__()"),WTo=o(" (throws an error)."),QTo=l(),Qr=a("div"),m(gw.$$.fragment),HTo=l(),_re=a("p"),UTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JTo=l(),ld=a("p"),YTo=o(`Note:
Loading a model from its configuration file does `),bre=a("strong"),KTo=o("not"),ZTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("code"),e1o=o("from_pretrained()"),o1o=o("to load the model weights."),r1o=l(),Tre=a("p"),t1o=o("Examples:"),a1o=l(),m(hw.$$.fragment),n1o=l(),qe=a("div"),m(uw.$$.fragment),s1o=l(),Fre=a("p"),l1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i1o=l(),Qa=a("p"),d1o=o("The model class to instantiate is selected based on the "),Cre=a("code"),c1o=o("model_type"),m1o=o(` property of the config object (either
passed as an argument or loaded from `),Mre=a("code"),f1o=o("pretrained_model_name_or_path"),g1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=a("code"),h1o=o("pretrained_model_name_or_path"),u1o=o(":"),p1o=l(),I=a("ul"),K_=a("li"),yre=a("strong"),_1o=o("albert"),b1o=o(" \u2014 "),W$=a("a"),v1o=o("AlbertForMaskedLM"),T1o=o(" (ALBERT model)"),F1o=l(),Z_=a("li"),wre=a("strong"),C1o=o("bart"),M1o=o(" \u2014 "),Q$=a("a"),E1o=o("BartForConditionalGeneration"),y1o=o(" (BART model)"),w1o=l(),eb=a("li"),Are=a("strong"),A1o=o("bert"),L1o=o(" \u2014 "),H$=a("a"),B1o=o("BertForMaskedLM"),x1o=o(" (BERT model)"),k1o=l(),ob=a("li"),Lre=a("strong"),R1o=o("big_bird"),S1o=o(" \u2014 "),U$=a("a"),P1o=o("BigBirdForMaskedLM"),$1o=o(" (BigBird model)"),I1o=l(),rb=a("li"),Bre=a("strong"),j1o=o("camembert"),N1o=o(" \u2014 "),J$=a("a"),D1o=o("CamembertForMaskedLM"),q1o=o(" (CamemBERT model)"),G1o=l(),tb=a("li"),xre=a("strong"),O1o=o("convbert"),X1o=o(" \u2014 "),Y$=a("a"),V1o=o("ConvBertForMaskedLM"),z1o=o(" (ConvBERT model)"),W1o=l(),ab=a("li"),kre=a("strong"),Q1o=o("data2vec-text"),H1o=o(" \u2014 "),K$=a("a"),U1o=o("Data2VecTextForMaskedLM"),J1o=o(" (Data2VecText model)"),Y1o=l(),nb=a("li"),Rre=a("strong"),K1o=o("deberta"),Z1o=o(" \u2014 "),Z$=a("a"),eFo=o("DebertaForMaskedLM"),oFo=o(" (DeBERTa model)"),rFo=l(),sb=a("li"),Sre=a("strong"),tFo=o("deberta-v2"),aFo=o(" \u2014 "),eI=a("a"),nFo=o("DebertaV2ForMaskedLM"),sFo=o(" (DeBERTa-v2 model)"),lFo=l(),lb=a("li"),Pre=a("strong"),iFo=o("distilbert"),dFo=o(" \u2014 "),oI=a("a"),cFo=o("DistilBertForMaskedLM"),mFo=o(" (DistilBERT model)"),fFo=l(),ib=a("li"),$re=a("strong"),gFo=o("electra"),hFo=o(" \u2014 "),rI=a("a"),uFo=o("ElectraForMaskedLM"),pFo=o(" (ELECTRA model)"),_Fo=l(),db=a("li"),Ire=a("strong"),bFo=o("flaubert"),vFo=o(" \u2014 "),tI=a("a"),TFo=o("FlaubertWithLMHeadModel"),FFo=o(" (FlauBERT model)"),CFo=l(),cb=a("li"),jre=a("strong"),MFo=o("fnet"),EFo=o(" \u2014 "),aI=a("a"),yFo=o("FNetForMaskedLM"),wFo=o(" (FNet model)"),AFo=l(),mb=a("li"),Nre=a("strong"),LFo=o("funnel"),BFo=o(" \u2014 "),nI=a("a"),xFo=o("FunnelForMaskedLM"),kFo=o(" (Funnel Transformer model)"),RFo=l(),fb=a("li"),Dre=a("strong"),SFo=o("ibert"),PFo=o(" \u2014 "),sI=a("a"),$Fo=o("IBertForMaskedLM"),IFo=o(" (I-BERT model)"),jFo=l(),gb=a("li"),qre=a("strong"),NFo=o("layoutlm"),DFo=o(" \u2014 "),lI=a("a"),qFo=o("LayoutLMForMaskedLM"),GFo=o(" (LayoutLM model)"),OFo=l(),hb=a("li"),Gre=a("strong"),XFo=o("longformer"),VFo=o(" \u2014 "),iI=a("a"),zFo=o("LongformerForMaskedLM"),WFo=o(" (Longformer model)"),QFo=l(),ub=a("li"),Ore=a("strong"),HFo=o("mbart"),UFo=o(" \u2014 "),dI=a("a"),JFo=o("MBartForConditionalGeneration"),YFo=o(" (mBART model)"),KFo=l(),pb=a("li"),Xre=a("strong"),ZFo=o("megatron-bert"),eCo=o(" \u2014 "),cI=a("a"),oCo=o("MegatronBertForMaskedLM"),rCo=o(" (MegatronBert model)"),tCo=l(),_b=a("li"),Vre=a("strong"),aCo=o("mobilebert"),nCo=o(" \u2014 "),mI=a("a"),sCo=o("MobileBertForMaskedLM"),lCo=o(" (MobileBERT model)"),iCo=l(),bb=a("li"),zre=a("strong"),dCo=o("mpnet"),cCo=o(" \u2014 "),fI=a("a"),mCo=o("MPNetForMaskedLM"),fCo=o(" (MPNet model)"),gCo=l(),vb=a("li"),Wre=a("strong"),hCo=o("nystromformer"),uCo=o(" \u2014 "),gI=a("a"),pCo=o("NystromformerForMaskedLM"),_Co=o(" (Nystromformer model)"),bCo=l(),Tb=a("li"),Qre=a("strong"),vCo=o("perceiver"),TCo=o(" \u2014 "),hI=a("a"),FCo=o("PerceiverForMaskedLM"),CCo=o(" (Perceiver model)"),MCo=l(),Fb=a("li"),Hre=a("strong"),ECo=o("qdqbert"),yCo=o(" \u2014 "),uI=a("a"),wCo=o("QDQBertForMaskedLM"),ACo=o(" (QDQBert model)"),LCo=l(),Cb=a("li"),Ure=a("strong"),BCo=o("reformer"),xCo=o(" \u2014 "),pI=a("a"),kCo=o("ReformerForMaskedLM"),RCo=o(" (Reformer model)"),SCo=l(),Mb=a("li"),Jre=a("strong"),PCo=o("rembert"),$Co=o(" \u2014 "),_I=a("a"),ICo=o("RemBertForMaskedLM"),jCo=o(" (RemBERT model)"),NCo=l(),Eb=a("li"),Yre=a("strong"),DCo=o("roberta"),qCo=o(" \u2014 "),bI=a("a"),GCo=o("RobertaForMaskedLM"),OCo=o(" (RoBERTa model)"),XCo=l(),yb=a("li"),Kre=a("strong"),VCo=o("roformer"),zCo=o(" \u2014 "),vI=a("a"),WCo=o("RoFormerForMaskedLM"),QCo=o(" (RoFormer model)"),HCo=l(),wb=a("li"),Zre=a("strong"),UCo=o("squeezebert"),JCo=o(" \u2014 "),TI=a("a"),YCo=o("SqueezeBertForMaskedLM"),KCo=o(" (SqueezeBERT model)"),ZCo=l(),Ab=a("li"),ete=a("strong"),eMo=o("tapas"),oMo=o(" \u2014 "),FI=a("a"),rMo=o("TapasForMaskedLM"),tMo=o(" (TAPAS model)"),aMo=l(),Lb=a("li"),ote=a("strong"),nMo=o("wav2vec2"),sMo=o(" \u2014 "),rte=a("code"),lMo=o("Wav2Vec2ForMaskedLM"),iMo=o("(Wav2Vec2 model)"),dMo=l(),Bb=a("li"),tte=a("strong"),cMo=o("xlm"),mMo=o(" \u2014 "),CI=a("a"),fMo=o("XLMWithLMHeadModel"),gMo=o(" (XLM model)"),hMo=l(),xb=a("li"),ate=a("strong"),uMo=o("xlm-roberta"),pMo=o(" \u2014 "),MI=a("a"),_Mo=o("XLMRobertaForMaskedLM"),bMo=o(" (XLM-RoBERTa model)"),vMo=l(),kb=a("li"),nte=a("strong"),TMo=o("xlm-roberta-xl"),FMo=o(" \u2014 "),EI=a("a"),CMo=o("XLMRobertaXLForMaskedLM"),MMo=o(" (XLM-RoBERTa-XL model)"),EMo=l(),Rb=a("li"),ste=a("strong"),yMo=o("yoso"),wMo=o(" \u2014 "),yI=a("a"),AMo=o("YosoForMaskedLM"),LMo=o(" (YOSO model)"),BMo=l(),Sb=a("p"),xMo=o("The model is set in evaluation mode by default using "),lte=a("code"),kMo=o("model.eval()"),RMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=a("code"),SMo=o("model.train()"),PMo=l(),dte=a("p"),$Mo=o("Examples:"),IMo=l(),m(pw.$$.fragment),jke=l(),id=a("h2"),Pb=a("a"),cte=a("span"),m(_w.$$.fragment),jMo=l(),mte=a("span"),NMo=o("AutoModelForSeq2SeqLM"),Nke=l(),er=a("div"),m(bw.$$.fragment),DMo=l(),dd=a("p"),qMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fte=a("code"),GMo=o("from_pretrained()"),OMo=o("class method or the "),gte=a("code"),XMo=o("from_config()"),VMo=o(`class
method.`),zMo=l(),vw=a("p"),WMo=o("This class cannot be instantiated directly using "),hte=a("code"),QMo=o("__init__()"),HMo=o(" (throws an error)."),UMo=l(),Hr=a("div"),m(Tw.$$.fragment),JMo=l(),ute=a("p"),YMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KMo=l(),cd=a("p"),ZMo=o(`Note:
Loading a model from its configuration file does `),pte=a("strong"),e4o=o("not"),o4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=a("code"),r4o=o("from_pretrained()"),t4o=o("to load the model weights."),a4o=l(),bte=a("p"),n4o=o("Examples:"),s4o=l(),m(Fw.$$.fragment),l4o=l(),Ge=a("div"),m(Cw.$$.fragment),i4o=l(),vte=a("p"),d4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),c4o=l(),Ha=a("p"),m4o=o("The model class to instantiate is selected based on the "),Tte=a("code"),f4o=o("model_type"),g4o=o(` property of the config object (either
passed as an argument or loaded from `),Fte=a("code"),h4o=o("pretrained_model_name_or_path"),u4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),p4o=o("pretrained_model_name_or_path"),_4o=o(":"),b4o=l(),se=a("ul"),$b=a("li"),Mte=a("strong"),v4o=o("bart"),T4o=o(" \u2014 "),wI=a("a"),F4o=o("BartForConditionalGeneration"),C4o=o(" (BART model)"),M4o=l(),Ib=a("li"),Ete=a("strong"),E4o=o("bigbird_pegasus"),y4o=o(" \u2014 "),AI=a("a"),w4o=o("BigBirdPegasusForConditionalGeneration"),A4o=o(" (BigBirdPegasus model)"),L4o=l(),jb=a("li"),yte=a("strong"),B4o=o("blenderbot"),x4o=o(" \u2014 "),LI=a("a"),k4o=o("BlenderbotForConditionalGeneration"),R4o=o(" (Blenderbot model)"),S4o=l(),Nb=a("li"),wte=a("strong"),P4o=o("blenderbot-small"),$4o=o(" \u2014 "),BI=a("a"),I4o=o("BlenderbotSmallForConditionalGeneration"),j4o=o(" (BlenderbotSmall model)"),N4o=l(),Db=a("li"),Ate=a("strong"),D4o=o("encoder-decoder"),q4o=o(" \u2014 "),xI=a("a"),G4o=o("EncoderDecoderModel"),O4o=o(" (Encoder decoder model)"),X4o=l(),qb=a("li"),Lte=a("strong"),V4o=o("fsmt"),z4o=o(" \u2014 "),kI=a("a"),W4o=o("FSMTForConditionalGeneration"),Q4o=o(" (FairSeq Machine-Translation model)"),H4o=l(),Gb=a("li"),Bte=a("strong"),U4o=o("led"),J4o=o(" \u2014 "),RI=a("a"),Y4o=o("LEDForConditionalGeneration"),K4o=o(" (LED model)"),Z4o=l(),Ob=a("li"),xte=a("strong"),eEo=o("m2m_100"),oEo=o(" \u2014 "),SI=a("a"),rEo=o("M2M100ForConditionalGeneration"),tEo=o(" (M2M100 model)"),aEo=l(),Xb=a("li"),kte=a("strong"),nEo=o("marian"),sEo=o(" \u2014 "),PI=a("a"),lEo=o("MarianMTModel"),iEo=o(" (Marian model)"),dEo=l(),Vb=a("li"),Rte=a("strong"),cEo=o("mbart"),mEo=o(" \u2014 "),$I=a("a"),fEo=o("MBartForConditionalGeneration"),gEo=o(" (mBART model)"),hEo=l(),zb=a("li"),Ste=a("strong"),uEo=o("mt5"),pEo=o(" \u2014 "),II=a("a"),_Eo=o("MT5ForConditionalGeneration"),bEo=o(" (mT5 model)"),vEo=l(),Wb=a("li"),Pte=a("strong"),TEo=o("pegasus"),FEo=o(" \u2014 "),jI=a("a"),CEo=o("PegasusForConditionalGeneration"),MEo=o(" (Pegasus model)"),EEo=l(),Qb=a("li"),$te=a("strong"),yEo=o("plbart"),wEo=o(" \u2014 "),NI=a("a"),AEo=o("PLBartForConditionalGeneration"),LEo=o(" (PLBart model)"),BEo=l(),Hb=a("li"),Ite=a("strong"),xEo=o("prophetnet"),kEo=o(" \u2014 "),DI=a("a"),REo=o("ProphetNetForConditionalGeneration"),SEo=o(" (ProphetNet model)"),PEo=l(),Ub=a("li"),jte=a("strong"),$Eo=o("t5"),IEo=o(" \u2014 "),qI=a("a"),jEo=o("T5ForConditionalGeneration"),NEo=o(" (T5 model)"),DEo=l(),Jb=a("li"),Nte=a("strong"),qEo=o("xlm-prophetnet"),GEo=o(" \u2014 "),GI=a("a"),OEo=o("XLMProphetNetForConditionalGeneration"),XEo=o(" (XLMProphetNet model)"),VEo=l(),Yb=a("p"),zEo=o("The model is set in evaluation mode by default using "),Dte=a("code"),WEo=o("model.eval()"),QEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=a("code"),HEo=o("model.train()"),UEo=l(),Gte=a("p"),JEo=o("Examples:"),YEo=l(),m(Mw.$$.fragment),Dke=l(),md=a("h2"),Kb=a("a"),Ote=a("span"),m(Ew.$$.fragment),KEo=l(),Xte=a("span"),ZEo=o("AutoModelForSequenceClassification"),qke=l(),or=a("div"),m(yw.$$.fragment),e3o=l(),fd=a("p"),o3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vte=a("code"),r3o=o("from_pretrained()"),t3o=o("class method or the "),zte=a("code"),a3o=o("from_config()"),n3o=o(`class
method.`),s3o=l(),ww=a("p"),l3o=o("This class cannot be instantiated directly using "),Wte=a("code"),i3o=o("__init__()"),d3o=o(" (throws an error)."),c3o=l(),Ur=a("div"),m(Aw.$$.fragment),m3o=l(),Qte=a("p"),f3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),g3o=l(),gd=a("p"),h3o=o(`Note:
Loading a model from its configuration file does `),Hte=a("strong"),u3o=o("not"),p3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=a("code"),_3o=o("from_pretrained()"),b3o=o("to load the model weights."),v3o=l(),Jte=a("p"),T3o=o("Examples:"),F3o=l(),m(Lw.$$.fragment),C3o=l(),Oe=a("div"),m(Bw.$$.fragment),M3o=l(),Yte=a("p"),E3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y3o=l(),Ua=a("p"),w3o=o("The model class to instantiate is selected based on the "),Kte=a("code"),A3o=o("model_type"),L3o=o(` property of the config object (either
passed as an argument or loaded from `),Zte=a("code"),B3o=o("pretrained_model_name_or_path"),x3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=a("code"),k3o=o("pretrained_model_name_or_path"),R3o=o(":"),S3o=l(),A=a("ul"),Zb=a("li"),oae=a("strong"),P3o=o("albert"),$3o=o(" \u2014 "),OI=a("a"),I3o=o("AlbertForSequenceClassification"),j3o=o(" (ALBERT model)"),N3o=l(),e2=a("li"),rae=a("strong"),D3o=o("bart"),q3o=o(" \u2014 "),XI=a("a"),G3o=o("BartForSequenceClassification"),O3o=o(" (BART model)"),X3o=l(),o2=a("li"),tae=a("strong"),V3o=o("bert"),z3o=o(" \u2014 "),VI=a("a"),W3o=o("BertForSequenceClassification"),Q3o=o(" (BERT model)"),H3o=l(),r2=a("li"),aae=a("strong"),U3o=o("big_bird"),J3o=o(" \u2014 "),zI=a("a"),Y3o=o("BigBirdForSequenceClassification"),K3o=o(" (BigBird model)"),Z3o=l(),t2=a("li"),nae=a("strong"),e5o=o("bigbird_pegasus"),o5o=o(" \u2014 "),WI=a("a"),r5o=o("BigBirdPegasusForSequenceClassification"),t5o=o(" (BigBirdPegasus model)"),a5o=l(),a2=a("li"),sae=a("strong"),n5o=o("camembert"),s5o=o(" \u2014 "),QI=a("a"),l5o=o("CamembertForSequenceClassification"),i5o=o(" (CamemBERT model)"),d5o=l(),n2=a("li"),lae=a("strong"),c5o=o("canine"),m5o=o(" \u2014 "),HI=a("a"),f5o=o("CanineForSequenceClassification"),g5o=o(" (Canine model)"),h5o=l(),s2=a("li"),iae=a("strong"),u5o=o("convbert"),p5o=o(" \u2014 "),UI=a("a"),_5o=o("ConvBertForSequenceClassification"),b5o=o(" (ConvBERT model)"),v5o=l(),l2=a("li"),dae=a("strong"),T5o=o("ctrl"),F5o=o(" \u2014 "),JI=a("a"),C5o=o("CTRLForSequenceClassification"),M5o=o(" (CTRL model)"),E5o=l(),i2=a("li"),cae=a("strong"),y5o=o("data2vec-text"),w5o=o(" \u2014 "),YI=a("a"),A5o=o("Data2VecTextForSequenceClassification"),L5o=o(" (Data2VecText model)"),B5o=l(),d2=a("li"),mae=a("strong"),x5o=o("deberta"),k5o=o(" \u2014 "),KI=a("a"),R5o=o("DebertaForSequenceClassification"),S5o=o(" (DeBERTa model)"),P5o=l(),c2=a("li"),fae=a("strong"),$5o=o("deberta-v2"),I5o=o(" \u2014 "),ZI=a("a"),j5o=o("DebertaV2ForSequenceClassification"),N5o=o(" (DeBERTa-v2 model)"),D5o=l(),m2=a("li"),gae=a("strong"),q5o=o("distilbert"),G5o=o(" \u2014 "),ej=a("a"),O5o=o("DistilBertForSequenceClassification"),X5o=o(" (DistilBERT model)"),V5o=l(),f2=a("li"),hae=a("strong"),z5o=o("electra"),W5o=o(" \u2014 "),oj=a("a"),Q5o=o("ElectraForSequenceClassification"),H5o=o(" (ELECTRA model)"),U5o=l(),g2=a("li"),uae=a("strong"),J5o=o("flaubert"),Y5o=o(" \u2014 "),rj=a("a"),K5o=o("FlaubertForSequenceClassification"),Z5o=o(" (FlauBERT model)"),eyo=l(),h2=a("li"),pae=a("strong"),oyo=o("fnet"),ryo=o(" \u2014 "),tj=a("a"),tyo=o("FNetForSequenceClassification"),ayo=o(" (FNet model)"),nyo=l(),u2=a("li"),_ae=a("strong"),syo=o("funnel"),lyo=o(" \u2014 "),aj=a("a"),iyo=o("FunnelForSequenceClassification"),dyo=o(" (Funnel Transformer model)"),cyo=l(),p2=a("li"),bae=a("strong"),myo=o("gpt2"),fyo=o(" \u2014 "),nj=a("a"),gyo=o("GPT2ForSequenceClassification"),hyo=o(" (OpenAI GPT-2 model)"),uyo=l(),_2=a("li"),vae=a("strong"),pyo=o("gpt_neo"),_yo=o(" \u2014 "),sj=a("a"),byo=o("GPTNeoForSequenceClassification"),vyo=o(" (GPT Neo model)"),Tyo=l(),b2=a("li"),Tae=a("strong"),Fyo=o("gptj"),Cyo=o(" \u2014 "),lj=a("a"),Myo=o("GPTJForSequenceClassification"),Eyo=o(" (GPT-J model)"),yyo=l(),v2=a("li"),Fae=a("strong"),wyo=o("ibert"),Ayo=o(" \u2014 "),ij=a("a"),Lyo=o("IBertForSequenceClassification"),Byo=o(" (I-BERT model)"),xyo=l(),T2=a("li"),Cae=a("strong"),kyo=o("layoutlm"),Ryo=o(" \u2014 "),dj=a("a"),Syo=o("LayoutLMForSequenceClassification"),Pyo=o(" (LayoutLM model)"),$yo=l(),F2=a("li"),Mae=a("strong"),Iyo=o("layoutlmv2"),jyo=o(" \u2014 "),cj=a("a"),Nyo=o("LayoutLMv2ForSequenceClassification"),Dyo=o(" (LayoutLMv2 model)"),qyo=l(),C2=a("li"),Eae=a("strong"),Gyo=o("led"),Oyo=o(" \u2014 "),mj=a("a"),Xyo=o("LEDForSequenceClassification"),Vyo=o(" (LED model)"),zyo=l(),M2=a("li"),yae=a("strong"),Wyo=o("longformer"),Qyo=o(" \u2014 "),fj=a("a"),Hyo=o("LongformerForSequenceClassification"),Uyo=o(" (Longformer model)"),Jyo=l(),E2=a("li"),wae=a("strong"),Yyo=o("mbart"),Kyo=o(" \u2014 "),gj=a("a"),Zyo=o("MBartForSequenceClassification"),ewo=o(" (mBART model)"),owo=l(),y2=a("li"),Aae=a("strong"),rwo=o("megatron-bert"),two=o(" \u2014 "),hj=a("a"),awo=o("MegatronBertForSequenceClassification"),nwo=o(" (MegatronBert model)"),swo=l(),w2=a("li"),Lae=a("strong"),lwo=o("mobilebert"),iwo=o(" \u2014 "),uj=a("a"),dwo=o("MobileBertForSequenceClassification"),cwo=o(" (MobileBERT model)"),mwo=l(),A2=a("li"),Bae=a("strong"),fwo=o("mpnet"),gwo=o(" \u2014 "),pj=a("a"),hwo=o("MPNetForSequenceClassification"),uwo=o(" (MPNet model)"),pwo=l(),L2=a("li"),xae=a("strong"),_wo=o("nystromformer"),bwo=o(" \u2014 "),_j=a("a"),vwo=o("NystromformerForSequenceClassification"),Two=o(" (Nystromformer model)"),Fwo=l(),B2=a("li"),kae=a("strong"),Cwo=o("openai-gpt"),Mwo=o(" \u2014 "),bj=a("a"),Ewo=o("OpenAIGPTForSequenceClassification"),ywo=o(" (OpenAI GPT model)"),wwo=l(),x2=a("li"),Rae=a("strong"),Awo=o("perceiver"),Lwo=o(" \u2014 "),vj=a("a"),Bwo=o("PerceiverForSequenceClassification"),xwo=o(" (Perceiver model)"),kwo=l(),k2=a("li"),Sae=a("strong"),Rwo=o("plbart"),Swo=o(" \u2014 "),Tj=a("a"),Pwo=o("PLBartForSequenceClassification"),$wo=o(" (PLBart model)"),Iwo=l(),R2=a("li"),Pae=a("strong"),jwo=o("qdqbert"),Nwo=o(" \u2014 "),Fj=a("a"),Dwo=o("QDQBertForSequenceClassification"),qwo=o(" (QDQBert model)"),Gwo=l(),S2=a("li"),$ae=a("strong"),Owo=o("reformer"),Xwo=o(" \u2014 "),Cj=a("a"),Vwo=o("ReformerForSequenceClassification"),zwo=o(" (Reformer model)"),Wwo=l(),P2=a("li"),Iae=a("strong"),Qwo=o("rembert"),Hwo=o(" \u2014 "),Mj=a("a"),Uwo=o("RemBertForSequenceClassification"),Jwo=o(" (RemBERT model)"),Ywo=l(),$2=a("li"),jae=a("strong"),Kwo=o("roberta"),Zwo=o(" \u2014 "),Ej=a("a"),e6o=o("RobertaForSequenceClassification"),o6o=o(" (RoBERTa model)"),r6o=l(),I2=a("li"),Nae=a("strong"),t6o=o("roformer"),a6o=o(" \u2014 "),yj=a("a"),n6o=o("RoFormerForSequenceClassification"),s6o=o(" (RoFormer model)"),l6o=l(),j2=a("li"),Dae=a("strong"),i6o=o("squeezebert"),d6o=o(" \u2014 "),wj=a("a"),c6o=o("SqueezeBertForSequenceClassification"),m6o=o(" (SqueezeBERT model)"),f6o=l(),N2=a("li"),qae=a("strong"),g6o=o("tapas"),h6o=o(" \u2014 "),Aj=a("a"),u6o=o("TapasForSequenceClassification"),p6o=o(" (TAPAS model)"),_6o=l(),D2=a("li"),Gae=a("strong"),b6o=o("transfo-xl"),v6o=o(" \u2014 "),Lj=a("a"),T6o=o("TransfoXLForSequenceClassification"),F6o=o(" (Transformer-XL model)"),C6o=l(),q2=a("li"),Oae=a("strong"),M6o=o("xlm"),E6o=o(" \u2014 "),Bj=a("a"),y6o=o("XLMForSequenceClassification"),w6o=o(" (XLM model)"),A6o=l(),G2=a("li"),Xae=a("strong"),L6o=o("xlm-roberta"),B6o=o(" \u2014 "),xj=a("a"),x6o=o("XLMRobertaForSequenceClassification"),k6o=o(" (XLM-RoBERTa model)"),R6o=l(),O2=a("li"),Vae=a("strong"),S6o=o("xlm-roberta-xl"),P6o=o(" \u2014 "),kj=a("a"),$6o=o("XLMRobertaXLForSequenceClassification"),I6o=o(" (XLM-RoBERTa-XL model)"),j6o=l(),X2=a("li"),zae=a("strong"),N6o=o("xlnet"),D6o=o(" \u2014 "),Rj=a("a"),q6o=o("XLNetForSequenceClassification"),G6o=o(" (XLNet model)"),O6o=l(),V2=a("li"),Wae=a("strong"),X6o=o("yoso"),V6o=o(" \u2014 "),Sj=a("a"),z6o=o("YosoForSequenceClassification"),W6o=o(" (YOSO model)"),Q6o=l(),z2=a("p"),H6o=o("The model is set in evaluation mode by default using "),Qae=a("code"),U6o=o("model.eval()"),J6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),Y6o=o("model.train()"),K6o=l(),Uae=a("p"),Z6o=o("Examples:"),eAo=l(),m(xw.$$.fragment),Gke=l(),hd=a("h2"),W2=a("a"),Jae=a("span"),m(kw.$$.fragment),oAo=l(),Yae=a("span"),rAo=o("AutoModelForMultipleChoice"),Oke=l(),rr=a("div"),m(Rw.$$.fragment),tAo=l(),ud=a("p"),aAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kae=a("code"),nAo=o("from_pretrained()"),sAo=o("class method or the "),Zae=a("code"),lAo=o("from_config()"),iAo=o(`class
method.`),dAo=l(),Sw=a("p"),cAo=o("This class cannot be instantiated directly using "),ene=a("code"),mAo=o("__init__()"),fAo=o(" (throws an error)."),gAo=l(),Jr=a("div"),m(Pw.$$.fragment),hAo=l(),one=a("p"),uAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pAo=l(),pd=a("p"),_Ao=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),bAo=o("not"),vAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("code"),TAo=o("from_pretrained()"),FAo=o("to load the model weights."),CAo=l(),ane=a("p"),MAo=o("Examples:"),EAo=l(),m($w.$$.fragment),yAo=l(),Xe=a("div"),m(Iw.$$.fragment),wAo=l(),nne=a("p"),AAo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LAo=l(),Ja=a("p"),BAo=o("The model class to instantiate is selected based on the "),sne=a("code"),xAo=o("model_type"),kAo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),RAo=o("pretrained_model_name_or_path"),SAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),PAo=o("pretrained_model_name_or_path"),$Ao=o(":"),IAo=l(),G=a("ul"),Q2=a("li"),dne=a("strong"),jAo=o("albert"),NAo=o(" \u2014 "),Pj=a("a"),DAo=o("AlbertForMultipleChoice"),qAo=o(" (ALBERT model)"),GAo=l(),H2=a("li"),cne=a("strong"),OAo=o("bert"),XAo=o(" \u2014 "),$j=a("a"),VAo=o("BertForMultipleChoice"),zAo=o(" (BERT model)"),WAo=l(),U2=a("li"),mne=a("strong"),QAo=o("big_bird"),HAo=o(" \u2014 "),Ij=a("a"),UAo=o("BigBirdForMultipleChoice"),JAo=o(" (BigBird model)"),YAo=l(),J2=a("li"),fne=a("strong"),KAo=o("camembert"),ZAo=o(" \u2014 "),jj=a("a"),e0o=o("CamembertForMultipleChoice"),o0o=o(" (CamemBERT model)"),r0o=l(),Y2=a("li"),gne=a("strong"),t0o=o("canine"),a0o=o(" \u2014 "),Nj=a("a"),n0o=o("CanineForMultipleChoice"),s0o=o(" (Canine model)"),l0o=l(),K2=a("li"),hne=a("strong"),i0o=o("convbert"),d0o=o(" \u2014 "),Dj=a("a"),c0o=o("ConvBertForMultipleChoice"),m0o=o(" (ConvBERT model)"),f0o=l(),Z2=a("li"),une=a("strong"),g0o=o("data2vec-text"),h0o=o(" \u2014 "),qj=a("a"),u0o=o("Data2VecTextForMultipleChoice"),p0o=o(" (Data2VecText model)"),_0o=l(),ev=a("li"),pne=a("strong"),b0o=o("distilbert"),v0o=o(" \u2014 "),Gj=a("a"),T0o=o("DistilBertForMultipleChoice"),F0o=o(" (DistilBERT model)"),C0o=l(),ov=a("li"),_ne=a("strong"),M0o=o("electra"),E0o=o(" \u2014 "),Oj=a("a"),y0o=o("ElectraForMultipleChoice"),w0o=o(" (ELECTRA model)"),A0o=l(),rv=a("li"),bne=a("strong"),L0o=o("flaubert"),B0o=o(" \u2014 "),Xj=a("a"),x0o=o("FlaubertForMultipleChoice"),k0o=o(" (FlauBERT model)"),R0o=l(),tv=a("li"),vne=a("strong"),S0o=o("fnet"),P0o=o(" \u2014 "),Vj=a("a"),$0o=o("FNetForMultipleChoice"),I0o=o(" (FNet model)"),j0o=l(),av=a("li"),Tne=a("strong"),N0o=o("funnel"),D0o=o(" \u2014 "),zj=a("a"),q0o=o("FunnelForMultipleChoice"),G0o=o(" (Funnel Transformer model)"),O0o=l(),nv=a("li"),Fne=a("strong"),X0o=o("ibert"),V0o=o(" \u2014 "),Wj=a("a"),z0o=o("IBertForMultipleChoice"),W0o=o(" (I-BERT model)"),Q0o=l(),sv=a("li"),Cne=a("strong"),H0o=o("longformer"),U0o=o(" \u2014 "),Qj=a("a"),J0o=o("LongformerForMultipleChoice"),Y0o=o(" (Longformer model)"),K0o=l(),lv=a("li"),Mne=a("strong"),Z0o=o("megatron-bert"),eLo=o(" \u2014 "),Hj=a("a"),oLo=o("MegatronBertForMultipleChoice"),rLo=o(" (MegatronBert model)"),tLo=l(),iv=a("li"),Ene=a("strong"),aLo=o("mobilebert"),nLo=o(" \u2014 "),Uj=a("a"),sLo=o("MobileBertForMultipleChoice"),lLo=o(" (MobileBERT model)"),iLo=l(),dv=a("li"),yne=a("strong"),dLo=o("mpnet"),cLo=o(" \u2014 "),Jj=a("a"),mLo=o("MPNetForMultipleChoice"),fLo=o(" (MPNet model)"),gLo=l(),cv=a("li"),wne=a("strong"),hLo=o("nystromformer"),uLo=o(" \u2014 "),Yj=a("a"),pLo=o("NystromformerForMultipleChoice"),_Lo=o(" (Nystromformer model)"),bLo=l(),mv=a("li"),Ane=a("strong"),vLo=o("qdqbert"),TLo=o(" \u2014 "),Kj=a("a"),FLo=o("QDQBertForMultipleChoice"),CLo=o(" (QDQBert model)"),MLo=l(),fv=a("li"),Lne=a("strong"),ELo=o("rembert"),yLo=o(" \u2014 "),Zj=a("a"),wLo=o("RemBertForMultipleChoice"),ALo=o(" (RemBERT model)"),LLo=l(),gv=a("li"),Bne=a("strong"),BLo=o("roberta"),xLo=o(" \u2014 "),eN=a("a"),kLo=o("RobertaForMultipleChoice"),RLo=o(" (RoBERTa model)"),SLo=l(),hv=a("li"),xne=a("strong"),PLo=o("roformer"),$Lo=o(" \u2014 "),oN=a("a"),ILo=o("RoFormerForMultipleChoice"),jLo=o(" (RoFormer model)"),NLo=l(),uv=a("li"),kne=a("strong"),DLo=o("squeezebert"),qLo=o(" \u2014 "),rN=a("a"),GLo=o("SqueezeBertForMultipleChoice"),OLo=o(" (SqueezeBERT model)"),XLo=l(),pv=a("li"),Rne=a("strong"),VLo=o("xlm"),zLo=o(" \u2014 "),tN=a("a"),WLo=o("XLMForMultipleChoice"),QLo=o(" (XLM model)"),HLo=l(),_v=a("li"),Sne=a("strong"),ULo=o("xlm-roberta"),JLo=o(" \u2014 "),aN=a("a"),YLo=o("XLMRobertaForMultipleChoice"),KLo=o(" (XLM-RoBERTa model)"),ZLo=l(),bv=a("li"),Pne=a("strong"),e7o=o("xlm-roberta-xl"),o7o=o(" \u2014 "),nN=a("a"),r7o=o("XLMRobertaXLForMultipleChoice"),t7o=o(" (XLM-RoBERTa-XL model)"),a7o=l(),vv=a("li"),$ne=a("strong"),n7o=o("xlnet"),s7o=o(" \u2014 "),sN=a("a"),l7o=o("XLNetForMultipleChoice"),i7o=o(" (XLNet model)"),d7o=l(),Tv=a("li"),Ine=a("strong"),c7o=o("yoso"),m7o=o(" \u2014 "),lN=a("a"),f7o=o("YosoForMultipleChoice"),g7o=o(" (YOSO model)"),h7o=l(),Fv=a("p"),u7o=o("The model is set in evaluation mode by default using "),jne=a("code"),p7o=o("model.eval()"),_7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nne=a("code"),b7o=o("model.train()"),v7o=l(),Dne=a("p"),T7o=o("Examples:"),F7o=l(),m(jw.$$.fragment),Xke=l(),_d=a("h2"),Cv=a("a"),qne=a("span"),m(Nw.$$.fragment),C7o=l(),Gne=a("span"),M7o=o("AutoModelForNextSentencePrediction"),Vke=l(),tr=a("div"),m(Dw.$$.fragment),E7o=l(),bd=a("p"),y7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),One=a("code"),w7o=o("from_pretrained()"),A7o=o("class method or the "),Xne=a("code"),L7o=o("from_config()"),B7o=o(`class
method.`),x7o=l(),qw=a("p"),k7o=o("This class cannot be instantiated directly using "),Vne=a("code"),R7o=o("__init__()"),S7o=o(" (throws an error)."),P7o=l(),Yr=a("div"),m(Gw.$$.fragment),$7o=l(),zne=a("p"),I7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),j7o=l(),vd=a("p"),N7o=o(`Note:
Loading a model from its configuration file does `),Wne=a("strong"),D7o=o("not"),q7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=a("code"),G7o=o("from_pretrained()"),O7o=o("to load the model weights."),X7o=l(),Hne=a("p"),V7o=o("Examples:"),z7o=l(),m(Ow.$$.fragment),W7o=l(),Ve=a("div"),m(Xw.$$.fragment),Q7o=l(),Une=a("p"),H7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),U7o=l(),Ya=a("p"),J7o=o("The model class to instantiate is selected based on the "),Jne=a("code"),Y7o=o("model_type"),K7o=o(` property of the config object (either
passed as an argument or loaded from `),Yne=a("code"),Z7o=o("pretrained_model_name_or_path"),e8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=a("code"),o8o=o("pretrained_model_name_or_path"),r8o=o(":"),t8o=l(),da=a("ul"),Mv=a("li"),Zne=a("strong"),a8o=o("bert"),n8o=o(" \u2014 "),iN=a("a"),s8o=o("BertForNextSentencePrediction"),l8o=o(" (BERT model)"),i8o=l(),Ev=a("li"),ese=a("strong"),d8o=o("fnet"),c8o=o(" \u2014 "),dN=a("a"),m8o=o("FNetForNextSentencePrediction"),f8o=o(" (FNet model)"),g8o=l(),yv=a("li"),ose=a("strong"),h8o=o("megatron-bert"),u8o=o(" \u2014 "),cN=a("a"),p8o=o("MegatronBertForNextSentencePrediction"),_8o=o(" (MegatronBert model)"),b8o=l(),wv=a("li"),rse=a("strong"),v8o=o("mobilebert"),T8o=o(" \u2014 "),mN=a("a"),F8o=o("MobileBertForNextSentencePrediction"),C8o=o(" (MobileBERT model)"),M8o=l(),Av=a("li"),tse=a("strong"),E8o=o("qdqbert"),y8o=o(" \u2014 "),fN=a("a"),w8o=o("QDQBertForNextSentencePrediction"),A8o=o(" (QDQBert model)"),L8o=l(),Lv=a("p"),B8o=o("The model is set in evaluation mode by default using "),ase=a("code"),x8o=o("model.eval()"),k8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=a("code"),R8o=o("model.train()"),S8o=l(),sse=a("p"),P8o=o("Examples:"),$8o=l(),m(Vw.$$.fragment),zke=l(),Td=a("h2"),Bv=a("a"),lse=a("span"),m(zw.$$.fragment),I8o=l(),ise=a("span"),j8o=o("AutoModelForTokenClassification"),Wke=l(),ar=a("div"),m(Ww.$$.fragment),N8o=l(),Fd=a("p"),D8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dse=a("code"),q8o=o("from_pretrained()"),G8o=o("class method or the "),cse=a("code"),O8o=o("from_config()"),X8o=o(`class
method.`),V8o=l(),Qw=a("p"),z8o=o("This class cannot be instantiated directly using "),mse=a("code"),W8o=o("__init__()"),Q8o=o(" (throws an error)."),H8o=l(),Kr=a("div"),m(Hw.$$.fragment),U8o=l(),fse=a("p"),J8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y8o=l(),Cd=a("p"),K8o=o(`Note:
Loading a model from its configuration file does `),gse=a("strong"),Z8o=o("not"),e9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=a("code"),o9o=o("from_pretrained()"),r9o=o("to load the model weights."),t9o=l(),use=a("p"),a9o=o("Examples:"),n9o=l(),m(Uw.$$.fragment),s9o=l(),ze=a("div"),m(Jw.$$.fragment),l9o=l(),pse=a("p"),i9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d9o=l(),Ka=a("p"),c9o=o("The model class to instantiate is selected based on the "),_se=a("code"),m9o=o("model_type"),f9o=o(` property of the config object (either
passed as an argument or loaded from `),bse=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=a("code"),u9o=o("pretrained_model_name_or_path"),p9o=o(":"),_9o=l(),D=a("ul"),xv=a("li"),Tse=a("strong"),b9o=o("albert"),v9o=o(" \u2014 "),gN=a("a"),T9o=o("AlbertForTokenClassification"),F9o=o(" (ALBERT model)"),C9o=l(),kv=a("li"),Fse=a("strong"),M9o=o("bert"),E9o=o(" \u2014 "),hN=a("a"),y9o=o("BertForTokenClassification"),w9o=o(" (BERT model)"),A9o=l(),Rv=a("li"),Cse=a("strong"),L9o=o("big_bird"),B9o=o(" \u2014 "),uN=a("a"),x9o=o("BigBirdForTokenClassification"),k9o=o(" (BigBird model)"),R9o=l(),Sv=a("li"),Mse=a("strong"),S9o=o("camembert"),P9o=o(" \u2014 "),pN=a("a"),$9o=o("CamembertForTokenClassification"),I9o=o(" (CamemBERT model)"),j9o=l(),Pv=a("li"),Ese=a("strong"),N9o=o("canine"),D9o=o(" \u2014 "),_N=a("a"),q9o=o("CanineForTokenClassification"),G9o=o(" (Canine model)"),O9o=l(),$v=a("li"),yse=a("strong"),X9o=o("convbert"),V9o=o(" \u2014 "),bN=a("a"),z9o=o("ConvBertForTokenClassification"),W9o=o(" (ConvBERT model)"),Q9o=l(),Iv=a("li"),wse=a("strong"),H9o=o("data2vec-text"),U9o=o(" \u2014 "),vN=a("a"),J9o=o("Data2VecTextForTokenClassification"),Y9o=o(" (Data2VecText model)"),K9o=l(),jv=a("li"),Ase=a("strong"),Z9o=o("deberta"),eBo=o(" \u2014 "),TN=a("a"),oBo=o("DebertaForTokenClassification"),rBo=o(" (DeBERTa model)"),tBo=l(),Nv=a("li"),Lse=a("strong"),aBo=o("deberta-v2"),nBo=o(" \u2014 "),FN=a("a"),sBo=o("DebertaV2ForTokenClassification"),lBo=o(" (DeBERTa-v2 model)"),iBo=l(),Dv=a("li"),Bse=a("strong"),dBo=o("distilbert"),cBo=o(" \u2014 "),CN=a("a"),mBo=o("DistilBertForTokenClassification"),fBo=o(" (DistilBERT model)"),gBo=l(),qv=a("li"),xse=a("strong"),hBo=o("electra"),uBo=o(" \u2014 "),MN=a("a"),pBo=o("ElectraForTokenClassification"),_Bo=o(" (ELECTRA model)"),bBo=l(),Gv=a("li"),kse=a("strong"),vBo=o("flaubert"),TBo=o(" \u2014 "),EN=a("a"),FBo=o("FlaubertForTokenClassification"),CBo=o(" (FlauBERT model)"),MBo=l(),Ov=a("li"),Rse=a("strong"),EBo=o("fnet"),yBo=o(" \u2014 "),yN=a("a"),wBo=o("FNetForTokenClassification"),ABo=o(" (FNet model)"),LBo=l(),Xv=a("li"),Sse=a("strong"),BBo=o("funnel"),xBo=o(" \u2014 "),wN=a("a"),kBo=o("FunnelForTokenClassification"),RBo=o(" (Funnel Transformer model)"),SBo=l(),Vv=a("li"),Pse=a("strong"),PBo=o("gpt2"),$Bo=o(" \u2014 "),AN=a("a"),IBo=o("GPT2ForTokenClassification"),jBo=o(" (OpenAI GPT-2 model)"),NBo=l(),zv=a("li"),$se=a("strong"),DBo=o("ibert"),qBo=o(" \u2014 "),LN=a("a"),GBo=o("IBertForTokenClassification"),OBo=o(" (I-BERT model)"),XBo=l(),Wv=a("li"),Ise=a("strong"),VBo=o("layoutlm"),zBo=o(" \u2014 "),BN=a("a"),WBo=o("LayoutLMForTokenClassification"),QBo=o(" (LayoutLM model)"),HBo=l(),Qv=a("li"),jse=a("strong"),UBo=o("layoutlmv2"),JBo=o(" \u2014 "),xN=a("a"),YBo=o("LayoutLMv2ForTokenClassification"),KBo=o(" (LayoutLMv2 model)"),ZBo=l(),Hv=a("li"),Nse=a("strong"),exo=o("longformer"),oxo=o(" \u2014 "),kN=a("a"),rxo=o("LongformerForTokenClassification"),txo=o(" (Longformer model)"),axo=l(),Uv=a("li"),Dse=a("strong"),nxo=o("megatron-bert"),sxo=o(" \u2014 "),RN=a("a"),lxo=o("MegatronBertForTokenClassification"),ixo=o(" (MegatronBert model)"),dxo=l(),Jv=a("li"),qse=a("strong"),cxo=o("mobilebert"),mxo=o(" \u2014 "),SN=a("a"),fxo=o("MobileBertForTokenClassification"),gxo=o(" (MobileBERT model)"),hxo=l(),Yv=a("li"),Gse=a("strong"),uxo=o("mpnet"),pxo=o(" \u2014 "),PN=a("a"),_xo=o("MPNetForTokenClassification"),bxo=o(" (MPNet model)"),vxo=l(),Kv=a("li"),Ose=a("strong"),Txo=o("nystromformer"),Fxo=o(" \u2014 "),$N=a("a"),Cxo=o("NystromformerForTokenClassification"),Mxo=o(" (Nystromformer model)"),Exo=l(),Zv=a("li"),Xse=a("strong"),yxo=o("qdqbert"),wxo=o(" \u2014 "),IN=a("a"),Axo=o("QDQBertForTokenClassification"),Lxo=o(" (QDQBert model)"),Bxo=l(),eT=a("li"),Vse=a("strong"),xxo=o("rembert"),kxo=o(" \u2014 "),jN=a("a"),Rxo=o("RemBertForTokenClassification"),Sxo=o(" (RemBERT model)"),Pxo=l(),oT=a("li"),zse=a("strong"),$xo=o("roberta"),Ixo=o(" \u2014 "),NN=a("a"),jxo=o("RobertaForTokenClassification"),Nxo=o(" (RoBERTa model)"),Dxo=l(),rT=a("li"),Wse=a("strong"),qxo=o("roformer"),Gxo=o(" \u2014 "),DN=a("a"),Oxo=o("RoFormerForTokenClassification"),Xxo=o(" (RoFormer model)"),Vxo=l(),tT=a("li"),Qse=a("strong"),zxo=o("squeezebert"),Wxo=o(" \u2014 "),qN=a("a"),Qxo=o("SqueezeBertForTokenClassification"),Hxo=o(" (SqueezeBERT model)"),Uxo=l(),aT=a("li"),Hse=a("strong"),Jxo=o("xlm"),Yxo=o(" \u2014 "),GN=a("a"),Kxo=o("XLMForTokenClassification"),Zxo=o(" (XLM model)"),eko=l(),nT=a("li"),Use=a("strong"),oko=o("xlm-roberta"),rko=o(" \u2014 "),ON=a("a"),tko=o("XLMRobertaForTokenClassification"),ako=o(" (XLM-RoBERTa model)"),nko=l(),sT=a("li"),Jse=a("strong"),sko=o("xlm-roberta-xl"),lko=o(" \u2014 "),XN=a("a"),iko=o("XLMRobertaXLForTokenClassification"),dko=o(" (XLM-RoBERTa-XL model)"),cko=l(),lT=a("li"),Yse=a("strong"),mko=o("xlnet"),fko=o(" \u2014 "),VN=a("a"),gko=o("XLNetForTokenClassification"),hko=o(" (XLNet model)"),uko=l(),iT=a("li"),Kse=a("strong"),pko=o("yoso"),_ko=o(" \u2014 "),zN=a("a"),bko=o("YosoForTokenClassification"),vko=o(" (YOSO model)"),Tko=l(),dT=a("p"),Fko=o("The model is set in evaluation mode by default using "),Zse=a("code"),Cko=o("model.eval()"),Mko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),Eko=o("model.train()"),yko=l(),ole=a("p"),wko=o("Examples:"),Ako=l(),m(Yw.$$.fragment),Qke=l(),Md=a("h2"),cT=a("a"),rle=a("span"),m(Kw.$$.fragment),Lko=l(),tle=a("span"),Bko=o("AutoModelForQuestionAnswering"),Hke=l(),nr=a("div"),m(Zw.$$.fragment),xko=l(),Ed=a("p"),kko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ale=a("code"),Rko=o("from_pretrained()"),Sko=o("class method or the "),nle=a("code"),Pko=o("from_config()"),$ko=o(`class
method.`),Iko=l(),e6=a("p"),jko=o("This class cannot be instantiated directly using "),sle=a("code"),Nko=o("__init__()"),Dko=o(" (throws an error)."),qko=l(),Zr=a("div"),m(o6.$$.fragment),Gko=l(),lle=a("p"),Oko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xko=l(),yd=a("p"),Vko=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),zko=o("not"),Wko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=a("code"),Qko=o("from_pretrained()"),Hko=o("to load the model weights."),Uko=l(),cle=a("p"),Jko=o("Examples:"),Yko=l(),m(r6.$$.fragment),Kko=l(),We=a("div"),m(t6.$$.fragment),Zko=l(),mle=a("p"),eRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oRo=l(),Za=a("p"),rRo=o("The model class to instantiate is selected based on the "),fle=a("code"),tRo=o("model_type"),aRo=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),nRo=o("pretrained_model_name_or_path"),sRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),lRo=o("pretrained_model_name_or_path"),iRo=o(":"),dRo=l(),R=a("ul"),mT=a("li"),ule=a("strong"),cRo=o("albert"),mRo=o(" \u2014 "),WN=a("a"),fRo=o("AlbertForQuestionAnswering"),gRo=o(" (ALBERT model)"),hRo=l(),fT=a("li"),ple=a("strong"),uRo=o("bart"),pRo=o(" \u2014 "),QN=a("a"),_Ro=o("BartForQuestionAnswering"),bRo=o(" (BART model)"),vRo=l(),gT=a("li"),_le=a("strong"),TRo=o("bert"),FRo=o(" \u2014 "),HN=a("a"),CRo=o("BertForQuestionAnswering"),MRo=o(" (BERT model)"),ERo=l(),hT=a("li"),ble=a("strong"),yRo=o("big_bird"),wRo=o(" \u2014 "),UN=a("a"),ARo=o("BigBirdForQuestionAnswering"),LRo=o(" (BigBird model)"),BRo=l(),uT=a("li"),vle=a("strong"),xRo=o("bigbird_pegasus"),kRo=o(" \u2014 "),JN=a("a"),RRo=o("BigBirdPegasusForQuestionAnswering"),SRo=o(" (BigBirdPegasus model)"),PRo=l(),pT=a("li"),Tle=a("strong"),$Ro=o("camembert"),IRo=o(" \u2014 "),YN=a("a"),jRo=o("CamembertForQuestionAnswering"),NRo=o(" (CamemBERT model)"),DRo=l(),_T=a("li"),Fle=a("strong"),qRo=o("canine"),GRo=o(" \u2014 "),KN=a("a"),ORo=o("CanineForQuestionAnswering"),XRo=o(" (Canine model)"),VRo=l(),bT=a("li"),Cle=a("strong"),zRo=o("convbert"),WRo=o(" \u2014 "),ZN=a("a"),QRo=o("ConvBertForQuestionAnswering"),HRo=o(" (ConvBERT model)"),URo=l(),vT=a("li"),Mle=a("strong"),JRo=o("data2vec-text"),YRo=o(" \u2014 "),eD=a("a"),KRo=o("Data2VecTextForQuestionAnswering"),ZRo=o(" (Data2VecText model)"),eSo=l(),TT=a("li"),Ele=a("strong"),oSo=o("deberta"),rSo=o(" \u2014 "),oD=a("a"),tSo=o("DebertaForQuestionAnswering"),aSo=o(" (DeBERTa model)"),nSo=l(),FT=a("li"),yle=a("strong"),sSo=o("deberta-v2"),lSo=o(" \u2014 "),rD=a("a"),iSo=o("DebertaV2ForQuestionAnswering"),dSo=o(" (DeBERTa-v2 model)"),cSo=l(),CT=a("li"),wle=a("strong"),mSo=o("distilbert"),fSo=o(" \u2014 "),tD=a("a"),gSo=o("DistilBertForQuestionAnswering"),hSo=o(" (DistilBERT model)"),uSo=l(),MT=a("li"),Ale=a("strong"),pSo=o("electra"),_So=o(" \u2014 "),aD=a("a"),bSo=o("ElectraForQuestionAnswering"),vSo=o(" (ELECTRA model)"),TSo=l(),ET=a("li"),Lle=a("strong"),FSo=o("flaubert"),CSo=o(" \u2014 "),nD=a("a"),MSo=o("FlaubertForQuestionAnsweringSimple"),ESo=o(" (FlauBERT model)"),ySo=l(),yT=a("li"),Ble=a("strong"),wSo=o("fnet"),ASo=o(" \u2014 "),sD=a("a"),LSo=o("FNetForQuestionAnswering"),BSo=o(" (FNet model)"),xSo=l(),wT=a("li"),xle=a("strong"),kSo=o("funnel"),RSo=o(" \u2014 "),lD=a("a"),SSo=o("FunnelForQuestionAnswering"),PSo=o(" (Funnel Transformer model)"),$So=l(),AT=a("li"),kle=a("strong"),ISo=o("gptj"),jSo=o(" \u2014 "),iD=a("a"),NSo=o("GPTJForQuestionAnswering"),DSo=o(" (GPT-J model)"),qSo=l(),LT=a("li"),Rle=a("strong"),GSo=o("ibert"),OSo=o(" \u2014 "),dD=a("a"),XSo=o("IBertForQuestionAnswering"),VSo=o(" (I-BERT model)"),zSo=l(),BT=a("li"),Sle=a("strong"),WSo=o("layoutlmv2"),QSo=o(" \u2014 "),cD=a("a"),HSo=o("LayoutLMv2ForQuestionAnswering"),USo=o(" (LayoutLMv2 model)"),JSo=l(),xT=a("li"),Ple=a("strong"),YSo=o("led"),KSo=o(" \u2014 "),mD=a("a"),ZSo=o("LEDForQuestionAnswering"),ePo=o(" (LED model)"),oPo=l(),kT=a("li"),$le=a("strong"),rPo=o("longformer"),tPo=o(" \u2014 "),fD=a("a"),aPo=o("LongformerForQuestionAnswering"),nPo=o(" (Longformer model)"),sPo=l(),RT=a("li"),Ile=a("strong"),lPo=o("lxmert"),iPo=o(" \u2014 "),gD=a("a"),dPo=o("LxmertForQuestionAnswering"),cPo=o(" (LXMERT model)"),mPo=l(),ST=a("li"),jle=a("strong"),fPo=o("mbart"),gPo=o(" \u2014 "),hD=a("a"),hPo=o("MBartForQuestionAnswering"),uPo=o(" (mBART model)"),pPo=l(),PT=a("li"),Nle=a("strong"),_Po=o("megatron-bert"),bPo=o(" \u2014 "),uD=a("a"),vPo=o("MegatronBertForQuestionAnswering"),TPo=o(" (MegatronBert model)"),FPo=l(),$T=a("li"),Dle=a("strong"),CPo=o("mobilebert"),MPo=o(" \u2014 "),pD=a("a"),EPo=o("MobileBertForQuestionAnswering"),yPo=o(" (MobileBERT model)"),wPo=l(),IT=a("li"),qle=a("strong"),APo=o("mpnet"),LPo=o(" \u2014 "),_D=a("a"),BPo=o("MPNetForQuestionAnswering"),xPo=o(" (MPNet model)"),kPo=l(),jT=a("li"),Gle=a("strong"),RPo=o("nystromformer"),SPo=o(" \u2014 "),bD=a("a"),PPo=o("NystromformerForQuestionAnswering"),$Po=o(" (Nystromformer model)"),IPo=l(),NT=a("li"),Ole=a("strong"),jPo=o("qdqbert"),NPo=o(" \u2014 "),vD=a("a"),DPo=o("QDQBertForQuestionAnswering"),qPo=o(" (QDQBert model)"),GPo=l(),DT=a("li"),Xle=a("strong"),OPo=o("reformer"),XPo=o(" \u2014 "),TD=a("a"),VPo=o("ReformerForQuestionAnswering"),zPo=o(" (Reformer model)"),WPo=l(),qT=a("li"),Vle=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),FD=a("a"),UPo=o("RemBertForQuestionAnswering"),JPo=o(" (RemBERT model)"),YPo=l(),GT=a("li"),zle=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),CD=a("a"),e$o=o("RobertaForQuestionAnswering"),o$o=o(" (RoBERTa model)"),r$o=l(),OT=a("li"),Wle=a("strong"),t$o=o("roformer"),a$o=o(" \u2014 "),MD=a("a"),n$o=o("RoFormerForQuestionAnswering"),s$o=o(" (RoFormer model)"),l$o=l(),XT=a("li"),Qle=a("strong"),i$o=o("splinter"),d$o=o(" \u2014 "),ED=a("a"),c$o=o("SplinterForQuestionAnswering"),m$o=o(" (Splinter model)"),f$o=l(),VT=a("li"),Hle=a("strong"),g$o=o("squeezebert"),h$o=o(" \u2014 "),yD=a("a"),u$o=o("SqueezeBertForQuestionAnswering"),p$o=o(" (SqueezeBERT model)"),_$o=l(),zT=a("li"),Ule=a("strong"),b$o=o("xlm"),v$o=o(" \u2014 "),wD=a("a"),T$o=o("XLMForQuestionAnsweringSimple"),F$o=o(" (XLM model)"),C$o=l(),WT=a("li"),Jle=a("strong"),M$o=o("xlm-roberta"),E$o=o(" \u2014 "),AD=a("a"),y$o=o("XLMRobertaForQuestionAnswering"),w$o=o(" (XLM-RoBERTa model)"),A$o=l(),QT=a("li"),Yle=a("strong"),L$o=o("xlm-roberta-xl"),B$o=o(" \u2014 "),LD=a("a"),x$o=o("XLMRobertaXLForQuestionAnswering"),k$o=o(" (XLM-RoBERTa-XL model)"),R$o=l(),HT=a("li"),Kle=a("strong"),S$o=o("xlnet"),P$o=o(" \u2014 "),BD=a("a"),$$o=o("XLNetForQuestionAnsweringSimple"),I$o=o(" (XLNet model)"),j$o=l(),UT=a("li"),Zle=a("strong"),N$o=o("yoso"),D$o=o(" \u2014 "),xD=a("a"),q$o=o("YosoForQuestionAnswering"),G$o=o(" (YOSO model)"),O$o=l(),JT=a("p"),X$o=o("The model is set in evaluation mode by default using "),eie=a("code"),V$o=o("model.eval()"),z$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=a("code"),W$o=o("model.train()"),Q$o=l(),rie=a("p"),H$o=o("Examples:"),U$o=l(),m(a6.$$.fragment),Uke=l(),wd=a("h2"),YT=a("a"),tie=a("span"),m(n6.$$.fragment),J$o=l(),aie=a("span"),Y$o=o("AutoModelForTableQuestionAnswering"),Jke=l(),sr=a("div"),m(s6.$$.fragment),K$o=l(),Ad=a("p"),Z$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nie=a("code"),eIo=o("from_pretrained()"),oIo=o("class method or the "),sie=a("code"),rIo=o("from_config()"),tIo=o(`class
method.`),aIo=l(),l6=a("p"),nIo=o("This class cannot be instantiated directly using "),lie=a("code"),sIo=o("__init__()"),lIo=o(" (throws an error)."),iIo=l(),et=a("div"),m(i6.$$.fragment),dIo=l(),iie=a("p"),cIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mIo=l(),Ld=a("p"),fIo=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),gIo=o("not"),hIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=a("code"),uIo=o("from_pretrained()"),pIo=o("to load the model weights."),_Io=l(),mie=a("p"),bIo=o("Examples:"),vIo=l(),m(d6.$$.fragment),TIo=l(),Qe=a("div"),m(c6.$$.fragment),FIo=l(),fie=a("p"),CIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MIo=l(),en=a("p"),EIo=o("The model class to instantiate is selected based on the "),gie=a("code"),yIo=o("model_type"),wIo=o(` property of the config object (either
passed as an argument or loaded from `),hie=a("code"),AIo=o("pretrained_model_name_or_path"),LIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),BIo=o("pretrained_model_name_or_path"),xIo=o(":"),kIo=l(),pie=a("ul"),KT=a("li"),_ie=a("strong"),RIo=o("tapas"),SIo=o(" \u2014 "),kD=a("a"),PIo=o("TapasForQuestionAnswering"),$Io=o(" (TAPAS model)"),IIo=l(),ZT=a("p"),jIo=o("The model is set in evaluation mode by default using "),bie=a("code"),NIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=a("code"),qIo=o("model.train()"),GIo=l(),Tie=a("p"),OIo=o("Examples:"),XIo=l(),m(m6.$$.fragment),Yke=l(),Bd=a("h2"),e1=a("a"),Fie=a("span"),m(f6.$$.fragment),VIo=l(),Cie=a("span"),zIo=o("AutoModelForImageClassification"),Kke=l(),lr=a("div"),m(g6.$$.fragment),WIo=l(),xd=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mie=a("code"),HIo=o("from_pretrained()"),UIo=o("class method or the "),Eie=a("code"),JIo=o("from_config()"),YIo=o(`class
method.`),KIo=l(),h6=a("p"),ZIo=o("This class cannot be instantiated directly using "),yie=a("code"),ejo=o("__init__()"),ojo=o(" (throws an error)."),rjo=l(),ot=a("div"),m(u6.$$.fragment),tjo=l(),wie=a("p"),ajo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),njo=l(),kd=a("p"),sjo=o(`Note:
Loading a model from its configuration file does `),Aie=a("strong"),ljo=o("not"),ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=a("code"),djo=o("from_pretrained()"),cjo=o("to load the model weights."),mjo=l(),Bie=a("p"),fjo=o("Examples:"),gjo=l(),m(p6.$$.fragment),hjo=l(),He=a("div"),m(_6.$$.fragment),ujo=l(),xie=a("p"),pjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_jo=l(),on=a("p"),bjo=o("The model class to instantiate is selected based on the "),kie=a("code"),vjo=o("model_type"),Tjo=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),Fjo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),Mjo=o("pretrained_model_name_or_path"),Ejo=o(":"),yjo=l(),ge=a("ul"),o1=a("li"),Pie=a("strong"),wjo=o("beit"),Ajo=o(" \u2014 "),RD=a("a"),Ljo=o("BeitForImageClassification"),Bjo=o(" (BEiT model)"),xjo=l(),r1=a("li"),$ie=a("strong"),kjo=o("convnext"),Rjo=o(" \u2014 "),SD=a("a"),Sjo=o("ConvNextForImageClassification"),Pjo=o(" (ConvNext model)"),$jo=l(),qs=a("li"),Iie=a("strong"),Ijo=o("deit"),jjo=o(" \u2014 "),PD=a("a"),Njo=o("DeiTForImageClassification"),Djo=o(" or "),$D=a("a"),qjo=o("DeiTForImageClassificationWithTeacher"),Gjo=o(" (DeiT model)"),Ojo=l(),t1=a("li"),jie=a("strong"),Xjo=o("imagegpt"),Vjo=o(" \u2014 "),ID=a("a"),zjo=o("ImageGPTForImageClassification"),Wjo=o(" (ImageGPT model)"),Qjo=l(),fa=a("li"),Nie=a("strong"),Hjo=o("perceiver"),Ujo=o(" \u2014 "),jD=a("a"),Jjo=o("PerceiverForImageClassificationLearned"),Yjo=o(" or "),ND=a("a"),Kjo=o("PerceiverForImageClassificationFourier"),Zjo=o(" or "),DD=a("a"),eNo=o("PerceiverForImageClassificationConvProcessing"),oNo=o(" (Perceiver model)"),rNo=l(),a1=a("li"),Die=a("strong"),tNo=o("poolformer"),aNo=o(" \u2014 "),qD=a("a"),nNo=o("PoolFormerForImageClassification"),sNo=o(" (PoolFormer model)"),lNo=l(),n1=a("li"),qie=a("strong"),iNo=o("resnet"),dNo=o(" \u2014 "),GD=a("a"),cNo=o("ResNetForImageClassification"),mNo=o(" (ResNet model)"),fNo=l(),s1=a("li"),Gie=a("strong"),gNo=o("segformer"),hNo=o(" \u2014 "),OD=a("a"),uNo=o("SegformerForImageClassification"),pNo=o(" (SegFormer model)"),_No=l(),l1=a("li"),Oie=a("strong"),bNo=o("swin"),vNo=o(" \u2014 "),XD=a("a"),TNo=o("SwinForImageClassification"),FNo=o(" (Swin model)"),CNo=l(),i1=a("li"),Xie=a("strong"),MNo=o("van"),ENo=o(" \u2014 "),VD=a("a"),yNo=o("VanForImageClassification"),wNo=o(" (VAN model)"),ANo=l(),d1=a("li"),Vie=a("strong"),LNo=o("vit"),BNo=o(" \u2014 "),zD=a("a"),xNo=o("ViTForImageClassification"),kNo=o(" (ViT model)"),RNo=l(),c1=a("p"),SNo=o("The model is set in evaluation mode by default using "),zie=a("code"),PNo=o("model.eval()"),$No=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),INo=o("model.train()"),jNo=l(),Qie=a("p"),NNo=o("Examples:"),DNo=l(),m(b6.$$.fragment),Zke=l(),Rd=a("h2"),m1=a("a"),Hie=a("span"),m(v6.$$.fragment),qNo=l(),Uie=a("span"),GNo=o("AutoModelForVision2Seq"),eRe=l(),ir=a("div"),m(T6.$$.fragment),ONo=l(),Sd=a("p"),XNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jie=a("code"),VNo=o("from_pretrained()"),zNo=o("class method or the "),Yie=a("code"),WNo=o("from_config()"),QNo=o(`class
method.`),HNo=l(),F6=a("p"),UNo=o("This class cannot be instantiated directly using "),Kie=a("code"),JNo=o("__init__()"),YNo=o(" (throws an error)."),KNo=l(),rt=a("div"),m(C6.$$.fragment),ZNo=l(),Zie=a("p"),eDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),oDo=l(),Pd=a("p"),rDo=o(`Note:
Loading a model from its configuration file does `),ede=a("strong"),tDo=o("not"),aDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=a("code"),nDo=o("from_pretrained()"),sDo=o("to load the model weights."),lDo=l(),rde=a("p"),iDo=o("Examples:"),dDo=l(),m(M6.$$.fragment),cDo=l(),Ue=a("div"),m(E6.$$.fragment),mDo=l(),tde=a("p"),fDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gDo=l(),rn=a("p"),hDo=o("The model class to instantiate is selected based on the "),ade=a("code"),uDo=o("model_type"),pDo=o(` property of the config object (either
passed as an argument or loaded from `),nde=a("code"),_Do=o("pretrained_model_name_or_path"),bDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=a("code"),vDo=o("pretrained_model_name_or_path"),TDo=o(":"),FDo=l(),lde=a("ul"),f1=a("li"),ide=a("strong"),CDo=o("vision-encoder-decoder"),MDo=o(" \u2014 "),WD=a("a"),EDo=o("VisionEncoderDecoderModel"),yDo=o(" (Vision Encoder decoder model)"),wDo=l(),g1=a("p"),ADo=o("The model is set in evaluation mode by default using "),dde=a("code"),LDo=o("model.eval()"),BDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),xDo=o("model.train()"),kDo=l(),mde=a("p"),RDo=o("Examples:"),SDo=l(),m(y6.$$.fragment),oRe=l(),$d=a("h2"),h1=a("a"),fde=a("span"),m(w6.$$.fragment),PDo=l(),gde=a("span"),$Do=o("AutoModelForAudioClassification"),rRe=l(),dr=a("div"),m(A6.$$.fragment),IDo=l(),Id=a("p"),jDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hde=a("code"),NDo=o("from_pretrained()"),DDo=o("class method or the "),ude=a("code"),qDo=o("from_config()"),GDo=o(`class
method.`),ODo=l(),L6=a("p"),XDo=o("This class cannot be instantiated directly using "),pde=a("code"),VDo=o("__init__()"),zDo=o(" (throws an error)."),WDo=l(),tt=a("div"),m(B6.$$.fragment),QDo=l(),_de=a("p"),HDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),UDo=l(),jd=a("p"),JDo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),YDo=o("not"),KDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),ZDo=o("from_pretrained()"),eqo=o("to load the model weights."),oqo=l(),Tde=a("p"),rqo=o("Examples:"),tqo=l(),m(x6.$$.fragment),aqo=l(),Je=a("div"),m(k6.$$.fragment),nqo=l(),Fde=a("p"),sqo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lqo=l(),tn=a("p"),iqo=o("The model class to instantiate is selected based on the "),Cde=a("code"),dqo=o("model_type"),cqo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),mqo=o("pretrained_model_name_or_path"),fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),gqo=o("pretrained_model_name_or_path"),hqo=o(":"),uqo=l(),ke=a("ul"),u1=a("li"),yde=a("strong"),pqo=o("data2vec-audio"),_qo=o(" \u2014 "),QD=a("a"),bqo=o("Data2VecAudioForSequenceClassification"),vqo=o(" (Data2VecAudio model)"),Tqo=l(),p1=a("li"),wde=a("strong"),Fqo=o("hubert"),Cqo=o(" \u2014 "),HD=a("a"),Mqo=o("HubertForSequenceClassification"),Eqo=o(" (Hubert model)"),yqo=l(),_1=a("li"),Ade=a("strong"),wqo=o("sew"),Aqo=o(" \u2014 "),UD=a("a"),Lqo=o("SEWForSequenceClassification"),Bqo=o(" (SEW model)"),xqo=l(),b1=a("li"),Lde=a("strong"),kqo=o("sew-d"),Rqo=o(" \u2014 "),JD=a("a"),Sqo=o("SEWDForSequenceClassification"),Pqo=o(" (SEW-D model)"),$qo=l(),v1=a("li"),Bde=a("strong"),Iqo=o("unispeech"),jqo=o(" \u2014 "),YD=a("a"),Nqo=o("UniSpeechForSequenceClassification"),Dqo=o(" (UniSpeech model)"),qqo=l(),T1=a("li"),xde=a("strong"),Gqo=o("unispeech-sat"),Oqo=o(" \u2014 "),KD=a("a"),Xqo=o("UniSpeechSatForSequenceClassification"),Vqo=o(" (UniSpeechSat model)"),zqo=l(),F1=a("li"),kde=a("strong"),Wqo=o("wav2vec2"),Qqo=o(" \u2014 "),ZD=a("a"),Hqo=o("Wav2Vec2ForSequenceClassification"),Uqo=o(" (Wav2Vec2 model)"),Jqo=l(),C1=a("li"),Rde=a("strong"),Yqo=o("wavlm"),Kqo=o(" \u2014 "),eq=a("a"),Zqo=o("WavLMForSequenceClassification"),eGo=o(" (WavLM model)"),oGo=l(),M1=a("p"),rGo=o("The model is set in evaluation mode by default using "),Sde=a("code"),tGo=o("model.eval()"),aGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),nGo=o("model.train()"),sGo=l(),$de=a("p"),lGo=o("Examples:"),iGo=l(),m(R6.$$.fragment),tRe=l(),Nd=a("h2"),E1=a("a"),Ide=a("span"),m(S6.$$.fragment),dGo=l(),jde=a("span"),cGo=o("AutoModelForAudioFrameClassification"),aRe=l(),cr=a("div"),m(P6.$$.fragment),mGo=l(),Dd=a("p"),fGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nde=a("code"),gGo=o("from_pretrained()"),hGo=o("class method or the "),Dde=a("code"),uGo=o("from_config()"),pGo=o(`class
method.`),_Go=l(),$6=a("p"),bGo=o("This class cannot be instantiated directly using "),qde=a("code"),vGo=o("__init__()"),TGo=o(" (throws an error)."),FGo=l(),at=a("div"),m(I6.$$.fragment),CGo=l(),Gde=a("p"),MGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),EGo=l(),qd=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),Ode=a("strong"),wGo=o("not"),AGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),LGo=o("from_pretrained()"),BGo=o("to load the model weights."),xGo=l(),Vde=a("p"),kGo=o("Examples:"),RGo=l(),m(j6.$$.fragment),SGo=l(),Ye=a("div"),m(N6.$$.fragment),PGo=l(),zde=a("p"),$Go=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IGo=l(),an=a("p"),jGo=o("The model class to instantiate is selected based on the "),Wde=a("code"),NGo=o("model_type"),DGo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),qGo=o("pretrained_model_name_or_path"),GGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),OGo=o("pretrained_model_name_or_path"),XGo=o(":"),VGo=l(),nn=a("ul"),y1=a("li"),Ude=a("strong"),zGo=o("data2vec-audio"),WGo=o(" \u2014 "),oq=a("a"),QGo=o("Data2VecAudioForAudioFrameClassification"),HGo=o(" (Data2VecAudio model)"),UGo=l(),w1=a("li"),Jde=a("strong"),JGo=o("unispeech-sat"),YGo=o(" \u2014 "),rq=a("a"),KGo=o("UniSpeechSatForAudioFrameClassification"),ZGo=o(" (UniSpeechSat model)"),eOo=l(),A1=a("li"),Yde=a("strong"),oOo=o("wav2vec2"),rOo=o(" \u2014 "),tq=a("a"),tOo=o("Wav2Vec2ForAudioFrameClassification"),aOo=o(" (Wav2Vec2 model)"),nOo=l(),L1=a("li"),Kde=a("strong"),sOo=o("wavlm"),lOo=o(" \u2014 "),aq=a("a"),iOo=o("WavLMForAudioFrameClassification"),dOo=o(" (WavLM model)"),cOo=l(),B1=a("p"),mOo=o("The model is set in evaluation mode by default using "),Zde=a("code"),fOo=o("model.eval()"),gOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=a("code"),hOo=o("model.train()"),uOo=l(),oce=a("p"),pOo=o("Examples:"),_Oo=l(),m(D6.$$.fragment),nRe=l(),Gd=a("h2"),x1=a("a"),rce=a("span"),m(q6.$$.fragment),bOo=l(),tce=a("span"),vOo=o("AutoModelForCTC"),sRe=l(),mr=a("div"),m(G6.$$.fragment),TOo=l(),Od=a("p"),FOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ace=a("code"),COo=o("from_pretrained()"),MOo=o("class method or the "),nce=a("code"),EOo=o("from_config()"),yOo=o(`class
method.`),wOo=l(),O6=a("p"),AOo=o("This class cannot be instantiated directly using "),sce=a("code"),LOo=o("__init__()"),BOo=o(" (throws an error)."),xOo=l(),nt=a("div"),m(X6.$$.fragment),kOo=l(),lce=a("p"),ROo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),SOo=l(),Xd=a("p"),POo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),$Oo=o("not"),IOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=a("code"),jOo=o("from_pretrained()"),NOo=o("to load the model weights."),DOo=l(),cce=a("p"),qOo=o("Examples:"),GOo=l(),m(V6.$$.fragment),OOo=l(),Ke=a("div"),m(z6.$$.fragment),XOo=l(),mce=a("p"),VOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zOo=l(),sn=a("p"),WOo=o("The model class to instantiate is selected based on the "),fce=a("code"),QOo=o("model_type"),HOo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),UOo=o("pretrained_model_name_or_path"),JOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(":"),ZOo=l(),Re=a("ul"),k1=a("li"),uce=a("strong"),eXo=o("data2vec-audio"),oXo=o(" \u2014 "),nq=a("a"),rXo=o("Data2VecAudioForCTC"),tXo=o(" (Data2VecAudio model)"),aXo=l(),R1=a("li"),pce=a("strong"),nXo=o("hubert"),sXo=o(" \u2014 "),sq=a("a"),lXo=o("HubertForCTC"),iXo=o(" (Hubert model)"),dXo=l(),S1=a("li"),_ce=a("strong"),cXo=o("sew"),mXo=o(" \u2014 "),lq=a("a"),fXo=o("SEWForCTC"),gXo=o(" (SEW model)"),hXo=l(),P1=a("li"),bce=a("strong"),uXo=o("sew-d"),pXo=o(" \u2014 "),iq=a("a"),_Xo=o("SEWDForCTC"),bXo=o(" (SEW-D model)"),vXo=l(),$1=a("li"),vce=a("strong"),TXo=o("unispeech"),FXo=o(" \u2014 "),dq=a("a"),CXo=o("UniSpeechForCTC"),MXo=o(" (UniSpeech model)"),EXo=l(),I1=a("li"),Tce=a("strong"),yXo=o("unispeech-sat"),wXo=o(" \u2014 "),cq=a("a"),AXo=o("UniSpeechSatForCTC"),LXo=o(" (UniSpeechSat model)"),BXo=l(),j1=a("li"),Fce=a("strong"),xXo=o("wav2vec2"),kXo=o(" \u2014 "),mq=a("a"),RXo=o("Wav2Vec2ForCTC"),SXo=o(" (Wav2Vec2 model)"),PXo=l(),N1=a("li"),Cce=a("strong"),$Xo=o("wavlm"),IXo=o(" \u2014 "),fq=a("a"),jXo=o("WavLMForCTC"),NXo=o(" (WavLM model)"),DXo=l(),D1=a("p"),qXo=o("The model is set in evaluation mode by default using "),Mce=a("code"),GXo=o("model.eval()"),OXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),XXo=o("model.train()"),VXo=l(),yce=a("p"),zXo=o("Examples:"),WXo=l(),m(W6.$$.fragment),lRe=l(),Vd=a("h2"),q1=a("a"),wce=a("span"),m(Q6.$$.fragment),QXo=l(),Ace=a("span"),HXo=o("AutoModelForSpeechSeq2Seq"),iRe=l(),fr=a("div"),m(H6.$$.fragment),UXo=l(),zd=a("p"),JXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lce=a("code"),YXo=o("from_pretrained()"),KXo=o("class method or the "),Bce=a("code"),ZXo=o("from_config()"),eVo=o(`class
method.`),oVo=l(),U6=a("p"),rVo=o("This class cannot be instantiated directly using "),xce=a("code"),tVo=o("__init__()"),aVo=o(" (throws an error)."),nVo=l(),st=a("div"),m(J6.$$.fragment),sVo=l(),kce=a("p"),lVo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iVo=l(),Wd=a("p"),dVo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),cVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=a("code"),fVo=o("from_pretrained()"),gVo=o("to load the model weights."),hVo=l(),Pce=a("p"),uVo=o("Examples:"),pVo=l(),m(Y6.$$.fragment),_Vo=l(),Ze=a("div"),m(K6.$$.fragment),bVo=l(),$ce=a("p"),vVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TVo=l(),ln=a("p"),FVo=o("The model class to instantiate is selected based on the "),Ice=a("code"),CVo=o("model_type"),MVo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),EVo=o("pretrained_model_name_or_path"),yVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(":"),LVo=l(),Z6=a("ul"),G1=a("li"),Dce=a("strong"),BVo=o("speech-encoder-decoder"),xVo=o(" \u2014 "),gq=a("a"),kVo=o("SpeechEncoderDecoderModel"),RVo=o(" (Speech Encoder decoder model)"),SVo=l(),O1=a("li"),qce=a("strong"),PVo=o("speech_to_text"),$Vo=o(" \u2014 "),hq=a("a"),IVo=o("Speech2TextForConditionalGeneration"),jVo=o(" (Speech2Text model)"),NVo=l(),X1=a("p"),DVo=o("The model is set in evaluation mode by default using "),Gce=a("code"),qVo=o("model.eval()"),GVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),OVo=o("model.train()"),XVo=l(),Xce=a("p"),VVo=o("Examples:"),zVo=l(),m(eA.$$.fragment),dRe=l(),Qd=a("h2"),V1=a("a"),Vce=a("span"),m(oA.$$.fragment),WVo=l(),zce=a("span"),QVo=o("AutoModelForAudioXVector"),cRe=l(),gr=a("div"),m(rA.$$.fragment),HVo=l(),Hd=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wce=a("code"),JVo=o("from_pretrained()"),YVo=o("class method or the "),Qce=a("code"),KVo=o("from_config()"),ZVo=o(`class
method.`),ezo=l(),tA=a("p"),ozo=o("This class cannot be instantiated directly using "),Hce=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),lt=a("div"),m(aA.$$.fragment),nzo=l(),Uce=a("p"),szo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),lzo=l(),Ud=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=a("code"),mzo=o("from_pretrained()"),fzo=o("to load the model weights."),gzo=l(),Kce=a("p"),hzo=o("Examples:"),uzo=l(),m(nA.$$.fragment),pzo=l(),eo=a("div"),m(sA.$$.fragment),_zo=l(),Zce=a("p"),bzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vzo=l(),dn=a("p"),Tzo=o("The model class to instantiate is selected based on the "),eme=a("code"),Fzo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),yzo=o("pretrained_model_name_or_path"),wzo=o(":"),Azo=l(),cn=a("ul"),z1=a("li"),tme=a("strong"),Lzo=o("data2vec-audio"),Bzo=o(" \u2014 "),uq=a("a"),xzo=o("Data2VecAudioForXVector"),kzo=o(" (Data2VecAudio model)"),Rzo=l(),W1=a("li"),ame=a("strong"),Szo=o("unispeech-sat"),Pzo=o(" \u2014 "),pq=a("a"),$zo=o("UniSpeechSatForXVector"),Izo=o(" (UniSpeechSat model)"),jzo=l(),Q1=a("li"),nme=a("strong"),Nzo=o("wav2vec2"),Dzo=o(" \u2014 "),_q=a("a"),qzo=o("Wav2Vec2ForXVector"),Gzo=o(" (Wav2Vec2 model)"),Ozo=l(),H1=a("li"),sme=a("strong"),Xzo=o("wavlm"),Vzo=o(" \u2014 "),bq=a("a"),zzo=o("WavLMForXVector"),Wzo=o(" (WavLM model)"),Qzo=l(),U1=a("p"),Hzo=o("The model is set in evaluation mode by default using "),lme=a("code"),Uzo=o("model.eval()"),Jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=a("code"),Yzo=o("model.train()"),Kzo=l(),dme=a("p"),Zzo=o("Examples:"),eWo=l(),m(lA.$$.fragment),mRe=l(),Jd=a("h2"),J1=a("a"),cme=a("span"),m(iA.$$.fragment),oWo=l(),mme=a("span"),rWo=o("AutoModelForMaskedImageModeling"),fRe=l(),hr=a("div"),m(dA.$$.fragment),tWo=l(),Yd=a("p"),aWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fme=a("code"),nWo=o("from_pretrained()"),sWo=o("class method or the "),gme=a("code"),lWo=o("from_config()"),iWo=o(`class
method.`),dWo=l(),cA=a("p"),cWo=o("This class cannot be instantiated directly using "),hme=a("code"),mWo=o("__init__()"),fWo=o(" (throws an error)."),gWo=l(),it=a("div"),m(mA.$$.fragment),hWo=l(),ume=a("p"),uWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),pWo=l(),Kd=a("p"),_Wo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),bWo=o("not"),vWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=a("code"),TWo=o("from_pretrained()"),FWo=o("to load the model weights."),CWo=l(),bme=a("p"),MWo=o("Examples:"),EWo=l(),m(fA.$$.fragment),yWo=l(),oo=a("div"),m(gA.$$.fragment),wWo=l(),vme=a("p"),AWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),LWo=l(),mn=a("p"),BWo=o("The model class to instantiate is selected based on the "),Tme=a("code"),xWo=o("model_type"),kWo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),RWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),PWo=o("pretrained_model_name_or_path"),$Wo=o(":"),IWo=l(),Zd=a("ul"),Y1=a("li"),Mme=a("strong"),jWo=o("deit"),NWo=o(" \u2014 "),vq=a("a"),DWo=o("DeiTForMaskedImageModeling"),qWo=o(" (DeiT model)"),GWo=l(),K1=a("li"),Eme=a("strong"),OWo=o("swin"),XWo=o(" \u2014 "),Tq=a("a"),VWo=o("SwinForMaskedImageModeling"),zWo=o(" (Swin model)"),WWo=l(),Z1=a("li"),yme=a("strong"),QWo=o("vit"),HWo=o(" \u2014 "),Fq=a("a"),UWo=o("ViTForMaskedImageModeling"),JWo=o(" (ViT model)"),YWo=l(),eF=a("p"),KWo=o("The model is set in evaluation mode by default using "),wme=a("code"),ZWo=o("model.eval()"),eQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=a("code"),oQo=o("model.train()"),rQo=l(),Lme=a("p"),tQo=o("Examples:"),aQo=l(),m(hA.$$.fragment),gRe=l(),ec=a("h2"),oF=a("a"),Bme=a("span"),m(uA.$$.fragment),nQo=l(),xme=a("span"),sQo=o("AutoModelForObjectDetection"),hRe=l(),ur=a("div"),m(pA.$$.fragment),lQo=l(),oc=a("p"),iQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kme=a("code"),dQo=o("from_pretrained()"),cQo=o("class method or the "),Rme=a("code"),mQo=o("from_config()"),fQo=o(`class
method.`),gQo=l(),_A=a("p"),hQo=o("This class cannot be instantiated directly using "),Sme=a("code"),uQo=o("__init__()"),pQo=o(" (throws an error)."),_Qo=l(),dt=a("div"),m(bA.$$.fragment),bQo=l(),Pme=a("p"),vQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),TQo=l(),rc=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),CQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ime=a("code"),EQo=o("from_pretrained()"),yQo=o("to load the model weights."),wQo=l(),jme=a("p"),AQo=o("Examples:"),LQo=l(),m(vA.$$.fragment),BQo=l(),ro=a("div"),m(TA.$$.fragment),xQo=l(),Nme=a("p"),kQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),RQo=l(),fn=a("p"),SQo=o("The model class to instantiate is selected based on the "),Dme=a("code"),PQo=o("model_type"),$Qo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),IQo=o("pretrained_model_name_or_path"),jQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),NQo=o("pretrained_model_name_or_path"),DQo=o(":"),qQo=l(),Ome=a("ul"),rF=a("li"),Xme=a("strong"),GQo=o("detr"),OQo=o(" \u2014 "),Cq=a("a"),XQo=o("DetrForObjectDetection"),VQo=o(" (DETR model)"),zQo=l(),tF=a("p"),WQo=o("The model is set in evaluation mode by default using "),Vme=a("code"),QQo=o("model.eval()"),HQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),UQo=o("model.train()"),JQo=l(),Wme=a("p"),YQo=o("Examples:"),KQo=l(),m(FA.$$.fragment),uRe=l(),tc=a("h2"),aF=a("a"),Qme=a("span"),m(CA.$$.fragment),ZQo=l(),Hme=a("span"),eHo=o("AutoModelForImageSegmentation"),pRe=l(),pr=a("div"),m(MA.$$.fragment),oHo=l(),ac=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ume=a("code"),tHo=o("from_pretrained()"),aHo=o("class method or the "),Jme=a("code"),nHo=o("from_config()"),sHo=o(`class
method.`),lHo=l(),EA=a("p"),iHo=o("This class cannot be instantiated directly using "),Yme=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),mHo=l(),ct=a("div"),m(yA.$$.fragment),fHo=l(),Kme=a("p"),gHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hHo=l(),nc=a("p"),uHo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),pHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),efe=a("code"),bHo=o("from_pretrained()"),vHo=o("to load the model weights."),THo=l(),ofe=a("p"),FHo=o("Examples:"),CHo=l(),m(wA.$$.fragment),MHo=l(),to=a("div"),m(AA.$$.fragment),EHo=l(),rfe=a("p"),yHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wHo=l(),gn=a("p"),AHo=o("The model class to instantiate is selected based on the "),tfe=a("code"),LHo=o("model_type"),BHo=o(` property of the config object (either
passed as an argument or loaded from `),afe=a("code"),xHo=o("pretrained_model_name_or_path"),kHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=a("code"),RHo=o("pretrained_model_name_or_path"),SHo=o(":"),PHo=l(),sfe=a("ul"),nF=a("li"),lfe=a("strong"),$Ho=o("detr"),IHo=o(" \u2014 "),Mq=a("a"),jHo=o("DetrForSegmentation"),NHo=o(" (DETR model)"),DHo=l(),sF=a("p"),qHo=o("The model is set in evaluation mode by default using "),ife=a("code"),GHo=o("model.eval()"),OHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),XHo=o("model.train()"),VHo=l(),cfe=a("p"),zHo=o("Examples:"),WHo=l(),m(LA.$$.fragment),_Re=l(),sc=a("h2"),lF=a("a"),mfe=a("span"),m(BA.$$.fragment),QHo=l(),ffe=a("span"),HHo=o("AutoModelForSemanticSegmentation"),bRe=l(),_r=a("div"),m(xA.$$.fragment),UHo=l(),lc=a("p"),JHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gfe=a("code"),YHo=o("from_pretrained()"),KHo=o("class method or the "),hfe=a("code"),ZHo=o("from_config()"),eUo=o(`class
method.`),oUo=l(),kA=a("p"),rUo=o("This class cannot be instantiated directly using "),ufe=a("code"),tUo=o("__init__()"),aUo=o(" (throws an error)."),nUo=l(),mt=a("div"),m(RA.$$.fragment),sUo=l(),pfe=a("p"),lUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iUo=l(),ic=a("p"),dUo=o(`Note:
Loading a model from its configuration file does `),_fe=a("strong"),cUo=o("not"),mUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bfe=a("code"),fUo=o("from_pretrained()"),gUo=o("to load the model weights."),hUo=l(),vfe=a("p"),uUo=o("Examples:"),pUo=l(),m(SA.$$.fragment),_Uo=l(),ao=a("div"),m(PA.$$.fragment),bUo=l(),Tfe=a("p"),vUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),TUo=l(),hn=a("p"),FUo=o("The model class to instantiate is selected based on the "),Ffe=a("code"),CUo=o("model_type"),MUo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),EUo=o("pretrained_model_name_or_path"),yUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(":"),LUo=l(),$A=a("ul"),iF=a("li"),Efe=a("strong"),BUo=o("beit"),xUo=o(" \u2014 "),Eq=a("a"),kUo=o("BeitForSemanticSegmentation"),RUo=o(" (BEiT model)"),SUo=l(),dF=a("li"),yfe=a("strong"),PUo=o("segformer"),$Uo=o(" \u2014 "),yq=a("a"),IUo=o("SegformerForSemanticSegmentation"),jUo=o(" (SegFormer model)"),NUo=l(),cF=a("p"),DUo=o("The model is set in evaluation mode by default using "),wfe=a("code"),qUo=o("model.eval()"),GUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=a("code"),OUo=o("model.train()"),XUo=l(),Lfe=a("p"),VUo=o("Examples:"),zUo=l(),m(IA.$$.fragment),vRe=l(),dc=a("h2"),mF=a("a"),Bfe=a("span"),m(jA.$$.fragment),WUo=l(),xfe=a("span"),QUo=o("AutoModelForInstanceSegmentation"),TRe=l(),br=a("div"),m(NA.$$.fragment),HUo=l(),cc=a("p"),UUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kfe=a("code"),JUo=o("from_pretrained()"),YUo=o("class method or the "),Rfe=a("code"),KUo=o("from_config()"),ZUo=o(`class
method.`),eJo=l(),DA=a("p"),oJo=o("This class cannot be instantiated directly using "),Sfe=a("code"),rJo=o("__init__()"),tJo=o(" (throws an error)."),aJo=l(),ft=a("div"),m(qA.$$.fragment),nJo=l(),Pfe=a("p"),sJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lJo=l(),mc=a("p"),iJo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),dJo=o("not"),cJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ife=a("code"),mJo=o("from_pretrained()"),fJo=o("to load the model weights."),gJo=l(),jfe=a("p"),hJo=o("Examples:"),uJo=l(),m(GA.$$.fragment),pJo=l(),no=a("div"),m(OA.$$.fragment),_Jo=l(),Nfe=a("p"),bJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vJo=l(),un=a("p"),TJo=o("The model class to instantiate is selected based on the "),Dfe=a("code"),FJo=o("model_type"),CJo=o(` property of the config object (either
passed as an argument or loaded from `),qfe=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),yJo=o("pretrained_model_name_or_path"),wJo=o(":"),AJo=l(),Ofe=a("ul"),fF=a("li"),Xfe=a("strong"),LJo=o("maskformer"),BJo=o(" \u2014 "),wq=a("a"),xJo=o("MaskFormerForInstanceSegmentation"),kJo=o(" (MaskFormer model)"),RJo=l(),gF=a("p"),SJo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),PJo=o("model.eval()"),$Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),IJo=o("model.train()"),jJo=l(),Wfe=a("p"),NJo=o("Examples:"),DJo=l(),m(XA.$$.fragment),FRe=l(),fc=a("h2"),hF=a("a"),Qfe=a("span"),m(VA.$$.fragment),qJo=l(),Hfe=a("span"),GJo=o("TFAutoModel"),CRe=l(),vr=a("div"),m(zA.$$.fragment),OJo=l(),gc=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ufe=a("code"),VJo=o("from_pretrained()"),zJo=o("class method or the "),Jfe=a("code"),WJo=o("from_config()"),QJo=o(`class
method.`),HJo=l(),WA=a("p"),UJo=o("This class cannot be instantiated directly using "),Yfe=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),gt=a("div"),m(QA.$$.fragment),ZJo=l(),Kfe=a("p"),eYo=o("Instantiates one of the base model classes of the library from a configuration."),oYo=l(),hc=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),Zfe=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ege=a("code"),nYo=o("from_pretrained()"),sYo=o("to load the model weights."),lYo=l(),oge=a("p"),iYo=o("Examples:"),dYo=l(),m(HA.$$.fragment),cYo=l(),ho=a("div"),m(UA.$$.fragment),mYo=l(),rge=a("p"),fYo=o("Instantiate one of the base model classes of the library from a pretrained model."),gYo=l(),pn=a("p"),hYo=o("The model class to instantiate is selected based on the "),tge=a("code"),uYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),vYo=o("pretrained_model_name_or_path"),TYo=o(":"),FYo=l(),B=a("ul"),uF=a("li"),sge=a("strong"),CYo=o("albert"),MYo=o(" \u2014 "),Aq=a("a"),EYo=o("TFAlbertModel"),yYo=o(" (ALBERT model)"),wYo=l(),pF=a("li"),lge=a("strong"),AYo=o("bart"),LYo=o(" \u2014 "),Lq=a("a"),BYo=o("TFBartModel"),xYo=o(" (BART model)"),kYo=l(),_F=a("li"),ige=a("strong"),RYo=o("bert"),SYo=o(" \u2014 "),Bq=a("a"),PYo=o("TFBertModel"),$Yo=o(" (BERT model)"),IYo=l(),bF=a("li"),dge=a("strong"),jYo=o("blenderbot"),NYo=o(" \u2014 "),xq=a("a"),DYo=o("TFBlenderbotModel"),qYo=o(" (Blenderbot model)"),GYo=l(),vF=a("li"),cge=a("strong"),OYo=o("blenderbot-small"),XYo=o(" \u2014 "),kq=a("a"),VYo=o("TFBlenderbotSmallModel"),zYo=o(" (BlenderbotSmall model)"),WYo=l(),TF=a("li"),mge=a("strong"),QYo=o("camembert"),HYo=o(" \u2014 "),Rq=a("a"),UYo=o("TFCamembertModel"),JYo=o(" (CamemBERT model)"),YYo=l(),FF=a("li"),fge=a("strong"),KYo=o("clip"),ZYo=o(" \u2014 "),Sq=a("a"),eKo=o("TFCLIPModel"),oKo=o(" (CLIP model)"),rKo=l(),CF=a("li"),gge=a("strong"),tKo=o("convbert"),aKo=o(" \u2014 "),Pq=a("a"),nKo=o("TFConvBertModel"),sKo=o(" (ConvBERT model)"),lKo=l(),MF=a("li"),hge=a("strong"),iKo=o("convnext"),dKo=o(" \u2014 "),$q=a("a"),cKo=o("TFConvNextModel"),mKo=o(" (ConvNext model)"),fKo=l(),EF=a("li"),uge=a("strong"),gKo=o("ctrl"),hKo=o(" \u2014 "),Iq=a("a"),uKo=o("TFCTRLModel"),pKo=o(" (CTRL model)"),_Ko=l(),yF=a("li"),pge=a("strong"),bKo=o("deberta"),vKo=o(" \u2014 "),jq=a("a"),TKo=o("TFDebertaModel"),FKo=o(" (DeBERTa model)"),CKo=l(),wF=a("li"),_ge=a("strong"),MKo=o("deberta-v2"),EKo=o(" \u2014 "),Nq=a("a"),yKo=o("TFDebertaV2Model"),wKo=o(" (DeBERTa-v2 model)"),AKo=l(),AF=a("li"),bge=a("strong"),LKo=o("distilbert"),BKo=o(" \u2014 "),Dq=a("a"),xKo=o("TFDistilBertModel"),kKo=o(" (DistilBERT model)"),RKo=l(),LF=a("li"),vge=a("strong"),SKo=o("dpr"),PKo=o(" \u2014 "),qq=a("a"),$Ko=o("TFDPRQuestionEncoder"),IKo=o(" (DPR model)"),jKo=l(),BF=a("li"),Tge=a("strong"),NKo=o("electra"),DKo=o(" \u2014 "),Gq=a("a"),qKo=o("TFElectraModel"),GKo=o(" (ELECTRA model)"),OKo=l(),xF=a("li"),Fge=a("strong"),XKo=o("flaubert"),VKo=o(" \u2014 "),Oq=a("a"),zKo=o("TFFlaubertModel"),WKo=o(" (FlauBERT model)"),QKo=l(),Gs=a("li"),Cge=a("strong"),HKo=o("funnel"),UKo=o(" \u2014 "),Xq=a("a"),JKo=o("TFFunnelModel"),YKo=o(" or "),Vq=a("a"),KKo=o("TFFunnelBaseModel"),ZKo=o(" (Funnel Transformer model)"),eZo=l(),kF=a("li"),Mge=a("strong"),oZo=o("gpt2"),rZo=o(" \u2014 "),zq=a("a"),tZo=o("TFGPT2Model"),aZo=o(" (OpenAI GPT-2 model)"),nZo=l(),RF=a("li"),Ege=a("strong"),sZo=o("gptj"),lZo=o(" \u2014 "),Wq=a("a"),iZo=o("TFGPTJModel"),dZo=o(" (GPT-J model)"),cZo=l(),SF=a("li"),yge=a("strong"),mZo=o("hubert"),fZo=o(" \u2014 "),Qq=a("a"),gZo=o("TFHubertModel"),hZo=o(" (Hubert model)"),uZo=l(),PF=a("li"),wge=a("strong"),pZo=o("layoutlm"),_Zo=o(" \u2014 "),Hq=a("a"),bZo=o("TFLayoutLMModel"),vZo=o(" (LayoutLM model)"),TZo=l(),$F=a("li"),Age=a("strong"),FZo=o("led"),CZo=o(" \u2014 "),Uq=a("a"),MZo=o("TFLEDModel"),EZo=o(" (LED model)"),yZo=l(),IF=a("li"),Lge=a("strong"),wZo=o("longformer"),AZo=o(" \u2014 "),Jq=a("a"),LZo=o("TFLongformerModel"),BZo=o(" (Longformer model)"),xZo=l(),jF=a("li"),Bge=a("strong"),kZo=o("lxmert"),RZo=o(" \u2014 "),Yq=a("a"),SZo=o("TFLxmertModel"),PZo=o(" (LXMERT model)"),$Zo=l(),NF=a("li"),xge=a("strong"),IZo=o("marian"),jZo=o(" \u2014 "),Kq=a("a"),NZo=o("TFMarianModel"),DZo=o(" (Marian model)"),qZo=l(),DF=a("li"),kge=a("strong"),GZo=o("mbart"),OZo=o(" \u2014 "),Zq=a("a"),XZo=o("TFMBartModel"),VZo=o(" (mBART model)"),zZo=l(),qF=a("li"),Rge=a("strong"),WZo=o("mobilebert"),QZo=o(" \u2014 "),eG=a("a"),HZo=o("TFMobileBertModel"),UZo=o(" (MobileBERT model)"),JZo=l(),GF=a("li"),Sge=a("strong"),YZo=o("mpnet"),KZo=o(" \u2014 "),oG=a("a"),ZZo=o("TFMPNetModel"),eer=o(" (MPNet model)"),oer=l(),OF=a("li"),Pge=a("strong"),rer=o("mt5"),ter=o(" \u2014 "),rG=a("a"),aer=o("TFMT5Model"),ner=o(" (mT5 model)"),ser=l(),XF=a("li"),$ge=a("strong"),ler=o("openai-gpt"),ier=o(" \u2014 "),tG=a("a"),der=o("TFOpenAIGPTModel"),cer=o(" (OpenAI GPT model)"),mer=l(),VF=a("li"),Ige=a("strong"),fer=o("pegasus"),ger=o(" \u2014 "),aG=a("a"),her=o("TFPegasusModel"),uer=o(" (Pegasus model)"),per=l(),zF=a("li"),jge=a("strong"),_er=o("rembert"),ber=o(" \u2014 "),nG=a("a"),ver=o("TFRemBertModel"),Ter=o(" (RemBERT model)"),Fer=l(),WF=a("li"),Nge=a("strong"),Cer=o("roberta"),Mer=o(" \u2014 "),sG=a("a"),Eer=o("TFRobertaModel"),yer=o(" (RoBERTa model)"),wer=l(),QF=a("li"),Dge=a("strong"),Aer=o("roformer"),Ler=o(" \u2014 "),lG=a("a"),Ber=o("TFRoFormerModel"),xer=o(" (RoFormer model)"),ker=l(),HF=a("li"),qge=a("strong"),Rer=o("speech_to_text"),Ser=o(" \u2014 "),iG=a("a"),Per=o("TFSpeech2TextModel"),$er=o(" (Speech2Text model)"),Ier=l(),UF=a("li"),Gge=a("strong"),jer=o("t5"),Ner=o(" \u2014 "),dG=a("a"),Der=o("TFT5Model"),qer=o(" (T5 model)"),Ger=l(),JF=a("li"),Oge=a("strong"),Oer=o("tapas"),Xer=o(" \u2014 "),cG=a("a"),Ver=o("TFTapasModel"),zer=o(" (TAPAS model)"),Wer=l(),YF=a("li"),Xge=a("strong"),Qer=o("transfo-xl"),Her=o(" \u2014 "),mG=a("a"),Uer=o("TFTransfoXLModel"),Jer=o(" (Transformer-XL model)"),Yer=l(),KF=a("li"),Vge=a("strong"),Ker=o("vit"),Zer=o(" \u2014 "),fG=a("a"),eor=o("TFViTModel"),oor=o(" (ViT model)"),ror=l(),ZF=a("li"),zge=a("strong"),tor=o("wav2vec2"),aor=o(" \u2014 "),gG=a("a"),nor=o("TFWav2Vec2Model"),sor=o(" (Wav2Vec2 model)"),lor=l(),eC=a("li"),Wge=a("strong"),ior=o("xlm"),dor=o(" \u2014 "),hG=a("a"),cor=o("TFXLMModel"),mor=o(" (XLM model)"),gor=l(),oC=a("li"),Qge=a("strong"),hor=o("xlm-roberta"),uor=o(" \u2014 "),uG=a("a"),por=o("TFXLMRobertaModel"),_or=o(" (XLM-RoBERTa model)"),bor=l(),rC=a("li"),Hge=a("strong"),vor=o("xlnet"),Tor=o(" \u2014 "),pG=a("a"),For=o("TFXLNetModel"),Cor=o(" (XLNet model)"),Mor=l(),Uge=a("p"),Eor=o("Examples:"),yor=l(),m(JA.$$.fragment),MRe=l(),uc=a("h2"),tC=a("a"),Jge=a("span"),m(YA.$$.fragment),wor=l(),Yge=a("span"),Aor=o("TFAutoModelForPreTraining"),ERe=l(),Tr=a("div"),m(KA.$$.fragment),Lor=l(),pc=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kge=a("code"),xor=o("from_pretrained()"),kor=o("class method or the "),Zge=a("code"),Ror=o("from_config()"),Sor=o(`class
method.`),Por=l(),ZA=a("p"),$or=o("This class cannot be instantiated directly using "),ehe=a("code"),Ior=o("__init__()"),jor=o(" (throws an error)."),Nor=l(),ht=a("div"),m(e0.$$.fragment),Dor=l(),ohe=a("p"),qor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gor=l(),_c=a("p"),Oor=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),Xor=o("not"),Vor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),the=a("code"),zor=o("from_pretrained()"),Wor=o("to load the model weights."),Qor=l(),ahe=a("p"),Hor=o("Examples:"),Uor=l(),m(o0.$$.fragment),Jor=l(),uo=a("div"),m(r0.$$.fragment),Yor=l(),nhe=a("p"),Kor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zor=l(),_n=a("p"),err=o("The model class to instantiate is selected based on the "),she=a("code"),orr=o("model_type"),rrr=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),trr=o("pretrained_model_name_or_path"),arr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),nrr=o("pretrained_model_name_or_path"),srr=o(":"),lrr=l(),H=a("ul"),aC=a("li"),dhe=a("strong"),irr=o("albert"),drr=o(" \u2014 "),_G=a("a"),crr=o("TFAlbertForPreTraining"),mrr=o(" (ALBERT model)"),frr=l(),nC=a("li"),che=a("strong"),grr=o("bart"),hrr=o(" \u2014 "),bG=a("a"),urr=o("TFBartForConditionalGeneration"),prr=o(" (BART model)"),_rr=l(),sC=a("li"),mhe=a("strong"),brr=o("bert"),vrr=o(" \u2014 "),vG=a("a"),Trr=o("TFBertForPreTraining"),Frr=o(" (BERT model)"),Crr=l(),lC=a("li"),fhe=a("strong"),Mrr=o("camembert"),Err=o(" \u2014 "),TG=a("a"),yrr=o("TFCamembertForMaskedLM"),wrr=o(" (CamemBERT model)"),Arr=l(),iC=a("li"),ghe=a("strong"),Lrr=o("ctrl"),Brr=o(" \u2014 "),FG=a("a"),xrr=o("TFCTRLLMHeadModel"),krr=o(" (CTRL model)"),Rrr=l(),dC=a("li"),hhe=a("strong"),Srr=o("distilbert"),Prr=o(" \u2014 "),CG=a("a"),$rr=o("TFDistilBertForMaskedLM"),Irr=o(" (DistilBERT model)"),jrr=l(),cC=a("li"),uhe=a("strong"),Nrr=o("electra"),Drr=o(" \u2014 "),MG=a("a"),qrr=o("TFElectraForPreTraining"),Grr=o(" (ELECTRA model)"),Orr=l(),mC=a("li"),phe=a("strong"),Xrr=o("flaubert"),Vrr=o(" \u2014 "),EG=a("a"),zrr=o("TFFlaubertWithLMHeadModel"),Wrr=o(" (FlauBERT model)"),Qrr=l(),fC=a("li"),_he=a("strong"),Hrr=o("funnel"),Urr=o(" \u2014 "),yG=a("a"),Jrr=o("TFFunnelForPreTraining"),Yrr=o(" (Funnel Transformer model)"),Krr=l(),gC=a("li"),bhe=a("strong"),Zrr=o("gpt2"),etr=o(" \u2014 "),wG=a("a"),otr=o("TFGPT2LMHeadModel"),rtr=o(" (OpenAI GPT-2 model)"),ttr=l(),hC=a("li"),vhe=a("strong"),atr=o("layoutlm"),ntr=o(" \u2014 "),AG=a("a"),str=o("TFLayoutLMForMaskedLM"),ltr=o(" (LayoutLM model)"),itr=l(),uC=a("li"),The=a("strong"),dtr=o("lxmert"),ctr=o(" \u2014 "),LG=a("a"),mtr=o("TFLxmertForPreTraining"),ftr=o(" (LXMERT model)"),gtr=l(),pC=a("li"),Fhe=a("strong"),htr=o("mobilebert"),utr=o(" \u2014 "),BG=a("a"),ptr=o("TFMobileBertForPreTraining"),_tr=o(" (MobileBERT model)"),btr=l(),_C=a("li"),Che=a("strong"),vtr=o("mpnet"),Ttr=o(" \u2014 "),xG=a("a"),Ftr=o("TFMPNetForMaskedLM"),Ctr=o(" (MPNet model)"),Mtr=l(),bC=a("li"),Mhe=a("strong"),Etr=o("openai-gpt"),ytr=o(" \u2014 "),kG=a("a"),wtr=o("TFOpenAIGPTLMHeadModel"),Atr=o(" (OpenAI GPT model)"),Ltr=l(),vC=a("li"),Ehe=a("strong"),Btr=o("roberta"),xtr=o(" \u2014 "),RG=a("a"),ktr=o("TFRobertaForMaskedLM"),Rtr=o(" (RoBERTa model)"),Str=l(),TC=a("li"),yhe=a("strong"),Ptr=o("t5"),$tr=o(" \u2014 "),SG=a("a"),Itr=o("TFT5ForConditionalGeneration"),jtr=o(" (T5 model)"),Ntr=l(),FC=a("li"),whe=a("strong"),Dtr=o("tapas"),qtr=o(" \u2014 "),PG=a("a"),Gtr=o("TFTapasForMaskedLM"),Otr=o(" (TAPAS model)"),Xtr=l(),CC=a("li"),Ahe=a("strong"),Vtr=o("transfo-xl"),ztr=o(" \u2014 "),$G=a("a"),Wtr=o("TFTransfoXLLMHeadModel"),Qtr=o(" (Transformer-XL model)"),Htr=l(),MC=a("li"),Lhe=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),IG=a("a"),Ytr=o("TFXLMWithLMHeadModel"),Ktr=o(" (XLM model)"),Ztr=l(),EC=a("li"),Bhe=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),jG=a("a"),rar=o("TFXLMRobertaForMaskedLM"),tar=o(" (XLM-RoBERTa model)"),aar=l(),yC=a("li"),xhe=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),NG=a("a"),lar=o("TFXLNetLMHeadModel"),iar=o(" (XLNet model)"),dar=l(),khe=a("p"),car=o("Examples:"),mar=l(),m(t0.$$.fragment),yRe=l(),bc=a("h2"),wC=a("a"),Rhe=a("span"),m(a0.$$.fragment),far=l(),She=a("span"),gar=o("TFAutoModelForCausalLM"),wRe=l(),Fr=a("div"),m(n0.$$.fragment),har=l(),vc=a("p"),uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Phe=a("code"),par=o("from_pretrained()"),_ar=o("class method or the "),$he=a("code"),bar=o("from_config()"),Tar=o(`class
method.`),Far=l(),s0=a("p"),Car=o("This class cannot be instantiated directly using "),Ihe=a("code"),Mar=o("__init__()"),Ear=o(" (throws an error)."),yar=l(),ut=a("div"),m(l0.$$.fragment),war=l(),jhe=a("p"),Aar=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lar=l(),Tc=a("p"),Bar=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),xar=o("not"),kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dhe=a("code"),Rar=o("from_pretrained()"),Sar=o("to load the model weights."),Par=l(),qhe=a("p"),$ar=o("Examples:"),Iar=l(),m(i0.$$.fragment),jar=l(),po=a("div"),m(d0.$$.fragment),Nar=l(),Ghe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qar=l(),bn=a("p"),Gar=o("The model class to instantiate is selected based on the "),Ohe=a("code"),Oar=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),Var=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),War=o("pretrained_model_name_or_path"),Qar=o(":"),Har=l(),ce=a("ul"),AC=a("li"),zhe=a("strong"),Uar=o("bert"),Jar=o(" \u2014 "),DG=a("a"),Yar=o("TFBertLMHeadModel"),Kar=o(" (BERT model)"),Zar=l(),LC=a("li"),Whe=a("strong"),enr=o("camembert"),onr=o(" \u2014 "),qG=a("a"),rnr=o("TFCamembertForCausalLM"),tnr=o(" (CamemBERT model)"),anr=l(),BC=a("li"),Qhe=a("strong"),nnr=o("ctrl"),snr=o(" \u2014 "),GG=a("a"),lnr=o("TFCTRLLMHeadModel"),inr=o(" (CTRL model)"),dnr=l(),xC=a("li"),Hhe=a("strong"),cnr=o("gpt2"),mnr=o(" \u2014 "),OG=a("a"),fnr=o("TFGPT2LMHeadModel"),gnr=o(" (OpenAI GPT-2 model)"),hnr=l(),kC=a("li"),Uhe=a("strong"),unr=o("gptj"),pnr=o(" \u2014 "),XG=a("a"),_nr=o("TFGPTJForCausalLM"),bnr=o(" (GPT-J model)"),vnr=l(),RC=a("li"),Jhe=a("strong"),Tnr=o("openai-gpt"),Fnr=o(" \u2014 "),VG=a("a"),Cnr=o("TFOpenAIGPTLMHeadModel"),Mnr=o(" (OpenAI GPT model)"),Enr=l(),SC=a("li"),Yhe=a("strong"),ynr=o("rembert"),wnr=o(" \u2014 "),zG=a("a"),Anr=o("TFRemBertForCausalLM"),Lnr=o(" (RemBERT model)"),Bnr=l(),PC=a("li"),Khe=a("strong"),xnr=o("roberta"),knr=o(" \u2014 "),WG=a("a"),Rnr=o("TFRobertaForCausalLM"),Snr=o(" (RoBERTa model)"),Pnr=l(),$C=a("li"),Zhe=a("strong"),$nr=o("roformer"),Inr=o(" \u2014 "),QG=a("a"),jnr=o("TFRoFormerForCausalLM"),Nnr=o(" (RoFormer model)"),Dnr=l(),IC=a("li"),eue=a("strong"),qnr=o("transfo-xl"),Gnr=o(" \u2014 "),HG=a("a"),Onr=o("TFTransfoXLLMHeadModel"),Xnr=o(" (Transformer-XL model)"),Vnr=l(),jC=a("li"),oue=a("strong"),znr=o("xlm"),Wnr=o(" \u2014 "),UG=a("a"),Qnr=o("TFXLMWithLMHeadModel"),Hnr=o(" (XLM model)"),Unr=l(),NC=a("li"),rue=a("strong"),Jnr=o("xlnet"),Ynr=o(" \u2014 "),JG=a("a"),Knr=o("TFXLNetLMHeadModel"),Znr=o(" (XLNet model)"),esr=l(),tue=a("p"),osr=o("Examples:"),rsr=l(),m(c0.$$.fragment),ARe=l(),Fc=a("h2"),DC=a("a"),aue=a("span"),m(m0.$$.fragment),tsr=l(),nue=a("span"),asr=o("TFAutoModelForImageClassification"),LRe=l(),Cr=a("div"),m(f0.$$.fragment),nsr=l(),Cc=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sue=a("code"),lsr=o("from_pretrained()"),isr=o("class method or the "),lue=a("code"),dsr=o("from_config()"),csr=o(`class
method.`),msr=l(),g0=a("p"),fsr=o("This class cannot be instantiated directly using "),iue=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),usr=l(),pt=a("div"),m(h0.$$.fragment),psr=l(),due=a("p"),_sr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bsr=l(),Mc=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),Tsr=o("not"),Fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=a("code"),Csr=o("from_pretrained()"),Msr=o("to load the model weights."),Esr=l(),fue=a("p"),ysr=o("Examples:"),wsr=l(),m(u0.$$.fragment),Asr=l(),_o=a("div"),m(p0.$$.fragment),Lsr=l(),gue=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xsr=l(),vn=a("p"),ksr=o("The model class to instantiate is selected based on the "),hue=a("code"),Rsr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),Psr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Isr=o("pretrained_model_name_or_path"),jsr=o(":"),Nsr=l(),_0=a("ul"),qC=a("li"),_ue=a("strong"),Dsr=o("convnext"),qsr=o(" \u2014 "),YG=a("a"),Gsr=o("TFConvNextForImageClassification"),Osr=o(" (ConvNext model)"),Xsr=l(),GC=a("li"),bue=a("strong"),Vsr=o("vit"),zsr=o(" \u2014 "),KG=a("a"),Wsr=o("TFViTForImageClassification"),Qsr=o(" (ViT model)"),Hsr=l(),vue=a("p"),Usr=o("Examples:"),Jsr=l(),m(b0.$$.fragment),BRe=l(),Ec=a("h2"),OC=a("a"),Tue=a("span"),m(v0.$$.fragment),Ysr=l(),Fue=a("span"),Ksr=o("TFAutoModelForMaskedLM"),xRe=l(),Mr=a("div"),m(T0.$$.fragment),Zsr=l(),yc=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cue=a("code"),olr=o("from_pretrained()"),rlr=o("class method or the "),Mue=a("code"),tlr=o("from_config()"),alr=o(`class
method.`),nlr=l(),F0=a("p"),slr=o("This class cannot be instantiated directly using "),Eue=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),_t=a("div"),m(C0.$$.fragment),clr=l(),yue=a("p"),mlr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),flr=l(),wc=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),hlr=o("not"),ulr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=a("code"),plr=o("from_pretrained()"),_lr=o("to load the model weights."),blr=l(),Lue=a("p"),vlr=o("Examples:"),Tlr=l(),m(M0.$$.fragment),Flr=l(),bo=a("div"),m(E0.$$.fragment),Clr=l(),Bue=a("p"),Mlr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Elr=l(),Tn=a("p"),ylr=o("The model class to instantiate is selected based on the "),xue=a("code"),wlr=o("model_type"),Alr=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),Llr=o("pretrained_model_name_or_path"),Blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),xlr=o("pretrained_model_name_or_path"),klr=o(":"),Rlr=l(),J=a("ul"),XC=a("li"),Sue=a("strong"),Slr=o("albert"),Plr=o(" \u2014 "),ZG=a("a"),$lr=o("TFAlbertForMaskedLM"),Ilr=o(" (ALBERT model)"),jlr=l(),VC=a("li"),Pue=a("strong"),Nlr=o("bert"),Dlr=o(" \u2014 "),eO=a("a"),qlr=o("TFBertForMaskedLM"),Glr=o(" (BERT model)"),Olr=l(),zC=a("li"),$ue=a("strong"),Xlr=o("camembert"),Vlr=o(" \u2014 "),oO=a("a"),zlr=o("TFCamembertForMaskedLM"),Wlr=o(" (CamemBERT model)"),Qlr=l(),WC=a("li"),Iue=a("strong"),Hlr=o("convbert"),Ulr=o(" \u2014 "),rO=a("a"),Jlr=o("TFConvBertForMaskedLM"),Ylr=o(" (ConvBERT model)"),Klr=l(),QC=a("li"),jue=a("strong"),Zlr=o("deberta"),eir=o(" \u2014 "),tO=a("a"),oir=o("TFDebertaForMaskedLM"),rir=o(" (DeBERTa model)"),tir=l(),HC=a("li"),Nue=a("strong"),air=o("deberta-v2"),nir=o(" \u2014 "),aO=a("a"),sir=o("TFDebertaV2ForMaskedLM"),lir=o(" (DeBERTa-v2 model)"),iir=l(),UC=a("li"),Due=a("strong"),dir=o("distilbert"),cir=o(" \u2014 "),nO=a("a"),mir=o("TFDistilBertForMaskedLM"),fir=o(" (DistilBERT model)"),gir=l(),JC=a("li"),que=a("strong"),hir=o("electra"),uir=o(" \u2014 "),sO=a("a"),pir=o("TFElectraForMaskedLM"),_ir=o(" (ELECTRA model)"),bir=l(),YC=a("li"),Gue=a("strong"),vir=o("flaubert"),Tir=o(" \u2014 "),lO=a("a"),Fir=o("TFFlaubertWithLMHeadModel"),Cir=o(" (FlauBERT model)"),Mir=l(),KC=a("li"),Oue=a("strong"),Eir=o("funnel"),yir=o(" \u2014 "),iO=a("a"),wir=o("TFFunnelForMaskedLM"),Air=o(" (Funnel Transformer model)"),Lir=l(),ZC=a("li"),Xue=a("strong"),Bir=o("layoutlm"),xir=o(" \u2014 "),dO=a("a"),kir=o("TFLayoutLMForMaskedLM"),Rir=o(" (LayoutLM model)"),Sir=l(),eM=a("li"),Vue=a("strong"),Pir=o("longformer"),$ir=o(" \u2014 "),cO=a("a"),Iir=o("TFLongformerForMaskedLM"),jir=o(" (Longformer model)"),Nir=l(),oM=a("li"),zue=a("strong"),Dir=o("mobilebert"),qir=o(" \u2014 "),mO=a("a"),Gir=o("TFMobileBertForMaskedLM"),Oir=o(" (MobileBERT model)"),Xir=l(),rM=a("li"),Wue=a("strong"),Vir=o("mpnet"),zir=o(" \u2014 "),fO=a("a"),Wir=o("TFMPNetForMaskedLM"),Qir=o(" (MPNet model)"),Hir=l(),tM=a("li"),Que=a("strong"),Uir=o("rembert"),Jir=o(" \u2014 "),gO=a("a"),Yir=o("TFRemBertForMaskedLM"),Kir=o(" (RemBERT model)"),Zir=l(),aM=a("li"),Hue=a("strong"),edr=o("roberta"),odr=o(" \u2014 "),hO=a("a"),rdr=o("TFRobertaForMaskedLM"),tdr=o(" (RoBERTa model)"),adr=l(),nM=a("li"),Uue=a("strong"),ndr=o("roformer"),sdr=o(" \u2014 "),uO=a("a"),ldr=o("TFRoFormerForMaskedLM"),idr=o(" (RoFormer model)"),ddr=l(),sM=a("li"),Jue=a("strong"),cdr=o("tapas"),mdr=o(" \u2014 "),pO=a("a"),fdr=o("TFTapasForMaskedLM"),gdr=o(" (TAPAS model)"),hdr=l(),lM=a("li"),Yue=a("strong"),udr=o("xlm"),pdr=o(" \u2014 "),_O=a("a"),_dr=o("TFXLMWithLMHeadModel"),bdr=o(" (XLM model)"),vdr=l(),iM=a("li"),Kue=a("strong"),Tdr=o("xlm-roberta"),Fdr=o(" \u2014 "),bO=a("a"),Cdr=o("TFXLMRobertaForMaskedLM"),Mdr=o(" (XLM-RoBERTa model)"),Edr=l(),Zue=a("p"),ydr=o("Examples:"),wdr=l(),m(y0.$$.fragment),kRe=l(),Ac=a("h2"),dM=a("a"),epe=a("span"),m(w0.$$.fragment),Adr=l(),ope=a("span"),Ldr=o("TFAutoModelForSeq2SeqLM"),RRe=l(),Er=a("div"),m(A0.$$.fragment),Bdr=l(),Lc=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rpe=a("code"),kdr=o("from_pretrained()"),Rdr=o("class method or the "),tpe=a("code"),Sdr=o("from_config()"),Pdr=o(`class
method.`),$dr=l(),L0=a("p"),Idr=o("This class cannot be instantiated directly using "),ape=a("code"),jdr=o("__init__()"),Ndr=o(" (throws an error)."),Ddr=l(),bt=a("div"),m(B0.$$.fragment),qdr=l(),npe=a("p"),Gdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Odr=l(),Bc=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),Vdr=o("not"),zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lpe=a("code"),Wdr=o("from_pretrained()"),Qdr=o("to load the model weights."),Hdr=l(),ipe=a("p"),Udr=o("Examples:"),Jdr=l(),m(x0.$$.fragment),Ydr=l(),vo=a("div"),m(k0.$$.fragment),Kdr=l(),dpe=a("p"),Zdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ecr=l(),Fn=a("p"),ocr=o("The model class to instantiate is selected based on the "),cpe=a("code"),rcr=o("model_type"),tcr=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),acr=o("pretrained_model_name_or_path"),ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),scr=o("pretrained_model_name_or_path"),lcr=o(":"),icr=l(),_e=a("ul"),cM=a("li"),gpe=a("strong"),dcr=o("bart"),ccr=o(" \u2014 "),vO=a("a"),mcr=o("TFBartForConditionalGeneration"),fcr=o(" (BART model)"),gcr=l(),mM=a("li"),hpe=a("strong"),hcr=o("blenderbot"),ucr=o(" \u2014 "),TO=a("a"),pcr=o("TFBlenderbotForConditionalGeneration"),_cr=o(" (Blenderbot model)"),bcr=l(),fM=a("li"),upe=a("strong"),vcr=o("blenderbot-small"),Tcr=o(" \u2014 "),FO=a("a"),Fcr=o("TFBlenderbotSmallForConditionalGeneration"),Ccr=o(" (BlenderbotSmall model)"),Mcr=l(),gM=a("li"),ppe=a("strong"),Ecr=o("encoder-decoder"),ycr=o(" \u2014 "),CO=a("a"),wcr=o("TFEncoderDecoderModel"),Acr=o(" (Encoder decoder model)"),Lcr=l(),hM=a("li"),_pe=a("strong"),Bcr=o("led"),xcr=o(" \u2014 "),MO=a("a"),kcr=o("TFLEDForConditionalGeneration"),Rcr=o(" (LED model)"),Scr=l(),uM=a("li"),bpe=a("strong"),Pcr=o("marian"),$cr=o(" \u2014 "),EO=a("a"),Icr=o("TFMarianMTModel"),jcr=o(" (Marian model)"),Ncr=l(),pM=a("li"),vpe=a("strong"),Dcr=o("mbart"),qcr=o(" \u2014 "),yO=a("a"),Gcr=o("TFMBartForConditionalGeneration"),Ocr=o(" (mBART model)"),Xcr=l(),_M=a("li"),Tpe=a("strong"),Vcr=o("mt5"),zcr=o(" \u2014 "),wO=a("a"),Wcr=o("TFMT5ForConditionalGeneration"),Qcr=o(" (mT5 model)"),Hcr=l(),bM=a("li"),Fpe=a("strong"),Ucr=o("pegasus"),Jcr=o(" \u2014 "),AO=a("a"),Ycr=o("TFPegasusForConditionalGeneration"),Kcr=o(" (Pegasus model)"),Zcr=l(),vM=a("li"),Cpe=a("strong"),emr=o("t5"),omr=o(" \u2014 "),LO=a("a"),rmr=o("TFT5ForConditionalGeneration"),tmr=o(" (T5 model)"),amr=l(),Mpe=a("p"),nmr=o("Examples:"),smr=l(),m(R0.$$.fragment),SRe=l(),xc=a("h2"),TM=a("a"),Epe=a("span"),m(S0.$$.fragment),lmr=l(),ype=a("span"),imr=o("TFAutoModelForSequenceClassification"),PRe=l(),yr=a("div"),m(P0.$$.fragment),dmr=l(),kc=a("p"),cmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wpe=a("code"),mmr=o("from_pretrained()"),fmr=o("class method or the "),Ape=a("code"),gmr=o("from_config()"),hmr=o(`class
method.`),umr=l(),$0=a("p"),pmr=o("This class cannot be instantiated directly using "),Lpe=a("code"),_mr=o("__init__()"),bmr=o(" (throws an error)."),vmr=l(),vt=a("div"),m(I0.$$.fragment),Tmr=l(),Bpe=a("p"),Fmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cmr=l(),Rc=a("p"),Mmr=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),Emr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kpe=a("code"),wmr=o("from_pretrained()"),Amr=o("to load the model weights."),Lmr=l(),Rpe=a("p"),Bmr=o("Examples:"),xmr=l(),m(j0.$$.fragment),kmr=l(),To=a("div"),m(N0.$$.fragment),Rmr=l(),Spe=a("p"),Smr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pmr=l(),Cn=a("p"),$mr=o("The model class to instantiate is selected based on the "),Ppe=a("code"),Imr=o("model_type"),jmr=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),Nmr=o("pretrained_model_name_or_path"),Dmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),qmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),X=a("ul"),FM=a("li"),jpe=a("strong"),Xmr=o("albert"),Vmr=o(" \u2014 "),BO=a("a"),zmr=o("TFAlbertForSequenceClassification"),Wmr=o(" (ALBERT model)"),Qmr=l(),CM=a("li"),Npe=a("strong"),Hmr=o("bert"),Umr=o(" \u2014 "),xO=a("a"),Jmr=o("TFBertForSequenceClassification"),Ymr=o(" (BERT model)"),Kmr=l(),MM=a("li"),Dpe=a("strong"),Zmr=o("camembert"),efr=o(" \u2014 "),kO=a("a"),ofr=o("TFCamembertForSequenceClassification"),rfr=o(" (CamemBERT model)"),tfr=l(),EM=a("li"),qpe=a("strong"),afr=o("convbert"),nfr=o(" \u2014 "),RO=a("a"),sfr=o("TFConvBertForSequenceClassification"),lfr=o(" (ConvBERT model)"),ifr=l(),yM=a("li"),Gpe=a("strong"),dfr=o("ctrl"),cfr=o(" \u2014 "),SO=a("a"),mfr=o("TFCTRLForSequenceClassification"),ffr=o(" (CTRL model)"),gfr=l(),wM=a("li"),Ope=a("strong"),hfr=o("deberta"),ufr=o(" \u2014 "),PO=a("a"),pfr=o("TFDebertaForSequenceClassification"),_fr=o(" (DeBERTa model)"),bfr=l(),AM=a("li"),Xpe=a("strong"),vfr=o("deberta-v2"),Tfr=o(" \u2014 "),$O=a("a"),Ffr=o("TFDebertaV2ForSequenceClassification"),Cfr=o(" (DeBERTa-v2 model)"),Mfr=l(),LM=a("li"),Vpe=a("strong"),Efr=o("distilbert"),yfr=o(" \u2014 "),IO=a("a"),wfr=o("TFDistilBertForSequenceClassification"),Afr=o(" (DistilBERT model)"),Lfr=l(),BM=a("li"),zpe=a("strong"),Bfr=o("electra"),xfr=o(" \u2014 "),jO=a("a"),kfr=o("TFElectraForSequenceClassification"),Rfr=o(" (ELECTRA model)"),Sfr=l(),xM=a("li"),Wpe=a("strong"),Pfr=o("flaubert"),$fr=o(" \u2014 "),NO=a("a"),Ifr=o("TFFlaubertForSequenceClassification"),jfr=o(" (FlauBERT model)"),Nfr=l(),kM=a("li"),Qpe=a("strong"),Dfr=o("funnel"),qfr=o(" \u2014 "),DO=a("a"),Gfr=o("TFFunnelForSequenceClassification"),Ofr=o(" (Funnel Transformer model)"),Xfr=l(),RM=a("li"),Hpe=a("strong"),Vfr=o("gpt2"),zfr=o(" \u2014 "),qO=a("a"),Wfr=o("TFGPT2ForSequenceClassification"),Qfr=o(" (OpenAI GPT-2 model)"),Hfr=l(),SM=a("li"),Upe=a("strong"),Ufr=o("gptj"),Jfr=o(" \u2014 "),GO=a("a"),Yfr=o("TFGPTJForSequenceClassification"),Kfr=o(" (GPT-J model)"),Zfr=l(),PM=a("li"),Jpe=a("strong"),egr=o("layoutlm"),ogr=o(" \u2014 "),OO=a("a"),rgr=o("TFLayoutLMForSequenceClassification"),tgr=o(" (LayoutLM model)"),agr=l(),$M=a("li"),Ype=a("strong"),ngr=o("longformer"),sgr=o(" \u2014 "),XO=a("a"),lgr=o("TFLongformerForSequenceClassification"),igr=o(" (Longformer model)"),dgr=l(),IM=a("li"),Kpe=a("strong"),cgr=o("mobilebert"),mgr=o(" \u2014 "),VO=a("a"),fgr=o("TFMobileBertForSequenceClassification"),ggr=o(" (MobileBERT model)"),hgr=l(),jM=a("li"),Zpe=a("strong"),ugr=o("mpnet"),pgr=o(" \u2014 "),zO=a("a"),_gr=o("TFMPNetForSequenceClassification"),bgr=o(" (MPNet model)"),vgr=l(),NM=a("li"),e_e=a("strong"),Tgr=o("openai-gpt"),Fgr=o(" \u2014 "),WO=a("a"),Cgr=o("TFOpenAIGPTForSequenceClassification"),Mgr=o(" (OpenAI GPT model)"),Egr=l(),DM=a("li"),o_e=a("strong"),ygr=o("rembert"),wgr=o(" \u2014 "),QO=a("a"),Agr=o("TFRemBertForSequenceClassification"),Lgr=o(" (RemBERT model)"),Bgr=l(),qM=a("li"),r_e=a("strong"),xgr=o("roberta"),kgr=o(" \u2014 "),HO=a("a"),Rgr=o("TFRobertaForSequenceClassification"),Sgr=o(" (RoBERTa model)"),Pgr=l(),GM=a("li"),t_e=a("strong"),$gr=o("roformer"),Igr=o(" \u2014 "),UO=a("a"),jgr=o("TFRoFormerForSequenceClassification"),Ngr=o(" (RoFormer model)"),Dgr=l(),OM=a("li"),a_e=a("strong"),qgr=o("tapas"),Ggr=o(" \u2014 "),JO=a("a"),Ogr=o("TFTapasForSequenceClassification"),Xgr=o(" (TAPAS model)"),Vgr=l(),XM=a("li"),n_e=a("strong"),zgr=o("transfo-xl"),Wgr=o(" \u2014 "),YO=a("a"),Qgr=o("TFTransfoXLForSequenceClassification"),Hgr=o(" (Transformer-XL model)"),Ugr=l(),VM=a("li"),s_e=a("strong"),Jgr=o("xlm"),Ygr=o(" \u2014 "),KO=a("a"),Kgr=o("TFXLMForSequenceClassification"),Zgr=o(" (XLM model)"),ehr=l(),zM=a("li"),l_e=a("strong"),ohr=o("xlm-roberta"),rhr=o(" \u2014 "),ZO=a("a"),thr=o("TFXLMRobertaForSequenceClassification"),ahr=o(" (XLM-RoBERTa model)"),nhr=l(),WM=a("li"),i_e=a("strong"),shr=o("xlnet"),lhr=o(" \u2014 "),eX=a("a"),ihr=o("TFXLNetForSequenceClassification"),dhr=o(" (XLNet model)"),chr=l(),d_e=a("p"),mhr=o("Examples:"),fhr=l(),m(D0.$$.fragment),$Re=l(),Sc=a("h2"),QM=a("a"),c_e=a("span"),m(q0.$$.fragment),ghr=l(),m_e=a("span"),hhr=o("TFAutoModelForMultipleChoice"),IRe=l(),wr=a("div"),m(G0.$$.fragment),uhr=l(),Pc=a("p"),phr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),f_e=a("code"),_hr=o("from_pretrained()"),bhr=o("class method or the "),g_e=a("code"),vhr=o("from_config()"),Thr=o(`class
method.`),Fhr=l(),O0=a("p"),Chr=o("This class cannot be instantiated directly using "),h_e=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),yhr=l(),Tt=a("div"),m(X0.$$.fragment),whr=l(),u_e=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lhr=l(),$c=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),xhr=o("not"),khr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=a("code"),Rhr=o("from_pretrained()"),Shr=o("to load the model weights."),Phr=l(),b_e=a("p"),$hr=o("Examples:"),Ihr=l(),m(V0.$$.fragment),jhr=l(),Fo=a("div"),m(z0.$$.fragment),Nhr=l(),v_e=a("p"),Dhr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qhr=l(),Mn=a("p"),Ghr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Ohr=o("model_type"),Xhr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Vhr=o("pretrained_model_name_or_path"),zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),Whr=o("pretrained_model_name_or_path"),Qhr=o(":"),Hhr=l(),ae=a("ul"),HM=a("li"),M_e=a("strong"),Uhr=o("albert"),Jhr=o(" \u2014 "),oX=a("a"),Yhr=o("TFAlbertForMultipleChoice"),Khr=o(" (ALBERT model)"),Zhr=l(),UM=a("li"),E_e=a("strong"),eur=o("bert"),our=o(" \u2014 "),rX=a("a"),rur=o("TFBertForMultipleChoice"),tur=o(" (BERT model)"),aur=l(),JM=a("li"),y_e=a("strong"),nur=o("camembert"),sur=o(" \u2014 "),tX=a("a"),lur=o("TFCamembertForMultipleChoice"),iur=o(" (CamemBERT model)"),dur=l(),YM=a("li"),w_e=a("strong"),cur=o("convbert"),mur=o(" \u2014 "),aX=a("a"),fur=o("TFConvBertForMultipleChoice"),gur=o(" (ConvBERT model)"),hur=l(),KM=a("li"),A_e=a("strong"),uur=o("distilbert"),pur=o(" \u2014 "),nX=a("a"),_ur=o("TFDistilBertForMultipleChoice"),bur=o(" (DistilBERT model)"),vur=l(),ZM=a("li"),L_e=a("strong"),Tur=o("electra"),Fur=o(" \u2014 "),sX=a("a"),Cur=o("TFElectraForMultipleChoice"),Mur=o(" (ELECTRA model)"),Eur=l(),e4=a("li"),B_e=a("strong"),yur=o("flaubert"),wur=o(" \u2014 "),lX=a("a"),Aur=o("TFFlaubertForMultipleChoice"),Lur=o(" (FlauBERT model)"),Bur=l(),o4=a("li"),x_e=a("strong"),xur=o("funnel"),kur=o(" \u2014 "),iX=a("a"),Rur=o("TFFunnelForMultipleChoice"),Sur=o(" (Funnel Transformer model)"),Pur=l(),r4=a("li"),k_e=a("strong"),$ur=o("longformer"),Iur=o(" \u2014 "),dX=a("a"),jur=o("TFLongformerForMultipleChoice"),Nur=o(" (Longformer model)"),Dur=l(),t4=a("li"),R_e=a("strong"),qur=o("mobilebert"),Gur=o(" \u2014 "),cX=a("a"),Our=o("TFMobileBertForMultipleChoice"),Xur=o(" (MobileBERT model)"),Vur=l(),a4=a("li"),S_e=a("strong"),zur=o("mpnet"),Wur=o(" \u2014 "),mX=a("a"),Qur=o("TFMPNetForMultipleChoice"),Hur=o(" (MPNet model)"),Uur=l(),n4=a("li"),P_e=a("strong"),Jur=o("rembert"),Yur=o(" \u2014 "),fX=a("a"),Kur=o("TFRemBertForMultipleChoice"),Zur=o(" (RemBERT model)"),epr=l(),s4=a("li"),$_e=a("strong"),opr=o("roberta"),rpr=o(" \u2014 "),gX=a("a"),tpr=o("TFRobertaForMultipleChoice"),apr=o(" (RoBERTa model)"),npr=l(),l4=a("li"),I_e=a("strong"),spr=o("roformer"),lpr=o(" \u2014 "),hX=a("a"),ipr=o("TFRoFormerForMultipleChoice"),dpr=o(" (RoFormer model)"),cpr=l(),i4=a("li"),j_e=a("strong"),mpr=o("xlm"),fpr=o(" \u2014 "),uX=a("a"),gpr=o("TFXLMForMultipleChoice"),hpr=o(" (XLM model)"),upr=l(),d4=a("li"),N_e=a("strong"),ppr=o("xlm-roberta"),_pr=o(" \u2014 "),pX=a("a"),bpr=o("TFXLMRobertaForMultipleChoice"),vpr=o(" (XLM-RoBERTa model)"),Tpr=l(),c4=a("li"),D_e=a("strong"),Fpr=o("xlnet"),Cpr=o(" \u2014 "),_X=a("a"),Mpr=o("TFXLNetForMultipleChoice"),Epr=o(" (XLNet model)"),ypr=l(),q_e=a("p"),wpr=o("Examples:"),Apr=l(),m(W0.$$.fragment),jRe=l(),Ic=a("h2"),m4=a("a"),G_e=a("span"),m(Q0.$$.fragment),Lpr=l(),O_e=a("span"),Bpr=o("TFAutoModelForTableQuestionAnswering"),NRe=l(),Ar=a("div"),m(H0.$$.fragment),xpr=l(),jc=a("p"),kpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),X_e=a("code"),Rpr=o("from_pretrained()"),Spr=o("class method or the "),V_e=a("code"),Ppr=o("from_config()"),$pr=o(`class
method.`),Ipr=l(),U0=a("p"),jpr=o("This class cannot be instantiated directly using "),z_e=a("code"),Npr=o("__init__()"),Dpr=o(" (throws an error)."),qpr=l(),Ft=a("div"),m(J0.$$.fragment),Gpr=l(),W_e=a("p"),Opr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Xpr=l(),Nc=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),zpr=o("not"),Wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=a("code"),Qpr=o("from_pretrained()"),Hpr=o("to load the model weights."),Upr=l(),U_e=a("p"),Jpr=o("Examples:"),Ypr=l(),m(Y0.$$.fragment),Kpr=l(),Co=a("div"),m(K0.$$.fragment),Zpr=l(),J_e=a("p"),e_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o_r=l(),En=a("p"),r_r=o("The model class to instantiate is selected based on the "),Y_e=a("code"),t_r=o("model_type"),a_r=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),n_r=o("pretrained_model_name_or_path"),s_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),l_r=o("pretrained_model_name_or_path"),i_r=o(":"),d_r=l(),ebe=a("ul"),f4=a("li"),obe=a("strong"),c_r=o("tapas"),m_r=o(" \u2014 "),bX=a("a"),f_r=o("TFTapasForQuestionAnswering"),g_r=o(" (TAPAS model)"),h_r=l(),rbe=a("p"),u_r=o("Examples:"),p_r=l(),m(Z0.$$.fragment),DRe=l(),Dc=a("h2"),g4=a("a"),tbe=a("span"),m(eL.$$.fragment),__r=l(),abe=a("span"),b_r=o("TFAutoModelForTokenClassification"),qRe=l(),Lr=a("div"),m(oL.$$.fragment),v_r=l(),qc=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nbe=a("code"),F_r=o("from_pretrained()"),C_r=o("class method or the "),sbe=a("code"),M_r=o("from_config()"),E_r=o(`class
method.`),y_r=l(),rL=a("p"),w_r=o("This class cannot be instantiated directly using "),lbe=a("code"),A_r=o("__init__()"),L_r=o(" (throws an error)."),B_r=l(),Ct=a("div"),m(tL.$$.fragment),x_r=l(),ibe=a("p"),k_r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),R_r=l(),Gc=a("p"),S_r=o(`Note:
Loading a model from its configuration file does `),dbe=a("strong"),P_r=o("not"),$_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cbe=a("code"),I_r=o("from_pretrained()"),j_r=o("to load the model weights."),N_r=l(),mbe=a("p"),D_r=o("Examples:"),q_r=l(),m(aL.$$.fragment),G_r=l(),Mo=a("div"),m(nL.$$.fragment),O_r=l(),fbe=a("p"),X_r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),V_r=l(),yn=a("p"),z_r=o("The model class to instantiate is selected based on the "),gbe=a("code"),W_r=o("model_type"),Q_r=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),H_r=o("pretrained_model_name_or_path"),U_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(":"),K_r=l(),Y=a("ul"),h4=a("li"),pbe=a("strong"),Z_r=o("albert"),ebr=o(" \u2014 "),vX=a("a"),obr=o("TFAlbertForTokenClassification"),rbr=o(" (ALBERT model)"),tbr=l(),u4=a("li"),_be=a("strong"),abr=o("bert"),nbr=o(" \u2014 "),TX=a("a"),sbr=o("TFBertForTokenClassification"),lbr=o(" (BERT model)"),ibr=l(),p4=a("li"),bbe=a("strong"),dbr=o("camembert"),cbr=o(" \u2014 "),FX=a("a"),mbr=o("TFCamembertForTokenClassification"),fbr=o(" (CamemBERT model)"),gbr=l(),_4=a("li"),vbe=a("strong"),hbr=o("convbert"),ubr=o(" \u2014 "),CX=a("a"),pbr=o("TFConvBertForTokenClassification"),_br=o(" (ConvBERT model)"),bbr=l(),b4=a("li"),Tbe=a("strong"),vbr=o("deberta"),Tbr=o(" \u2014 "),MX=a("a"),Fbr=o("TFDebertaForTokenClassification"),Cbr=o(" (DeBERTa model)"),Mbr=l(),v4=a("li"),Fbe=a("strong"),Ebr=o("deberta-v2"),ybr=o(" \u2014 "),EX=a("a"),wbr=o("TFDebertaV2ForTokenClassification"),Abr=o(" (DeBERTa-v2 model)"),Lbr=l(),T4=a("li"),Cbe=a("strong"),Bbr=o("distilbert"),xbr=o(" \u2014 "),yX=a("a"),kbr=o("TFDistilBertForTokenClassification"),Rbr=o(" (DistilBERT model)"),Sbr=l(),F4=a("li"),Mbe=a("strong"),Pbr=o("electra"),$br=o(" \u2014 "),wX=a("a"),Ibr=o("TFElectraForTokenClassification"),jbr=o(" (ELECTRA model)"),Nbr=l(),C4=a("li"),Ebe=a("strong"),Dbr=o("flaubert"),qbr=o(" \u2014 "),AX=a("a"),Gbr=o("TFFlaubertForTokenClassification"),Obr=o(" (FlauBERT model)"),Xbr=l(),M4=a("li"),ybe=a("strong"),Vbr=o("funnel"),zbr=o(" \u2014 "),LX=a("a"),Wbr=o("TFFunnelForTokenClassification"),Qbr=o(" (Funnel Transformer model)"),Hbr=l(),E4=a("li"),wbe=a("strong"),Ubr=o("layoutlm"),Jbr=o(" \u2014 "),BX=a("a"),Ybr=o("TFLayoutLMForTokenClassification"),Kbr=o(" (LayoutLM model)"),Zbr=l(),y4=a("li"),Abe=a("strong"),e2r=o("longformer"),o2r=o(" \u2014 "),xX=a("a"),r2r=o("TFLongformerForTokenClassification"),t2r=o(" (Longformer model)"),a2r=l(),w4=a("li"),Lbe=a("strong"),n2r=o("mobilebert"),s2r=o(" \u2014 "),kX=a("a"),l2r=o("TFMobileBertForTokenClassification"),i2r=o(" (MobileBERT model)"),d2r=l(),A4=a("li"),Bbe=a("strong"),c2r=o("mpnet"),m2r=o(" \u2014 "),RX=a("a"),f2r=o("TFMPNetForTokenClassification"),g2r=o(" (MPNet model)"),h2r=l(),L4=a("li"),xbe=a("strong"),u2r=o("rembert"),p2r=o(" \u2014 "),SX=a("a"),_2r=o("TFRemBertForTokenClassification"),b2r=o(" (RemBERT model)"),v2r=l(),B4=a("li"),kbe=a("strong"),T2r=o("roberta"),F2r=o(" \u2014 "),PX=a("a"),C2r=o("TFRobertaForTokenClassification"),M2r=o(" (RoBERTa model)"),E2r=l(),x4=a("li"),Rbe=a("strong"),y2r=o("roformer"),w2r=o(" \u2014 "),$X=a("a"),A2r=o("TFRoFormerForTokenClassification"),L2r=o(" (RoFormer model)"),B2r=l(),k4=a("li"),Sbe=a("strong"),x2r=o("xlm"),k2r=o(" \u2014 "),IX=a("a"),R2r=o("TFXLMForTokenClassification"),S2r=o(" (XLM model)"),P2r=l(),R4=a("li"),Pbe=a("strong"),$2r=o("xlm-roberta"),I2r=o(" \u2014 "),jX=a("a"),j2r=o("TFXLMRobertaForTokenClassification"),N2r=o(" (XLM-RoBERTa model)"),D2r=l(),S4=a("li"),$be=a("strong"),q2r=o("xlnet"),G2r=o(" \u2014 "),NX=a("a"),O2r=o("TFXLNetForTokenClassification"),X2r=o(" (XLNet model)"),V2r=l(),Ibe=a("p"),z2r=o("Examples:"),W2r=l(),m(sL.$$.fragment),GRe=l(),Oc=a("h2"),P4=a("a"),jbe=a("span"),m(lL.$$.fragment),Q2r=l(),Nbe=a("span"),H2r=o("TFAutoModelForQuestionAnswering"),ORe=l(),Br=a("div"),m(iL.$$.fragment),U2r=l(),Xc=a("p"),J2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dbe=a("code"),Y2r=o("from_pretrained()"),K2r=o("class method or the "),qbe=a("code"),Z2r=o("from_config()"),evr=o(`class
method.`),ovr=l(),dL=a("p"),rvr=o("This class cannot be instantiated directly using "),Gbe=a("code"),tvr=o("__init__()"),avr=o(" (throws an error)."),nvr=l(),Mt=a("div"),m(cL.$$.fragment),svr=l(),Obe=a("p"),lvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ivr=l(),Vc=a("p"),dvr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),cvr=o("not"),mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=a("code"),fvr=o("from_pretrained()"),gvr=o("to load the model weights."),hvr=l(),zbe=a("p"),uvr=o("Examples:"),pvr=l(),m(mL.$$.fragment),_vr=l(),Eo=a("div"),m(fL.$$.fragment),bvr=l(),Wbe=a("p"),vvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tvr=l(),wn=a("p"),Fvr=o("The model class to instantiate is selected based on the "),Qbe=a("code"),Cvr=o("model_type"),Mvr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Evr=o("pretrained_model_name_or_path"),yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),wvr=o("pretrained_model_name_or_path"),Avr=o(":"),Lvr=l(),K=a("ul"),$4=a("li"),Jbe=a("strong"),Bvr=o("albert"),xvr=o(" \u2014 "),DX=a("a"),kvr=o("TFAlbertForQuestionAnswering"),Rvr=o(" (ALBERT model)"),Svr=l(),I4=a("li"),Ybe=a("strong"),Pvr=o("bert"),$vr=o(" \u2014 "),qX=a("a"),Ivr=o("TFBertForQuestionAnswering"),jvr=o(" (BERT model)"),Nvr=l(),j4=a("li"),Kbe=a("strong"),Dvr=o("camembert"),qvr=o(" \u2014 "),GX=a("a"),Gvr=o("TFCamembertForQuestionAnswering"),Ovr=o(" (CamemBERT model)"),Xvr=l(),N4=a("li"),Zbe=a("strong"),Vvr=o("convbert"),zvr=o(" \u2014 "),OX=a("a"),Wvr=o("TFConvBertForQuestionAnswering"),Qvr=o(" (ConvBERT model)"),Hvr=l(),D4=a("li"),e2e=a("strong"),Uvr=o("deberta"),Jvr=o(" \u2014 "),XX=a("a"),Yvr=o("TFDebertaForQuestionAnswering"),Kvr=o(" (DeBERTa model)"),Zvr=l(),q4=a("li"),o2e=a("strong"),eTr=o("deberta-v2"),oTr=o(" \u2014 "),VX=a("a"),rTr=o("TFDebertaV2ForQuestionAnswering"),tTr=o(" (DeBERTa-v2 model)"),aTr=l(),G4=a("li"),r2e=a("strong"),nTr=o("distilbert"),sTr=o(" \u2014 "),zX=a("a"),lTr=o("TFDistilBertForQuestionAnswering"),iTr=o(" (DistilBERT model)"),dTr=l(),O4=a("li"),t2e=a("strong"),cTr=o("electra"),mTr=o(" \u2014 "),WX=a("a"),fTr=o("TFElectraForQuestionAnswering"),gTr=o(" (ELECTRA model)"),hTr=l(),X4=a("li"),a2e=a("strong"),uTr=o("flaubert"),pTr=o(" \u2014 "),QX=a("a"),_Tr=o("TFFlaubertForQuestionAnsweringSimple"),bTr=o(" (FlauBERT model)"),vTr=l(),V4=a("li"),n2e=a("strong"),TTr=o("funnel"),FTr=o(" \u2014 "),HX=a("a"),CTr=o("TFFunnelForQuestionAnswering"),MTr=o(" (Funnel Transformer model)"),ETr=l(),z4=a("li"),s2e=a("strong"),yTr=o("gptj"),wTr=o(" \u2014 "),UX=a("a"),ATr=o("TFGPTJForQuestionAnswering"),LTr=o(" (GPT-J model)"),BTr=l(),W4=a("li"),l2e=a("strong"),xTr=o("longformer"),kTr=o(" \u2014 "),JX=a("a"),RTr=o("TFLongformerForQuestionAnswering"),STr=o(" (Longformer model)"),PTr=l(),Q4=a("li"),i2e=a("strong"),$Tr=o("mobilebert"),ITr=o(" \u2014 "),YX=a("a"),jTr=o("TFMobileBertForQuestionAnswering"),NTr=o(" (MobileBERT model)"),DTr=l(),H4=a("li"),d2e=a("strong"),qTr=o("mpnet"),GTr=o(" \u2014 "),KX=a("a"),OTr=o("TFMPNetForQuestionAnswering"),XTr=o(" (MPNet model)"),VTr=l(),U4=a("li"),c2e=a("strong"),zTr=o("rembert"),WTr=o(" \u2014 "),ZX=a("a"),QTr=o("TFRemBertForQuestionAnswering"),HTr=o(" (RemBERT model)"),UTr=l(),J4=a("li"),m2e=a("strong"),JTr=o("roberta"),YTr=o(" \u2014 "),eV=a("a"),KTr=o("TFRobertaForQuestionAnswering"),ZTr=o(" (RoBERTa model)"),e1r=l(),Y4=a("li"),f2e=a("strong"),o1r=o("roformer"),r1r=o(" \u2014 "),oV=a("a"),t1r=o("TFRoFormerForQuestionAnswering"),a1r=o(" (RoFormer model)"),n1r=l(),K4=a("li"),g2e=a("strong"),s1r=o("xlm"),l1r=o(" \u2014 "),rV=a("a"),i1r=o("TFXLMForQuestionAnsweringSimple"),d1r=o(" (XLM model)"),c1r=l(),Z4=a("li"),h2e=a("strong"),m1r=o("xlm-roberta"),f1r=o(" \u2014 "),tV=a("a"),g1r=o("TFXLMRobertaForQuestionAnswering"),h1r=o(" (XLM-RoBERTa model)"),u1r=l(),eE=a("li"),u2e=a("strong"),p1r=o("xlnet"),_1r=o(" \u2014 "),aV=a("a"),b1r=o("TFXLNetForQuestionAnsweringSimple"),v1r=o(" (XLNet model)"),T1r=l(),p2e=a("p"),F1r=o("Examples:"),C1r=l(),m(gL.$$.fragment),XRe=l(),zc=a("h2"),oE=a("a"),_2e=a("span"),m(hL.$$.fragment),M1r=l(),b2e=a("span"),E1r=o("TFAutoModelForVision2Seq"),VRe=l(),xr=a("div"),m(uL.$$.fragment),y1r=l(),Wc=a("p"),w1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v2e=a("code"),A1r=o("from_pretrained()"),L1r=o("class method or the "),T2e=a("code"),B1r=o("from_config()"),x1r=o(`class
method.`),k1r=l(),pL=a("p"),R1r=o("This class cannot be instantiated directly using "),F2e=a("code"),S1r=o("__init__()"),P1r=o(" (throws an error)."),$1r=l(),Et=a("div"),m(_L.$$.fragment),I1r=l(),C2e=a("p"),j1r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N1r=l(),Qc=a("p"),D1r=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),q1r=o("not"),G1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=a("code"),O1r=o("from_pretrained()"),X1r=o("to load the model weights."),V1r=l(),y2e=a("p"),z1r=o("Examples:"),W1r=l(),m(bL.$$.fragment),Q1r=l(),yo=a("div"),m(vL.$$.fragment),H1r=l(),w2e=a("p"),U1r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J1r=l(),An=a("p"),Y1r=o("The model class to instantiate is selected based on the "),A2e=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),x2e=a("ul"),rE=a("li"),k2e=a("strong"),nFr=o("vision-encoder-decoder"),sFr=o(" \u2014 "),nV=a("a"),lFr=o("TFVisionEncoderDecoderModel"),iFr=o(" (Vision Encoder decoder model)"),dFr=l(),R2e=a("p"),cFr=o("Examples:"),mFr=l(),m(TL.$$.fragment),zRe=l(),Hc=a("h2"),tE=a("a"),S2e=a("span"),m(FL.$$.fragment),fFr=l(),P2e=a("span"),gFr=o("TFAutoModelForSpeechSeq2Seq"),WRe=l(),kr=a("div"),m(CL.$$.fragment),hFr=l(),Uc=a("p"),uFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$2e=a("code"),pFr=o("from_pretrained()"),_Fr=o("class method or the "),I2e=a("code"),bFr=o("from_config()"),vFr=o(`class
method.`),TFr=l(),ML=a("p"),FFr=o("This class cannot be instantiated directly using "),j2e=a("code"),CFr=o("__init__()"),MFr=o(" (throws an error)."),EFr=l(),yt=a("div"),m(EL.$$.fragment),yFr=l(),N2e=a("p"),wFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),AFr=l(),Jc=a("p"),LFr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),BFr=o("not"),xFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=a("code"),kFr=o("from_pretrained()"),RFr=o("to load the model weights."),SFr=l(),G2e=a("p"),PFr=o("Examples:"),$Fr=l(),m(yL.$$.fragment),IFr=l(),wo=a("div"),m(wL.$$.fragment),jFr=l(),O2e=a("p"),NFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DFr=l(),Ln=a("p"),qFr=o("The model class to instantiate is selected based on the "),X2e=a("code"),GFr=o("model_type"),OFr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),XFr=o("pretrained_model_name_or_path"),VFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),zFr=o("pretrained_model_name_or_path"),WFr=o(":"),QFr=l(),W2e=a("ul"),aE=a("li"),Q2e=a("strong"),HFr=o("speech_to_text"),UFr=o(" \u2014 "),sV=a("a"),JFr=o("TFSpeech2TextForConditionalGeneration"),YFr=o(" (Speech2Text model)"),KFr=l(),H2e=a("p"),ZFr=o("Examples:"),eCr=l(),m(AL.$$.fragment),QRe=l(),Yc=a("h2"),nE=a("a"),U2e=a("span"),m(LL.$$.fragment),oCr=l(),J2e=a("span"),rCr=o("FlaxAutoModel"),HRe=l(),Rr=a("div"),m(BL.$$.fragment),tCr=l(),Kc=a("p"),aCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y2e=a("code"),nCr=o("from_pretrained()"),sCr=o("class method or the "),K2e=a("code"),lCr=o("from_config()"),iCr=o(`class
method.`),dCr=l(),xL=a("p"),cCr=o("This class cannot be instantiated directly using "),Z2e=a("code"),mCr=o("__init__()"),fCr=o(" (throws an error)."),gCr=l(),wt=a("div"),m(kL.$$.fragment),hCr=l(),eve=a("p"),uCr=o("Instantiates one of the base model classes of the library from a configuration."),pCr=l(),Zc=a("p"),_Cr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),bCr=o("not"),vCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=a("code"),TCr=o("from_pretrained()"),FCr=o("to load the model weights."),CCr=l(),tve=a("p"),MCr=o("Examples:"),ECr=l(),m(RL.$$.fragment),yCr=l(),Ao=a("div"),m(SL.$$.fragment),wCr=l(),ave=a("p"),ACr=o("Instantiate one of the base model classes of the library from a pretrained model."),LCr=l(),Bn=a("p"),BCr=o("The model class to instantiate is selected based on the "),nve=a("code"),xCr=o("model_type"),kCr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),RCr=o("pretrained_model_name_or_path"),SCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),PCr=o("pretrained_model_name_or_path"),$Cr=o(":"),ICr=l(),z=a("ul"),sE=a("li"),ive=a("strong"),jCr=o("albert"),NCr=o(" \u2014 "),lV=a("a"),DCr=o("FlaxAlbertModel"),qCr=o(" (ALBERT model)"),GCr=l(),lE=a("li"),dve=a("strong"),OCr=o("bart"),XCr=o(" \u2014 "),iV=a("a"),VCr=o("FlaxBartModel"),zCr=o(" (BART model)"),WCr=l(),iE=a("li"),cve=a("strong"),QCr=o("beit"),HCr=o(" \u2014 "),dV=a("a"),UCr=o("FlaxBeitModel"),JCr=o(" (BEiT model)"),YCr=l(),dE=a("li"),mve=a("strong"),KCr=o("bert"),ZCr=o(" \u2014 "),cV=a("a"),eMr=o("FlaxBertModel"),oMr=o(" (BERT model)"),rMr=l(),cE=a("li"),fve=a("strong"),tMr=o("big_bird"),aMr=o(" \u2014 "),mV=a("a"),nMr=o("FlaxBigBirdModel"),sMr=o(" (BigBird model)"),lMr=l(),mE=a("li"),gve=a("strong"),iMr=o("blenderbot"),dMr=o(" \u2014 "),fV=a("a"),cMr=o("FlaxBlenderbotModel"),mMr=o(" (Blenderbot model)"),fMr=l(),fE=a("li"),hve=a("strong"),gMr=o("blenderbot-small"),hMr=o(" \u2014 "),gV=a("a"),uMr=o("FlaxBlenderbotSmallModel"),pMr=o(" (BlenderbotSmall model)"),_Mr=l(),gE=a("li"),uve=a("strong"),bMr=o("clip"),vMr=o(" \u2014 "),hV=a("a"),TMr=o("FlaxCLIPModel"),FMr=o(" (CLIP model)"),CMr=l(),hE=a("li"),pve=a("strong"),MMr=o("distilbert"),EMr=o(" \u2014 "),uV=a("a"),yMr=o("FlaxDistilBertModel"),wMr=o(" (DistilBERT model)"),AMr=l(),uE=a("li"),_ve=a("strong"),LMr=o("electra"),BMr=o(" \u2014 "),pV=a("a"),xMr=o("FlaxElectraModel"),kMr=o(" (ELECTRA model)"),RMr=l(),pE=a("li"),bve=a("strong"),SMr=o("gpt2"),PMr=o(" \u2014 "),_V=a("a"),$Mr=o("FlaxGPT2Model"),IMr=o(" (OpenAI GPT-2 model)"),jMr=l(),_E=a("li"),vve=a("strong"),NMr=o("gpt_neo"),DMr=o(" \u2014 "),bV=a("a"),qMr=o("FlaxGPTNeoModel"),GMr=o(" (GPT Neo model)"),OMr=l(),bE=a("li"),Tve=a("strong"),XMr=o("gptj"),VMr=o(" \u2014 "),vV=a("a"),zMr=o("FlaxGPTJModel"),WMr=o(" (GPT-J model)"),QMr=l(),vE=a("li"),Fve=a("strong"),HMr=o("marian"),UMr=o(" \u2014 "),TV=a("a"),JMr=o("FlaxMarianModel"),YMr=o(" (Marian model)"),KMr=l(),TE=a("li"),Cve=a("strong"),ZMr=o("mbart"),e4r=o(" \u2014 "),FV=a("a"),o4r=o("FlaxMBartModel"),r4r=o(" (mBART model)"),t4r=l(),FE=a("li"),Mve=a("strong"),a4r=o("mt5"),n4r=o(" \u2014 "),CV=a("a"),s4r=o("FlaxMT5Model"),l4r=o(" (mT5 model)"),i4r=l(),CE=a("li"),Eve=a("strong"),d4r=o("pegasus"),c4r=o(" \u2014 "),MV=a("a"),m4r=o("FlaxPegasusModel"),f4r=o(" (Pegasus model)"),g4r=l(),ME=a("li"),yve=a("strong"),h4r=o("roberta"),u4r=o(" \u2014 "),EV=a("a"),p4r=o("FlaxRobertaModel"),_4r=o(" (RoBERTa model)"),b4r=l(),EE=a("li"),wve=a("strong"),v4r=o("roformer"),T4r=o(" \u2014 "),yV=a("a"),F4r=o("FlaxRoFormerModel"),C4r=o(" (RoFormer model)"),M4r=l(),yE=a("li"),Ave=a("strong"),E4r=o("t5"),y4r=o(" \u2014 "),wV=a("a"),w4r=o("FlaxT5Model"),A4r=o(" (T5 model)"),L4r=l(),wE=a("li"),Lve=a("strong"),B4r=o("vision-text-dual-encoder"),x4r=o(" \u2014 "),AV=a("a"),k4r=o("FlaxVisionTextDualEncoderModel"),R4r=o(" (VisionTextDualEncoder model)"),S4r=l(),AE=a("li"),Bve=a("strong"),P4r=o("vit"),$4r=o(" \u2014 "),LV=a("a"),I4r=o("FlaxViTModel"),j4r=o(" (ViT model)"),N4r=l(),LE=a("li"),xve=a("strong"),D4r=o("wav2vec2"),q4r=o(" \u2014 "),BV=a("a"),G4r=o("FlaxWav2Vec2Model"),O4r=o(" (Wav2Vec2 model)"),X4r=l(),BE=a("li"),kve=a("strong"),V4r=o("xglm"),z4r=o(" \u2014 "),xV=a("a"),W4r=o("FlaxXGLMModel"),Q4r=o(" (XGLM model)"),H4r=l(),xE=a("li"),Rve=a("strong"),U4r=o("xlm-roberta"),J4r=o(" \u2014 "),kV=a("a"),Y4r=o("FlaxXLMRobertaModel"),K4r=o(" (XLM-RoBERTa model)"),Z4r=l(),Sve=a("p"),eEr=o("Examples:"),oEr=l(),m(PL.$$.fragment),URe=l(),em=a("h2"),kE=a("a"),Pve=a("span"),m($L.$$.fragment),rEr=l(),$ve=a("span"),tEr=o("FlaxAutoModelForCausalLM"),JRe=l(),Sr=a("div"),m(IL.$$.fragment),aEr=l(),om=a("p"),nEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ive=a("code"),sEr=o("from_pretrained()"),lEr=o("class method or the "),jve=a("code"),iEr=o("from_config()"),dEr=o(`class
method.`),cEr=l(),jL=a("p"),mEr=o("This class cannot be instantiated directly using "),Nve=a("code"),fEr=o("__init__()"),gEr=o(" (throws an error)."),hEr=l(),At=a("div"),m(NL.$$.fragment),uEr=l(),Dve=a("p"),pEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Er=l(),rm=a("p"),bEr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),vEr=o("not"),TEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=a("code"),FEr=o("from_pretrained()"),CEr=o("to load the model weights."),MEr=l(),Ove=a("p"),EEr=o("Examples:"),yEr=l(),m(DL.$$.fragment),wEr=l(),Lo=a("div"),m(qL.$$.fragment),AEr=l(),Xve=a("p"),LEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BEr=l(),xn=a("p"),xEr=o("The model class to instantiate is selected based on the "),Vve=a("code"),kEr=o("model_type"),REr=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),SEr=o("pretrained_model_name_or_path"),PEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),$Er=o("pretrained_model_name_or_path"),IEr=o(":"),jEr=l(),ca=a("ul"),RE=a("li"),Qve=a("strong"),NEr=o("bart"),DEr=o(" \u2014 "),RV=a("a"),qEr=o("FlaxBartForCausalLM"),GEr=o(" (BART model)"),OEr=l(),SE=a("li"),Hve=a("strong"),XEr=o("gpt2"),VEr=o(" \u2014 "),SV=a("a"),zEr=o("FlaxGPT2LMHeadModel"),WEr=o(" (OpenAI GPT-2 model)"),QEr=l(),PE=a("li"),Uve=a("strong"),HEr=o("gpt_neo"),UEr=o(" \u2014 "),PV=a("a"),JEr=o("FlaxGPTNeoForCausalLM"),YEr=o(" (GPT Neo model)"),KEr=l(),$E=a("li"),Jve=a("strong"),ZEr=o("gptj"),e3r=o(" \u2014 "),$V=a("a"),o3r=o("FlaxGPTJForCausalLM"),r3r=o(" (GPT-J model)"),t3r=l(),IE=a("li"),Yve=a("strong"),a3r=o("xglm"),n3r=o(" \u2014 "),IV=a("a"),s3r=o("FlaxXGLMForCausalLM"),l3r=o(" (XGLM model)"),i3r=l(),Kve=a("p"),d3r=o("Examples:"),c3r=l(),m(GL.$$.fragment),YRe=l(),tm=a("h2"),jE=a("a"),Zve=a("span"),m(OL.$$.fragment),m3r=l(),eTe=a("span"),f3r=o("FlaxAutoModelForPreTraining"),KRe=l(),Pr=a("div"),m(XL.$$.fragment),g3r=l(),am=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oTe=a("code"),u3r=o("from_pretrained()"),p3r=o("class method or the "),rTe=a("code"),_3r=o("from_config()"),b3r=o(`class
method.`),v3r=l(),VL=a("p"),T3r=o("This class cannot be instantiated directly using "),tTe=a("code"),F3r=o("__init__()"),C3r=o(" (throws an error)."),M3r=l(),Lt=a("div"),m(zL.$$.fragment),E3r=l(),aTe=a("p"),y3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w3r=l(),nm=a("p"),A3r=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),L3r=o("not"),B3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sTe=a("code"),x3r=o("from_pretrained()"),k3r=o("to load the model weights."),R3r=l(),lTe=a("p"),S3r=o("Examples:"),P3r=l(),m(WL.$$.fragment),$3r=l(),Bo=a("div"),m(QL.$$.fragment),I3r=l(),iTe=a("p"),j3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N3r=l(),kn=a("p"),D3r=o("The model class to instantiate is selected based on the "),dTe=a("code"),q3r=o("model_type"),G3r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),O3r=o("pretrained_model_name_or_path"),X3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),V3r=o("pretrained_model_name_or_path"),z3r=o(":"),W3r=l(),me=a("ul"),NE=a("li"),fTe=a("strong"),Q3r=o("albert"),H3r=o(" \u2014 "),jV=a("a"),U3r=o("FlaxAlbertForPreTraining"),J3r=o(" (ALBERT model)"),Y3r=l(),DE=a("li"),gTe=a("strong"),K3r=o("bart"),Z3r=o(" \u2014 "),NV=a("a"),e5r=o("FlaxBartForConditionalGeneration"),o5r=o(" (BART model)"),r5r=l(),qE=a("li"),hTe=a("strong"),t5r=o("bert"),a5r=o(" \u2014 "),DV=a("a"),n5r=o("FlaxBertForPreTraining"),s5r=o(" (BERT model)"),l5r=l(),GE=a("li"),uTe=a("strong"),i5r=o("big_bird"),d5r=o(" \u2014 "),qV=a("a"),c5r=o("FlaxBigBirdForPreTraining"),m5r=o(" (BigBird model)"),f5r=l(),OE=a("li"),pTe=a("strong"),g5r=o("electra"),h5r=o(" \u2014 "),GV=a("a"),u5r=o("FlaxElectraForPreTraining"),p5r=o(" (ELECTRA model)"),_5r=l(),XE=a("li"),_Te=a("strong"),b5r=o("mbart"),v5r=o(" \u2014 "),OV=a("a"),T5r=o("FlaxMBartForConditionalGeneration"),F5r=o(" (mBART model)"),C5r=l(),VE=a("li"),bTe=a("strong"),M5r=o("mt5"),E5r=o(" \u2014 "),XV=a("a"),y5r=o("FlaxMT5ForConditionalGeneration"),w5r=o(" (mT5 model)"),A5r=l(),zE=a("li"),vTe=a("strong"),L5r=o("roberta"),B5r=o(" \u2014 "),VV=a("a"),x5r=o("FlaxRobertaForMaskedLM"),k5r=o(" (RoBERTa model)"),R5r=l(),WE=a("li"),TTe=a("strong"),S5r=o("roformer"),P5r=o(" \u2014 "),zV=a("a"),$5r=o("FlaxRoFormerForMaskedLM"),I5r=o(" (RoFormer model)"),j5r=l(),QE=a("li"),FTe=a("strong"),N5r=o("t5"),D5r=o(" \u2014 "),WV=a("a"),q5r=o("FlaxT5ForConditionalGeneration"),G5r=o(" (T5 model)"),O5r=l(),HE=a("li"),CTe=a("strong"),X5r=o("wav2vec2"),V5r=o(" \u2014 "),QV=a("a"),z5r=o("FlaxWav2Vec2ForPreTraining"),W5r=o(" (Wav2Vec2 model)"),Q5r=l(),UE=a("li"),MTe=a("strong"),H5r=o("xlm-roberta"),U5r=o(" \u2014 "),HV=a("a"),J5r=o("FlaxXLMRobertaForMaskedLM"),Y5r=o(" (XLM-RoBERTa model)"),K5r=l(),ETe=a("p"),Z5r=o("Examples:"),eyr=l(),m(HL.$$.fragment),ZRe=l(),sm=a("h2"),JE=a("a"),yTe=a("span"),m(UL.$$.fragment),oyr=l(),wTe=a("span"),ryr=o("FlaxAutoModelForMaskedLM"),eSe=l(),$r=a("div"),m(JL.$$.fragment),tyr=l(),lm=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ATe=a("code"),nyr=o("from_pretrained()"),syr=o("class method or the "),LTe=a("code"),lyr=o("from_config()"),iyr=o(`class
method.`),dyr=l(),YL=a("p"),cyr=o("This class cannot be instantiated directly using "),BTe=a("code"),myr=o("__init__()"),fyr=o(" (throws an error)."),gyr=l(),Bt=a("div"),m(KL.$$.fragment),hyr=l(),xTe=a("p"),uyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pyr=l(),im=a("p"),_yr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RTe=a("code"),Tyr=o("from_pretrained()"),Fyr=o("to load the model weights."),Cyr=l(),STe=a("p"),Myr=o("Examples:"),Eyr=l(),m(ZL.$$.fragment),yyr=l(),xo=a("div"),m(e7.$$.fragment),wyr=l(),PTe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lyr=l(),Rn=a("p"),Byr=o("The model class to instantiate is selected based on the "),$Te=a("code"),xyr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),Ryr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),Pyr=o("pretrained_model_name_or_path"),$yr=o(":"),Iyr=l(),be=a("ul"),YE=a("li"),NTe=a("strong"),jyr=o("albert"),Nyr=o(" \u2014 "),UV=a("a"),Dyr=o("FlaxAlbertForMaskedLM"),qyr=o(" (ALBERT model)"),Gyr=l(),KE=a("li"),DTe=a("strong"),Oyr=o("bart"),Xyr=o(" \u2014 "),JV=a("a"),Vyr=o("FlaxBartForConditionalGeneration"),zyr=o(" (BART model)"),Wyr=l(),ZE=a("li"),qTe=a("strong"),Qyr=o("bert"),Hyr=o(" \u2014 "),YV=a("a"),Uyr=o("FlaxBertForMaskedLM"),Jyr=o(" (BERT model)"),Yyr=l(),e3=a("li"),GTe=a("strong"),Kyr=o("big_bird"),Zyr=o(" \u2014 "),KV=a("a"),ewr=o("FlaxBigBirdForMaskedLM"),owr=o(" (BigBird model)"),rwr=l(),o3=a("li"),OTe=a("strong"),twr=o("distilbert"),awr=o(" \u2014 "),ZV=a("a"),nwr=o("FlaxDistilBertForMaskedLM"),swr=o(" (DistilBERT model)"),lwr=l(),r3=a("li"),XTe=a("strong"),iwr=o("electra"),dwr=o(" \u2014 "),ez=a("a"),cwr=o("FlaxElectraForMaskedLM"),mwr=o(" (ELECTRA model)"),fwr=l(),t3=a("li"),VTe=a("strong"),gwr=o("mbart"),hwr=o(" \u2014 "),oz=a("a"),uwr=o("FlaxMBartForConditionalGeneration"),pwr=o(" (mBART model)"),_wr=l(),a3=a("li"),zTe=a("strong"),bwr=o("roberta"),vwr=o(" \u2014 "),rz=a("a"),Twr=o("FlaxRobertaForMaskedLM"),Fwr=o(" (RoBERTa model)"),Cwr=l(),n3=a("li"),WTe=a("strong"),Mwr=o("roformer"),Ewr=o(" \u2014 "),tz=a("a"),ywr=o("FlaxRoFormerForMaskedLM"),wwr=o(" (RoFormer model)"),Awr=l(),s3=a("li"),QTe=a("strong"),Lwr=o("xlm-roberta"),Bwr=o(" \u2014 "),az=a("a"),xwr=o("FlaxXLMRobertaForMaskedLM"),kwr=o(" (XLM-RoBERTa model)"),Rwr=l(),HTe=a("p"),Swr=o("Examples:"),Pwr=l(),m(o7.$$.fragment),oSe=l(),dm=a("h2"),l3=a("a"),UTe=a("span"),m(r7.$$.fragment),$wr=l(),JTe=a("span"),Iwr=o("FlaxAutoModelForSeq2SeqLM"),rSe=l(),Ir=a("div"),m(t7.$$.fragment),jwr=l(),cm=a("p"),Nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YTe=a("code"),Dwr=o("from_pretrained()"),qwr=o("class method or the "),KTe=a("code"),Gwr=o("from_config()"),Owr=o(`class
method.`),Xwr=l(),a7=a("p"),Vwr=o("This class cannot be instantiated directly using "),ZTe=a("code"),zwr=o("__init__()"),Wwr=o(" (throws an error)."),Qwr=l(),xt=a("div"),m(n7.$$.fragment),Hwr=l(),e1e=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jwr=l(),mm=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r1e=a("code"),e6r=o("from_pretrained()"),o6r=o("to load the model weights."),r6r=l(),t1e=a("p"),t6r=o("Examples:"),a6r=l(),m(s7.$$.fragment),n6r=l(),ko=a("div"),m(l7.$$.fragment),s6r=l(),a1e=a("p"),l6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i6r=l(),Sn=a("p"),d6r=o("The model class to instantiate is selected based on the "),n1e=a("code"),c6r=o("model_type"),m6r=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),f6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),h6r=o("pretrained_model_name_or_path"),u6r=o(":"),p6r=l(),Me=a("ul"),i3=a("li"),i1e=a("strong"),_6r=o("bart"),b6r=o(" \u2014 "),nz=a("a"),v6r=o("FlaxBartForConditionalGeneration"),T6r=o(" (BART model)"),F6r=l(),d3=a("li"),d1e=a("strong"),C6r=o("blenderbot"),M6r=o(" \u2014 "),sz=a("a"),E6r=o("FlaxBlenderbotForConditionalGeneration"),y6r=o(" (Blenderbot model)"),w6r=l(),c3=a("li"),c1e=a("strong"),A6r=o("blenderbot-small"),L6r=o(" \u2014 "),lz=a("a"),B6r=o("FlaxBlenderbotSmallForConditionalGeneration"),x6r=o(" (BlenderbotSmall model)"),k6r=l(),m3=a("li"),m1e=a("strong"),R6r=o("encoder-decoder"),S6r=o(" \u2014 "),iz=a("a"),P6r=o("FlaxEncoderDecoderModel"),$6r=o(" (Encoder decoder model)"),I6r=l(),f3=a("li"),f1e=a("strong"),j6r=o("marian"),N6r=o(" \u2014 "),dz=a("a"),D6r=o("FlaxMarianMTModel"),q6r=o(" (Marian model)"),G6r=l(),g3=a("li"),g1e=a("strong"),O6r=o("mbart"),X6r=o(" \u2014 "),cz=a("a"),V6r=o("FlaxMBartForConditionalGeneration"),z6r=o(" (mBART model)"),W6r=l(),h3=a("li"),h1e=a("strong"),Q6r=o("mt5"),H6r=o(" \u2014 "),mz=a("a"),U6r=o("FlaxMT5ForConditionalGeneration"),J6r=o(" (mT5 model)"),Y6r=l(),u3=a("li"),u1e=a("strong"),K6r=o("pegasus"),Z6r=o(" \u2014 "),fz=a("a"),eAr=o("FlaxPegasusForConditionalGeneration"),oAr=o(" (Pegasus model)"),rAr=l(),p3=a("li"),p1e=a("strong"),tAr=o("t5"),aAr=o(" \u2014 "),gz=a("a"),nAr=o("FlaxT5ForConditionalGeneration"),sAr=o(" (T5 model)"),lAr=l(),_1e=a("p"),iAr=o("Examples:"),dAr=l(),m(i7.$$.fragment),tSe=l(),fm=a("h2"),_3=a("a"),b1e=a("span"),m(d7.$$.fragment),cAr=l(),v1e=a("span"),mAr=o("FlaxAutoModelForSequenceClassification"),aSe=l(),jr=a("div"),m(c7.$$.fragment),fAr=l(),gm=a("p"),gAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T1e=a("code"),hAr=o("from_pretrained()"),uAr=o("class method or the "),F1e=a("code"),pAr=o("from_config()"),_Ar=o(`class
method.`),bAr=l(),m7=a("p"),vAr=o("This class cannot be instantiated directly using "),C1e=a("code"),TAr=o("__init__()"),FAr=o(" (throws an error)."),CAr=l(),kt=a("div"),m(f7.$$.fragment),MAr=l(),M1e=a("p"),EAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yAr=l(),hm=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),AAr=o("not"),LAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=a("code"),BAr=o("from_pretrained()"),xAr=o("to load the model weights."),kAr=l(),w1e=a("p"),RAr=o("Examples:"),SAr=l(),m(g7.$$.fragment),PAr=l(),Ro=a("div"),m(h7.$$.fragment),$Ar=l(),A1e=a("p"),IAr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jAr=l(),Pn=a("p"),NAr=o("The model class to instantiate is selected based on the "),L1e=a("code"),DAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),XAr=o("pretrained_model_name_or_path"),VAr=o(":"),zAr=l(),ve=a("ul"),b3=a("li"),k1e=a("strong"),WAr=o("albert"),QAr=o(" \u2014 "),hz=a("a"),HAr=o("FlaxAlbertForSequenceClassification"),UAr=o(" (ALBERT model)"),JAr=l(),v3=a("li"),R1e=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),uz=a("a"),ZAr=o("FlaxBartForSequenceClassification"),e0r=o(" (BART model)"),o0r=l(),T3=a("li"),S1e=a("strong"),r0r=o("bert"),t0r=o(" \u2014 "),pz=a("a"),a0r=o("FlaxBertForSequenceClassification"),n0r=o(" (BERT model)"),s0r=l(),F3=a("li"),P1e=a("strong"),l0r=o("big_bird"),i0r=o(" \u2014 "),_z=a("a"),d0r=o("FlaxBigBirdForSequenceClassification"),c0r=o(" (BigBird model)"),m0r=l(),C3=a("li"),$1e=a("strong"),f0r=o("distilbert"),g0r=o(" \u2014 "),bz=a("a"),h0r=o("FlaxDistilBertForSequenceClassification"),u0r=o(" (DistilBERT model)"),p0r=l(),M3=a("li"),I1e=a("strong"),_0r=o("electra"),b0r=o(" \u2014 "),vz=a("a"),v0r=o("FlaxElectraForSequenceClassification"),T0r=o(" (ELECTRA model)"),F0r=l(),E3=a("li"),j1e=a("strong"),C0r=o("mbart"),M0r=o(" \u2014 "),Tz=a("a"),E0r=o("FlaxMBartForSequenceClassification"),y0r=o(" (mBART model)"),w0r=l(),y3=a("li"),N1e=a("strong"),A0r=o("roberta"),L0r=o(" \u2014 "),Fz=a("a"),B0r=o("FlaxRobertaForSequenceClassification"),x0r=o(" (RoBERTa model)"),k0r=l(),w3=a("li"),D1e=a("strong"),R0r=o("roformer"),S0r=o(" \u2014 "),Cz=a("a"),P0r=o("FlaxRoFormerForSequenceClassification"),$0r=o(" (RoFormer model)"),I0r=l(),A3=a("li"),q1e=a("strong"),j0r=o("xlm-roberta"),N0r=o(" \u2014 "),Mz=a("a"),D0r=o("FlaxXLMRobertaForSequenceClassification"),q0r=o(" (XLM-RoBERTa model)"),G0r=l(),G1e=a("p"),O0r=o("Examples:"),X0r=l(),m(u7.$$.fragment),nSe=l(),um=a("h2"),L3=a("a"),O1e=a("span"),m(p7.$$.fragment),V0r=l(),X1e=a("span"),z0r=o("FlaxAutoModelForQuestionAnswering"),sSe=l(),Nr=a("div"),m(_7.$$.fragment),W0r=l(),pm=a("p"),Q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V1e=a("code"),H0r=o("from_pretrained()"),U0r=o("class method or the "),z1e=a("code"),J0r=o("from_config()"),Y0r=o(`class
method.`),K0r=l(),b7=a("p"),Z0r=o("This class cannot be instantiated directly using "),W1e=a("code"),eLr=o("__init__()"),oLr=o(" (throws an error)."),rLr=l(),Rt=a("div"),m(v7.$$.fragment),tLr=l(),Q1e=a("p"),aLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nLr=l(),_m=a("p"),sLr=o(`Note:
Loading a model from its configuration file does `),H1e=a("strong"),lLr=o("not"),iLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),U1e=a("code"),dLr=o("from_pretrained()"),cLr=o("to load the model weights."),mLr=l(),J1e=a("p"),fLr=o("Examples:"),gLr=l(),m(T7.$$.fragment),hLr=l(),So=a("div"),m(F7.$$.fragment),uLr=l(),Y1e=a("p"),pLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Lr=l(),$n=a("p"),bLr=o("The model class to instantiate is selected based on the "),K1e=a("code"),vLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),FLr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),yLr=l(),Te=a("ul"),B3=a("li"),oFe=a("strong"),wLr=o("albert"),ALr=o(" \u2014 "),Ez=a("a"),LLr=o("FlaxAlbertForQuestionAnswering"),BLr=o(" (ALBERT model)"),xLr=l(),x3=a("li"),rFe=a("strong"),kLr=o("bart"),RLr=o(" \u2014 "),yz=a("a"),SLr=o("FlaxBartForQuestionAnswering"),PLr=o(" (BART model)"),$Lr=l(),k3=a("li"),tFe=a("strong"),ILr=o("bert"),jLr=o(" \u2014 "),wz=a("a"),NLr=o("FlaxBertForQuestionAnswering"),DLr=o(" (BERT model)"),qLr=l(),R3=a("li"),aFe=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),Az=a("a"),XLr=o("FlaxBigBirdForQuestionAnswering"),VLr=o(" (BigBird model)"),zLr=l(),S3=a("li"),nFe=a("strong"),WLr=o("distilbert"),QLr=o(" \u2014 "),Lz=a("a"),HLr=o("FlaxDistilBertForQuestionAnswering"),ULr=o(" (DistilBERT model)"),JLr=l(),P3=a("li"),sFe=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),Bz=a("a"),ZLr=o("FlaxElectraForQuestionAnswering"),e7r=o(" (ELECTRA model)"),o7r=l(),$3=a("li"),lFe=a("strong"),r7r=o("mbart"),t7r=o(" \u2014 "),xz=a("a"),a7r=o("FlaxMBartForQuestionAnswering"),n7r=o(" (mBART model)"),s7r=l(),I3=a("li"),iFe=a("strong"),l7r=o("roberta"),i7r=o(" \u2014 "),kz=a("a"),d7r=o("FlaxRobertaForQuestionAnswering"),c7r=o(" (RoBERTa model)"),m7r=l(),j3=a("li"),dFe=a("strong"),f7r=o("roformer"),g7r=o(" \u2014 "),Rz=a("a"),h7r=o("FlaxRoFormerForQuestionAnswering"),u7r=o(" (RoFormer model)"),p7r=l(),N3=a("li"),cFe=a("strong"),_7r=o("xlm-roberta"),b7r=o(" \u2014 "),Sz=a("a"),v7r=o("FlaxXLMRobertaForQuestionAnswering"),T7r=o(" (XLM-RoBERTa model)"),F7r=l(),mFe=a("p"),C7r=o("Examples:"),M7r=l(),m(C7.$$.fragment),lSe=l(),bm=a("h2"),D3=a("a"),fFe=a("span"),m(M7.$$.fragment),E7r=l(),gFe=a("span"),y7r=o("FlaxAutoModelForTokenClassification"),iSe=l(),Dr=a("div"),m(E7.$$.fragment),w7r=l(),vm=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hFe=a("code"),L7r=o("from_pretrained()"),B7r=o("class method or the "),uFe=a("code"),x7r=o("from_config()"),k7r=o(`class
method.`),R7r=l(),y7=a("p"),S7r=o("This class cannot be instantiated directly using "),pFe=a("code"),P7r=o("__init__()"),$7r=o(" (throws an error)."),I7r=l(),St=a("div"),m(w7.$$.fragment),j7r=l(),_Fe=a("p"),N7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),D7r=l(),Tm=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),G7r=o("not"),O7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vFe=a("code"),X7r=o("from_pretrained()"),V7r=o("to load the model weights."),z7r=l(),TFe=a("p"),W7r=o("Examples:"),Q7r=l(),m(A7.$$.fragment),H7r=l(),Po=a("div"),m(L7.$$.fragment),U7r=l(),FFe=a("p"),J7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y7r=l(),In=a("p"),K7r=o("The model class to instantiate is selected based on the "),CFe=a("code"),Z7r=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),Se=a("ul"),q3=a("li"),yFe=a("strong"),s8r=o("albert"),l8r=o(" \u2014 "),Pz=a("a"),i8r=o("FlaxAlbertForTokenClassification"),d8r=o(" (ALBERT model)"),c8r=l(),G3=a("li"),wFe=a("strong"),m8r=o("bert"),f8r=o(" \u2014 "),$z=a("a"),g8r=o("FlaxBertForTokenClassification"),h8r=o(" (BERT model)"),u8r=l(),O3=a("li"),AFe=a("strong"),p8r=o("big_bird"),_8r=o(" \u2014 "),Iz=a("a"),b8r=o("FlaxBigBirdForTokenClassification"),v8r=o(" (BigBird model)"),T8r=l(),X3=a("li"),LFe=a("strong"),F8r=o("distilbert"),C8r=o(" \u2014 "),jz=a("a"),M8r=o("FlaxDistilBertForTokenClassification"),E8r=o(" (DistilBERT model)"),y8r=l(),V3=a("li"),BFe=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),Nz=a("a"),L8r=o("FlaxElectraForTokenClassification"),B8r=o(" (ELECTRA model)"),x8r=l(),z3=a("li"),xFe=a("strong"),k8r=o("roberta"),R8r=o(" \u2014 "),Dz=a("a"),S8r=o("FlaxRobertaForTokenClassification"),P8r=o(" (RoBERTa model)"),$8r=l(),W3=a("li"),kFe=a("strong"),I8r=o("roformer"),j8r=o(" \u2014 "),qz=a("a"),N8r=o("FlaxRoFormerForTokenClassification"),D8r=o(" (RoFormer model)"),q8r=l(),Q3=a("li"),RFe=a("strong"),G8r=o("xlm-roberta"),O8r=o(" \u2014 "),Gz=a("a"),X8r=o("FlaxXLMRobertaForTokenClassification"),V8r=o(" (XLM-RoBERTa model)"),z8r=l(),SFe=a("p"),W8r=o("Examples:"),Q8r=l(),m(B7.$$.fragment),dSe=l(),Fm=a("h2"),H3=a("a"),PFe=a("span"),m(x7.$$.fragment),H8r=l(),$Fe=a("span"),U8r=o("FlaxAutoModelForMultipleChoice"),cSe=l(),qr=a("div"),m(k7.$$.fragment),J8r=l(),Cm=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IFe=a("code"),K8r=o("from_pretrained()"),Z8r=o("class method or the "),jFe=a("code"),e9r=o("from_config()"),o9r=o(`class
method.`),r9r=l(),R7=a("p"),t9r=o("This class cannot be instantiated directly using "),NFe=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Pt=a("div"),m(S7.$$.fragment),l9r=l(),DFe=a("p"),i9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d9r=l(),Mm=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),m9r=o("not"),f9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GFe=a("code"),g9r=o("from_pretrained()"),h9r=o("to load the model weights."),u9r=l(),OFe=a("p"),p9r=o("Examples:"),_9r=l(),m(P7.$$.fragment),b9r=l(),$o=a("div"),m($7.$$.fragment),v9r=l(),XFe=a("p"),T9r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F9r=l(),jn=a("p"),C9r=o("The model class to instantiate is selected based on the "),VFe=a("code"),M9r=o("model_type"),E9r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),y9r=o("pretrained_model_name_or_path"),w9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),A9r=o("pretrained_model_name_or_path"),L9r=o(":"),B9r=l(),Pe=a("ul"),U3=a("li"),QFe=a("strong"),x9r=o("albert"),k9r=o(" \u2014 "),Oz=a("a"),R9r=o("FlaxAlbertForMultipleChoice"),S9r=o(" (ALBERT model)"),P9r=l(),J3=a("li"),HFe=a("strong"),$9r=o("bert"),I9r=o(" \u2014 "),Xz=a("a"),j9r=o("FlaxBertForMultipleChoice"),N9r=o(" (BERT model)"),D9r=l(),Y3=a("li"),UFe=a("strong"),q9r=o("big_bird"),G9r=o(" \u2014 "),Vz=a("a"),O9r=o("FlaxBigBirdForMultipleChoice"),X9r=o(" (BigBird model)"),V9r=l(),K3=a("li"),JFe=a("strong"),z9r=o("distilbert"),W9r=o(" \u2014 "),zz=a("a"),Q9r=o("FlaxDistilBertForMultipleChoice"),H9r=o(" (DistilBERT model)"),U9r=l(),Z3=a("li"),YFe=a("strong"),J9r=o("electra"),Y9r=o(" \u2014 "),Wz=a("a"),K9r=o("FlaxElectraForMultipleChoice"),Z9r=o(" (ELECTRA model)"),eBr=l(),e5=a("li"),KFe=a("strong"),oBr=o("roberta"),rBr=o(" \u2014 "),Qz=a("a"),tBr=o("FlaxRobertaForMultipleChoice"),aBr=o(" (RoBERTa model)"),nBr=l(),o5=a("li"),ZFe=a("strong"),sBr=o("roformer"),lBr=o(" \u2014 "),Hz=a("a"),iBr=o("FlaxRoFormerForMultipleChoice"),dBr=o(" (RoFormer model)"),cBr=l(),r5=a("li"),eCe=a("strong"),mBr=o("xlm-roberta"),fBr=o(" \u2014 "),Uz=a("a"),gBr=o("FlaxXLMRobertaForMultipleChoice"),hBr=o(" (XLM-RoBERTa model)"),uBr=l(),oCe=a("p"),pBr=o("Examples:"),_Br=l(),m(I7.$$.fragment),mSe=l(),Em=a("h2"),t5=a("a"),rCe=a("span"),m(j7.$$.fragment),bBr=l(),tCe=a("span"),vBr=o("FlaxAutoModelForNextSentencePrediction"),fSe=l(),Gr=a("div"),m(N7.$$.fragment),TBr=l(),ym=a("p"),FBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aCe=a("code"),CBr=o("from_pretrained()"),MBr=o("class method or the "),nCe=a("code"),EBr=o("from_config()"),yBr=o(`class
method.`),wBr=l(),D7=a("p"),ABr=o("This class cannot be instantiated directly using "),sCe=a("code"),LBr=o("__init__()"),BBr=o(" (throws an error)."),xBr=l(),$t=a("div"),m(q7.$$.fragment),kBr=l(),lCe=a("p"),RBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SBr=l(),wm=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),$Br=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dCe=a("code"),jBr=o("from_pretrained()"),NBr=o("to load the model weights."),DBr=l(),cCe=a("p"),qBr=o("Examples:"),GBr=l(),m(G7.$$.fragment),OBr=l(),Io=a("div"),m(O7.$$.fragment),XBr=l(),mCe=a("p"),VBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zBr=l(),Nn=a("p"),WBr=o("The model class to instantiate is selected based on the "),fCe=a("code"),QBr=o("model_type"),HBr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),YBr=o("pretrained_model_name_or_path"),KBr=o(":"),ZBr=l(),uCe=a("ul"),a5=a("li"),pCe=a("strong"),exr=o("bert"),oxr=o(" \u2014 "),Jz=a("a"),rxr=o("FlaxBertForNextSentencePrediction"),txr=o(" (BERT model)"),axr=l(),_Ce=a("p"),nxr=o("Examples:"),sxr=l(),m(X7.$$.fragment),gSe=l(),Am=a("h2"),n5=a("a"),bCe=a("span"),m(V7.$$.fragment),lxr=l(),vCe=a("span"),ixr=o("FlaxAutoModelForImageClassification"),hSe=l(),Or=a("div"),m(z7.$$.fragment),dxr=l(),Lm=a("p"),cxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TCe=a("code"),mxr=o("from_pretrained()"),fxr=o("class method or the "),FCe=a("code"),gxr=o("from_config()"),hxr=o(`class
method.`),uxr=l(),W7=a("p"),pxr=o("This class cannot be instantiated directly using "),CCe=a("code"),_xr=o("__init__()"),bxr=o(" (throws an error)."),vxr=l(),It=a("div"),m(Q7.$$.fragment),Txr=l(),MCe=a("p"),Fxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cxr=l(),Bm=a("p"),Mxr=o(`Note:
Loading a model from its configuration file does `),ECe=a("strong"),Exr=o("not"),yxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yCe=a("code"),wxr=o("from_pretrained()"),Axr=o("to load the model weights."),Lxr=l(),wCe=a("p"),Bxr=o("Examples:"),xxr=l(),m(H7.$$.fragment),kxr=l(),jo=a("div"),m(U7.$$.fragment),Rxr=l(),ACe=a("p"),Sxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pxr=l(),Dn=a("p"),$xr=o("The model class to instantiate is selected based on the "),LCe=a("code"),Ixr=o("model_type"),jxr=o(` property of the config object (either
passed as an argument or loaded from `),BCe=a("code"),Nxr=o("pretrained_model_name_or_path"),Dxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),qxr=o("pretrained_model_name_or_path"),Gxr=o(":"),Oxr=l(),J7=a("ul"),s5=a("li"),kCe=a("strong"),Xxr=o("beit"),Vxr=o(" \u2014 "),Yz=a("a"),zxr=o("FlaxBeitForImageClassification"),Wxr=o(" (BEiT model)"),Qxr=l(),l5=a("li"),RCe=a("strong"),Hxr=o("vit"),Uxr=o(" \u2014 "),Kz=a("a"),Jxr=o("FlaxViTForImageClassification"),Yxr=o(" (ViT model)"),Kxr=l(),SCe=a("p"),Zxr=o("Examples:"),ekr=l(),m(Y7.$$.fragment),uSe=l(),xm=a("h2"),i5=a("a"),PCe=a("span"),m(K7.$$.fragment),okr=l(),$Ce=a("span"),rkr=o("FlaxAutoModelForVision2Seq"),pSe=l(),Xr=a("div"),m(Z7.$$.fragment),tkr=l(),km=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ICe=a("code"),nkr=o("from_pretrained()"),skr=o("class method or the "),jCe=a("code"),lkr=o("from_config()"),ikr=o(`class
method.`),dkr=l(),e8=a("p"),ckr=o("This class cannot be instantiated directly using "),NCe=a("code"),mkr=o("__init__()"),fkr=o(" (throws an error)."),gkr=l(),jt=a("div"),m(o8.$$.fragment),hkr=l(),DCe=a("p"),ukr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pkr=l(),Rm=a("p"),_kr=o(`Note:
Loading a model from its configuration file does `),qCe=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GCe=a("code"),Tkr=o("from_pretrained()"),Fkr=o("to load the model weights."),Ckr=l(),OCe=a("p"),Mkr=o("Examples:"),Ekr=l(),m(r8.$$.fragment),ykr=l(),No=a("div"),m(t8.$$.fragment),wkr=l(),XCe=a("p"),Akr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lkr=l(),qn=a("p"),Bkr=o("The model class to instantiate is selected based on the "),VCe=a("code"),xkr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),Rkr=o("pretrained_model_name_or_path"),Skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),Pkr=o("pretrained_model_name_or_path"),$kr=o(":"),Ikr=l(),QCe=a("ul"),d5=a("li"),HCe=a("strong"),jkr=o("vision-encoder-decoder"),Nkr=o(" \u2014 "),Zz=a("a"),Dkr=o("FlaxVisionEncoderDecoderModel"),qkr=o(" (Vision Encoder decoder model)"),Gkr=l(),UCe=a("p"),Okr=o("Examples:"),Xkr=l(),m(a8.$$.fragment),this.h()},l(c){const _=KEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var n8=s(de);Ee=n(n8,"A",{id:!0,class:!0,href:!0});var JCe=s(Ee);lo=n(JCe,"SPAN",{});var YCe=s(lo);f(fe.$$.fragment,YCe),YCe.forEach(t),JCe.forEach(t),Ce=i(n8),Vo=n(n8,"SPAN",{});var zkr=s(Vo);Ii=r(zkr,"Auto Classes"),zkr.forEach(t),n8.forEach(t),$m=i(c),ma=n(c,"P",{});var bSe=s(ma);ji=r(bSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(bSe,"CODE",{});var Wkr=s(Ni);dy=r(Wkr,"from_pretrained()"),Wkr.forEach(t),Im=r(bSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bSe.forEach(t),Be=i(c),co=n(c,"P",{});var c5=s(co);Di=r(c5,"Instantiating one of "),Gn=n(c5,"A",{href:!0});var Qkr=s(Gn);cy=r(Qkr,"AutoConfig"),Qkr.forEach(t),On=r(c5,", "),Xn=n(c5,"A",{href:!0});var Hkr=s(Xn);my=r(Hkr,"AutoModel"),Hkr.forEach(t),qi=r(c5,`, and
`),Vn=n(c5,"A",{href:!0});var Ukr=s(Vn);fy=r(Ukr,"AutoTokenizer"),Ukr.forEach(t),Gi=r(c5," will directly create a class of the relevant architecture. For instance"),c5.forEach(t),jm=i(c),f(qa.$$.fragment,c),mo=i(c),pe=n(c,"P",{});var vSe=s(pe);r9=r(vSe,"will create a model that is an instance of "),Oi=n(vSe,"A",{href:!0});var Jkr=s(Oi);t9=r(Jkr,"BertModel"),Jkr.forEach(t),a9=r(vSe,"."),vSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var TSe=s(Ga);n9=r(TSe,"There is one class of "),Nm=n(TSe,"CODE",{});var Ykr=s(Nm);s9=r(Ykr,"AutoModel"),Ykr.forEach(t),x$e=r(TSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),TSe.forEach(t),pke=i(c),Xi=n(c,"H2",{class:!0});var FSe=s(Xi);Dm=n(FSe,"A",{id:!0,class:!0,href:!0});var Kkr=s(Dm);WQ=n(Kkr,"SPAN",{});var Zkr=s(WQ);f(gy.$$.fragment,Zkr),Zkr.forEach(t),Kkr.forEach(t),k$e=i(FSe),QQ=n(FSe,"SPAN",{});var eRr=s(QQ);R$e=r(eRr,"Extending the Auto Classes"),eRr.forEach(t),FSe.forEach(t),_ke=i(c),zn=n(c,"P",{});var eW=s(zn);S$e=r(eW,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HQ=n(eW,"CODE",{});var oRr=s(HQ);P$e=r(oRr,"NewModel"),oRr.forEach(t),$$e=r(eW,", make sure you have a "),UQ=n(eW,"CODE",{});var rRr=s(UQ);I$e=r(rRr,"NewModelConfig"),rRr.forEach(t),j$e=r(eW,` then you can add those to the auto
classes like this:`),eW.forEach(t),bke=i(c),f(hy.$$.fragment,c),vke=i(c),l9=n(c,"P",{});var tRr=s(l9);N$e=r(tRr,"You will then be able to use the auto classes like you would usually do!"),tRr.forEach(t),Tke=i(c),f(qm.$$.fragment,c),Fke=i(c),Vi=n(c,"H2",{class:!0});var CSe=s(Vi);Gm=n(CSe,"A",{id:!0,class:!0,href:!0});var aRr=s(Gm);JQ=n(aRr,"SPAN",{});var nRr=s(JQ);f(uy.$$.fragment,nRr),nRr.forEach(t),aRr.forEach(t),D$e=i(CSe),YQ=n(CSe,"SPAN",{});var sRr=s(YQ);q$e=r(sRr,"AutoConfig"),sRr.forEach(t),CSe.forEach(t),Cke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);f(py.$$.fragment,Os),G$e=i(Os),_y=n(Os,"P",{});var MSe=s(_y);O$e=r(MSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),i9=n(MSe,"A",{href:!0});var lRr=s(i9);X$e=r(lRr,"from_pretrained()"),lRr.forEach(t),V$e=r(MSe," class method."),MSe.forEach(t),z$e=i(Os),by=n(Os,"P",{});var ESe=s(by);W$e=r(ESe,"This class cannot be instantiated directly using "),KQ=n(ESe,"CODE",{});var iRr=s(KQ);Q$e=r(iRr,"__init__()"),iRr.forEach(t),H$e=r(ESe," (throws an error)."),ESe.forEach(t),U$e=i(Os),fo=n(Os,"DIV",{class:!0});var ga=s(fo);f(vy.$$.fragment,ga),J$e=i(ga),ZQ=n(ga,"P",{});var dRr=s(ZQ);Y$e=r(dRr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dRr.forEach(t),K$e=i(ga),zi=n(ga,"P",{});var oW=s(zi);Z$e=r(oW,"The configuration class to instantiate is selected based on the "),eH=n(oW,"CODE",{});var cRr=s(eH);eIe=r(cRr,"model_type"),cRr.forEach(t),oIe=r(oW,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oH=n(oW,"CODE",{});var mRr=s(oH);rIe=r(mRr,"pretrained_model_name_or_path"),mRr.forEach(t),tIe=r(oW,":"),oW.forEach(t),aIe=i(ga),v=n(ga,"UL",{});var T=s(v);Om=n(T,"LI",{});var KCe=s(Om);rH=n(KCe,"STRONG",{});var fRr=s(rH);nIe=r(fRr,"albert"),fRr.forEach(t),sIe=r(KCe," \u2014 "),d9=n(KCe,"A",{href:!0});var gRr=s(d9);lIe=r(gRr,"AlbertConfig"),gRr.forEach(t),iIe=r(KCe," (ALBERT model)"),KCe.forEach(t),dIe=i(T),Xm=n(T,"LI",{});var ZCe=s(Xm);tH=n(ZCe,"STRONG",{});var hRr=s(tH);cIe=r(hRr,"bart"),hRr.forEach(t),mIe=r(ZCe," \u2014 "),c9=n(ZCe,"A",{href:!0});var uRr=s(c9);fIe=r(uRr,"BartConfig"),uRr.forEach(t),gIe=r(ZCe," (BART model)"),ZCe.forEach(t),hIe=i(T),Vm=n(T,"LI",{});var eMe=s(Vm);aH=n(eMe,"STRONG",{});var pRr=s(aH);uIe=r(pRr,"beit"),pRr.forEach(t),pIe=r(eMe," \u2014 "),m9=n(eMe,"A",{href:!0});var _Rr=s(m9);_Ie=r(_Rr,"BeitConfig"),_Rr.forEach(t),bIe=r(eMe," (BEiT model)"),eMe.forEach(t),vIe=i(T),zm=n(T,"LI",{});var oMe=s(zm);nH=n(oMe,"STRONG",{});var bRr=s(nH);TIe=r(bRr,"bert"),bRr.forEach(t),FIe=r(oMe," \u2014 "),f9=n(oMe,"A",{href:!0});var vRr=s(f9);CIe=r(vRr,"BertConfig"),vRr.forEach(t),MIe=r(oMe," (BERT model)"),oMe.forEach(t),EIe=i(T),Wm=n(T,"LI",{});var rMe=s(Wm);sH=n(rMe,"STRONG",{});var TRr=s(sH);yIe=r(TRr,"bert-generation"),TRr.forEach(t),wIe=r(rMe," \u2014 "),g9=n(rMe,"A",{href:!0});var FRr=s(g9);AIe=r(FRr,"BertGenerationConfig"),FRr.forEach(t),LIe=r(rMe," (Bert Generation model)"),rMe.forEach(t),BIe=i(T),Qm=n(T,"LI",{});var tMe=s(Qm);lH=n(tMe,"STRONG",{});var CRr=s(lH);xIe=r(CRr,"big_bird"),CRr.forEach(t),kIe=r(tMe," \u2014 "),h9=n(tMe,"A",{href:!0});var MRr=s(h9);RIe=r(MRr,"BigBirdConfig"),MRr.forEach(t),SIe=r(tMe," (BigBird model)"),tMe.forEach(t),PIe=i(T),Hm=n(T,"LI",{});var aMe=s(Hm);iH=n(aMe,"STRONG",{});var ERr=s(iH);$Ie=r(ERr,"bigbird_pegasus"),ERr.forEach(t),IIe=r(aMe," \u2014 "),u9=n(aMe,"A",{href:!0});var yRr=s(u9);jIe=r(yRr,"BigBirdPegasusConfig"),yRr.forEach(t),NIe=r(aMe," (BigBirdPegasus model)"),aMe.forEach(t),DIe=i(T),Um=n(T,"LI",{});var nMe=s(Um);dH=n(nMe,"STRONG",{});var wRr=s(dH);qIe=r(wRr,"blenderbot"),wRr.forEach(t),GIe=r(nMe," \u2014 "),p9=n(nMe,"A",{href:!0});var ARr=s(p9);OIe=r(ARr,"BlenderbotConfig"),ARr.forEach(t),XIe=r(nMe," (Blenderbot model)"),nMe.forEach(t),VIe=i(T),Jm=n(T,"LI",{});var sMe=s(Jm);cH=n(sMe,"STRONG",{});var LRr=s(cH);zIe=r(LRr,"blenderbot-small"),LRr.forEach(t),WIe=r(sMe," \u2014 "),_9=n(sMe,"A",{href:!0});var BRr=s(_9);QIe=r(BRr,"BlenderbotSmallConfig"),BRr.forEach(t),HIe=r(sMe," (BlenderbotSmall model)"),sMe.forEach(t),UIe=i(T),Ym=n(T,"LI",{});var lMe=s(Ym);mH=n(lMe,"STRONG",{});var xRr=s(mH);JIe=r(xRr,"camembert"),xRr.forEach(t),YIe=r(lMe," \u2014 "),b9=n(lMe,"A",{href:!0});var kRr=s(b9);KIe=r(kRr,"CamembertConfig"),kRr.forEach(t),ZIe=r(lMe," (CamemBERT model)"),lMe.forEach(t),eje=i(T),Km=n(T,"LI",{});var iMe=s(Km);fH=n(iMe,"STRONG",{});var RRr=s(fH);oje=r(RRr,"canine"),RRr.forEach(t),rje=r(iMe," \u2014 "),v9=n(iMe,"A",{href:!0});var SRr=s(v9);tje=r(SRr,"CanineConfig"),SRr.forEach(t),aje=r(iMe," (Canine model)"),iMe.forEach(t),nje=i(T),Zm=n(T,"LI",{});var dMe=s(Zm);gH=n(dMe,"STRONG",{});var PRr=s(gH);sje=r(PRr,"clip"),PRr.forEach(t),lje=r(dMe," \u2014 "),T9=n(dMe,"A",{href:!0});var $Rr=s(T9);ije=r($Rr,"CLIPConfig"),$Rr.forEach(t),dje=r(dMe," (CLIP model)"),dMe.forEach(t),cje=i(T),ef=n(T,"LI",{});var cMe=s(ef);hH=n(cMe,"STRONG",{});var IRr=s(hH);mje=r(IRr,"convbert"),IRr.forEach(t),fje=r(cMe," \u2014 "),F9=n(cMe,"A",{href:!0});var jRr=s(F9);gje=r(jRr,"ConvBertConfig"),jRr.forEach(t),hje=r(cMe," (ConvBERT model)"),cMe.forEach(t),uje=i(T),of=n(T,"LI",{});var mMe=s(of);uH=n(mMe,"STRONG",{});var NRr=s(uH);pje=r(NRr,"convnext"),NRr.forEach(t),_je=r(mMe," \u2014 "),C9=n(mMe,"A",{href:!0});var DRr=s(C9);bje=r(DRr,"ConvNextConfig"),DRr.forEach(t),vje=r(mMe," (ConvNext model)"),mMe.forEach(t),Tje=i(T),rf=n(T,"LI",{});var fMe=s(rf);pH=n(fMe,"STRONG",{});var qRr=s(pH);Fje=r(qRr,"ctrl"),qRr.forEach(t),Cje=r(fMe," \u2014 "),M9=n(fMe,"A",{href:!0});var GRr=s(M9);Mje=r(GRr,"CTRLConfig"),GRr.forEach(t),Eje=r(fMe," (CTRL model)"),fMe.forEach(t),yje=i(T),tf=n(T,"LI",{});var gMe=s(tf);_H=n(gMe,"STRONG",{});var ORr=s(_H);wje=r(ORr,"data2vec-audio"),ORr.forEach(t),Aje=r(gMe," \u2014 "),E9=n(gMe,"A",{href:!0});var XRr=s(E9);Lje=r(XRr,"Data2VecAudioConfig"),XRr.forEach(t),Bje=r(gMe," (Data2VecAudio model)"),gMe.forEach(t),xje=i(T),af=n(T,"LI",{});var hMe=s(af);bH=n(hMe,"STRONG",{});var VRr=s(bH);kje=r(VRr,"data2vec-text"),VRr.forEach(t),Rje=r(hMe," \u2014 "),y9=n(hMe,"A",{href:!0});var zRr=s(y9);Sje=r(zRr,"Data2VecTextConfig"),zRr.forEach(t),Pje=r(hMe," (Data2VecText model)"),hMe.forEach(t),$je=i(T),nf=n(T,"LI",{});var uMe=s(nf);vH=n(uMe,"STRONG",{});var WRr=s(vH);Ije=r(WRr,"deberta"),WRr.forEach(t),jje=r(uMe," \u2014 "),w9=n(uMe,"A",{href:!0});var QRr=s(w9);Nje=r(QRr,"DebertaConfig"),QRr.forEach(t),Dje=r(uMe," (DeBERTa model)"),uMe.forEach(t),qje=i(T),sf=n(T,"LI",{});var pMe=s(sf);TH=n(pMe,"STRONG",{});var HRr=s(TH);Gje=r(HRr,"deberta-v2"),HRr.forEach(t),Oje=r(pMe," \u2014 "),A9=n(pMe,"A",{href:!0});var URr=s(A9);Xje=r(URr,"DebertaV2Config"),URr.forEach(t),Vje=r(pMe," (DeBERTa-v2 model)"),pMe.forEach(t),zje=i(T),lf=n(T,"LI",{});var _Me=s(lf);FH=n(_Me,"STRONG",{});var JRr=s(FH);Wje=r(JRr,"decision_transformer"),JRr.forEach(t),Qje=r(_Me," \u2014 "),L9=n(_Me,"A",{href:!0});var YRr=s(L9);Hje=r(YRr,"DecisionTransformerConfig"),YRr.forEach(t),Uje=r(_Me," (Decision Transformer model)"),_Me.forEach(t),Jje=i(T),df=n(T,"LI",{});var bMe=s(df);CH=n(bMe,"STRONG",{});var KRr=s(CH);Yje=r(KRr,"deit"),KRr.forEach(t),Kje=r(bMe," \u2014 "),B9=n(bMe,"A",{href:!0});var ZRr=s(B9);Zje=r(ZRr,"DeiTConfig"),ZRr.forEach(t),eNe=r(bMe," (DeiT model)"),bMe.forEach(t),oNe=i(T),cf=n(T,"LI",{});var vMe=s(cf);MH=n(vMe,"STRONG",{});var eSr=s(MH);rNe=r(eSr,"detr"),eSr.forEach(t),tNe=r(vMe," \u2014 "),x9=n(vMe,"A",{href:!0});var oSr=s(x9);aNe=r(oSr,"DetrConfig"),oSr.forEach(t),nNe=r(vMe," (DETR model)"),vMe.forEach(t),sNe=i(T),mf=n(T,"LI",{});var TMe=s(mf);EH=n(TMe,"STRONG",{});var rSr=s(EH);lNe=r(rSr,"distilbert"),rSr.forEach(t),iNe=r(TMe," \u2014 "),k9=n(TMe,"A",{href:!0});var tSr=s(k9);dNe=r(tSr,"DistilBertConfig"),tSr.forEach(t),cNe=r(TMe," (DistilBERT model)"),TMe.forEach(t),mNe=i(T),ff=n(T,"LI",{});var FMe=s(ff);yH=n(FMe,"STRONG",{});var aSr=s(yH);fNe=r(aSr,"dpr"),aSr.forEach(t),gNe=r(FMe," \u2014 "),R9=n(FMe,"A",{href:!0});var nSr=s(R9);hNe=r(nSr,"DPRConfig"),nSr.forEach(t),uNe=r(FMe," (DPR model)"),FMe.forEach(t),pNe=i(T),gf=n(T,"LI",{});var CMe=s(gf);wH=n(CMe,"STRONG",{});var sSr=s(wH);_Ne=r(sSr,"electra"),sSr.forEach(t),bNe=r(CMe," \u2014 "),S9=n(CMe,"A",{href:!0});var lSr=s(S9);vNe=r(lSr,"ElectraConfig"),lSr.forEach(t),TNe=r(CMe," (ELECTRA model)"),CMe.forEach(t),FNe=i(T),hf=n(T,"LI",{});var MMe=s(hf);AH=n(MMe,"STRONG",{});var iSr=s(AH);CNe=r(iSr,"encoder-decoder"),iSr.forEach(t),MNe=r(MMe," \u2014 "),P9=n(MMe,"A",{href:!0});var dSr=s(P9);ENe=r(dSr,"EncoderDecoderConfig"),dSr.forEach(t),yNe=r(MMe," (Encoder decoder model)"),MMe.forEach(t),wNe=i(T),uf=n(T,"LI",{});var EMe=s(uf);LH=n(EMe,"STRONG",{});var cSr=s(LH);ANe=r(cSr,"flaubert"),cSr.forEach(t),LNe=r(EMe," \u2014 "),$9=n(EMe,"A",{href:!0});var mSr=s($9);BNe=r(mSr,"FlaubertConfig"),mSr.forEach(t),xNe=r(EMe," (FlauBERT model)"),EMe.forEach(t),kNe=i(T),pf=n(T,"LI",{});var yMe=s(pf);BH=n(yMe,"STRONG",{});var fSr=s(BH);RNe=r(fSr,"fnet"),fSr.forEach(t),SNe=r(yMe," \u2014 "),I9=n(yMe,"A",{href:!0});var gSr=s(I9);PNe=r(gSr,"FNetConfig"),gSr.forEach(t),$Ne=r(yMe," (FNet model)"),yMe.forEach(t),INe=i(T),_f=n(T,"LI",{});var wMe=s(_f);xH=n(wMe,"STRONG",{});var hSr=s(xH);jNe=r(hSr,"fsmt"),hSr.forEach(t),NNe=r(wMe," \u2014 "),j9=n(wMe,"A",{href:!0});var uSr=s(j9);DNe=r(uSr,"FSMTConfig"),uSr.forEach(t),qNe=r(wMe," (FairSeq Machine-Translation model)"),wMe.forEach(t),GNe=i(T),bf=n(T,"LI",{});var AMe=s(bf);kH=n(AMe,"STRONG",{});var pSr=s(kH);ONe=r(pSr,"funnel"),pSr.forEach(t),XNe=r(AMe," \u2014 "),N9=n(AMe,"A",{href:!0});var _Sr=s(N9);VNe=r(_Sr,"FunnelConfig"),_Sr.forEach(t),zNe=r(AMe," (Funnel Transformer model)"),AMe.forEach(t),WNe=i(T),vf=n(T,"LI",{});var LMe=s(vf);RH=n(LMe,"STRONG",{});var bSr=s(RH);QNe=r(bSr,"glpn"),bSr.forEach(t),HNe=r(LMe," \u2014 "),D9=n(LMe,"A",{href:!0});var vSr=s(D9);UNe=r(vSr,"GLPNConfig"),vSr.forEach(t),JNe=r(LMe," (GLPN model)"),LMe.forEach(t),YNe=i(T),Tf=n(T,"LI",{});var BMe=s(Tf);SH=n(BMe,"STRONG",{});var TSr=s(SH);KNe=r(TSr,"gpt2"),TSr.forEach(t),ZNe=r(BMe," \u2014 "),q9=n(BMe,"A",{href:!0});var FSr=s(q9);eDe=r(FSr,"GPT2Config"),FSr.forEach(t),oDe=r(BMe," (OpenAI GPT-2 model)"),BMe.forEach(t),rDe=i(T),Ff=n(T,"LI",{});var xMe=s(Ff);PH=n(xMe,"STRONG",{});var CSr=s(PH);tDe=r(CSr,"gpt_neo"),CSr.forEach(t),aDe=r(xMe," \u2014 "),G9=n(xMe,"A",{href:!0});var MSr=s(G9);nDe=r(MSr,"GPTNeoConfig"),MSr.forEach(t),sDe=r(xMe," (GPT Neo model)"),xMe.forEach(t),lDe=i(T),Cf=n(T,"LI",{});var kMe=s(Cf);$H=n(kMe,"STRONG",{});var ESr=s($H);iDe=r(ESr,"gptj"),ESr.forEach(t),dDe=r(kMe," \u2014 "),O9=n(kMe,"A",{href:!0});var ySr=s(O9);cDe=r(ySr,"GPTJConfig"),ySr.forEach(t),mDe=r(kMe," (GPT-J model)"),kMe.forEach(t),fDe=i(T),Mf=n(T,"LI",{});var RMe=s(Mf);IH=n(RMe,"STRONG",{});var wSr=s(IH);gDe=r(wSr,"hubert"),wSr.forEach(t),hDe=r(RMe," \u2014 "),X9=n(RMe,"A",{href:!0});var ASr=s(X9);uDe=r(ASr,"HubertConfig"),ASr.forEach(t),pDe=r(RMe," (Hubert model)"),RMe.forEach(t),_De=i(T),Ef=n(T,"LI",{});var SMe=s(Ef);jH=n(SMe,"STRONG",{});var LSr=s(jH);bDe=r(LSr,"ibert"),LSr.forEach(t),vDe=r(SMe," \u2014 "),V9=n(SMe,"A",{href:!0});var BSr=s(V9);TDe=r(BSr,"IBertConfig"),BSr.forEach(t),FDe=r(SMe," (I-BERT model)"),SMe.forEach(t),CDe=i(T),yf=n(T,"LI",{});var PMe=s(yf);NH=n(PMe,"STRONG",{});var xSr=s(NH);MDe=r(xSr,"imagegpt"),xSr.forEach(t),EDe=r(PMe," \u2014 "),z9=n(PMe,"A",{href:!0});var kSr=s(z9);yDe=r(kSr,"ImageGPTConfig"),kSr.forEach(t),wDe=r(PMe," (ImageGPT model)"),PMe.forEach(t),ADe=i(T),wf=n(T,"LI",{});var $Me=s(wf);DH=n($Me,"STRONG",{});var RSr=s(DH);LDe=r(RSr,"layoutlm"),RSr.forEach(t),BDe=r($Me," \u2014 "),W9=n($Me,"A",{href:!0});var SSr=s(W9);xDe=r(SSr,"LayoutLMConfig"),SSr.forEach(t),kDe=r($Me," (LayoutLM model)"),$Me.forEach(t),RDe=i(T),Af=n(T,"LI",{});var IMe=s(Af);qH=n(IMe,"STRONG",{});var PSr=s(qH);SDe=r(PSr,"layoutlmv2"),PSr.forEach(t),PDe=r(IMe," \u2014 "),Q9=n(IMe,"A",{href:!0});var $Sr=s(Q9);$De=r($Sr,"LayoutLMv2Config"),$Sr.forEach(t),IDe=r(IMe," (LayoutLMv2 model)"),IMe.forEach(t),jDe=i(T),Lf=n(T,"LI",{});var jMe=s(Lf);GH=n(jMe,"STRONG",{});var ISr=s(GH);NDe=r(ISr,"led"),ISr.forEach(t),DDe=r(jMe," \u2014 "),H9=n(jMe,"A",{href:!0});var jSr=s(H9);qDe=r(jSr,"LEDConfig"),jSr.forEach(t),GDe=r(jMe," (LED model)"),jMe.forEach(t),ODe=i(T),Bf=n(T,"LI",{});var NMe=s(Bf);OH=n(NMe,"STRONG",{});var NSr=s(OH);XDe=r(NSr,"longformer"),NSr.forEach(t),VDe=r(NMe," \u2014 "),U9=n(NMe,"A",{href:!0});var DSr=s(U9);zDe=r(DSr,"LongformerConfig"),DSr.forEach(t),WDe=r(NMe," (Longformer model)"),NMe.forEach(t),QDe=i(T),xf=n(T,"LI",{});var DMe=s(xf);XH=n(DMe,"STRONG",{});var qSr=s(XH);HDe=r(qSr,"luke"),qSr.forEach(t),UDe=r(DMe," \u2014 "),J9=n(DMe,"A",{href:!0});var GSr=s(J9);JDe=r(GSr,"LukeConfig"),GSr.forEach(t),YDe=r(DMe," (LUKE model)"),DMe.forEach(t),KDe=i(T),kf=n(T,"LI",{});var qMe=s(kf);VH=n(qMe,"STRONG",{});var OSr=s(VH);ZDe=r(OSr,"lxmert"),OSr.forEach(t),eqe=r(qMe," \u2014 "),Y9=n(qMe,"A",{href:!0});var XSr=s(Y9);oqe=r(XSr,"LxmertConfig"),XSr.forEach(t),rqe=r(qMe," (LXMERT model)"),qMe.forEach(t),tqe=i(T),Rf=n(T,"LI",{});var GMe=s(Rf);zH=n(GMe,"STRONG",{});var VSr=s(zH);aqe=r(VSr,"m2m_100"),VSr.forEach(t),nqe=r(GMe," \u2014 "),K9=n(GMe,"A",{href:!0});var zSr=s(K9);sqe=r(zSr,"M2M100Config"),zSr.forEach(t),lqe=r(GMe," (M2M100 model)"),GMe.forEach(t),iqe=i(T),Sf=n(T,"LI",{});var OMe=s(Sf);WH=n(OMe,"STRONG",{});var WSr=s(WH);dqe=r(WSr,"marian"),WSr.forEach(t),cqe=r(OMe," \u2014 "),Z9=n(OMe,"A",{href:!0});var QSr=s(Z9);mqe=r(QSr,"MarianConfig"),QSr.forEach(t),fqe=r(OMe," (Marian model)"),OMe.forEach(t),gqe=i(T),Pf=n(T,"LI",{});var XMe=s(Pf);QH=n(XMe,"STRONG",{});var HSr=s(QH);hqe=r(HSr,"maskformer"),HSr.forEach(t),uqe=r(XMe," \u2014 "),eB=n(XMe,"A",{href:!0});var USr=s(eB);pqe=r(USr,"MaskFormerConfig"),USr.forEach(t),_qe=r(XMe," (MaskFormer model)"),XMe.forEach(t),bqe=i(T),$f=n(T,"LI",{});var VMe=s($f);HH=n(VMe,"STRONG",{});var JSr=s(HH);vqe=r(JSr,"mbart"),JSr.forEach(t),Tqe=r(VMe," \u2014 "),oB=n(VMe,"A",{href:!0});var YSr=s(oB);Fqe=r(YSr,"MBartConfig"),YSr.forEach(t),Cqe=r(VMe," (mBART model)"),VMe.forEach(t),Mqe=i(T),If=n(T,"LI",{});var zMe=s(If);UH=n(zMe,"STRONG",{});var KSr=s(UH);Eqe=r(KSr,"megatron-bert"),KSr.forEach(t),yqe=r(zMe," \u2014 "),rB=n(zMe,"A",{href:!0});var ZSr=s(rB);wqe=r(ZSr,"MegatronBertConfig"),ZSr.forEach(t),Aqe=r(zMe," (MegatronBert model)"),zMe.forEach(t),Lqe=i(T),jf=n(T,"LI",{});var WMe=s(jf);JH=n(WMe,"STRONG",{});var ePr=s(JH);Bqe=r(ePr,"mobilebert"),ePr.forEach(t),xqe=r(WMe," \u2014 "),tB=n(WMe,"A",{href:!0});var oPr=s(tB);kqe=r(oPr,"MobileBertConfig"),oPr.forEach(t),Rqe=r(WMe," (MobileBERT model)"),WMe.forEach(t),Sqe=i(T),Nf=n(T,"LI",{});var QMe=s(Nf);YH=n(QMe,"STRONG",{});var rPr=s(YH);Pqe=r(rPr,"mpnet"),rPr.forEach(t),$qe=r(QMe," \u2014 "),aB=n(QMe,"A",{href:!0});var tPr=s(aB);Iqe=r(tPr,"MPNetConfig"),tPr.forEach(t),jqe=r(QMe," (MPNet model)"),QMe.forEach(t),Nqe=i(T),Df=n(T,"LI",{});var HMe=s(Df);KH=n(HMe,"STRONG",{});var aPr=s(KH);Dqe=r(aPr,"mt5"),aPr.forEach(t),qqe=r(HMe," \u2014 "),nB=n(HMe,"A",{href:!0});var nPr=s(nB);Gqe=r(nPr,"MT5Config"),nPr.forEach(t),Oqe=r(HMe," (mT5 model)"),HMe.forEach(t),Xqe=i(T),qf=n(T,"LI",{});var UMe=s(qf);ZH=n(UMe,"STRONG",{});var sPr=s(ZH);Vqe=r(sPr,"nystromformer"),sPr.forEach(t),zqe=r(UMe," \u2014 "),sB=n(UMe,"A",{href:!0});var lPr=s(sB);Wqe=r(lPr,"NystromformerConfig"),lPr.forEach(t),Qqe=r(UMe," (Nystromformer model)"),UMe.forEach(t),Hqe=i(T),Gf=n(T,"LI",{});var JMe=s(Gf);eU=n(JMe,"STRONG",{});var iPr=s(eU);Uqe=r(iPr,"openai-gpt"),iPr.forEach(t),Jqe=r(JMe," \u2014 "),lB=n(JMe,"A",{href:!0});var dPr=s(lB);Yqe=r(dPr,"OpenAIGPTConfig"),dPr.forEach(t),Kqe=r(JMe," (OpenAI GPT model)"),JMe.forEach(t),Zqe=i(T),Of=n(T,"LI",{});var YMe=s(Of);oU=n(YMe,"STRONG",{});var cPr=s(oU);eGe=r(cPr,"pegasus"),cPr.forEach(t),oGe=r(YMe," \u2014 "),iB=n(YMe,"A",{href:!0});var mPr=s(iB);rGe=r(mPr,"PegasusConfig"),mPr.forEach(t),tGe=r(YMe," (Pegasus model)"),YMe.forEach(t),aGe=i(T),Xf=n(T,"LI",{});var KMe=s(Xf);rU=n(KMe,"STRONG",{});var fPr=s(rU);nGe=r(fPr,"perceiver"),fPr.forEach(t),sGe=r(KMe," \u2014 "),dB=n(KMe,"A",{href:!0});var gPr=s(dB);lGe=r(gPr,"PerceiverConfig"),gPr.forEach(t),iGe=r(KMe," (Perceiver model)"),KMe.forEach(t),dGe=i(T),Vf=n(T,"LI",{});var ZMe=s(Vf);tU=n(ZMe,"STRONG",{});var hPr=s(tU);cGe=r(hPr,"plbart"),hPr.forEach(t),mGe=r(ZMe," \u2014 "),cB=n(ZMe,"A",{href:!0});var uPr=s(cB);fGe=r(uPr,"PLBartConfig"),uPr.forEach(t),gGe=r(ZMe," (PLBart model)"),ZMe.forEach(t),hGe=i(T),zf=n(T,"LI",{});var e4e=s(zf);aU=n(e4e,"STRONG",{});var pPr=s(aU);uGe=r(pPr,"poolformer"),pPr.forEach(t),pGe=r(e4e," \u2014 "),mB=n(e4e,"A",{href:!0});var _Pr=s(mB);_Ge=r(_Pr,"PoolFormerConfig"),_Pr.forEach(t),bGe=r(e4e," (PoolFormer model)"),e4e.forEach(t),vGe=i(T),Wf=n(T,"LI",{});var o4e=s(Wf);nU=n(o4e,"STRONG",{});var bPr=s(nU);TGe=r(bPr,"prophetnet"),bPr.forEach(t),FGe=r(o4e," \u2014 "),fB=n(o4e,"A",{href:!0});var vPr=s(fB);CGe=r(vPr,"ProphetNetConfig"),vPr.forEach(t),MGe=r(o4e," (ProphetNet model)"),o4e.forEach(t),EGe=i(T),Qf=n(T,"LI",{});var r4e=s(Qf);sU=n(r4e,"STRONG",{});var TPr=s(sU);yGe=r(TPr,"qdqbert"),TPr.forEach(t),wGe=r(r4e," \u2014 "),gB=n(r4e,"A",{href:!0});var FPr=s(gB);AGe=r(FPr,"QDQBertConfig"),FPr.forEach(t),LGe=r(r4e," (QDQBert model)"),r4e.forEach(t),BGe=i(T),Hf=n(T,"LI",{});var t4e=s(Hf);lU=n(t4e,"STRONG",{});var CPr=s(lU);xGe=r(CPr,"rag"),CPr.forEach(t),kGe=r(t4e," \u2014 "),hB=n(t4e,"A",{href:!0});var MPr=s(hB);RGe=r(MPr,"RagConfig"),MPr.forEach(t),SGe=r(t4e," (RAG model)"),t4e.forEach(t),PGe=i(T),Uf=n(T,"LI",{});var a4e=s(Uf);iU=n(a4e,"STRONG",{});var EPr=s(iU);$Ge=r(EPr,"realm"),EPr.forEach(t),IGe=r(a4e," \u2014 "),uB=n(a4e,"A",{href:!0});var yPr=s(uB);jGe=r(yPr,"RealmConfig"),yPr.forEach(t),NGe=r(a4e," (Realm model)"),a4e.forEach(t),DGe=i(T),Jf=n(T,"LI",{});var n4e=s(Jf);dU=n(n4e,"STRONG",{});var wPr=s(dU);qGe=r(wPr,"reformer"),wPr.forEach(t),GGe=r(n4e," \u2014 "),pB=n(n4e,"A",{href:!0});var APr=s(pB);OGe=r(APr,"ReformerConfig"),APr.forEach(t),XGe=r(n4e," (Reformer model)"),n4e.forEach(t),VGe=i(T),Yf=n(T,"LI",{});var s4e=s(Yf);cU=n(s4e,"STRONG",{});var LPr=s(cU);zGe=r(LPr,"rembert"),LPr.forEach(t),WGe=r(s4e," \u2014 "),_B=n(s4e,"A",{href:!0});var BPr=s(_B);QGe=r(BPr,"RemBertConfig"),BPr.forEach(t),HGe=r(s4e," (RemBERT model)"),s4e.forEach(t),UGe=i(T),Kf=n(T,"LI",{});var l4e=s(Kf);mU=n(l4e,"STRONG",{});var xPr=s(mU);JGe=r(xPr,"resnet"),xPr.forEach(t),YGe=r(l4e," \u2014 "),bB=n(l4e,"A",{href:!0});var kPr=s(bB);KGe=r(kPr,"ResNetConfig"),kPr.forEach(t),ZGe=r(l4e," (ResNet model)"),l4e.forEach(t),eOe=i(T),Zf=n(T,"LI",{});var i4e=s(Zf);fU=n(i4e,"STRONG",{});var RPr=s(fU);oOe=r(RPr,"retribert"),RPr.forEach(t),rOe=r(i4e," \u2014 "),vB=n(i4e,"A",{href:!0});var SPr=s(vB);tOe=r(SPr,"RetriBertConfig"),SPr.forEach(t),aOe=r(i4e," (RetriBERT model)"),i4e.forEach(t),nOe=i(T),eg=n(T,"LI",{});var d4e=s(eg);gU=n(d4e,"STRONG",{});var PPr=s(gU);sOe=r(PPr,"roberta"),PPr.forEach(t),lOe=r(d4e," \u2014 "),TB=n(d4e,"A",{href:!0});var $Pr=s(TB);iOe=r($Pr,"RobertaConfig"),$Pr.forEach(t),dOe=r(d4e," (RoBERTa model)"),d4e.forEach(t),cOe=i(T),og=n(T,"LI",{});var c4e=s(og);hU=n(c4e,"STRONG",{});var IPr=s(hU);mOe=r(IPr,"roformer"),IPr.forEach(t),fOe=r(c4e," \u2014 "),FB=n(c4e,"A",{href:!0});var jPr=s(FB);gOe=r(jPr,"RoFormerConfig"),jPr.forEach(t),hOe=r(c4e," (RoFormer model)"),c4e.forEach(t),uOe=i(T),rg=n(T,"LI",{});var m4e=s(rg);uU=n(m4e,"STRONG",{});var NPr=s(uU);pOe=r(NPr,"segformer"),NPr.forEach(t),_Oe=r(m4e," \u2014 "),CB=n(m4e,"A",{href:!0});var DPr=s(CB);bOe=r(DPr,"SegformerConfig"),DPr.forEach(t),vOe=r(m4e," (SegFormer model)"),m4e.forEach(t),TOe=i(T),tg=n(T,"LI",{});var f4e=s(tg);pU=n(f4e,"STRONG",{});var qPr=s(pU);FOe=r(qPr,"sew"),qPr.forEach(t),COe=r(f4e," \u2014 "),MB=n(f4e,"A",{href:!0});var GPr=s(MB);MOe=r(GPr,"SEWConfig"),GPr.forEach(t),EOe=r(f4e," (SEW model)"),f4e.forEach(t),yOe=i(T),ag=n(T,"LI",{});var g4e=s(ag);_U=n(g4e,"STRONG",{});var OPr=s(_U);wOe=r(OPr,"sew-d"),OPr.forEach(t),AOe=r(g4e," \u2014 "),EB=n(g4e,"A",{href:!0});var XPr=s(EB);LOe=r(XPr,"SEWDConfig"),XPr.forEach(t),BOe=r(g4e," (SEW-D model)"),g4e.forEach(t),xOe=i(T),ng=n(T,"LI",{});var h4e=s(ng);bU=n(h4e,"STRONG",{});var VPr=s(bU);kOe=r(VPr,"speech-encoder-decoder"),VPr.forEach(t),ROe=r(h4e," \u2014 "),yB=n(h4e,"A",{href:!0});var zPr=s(yB);SOe=r(zPr,"SpeechEncoderDecoderConfig"),zPr.forEach(t),POe=r(h4e," (Speech Encoder decoder model)"),h4e.forEach(t),$Oe=i(T),sg=n(T,"LI",{});var u4e=s(sg);vU=n(u4e,"STRONG",{});var WPr=s(vU);IOe=r(WPr,"speech_to_text"),WPr.forEach(t),jOe=r(u4e," \u2014 "),wB=n(u4e,"A",{href:!0});var QPr=s(wB);NOe=r(QPr,"Speech2TextConfig"),QPr.forEach(t),DOe=r(u4e," (Speech2Text model)"),u4e.forEach(t),qOe=i(T),lg=n(T,"LI",{});var p4e=s(lg);TU=n(p4e,"STRONG",{});var HPr=s(TU);GOe=r(HPr,"speech_to_text_2"),HPr.forEach(t),OOe=r(p4e," \u2014 "),AB=n(p4e,"A",{href:!0});var UPr=s(AB);XOe=r(UPr,"Speech2Text2Config"),UPr.forEach(t),VOe=r(p4e," (Speech2Text2 model)"),p4e.forEach(t),zOe=i(T),ig=n(T,"LI",{});var _4e=s(ig);FU=n(_4e,"STRONG",{});var JPr=s(FU);WOe=r(JPr,"splinter"),JPr.forEach(t),QOe=r(_4e," \u2014 "),LB=n(_4e,"A",{href:!0});var YPr=s(LB);HOe=r(YPr,"SplinterConfig"),YPr.forEach(t),UOe=r(_4e," (Splinter model)"),_4e.forEach(t),JOe=i(T),dg=n(T,"LI",{});var b4e=s(dg);CU=n(b4e,"STRONG",{});var KPr=s(CU);YOe=r(KPr,"squeezebert"),KPr.forEach(t),KOe=r(b4e," \u2014 "),BB=n(b4e,"A",{href:!0});var ZPr=s(BB);ZOe=r(ZPr,"SqueezeBertConfig"),ZPr.forEach(t),eXe=r(b4e," (SqueezeBERT model)"),b4e.forEach(t),oXe=i(T),cg=n(T,"LI",{});var v4e=s(cg);MU=n(v4e,"STRONG",{});var e$r=s(MU);rXe=r(e$r,"swin"),e$r.forEach(t),tXe=r(v4e," \u2014 "),xB=n(v4e,"A",{href:!0});var o$r=s(xB);aXe=r(o$r,"SwinConfig"),o$r.forEach(t),nXe=r(v4e," (Swin model)"),v4e.forEach(t),sXe=i(T),mg=n(T,"LI",{});var T4e=s(mg);EU=n(T4e,"STRONG",{});var r$r=s(EU);lXe=r(r$r,"t5"),r$r.forEach(t),iXe=r(T4e," \u2014 "),kB=n(T4e,"A",{href:!0});var t$r=s(kB);dXe=r(t$r,"T5Config"),t$r.forEach(t),cXe=r(T4e," (T5 model)"),T4e.forEach(t),mXe=i(T),fg=n(T,"LI",{});var F4e=s(fg);yU=n(F4e,"STRONG",{});var a$r=s(yU);fXe=r(a$r,"tapas"),a$r.forEach(t),gXe=r(F4e," \u2014 "),RB=n(F4e,"A",{href:!0});var n$r=s(RB);hXe=r(n$r,"TapasConfig"),n$r.forEach(t),uXe=r(F4e," (TAPAS model)"),F4e.forEach(t),pXe=i(T),gg=n(T,"LI",{});var C4e=s(gg);wU=n(C4e,"STRONG",{});var s$r=s(wU);_Xe=r(s$r,"transfo-xl"),s$r.forEach(t),bXe=r(C4e," \u2014 "),SB=n(C4e,"A",{href:!0});var l$r=s(SB);vXe=r(l$r,"TransfoXLConfig"),l$r.forEach(t),TXe=r(C4e," (Transformer-XL model)"),C4e.forEach(t),FXe=i(T),hg=n(T,"LI",{});var M4e=s(hg);AU=n(M4e,"STRONG",{});var i$r=s(AU);CXe=r(i$r,"trocr"),i$r.forEach(t),MXe=r(M4e," \u2014 "),PB=n(M4e,"A",{href:!0});var d$r=s(PB);EXe=r(d$r,"TrOCRConfig"),d$r.forEach(t),yXe=r(M4e," (TrOCR model)"),M4e.forEach(t),wXe=i(T),ug=n(T,"LI",{});var E4e=s(ug);LU=n(E4e,"STRONG",{});var c$r=s(LU);AXe=r(c$r,"unispeech"),c$r.forEach(t),LXe=r(E4e," \u2014 "),$B=n(E4e,"A",{href:!0});var m$r=s($B);BXe=r(m$r,"UniSpeechConfig"),m$r.forEach(t),xXe=r(E4e," (UniSpeech model)"),E4e.forEach(t),kXe=i(T),pg=n(T,"LI",{});var y4e=s(pg);BU=n(y4e,"STRONG",{});var f$r=s(BU);RXe=r(f$r,"unispeech-sat"),f$r.forEach(t),SXe=r(y4e," \u2014 "),IB=n(y4e,"A",{href:!0});var g$r=s(IB);PXe=r(g$r,"UniSpeechSatConfig"),g$r.forEach(t),$Xe=r(y4e," (UniSpeechSat model)"),y4e.forEach(t),IXe=i(T),_g=n(T,"LI",{});var w4e=s(_g);xU=n(w4e,"STRONG",{});var h$r=s(xU);jXe=r(h$r,"van"),h$r.forEach(t),NXe=r(w4e," \u2014 "),jB=n(w4e,"A",{href:!0});var u$r=s(jB);DXe=r(u$r,"VanConfig"),u$r.forEach(t),qXe=r(w4e," (VAN model)"),w4e.forEach(t),GXe=i(T),bg=n(T,"LI",{});var A4e=s(bg);kU=n(A4e,"STRONG",{});var p$r=s(kU);OXe=r(p$r,"vilt"),p$r.forEach(t),XXe=r(A4e," \u2014 "),NB=n(A4e,"A",{href:!0});var _$r=s(NB);VXe=r(_$r,"ViltConfig"),_$r.forEach(t),zXe=r(A4e," (ViLT model)"),A4e.forEach(t),WXe=i(T),vg=n(T,"LI",{});var L4e=s(vg);RU=n(L4e,"STRONG",{});var b$r=s(RU);QXe=r(b$r,"vision-encoder-decoder"),b$r.forEach(t),HXe=r(L4e," \u2014 "),DB=n(L4e,"A",{href:!0});var v$r=s(DB);UXe=r(v$r,"VisionEncoderDecoderConfig"),v$r.forEach(t),JXe=r(L4e," (Vision Encoder decoder model)"),L4e.forEach(t),YXe=i(T),Tg=n(T,"LI",{});var B4e=s(Tg);SU=n(B4e,"STRONG",{});var T$r=s(SU);KXe=r(T$r,"vision-text-dual-encoder"),T$r.forEach(t),ZXe=r(B4e," \u2014 "),qB=n(B4e,"A",{href:!0});var F$r=s(qB);eVe=r(F$r,"VisionTextDualEncoderConfig"),F$r.forEach(t),oVe=r(B4e," (VisionTextDualEncoder model)"),B4e.forEach(t),rVe=i(T),Fg=n(T,"LI",{});var x4e=s(Fg);PU=n(x4e,"STRONG",{});var C$r=s(PU);tVe=r(C$r,"visual_bert"),C$r.forEach(t),aVe=r(x4e," \u2014 "),GB=n(x4e,"A",{href:!0});var M$r=s(GB);nVe=r(M$r,"VisualBertConfig"),M$r.forEach(t),sVe=r(x4e," (VisualBert model)"),x4e.forEach(t),lVe=i(T),Cg=n(T,"LI",{});var k4e=s(Cg);$U=n(k4e,"STRONG",{});var E$r=s($U);iVe=r(E$r,"vit"),E$r.forEach(t),dVe=r(k4e," \u2014 "),OB=n(k4e,"A",{href:!0});var y$r=s(OB);cVe=r(y$r,"ViTConfig"),y$r.forEach(t),mVe=r(k4e," (ViT model)"),k4e.forEach(t),fVe=i(T),Mg=n(T,"LI",{});var R4e=s(Mg);IU=n(R4e,"STRONG",{});var w$r=s(IU);gVe=r(w$r,"vit_mae"),w$r.forEach(t),hVe=r(R4e," \u2014 "),XB=n(R4e,"A",{href:!0});var A$r=s(XB);uVe=r(A$r,"ViTMAEConfig"),A$r.forEach(t),pVe=r(R4e," (ViTMAE model)"),R4e.forEach(t),_Ve=i(T),Eg=n(T,"LI",{});var S4e=s(Eg);jU=n(S4e,"STRONG",{});var L$r=s(jU);bVe=r(L$r,"wav2vec2"),L$r.forEach(t),vVe=r(S4e," \u2014 "),VB=n(S4e,"A",{href:!0});var B$r=s(VB);TVe=r(B$r,"Wav2Vec2Config"),B$r.forEach(t),FVe=r(S4e," (Wav2Vec2 model)"),S4e.forEach(t),CVe=i(T),yg=n(T,"LI",{});var P4e=s(yg);NU=n(P4e,"STRONG",{});var x$r=s(NU);MVe=r(x$r,"wavlm"),x$r.forEach(t),EVe=r(P4e," \u2014 "),zB=n(P4e,"A",{href:!0});var k$r=s(zB);yVe=r(k$r,"WavLMConfig"),k$r.forEach(t),wVe=r(P4e," (WavLM model)"),P4e.forEach(t),AVe=i(T),wg=n(T,"LI",{});var $4e=s(wg);DU=n($4e,"STRONG",{});var R$r=s(DU);LVe=r(R$r,"xglm"),R$r.forEach(t),BVe=r($4e," \u2014 "),WB=n($4e,"A",{href:!0});var S$r=s(WB);xVe=r(S$r,"XGLMConfig"),S$r.forEach(t),kVe=r($4e," (XGLM model)"),$4e.forEach(t),RVe=i(T),Ag=n(T,"LI",{});var I4e=s(Ag);qU=n(I4e,"STRONG",{});var P$r=s(qU);SVe=r(P$r,"xlm"),P$r.forEach(t),PVe=r(I4e," \u2014 "),QB=n(I4e,"A",{href:!0});var $$r=s(QB);$Ve=r($$r,"XLMConfig"),$$r.forEach(t),IVe=r(I4e," (XLM model)"),I4e.forEach(t),jVe=i(T),Lg=n(T,"LI",{});var j4e=s(Lg);GU=n(j4e,"STRONG",{});var I$r=s(GU);NVe=r(I$r,"xlm-prophetnet"),I$r.forEach(t),DVe=r(j4e," \u2014 "),HB=n(j4e,"A",{href:!0});var j$r=s(HB);qVe=r(j$r,"XLMProphetNetConfig"),j$r.forEach(t),GVe=r(j4e," (XLMProphetNet model)"),j4e.forEach(t),OVe=i(T),Bg=n(T,"LI",{});var N4e=s(Bg);OU=n(N4e,"STRONG",{});var N$r=s(OU);XVe=r(N$r,"xlm-roberta"),N$r.forEach(t),VVe=r(N4e," \u2014 "),UB=n(N4e,"A",{href:!0});var D$r=s(UB);zVe=r(D$r,"XLMRobertaConfig"),D$r.forEach(t),WVe=r(N4e," (XLM-RoBERTa model)"),N4e.forEach(t),QVe=i(T),xg=n(T,"LI",{});var D4e=s(xg);XU=n(D4e,"STRONG",{});var q$r=s(XU);HVe=r(q$r,"xlm-roberta-xl"),q$r.forEach(t),UVe=r(D4e," \u2014 "),JB=n(D4e,"A",{href:!0});var G$r=s(JB);JVe=r(G$r,"XLMRobertaXLConfig"),G$r.forEach(t),YVe=r(D4e," (XLM-RoBERTa-XL model)"),D4e.forEach(t),KVe=i(T),kg=n(T,"LI",{});var q4e=s(kg);VU=n(q4e,"STRONG",{});var O$r=s(VU);ZVe=r(O$r,"xlnet"),O$r.forEach(t),eze=r(q4e," \u2014 "),YB=n(q4e,"A",{href:!0});var X$r=s(YB);oze=r(X$r,"XLNetConfig"),X$r.forEach(t),rze=r(q4e," (XLNet model)"),q4e.forEach(t),tze=i(T),Rg=n(T,"LI",{});var G4e=s(Rg);zU=n(G4e,"STRONG",{});var V$r=s(zU);aze=r(V$r,"yoso"),V$r.forEach(t),nze=r(G4e," \u2014 "),KB=n(G4e,"A",{href:!0});var z$r=s(KB);sze=r(z$r,"YosoConfig"),z$r.forEach(t),lze=r(G4e," (YOSO model)"),G4e.forEach(t),T.forEach(t),ize=i(ga),WU=n(ga,"P",{});var W$r=s(WU);dze=r(W$r,"Examples:"),W$r.forEach(t),cze=i(ga),f(Ty.$$.fragment,ga),ga.forEach(t),mze=i(Os),Sg=n(Os,"DIV",{class:!0});var ySe=s(Sg);f(Fy.$$.fragment,ySe),fze=i(ySe),QU=n(ySe,"P",{});var Q$r=s(QU);gze=r(Q$r,"Register a new configuration for this class."),Q$r.forEach(t),ySe.forEach(t),Os.forEach(t),Mke=i(c),Wi=n(c,"H2",{class:!0});var wSe=s(Wi);Pg=n(wSe,"A",{id:!0,class:!0,href:!0});var H$r=s(Pg);HU=n(H$r,"SPAN",{});var U$r=s(HU);f(Cy.$$.fragment,U$r),U$r.forEach(t),H$r.forEach(t),hze=i(wSe),UU=n(wSe,"SPAN",{});var J$r=s(UU);uze=r(J$r,"AutoTokenizer"),J$r.forEach(t),wSe.forEach(t),Eke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);f(My.$$.fragment,Xs),pze=i(Xs),Ey=n(Xs,"P",{});var ASe=s(Ey);_ze=r(ASe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZB=n(ASe,"A",{href:!0});var Y$r=s(ZB);bze=r(Y$r,"AutoTokenizer.from_pretrained()"),Y$r.forEach(t),vze=r(ASe," class method."),ASe.forEach(t),Tze=i(Xs),yy=n(Xs,"P",{});var LSe=s(yy);Fze=r(LSe,"This class cannot be instantiated directly using "),JU=n(LSe,"CODE",{});var K$r=s(JU);Cze=r(K$r,"__init__()"),K$r.forEach(t),Mze=r(LSe," (throws an error)."),LSe.forEach(t),Eze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);f(wy.$$.fragment,ha),yze=i(ha),YU=n(ha,"P",{});var Z$r=s(YU);wze=r(Z$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Z$r.forEach(t),Aze=i(ha),Oa=n(ha,"P",{});var m5=s(Oa);Lze=r(m5,"The tokenizer class to instantiate is selected based on the "),KU=n(m5,"CODE",{});var eIr=s(KU);Bze=r(eIr,"model_type"),eIr.forEach(t),xze=r(m5,` property of the config object (either
passed as an argument or loaded from `),ZU=n(m5,"CODE",{});var oIr=s(ZU);kze=r(oIr,"pretrained_model_name_or_path"),oIr.forEach(t),Rze=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eJ=n(m5,"CODE",{});var rIr=s(eJ);Sze=r(rIr,"pretrained_model_name_or_path"),rIr.forEach(t),Pze=r(m5,":"),m5.forEach(t),$ze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var s8=s(Wn);oJ=n(s8,"STRONG",{});var tIr=s(oJ);Ize=r(tIr,"albert"),tIr.forEach(t),jze=r(s8," \u2014 "),ex=n(s8,"A",{href:!0});var aIr=s(ex);Nze=r(aIr,"AlbertTokenizer"),aIr.forEach(t),Dze=r(s8," or "),ox=n(s8,"A",{href:!0});var nIr=s(ox);qze=r(nIr,"AlbertTokenizerFast"),nIr.forEach(t),Gze=r(s8," (ALBERT model)"),s8.forEach(t),Oze=i(y),Qn=n(y,"LI",{});var l8=s(Qn);rJ=n(l8,"STRONG",{});var sIr=s(rJ);Xze=r(sIr,"bart"),sIr.forEach(t),Vze=r(l8," \u2014 "),rx=n(l8,"A",{href:!0});var lIr=s(rx);zze=r(lIr,"BartTokenizer"),lIr.forEach(t),Wze=r(l8," or "),tx=n(l8,"A",{href:!0});var iIr=s(tx);Qze=r(iIr,"BartTokenizerFast"),iIr.forEach(t),Hze=r(l8," (BART model)"),l8.forEach(t),Uze=i(y),Hn=n(y,"LI",{});var i8=s(Hn);tJ=n(i8,"STRONG",{});var dIr=s(tJ);Jze=r(dIr,"barthez"),dIr.forEach(t),Yze=r(i8," \u2014 "),ax=n(i8,"A",{href:!0});var cIr=s(ax);Kze=r(cIr,"BarthezTokenizer"),cIr.forEach(t),Zze=r(i8," or "),nx=n(i8,"A",{href:!0});var mIr=s(nx);eWe=r(mIr,"BarthezTokenizerFast"),mIr.forEach(t),oWe=r(i8," (BARThez model)"),i8.forEach(t),rWe=i(y),$g=n(y,"LI",{});var O4e=s($g);aJ=n(O4e,"STRONG",{});var fIr=s(aJ);tWe=r(fIr,"bartpho"),fIr.forEach(t),aWe=r(O4e," \u2014 "),sx=n(O4e,"A",{href:!0});var gIr=s(sx);nWe=r(gIr,"BartphoTokenizer"),gIr.forEach(t),sWe=r(O4e," (BARTpho model)"),O4e.forEach(t),lWe=i(y),Un=n(y,"LI",{});var d8=s(Un);nJ=n(d8,"STRONG",{});var hIr=s(nJ);iWe=r(hIr,"bert"),hIr.forEach(t),dWe=r(d8," \u2014 "),lx=n(d8,"A",{href:!0});var uIr=s(lx);cWe=r(uIr,"BertTokenizer"),uIr.forEach(t),mWe=r(d8," or "),ix=n(d8,"A",{href:!0});var pIr=s(ix);fWe=r(pIr,"BertTokenizerFast"),pIr.forEach(t),gWe=r(d8," (BERT model)"),d8.forEach(t),hWe=i(y),Ig=n(y,"LI",{});var X4e=s(Ig);sJ=n(X4e,"STRONG",{});var _Ir=s(sJ);uWe=r(_Ir,"bert-generation"),_Ir.forEach(t),pWe=r(X4e," \u2014 "),dx=n(X4e,"A",{href:!0});var bIr=s(dx);_We=r(bIr,"BertGenerationTokenizer"),bIr.forEach(t),bWe=r(X4e," (Bert Generation model)"),X4e.forEach(t),vWe=i(y),jg=n(y,"LI",{});var V4e=s(jg);lJ=n(V4e,"STRONG",{});var vIr=s(lJ);TWe=r(vIr,"bert-japanese"),vIr.forEach(t),FWe=r(V4e," \u2014 "),cx=n(V4e,"A",{href:!0});var TIr=s(cx);CWe=r(TIr,"BertJapaneseTokenizer"),TIr.forEach(t),MWe=r(V4e," (BertJapanese model)"),V4e.forEach(t),EWe=i(y),Ng=n(y,"LI",{});var z4e=s(Ng);iJ=n(z4e,"STRONG",{});var FIr=s(iJ);yWe=r(FIr,"bertweet"),FIr.forEach(t),wWe=r(z4e," \u2014 "),mx=n(z4e,"A",{href:!0});var CIr=s(mx);AWe=r(CIr,"BertweetTokenizer"),CIr.forEach(t),LWe=r(z4e," (Bertweet model)"),z4e.forEach(t),BWe=i(y),Jn=n(y,"LI",{});var c8=s(Jn);dJ=n(c8,"STRONG",{});var MIr=s(dJ);xWe=r(MIr,"big_bird"),MIr.forEach(t),kWe=r(c8," \u2014 "),fx=n(c8,"A",{href:!0});var EIr=s(fx);RWe=r(EIr,"BigBirdTokenizer"),EIr.forEach(t),SWe=r(c8," or "),gx=n(c8,"A",{href:!0});var yIr=s(gx);PWe=r(yIr,"BigBirdTokenizerFast"),yIr.forEach(t),$We=r(c8," (BigBird model)"),c8.forEach(t),IWe=i(y),Yn=n(y,"LI",{});var m8=s(Yn);cJ=n(m8,"STRONG",{});var wIr=s(cJ);jWe=r(wIr,"bigbird_pegasus"),wIr.forEach(t),NWe=r(m8," \u2014 "),hx=n(m8,"A",{href:!0});var AIr=s(hx);DWe=r(AIr,"PegasusTokenizer"),AIr.forEach(t),qWe=r(m8," or "),ux=n(m8,"A",{href:!0});var LIr=s(ux);GWe=r(LIr,"PegasusTokenizerFast"),LIr.forEach(t),OWe=r(m8," (BigBirdPegasus model)"),m8.forEach(t),XWe=i(y),Kn=n(y,"LI",{});var f8=s(Kn);mJ=n(f8,"STRONG",{});var BIr=s(mJ);VWe=r(BIr,"blenderbot"),BIr.forEach(t),zWe=r(f8," \u2014 "),px=n(f8,"A",{href:!0});var xIr=s(px);WWe=r(xIr,"BlenderbotTokenizer"),xIr.forEach(t),QWe=r(f8," or "),_x=n(f8,"A",{href:!0});var kIr=s(_x);HWe=r(kIr,"BlenderbotTokenizerFast"),kIr.forEach(t),UWe=r(f8," (Blenderbot model)"),f8.forEach(t),JWe=i(y),Dg=n(y,"LI",{});var W4e=s(Dg);fJ=n(W4e,"STRONG",{});var RIr=s(fJ);YWe=r(RIr,"blenderbot-small"),RIr.forEach(t),KWe=r(W4e," \u2014 "),bx=n(W4e,"A",{href:!0});var SIr=s(bx);ZWe=r(SIr,"BlenderbotSmallTokenizer"),SIr.forEach(t),eQe=r(W4e," (BlenderbotSmall model)"),W4e.forEach(t),oQe=i(y),qg=n(y,"LI",{});var Q4e=s(qg);gJ=n(Q4e,"STRONG",{});var PIr=s(gJ);rQe=r(PIr,"byt5"),PIr.forEach(t),tQe=r(Q4e," \u2014 "),vx=n(Q4e,"A",{href:!0});var $Ir=s(vx);aQe=r($Ir,"ByT5Tokenizer"),$Ir.forEach(t),nQe=r(Q4e," (ByT5 model)"),Q4e.forEach(t),sQe=i(y),Zn=n(y,"LI",{});var g8=s(Zn);hJ=n(g8,"STRONG",{});var IIr=s(hJ);lQe=r(IIr,"camembert"),IIr.forEach(t),iQe=r(g8," \u2014 "),Tx=n(g8,"A",{href:!0});var jIr=s(Tx);dQe=r(jIr,"CamembertTokenizer"),jIr.forEach(t),cQe=r(g8," or "),Fx=n(g8,"A",{href:!0});var NIr=s(Fx);mQe=r(NIr,"CamembertTokenizerFast"),NIr.forEach(t),fQe=r(g8," (CamemBERT model)"),g8.forEach(t),gQe=i(y),Gg=n(y,"LI",{});var H4e=s(Gg);uJ=n(H4e,"STRONG",{});var DIr=s(uJ);hQe=r(DIr,"canine"),DIr.forEach(t),uQe=r(H4e," \u2014 "),Cx=n(H4e,"A",{href:!0});var qIr=s(Cx);pQe=r(qIr,"CanineTokenizer"),qIr.forEach(t),_Qe=r(H4e," (Canine model)"),H4e.forEach(t),bQe=i(y),es=n(y,"LI",{});var h8=s(es);pJ=n(h8,"STRONG",{});var GIr=s(pJ);vQe=r(GIr,"clip"),GIr.forEach(t),TQe=r(h8," \u2014 "),Mx=n(h8,"A",{href:!0});var OIr=s(Mx);FQe=r(OIr,"CLIPTokenizer"),OIr.forEach(t),CQe=r(h8," or "),Ex=n(h8,"A",{href:!0});var XIr=s(Ex);MQe=r(XIr,"CLIPTokenizerFast"),XIr.forEach(t),EQe=r(h8," (CLIP model)"),h8.forEach(t),yQe=i(y),os=n(y,"LI",{});var u8=s(os);_J=n(u8,"STRONG",{});var VIr=s(_J);wQe=r(VIr,"convbert"),VIr.forEach(t),AQe=r(u8," \u2014 "),yx=n(u8,"A",{href:!0});var zIr=s(yx);LQe=r(zIr,"ConvBertTokenizer"),zIr.forEach(t),BQe=r(u8," or "),wx=n(u8,"A",{href:!0});var WIr=s(wx);xQe=r(WIr,"ConvBertTokenizerFast"),WIr.forEach(t),kQe=r(u8," (ConvBERT model)"),u8.forEach(t),RQe=i(y),rs=n(y,"LI",{});var p8=s(rs);bJ=n(p8,"STRONG",{});var QIr=s(bJ);SQe=r(QIr,"cpm"),QIr.forEach(t),PQe=r(p8," \u2014 "),Ax=n(p8,"A",{href:!0});var HIr=s(Ax);$Qe=r(HIr,"CpmTokenizer"),HIr.forEach(t),IQe=r(p8," or "),vJ=n(p8,"CODE",{});var UIr=s(vJ);jQe=r(UIr,"CpmTokenizerFast"),UIr.forEach(t),NQe=r(p8," (CPM model)"),p8.forEach(t),DQe=i(y),Og=n(y,"LI",{});var U4e=s(Og);TJ=n(U4e,"STRONG",{});var JIr=s(TJ);qQe=r(JIr,"ctrl"),JIr.forEach(t),GQe=r(U4e," \u2014 "),Lx=n(U4e,"A",{href:!0});var YIr=s(Lx);OQe=r(YIr,"CTRLTokenizer"),YIr.forEach(t),XQe=r(U4e," (CTRL model)"),U4e.forEach(t),VQe=i(y),ts=n(y,"LI",{});var _8=s(ts);FJ=n(_8,"STRONG",{});var KIr=s(FJ);zQe=r(KIr,"deberta"),KIr.forEach(t),WQe=r(_8," \u2014 "),Bx=n(_8,"A",{href:!0});var ZIr=s(Bx);QQe=r(ZIr,"DebertaTokenizer"),ZIr.forEach(t),HQe=r(_8," or "),xx=n(_8,"A",{href:!0});var ejr=s(xx);UQe=r(ejr,"DebertaTokenizerFast"),ejr.forEach(t),JQe=r(_8," (DeBERTa model)"),_8.forEach(t),YQe=i(y),Xg=n(y,"LI",{});var J4e=s(Xg);CJ=n(J4e,"STRONG",{});var ojr=s(CJ);KQe=r(ojr,"deberta-v2"),ojr.forEach(t),ZQe=r(J4e," \u2014 "),kx=n(J4e,"A",{href:!0});var rjr=s(kx);eHe=r(rjr,"DebertaV2Tokenizer"),rjr.forEach(t),oHe=r(J4e," (DeBERTa-v2 model)"),J4e.forEach(t),rHe=i(y),as=n(y,"LI",{});var b8=s(as);MJ=n(b8,"STRONG",{});var tjr=s(MJ);tHe=r(tjr,"distilbert"),tjr.forEach(t),aHe=r(b8," \u2014 "),Rx=n(b8,"A",{href:!0});var ajr=s(Rx);nHe=r(ajr,"DistilBertTokenizer"),ajr.forEach(t),sHe=r(b8," or "),Sx=n(b8,"A",{href:!0});var njr=s(Sx);lHe=r(njr,"DistilBertTokenizerFast"),njr.forEach(t),iHe=r(b8," (DistilBERT model)"),b8.forEach(t),dHe=i(y),ns=n(y,"LI",{});var v8=s(ns);EJ=n(v8,"STRONG",{});var sjr=s(EJ);cHe=r(sjr,"dpr"),sjr.forEach(t),mHe=r(v8," \u2014 "),Px=n(v8,"A",{href:!0});var ljr=s(Px);fHe=r(ljr,"DPRQuestionEncoderTokenizer"),ljr.forEach(t),gHe=r(v8," or "),$x=n(v8,"A",{href:!0});var ijr=s($x);hHe=r(ijr,"DPRQuestionEncoderTokenizerFast"),ijr.forEach(t),uHe=r(v8," (DPR model)"),v8.forEach(t),pHe=i(y),ss=n(y,"LI",{});var T8=s(ss);yJ=n(T8,"STRONG",{});var djr=s(yJ);_He=r(djr,"electra"),djr.forEach(t),bHe=r(T8," \u2014 "),Ix=n(T8,"A",{href:!0});var cjr=s(Ix);vHe=r(cjr,"ElectraTokenizer"),cjr.forEach(t),THe=r(T8," or "),jx=n(T8,"A",{href:!0});var mjr=s(jx);FHe=r(mjr,"ElectraTokenizerFast"),mjr.forEach(t),CHe=r(T8," (ELECTRA model)"),T8.forEach(t),MHe=i(y),Vg=n(y,"LI",{});var Y4e=s(Vg);wJ=n(Y4e,"STRONG",{});var fjr=s(wJ);EHe=r(fjr,"flaubert"),fjr.forEach(t),yHe=r(Y4e," \u2014 "),Nx=n(Y4e,"A",{href:!0});var gjr=s(Nx);wHe=r(gjr,"FlaubertTokenizer"),gjr.forEach(t),AHe=r(Y4e," (FlauBERT model)"),Y4e.forEach(t),LHe=i(y),ls=n(y,"LI",{});var F8=s(ls);AJ=n(F8,"STRONG",{});var hjr=s(AJ);BHe=r(hjr,"fnet"),hjr.forEach(t),xHe=r(F8," \u2014 "),Dx=n(F8,"A",{href:!0});var ujr=s(Dx);kHe=r(ujr,"FNetTokenizer"),ujr.forEach(t),RHe=r(F8," or "),qx=n(F8,"A",{href:!0});var pjr=s(qx);SHe=r(pjr,"FNetTokenizerFast"),pjr.forEach(t),PHe=r(F8," (FNet model)"),F8.forEach(t),$He=i(y),zg=n(y,"LI",{});var K4e=s(zg);LJ=n(K4e,"STRONG",{});var _jr=s(LJ);IHe=r(_jr,"fsmt"),_jr.forEach(t),jHe=r(K4e," \u2014 "),Gx=n(K4e,"A",{href:!0});var bjr=s(Gx);NHe=r(bjr,"FSMTTokenizer"),bjr.forEach(t),DHe=r(K4e," (FairSeq Machine-Translation model)"),K4e.forEach(t),qHe=i(y),is=n(y,"LI",{});var C8=s(is);BJ=n(C8,"STRONG",{});var vjr=s(BJ);GHe=r(vjr,"funnel"),vjr.forEach(t),OHe=r(C8," \u2014 "),Ox=n(C8,"A",{href:!0});var Tjr=s(Ox);XHe=r(Tjr,"FunnelTokenizer"),Tjr.forEach(t),VHe=r(C8," or "),Xx=n(C8,"A",{href:!0});var Fjr=s(Xx);zHe=r(Fjr,"FunnelTokenizerFast"),Fjr.forEach(t),WHe=r(C8," (Funnel Transformer model)"),C8.forEach(t),QHe=i(y),ds=n(y,"LI",{});var M8=s(ds);xJ=n(M8,"STRONG",{});var Cjr=s(xJ);HHe=r(Cjr,"gpt2"),Cjr.forEach(t),UHe=r(M8," \u2014 "),Vx=n(M8,"A",{href:!0});var Mjr=s(Vx);JHe=r(Mjr,"GPT2Tokenizer"),Mjr.forEach(t),YHe=r(M8," or "),zx=n(M8,"A",{href:!0});var Ejr=s(zx);KHe=r(Ejr,"GPT2TokenizerFast"),Ejr.forEach(t),ZHe=r(M8," (OpenAI GPT-2 model)"),M8.forEach(t),eUe=i(y),cs=n(y,"LI",{});var E8=s(cs);kJ=n(E8,"STRONG",{});var yjr=s(kJ);oUe=r(yjr,"gpt_neo"),yjr.forEach(t),rUe=r(E8," \u2014 "),Wx=n(E8,"A",{href:!0});var wjr=s(Wx);tUe=r(wjr,"GPT2Tokenizer"),wjr.forEach(t),aUe=r(E8," or "),Qx=n(E8,"A",{href:!0});var Ajr=s(Qx);nUe=r(Ajr,"GPT2TokenizerFast"),Ajr.forEach(t),sUe=r(E8," (GPT Neo model)"),E8.forEach(t),lUe=i(y),ms=n(y,"LI",{});var y8=s(ms);RJ=n(y8,"STRONG",{});var Ljr=s(RJ);iUe=r(Ljr,"herbert"),Ljr.forEach(t),dUe=r(y8," \u2014 "),Hx=n(y8,"A",{href:!0});var Bjr=s(Hx);cUe=r(Bjr,"HerbertTokenizer"),Bjr.forEach(t),mUe=r(y8," or "),Ux=n(y8,"A",{href:!0});var xjr=s(Ux);fUe=r(xjr,"HerbertTokenizerFast"),xjr.forEach(t),gUe=r(y8," (HerBERT model)"),y8.forEach(t),hUe=i(y),Wg=n(y,"LI",{});var Z4e=s(Wg);SJ=n(Z4e,"STRONG",{});var kjr=s(SJ);uUe=r(kjr,"hubert"),kjr.forEach(t),pUe=r(Z4e," \u2014 "),Jx=n(Z4e,"A",{href:!0});var Rjr=s(Jx);_Ue=r(Rjr,"Wav2Vec2CTCTokenizer"),Rjr.forEach(t),bUe=r(Z4e," (Hubert model)"),Z4e.forEach(t),vUe=i(y),fs=n(y,"LI",{});var w8=s(fs);PJ=n(w8,"STRONG",{});var Sjr=s(PJ);TUe=r(Sjr,"ibert"),Sjr.forEach(t),FUe=r(w8," \u2014 "),Yx=n(w8,"A",{href:!0});var Pjr=s(Yx);CUe=r(Pjr,"RobertaTokenizer"),Pjr.forEach(t),MUe=r(w8," or "),Kx=n(w8,"A",{href:!0});var $jr=s(Kx);EUe=r($jr,"RobertaTokenizerFast"),$jr.forEach(t),yUe=r(w8," (I-BERT model)"),w8.forEach(t),wUe=i(y),gs=n(y,"LI",{});var A8=s(gs);$J=n(A8,"STRONG",{});var Ijr=s($J);AUe=r(Ijr,"layoutlm"),Ijr.forEach(t),LUe=r(A8," \u2014 "),Zx=n(A8,"A",{href:!0});var jjr=s(Zx);BUe=r(jjr,"LayoutLMTokenizer"),jjr.forEach(t),xUe=r(A8," or "),ek=n(A8,"A",{href:!0});var Njr=s(ek);kUe=r(Njr,"LayoutLMTokenizerFast"),Njr.forEach(t),RUe=r(A8," (LayoutLM model)"),A8.forEach(t),SUe=i(y),hs=n(y,"LI",{});var L8=s(hs);IJ=n(L8,"STRONG",{});var Djr=s(IJ);PUe=r(Djr,"layoutlmv2"),Djr.forEach(t),$Ue=r(L8," \u2014 "),ok=n(L8,"A",{href:!0});var qjr=s(ok);IUe=r(qjr,"LayoutLMv2Tokenizer"),qjr.forEach(t),jUe=r(L8," or "),rk=n(L8,"A",{href:!0});var Gjr=s(rk);NUe=r(Gjr,"LayoutLMv2TokenizerFast"),Gjr.forEach(t),DUe=r(L8," (LayoutLMv2 model)"),L8.forEach(t),qUe=i(y),us=n(y,"LI",{});var B8=s(us);jJ=n(B8,"STRONG",{});var Ojr=s(jJ);GUe=r(Ojr,"layoutxlm"),Ojr.forEach(t),OUe=r(B8," \u2014 "),tk=n(B8,"A",{href:!0});var Xjr=s(tk);XUe=r(Xjr,"LayoutXLMTokenizer"),Xjr.forEach(t),VUe=r(B8," or "),ak=n(B8,"A",{href:!0});var Vjr=s(ak);zUe=r(Vjr,"LayoutXLMTokenizerFast"),Vjr.forEach(t),WUe=r(B8," (LayoutXLM model)"),B8.forEach(t),QUe=i(y),ps=n(y,"LI",{});var x8=s(ps);NJ=n(x8,"STRONG",{});var zjr=s(NJ);HUe=r(zjr,"led"),zjr.forEach(t),UUe=r(x8," \u2014 "),nk=n(x8,"A",{href:!0});var Wjr=s(nk);JUe=r(Wjr,"LEDTokenizer"),Wjr.forEach(t),YUe=r(x8," or "),sk=n(x8,"A",{href:!0});var Qjr=s(sk);KUe=r(Qjr,"LEDTokenizerFast"),Qjr.forEach(t),ZUe=r(x8," (LED model)"),x8.forEach(t),eJe=i(y),_s=n(y,"LI",{});var k8=s(_s);DJ=n(k8,"STRONG",{});var Hjr=s(DJ);oJe=r(Hjr,"longformer"),Hjr.forEach(t),rJe=r(k8," \u2014 "),lk=n(k8,"A",{href:!0});var Ujr=s(lk);tJe=r(Ujr,"LongformerTokenizer"),Ujr.forEach(t),aJe=r(k8," or "),ik=n(k8,"A",{href:!0});var Jjr=s(ik);nJe=r(Jjr,"LongformerTokenizerFast"),Jjr.forEach(t),sJe=r(k8," (Longformer model)"),k8.forEach(t),lJe=i(y),Qg=n(y,"LI",{});var eEe=s(Qg);qJ=n(eEe,"STRONG",{});var Yjr=s(qJ);iJe=r(Yjr,"luke"),Yjr.forEach(t),dJe=r(eEe," \u2014 "),dk=n(eEe,"A",{href:!0});var Kjr=s(dk);cJe=r(Kjr,"LukeTokenizer"),Kjr.forEach(t),mJe=r(eEe," (LUKE model)"),eEe.forEach(t),fJe=i(y),bs=n(y,"LI",{});var R8=s(bs);GJ=n(R8,"STRONG",{});var Zjr=s(GJ);gJe=r(Zjr,"lxmert"),Zjr.forEach(t),hJe=r(R8," \u2014 "),ck=n(R8,"A",{href:!0});var eNr=s(ck);uJe=r(eNr,"LxmertTokenizer"),eNr.forEach(t),pJe=r(R8," or "),mk=n(R8,"A",{href:!0});var oNr=s(mk);_Je=r(oNr,"LxmertTokenizerFast"),oNr.forEach(t),bJe=r(R8," (LXMERT model)"),R8.forEach(t),vJe=i(y),Hg=n(y,"LI",{});var oEe=s(Hg);OJ=n(oEe,"STRONG",{});var rNr=s(OJ);TJe=r(rNr,"m2m_100"),rNr.forEach(t),FJe=r(oEe," \u2014 "),fk=n(oEe,"A",{href:!0});var tNr=s(fk);CJe=r(tNr,"M2M100Tokenizer"),tNr.forEach(t),MJe=r(oEe," (M2M100 model)"),oEe.forEach(t),EJe=i(y),Ug=n(y,"LI",{});var rEe=s(Ug);XJ=n(rEe,"STRONG",{});var aNr=s(XJ);yJe=r(aNr,"marian"),aNr.forEach(t),wJe=r(rEe," \u2014 "),gk=n(rEe,"A",{href:!0});var nNr=s(gk);AJe=r(nNr,"MarianTokenizer"),nNr.forEach(t),LJe=r(rEe," (Marian model)"),rEe.forEach(t),BJe=i(y),vs=n(y,"LI",{});var S8=s(vs);VJ=n(S8,"STRONG",{});var sNr=s(VJ);xJe=r(sNr,"mbart"),sNr.forEach(t),kJe=r(S8," \u2014 "),hk=n(S8,"A",{href:!0});var lNr=s(hk);RJe=r(lNr,"MBartTokenizer"),lNr.forEach(t),SJe=r(S8," or "),uk=n(S8,"A",{href:!0});var iNr=s(uk);PJe=r(iNr,"MBartTokenizerFast"),iNr.forEach(t),$Je=r(S8," (mBART model)"),S8.forEach(t),IJe=i(y),Ts=n(y,"LI",{});var P8=s(Ts);zJ=n(P8,"STRONG",{});var dNr=s(zJ);jJe=r(dNr,"mbart50"),dNr.forEach(t),NJe=r(P8," \u2014 "),pk=n(P8,"A",{href:!0});var cNr=s(pk);DJe=r(cNr,"MBart50Tokenizer"),cNr.forEach(t),qJe=r(P8," or "),_k=n(P8,"A",{href:!0});var mNr=s(_k);GJe=r(mNr,"MBart50TokenizerFast"),mNr.forEach(t),OJe=r(P8," (mBART-50 model)"),P8.forEach(t),XJe=i(y),Jg=n(y,"LI",{});var tEe=s(Jg);WJ=n(tEe,"STRONG",{});var fNr=s(WJ);VJe=r(fNr,"mluke"),fNr.forEach(t),zJe=r(tEe," \u2014 "),bk=n(tEe,"A",{href:!0});var gNr=s(bk);WJe=r(gNr,"MLukeTokenizer"),gNr.forEach(t),QJe=r(tEe," (mLUKE model)"),tEe.forEach(t),HJe=i(y),Fs=n(y,"LI",{});var $8=s(Fs);QJ=n($8,"STRONG",{});var hNr=s(QJ);UJe=r(hNr,"mobilebert"),hNr.forEach(t),JJe=r($8," \u2014 "),vk=n($8,"A",{href:!0});var uNr=s(vk);YJe=r(uNr,"MobileBertTokenizer"),uNr.forEach(t),KJe=r($8," or "),Tk=n($8,"A",{href:!0});var pNr=s(Tk);ZJe=r(pNr,"MobileBertTokenizerFast"),pNr.forEach(t),eYe=r($8," (MobileBERT model)"),$8.forEach(t),oYe=i(y),Cs=n(y,"LI",{});var I8=s(Cs);HJ=n(I8,"STRONG",{});var _Nr=s(HJ);rYe=r(_Nr,"mpnet"),_Nr.forEach(t),tYe=r(I8," \u2014 "),Fk=n(I8,"A",{href:!0});var bNr=s(Fk);aYe=r(bNr,"MPNetTokenizer"),bNr.forEach(t),nYe=r(I8," or "),Ck=n(I8,"A",{href:!0});var vNr=s(Ck);sYe=r(vNr,"MPNetTokenizerFast"),vNr.forEach(t),lYe=r(I8," (MPNet model)"),I8.forEach(t),iYe=i(y),Ms=n(y,"LI",{});var j8=s(Ms);UJ=n(j8,"STRONG",{});var TNr=s(UJ);dYe=r(TNr,"mt5"),TNr.forEach(t),cYe=r(j8," \u2014 "),Mk=n(j8,"A",{href:!0});var FNr=s(Mk);mYe=r(FNr,"MT5Tokenizer"),FNr.forEach(t),fYe=r(j8," or "),Ek=n(j8,"A",{href:!0});var CNr=s(Ek);gYe=r(CNr,"MT5TokenizerFast"),CNr.forEach(t),hYe=r(j8," (mT5 model)"),j8.forEach(t),uYe=i(y),Es=n(y,"LI",{});var N8=s(Es);JJ=n(N8,"STRONG",{});var MNr=s(JJ);pYe=r(MNr,"openai-gpt"),MNr.forEach(t),_Ye=r(N8," \u2014 "),yk=n(N8,"A",{href:!0});var ENr=s(yk);bYe=r(ENr,"OpenAIGPTTokenizer"),ENr.forEach(t),vYe=r(N8," or "),wk=n(N8,"A",{href:!0});var yNr=s(wk);TYe=r(yNr,"OpenAIGPTTokenizerFast"),yNr.forEach(t),FYe=r(N8," (OpenAI GPT model)"),N8.forEach(t),CYe=i(y),ys=n(y,"LI",{});var D8=s(ys);YJ=n(D8,"STRONG",{});var wNr=s(YJ);MYe=r(wNr,"pegasus"),wNr.forEach(t),EYe=r(D8," \u2014 "),Ak=n(D8,"A",{href:!0});var ANr=s(Ak);yYe=r(ANr,"PegasusTokenizer"),ANr.forEach(t),wYe=r(D8," or "),Lk=n(D8,"A",{href:!0});var LNr=s(Lk);AYe=r(LNr,"PegasusTokenizerFast"),LNr.forEach(t),LYe=r(D8," (Pegasus model)"),D8.forEach(t),BYe=i(y),Yg=n(y,"LI",{});var aEe=s(Yg);KJ=n(aEe,"STRONG",{});var BNr=s(KJ);xYe=r(BNr,"perceiver"),BNr.forEach(t),kYe=r(aEe," \u2014 "),Bk=n(aEe,"A",{href:!0});var xNr=s(Bk);RYe=r(xNr,"PerceiverTokenizer"),xNr.forEach(t),SYe=r(aEe," (Perceiver model)"),aEe.forEach(t),PYe=i(y),Kg=n(y,"LI",{});var nEe=s(Kg);ZJ=n(nEe,"STRONG",{});var kNr=s(ZJ);$Ye=r(kNr,"phobert"),kNr.forEach(t),IYe=r(nEe," \u2014 "),xk=n(nEe,"A",{href:!0});var RNr=s(xk);jYe=r(RNr,"PhobertTokenizer"),RNr.forEach(t),NYe=r(nEe," (PhoBERT model)"),nEe.forEach(t),DYe=i(y),Zg=n(y,"LI",{});var sEe=s(Zg);eY=n(sEe,"STRONG",{});var SNr=s(eY);qYe=r(SNr,"plbart"),SNr.forEach(t),GYe=r(sEe," \u2014 "),kk=n(sEe,"A",{href:!0});var PNr=s(kk);OYe=r(PNr,"PLBartTokenizer"),PNr.forEach(t),XYe=r(sEe," (PLBart model)"),sEe.forEach(t),VYe=i(y),eh=n(y,"LI",{});var lEe=s(eh);oY=n(lEe,"STRONG",{});var $Nr=s(oY);zYe=r($Nr,"prophetnet"),$Nr.forEach(t),WYe=r(lEe," \u2014 "),Rk=n(lEe,"A",{href:!0});var INr=s(Rk);QYe=r(INr,"ProphetNetTokenizer"),INr.forEach(t),HYe=r(lEe," (ProphetNet model)"),lEe.forEach(t),UYe=i(y),ws=n(y,"LI",{});var q8=s(ws);rY=n(q8,"STRONG",{});var jNr=s(rY);JYe=r(jNr,"qdqbert"),jNr.forEach(t),YYe=r(q8," \u2014 "),Sk=n(q8,"A",{href:!0});var NNr=s(Sk);KYe=r(NNr,"BertTokenizer"),NNr.forEach(t),ZYe=r(q8," or "),Pk=n(q8,"A",{href:!0});var DNr=s(Pk);eKe=r(DNr,"BertTokenizerFast"),DNr.forEach(t),oKe=r(q8," (QDQBert model)"),q8.forEach(t),rKe=i(y),oh=n(y,"LI",{});var iEe=s(oh);tY=n(iEe,"STRONG",{});var qNr=s(tY);tKe=r(qNr,"rag"),qNr.forEach(t),aKe=r(iEe," \u2014 "),$k=n(iEe,"A",{href:!0});var GNr=s($k);nKe=r(GNr,"RagTokenizer"),GNr.forEach(t),sKe=r(iEe," (RAG model)"),iEe.forEach(t),lKe=i(y),As=n(y,"LI",{});var G8=s(As);aY=n(G8,"STRONG",{});var ONr=s(aY);iKe=r(ONr,"realm"),ONr.forEach(t),dKe=r(G8," \u2014 "),Ik=n(G8,"A",{href:!0});var XNr=s(Ik);cKe=r(XNr,"RealmTokenizer"),XNr.forEach(t),mKe=r(G8," or "),jk=n(G8,"A",{href:!0});var VNr=s(jk);fKe=r(VNr,"RealmTokenizerFast"),VNr.forEach(t),gKe=r(G8," (Realm model)"),G8.forEach(t),hKe=i(y),Ls=n(y,"LI",{});var O8=s(Ls);nY=n(O8,"STRONG",{});var zNr=s(nY);uKe=r(zNr,"reformer"),zNr.forEach(t),pKe=r(O8," \u2014 "),Nk=n(O8,"A",{href:!0});var WNr=s(Nk);_Ke=r(WNr,"ReformerTokenizer"),WNr.forEach(t),bKe=r(O8," or "),Dk=n(O8,"A",{href:!0});var QNr=s(Dk);vKe=r(QNr,"ReformerTokenizerFast"),QNr.forEach(t),TKe=r(O8," (Reformer model)"),O8.forEach(t),FKe=i(y),Bs=n(y,"LI",{});var X8=s(Bs);sY=n(X8,"STRONG",{});var HNr=s(sY);CKe=r(HNr,"rembert"),HNr.forEach(t),MKe=r(X8," \u2014 "),qk=n(X8,"A",{href:!0});var UNr=s(qk);EKe=r(UNr,"RemBertTokenizer"),UNr.forEach(t),yKe=r(X8," or "),Gk=n(X8,"A",{href:!0});var JNr=s(Gk);wKe=r(JNr,"RemBertTokenizerFast"),JNr.forEach(t),AKe=r(X8," (RemBERT model)"),X8.forEach(t),LKe=i(y),xs=n(y,"LI",{});var V8=s(xs);lY=n(V8,"STRONG",{});var YNr=s(lY);BKe=r(YNr,"retribert"),YNr.forEach(t),xKe=r(V8," \u2014 "),Ok=n(V8,"A",{href:!0});var KNr=s(Ok);kKe=r(KNr,"RetriBertTokenizer"),KNr.forEach(t),RKe=r(V8," or "),Xk=n(V8,"A",{href:!0});var ZNr=s(Xk);SKe=r(ZNr,"RetriBertTokenizerFast"),ZNr.forEach(t),PKe=r(V8," (RetriBERT model)"),V8.forEach(t),$Ke=i(y),ks=n(y,"LI",{});var z8=s(ks);iY=n(z8,"STRONG",{});var eDr=s(iY);IKe=r(eDr,"roberta"),eDr.forEach(t),jKe=r(z8," \u2014 "),Vk=n(z8,"A",{href:!0});var oDr=s(Vk);NKe=r(oDr,"RobertaTokenizer"),oDr.forEach(t),DKe=r(z8," or "),zk=n(z8,"A",{href:!0});var rDr=s(zk);qKe=r(rDr,"RobertaTokenizerFast"),rDr.forEach(t),GKe=r(z8," (RoBERTa model)"),z8.forEach(t),OKe=i(y),Rs=n(y,"LI",{});var W8=s(Rs);dY=n(W8,"STRONG",{});var tDr=s(dY);XKe=r(tDr,"roformer"),tDr.forEach(t),VKe=r(W8," \u2014 "),Wk=n(W8,"A",{href:!0});var aDr=s(Wk);zKe=r(aDr,"RoFormerTokenizer"),aDr.forEach(t),WKe=r(W8," or "),Qk=n(W8,"A",{href:!0});var nDr=s(Qk);QKe=r(nDr,"RoFormerTokenizerFast"),nDr.forEach(t),HKe=r(W8," (RoFormer model)"),W8.forEach(t),UKe=i(y),rh=n(y,"LI",{});var dEe=s(rh);cY=n(dEe,"STRONG",{});var sDr=s(cY);JKe=r(sDr,"speech_to_text"),sDr.forEach(t),YKe=r(dEe," \u2014 "),Hk=n(dEe,"A",{href:!0});var lDr=s(Hk);KKe=r(lDr,"Speech2TextTokenizer"),lDr.forEach(t),ZKe=r(dEe," (Speech2Text model)"),dEe.forEach(t),eZe=i(y),th=n(y,"LI",{});var cEe=s(th);mY=n(cEe,"STRONG",{});var iDr=s(mY);oZe=r(iDr,"speech_to_text_2"),iDr.forEach(t),rZe=r(cEe," \u2014 "),Uk=n(cEe,"A",{href:!0});var dDr=s(Uk);tZe=r(dDr,"Speech2Text2Tokenizer"),dDr.forEach(t),aZe=r(cEe," (Speech2Text2 model)"),cEe.forEach(t),nZe=i(y),Ss=n(y,"LI",{});var Q8=s(Ss);fY=n(Q8,"STRONG",{});var cDr=s(fY);sZe=r(cDr,"splinter"),cDr.forEach(t),lZe=r(Q8," \u2014 "),Jk=n(Q8,"A",{href:!0});var mDr=s(Jk);iZe=r(mDr,"SplinterTokenizer"),mDr.forEach(t),dZe=r(Q8," or "),Yk=n(Q8,"A",{href:!0});var fDr=s(Yk);cZe=r(fDr,"SplinterTokenizerFast"),fDr.forEach(t),mZe=r(Q8," (Splinter model)"),Q8.forEach(t),fZe=i(y),Ps=n(y,"LI",{});var H8=s(Ps);gY=n(H8,"STRONG",{});var gDr=s(gY);gZe=r(gDr,"squeezebert"),gDr.forEach(t),hZe=r(H8," \u2014 "),Kk=n(H8,"A",{href:!0});var hDr=s(Kk);uZe=r(hDr,"SqueezeBertTokenizer"),hDr.forEach(t),pZe=r(H8," or "),Zk=n(H8,"A",{href:!0});var uDr=s(Zk);_Ze=r(uDr,"SqueezeBertTokenizerFast"),uDr.forEach(t),bZe=r(H8," (SqueezeBERT model)"),H8.forEach(t),vZe=i(y),$s=n(y,"LI",{});var U8=s($s);hY=n(U8,"STRONG",{});var pDr=s(hY);TZe=r(pDr,"t5"),pDr.forEach(t),FZe=r(U8," \u2014 "),eR=n(U8,"A",{href:!0});var _Dr=s(eR);CZe=r(_Dr,"T5Tokenizer"),_Dr.forEach(t),MZe=r(U8," or "),oR=n(U8,"A",{href:!0});var bDr=s(oR);EZe=r(bDr,"T5TokenizerFast"),bDr.forEach(t),yZe=r(U8," (T5 model)"),U8.forEach(t),wZe=i(y),ah=n(y,"LI",{});var mEe=s(ah);uY=n(mEe,"STRONG",{});var vDr=s(uY);AZe=r(vDr,"tapas"),vDr.forEach(t),LZe=r(mEe," \u2014 "),rR=n(mEe,"A",{href:!0});var TDr=s(rR);BZe=r(TDr,"TapasTokenizer"),TDr.forEach(t),xZe=r(mEe," (TAPAS model)"),mEe.forEach(t),kZe=i(y),nh=n(y,"LI",{});var fEe=s(nh);pY=n(fEe,"STRONG",{});var FDr=s(pY);RZe=r(FDr,"transfo-xl"),FDr.forEach(t),SZe=r(fEe," \u2014 "),tR=n(fEe,"A",{href:!0});var CDr=s(tR);PZe=r(CDr,"TransfoXLTokenizer"),CDr.forEach(t),$Ze=r(fEe," (Transformer-XL model)"),fEe.forEach(t),IZe=i(y),sh=n(y,"LI",{});var gEe=s(sh);_Y=n(gEe,"STRONG",{});var MDr=s(_Y);jZe=r(MDr,"wav2vec2"),MDr.forEach(t),NZe=r(gEe," \u2014 "),aR=n(gEe,"A",{href:!0});var EDr=s(aR);DZe=r(EDr,"Wav2Vec2CTCTokenizer"),EDr.forEach(t),qZe=r(gEe," (Wav2Vec2 model)"),gEe.forEach(t),GZe=i(y),lh=n(y,"LI",{});var hEe=s(lh);bY=n(hEe,"STRONG",{});var yDr=s(bY);OZe=r(yDr,"wav2vec2_phoneme"),yDr.forEach(t),XZe=r(hEe," \u2014 "),nR=n(hEe,"A",{href:!0});var wDr=s(nR);VZe=r(wDr,"Wav2Vec2PhonemeCTCTokenizer"),wDr.forEach(t),zZe=r(hEe," (Wav2Vec2Phoneme model)"),hEe.forEach(t),WZe=i(y),Is=n(y,"LI",{});var J8=s(Is);vY=n(J8,"STRONG",{});var ADr=s(vY);QZe=r(ADr,"xglm"),ADr.forEach(t),HZe=r(J8," \u2014 "),sR=n(J8,"A",{href:!0});var LDr=s(sR);UZe=r(LDr,"XGLMTokenizer"),LDr.forEach(t),JZe=r(J8," or "),lR=n(J8,"A",{href:!0});var BDr=s(lR);YZe=r(BDr,"XGLMTokenizerFast"),BDr.forEach(t),KZe=r(J8," (XGLM model)"),J8.forEach(t),ZZe=i(y),ih=n(y,"LI",{});var uEe=s(ih);TY=n(uEe,"STRONG",{});var xDr=s(TY);eeo=r(xDr,"xlm"),xDr.forEach(t),oeo=r(uEe," \u2014 "),iR=n(uEe,"A",{href:!0});var kDr=s(iR);reo=r(kDr,"XLMTokenizer"),kDr.forEach(t),teo=r(uEe," (XLM model)"),uEe.forEach(t),aeo=i(y),dh=n(y,"LI",{});var pEe=s(dh);FY=n(pEe,"STRONG",{});var RDr=s(FY);neo=r(RDr,"xlm-prophetnet"),RDr.forEach(t),seo=r(pEe," \u2014 "),dR=n(pEe,"A",{href:!0});var SDr=s(dR);leo=r(SDr,"XLMProphetNetTokenizer"),SDr.forEach(t),ieo=r(pEe," (XLMProphetNet model)"),pEe.forEach(t),deo=i(y),js=n(y,"LI",{});var Y8=s(js);CY=n(Y8,"STRONG",{});var PDr=s(CY);ceo=r(PDr,"xlm-roberta"),PDr.forEach(t),meo=r(Y8," \u2014 "),cR=n(Y8,"A",{href:!0});var $Dr=s(cR);feo=r($Dr,"XLMRobertaTokenizer"),$Dr.forEach(t),geo=r(Y8," or "),mR=n(Y8,"A",{href:!0});var IDr=s(mR);heo=r(IDr,"XLMRobertaTokenizerFast"),IDr.forEach(t),ueo=r(Y8," (XLM-RoBERTa model)"),Y8.forEach(t),peo=i(y),Ns=n(y,"LI",{});var K8=s(Ns);MY=n(K8,"STRONG",{});var jDr=s(MY);_eo=r(jDr,"xlnet"),jDr.forEach(t),beo=r(K8," \u2014 "),fR=n(K8,"A",{href:!0});var NDr=s(fR);veo=r(NDr,"XLNetTokenizer"),NDr.forEach(t),Teo=r(K8," or "),gR=n(K8,"A",{href:!0});var DDr=s(gR);Feo=r(DDr,"XLNetTokenizerFast"),DDr.forEach(t),Ceo=r(K8," (XLNet model)"),K8.forEach(t),y.forEach(t),Meo=i(ha),EY=n(ha,"P",{});var qDr=s(EY);Eeo=r(qDr,"Examples:"),qDr.forEach(t),yeo=i(ha),f(Ay.$$.fragment,ha),ha.forEach(t),weo=i(Xs),ch=n(Xs,"DIV",{class:!0});var BSe=s(ch);f(Ly.$$.fragment,BSe),Aeo=i(BSe),yY=n(BSe,"P",{});var GDr=s(yY);Leo=r(GDr,"Register a new tokenizer in this mapping."),GDr.forEach(t),BSe.forEach(t),Xs.forEach(t),yke=i(c),Qi=n(c,"H2",{class:!0});var xSe=s(Qi);mh=n(xSe,"A",{id:!0,class:!0,href:!0});var ODr=s(mh);wY=n(ODr,"SPAN",{});var XDr=s(wY);f(By.$$.fragment,XDr),XDr.forEach(t),ODr.forEach(t),Beo=i(xSe),AY=n(xSe,"SPAN",{});var VDr=s(AY);xeo=r(VDr,"AutoFeatureExtractor"),VDr.forEach(t),xSe.forEach(t),wke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);f(xy.$$.fragment,Vs),keo=i(Vs),ky=n(Vs,"P",{});var kSe=s(ky);Reo=r(kSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),hR=n(kSe,"A",{href:!0});var zDr=s(hR);Seo=r(zDr,"AutoFeatureExtractor.from_pretrained()"),zDr.forEach(t),Peo=r(kSe," class method."),kSe.forEach(t),$eo=i(Vs),Ry=n(Vs,"P",{});var RSe=s(Ry);Ieo=r(RSe,"This class cannot be instantiated directly using "),LY=n(RSe,"CODE",{});var WDr=s(LY);jeo=r(WDr,"__init__()"),WDr.forEach(t),Neo=r(RSe," (throws an error)."),RSe.forEach(t),Deo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Nt=s($e);f(Sy.$$.fragment,Nt),qeo=i(Nt),BY=n(Nt,"P",{});var QDr=s(BY);Geo=r(QDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),QDr.forEach(t),Oeo=i(Nt),Xa=n(Nt,"P",{});var f5=s(Xa);Xeo=r(f5,"The feature extractor class to instantiate is selected based on the "),xY=n(f5,"CODE",{});var HDr=s(xY);Veo=r(HDr,"model_type"),HDr.forEach(t),zeo=r(f5,` property of the config object
(either passed as an argument or loaded from `),kY=n(f5,"CODE",{});var UDr=s(kY);Weo=r(UDr,"pretrained_model_name_or_path"),UDr.forEach(t),Qeo=r(f5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),RY=n(f5,"CODE",{});var JDr=s(RY);Heo=r(JDr,"pretrained_model_name_or_path"),JDr.forEach(t),Ueo=r(f5,":"),f5.forEach(t),Jeo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);fh=n(ne,"LI",{});var _Ee=s(fh);SY=n(_Ee,"STRONG",{});var YDr=s(SY);Yeo=r(YDr,"beit"),YDr.forEach(t),Keo=r(_Ee," \u2014 "),uR=n(_Ee,"A",{href:!0});var KDr=s(uR);Zeo=r(KDr,"BeitFeatureExtractor"),KDr.forEach(t),eoo=r(_Ee," (BEiT model)"),_Ee.forEach(t),ooo=i(ne),gh=n(ne,"LI",{});var bEe=s(gh);PY=n(bEe,"STRONG",{});var ZDr=s(PY);roo=r(ZDr,"clip"),ZDr.forEach(t),too=r(bEe," \u2014 "),pR=n(bEe,"A",{href:!0});var eqr=s(pR);aoo=r(eqr,"CLIPFeatureExtractor"),eqr.forEach(t),noo=r(bEe," (CLIP model)"),bEe.forEach(t),soo=i(ne),hh=n(ne,"LI",{});var vEe=s(hh);$Y=n(vEe,"STRONG",{});var oqr=s($Y);loo=r(oqr,"convnext"),oqr.forEach(t),ioo=r(vEe," \u2014 "),_R=n(vEe,"A",{href:!0});var rqr=s(_R);doo=r(rqr,"ConvNextFeatureExtractor"),rqr.forEach(t),coo=r(vEe," (ConvNext model)"),vEe.forEach(t),moo=i(ne),uh=n(ne,"LI",{});var TEe=s(uh);IY=n(TEe,"STRONG",{});var tqr=s(IY);foo=r(tqr,"deit"),tqr.forEach(t),goo=r(TEe," \u2014 "),bR=n(TEe,"A",{href:!0});var aqr=s(bR);hoo=r(aqr,"DeiTFeatureExtractor"),aqr.forEach(t),uoo=r(TEe," (DeiT model)"),TEe.forEach(t),poo=i(ne),ph=n(ne,"LI",{});var FEe=s(ph);jY=n(FEe,"STRONG",{});var nqr=s(jY);_oo=r(nqr,"detr"),nqr.forEach(t),boo=r(FEe," \u2014 "),vR=n(FEe,"A",{href:!0});var sqr=s(vR);voo=r(sqr,"DetrFeatureExtractor"),sqr.forEach(t),Too=r(FEe," (DETR model)"),FEe.forEach(t),Foo=i(ne),_h=n(ne,"LI",{});var CEe=s(_h);NY=n(CEe,"STRONG",{});var lqr=s(NY);Coo=r(lqr,"hubert"),lqr.forEach(t),Moo=r(CEe," \u2014 "),TR=n(CEe,"A",{href:!0});var iqr=s(TR);Eoo=r(iqr,"Wav2Vec2FeatureExtractor"),iqr.forEach(t),yoo=r(CEe," (Hubert model)"),CEe.forEach(t),woo=i(ne),bh=n(ne,"LI",{});var MEe=s(bh);DY=n(MEe,"STRONG",{});var dqr=s(DY);Aoo=r(dqr,"layoutlmv2"),dqr.forEach(t),Loo=r(MEe," \u2014 "),FR=n(MEe,"A",{href:!0});var cqr=s(FR);Boo=r(cqr,"LayoutLMv2FeatureExtractor"),cqr.forEach(t),xoo=r(MEe," (LayoutLMv2 model)"),MEe.forEach(t),koo=i(ne),vh=n(ne,"LI",{});var EEe=s(vh);qY=n(EEe,"STRONG",{});var mqr=s(qY);Roo=r(mqr,"maskformer"),mqr.forEach(t),Soo=r(EEe," \u2014 "),CR=n(EEe,"A",{href:!0});var fqr=s(CR);Poo=r(fqr,"MaskFormerFeatureExtractor"),fqr.forEach(t),$oo=r(EEe," (MaskFormer model)"),EEe.forEach(t),Ioo=i(ne),Th=n(ne,"LI",{});var yEe=s(Th);GY=n(yEe,"STRONG",{});var gqr=s(GY);joo=r(gqr,"perceiver"),gqr.forEach(t),Noo=r(yEe," \u2014 "),MR=n(yEe,"A",{href:!0});var hqr=s(MR);Doo=r(hqr,"PerceiverFeatureExtractor"),hqr.forEach(t),qoo=r(yEe," (Perceiver model)"),yEe.forEach(t),Goo=i(ne),Fh=n(ne,"LI",{});var wEe=s(Fh);OY=n(wEe,"STRONG",{});var uqr=s(OY);Ooo=r(uqr,"poolformer"),uqr.forEach(t),Xoo=r(wEe," \u2014 "),ER=n(wEe,"A",{href:!0});var pqr=s(ER);Voo=r(pqr,"PoolFormerFeatureExtractor"),pqr.forEach(t),zoo=r(wEe," (PoolFormer model)"),wEe.forEach(t),Woo=i(ne),Ch=n(ne,"LI",{});var AEe=s(Ch);XY=n(AEe,"STRONG",{});var _qr=s(XY);Qoo=r(_qr,"resnet"),_qr.forEach(t),Hoo=r(AEe," \u2014 "),yR=n(AEe,"A",{href:!0});var bqr=s(yR);Uoo=r(bqr,"ConvNextFeatureExtractor"),bqr.forEach(t),Joo=r(AEe," (ResNet model)"),AEe.forEach(t),Yoo=i(ne),Mh=n(ne,"LI",{});var LEe=s(Mh);VY=n(LEe,"STRONG",{});var vqr=s(VY);Koo=r(vqr,"segformer"),vqr.forEach(t),Zoo=r(LEe," \u2014 "),wR=n(LEe,"A",{href:!0});var Tqr=s(wR);ero=r(Tqr,"SegformerFeatureExtractor"),Tqr.forEach(t),oro=r(LEe," (SegFormer model)"),LEe.forEach(t),rro=i(ne),Eh=n(ne,"LI",{});var BEe=s(Eh);zY=n(BEe,"STRONG",{});var Fqr=s(zY);tro=r(Fqr,"speech_to_text"),Fqr.forEach(t),aro=r(BEe," \u2014 "),AR=n(BEe,"A",{href:!0});var Cqr=s(AR);nro=r(Cqr,"Speech2TextFeatureExtractor"),Cqr.forEach(t),sro=r(BEe," (Speech2Text model)"),BEe.forEach(t),lro=i(ne),yh=n(ne,"LI",{});var xEe=s(yh);WY=n(xEe,"STRONG",{});var Mqr=s(WY);iro=r(Mqr,"swin"),Mqr.forEach(t),dro=r(xEe," \u2014 "),LR=n(xEe,"A",{href:!0});var Eqr=s(LR);cro=r(Eqr,"ViTFeatureExtractor"),Eqr.forEach(t),mro=r(xEe," (Swin model)"),xEe.forEach(t),fro=i(ne),wh=n(ne,"LI",{});var kEe=s(wh);QY=n(kEe,"STRONG",{});var yqr=s(QY);gro=r(yqr,"van"),yqr.forEach(t),hro=r(kEe," \u2014 "),BR=n(kEe,"A",{href:!0});var wqr=s(BR);uro=r(wqr,"ConvNextFeatureExtractor"),wqr.forEach(t),pro=r(kEe," (VAN model)"),kEe.forEach(t),_ro=i(ne),Ah=n(ne,"LI",{});var REe=s(Ah);HY=n(REe,"STRONG",{});var Aqr=s(HY);bro=r(Aqr,"vit"),Aqr.forEach(t),vro=r(REe," \u2014 "),xR=n(REe,"A",{href:!0});var Lqr=s(xR);Tro=r(Lqr,"ViTFeatureExtractor"),Lqr.forEach(t),Fro=r(REe," (ViT model)"),REe.forEach(t),Cro=i(ne),Lh=n(ne,"LI",{});var SEe=s(Lh);UY=n(SEe,"STRONG",{});var Bqr=s(UY);Mro=r(Bqr,"vit_mae"),Bqr.forEach(t),Ero=r(SEe," \u2014 "),kR=n(SEe,"A",{href:!0});var xqr=s(kR);yro=r(xqr,"ViTFeatureExtractor"),xqr.forEach(t),wro=r(SEe," (ViTMAE model)"),SEe.forEach(t),Aro=i(ne),Bh=n(ne,"LI",{});var PEe=s(Bh);JY=n(PEe,"STRONG",{});var kqr=s(JY);Lro=r(kqr,"wav2vec2"),kqr.forEach(t),Bro=r(PEe," \u2014 "),RR=n(PEe,"A",{href:!0});var Rqr=s(RR);xro=r(Rqr,"Wav2Vec2FeatureExtractor"),Rqr.forEach(t),kro=r(PEe," (Wav2Vec2 model)"),PEe.forEach(t),ne.forEach(t),Rro=i(Nt),f(xh.$$.fragment,Nt),Sro=i(Nt),YY=n(Nt,"P",{});var Sqr=s(YY);Pro=r(Sqr,"Examples:"),Sqr.forEach(t),$ro=i(Nt),f(Py.$$.fragment,Nt),Nt.forEach(t),Iro=i(Vs),kh=n(Vs,"DIV",{class:!0});var SSe=s(kh);f($y.$$.fragment,SSe),jro=i(SSe),KY=n(SSe,"P",{});var Pqr=s(KY);Nro=r(Pqr,"Register a new feature extractor for this class."),Pqr.forEach(t),SSe.forEach(t),Vs.forEach(t),Ake=i(c),Hi=n(c,"H2",{class:!0});var PSe=s(Hi);Rh=n(PSe,"A",{id:!0,class:!0,href:!0});var $qr=s(Rh);ZY=n($qr,"SPAN",{});var Iqr=s(ZY);f(Iy.$$.fragment,Iqr),Iqr.forEach(t),$qr.forEach(t),Dro=i(PSe),eK=n(PSe,"SPAN",{});var jqr=s(eK);qro=r(jqr,"AutoProcessor"),jqr.forEach(t),PSe.forEach(t),Lke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);f(jy.$$.fragment,zs),Gro=i(zs),Ny=n(zs,"P",{});var $Se=s(Ny);Oro=r($Se,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SR=n($Se,"A",{href:!0});var Nqr=s(SR);Xro=r(Nqr,"AutoProcessor.from_pretrained()"),Nqr.forEach(t),Vro=r($Se," class method."),$Se.forEach(t),zro=i(zs),Dy=n(zs,"P",{});var ISe=s(Dy);Wro=r(ISe,"This class cannot be instantiated directly using "),oK=n(ISe,"CODE",{});var Dqr=s(oK);Qro=r(Dqr,"__init__()"),Dqr.forEach(t),Hro=r(ISe," (throws an error)."),ISe.forEach(t),Uro=i(zs),Ie=n(zs,"DIV",{class:!0});var Dt=s(Ie);f(qy.$$.fragment,Dt),Jro=i(Dt),rK=n(Dt,"P",{});var qqr=s(rK);Yro=r(qqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qqr.forEach(t),Kro=i(Dt),Ui=n(Dt,"P",{});var rW=s(Ui);Zro=r(rW,"The processor class to instantiate is selected based on the "),tK=n(rW,"CODE",{});var Gqr=s(tK);eto=r(Gqr,"model_type"),Gqr.forEach(t),oto=r(rW,` property of the config object (either
passed as an argument or loaded from `),aK=n(rW,"CODE",{});var Oqr=s(aK);rto=r(Oqr,"pretrained_model_name_or_path"),Oqr.forEach(t),tto=r(rW," if possible):"),rW.forEach(t),ato=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Sh=n(Do,"LI",{});var $Ee=s(Sh);nK=n($Ee,"STRONG",{});var Xqr=s(nK);nto=r(Xqr,"clip"),Xqr.forEach(t),sto=r($Ee," \u2014 "),PR=n($Ee,"A",{href:!0});var Vqr=s(PR);lto=r(Vqr,"CLIPProcessor"),Vqr.forEach(t),ito=r($Ee," (CLIP model)"),$Ee.forEach(t),dto=i(Do),Ph=n(Do,"LI",{});var IEe=s(Ph);sK=n(IEe,"STRONG",{});var zqr=s(sK);cto=r(zqr,"layoutlmv2"),zqr.forEach(t),mto=r(IEe," \u2014 "),$R=n(IEe,"A",{href:!0});var Wqr=s($R);fto=r(Wqr,"LayoutLMv2Processor"),Wqr.forEach(t),gto=r(IEe," (LayoutLMv2 model)"),IEe.forEach(t),hto=i(Do),$h=n(Do,"LI",{});var jEe=s($h);lK=n(jEe,"STRONG",{});var Qqr=s(lK);uto=r(Qqr,"layoutxlm"),Qqr.forEach(t),pto=r(jEe," \u2014 "),IR=n(jEe,"A",{href:!0});var Hqr=s(IR);_to=r(Hqr,"LayoutXLMProcessor"),Hqr.forEach(t),bto=r(jEe," (LayoutXLM model)"),jEe.forEach(t),vto=i(Do),Ih=n(Do,"LI",{});var NEe=s(Ih);iK=n(NEe,"STRONG",{});var Uqr=s(iK);Tto=r(Uqr,"speech_to_text"),Uqr.forEach(t),Fto=r(NEe," \u2014 "),jR=n(NEe,"A",{href:!0});var Jqr=s(jR);Cto=r(Jqr,"Speech2TextProcessor"),Jqr.forEach(t),Mto=r(NEe," (Speech2Text model)"),NEe.forEach(t),Eto=i(Do),jh=n(Do,"LI",{});var DEe=s(jh);dK=n(DEe,"STRONG",{});var Yqr=s(dK);yto=r(Yqr,"speech_to_text_2"),Yqr.forEach(t),wto=r(DEe," \u2014 "),NR=n(DEe,"A",{href:!0});var Kqr=s(NR);Ato=r(Kqr,"Speech2Text2Processor"),Kqr.forEach(t),Lto=r(DEe," (Speech2Text2 model)"),DEe.forEach(t),Bto=i(Do),Nh=n(Do,"LI",{});var qEe=s(Nh);cK=n(qEe,"STRONG",{});var Zqr=s(cK);xto=r(Zqr,"trocr"),Zqr.forEach(t),kto=r(qEe," \u2014 "),DR=n(qEe,"A",{href:!0});var eGr=s(DR);Rto=r(eGr,"TrOCRProcessor"),eGr.forEach(t),Sto=r(qEe," (TrOCR model)"),qEe.forEach(t),Pto=i(Do),Dh=n(Do,"LI",{});var GEe=s(Dh);mK=n(GEe,"STRONG",{});var oGr=s(mK);$to=r(oGr,"vision-text-dual-encoder"),oGr.forEach(t),Ito=r(GEe," \u2014 "),qR=n(GEe,"A",{href:!0});var rGr=s(qR);jto=r(rGr,"VisionTextDualEncoderProcessor"),rGr.forEach(t),Nto=r(GEe," (VisionTextDualEncoder model)"),GEe.forEach(t),Dto=i(Do),qh=n(Do,"LI",{});var OEe=s(qh);fK=n(OEe,"STRONG",{});var tGr=s(fK);qto=r(tGr,"wav2vec2"),tGr.forEach(t),Gto=r(OEe," \u2014 "),GR=n(OEe,"A",{href:!0});var aGr=s(GR);Oto=r(aGr,"Wav2Vec2Processor"),aGr.forEach(t),Xto=r(OEe," (Wav2Vec2 model)"),OEe.forEach(t),Do.forEach(t),Vto=i(Dt),f(Gh.$$.fragment,Dt),zto=i(Dt),gK=n(Dt,"P",{});var nGr=s(gK);Wto=r(nGr,"Examples:"),nGr.forEach(t),Qto=i(Dt),f(Gy.$$.fragment,Dt),Dt.forEach(t),Hto=i(zs),Oh=n(zs,"DIV",{class:!0});var jSe=s(Oh);f(Oy.$$.fragment,jSe),Uto=i(jSe),hK=n(jSe,"P",{});var sGr=s(hK);Jto=r(sGr,"Register a new processor for this class."),sGr.forEach(t),jSe.forEach(t),zs.forEach(t),Bke=i(c),Ji=n(c,"H2",{class:!0});var NSe=s(Ji);Xh=n(NSe,"A",{id:!0,class:!0,href:!0});var lGr=s(Xh);uK=n(lGr,"SPAN",{});var iGr=s(uK);f(Xy.$$.fragment,iGr),iGr.forEach(t),lGr.forEach(t),Yto=i(NSe),pK=n(NSe,"SPAN",{});var dGr=s(pK);Kto=r(dGr,"AutoModel"),dGr.forEach(t),NSe.forEach(t),xke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);f(Vy.$$.fragment,Ws),Zto=i(Ws),Yi=n(Ws,"P",{});var tW=s(Yi);eao=r(tW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_K=n(tW,"CODE",{});var cGr=s(_K);oao=r(cGr,"from_pretrained()"),cGr.forEach(t),rao=r(tW,"class method or the "),bK=n(tW,"CODE",{});var mGr=s(bK);tao=r(mGr,"from_config()"),mGr.forEach(t),aao=r(tW,`class
method.`),tW.forEach(t),nao=i(Ws),zy=n(Ws,"P",{});var DSe=s(zy);sao=r(DSe,"This class cannot be instantiated directly using "),vK=n(DSe,"CODE",{});var fGr=s(vK);lao=r(fGr,"__init__()"),fGr.forEach(t),iao=r(DSe," (throws an error)."),DSe.forEach(t),dao=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);f(Wy.$$.fragment,Qs),cao=i(Qs),TK=n(Qs,"P",{});var gGr=s(TK);mao=r(gGr,"Instantiates one of the base model classes of the library from a configuration."),gGr.forEach(t),fao=i(Qs),Ki=n(Qs,"P",{});var aW=s(Ki);gao=r(aW,`Note:
Loading a model from its configuration file does `),FK=n(aW,"STRONG",{});var hGr=s(FK);hao=r(hGr,"not"),hGr.forEach(t),uao=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),CK=n(aW,"CODE",{});var uGr=s(CK);pao=r(uGr,"from_pretrained()"),uGr.forEach(t),_ao=r(aW,"to load the model weights."),aW.forEach(t),bao=i(Qs),MK=n(Qs,"P",{});var pGr=s(MK);vao=r(pGr,"Examples:"),pGr.forEach(t),Tao=i(Qs),f(Qy.$$.fragment,Qs),Qs.forEach(t),Fao=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);f(Hy.$$.fragment,qt),Cao=i(qt),EK=n(qt,"P",{});var _Gr=s(EK);Mao=r(_Gr,"Instantiate one of the base model classes of the library from a pretrained model."),_Gr.forEach(t),Eao=i(qt),Va=n(qt,"P",{});var g5=s(Va);yao=r(g5,"The model class to instantiate is selected based on the "),yK=n(g5,"CODE",{});var bGr=s(yK);wao=r(bGr,"model_type"),bGr.forEach(t),Aao=r(g5,` property of the config object (either
passed as an argument or loaded from `),wK=n(g5,"CODE",{});var vGr=s(wK);Lao=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),Bao=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AK=n(g5,"CODE",{});var TGr=s(AK);xao=r(TGr,"pretrained_model_name_or_path"),TGr.forEach(t),kao=r(g5,":"),g5.forEach(t),Rao=i(qt),F=n(qt,"UL",{});var C=s(F);Vh=n(C,"LI",{});var XEe=s(Vh);LK=n(XEe,"STRONG",{});var FGr=s(LK);Sao=r(FGr,"albert"),FGr.forEach(t),Pao=r(XEe," \u2014 "),OR=n(XEe,"A",{href:!0});var CGr=s(OR);$ao=r(CGr,"AlbertModel"),CGr.forEach(t),Iao=r(XEe," (ALBERT model)"),XEe.forEach(t),jao=i(C),zh=n(C,"LI",{});var VEe=s(zh);BK=n(VEe,"STRONG",{});var MGr=s(BK);Nao=r(MGr,"bart"),MGr.forEach(t),Dao=r(VEe," \u2014 "),XR=n(VEe,"A",{href:!0});var EGr=s(XR);qao=r(EGr,"BartModel"),EGr.forEach(t),Gao=r(VEe," (BART model)"),VEe.forEach(t),Oao=i(C),Wh=n(C,"LI",{});var zEe=s(Wh);xK=n(zEe,"STRONG",{});var yGr=s(xK);Xao=r(yGr,"beit"),yGr.forEach(t),Vao=r(zEe," \u2014 "),VR=n(zEe,"A",{href:!0});var wGr=s(VR);zao=r(wGr,"BeitModel"),wGr.forEach(t),Wao=r(zEe," (BEiT model)"),zEe.forEach(t),Qao=i(C),Qh=n(C,"LI",{});var WEe=s(Qh);kK=n(WEe,"STRONG",{});var AGr=s(kK);Hao=r(AGr,"bert"),AGr.forEach(t),Uao=r(WEe," \u2014 "),zR=n(WEe,"A",{href:!0});var LGr=s(zR);Jao=r(LGr,"BertModel"),LGr.forEach(t),Yao=r(WEe," (BERT model)"),WEe.forEach(t),Kao=i(C),Hh=n(C,"LI",{});var QEe=s(Hh);RK=n(QEe,"STRONG",{});var BGr=s(RK);Zao=r(BGr,"bert-generation"),BGr.forEach(t),eno=r(QEe," \u2014 "),WR=n(QEe,"A",{href:!0});var xGr=s(WR);ono=r(xGr,"BertGenerationEncoder"),xGr.forEach(t),rno=r(QEe," (Bert Generation model)"),QEe.forEach(t),tno=i(C),Uh=n(C,"LI",{});var HEe=s(Uh);SK=n(HEe,"STRONG",{});var kGr=s(SK);ano=r(kGr,"big_bird"),kGr.forEach(t),nno=r(HEe," \u2014 "),QR=n(HEe,"A",{href:!0});var RGr=s(QR);sno=r(RGr,"BigBirdModel"),RGr.forEach(t),lno=r(HEe," (BigBird model)"),HEe.forEach(t),ino=i(C),Jh=n(C,"LI",{});var UEe=s(Jh);PK=n(UEe,"STRONG",{});var SGr=s(PK);dno=r(SGr,"bigbird_pegasus"),SGr.forEach(t),cno=r(UEe," \u2014 "),HR=n(UEe,"A",{href:!0});var PGr=s(HR);mno=r(PGr,"BigBirdPegasusModel"),PGr.forEach(t),fno=r(UEe," (BigBirdPegasus model)"),UEe.forEach(t),gno=i(C),Yh=n(C,"LI",{});var JEe=s(Yh);$K=n(JEe,"STRONG",{});var $Gr=s($K);hno=r($Gr,"blenderbot"),$Gr.forEach(t),uno=r(JEe," \u2014 "),UR=n(JEe,"A",{href:!0});var IGr=s(UR);pno=r(IGr,"BlenderbotModel"),IGr.forEach(t),_no=r(JEe," (Blenderbot model)"),JEe.forEach(t),bno=i(C),Kh=n(C,"LI",{});var YEe=s(Kh);IK=n(YEe,"STRONG",{});var jGr=s(IK);vno=r(jGr,"blenderbot-small"),jGr.forEach(t),Tno=r(YEe," \u2014 "),JR=n(YEe,"A",{href:!0});var NGr=s(JR);Fno=r(NGr,"BlenderbotSmallModel"),NGr.forEach(t),Cno=r(YEe," (BlenderbotSmall model)"),YEe.forEach(t),Mno=i(C),Zh=n(C,"LI",{});var KEe=s(Zh);jK=n(KEe,"STRONG",{});var DGr=s(jK);Eno=r(DGr,"camembert"),DGr.forEach(t),yno=r(KEe," \u2014 "),YR=n(KEe,"A",{href:!0});var qGr=s(YR);wno=r(qGr,"CamembertModel"),qGr.forEach(t),Ano=r(KEe," (CamemBERT model)"),KEe.forEach(t),Lno=i(C),eu=n(C,"LI",{});var ZEe=s(eu);NK=n(ZEe,"STRONG",{});var GGr=s(NK);Bno=r(GGr,"canine"),GGr.forEach(t),xno=r(ZEe," \u2014 "),KR=n(ZEe,"A",{href:!0});var OGr=s(KR);kno=r(OGr,"CanineModel"),OGr.forEach(t),Rno=r(ZEe," (Canine model)"),ZEe.forEach(t),Sno=i(C),ou=n(C,"LI",{});var e3e=s(ou);DK=n(e3e,"STRONG",{});var XGr=s(DK);Pno=r(XGr,"clip"),XGr.forEach(t),$no=r(e3e," \u2014 "),ZR=n(e3e,"A",{href:!0});var VGr=s(ZR);Ino=r(VGr,"CLIPModel"),VGr.forEach(t),jno=r(e3e," (CLIP model)"),e3e.forEach(t),Nno=i(C),ru=n(C,"LI",{});var o3e=s(ru);qK=n(o3e,"STRONG",{});var zGr=s(qK);Dno=r(zGr,"convbert"),zGr.forEach(t),qno=r(o3e," \u2014 "),eS=n(o3e,"A",{href:!0});var WGr=s(eS);Gno=r(WGr,"ConvBertModel"),WGr.forEach(t),Ono=r(o3e," (ConvBERT model)"),o3e.forEach(t),Xno=i(C),tu=n(C,"LI",{});var r3e=s(tu);GK=n(r3e,"STRONG",{});var QGr=s(GK);Vno=r(QGr,"convnext"),QGr.forEach(t),zno=r(r3e," \u2014 "),oS=n(r3e,"A",{href:!0});var HGr=s(oS);Wno=r(HGr,"ConvNextModel"),HGr.forEach(t),Qno=r(r3e," (ConvNext model)"),r3e.forEach(t),Hno=i(C),au=n(C,"LI",{});var t3e=s(au);OK=n(t3e,"STRONG",{});var UGr=s(OK);Uno=r(UGr,"ctrl"),UGr.forEach(t),Jno=r(t3e," \u2014 "),rS=n(t3e,"A",{href:!0});var JGr=s(rS);Yno=r(JGr,"CTRLModel"),JGr.forEach(t),Kno=r(t3e," (CTRL model)"),t3e.forEach(t),Zno=i(C),nu=n(C,"LI",{});var a3e=s(nu);XK=n(a3e,"STRONG",{});var YGr=s(XK);eso=r(YGr,"data2vec-audio"),YGr.forEach(t),oso=r(a3e," \u2014 "),tS=n(a3e,"A",{href:!0});var KGr=s(tS);rso=r(KGr,"Data2VecAudioModel"),KGr.forEach(t),tso=r(a3e," (Data2VecAudio model)"),a3e.forEach(t),aso=i(C),su=n(C,"LI",{});var n3e=s(su);VK=n(n3e,"STRONG",{});var ZGr=s(VK);nso=r(ZGr,"data2vec-text"),ZGr.forEach(t),sso=r(n3e," \u2014 "),aS=n(n3e,"A",{href:!0});var eOr=s(aS);lso=r(eOr,"Data2VecTextModel"),eOr.forEach(t),iso=r(n3e," (Data2VecText model)"),n3e.forEach(t),dso=i(C),lu=n(C,"LI",{});var s3e=s(lu);zK=n(s3e,"STRONG",{});var oOr=s(zK);cso=r(oOr,"deberta"),oOr.forEach(t),mso=r(s3e," \u2014 "),nS=n(s3e,"A",{href:!0});var rOr=s(nS);fso=r(rOr,"DebertaModel"),rOr.forEach(t),gso=r(s3e," (DeBERTa model)"),s3e.forEach(t),hso=i(C),iu=n(C,"LI",{});var l3e=s(iu);WK=n(l3e,"STRONG",{});var tOr=s(WK);uso=r(tOr,"deberta-v2"),tOr.forEach(t),pso=r(l3e," \u2014 "),sS=n(l3e,"A",{href:!0});var aOr=s(sS);_so=r(aOr,"DebertaV2Model"),aOr.forEach(t),bso=r(l3e," (DeBERTa-v2 model)"),l3e.forEach(t),vso=i(C),du=n(C,"LI",{});var i3e=s(du);QK=n(i3e,"STRONG",{});var nOr=s(QK);Tso=r(nOr,"decision_transformer"),nOr.forEach(t),Fso=r(i3e," \u2014 "),lS=n(i3e,"A",{href:!0});var sOr=s(lS);Cso=r(sOr,"DecisionTransformerModel"),sOr.forEach(t),Mso=r(i3e," (Decision Transformer model)"),i3e.forEach(t),Eso=i(C),cu=n(C,"LI",{});var d3e=s(cu);HK=n(d3e,"STRONG",{});var lOr=s(HK);yso=r(lOr,"deit"),lOr.forEach(t),wso=r(d3e," \u2014 "),iS=n(d3e,"A",{href:!0});var iOr=s(iS);Aso=r(iOr,"DeiTModel"),iOr.forEach(t),Lso=r(d3e," (DeiT model)"),d3e.forEach(t),Bso=i(C),mu=n(C,"LI",{});var c3e=s(mu);UK=n(c3e,"STRONG",{});var dOr=s(UK);xso=r(dOr,"detr"),dOr.forEach(t),kso=r(c3e," \u2014 "),dS=n(c3e,"A",{href:!0});var cOr=s(dS);Rso=r(cOr,"DetrModel"),cOr.forEach(t),Sso=r(c3e," (DETR model)"),c3e.forEach(t),Pso=i(C),fu=n(C,"LI",{});var m3e=s(fu);JK=n(m3e,"STRONG",{});var mOr=s(JK);$so=r(mOr,"distilbert"),mOr.forEach(t),Iso=r(m3e," \u2014 "),cS=n(m3e,"A",{href:!0});var fOr=s(cS);jso=r(fOr,"DistilBertModel"),fOr.forEach(t),Nso=r(m3e," (DistilBERT model)"),m3e.forEach(t),Dso=i(C),gu=n(C,"LI",{});var f3e=s(gu);YK=n(f3e,"STRONG",{});var gOr=s(YK);qso=r(gOr,"dpr"),gOr.forEach(t),Gso=r(f3e," \u2014 "),mS=n(f3e,"A",{href:!0});var hOr=s(mS);Oso=r(hOr,"DPRQuestionEncoder"),hOr.forEach(t),Xso=r(f3e," (DPR model)"),f3e.forEach(t),Vso=i(C),hu=n(C,"LI",{});var g3e=s(hu);KK=n(g3e,"STRONG",{});var uOr=s(KK);zso=r(uOr,"electra"),uOr.forEach(t),Wso=r(g3e," \u2014 "),fS=n(g3e,"A",{href:!0});var pOr=s(fS);Qso=r(pOr,"ElectraModel"),pOr.forEach(t),Hso=r(g3e," (ELECTRA model)"),g3e.forEach(t),Uso=i(C),uu=n(C,"LI",{});var h3e=s(uu);ZK=n(h3e,"STRONG",{});var _Or=s(ZK);Jso=r(_Or,"flaubert"),_Or.forEach(t),Yso=r(h3e," \u2014 "),gS=n(h3e,"A",{href:!0});var bOr=s(gS);Kso=r(bOr,"FlaubertModel"),bOr.forEach(t),Zso=r(h3e," (FlauBERT model)"),h3e.forEach(t),elo=i(C),pu=n(C,"LI",{});var u3e=s(pu);eZ=n(u3e,"STRONG",{});var vOr=s(eZ);olo=r(vOr,"fnet"),vOr.forEach(t),rlo=r(u3e," \u2014 "),hS=n(u3e,"A",{href:!0});var TOr=s(hS);tlo=r(TOr,"FNetModel"),TOr.forEach(t),alo=r(u3e," (FNet model)"),u3e.forEach(t),nlo=i(C),_u=n(C,"LI",{});var p3e=s(_u);oZ=n(p3e,"STRONG",{});var FOr=s(oZ);slo=r(FOr,"fsmt"),FOr.forEach(t),llo=r(p3e," \u2014 "),uS=n(p3e,"A",{href:!0});var COr=s(uS);ilo=r(COr,"FSMTModel"),COr.forEach(t),dlo=r(p3e," (FairSeq Machine-Translation model)"),p3e.forEach(t),clo=i(C),Ds=n(C,"LI",{});var Z8=s(Ds);rZ=n(Z8,"STRONG",{});var MOr=s(rZ);mlo=r(MOr,"funnel"),MOr.forEach(t),flo=r(Z8," \u2014 "),pS=n(Z8,"A",{href:!0});var EOr=s(pS);glo=r(EOr,"FunnelModel"),EOr.forEach(t),hlo=r(Z8," or "),_S=n(Z8,"A",{href:!0});var yOr=s(_S);ulo=r(yOr,"FunnelBaseModel"),yOr.forEach(t),plo=r(Z8," (Funnel Transformer model)"),Z8.forEach(t),_lo=i(C),bu=n(C,"LI",{});var _3e=s(bu);tZ=n(_3e,"STRONG",{});var wOr=s(tZ);blo=r(wOr,"glpn"),wOr.forEach(t),vlo=r(_3e," \u2014 "),bS=n(_3e,"A",{href:!0});var AOr=s(bS);Tlo=r(AOr,"GLPNModel"),AOr.forEach(t),Flo=r(_3e," (GLPN model)"),_3e.forEach(t),Clo=i(C),vu=n(C,"LI",{});var b3e=s(vu);aZ=n(b3e,"STRONG",{});var LOr=s(aZ);Mlo=r(LOr,"gpt2"),LOr.forEach(t),Elo=r(b3e," \u2014 "),vS=n(b3e,"A",{href:!0});var BOr=s(vS);ylo=r(BOr,"GPT2Model"),BOr.forEach(t),wlo=r(b3e," (OpenAI GPT-2 model)"),b3e.forEach(t),Alo=i(C),Tu=n(C,"LI",{});var v3e=s(Tu);nZ=n(v3e,"STRONG",{});var xOr=s(nZ);Llo=r(xOr,"gpt_neo"),xOr.forEach(t),Blo=r(v3e," \u2014 "),TS=n(v3e,"A",{href:!0});var kOr=s(TS);xlo=r(kOr,"GPTNeoModel"),kOr.forEach(t),klo=r(v3e," (GPT Neo model)"),v3e.forEach(t),Rlo=i(C),Fu=n(C,"LI",{});var T3e=s(Fu);sZ=n(T3e,"STRONG",{});var ROr=s(sZ);Slo=r(ROr,"gptj"),ROr.forEach(t),Plo=r(T3e," \u2014 "),FS=n(T3e,"A",{href:!0});var SOr=s(FS);$lo=r(SOr,"GPTJModel"),SOr.forEach(t),Ilo=r(T3e," (GPT-J model)"),T3e.forEach(t),jlo=i(C),Cu=n(C,"LI",{});var F3e=s(Cu);lZ=n(F3e,"STRONG",{});var POr=s(lZ);Nlo=r(POr,"hubert"),POr.forEach(t),Dlo=r(F3e," \u2014 "),CS=n(F3e,"A",{href:!0});var $Or=s(CS);qlo=r($Or,"HubertModel"),$Or.forEach(t),Glo=r(F3e," (Hubert model)"),F3e.forEach(t),Olo=i(C),Mu=n(C,"LI",{});var C3e=s(Mu);iZ=n(C3e,"STRONG",{});var IOr=s(iZ);Xlo=r(IOr,"ibert"),IOr.forEach(t),Vlo=r(C3e," \u2014 "),MS=n(C3e,"A",{href:!0});var jOr=s(MS);zlo=r(jOr,"IBertModel"),jOr.forEach(t),Wlo=r(C3e," (I-BERT model)"),C3e.forEach(t),Qlo=i(C),Eu=n(C,"LI",{});var M3e=s(Eu);dZ=n(M3e,"STRONG",{});var NOr=s(dZ);Hlo=r(NOr,"imagegpt"),NOr.forEach(t),Ulo=r(M3e," \u2014 "),ES=n(M3e,"A",{href:!0});var DOr=s(ES);Jlo=r(DOr,"ImageGPTModel"),DOr.forEach(t),Ylo=r(M3e," (ImageGPT model)"),M3e.forEach(t),Klo=i(C),yu=n(C,"LI",{});var E3e=s(yu);cZ=n(E3e,"STRONG",{});var qOr=s(cZ);Zlo=r(qOr,"layoutlm"),qOr.forEach(t),eio=r(E3e," \u2014 "),yS=n(E3e,"A",{href:!0});var GOr=s(yS);oio=r(GOr,"LayoutLMModel"),GOr.forEach(t),rio=r(E3e," (LayoutLM model)"),E3e.forEach(t),tio=i(C),wu=n(C,"LI",{});var y3e=s(wu);mZ=n(y3e,"STRONG",{});var OOr=s(mZ);aio=r(OOr,"layoutlmv2"),OOr.forEach(t),nio=r(y3e," \u2014 "),wS=n(y3e,"A",{href:!0});var XOr=s(wS);sio=r(XOr,"LayoutLMv2Model"),XOr.forEach(t),lio=r(y3e," (LayoutLMv2 model)"),y3e.forEach(t),iio=i(C),Au=n(C,"LI",{});var w3e=s(Au);fZ=n(w3e,"STRONG",{});var VOr=s(fZ);dio=r(VOr,"led"),VOr.forEach(t),cio=r(w3e," \u2014 "),AS=n(w3e,"A",{href:!0});var zOr=s(AS);mio=r(zOr,"LEDModel"),zOr.forEach(t),fio=r(w3e," (LED model)"),w3e.forEach(t),gio=i(C),Lu=n(C,"LI",{});var A3e=s(Lu);gZ=n(A3e,"STRONG",{});var WOr=s(gZ);hio=r(WOr,"longformer"),WOr.forEach(t),uio=r(A3e," \u2014 "),LS=n(A3e,"A",{href:!0});var QOr=s(LS);pio=r(QOr,"LongformerModel"),QOr.forEach(t),_io=r(A3e," (Longformer model)"),A3e.forEach(t),bio=i(C),Bu=n(C,"LI",{});var L3e=s(Bu);hZ=n(L3e,"STRONG",{});var HOr=s(hZ);vio=r(HOr,"luke"),HOr.forEach(t),Tio=r(L3e," \u2014 "),BS=n(L3e,"A",{href:!0});var UOr=s(BS);Fio=r(UOr,"LukeModel"),UOr.forEach(t),Cio=r(L3e," (LUKE model)"),L3e.forEach(t),Mio=i(C),xu=n(C,"LI",{});var B3e=s(xu);uZ=n(B3e,"STRONG",{});var JOr=s(uZ);Eio=r(JOr,"lxmert"),JOr.forEach(t),yio=r(B3e," \u2014 "),xS=n(B3e,"A",{href:!0});var YOr=s(xS);wio=r(YOr,"LxmertModel"),YOr.forEach(t),Aio=r(B3e," (LXMERT model)"),B3e.forEach(t),Lio=i(C),ku=n(C,"LI",{});var x3e=s(ku);pZ=n(x3e,"STRONG",{});var KOr=s(pZ);Bio=r(KOr,"m2m_100"),KOr.forEach(t),xio=r(x3e," \u2014 "),kS=n(x3e,"A",{href:!0});var ZOr=s(kS);kio=r(ZOr,"M2M100Model"),ZOr.forEach(t),Rio=r(x3e," (M2M100 model)"),x3e.forEach(t),Sio=i(C),Ru=n(C,"LI",{});var k3e=s(Ru);_Z=n(k3e,"STRONG",{});var eXr=s(_Z);Pio=r(eXr,"marian"),eXr.forEach(t),$io=r(k3e," \u2014 "),RS=n(k3e,"A",{href:!0});var oXr=s(RS);Iio=r(oXr,"MarianModel"),oXr.forEach(t),jio=r(k3e," (Marian model)"),k3e.forEach(t),Nio=i(C),Su=n(C,"LI",{});var R3e=s(Su);bZ=n(R3e,"STRONG",{});var rXr=s(bZ);Dio=r(rXr,"maskformer"),rXr.forEach(t),qio=r(R3e," \u2014 "),SS=n(R3e,"A",{href:!0});var tXr=s(SS);Gio=r(tXr,"MaskFormerModel"),tXr.forEach(t),Oio=r(R3e," (MaskFormer model)"),R3e.forEach(t),Xio=i(C),Pu=n(C,"LI",{});var S3e=s(Pu);vZ=n(S3e,"STRONG",{});var aXr=s(vZ);Vio=r(aXr,"mbart"),aXr.forEach(t),zio=r(S3e," \u2014 "),PS=n(S3e,"A",{href:!0});var nXr=s(PS);Wio=r(nXr,"MBartModel"),nXr.forEach(t),Qio=r(S3e," (mBART model)"),S3e.forEach(t),Hio=i(C),$u=n(C,"LI",{});var P3e=s($u);TZ=n(P3e,"STRONG",{});var sXr=s(TZ);Uio=r(sXr,"megatron-bert"),sXr.forEach(t),Jio=r(P3e," \u2014 "),$S=n(P3e,"A",{href:!0});var lXr=s($S);Yio=r(lXr,"MegatronBertModel"),lXr.forEach(t),Kio=r(P3e," (MegatronBert model)"),P3e.forEach(t),Zio=i(C),Iu=n(C,"LI",{});var $3e=s(Iu);FZ=n($3e,"STRONG",{});var iXr=s(FZ);edo=r(iXr,"mobilebert"),iXr.forEach(t),odo=r($3e," \u2014 "),IS=n($3e,"A",{href:!0});var dXr=s(IS);rdo=r(dXr,"MobileBertModel"),dXr.forEach(t),tdo=r($3e," (MobileBERT model)"),$3e.forEach(t),ado=i(C),ju=n(C,"LI",{});var I3e=s(ju);CZ=n(I3e,"STRONG",{});var cXr=s(CZ);ndo=r(cXr,"mpnet"),cXr.forEach(t),sdo=r(I3e," \u2014 "),jS=n(I3e,"A",{href:!0});var mXr=s(jS);ldo=r(mXr,"MPNetModel"),mXr.forEach(t),ido=r(I3e," (MPNet model)"),I3e.forEach(t),ddo=i(C),Nu=n(C,"LI",{});var j3e=s(Nu);MZ=n(j3e,"STRONG",{});var fXr=s(MZ);cdo=r(fXr,"mt5"),fXr.forEach(t),mdo=r(j3e," \u2014 "),NS=n(j3e,"A",{href:!0});var gXr=s(NS);fdo=r(gXr,"MT5Model"),gXr.forEach(t),gdo=r(j3e," (mT5 model)"),j3e.forEach(t),hdo=i(C),Du=n(C,"LI",{});var N3e=s(Du);EZ=n(N3e,"STRONG",{});var hXr=s(EZ);udo=r(hXr,"nystromformer"),hXr.forEach(t),pdo=r(N3e," \u2014 "),DS=n(N3e,"A",{href:!0});var uXr=s(DS);_do=r(uXr,"NystromformerModel"),uXr.forEach(t),bdo=r(N3e," (Nystromformer model)"),N3e.forEach(t),vdo=i(C),qu=n(C,"LI",{});var D3e=s(qu);yZ=n(D3e,"STRONG",{});var pXr=s(yZ);Tdo=r(pXr,"openai-gpt"),pXr.forEach(t),Fdo=r(D3e," \u2014 "),qS=n(D3e,"A",{href:!0});var _Xr=s(qS);Cdo=r(_Xr,"OpenAIGPTModel"),_Xr.forEach(t),Mdo=r(D3e," (OpenAI GPT model)"),D3e.forEach(t),Edo=i(C),Gu=n(C,"LI",{});var q3e=s(Gu);wZ=n(q3e,"STRONG",{});var bXr=s(wZ);ydo=r(bXr,"pegasus"),bXr.forEach(t),wdo=r(q3e," \u2014 "),GS=n(q3e,"A",{href:!0});var vXr=s(GS);Ado=r(vXr,"PegasusModel"),vXr.forEach(t),Ldo=r(q3e," (Pegasus model)"),q3e.forEach(t),Bdo=i(C),Ou=n(C,"LI",{});var G3e=s(Ou);AZ=n(G3e,"STRONG",{});var TXr=s(AZ);xdo=r(TXr,"perceiver"),TXr.forEach(t),kdo=r(G3e," \u2014 "),OS=n(G3e,"A",{href:!0});var FXr=s(OS);Rdo=r(FXr,"PerceiverModel"),FXr.forEach(t),Sdo=r(G3e," (Perceiver model)"),G3e.forEach(t),Pdo=i(C),Xu=n(C,"LI",{});var O3e=s(Xu);LZ=n(O3e,"STRONG",{});var CXr=s(LZ);$do=r(CXr,"plbart"),CXr.forEach(t),Ido=r(O3e," \u2014 "),XS=n(O3e,"A",{href:!0});var MXr=s(XS);jdo=r(MXr,"PLBartModel"),MXr.forEach(t),Ndo=r(O3e," (PLBart model)"),O3e.forEach(t),Ddo=i(C),Vu=n(C,"LI",{});var X3e=s(Vu);BZ=n(X3e,"STRONG",{});var EXr=s(BZ);qdo=r(EXr,"poolformer"),EXr.forEach(t),Gdo=r(X3e," \u2014 "),VS=n(X3e,"A",{href:!0});var yXr=s(VS);Odo=r(yXr,"PoolFormerModel"),yXr.forEach(t),Xdo=r(X3e," (PoolFormer model)"),X3e.forEach(t),Vdo=i(C),zu=n(C,"LI",{});var V3e=s(zu);xZ=n(V3e,"STRONG",{});var wXr=s(xZ);zdo=r(wXr,"prophetnet"),wXr.forEach(t),Wdo=r(V3e," \u2014 "),zS=n(V3e,"A",{href:!0});var AXr=s(zS);Qdo=r(AXr,"ProphetNetModel"),AXr.forEach(t),Hdo=r(V3e," (ProphetNet model)"),V3e.forEach(t),Udo=i(C),Wu=n(C,"LI",{});var z3e=s(Wu);kZ=n(z3e,"STRONG",{});var LXr=s(kZ);Jdo=r(LXr,"qdqbert"),LXr.forEach(t),Ydo=r(z3e," \u2014 "),WS=n(z3e,"A",{href:!0});var BXr=s(WS);Kdo=r(BXr,"QDQBertModel"),BXr.forEach(t),Zdo=r(z3e," (QDQBert model)"),z3e.forEach(t),eco=i(C),Qu=n(C,"LI",{});var W3e=s(Qu);RZ=n(W3e,"STRONG",{});var xXr=s(RZ);oco=r(xXr,"reformer"),xXr.forEach(t),rco=r(W3e," \u2014 "),QS=n(W3e,"A",{href:!0});var kXr=s(QS);tco=r(kXr,"ReformerModel"),kXr.forEach(t),aco=r(W3e," (Reformer model)"),W3e.forEach(t),nco=i(C),Hu=n(C,"LI",{});var Q3e=s(Hu);SZ=n(Q3e,"STRONG",{});var RXr=s(SZ);sco=r(RXr,"rembert"),RXr.forEach(t),lco=r(Q3e," \u2014 "),HS=n(Q3e,"A",{href:!0});var SXr=s(HS);ico=r(SXr,"RemBertModel"),SXr.forEach(t),dco=r(Q3e," (RemBERT model)"),Q3e.forEach(t),cco=i(C),Uu=n(C,"LI",{});var H3e=s(Uu);PZ=n(H3e,"STRONG",{});var PXr=s(PZ);mco=r(PXr,"resnet"),PXr.forEach(t),fco=r(H3e," \u2014 "),US=n(H3e,"A",{href:!0});var $Xr=s(US);gco=r($Xr,"ResNetModel"),$Xr.forEach(t),hco=r(H3e," (ResNet model)"),H3e.forEach(t),uco=i(C),Ju=n(C,"LI",{});var U3e=s(Ju);$Z=n(U3e,"STRONG",{});var IXr=s($Z);pco=r(IXr,"retribert"),IXr.forEach(t),_co=r(U3e," \u2014 "),JS=n(U3e,"A",{href:!0});var jXr=s(JS);bco=r(jXr,"RetriBertModel"),jXr.forEach(t),vco=r(U3e," (RetriBERT model)"),U3e.forEach(t),Tco=i(C),Yu=n(C,"LI",{});var J3e=s(Yu);IZ=n(J3e,"STRONG",{});var NXr=s(IZ);Fco=r(NXr,"roberta"),NXr.forEach(t),Cco=r(J3e," \u2014 "),YS=n(J3e,"A",{href:!0});var DXr=s(YS);Mco=r(DXr,"RobertaModel"),DXr.forEach(t),Eco=r(J3e," (RoBERTa model)"),J3e.forEach(t),yco=i(C),Ku=n(C,"LI",{});var Y3e=s(Ku);jZ=n(Y3e,"STRONG",{});var qXr=s(jZ);wco=r(qXr,"roformer"),qXr.forEach(t),Aco=r(Y3e," \u2014 "),KS=n(Y3e,"A",{href:!0});var GXr=s(KS);Lco=r(GXr,"RoFormerModel"),GXr.forEach(t),Bco=r(Y3e," (RoFormer model)"),Y3e.forEach(t),xco=i(C),Zu=n(C,"LI",{});var K3e=s(Zu);NZ=n(K3e,"STRONG",{});var OXr=s(NZ);kco=r(OXr,"segformer"),OXr.forEach(t),Rco=r(K3e," \u2014 "),ZS=n(K3e,"A",{href:!0});var XXr=s(ZS);Sco=r(XXr,"SegformerModel"),XXr.forEach(t),Pco=r(K3e," (SegFormer model)"),K3e.forEach(t),$co=i(C),ep=n(C,"LI",{});var Z3e=s(ep);DZ=n(Z3e,"STRONG",{});var VXr=s(DZ);Ico=r(VXr,"sew"),VXr.forEach(t),jco=r(Z3e," \u2014 "),eP=n(Z3e,"A",{href:!0});var zXr=s(eP);Nco=r(zXr,"SEWModel"),zXr.forEach(t),Dco=r(Z3e," (SEW model)"),Z3e.forEach(t),qco=i(C),op=n(C,"LI",{});var e5e=s(op);qZ=n(e5e,"STRONG",{});var WXr=s(qZ);Gco=r(WXr,"sew-d"),WXr.forEach(t),Oco=r(e5e," \u2014 "),oP=n(e5e,"A",{href:!0});var QXr=s(oP);Xco=r(QXr,"SEWDModel"),QXr.forEach(t),Vco=r(e5e," (SEW-D model)"),e5e.forEach(t),zco=i(C),rp=n(C,"LI",{});var o5e=s(rp);GZ=n(o5e,"STRONG",{});var HXr=s(GZ);Wco=r(HXr,"speech_to_text"),HXr.forEach(t),Qco=r(o5e," \u2014 "),rP=n(o5e,"A",{href:!0});var UXr=s(rP);Hco=r(UXr,"Speech2TextModel"),UXr.forEach(t),Uco=r(o5e," (Speech2Text model)"),o5e.forEach(t),Jco=i(C),tp=n(C,"LI",{});var r5e=s(tp);OZ=n(r5e,"STRONG",{});var JXr=s(OZ);Yco=r(JXr,"splinter"),JXr.forEach(t),Kco=r(r5e," \u2014 "),tP=n(r5e,"A",{href:!0});var YXr=s(tP);Zco=r(YXr,"SplinterModel"),YXr.forEach(t),emo=r(r5e," (Splinter model)"),r5e.forEach(t),omo=i(C),ap=n(C,"LI",{});var t5e=s(ap);XZ=n(t5e,"STRONG",{});var KXr=s(XZ);rmo=r(KXr,"squeezebert"),KXr.forEach(t),tmo=r(t5e," \u2014 "),aP=n(t5e,"A",{href:!0});var ZXr=s(aP);amo=r(ZXr,"SqueezeBertModel"),ZXr.forEach(t),nmo=r(t5e," (SqueezeBERT model)"),t5e.forEach(t),smo=i(C),np=n(C,"LI",{});var a5e=s(np);VZ=n(a5e,"STRONG",{});var eVr=s(VZ);lmo=r(eVr,"swin"),eVr.forEach(t),imo=r(a5e," \u2014 "),nP=n(a5e,"A",{href:!0});var oVr=s(nP);dmo=r(oVr,"SwinModel"),oVr.forEach(t),cmo=r(a5e," (Swin model)"),a5e.forEach(t),mmo=i(C),sp=n(C,"LI",{});var n5e=s(sp);zZ=n(n5e,"STRONG",{});var rVr=s(zZ);fmo=r(rVr,"t5"),rVr.forEach(t),gmo=r(n5e," \u2014 "),sP=n(n5e,"A",{href:!0});var tVr=s(sP);hmo=r(tVr,"T5Model"),tVr.forEach(t),umo=r(n5e," (T5 model)"),n5e.forEach(t),pmo=i(C),lp=n(C,"LI",{});var s5e=s(lp);WZ=n(s5e,"STRONG",{});var aVr=s(WZ);_mo=r(aVr,"tapas"),aVr.forEach(t),bmo=r(s5e," \u2014 "),lP=n(s5e,"A",{href:!0});var nVr=s(lP);vmo=r(nVr,"TapasModel"),nVr.forEach(t),Tmo=r(s5e," (TAPAS model)"),s5e.forEach(t),Fmo=i(C),ip=n(C,"LI",{});var l5e=s(ip);QZ=n(l5e,"STRONG",{});var sVr=s(QZ);Cmo=r(sVr,"transfo-xl"),sVr.forEach(t),Mmo=r(l5e," \u2014 "),iP=n(l5e,"A",{href:!0});var lVr=s(iP);Emo=r(lVr,"TransfoXLModel"),lVr.forEach(t),ymo=r(l5e," (Transformer-XL model)"),l5e.forEach(t),wmo=i(C),dp=n(C,"LI",{});var i5e=s(dp);HZ=n(i5e,"STRONG",{});var iVr=s(HZ);Amo=r(iVr,"unispeech"),iVr.forEach(t),Lmo=r(i5e," \u2014 "),dP=n(i5e,"A",{href:!0});var dVr=s(dP);Bmo=r(dVr,"UniSpeechModel"),dVr.forEach(t),xmo=r(i5e," (UniSpeech model)"),i5e.forEach(t),kmo=i(C),cp=n(C,"LI",{});var d5e=s(cp);UZ=n(d5e,"STRONG",{});var cVr=s(UZ);Rmo=r(cVr,"unispeech-sat"),cVr.forEach(t),Smo=r(d5e," \u2014 "),cP=n(d5e,"A",{href:!0});var mVr=s(cP);Pmo=r(mVr,"UniSpeechSatModel"),mVr.forEach(t),$mo=r(d5e," (UniSpeechSat model)"),d5e.forEach(t),Imo=i(C),mp=n(C,"LI",{});var c5e=s(mp);JZ=n(c5e,"STRONG",{});var fVr=s(JZ);jmo=r(fVr,"van"),fVr.forEach(t),Nmo=r(c5e," \u2014 "),mP=n(c5e,"A",{href:!0});var gVr=s(mP);Dmo=r(gVr,"VanModel"),gVr.forEach(t),qmo=r(c5e," (VAN model)"),c5e.forEach(t),Gmo=i(C),fp=n(C,"LI",{});var m5e=s(fp);YZ=n(m5e,"STRONG",{});var hVr=s(YZ);Omo=r(hVr,"vilt"),hVr.forEach(t),Xmo=r(m5e," \u2014 "),fP=n(m5e,"A",{href:!0});var uVr=s(fP);Vmo=r(uVr,"ViltModel"),uVr.forEach(t),zmo=r(m5e," (ViLT model)"),m5e.forEach(t),Wmo=i(C),gp=n(C,"LI",{});var f5e=s(gp);KZ=n(f5e,"STRONG",{});var pVr=s(KZ);Qmo=r(pVr,"vision-text-dual-encoder"),pVr.forEach(t),Hmo=r(f5e," \u2014 "),gP=n(f5e,"A",{href:!0});var _Vr=s(gP);Umo=r(_Vr,"VisionTextDualEncoderModel"),_Vr.forEach(t),Jmo=r(f5e," (VisionTextDualEncoder model)"),f5e.forEach(t),Ymo=i(C),hp=n(C,"LI",{});var g5e=s(hp);ZZ=n(g5e,"STRONG",{});var bVr=s(ZZ);Kmo=r(bVr,"visual_bert"),bVr.forEach(t),Zmo=r(g5e," \u2014 "),hP=n(g5e,"A",{href:!0});var vVr=s(hP);efo=r(vVr,"VisualBertModel"),vVr.forEach(t),ofo=r(g5e," (VisualBert model)"),g5e.forEach(t),rfo=i(C),up=n(C,"LI",{});var h5e=s(up);eee=n(h5e,"STRONG",{});var TVr=s(eee);tfo=r(TVr,"vit"),TVr.forEach(t),afo=r(h5e," \u2014 "),uP=n(h5e,"A",{href:!0});var FVr=s(uP);nfo=r(FVr,"ViTModel"),FVr.forEach(t),sfo=r(h5e," (ViT model)"),h5e.forEach(t),lfo=i(C),pp=n(C,"LI",{});var u5e=s(pp);oee=n(u5e,"STRONG",{});var CVr=s(oee);ifo=r(CVr,"vit_mae"),CVr.forEach(t),dfo=r(u5e," \u2014 "),pP=n(u5e,"A",{href:!0});var MVr=s(pP);cfo=r(MVr,"ViTMAEModel"),MVr.forEach(t),mfo=r(u5e," (ViTMAE model)"),u5e.forEach(t),ffo=i(C),_p=n(C,"LI",{});var p5e=s(_p);ree=n(p5e,"STRONG",{});var EVr=s(ree);gfo=r(EVr,"wav2vec2"),EVr.forEach(t),hfo=r(p5e," \u2014 "),_P=n(p5e,"A",{href:!0});var yVr=s(_P);ufo=r(yVr,"Wav2Vec2Model"),yVr.forEach(t),pfo=r(p5e," (Wav2Vec2 model)"),p5e.forEach(t),_fo=i(C),bp=n(C,"LI",{});var _5e=s(bp);tee=n(_5e,"STRONG",{});var wVr=s(tee);bfo=r(wVr,"wavlm"),wVr.forEach(t),vfo=r(_5e," \u2014 "),bP=n(_5e,"A",{href:!0});var AVr=s(bP);Tfo=r(AVr,"WavLMModel"),AVr.forEach(t),Ffo=r(_5e," (WavLM model)"),_5e.forEach(t),Cfo=i(C),vp=n(C,"LI",{});var b5e=s(vp);aee=n(b5e,"STRONG",{});var LVr=s(aee);Mfo=r(LVr,"xglm"),LVr.forEach(t),Efo=r(b5e," \u2014 "),vP=n(b5e,"A",{href:!0});var BVr=s(vP);yfo=r(BVr,"XGLMModel"),BVr.forEach(t),wfo=r(b5e," (XGLM model)"),b5e.forEach(t),Afo=i(C),Tp=n(C,"LI",{});var v5e=s(Tp);nee=n(v5e,"STRONG",{});var xVr=s(nee);Lfo=r(xVr,"xlm"),xVr.forEach(t),Bfo=r(v5e," \u2014 "),TP=n(v5e,"A",{href:!0});var kVr=s(TP);xfo=r(kVr,"XLMModel"),kVr.forEach(t),kfo=r(v5e," (XLM model)"),v5e.forEach(t),Rfo=i(C),Fp=n(C,"LI",{});var T5e=s(Fp);see=n(T5e,"STRONG",{});var RVr=s(see);Sfo=r(RVr,"xlm-prophetnet"),RVr.forEach(t),Pfo=r(T5e," \u2014 "),FP=n(T5e,"A",{href:!0});var SVr=s(FP);$fo=r(SVr,"XLMProphetNetModel"),SVr.forEach(t),Ifo=r(T5e," (XLMProphetNet model)"),T5e.forEach(t),jfo=i(C),Cp=n(C,"LI",{});var F5e=s(Cp);lee=n(F5e,"STRONG",{});var PVr=s(lee);Nfo=r(PVr,"xlm-roberta"),PVr.forEach(t),Dfo=r(F5e," \u2014 "),CP=n(F5e,"A",{href:!0});var $Vr=s(CP);qfo=r($Vr,"XLMRobertaModel"),$Vr.forEach(t),Gfo=r(F5e," (XLM-RoBERTa model)"),F5e.forEach(t),Ofo=i(C),Mp=n(C,"LI",{});var C5e=s(Mp);iee=n(C5e,"STRONG",{});var IVr=s(iee);Xfo=r(IVr,"xlm-roberta-xl"),IVr.forEach(t),Vfo=r(C5e," \u2014 "),MP=n(C5e,"A",{href:!0});var jVr=s(MP);zfo=r(jVr,"XLMRobertaXLModel"),jVr.forEach(t),Wfo=r(C5e," (XLM-RoBERTa-XL model)"),C5e.forEach(t),Qfo=i(C),Ep=n(C,"LI",{});var M5e=s(Ep);dee=n(M5e,"STRONG",{});var NVr=s(dee);Hfo=r(NVr,"xlnet"),NVr.forEach(t),Ufo=r(M5e," \u2014 "),EP=n(M5e,"A",{href:!0});var DVr=s(EP);Jfo=r(DVr,"XLNetModel"),DVr.forEach(t),Yfo=r(M5e," (XLNet model)"),M5e.forEach(t),Kfo=i(C),yp=n(C,"LI",{});var E5e=s(yp);cee=n(E5e,"STRONG",{});var qVr=s(cee);Zfo=r(qVr,"yoso"),qVr.forEach(t),ego=r(E5e," \u2014 "),yP=n(E5e,"A",{href:!0});var GVr=s(yP);ogo=r(GVr,"YosoModel"),GVr.forEach(t),rgo=r(E5e," (YOSO model)"),E5e.forEach(t),C.forEach(t),tgo=i(qt),wp=n(qt,"P",{});var y5e=s(wp);ago=r(y5e,"The model is set in evaluation mode by default using "),mee=n(y5e,"CODE",{});var OVr=s(mee);ngo=r(OVr,"model.eval()"),OVr.forEach(t),sgo=r(y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fee=n(y5e,"CODE",{});var XVr=s(fee);lgo=r(XVr,"model.train()"),XVr.forEach(t),y5e.forEach(t),igo=i(qt),gee=n(qt,"P",{});var VVr=s(gee);dgo=r(VVr,"Examples:"),VVr.forEach(t),cgo=i(qt),f(Uy.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),kke=i(c),Zi=n(c,"H2",{class:!0});var qSe=s(Zi);Ap=n(qSe,"A",{id:!0,class:!0,href:!0});var zVr=s(Ap);hee=n(zVr,"SPAN",{});var WVr=s(hee);f(Jy.$$.fragment,WVr),WVr.forEach(t),zVr.forEach(t),mgo=i(qSe),uee=n(qSe,"SPAN",{});var QVr=s(uee);fgo=r(QVr,"AutoModelForPreTraining"),QVr.forEach(t),qSe.forEach(t),Rke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);f(Yy.$$.fragment,Hs),ggo=i(Hs),ed=n(Hs,"P",{});var nW=s(ed);hgo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pee=n(nW,"CODE",{});var HVr=s(pee);ugo=r(HVr,"from_pretrained()"),HVr.forEach(t),pgo=r(nW,"class method or the "),_ee=n(nW,"CODE",{});var UVr=s(_ee);_go=r(UVr,"from_config()"),UVr.forEach(t),bgo=r(nW,`class
method.`),nW.forEach(t),vgo=i(Hs),Ky=n(Hs,"P",{});var GSe=s(Ky);Tgo=r(GSe,"This class cannot be instantiated directly using "),bee=n(GSe,"CODE",{});var JVr=s(bee);Fgo=r(JVr,"__init__()"),JVr.forEach(t),Cgo=r(GSe," (throws an error)."),GSe.forEach(t),Mgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);f(Zy.$$.fragment,Us),Ego=i(Us),vee=n(Us,"P",{});var YVr=s(vee);ygo=r(YVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YVr.forEach(t),wgo=i(Us),od=n(Us,"P",{});var sW=s(od);Ago=r(sW,`Note:
Loading a model from its configuration file does `),Tee=n(sW,"STRONG",{});var KVr=s(Tee);Lgo=r(KVr,"not"),KVr.forEach(t),Bgo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fee=n(sW,"CODE",{});var ZVr=s(Fee);xgo=r(ZVr,"from_pretrained()"),ZVr.forEach(t),kgo=r(sW,"to load the model weights."),sW.forEach(t),Rgo=i(Us),Cee=n(Us,"P",{});var ezr=s(Cee);Sgo=r(ezr,"Examples:"),ezr.forEach(t),Pgo=i(Us),f(ew.$$.fragment,Us),Us.forEach(t),$go=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);f(ow.$$.fragment,Gt),Igo=i(Gt),Mee=n(Gt,"P",{});var ozr=s(Mee);jgo=r(ozr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ozr.forEach(t),Ngo=i(Gt),za=n(Gt,"P",{});var h5=s(za);Dgo=r(h5,"The model class to instantiate is selected based on the "),Eee=n(h5,"CODE",{});var rzr=s(Eee);qgo=r(rzr,"model_type"),rzr.forEach(t),Ggo=r(h5,` property of the config object (either
passed as an argument or loaded from `),yee=n(h5,"CODE",{});var tzr=s(yee);Ogo=r(tzr,"pretrained_model_name_or_path"),tzr.forEach(t),Xgo=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wee=n(h5,"CODE",{});var azr=s(wee);Vgo=r(azr,"pretrained_model_name_or_path"),azr.forEach(t),zgo=r(h5,":"),h5.forEach(t),Wgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);Lp=n(S,"LI",{});var w5e=s(Lp);Aee=n(w5e,"STRONG",{});var nzr=s(Aee);Qgo=r(nzr,"albert"),nzr.forEach(t),Hgo=r(w5e," \u2014 "),wP=n(w5e,"A",{href:!0});var szr=s(wP);Ugo=r(szr,"AlbertForPreTraining"),szr.forEach(t),Jgo=r(w5e," (ALBERT model)"),w5e.forEach(t),Ygo=i(S),Bp=n(S,"LI",{});var A5e=s(Bp);Lee=n(A5e,"STRONG",{});var lzr=s(Lee);Kgo=r(lzr,"bart"),lzr.forEach(t),Zgo=r(A5e," \u2014 "),AP=n(A5e,"A",{href:!0});var izr=s(AP);eho=r(izr,"BartForConditionalGeneration"),izr.forEach(t),oho=r(A5e," (BART model)"),A5e.forEach(t),rho=i(S),xp=n(S,"LI",{});var L5e=s(xp);Bee=n(L5e,"STRONG",{});var dzr=s(Bee);tho=r(dzr,"bert"),dzr.forEach(t),aho=r(L5e," \u2014 "),LP=n(L5e,"A",{href:!0});var czr=s(LP);nho=r(czr,"BertForPreTraining"),czr.forEach(t),sho=r(L5e," (BERT model)"),L5e.forEach(t),lho=i(S),kp=n(S,"LI",{});var B5e=s(kp);xee=n(B5e,"STRONG",{});var mzr=s(xee);iho=r(mzr,"big_bird"),mzr.forEach(t),dho=r(B5e," \u2014 "),BP=n(B5e,"A",{href:!0});var fzr=s(BP);cho=r(fzr,"BigBirdForPreTraining"),fzr.forEach(t),mho=r(B5e," (BigBird model)"),B5e.forEach(t),fho=i(S),Rp=n(S,"LI",{});var x5e=s(Rp);kee=n(x5e,"STRONG",{});var gzr=s(kee);gho=r(gzr,"camembert"),gzr.forEach(t),hho=r(x5e," \u2014 "),xP=n(x5e,"A",{href:!0});var hzr=s(xP);uho=r(hzr,"CamembertForMaskedLM"),hzr.forEach(t),pho=r(x5e," (CamemBERT model)"),x5e.forEach(t),_ho=i(S),Sp=n(S,"LI",{});var k5e=s(Sp);Ree=n(k5e,"STRONG",{});var uzr=s(Ree);bho=r(uzr,"ctrl"),uzr.forEach(t),vho=r(k5e," \u2014 "),kP=n(k5e,"A",{href:!0});var pzr=s(kP);Tho=r(pzr,"CTRLLMHeadModel"),pzr.forEach(t),Fho=r(k5e," (CTRL model)"),k5e.forEach(t),Cho=i(S),Pp=n(S,"LI",{});var R5e=s(Pp);See=n(R5e,"STRONG",{});var _zr=s(See);Mho=r(_zr,"data2vec-text"),_zr.forEach(t),Eho=r(R5e," \u2014 "),RP=n(R5e,"A",{href:!0});var bzr=s(RP);yho=r(bzr,"Data2VecTextForMaskedLM"),bzr.forEach(t),who=r(R5e," (Data2VecText model)"),R5e.forEach(t),Aho=i(S),$p=n(S,"LI",{});var S5e=s($p);Pee=n(S5e,"STRONG",{});var vzr=s(Pee);Lho=r(vzr,"deberta"),vzr.forEach(t),Bho=r(S5e," \u2014 "),SP=n(S5e,"A",{href:!0});var Tzr=s(SP);xho=r(Tzr,"DebertaForMaskedLM"),Tzr.forEach(t),kho=r(S5e," (DeBERTa model)"),S5e.forEach(t),Rho=i(S),Ip=n(S,"LI",{});var P5e=s(Ip);$ee=n(P5e,"STRONG",{});var Fzr=s($ee);Sho=r(Fzr,"deberta-v2"),Fzr.forEach(t),Pho=r(P5e," \u2014 "),PP=n(P5e,"A",{href:!0});var Czr=s(PP);$ho=r(Czr,"DebertaV2ForMaskedLM"),Czr.forEach(t),Iho=r(P5e," (DeBERTa-v2 model)"),P5e.forEach(t),jho=i(S),jp=n(S,"LI",{});var $5e=s(jp);Iee=n($5e,"STRONG",{});var Mzr=s(Iee);Nho=r(Mzr,"distilbert"),Mzr.forEach(t),Dho=r($5e," \u2014 "),$P=n($5e,"A",{href:!0});var Ezr=s($P);qho=r(Ezr,"DistilBertForMaskedLM"),Ezr.forEach(t),Gho=r($5e," (DistilBERT model)"),$5e.forEach(t),Oho=i(S),Np=n(S,"LI",{});var I5e=s(Np);jee=n(I5e,"STRONG",{});var yzr=s(jee);Xho=r(yzr,"electra"),yzr.forEach(t),Vho=r(I5e," \u2014 "),IP=n(I5e,"A",{href:!0});var wzr=s(IP);zho=r(wzr,"ElectraForPreTraining"),wzr.forEach(t),Who=r(I5e," (ELECTRA model)"),I5e.forEach(t),Qho=i(S),Dp=n(S,"LI",{});var j5e=s(Dp);Nee=n(j5e,"STRONG",{});var Azr=s(Nee);Hho=r(Azr,"flaubert"),Azr.forEach(t),Uho=r(j5e," \u2014 "),jP=n(j5e,"A",{href:!0});var Lzr=s(jP);Jho=r(Lzr,"FlaubertWithLMHeadModel"),Lzr.forEach(t),Yho=r(j5e," (FlauBERT model)"),j5e.forEach(t),Kho=i(S),qp=n(S,"LI",{});var N5e=s(qp);Dee=n(N5e,"STRONG",{});var Bzr=s(Dee);Zho=r(Bzr,"fnet"),Bzr.forEach(t),euo=r(N5e," \u2014 "),NP=n(N5e,"A",{href:!0});var xzr=s(NP);ouo=r(xzr,"FNetForPreTraining"),xzr.forEach(t),ruo=r(N5e," (FNet model)"),N5e.forEach(t),tuo=i(S),Gp=n(S,"LI",{});var D5e=s(Gp);qee=n(D5e,"STRONG",{});var kzr=s(qee);auo=r(kzr,"fsmt"),kzr.forEach(t),nuo=r(D5e," \u2014 "),DP=n(D5e,"A",{href:!0});var Rzr=s(DP);suo=r(Rzr,"FSMTForConditionalGeneration"),Rzr.forEach(t),luo=r(D5e," (FairSeq Machine-Translation model)"),D5e.forEach(t),iuo=i(S),Op=n(S,"LI",{});var q5e=s(Op);Gee=n(q5e,"STRONG",{});var Szr=s(Gee);duo=r(Szr,"funnel"),Szr.forEach(t),cuo=r(q5e," \u2014 "),qP=n(q5e,"A",{href:!0});var Pzr=s(qP);muo=r(Pzr,"FunnelForPreTraining"),Pzr.forEach(t),fuo=r(q5e," (Funnel Transformer model)"),q5e.forEach(t),guo=i(S),Xp=n(S,"LI",{});var G5e=s(Xp);Oee=n(G5e,"STRONG",{});var $zr=s(Oee);huo=r($zr,"gpt2"),$zr.forEach(t),uuo=r(G5e," \u2014 "),GP=n(G5e,"A",{href:!0});var Izr=s(GP);puo=r(Izr,"GPT2LMHeadModel"),Izr.forEach(t),_uo=r(G5e," (OpenAI GPT-2 model)"),G5e.forEach(t),buo=i(S),Vp=n(S,"LI",{});var O5e=s(Vp);Xee=n(O5e,"STRONG",{});var jzr=s(Xee);vuo=r(jzr,"ibert"),jzr.forEach(t),Tuo=r(O5e," \u2014 "),OP=n(O5e,"A",{href:!0});var Nzr=s(OP);Fuo=r(Nzr,"IBertForMaskedLM"),Nzr.forEach(t),Cuo=r(O5e," (I-BERT model)"),O5e.forEach(t),Muo=i(S),zp=n(S,"LI",{});var X5e=s(zp);Vee=n(X5e,"STRONG",{});var Dzr=s(Vee);Euo=r(Dzr,"layoutlm"),Dzr.forEach(t),yuo=r(X5e," \u2014 "),XP=n(X5e,"A",{href:!0});var qzr=s(XP);wuo=r(qzr,"LayoutLMForMaskedLM"),qzr.forEach(t),Auo=r(X5e," (LayoutLM model)"),X5e.forEach(t),Luo=i(S),Wp=n(S,"LI",{});var V5e=s(Wp);zee=n(V5e,"STRONG",{});var Gzr=s(zee);Buo=r(Gzr,"longformer"),Gzr.forEach(t),xuo=r(V5e," \u2014 "),VP=n(V5e,"A",{href:!0});var Ozr=s(VP);kuo=r(Ozr,"LongformerForMaskedLM"),Ozr.forEach(t),Ruo=r(V5e," (Longformer model)"),V5e.forEach(t),Suo=i(S),Qp=n(S,"LI",{});var z5e=s(Qp);Wee=n(z5e,"STRONG",{});var Xzr=s(Wee);Puo=r(Xzr,"lxmert"),Xzr.forEach(t),$uo=r(z5e," \u2014 "),zP=n(z5e,"A",{href:!0});var Vzr=s(zP);Iuo=r(Vzr,"LxmertForPreTraining"),Vzr.forEach(t),juo=r(z5e," (LXMERT model)"),z5e.forEach(t),Nuo=i(S),Hp=n(S,"LI",{});var W5e=s(Hp);Qee=n(W5e,"STRONG",{});var zzr=s(Qee);Duo=r(zzr,"megatron-bert"),zzr.forEach(t),quo=r(W5e," \u2014 "),WP=n(W5e,"A",{href:!0});var Wzr=s(WP);Guo=r(Wzr,"MegatronBertForPreTraining"),Wzr.forEach(t),Ouo=r(W5e," (MegatronBert model)"),W5e.forEach(t),Xuo=i(S),Up=n(S,"LI",{});var Q5e=s(Up);Hee=n(Q5e,"STRONG",{});var Qzr=s(Hee);Vuo=r(Qzr,"mobilebert"),Qzr.forEach(t),zuo=r(Q5e," \u2014 "),QP=n(Q5e,"A",{href:!0});var Hzr=s(QP);Wuo=r(Hzr,"MobileBertForPreTraining"),Hzr.forEach(t),Quo=r(Q5e," (MobileBERT model)"),Q5e.forEach(t),Huo=i(S),Jp=n(S,"LI",{});var H5e=s(Jp);Uee=n(H5e,"STRONG",{});var Uzr=s(Uee);Uuo=r(Uzr,"mpnet"),Uzr.forEach(t),Juo=r(H5e," \u2014 "),HP=n(H5e,"A",{href:!0});var Jzr=s(HP);Yuo=r(Jzr,"MPNetForMaskedLM"),Jzr.forEach(t),Kuo=r(H5e," (MPNet model)"),H5e.forEach(t),Zuo=i(S),Yp=n(S,"LI",{});var U5e=s(Yp);Jee=n(U5e,"STRONG",{});var Yzr=s(Jee);epo=r(Yzr,"openai-gpt"),Yzr.forEach(t),opo=r(U5e," \u2014 "),UP=n(U5e,"A",{href:!0});var Kzr=s(UP);rpo=r(Kzr,"OpenAIGPTLMHeadModel"),Kzr.forEach(t),tpo=r(U5e," (OpenAI GPT model)"),U5e.forEach(t),apo=i(S),Kp=n(S,"LI",{});var J5e=s(Kp);Yee=n(J5e,"STRONG",{});var Zzr=s(Yee);npo=r(Zzr,"retribert"),Zzr.forEach(t),spo=r(J5e," \u2014 "),JP=n(J5e,"A",{href:!0});var eWr=s(JP);lpo=r(eWr,"RetriBertModel"),eWr.forEach(t),ipo=r(J5e," (RetriBERT model)"),J5e.forEach(t),dpo=i(S),Zp=n(S,"LI",{});var Y5e=s(Zp);Kee=n(Y5e,"STRONG",{});var oWr=s(Kee);cpo=r(oWr,"roberta"),oWr.forEach(t),mpo=r(Y5e," \u2014 "),YP=n(Y5e,"A",{href:!0});var rWr=s(YP);fpo=r(rWr,"RobertaForMaskedLM"),rWr.forEach(t),gpo=r(Y5e," (RoBERTa model)"),Y5e.forEach(t),hpo=i(S),e_=n(S,"LI",{});var K5e=s(e_);Zee=n(K5e,"STRONG",{});var tWr=s(Zee);upo=r(tWr,"squeezebert"),tWr.forEach(t),ppo=r(K5e," \u2014 "),KP=n(K5e,"A",{href:!0});var aWr=s(KP);_po=r(aWr,"SqueezeBertForMaskedLM"),aWr.forEach(t),bpo=r(K5e," (SqueezeBERT model)"),K5e.forEach(t),vpo=i(S),o_=n(S,"LI",{});var Z5e=s(o_);eoe=n(Z5e,"STRONG",{});var nWr=s(eoe);Tpo=r(nWr,"t5"),nWr.forEach(t),Fpo=r(Z5e," \u2014 "),ZP=n(Z5e,"A",{href:!0});var sWr=s(ZP);Cpo=r(sWr,"T5ForConditionalGeneration"),sWr.forEach(t),Mpo=r(Z5e," (T5 model)"),Z5e.forEach(t),Epo=i(S),r_=n(S,"LI",{});var eye=s(r_);ooe=n(eye,"STRONG",{});var lWr=s(ooe);ypo=r(lWr,"tapas"),lWr.forEach(t),wpo=r(eye," \u2014 "),e$=n(eye,"A",{href:!0});var iWr=s(e$);Apo=r(iWr,"TapasForMaskedLM"),iWr.forEach(t),Lpo=r(eye," (TAPAS model)"),eye.forEach(t),Bpo=i(S),t_=n(S,"LI",{});var oye=s(t_);roe=n(oye,"STRONG",{});var dWr=s(roe);xpo=r(dWr,"transfo-xl"),dWr.forEach(t),kpo=r(oye," \u2014 "),o$=n(oye,"A",{href:!0});var cWr=s(o$);Rpo=r(cWr,"TransfoXLLMHeadModel"),cWr.forEach(t),Spo=r(oye," (Transformer-XL model)"),oye.forEach(t),Ppo=i(S),a_=n(S,"LI",{});var rye=s(a_);toe=n(rye,"STRONG",{});var mWr=s(toe);$po=r(mWr,"unispeech"),mWr.forEach(t),Ipo=r(rye," \u2014 "),r$=n(rye,"A",{href:!0});var fWr=s(r$);jpo=r(fWr,"UniSpeechForPreTraining"),fWr.forEach(t),Npo=r(rye," (UniSpeech model)"),rye.forEach(t),Dpo=i(S),n_=n(S,"LI",{});var tye=s(n_);aoe=n(tye,"STRONG",{});var gWr=s(aoe);qpo=r(gWr,"unispeech-sat"),gWr.forEach(t),Gpo=r(tye," \u2014 "),t$=n(tye,"A",{href:!0});var hWr=s(t$);Opo=r(hWr,"UniSpeechSatForPreTraining"),hWr.forEach(t),Xpo=r(tye," (UniSpeechSat model)"),tye.forEach(t),Vpo=i(S),s_=n(S,"LI",{});var aye=s(s_);noe=n(aye,"STRONG",{});var uWr=s(noe);zpo=r(uWr,"visual_bert"),uWr.forEach(t),Wpo=r(aye," \u2014 "),a$=n(aye,"A",{href:!0});var pWr=s(a$);Qpo=r(pWr,"VisualBertForPreTraining"),pWr.forEach(t),Hpo=r(aye," (VisualBert model)"),aye.forEach(t),Upo=i(S),l_=n(S,"LI",{});var nye=s(l_);soe=n(nye,"STRONG",{});var _Wr=s(soe);Jpo=r(_Wr,"vit_mae"),_Wr.forEach(t),Ypo=r(nye," \u2014 "),n$=n(nye,"A",{href:!0});var bWr=s(n$);Kpo=r(bWr,"ViTMAEForPreTraining"),bWr.forEach(t),Zpo=r(nye," (ViTMAE model)"),nye.forEach(t),e_o=i(S),i_=n(S,"LI",{});var sye=s(i_);loe=n(sye,"STRONG",{});var vWr=s(loe);o_o=r(vWr,"wav2vec2"),vWr.forEach(t),r_o=r(sye," \u2014 "),s$=n(sye,"A",{href:!0});var TWr=s(s$);t_o=r(TWr,"Wav2Vec2ForPreTraining"),TWr.forEach(t),a_o=r(sye," (Wav2Vec2 model)"),sye.forEach(t),n_o=i(S),d_=n(S,"LI",{});var lye=s(d_);ioe=n(lye,"STRONG",{});var FWr=s(ioe);s_o=r(FWr,"xlm"),FWr.forEach(t),l_o=r(lye," \u2014 "),l$=n(lye,"A",{href:!0});var CWr=s(l$);i_o=r(CWr,"XLMWithLMHeadModel"),CWr.forEach(t),d_o=r(lye," (XLM model)"),lye.forEach(t),c_o=i(S),c_=n(S,"LI",{});var iye=s(c_);doe=n(iye,"STRONG",{});var MWr=s(doe);m_o=r(MWr,"xlm-roberta"),MWr.forEach(t),f_o=r(iye," \u2014 "),i$=n(iye,"A",{href:!0});var EWr=s(i$);g_o=r(EWr,"XLMRobertaForMaskedLM"),EWr.forEach(t),h_o=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),u_o=i(S),m_=n(S,"LI",{});var dye=s(m_);coe=n(dye,"STRONG",{});var yWr=s(coe);p_o=r(yWr,"xlm-roberta-xl"),yWr.forEach(t),__o=r(dye," \u2014 "),d$=n(dye,"A",{href:!0});var wWr=s(d$);b_o=r(wWr,"XLMRobertaXLForMaskedLM"),wWr.forEach(t),v_o=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),T_o=i(S),f_=n(S,"LI",{});var cye=s(f_);moe=n(cye,"STRONG",{});var AWr=s(moe);F_o=r(AWr,"xlnet"),AWr.forEach(t),C_o=r(cye," \u2014 "),c$=n(cye,"A",{href:!0});var LWr=s(c$);M_o=r(LWr,"XLNetLMHeadModel"),LWr.forEach(t),E_o=r(cye," (XLNet model)"),cye.forEach(t),S.forEach(t),y_o=i(Gt),g_=n(Gt,"P",{});var mye=s(g_);w_o=r(mye,"The model is set in evaluation mode by default using "),foe=n(mye,"CODE",{});var BWr=s(foe);A_o=r(BWr,"model.eval()"),BWr.forEach(t),L_o=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),goe=n(mye,"CODE",{});var xWr=s(goe);B_o=r(xWr,"model.train()"),xWr.forEach(t),mye.forEach(t),x_o=i(Gt),hoe=n(Gt,"P",{});var kWr=s(hoe);k_o=r(kWr,"Examples:"),kWr.forEach(t),R_o=i(Gt),f(rw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Ske=i(c),rd=n(c,"H2",{class:!0});var OSe=s(rd);h_=n(OSe,"A",{id:!0,class:!0,href:!0});var RWr=s(h_);uoe=n(RWr,"SPAN",{});var SWr=s(uoe);f(tw.$$.fragment,SWr),SWr.forEach(t),RWr.forEach(t),S_o=i(OSe),poe=n(OSe,"SPAN",{});var PWr=s(poe);P_o=r(PWr,"AutoModelForCausalLM"),PWr.forEach(t),OSe.forEach(t),Pke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);f(aw.$$.fragment,Js),$_o=i(Js),td=n(Js,"P",{});var lW=s(td);I_o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_oe=n(lW,"CODE",{});var $Wr=s(_oe);j_o=r($Wr,"from_pretrained()"),$Wr.forEach(t),N_o=r(lW,"class method or the "),boe=n(lW,"CODE",{});var IWr=s(boe);D_o=r(IWr,"from_config()"),IWr.forEach(t),q_o=r(lW,`class
method.`),lW.forEach(t),G_o=i(Js),nw=n(Js,"P",{});var XSe=s(nw);O_o=r(XSe,"This class cannot be instantiated directly using "),voe=n(XSe,"CODE",{});var jWr=s(voe);X_o=r(jWr,"__init__()"),jWr.forEach(t),V_o=r(XSe," (throws an error)."),XSe.forEach(t),z_o=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);f(sw.$$.fragment,Ys),W_o=i(Ys),Toe=n(Ys,"P",{});var NWr=s(Toe);Q_o=r(NWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NWr.forEach(t),H_o=i(Ys),ad=n(Ys,"P",{});var iW=s(ad);U_o=r(iW,`Note:
Loading a model from its configuration file does `),Foe=n(iW,"STRONG",{});var DWr=s(Foe);J_o=r(DWr,"not"),DWr.forEach(t),Y_o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Coe=n(iW,"CODE",{});var qWr=s(Coe);K_o=r(qWr,"from_pretrained()"),qWr.forEach(t),Z_o=r(iW,"to load the model weights."),iW.forEach(t),ebo=i(Ys),Moe=n(Ys,"P",{});var GWr=s(Moe);obo=r(GWr,"Examples:"),GWr.forEach(t),rbo=i(Ys),f(lw.$$.fragment,Ys),Ys.forEach(t),tbo=i(Js),De=n(Js,"DIV",{class:!0});var Ot=s(De);f(iw.$$.fragment,Ot),abo=i(Ot),Eoe=n(Ot,"P",{});var OWr=s(Eoe);nbo=r(OWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OWr.forEach(t),sbo=i(Ot),Wa=n(Ot,"P",{});var u5=s(Wa);lbo=r(u5,"The model class to instantiate is selected based on the "),yoe=n(u5,"CODE",{});var XWr=s(yoe);ibo=r(XWr,"model_type"),XWr.forEach(t),dbo=r(u5,` property of the config object (either
passed as an argument or loaded from `),woe=n(u5,"CODE",{});var VWr=s(woe);cbo=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),mbo=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(u5,"CODE",{});var zWr=s(Aoe);fbo=r(zWr,"pretrained_model_name_or_path"),zWr.forEach(t),gbo=r(u5,":"),u5.forEach(t),hbo=i(Ot),$=n(Ot,"UL",{});var j=s($);u_=n(j,"LI",{});var fye=s(u_);Loe=n(fye,"STRONG",{});var WWr=s(Loe);ubo=r(WWr,"bart"),WWr.forEach(t),pbo=r(fye," \u2014 "),m$=n(fye,"A",{href:!0});var QWr=s(m$);_bo=r(QWr,"BartForCausalLM"),QWr.forEach(t),bbo=r(fye," (BART model)"),fye.forEach(t),vbo=i(j),p_=n(j,"LI",{});var gye=s(p_);Boe=n(gye,"STRONG",{});var HWr=s(Boe);Tbo=r(HWr,"bert"),HWr.forEach(t),Fbo=r(gye," \u2014 "),f$=n(gye,"A",{href:!0});var UWr=s(f$);Cbo=r(UWr,"BertLMHeadModel"),UWr.forEach(t),Mbo=r(gye," (BERT model)"),gye.forEach(t),Ebo=i(j),__=n(j,"LI",{});var hye=s(__);xoe=n(hye,"STRONG",{});var JWr=s(xoe);ybo=r(JWr,"bert-generation"),JWr.forEach(t),wbo=r(hye," \u2014 "),g$=n(hye,"A",{href:!0});var YWr=s(g$);Abo=r(YWr,"BertGenerationDecoder"),YWr.forEach(t),Lbo=r(hye," (Bert Generation model)"),hye.forEach(t),Bbo=i(j),b_=n(j,"LI",{});var uye=s(b_);koe=n(uye,"STRONG",{});var KWr=s(koe);xbo=r(KWr,"big_bird"),KWr.forEach(t),kbo=r(uye," \u2014 "),h$=n(uye,"A",{href:!0});var ZWr=s(h$);Rbo=r(ZWr,"BigBirdForCausalLM"),ZWr.forEach(t),Sbo=r(uye," (BigBird model)"),uye.forEach(t),Pbo=i(j),v_=n(j,"LI",{});var pye=s(v_);Roe=n(pye,"STRONG",{});var eQr=s(Roe);$bo=r(eQr,"bigbird_pegasus"),eQr.forEach(t),Ibo=r(pye," \u2014 "),u$=n(pye,"A",{href:!0});var oQr=s(u$);jbo=r(oQr,"BigBirdPegasusForCausalLM"),oQr.forEach(t),Nbo=r(pye," (BigBirdPegasus model)"),pye.forEach(t),Dbo=i(j),T_=n(j,"LI",{});var _ye=s(T_);Soe=n(_ye,"STRONG",{});var rQr=s(Soe);qbo=r(rQr,"blenderbot"),rQr.forEach(t),Gbo=r(_ye," \u2014 "),p$=n(_ye,"A",{href:!0});var tQr=s(p$);Obo=r(tQr,"BlenderbotForCausalLM"),tQr.forEach(t),Xbo=r(_ye," (Blenderbot model)"),_ye.forEach(t),Vbo=i(j),F_=n(j,"LI",{});var bye=s(F_);Poe=n(bye,"STRONG",{});var aQr=s(Poe);zbo=r(aQr,"blenderbot-small"),aQr.forEach(t),Wbo=r(bye," \u2014 "),_$=n(bye,"A",{href:!0});var nQr=s(_$);Qbo=r(nQr,"BlenderbotSmallForCausalLM"),nQr.forEach(t),Hbo=r(bye," (BlenderbotSmall model)"),bye.forEach(t),Ubo=i(j),C_=n(j,"LI",{});var vye=s(C_);$oe=n(vye,"STRONG",{});var sQr=s($oe);Jbo=r(sQr,"camembert"),sQr.forEach(t),Ybo=r(vye," \u2014 "),b$=n(vye,"A",{href:!0});var lQr=s(b$);Kbo=r(lQr,"CamembertForCausalLM"),lQr.forEach(t),Zbo=r(vye," (CamemBERT model)"),vye.forEach(t),e2o=i(j),M_=n(j,"LI",{});var Tye=s(M_);Ioe=n(Tye,"STRONG",{});var iQr=s(Ioe);o2o=r(iQr,"ctrl"),iQr.forEach(t),r2o=r(Tye," \u2014 "),v$=n(Tye,"A",{href:!0});var dQr=s(v$);t2o=r(dQr,"CTRLLMHeadModel"),dQr.forEach(t),a2o=r(Tye," (CTRL model)"),Tye.forEach(t),n2o=i(j),E_=n(j,"LI",{});var Fye=s(E_);joe=n(Fye,"STRONG",{});var cQr=s(joe);s2o=r(cQr,"data2vec-text"),cQr.forEach(t),l2o=r(Fye," \u2014 "),T$=n(Fye,"A",{href:!0});var mQr=s(T$);i2o=r(mQr,"Data2VecTextForCausalLM"),mQr.forEach(t),d2o=r(Fye," (Data2VecText model)"),Fye.forEach(t),c2o=i(j),y_=n(j,"LI",{});var Cye=s(y_);Noe=n(Cye,"STRONG",{});var fQr=s(Noe);m2o=r(fQr,"electra"),fQr.forEach(t),f2o=r(Cye," \u2014 "),F$=n(Cye,"A",{href:!0});var gQr=s(F$);g2o=r(gQr,"ElectraForCausalLM"),gQr.forEach(t),h2o=r(Cye," (ELECTRA model)"),Cye.forEach(t),u2o=i(j),w_=n(j,"LI",{});var Mye=s(w_);Doe=n(Mye,"STRONG",{});var hQr=s(Doe);p2o=r(hQr,"gpt2"),hQr.forEach(t),_2o=r(Mye," \u2014 "),C$=n(Mye,"A",{href:!0});var uQr=s(C$);b2o=r(uQr,"GPT2LMHeadModel"),uQr.forEach(t),v2o=r(Mye," (OpenAI GPT-2 model)"),Mye.forEach(t),T2o=i(j),A_=n(j,"LI",{});var Eye=s(A_);qoe=n(Eye,"STRONG",{});var pQr=s(qoe);F2o=r(pQr,"gpt_neo"),pQr.forEach(t),C2o=r(Eye," \u2014 "),M$=n(Eye,"A",{href:!0});var _Qr=s(M$);M2o=r(_Qr,"GPTNeoForCausalLM"),_Qr.forEach(t),E2o=r(Eye," (GPT Neo model)"),Eye.forEach(t),y2o=i(j),L_=n(j,"LI",{});var yye=s(L_);Goe=n(yye,"STRONG",{});var bQr=s(Goe);w2o=r(bQr,"gptj"),bQr.forEach(t),A2o=r(yye," \u2014 "),E$=n(yye,"A",{href:!0});var vQr=s(E$);L2o=r(vQr,"GPTJForCausalLM"),vQr.forEach(t),B2o=r(yye," (GPT-J model)"),yye.forEach(t),x2o=i(j),B_=n(j,"LI",{});var wye=s(B_);Ooe=n(wye,"STRONG",{});var TQr=s(Ooe);k2o=r(TQr,"marian"),TQr.forEach(t),R2o=r(wye," \u2014 "),y$=n(wye,"A",{href:!0});var FQr=s(y$);S2o=r(FQr,"MarianForCausalLM"),FQr.forEach(t),P2o=r(wye," (Marian model)"),wye.forEach(t),$2o=i(j),x_=n(j,"LI",{});var Aye=s(x_);Xoe=n(Aye,"STRONG",{});var CQr=s(Xoe);I2o=r(CQr,"mbart"),CQr.forEach(t),j2o=r(Aye," \u2014 "),w$=n(Aye,"A",{href:!0});var MQr=s(w$);N2o=r(MQr,"MBartForCausalLM"),MQr.forEach(t),D2o=r(Aye," (mBART model)"),Aye.forEach(t),q2o=i(j),k_=n(j,"LI",{});var Lye=s(k_);Voe=n(Lye,"STRONG",{});var EQr=s(Voe);G2o=r(EQr,"megatron-bert"),EQr.forEach(t),O2o=r(Lye," \u2014 "),A$=n(Lye,"A",{href:!0});var yQr=s(A$);X2o=r(yQr,"MegatronBertForCausalLM"),yQr.forEach(t),V2o=r(Lye," (MegatronBert model)"),Lye.forEach(t),z2o=i(j),R_=n(j,"LI",{});var Bye=s(R_);zoe=n(Bye,"STRONG",{});var wQr=s(zoe);W2o=r(wQr,"openai-gpt"),wQr.forEach(t),Q2o=r(Bye," \u2014 "),L$=n(Bye,"A",{href:!0});var AQr=s(L$);H2o=r(AQr,"OpenAIGPTLMHeadModel"),AQr.forEach(t),U2o=r(Bye," (OpenAI GPT model)"),Bye.forEach(t),J2o=i(j),S_=n(j,"LI",{});var xye=s(S_);Woe=n(xye,"STRONG",{});var LQr=s(Woe);Y2o=r(LQr,"pegasus"),LQr.forEach(t),K2o=r(xye," \u2014 "),B$=n(xye,"A",{href:!0});var BQr=s(B$);Z2o=r(BQr,"PegasusForCausalLM"),BQr.forEach(t),evo=r(xye," (Pegasus model)"),xye.forEach(t),ovo=i(j),P_=n(j,"LI",{});var kye=s(P_);Qoe=n(kye,"STRONG",{});var xQr=s(Qoe);rvo=r(xQr,"plbart"),xQr.forEach(t),tvo=r(kye," \u2014 "),x$=n(kye,"A",{href:!0});var kQr=s(x$);avo=r(kQr,"PLBartForCausalLM"),kQr.forEach(t),nvo=r(kye," (PLBart model)"),kye.forEach(t),svo=i(j),$_=n(j,"LI",{});var Rye=s($_);Hoe=n(Rye,"STRONG",{});var RQr=s(Hoe);lvo=r(RQr,"prophetnet"),RQr.forEach(t),ivo=r(Rye," \u2014 "),k$=n(Rye,"A",{href:!0});var SQr=s(k$);dvo=r(SQr,"ProphetNetForCausalLM"),SQr.forEach(t),cvo=r(Rye," (ProphetNet model)"),Rye.forEach(t),mvo=i(j),I_=n(j,"LI",{});var Sye=s(I_);Uoe=n(Sye,"STRONG",{});var PQr=s(Uoe);fvo=r(PQr,"qdqbert"),PQr.forEach(t),gvo=r(Sye," \u2014 "),R$=n(Sye,"A",{href:!0});var $Qr=s(R$);hvo=r($Qr,"QDQBertLMHeadModel"),$Qr.forEach(t),uvo=r(Sye," (QDQBert model)"),Sye.forEach(t),pvo=i(j),j_=n(j,"LI",{});var Pye=s(j_);Joe=n(Pye,"STRONG",{});var IQr=s(Joe);_vo=r(IQr,"reformer"),IQr.forEach(t),bvo=r(Pye," \u2014 "),S$=n(Pye,"A",{href:!0});var jQr=s(S$);vvo=r(jQr,"ReformerModelWithLMHead"),jQr.forEach(t),Tvo=r(Pye," (Reformer model)"),Pye.forEach(t),Fvo=i(j),N_=n(j,"LI",{});var $ye=s(N_);Yoe=n($ye,"STRONG",{});var NQr=s(Yoe);Cvo=r(NQr,"rembert"),NQr.forEach(t),Mvo=r($ye," \u2014 "),P$=n($ye,"A",{href:!0});var DQr=s(P$);Evo=r(DQr,"RemBertForCausalLM"),DQr.forEach(t),yvo=r($ye," (RemBERT model)"),$ye.forEach(t),wvo=i(j),D_=n(j,"LI",{});var Iye=s(D_);Koe=n(Iye,"STRONG",{});var qQr=s(Koe);Avo=r(qQr,"roberta"),qQr.forEach(t),Lvo=r(Iye," \u2014 "),$$=n(Iye,"A",{href:!0});var GQr=s($$);Bvo=r(GQr,"RobertaForCausalLM"),GQr.forEach(t),xvo=r(Iye," (RoBERTa model)"),Iye.forEach(t),kvo=i(j),q_=n(j,"LI",{});var jye=s(q_);Zoe=n(jye,"STRONG",{});var OQr=s(Zoe);Rvo=r(OQr,"roformer"),OQr.forEach(t),Svo=r(jye," \u2014 "),I$=n(jye,"A",{href:!0});var XQr=s(I$);Pvo=r(XQr,"RoFormerForCausalLM"),XQr.forEach(t),$vo=r(jye," (RoFormer model)"),jye.forEach(t),Ivo=i(j),G_=n(j,"LI",{});var Nye=s(G_);ere=n(Nye,"STRONG",{});var VQr=s(ere);jvo=r(VQr,"speech_to_text_2"),VQr.forEach(t),Nvo=r(Nye," \u2014 "),j$=n(Nye,"A",{href:!0});var zQr=s(j$);Dvo=r(zQr,"Speech2Text2ForCausalLM"),zQr.forEach(t),qvo=r(Nye," (Speech2Text2 model)"),Nye.forEach(t),Gvo=i(j),O_=n(j,"LI",{});var Dye=s(O_);ore=n(Dye,"STRONG",{});var WQr=s(ore);Ovo=r(WQr,"transfo-xl"),WQr.forEach(t),Xvo=r(Dye," \u2014 "),N$=n(Dye,"A",{href:!0});var QQr=s(N$);Vvo=r(QQr,"TransfoXLLMHeadModel"),QQr.forEach(t),zvo=r(Dye," (Transformer-XL model)"),Dye.forEach(t),Wvo=i(j),X_=n(j,"LI",{});var qye=s(X_);rre=n(qye,"STRONG",{});var HQr=s(rre);Qvo=r(HQr,"trocr"),HQr.forEach(t),Hvo=r(qye," \u2014 "),D$=n(qye,"A",{href:!0});var UQr=s(D$);Uvo=r(UQr,"TrOCRForCausalLM"),UQr.forEach(t),Jvo=r(qye," (TrOCR model)"),qye.forEach(t),Yvo=i(j),V_=n(j,"LI",{});var Gye=s(V_);tre=n(Gye,"STRONG",{});var JQr=s(tre);Kvo=r(JQr,"xglm"),JQr.forEach(t),Zvo=r(Gye," \u2014 "),q$=n(Gye,"A",{href:!0});var YQr=s(q$);eTo=r(YQr,"XGLMForCausalLM"),YQr.forEach(t),oTo=r(Gye," (XGLM model)"),Gye.forEach(t),rTo=i(j),z_=n(j,"LI",{});var Oye=s(z_);are=n(Oye,"STRONG",{});var KQr=s(are);tTo=r(KQr,"xlm"),KQr.forEach(t),aTo=r(Oye," \u2014 "),G$=n(Oye,"A",{href:!0});var ZQr=s(G$);nTo=r(ZQr,"XLMWithLMHeadModel"),ZQr.forEach(t),sTo=r(Oye," (XLM model)"),Oye.forEach(t),lTo=i(j),W_=n(j,"LI",{});var Xye=s(W_);nre=n(Xye,"STRONG",{});var eHr=s(nre);iTo=r(eHr,"xlm-prophetnet"),eHr.forEach(t),dTo=r(Xye," \u2014 "),O$=n(Xye,"A",{href:!0});var oHr=s(O$);cTo=r(oHr,"XLMProphetNetForCausalLM"),oHr.forEach(t),mTo=r(Xye," (XLMProphetNet model)"),Xye.forEach(t),fTo=i(j),Q_=n(j,"LI",{});var Vye=s(Q_);sre=n(Vye,"STRONG",{});var rHr=s(sre);gTo=r(rHr,"xlm-roberta"),rHr.forEach(t),hTo=r(Vye," \u2014 "),X$=n(Vye,"A",{href:!0});var tHr=s(X$);uTo=r(tHr,"XLMRobertaForCausalLM"),tHr.forEach(t),pTo=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),_To=i(j),H_=n(j,"LI",{});var zye=s(H_);lre=n(zye,"STRONG",{});var aHr=s(lre);bTo=r(aHr,"xlm-roberta-xl"),aHr.forEach(t),vTo=r(zye," \u2014 "),V$=n(zye,"A",{href:!0});var nHr=s(V$);TTo=r(nHr,"XLMRobertaXLForCausalLM"),nHr.forEach(t),FTo=r(zye," (XLM-RoBERTa-XL model)"),zye.forEach(t),CTo=i(j),U_=n(j,"LI",{});var Wye=s(U_);ire=n(Wye,"STRONG",{});var sHr=s(ire);MTo=r(sHr,"xlnet"),sHr.forEach(t),ETo=r(Wye," \u2014 "),z$=n(Wye,"A",{href:!0});var lHr=s(z$);yTo=r(lHr,"XLNetLMHeadModel"),lHr.forEach(t),wTo=r(Wye," (XLNet model)"),Wye.forEach(t),j.forEach(t),ATo=i(Ot),J_=n(Ot,"P",{});var Qye=s(J_);LTo=r(Qye,"The model is set in evaluation mode by default using "),dre=n(Qye,"CODE",{});var iHr=s(dre);BTo=r(iHr,"model.eval()"),iHr.forEach(t),xTo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cre=n(Qye,"CODE",{});var dHr=s(cre);kTo=r(dHr,"model.train()"),dHr.forEach(t),Qye.forEach(t),RTo=i(Ot),mre=n(Ot,"P",{});var cHr=s(mre);STo=r(cHr,"Examples:"),cHr.forEach(t),PTo=i(Ot),f(dw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),$ke=i(c),nd=n(c,"H2",{class:!0});var VSe=s(nd);Y_=n(VSe,"A",{id:!0,class:!0,href:!0});var mHr=s(Y_);fre=n(mHr,"SPAN",{});var fHr=s(fre);f(cw.$$.fragment,fHr),fHr.forEach(t),mHr.forEach(t),$To=i(VSe),gre=n(VSe,"SPAN",{});var gHr=s(gre);ITo=r(gHr,"AutoModelForMaskedLM"),gHr.forEach(t),VSe.forEach(t),Ike=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);f(mw.$$.fragment,Ks),jTo=i(Ks),sd=n(Ks,"P",{});var dW=s(sd);NTo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hre=n(dW,"CODE",{});var hHr=s(hre);DTo=r(hHr,"from_pretrained()"),hHr.forEach(t),qTo=r(dW,"class method or the "),ure=n(dW,"CODE",{});var uHr=s(ure);GTo=r(uHr,"from_config()"),uHr.forEach(t),OTo=r(dW,`class
method.`),dW.forEach(t),XTo=i(Ks),fw=n(Ks,"P",{});var zSe=s(fw);VTo=r(zSe,"This class cannot be instantiated directly using "),pre=n(zSe,"CODE",{});var pHr=s(pre);zTo=r(pHr,"__init__()"),pHr.forEach(t),WTo=r(zSe," (throws an error)."),zSe.forEach(t),QTo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);f(gw.$$.fragment,Zs),HTo=i(Zs),_re=n(Zs,"P",{});var _Hr=s(_re);UTo=r(_Hr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Hr.forEach(t),JTo=i(Zs),ld=n(Zs,"P",{});var cW=s(ld);YTo=r(cW,`Note:
Loading a model from its configuration file does `),bre=n(cW,"STRONG",{});var bHr=s(bre);KTo=r(bHr,"not"),bHr.forEach(t),ZTo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(cW,"CODE",{});var vHr=s(vre);e1o=r(vHr,"from_pretrained()"),vHr.forEach(t),o1o=r(cW,"to load the model weights."),cW.forEach(t),r1o=i(Zs),Tre=n(Zs,"P",{});var THr=s(Tre);t1o=r(THr,"Examples:"),THr.forEach(t),a1o=i(Zs),f(hw.$$.fragment,Zs),Zs.forEach(t),n1o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);f(uw.$$.fragment,Xt),s1o=i(Xt),Fre=n(Xt,"P",{});var FHr=s(Fre);l1o=r(FHr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FHr.forEach(t),i1o=i(Xt),Qa=n(Xt,"P",{});var p5=s(Qa);d1o=r(p5,"The model class to instantiate is selected based on the "),Cre=n(p5,"CODE",{});var CHr=s(Cre);c1o=r(CHr,"model_type"),CHr.forEach(t),m1o=r(p5,` property of the config object (either
passed as an argument or loaded from `),Mre=n(p5,"CODE",{});var MHr=s(Mre);f1o=r(MHr,"pretrained_model_name_or_path"),MHr.forEach(t),g1o=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ere=n(p5,"CODE",{});var EHr=s(Ere);h1o=r(EHr,"pretrained_model_name_or_path"),EHr.forEach(t),u1o=r(p5,":"),p5.forEach(t),p1o=i(Xt),I=n(Xt,"UL",{});var N=s(I);K_=n(N,"LI",{});var Hye=s(K_);yre=n(Hye,"STRONG",{});var yHr=s(yre);_1o=r(yHr,"albert"),yHr.forEach(t),b1o=r(Hye," \u2014 "),W$=n(Hye,"A",{href:!0});var wHr=s(W$);v1o=r(wHr,"AlbertForMaskedLM"),wHr.forEach(t),T1o=r(Hye," (ALBERT model)"),Hye.forEach(t),F1o=i(N),Z_=n(N,"LI",{});var Uye=s(Z_);wre=n(Uye,"STRONG",{});var AHr=s(wre);C1o=r(AHr,"bart"),AHr.forEach(t),M1o=r(Uye," \u2014 "),Q$=n(Uye,"A",{href:!0});var LHr=s(Q$);E1o=r(LHr,"BartForConditionalGeneration"),LHr.forEach(t),y1o=r(Uye," (BART model)"),Uye.forEach(t),w1o=i(N),eb=n(N,"LI",{});var Jye=s(eb);Are=n(Jye,"STRONG",{});var BHr=s(Are);A1o=r(BHr,"bert"),BHr.forEach(t),L1o=r(Jye," \u2014 "),H$=n(Jye,"A",{href:!0});var xHr=s(H$);B1o=r(xHr,"BertForMaskedLM"),xHr.forEach(t),x1o=r(Jye," (BERT model)"),Jye.forEach(t),k1o=i(N),ob=n(N,"LI",{});var Yye=s(ob);Lre=n(Yye,"STRONG",{});var kHr=s(Lre);R1o=r(kHr,"big_bird"),kHr.forEach(t),S1o=r(Yye," \u2014 "),U$=n(Yye,"A",{href:!0});var RHr=s(U$);P1o=r(RHr,"BigBirdForMaskedLM"),RHr.forEach(t),$1o=r(Yye," (BigBird model)"),Yye.forEach(t),I1o=i(N),rb=n(N,"LI",{});var Kye=s(rb);Bre=n(Kye,"STRONG",{});var SHr=s(Bre);j1o=r(SHr,"camembert"),SHr.forEach(t),N1o=r(Kye," \u2014 "),J$=n(Kye,"A",{href:!0});var PHr=s(J$);D1o=r(PHr,"CamembertForMaskedLM"),PHr.forEach(t),q1o=r(Kye," (CamemBERT model)"),Kye.forEach(t),G1o=i(N),tb=n(N,"LI",{});var Zye=s(tb);xre=n(Zye,"STRONG",{});var $Hr=s(xre);O1o=r($Hr,"convbert"),$Hr.forEach(t),X1o=r(Zye," \u2014 "),Y$=n(Zye,"A",{href:!0});var IHr=s(Y$);V1o=r(IHr,"ConvBertForMaskedLM"),IHr.forEach(t),z1o=r(Zye," (ConvBERT model)"),Zye.forEach(t),W1o=i(N),ab=n(N,"LI",{});var ewe=s(ab);kre=n(ewe,"STRONG",{});var jHr=s(kre);Q1o=r(jHr,"data2vec-text"),jHr.forEach(t),H1o=r(ewe," \u2014 "),K$=n(ewe,"A",{href:!0});var NHr=s(K$);U1o=r(NHr,"Data2VecTextForMaskedLM"),NHr.forEach(t),J1o=r(ewe," (Data2VecText model)"),ewe.forEach(t),Y1o=i(N),nb=n(N,"LI",{});var owe=s(nb);Rre=n(owe,"STRONG",{});var DHr=s(Rre);K1o=r(DHr,"deberta"),DHr.forEach(t),Z1o=r(owe," \u2014 "),Z$=n(owe,"A",{href:!0});var qHr=s(Z$);eFo=r(qHr,"DebertaForMaskedLM"),qHr.forEach(t),oFo=r(owe," (DeBERTa model)"),owe.forEach(t),rFo=i(N),sb=n(N,"LI",{});var rwe=s(sb);Sre=n(rwe,"STRONG",{});var GHr=s(Sre);tFo=r(GHr,"deberta-v2"),GHr.forEach(t),aFo=r(rwe," \u2014 "),eI=n(rwe,"A",{href:!0});var OHr=s(eI);nFo=r(OHr,"DebertaV2ForMaskedLM"),OHr.forEach(t),sFo=r(rwe," (DeBERTa-v2 model)"),rwe.forEach(t),lFo=i(N),lb=n(N,"LI",{});var twe=s(lb);Pre=n(twe,"STRONG",{});var XHr=s(Pre);iFo=r(XHr,"distilbert"),XHr.forEach(t),dFo=r(twe," \u2014 "),oI=n(twe,"A",{href:!0});var VHr=s(oI);cFo=r(VHr,"DistilBertForMaskedLM"),VHr.forEach(t),mFo=r(twe," (DistilBERT model)"),twe.forEach(t),fFo=i(N),ib=n(N,"LI",{});var awe=s(ib);$re=n(awe,"STRONG",{});var zHr=s($re);gFo=r(zHr,"electra"),zHr.forEach(t),hFo=r(awe," \u2014 "),rI=n(awe,"A",{href:!0});var WHr=s(rI);uFo=r(WHr,"ElectraForMaskedLM"),WHr.forEach(t),pFo=r(awe," (ELECTRA model)"),awe.forEach(t),_Fo=i(N),db=n(N,"LI",{});var nwe=s(db);Ire=n(nwe,"STRONG",{});var QHr=s(Ire);bFo=r(QHr,"flaubert"),QHr.forEach(t),vFo=r(nwe," \u2014 "),tI=n(nwe,"A",{href:!0});var HHr=s(tI);TFo=r(HHr,"FlaubertWithLMHeadModel"),HHr.forEach(t),FFo=r(nwe," (FlauBERT model)"),nwe.forEach(t),CFo=i(N),cb=n(N,"LI",{});var swe=s(cb);jre=n(swe,"STRONG",{});var UHr=s(jre);MFo=r(UHr,"fnet"),UHr.forEach(t),EFo=r(swe," \u2014 "),aI=n(swe,"A",{href:!0});var JHr=s(aI);yFo=r(JHr,"FNetForMaskedLM"),JHr.forEach(t),wFo=r(swe," (FNet model)"),swe.forEach(t),AFo=i(N),mb=n(N,"LI",{});var lwe=s(mb);Nre=n(lwe,"STRONG",{});var YHr=s(Nre);LFo=r(YHr,"funnel"),YHr.forEach(t),BFo=r(lwe," \u2014 "),nI=n(lwe,"A",{href:!0});var KHr=s(nI);xFo=r(KHr,"FunnelForMaskedLM"),KHr.forEach(t),kFo=r(lwe," (Funnel Transformer model)"),lwe.forEach(t),RFo=i(N),fb=n(N,"LI",{});var iwe=s(fb);Dre=n(iwe,"STRONG",{});var ZHr=s(Dre);SFo=r(ZHr,"ibert"),ZHr.forEach(t),PFo=r(iwe," \u2014 "),sI=n(iwe,"A",{href:!0});var eUr=s(sI);$Fo=r(eUr,"IBertForMaskedLM"),eUr.forEach(t),IFo=r(iwe," (I-BERT model)"),iwe.forEach(t),jFo=i(N),gb=n(N,"LI",{});var dwe=s(gb);qre=n(dwe,"STRONG",{});var oUr=s(qre);NFo=r(oUr,"layoutlm"),oUr.forEach(t),DFo=r(dwe," \u2014 "),lI=n(dwe,"A",{href:!0});var rUr=s(lI);qFo=r(rUr,"LayoutLMForMaskedLM"),rUr.forEach(t),GFo=r(dwe," (LayoutLM model)"),dwe.forEach(t),OFo=i(N),hb=n(N,"LI",{});var cwe=s(hb);Gre=n(cwe,"STRONG",{});var tUr=s(Gre);XFo=r(tUr,"longformer"),tUr.forEach(t),VFo=r(cwe," \u2014 "),iI=n(cwe,"A",{href:!0});var aUr=s(iI);zFo=r(aUr,"LongformerForMaskedLM"),aUr.forEach(t),WFo=r(cwe," (Longformer model)"),cwe.forEach(t),QFo=i(N),ub=n(N,"LI",{});var mwe=s(ub);Ore=n(mwe,"STRONG",{});var nUr=s(Ore);HFo=r(nUr,"mbart"),nUr.forEach(t),UFo=r(mwe," \u2014 "),dI=n(mwe,"A",{href:!0});var sUr=s(dI);JFo=r(sUr,"MBartForConditionalGeneration"),sUr.forEach(t),YFo=r(mwe," (mBART model)"),mwe.forEach(t),KFo=i(N),pb=n(N,"LI",{});var fwe=s(pb);Xre=n(fwe,"STRONG",{});var lUr=s(Xre);ZFo=r(lUr,"megatron-bert"),lUr.forEach(t),eCo=r(fwe," \u2014 "),cI=n(fwe,"A",{href:!0});var iUr=s(cI);oCo=r(iUr,"MegatronBertForMaskedLM"),iUr.forEach(t),rCo=r(fwe," (MegatronBert model)"),fwe.forEach(t),tCo=i(N),_b=n(N,"LI",{});var gwe=s(_b);Vre=n(gwe,"STRONG",{});var dUr=s(Vre);aCo=r(dUr,"mobilebert"),dUr.forEach(t),nCo=r(gwe," \u2014 "),mI=n(gwe,"A",{href:!0});var cUr=s(mI);sCo=r(cUr,"MobileBertForMaskedLM"),cUr.forEach(t),lCo=r(gwe," (MobileBERT model)"),gwe.forEach(t),iCo=i(N),bb=n(N,"LI",{});var hwe=s(bb);zre=n(hwe,"STRONG",{});var mUr=s(zre);dCo=r(mUr,"mpnet"),mUr.forEach(t),cCo=r(hwe," \u2014 "),fI=n(hwe,"A",{href:!0});var fUr=s(fI);mCo=r(fUr,"MPNetForMaskedLM"),fUr.forEach(t),fCo=r(hwe," (MPNet model)"),hwe.forEach(t),gCo=i(N),vb=n(N,"LI",{});var uwe=s(vb);Wre=n(uwe,"STRONG",{});var gUr=s(Wre);hCo=r(gUr,"nystromformer"),gUr.forEach(t),uCo=r(uwe," \u2014 "),gI=n(uwe,"A",{href:!0});var hUr=s(gI);pCo=r(hUr,"NystromformerForMaskedLM"),hUr.forEach(t),_Co=r(uwe," (Nystromformer model)"),uwe.forEach(t),bCo=i(N),Tb=n(N,"LI",{});var pwe=s(Tb);Qre=n(pwe,"STRONG",{});var uUr=s(Qre);vCo=r(uUr,"perceiver"),uUr.forEach(t),TCo=r(pwe," \u2014 "),hI=n(pwe,"A",{href:!0});var pUr=s(hI);FCo=r(pUr,"PerceiverForMaskedLM"),pUr.forEach(t),CCo=r(pwe," (Perceiver model)"),pwe.forEach(t),MCo=i(N),Fb=n(N,"LI",{});var _we=s(Fb);Hre=n(_we,"STRONG",{});var _Ur=s(Hre);ECo=r(_Ur,"qdqbert"),_Ur.forEach(t),yCo=r(_we," \u2014 "),uI=n(_we,"A",{href:!0});var bUr=s(uI);wCo=r(bUr,"QDQBertForMaskedLM"),bUr.forEach(t),ACo=r(_we," (QDQBert model)"),_we.forEach(t),LCo=i(N),Cb=n(N,"LI",{});var bwe=s(Cb);Ure=n(bwe,"STRONG",{});var vUr=s(Ure);BCo=r(vUr,"reformer"),vUr.forEach(t),xCo=r(bwe," \u2014 "),pI=n(bwe,"A",{href:!0});var TUr=s(pI);kCo=r(TUr,"ReformerForMaskedLM"),TUr.forEach(t),RCo=r(bwe," (Reformer model)"),bwe.forEach(t),SCo=i(N),Mb=n(N,"LI",{});var vwe=s(Mb);Jre=n(vwe,"STRONG",{});var FUr=s(Jre);PCo=r(FUr,"rembert"),FUr.forEach(t),$Co=r(vwe," \u2014 "),_I=n(vwe,"A",{href:!0});var CUr=s(_I);ICo=r(CUr,"RemBertForMaskedLM"),CUr.forEach(t),jCo=r(vwe," (RemBERT model)"),vwe.forEach(t),NCo=i(N),Eb=n(N,"LI",{});var Twe=s(Eb);Yre=n(Twe,"STRONG",{});var MUr=s(Yre);DCo=r(MUr,"roberta"),MUr.forEach(t),qCo=r(Twe," \u2014 "),bI=n(Twe,"A",{href:!0});var EUr=s(bI);GCo=r(EUr,"RobertaForMaskedLM"),EUr.forEach(t),OCo=r(Twe," (RoBERTa model)"),Twe.forEach(t),XCo=i(N),yb=n(N,"LI",{});var Fwe=s(yb);Kre=n(Fwe,"STRONG",{});var yUr=s(Kre);VCo=r(yUr,"roformer"),yUr.forEach(t),zCo=r(Fwe," \u2014 "),vI=n(Fwe,"A",{href:!0});var wUr=s(vI);WCo=r(wUr,"RoFormerForMaskedLM"),wUr.forEach(t),QCo=r(Fwe," (RoFormer model)"),Fwe.forEach(t),HCo=i(N),wb=n(N,"LI",{});var Cwe=s(wb);Zre=n(Cwe,"STRONG",{});var AUr=s(Zre);UCo=r(AUr,"squeezebert"),AUr.forEach(t),JCo=r(Cwe," \u2014 "),TI=n(Cwe,"A",{href:!0});var LUr=s(TI);YCo=r(LUr,"SqueezeBertForMaskedLM"),LUr.forEach(t),KCo=r(Cwe," (SqueezeBERT model)"),Cwe.forEach(t),ZCo=i(N),Ab=n(N,"LI",{});var Mwe=s(Ab);ete=n(Mwe,"STRONG",{});var BUr=s(ete);eMo=r(BUr,"tapas"),BUr.forEach(t),oMo=r(Mwe," \u2014 "),FI=n(Mwe,"A",{href:!0});var xUr=s(FI);rMo=r(xUr,"TapasForMaskedLM"),xUr.forEach(t),tMo=r(Mwe," (TAPAS model)"),Mwe.forEach(t),aMo=i(N),Lb=n(N,"LI",{});var Ewe=s(Lb);ote=n(Ewe,"STRONG",{});var kUr=s(ote);nMo=r(kUr,"wav2vec2"),kUr.forEach(t),sMo=r(Ewe," \u2014 "),rte=n(Ewe,"CODE",{});var RUr=s(rte);lMo=r(RUr,"Wav2Vec2ForMaskedLM"),RUr.forEach(t),iMo=r(Ewe,"(Wav2Vec2 model)"),Ewe.forEach(t),dMo=i(N),Bb=n(N,"LI",{});var ywe=s(Bb);tte=n(ywe,"STRONG",{});var SUr=s(tte);cMo=r(SUr,"xlm"),SUr.forEach(t),mMo=r(ywe," \u2014 "),CI=n(ywe,"A",{href:!0});var PUr=s(CI);fMo=r(PUr,"XLMWithLMHeadModel"),PUr.forEach(t),gMo=r(ywe," (XLM model)"),ywe.forEach(t),hMo=i(N),xb=n(N,"LI",{});var wwe=s(xb);ate=n(wwe,"STRONG",{});var $Ur=s(ate);uMo=r($Ur,"xlm-roberta"),$Ur.forEach(t),pMo=r(wwe," \u2014 "),MI=n(wwe,"A",{href:!0});var IUr=s(MI);_Mo=r(IUr,"XLMRobertaForMaskedLM"),IUr.forEach(t),bMo=r(wwe," (XLM-RoBERTa model)"),wwe.forEach(t),vMo=i(N),kb=n(N,"LI",{});var Awe=s(kb);nte=n(Awe,"STRONG",{});var jUr=s(nte);TMo=r(jUr,"xlm-roberta-xl"),jUr.forEach(t),FMo=r(Awe," \u2014 "),EI=n(Awe,"A",{href:!0});var NUr=s(EI);CMo=r(NUr,"XLMRobertaXLForMaskedLM"),NUr.forEach(t),MMo=r(Awe," (XLM-RoBERTa-XL model)"),Awe.forEach(t),EMo=i(N),Rb=n(N,"LI",{});var Lwe=s(Rb);ste=n(Lwe,"STRONG",{});var DUr=s(ste);yMo=r(DUr,"yoso"),DUr.forEach(t),wMo=r(Lwe," \u2014 "),yI=n(Lwe,"A",{href:!0});var qUr=s(yI);AMo=r(qUr,"YosoForMaskedLM"),qUr.forEach(t),LMo=r(Lwe," (YOSO model)"),Lwe.forEach(t),N.forEach(t),BMo=i(Xt),Sb=n(Xt,"P",{});var Bwe=s(Sb);xMo=r(Bwe,"The model is set in evaluation mode by default using "),lte=n(Bwe,"CODE",{});var GUr=s(lte);kMo=r(GUr,"model.eval()"),GUr.forEach(t),RMo=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ite=n(Bwe,"CODE",{});var OUr=s(ite);SMo=r(OUr,"model.train()"),OUr.forEach(t),Bwe.forEach(t),PMo=i(Xt),dte=n(Xt,"P",{});var XUr=s(dte);$Mo=r(XUr,"Examples:"),XUr.forEach(t),IMo=i(Xt),f(pw.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),jke=i(c),id=n(c,"H2",{class:!0});var WSe=s(id);Pb=n(WSe,"A",{id:!0,class:!0,href:!0});var VUr=s(Pb);cte=n(VUr,"SPAN",{});var zUr=s(cte);f(_w.$$.fragment,zUr),zUr.forEach(t),VUr.forEach(t),jMo=i(WSe),mte=n(WSe,"SPAN",{});var WUr=s(mte);NMo=r(WUr,"AutoModelForSeq2SeqLM"),WUr.forEach(t),WSe.forEach(t),Nke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);f(bw.$$.fragment,el),DMo=i(el),dd=n(el,"P",{});var mW=s(dd);qMo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fte=n(mW,"CODE",{});var QUr=s(fte);GMo=r(QUr,"from_pretrained()"),QUr.forEach(t),OMo=r(mW,"class method or the "),gte=n(mW,"CODE",{});var HUr=s(gte);XMo=r(HUr,"from_config()"),HUr.forEach(t),VMo=r(mW,`class
method.`),mW.forEach(t),zMo=i(el),vw=n(el,"P",{});var QSe=s(vw);WMo=r(QSe,"This class cannot be instantiated directly using "),hte=n(QSe,"CODE",{});var UUr=s(hte);QMo=r(UUr,"__init__()"),UUr.forEach(t),HMo=r(QSe," (throws an error)."),QSe.forEach(t),UMo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);f(Tw.$$.fragment,ol),JMo=i(ol),ute=n(ol,"P",{});var JUr=s(ute);YMo=r(JUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JUr.forEach(t),KMo=i(ol),cd=n(ol,"P",{});var fW=s(cd);ZMo=r(fW,`Note:
Loading a model from its configuration file does `),pte=n(fW,"STRONG",{});var YUr=s(pte);e4o=r(YUr,"not"),YUr.forEach(t),o4o=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_te=n(fW,"CODE",{});var KUr=s(_te);r4o=r(KUr,"from_pretrained()"),KUr.forEach(t),t4o=r(fW,"to load the model weights."),fW.forEach(t),a4o=i(ol),bte=n(ol,"P",{});var ZUr=s(bte);n4o=r(ZUr,"Examples:"),ZUr.forEach(t),s4o=i(ol),f(Fw.$$.fragment,ol),ol.forEach(t),l4o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);f(Cw.$$.fragment,Vt),i4o=i(Vt),vte=n(Vt,"P",{});var eJr=s(vte);d4o=r(eJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eJr.forEach(t),c4o=i(Vt),Ha=n(Vt,"P",{});var _5=s(Ha);m4o=r(_5,"The model class to instantiate is selected based on the "),Tte=n(_5,"CODE",{});var oJr=s(Tte);f4o=r(oJr,"model_type"),oJr.forEach(t),g4o=r(_5,` property of the config object (either
passed as an argument or loaded from `),Fte=n(_5,"CODE",{});var rJr=s(Fte);h4o=r(rJr,"pretrained_model_name_or_path"),rJr.forEach(t),u4o=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(_5,"CODE",{});var tJr=s(Cte);p4o=r(tJr,"pretrained_model_name_or_path"),tJr.forEach(t),_4o=r(_5,":"),_5.forEach(t),b4o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);$b=n(ie,"LI",{});var xwe=s($b);Mte=n(xwe,"STRONG",{});var aJr=s(Mte);v4o=r(aJr,"bart"),aJr.forEach(t),T4o=r(xwe," \u2014 "),wI=n(xwe,"A",{href:!0});var nJr=s(wI);F4o=r(nJr,"BartForConditionalGeneration"),nJr.forEach(t),C4o=r(xwe," (BART model)"),xwe.forEach(t),M4o=i(ie),Ib=n(ie,"LI",{});var kwe=s(Ib);Ete=n(kwe,"STRONG",{});var sJr=s(Ete);E4o=r(sJr,"bigbird_pegasus"),sJr.forEach(t),y4o=r(kwe," \u2014 "),AI=n(kwe,"A",{href:!0});var lJr=s(AI);w4o=r(lJr,"BigBirdPegasusForConditionalGeneration"),lJr.forEach(t),A4o=r(kwe," (BigBirdPegasus model)"),kwe.forEach(t),L4o=i(ie),jb=n(ie,"LI",{});var Rwe=s(jb);yte=n(Rwe,"STRONG",{});var iJr=s(yte);B4o=r(iJr,"blenderbot"),iJr.forEach(t),x4o=r(Rwe," \u2014 "),LI=n(Rwe,"A",{href:!0});var dJr=s(LI);k4o=r(dJr,"BlenderbotForConditionalGeneration"),dJr.forEach(t),R4o=r(Rwe," (Blenderbot model)"),Rwe.forEach(t),S4o=i(ie),Nb=n(ie,"LI",{});var Swe=s(Nb);wte=n(Swe,"STRONG",{});var cJr=s(wte);P4o=r(cJr,"blenderbot-small"),cJr.forEach(t),$4o=r(Swe," \u2014 "),BI=n(Swe,"A",{href:!0});var mJr=s(BI);I4o=r(mJr,"BlenderbotSmallForConditionalGeneration"),mJr.forEach(t),j4o=r(Swe," (BlenderbotSmall model)"),Swe.forEach(t),N4o=i(ie),Db=n(ie,"LI",{});var Pwe=s(Db);Ate=n(Pwe,"STRONG",{});var fJr=s(Ate);D4o=r(fJr,"encoder-decoder"),fJr.forEach(t),q4o=r(Pwe," \u2014 "),xI=n(Pwe,"A",{href:!0});var gJr=s(xI);G4o=r(gJr,"EncoderDecoderModel"),gJr.forEach(t),O4o=r(Pwe," (Encoder decoder model)"),Pwe.forEach(t),X4o=i(ie),qb=n(ie,"LI",{});var $we=s(qb);Lte=n($we,"STRONG",{});var hJr=s(Lte);V4o=r(hJr,"fsmt"),hJr.forEach(t),z4o=r($we," \u2014 "),kI=n($we,"A",{href:!0});var uJr=s(kI);W4o=r(uJr,"FSMTForConditionalGeneration"),uJr.forEach(t),Q4o=r($we," (FairSeq Machine-Translation model)"),$we.forEach(t),H4o=i(ie),Gb=n(ie,"LI",{});var Iwe=s(Gb);Bte=n(Iwe,"STRONG",{});var pJr=s(Bte);U4o=r(pJr,"led"),pJr.forEach(t),J4o=r(Iwe," \u2014 "),RI=n(Iwe,"A",{href:!0});var _Jr=s(RI);Y4o=r(_Jr,"LEDForConditionalGeneration"),_Jr.forEach(t),K4o=r(Iwe," (LED model)"),Iwe.forEach(t),Z4o=i(ie),Ob=n(ie,"LI",{});var jwe=s(Ob);xte=n(jwe,"STRONG",{});var bJr=s(xte);eEo=r(bJr,"m2m_100"),bJr.forEach(t),oEo=r(jwe," \u2014 "),SI=n(jwe,"A",{href:!0});var vJr=s(SI);rEo=r(vJr,"M2M100ForConditionalGeneration"),vJr.forEach(t),tEo=r(jwe," (M2M100 model)"),jwe.forEach(t),aEo=i(ie),Xb=n(ie,"LI",{});var Nwe=s(Xb);kte=n(Nwe,"STRONG",{});var TJr=s(kte);nEo=r(TJr,"marian"),TJr.forEach(t),sEo=r(Nwe," \u2014 "),PI=n(Nwe,"A",{href:!0});var FJr=s(PI);lEo=r(FJr,"MarianMTModel"),FJr.forEach(t),iEo=r(Nwe," (Marian model)"),Nwe.forEach(t),dEo=i(ie),Vb=n(ie,"LI",{});var Dwe=s(Vb);Rte=n(Dwe,"STRONG",{});var CJr=s(Rte);cEo=r(CJr,"mbart"),CJr.forEach(t),mEo=r(Dwe," \u2014 "),$I=n(Dwe,"A",{href:!0});var MJr=s($I);fEo=r(MJr,"MBartForConditionalGeneration"),MJr.forEach(t),gEo=r(Dwe," (mBART model)"),Dwe.forEach(t),hEo=i(ie),zb=n(ie,"LI",{});var qwe=s(zb);Ste=n(qwe,"STRONG",{});var EJr=s(Ste);uEo=r(EJr,"mt5"),EJr.forEach(t),pEo=r(qwe," \u2014 "),II=n(qwe,"A",{href:!0});var yJr=s(II);_Eo=r(yJr,"MT5ForConditionalGeneration"),yJr.forEach(t),bEo=r(qwe," (mT5 model)"),qwe.forEach(t),vEo=i(ie),Wb=n(ie,"LI",{});var Gwe=s(Wb);Pte=n(Gwe,"STRONG",{});var wJr=s(Pte);TEo=r(wJr,"pegasus"),wJr.forEach(t),FEo=r(Gwe," \u2014 "),jI=n(Gwe,"A",{href:!0});var AJr=s(jI);CEo=r(AJr,"PegasusForConditionalGeneration"),AJr.forEach(t),MEo=r(Gwe," (Pegasus model)"),Gwe.forEach(t),EEo=i(ie),Qb=n(ie,"LI",{});var Owe=s(Qb);$te=n(Owe,"STRONG",{});var LJr=s($te);yEo=r(LJr,"plbart"),LJr.forEach(t),wEo=r(Owe," \u2014 "),NI=n(Owe,"A",{href:!0});var BJr=s(NI);AEo=r(BJr,"PLBartForConditionalGeneration"),BJr.forEach(t),LEo=r(Owe," (PLBart model)"),Owe.forEach(t),BEo=i(ie),Hb=n(ie,"LI",{});var Xwe=s(Hb);Ite=n(Xwe,"STRONG",{});var xJr=s(Ite);xEo=r(xJr,"prophetnet"),xJr.forEach(t),kEo=r(Xwe," \u2014 "),DI=n(Xwe,"A",{href:!0});var kJr=s(DI);REo=r(kJr,"ProphetNetForConditionalGeneration"),kJr.forEach(t),SEo=r(Xwe," (ProphetNet model)"),Xwe.forEach(t),PEo=i(ie),Ub=n(ie,"LI",{});var Vwe=s(Ub);jte=n(Vwe,"STRONG",{});var RJr=s(jte);$Eo=r(RJr,"t5"),RJr.forEach(t),IEo=r(Vwe," \u2014 "),qI=n(Vwe,"A",{href:!0});var SJr=s(qI);jEo=r(SJr,"T5ForConditionalGeneration"),SJr.forEach(t),NEo=r(Vwe," (T5 model)"),Vwe.forEach(t),DEo=i(ie),Jb=n(ie,"LI",{});var zwe=s(Jb);Nte=n(zwe,"STRONG",{});var PJr=s(Nte);qEo=r(PJr,"xlm-prophetnet"),PJr.forEach(t),GEo=r(zwe," \u2014 "),GI=n(zwe,"A",{href:!0});var $Jr=s(GI);OEo=r($Jr,"XLMProphetNetForConditionalGeneration"),$Jr.forEach(t),XEo=r(zwe," (XLMProphetNet model)"),zwe.forEach(t),ie.forEach(t),VEo=i(Vt),Yb=n(Vt,"P",{});var Wwe=s(Yb);zEo=r(Wwe,"The model is set in evaluation mode by default using "),Dte=n(Wwe,"CODE",{});var IJr=s(Dte);WEo=r(IJr,"model.eval()"),IJr.forEach(t),QEo=r(Wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=n(Wwe,"CODE",{});var jJr=s(qte);HEo=r(jJr,"model.train()"),jJr.forEach(t),Wwe.forEach(t),UEo=i(Vt),Gte=n(Vt,"P",{});var NJr=s(Gte);JEo=r(NJr,"Examples:"),NJr.forEach(t),YEo=i(Vt),f(Mw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Dke=i(c),md=n(c,"H2",{class:!0});var HSe=s(md);Kb=n(HSe,"A",{id:!0,class:!0,href:!0});var DJr=s(Kb);Ote=n(DJr,"SPAN",{});var qJr=s(Ote);f(Ew.$$.fragment,qJr),qJr.forEach(t),DJr.forEach(t),KEo=i(HSe),Xte=n(HSe,"SPAN",{});var GJr=s(Xte);ZEo=r(GJr,"AutoModelForSequenceClassification"),GJr.forEach(t),HSe.forEach(t),qke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);f(yw.$$.fragment,rl),e3o=i(rl),fd=n(rl,"P",{});var gW=s(fd);o3o=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Vte=n(gW,"CODE",{});var OJr=s(Vte);r3o=r(OJr,"from_pretrained()"),OJr.forEach(t),t3o=r(gW,"class method or the "),zte=n(gW,"CODE",{});var XJr=s(zte);a3o=r(XJr,"from_config()"),XJr.forEach(t),n3o=r(gW,`class
method.`),gW.forEach(t),s3o=i(rl),ww=n(rl,"P",{});var USe=s(ww);l3o=r(USe,"This class cannot be instantiated directly using "),Wte=n(USe,"CODE",{});var VJr=s(Wte);i3o=r(VJr,"__init__()"),VJr.forEach(t),d3o=r(USe," (throws an error)."),USe.forEach(t),c3o=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);f(Aw.$$.fragment,tl),m3o=i(tl),Qte=n(tl,"P",{});var zJr=s(Qte);f3o=r(zJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zJr.forEach(t),g3o=i(tl),gd=n(tl,"P",{});var hW=s(gd);h3o=r(hW,`Note:
Loading a model from its configuration file does `),Hte=n(hW,"STRONG",{});var WJr=s(Hte);u3o=r(WJr,"not"),WJr.forEach(t),p3o=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ute=n(hW,"CODE",{});var QJr=s(Ute);_3o=r(QJr,"from_pretrained()"),QJr.forEach(t),b3o=r(hW,"to load the model weights."),hW.forEach(t),v3o=i(tl),Jte=n(tl,"P",{});var HJr=s(Jte);T3o=r(HJr,"Examples:"),HJr.forEach(t),F3o=i(tl),f(Lw.$$.fragment,tl),tl.forEach(t),C3o=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);f(Bw.$$.fragment,zt),M3o=i(zt),Yte=n(zt,"P",{});var UJr=s(Yte);E3o=r(UJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UJr.forEach(t),y3o=i(zt),Ua=n(zt,"P",{});var b5=s(Ua);w3o=r(b5,"The model class to instantiate is selected based on the "),Kte=n(b5,"CODE",{});var JJr=s(Kte);A3o=r(JJr,"model_type"),JJr.forEach(t),L3o=r(b5,` property of the config object (either
passed as an argument or loaded from `),Zte=n(b5,"CODE",{});var YJr=s(Zte);B3o=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),x3o=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eae=n(b5,"CODE",{});var KJr=s(eae);k3o=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),R3o=r(b5,":"),b5.forEach(t),S3o=i(zt),A=n(zt,"UL",{});var L=s(A);Zb=n(L,"LI",{});var Qwe=s(Zb);oae=n(Qwe,"STRONG",{});var ZJr=s(oae);P3o=r(ZJr,"albert"),ZJr.forEach(t),$3o=r(Qwe," \u2014 "),OI=n(Qwe,"A",{href:!0});var eYr=s(OI);I3o=r(eYr,"AlbertForSequenceClassification"),eYr.forEach(t),j3o=r(Qwe," (ALBERT model)"),Qwe.forEach(t),N3o=i(L),e2=n(L,"LI",{});var Hwe=s(e2);rae=n(Hwe,"STRONG",{});var oYr=s(rae);D3o=r(oYr,"bart"),oYr.forEach(t),q3o=r(Hwe," \u2014 "),XI=n(Hwe,"A",{href:!0});var rYr=s(XI);G3o=r(rYr,"BartForSequenceClassification"),rYr.forEach(t),O3o=r(Hwe," (BART model)"),Hwe.forEach(t),X3o=i(L),o2=n(L,"LI",{});var Uwe=s(o2);tae=n(Uwe,"STRONG",{});var tYr=s(tae);V3o=r(tYr,"bert"),tYr.forEach(t),z3o=r(Uwe," \u2014 "),VI=n(Uwe,"A",{href:!0});var aYr=s(VI);W3o=r(aYr,"BertForSequenceClassification"),aYr.forEach(t),Q3o=r(Uwe," (BERT model)"),Uwe.forEach(t),H3o=i(L),r2=n(L,"LI",{});var Jwe=s(r2);aae=n(Jwe,"STRONG",{});var nYr=s(aae);U3o=r(nYr,"big_bird"),nYr.forEach(t),J3o=r(Jwe," \u2014 "),zI=n(Jwe,"A",{href:!0});var sYr=s(zI);Y3o=r(sYr,"BigBirdForSequenceClassification"),sYr.forEach(t),K3o=r(Jwe," (BigBird model)"),Jwe.forEach(t),Z3o=i(L),t2=n(L,"LI",{});var Ywe=s(t2);nae=n(Ywe,"STRONG",{});var lYr=s(nae);e5o=r(lYr,"bigbird_pegasus"),lYr.forEach(t),o5o=r(Ywe," \u2014 "),WI=n(Ywe,"A",{href:!0});var iYr=s(WI);r5o=r(iYr,"BigBirdPegasusForSequenceClassification"),iYr.forEach(t),t5o=r(Ywe," (BigBirdPegasus model)"),Ywe.forEach(t),a5o=i(L),a2=n(L,"LI",{});var Kwe=s(a2);sae=n(Kwe,"STRONG",{});var dYr=s(sae);n5o=r(dYr,"camembert"),dYr.forEach(t),s5o=r(Kwe," \u2014 "),QI=n(Kwe,"A",{href:!0});var cYr=s(QI);l5o=r(cYr,"CamembertForSequenceClassification"),cYr.forEach(t),i5o=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),d5o=i(L),n2=n(L,"LI",{});var Zwe=s(n2);lae=n(Zwe,"STRONG",{});var mYr=s(lae);c5o=r(mYr,"canine"),mYr.forEach(t),m5o=r(Zwe," \u2014 "),HI=n(Zwe,"A",{href:!0});var fYr=s(HI);f5o=r(fYr,"CanineForSequenceClassification"),fYr.forEach(t),g5o=r(Zwe," (Canine model)"),Zwe.forEach(t),h5o=i(L),s2=n(L,"LI",{});var e6e=s(s2);iae=n(e6e,"STRONG",{});var gYr=s(iae);u5o=r(gYr,"convbert"),gYr.forEach(t),p5o=r(e6e," \u2014 "),UI=n(e6e,"A",{href:!0});var hYr=s(UI);_5o=r(hYr,"ConvBertForSequenceClassification"),hYr.forEach(t),b5o=r(e6e," (ConvBERT model)"),e6e.forEach(t),v5o=i(L),l2=n(L,"LI",{});var o6e=s(l2);dae=n(o6e,"STRONG",{});var uYr=s(dae);T5o=r(uYr,"ctrl"),uYr.forEach(t),F5o=r(o6e," \u2014 "),JI=n(o6e,"A",{href:!0});var pYr=s(JI);C5o=r(pYr,"CTRLForSequenceClassification"),pYr.forEach(t),M5o=r(o6e," (CTRL model)"),o6e.forEach(t),E5o=i(L),i2=n(L,"LI",{});var r6e=s(i2);cae=n(r6e,"STRONG",{});var _Yr=s(cae);y5o=r(_Yr,"data2vec-text"),_Yr.forEach(t),w5o=r(r6e," \u2014 "),YI=n(r6e,"A",{href:!0});var bYr=s(YI);A5o=r(bYr,"Data2VecTextForSequenceClassification"),bYr.forEach(t),L5o=r(r6e," (Data2VecText model)"),r6e.forEach(t),B5o=i(L),d2=n(L,"LI",{});var t6e=s(d2);mae=n(t6e,"STRONG",{});var vYr=s(mae);x5o=r(vYr,"deberta"),vYr.forEach(t),k5o=r(t6e," \u2014 "),KI=n(t6e,"A",{href:!0});var TYr=s(KI);R5o=r(TYr,"DebertaForSequenceClassification"),TYr.forEach(t),S5o=r(t6e," (DeBERTa model)"),t6e.forEach(t),P5o=i(L),c2=n(L,"LI",{});var a6e=s(c2);fae=n(a6e,"STRONG",{});var FYr=s(fae);$5o=r(FYr,"deberta-v2"),FYr.forEach(t),I5o=r(a6e," \u2014 "),ZI=n(a6e,"A",{href:!0});var CYr=s(ZI);j5o=r(CYr,"DebertaV2ForSequenceClassification"),CYr.forEach(t),N5o=r(a6e," (DeBERTa-v2 model)"),a6e.forEach(t),D5o=i(L),m2=n(L,"LI",{});var n6e=s(m2);gae=n(n6e,"STRONG",{});var MYr=s(gae);q5o=r(MYr,"distilbert"),MYr.forEach(t),G5o=r(n6e," \u2014 "),ej=n(n6e,"A",{href:!0});var EYr=s(ej);O5o=r(EYr,"DistilBertForSequenceClassification"),EYr.forEach(t),X5o=r(n6e," (DistilBERT model)"),n6e.forEach(t),V5o=i(L),f2=n(L,"LI",{});var s6e=s(f2);hae=n(s6e,"STRONG",{});var yYr=s(hae);z5o=r(yYr,"electra"),yYr.forEach(t),W5o=r(s6e," \u2014 "),oj=n(s6e,"A",{href:!0});var wYr=s(oj);Q5o=r(wYr,"ElectraForSequenceClassification"),wYr.forEach(t),H5o=r(s6e," (ELECTRA model)"),s6e.forEach(t),U5o=i(L),g2=n(L,"LI",{});var l6e=s(g2);uae=n(l6e,"STRONG",{});var AYr=s(uae);J5o=r(AYr,"flaubert"),AYr.forEach(t),Y5o=r(l6e," \u2014 "),rj=n(l6e,"A",{href:!0});var LYr=s(rj);K5o=r(LYr,"FlaubertForSequenceClassification"),LYr.forEach(t),Z5o=r(l6e," (FlauBERT model)"),l6e.forEach(t),eyo=i(L),h2=n(L,"LI",{});var i6e=s(h2);pae=n(i6e,"STRONG",{});var BYr=s(pae);oyo=r(BYr,"fnet"),BYr.forEach(t),ryo=r(i6e," \u2014 "),tj=n(i6e,"A",{href:!0});var xYr=s(tj);tyo=r(xYr,"FNetForSequenceClassification"),xYr.forEach(t),ayo=r(i6e," (FNet model)"),i6e.forEach(t),nyo=i(L),u2=n(L,"LI",{});var d6e=s(u2);_ae=n(d6e,"STRONG",{});var kYr=s(_ae);syo=r(kYr,"funnel"),kYr.forEach(t),lyo=r(d6e," \u2014 "),aj=n(d6e,"A",{href:!0});var RYr=s(aj);iyo=r(RYr,"FunnelForSequenceClassification"),RYr.forEach(t),dyo=r(d6e," (Funnel Transformer model)"),d6e.forEach(t),cyo=i(L),p2=n(L,"LI",{});var c6e=s(p2);bae=n(c6e,"STRONG",{});var SYr=s(bae);myo=r(SYr,"gpt2"),SYr.forEach(t),fyo=r(c6e," \u2014 "),nj=n(c6e,"A",{href:!0});var PYr=s(nj);gyo=r(PYr,"GPT2ForSequenceClassification"),PYr.forEach(t),hyo=r(c6e," (OpenAI GPT-2 model)"),c6e.forEach(t),uyo=i(L),_2=n(L,"LI",{});var m6e=s(_2);vae=n(m6e,"STRONG",{});var $Yr=s(vae);pyo=r($Yr,"gpt_neo"),$Yr.forEach(t),_yo=r(m6e," \u2014 "),sj=n(m6e,"A",{href:!0});var IYr=s(sj);byo=r(IYr,"GPTNeoForSequenceClassification"),IYr.forEach(t),vyo=r(m6e," (GPT Neo model)"),m6e.forEach(t),Tyo=i(L),b2=n(L,"LI",{});var f6e=s(b2);Tae=n(f6e,"STRONG",{});var jYr=s(Tae);Fyo=r(jYr,"gptj"),jYr.forEach(t),Cyo=r(f6e," \u2014 "),lj=n(f6e,"A",{href:!0});var NYr=s(lj);Myo=r(NYr,"GPTJForSequenceClassification"),NYr.forEach(t),Eyo=r(f6e," (GPT-J model)"),f6e.forEach(t),yyo=i(L),v2=n(L,"LI",{});var g6e=s(v2);Fae=n(g6e,"STRONG",{});var DYr=s(Fae);wyo=r(DYr,"ibert"),DYr.forEach(t),Ayo=r(g6e," \u2014 "),ij=n(g6e,"A",{href:!0});var qYr=s(ij);Lyo=r(qYr,"IBertForSequenceClassification"),qYr.forEach(t),Byo=r(g6e," (I-BERT model)"),g6e.forEach(t),xyo=i(L),T2=n(L,"LI",{});var h6e=s(T2);Cae=n(h6e,"STRONG",{});var GYr=s(Cae);kyo=r(GYr,"layoutlm"),GYr.forEach(t),Ryo=r(h6e," \u2014 "),dj=n(h6e,"A",{href:!0});var OYr=s(dj);Syo=r(OYr,"LayoutLMForSequenceClassification"),OYr.forEach(t),Pyo=r(h6e," (LayoutLM model)"),h6e.forEach(t),$yo=i(L),F2=n(L,"LI",{});var u6e=s(F2);Mae=n(u6e,"STRONG",{});var XYr=s(Mae);Iyo=r(XYr,"layoutlmv2"),XYr.forEach(t),jyo=r(u6e," \u2014 "),cj=n(u6e,"A",{href:!0});var VYr=s(cj);Nyo=r(VYr,"LayoutLMv2ForSequenceClassification"),VYr.forEach(t),Dyo=r(u6e," (LayoutLMv2 model)"),u6e.forEach(t),qyo=i(L),C2=n(L,"LI",{});var p6e=s(C2);Eae=n(p6e,"STRONG",{});var zYr=s(Eae);Gyo=r(zYr,"led"),zYr.forEach(t),Oyo=r(p6e," \u2014 "),mj=n(p6e,"A",{href:!0});var WYr=s(mj);Xyo=r(WYr,"LEDForSequenceClassification"),WYr.forEach(t),Vyo=r(p6e," (LED model)"),p6e.forEach(t),zyo=i(L),M2=n(L,"LI",{});var _6e=s(M2);yae=n(_6e,"STRONG",{});var QYr=s(yae);Wyo=r(QYr,"longformer"),QYr.forEach(t),Qyo=r(_6e," \u2014 "),fj=n(_6e,"A",{href:!0});var HYr=s(fj);Hyo=r(HYr,"LongformerForSequenceClassification"),HYr.forEach(t),Uyo=r(_6e," (Longformer model)"),_6e.forEach(t),Jyo=i(L),E2=n(L,"LI",{});var b6e=s(E2);wae=n(b6e,"STRONG",{});var UYr=s(wae);Yyo=r(UYr,"mbart"),UYr.forEach(t),Kyo=r(b6e," \u2014 "),gj=n(b6e,"A",{href:!0});var JYr=s(gj);Zyo=r(JYr,"MBartForSequenceClassification"),JYr.forEach(t),ewo=r(b6e," (mBART model)"),b6e.forEach(t),owo=i(L),y2=n(L,"LI",{});var v6e=s(y2);Aae=n(v6e,"STRONG",{});var YYr=s(Aae);rwo=r(YYr,"megatron-bert"),YYr.forEach(t),two=r(v6e," \u2014 "),hj=n(v6e,"A",{href:!0});var KYr=s(hj);awo=r(KYr,"MegatronBertForSequenceClassification"),KYr.forEach(t),nwo=r(v6e," (MegatronBert model)"),v6e.forEach(t),swo=i(L),w2=n(L,"LI",{});var T6e=s(w2);Lae=n(T6e,"STRONG",{});var ZYr=s(Lae);lwo=r(ZYr,"mobilebert"),ZYr.forEach(t),iwo=r(T6e," \u2014 "),uj=n(T6e,"A",{href:!0});var eKr=s(uj);dwo=r(eKr,"MobileBertForSequenceClassification"),eKr.forEach(t),cwo=r(T6e," (MobileBERT model)"),T6e.forEach(t),mwo=i(L),A2=n(L,"LI",{});var F6e=s(A2);Bae=n(F6e,"STRONG",{});var oKr=s(Bae);fwo=r(oKr,"mpnet"),oKr.forEach(t),gwo=r(F6e," \u2014 "),pj=n(F6e,"A",{href:!0});var rKr=s(pj);hwo=r(rKr,"MPNetForSequenceClassification"),rKr.forEach(t),uwo=r(F6e," (MPNet model)"),F6e.forEach(t),pwo=i(L),L2=n(L,"LI",{});var C6e=s(L2);xae=n(C6e,"STRONG",{});var tKr=s(xae);_wo=r(tKr,"nystromformer"),tKr.forEach(t),bwo=r(C6e," \u2014 "),_j=n(C6e,"A",{href:!0});var aKr=s(_j);vwo=r(aKr,"NystromformerForSequenceClassification"),aKr.forEach(t),Two=r(C6e," (Nystromformer model)"),C6e.forEach(t),Fwo=i(L),B2=n(L,"LI",{});var M6e=s(B2);kae=n(M6e,"STRONG",{});var nKr=s(kae);Cwo=r(nKr,"openai-gpt"),nKr.forEach(t),Mwo=r(M6e," \u2014 "),bj=n(M6e,"A",{href:!0});var sKr=s(bj);Ewo=r(sKr,"OpenAIGPTForSequenceClassification"),sKr.forEach(t),ywo=r(M6e," (OpenAI GPT model)"),M6e.forEach(t),wwo=i(L),x2=n(L,"LI",{});var E6e=s(x2);Rae=n(E6e,"STRONG",{});var lKr=s(Rae);Awo=r(lKr,"perceiver"),lKr.forEach(t),Lwo=r(E6e," \u2014 "),vj=n(E6e,"A",{href:!0});var iKr=s(vj);Bwo=r(iKr,"PerceiverForSequenceClassification"),iKr.forEach(t),xwo=r(E6e," (Perceiver model)"),E6e.forEach(t),kwo=i(L),k2=n(L,"LI",{});var y6e=s(k2);Sae=n(y6e,"STRONG",{});var dKr=s(Sae);Rwo=r(dKr,"plbart"),dKr.forEach(t),Swo=r(y6e," \u2014 "),Tj=n(y6e,"A",{href:!0});var cKr=s(Tj);Pwo=r(cKr,"PLBartForSequenceClassification"),cKr.forEach(t),$wo=r(y6e," (PLBart model)"),y6e.forEach(t),Iwo=i(L),R2=n(L,"LI",{});var w6e=s(R2);Pae=n(w6e,"STRONG",{});var mKr=s(Pae);jwo=r(mKr,"qdqbert"),mKr.forEach(t),Nwo=r(w6e," \u2014 "),Fj=n(w6e,"A",{href:!0});var fKr=s(Fj);Dwo=r(fKr,"QDQBertForSequenceClassification"),fKr.forEach(t),qwo=r(w6e," (QDQBert model)"),w6e.forEach(t),Gwo=i(L),S2=n(L,"LI",{});var A6e=s(S2);$ae=n(A6e,"STRONG",{});var gKr=s($ae);Owo=r(gKr,"reformer"),gKr.forEach(t),Xwo=r(A6e," \u2014 "),Cj=n(A6e,"A",{href:!0});var hKr=s(Cj);Vwo=r(hKr,"ReformerForSequenceClassification"),hKr.forEach(t),zwo=r(A6e," (Reformer model)"),A6e.forEach(t),Wwo=i(L),P2=n(L,"LI",{});var L6e=s(P2);Iae=n(L6e,"STRONG",{});var uKr=s(Iae);Qwo=r(uKr,"rembert"),uKr.forEach(t),Hwo=r(L6e," \u2014 "),Mj=n(L6e,"A",{href:!0});var pKr=s(Mj);Uwo=r(pKr,"RemBertForSequenceClassification"),pKr.forEach(t),Jwo=r(L6e," (RemBERT model)"),L6e.forEach(t),Ywo=i(L),$2=n(L,"LI",{});var B6e=s($2);jae=n(B6e,"STRONG",{});var _Kr=s(jae);Kwo=r(_Kr,"roberta"),_Kr.forEach(t),Zwo=r(B6e," \u2014 "),Ej=n(B6e,"A",{href:!0});var bKr=s(Ej);e6o=r(bKr,"RobertaForSequenceClassification"),bKr.forEach(t),o6o=r(B6e," (RoBERTa model)"),B6e.forEach(t),r6o=i(L),I2=n(L,"LI",{});var x6e=s(I2);Nae=n(x6e,"STRONG",{});var vKr=s(Nae);t6o=r(vKr,"roformer"),vKr.forEach(t),a6o=r(x6e," \u2014 "),yj=n(x6e,"A",{href:!0});var TKr=s(yj);n6o=r(TKr,"RoFormerForSequenceClassification"),TKr.forEach(t),s6o=r(x6e," (RoFormer model)"),x6e.forEach(t),l6o=i(L),j2=n(L,"LI",{});var k6e=s(j2);Dae=n(k6e,"STRONG",{});var FKr=s(Dae);i6o=r(FKr,"squeezebert"),FKr.forEach(t),d6o=r(k6e," \u2014 "),wj=n(k6e,"A",{href:!0});var CKr=s(wj);c6o=r(CKr,"SqueezeBertForSequenceClassification"),CKr.forEach(t),m6o=r(k6e," (SqueezeBERT model)"),k6e.forEach(t),f6o=i(L),N2=n(L,"LI",{});var R6e=s(N2);qae=n(R6e,"STRONG",{});var MKr=s(qae);g6o=r(MKr,"tapas"),MKr.forEach(t),h6o=r(R6e," \u2014 "),Aj=n(R6e,"A",{href:!0});var EKr=s(Aj);u6o=r(EKr,"TapasForSequenceClassification"),EKr.forEach(t),p6o=r(R6e," (TAPAS model)"),R6e.forEach(t),_6o=i(L),D2=n(L,"LI",{});var S6e=s(D2);Gae=n(S6e,"STRONG",{});var yKr=s(Gae);b6o=r(yKr,"transfo-xl"),yKr.forEach(t),v6o=r(S6e," \u2014 "),Lj=n(S6e,"A",{href:!0});var wKr=s(Lj);T6o=r(wKr,"TransfoXLForSequenceClassification"),wKr.forEach(t),F6o=r(S6e," (Transformer-XL model)"),S6e.forEach(t),C6o=i(L),q2=n(L,"LI",{});var P6e=s(q2);Oae=n(P6e,"STRONG",{});var AKr=s(Oae);M6o=r(AKr,"xlm"),AKr.forEach(t),E6o=r(P6e," \u2014 "),Bj=n(P6e,"A",{href:!0});var LKr=s(Bj);y6o=r(LKr,"XLMForSequenceClassification"),LKr.forEach(t),w6o=r(P6e," (XLM model)"),P6e.forEach(t),A6o=i(L),G2=n(L,"LI",{});var $6e=s(G2);Xae=n($6e,"STRONG",{});var BKr=s(Xae);L6o=r(BKr,"xlm-roberta"),BKr.forEach(t),B6o=r($6e," \u2014 "),xj=n($6e,"A",{href:!0});var xKr=s(xj);x6o=r(xKr,"XLMRobertaForSequenceClassification"),xKr.forEach(t),k6o=r($6e," (XLM-RoBERTa model)"),$6e.forEach(t),R6o=i(L),O2=n(L,"LI",{});var I6e=s(O2);Vae=n(I6e,"STRONG",{});var kKr=s(Vae);S6o=r(kKr,"xlm-roberta-xl"),kKr.forEach(t),P6o=r(I6e," \u2014 "),kj=n(I6e,"A",{href:!0});var RKr=s(kj);$6o=r(RKr,"XLMRobertaXLForSequenceClassification"),RKr.forEach(t),I6o=r(I6e," (XLM-RoBERTa-XL model)"),I6e.forEach(t),j6o=i(L),X2=n(L,"LI",{});var j6e=s(X2);zae=n(j6e,"STRONG",{});var SKr=s(zae);N6o=r(SKr,"xlnet"),SKr.forEach(t),D6o=r(j6e," \u2014 "),Rj=n(j6e,"A",{href:!0});var PKr=s(Rj);q6o=r(PKr,"XLNetForSequenceClassification"),PKr.forEach(t),G6o=r(j6e," (XLNet model)"),j6e.forEach(t),O6o=i(L),V2=n(L,"LI",{});var N6e=s(V2);Wae=n(N6e,"STRONG",{});var $Kr=s(Wae);X6o=r($Kr,"yoso"),$Kr.forEach(t),V6o=r(N6e," \u2014 "),Sj=n(N6e,"A",{href:!0});var IKr=s(Sj);z6o=r(IKr,"YosoForSequenceClassification"),IKr.forEach(t),W6o=r(N6e," (YOSO model)"),N6e.forEach(t),L.forEach(t),Q6o=i(zt),z2=n(zt,"P",{});var D6e=s(z2);H6o=r(D6e,"The model is set in evaluation mode by default using "),Qae=n(D6e,"CODE",{});var jKr=s(Qae);U6o=r(jKr,"model.eval()"),jKr.forEach(t),J6o=r(D6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(D6e,"CODE",{});var NKr=s(Hae);Y6o=r(NKr,"model.train()"),NKr.forEach(t),D6e.forEach(t),K6o=i(zt),Uae=n(zt,"P",{});var DKr=s(Uae);Z6o=r(DKr,"Examples:"),DKr.forEach(t),eAo=i(zt),f(xw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Gke=i(c),hd=n(c,"H2",{class:!0});var JSe=s(hd);W2=n(JSe,"A",{id:!0,class:!0,href:!0});var qKr=s(W2);Jae=n(qKr,"SPAN",{});var GKr=s(Jae);f(kw.$$.fragment,GKr),GKr.forEach(t),qKr.forEach(t),oAo=i(JSe),Yae=n(JSe,"SPAN",{});var OKr=s(Yae);rAo=r(OKr,"AutoModelForMultipleChoice"),OKr.forEach(t),JSe.forEach(t),Oke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);f(Rw.$$.fragment,al),tAo=i(al),ud=n(al,"P",{});var uW=s(ud);aAo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kae=n(uW,"CODE",{});var XKr=s(Kae);nAo=r(XKr,"from_pretrained()"),XKr.forEach(t),sAo=r(uW,"class method or the "),Zae=n(uW,"CODE",{});var VKr=s(Zae);lAo=r(VKr,"from_config()"),VKr.forEach(t),iAo=r(uW,`class
method.`),uW.forEach(t),dAo=i(al),Sw=n(al,"P",{});var YSe=s(Sw);cAo=r(YSe,"This class cannot be instantiated directly using "),ene=n(YSe,"CODE",{});var zKr=s(ene);mAo=r(zKr,"__init__()"),zKr.forEach(t),fAo=r(YSe," (throws an error)."),YSe.forEach(t),gAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);f(Pw.$$.fragment,nl),hAo=i(nl),one=n(nl,"P",{});var WKr=s(one);uAo=r(WKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WKr.forEach(t),pAo=i(nl),pd=n(nl,"P",{});var pW=s(pd);_Ao=r(pW,`Note:
Loading a model from its configuration file does `),rne=n(pW,"STRONG",{});var QKr=s(rne);bAo=r(QKr,"not"),QKr.forEach(t),vAo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(pW,"CODE",{});var HKr=s(tne);TAo=r(HKr,"from_pretrained()"),HKr.forEach(t),FAo=r(pW,"to load the model weights."),pW.forEach(t),CAo=i(nl),ane=n(nl,"P",{});var UKr=s(ane);MAo=r(UKr,"Examples:"),UKr.forEach(t),EAo=i(nl),f($w.$$.fragment,nl),nl.forEach(t),yAo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);f(Iw.$$.fragment,Wt),wAo=i(Wt),nne=n(Wt,"P",{});var JKr=s(nne);AAo=r(JKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JKr.forEach(t),LAo=i(Wt),Ja=n(Wt,"P",{});var v5=s(Ja);BAo=r(v5,"The model class to instantiate is selected based on the "),sne=n(v5,"CODE",{});var YKr=s(sne);xAo=r(YKr,"model_type"),YKr.forEach(t),kAo=r(v5,` property of the config object (either
passed as an argument or loaded from `),lne=n(v5,"CODE",{});var KKr=s(lne);RAo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),SAo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(v5,"CODE",{});var ZKr=s(ine);PAo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),$Ao=r(v5,":"),v5.forEach(t),IAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Q2=n(O,"LI",{});var q6e=s(Q2);dne=n(q6e,"STRONG",{});var eZr=s(dne);jAo=r(eZr,"albert"),eZr.forEach(t),NAo=r(q6e," \u2014 "),Pj=n(q6e,"A",{href:!0});var oZr=s(Pj);DAo=r(oZr,"AlbertForMultipleChoice"),oZr.forEach(t),qAo=r(q6e," (ALBERT model)"),q6e.forEach(t),GAo=i(O),H2=n(O,"LI",{});var G6e=s(H2);cne=n(G6e,"STRONG",{});var rZr=s(cne);OAo=r(rZr,"bert"),rZr.forEach(t),XAo=r(G6e," \u2014 "),$j=n(G6e,"A",{href:!0});var tZr=s($j);VAo=r(tZr,"BertForMultipleChoice"),tZr.forEach(t),zAo=r(G6e," (BERT model)"),G6e.forEach(t),WAo=i(O),U2=n(O,"LI",{});var O6e=s(U2);mne=n(O6e,"STRONG",{});var aZr=s(mne);QAo=r(aZr,"big_bird"),aZr.forEach(t),HAo=r(O6e," \u2014 "),Ij=n(O6e,"A",{href:!0});var nZr=s(Ij);UAo=r(nZr,"BigBirdForMultipleChoice"),nZr.forEach(t),JAo=r(O6e," (BigBird model)"),O6e.forEach(t),YAo=i(O),J2=n(O,"LI",{});var X6e=s(J2);fne=n(X6e,"STRONG",{});var sZr=s(fne);KAo=r(sZr,"camembert"),sZr.forEach(t),ZAo=r(X6e," \u2014 "),jj=n(X6e,"A",{href:!0});var lZr=s(jj);e0o=r(lZr,"CamembertForMultipleChoice"),lZr.forEach(t),o0o=r(X6e," (CamemBERT model)"),X6e.forEach(t),r0o=i(O),Y2=n(O,"LI",{});var V6e=s(Y2);gne=n(V6e,"STRONG",{});var iZr=s(gne);t0o=r(iZr,"canine"),iZr.forEach(t),a0o=r(V6e," \u2014 "),Nj=n(V6e,"A",{href:!0});var dZr=s(Nj);n0o=r(dZr,"CanineForMultipleChoice"),dZr.forEach(t),s0o=r(V6e," (Canine model)"),V6e.forEach(t),l0o=i(O),K2=n(O,"LI",{});var z6e=s(K2);hne=n(z6e,"STRONG",{});var cZr=s(hne);i0o=r(cZr,"convbert"),cZr.forEach(t),d0o=r(z6e," \u2014 "),Dj=n(z6e,"A",{href:!0});var mZr=s(Dj);c0o=r(mZr,"ConvBertForMultipleChoice"),mZr.forEach(t),m0o=r(z6e," (ConvBERT model)"),z6e.forEach(t),f0o=i(O),Z2=n(O,"LI",{});var W6e=s(Z2);une=n(W6e,"STRONG",{});var fZr=s(une);g0o=r(fZr,"data2vec-text"),fZr.forEach(t),h0o=r(W6e," \u2014 "),qj=n(W6e,"A",{href:!0});var gZr=s(qj);u0o=r(gZr,"Data2VecTextForMultipleChoice"),gZr.forEach(t),p0o=r(W6e," (Data2VecText model)"),W6e.forEach(t),_0o=i(O),ev=n(O,"LI",{});var Q6e=s(ev);pne=n(Q6e,"STRONG",{});var hZr=s(pne);b0o=r(hZr,"distilbert"),hZr.forEach(t),v0o=r(Q6e," \u2014 "),Gj=n(Q6e,"A",{href:!0});var uZr=s(Gj);T0o=r(uZr,"DistilBertForMultipleChoice"),uZr.forEach(t),F0o=r(Q6e," (DistilBERT model)"),Q6e.forEach(t),C0o=i(O),ov=n(O,"LI",{});var H6e=s(ov);_ne=n(H6e,"STRONG",{});var pZr=s(_ne);M0o=r(pZr,"electra"),pZr.forEach(t),E0o=r(H6e," \u2014 "),Oj=n(H6e,"A",{href:!0});var _Zr=s(Oj);y0o=r(_Zr,"ElectraForMultipleChoice"),_Zr.forEach(t),w0o=r(H6e," (ELECTRA model)"),H6e.forEach(t),A0o=i(O),rv=n(O,"LI",{});var U6e=s(rv);bne=n(U6e,"STRONG",{});var bZr=s(bne);L0o=r(bZr,"flaubert"),bZr.forEach(t),B0o=r(U6e," \u2014 "),Xj=n(U6e,"A",{href:!0});var vZr=s(Xj);x0o=r(vZr,"FlaubertForMultipleChoice"),vZr.forEach(t),k0o=r(U6e," (FlauBERT model)"),U6e.forEach(t),R0o=i(O),tv=n(O,"LI",{});var J6e=s(tv);vne=n(J6e,"STRONG",{});var TZr=s(vne);S0o=r(TZr,"fnet"),TZr.forEach(t),P0o=r(J6e," \u2014 "),Vj=n(J6e,"A",{href:!0});var FZr=s(Vj);$0o=r(FZr,"FNetForMultipleChoice"),FZr.forEach(t),I0o=r(J6e," (FNet model)"),J6e.forEach(t),j0o=i(O),av=n(O,"LI",{});var Y6e=s(av);Tne=n(Y6e,"STRONG",{});var CZr=s(Tne);N0o=r(CZr,"funnel"),CZr.forEach(t),D0o=r(Y6e," \u2014 "),zj=n(Y6e,"A",{href:!0});var MZr=s(zj);q0o=r(MZr,"FunnelForMultipleChoice"),MZr.forEach(t),G0o=r(Y6e," (Funnel Transformer model)"),Y6e.forEach(t),O0o=i(O),nv=n(O,"LI",{});var K6e=s(nv);Fne=n(K6e,"STRONG",{});var EZr=s(Fne);X0o=r(EZr,"ibert"),EZr.forEach(t),V0o=r(K6e," \u2014 "),Wj=n(K6e,"A",{href:!0});var yZr=s(Wj);z0o=r(yZr,"IBertForMultipleChoice"),yZr.forEach(t),W0o=r(K6e," (I-BERT model)"),K6e.forEach(t),Q0o=i(O),sv=n(O,"LI",{});var Z6e=s(sv);Cne=n(Z6e,"STRONG",{});var wZr=s(Cne);H0o=r(wZr,"longformer"),wZr.forEach(t),U0o=r(Z6e," \u2014 "),Qj=n(Z6e,"A",{href:!0});var AZr=s(Qj);J0o=r(AZr,"LongformerForMultipleChoice"),AZr.forEach(t),Y0o=r(Z6e," (Longformer model)"),Z6e.forEach(t),K0o=i(O),lv=n(O,"LI",{});var eAe=s(lv);Mne=n(eAe,"STRONG",{});var LZr=s(Mne);Z0o=r(LZr,"megatron-bert"),LZr.forEach(t),eLo=r(eAe," \u2014 "),Hj=n(eAe,"A",{href:!0});var BZr=s(Hj);oLo=r(BZr,"MegatronBertForMultipleChoice"),BZr.forEach(t),rLo=r(eAe," (MegatronBert model)"),eAe.forEach(t),tLo=i(O),iv=n(O,"LI",{});var oAe=s(iv);Ene=n(oAe,"STRONG",{});var xZr=s(Ene);aLo=r(xZr,"mobilebert"),xZr.forEach(t),nLo=r(oAe," \u2014 "),Uj=n(oAe,"A",{href:!0});var kZr=s(Uj);sLo=r(kZr,"MobileBertForMultipleChoice"),kZr.forEach(t),lLo=r(oAe," (MobileBERT model)"),oAe.forEach(t),iLo=i(O),dv=n(O,"LI",{});var rAe=s(dv);yne=n(rAe,"STRONG",{});var RZr=s(yne);dLo=r(RZr,"mpnet"),RZr.forEach(t),cLo=r(rAe," \u2014 "),Jj=n(rAe,"A",{href:!0});var SZr=s(Jj);mLo=r(SZr,"MPNetForMultipleChoice"),SZr.forEach(t),fLo=r(rAe," (MPNet model)"),rAe.forEach(t),gLo=i(O),cv=n(O,"LI",{});var tAe=s(cv);wne=n(tAe,"STRONG",{});var PZr=s(wne);hLo=r(PZr,"nystromformer"),PZr.forEach(t),uLo=r(tAe," \u2014 "),Yj=n(tAe,"A",{href:!0});var $Zr=s(Yj);pLo=r($Zr,"NystromformerForMultipleChoice"),$Zr.forEach(t),_Lo=r(tAe," (Nystromformer model)"),tAe.forEach(t),bLo=i(O),mv=n(O,"LI",{});var aAe=s(mv);Ane=n(aAe,"STRONG",{});var IZr=s(Ane);vLo=r(IZr,"qdqbert"),IZr.forEach(t),TLo=r(aAe," \u2014 "),Kj=n(aAe,"A",{href:!0});var jZr=s(Kj);FLo=r(jZr,"QDQBertForMultipleChoice"),jZr.forEach(t),CLo=r(aAe," (QDQBert model)"),aAe.forEach(t),MLo=i(O),fv=n(O,"LI",{});var nAe=s(fv);Lne=n(nAe,"STRONG",{});var NZr=s(Lne);ELo=r(NZr,"rembert"),NZr.forEach(t),yLo=r(nAe," \u2014 "),Zj=n(nAe,"A",{href:!0});var DZr=s(Zj);wLo=r(DZr,"RemBertForMultipleChoice"),DZr.forEach(t),ALo=r(nAe," (RemBERT model)"),nAe.forEach(t),LLo=i(O),gv=n(O,"LI",{});var sAe=s(gv);Bne=n(sAe,"STRONG",{});var qZr=s(Bne);BLo=r(qZr,"roberta"),qZr.forEach(t),xLo=r(sAe," \u2014 "),eN=n(sAe,"A",{href:!0});var GZr=s(eN);kLo=r(GZr,"RobertaForMultipleChoice"),GZr.forEach(t),RLo=r(sAe," (RoBERTa model)"),sAe.forEach(t),SLo=i(O),hv=n(O,"LI",{});var lAe=s(hv);xne=n(lAe,"STRONG",{});var OZr=s(xne);PLo=r(OZr,"roformer"),OZr.forEach(t),$Lo=r(lAe," \u2014 "),oN=n(lAe,"A",{href:!0});var XZr=s(oN);ILo=r(XZr,"RoFormerForMultipleChoice"),XZr.forEach(t),jLo=r(lAe," (RoFormer model)"),lAe.forEach(t),NLo=i(O),uv=n(O,"LI",{});var iAe=s(uv);kne=n(iAe,"STRONG",{});var VZr=s(kne);DLo=r(VZr,"squeezebert"),VZr.forEach(t),qLo=r(iAe," \u2014 "),rN=n(iAe,"A",{href:!0});var zZr=s(rN);GLo=r(zZr,"SqueezeBertForMultipleChoice"),zZr.forEach(t),OLo=r(iAe," (SqueezeBERT model)"),iAe.forEach(t),XLo=i(O),pv=n(O,"LI",{});var dAe=s(pv);Rne=n(dAe,"STRONG",{});var WZr=s(Rne);VLo=r(WZr,"xlm"),WZr.forEach(t),zLo=r(dAe," \u2014 "),tN=n(dAe,"A",{href:!0});var QZr=s(tN);WLo=r(QZr,"XLMForMultipleChoice"),QZr.forEach(t),QLo=r(dAe," (XLM model)"),dAe.forEach(t),HLo=i(O),_v=n(O,"LI",{});var cAe=s(_v);Sne=n(cAe,"STRONG",{});var HZr=s(Sne);ULo=r(HZr,"xlm-roberta"),HZr.forEach(t),JLo=r(cAe," \u2014 "),aN=n(cAe,"A",{href:!0});var UZr=s(aN);YLo=r(UZr,"XLMRobertaForMultipleChoice"),UZr.forEach(t),KLo=r(cAe," (XLM-RoBERTa model)"),cAe.forEach(t),ZLo=i(O),bv=n(O,"LI",{});var mAe=s(bv);Pne=n(mAe,"STRONG",{});var JZr=s(Pne);e7o=r(JZr,"xlm-roberta-xl"),JZr.forEach(t),o7o=r(mAe," \u2014 "),nN=n(mAe,"A",{href:!0});var YZr=s(nN);r7o=r(YZr,"XLMRobertaXLForMultipleChoice"),YZr.forEach(t),t7o=r(mAe," (XLM-RoBERTa-XL model)"),mAe.forEach(t),a7o=i(O),vv=n(O,"LI",{});var fAe=s(vv);$ne=n(fAe,"STRONG",{});var KZr=s($ne);n7o=r(KZr,"xlnet"),KZr.forEach(t),s7o=r(fAe," \u2014 "),sN=n(fAe,"A",{href:!0});var ZZr=s(sN);l7o=r(ZZr,"XLNetForMultipleChoice"),ZZr.forEach(t),i7o=r(fAe," (XLNet model)"),fAe.forEach(t),d7o=i(O),Tv=n(O,"LI",{});var gAe=s(Tv);Ine=n(gAe,"STRONG",{});var eet=s(Ine);c7o=r(eet,"yoso"),eet.forEach(t),m7o=r(gAe," \u2014 "),lN=n(gAe,"A",{href:!0});var oet=s(lN);f7o=r(oet,"YosoForMultipleChoice"),oet.forEach(t),g7o=r(gAe," (YOSO model)"),gAe.forEach(t),O.forEach(t),h7o=i(Wt),Fv=n(Wt,"P",{});var hAe=s(Fv);u7o=r(hAe,"The model is set in evaluation mode by default using "),jne=n(hAe,"CODE",{});var ret=s(jne);p7o=r(ret,"model.eval()"),ret.forEach(t),_7o=r(hAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nne=n(hAe,"CODE",{});var tet=s(Nne);b7o=r(tet,"model.train()"),tet.forEach(t),hAe.forEach(t),v7o=i(Wt),Dne=n(Wt,"P",{});var aet=s(Dne);T7o=r(aet,"Examples:"),aet.forEach(t),F7o=i(Wt),f(jw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Xke=i(c),_d=n(c,"H2",{class:!0});var KSe=s(_d);Cv=n(KSe,"A",{id:!0,class:!0,href:!0});var net=s(Cv);qne=n(net,"SPAN",{});var set=s(qne);f(Nw.$$.fragment,set),set.forEach(t),net.forEach(t),C7o=i(KSe),Gne=n(KSe,"SPAN",{});var iet=s(Gne);M7o=r(iet,"AutoModelForNextSentencePrediction"),iet.forEach(t),KSe.forEach(t),Vke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);f(Dw.$$.fragment,sl),E7o=i(sl),bd=n(sl,"P",{});var _W=s(bd);y7o=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),One=n(_W,"CODE",{});var det=s(One);w7o=r(det,"from_pretrained()"),det.forEach(t),A7o=r(_W,"class method or the "),Xne=n(_W,"CODE",{});var cet=s(Xne);L7o=r(cet,"from_config()"),cet.forEach(t),B7o=r(_W,`class
method.`),_W.forEach(t),x7o=i(sl),qw=n(sl,"P",{});var ZSe=s(qw);k7o=r(ZSe,"This class cannot be instantiated directly using "),Vne=n(ZSe,"CODE",{});var met=s(Vne);R7o=r(met,"__init__()"),met.forEach(t),S7o=r(ZSe," (throws an error)."),ZSe.forEach(t),P7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);f(Gw.$$.fragment,ll),$7o=i(ll),zne=n(ll,"P",{});var fet=s(zne);I7o=r(fet,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fet.forEach(t),j7o=i(ll),vd=n(ll,"P",{});var bW=s(vd);N7o=r(bW,`Note:
Loading a model from its configuration file does `),Wne=n(bW,"STRONG",{});var get=s(Wne);D7o=r(get,"not"),get.forEach(t),q7o=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qne=n(bW,"CODE",{});var het=s(Qne);G7o=r(het,"from_pretrained()"),het.forEach(t),O7o=r(bW,"to load the model weights."),bW.forEach(t),X7o=i(ll),Hne=n(ll,"P",{});var uet=s(Hne);V7o=r(uet,"Examples:"),uet.forEach(t),z7o=i(ll),f(Ow.$$.fragment,ll),ll.forEach(t),W7o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);f(Xw.$$.fragment,Qt),Q7o=i(Qt),Une=n(Qt,"P",{});var pet=s(Une);H7o=r(pet,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pet.forEach(t),U7o=i(Qt),Ya=n(Qt,"P",{});var T5=s(Ya);J7o=r(T5,"The model class to instantiate is selected based on the "),Jne=n(T5,"CODE",{});var _et=s(Jne);Y7o=r(_et,"model_type"),_et.forEach(t),K7o=r(T5,` property of the config object (either
passed as an argument or loaded from `),Yne=n(T5,"CODE",{});var bet=s(Yne);Z7o=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),e8o=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kne=n(T5,"CODE",{});var vet=s(Kne);o8o=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),r8o=r(T5,":"),T5.forEach(t),t8o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Mv=n(il,"LI",{});var uAe=s(Mv);Zne=n(uAe,"STRONG",{});var Tet=s(Zne);a8o=r(Tet,"bert"),Tet.forEach(t),n8o=r(uAe," \u2014 "),iN=n(uAe,"A",{href:!0});var Fet=s(iN);s8o=r(Fet,"BertForNextSentencePrediction"),Fet.forEach(t),l8o=r(uAe," (BERT model)"),uAe.forEach(t),i8o=i(il),Ev=n(il,"LI",{});var pAe=s(Ev);ese=n(pAe,"STRONG",{});var Cet=s(ese);d8o=r(Cet,"fnet"),Cet.forEach(t),c8o=r(pAe," \u2014 "),dN=n(pAe,"A",{href:!0});var Met=s(dN);m8o=r(Met,"FNetForNextSentencePrediction"),Met.forEach(t),f8o=r(pAe," (FNet model)"),pAe.forEach(t),g8o=i(il),yv=n(il,"LI",{});var _Ae=s(yv);ose=n(_Ae,"STRONG",{});var Eet=s(ose);h8o=r(Eet,"megatron-bert"),Eet.forEach(t),u8o=r(_Ae," \u2014 "),cN=n(_Ae,"A",{href:!0});var yet=s(cN);p8o=r(yet,"MegatronBertForNextSentencePrediction"),yet.forEach(t),_8o=r(_Ae," (MegatronBert model)"),_Ae.forEach(t),b8o=i(il),wv=n(il,"LI",{});var bAe=s(wv);rse=n(bAe,"STRONG",{});var wet=s(rse);v8o=r(wet,"mobilebert"),wet.forEach(t),T8o=r(bAe," \u2014 "),mN=n(bAe,"A",{href:!0});var Aet=s(mN);F8o=r(Aet,"MobileBertForNextSentencePrediction"),Aet.forEach(t),C8o=r(bAe," (MobileBERT model)"),bAe.forEach(t),M8o=i(il),Av=n(il,"LI",{});var vAe=s(Av);tse=n(vAe,"STRONG",{});var Let=s(tse);E8o=r(Let,"qdqbert"),Let.forEach(t),y8o=r(vAe," \u2014 "),fN=n(vAe,"A",{href:!0});var Bet=s(fN);w8o=r(Bet,"QDQBertForNextSentencePrediction"),Bet.forEach(t),A8o=r(vAe," (QDQBert model)"),vAe.forEach(t),il.forEach(t),L8o=i(Qt),Lv=n(Qt,"P",{});var TAe=s(Lv);B8o=r(TAe,"The model is set in evaluation mode by default using "),ase=n(TAe,"CODE",{});var xet=s(ase);x8o=r(xet,"model.eval()"),xet.forEach(t),k8o=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=n(TAe,"CODE",{});var ket=s(nse);R8o=r(ket,"model.train()"),ket.forEach(t),TAe.forEach(t),S8o=i(Qt),sse=n(Qt,"P",{});var Ret=s(sse);P8o=r(Ret,"Examples:"),Ret.forEach(t),$8o=i(Qt),f(Vw.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),zke=i(c),Td=n(c,"H2",{class:!0});var ePe=s(Td);Bv=n(ePe,"A",{id:!0,class:!0,href:!0});var Set=s(Bv);lse=n(Set,"SPAN",{});var Pet=s(lse);f(zw.$$.fragment,Pet),Pet.forEach(t),Set.forEach(t),I8o=i(ePe),ise=n(ePe,"SPAN",{});var $et=s(ise);j8o=r($et,"AutoModelForTokenClassification"),$et.forEach(t),ePe.forEach(t),Wke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);f(Ww.$$.fragment,dl),N8o=i(dl),Fd=n(dl,"P",{});var vW=s(Fd);D8o=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dse=n(vW,"CODE",{});var Iet=s(dse);q8o=r(Iet,"from_pretrained()"),Iet.forEach(t),G8o=r(vW,"class method or the "),cse=n(vW,"CODE",{});var jet=s(cse);O8o=r(jet,"from_config()"),jet.forEach(t),X8o=r(vW,`class
method.`),vW.forEach(t),V8o=i(dl),Qw=n(dl,"P",{});var oPe=s(Qw);z8o=r(oPe,"This class cannot be instantiated directly using "),mse=n(oPe,"CODE",{});var Net=s(mse);W8o=r(Net,"__init__()"),Net.forEach(t),Q8o=r(oPe," (throws an error)."),oPe.forEach(t),H8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);f(Hw.$$.fragment,cl),U8o=i(cl),fse=n(cl,"P",{});var Det=s(fse);J8o=r(Det,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Det.forEach(t),Y8o=i(cl),Cd=n(cl,"P",{});var TW=s(Cd);K8o=r(TW,`Note:
Loading a model from its configuration file does `),gse=n(TW,"STRONG",{});var qet=s(gse);Z8o=r(qet,"not"),qet.forEach(t),e9o=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hse=n(TW,"CODE",{});var Get=s(hse);o9o=r(Get,"from_pretrained()"),Get.forEach(t),r9o=r(TW,"to load the model weights."),TW.forEach(t),t9o=i(cl),use=n(cl,"P",{});var Oet=s(use);a9o=r(Oet,"Examples:"),Oet.forEach(t),n9o=i(cl),f(Uw.$$.fragment,cl),cl.forEach(t),s9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);f(Jw.$$.fragment,Ht),l9o=i(Ht),pse=n(Ht,"P",{});var Xet=s(pse);i9o=r(Xet,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xet.forEach(t),d9o=i(Ht),Ka=n(Ht,"P",{});var F5=s(Ka);c9o=r(F5,"The model class to instantiate is selected based on the "),_se=n(F5,"CODE",{});var Vet=s(_se);m9o=r(Vet,"model_type"),Vet.forEach(t),f9o=r(F5,` property of the config object (either
passed as an argument or loaded from `),bse=n(F5,"CODE",{});var zet=s(bse);g9o=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),h9o=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vse=n(F5,"CODE",{});var Wet=s(vse);u9o=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),p9o=r(F5,":"),F5.forEach(t),_9o=i(Ht),D=n(Ht,"UL",{});var q=s(D);xv=n(q,"LI",{});var FAe=s(xv);Tse=n(FAe,"STRONG",{});var Qet=s(Tse);b9o=r(Qet,"albert"),Qet.forEach(t),v9o=r(FAe," \u2014 "),gN=n(FAe,"A",{href:!0});var Het=s(gN);T9o=r(Het,"AlbertForTokenClassification"),Het.forEach(t),F9o=r(FAe," (ALBERT model)"),FAe.forEach(t),C9o=i(q),kv=n(q,"LI",{});var CAe=s(kv);Fse=n(CAe,"STRONG",{});var Uet=s(Fse);M9o=r(Uet,"bert"),Uet.forEach(t),E9o=r(CAe," \u2014 "),hN=n(CAe,"A",{href:!0});var Jet=s(hN);y9o=r(Jet,"BertForTokenClassification"),Jet.forEach(t),w9o=r(CAe," (BERT model)"),CAe.forEach(t),A9o=i(q),Rv=n(q,"LI",{});var MAe=s(Rv);Cse=n(MAe,"STRONG",{});var Yet=s(Cse);L9o=r(Yet,"big_bird"),Yet.forEach(t),B9o=r(MAe," \u2014 "),uN=n(MAe,"A",{href:!0});var Ket=s(uN);x9o=r(Ket,"BigBirdForTokenClassification"),Ket.forEach(t),k9o=r(MAe," (BigBird model)"),MAe.forEach(t),R9o=i(q),Sv=n(q,"LI",{});var EAe=s(Sv);Mse=n(EAe,"STRONG",{});var Zet=s(Mse);S9o=r(Zet,"camembert"),Zet.forEach(t),P9o=r(EAe," \u2014 "),pN=n(EAe,"A",{href:!0});var eot=s(pN);$9o=r(eot,"CamembertForTokenClassification"),eot.forEach(t),I9o=r(EAe," (CamemBERT model)"),EAe.forEach(t),j9o=i(q),Pv=n(q,"LI",{});var yAe=s(Pv);Ese=n(yAe,"STRONG",{});var oot=s(Ese);N9o=r(oot,"canine"),oot.forEach(t),D9o=r(yAe," \u2014 "),_N=n(yAe,"A",{href:!0});var rot=s(_N);q9o=r(rot,"CanineForTokenClassification"),rot.forEach(t),G9o=r(yAe," (Canine model)"),yAe.forEach(t),O9o=i(q),$v=n(q,"LI",{});var wAe=s($v);yse=n(wAe,"STRONG",{});var tot=s(yse);X9o=r(tot,"convbert"),tot.forEach(t),V9o=r(wAe," \u2014 "),bN=n(wAe,"A",{href:!0});var aot=s(bN);z9o=r(aot,"ConvBertForTokenClassification"),aot.forEach(t),W9o=r(wAe," (ConvBERT model)"),wAe.forEach(t),Q9o=i(q),Iv=n(q,"LI",{});var AAe=s(Iv);wse=n(AAe,"STRONG",{});var not=s(wse);H9o=r(not,"data2vec-text"),not.forEach(t),U9o=r(AAe," \u2014 "),vN=n(AAe,"A",{href:!0});var sot=s(vN);J9o=r(sot,"Data2VecTextForTokenClassification"),sot.forEach(t),Y9o=r(AAe," (Data2VecText model)"),AAe.forEach(t),K9o=i(q),jv=n(q,"LI",{});var LAe=s(jv);Ase=n(LAe,"STRONG",{});var lot=s(Ase);Z9o=r(lot,"deberta"),lot.forEach(t),eBo=r(LAe," \u2014 "),TN=n(LAe,"A",{href:!0});var iot=s(TN);oBo=r(iot,"DebertaForTokenClassification"),iot.forEach(t),rBo=r(LAe," (DeBERTa model)"),LAe.forEach(t),tBo=i(q),Nv=n(q,"LI",{});var BAe=s(Nv);Lse=n(BAe,"STRONG",{});var dot=s(Lse);aBo=r(dot,"deberta-v2"),dot.forEach(t),nBo=r(BAe," \u2014 "),FN=n(BAe,"A",{href:!0});var cot=s(FN);sBo=r(cot,"DebertaV2ForTokenClassification"),cot.forEach(t),lBo=r(BAe," (DeBERTa-v2 model)"),BAe.forEach(t),iBo=i(q),Dv=n(q,"LI",{});var xAe=s(Dv);Bse=n(xAe,"STRONG",{});var mot=s(Bse);dBo=r(mot,"distilbert"),mot.forEach(t),cBo=r(xAe," \u2014 "),CN=n(xAe,"A",{href:!0});var fot=s(CN);mBo=r(fot,"DistilBertForTokenClassification"),fot.forEach(t),fBo=r(xAe," (DistilBERT model)"),xAe.forEach(t),gBo=i(q),qv=n(q,"LI",{});var kAe=s(qv);xse=n(kAe,"STRONG",{});var got=s(xse);hBo=r(got,"electra"),got.forEach(t),uBo=r(kAe," \u2014 "),MN=n(kAe,"A",{href:!0});var hot=s(MN);pBo=r(hot,"ElectraForTokenClassification"),hot.forEach(t),_Bo=r(kAe," (ELECTRA model)"),kAe.forEach(t),bBo=i(q),Gv=n(q,"LI",{});var RAe=s(Gv);kse=n(RAe,"STRONG",{});var uot=s(kse);vBo=r(uot,"flaubert"),uot.forEach(t),TBo=r(RAe," \u2014 "),EN=n(RAe,"A",{href:!0});var pot=s(EN);FBo=r(pot,"FlaubertForTokenClassification"),pot.forEach(t),CBo=r(RAe," (FlauBERT model)"),RAe.forEach(t),MBo=i(q),Ov=n(q,"LI",{});var SAe=s(Ov);Rse=n(SAe,"STRONG",{});var _ot=s(Rse);EBo=r(_ot,"fnet"),_ot.forEach(t),yBo=r(SAe," \u2014 "),yN=n(SAe,"A",{href:!0});var bot=s(yN);wBo=r(bot,"FNetForTokenClassification"),bot.forEach(t),ABo=r(SAe," (FNet model)"),SAe.forEach(t),LBo=i(q),Xv=n(q,"LI",{});var PAe=s(Xv);Sse=n(PAe,"STRONG",{});var vot=s(Sse);BBo=r(vot,"funnel"),vot.forEach(t),xBo=r(PAe," \u2014 "),wN=n(PAe,"A",{href:!0});var Tot=s(wN);kBo=r(Tot,"FunnelForTokenClassification"),Tot.forEach(t),RBo=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),SBo=i(q),Vv=n(q,"LI",{});var $Ae=s(Vv);Pse=n($Ae,"STRONG",{});var Fot=s(Pse);PBo=r(Fot,"gpt2"),Fot.forEach(t),$Bo=r($Ae," \u2014 "),AN=n($Ae,"A",{href:!0});var Cot=s(AN);IBo=r(Cot,"GPT2ForTokenClassification"),Cot.forEach(t),jBo=r($Ae," (OpenAI GPT-2 model)"),$Ae.forEach(t),NBo=i(q),zv=n(q,"LI",{});var IAe=s(zv);$se=n(IAe,"STRONG",{});var Mot=s($se);DBo=r(Mot,"ibert"),Mot.forEach(t),qBo=r(IAe," \u2014 "),LN=n(IAe,"A",{href:!0});var Eot=s(LN);GBo=r(Eot,"IBertForTokenClassification"),Eot.forEach(t),OBo=r(IAe," (I-BERT model)"),IAe.forEach(t),XBo=i(q),Wv=n(q,"LI",{});var jAe=s(Wv);Ise=n(jAe,"STRONG",{});var yot=s(Ise);VBo=r(yot,"layoutlm"),yot.forEach(t),zBo=r(jAe," \u2014 "),BN=n(jAe,"A",{href:!0});var wot=s(BN);WBo=r(wot,"LayoutLMForTokenClassification"),wot.forEach(t),QBo=r(jAe," (LayoutLM model)"),jAe.forEach(t),HBo=i(q),Qv=n(q,"LI",{});var NAe=s(Qv);jse=n(NAe,"STRONG",{});var Aot=s(jse);UBo=r(Aot,"layoutlmv2"),Aot.forEach(t),JBo=r(NAe," \u2014 "),xN=n(NAe,"A",{href:!0});var Lot=s(xN);YBo=r(Lot,"LayoutLMv2ForTokenClassification"),Lot.forEach(t),KBo=r(NAe," (LayoutLMv2 model)"),NAe.forEach(t),ZBo=i(q),Hv=n(q,"LI",{});var DAe=s(Hv);Nse=n(DAe,"STRONG",{});var Bot=s(Nse);exo=r(Bot,"longformer"),Bot.forEach(t),oxo=r(DAe," \u2014 "),kN=n(DAe,"A",{href:!0});var xot=s(kN);rxo=r(xot,"LongformerForTokenClassification"),xot.forEach(t),txo=r(DAe," (Longformer model)"),DAe.forEach(t),axo=i(q),Uv=n(q,"LI",{});var qAe=s(Uv);Dse=n(qAe,"STRONG",{});var kot=s(Dse);nxo=r(kot,"megatron-bert"),kot.forEach(t),sxo=r(qAe," \u2014 "),RN=n(qAe,"A",{href:!0});var Rot=s(RN);lxo=r(Rot,"MegatronBertForTokenClassification"),Rot.forEach(t),ixo=r(qAe," (MegatronBert model)"),qAe.forEach(t),dxo=i(q),Jv=n(q,"LI",{});var GAe=s(Jv);qse=n(GAe,"STRONG",{});var Sot=s(qse);cxo=r(Sot,"mobilebert"),Sot.forEach(t),mxo=r(GAe," \u2014 "),SN=n(GAe,"A",{href:!0});var Pot=s(SN);fxo=r(Pot,"MobileBertForTokenClassification"),Pot.forEach(t),gxo=r(GAe," (MobileBERT model)"),GAe.forEach(t),hxo=i(q),Yv=n(q,"LI",{});var OAe=s(Yv);Gse=n(OAe,"STRONG",{});var $ot=s(Gse);uxo=r($ot,"mpnet"),$ot.forEach(t),pxo=r(OAe," \u2014 "),PN=n(OAe,"A",{href:!0});var Iot=s(PN);_xo=r(Iot,"MPNetForTokenClassification"),Iot.forEach(t),bxo=r(OAe," (MPNet model)"),OAe.forEach(t),vxo=i(q),Kv=n(q,"LI",{});var XAe=s(Kv);Ose=n(XAe,"STRONG",{});var jot=s(Ose);Txo=r(jot,"nystromformer"),jot.forEach(t),Fxo=r(XAe," \u2014 "),$N=n(XAe,"A",{href:!0});var Not=s($N);Cxo=r(Not,"NystromformerForTokenClassification"),Not.forEach(t),Mxo=r(XAe," (Nystromformer model)"),XAe.forEach(t),Exo=i(q),Zv=n(q,"LI",{});var VAe=s(Zv);Xse=n(VAe,"STRONG",{});var Dot=s(Xse);yxo=r(Dot,"qdqbert"),Dot.forEach(t),wxo=r(VAe," \u2014 "),IN=n(VAe,"A",{href:!0});var qot=s(IN);Axo=r(qot,"QDQBertForTokenClassification"),qot.forEach(t),Lxo=r(VAe," (QDQBert model)"),VAe.forEach(t),Bxo=i(q),eT=n(q,"LI",{});var zAe=s(eT);Vse=n(zAe,"STRONG",{});var Got=s(Vse);xxo=r(Got,"rembert"),Got.forEach(t),kxo=r(zAe," \u2014 "),jN=n(zAe,"A",{href:!0});var Oot=s(jN);Rxo=r(Oot,"RemBertForTokenClassification"),Oot.forEach(t),Sxo=r(zAe," (RemBERT model)"),zAe.forEach(t),Pxo=i(q),oT=n(q,"LI",{});var WAe=s(oT);zse=n(WAe,"STRONG",{});var Xot=s(zse);$xo=r(Xot,"roberta"),Xot.forEach(t),Ixo=r(WAe," \u2014 "),NN=n(WAe,"A",{href:!0});var Vot=s(NN);jxo=r(Vot,"RobertaForTokenClassification"),Vot.forEach(t),Nxo=r(WAe," (RoBERTa model)"),WAe.forEach(t),Dxo=i(q),rT=n(q,"LI",{});var QAe=s(rT);Wse=n(QAe,"STRONG",{});var zot=s(Wse);qxo=r(zot,"roformer"),zot.forEach(t),Gxo=r(QAe," \u2014 "),DN=n(QAe,"A",{href:!0});var Wot=s(DN);Oxo=r(Wot,"RoFormerForTokenClassification"),Wot.forEach(t),Xxo=r(QAe," (RoFormer model)"),QAe.forEach(t),Vxo=i(q),tT=n(q,"LI",{});var HAe=s(tT);Qse=n(HAe,"STRONG",{});var Qot=s(Qse);zxo=r(Qot,"squeezebert"),Qot.forEach(t),Wxo=r(HAe," \u2014 "),qN=n(HAe,"A",{href:!0});var Hot=s(qN);Qxo=r(Hot,"SqueezeBertForTokenClassification"),Hot.forEach(t),Hxo=r(HAe," (SqueezeBERT model)"),HAe.forEach(t),Uxo=i(q),aT=n(q,"LI",{});var UAe=s(aT);Hse=n(UAe,"STRONG",{});var Uot=s(Hse);Jxo=r(Uot,"xlm"),Uot.forEach(t),Yxo=r(UAe," \u2014 "),GN=n(UAe,"A",{href:!0});var Jot=s(GN);Kxo=r(Jot,"XLMForTokenClassification"),Jot.forEach(t),Zxo=r(UAe," (XLM model)"),UAe.forEach(t),eko=i(q),nT=n(q,"LI",{});var JAe=s(nT);Use=n(JAe,"STRONG",{});var Yot=s(Use);oko=r(Yot,"xlm-roberta"),Yot.forEach(t),rko=r(JAe," \u2014 "),ON=n(JAe,"A",{href:!0});var Kot=s(ON);tko=r(Kot,"XLMRobertaForTokenClassification"),Kot.forEach(t),ako=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),nko=i(q),sT=n(q,"LI",{});var YAe=s(sT);Jse=n(YAe,"STRONG",{});var Zot=s(Jse);sko=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),lko=r(YAe," \u2014 "),XN=n(YAe,"A",{href:!0});var ert=s(XN);iko=r(ert,"XLMRobertaXLForTokenClassification"),ert.forEach(t),dko=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),cko=i(q),lT=n(q,"LI",{});var KAe=s(lT);Yse=n(KAe,"STRONG",{});var ort=s(Yse);mko=r(ort,"xlnet"),ort.forEach(t),fko=r(KAe," \u2014 "),VN=n(KAe,"A",{href:!0});var rrt=s(VN);gko=r(rrt,"XLNetForTokenClassification"),rrt.forEach(t),hko=r(KAe," (XLNet model)"),KAe.forEach(t),uko=i(q),iT=n(q,"LI",{});var ZAe=s(iT);Kse=n(ZAe,"STRONG",{});var trt=s(Kse);pko=r(trt,"yoso"),trt.forEach(t),_ko=r(ZAe," \u2014 "),zN=n(ZAe,"A",{href:!0});var art=s(zN);bko=r(art,"YosoForTokenClassification"),art.forEach(t),vko=r(ZAe," (YOSO model)"),ZAe.forEach(t),q.forEach(t),Tko=i(Ht),dT=n(Ht,"P",{});var e0e=s(dT);Fko=r(e0e,"The model is set in evaluation mode by default using "),Zse=n(e0e,"CODE",{});var nrt=s(Zse);Cko=r(nrt,"model.eval()"),nrt.forEach(t),Mko=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(e0e,"CODE",{});var srt=s(ele);Eko=r(srt,"model.train()"),srt.forEach(t),e0e.forEach(t),yko=i(Ht),ole=n(Ht,"P",{});var lrt=s(ole);wko=r(lrt,"Examples:"),lrt.forEach(t),Ako=i(Ht),f(Yw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Qke=i(c),Md=n(c,"H2",{class:!0});var rPe=s(Md);cT=n(rPe,"A",{id:!0,class:!0,href:!0});var irt=s(cT);rle=n(irt,"SPAN",{});var drt=s(rle);f(Kw.$$.fragment,drt),drt.forEach(t),irt.forEach(t),Lko=i(rPe),tle=n(rPe,"SPAN",{});var crt=s(tle);Bko=r(crt,"AutoModelForQuestionAnswering"),crt.forEach(t),rPe.forEach(t),Hke=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);f(Zw.$$.fragment,ml),xko=i(ml),Ed=n(ml,"P",{});var FW=s(Ed);kko=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ale=n(FW,"CODE",{});var mrt=s(ale);Rko=r(mrt,"from_pretrained()"),mrt.forEach(t),Sko=r(FW,"class method or the "),nle=n(FW,"CODE",{});var frt=s(nle);Pko=r(frt,"from_config()"),frt.forEach(t),$ko=r(FW,`class
method.`),FW.forEach(t),Iko=i(ml),e6=n(ml,"P",{});var tPe=s(e6);jko=r(tPe,"This class cannot be instantiated directly using "),sle=n(tPe,"CODE",{});var grt=s(sle);Nko=r(grt,"__init__()"),grt.forEach(t),Dko=r(tPe," (throws an error)."),tPe.forEach(t),qko=i(ml),Zr=n(ml,"DIV",{class:!0});var fl=s(Zr);f(o6.$$.fragment,fl),Gko=i(fl),lle=n(fl,"P",{});var hrt=s(lle);Oko=r(hrt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hrt.forEach(t),Xko=i(fl),yd=n(fl,"P",{});var CW=s(yd);Vko=r(CW,`Note:
Loading a model from its configuration file does `),ile=n(CW,"STRONG",{});var urt=s(ile);zko=r(urt,"not"),urt.forEach(t),Wko=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dle=n(CW,"CODE",{});var prt=s(dle);Qko=r(prt,"from_pretrained()"),prt.forEach(t),Hko=r(CW,"to load the model weights."),CW.forEach(t),Uko=i(fl),cle=n(fl,"P",{});var _rt=s(cle);Jko=r(_rt,"Examples:"),_rt.forEach(t),Yko=i(fl),f(r6.$$.fragment,fl),fl.forEach(t),Kko=i(ml),We=n(ml,"DIV",{class:!0});var Ut=s(We);f(t6.$$.fragment,Ut),Zko=i(Ut),mle=n(Ut,"P",{});var brt=s(mle);eRo=r(brt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),brt.forEach(t),oRo=i(Ut),Za=n(Ut,"P",{});var C5=s(Za);rRo=r(C5,"The model class to instantiate is selected based on the "),fle=n(C5,"CODE",{});var vrt=s(fle);tRo=r(vrt,"model_type"),vrt.forEach(t),aRo=r(C5,` property of the config object (either
passed as an argument or loaded from `),gle=n(C5,"CODE",{});var Trt=s(gle);nRo=r(Trt,"pretrained_model_name_or_path"),Trt.forEach(t),sRo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(C5,"CODE",{});var Frt=s(hle);lRo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),iRo=r(C5,":"),C5.forEach(t),dRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);mT=n(P,"LI",{});var o0e=s(mT);ule=n(o0e,"STRONG",{});var Crt=s(ule);cRo=r(Crt,"albert"),Crt.forEach(t),mRo=r(o0e," \u2014 "),WN=n(o0e,"A",{href:!0});var Mrt=s(WN);fRo=r(Mrt,"AlbertForQuestionAnswering"),Mrt.forEach(t),gRo=r(o0e," (ALBERT model)"),o0e.forEach(t),hRo=i(P),fT=n(P,"LI",{});var r0e=s(fT);ple=n(r0e,"STRONG",{});var Ert=s(ple);uRo=r(Ert,"bart"),Ert.forEach(t),pRo=r(r0e," \u2014 "),QN=n(r0e,"A",{href:!0});var yrt=s(QN);_Ro=r(yrt,"BartForQuestionAnswering"),yrt.forEach(t),bRo=r(r0e," (BART model)"),r0e.forEach(t),vRo=i(P),gT=n(P,"LI",{});var t0e=s(gT);_le=n(t0e,"STRONG",{});var wrt=s(_le);TRo=r(wrt,"bert"),wrt.forEach(t),FRo=r(t0e," \u2014 "),HN=n(t0e,"A",{href:!0});var Art=s(HN);CRo=r(Art,"BertForQuestionAnswering"),Art.forEach(t),MRo=r(t0e," (BERT model)"),t0e.forEach(t),ERo=i(P),hT=n(P,"LI",{});var a0e=s(hT);ble=n(a0e,"STRONG",{});var Lrt=s(ble);yRo=r(Lrt,"big_bird"),Lrt.forEach(t),wRo=r(a0e," \u2014 "),UN=n(a0e,"A",{href:!0});var Brt=s(UN);ARo=r(Brt,"BigBirdForQuestionAnswering"),Brt.forEach(t),LRo=r(a0e," (BigBird model)"),a0e.forEach(t),BRo=i(P),uT=n(P,"LI",{});var n0e=s(uT);vle=n(n0e,"STRONG",{});var xrt=s(vle);xRo=r(xrt,"bigbird_pegasus"),xrt.forEach(t),kRo=r(n0e," \u2014 "),JN=n(n0e,"A",{href:!0});var krt=s(JN);RRo=r(krt,"BigBirdPegasusForQuestionAnswering"),krt.forEach(t),SRo=r(n0e," (BigBirdPegasus model)"),n0e.forEach(t),PRo=i(P),pT=n(P,"LI",{});var s0e=s(pT);Tle=n(s0e,"STRONG",{});var Rrt=s(Tle);$Ro=r(Rrt,"camembert"),Rrt.forEach(t),IRo=r(s0e," \u2014 "),YN=n(s0e,"A",{href:!0});var Srt=s(YN);jRo=r(Srt,"CamembertForQuestionAnswering"),Srt.forEach(t),NRo=r(s0e," (CamemBERT model)"),s0e.forEach(t),DRo=i(P),_T=n(P,"LI",{});var l0e=s(_T);Fle=n(l0e,"STRONG",{});var Prt=s(Fle);qRo=r(Prt,"canine"),Prt.forEach(t),GRo=r(l0e," \u2014 "),KN=n(l0e,"A",{href:!0});var $rt=s(KN);ORo=r($rt,"CanineForQuestionAnswering"),$rt.forEach(t),XRo=r(l0e," (Canine model)"),l0e.forEach(t),VRo=i(P),bT=n(P,"LI",{});var i0e=s(bT);Cle=n(i0e,"STRONG",{});var Irt=s(Cle);zRo=r(Irt,"convbert"),Irt.forEach(t),WRo=r(i0e," \u2014 "),ZN=n(i0e,"A",{href:!0});var jrt=s(ZN);QRo=r(jrt,"ConvBertForQuestionAnswering"),jrt.forEach(t),HRo=r(i0e," (ConvBERT model)"),i0e.forEach(t),URo=i(P),vT=n(P,"LI",{});var d0e=s(vT);Mle=n(d0e,"STRONG",{});var Nrt=s(Mle);JRo=r(Nrt,"data2vec-text"),Nrt.forEach(t),YRo=r(d0e," \u2014 "),eD=n(d0e,"A",{href:!0});var Drt=s(eD);KRo=r(Drt,"Data2VecTextForQuestionAnswering"),Drt.forEach(t),ZRo=r(d0e," (Data2VecText model)"),d0e.forEach(t),eSo=i(P),TT=n(P,"LI",{});var c0e=s(TT);Ele=n(c0e,"STRONG",{});var qrt=s(Ele);oSo=r(qrt,"deberta"),qrt.forEach(t),rSo=r(c0e," \u2014 "),oD=n(c0e,"A",{href:!0});var Grt=s(oD);tSo=r(Grt,"DebertaForQuestionAnswering"),Grt.forEach(t),aSo=r(c0e," (DeBERTa model)"),c0e.forEach(t),nSo=i(P),FT=n(P,"LI",{});var m0e=s(FT);yle=n(m0e,"STRONG",{});var Ort=s(yle);sSo=r(Ort,"deberta-v2"),Ort.forEach(t),lSo=r(m0e," \u2014 "),rD=n(m0e,"A",{href:!0});var Xrt=s(rD);iSo=r(Xrt,"DebertaV2ForQuestionAnswering"),Xrt.forEach(t),dSo=r(m0e," (DeBERTa-v2 model)"),m0e.forEach(t),cSo=i(P),CT=n(P,"LI",{});var f0e=s(CT);wle=n(f0e,"STRONG",{});var Vrt=s(wle);mSo=r(Vrt,"distilbert"),Vrt.forEach(t),fSo=r(f0e," \u2014 "),tD=n(f0e,"A",{href:!0});var zrt=s(tD);gSo=r(zrt,"DistilBertForQuestionAnswering"),zrt.forEach(t),hSo=r(f0e," (DistilBERT model)"),f0e.forEach(t),uSo=i(P),MT=n(P,"LI",{});var g0e=s(MT);Ale=n(g0e,"STRONG",{});var Wrt=s(Ale);pSo=r(Wrt,"electra"),Wrt.forEach(t),_So=r(g0e," \u2014 "),aD=n(g0e,"A",{href:!0});var Qrt=s(aD);bSo=r(Qrt,"ElectraForQuestionAnswering"),Qrt.forEach(t),vSo=r(g0e," (ELECTRA model)"),g0e.forEach(t),TSo=i(P),ET=n(P,"LI",{});var h0e=s(ET);Lle=n(h0e,"STRONG",{});var Hrt=s(Lle);FSo=r(Hrt,"flaubert"),Hrt.forEach(t),CSo=r(h0e," \u2014 "),nD=n(h0e,"A",{href:!0});var Urt=s(nD);MSo=r(Urt,"FlaubertForQuestionAnsweringSimple"),Urt.forEach(t),ESo=r(h0e," (FlauBERT model)"),h0e.forEach(t),ySo=i(P),yT=n(P,"LI",{});var u0e=s(yT);Ble=n(u0e,"STRONG",{});var Jrt=s(Ble);wSo=r(Jrt,"fnet"),Jrt.forEach(t),ASo=r(u0e," \u2014 "),sD=n(u0e,"A",{href:!0});var Yrt=s(sD);LSo=r(Yrt,"FNetForQuestionAnswering"),Yrt.forEach(t),BSo=r(u0e," (FNet model)"),u0e.forEach(t),xSo=i(P),wT=n(P,"LI",{});var p0e=s(wT);xle=n(p0e,"STRONG",{});var Krt=s(xle);kSo=r(Krt,"funnel"),Krt.forEach(t),RSo=r(p0e," \u2014 "),lD=n(p0e,"A",{href:!0});var Zrt=s(lD);SSo=r(Zrt,"FunnelForQuestionAnswering"),Zrt.forEach(t),PSo=r(p0e," (Funnel Transformer model)"),p0e.forEach(t),$So=i(P),AT=n(P,"LI",{});var _0e=s(AT);kle=n(_0e,"STRONG",{});var ett=s(kle);ISo=r(ett,"gptj"),ett.forEach(t),jSo=r(_0e," \u2014 "),iD=n(_0e,"A",{href:!0});var ott=s(iD);NSo=r(ott,"GPTJForQuestionAnswering"),ott.forEach(t),DSo=r(_0e," (GPT-J model)"),_0e.forEach(t),qSo=i(P),LT=n(P,"LI",{});var b0e=s(LT);Rle=n(b0e,"STRONG",{});var rtt=s(Rle);GSo=r(rtt,"ibert"),rtt.forEach(t),OSo=r(b0e," \u2014 "),dD=n(b0e,"A",{href:!0});var ttt=s(dD);XSo=r(ttt,"IBertForQuestionAnswering"),ttt.forEach(t),VSo=r(b0e," (I-BERT model)"),b0e.forEach(t),zSo=i(P),BT=n(P,"LI",{});var v0e=s(BT);Sle=n(v0e,"STRONG",{});var att=s(Sle);WSo=r(att,"layoutlmv2"),att.forEach(t),QSo=r(v0e," \u2014 "),cD=n(v0e,"A",{href:!0});var ntt=s(cD);HSo=r(ntt,"LayoutLMv2ForQuestionAnswering"),ntt.forEach(t),USo=r(v0e," (LayoutLMv2 model)"),v0e.forEach(t),JSo=i(P),xT=n(P,"LI",{});var T0e=s(xT);Ple=n(T0e,"STRONG",{});var stt=s(Ple);YSo=r(stt,"led"),stt.forEach(t),KSo=r(T0e," \u2014 "),mD=n(T0e,"A",{href:!0});var ltt=s(mD);ZSo=r(ltt,"LEDForQuestionAnswering"),ltt.forEach(t),ePo=r(T0e," (LED model)"),T0e.forEach(t),oPo=i(P),kT=n(P,"LI",{});var F0e=s(kT);$le=n(F0e,"STRONG",{});var itt=s($le);rPo=r(itt,"longformer"),itt.forEach(t),tPo=r(F0e," \u2014 "),fD=n(F0e,"A",{href:!0});var dtt=s(fD);aPo=r(dtt,"LongformerForQuestionAnswering"),dtt.forEach(t),nPo=r(F0e," (Longformer model)"),F0e.forEach(t),sPo=i(P),RT=n(P,"LI",{});var C0e=s(RT);Ile=n(C0e,"STRONG",{});var ctt=s(Ile);lPo=r(ctt,"lxmert"),ctt.forEach(t),iPo=r(C0e," \u2014 "),gD=n(C0e,"A",{href:!0});var mtt=s(gD);dPo=r(mtt,"LxmertForQuestionAnswering"),mtt.forEach(t),cPo=r(C0e," (LXMERT model)"),C0e.forEach(t),mPo=i(P),ST=n(P,"LI",{});var M0e=s(ST);jle=n(M0e,"STRONG",{});var ftt=s(jle);fPo=r(ftt,"mbart"),ftt.forEach(t),gPo=r(M0e," \u2014 "),hD=n(M0e,"A",{href:!0});var gtt=s(hD);hPo=r(gtt,"MBartForQuestionAnswering"),gtt.forEach(t),uPo=r(M0e," (mBART model)"),M0e.forEach(t),pPo=i(P),PT=n(P,"LI",{});var E0e=s(PT);Nle=n(E0e,"STRONG",{});var htt=s(Nle);_Po=r(htt,"megatron-bert"),htt.forEach(t),bPo=r(E0e," \u2014 "),uD=n(E0e,"A",{href:!0});var utt=s(uD);vPo=r(utt,"MegatronBertForQuestionAnswering"),utt.forEach(t),TPo=r(E0e," (MegatronBert model)"),E0e.forEach(t),FPo=i(P),$T=n(P,"LI",{});var y0e=s($T);Dle=n(y0e,"STRONG",{});var ptt=s(Dle);CPo=r(ptt,"mobilebert"),ptt.forEach(t),MPo=r(y0e," \u2014 "),pD=n(y0e,"A",{href:!0});var _tt=s(pD);EPo=r(_tt,"MobileBertForQuestionAnswering"),_tt.forEach(t),yPo=r(y0e," (MobileBERT model)"),y0e.forEach(t),wPo=i(P),IT=n(P,"LI",{});var w0e=s(IT);qle=n(w0e,"STRONG",{});var btt=s(qle);APo=r(btt,"mpnet"),btt.forEach(t),LPo=r(w0e," \u2014 "),_D=n(w0e,"A",{href:!0});var vtt=s(_D);BPo=r(vtt,"MPNetForQuestionAnswering"),vtt.forEach(t),xPo=r(w0e," (MPNet model)"),w0e.forEach(t),kPo=i(P),jT=n(P,"LI",{});var A0e=s(jT);Gle=n(A0e,"STRONG",{});var Ttt=s(Gle);RPo=r(Ttt,"nystromformer"),Ttt.forEach(t),SPo=r(A0e," \u2014 "),bD=n(A0e,"A",{href:!0});var Ftt=s(bD);PPo=r(Ftt,"NystromformerForQuestionAnswering"),Ftt.forEach(t),$Po=r(A0e," (Nystromformer model)"),A0e.forEach(t),IPo=i(P),NT=n(P,"LI",{});var L0e=s(NT);Ole=n(L0e,"STRONG",{});var Ctt=s(Ole);jPo=r(Ctt,"qdqbert"),Ctt.forEach(t),NPo=r(L0e," \u2014 "),vD=n(L0e,"A",{href:!0});var Mtt=s(vD);DPo=r(Mtt,"QDQBertForQuestionAnswering"),Mtt.forEach(t),qPo=r(L0e," (QDQBert model)"),L0e.forEach(t),GPo=i(P),DT=n(P,"LI",{});var B0e=s(DT);Xle=n(B0e,"STRONG",{});var Ett=s(Xle);OPo=r(Ett,"reformer"),Ett.forEach(t),XPo=r(B0e," \u2014 "),TD=n(B0e,"A",{href:!0});var ytt=s(TD);VPo=r(ytt,"ReformerForQuestionAnswering"),ytt.forEach(t),zPo=r(B0e," (Reformer model)"),B0e.forEach(t),WPo=i(P),qT=n(P,"LI",{});var x0e=s(qT);Vle=n(x0e,"STRONG",{});var wtt=s(Vle);QPo=r(wtt,"rembert"),wtt.forEach(t),HPo=r(x0e," \u2014 "),FD=n(x0e,"A",{href:!0});var Att=s(FD);UPo=r(Att,"RemBertForQuestionAnswering"),Att.forEach(t),JPo=r(x0e," (RemBERT model)"),x0e.forEach(t),YPo=i(P),GT=n(P,"LI",{});var k0e=s(GT);zle=n(k0e,"STRONG",{});var Ltt=s(zle);KPo=r(Ltt,"roberta"),Ltt.forEach(t),ZPo=r(k0e," \u2014 "),CD=n(k0e,"A",{href:!0});var Btt=s(CD);e$o=r(Btt,"RobertaForQuestionAnswering"),Btt.forEach(t),o$o=r(k0e," (RoBERTa model)"),k0e.forEach(t),r$o=i(P),OT=n(P,"LI",{});var R0e=s(OT);Wle=n(R0e,"STRONG",{});var xtt=s(Wle);t$o=r(xtt,"roformer"),xtt.forEach(t),a$o=r(R0e," \u2014 "),MD=n(R0e,"A",{href:!0});var ktt=s(MD);n$o=r(ktt,"RoFormerForQuestionAnswering"),ktt.forEach(t),s$o=r(R0e," (RoFormer model)"),R0e.forEach(t),l$o=i(P),XT=n(P,"LI",{});var S0e=s(XT);Qle=n(S0e,"STRONG",{});var Rtt=s(Qle);i$o=r(Rtt,"splinter"),Rtt.forEach(t),d$o=r(S0e," \u2014 "),ED=n(S0e,"A",{href:!0});var Stt=s(ED);c$o=r(Stt,"SplinterForQuestionAnswering"),Stt.forEach(t),m$o=r(S0e," (Splinter model)"),S0e.forEach(t),f$o=i(P),VT=n(P,"LI",{});var P0e=s(VT);Hle=n(P0e,"STRONG",{});var Ptt=s(Hle);g$o=r(Ptt,"squeezebert"),Ptt.forEach(t),h$o=r(P0e," \u2014 "),yD=n(P0e,"A",{href:!0});var $tt=s(yD);u$o=r($tt,"SqueezeBertForQuestionAnswering"),$tt.forEach(t),p$o=r(P0e," (SqueezeBERT model)"),P0e.forEach(t),_$o=i(P),zT=n(P,"LI",{});var $0e=s(zT);Ule=n($0e,"STRONG",{});var Itt=s(Ule);b$o=r(Itt,"xlm"),Itt.forEach(t),v$o=r($0e," \u2014 "),wD=n($0e,"A",{href:!0});var jtt=s(wD);T$o=r(jtt,"XLMForQuestionAnsweringSimple"),jtt.forEach(t),F$o=r($0e," (XLM model)"),$0e.forEach(t),C$o=i(P),WT=n(P,"LI",{});var I0e=s(WT);Jle=n(I0e,"STRONG",{});var Ntt=s(Jle);M$o=r(Ntt,"xlm-roberta"),Ntt.forEach(t),E$o=r(I0e," \u2014 "),AD=n(I0e,"A",{href:!0});var Dtt=s(AD);y$o=r(Dtt,"XLMRobertaForQuestionAnswering"),Dtt.forEach(t),w$o=r(I0e," (XLM-RoBERTa model)"),I0e.forEach(t),A$o=i(P),QT=n(P,"LI",{});var j0e=s(QT);Yle=n(j0e,"STRONG",{});var qtt=s(Yle);L$o=r(qtt,"xlm-roberta-xl"),qtt.forEach(t),B$o=r(j0e," \u2014 "),LD=n(j0e,"A",{href:!0});var Gtt=s(LD);x$o=r(Gtt,"XLMRobertaXLForQuestionAnswering"),Gtt.forEach(t),k$o=r(j0e," (XLM-RoBERTa-XL model)"),j0e.forEach(t),R$o=i(P),HT=n(P,"LI",{});var N0e=s(HT);Kle=n(N0e,"STRONG",{});var Ott=s(Kle);S$o=r(Ott,"xlnet"),Ott.forEach(t),P$o=r(N0e," \u2014 "),BD=n(N0e,"A",{href:!0});var Xtt=s(BD);$$o=r(Xtt,"XLNetForQuestionAnsweringSimple"),Xtt.forEach(t),I$o=r(N0e," (XLNet model)"),N0e.forEach(t),j$o=i(P),UT=n(P,"LI",{});var D0e=s(UT);Zle=n(D0e,"STRONG",{});var Vtt=s(Zle);N$o=r(Vtt,"yoso"),Vtt.forEach(t),D$o=r(D0e," \u2014 "),xD=n(D0e,"A",{href:!0});var ztt=s(xD);q$o=r(ztt,"YosoForQuestionAnswering"),ztt.forEach(t),G$o=r(D0e," (YOSO model)"),D0e.forEach(t),P.forEach(t),O$o=i(Ut),JT=n(Ut,"P",{});var q0e=s(JT);X$o=r(q0e,"The model is set in evaluation mode by default using "),eie=n(q0e,"CODE",{});var Wtt=s(eie);V$o=r(Wtt,"model.eval()"),Wtt.forEach(t),z$o=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=n(q0e,"CODE",{});var Qtt=s(oie);W$o=r(Qtt,"model.train()"),Qtt.forEach(t),q0e.forEach(t),Q$o=i(Ut),rie=n(Ut,"P",{});var Htt=s(rie);H$o=r(Htt,"Examples:"),Htt.forEach(t),U$o=i(Ut),f(a6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),Uke=i(c),wd=n(c,"H2",{class:!0});var aPe=s(wd);YT=n(aPe,"A",{id:!0,class:!0,href:!0});var Utt=s(YT);tie=n(Utt,"SPAN",{});var Jtt=s(tie);f(n6.$$.fragment,Jtt),Jtt.forEach(t),Utt.forEach(t),J$o=i(aPe),aie=n(aPe,"SPAN",{});var Ytt=s(aie);Y$o=r(Ytt,"AutoModelForTableQuestionAnswering"),Ytt.forEach(t),aPe.forEach(t),Jke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);f(s6.$$.fragment,gl),K$o=i(gl),Ad=n(gl,"P",{});var MW=s(Ad);Z$o=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nie=n(MW,"CODE",{});var Ktt=s(nie);eIo=r(Ktt,"from_pretrained()"),Ktt.forEach(t),oIo=r(MW,"class method or the "),sie=n(MW,"CODE",{});var Ztt=s(sie);rIo=r(Ztt,"from_config()"),Ztt.forEach(t),tIo=r(MW,`class
method.`),MW.forEach(t),aIo=i(gl),l6=n(gl,"P",{});var nPe=s(l6);nIo=r(nPe,"This class cannot be instantiated directly using "),lie=n(nPe,"CODE",{});var eat=s(lie);sIo=r(eat,"__init__()"),eat.forEach(t),lIo=r(nPe," (throws an error)."),nPe.forEach(t),iIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);f(i6.$$.fragment,hl),dIo=i(hl),iie=n(hl,"P",{});var oat=s(iie);cIo=r(oat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oat.forEach(t),mIo=i(hl),Ld=n(hl,"P",{});var EW=s(Ld);fIo=r(EW,`Note:
Loading a model from its configuration file does `),die=n(EW,"STRONG",{});var rat=s(die);gIo=r(rat,"not"),rat.forEach(t),hIo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cie=n(EW,"CODE",{});var tat=s(cie);uIo=r(tat,"from_pretrained()"),tat.forEach(t),pIo=r(EW,"to load the model weights."),EW.forEach(t),_Io=i(hl),mie=n(hl,"P",{});var aat=s(mie);bIo=r(aat,"Examples:"),aat.forEach(t),vIo=i(hl),f(d6.$$.fragment,hl),hl.forEach(t),TIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);f(c6.$$.fragment,Jt),FIo=i(Jt),fie=n(Jt,"P",{});var nat=s(fie);CIo=r(nat,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nat.forEach(t),MIo=i(Jt),en=n(Jt,"P",{});var M5=s(en);EIo=r(M5,"The model class to instantiate is selected based on the "),gie=n(M5,"CODE",{});var sat=s(gie);yIo=r(sat,"model_type"),sat.forEach(t),wIo=r(M5,` property of the config object (either
passed as an argument or loaded from `),hie=n(M5,"CODE",{});var lat=s(hie);AIo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),LIo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(M5,"CODE",{});var iat=s(uie);BIo=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),xIo=r(M5,":"),M5.forEach(t),kIo=i(Jt),pie=n(Jt,"UL",{});var dat=s(pie);KT=n(dat,"LI",{});var G0e=s(KT);_ie=n(G0e,"STRONG",{});var cat=s(_ie);RIo=r(cat,"tapas"),cat.forEach(t),SIo=r(G0e," \u2014 "),kD=n(G0e,"A",{href:!0});var mat=s(kD);PIo=r(mat,"TapasForQuestionAnswering"),mat.forEach(t),$Io=r(G0e," (TAPAS model)"),G0e.forEach(t),dat.forEach(t),IIo=i(Jt),ZT=n(Jt,"P",{});var O0e=s(ZT);jIo=r(O0e,"The model is set in evaluation mode by default using "),bie=n(O0e,"CODE",{});var fat=s(bie);NIo=r(fat,"model.eval()"),fat.forEach(t),DIo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=n(O0e,"CODE",{});var gat=s(vie);qIo=r(gat,"model.train()"),gat.forEach(t),O0e.forEach(t),GIo=i(Jt),Tie=n(Jt,"P",{});var hat=s(Tie);OIo=r(hat,"Examples:"),hat.forEach(t),XIo=i(Jt),f(m6.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Yke=i(c),Bd=n(c,"H2",{class:!0});var sPe=s(Bd);e1=n(sPe,"A",{id:!0,class:!0,href:!0});var uat=s(e1);Fie=n(uat,"SPAN",{});var pat=s(Fie);f(f6.$$.fragment,pat),pat.forEach(t),uat.forEach(t),VIo=i(sPe),Cie=n(sPe,"SPAN",{});var _at=s(Cie);zIo=r(_at,"AutoModelForImageClassification"),_at.forEach(t),sPe.forEach(t),Kke=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);f(g6.$$.fragment,ul),WIo=i(ul),xd=n(ul,"P",{});var yW=s(xd);QIo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Mie=n(yW,"CODE",{});var bat=s(Mie);HIo=r(bat,"from_pretrained()"),bat.forEach(t),UIo=r(yW,"class method or the "),Eie=n(yW,"CODE",{});var vat=s(Eie);JIo=r(vat,"from_config()"),vat.forEach(t),YIo=r(yW,`class
method.`),yW.forEach(t),KIo=i(ul),h6=n(ul,"P",{});var lPe=s(h6);ZIo=r(lPe,"This class cannot be instantiated directly using "),yie=n(lPe,"CODE",{});var Tat=s(yie);ejo=r(Tat,"__init__()"),Tat.forEach(t),ojo=r(lPe," (throws an error)."),lPe.forEach(t),rjo=i(ul),ot=n(ul,"DIV",{class:!0});var pl=s(ot);f(u6.$$.fragment,pl),tjo=i(pl),wie=n(pl,"P",{});var Fat=s(wie);ajo=r(Fat,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fat.forEach(t),njo=i(pl),kd=n(pl,"P",{});var wW=s(kd);sjo=r(wW,`Note:
Loading a model from its configuration file does `),Aie=n(wW,"STRONG",{});var Cat=s(Aie);ljo=r(Cat,"not"),Cat.forEach(t),ijo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=n(wW,"CODE",{});var Mat=s(Lie);djo=r(Mat,"from_pretrained()"),Mat.forEach(t),cjo=r(wW,"to load the model weights."),wW.forEach(t),mjo=i(pl),Bie=n(pl,"P",{});var Eat=s(Bie);fjo=r(Eat,"Examples:"),Eat.forEach(t),gjo=i(pl),f(p6.$$.fragment,pl),pl.forEach(t),hjo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);f(_6.$$.fragment,Yt),ujo=i(Yt),xie=n(Yt,"P",{});var yat=s(xie);pjo=r(yat,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yat.forEach(t),_jo=i(Yt),on=n(Yt,"P",{});var E5=s(on);bjo=r(E5,"The model class to instantiate is selected based on the "),kie=n(E5,"CODE",{});var wat=s(kie);vjo=r(wat,"model_type"),wat.forEach(t),Tjo=r(E5,` property of the config object (either
passed as an argument or loaded from `),Rie=n(E5,"CODE",{});var Aat=s(Rie);Fjo=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),Cjo=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(E5,"CODE",{});var Lat=s(Sie);Mjo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),Ejo=r(E5,":"),E5.forEach(t),yjo=i(Yt),ge=n(Yt,"UL",{});var Fe=s(ge);o1=n(Fe,"LI",{});var X0e=s(o1);Pie=n(X0e,"STRONG",{});var Bat=s(Pie);wjo=r(Bat,"beit"),Bat.forEach(t),Ajo=r(X0e," \u2014 "),RD=n(X0e,"A",{href:!0});var xat=s(RD);Ljo=r(xat,"BeitForImageClassification"),xat.forEach(t),Bjo=r(X0e," (BEiT model)"),X0e.forEach(t),xjo=i(Fe),r1=n(Fe,"LI",{});var V0e=s(r1);$ie=n(V0e,"STRONG",{});var kat=s($ie);kjo=r(kat,"convnext"),kat.forEach(t),Rjo=r(V0e," \u2014 "),SD=n(V0e,"A",{href:!0});var Rat=s(SD);Sjo=r(Rat,"ConvNextForImageClassification"),Rat.forEach(t),Pjo=r(V0e," (ConvNext model)"),V0e.forEach(t),$jo=i(Fe),qs=n(Fe,"LI",{});var e9=s(qs);Iie=n(e9,"STRONG",{});var Sat=s(Iie);Ijo=r(Sat,"deit"),Sat.forEach(t),jjo=r(e9," \u2014 "),PD=n(e9,"A",{href:!0});var Pat=s(PD);Njo=r(Pat,"DeiTForImageClassification"),Pat.forEach(t),Djo=r(e9," or "),$D=n(e9,"A",{href:!0});var $at=s($D);qjo=r($at,"DeiTForImageClassificationWithTeacher"),$at.forEach(t),Gjo=r(e9," (DeiT model)"),e9.forEach(t),Ojo=i(Fe),t1=n(Fe,"LI",{});var z0e=s(t1);jie=n(z0e,"STRONG",{});var Iat=s(jie);Xjo=r(Iat,"imagegpt"),Iat.forEach(t),Vjo=r(z0e," \u2014 "),ID=n(z0e,"A",{href:!0});var jat=s(ID);zjo=r(jat,"ImageGPTForImageClassification"),jat.forEach(t),Wjo=r(z0e," (ImageGPT model)"),z0e.forEach(t),Qjo=i(Fe),fa=n(Fe,"LI",{});var Sm=s(fa);Nie=n(Sm,"STRONG",{});var Nat=s(Nie);Hjo=r(Nat,"perceiver"),Nat.forEach(t),Ujo=r(Sm," \u2014 "),jD=n(Sm,"A",{href:!0});var Dat=s(jD);Jjo=r(Dat,"PerceiverForImageClassificationLearned"),Dat.forEach(t),Yjo=r(Sm," or "),ND=n(Sm,"A",{href:!0});var qat=s(ND);Kjo=r(qat,"PerceiverForImageClassificationFourier"),qat.forEach(t),Zjo=r(Sm," or "),DD=n(Sm,"A",{href:!0});var Gat=s(DD);eNo=r(Gat,"PerceiverForImageClassificationConvProcessing"),Gat.forEach(t),oNo=r(Sm," (Perceiver model)"),Sm.forEach(t),rNo=i(Fe),a1=n(Fe,"LI",{});var W0e=s(a1);Die=n(W0e,"STRONG",{});var Oat=s(Die);tNo=r(Oat,"poolformer"),Oat.forEach(t),aNo=r(W0e," \u2014 "),qD=n(W0e,"A",{href:!0});var Xat=s(qD);nNo=r(Xat,"PoolFormerForImageClassification"),Xat.forEach(t),sNo=r(W0e," (PoolFormer model)"),W0e.forEach(t),lNo=i(Fe),n1=n(Fe,"LI",{});var Q0e=s(n1);qie=n(Q0e,"STRONG",{});var Vat=s(qie);iNo=r(Vat,"resnet"),Vat.forEach(t),dNo=r(Q0e," \u2014 "),GD=n(Q0e,"A",{href:!0});var zat=s(GD);cNo=r(zat,"ResNetForImageClassification"),zat.forEach(t),mNo=r(Q0e," (ResNet model)"),Q0e.forEach(t),fNo=i(Fe),s1=n(Fe,"LI",{});var H0e=s(s1);Gie=n(H0e,"STRONG",{});var Wat=s(Gie);gNo=r(Wat,"segformer"),Wat.forEach(t),hNo=r(H0e," \u2014 "),OD=n(H0e,"A",{href:!0});var Qat=s(OD);uNo=r(Qat,"SegformerForImageClassification"),Qat.forEach(t),pNo=r(H0e," (SegFormer model)"),H0e.forEach(t),_No=i(Fe),l1=n(Fe,"LI",{});var U0e=s(l1);Oie=n(U0e,"STRONG",{});var Hat=s(Oie);bNo=r(Hat,"swin"),Hat.forEach(t),vNo=r(U0e," \u2014 "),XD=n(U0e,"A",{href:!0});var Uat=s(XD);TNo=r(Uat,"SwinForImageClassification"),Uat.forEach(t),FNo=r(U0e," (Swin model)"),U0e.forEach(t),CNo=i(Fe),i1=n(Fe,"LI",{});var J0e=s(i1);Xie=n(J0e,"STRONG",{});var Jat=s(Xie);MNo=r(Jat,"van"),Jat.forEach(t),ENo=r(J0e," \u2014 "),VD=n(J0e,"A",{href:!0});var Yat=s(VD);yNo=r(Yat,"VanForImageClassification"),Yat.forEach(t),wNo=r(J0e," (VAN model)"),J0e.forEach(t),ANo=i(Fe),d1=n(Fe,"LI",{});var Y0e=s(d1);Vie=n(Y0e,"STRONG",{});var Kat=s(Vie);LNo=r(Kat,"vit"),Kat.forEach(t),BNo=r(Y0e," \u2014 "),zD=n(Y0e,"A",{href:!0});var Zat=s(zD);xNo=r(Zat,"ViTForImageClassification"),Zat.forEach(t),kNo=r(Y0e," (ViT model)"),Y0e.forEach(t),Fe.forEach(t),RNo=i(Yt),c1=n(Yt,"P",{});var K0e=s(c1);SNo=r(K0e,"The model is set in evaluation mode by default using "),zie=n(K0e,"CODE",{});var ent=s(zie);PNo=r(ent,"model.eval()"),ent.forEach(t),$No=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(K0e,"CODE",{});var ont=s(Wie);INo=r(ont,"model.train()"),ont.forEach(t),K0e.forEach(t),jNo=i(Yt),Qie=n(Yt,"P",{});var rnt=s(Qie);NNo=r(rnt,"Examples:"),rnt.forEach(t),DNo=i(Yt),f(b6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),Zke=i(c),Rd=n(c,"H2",{class:!0});var iPe=s(Rd);m1=n(iPe,"A",{id:!0,class:!0,href:!0});var tnt=s(m1);Hie=n(tnt,"SPAN",{});var ant=s(Hie);f(v6.$$.fragment,ant),ant.forEach(t),tnt.forEach(t),qNo=i(iPe),Uie=n(iPe,"SPAN",{});var nnt=s(Uie);GNo=r(nnt,"AutoModelForVision2Seq"),nnt.forEach(t),iPe.forEach(t),eRe=i(c),ir=n(c,"DIV",{class:!0});var _l=s(ir);f(T6.$$.fragment,_l),ONo=i(_l),Sd=n(_l,"P",{});var AW=s(Sd);XNo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Jie=n(AW,"CODE",{});var snt=s(Jie);VNo=r(snt,"from_pretrained()"),snt.forEach(t),zNo=r(AW,"class method or the "),Yie=n(AW,"CODE",{});var lnt=s(Yie);WNo=r(lnt,"from_config()"),lnt.forEach(t),QNo=r(AW,`class
method.`),AW.forEach(t),HNo=i(_l),F6=n(_l,"P",{});var dPe=s(F6);UNo=r(dPe,"This class cannot be instantiated directly using "),Kie=n(dPe,"CODE",{});var int=s(Kie);JNo=r(int,"__init__()"),int.forEach(t),YNo=r(dPe," (throws an error)."),dPe.forEach(t),KNo=i(_l),rt=n(_l,"DIV",{class:!0});var bl=s(rt);f(C6.$$.fragment,bl),ZNo=i(bl),Zie=n(bl,"P",{});var dnt=s(Zie);eDo=r(dnt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dnt.forEach(t),oDo=i(bl),Pd=n(bl,"P",{});var LW=s(Pd);rDo=r(LW,`Note:
Loading a model from its configuration file does `),ede=n(LW,"STRONG",{});var cnt=s(ede);tDo=r(cnt,"not"),cnt.forEach(t),aDo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ode=n(LW,"CODE",{});var mnt=s(ode);nDo=r(mnt,"from_pretrained()"),mnt.forEach(t),sDo=r(LW,"to load the model weights."),LW.forEach(t),lDo=i(bl),rde=n(bl,"P",{});var fnt=s(rde);iDo=r(fnt,"Examples:"),fnt.forEach(t),dDo=i(bl),f(M6.$$.fragment,bl),bl.forEach(t),cDo=i(_l),Ue=n(_l,"DIV",{class:!0});var Kt=s(Ue);f(E6.$$.fragment,Kt),mDo=i(Kt),tde=n(Kt,"P",{});var gnt=s(tde);fDo=r(gnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gnt.forEach(t),gDo=i(Kt),rn=n(Kt,"P",{});var y5=s(rn);hDo=r(y5,"The model class to instantiate is selected based on the "),ade=n(y5,"CODE",{});var hnt=s(ade);uDo=r(hnt,"model_type"),hnt.forEach(t),pDo=r(y5,` property of the config object (either
passed as an argument or loaded from `),nde=n(y5,"CODE",{});var unt=s(nde);_Do=r(unt,"pretrained_model_name_or_path"),unt.forEach(t),bDo=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sde=n(y5,"CODE",{});var pnt=s(sde);vDo=r(pnt,"pretrained_model_name_or_path"),pnt.forEach(t),TDo=r(y5,":"),y5.forEach(t),FDo=i(Kt),lde=n(Kt,"UL",{});var _nt=s(lde);f1=n(_nt,"LI",{});var Z0e=s(f1);ide=n(Z0e,"STRONG",{});var bnt=s(ide);CDo=r(bnt,"vision-encoder-decoder"),bnt.forEach(t),MDo=r(Z0e," \u2014 "),WD=n(Z0e,"A",{href:!0});var vnt=s(WD);EDo=r(vnt,"VisionEncoderDecoderModel"),vnt.forEach(t),yDo=r(Z0e," (Vision Encoder decoder model)"),Z0e.forEach(t),_nt.forEach(t),wDo=i(Kt),g1=n(Kt,"P",{});var eLe=s(g1);ADo=r(eLe,"The model is set in evaluation mode by default using "),dde=n(eLe,"CODE",{});var Tnt=s(dde);LDo=r(Tnt,"model.eval()"),Tnt.forEach(t),BDo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(eLe,"CODE",{});var Fnt=s(cde);xDo=r(Fnt,"model.train()"),Fnt.forEach(t),eLe.forEach(t),kDo=i(Kt),mde=n(Kt,"P",{});var Cnt=s(mde);RDo=r(Cnt,"Examples:"),Cnt.forEach(t),SDo=i(Kt),f(y6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),oRe=i(c),$d=n(c,"H2",{class:!0});var cPe=s($d);h1=n(cPe,"A",{id:!0,class:!0,href:!0});var Mnt=s(h1);fde=n(Mnt,"SPAN",{});var Ent=s(fde);f(w6.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),PDo=i(cPe),gde=n(cPe,"SPAN",{});var ynt=s(gde);$Do=r(ynt,"AutoModelForAudioClassification"),ynt.forEach(t),cPe.forEach(t),rRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);f(A6.$$.fragment,vl),IDo=i(vl),Id=n(vl,"P",{});var BW=s(Id);jDo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hde=n(BW,"CODE",{});var wnt=s(hde);NDo=r(wnt,"from_pretrained()"),wnt.forEach(t),DDo=r(BW,"class method or the "),ude=n(BW,"CODE",{});var Ant=s(ude);qDo=r(Ant,"from_config()"),Ant.forEach(t),GDo=r(BW,`class
method.`),BW.forEach(t),ODo=i(vl),L6=n(vl,"P",{});var mPe=s(L6);XDo=r(mPe,"This class cannot be instantiated directly using "),pde=n(mPe,"CODE",{});var Lnt=s(pde);VDo=r(Lnt,"__init__()"),Lnt.forEach(t),zDo=r(mPe," (throws an error)."),mPe.forEach(t),WDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);f(B6.$$.fragment,Tl),QDo=i(Tl),_de=n(Tl,"P",{});var Bnt=s(_de);HDo=r(Bnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bnt.forEach(t),UDo=i(Tl),jd=n(Tl,"P",{});var xW=s(jd);JDo=r(xW,`Note:
Loading a model from its configuration file does `),bde=n(xW,"STRONG",{});var xnt=s(bde);YDo=r(xnt,"not"),xnt.forEach(t),KDo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=n(xW,"CODE",{});var knt=s(vde);ZDo=r(knt,"from_pretrained()"),knt.forEach(t),eqo=r(xW,"to load the model weights."),xW.forEach(t),oqo=i(Tl),Tde=n(Tl,"P",{});var Rnt=s(Tde);rqo=r(Rnt,"Examples:"),Rnt.forEach(t),tqo=i(Tl),f(x6.$$.fragment,Tl),Tl.forEach(t),aqo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);f(k6.$$.fragment,Zt),nqo=i(Zt),Fde=n(Zt,"P",{});var Snt=s(Fde);sqo=r(Snt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Snt.forEach(t),lqo=i(Zt),tn=n(Zt,"P",{});var w5=s(tn);iqo=r(w5,"The model class to instantiate is selected based on the "),Cde=n(w5,"CODE",{});var Pnt=s(Cde);dqo=r(Pnt,"model_type"),Pnt.forEach(t),cqo=r(w5,` property of the config object (either
passed as an argument or loaded from `),Mde=n(w5,"CODE",{});var $nt=s(Mde);mqo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),fqo=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(w5,"CODE",{});var Int=s(Ede);gqo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),hqo=r(w5,":"),w5.forEach(t),uqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);u1=n(qo,"LI",{});var oLe=s(u1);yde=n(oLe,"STRONG",{});var jnt=s(yde);pqo=r(jnt,"data2vec-audio"),jnt.forEach(t),_qo=r(oLe," \u2014 "),QD=n(oLe,"A",{href:!0});var Nnt=s(QD);bqo=r(Nnt,"Data2VecAudioForSequenceClassification"),Nnt.forEach(t),vqo=r(oLe," (Data2VecAudio model)"),oLe.forEach(t),Tqo=i(qo),p1=n(qo,"LI",{});var rLe=s(p1);wde=n(rLe,"STRONG",{});var Dnt=s(wde);Fqo=r(Dnt,"hubert"),Dnt.forEach(t),Cqo=r(rLe," \u2014 "),HD=n(rLe,"A",{href:!0});var qnt=s(HD);Mqo=r(qnt,"HubertForSequenceClassification"),qnt.forEach(t),Eqo=r(rLe," (Hubert model)"),rLe.forEach(t),yqo=i(qo),_1=n(qo,"LI",{});var tLe=s(_1);Ade=n(tLe,"STRONG",{});var Gnt=s(Ade);wqo=r(Gnt,"sew"),Gnt.forEach(t),Aqo=r(tLe," \u2014 "),UD=n(tLe,"A",{href:!0});var Ont=s(UD);Lqo=r(Ont,"SEWForSequenceClassification"),Ont.forEach(t),Bqo=r(tLe," (SEW model)"),tLe.forEach(t),xqo=i(qo),b1=n(qo,"LI",{});var aLe=s(b1);Lde=n(aLe,"STRONG",{});var Xnt=s(Lde);kqo=r(Xnt,"sew-d"),Xnt.forEach(t),Rqo=r(aLe," \u2014 "),JD=n(aLe,"A",{href:!0});var Vnt=s(JD);Sqo=r(Vnt,"SEWDForSequenceClassification"),Vnt.forEach(t),Pqo=r(aLe," (SEW-D model)"),aLe.forEach(t),$qo=i(qo),v1=n(qo,"LI",{});var nLe=s(v1);Bde=n(nLe,"STRONG",{});var znt=s(Bde);Iqo=r(znt,"unispeech"),znt.forEach(t),jqo=r(nLe," \u2014 "),YD=n(nLe,"A",{href:!0});var Wnt=s(YD);Nqo=r(Wnt,"UniSpeechForSequenceClassification"),Wnt.forEach(t),Dqo=r(nLe," (UniSpeech model)"),nLe.forEach(t),qqo=i(qo),T1=n(qo,"LI",{});var sLe=s(T1);xde=n(sLe,"STRONG",{});var Qnt=s(xde);Gqo=r(Qnt,"unispeech-sat"),Qnt.forEach(t),Oqo=r(sLe," \u2014 "),KD=n(sLe,"A",{href:!0});var Hnt=s(KD);Xqo=r(Hnt,"UniSpeechSatForSequenceClassification"),Hnt.forEach(t),Vqo=r(sLe," (UniSpeechSat model)"),sLe.forEach(t),zqo=i(qo),F1=n(qo,"LI",{});var lLe=s(F1);kde=n(lLe,"STRONG",{});var Unt=s(kde);Wqo=r(Unt,"wav2vec2"),Unt.forEach(t),Qqo=r(lLe," \u2014 "),ZD=n(lLe,"A",{href:!0});var Jnt=s(ZD);Hqo=r(Jnt,"Wav2Vec2ForSequenceClassification"),Jnt.forEach(t),Uqo=r(lLe," (Wav2Vec2 model)"),lLe.forEach(t),Jqo=i(qo),C1=n(qo,"LI",{});var iLe=s(C1);Rde=n(iLe,"STRONG",{});var Ynt=s(Rde);Yqo=r(Ynt,"wavlm"),Ynt.forEach(t),Kqo=r(iLe," \u2014 "),eq=n(iLe,"A",{href:!0});var Knt=s(eq);Zqo=r(Knt,"WavLMForSequenceClassification"),Knt.forEach(t),eGo=r(iLe," (WavLM model)"),iLe.forEach(t),qo.forEach(t),oGo=i(Zt),M1=n(Zt,"P",{});var dLe=s(M1);rGo=r(dLe,"The model is set in evaluation mode by default using "),Sde=n(dLe,"CODE",{});var Znt=s(Sde);tGo=r(Znt,"model.eval()"),Znt.forEach(t),aGo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(dLe,"CODE",{});var est=s(Pde);nGo=r(est,"model.train()"),est.forEach(t),dLe.forEach(t),sGo=i(Zt),$de=n(Zt,"P",{});var ost=s($de);lGo=r(ost,"Examples:"),ost.forEach(t),iGo=i(Zt),f(R6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),tRe=i(c),Nd=n(c,"H2",{class:!0});var fPe=s(Nd);E1=n(fPe,"A",{id:!0,class:!0,href:!0});var rst=s(E1);Ide=n(rst,"SPAN",{});var tst=s(Ide);f(S6.$$.fragment,tst),tst.forEach(t),rst.forEach(t),dGo=i(fPe),jde=n(fPe,"SPAN",{});var ast=s(jde);cGo=r(ast,"AutoModelForAudioFrameClassification"),ast.forEach(t),fPe.forEach(t),aRe=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);f(P6.$$.fragment,Fl),mGo=i(Fl),Dd=n(Fl,"P",{});var kW=s(Dd);fGo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Nde=n(kW,"CODE",{});var nst=s(Nde);gGo=r(nst,"from_pretrained()"),nst.forEach(t),hGo=r(kW,"class method or the "),Dde=n(kW,"CODE",{});var sst=s(Dde);uGo=r(sst,"from_config()"),sst.forEach(t),pGo=r(kW,`class
method.`),kW.forEach(t),_Go=i(Fl),$6=n(Fl,"P",{});var gPe=s($6);bGo=r(gPe,"This class cannot be instantiated directly using "),qde=n(gPe,"CODE",{});var lst=s(qde);vGo=r(lst,"__init__()"),lst.forEach(t),TGo=r(gPe," (throws an error)."),gPe.forEach(t),FGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);f(I6.$$.fragment,Cl),CGo=i(Cl),Gde=n(Cl,"P",{});var ist=s(Gde);MGo=r(ist,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ist.forEach(t),EGo=i(Cl),qd=n(Cl,"P",{});var RW=s(qd);yGo=r(RW,`Note:
Loading a model from its configuration file does `),Ode=n(RW,"STRONG",{});var dst=s(Ode);wGo=r(dst,"not"),dst.forEach(t),AGo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(RW,"CODE",{});var cst=s(Xde);LGo=r(cst,"from_pretrained()"),cst.forEach(t),BGo=r(RW,"to load the model weights."),RW.forEach(t),xGo=i(Cl),Vde=n(Cl,"P",{});var mst=s(Vde);kGo=r(mst,"Examples:"),mst.forEach(t),RGo=i(Cl),f(j6.$$.fragment,Cl),Cl.forEach(t),SGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);f(N6.$$.fragment,ea),PGo=i(ea),zde=n(ea,"P",{});var fst=s(zde);$Go=r(fst,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fst.forEach(t),IGo=i(ea),an=n(ea,"P",{});var A5=s(an);jGo=r(A5,"The model class to instantiate is selected based on the "),Wde=n(A5,"CODE",{});var gst=s(Wde);NGo=r(gst,"model_type"),gst.forEach(t),DGo=r(A5,` property of the config object (either
passed as an argument or loaded from `),Qde=n(A5,"CODE",{});var hst=s(Qde);qGo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),GGo=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(A5,"CODE",{});var ust=s(Hde);OGo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),XGo=r(A5,":"),A5.forEach(t),VGo=i(ea),nn=n(ea,"UL",{});var L5=s(nn);y1=n(L5,"LI",{});var cLe=s(y1);Ude=n(cLe,"STRONG",{});var pst=s(Ude);zGo=r(pst,"data2vec-audio"),pst.forEach(t),WGo=r(cLe," \u2014 "),oq=n(cLe,"A",{href:!0});var _st=s(oq);QGo=r(_st,"Data2VecAudioForAudioFrameClassification"),_st.forEach(t),HGo=r(cLe," (Data2VecAudio model)"),cLe.forEach(t),UGo=i(L5),w1=n(L5,"LI",{});var mLe=s(w1);Jde=n(mLe,"STRONG",{});var bst=s(Jde);JGo=r(bst,"unispeech-sat"),bst.forEach(t),YGo=r(mLe," \u2014 "),rq=n(mLe,"A",{href:!0});var vst=s(rq);KGo=r(vst,"UniSpeechSatForAudioFrameClassification"),vst.forEach(t),ZGo=r(mLe," (UniSpeechSat model)"),mLe.forEach(t),eOo=i(L5),A1=n(L5,"LI",{});var fLe=s(A1);Yde=n(fLe,"STRONG",{});var Tst=s(Yde);oOo=r(Tst,"wav2vec2"),Tst.forEach(t),rOo=r(fLe," \u2014 "),tq=n(fLe,"A",{href:!0});var Fst=s(tq);tOo=r(Fst,"Wav2Vec2ForAudioFrameClassification"),Fst.forEach(t),aOo=r(fLe," (Wav2Vec2 model)"),fLe.forEach(t),nOo=i(L5),L1=n(L5,"LI",{});var gLe=s(L1);Kde=n(gLe,"STRONG",{});var Cst=s(Kde);sOo=r(Cst,"wavlm"),Cst.forEach(t),lOo=r(gLe," \u2014 "),aq=n(gLe,"A",{href:!0});var Mst=s(aq);iOo=r(Mst,"WavLMForAudioFrameClassification"),Mst.forEach(t),dOo=r(gLe," (WavLM model)"),gLe.forEach(t),L5.forEach(t),cOo=i(ea),B1=n(ea,"P",{});var hLe=s(B1);mOo=r(hLe,"The model is set in evaluation mode by default using "),Zde=n(hLe,"CODE",{});var Est=s(Zde);fOo=r(Est,"model.eval()"),Est.forEach(t),gOo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ece=n(hLe,"CODE",{});var yst=s(ece);hOo=r(yst,"model.train()"),yst.forEach(t),hLe.forEach(t),uOo=i(ea),oce=n(ea,"P",{});var wst=s(oce);pOo=r(wst,"Examples:"),wst.forEach(t),_Oo=i(ea),f(D6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),nRe=i(c),Gd=n(c,"H2",{class:!0});var hPe=s(Gd);x1=n(hPe,"A",{id:!0,class:!0,href:!0});var Ast=s(x1);rce=n(Ast,"SPAN",{});var Lst=s(rce);f(q6.$$.fragment,Lst),Lst.forEach(t),Ast.forEach(t),bOo=i(hPe),tce=n(hPe,"SPAN",{});var Bst=s(tce);vOo=r(Bst,"AutoModelForCTC"),Bst.forEach(t),hPe.forEach(t),sRe=i(c),mr=n(c,"DIV",{class:!0});var Ml=s(mr);f(G6.$$.fragment,Ml),TOo=i(Ml),Od=n(Ml,"P",{});var SW=s(Od);FOo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ace=n(SW,"CODE",{});var xst=s(ace);COo=r(xst,"from_pretrained()"),xst.forEach(t),MOo=r(SW,"class method or the "),nce=n(SW,"CODE",{});var kst=s(nce);EOo=r(kst,"from_config()"),kst.forEach(t),yOo=r(SW,`class
method.`),SW.forEach(t),wOo=i(Ml),O6=n(Ml,"P",{});var uPe=s(O6);AOo=r(uPe,"This class cannot be instantiated directly using "),sce=n(uPe,"CODE",{});var Rst=s(sce);LOo=r(Rst,"__init__()"),Rst.forEach(t),BOo=r(uPe," (throws an error)."),uPe.forEach(t),xOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);f(X6.$$.fragment,El),kOo=i(El),lce=n(El,"P",{});var Sst=s(lce);ROo=r(Sst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Sst.forEach(t),SOo=i(El),Xd=n(El,"P",{});var PW=s(Xd);POo=r(PW,`Note:
Loading a model from its configuration file does `),ice=n(PW,"STRONG",{});var Pst=s(ice);$Oo=r(Pst,"not"),Pst.forEach(t),IOo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dce=n(PW,"CODE",{});var $st=s(dce);jOo=r($st,"from_pretrained()"),$st.forEach(t),NOo=r(PW,"to load the model weights."),PW.forEach(t),DOo=i(El),cce=n(El,"P",{});var Ist=s(cce);qOo=r(Ist,"Examples:"),Ist.forEach(t),GOo=i(El),f(V6.$$.fragment,El),El.forEach(t),OOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);f(z6.$$.fragment,oa),XOo=i(oa),mce=n(oa,"P",{});var jst=s(mce);VOo=r(jst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jst.forEach(t),zOo=i(oa),sn=n(oa,"P",{});var B5=s(sn);WOo=r(B5,"The model class to instantiate is selected based on the "),fce=n(B5,"CODE",{});var Nst=s(fce);QOo=r(Nst,"model_type"),Nst.forEach(t),HOo=r(B5,` property of the config object (either
passed as an argument or loaded from `),gce=n(B5,"CODE",{});var Dst=s(gce);UOo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),JOo=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(B5,"CODE",{});var qst=s(hce);YOo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),KOo=r(B5,":"),B5.forEach(t),ZOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);k1=n(Go,"LI",{});var uLe=s(k1);uce=n(uLe,"STRONG",{});var Gst=s(uce);eXo=r(Gst,"data2vec-audio"),Gst.forEach(t),oXo=r(uLe," \u2014 "),nq=n(uLe,"A",{href:!0});var Ost=s(nq);rXo=r(Ost,"Data2VecAudioForCTC"),Ost.forEach(t),tXo=r(uLe," (Data2VecAudio model)"),uLe.forEach(t),aXo=i(Go),R1=n(Go,"LI",{});var pLe=s(R1);pce=n(pLe,"STRONG",{});var Xst=s(pce);nXo=r(Xst,"hubert"),Xst.forEach(t),sXo=r(pLe," \u2014 "),sq=n(pLe,"A",{href:!0});var Vst=s(sq);lXo=r(Vst,"HubertForCTC"),Vst.forEach(t),iXo=r(pLe," (Hubert model)"),pLe.forEach(t),dXo=i(Go),S1=n(Go,"LI",{});var _Le=s(S1);_ce=n(_Le,"STRONG",{});var zst=s(_ce);cXo=r(zst,"sew"),zst.forEach(t),mXo=r(_Le," \u2014 "),lq=n(_Le,"A",{href:!0});var Wst=s(lq);fXo=r(Wst,"SEWForCTC"),Wst.forEach(t),gXo=r(_Le," (SEW model)"),_Le.forEach(t),hXo=i(Go),P1=n(Go,"LI",{});var bLe=s(P1);bce=n(bLe,"STRONG",{});var Qst=s(bce);uXo=r(Qst,"sew-d"),Qst.forEach(t),pXo=r(bLe," \u2014 "),iq=n(bLe,"A",{href:!0});var Hst=s(iq);_Xo=r(Hst,"SEWDForCTC"),Hst.forEach(t),bXo=r(bLe," (SEW-D model)"),bLe.forEach(t),vXo=i(Go),$1=n(Go,"LI",{});var vLe=s($1);vce=n(vLe,"STRONG",{});var Ust=s(vce);TXo=r(Ust,"unispeech"),Ust.forEach(t),FXo=r(vLe," \u2014 "),dq=n(vLe,"A",{href:!0});var Jst=s(dq);CXo=r(Jst,"UniSpeechForCTC"),Jst.forEach(t),MXo=r(vLe," (UniSpeech model)"),vLe.forEach(t),EXo=i(Go),I1=n(Go,"LI",{});var TLe=s(I1);Tce=n(TLe,"STRONG",{});var Yst=s(Tce);yXo=r(Yst,"unispeech-sat"),Yst.forEach(t),wXo=r(TLe," \u2014 "),cq=n(TLe,"A",{href:!0});var Kst=s(cq);AXo=r(Kst,"UniSpeechSatForCTC"),Kst.forEach(t),LXo=r(TLe," (UniSpeechSat model)"),TLe.forEach(t),BXo=i(Go),j1=n(Go,"LI",{});var FLe=s(j1);Fce=n(FLe,"STRONG",{});var Zst=s(Fce);xXo=r(Zst,"wav2vec2"),Zst.forEach(t),kXo=r(FLe," \u2014 "),mq=n(FLe,"A",{href:!0});var elt=s(mq);RXo=r(elt,"Wav2Vec2ForCTC"),elt.forEach(t),SXo=r(FLe," (Wav2Vec2 model)"),FLe.forEach(t),PXo=i(Go),N1=n(Go,"LI",{});var CLe=s(N1);Cce=n(CLe,"STRONG",{});var olt=s(Cce);$Xo=r(olt,"wavlm"),olt.forEach(t),IXo=r(CLe," \u2014 "),fq=n(CLe,"A",{href:!0});var rlt=s(fq);jXo=r(rlt,"WavLMForCTC"),rlt.forEach(t),NXo=r(CLe," (WavLM model)"),CLe.forEach(t),Go.forEach(t),DXo=i(oa),D1=n(oa,"P",{});var MLe=s(D1);qXo=r(MLe,"The model is set in evaluation mode by default using "),Mce=n(MLe,"CODE",{});var tlt=s(Mce);GXo=r(tlt,"model.eval()"),tlt.forEach(t),OXo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(MLe,"CODE",{});var alt=s(Ece);XXo=r(alt,"model.train()"),alt.forEach(t),MLe.forEach(t),VXo=i(oa),yce=n(oa,"P",{});var nlt=s(yce);zXo=r(nlt,"Examples:"),nlt.forEach(t),WXo=i(oa),f(W6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),lRe=i(c),Vd=n(c,"H2",{class:!0});var pPe=s(Vd);q1=n(pPe,"A",{id:!0,class:!0,href:!0});var slt=s(q1);wce=n(slt,"SPAN",{});var llt=s(wce);f(Q6.$$.fragment,llt),llt.forEach(t),slt.forEach(t),QXo=i(pPe),Ace=n(pPe,"SPAN",{});var ilt=s(Ace);HXo=r(ilt,"AutoModelForSpeechSeq2Seq"),ilt.forEach(t),pPe.forEach(t),iRe=i(c),fr=n(c,"DIV",{class:!0});var yl=s(fr);f(H6.$$.fragment,yl),UXo=i(yl),zd=n(yl,"P",{});var $W=s(zd);JXo=r($W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lce=n($W,"CODE",{});var dlt=s(Lce);YXo=r(dlt,"from_pretrained()"),dlt.forEach(t),KXo=r($W,"class method or the "),Bce=n($W,"CODE",{});var clt=s(Bce);ZXo=r(clt,"from_config()"),clt.forEach(t),eVo=r($W,`class
method.`),$W.forEach(t),oVo=i(yl),U6=n(yl,"P",{});var _Pe=s(U6);rVo=r(_Pe,"This class cannot be instantiated directly using "),xce=n(_Pe,"CODE",{});var mlt=s(xce);tVo=r(mlt,"__init__()"),mlt.forEach(t),aVo=r(_Pe," (throws an error)."),_Pe.forEach(t),nVo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);f(J6.$$.fragment,wl),sVo=i(wl),kce=n(wl,"P",{});var flt=s(kce);lVo=r(flt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),flt.forEach(t),iVo=i(wl),Wd=n(wl,"P",{});var IW=s(Wd);dVo=r(IW,`Note:
Loading a model from its configuration file does `),Rce=n(IW,"STRONG",{});var glt=s(Rce);cVo=r(glt,"not"),glt.forEach(t),mVo=r(IW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=n(IW,"CODE",{});var hlt=s(Sce);fVo=r(hlt,"from_pretrained()"),hlt.forEach(t),gVo=r(IW,"to load the model weights."),IW.forEach(t),hVo=i(wl),Pce=n(wl,"P",{});var ult=s(Pce);uVo=r(ult,"Examples:"),ult.forEach(t),pVo=i(wl),f(Y6.$$.fragment,wl),wl.forEach(t),_Vo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);f(K6.$$.fragment,ra),bVo=i(ra),$ce=n(ra,"P",{});var plt=s($ce);vVo=r(plt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),plt.forEach(t),TVo=i(ra),ln=n(ra,"P",{});var x5=s(ln);FVo=r(x5,"The model class to instantiate is selected based on the "),Ice=n(x5,"CODE",{});var _lt=s(Ice);CVo=r(_lt,"model_type"),_lt.forEach(t),MVo=r(x5,` property of the config object (either
passed as an argument or loaded from `),jce=n(x5,"CODE",{});var blt=s(jce);EVo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),yVo=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(x5,"CODE",{});var vlt=s(Nce);wVo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),AVo=r(x5,":"),x5.forEach(t),LVo=i(ra),Z6=n(ra,"UL",{});var bPe=s(Z6);G1=n(bPe,"LI",{});var ELe=s(G1);Dce=n(ELe,"STRONG",{});var Tlt=s(Dce);BVo=r(Tlt,"speech-encoder-decoder"),Tlt.forEach(t),xVo=r(ELe," \u2014 "),gq=n(ELe,"A",{href:!0});var Flt=s(gq);kVo=r(Flt,"SpeechEncoderDecoderModel"),Flt.forEach(t),RVo=r(ELe," (Speech Encoder decoder model)"),ELe.forEach(t),SVo=i(bPe),O1=n(bPe,"LI",{});var yLe=s(O1);qce=n(yLe,"STRONG",{});var Clt=s(qce);PVo=r(Clt,"speech_to_text"),Clt.forEach(t),$Vo=r(yLe," \u2014 "),hq=n(yLe,"A",{href:!0});var Mlt=s(hq);IVo=r(Mlt,"Speech2TextForConditionalGeneration"),Mlt.forEach(t),jVo=r(yLe," (Speech2Text model)"),yLe.forEach(t),bPe.forEach(t),NVo=i(ra),X1=n(ra,"P",{});var wLe=s(X1);DVo=r(wLe,"The model is set in evaluation mode by default using "),Gce=n(wLe,"CODE",{});var Elt=s(Gce);qVo=r(Elt,"model.eval()"),Elt.forEach(t),GVo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(wLe,"CODE",{});var ylt=s(Oce);OVo=r(ylt,"model.train()"),ylt.forEach(t),wLe.forEach(t),XVo=i(ra),Xce=n(ra,"P",{});var wlt=s(Xce);VVo=r(wlt,"Examples:"),wlt.forEach(t),zVo=i(ra),f(eA.$$.fragment,ra),ra.forEach(t),yl.forEach(t),dRe=i(c),Qd=n(c,"H2",{class:!0});var vPe=s(Qd);V1=n(vPe,"A",{id:!0,class:!0,href:!0});var Alt=s(V1);Vce=n(Alt,"SPAN",{});var Llt=s(Vce);f(oA.$$.fragment,Llt),Llt.forEach(t),Alt.forEach(t),WVo=i(vPe),zce=n(vPe,"SPAN",{});var Blt=s(zce);QVo=r(Blt,"AutoModelForAudioXVector"),Blt.forEach(t),vPe.forEach(t),cRe=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);f(rA.$$.fragment,Al),HVo=i(Al),Hd=n(Al,"P",{});var jW=s(Hd);UVo=r(jW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Wce=n(jW,"CODE",{});var xlt=s(Wce);JVo=r(xlt,"from_pretrained()"),xlt.forEach(t),YVo=r(jW,"class method or the "),Qce=n(jW,"CODE",{});var klt=s(Qce);KVo=r(klt,"from_config()"),klt.forEach(t),ZVo=r(jW,`class
method.`),jW.forEach(t),ezo=i(Al),tA=n(Al,"P",{});var TPe=s(tA);ozo=r(TPe,"This class cannot be instantiated directly using "),Hce=n(TPe,"CODE",{});var Rlt=s(Hce);rzo=r(Rlt,"__init__()"),Rlt.forEach(t),tzo=r(TPe," (throws an error)."),TPe.forEach(t),azo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);f(aA.$$.fragment,Ll),nzo=i(Ll),Uce=n(Ll,"P",{});var Slt=s(Uce);szo=r(Slt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Slt.forEach(t),lzo=i(Ll),Ud=n(Ll,"P",{});var NW=s(Ud);izo=r(NW,`Note:
Loading a model from its configuration file does `),Jce=n(NW,"STRONG",{});var Plt=s(Jce);dzo=r(Plt,"not"),Plt.forEach(t),czo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yce=n(NW,"CODE",{});var $lt=s(Yce);mzo=r($lt,"from_pretrained()"),$lt.forEach(t),fzo=r(NW,"to load the model weights."),NW.forEach(t),gzo=i(Ll),Kce=n(Ll,"P",{});var Ilt=s(Kce);hzo=r(Ilt,"Examples:"),Ilt.forEach(t),uzo=i(Ll),f(nA.$$.fragment,Ll),Ll.forEach(t),pzo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);f(sA.$$.fragment,ta),_zo=i(ta),Zce=n(ta,"P",{});var jlt=s(Zce);bzo=r(jlt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),jlt.forEach(t),vzo=i(ta),dn=n(ta,"P",{});var k5=s(dn);Tzo=r(k5,"The model class to instantiate is selected based on the "),eme=n(k5,"CODE",{});var Nlt=s(eme);Fzo=r(Nlt,"model_type"),Nlt.forEach(t),Czo=r(k5,` property of the config object (either
passed as an argument or loaded from `),ome=n(k5,"CODE",{});var Dlt=s(ome);Mzo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),Ezo=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(k5,"CODE",{});var qlt=s(rme);yzo=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),wzo=r(k5,":"),k5.forEach(t),Azo=i(ta),cn=n(ta,"UL",{});var R5=s(cn);z1=n(R5,"LI",{});var ALe=s(z1);tme=n(ALe,"STRONG",{});var Glt=s(tme);Lzo=r(Glt,"data2vec-audio"),Glt.forEach(t),Bzo=r(ALe," \u2014 "),uq=n(ALe,"A",{href:!0});var Olt=s(uq);xzo=r(Olt,"Data2VecAudioForXVector"),Olt.forEach(t),kzo=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),Rzo=i(R5),W1=n(R5,"LI",{});var LLe=s(W1);ame=n(LLe,"STRONG",{});var Xlt=s(ame);Szo=r(Xlt,"unispeech-sat"),Xlt.forEach(t),Pzo=r(LLe," \u2014 "),pq=n(LLe,"A",{href:!0});var Vlt=s(pq);$zo=r(Vlt,"UniSpeechSatForXVector"),Vlt.forEach(t),Izo=r(LLe," (UniSpeechSat model)"),LLe.forEach(t),jzo=i(R5),Q1=n(R5,"LI",{});var BLe=s(Q1);nme=n(BLe,"STRONG",{});var zlt=s(nme);Nzo=r(zlt,"wav2vec2"),zlt.forEach(t),Dzo=r(BLe," \u2014 "),_q=n(BLe,"A",{href:!0});var Wlt=s(_q);qzo=r(Wlt,"Wav2Vec2ForXVector"),Wlt.forEach(t),Gzo=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),Ozo=i(R5),H1=n(R5,"LI",{});var xLe=s(H1);sme=n(xLe,"STRONG",{});var Qlt=s(sme);Xzo=r(Qlt,"wavlm"),Qlt.forEach(t),Vzo=r(xLe," \u2014 "),bq=n(xLe,"A",{href:!0});var Hlt=s(bq);zzo=r(Hlt,"WavLMForXVector"),Hlt.forEach(t),Wzo=r(xLe," (WavLM model)"),xLe.forEach(t),R5.forEach(t),Qzo=i(ta),U1=n(ta,"P",{});var kLe=s(U1);Hzo=r(kLe,"The model is set in evaluation mode by default using "),lme=n(kLe,"CODE",{});var Ult=s(lme);Uzo=r(Ult,"model.eval()"),Ult.forEach(t),Jzo=r(kLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ime=n(kLe,"CODE",{});var Jlt=s(ime);Yzo=r(Jlt,"model.train()"),Jlt.forEach(t),kLe.forEach(t),Kzo=i(ta),dme=n(ta,"P",{});var Ylt=s(dme);Zzo=r(Ylt,"Examples:"),Ylt.forEach(t),eWo=i(ta),f(lA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),mRe=i(c),Jd=n(c,"H2",{class:!0});var FPe=s(Jd);J1=n(FPe,"A",{id:!0,class:!0,href:!0});var Klt=s(J1);cme=n(Klt,"SPAN",{});var Zlt=s(cme);f(iA.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),oWo=i(FPe),mme=n(FPe,"SPAN",{});var eit=s(mme);rWo=r(eit,"AutoModelForMaskedImageModeling"),eit.forEach(t),FPe.forEach(t),fRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);f(dA.$$.fragment,Bl),tWo=i(Bl),Yd=n(Bl,"P",{});var DW=s(Yd);aWo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fme=n(DW,"CODE",{});var oit=s(fme);nWo=r(oit,"from_pretrained()"),oit.forEach(t),sWo=r(DW,"class method or the "),gme=n(DW,"CODE",{});var rit=s(gme);lWo=r(rit,"from_config()"),rit.forEach(t),iWo=r(DW,`class
method.`),DW.forEach(t),dWo=i(Bl),cA=n(Bl,"P",{});var CPe=s(cA);cWo=r(CPe,"This class cannot be instantiated directly using "),hme=n(CPe,"CODE",{});var tit=s(hme);mWo=r(tit,"__init__()"),tit.forEach(t),fWo=r(CPe," (throws an error)."),CPe.forEach(t),gWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);f(mA.$$.fragment,xl),hWo=i(xl),ume=n(xl,"P",{});var ait=s(ume);uWo=r(ait,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ait.forEach(t),pWo=i(xl),Kd=n(xl,"P",{});var qW=s(Kd);_Wo=r(qW,`Note:
Loading a model from its configuration file does `),pme=n(qW,"STRONG",{});var nit=s(pme);bWo=r(nit,"not"),nit.forEach(t),vWo=r(qW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=n(qW,"CODE",{});var sit=s(_me);TWo=r(sit,"from_pretrained()"),sit.forEach(t),FWo=r(qW,"to load the model weights."),qW.forEach(t),CWo=i(xl),bme=n(xl,"P",{});var lit=s(bme);MWo=r(lit,"Examples:"),lit.forEach(t),EWo=i(xl),f(fA.$$.fragment,xl),xl.forEach(t),yWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);f(gA.$$.fragment,aa),wWo=i(aa),vme=n(aa,"P",{});var iit=s(vme);AWo=r(iit,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iit.forEach(t),LWo=i(aa),mn=n(aa,"P",{});var S5=s(mn);BWo=r(S5,"The model class to instantiate is selected based on the "),Tme=n(S5,"CODE",{});var dit=s(Tme);xWo=r(dit,"model_type"),dit.forEach(t),kWo=r(S5,` property of the config object (either
passed as an argument or loaded from `),Fme=n(S5,"CODE",{});var cit=s(Fme);RWo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),SWo=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(S5,"CODE",{});var mit=s(Cme);PWo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),$Wo=r(S5,":"),S5.forEach(t),IWo=i(aa),Zd=n(aa,"UL",{});var GW=s(Zd);Y1=n(GW,"LI",{});var RLe=s(Y1);Mme=n(RLe,"STRONG",{});var fit=s(Mme);jWo=r(fit,"deit"),fit.forEach(t),NWo=r(RLe," \u2014 "),vq=n(RLe,"A",{href:!0});var git=s(vq);DWo=r(git,"DeiTForMaskedImageModeling"),git.forEach(t),qWo=r(RLe," (DeiT model)"),RLe.forEach(t),GWo=i(GW),K1=n(GW,"LI",{});var SLe=s(K1);Eme=n(SLe,"STRONG",{});var hit=s(Eme);OWo=r(hit,"swin"),hit.forEach(t),XWo=r(SLe," \u2014 "),Tq=n(SLe,"A",{href:!0});var uit=s(Tq);VWo=r(uit,"SwinForMaskedImageModeling"),uit.forEach(t),zWo=r(SLe," (Swin model)"),SLe.forEach(t),WWo=i(GW),Z1=n(GW,"LI",{});var PLe=s(Z1);yme=n(PLe,"STRONG",{});var pit=s(yme);QWo=r(pit,"vit"),pit.forEach(t),HWo=r(PLe," \u2014 "),Fq=n(PLe,"A",{href:!0});var _it=s(Fq);UWo=r(_it,"ViTForMaskedImageModeling"),_it.forEach(t),JWo=r(PLe," (ViT model)"),PLe.forEach(t),GW.forEach(t),YWo=i(aa),eF=n(aa,"P",{});var $Le=s(eF);KWo=r($Le,"The model is set in evaluation mode by default using "),wme=n($Le,"CODE",{});var bit=s(wme);ZWo=r(bit,"model.eval()"),bit.forEach(t),eQo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=n($Le,"CODE",{});var vit=s(Ame);oQo=r(vit,"model.train()"),vit.forEach(t),$Le.forEach(t),rQo=i(aa),Lme=n(aa,"P",{});var Tit=s(Lme);tQo=r(Tit,"Examples:"),Tit.forEach(t),aQo=i(aa),f(hA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),gRe=i(c),ec=n(c,"H2",{class:!0});var MPe=s(ec);oF=n(MPe,"A",{id:!0,class:!0,href:!0});var Fit=s(oF);Bme=n(Fit,"SPAN",{});var Cit=s(Bme);f(uA.$$.fragment,Cit),Cit.forEach(t),Fit.forEach(t),nQo=i(MPe),xme=n(MPe,"SPAN",{});var Mit=s(xme);sQo=r(Mit,"AutoModelForObjectDetection"),Mit.forEach(t),MPe.forEach(t),hRe=i(c),ur=n(c,"DIV",{class:!0});var kl=s(ur);f(pA.$$.fragment,kl),lQo=i(kl),oc=n(kl,"P",{});var OW=s(oc);iQo=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kme=n(OW,"CODE",{});var Eit=s(kme);dQo=r(Eit,"from_pretrained()"),Eit.forEach(t),cQo=r(OW,"class method or the "),Rme=n(OW,"CODE",{});var yit=s(Rme);mQo=r(yit,"from_config()"),yit.forEach(t),fQo=r(OW,`class
method.`),OW.forEach(t),gQo=i(kl),_A=n(kl,"P",{});var EPe=s(_A);hQo=r(EPe,"This class cannot be instantiated directly using "),Sme=n(EPe,"CODE",{});var wit=s(Sme);uQo=r(wit,"__init__()"),wit.forEach(t),pQo=r(EPe," (throws an error)."),EPe.forEach(t),_Qo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);f(bA.$$.fragment,Rl),bQo=i(Rl),Pme=n(Rl,"P",{});var Ait=s(Pme);vQo=r(Ait,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ait.forEach(t),TQo=i(Rl),rc=n(Rl,"P",{});var XW=s(rc);FQo=r(XW,`Note:
Loading a model from its configuration file does `),$me=n(XW,"STRONG",{});var Lit=s($me);CQo=r(Lit,"not"),Lit.forEach(t),MQo=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ime=n(XW,"CODE",{});var Bit=s(Ime);EQo=r(Bit,"from_pretrained()"),Bit.forEach(t),yQo=r(XW,"to load the model weights."),XW.forEach(t),wQo=i(Rl),jme=n(Rl,"P",{});var xit=s(jme);AQo=r(xit,"Examples:"),xit.forEach(t),LQo=i(Rl),f(vA.$$.fragment,Rl),Rl.forEach(t),BQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);f(TA.$$.fragment,na),xQo=i(na),Nme=n(na,"P",{});var kit=s(Nme);kQo=r(kit,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kit.forEach(t),RQo=i(na),fn=n(na,"P",{});var P5=s(fn);SQo=r(P5,"The model class to instantiate is selected based on the "),Dme=n(P5,"CODE",{});var Rit=s(Dme);PQo=r(Rit,"model_type"),Rit.forEach(t),$Qo=r(P5,` property of the config object (either
passed as an argument or loaded from `),qme=n(P5,"CODE",{});var Sit=s(qme);IQo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),jQo=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(P5,"CODE",{});var Pit=s(Gme);NQo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),DQo=r(P5,":"),P5.forEach(t),qQo=i(na),Ome=n(na,"UL",{});var $it=s(Ome);rF=n($it,"LI",{});var ILe=s(rF);Xme=n(ILe,"STRONG",{});var Iit=s(Xme);GQo=r(Iit,"detr"),Iit.forEach(t),OQo=r(ILe," \u2014 "),Cq=n(ILe,"A",{href:!0});var jit=s(Cq);XQo=r(jit,"DetrForObjectDetection"),jit.forEach(t),VQo=r(ILe," (DETR model)"),ILe.forEach(t),$it.forEach(t),zQo=i(na),tF=n(na,"P",{});var jLe=s(tF);WQo=r(jLe,"The model is set in evaluation mode by default using "),Vme=n(jLe,"CODE",{});var Nit=s(Vme);QQo=r(Nit,"model.eval()"),Nit.forEach(t),HQo=r(jLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(jLe,"CODE",{});var Dit=s(zme);UQo=r(Dit,"model.train()"),Dit.forEach(t),jLe.forEach(t),JQo=i(na),Wme=n(na,"P",{});var qit=s(Wme);YQo=r(qit,"Examples:"),qit.forEach(t),KQo=i(na),f(FA.$$.fragment,na),na.forEach(t),kl.forEach(t),uRe=i(c),tc=n(c,"H2",{class:!0});var yPe=s(tc);aF=n(yPe,"A",{id:!0,class:!0,href:!0});var Git=s(aF);Qme=n(Git,"SPAN",{});var Oit=s(Qme);f(CA.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),ZQo=i(yPe),Hme=n(yPe,"SPAN",{});var Xit=s(Hme);eHo=r(Xit,"AutoModelForImageSegmentation"),Xit.forEach(t),yPe.forEach(t),pRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);f(MA.$$.fragment,Sl),oHo=i(Sl),ac=n(Sl,"P",{});var VW=s(ac);rHo=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Ume=n(VW,"CODE",{});var Vit=s(Ume);tHo=r(Vit,"from_pretrained()"),Vit.forEach(t),aHo=r(VW,"class method or the "),Jme=n(VW,"CODE",{});var zit=s(Jme);nHo=r(zit,"from_config()"),zit.forEach(t),sHo=r(VW,`class
method.`),VW.forEach(t),lHo=i(Sl),EA=n(Sl,"P",{});var wPe=s(EA);iHo=r(wPe,"This class cannot be instantiated directly using "),Yme=n(wPe,"CODE",{});var Wit=s(Yme);dHo=r(Wit,"__init__()"),Wit.forEach(t),cHo=r(wPe," (throws an error)."),wPe.forEach(t),mHo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);f(yA.$$.fragment,Pl),fHo=i(Pl),Kme=n(Pl,"P",{});var Qit=s(Kme);gHo=r(Qit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qit.forEach(t),hHo=i(Pl),nc=n(Pl,"P",{});var zW=s(nc);uHo=r(zW,`Note:
Loading a model from its configuration file does `),Zme=n(zW,"STRONG",{});var Hit=s(Zme);pHo=r(Hit,"not"),Hit.forEach(t),_Ho=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),efe=n(zW,"CODE",{});var Uit=s(efe);bHo=r(Uit,"from_pretrained()"),Uit.forEach(t),vHo=r(zW,"to load the model weights."),zW.forEach(t),THo=i(Pl),ofe=n(Pl,"P",{});var Jit=s(ofe);FHo=r(Jit,"Examples:"),Jit.forEach(t),CHo=i(Pl),f(wA.$$.fragment,Pl),Pl.forEach(t),MHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);f(AA.$$.fragment,sa),EHo=i(sa),rfe=n(sa,"P",{});var Yit=s(rfe);yHo=r(Yit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Yit.forEach(t),wHo=i(sa),gn=n(sa,"P",{});var $5=s(gn);AHo=r($5,"The model class to instantiate is selected based on the "),tfe=n($5,"CODE",{});var Kit=s(tfe);LHo=r(Kit,"model_type"),Kit.forEach(t),BHo=r($5,` property of the config object (either
passed as an argument or loaded from `),afe=n($5,"CODE",{});var Zit=s(afe);xHo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),kHo=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nfe=n($5,"CODE",{});var edt=s(nfe);RHo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),SHo=r($5,":"),$5.forEach(t),PHo=i(sa),sfe=n(sa,"UL",{});var odt=s(sfe);nF=n(odt,"LI",{});var NLe=s(nF);lfe=n(NLe,"STRONG",{});var rdt=s(lfe);$Ho=r(rdt,"detr"),rdt.forEach(t),IHo=r(NLe," \u2014 "),Mq=n(NLe,"A",{href:!0});var tdt=s(Mq);jHo=r(tdt,"DetrForSegmentation"),tdt.forEach(t),NHo=r(NLe," (DETR model)"),NLe.forEach(t),odt.forEach(t),DHo=i(sa),sF=n(sa,"P",{});var DLe=s(sF);qHo=r(DLe,"The model is set in evaluation mode by default using "),ife=n(DLe,"CODE",{});var adt=s(ife);GHo=r(adt,"model.eval()"),adt.forEach(t),OHo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(DLe,"CODE",{});var ndt=s(dfe);XHo=r(ndt,"model.train()"),ndt.forEach(t),DLe.forEach(t),VHo=i(sa),cfe=n(sa,"P",{});var sdt=s(cfe);zHo=r(sdt,"Examples:"),sdt.forEach(t),WHo=i(sa),f(LA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),_Re=i(c),sc=n(c,"H2",{class:!0});var APe=s(sc);lF=n(APe,"A",{id:!0,class:!0,href:!0});var ldt=s(lF);mfe=n(ldt,"SPAN",{});var idt=s(mfe);f(BA.$$.fragment,idt),idt.forEach(t),ldt.forEach(t),QHo=i(APe),ffe=n(APe,"SPAN",{});var ddt=s(ffe);HHo=r(ddt,"AutoModelForSemanticSegmentation"),ddt.forEach(t),APe.forEach(t),bRe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);f(xA.$$.fragment,$l),UHo=i($l),lc=n($l,"P",{});var WW=s(lc);JHo=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gfe=n(WW,"CODE",{});var cdt=s(gfe);YHo=r(cdt,"from_pretrained()"),cdt.forEach(t),KHo=r(WW,"class method or the "),hfe=n(WW,"CODE",{});var mdt=s(hfe);ZHo=r(mdt,"from_config()"),mdt.forEach(t),eUo=r(WW,`class
method.`),WW.forEach(t),oUo=i($l),kA=n($l,"P",{});var LPe=s(kA);rUo=r(LPe,"This class cannot be instantiated directly using "),ufe=n(LPe,"CODE",{});var fdt=s(ufe);tUo=r(fdt,"__init__()"),fdt.forEach(t),aUo=r(LPe," (throws an error)."),LPe.forEach(t),nUo=i($l),mt=n($l,"DIV",{class:!0});var Il=s(mt);f(RA.$$.fragment,Il),sUo=i(Il),pfe=n(Il,"P",{});var gdt=s(pfe);lUo=r(gdt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gdt.forEach(t),iUo=i(Il),ic=n(Il,"P",{});var QW=s(ic);dUo=r(QW,`Note:
Loading a model from its configuration file does `),_fe=n(QW,"STRONG",{});var hdt=s(_fe);cUo=r(hdt,"not"),hdt.forEach(t),mUo=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),bfe=n(QW,"CODE",{});var udt=s(bfe);fUo=r(udt,"from_pretrained()"),udt.forEach(t),gUo=r(QW,"to load the model weights."),QW.forEach(t),hUo=i(Il),vfe=n(Il,"P",{});var pdt=s(vfe);uUo=r(pdt,"Examples:"),pdt.forEach(t),pUo=i(Il),f(SA.$$.fragment,Il),Il.forEach(t),_Uo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);f(PA.$$.fragment,la),bUo=i(la),Tfe=n(la,"P",{});var _dt=s(Tfe);vUo=r(_dt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_dt.forEach(t),TUo=i(la),hn=n(la,"P",{});var I5=s(hn);FUo=r(I5,"The model class to instantiate is selected based on the "),Ffe=n(I5,"CODE",{});var bdt=s(Ffe);CUo=r(bdt,"model_type"),bdt.forEach(t),MUo=r(I5,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(I5,"CODE",{});var vdt=s(Cfe);EUo=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),yUo=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(I5,"CODE",{});var Tdt=s(Mfe);wUo=r(Tdt,"pretrained_model_name_or_path"),Tdt.forEach(t),AUo=r(I5,":"),I5.forEach(t),LUo=i(la),$A=n(la,"UL",{});var BPe=s($A);iF=n(BPe,"LI",{});var qLe=s(iF);Efe=n(qLe,"STRONG",{});var Fdt=s(Efe);BUo=r(Fdt,"beit"),Fdt.forEach(t),xUo=r(qLe," \u2014 "),Eq=n(qLe,"A",{href:!0});var Cdt=s(Eq);kUo=r(Cdt,"BeitForSemanticSegmentation"),Cdt.forEach(t),RUo=r(qLe," (BEiT model)"),qLe.forEach(t),SUo=i(BPe),dF=n(BPe,"LI",{});var GLe=s(dF);yfe=n(GLe,"STRONG",{});var Mdt=s(yfe);PUo=r(Mdt,"segformer"),Mdt.forEach(t),$Uo=r(GLe," \u2014 "),yq=n(GLe,"A",{href:!0});var Edt=s(yq);IUo=r(Edt,"SegformerForSemanticSegmentation"),Edt.forEach(t),jUo=r(GLe," (SegFormer model)"),GLe.forEach(t),BPe.forEach(t),NUo=i(la),cF=n(la,"P",{});var OLe=s(cF);DUo=r(OLe,"The model is set in evaluation mode by default using "),wfe=n(OLe,"CODE",{});var ydt=s(wfe);qUo=r(ydt,"model.eval()"),ydt.forEach(t),GUo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Afe=n(OLe,"CODE",{});var wdt=s(Afe);OUo=r(wdt,"model.train()"),wdt.forEach(t),OLe.forEach(t),XUo=i(la),Lfe=n(la,"P",{});var Adt=s(Lfe);VUo=r(Adt,"Examples:"),Adt.forEach(t),zUo=i(la),f(IA.$$.fragment,la),la.forEach(t),$l.forEach(t),vRe=i(c),dc=n(c,"H2",{class:!0});var xPe=s(dc);mF=n(xPe,"A",{id:!0,class:!0,href:!0});var Ldt=s(mF);Bfe=n(Ldt,"SPAN",{});var Bdt=s(Bfe);f(jA.$$.fragment,Bdt),Bdt.forEach(t),Ldt.forEach(t),WUo=i(xPe),xfe=n(xPe,"SPAN",{});var xdt=s(xfe);QUo=r(xdt,"AutoModelForInstanceSegmentation"),xdt.forEach(t),xPe.forEach(t),TRe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);f(NA.$$.fragment,jl),HUo=i(jl),cc=n(jl,"P",{});var HW=s(cc);UUo=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kfe=n(HW,"CODE",{});var kdt=s(kfe);JUo=r(kdt,"from_pretrained()"),kdt.forEach(t),YUo=r(HW,"class method or the "),Rfe=n(HW,"CODE",{});var Rdt=s(Rfe);KUo=r(Rdt,"from_config()"),Rdt.forEach(t),ZUo=r(HW,`class
method.`),HW.forEach(t),eJo=i(jl),DA=n(jl,"P",{});var kPe=s(DA);oJo=r(kPe,"This class cannot be instantiated directly using "),Sfe=n(kPe,"CODE",{});var Sdt=s(Sfe);rJo=r(Sdt,"__init__()"),Sdt.forEach(t),tJo=r(kPe," (throws an error)."),kPe.forEach(t),aJo=i(jl),ft=n(jl,"DIV",{class:!0});var Nl=s(ft);f(qA.$$.fragment,Nl),nJo=i(Nl),Pfe=n(Nl,"P",{});var Pdt=s(Pfe);sJo=r(Pdt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Pdt.forEach(t),lJo=i(Nl),mc=n(Nl,"P",{});var UW=s(mc);iJo=r(UW,`Note:
Loading a model from its configuration file does `),$fe=n(UW,"STRONG",{});var $dt=s($fe);dJo=r($dt,"not"),$dt.forEach(t),cJo=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ife=n(UW,"CODE",{});var Idt=s(Ife);mJo=r(Idt,"from_pretrained()"),Idt.forEach(t),fJo=r(UW,"to load the model weights."),UW.forEach(t),gJo=i(Nl),jfe=n(Nl,"P",{});var jdt=s(jfe);hJo=r(jdt,"Examples:"),jdt.forEach(t),uJo=i(Nl),f(GA.$$.fragment,Nl),Nl.forEach(t),pJo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);f(OA.$$.fragment,ia),_Jo=i(ia),Nfe=n(ia,"P",{});var Ndt=s(Nfe);bJo=r(Ndt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ndt.forEach(t),vJo=i(ia),un=n(ia,"P",{});var j5=s(un);TJo=r(j5,"The model class to instantiate is selected based on the "),Dfe=n(j5,"CODE",{});var Ddt=s(Dfe);FJo=r(Ddt,"model_type"),Ddt.forEach(t),CJo=r(j5,` property of the config object (either
passed as an argument or loaded from `),qfe=n(j5,"CODE",{});var qdt=s(qfe);MJo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),EJo=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(j5,"CODE",{});var Gdt=s(Gfe);yJo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),wJo=r(j5,":"),j5.forEach(t),AJo=i(ia),Ofe=n(ia,"UL",{});var Odt=s(Ofe);fF=n(Odt,"LI",{});var XLe=s(fF);Xfe=n(XLe,"STRONG",{});var Xdt=s(Xfe);LJo=r(Xdt,"maskformer"),Xdt.forEach(t),BJo=r(XLe," \u2014 "),wq=n(XLe,"A",{href:!0});var Vdt=s(wq);xJo=r(Vdt,"MaskFormerForInstanceSegmentation"),Vdt.forEach(t),kJo=r(XLe," (MaskFormer model)"),XLe.forEach(t),Odt.forEach(t),RJo=i(ia),gF=n(ia,"P",{});var VLe=s(gF);SJo=r(VLe,"The model is set in evaluation mode by default using "),Vfe=n(VLe,"CODE",{});var zdt=s(Vfe);PJo=r(zdt,"model.eval()"),zdt.forEach(t),$Jo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(VLe,"CODE",{});var Wdt=s(zfe);IJo=r(Wdt,"model.train()"),Wdt.forEach(t),VLe.forEach(t),jJo=i(ia),Wfe=n(ia,"P",{});var Qdt=s(Wfe);NJo=r(Qdt,"Examples:"),Qdt.forEach(t),DJo=i(ia),f(XA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),FRe=i(c),fc=n(c,"H2",{class:!0});var RPe=s(fc);hF=n(RPe,"A",{id:!0,class:!0,href:!0});var Hdt=s(hF);Qfe=n(Hdt,"SPAN",{});var Udt=s(Qfe);f(VA.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),qJo=i(RPe),Hfe=n(RPe,"SPAN",{});var Jdt=s(Hfe);GJo=r(Jdt,"TFAutoModel"),Jdt.forEach(t),RPe.forEach(t),CRe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);f(zA.$$.fragment,Dl),OJo=i(Dl),gc=n(Dl,"P",{});var JW=s(gc);XJo=r(JW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ufe=n(JW,"CODE",{});var Ydt=s(Ufe);VJo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),zJo=r(JW,"class method or the "),Jfe=n(JW,"CODE",{});var Kdt=s(Jfe);WJo=r(Kdt,"from_config()"),Kdt.forEach(t),QJo=r(JW,`class
method.`),JW.forEach(t),HJo=i(Dl),WA=n(Dl,"P",{});var SPe=s(WA);UJo=r(SPe,"This class cannot be instantiated directly using "),Yfe=n(SPe,"CODE",{});var Zdt=s(Yfe);JJo=r(Zdt,"__init__()"),Zdt.forEach(t),YJo=r(SPe," (throws an error)."),SPe.forEach(t),KJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);f(QA.$$.fragment,ql),ZJo=i(ql),Kfe=n(ql,"P",{});var ect=s(Kfe);eYo=r(ect,"Instantiates one of the base model classes of the library from a configuration."),ect.forEach(t),oYo=i(ql),hc=n(ql,"P",{});var YW=s(hc);rYo=r(YW,`Note:
Loading a model from its configuration file does `),Zfe=n(YW,"STRONG",{});var oct=s(Zfe);tYo=r(oct,"not"),oct.forEach(t),aYo=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ege=n(YW,"CODE",{});var rct=s(ege);nYo=r(rct,"from_pretrained()"),rct.forEach(t),sYo=r(YW,"to load the model weights."),YW.forEach(t),lYo=i(ql),oge=n(ql,"P",{});var tct=s(oge);iYo=r(tct,"Examples:"),tct.forEach(t),dYo=i(ql),f(HA.$$.fragment,ql),ql.forEach(t),cYo=i(Dl),ho=n(Dl,"DIV",{class:!0});var ua=s(ho);f(UA.$$.fragment,ua),mYo=i(ua),rge=n(ua,"P",{});var act=s(rge);fYo=r(act,"Instantiate one of the base model classes of the library from a pretrained model."),act.forEach(t),gYo=i(ua),pn=n(ua,"P",{});var N5=s(pn);hYo=r(N5,"The model class to instantiate is selected based on the "),tge=n(N5,"CODE",{});var nct=s(tge);uYo=r(nct,"model_type"),nct.forEach(t),pYo=r(N5,` property of the config object (either
passed as an argument or loaded from `),age=n(N5,"CODE",{});var sct=s(age);_Yo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),bYo=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(N5,"CODE",{});var lct=s(nge);vYo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),TYo=r(N5,":"),N5.forEach(t),FYo=i(ua),B=n(ua,"UL",{});var x=s(B);uF=n(x,"LI",{});var zLe=s(uF);sge=n(zLe,"STRONG",{});var ict=s(sge);CYo=r(ict,"albert"),ict.forEach(t),MYo=r(zLe," \u2014 "),Aq=n(zLe,"A",{href:!0});var dct=s(Aq);EYo=r(dct,"TFAlbertModel"),dct.forEach(t),yYo=r(zLe," (ALBERT model)"),zLe.forEach(t),wYo=i(x),pF=n(x,"LI",{});var WLe=s(pF);lge=n(WLe,"STRONG",{});var cct=s(lge);AYo=r(cct,"bart"),cct.forEach(t),LYo=r(WLe," \u2014 "),Lq=n(WLe,"A",{href:!0});var mct=s(Lq);BYo=r(mct,"TFBartModel"),mct.forEach(t),xYo=r(WLe," (BART model)"),WLe.forEach(t),kYo=i(x),_F=n(x,"LI",{});var QLe=s(_F);ige=n(QLe,"STRONG",{});var fct=s(ige);RYo=r(fct,"bert"),fct.forEach(t),SYo=r(QLe," \u2014 "),Bq=n(QLe,"A",{href:!0});var gct=s(Bq);PYo=r(gct,"TFBertModel"),gct.forEach(t),$Yo=r(QLe," (BERT model)"),QLe.forEach(t),IYo=i(x),bF=n(x,"LI",{});var HLe=s(bF);dge=n(HLe,"STRONG",{});var hct=s(dge);jYo=r(hct,"blenderbot"),hct.forEach(t),NYo=r(HLe," \u2014 "),xq=n(HLe,"A",{href:!0});var uct=s(xq);DYo=r(uct,"TFBlenderbotModel"),uct.forEach(t),qYo=r(HLe," (Blenderbot model)"),HLe.forEach(t),GYo=i(x),vF=n(x,"LI",{});var ULe=s(vF);cge=n(ULe,"STRONG",{});var pct=s(cge);OYo=r(pct,"blenderbot-small"),pct.forEach(t),XYo=r(ULe," \u2014 "),kq=n(ULe,"A",{href:!0});var _ct=s(kq);VYo=r(_ct,"TFBlenderbotSmallModel"),_ct.forEach(t),zYo=r(ULe," (BlenderbotSmall model)"),ULe.forEach(t),WYo=i(x),TF=n(x,"LI",{});var JLe=s(TF);mge=n(JLe,"STRONG",{});var bct=s(mge);QYo=r(bct,"camembert"),bct.forEach(t),HYo=r(JLe," \u2014 "),Rq=n(JLe,"A",{href:!0});var vct=s(Rq);UYo=r(vct,"TFCamembertModel"),vct.forEach(t),JYo=r(JLe," (CamemBERT model)"),JLe.forEach(t),YYo=i(x),FF=n(x,"LI",{});var YLe=s(FF);fge=n(YLe,"STRONG",{});var Tct=s(fge);KYo=r(Tct,"clip"),Tct.forEach(t),ZYo=r(YLe," \u2014 "),Sq=n(YLe,"A",{href:!0});var Fct=s(Sq);eKo=r(Fct,"TFCLIPModel"),Fct.forEach(t),oKo=r(YLe," (CLIP model)"),YLe.forEach(t),rKo=i(x),CF=n(x,"LI",{});var KLe=s(CF);gge=n(KLe,"STRONG",{});var Cct=s(gge);tKo=r(Cct,"convbert"),Cct.forEach(t),aKo=r(KLe," \u2014 "),Pq=n(KLe,"A",{href:!0});var Mct=s(Pq);nKo=r(Mct,"TFConvBertModel"),Mct.forEach(t),sKo=r(KLe," (ConvBERT model)"),KLe.forEach(t),lKo=i(x),MF=n(x,"LI",{});var ZLe=s(MF);hge=n(ZLe,"STRONG",{});var Ect=s(hge);iKo=r(Ect,"convnext"),Ect.forEach(t),dKo=r(ZLe," \u2014 "),$q=n(ZLe,"A",{href:!0});var yct=s($q);cKo=r(yct,"TFConvNextModel"),yct.forEach(t),mKo=r(ZLe," (ConvNext model)"),ZLe.forEach(t),fKo=i(x),EF=n(x,"LI",{});var e7e=s(EF);uge=n(e7e,"STRONG",{});var wct=s(uge);gKo=r(wct,"ctrl"),wct.forEach(t),hKo=r(e7e," \u2014 "),Iq=n(e7e,"A",{href:!0});var Act=s(Iq);uKo=r(Act,"TFCTRLModel"),Act.forEach(t),pKo=r(e7e," (CTRL model)"),e7e.forEach(t),_Ko=i(x),yF=n(x,"LI",{});var o7e=s(yF);pge=n(o7e,"STRONG",{});var Lct=s(pge);bKo=r(Lct,"deberta"),Lct.forEach(t),vKo=r(o7e," \u2014 "),jq=n(o7e,"A",{href:!0});var Bct=s(jq);TKo=r(Bct,"TFDebertaModel"),Bct.forEach(t),FKo=r(o7e," (DeBERTa model)"),o7e.forEach(t),CKo=i(x),wF=n(x,"LI",{});var r7e=s(wF);_ge=n(r7e,"STRONG",{});var xct=s(_ge);MKo=r(xct,"deberta-v2"),xct.forEach(t),EKo=r(r7e," \u2014 "),Nq=n(r7e,"A",{href:!0});var kct=s(Nq);yKo=r(kct,"TFDebertaV2Model"),kct.forEach(t),wKo=r(r7e," (DeBERTa-v2 model)"),r7e.forEach(t),AKo=i(x),AF=n(x,"LI",{});var t7e=s(AF);bge=n(t7e,"STRONG",{});var Rct=s(bge);LKo=r(Rct,"distilbert"),Rct.forEach(t),BKo=r(t7e," \u2014 "),Dq=n(t7e,"A",{href:!0});var Sct=s(Dq);xKo=r(Sct,"TFDistilBertModel"),Sct.forEach(t),kKo=r(t7e," (DistilBERT model)"),t7e.forEach(t),RKo=i(x),LF=n(x,"LI",{});var a7e=s(LF);vge=n(a7e,"STRONG",{});var Pct=s(vge);SKo=r(Pct,"dpr"),Pct.forEach(t),PKo=r(a7e," \u2014 "),qq=n(a7e,"A",{href:!0});var $ct=s(qq);$Ko=r($ct,"TFDPRQuestionEncoder"),$ct.forEach(t),IKo=r(a7e," (DPR model)"),a7e.forEach(t),jKo=i(x),BF=n(x,"LI",{});var n7e=s(BF);Tge=n(n7e,"STRONG",{});var Ict=s(Tge);NKo=r(Ict,"electra"),Ict.forEach(t),DKo=r(n7e," \u2014 "),Gq=n(n7e,"A",{href:!0});var jct=s(Gq);qKo=r(jct,"TFElectraModel"),jct.forEach(t),GKo=r(n7e," (ELECTRA model)"),n7e.forEach(t),OKo=i(x),xF=n(x,"LI",{});var s7e=s(xF);Fge=n(s7e,"STRONG",{});var Nct=s(Fge);XKo=r(Nct,"flaubert"),Nct.forEach(t),VKo=r(s7e," \u2014 "),Oq=n(s7e,"A",{href:!0});var Dct=s(Oq);zKo=r(Dct,"TFFlaubertModel"),Dct.forEach(t),WKo=r(s7e," (FlauBERT model)"),s7e.forEach(t),QKo=i(x),Gs=n(x,"LI",{});var o9=s(Gs);Cge=n(o9,"STRONG",{});var qct=s(Cge);HKo=r(qct,"funnel"),qct.forEach(t),UKo=r(o9," \u2014 "),Xq=n(o9,"A",{href:!0});var Gct=s(Xq);JKo=r(Gct,"TFFunnelModel"),Gct.forEach(t),YKo=r(o9," or "),Vq=n(o9,"A",{href:!0});var Oct=s(Vq);KKo=r(Oct,"TFFunnelBaseModel"),Oct.forEach(t),ZKo=r(o9," (Funnel Transformer model)"),o9.forEach(t),eZo=i(x),kF=n(x,"LI",{});var l7e=s(kF);Mge=n(l7e,"STRONG",{});var Xct=s(Mge);oZo=r(Xct,"gpt2"),Xct.forEach(t),rZo=r(l7e," \u2014 "),zq=n(l7e,"A",{href:!0});var Vct=s(zq);tZo=r(Vct,"TFGPT2Model"),Vct.forEach(t),aZo=r(l7e," (OpenAI GPT-2 model)"),l7e.forEach(t),nZo=i(x),RF=n(x,"LI",{});var i7e=s(RF);Ege=n(i7e,"STRONG",{});var zct=s(Ege);sZo=r(zct,"gptj"),zct.forEach(t),lZo=r(i7e," \u2014 "),Wq=n(i7e,"A",{href:!0});var Wct=s(Wq);iZo=r(Wct,"TFGPTJModel"),Wct.forEach(t),dZo=r(i7e," (GPT-J model)"),i7e.forEach(t),cZo=i(x),SF=n(x,"LI",{});var d7e=s(SF);yge=n(d7e,"STRONG",{});var Qct=s(yge);mZo=r(Qct,"hubert"),Qct.forEach(t),fZo=r(d7e," \u2014 "),Qq=n(d7e,"A",{href:!0});var Hct=s(Qq);gZo=r(Hct,"TFHubertModel"),Hct.forEach(t),hZo=r(d7e," (Hubert model)"),d7e.forEach(t),uZo=i(x),PF=n(x,"LI",{});var c7e=s(PF);wge=n(c7e,"STRONG",{});var Uct=s(wge);pZo=r(Uct,"layoutlm"),Uct.forEach(t),_Zo=r(c7e," \u2014 "),Hq=n(c7e,"A",{href:!0});var Jct=s(Hq);bZo=r(Jct,"TFLayoutLMModel"),Jct.forEach(t),vZo=r(c7e," (LayoutLM model)"),c7e.forEach(t),TZo=i(x),$F=n(x,"LI",{});var m7e=s($F);Age=n(m7e,"STRONG",{});var Yct=s(Age);FZo=r(Yct,"led"),Yct.forEach(t),CZo=r(m7e," \u2014 "),Uq=n(m7e,"A",{href:!0});var Kct=s(Uq);MZo=r(Kct,"TFLEDModel"),Kct.forEach(t),EZo=r(m7e," (LED model)"),m7e.forEach(t),yZo=i(x),IF=n(x,"LI",{});var f7e=s(IF);Lge=n(f7e,"STRONG",{});var Zct=s(Lge);wZo=r(Zct,"longformer"),Zct.forEach(t),AZo=r(f7e," \u2014 "),Jq=n(f7e,"A",{href:!0});var emt=s(Jq);LZo=r(emt,"TFLongformerModel"),emt.forEach(t),BZo=r(f7e," (Longformer model)"),f7e.forEach(t),xZo=i(x),jF=n(x,"LI",{});var g7e=s(jF);Bge=n(g7e,"STRONG",{});var omt=s(Bge);kZo=r(omt,"lxmert"),omt.forEach(t),RZo=r(g7e," \u2014 "),Yq=n(g7e,"A",{href:!0});var rmt=s(Yq);SZo=r(rmt,"TFLxmertModel"),rmt.forEach(t),PZo=r(g7e," (LXMERT model)"),g7e.forEach(t),$Zo=i(x),NF=n(x,"LI",{});var h7e=s(NF);xge=n(h7e,"STRONG",{});var tmt=s(xge);IZo=r(tmt,"marian"),tmt.forEach(t),jZo=r(h7e," \u2014 "),Kq=n(h7e,"A",{href:!0});var amt=s(Kq);NZo=r(amt,"TFMarianModel"),amt.forEach(t),DZo=r(h7e," (Marian model)"),h7e.forEach(t),qZo=i(x),DF=n(x,"LI",{});var u7e=s(DF);kge=n(u7e,"STRONG",{});var nmt=s(kge);GZo=r(nmt,"mbart"),nmt.forEach(t),OZo=r(u7e," \u2014 "),Zq=n(u7e,"A",{href:!0});var smt=s(Zq);XZo=r(smt,"TFMBartModel"),smt.forEach(t),VZo=r(u7e," (mBART model)"),u7e.forEach(t),zZo=i(x),qF=n(x,"LI",{});var p7e=s(qF);Rge=n(p7e,"STRONG",{});var lmt=s(Rge);WZo=r(lmt,"mobilebert"),lmt.forEach(t),QZo=r(p7e," \u2014 "),eG=n(p7e,"A",{href:!0});var imt=s(eG);HZo=r(imt,"TFMobileBertModel"),imt.forEach(t),UZo=r(p7e," (MobileBERT model)"),p7e.forEach(t),JZo=i(x),GF=n(x,"LI",{});var _7e=s(GF);Sge=n(_7e,"STRONG",{});var dmt=s(Sge);YZo=r(dmt,"mpnet"),dmt.forEach(t),KZo=r(_7e," \u2014 "),oG=n(_7e,"A",{href:!0});var cmt=s(oG);ZZo=r(cmt,"TFMPNetModel"),cmt.forEach(t),eer=r(_7e," (MPNet model)"),_7e.forEach(t),oer=i(x),OF=n(x,"LI",{});var b7e=s(OF);Pge=n(b7e,"STRONG",{});var mmt=s(Pge);rer=r(mmt,"mt5"),mmt.forEach(t),ter=r(b7e," \u2014 "),rG=n(b7e,"A",{href:!0});var fmt=s(rG);aer=r(fmt,"TFMT5Model"),fmt.forEach(t),ner=r(b7e," (mT5 model)"),b7e.forEach(t),ser=i(x),XF=n(x,"LI",{});var v7e=s(XF);$ge=n(v7e,"STRONG",{});var gmt=s($ge);ler=r(gmt,"openai-gpt"),gmt.forEach(t),ier=r(v7e," \u2014 "),tG=n(v7e,"A",{href:!0});var hmt=s(tG);der=r(hmt,"TFOpenAIGPTModel"),hmt.forEach(t),cer=r(v7e," (OpenAI GPT model)"),v7e.forEach(t),mer=i(x),VF=n(x,"LI",{});var T7e=s(VF);Ige=n(T7e,"STRONG",{});var umt=s(Ige);fer=r(umt,"pegasus"),umt.forEach(t),ger=r(T7e," \u2014 "),aG=n(T7e,"A",{href:!0});var pmt=s(aG);her=r(pmt,"TFPegasusModel"),pmt.forEach(t),uer=r(T7e," (Pegasus model)"),T7e.forEach(t),per=i(x),zF=n(x,"LI",{});var F7e=s(zF);jge=n(F7e,"STRONG",{});var _mt=s(jge);_er=r(_mt,"rembert"),_mt.forEach(t),ber=r(F7e," \u2014 "),nG=n(F7e,"A",{href:!0});var bmt=s(nG);ver=r(bmt,"TFRemBertModel"),bmt.forEach(t),Ter=r(F7e," (RemBERT model)"),F7e.forEach(t),Fer=i(x),WF=n(x,"LI",{});var C7e=s(WF);Nge=n(C7e,"STRONG",{});var vmt=s(Nge);Cer=r(vmt,"roberta"),vmt.forEach(t),Mer=r(C7e," \u2014 "),sG=n(C7e,"A",{href:!0});var Tmt=s(sG);Eer=r(Tmt,"TFRobertaModel"),Tmt.forEach(t),yer=r(C7e," (RoBERTa model)"),C7e.forEach(t),wer=i(x),QF=n(x,"LI",{});var M7e=s(QF);Dge=n(M7e,"STRONG",{});var Fmt=s(Dge);Aer=r(Fmt,"roformer"),Fmt.forEach(t),Ler=r(M7e," \u2014 "),lG=n(M7e,"A",{href:!0});var Cmt=s(lG);Ber=r(Cmt,"TFRoFormerModel"),Cmt.forEach(t),xer=r(M7e," (RoFormer model)"),M7e.forEach(t),ker=i(x),HF=n(x,"LI",{});var E7e=s(HF);qge=n(E7e,"STRONG",{});var Mmt=s(qge);Rer=r(Mmt,"speech_to_text"),Mmt.forEach(t),Ser=r(E7e," \u2014 "),iG=n(E7e,"A",{href:!0});var Emt=s(iG);Per=r(Emt,"TFSpeech2TextModel"),Emt.forEach(t),$er=r(E7e," (Speech2Text model)"),E7e.forEach(t),Ier=i(x),UF=n(x,"LI",{});var y7e=s(UF);Gge=n(y7e,"STRONG",{});var ymt=s(Gge);jer=r(ymt,"t5"),ymt.forEach(t),Ner=r(y7e," \u2014 "),dG=n(y7e,"A",{href:!0});var wmt=s(dG);Der=r(wmt,"TFT5Model"),wmt.forEach(t),qer=r(y7e," (T5 model)"),y7e.forEach(t),Ger=i(x),JF=n(x,"LI",{});var w7e=s(JF);Oge=n(w7e,"STRONG",{});var Amt=s(Oge);Oer=r(Amt,"tapas"),Amt.forEach(t),Xer=r(w7e," \u2014 "),cG=n(w7e,"A",{href:!0});var Lmt=s(cG);Ver=r(Lmt,"TFTapasModel"),Lmt.forEach(t),zer=r(w7e," (TAPAS model)"),w7e.forEach(t),Wer=i(x),YF=n(x,"LI",{});var A7e=s(YF);Xge=n(A7e,"STRONG",{});var Bmt=s(Xge);Qer=r(Bmt,"transfo-xl"),Bmt.forEach(t),Her=r(A7e," \u2014 "),mG=n(A7e,"A",{href:!0});var xmt=s(mG);Uer=r(xmt,"TFTransfoXLModel"),xmt.forEach(t),Jer=r(A7e," (Transformer-XL model)"),A7e.forEach(t),Yer=i(x),KF=n(x,"LI",{});var L7e=s(KF);Vge=n(L7e,"STRONG",{});var kmt=s(Vge);Ker=r(kmt,"vit"),kmt.forEach(t),Zer=r(L7e," \u2014 "),fG=n(L7e,"A",{href:!0});var Rmt=s(fG);eor=r(Rmt,"TFViTModel"),Rmt.forEach(t),oor=r(L7e," (ViT model)"),L7e.forEach(t),ror=i(x),ZF=n(x,"LI",{});var B7e=s(ZF);zge=n(B7e,"STRONG",{});var Smt=s(zge);tor=r(Smt,"wav2vec2"),Smt.forEach(t),aor=r(B7e," \u2014 "),gG=n(B7e,"A",{href:!0});var Pmt=s(gG);nor=r(Pmt,"TFWav2Vec2Model"),Pmt.forEach(t),sor=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),lor=i(x),eC=n(x,"LI",{});var x7e=s(eC);Wge=n(x7e,"STRONG",{});var $mt=s(Wge);ior=r($mt,"xlm"),$mt.forEach(t),dor=r(x7e," \u2014 "),hG=n(x7e,"A",{href:!0});var Imt=s(hG);cor=r(Imt,"TFXLMModel"),Imt.forEach(t),mor=r(x7e," (XLM model)"),x7e.forEach(t),gor=i(x),oC=n(x,"LI",{});var k7e=s(oC);Qge=n(k7e,"STRONG",{});var jmt=s(Qge);hor=r(jmt,"xlm-roberta"),jmt.forEach(t),uor=r(k7e," \u2014 "),uG=n(k7e,"A",{href:!0});var Nmt=s(uG);por=r(Nmt,"TFXLMRobertaModel"),Nmt.forEach(t),_or=r(k7e," (XLM-RoBERTa model)"),k7e.forEach(t),bor=i(x),rC=n(x,"LI",{});var R7e=s(rC);Hge=n(R7e,"STRONG",{});var Dmt=s(Hge);vor=r(Dmt,"xlnet"),Dmt.forEach(t),Tor=r(R7e," \u2014 "),pG=n(R7e,"A",{href:!0});var qmt=s(pG);For=r(qmt,"TFXLNetModel"),qmt.forEach(t),Cor=r(R7e," (XLNet model)"),R7e.forEach(t),x.forEach(t),Mor=i(ua),Uge=n(ua,"P",{});var Gmt=s(Uge);Eor=r(Gmt,"Examples:"),Gmt.forEach(t),yor=i(ua),f(JA.$$.fragment,ua),ua.forEach(t),Dl.forEach(t),MRe=i(c),uc=n(c,"H2",{class:!0});var PPe=s(uc);tC=n(PPe,"A",{id:!0,class:!0,href:!0});var Omt=s(tC);Jge=n(Omt,"SPAN",{});var Xmt=s(Jge);f(YA.$$.fragment,Xmt),Xmt.forEach(t),Omt.forEach(t),wor=i(PPe),Yge=n(PPe,"SPAN",{});var Vmt=s(Yge);Aor=r(Vmt,"TFAutoModelForPreTraining"),Vmt.forEach(t),PPe.forEach(t),ERe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);f(KA.$$.fragment,Gl),Lor=i(Gl),pc=n(Gl,"P",{});var KW=s(pc);Bor=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kge=n(KW,"CODE",{});var zmt=s(Kge);xor=r(zmt,"from_pretrained()"),zmt.forEach(t),kor=r(KW,"class method or the "),Zge=n(KW,"CODE",{});var Wmt=s(Zge);Ror=r(Wmt,"from_config()"),Wmt.forEach(t),Sor=r(KW,`class
method.`),KW.forEach(t),Por=i(Gl),ZA=n(Gl,"P",{});var $Pe=s(ZA);$or=r($Pe,"This class cannot be instantiated directly using "),ehe=n($Pe,"CODE",{});var Qmt=s(ehe);Ior=r(Qmt,"__init__()"),Qmt.forEach(t),jor=r($Pe," (throws an error)."),$Pe.forEach(t),Nor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);f(e0.$$.fragment,Ol),Dor=i(Ol),ohe=n(Ol,"P",{});var Hmt=s(ohe);qor=r(Hmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hmt.forEach(t),Gor=i(Ol),_c=n(Ol,"P",{});var ZW=s(_c);Oor=r(ZW,`Note:
Loading a model from its configuration file does `),rhe=n(ZW,"STRONG",{});var Umt=s(rhe);Xor=r(Umt,"not"),Umt.forEach(t),Vor=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),the=n(ZW,"CODE",{});var Jmt=s(the);zor=r(Jmt,"from_pretrained()"),Jmt.forEach(t),Wor=r(ZW,"to load the model weights."),ZW.forEach(t),Qor=i(Ol),ahe=n(Ol,"P",{});var Ymt=s(ahe);Hor=r(Ymt,"Examples:"),Ymt.forEach(t),Uor=i(Ol),f(o0.$$.fragment,Ol),Ol.forEach(t),Jor=i(Gl),uo=n(Gl,"DIV",{class:!0});var pa=s(uo);f(r0.$$.fragment,pa),Yor=i(pa),nhe=n(pa,"P",{});var Kmt=s(nhe);Kor=r(Kmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kmt.forEach(t),Zor=i(pa),_n=n(pa,"P",{});var D5=s(_n);err=r(D5,"The model class to instantiate is selected based on the "),she=n(D5,"CODE",{});var Zmt=s(she);orr=r(Zmt,"model_type"),Zmt.forEach(t),rrr=r(D5,` property of the config object (either
passed as an argument or loaded from `),lhe=n(D5,"CODE",{});var eft=s(lhe);trr=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),arr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(D5,"CODE",{});var oft=s(ihe);nrr=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),srr=r(D5,":"),D5.forEach(t),lrr=i(pa),H=n(pa,"UL",{});var U=s(H);aC=n(U,"LI",{});var S7e=s(aC);dhe=n(S7e,"STRONG",{});var rft=s(dhe);irr=r(rft,"albert"),rft.forEach(t),drr=r(S7e," \u2014 "),_G=n(S7e,"A",{href:!0});var tft=s(_G);crr=r(tft,"TFAlbertForPreTraining"),tft.forEach(t),mrr=r(S7e," (ALBERT model)"),S7e.forEach(t),frr=i(U),nC=n(U,"LI",{});var P7e=s(nC);che=n(P7e,"STRONG",{});var aft=s(che);grr=r(aft,"bart"),aft.forEach(t),hrr=r(P7e," \u2014 "),bG=n(P7e,"A",{href:!0});var nft=s(bG);urr=r(nft,"TFBartForConditionalGeneration"),nft.forEach(t),prr=r(P7e," (BART model)"),P7e.forEach(t),_rr=i(U),sC=n(U,"LI",{});var $7e=s(sC);mhe=n($7e,"STRONG",{});var sft=s(mhe);brr=r(sft,"bert"),sft.forEach(t),vrr=r($7e," \u2014 "),vG=n($7e,"A",{href:!0});var lft=s(vG);Trr=r(lft,"TFBertForPreTraining"),lft.forEach(t),Frr=r($7e," (BERT model)"),$7e.forEach(t),Crr=i(U),lC=n(U,"LI",{});var I7e=s(lC);fhe=n(I7e,"STRONG",{});var ift=s(fhe);Mrr=r(ift,"camembert"),ift.forEach(t),Err=r(I7e," \u2014 "),TG=n(I7e,"A",{href:!0});var dft=s(TG);yrr=r(dft,"TFCamembertForMaskedLM"),dft.forEach(t),wrr=r(I7e," (CamemBERT model)"),I7e.forEach(t),Arr=i(U),iC=n(U,"LI",{});var j7e=s(iC);ghe=n(j7e,"STRONG",{});var cft=s(ghe);Lrr=r(cft,"ctrl"),cft.forEach(t),Brr=r(j7e," \u2014 "),FG=n(j7e,"A",{href:!0});var mft=s(FG);xrr=r(mft,"TFCTRLLMHeadModel"),mft.forEach(t),krr=r(j7e," (CTRL model)"),j7e.forEach(t),Rrr=i(U),dC=n(U,"LI",{});var N7e=s(dC);hhe=n(N7e,"STRONG",{});var fft=s(hhe);Srr=r(fft,"distilbert"),fft.forEach(t),Prr=r(N7e," \u2014 "),CG=n(N7e,"A",{href:!0});var gft=s(CG);$rr=r(gft,"TFDistilBertForMaskedLM"),gft.forEach(t),Irr=r(N7e," (DistilBERT model)"),N7e.forEach(t),jrr=i(U),cC=n(U,"LI",{});var D7e=s(cC);uhe=n(D7e,"STRONG",{});var hft=s(uhe);Nrr=r(hft,"electra"),hft.forEach(t),Drr=r(D7e," \u2014 "),MG=n(D7e,"A",{href:!0});var uft=s(MG);qrr=r(uft,"TFElectraForPreTraining"),uft.forEach(t),Grr=r(D7e," (ELECTRA model)"),D7e.forEach(t),Orr=i(U),mC=n(U,"LI",{});var q7e=s(mC);phe=n(q7e,"STRONG",{});var pft=s(phe);Xrr=r(pft,"flaubert"),pft.forEach(t),Vrr=r(q7e," \u2014 "),EG=n(q7e,"A",{href:!0});var _ft=s(EG);zrr=r(_ft,"TFFlaubertWithLMHeadModel"),_ft.forEach(t),Wrr=r(q7e," (FlauBERT model)"),q7e.forEach(t),Qrr=i(U),fC=n(U,"LI",{});var G7e=s(fC);_he=n(G7e,"STRONG",{});var bft=s(_he);Hrr=r(bft,"funnel"),bft.forEach(t),Urr=r(G7e," \u2014 "),yG=n(G7e,"A",{href:!0});var vft=s(yG);Jrr=r(vft,"TFFunnelForPreTraining"),vft.forEach(t),Yrr=r(G7e," (Funnel Transformer model)"),G7e.forEach(t),Krr=i(U),gC=n(U,"LI",{});var O7e=s(gC);bhe=n(O7e,"STRONG",{});var Tft=s(bhe);Zrr=r(Tft,"gpt2"),Tft.forEach(t),etr=r(O7e," \u2014 "),wG=n(O7e,"A",{href:!0});var Fft=s(wG);otr=r(Fft,"TFGPT2LMHeadModel"),Fft.forEach(t),rtr=r(O7e," (OpenAI GPT-2 model)"),O7e.forEach(t),ttr=i(U),hC=n(U,"LI",{});var X7e=s(hC);vhe=n(X7e,"STRONG",{});var Cft=s(vhe);atr=r(Cft,"layoutlm"),Cft.forEach(t),ntr=r(X7e," \u2014 "),AG=n(X7e,"A",{href:!0});var Mft=s(AG);str=r(Mft,"TFLayoutLMForMaskedLM"),Mft.forEach(t),ltr=r(X7e," (LayoutLM model)"),X7e.forEach(t),itr=i(U),uC=n(U,"LI",{});var V7e=s(uC);The=n(V7e,"STRONG",{});var Eft=s(The);dtr=r(Eft,"lxmert"),Eft.forEach(t),ctr=r(V7e," \u2014 "),LG=n(V7e,"A",{href:!0});var yft=s(LG);mtr=r(yft,"TFLxmertForPreTraining"),yft.forEach(t),ftr=r(V7e," (LXMERT model)"),V7e.forEach(t),gtr=i(U),pC=n(U,"LI",{});var z7e=s(pC);Fhe=n(z7e,"STRONG",{});var wft=s(Fhe);htr=r(wft,"mobilebert"),wft.forEach(t),utr=r(z7e," \u2014 "),BG=n(z7e,"A",{href:!0});var Aft=s(BG);ptr=r(Aft,"TFMobileBertForPreTraining"),Aft.forEach(t),_tr=r(z7e," (MobileBERT model)"),z7e.forEach(t),btr=i(U),_C=n(U,"LI",{});var W7e=s(_C);Che=n(W7e,"STRONG",{});var Lft=s(Che);vtr=r(Lft,"mpnet"),Lft.forEach(t),Ttr=r(W7e," \u2014 "),xG=n(W7e,"A",{href:!0});var Bft=s(xG);Ftr=r(Bft,"TFMPNetForMaskedLM"),Bft.forEach(t),Ctr=r(W7e," (MPNet model)"),W7e.forEach(t),Mtr=i(U),bC=n(U,"LI",{});var Q7e=s(bC);Mhe=n(Q7e,"STRONG",{});var xft=s(Mhe);Etr=r(xft,"openai-gpt"),xft.forEach(t),ytr=r(Q7e," \u2014 "),kG=n(Q7e,"A",{href:!0});var kft=s(kG);wtr=r(kft,"TFOpenAIGPTLMHeadModel"),kft.forEach(t),Atr=r(Q7e," (OpenAI GPT model)"),Q7e.forEach(t),Ltr=i(U),vC=n(U,"LI",{});var H7e=s(vC);Ehe=n(H7e,"STRONG",{});var Rft=s(Ehe);Btr=r(Rft,"roberta"),Rft.forEach(t),xtr=r(H7e," \u2014 "),RG=n(H7e,"A",{href:!0});var Sft=s(RG);ktr=r(Sft,"TFRobertaForMaskedLM"),Sft.forEach(t),Rtr=r(H7e," (RoBERTa model)"),H7e.forEach(t),Str=i(U),TC=n(U,"LI",{});var U7e=s(TC);yhe=n(U7e,"STRONG",{});var Pft=s(yhe);Ptr=r(Pft,"t5"),Pft.forEach(t),$tr=r(U7e," \u2014 "),SG=n(U7e,"A",{href:!0});var $ft=s(SG);Itr=r($ft,"TFT5ForConditionalGeneration"),$ft.forEach(t),jtr=r(U7e," (T5 model)"),U7e.forEach(t),Ntr=i(U),FC=n(U,"LI",{});var J7e=s(FC);whe=n(J7e,"STRONG",{});var Ift=s(whe);Dtr=r(Ift,"tapas"),Ift.forEach(t),qtr=r(J7e," \u2014 "),PG=n(J7e,"A",{href:!0});var jft=s(PG);Gtr=r(jft,"TFTapasForMaskedLM"),jft.forEach(t),Otr=r(J7e," (TAPAS model)"),J7e.forEach(t),Xtr=i(U),CC=n(U,"LI",{});var Y7e=s(CC);Ahe=n(Y7e,"STRONG",{});var Nft=s(Ahe);Vtr=r(Nft,"transfo-xl"),Nft.forEach(t),ztr=r(Y7e," \u2014 "),$G=n(Y7e,"A",{href:!0});var Dft=s($G);Wtr=r(Dft,"TFTransfoXLLMHeadModel"),Dft.forEach(t),Qtr=r(Y7e," (Transformer-XL model)"),Y7e.forEach(t),Htr=i(U),MC=n(U,"LI",{});var K7e=s(MC);Lhe=n(K7e,"STRONG",{});var qft=s(Lhe);Utr=r(qft,"xlm"),qft.forEach(t),Jtr=r(K7e," \u2014 "),IG=n(K7e,"A",{href:!0});var Gft=s(IG);Ytr=r(Gft,"TFXLMWithLMHeadModel"),Gft.forEach(t),Ktr=r(K7e," (XLM model)"),K7e.forEach(t),Ztr=i(U),EC=n(U,"LI",{});var Z7e=s(EC);Bhe=n(Z7e,"STRONG",{});var Oft=s(Bhe);ear=r(Oft,"xlm-roberta"),Oft.forEach(t),oar=r(Z7e," \u2014 "),jG=n(Z7e,"A",{href:!0});var Xft=s(jG);rar=r(Xft,"TFXLMRobertaForMaskedLM"),Xft.forEach(t),tar=r(Z7e," (XLM-RoBERTa model)"),Z7e.forEach(t),aar=i(U),yC=n(U,"LI",{});var e8e=s(yC);xhe=n(e8e,"STRONG",{});var Vft=s(xhe);nar=r(Vft,"xlnet"),Vft.forEach(t),sar=r(e8e," \u2014 "),NG=n(e8e,"A",{href:!0});var zft=s(NG);lar=r(zft,"TFXLNetLMHeadModel"),zft.forEach(t),iar=r(e8e," (XLNet model)"),e8e.forEach(t),U.forEach(t),dar=i(pa),khe=n(pa,"P",{});var Wft=s(khe);car=r(Wft,"Examples:"),Wft.forEach(t),mar=i(pa),f(t0.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),yRe=i(c),bc=n(c,"H2",{class:!0});var IPe=s(bc);wC=n(IPe,"A",{id:!0,class:!0,href:!0});var Qft=s(wC);Rhe=n(Qft,"SPAN",{});var Hft=s(Rhe);f(a0.$$.fragment,Hft),Hft.forEach(t),Qft.forEach(t),far=i(IPe),She=n(IPe,"SPAN",{});var Uft=s(She);gar=r(Uft,"TFAutoModelForCausalLM"),Uft.forEach(t),IPe.forEach(t),wRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);f(n0.$$.fragment,Xl),har=i(Xl),vc=n(Xl,"P",{});var eQ=s(vc);uar=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Phe=n(eQ,"CODE",{});var Jft=s(Phe);par=r(Jft,"from_pretrained()"),Jft.forEach(t),_ar=r(eQ,"class method or the "),$he=n(eQ,"CODE",{});var Yft=s($he);bar=r(Yft,"from_config()"),Yft.forEach(t),Tar=r(eQ,`class
method.`),eQ.forEach(t),Far=i(Xl),s0=n(Xl,"P",{});var jPe=s(s0);Car=r(jPe,"This class cannot be instantiated directly using "),Ihe=n(jPe,"CODE",{});var Kft=s(Ihe);Mar=r(Kft,"__init__()"),Kft.forEach(t),Ear=r(jPe," (throws an error)."),jPe.forEach(t),yar=i(Xl),ut=n(Xl,"DIV",{class:!0});var Vl=s(ut);f(l0.$$.fragment,Vl),war=i(Vl),jhe=n(Vl,"P",{});var Zft=s(jhe);Aar=r(Zft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zft.forEach(t),Lar=i(Vl),Tc=n(Vl,"P",{});var oQ=s(Tc);Bar=r(oQ,`Note:
Loading a model from its configuration file does `),Nhe=n(oQ,"STRONG",{});var egt=s(Nhe);xar=r(egt,"not"),egt.forEach(t),kar=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dhe=n(oQ,"CODE",{});var ogt=s(Dhe);Rar=r(ogt,"from_pretrained()"),ogt.forEach(t),Sar=r(oQ,"to load the model weights."),oQ.forEach(t),Par=i(Vl),qhe=n(Vl,"P",{});var rgt=s(qhe);$ar=r(rgt,"Examples:"),rgt.forEach(t),Iar=i(Vl),f(i0.$$.fragment,Vl),Vl.forEach(t),jar=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);f(d0.$$.fragment,_a),Nar=i(_a),Ghe=n(_a,"P",{});var tgt=s(Ghe);Dar=r(tgt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tgt.forEach(t),qar=i(_a),bn=n(_a,"P",{});var q5=s(bn);Gar=r(q5,"The model class to instantiate is selected based on the "),Ohe=n(q5,"CODE",{});var agt=s(Ohe);Oar=r(agt,"model_type"),agt.forEach(t),Xar=r(q5,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(q5,"CODE",{});var ngt=s(Xhe);Var=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),zar=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(q5,"CODE",{});var sgt=s(Vhe);War=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),Qar=r(q5,":"),q5.forEach(t),Har=i(_a),ce=n(_a,"UL",{});var he=s(ce);AC=n(he,"LI",{});var o8e=s(AC);zhe=n(o8e,"STRONG",{});var lgt=s(zhe);Uar=r(lgt,"bert"),lgt.forEach(t),Jar=r(o8e," \u2014 "),DG=n(o8e,"A",{href:!0});var igt=s(DG);Yar=r(igt,"TFBertLMHeadModel"),igt.forEach(t),Kar=r(o8e," (BERT model)"),o8e.forEach(t),Zar=i(he),LC=n(he,"LI",{});var r8e=s(LC);Whe=n(r8e,"STRONG",{});var dgt=s(Whe);enr=r(dgt,"camembert"),dgt.forEach(t),onr=r(r8e," \u2014 "),qG=n(r8e,"A",{href:!0});var cgt=s(qG);rnr=r(cgt,"TFCamembertForCausalLM"),cgt.forEach(t),tnr=r(r8e," (CamemBERT model)"),r8e.forEach(t),anr=i(he),BC=n(he,"LI",{});var t8e=s(BC);Qhe=n(t8e,"STRONG",{});var mgt=s(Qhe);nnr=r(mgt,"ctrl"),mgt.forEach(t),snr=r(t8e," \u2014 "),GG=n(t8e,"A",{href:!0});var fgt=s(GG);lnr=r(fgt,"TFCTRLLMHeadModel"),fgt.forEach(t),inr=r(t8e," (CTRL model)"),t8e.forEach(t),dnr=i(he),xC=n(he,"LI",{});var a8e=s(xC);Hhe=n(a8e,"STRONG",{});var ggt=s(Hhe);cnr=r(ggt,"gpt2"),ggt.forEach(t),mnr=r(a8e," \u2014 "),OG=n(a8e,"A",{href:!0});var hgt=s(OG);fnr=r(hgt,"TFGPT2LMHeadModel"),hgt.forEach(t),gnr=r(a8e," (OpenAI GPT-2 model)"),a8e.forEach(t),hnr=i(he),kC=n(he,"LI",{});var n8e=s(kC);Uhe=n(n8e,"STRONG",{});var ugt=s(Uhe);unr=r(ugt,"gptj"),ugt.forEach(t),pnr=r(n8e," \u2014 "),XG=n(n8e,"A",{href:!0});var pgt=s(XG);_nr=r(pgt,"TFGPTJForCausalLM"),pgt.forEach(t),bnr=r(n8e," (GPT-J model)"),n8e.forEach(t),vnr=i(he),RC=n(he,"LI",{});var s8e=s(RC);Jhe=n(s8e,"STRONG",{});var _gt=s(Jhe);Tnr=r(_gt,"openai-gpt"),_gt.forEach(t),Fnr=r(s8e," \u2014 "),VG=n(s8e,"A",{href:!0});var bgt=s(VG);Cnr=r(bgt,"TFOpenAIGPTLMHeadModel"),bgt.forEach(t),Mnr=r(s8e," (OpenAI GPT model)"),s8e.forEach(t),Enr=i(he),SC=n(he,"LI",{});var l8e=s(SC);Yhe=n(l8e,"STRONG",{});var vgt=s(Yhe);ynr=r(vgt,"rembert"),vgt.forEach(t),wnr=r(l8e," \u2014 "),zG=n(l8e,"A",{href:!0});var Tgt=s(zG);Anr=r(Tgt,"TFRemBertForCausalLM"),Tgt.forEach(t),Lnr=r(l8e," (RemBERT model)"),l8e.forEach(t),Bnr=i(he),PC=n(he,"LI",{});var i8e=s(PC);Khe=n(i8e,"STRONG",{});var Fgt=s(Khe);xnr=r(Fgt,"roberta"),Fgt.forEach(t),knr=r(i8e," \u2014 "),WG=n(i8e,"A",{href:!0});var Cgt=s(WG);Rnr=r(Cgt,"TFRobertaForCausalLM"),Cgt.forEach(t),Snr=r(i8e," (RoBERTa model)"),i8e.forEach(t),Pnr=i(he),$C=n(he,"LI",{});var d8e=s($C);Zhe=n(d8e,"STRONG",{});var Mgt=s(Zhe);$nr=r(Mgt,"roformer"),Mgt.forEach(t),Inr=r(d8e," \u2014 "),QG=n(d8e,"A",{href:!0});var Egt=s(QG);jnr=r(Egt,"TFRoFormerForCausalLM"),Egt.forEach(t),Nnr=r(d8e," (RoFormer model)"),d8e.forEach(t),Dnr=i(he),IC=n(he,"LI",{});var c8e=s(IC);eue=n(c8e,"STRONG",{});var ygt=s(eue);qnr=r(ygt,"transfo-xl"),ygt.forEach(t),Gnr=r(c8e," \u2014 "),HG=n(c8e,"A",{href:!0});var wgt=s(HG);Onr=r(wgt,"TFTransfoXLLMHeadModel"),wgt.forEach(t),Xnr=r(c8e," (Transformer-XL model)"),c8e.forEach(t),Vnr=i(he),jC=n(he,"LI",{});var m8e=s(jC);oue=n(m8e,"STRONG",{});var Agt=s(oue);znr=r(Agt,"xlm"),Agt.forEach(t),Wnr=r(m8e," \u2014 "),UG=n(m8e,"A",{href:!0});var Lgt=s(UG);Qnr=r(Lgt,"TFXLMWithLMHeadModel"),Lgt.forEach(t),Hnr=r(m8e," (XLM model)"),m8e.forEach(t),Unr=i(he),NC=n(he,"LI",{});var f8e=s(NC);rue=n(f8e,"STRONG",{});var Bgt=s(rue);Jnr=r(Bgt,"xlnet"),Bgt.forEach(t),Ynr=r(f8e," \u2014 "),JG=n(f8e,"A",{href:!0});var xgt=s(JG);Knr=r(xgt,"TFXLNetLMHeadModel"),xgt.forEach(t),Znr=r(f8e," (XLNet model)"),f8e.forEach(t),he.forEach(t),esr=i(_a),tue=n(_a,"P",{});var kgt=s(tue);osr=r(kgt,"Examples:"),kgt.forEach(t),rsr=i(_a),f(c0.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),ARe=i(c),Fc=n(c,"H2",{class:!0});var NPe=s(Fc);DC=n(NPe,"A",{id:!0,class:!0,href:!0});var Rgt=s(DC);aue=n(Rgt,"SPAN",{});var Sgt=s(aue);f(m0.$$.fragment,Sgt),Sgt.forEach(t),Rgt.forEach(t),tsr=i(NPe),nue=n(NPe,"SPAN",{});var Pgt=s(nue);asr=r(Pgt,"TFAutoModelForImageClassification"),Pgt.forEach(t),NPe.forEach(t),LRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);f(f0.$$.fragment,zl),nsr=i(zl),Cc=n(zl,"P",{});var rQ=s(Cc);ssr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sue=n(rQ,"CODE",{});var $gt=s(sue);lsr=r($gt,"from_pretrained()"),$gt.forEach(t),isr=r(rQ,"class method or the "),lue=n(rQ,"CODE",{});var Igt=s(lue);dsr=r(Igt,"from_config()"),Igt.forEach(t),csr=r(rQ,`class
method.`),rQ.forEach(t),msr=i(zl),g0=n(zl,"P",{});var DPe=s(g0);fsr=r(DPe,"This class cannot be instantiated directly using "),iue=n(DPe,"CODE",{});var jgt=s(iue);gsr=r(jgt,"__init__()"),jgt.forEach(t),hsr=r(DPe," (throws an error)."),DPe.forEach(t),usr=i(zl),pt=n(zl,"DIV",{class:!0});var Wl=s(pt);f(h0.$$.fragment,Wl),psr=i(Wl),due=n(Wl,"P",{});var Ngt=s(due);_sr=r(Ngt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ngt.forEach(t),bsr=i(Wl),Mc=n(Wl,"P",{});var tQ=s(Mc);vsr=r(tQ,`Note:
Loading a model from its configuration file does `),cue=n(tQ,"STRONG",{});var Dgt=s(cue);Tsr=r(Dgt,"not"),Dgt.forEach(t),Fsr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mue=n(tQ,"CODE",{});var qgt=s(mue);Csr=r(qgt,"from_pretrained()"),qgt.forEach(t),Msr=r(tQ,"to load the model weights."),tQ.forEach(t),Esr=i(Wl),fue=n(Wl,"P",{});var Ggt=s(fue);ysr=r(Ggt,"Examples:"),Ggt.forEach(t),wsr=i(Wl),f(u0.$$.fragment,Wl),Wl.forEach(t),Asr=i(zl),_o=n(zl,"DIV",{class:!0});var ba=s(_o);f(p0.$$.fragment,ba),Lsr=i(ba),gue=n(ba,"P",{});var Ogt=s(gue);Bsr=r(Ogt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ogt.forEach(t),xsr=i(ba),vn=n(ba,"P",{});var G5=s(vn);ksr=r(G5,"The model class to instantiate is selected based on the "),hue=n(G5,"CODE",{});var Xgt=s(hue);Rsr=r(Xgt,"model_type"),Xgt.forEach(t),Ssr=r(G5,` property of the config object (either
passed as an argument or loaded from `),uue=n(G5,"CODE",{});var Vgt=s(uue);Psr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),$sr=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(G5,"CODE",{});var zgt=s(pue);Isr=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),jsr=r(G5,":"),G5.forEach(t),Nsr=i(ba),_0=n(ba,"UL",{});var qPe=s(_0);qC=n(qPe,"LI",{});var g8e=s(qC);_ue=n(g8e,"STRONG",{});var Wgt=s(_ue);Dsr=r(Wgt,"convnext"),Wgt.forEach(t),qsr=r(g8e," \u2014 "),YG=n(g8e,"A",{href:!0});var Qgt=s(YG);Gsr=r(Qgt,"TFConvNextForImageClassification"),Qgt.forEach(t),Osr=r(g8e," (ConvNext model)"),g8e.forEach(t),Xsr=i(qPe),GC=n(qPe,"LI",{});var h8e=s(GC);bue=n(h8e,"STRONG",{});var Hgt=s(bue);Vsr=r(Hgt,"vit"),Hgt.forEach(t),zsr=r(h8e," \u2014 "),KG=n(h8e,"A",{href:!0});var Ugt=s(KG);Wsr=r(Ugt,"TFViTForImageClassification"),Ugt.forEach(t),Qsr=r(h8e," (ViT model)"),h8e.forEach(t),qPe.forEach(t),Hsr=i(ba),vue=n(ba,"P",{});var Jgt=s(vue);Usr=r(Jgt,"Examples:"),Jgt.forEach(t),Jsr=i(ba),f(b0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),BRe=i(c),Ec=n(c,"H2",{class:!0});var GPe=s(Ec);OC=n(GPe,"A",{id:!0,class:!0,href:!0});var Ygt=s(OC);Tue=n(Ygt,"SPAN",{});var Kgt=s(Tue);f(v0.$$.fragment,Kgt),Kgt.forEach(t),Ygt.forEach(t),Ysr=i(GPe),Fue=n(GPe,"SPAN",{});var Zgt=s(Fue);Ksr=r(Zgt,"TFAutoModelForMaskedLM"),Zgt.forEach(t),GPe.forEach(t),xRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);f(T0.$$.fragment,Ql),Zsr=i(Ql),yc=n(Ql,"P",{});var aQ=s(yc);elr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cue=n(aQ,"CODE",{});var eht=s(Cue);olr=r(eht,"from_pretrained()"),eht.forEach(t),rlr=r(aQ,"class method or the "),Mue=n(aQ,"CODE",{});var oht=s(Mue);tlr=r(oht,"from_config()"),oht.forEach(t),alr=r(aQ,`class
method.`),aQ.forEach(t),nlr=i(Ql),F0=n(Ql,"P",{});var OPe=s(F0);slr=r(OPe,"This class cannot be instantiated directly using "),Eue=n(OPe,"CODE",{});var rht=s(Eue);llr=r(rht,"__init__()"),rht.forEach(t),ilr=r(OPe," (throws an error)."),OPe.forEach(t),dlr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);f(C0.$$.fragment,Hl),clr=i(Hl),yue=n(Hl,"P",{});var tht=s(yue);mlr=r(tht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tht.forEach(t),flr=i(Hl),wc=n(Hl,"P",{});var nQ=s(wc);glr=r(nQ,`Note:
Loading a model from its configuration file does `),wue=n(nQ,"STRONG",{});var aht=s(wue);hlr=r(aht,"not"),aht.forEach(t),ulr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aue=n(nQ,"CODE",{});var nht=s(Aue);plr=r(nht,"from_pretrained()"),nht.forEach(t),_lr=r(nQ,"to load the model weights."),nQ.forEach(t),blr=i(Hl),Lue=n(Hl,"P",{});var sht=s(Lue);vlr=r(sht,"Examples:"),sht.forEach(t),Tlr=i(Hl),f(M0.$$.fragment,Hl),Hl.forEach(t),Flr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);f(E0.$$.fragment,va),Clr=i(va),Bue=n(va,"P",{});var lht=s(Bue);Mlr=r(lht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lht.forEach(t),Elr=i(va),Tn=n(va,"P",{});var O5=s(Tn);ylr=r(O5,"The model class to instantiate is selected based on the "),xue=n(O5,"CODE",{});var iht=s(xue);wlr=r(iht,"model_type"),iht.forEach(t),Alr=r(O5,` property of the config object (either
passed as an argument or loaded from `),kue=n(O5,"CODE",{});var dht=s(kue);Llr=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),Blr=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(O5,"CODE",{});var cht=s(Rue);xlr=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),klr=r(O5,":"),O5.forEach(t),Rlr=i(va),J=n(va,"UL",{});var ee=s(J);XC=n(ee,"LI",{});var u8e=s(XC);Sue=n(u8e,"STRONG",{});var mht=s(Sue);Slr=r(mht,"albert"),mht.forEach(t),Plr=r(u8e," \u2014 "),ZG=n(u8e,"A",{href:!0});var fht=s(ZG);$lr=r(fht,"TFAlbertForMaskedLM"),fht.forEach(t),Ilr=r(u8e," (ALBERT model)"),u8e.forEach(t),jlr=i(ee),VC=n(ee,"LI",{});var p8e=s(VC);Pue=n(p8e,"STRONG",{});var ght=s(Pue);Nlr=r(ght,"bert"),ght.forEach(t),Dlr=r(p8e," \u2014 "),eO=n(p8e,"A",{href:!0});var hht=s(eO);qlr=r(hht,"TFBertForMaskedLM"),hht.forEach(t),Glr=r(p8e," (BERT model)"),p8e.forEach(t),Olr=i(ee),zC=n(ee,"LI",{});var _8e=s(zC);$ue=n(_8e,"STRONG",{});var uht=s($ue);Xlr=r(uht,"camembert"),uht.forEach(t),Vlr=r(_8e," \u2014 "),oO=n(_8e,"A",{href:!0});var pht=s(oO);zlr=r(pht,"TFCamembertForMaskedLM"),pht.forEach(t),Wlr=r(_8e," (CamemBERT model)"),_8e.forEach(t),Qlr=i(ee),WC=n(ee,"LI",{});var b8e=s(WC);Iue=n(b8e,"STRONG",{});var _ht=s(Iue);Hlr=r(_ht,"convbert"),_ht.forEach(t),Ulr=r(b8e," \u2014 "),rO=n(b8e,"A",{href:!0});var bht=s(rO);Jlr=r(bht,"TFConvBertForMaskedLM"),bht.forEach(t),Ylr=r(b8e," (ConvBERT model)"),b8e.forEach(t),Klr=i(ee),QC=n(ee,"LI",{});var v8e=s(QC);jue=n(v8e,"STRONG",{});var vht=s(jue);Zlr=r(vht,"deberta"),vht.forEach(t),eir=r(v8e," \u2014 "),tO=n(v8e,"A",{href:!0});var Tht=s(tO);oir=r(Tht,"TFDebertaForMaskedLM"),Tht.forEach(t),rir=r(v8e," (DeBERTa model)"),v8e.forEach(t),tir=i(ee),HC=n(ee,"LI",{});var T8e=s(HC);Nue=n(T8e,"STRONG",{});var Fht=s(Nue);air=r(Fht,"deberta-v2"),Fht.forEach(t),nir=r(T8e," \u2014 "),aO=n(T8e,"A",{href:!0});var Cht=s(aO);sir=r(Cht,"TFDebertaV2ForMaskedLM"),Cht.forEach(t),lir=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),iir=i(ee),UC=n(ee,"LI",{});var F8e=s(UC);Due=n(F8e,"STRONG",{});var Mht=s(Due);dir=r(Mht,"distilbert"),Mht.forEach(t),cir=r(F8e," \u2014 "),nO=n(F8e,"A",{href:!0});var Eht=s(nO);mir=r(Eht,"TFDistilBertForMaskedLM"),Eht.forEach(t),fir=r(F8e," (DistilBERT model)"),F8e.forEach(t),gir=i(ee),JC=n(ee,"LI",{});var C8e=s(JC);que=n(C8e,"STRONG",{});var yht=s(que);hir=r(yht,"electra"),yht.forEach(t),uir=r(C8e," \u2014 "),sO=n(C8e,"A",{href:!0});var wht=s(sO);pir=r(wht,"TFElectraForMaskedLM"),wht.forEach(t),_ir=r(C8e," (ELECTRA model)"),C8e.forEach(t),bir=i(ee),YC=n(ee,"LI",{});var M8e=s(YC);Gue=n(M8e,"STRONG",{});var Aht=s(Gue);vir=r(Aht,"flaubert"),Aht.forEach(t),Tir=r(M8e," \u2014 "),lO=n(M8e,"A",{href:!0});var Lht=s(lO);Fir=r(Lht,"TFFlaubertWithLMHeadModel"),Lht.forEach(t),Cir=r(M8e," (FlauBERT model)"),M8e.forEach(t),Mir=i(ee),KC=n(ee,"LI",{});var E8e=s(KC);Oue=n(E8e,"STRONG",{});var Bht=s(Oue);Eir=r(Bht,"funnel"),Bht.forEach(t),yir=r(E8e," \u2014 "),iO=n(E8e,"A",{href:!0});var xht=s(iO);wir=r(xht,"TFFunnelForMaskedLM"),xht.forEach(t),Air=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),Lir=i(ee),ZC=n(ee,"LI",{});var y8e=s(ZC);Xue=n(y8e,"STRONG",{});var kht=s(Xue);Bir=r(kht,"layoutlm"),kht.forEach(t),xir=r(y8e," \u2014 "),dO=n(y8e,"A",{href:!0});var Rht=s(dO);kir=r(Rht,"TFLayoutLMForMaskedLM"),Rht.forEach(t),Rir=r(y8e," (LayoutLM model)"),y8e.forEach(t),Sir=i(ee),eM=n(ee,"LI",{});var w8e=s(eM);Vue=n(w8e,"STRONG",{});var Sht=s(Vue);Pir=r(Sht,"longformer"),Sht.forEach(t),$ir=r(w8e," \u2014 "),cO=n(w8e,"A",{href:!0});var Pht=s(cO);Iir=r(Pht,"TFLongformerForMaskedLM"),Pht.forEach(t),jir=r(w8e," (Longformer model)"),w8e.forEach(t),Nir=i(ee),oM=n(ee,"LI",{});var A8e=s(oM);zue=n(A8e,"STRONG",{});var $ht=s(zue);Dir=r($ht,"mobilebert"),$ht.forEach(t),qir=r(A8e," \u2014 "),mO=n(A8e,"A",{href:!0});var Iht=s(mO);Gir=r(Iht,"TFMobileBertForMaskedLM"),Iht.forEach(t),Oir=r(A8e," (MobileBERT model)"),A8e.forEach(t),Xir=i(ee),rM=n(ee,"LI",{});var L8e=s(rM);Wue=n(L8e,"STRONG",{});var jht=s(Wue);Vir=r(jht,"mpnet"),jht.forEach(t),zir=r(L8e," \u2014 "),fO=n(L8e,"A",{href:!0});var Nht=s(fO);Wir=r(Nht,"TFMPNetForMaskedLM"),Nht.forEach(t),Qir=r(L8e," (MPNet model)"),L8e.forEach(t),Hir=i(ee),tM=n(ee,"LI",{});var B8e=s(tM);Que=n(B8e,"STRONG",{});var Dht=s(Que);Uir=r(Dht,"rembert"),Dht.forEach(t),Jir=r(B8e," \u2014 "),gO=n(B8e,"A",{href:!0});var qht=s(gO);Yir=r(qht,"TFRemBertForMaskedLM"),qht.forEach(t),Kir=r(B8e," (RemBERT model)"),B8e.forEach(t),Zir=i(ee),aM=n(ee,"LI",{});var x8e=s(aM);Hue=n(x8e,"STRONG",{});var Ght=s(Hue);edr=r(Ght,"roberta"),Ght.forEach(t),odr=r(x8e," \u2014 "),hO=n(x8e,"A",{href:!0});var Oht=s(hO);rdr=r(Oht,"TFRobertaForMaskedLM"),Oht.forEach(t),tdr=r(x8e," (RoBERTa model)"),x8e.forEach(t),adr=i(ee),nM=n(ee,"LI",{});var k8e=s(nM);Uue=n(k8e,"STRONG",{});var Xht=s(Uue);ndr=r(Xht,"roformer"),Xht.forEach(t),sdr=r(k8e," \u2014 "),uO=n(k8e,"A",{href:!0});var Vht=s(uO);ldr=r(Vht,"TFRoFormerForMaskedLM"),Vht.forEach(t),idr=r(k8e," (RoFormer model)"),k8e.forEach(t),ddr=i(ee),sM=n(ee,"LI",{});var R8e=s(sM);Jue=n(R8e,"STRONG",{});var zht=s(Jue);cdr=r(zht,"tapas"),zht.forEach(t),mdr=r(R8e," \u2014 "),pO=n(R8e,"A",{href:!0});var Wht=s(pO);fdr=r(Wht,"TFTapasForMaskedLM"),Wht.forEach(t),gdr=r(R8e," (TAPAS model)"),R8e.forEach(t),hdr=i(ee),lM=n(ee,"LI",{});var S8e=s(lM);Yue=n(S8e,"STRONG",{});var Qht=s(Yue);udr=r(Qht,"xlm"),Qht.forEach(t),pdr=r(S8e," \u2014 "),_O=n(S8e,"A",{href:!0});var Hht=s(_O);_dr=r(Hht,"TFXLMWithLMHeadModel"),Hht.forEach(t),bdr=r(S8e," (XLM model)"),S8e.forEach(t),vdr=i(ee),iM=n(ee,"LI",{});var P8e=s(iM);Kue=n(P8e,"STRONG",{});var Uht=s(Kue);Tdr=r(Uht,"xlm-roberta"),Uht.forEach(t),Fdr=r(P8e," \u2014 "),bO=n(P8e,"A",{href:!0});var Jht=s(bO);Cdr=r(Jht,"TFXLMRobertaForMaskedLM"),Jht.forEach(t),Mdr=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),ee.forEach(t),Edr=i(va),Zue=n(va,"P",{});var Yht=s(Zue);ydr=r(Yht,"Examples:"),Yht.forEach(t),wdr=i(va),f(y0.$$.fragment,va),va.forEach(t),Ql.forEach(t),kRe=i(c),Ac=n(c,"H2",{class:!0});var XPe=s(Ac);dM=n(XPe,"A",{id:!0,class:!0,href:!0});var Kht=s(dM);epe=n(Kht,"SPAN",{});var Zht=s(epe);f(w0.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),Adr=i(XPe),ope=n(XPe,"SPAN",{});var eut=s(ope);Ldr=r(eut,"TFAutoModelForSeq2SeqLM"),eut.forEach(t),XPe.forEach(t),RRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);f(A0.$$.fragment,Ul),Bdr=i(Ul),Lc=n(Ul,"P",{});var sQ=s(Lc);xdr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rpe=n(sQ,"CODE",{});var out=s(rpe);kdr=r(out,"from_pretrained()"),out.forEach(t),Rdr=r(sQ,"class method or the "),tpe=n(sQ,"CODE",{});var rut=s(tpe);Sdr=r(rut,"from_config()"),rut.forEach(t),Pdr=r(sQ,`class
method.`),sQ.forEach(t),$dr=i(Ul),L0=n(Ul,"P",{});var VPe=s(L0);Idr=r(VPe,"This class cannot be instantiated directly using "),ape=n(VPe,"CODE",{});var tut=s(ape);jdr=r(tut,"__init__()"),tut.forEach(t),Ndr=r(VPe," (throws an error)."),VPe.forEach(t),Ddr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);f(B0.$$.fragment,Jl),qdr=i(Jl),npe=n(Jl,"P",{});var aut=s(npe);Gdr=r(aut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aut.forEach(t),Odr=i(Jl),Bc=n(Jl,"P",{});var lQ=s(Bc);Xdr=r(lQ,`Note:
Loading a model from its configuration file does `),spe=n(lQ,"STRONG",{});var nut=s(spe);Vdr=r(nut,"not"),nut.forEach(t),zdr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lpe=n(lQ,"CODE",{});var sut=s(lpe);Wdr=r(sut,"from_pretrained()"),sut.forEach(t),Qdr=r(lQ,"to load the model weights."),lQ.forEach(t),Hdr=i(Jl),ipe=n(Jl,"P",{});var lut=s(ipe);Udr=r(lut,"Examples:"),lut.forEach(t),Jdr=i(Jl),f(x0.$$.fragment,Jl),Jl.forEach(t),Ydr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);f(k0.$$.fragment,Ta),Kdr=i(Ta),dpe=n(Ta,"P",{});var iut=s(dpe);Zdr=r(iut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iut.forEach(t),ecr=i(Ta),Fn=n(Ta,"P",{});var X5=s(Fn);ocr=r(X5,"The model class to instantiate is selected based on the "),cpe=n(X5,"CODE",{});var dut=s(cpe);rcr=r(dut,"model_type"),dut.forEach(t),tcr=r(X5,` property of the config object (either
passed as an argument or loaded from `),mpe=n(X5,"CODE",{});var cut=s(mpe);acr=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),ncr=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(X5,"CODE",{});var mut=s(fpe);scr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),lcr=r(X5,":"),X5.forEach(t),icr=i(Ta),_e=n(Ta,"UL",{});var ye=s(_e);cM=n(ye,"LI",{});var $8e=s(cM);gpe=n($8e,"STRONG",{});var fut=s(gpe);dcr=r(fut,"bart"),fut.forEach(t),ccr=r($8e," \u2014 "),vO=n($8e,"A",{href:!0});var gut=s(vO);mcr=r(gut,"TFBartForConditionalGeneration"),gut.forEach(t),fcr=r($8e," (BART model)"),$8e.forEach(t),gcr=i(ye),mM=n(ye,"LI",{});var I8e=s(mM);hpe=n(I8e,"STRONG",{});var hut=s(hpe);hcr=r(hut,"blenderbot"),hut.forEach(t),ucr=r(I8e," \u2014 "),TO=n(I8e,"A",{href:!0});var uut=s(TO);pcr=r(uut,"TFBlenderbotForConditionalGeneration"),uut.forEach(t),_cr=r(I8e," (Blenderbot model)"),I8e.forEach(t),bcr=i(ye),fM=n(ye,"LI",{});var j8e=s(fM);upe=n(j8e,"STRONG",{});var put=s(upe);vcr=r(put,"blenderbot-small"),put.forEach(t),Tcr=r(j8e," \u2014 "),FO=n(j8e,"A",{href:!0});var _ut=s(FO);Fcr=r(_ut,"TFBlenderbotSmallForConditionalGeneration"),_ut.forEach(t),Ccr=r(j8e," (BlenderbotSmall model)"),j8e.forEach(t),Mcr=i(ye),gM=n(ye,"LI",{});var N8e=s(gM);ppe=n(N8e,"STRONG",{});var but=s(ppe);Ecr=r(but,"encoder-decoder"),but.forEach(t),ycr=r(N8e," \u2014 "),CO=n(N8e,"A",{href:!0});var vut=s(CO);wcr=r(vut,"TFEncoderDecoderModel"),vut.forEach(t),Acr=r(N8e," (Encoder decoder model)"),N8e.forEach(t),Lcr=i(ye),hM=n(ye,"LI",{});var D8e=s(hM);_pe=n(D8e,"STRONG",{});var Tut=s(_pe);Bcr=r(Tut,"led"),Tut.forEach(t),xcr=r(D8e," \u2014 "),MO=n(D8e,"A",{href:!0});var Fut=s(MO);kcr=r(Fut,"TFLEDForConditionalGeneration"),Fut.forEach(t),Rcr=r(D8e," (LED model)"),D8e.forEach(t),Scr=i(ye),uM=n(ye,"LI",{});var q8e=s(uM);bpe=n(q8e,"STRONG",{});var Cut=s(bpe);Pcr=r(Cut,"marian"),Cut.forEach(t),$cr=r(q8e," \u2014 "),EO=n(q8e,"A",{href:!0});var Mut=s(EO);Icr=r(Mut,"TFMarianMTModel"),Mut.forEach(t),jcr=r(q8e," (Marian model)"),q8e.forEach(t),Ncr=i(ye),pM=n(ye,"LI",{});var G8e=s(pM);vpe=n(G8e,"STRONG",{});var Eut=s(vpe);Dcr=r(Eut,"mbart"),Eut.forEach(t),qcr=r(G8e," \u2014 "),yO=n(G8e,"A",{href:!0});var yut=s(yO);Gcr=r(yut,"TFMBartForConditionalGeneration"),yut.forEach(t),Ocr=r(G8e," (mBART model)"),G8e.forEach(t),Xcr=i(ye),_M=n(ye,"LI",{});var O8e=s(_M);Tpe=n(O8e,"STRONG",{});var wut=s(Tpe);Vcr=r(wut,"mt5"),wut.forEach(t),zcr=r(O8e," \u2014 "),wO=n(O8e,"A",{href:!0});var Aut=s(wO);Wcr=r(Aut,"TFMT5ForConditionalGeneration"),Aut.forEach(t),Qcr=r(O8e," (mT5 model)"),O8e.forEach(t),Hcr=i(ye),bM=n(ye,"LI",{});var X8e=s(bM);Fpe=n(X8e,"STRONG",{});var Lut=s(Fpe);Ucr=r(Lut,"pegasus"),Lut.forEach(t),Jcr=r(X8e," \u2014 "),AO=n(X8e,"A",{href:!0});var But=s(AO);Ycr=r(But,"TFPegasusForConditionalGeneration"),But.forEach(t),Kcr=r(X8e," (Pegasus model)"),X8e.forEach(t),Zcr=i(ye),vM=n(ye,"LI",{});var V8e=s(vM);Cpe=n(V8e,"STRONG",{});var xut=s(Cpe);emr=r(xut,"t5"),xut.forEach(t),omr=r(V8e," \u2014 "),LO=n(V8e,"A",{href:!0});var kut=s(LO);rmr=r(kut,"TFT5ForConditionalGeneration"),kut.forEach(t),tmr=r(V8e," (T5 model)"),V8e.forEach(t),ye.forEach(t),amr=i(Ta),Mpe=n(Ta,"P",{});var Rut=s(Mpe);nmr=r(Rut,"Examples:"),Rut.forEach(t),smr=i(Ta),f(R0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),SRe=i(c),xc=n(c,"H2",{class:!0});var zPe=s(xc);TM=n(zPe,"A",{id:!0,class:!0,href:!0});var Sut=s(TM);Epe=n(Sut,"SPAN",{});var Put=s(Epe);f(S0.$$.fragment,Put),Put.forEach(t),Sut.forEach(t),lmr=i(zPe),ype=n(zPe,"SPAN",{});var $ut=s(ype);imr=r($ut,"TFAutoModelForSequenceClassification"),$ut.forEach(t),zPe.forEach(t),PRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);f(P0.$$.fragment,Yl),dmr=i(Yl),kc=n(Yl,"P",{});var iQ=s(kc);cmr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wpe=n(iQ,"CODE",{});var Iut=s(wpe);mmr=r(Iut,"from_pretrained()"),Iut.forEach(t),fmr=r(iQ,"class method or the "),Ape=n(iQ,"CODE",{});var jut=s(Ape);gmr=r(jut,"from_config()"),jut.forEach(t),hmr=r(iQ,`class
method.`),iQ.forEach(t),umr=i(Yl),$0=n(Yl,"P",{});var WPe=s($0);pmr=r(WPe,"This class cannot be instantiated directly using "),Lpe=n(WPe,"CODE",{});var Nut=s(Lpe);_mr=r(Nut,"__init__()"),Nut.forEach(t),bmr=r(WPe," (throws an error)."),WPe.forEach(t),vmr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);f(I0.$$.fragment,Kl),Tmr=i(Kl),Bpe=n(Kl,"P",{});var Dut=s(Bpe);Fmr=r(Dut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dut.forEach(t),Cmr=i(Kl),Rc=n(Kl,"P",{});var dQ=s(Rc);Mmr=r(dQ,`Note:
Loading a model from its configuration file does `),xpe=n(dQ,"STRONG",{});var qut=s(xpe);Emr=r(qut,"not"),qut.forEach(t),ymr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kpe=n(dQ,"CODE",{});var Gut=s(kpe);wmr=r(Gut,"from_pretrained()"),Gut.forEach(t),Amr=r(dQ,"to load the model weights."),dQ.forEach(t),Lmr=i(Kl),Rpe=n(Kl,"P",{});var Out=s(Rpe);Bmr=r(Out,"Examples:"),Out.forEach(t),xmr=i(Kl),f(j0.$$.fragment,Kl),Kl.forEach(t),kmr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);f(N0.$$.fragment,Fa),Rmr=i(Fa),Spe=n(Fa,"P",{});var Xut=s(Spe);Smr=r(Xut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Xut.forEach(t),Pmr=i(Fa),Cn=n(Fa,"P",{});var V5=s(Cn);$mr=r(V5,"The model class to instantiate is selected based on the "),Ppe=n(V5,"CODE",{});var Vut=s(Ppe);Imr=r(Vut,"model_type"),Vut.forEach(t),jmr=r(V5,` property of the config object (either
passed as an argument or loaded from `),$pe=n(V5,"CODE",{});var zut=s($pe);Nmr=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),Dmr=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(V5,"CODE",{});var Wut=s(Ipe);qmr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),Gmr=r(V5,":"),V5.forEach(t),Omr=i(Fa),X=n(Fa,"UL",{});var W=s(X);FM=n(W,"LI",{});var z8e=s(FM);jpe=n(z8e,"STRONG",{});var Qut=s(jpe);Xmr=r(Qut,"albert"),Qut.forEach(t),Vmr=r(z8e," \u2014 "),BO=n(z8e,"A",{href:!0});var Hut=s(BO);zmr=r(Hut,"TFAlbertForSequenceClassification"),Hut.forEach(t),Wmr=r(z8e," (ALBERT model)"),z8e.forEach(t),Qmr=i(W),CM=n(W,"LI",{});var W8e=s(CM);Npe=n(W8e,"STRONG",{});var Uut=s(Npe);Hmr=r(Uut,"bert"),Uut.forEach(t),Umr=r(W8e," \u2014 "),xO=n(W8e,"A",{href:!0});var Jut=s(xO);Jmr=r(Jut,"TFBertForSequenceClassification"),Jut.forEach(t),Ymr=r(W8e," (BERT model)"),W8e.forEach(t),Kmr=i(W),MM=n(W,"LI",{});var Q8e=s(MM);Dpe=n(Q8e,"STRONG",{});var Yut=s(Dpe);Zmr=r(Yut,"camembert"),Yut.forEach(t),efr=r(Q8e," \u2014 "),kO=n(Q8e,"A",{href:!0});var Kut=s(kO);ofr=r(Kut,"TFCamembertForSequenceClassification"),Kut.forEach(t),rfr=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),tfr=i(W),EM=n(W,"LI",{});var H8e=s(EM);qpe=n(H8e,"STRONG",{});var Zut=s(qpe);afr=r(Zut,"convbert"),Zut.forEach(t),nfr=r(H8e," \u2014 "),RO=n(H8e,"A",{href:!0});var ept=s(RO);sfr=r(ept,"TFConvBertForSequenceClassification"),ept.forEach(t),lfr=r(H8e," (ConvBERT model)"),H8e.forEach(t),ifr=i(W),yM=n(W,"LI",{});var U8e=s(yM);Gpe=n(U8e,"STRONG",{});var opt=s(Gpe);dfr=r(opt,"ctrl"),opt.forEach(t),cfr=r(U8e," \u2014 "),SO=n(U8e,"A",{href:!0});var rpt=s(SO);mfr=r(rpt,"TFCTRLForSequenceClassification"),rpt.forEach(t),ffr=r(U8e," (CTRL model)"),U8e.forEach(t),gfr=i(W),wM=n(W,"LI",{});var J8e=s(wM);Ope=n(J8e,"STRONG",{});var tpt=s(Ope);hfr=r(tpt,"deberta"),tpt.forEach(t),ufr=r(J8e," \u2014 "),PO=n(J8e,"A",{href:!0});var apt=s(PO);pfr=r(apt,"TFDebertaForSequenceClassification"),apt.forEach(t),_fr=r(J8e," (DeBERTa model)"),J8e.forEach(t),bfr=i(W),AM=n(W,"LI",{});var Y8e=s(AM);Xpe=n(Y8e,"STRONG",{});var npt=s(Xpe);vfr=r(npt,"deberta-v2"),npt.forEach(t),Tfr=r(Y8e," \u2014 "),$O=n(Y8e,"A",{href:!0});var spt=s($O);Ffr=r(spt,"TFDebertaV2ForSequenceClassification"),spt.forEach(t),Cfr=r(Y8e," (DeBERTa-v2 model)"),Y8e.forEach(t),Mfr=i(W),LM=n(W,"LI",{});var K8e=s(LM);Vpe=n(K8e,"STRONG",{});var lpt=s(Vpe);Efr=r(lpt,"distilbert"),lpt.forEach(t),yfr=r(K8e," \u2014 "),IO=n(K8e,"A",{href:!0});var ipt=s(IO);wfr=r(ipt,"TFDistilBertForSequenceClassification"),ipt.forEach(t),Afr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Lfr=i(W),BM=n(W,"LI",{});var Z8e=s(BM);zpe=n(Z8e,"STRONG",{});var dpt=s(zpe);Bfr=r(dpt,"electra"),dpt.forEach(t),xfr=r(Z8e," \u2014 "),jO=n(Z8e,"A",{href:!0});var cpt=s(jO);kfr=r(cpt,"TFElectraForSequenceClassification"),cpt.forEach(t),Rfr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),Sfr=i(W),xM=n(W,"LI",{});var e9e=s(xM);Wpe=n(e9e,"STRONG",{});var mpt=s(Wpe);Pfr=r(mpt,"flaubert"),mpt.forEach(t),$fr=r(e9e," \u2014 "),NO=n(e9e,"A",{href:!0});var fpt=s(NO);Ifr=r(fpt,"TFFlaubertForSequenceClassification"),fpt.forEach(t),jfr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Nfr=i(W),kM=n(W,"LI",{});var o9e=s(kM);Qpe=n(o9e,"STRONG",{});var gpt=s(Qpe);Dfr=r(gpt,"funnel"),gpt.forEach(t),qfr=r(o9e," \u2014 "),DO=n(o9e,"A",{href:!0});var hpt=s(DO);Gfr=r(hpt,"TFFunnelForSequenceClassification"),hpt.forEach(t),Ofr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),Xfr=i(W),RM=n(W,"LI",{});var r9e=s(RM);Hpe=n(r9e,"STRONG",{});var upt=s(Hpe);Vfr=r(upt,"gpt2"),upt.forEach(t),zfr=r(r9e," \u2014 "),qO=n(r9e,"A",{href:!0});var ppt=s(qO);Wfr=r(ppt,"TFGPT2ForSequenceClassification"),ppt.forEach(t),Qfr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Hfr=i(W),SM=n(W,"LI",{});var t9e=s(SM);Upe=n(t9e,"STRONG",{});var _pt=s(Upe);Ufr=r(_pt,"gptj"),_pt.forEach(t),Jfr=r(t9e," \u2014 "),GO=n(t9e,"A",{href:!0});var bpt=s(GO);Yfr=r(bpt,"TFGPTJForSequenceClassification"),bpt.forEach(t),Kfr=r(t9e," (GPT-J model)"),t9e.forEach(t),Zfr=i(W),PM=n(W,"LI",{});var a9e=s(PM);Jpe=n(a9e,"STRONG",{});var vpt=s(Jpe);egr=r(vpt,"layoutlm"),vpt.forEach(t),ogr=r(a9e," \u2014 "),OO=n(a9e,"A",{href:!0});var Tpt=s(OO);rgr=r(Tpt,"TFLayoutLMForSequenceClassification"),Tpt.forEach(t),tgr=r(a9e," (LayoutLM model)"),a9e.forEach(t),agr=i(W),$M=n(W,"LI",{});var n9e=s($M);Ype=n(n9e,"STRONG",{});var Fpt=s(Ype);ngr=r(Fpt,"longformer"),Fpt.forEach(t),sgr=r(n9e," \u2014 "),XO=n(n9e,"A",{href:!0});var Cpt=s(XO);lgr=r(Cpt,"TFLongformerForSequenceClassification"),Cpt.forEach(t),igr=r(n9e," (Longformer model)"),n9e.forEach(t),dgr=i(W),IM=n(W,"LI",{});var s9e=s(IM);Kpe=n(s9e,"STRONG",{});var Mpt=s(Kpe);cgr=r(Mpt,"mobilebert"),Mpt.forEach(t),mgr=r(s9e," \u2014 "),VO=n(s9e,"A",{href:!0});var Ept=s(VO);fgr=r(Ept,"TFMobileBertForSequenceClassification"),Ept.forEach(t),ggr=r(s9e," (MobileBERT model)"),s9e.forEach(t),hgr=i(W),jM=n(W,"LI",{});var l9e=s(jM);Zpe=n(l9e,"STRONG",{});var ypt=s(Zpe);ugr=r(ypt,"mpnet"),ypt.forEach(t),pgr=r(l9e," \u2014 "),zO=n(l9e,"A",{href:!0});var wpt=s(zO);_gr=r(wpt,"TFMPNetForSequenceClassification"),wpt.forEach(t),bgr=r(l9e," (MPNet model)"),l9e.forEach(t),vgr=i(W),NM=n(W,"LI",{});var i9e=s(NM);e_e=n(i9e,"STRONG",{});var Apt=s(e_e);Tgr=r(Apt,"openai-gpt"),Apt.forEach(t),Fgr=r(i9e," \u2014 "),WO=n(i9e,"A",{href:!0});var Lpt=s(WO);Cgr=r(Lpt,"TFOpenAIGPTForSequenceClassification"),Lpt.forEach(t),Mgr=r(i9e," (OpenAI GPT model)"),i9e.forEach(t),Egr=i(W),DM=n(W,"LI",{});var d9e=s(DM);o_e=n(d9e,"STRONG",{});var Bpt=s(o_e);ygr=r(Bpt,"rembert"),Bpt.forEach(t),wgr=r(d9e," \u2014 "),QO=n(d9e,"A",{href:!0});var xpt=s(QO);Agr=r(xpt,"TFRemBertForSequenceClassification"),xpt.forEach(t),Lgr=r(d9e," (RemBERT model)"),d9e.forEach(t),Bgr=i(W),qM=n(W,"LI",{});var c9e=s(qM);r_e=n(c9e,"STRONG",{});var kpt=s(r_e);xgr=r(kpt,"roberta"),kpt.forEach(t),kgr=r(c9e," \u2014 "),HO=n(c9e,"A",{href:!0});var Rpt=s(HO);Rgr=r(Rpt,"TFRobertaForSequenceClassification"),Rpt.forEach(t),Sgr=r(c9e," (RoBERTa model)"),c9e.forEach(t),Pgr=i(W),GM=n(W,"LI",{});var m9e=s(GM);t_e=n(m9e,"STRONG",{});var Spt=s(t_e);$gr=r(Spt,"roformer"),Spt.forEach(t),Igr=r(m9e," \u2014 "),UO=n(m9e,"A",{href:!0});var Ppt=s(UO);jgr=r(Ppt,"TFRoFormerForSequenceClassification"),Ppt.forEach(t),Ngr=r(m9e," (RoFormer model)"),m9e.forEach(t),Dgr=i(W),OM=n(W,"LI",{});var f9e=s(OM);a_e=n(f9e,"STRONG",{});var $pt=s(a_e);qgr=r($pt,"tapas"),$pt.forEach(t),Ggr=r(f9e," \u2014 "),JO=n(f9e,"A",{href:!0});var Ipt=s(JO);Ogr=r(Ipt,"TFTapasForSequenceClassification"),Ipt.forEach(t),Xgr=r(f9e," (TAPAS model)"),f9e.forEach(t),Vgr=i(W),XM=n(W,"LI",{});var g9e=s(XM);n_e=n(g9e,"STRONG",{});var jpt=s(n_e);zgr=r(jpt,"transfo-xl"),jpt.forEach(t),Wgr=r(g9e," \u2014 "),YO=n(g9e,"A",{href:!0});var Npt=s(YO);Qgr=r(Npt,"TFTransfoXLForSequenceClassification"),Npt.forEach(t),Hgr=r(g9e," (Transformer-XL model)"),g9e.forEach(t),Ugr=i(W),VM=n(W,"LI",{});var h9e=s(VM);s_e=n(h9e,"STRONG",{});var Dpt=s(s_e);Jgr=r(Dpt,"xlm"),Dpt.forEach(t),Ygr=r(h9e," \u2014 "),KO=n(h9e,"A",{href:!0});var qpt=s(KO);Kgr=r(qpt,"TFXLMForSequenceClassification"),qpt.forEach(t),Zgr=r(h9e," (XLM model)"),h9e.forEach(t),ehr=i(W),zM=n(W,"LI",{});var u9e=s(zM);l_e=n(u9e,"STRONG",{});var Gpt=s(l_e);ohr=r(Gpt,"xlm-roberta"),Gpt.forEach(t),rhr=r(u9e," \u2014 "),ZO=n(u9e,"A",{href:!0});var Opt=s(ZO);thr=r(Opt,"TFXLMRobertaForSequenceClassification"),Opt.forEach(t),ahr=r(u9e," (XLM-RoBERTa model)"),u9e.forEach(t),nhr=i(W),WM=n(W,"LI",{});var p9e=s(WM);i_e=n(p9e,"STRONG",{});var Xpt=s(i_e);shr=r(Xpt,"xlnet"),Xpt.forEach(t),lhr=r(p9e," \u2014 "),eX=n(p9e,"A",{href:!0});var Vpt=s(eX);ihr=r(Vpt,"TFXLNetForSequenceClassification"),Vpt.forEach(t),dhr=r(p9e," (XLNet model)"),p9e.forEach(t),W.forEach(t),chr=i(Fa),d_e=n(Fa,"P",{});var zpt=s(d_e);mhr=r(zpt,"Examples:"),zpt.forEach(t),fhr=i(Fa),f(D0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),$Re=i(c),Sc=n(c,"H2",{class:!0});var QPe=s(Sc);QM=n(QPe,"A",{id:!0,class:!0,href:!0});var Wpt=s(QM);c_e=n(Wpt,"SPAN",{});var Qpt=s(c_e);f(q0.$$.fragment,Qpt),Qpt.forEach(t),Wpt.forEach(t),ghr=i(QPe),m_e=n(QPe,"SPAN",{});var Hpt=s(m_e);hhr=r(Hpt,"TFAutoModelForMultipleChoice"),Hpt.forEach(t),QPe.forEach(t),IRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);f(G0.$$.fragment,Zl),uhr=i(Zl),Pc=n(Zl,"P",{});var cQ=s(Pc);phr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),f_e=n(cQ,"CODE",{});var Upt=s(f_e);_hr=r(Upt,"from_pretrained()"),Upt.forEach(t),bhr=r(cQ,"class method or the "),g_e=n(cQ,"CODE",{});var Jpt=s(g_e);vhr=r(Jpt,"from_config()"),Jpt.forEach(t),Thr=r(cQ,`class
method.`),cQ.forEach(t),Fhr=i(Zl),O0=n(Zl,"P",{});var HPe=s(O0);Chr=r(HPe,"This class cannot be instantiated directly using "),h_e=n(HPe,"CODE",{});var Ypt=s(h_e);Mhr=r(Ypt,"__init__()"),Ypt.forEach(t),Ehr=r(HPe," (throws an error)."),HPe.forEach(t),yhr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);f(X0.$$.fragment,ei),whr=i(ei),u_e=n(ei,"P",{});var Kpt=s(u_e);Ahr=r(Kpt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kpt.forEach(t),Lhr=i(ei),$c=n(ei,"P",{});var mQ=s($c);Bhr=r(mQ,`Note:
Loading a model from its configuration file does `),p_e=n(mQ,"STRONG",{});var Zpt=s(p_e);xhr=r(Zpt,"not"),Zpt.forEach(t),khr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=n(mQ,"CODE",{});var e_t=s(__e);Rhr=r(e_t,"from_pretrained()"),e_t.forEach(t),Shr=r(mQ,"to load the model weights."),mQ.forEach(t),Phr=i(ei),b_e=n(ei,"P",{});var o_t=s(b_e);$hr=r(o_t,"Examples:"),o_t.forEach(t),Ihr=i(ei),f(V0.$$.fragment,ei),ei.forEach(t),jhr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);f(z0.$$.fragment,Ca),Nhr=i(Ca),v_e=n(Ca,"P",{});var r_t=s(v_e);Dhr=r(r_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),r_t.forEach(t),qhr=i(Ca),Mn=n(Ca,"P",{});var z5=s(Mn);Ghr=r(z5,"The model class to instantiate is selected based on the "),T_e=n(z5,"CODE",{});var t_t=s(T_e);Ohr=r(t_t,"model_type"),t_t.forEach(t),Xhr=r(z5,` property of the config object (either
passed as an argument or loaded from `),F_e=n(z5,"CODE",{});var a_t=s(F_e);Vhr=r(a_t,"pretrained_model_name_or_path"),a_t.forEach(t),zhr=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(z5,"CODE",{});var n_t=s(C_e);Whr=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),Qhr=r(z5,":"),z5.forEach(t),Hhr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);HM=n(le,"LI",{});var _9e=s(HM);M_e=n(_9e,"STRONG",{});var s_t=s(M_e);Uhr=r(s_t,"albert"),s_t.forEach(t),Jhr=r(_9e," \u2014 "),oX=n(_9e,"A",{href:!0});var l_t=s(oX);Yhr=r(l_t,"TFAlbertForMultipleChoice"),l_t.forEach(t),Khr=r(_9e," (ALBERT model)"),_9e.forEach(t),Zhr=i(le),UM=n(le,"LI",{});var b9e=s(UM);E_e=n(b9e,"STRONG",{});var i_t=s(E_e);eur=r(i_t,"bert"),i_t.forEach(t),our=r(b9e," \u2014 "),rX=n(b9e,"A",{href:!0});var d_t=s(rX);rur=r(d_t,"TFBertForMultipleChoice"),d_t.forEach(t),tur=r(b9e," (BERT model)"),b9e.forEach(t),aur=i(le),JM=n(le,"LI",{});var v9e=s(JM);y_e=n(v9e,"STRONG",{});var c_t=s(y_e);nur=r(c_t,"camembert"),c_t.forEach(t),sur=r(v9e," \u2014 "),tX=n(v9e,"A",{href:!0});var m_t=s(tX);lur=r(m_t,"TFCamembertForMultipleChoice"),m_t.forEach(t),iur=r(v9e," (CamemBERT model)"),v9e.forEach(t),dur=i(le),YM=n(le,"LI",{});var T9e=s(YM);w_e=n(T9e,"STRONG",{});var f_t=s(w_e);cur=r(f_t,"convbert"),f_t.forEach(t),mur=r(T9e," \u2014 "),aX=n(T9e,"A",{href:!0});var g_t=s(aX);fur=r(g_t,"TFConvBertForMultipleChoice"),g_t.forEach(t),gur=r(T9e," (ConvBERT model)"),T9e.forEach(t),hur=i(le),KM=n(le,"LI",{});var F9e=s(KM);A_e=n(F9e,"STRONG",{});var h_t=s(A_e);uur=r(h_t,"distilbert"),h_t.forEach(t),pur=r(F9e," \u2014 "),nX=n(F9e,"A",{href:!0});var u_t=s(nX);_ur=r(u_t,"TFDistilBertForMultipleChoice"),u_t.forEach(t),bur=r(F9e," (DistilBERT model)"),F9e.forEach(t),vur=i(le),ZM=n(le,"LI",{});var C9e=s(ZM);L_e=n(C9e,"STRONG",{});var p_t=s(L_e);Tur=r(p_t,"electra"),p_t.forEach(t),Fur=r(C9e," \u2014 "),sX=n(C9e,"A",{href:!0});var __t=s(sX);Cur=r(__t,"TFElectraForMultipleChoice"),__t.forEach(t),Mur=r(C9e," (ELECTRA model)"),C9e.forEach(t),Eur=i(le),e4=n(le,"LI",{});var M9e=s(e4);B_e=n(M9e,"STRONG",{});var b_t=s(B_e);yur=r(b_t,"flaubert"),b_t.forEach(t),wur=r(M9e," \u2014 "),lX=n(M9e,"A",{href:!0});var v_t=s(lX);Aur=r(v_t,"TFFlaubertForMultipleChoice"),v_t.forEach(t),Lur=r(M9e," (FlauBERT model)"),M9e.forEach(t),Bur=i(le),o4=n(le,"LI",{});var E9e=s(o4);x_e=n(E9e,"STRONG",{});var T_t=s(x_e);xur=r(T_t,"funnel"),T_t.forEach(t),kur=r(E9e," \u2014 "),iX=n(E9e,"A",{href:!0});var F_t=s(iX);Rur=r(F_t,"TFFunnelForMultipleChoice"),F_t.forEach(t),Sur=r(E9e," (Funnel Transformer model)"),E9e.forEach(t),Pur=i(le),r4=n(le,"LI",{});var y9e=s(r4);k_e=n(y9e,"STRONG",{});var C_t=s(k_e);$ur=r(C_t,"longformer"),C_t.forEach(t),Iur=r(y9e," \u2014 "),dX=n(y9e,"A",{href:!0});var M_t=s(dX);jur=r(M_t,"TFLongformerForMultipleChoice"),M_t.forEach(t),Nur=r(y9e," (Longformer model)"),y9e.forEach(t),Dur=i(le),t4=n(le,"LI",{});var w9e=s(t4);R_e=n(w9e,"STRONG",{});var E_t=s(R_e);qur=r(E_t,"mobilebert"),E_t.forEach(t),Gur=r(w9e," \u2014 "),cX=n(w9e,"A",{href:!0});var y_t=s(cX);Our=r(y_t,"TFMobileBertForMultipleChoice"),y_t.forEach(t),Xur=r(w9e," (MobileBERT model)"),w9e.forEach(t),Vur=i(le),a4=n(le,"LI",{});var A9e=s(a4);S_e=n(A9e,"STRONG",{});var w_t=s(S_e);zur=r(w_t,"mpnet"),w_t.forEach(t),Wur=r(A9e," \u2014 "),mX=n(A9e,"A",{href:!0});var A_t=s(mX);Qur=r(A_t,"TFMPNetForMultipleChoice"),A_t.forEach(t),Hur=r(A9e," (MPNet model)"),A9e.forEach(t),Uur=i(le),n4=n(le,"LI",{});var L9e=s(n4);P_e=n(L9e,"STRONG",{});var L_t=s(P_e);Jur=r(L_t,"rembert"),L_t.forEach(t),Yur=r(L9e," \u2014 "),fX=n(L9e,"A",{href:!0});var B_t=s(fX);Kur=r(B_t,"TFRemBertForMultipleChoice"),B_t.forEach(t),Zur=r(L9e," (RemBERT model)"),L9e.forEach(t),epr=i(le),s4=n(le,"LI",{});var B9e=s(s4);$_e=n(B9e,"STRONG",{});var x_t=s($_e);opr=r(x_t,"roberta"),x_t.forEach(t),rpr=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var k_t=s(gX);tpr=r(k_t,"TFRobertaForMultipleChoice"),k_t.forEach(t),apr=r(B9e," (RoBERTa model)"),B9e.forEach(t),npr=i(le),l4=n(le,"LI",{});var x9e=s(l4);I_e=n(x9e,"STRONG",{});var R_t=s(I_e);spr=r(R_t,"roformer"),R_t.forEach(t),lpr=r(x9e," \u2014 "),hX=n(x9e,"A",{href:!0});var S_t=s(hX);ipr=r(S_t,"TFRoFormerForMultipleChoice"),S_t.forEach(t),dpr=r(x9e," (RoFormer model)"),x9e.forEach(t),cpr=i(le),i4=n(le,"LI",{});var k9e=s(i4);j_e=n(k9e,"STRONG",{});var P_t=s(j_e);mpr=r(P_t,"xlm"),P_t.forEach(t),fpr=r(k9e," \u2014 "),uX=n(k9e,"A",{href:!0});var $_t=s(uX);gpr=r($_t,"TFXLMForMultipleChoice"),$_t.forEach(t),hpr=r(k9e," (XLM model)"),k9e.forEach(t),upr=i(le),d4=n(le,"LI",{});var R9e=s(d4);N_e=n(R9e,"STRONG",{});var I_t=s(N_e);ppr=r(I_t,"xlm-roberta"),I_t.forEach(t),_pr=r(R9e," \u2014 "),pX=n(R9e,"A",{href:!0});var j_t=s(pX);bpr=r(j_t,"TFXLMRobertaForMultipleChoice"),j_t.forEach(t),vpr=r(R9e," (XLM-RoBERTa model)"),R9e.forEach(t),Tpr=i(le),c4=n(le,"LI",{});var S9e=s(c4);D_e=n(S9e,"STRONG",{});var N_t=s(D_e);Fpr=r(N_t,"xlnet"),N_t.forEach(t),Cpr=r(S9e," \u2014 "),_X=n(S9e,"A",{href:!0});var D_t=s(_X);Mpr=r(D_t,"TFXLNetForMultipleChoice"),D_t.forEach(t),Epr=r(S9e," (XLNet model)"),S9e.forEach(t),le.forEach(t),ypr=i(Ca),q_e=n(Ca,"P",{});var q_t=s(q_e);wpr=r(q_t,"Examples:"),q_t.forEach(t),Apr=i(Ca),f(W0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),jRe=i(c),Ic=n(c,"H2",{class:!0});var UPe=s(Ic);m4=n(UPe,"A",{id:!0,class:!0,href:!0});var G_t=s(m4);G_e=n(G_t,"SPAN",{});var O_t=s(G_e);f(Q0.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),Lpr=i(UPe),O_e=n(UPe,"SPAN",{});var X_t=s(O_e);Bpr=r(X_t,"TFAutoModelForTableQuestionAnswering"),X_t.forEach(t),UPe.forEach(t),NRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);f(H0.$$.fragment,oi),xpr=i(oi),jc=n(oi,"P",{});var fQ=s(jc);kpr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),X_e=n(fQ,"CODE",{});var V_t=s(X_e);Rpr=r(V_t,"from_pretrained()"),V_t.forEach(t),Spr=r(fQ,"class method or the "),V_e=n(fQ,"CODE",{});var z_t=s(V_e);Ppr=r(z_t,"from_config()"),z_t.forEach(t),$pr=r(fQ,`class
method.`),fQ.forEach(t),Ipr=i(oi),U0=n(oi,"P",{});var JPe=s(U0);jpr=r(JPe,"This class cannot be instantiated directly using "),z_e=n(JPe,"CODE",{});var W_t=s(z_e);Npr=r(W_t,"__init__()"),W_t.forEach(t),Dpr=r(JPe," (throws an error)."),JPe.forEach(t),qpr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);f(J0.$$.fragment,ri),Gpr=i(ri),W_e=n(ri,"P",{});var Q_t=s(W_e);Opr=r(Q_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q_t.forEach(t),Xpr=i(ri),Nc=n(ri,"P",{});var gQ=s(Nc);Vpr=r(gQ,`Note:
Loading a model from its configuration file does `),Q_e=n(gQ,"STRONG",{});var H_t=s(Q_e);zpr=r(H_t,"not"),H_t.forEach(t),Wpr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),H_e=n(gQ,"CODE",{});var U_t=s(H_e);Qpr=r(U_t,"from_pretrained()"),U_t.forEach(t),Hpr=r(gQ,"to load the model weights."),gQ.forEach(t),Upr=i(ri),U_e=n(ri,"P",{});var J_t=s(U_e);Jpr=r(J_t,"Examples:"),J_t.forEach(t),Ypr=i(ri),f(Y0.$$.fragment,ri),ri.forEach(t),Kpr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);f(K0.$$.fragment,Ma),Zpr=i(Ma),J_e=n(Ma,"P",{});var Y_t=s(J_e);e_r=r(Y_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y_t.forEach(t),o_r=i(Ma),En=n(Ma,"P",{});var W5=s(En);r_r=r(W5,"The model class to instantiate is selected based on the "),Y_e=n(W5,"CODE",{});var K_t=s(Y_e);t_r=r(K_t,"model_type"),K_t.forEach(t),a_r=r(W5,` property of the config object (either
passed as an argument or loaded from `),K_e=n(W5,"CODE",{});var Z_t=s(K_e);n_r=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),s_r=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(W5,"CODE",{});var ebt=s(Z_e);l_r=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),i_r=r(W5,":"),W5.forEach(t),d_r=i(Ma),ebe=n(Ma,"UL",{});var obt=s(ebe);f4=n(obt,"LI",{});var P9e=s(f4);obe=n(P9e,"STRONG",{});var rbt=s(obe);c_r=r(rbt,"tapas"),rbt.forEach(t),m_r=r(P9e," \u2014 "),bX=n(P9e,"A",{href:!0});var tbt=s(bX);f_r=r(tbt,"TFTapasForQuestionAnswering"),tbt.forEach(t),g_r=r(P9e," (TAPAS model)"),P9e.forEach(t),obt.forEach(t),h_r=i(Ma),rbe=n(Ma,"P",{});var abt=s(rbe);u_r=r(abt,"Examples:"),abt.forEach(t),p_r=i(Ma),f(Z0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),DRe=i(c),Dc=n(c,"H2",{class:!0});var YPe=s(Dc);g4=n(YPe,"A",{id:!0,class:!0,href:!0});var nbt=s(g4);tbe=n(nbt,"SPAN",{});var sbt=s(tbe);f(eL.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),__r=i(YPe),abe=n(YPe,"SPAN",{});var lbt=s(abe);b_r=r(lbt,"TFAutoModelForTokenClassification"),lbt.forEach(t),YPe.forEach(t),qRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);f(oL.$$.fragment,ti),v_r=i(ti),qc=n(ti,"P",{});var hQ=s(qc);T_r=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nbe=n(hQ,"CODE",{});var ibt=s(nbe);F_r=r(ibt,"from_pretrained()"),ibt.forEach(t),C_r=r(hQ,"class method or the "),sbe=n(hQ,"CODE",{});var dbt=s(sbe);M_r=r(dbt,"from_config()"),dbt.forEach(t),E_r=r(hQ,`class
method.`),hQ.forEach(t),y_r=i(ti),rL=n(ti,"P",{});var KPe=s(rL);w_r=r(KPe,"This class cannot be instantiated directly using "),lbe=n(KPe,"CODE",{});var cbt=s(lbe);A_r=r(cbt,"__init__()"),cbt.forEach(t),L_r=r(KPe," (throws an error)."),KPe.forEach(t),B_r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);f(tL.$$.fragment,ai),x_r=i(ai),ibe=n(ai,"P",{});var mbt=s(ibe);k_r=r(mbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mbt.forEach(t),R_r=i(ai),Gc=n(ai,"P",{});var uQ=s(Gc);S_r=r(uQ,`Note:
Loading a model from its configuration file does `),dbe=n(uQ,"STRONG",{});var fbt=s(dbe);P_r=r(fbt,"not"),fbt.forEach(t),$_r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cbe=n(uQ,"CODE",{});var gbt=s(cbe);I_r=r(gbt,"from_pretrained()"),gbt.forEach(t),j_r=r(uQ,"to load the model weights."),uQ.forEach(t),N_r=i(ai),mbe=n(ai,"P",{});var hbt=s(mbe);D_r=r(hbt,"Examples:"),hbt.forEach(t),q_r=i(ai),f(aL.$$.fragment,ai),ai.forEach(t),G_r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);f(nL.$$.fragment,Ea),O_r=i(Ea),fbe=n(Ea,"P",{});var ubt=s(fbe);X_r=r(ubt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ubt.forEach(t),V_r=i(Ea),yn=n(Ea,"P",{});var Q5=s(yn);z_r=r(Q5,"The model class to instantiate is selected based on the "),gbe=n(Q5,"CODE",{});var pbt=s(gbe);W_r=r(pbt,"model_type"),pbt.forEach(t),Q_r=r(Q5,` property of the config object (either
passed as an argument or loaded from `),hbe=n(Q5,"CODE",{});var _bt=s(hbe);H_r=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),U_r=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(Q5,"CODE",{});var bbt=s(ube);J_r=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),Y_r=r(Q5,":"),Q5.forEach(t),K_r=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);h4=n(oe,"LI",{});var $9e=s(h4);pbe=n($9e,"STRONG",{});var vbt=s(pbe);Z_r=r(vbt,"albert"),vbt.forEach(t),ebr=r($9e," \u2014 "),vX=n($9e,"A",{href:!0});var Tbt=s(vX);obr=r(Tbt,"TFAlbertForTokenClassification"),Tbt.forEach(t),rbr=r($9e," (ALBERT model)"),$9e.forEach(t),tbr=i(oe),u4=n(oe,"LI",{});var I9e=s(u4);_be=n(I9e,"STRONG",{});var Fbt=s(_be);abr=r(Fbt,"bert"),Fbt.forEach(t),nbr=r(I9e," \u2014 "),TX=n(I9e,"A",{href:!0});var Cbt=s(TX);sbr=r(Cbt,"TFBertForTokenClassification"),Cbt.forEach(t),lbr=r(I9e," (BERT model)"),I9e.forEach(t),ibr=i(oe),p4=n(oe,"LI",{});var j9e=s(p4);bbe=n(j9e,"STRONG",{});var Mbt=s(bbe);dbr=r(Mbt,"camembert"),Mbt.forEach(t),cbr=r(j9e," \u2014 "),FX=n(j9e,"A",{href:!0});var Ebt=s(FX);mbr=r(Ebt,"TFCamembertForTokenClassification"),Ebt.forEach(t),fbr=r(j9e," (CamemBERT model)"),j9e.forEach(t),gbr=i(oe),_4=n(oe,"LI",{});var N9e=s(_4);vbe=n(N9e,"STRONG",{});var ybt=s(vbe);hbr=r(ybt,"convbert"),ybt.forEach(t),ubr=r(N9e," \u2014 "),CX=n(N9e,"A",{href:!0});var wbt=s(CX);pbr=r(wbt,"TFConvBertForTokenClassification"),wbt.forEach(t),_br=r(N9e," (ConvBERT model)"),N9e.forEach(t),bbr=i(oe),b4=n(oe,"LI",{});var D9e=s(b4);Tbe=n(D9e,"STRONG",{});var Abt=s(Tbe);vbr=r(Abt,"deberta"),Abt.forEach(t),Tbr=r(D9e," \u2014 "),MX=n(D9e,"A",{href:!0});var Lbt=s(MX);Fbr=r(Lbt,"TFDebertaForTokenClassification"),Lbt.forEach(t),Cbr=r(D9e," (DeBERTa model)"),D9e.forEach(t),Mbr=i(oe),v4=n(oe,"LI",{});var q9e=s(v4);Fbe=n(q9e,"STRONG",{});var Bbt=s(Fbe);Ebr=r(Bbt,"deberta-v2"),Bbt.forEach(t),ybr=r(q9e," \u2014 "),EX=n(q9e,"A",{href:!0});var xbt=s(EX);wbr=r(xbt,"TFDebertaV2ForTokenClassification"),xbt.forEach(t),Abr=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),Lbr=i(oe),T4=n(oe,"LI",{});var G9e=s(T4);Cbe=n(G9e,"STRONG",{});var kbt=s(Cbe);Bbr=r(kbt,"distilbert"),kbt.forEach(t),xbr=r(G9e," \u2014 "),yX=n(G9e,"A",{href:!0});var Rbt=s(yX);kbr=r(Rbt,"TFDistilBertForTokenClassification"),Rbt.forEach(t),Rbr=r(G9e," (DistilBERT model)"),G9e.forEach(t),Sbr=i(oe),F4=n(oe,"LI",{});var O9e=s(F4);Mbe=n(O9e,"STRONG",{});var Sbt=s(Mbe);Pbr=r(Sbt,"electra"),Sbt.forEach(t),$br=r(O9e," \u2014 "),wX=n(O9e,"A",{href:!0});var Pbt=s(wX);Ibr=r(Pbt,"TFElectraForTokenClassification"),Pbt.forEach(t),jbr=r(O9e," (ELECTRA model)"),O9e.forEach(t),Nbr=i(oe),C4=n(oe,"LI",{});var X9e=s(C4);Ebe=n(X9e,"STRONG",{});var $bt=s(Ebe);Dbr=r($bt,"flaubert"),$bt.forEach(t),qbr=r(X9e," \u2014 "),AX=n(X9e,"A",{href:!0});var Ibt=s(AX);Gbr=r(Ibt,"TFFlaubertForTokenClassification"),Ibt.forEach(t),Obr=r(X9e," (FlauBERT model)"),X9e.forEach(t),Xbr=i(oe),M4=n(oe,"LI",{});var V9e=s(M4);ybe=n(V9e,"STRONG",{});var jbt=s(ybe);Vbr=r(jbt,"funnel"),jbt.forEach(t),zbr=r(V9e," \u2014 "),LX=n(V9e,"A",{href:!0});var Nbt=s(LX);Wbr=r(Nbt,"TFFunnelForTokenClassification"),Nbt.forEach(t),Qbr=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),Hbr=i(oe),E4=n(oe,"LI",{});var z9e=s(E4);wbe=n(z9e,"STRONG",{});var Dbt=s(wbe);Ubr=r(Dbt,"layoutlm"),Dbt.forEach(t),Jbr=r(z9e," \u2014 "),BX=n(z9e,"A",{href:!0});var qbt=s(BX);Ybr=r(qbt,"TFLayoutLMForTokenClassification"),qbt.forEach(t),Kbr=r(z9e," (LayoutLM model)"),z9e.forEach(t),Zbr=i(oe),y4=n(oe,"LI",{});var W9e=s(y4);Abe=n(W9e,"STRONG",{});var Gbt=s(Abe);e2r=r(Gbt,"longformer"),Gbt.forEach(t),o2r=r(W9e," \u2014 "),xX=n(W9e,"A",{href:!0});var Obt=s(xX);r2r=r(Obt,"TFLongformerForTokenClassification"),Obt.forEach(t),t2r=r(W9e," (Longformer model)"),W9e.forEach(t),a2r=i(oe),w4=n(oe,"LI",{});var Q9e=s(w4);Lbe=n(Q9e,"STRONG",{});var Xbt=s(Lbe);n2r=r(Xbt,"mobilebert"),Xbt.forEach(t),s2r=r(Q9e," \u2014 "),kX=n(Q9e,"A",{href:!0});var Vbt=s(kX);l2r=r(Vbt,"TFMobileBertForTokenClassification"),Vbt.forEach(t),i2r=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),d2r=i(oe),A4=n(oe,"LI",{});var H9e=s(A4);Bbe=n(H9e,"STRONG",{});var zbt=s(Bbe);c2r=r(zbt,"mpnet"),zbt.forEach(t),m2r=r(H9e," \u2014 "),RX=n(H9e,"A",{href:!0});var Wbt=s(RX);f2r=r(Wbt,"TFMPNetForTokenClassification"),Wbt.forEach(t),g2r=r(H9e," (MPNet model)"),H9e.forEach(t),h2r=i(oe),L4=n(oe,"LI",{});var U9e=s(L4);xbe=n(U9e,"STRONG",{});var Qbt=s(xbe);u2r=r(Qbt,"rembert"),Qbt.forEach(t),p2r=r(U9e," \u2014 "),SX=n(U9e,"A",{href:!0});var Hbt=s(SX);_2r=r(Hbt,"TFRemBertForTokenClassification"),Hbt.forEach(t),b2r=r(U9e," (RemBERT model)"),U9e.forEach(t),v2r=i(oe),B4=n(oe,"LI",{});var J9e=s(B4);kbe=n(J9e,"STRONG",{});var Ubt=s(kbe);T2r=r(Ubt,"roberta"),Ubt.forEach(t),F2r=r(J9e," \u2014 "),PX=n(J9e,"A",{href:!0});var Jbt=s(PX);C2r=r(Jbt,"TFRobertaForTokenClassification"),Jbt.forEach(t),M2r=r(J9e," (RoBERTa model)"),J9e.forEach(t),E2r=i(oe),x4=n(oe,"LI",{});var Y9e=s(x4);Rbe=n(Y9e,"STRONG",{});var Ybt=s(Rbe);y2r=r(Ybt,"roformer"),Ybt.forEach(t),w2r=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var Kbt=s($X);A2r=r(Kbt,"TFRoFormerForTokenClassification"),Kbt.forEach(t),L2r=r(Y9e," (RoFormer model)"),Y9e.forEach(t),B2r=i(oe),k4=n(oe,"LI",{});var K9e=s(k4);Sbe=n(K9e,"STRONG",{});var Zbt=s(Sbe);x2r=r(Zbt,"xlm"),Zbt.forEach(t),k2r=r(K9e," \u2014 "),IX=n(K9e,"A",{href:!0});var e2t=s(IX);R2r=r(e2t,"TFXLMForTokenClassification"),e2t.forEach(t),S2r=r(K9e," (XLM model)"),K9e.forEach(t),P2r=i(oe),R4=n(oe,"LI",{});var Z9e=s(R4);Pbe=n(Z9e,"STRONG",{});var o2t=s(Pbe);$2r=r(o2t,"xlm-roberta"),o2t.forEach(t),I2r=r(Z9e," \u2014 "),jX=n(Z9e,"A",{href:!0});var r2t=s(jX);j2r=r(r2t,"TFXLMRobertaForTokenClassification"),r2t.forEach(t),N2r=r(Z9e," (XLM-RoBERTa model)"),Z9e.forEach(t),D2r=i(oe),S4=n(oe,"LI",{});var eBe=s(S4);$be=n(eBe,"STRONG",{});var t2t=s($be);q2r=r(t2t,"xlnet"),t2t.forEach(t),G2r=r(eBe," \u2014 "),NX=n(eBe,"A",{href:!0});var a2t=s(NX);O2r=r(a2t,"TFXLNetForTokenClassification"),a2t.forEach(t),X2r=r(eBe," (XLNet model)"),eBe.forEach(t),oe.forEach(t),V2r=i(Ea),Ibe=n(Ea,"P",{});var n2t=s(Ibe);z2r=r(n2t,"Examples:"),n2t.forEach(t),W2r=i(Ea),f(sL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),GRe=i(c),Oc=n(c,"H2",{class:!0});var ZPe=s(Oc);P4=n(ZPe,"A",{id:!0,class:!0,href:!0});var s2t=s(P4);jbe=n(s2t,"SPAN",{});var l2t=s(jbe);f(lL.$$.fragment,l2t),l2t.forEach(t),s2t.forEach(t),Q2r=i(ZPe),Nbe=n(ZPe,"SPAN",{});var i2t=s(Nbe);H2r=r(i2t,"TFAutoModelForQuestionAnswering"),i2t.forEach(t),ZPe.forEach(t),ORe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);f(iL.$$.fragment,ni),U2r=i(ni),Xc=n(ni,"P",{});var pQ=s(Xc);J2r=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dbe=n(pQ,"CODE",{});var d2t=s(Dbe);Y2r=r(d2t,"from_pretrained()"),d2t.forEach(t),K2r=r(pQ,"class method or the "),qbe=n(pQ,"CODE",{});var c2t=s(qbe);Z2r=r(c2t,"from_config()"),c2t.forEach(t),evr=r(pQ,`class
method.`),pQ.forEach(t),ovr=i(ni),dL=n(ni,"P",{});var e$e=s(dL);rvr=r(e$e,"This class cannot be instantiated directly using "),Gbe=n(e$e,"CODE",{});var m2t=s(Gbe);tvr=r(m2t,"__init__()"),m2t.forEach(t),avr=r(e$e," (throws an error)."),e$e.forEach(t),nvr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);f(cL.$$.fragment,si),svr=i(si),Obe=n(si,"P",{});var f2t=s(Obe);lvr=r(f2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f2t.forEach(t),ivr=i(si),Vc=n(si,"P",{});var _Q=s(Vc);dvr=r(_Q,`Note:
Loading a model from its configuration file does `),Xbe=n(_Q,"STRONG",{});var g2t=s(Xbe);cvr=r(g2t,"not"),g2t.forEach(t),mvr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vbe=n(_Q,"CODE",{});var h2t=s(Vbe);fvr=r(h2t,"from_pretrained()"),h2t.forEach(t),gvr=r(_Q,"to load the model weights."),_Q.forEach(t),hvr=i(si),zbe=n(si,"P",{});var u2t=s(zbe);uvr=r(u2t,"Examples:"),u2t.forEach(t),pvr=i(si),f(mL.$$.fragment,si),si.forEach(t),_vr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);f(fL.$$.fragment,ya),bvr=i(ya),Wbe=n(ya,"P",{});var p2t=s(Wbe);vvr=r(p2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p2t.forEach(t),Tvr=i(ya),wn=n(ya,"P",{});var H5=s(wn);Fvr=r(H5,"The model class to instantiate is selected based on the "),Qbe=n(H5,"CODE",{});var _2t=s(Qbe);Cvr=r(_2t,"model_type"),_2t.forEach(t),Mvr=r(H5,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(H5,"CODE",{});var b2t=s(Hbe);Evr=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),yvr=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(H5,"CODE",{});var v2t=s(Ube);wvr=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),Avr=r(H5,":"),H5.forEach(t),Lvr=i(ya),K=n(ya,"UL",{});var re=s(K);$4=n(re,"LI",{});var oBe=s($4);Jbe=n(oBe,"STRONG",{});var T2t=s(Jbe);Bvr=r(T2t,"albert"),T2t.forEach(t),xvr=r(oBe," \u2014 "),DX=n(oBe,"A",{href:!0});var F2t=s(DX);kvr=r(F2t,"TFAlbertForQuestionAnswering"),F2t.forEach(t),Rvr=r(oBe," (ALBERT model)"),oBe.forEach(t),Svr=i(re),I4=n(re,"LI",{});var rBe=s(I4);Ybe=n(rBe,"STRONG",{});var C2t=s(Ybe);Pvr=r(C2t,"bert"),C2t.forEach(t),$vr=r(rBe," \u2014 "),qX=n(rBe,"A",{href:!0});var M2t=s(qX);Ivr=r(M2t,"TFBertForQuestionAnswering"),M2t.forEach(t),jvr=r(rBe," (BERT model)"),rBe.forEach(t),Nvr=i(re),j4=n(re,"LI",{});var tBe=s(j4);Kbe=n(tBe,"STRONG",{});var E2t=s(Kbe);Dvr=r(E2t,"camembert"),E2t.forEach(t),qvr=r(tBe," \u2014 "),GX=n(tBe,"A",{href:!0});var y2t=s(GX);Gvr=r(y2t,"TFCamembertForQuestionAnswering"),y2t.forEach(t),Ovr=r(tBe," (CamemBERT model)"),tBe.forEach(t),Xvr=i(re),N4=n(re,"LI",{});var aBe=s(N4);Zbe=n(aBe,"STRONG",{});var w2t=s(Zbe);Vvr=r(w2t,"convbert"),w2t.forEach(t),zvr=r(aBe," \u2014 "),OX=n(aBe,"A",{href:!0});var A2t=s(OX);Wvr=r(A2t,"TFConvBertForQuestionAnswering"),A2t.forEach(t),Qvr=r(aBe," (ConvBERT model)"),aBe.forEach(t),Hvr=i(re),D4=n(re,"LI",{});var nBe=s(D4);e2e=n(nBe,"STRONG",{});var L2t=s(e2e);Uvr=r(L2t,"deberta"),L2t.forEach(t),Jvr=r(nBe," \u2014 "),XX=n(nBe,"A",{href:!0});var B2t=s(XX);Yvr=r(B2t,"TFDebertaForQuestionAnswering"),B2t.forEach(t),Kvr=r(nBe," (DeBERTa model)"),nBe.forEach(t),Zvr=i(re),q4=n(re,"LI",{});var sBe=s(q4);o2e=n(sBe,"STRONG",{});var x2t=s(o2e);eTr=r(x2t,"deberta-v2"),x2t.forEach(t),oTr=r(sBe," \u2014 "),VX=n(sBe,"A",{href:!0});var k2t=s(VX);rTr=r(k2t,"TFDebertaV2ForQuestionAnswering"),k2t.forEach(t),tTr=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),aTr=i(re),G4=n(re,"LI",{});var lBe=s(G4);r2e=n(lBe,"STRONG",{});var R2t=s(r2e);nTr=r(R2t,"distilbert"),R2t.forEach(t),sTr=r(lBe," \u2014 "),zX=n(lBe,"A",{href:!0});var S2t=s(zX);lTr=r(S2t,"TFDistilBertForQuestionAnswering"),S2t.forEach(t),iTr=r(lBe," (DistilBERT model)"),lBe.forEach(t),dTr=i(re),O4=n(re,"LI",{});var iBe=s(O4);t2e=n(iBe,"STRONG",{});var P2t=s(t2e);cTr=r(P2t,"electra"),P2t.forEach(t),mTr=r(iBe," \u2014 "),WX=n(iBe,"A",{href:!0});var $2t=s(WX);fTr=r($2t,"TFElectraForQuestionAnswering"),$2t.forEach(t),gTr=r(iBe," (ELECTRA model)"),iBe.forEach(t),hTr=i(re),X4=n(re,"LI",{});var dBe=s(X4);a2e=n(dBe,"STRONG",{});var I2t=s(a2e);uTr=r(I2t,"flaubert"),I2t.forEach(t),pTr=r(dBe," \u2014 "),QX=n(dBe,"A",{href:!0});var j2t=s(QX);_Tr=r(j2t,"TFFlaubertForQuestionAnsweringSimple"),j2t.forEach(t),bTr=r(dBe," (FlauBERT model)"),dBe.forEach(t),vTr=i(re),V4=n(re,"LI",{});var cBe=s(V4);n2e=n(cBe,"STRONG",{});var N2t=s(n2e);TTr=r(N2t,"funnel"),N2t.forEach(t),FTr=r(cBe," \u2014 "),HX=n(cBe,"A",{href:!0});var D2t=s(HX);CTr=r(D2t,"TFFunnelForQuestionAnswering"),D2t.forEach(t),MTr=r(cBe," (Funnel Transformer model)"),cBe.forEach(t),ETr=i(re),z4=n(re,"LI",{});var mBe=s(z4);s2e=n(mBe,"STRONG",{});var q2t=s(s2e);yTr=r(q2t,"gptj"),q2t.forEach(t),wTr=r(mBe," \u2014 "),UX=n(mBe,"A",{href:!0});var G2t=s(UX);ATr=r(G2t,"TFGPTJForQuestionAnswering"),G2t.forEach(t),LTr=r(mBe," (GPT-J model)"),mBe.forEach(t),BTr=i(re),W4=n(re,"LI",{});var fBe=s(W4);l2e=n(fBe,"STRONG",{});var O2t=s(l2e);xTr=r(O2t,"longformer"),O2t.forEach(t),kTr=r(fBe," \u2014 "),JX=n(fBe,"A",{href:!0});var X2t=s(JX);RTr=r(X2t,"TFLongformerForQuestionAnswering"),X2t.forEach(t),STr=r(fBe," (Longformer model)"),fBe.forEach(t),PTr=i(re),Q4=n(re,"LI",{});var gBe=s(Q4);i2e=n(gBe,"STRONG",{});var V2t=s(i2e);$Tr=r(V2t,"mobilebert"),V2t.forEach(t),ITr=r(gBe," \u2014 "),YX=n(gBe,"A",{href:!0});var z2t=s(YX);jTr=r(z2t,"TFMobileBertForQuestionAnswering"),z2t.forEach(t),NTr=r(gBe," (MobileBERT model)"),gBe.forEach(t),DTr=i(re),H4=n(re,"LI",{});var hBe=s(H4);d2e=n(hBe,"STRONG",{});var W2t=s(d2e);qTr=r(W2t,"mpnet"),W2t.forEach(t),GTr=r(hBe," \u2014 "),KX=n(hBe,"A",{href:!0});var Q2t=s(KX);OTr=r(Q2t,"TFMPNetForQuestionAnswering"),Q2t.forEach(t),XTr=r(hBe," (MPNet model)"),hBe.forEach(t),VTr=i(re),U4=n(re,"LI",{});var uBe=s(U4);c2e=n(uBe,"STRONG",{});var H2t=s(c2e);zTr=r(H2t,"rembert"),H2t.forEach(t),WTr=r(uBe," \u2014 "),ZX=n(uBe,"A",{href:!0});var U2t=s(ZX);QTr=r(U2t,"TFRemBertForQuestionAnswering"),U2t.forEach(t),HTr=r(uBe," (RemBERT model)"),uBe.forEach(t),UTr=i(re),J4=n(re,"LI",{});var pBe=s(J4);m2e=n(pBe,"STRONG",{});var J2t=s(m2e);JTr=r(J2t,"roberta"),J2t.forEach(t),YTr=r(pBe," \u2014 "),eV=n(pBe,"A",{href:!0});var Y2t=s(eV);KTr=r(Y2t,"TFRobertaForQuestionAnswering"),Y2t.forEach(t),ZTr=r(pBe," (RoBERTa model)"),pBe.forEach(t),e1r=i(re),Y4=n(re,"LI",{});var _Be=s(Y4);f2e=n(_Be,"STRONG",{});var K2t=s(f2e);o1r=r(K2t,"roformer"),K2t.forEach(t),r1r=r(_Be," \u2014 "),oV=n(_Be,"A",{href:!0});var Z2t=s(oV);t1r=r(Z2t,"TFRoFormerForQuestionAnswering"),Z2t.forEach(t),a1r=r(_Be," (RoFormer model)"),_Be.forEach(t),n1r=i(re),K4=n(re,"LI",{});var bBe=s(K4);g2e=n(bBe,"STRONG",{});var evt=s(g2e);s1r=r(evt,"xlm"),evt.forEach(t),l1r=r(bBe," \u2014 "),rV=n(bBe,"A",{href:!0});var ovt=s(rV);i1r=r(ovt,"TFXLMForQuestionAnsweringSimple"),ovt.forEach(t),d1r=r(bBe," (XLM model)"),bBe.forEach(t),c1r=i(re),Z4=n(re,"LI",{});var vBe=s(Z4);h2e=n(vBe,"STRONG",{});var rvt=s(h2e);m1r=r(rvt,"xlm-roberta"),rvt.forEach(t),f1r=r(vBe," \u2014 "),tV=n(vBe,"A",{href:!0});var tvt=s(tV);g1r=r(tvt,"TFXLMRobertaForQuestionAnswering"),tvt.forEach(t),h1r=r(vBe," (XLM-RoBERTa model)"),vBe.forEach(t),u1r=i(re),eE=n(re,"LI",{});var TBe=s(eE);u2e=n(TBe,"STRONG",{});var avt=s(u2e);p1r=r(avt,"xlnet"),avt.forEach(t),_1r=r(TBe," \u2014 "),aV=n(TBe,"A",{href:!0});var nvt=s(aV);b1r=r(nvt,"TFXLNetForQuestionAnsweringSimple"),nvt.forEach(t),v1r=r(TBe," (XLNet model)"),TBe.forEach(t),re.forEach(t),T1r=i(ya),p2e=n(ya,"P",{});var svt=s(p2e);F1r=r(svt,"Examples:"),svt.forEach(t),C1r=i(ya),f(gL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),XRe=i(c),zc=n(c,"H2",{class:!0});var o$e=s(zc);oE=n(o$e,"A",{id:!0,class:!0,href:!0});var lvt=s(oE);_2e=n(lvt,"SPAN",{});var ivt=s(_2e);f(hL.$$.fragment,ivt),ivt.forEach(t),lvt.forEach(t),M1r=i(o$e),b2e=n(o$e,"SPAN",{});var dvt=s(b2e);E1r=r(dvt,"TFAutoModelForVision2Seq"),dvt.forEach(t),o$e.forEach(t),VRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);f(uL.$$.fragment,li),y1r=i(li),Wc=n(li,"P",{});var bQ=s(Wc);w1r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),v2e=n(bQ,"CODE",{});var cvt=s(v2e);A1r=r(cvt,"from_pretrained()"),cvt.forEach(t),L1r=r(bQ,"class method or the "),T2e=n(bQ,"CODE",{});var mvt=s(T2e);B1r=r(mvt,"from_config()"),mvt.forEach(t),x1r=r(bQ,`class
method.`),bQ.forEach(t),k1r=i(li),pL=n(li,"P",{});var r$e=s(pL);R1r=r(r$e,"This class cannot be instantiated directly using "),F2e=n(r$e,"CODE",{});var fvt=s(F2e);S1r=r(fvt,"__init__()"),fvt.forEach(t),P1r=r(r$e," (throws an error)."),r$e.forEach(t),$1r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);f(_L.$$.fragment,ii),I1r=i(ii),C2e=n(ii,"P",{});var gvt=s(C2e);j1r=r(gvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gvt.forEach(t),N1r=i(ii),Qc=n(ii,"P",{});var vQ=s(Qc);D1r=r(vQ,`Note:
Loading a model from its configuration file does `),M2e=n(vQ,"STRONG",{});var hvt=s(M2e);q1r=r(hvt,"not"),hvt.forEach(t),G1r=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=n(vQ,"CODE",{});var uvt=s(E2e);O1r=r(uvt,"from_pretrained()"),uvt.forEach(t),X1r=r(vQ,"to load the model weights."),vQ.forEach(t),V1r=i(ii),y2e=n(ii,"P",{});var pvt=s(y2e);z1r=r(pvt,"Examples:"),pvt.forEach(t),W1r=i(ii),f(bL.$$.fragment,ii),ii.forEach(t),Q1r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);f(vL.$$.fragment,wa),H1r=i(wa),w2e=n(wa,"P",{});var _vt=s(w2e);U1r=r(_vt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_vt.forEach(t),J1r=i(wa),An=n(wa,"P",{});var U5=s(An);Y1r=r(U5,"The model class to instantiate is selected based on the "),A2e=n(U5,"CODE",{});var bvt=s(A2e);K1r=r(bvt,"model_type"),bvt.forEach(t),Z1r=r(U5,` property of the config object (either
passed as an argument or loaded from `),L2e=n(U5,"CODE",{});var vvt=s(L2e);eFr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),oFr=r(U5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(U5,"CODE",{});var Tvt=s(B2e);rFr=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),tFr=r(U5,":"),U5.forEach(t),aFr=i(wa),x2e=n(wa,"UL",{});var Fvt=s(x2e);rE=n(Fvt,"LI",{});var FBe=s(rE);k2e=n(FBe,"STRONG",{});var Cvt=s(k2e);nFr=r(Cvt,"vision-encoder-decoder"),Cvt.forEach(t),sFr=r(FBe," \u2014 "),nV=n(FBe,"A",{href:!0});var Mvt=s(nV);lFr=r(Mvt,"TFVisionEncoderDecoderModel"),Mvt.forEach(t),iFr=r(FBe," (Vision Encoder decoder model)"),FBe.forEach(t),Fvt.forEach(t),dFr=i(wa),R2e=n(wa,"P",{});var Evt=s(R2e);cFr=r(Evt,"Examples:"),Evt.forEach(t),mFr=i(wa),f(TL.$$.fragment,wa),wa.forEach(t),li.forEach(t),zRe=i(c),Hc=n(c,"H2",{class:!0});var t$e=s(Hc);tE=n(t$e,"A",{id:!0,class:!0,href:!0});var yvt=s(tE);S2e=n(yvt,"SPAN",{});var wvt=s(S2e);f(FL.$$.fragment,wvt),wvt.forEach(t),yvt.forEach(t),fFr=i(t$e),P2e=n(t$e,"SPAN",{});var Avt=s(P2e);gFr=r(Avt,"TFAutoModelForSpeechSeq2Seq"),Avt.forEach(t),t$e.forEach(t),WRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);f(CL.$$.fragment,di),hFr=i(di),Uc=n(di,"P",{});var TQ=s(Uc);uFr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$2e=n(TQ,"CODE",{});var Lvt=s($2e);pFr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),_Fr=r(TQ,"class method or the "),I2e=n(TQ,"CODE",{});var Bvt=s(I2e);bFr=r(Bvt,"from_config()"),Bvt.forEach(t),vFr=r(TQ,`class
method.`),TQ.forEach(t),TFr=i(di),ML=n(di,"P",{});var a$e=s(ML);FFr=r(a$e,"This class cannot be instantiated directly using "),j2e=n(a$e,"CODE",{});var xvt=s(j2e);CFr=r(xvt,"__init__()"),xvt.forEach(t),MFr=r(a$e," (throws an error)."),a$e.forEach(t),EFr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);f(EL.$$.fragment,ci),yFr=i(ci),N2e=n(ci,"P",{});var kvt=s(N2e);wFr=r(kvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kvt.forEach(t),AFr=i(ci),Jc=n(ci,"P",{});var FQ=s(Jc);LFr=r(FQ,`Note:
Loading a model from its configuration file does `),D2e=n(FQ,"STRONG",{});var Rvt=s(D2e);BFr=r(Rvt,"not"),Rvt.forEach(t),xFr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q2e=n(FQ,"CODE",{});var Svt=s(q2e);kFr=r(Svt,"from_pretrained()"),Svt.forEach(t),RFr=r(FQ,"to load the model weights."),FQ.forEach(t),SFr=i(ci),G2e=n(ci,"P",{});var Pvt=s(G2e);PFr=r(Pvt,"Examples:"),Pvt.forEach(t),$Fr=i(ci),f(yL.$$.fragment,ci),ci.forEach(t),IFr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);f(wL.$$.fragment,Aa),jFr=i(Aa),O2e=n(Aa,"P",{});var $vt=s(O2e);NFr=r($vt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$vt.forEach(t),DFr=i(Aa),Ln=n(Aa,"P",{});var J5=s(Ln);qFr=r(J5,"The model class to instantiate is selected based on the "),X2e=n(J5,"CODE",{});var Ivt=s(X2e);GFr=r(Ivt,"model_type"),Ivt.forEach(t),OFr=r(J5,` property of the config object (either
passed as an argument or loaded from `),V2e=n(J5,"CODE",{});var jvt=s(V2e);XFr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),VFr=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(J5,"CODE",{});var Nvt=s(z2e);zFr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),WFr=r(J5,":"),J5.forEach(t),QFr=i(Aa),W2e=n(Aa,"UL",{});var Dvt=s(W2e);aE=n(Dvt,"LI",{});var CBe=s(aE);Q2e=n(CBe,"STRONG",{});var qvt=s(Q2e);HFr=r(qvt,"speech_to_text"),qvt.forEach(t),UFr=r(CBe," \u2014 "),sV=n(CBe,"A",{href:!0});var Gvt=s(sV);JFr=r(Gvt,"TFSpeech2TextForConditionalGeneration"),Gvt.forEach(t),YFr=r(CBe," (Speech2Text model)"),CBe.forEach(t),Dvt.forEach(t),KFr=i(Aa),H2e=n(Aa,"P",{});var Ovt=s(H2e);ZFr=r(Ovt,"Examples:"),Ovt.forEach(t),eCr=i(Aa),f(AL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),QRe=i(c),Yc=n(c,"H2",{class:!0});var n$e=s(Yc);nE=n(n$e,"A",{id:!0,class:!0,href:!0});var Xvt=s(nE);U2e=n(Xvt,"SPAN",{});var Vvt=s(U2e);f(LL.$$.fragment,Vvt),Vvt.forEach(t),Xvt.forEach(t),oCr=i(n$e),J2e=n(n$e,"SPAN",{});var zvt=s(J2e);rCr=r(zvt,"FlaxAutoModel"),zvt.forEach(t),n$e.forEach(t),HRe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);f(BL.$$.fragment,mi),tCr=i(mi),Kc=n(mi,"P",{});var CQ=s(Kc);aCr=r(CQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Y2e=n(CQ,"CODE",{});var Wvt=s(Y2e);nCr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),sCr=r(CQ,"class method or the "),K2e=n(CQ,"CODE",{});var Qvt=s(K2e);lCr=r(Qvt,"from_config()"),Qvt.forEach(t),iCr=r(CQ,`class
method.`),CQ.forEach(t),dCr=i(mi),xL=n(mi,"P",{});var s$e=s(xL);cCr=r(s$e,"This class cannot be instantiated directly using "),Z2e=n(s$e,"CODE",{});var Hvt=s(Z2e);mCr=r(Hvt,"__init__()"),Hvt.forEach(t),fCr=r(s$e," (throws an error)."),s$e.forEach(t),gCr=i(mi),wt=n(mi,"DIV",{class:!0});var fi=s(wt);f(kL.$$.fragment,fi),hCr=i(fi),eve=n(fi,"P",{});var Uvt=s(eve);uCr=r(Uvt,"Instantiates one of the base model classes of the library from a configuration."),Uvt.forEach(t),pCr=i(fi),Zc=n(fi,"P",{});var MQ=s(Zc);_Cr=r(MQ,`Note:
Loading a model from its configuration file does `),ove=n(MQ,"STRONG",{});var Jvt=s(ove);bCr=r(Jvt,"not"),Jvt.forEach(t),vCr=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=n(MQ,"CODE",{});var Yvt=s(rve);TCr=r(Yvt,"from_pretrained()"),Yvt.forEach(t),FCr=r(MQ,"to load the model weights."),MQ.forEach(t),CCr=i(fi),tve=n(fi,"P",{});var Kvt=s(tve);MCr=r(Kvt,"Examples:"),Kvt.forEach(t),ECr=i(fi),f(RL.$$.fragment,fi),fi.forEach(t),yCr=i(mi),Ao=n(mi,"DIV",{class:!0});var La=s(Ao);f(SL.$$.fragment,La),wCr=i(La),ave=n(La,"P",{});var Zvt=s(ave);ACr=r(Zvt,"Instantiate one of the base model classes of the library from a pretrained model."),Zvt.forEach(t),LCr=i(La),Bn=n(La,"P",{});var Y5=s(Bn);BCr=r(Y5,"The model class to instantiate is selected based on the "),nve=n(Y5,"CODE",{});var eTt=s(nve);xCr=r(eTt,"model_type"),eTt.forEach(t),kCr=r(Y5,` property of the config object (either
passed as an argument or loaded from `),sve=n(Y5,"CODE",{});var oTt=s(sve);RCr=r(oTt,"pretrained_model_name_or_path"),oTt.forEach(t),SCr=r(Y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(Y5,"CODE",{});var rTt=s(lve);PCr=r(rTt,"pretrained_model_name_or_path"),rTt.forEach(t),$Cr=r(Y5,":"),Y5.forEach(t),ICr=i(La),z=n(La,"UL",{});var Q=s(z);sE=n(Q,"LI",{});var MBe=s(sE);ive=n(MBe,"STRONG",{});var tTt=s(ive);jCr=r(tTt,"albert"),tTt.forEach(t),NCr=r(MBe," \u2014 "),lV=n(MBe,"A",{href:!0});var aTt=s(lV);DCr=r(aTt,"FlaxAlbertModel"),aTt.forEach(t),qCr=r(MBe," (ALBERT model)"),MBe.forEach(t),GCr=i(Q),lE=n(Q,"LI",{});var EBe=s(lE);dve=n(EBe,"STRONG",{});var nTt=s(dve);OCr=r(nTt,"bart"),nTt.forEach(t),XCr=r(EBe," \u2014 "),iV=n(EBe,"A",{href:!0});var sTt=s(iV);VCr=r(sTt,"FlaxBartModel"),sTt.forEach(t),zCr=r(EBe," (BART model)"),EBe.forEach(t),WCr=i(Q),iE=n(Q,"LI",{});var yBe=s(iE);cve=n(yBe,"STRONG",{});var lTt=s(cve);QCr=r(lTt,"beit"),lTt.forEach(t),HCr=r(yBe," \u2014 "),dV=n(yBe,"A",{href:!0});var iTt=s(dV);UCr=r(iTt,"FlaxBeitModel"),iTt.forEach(t),JCr=r(yBe," (BEiT model)"),yBe.forEach(t),YCr=i(Q),dE=n(Q,"LI",{});var wBe=s(dE);mve=n(wBe,"STRONG",{});var dTt=s(mve);KCr=r(dTt,"bert"),dTt.forEach(t),ZCr=r(wBe," \u2014 "),cV=n(wBe,"A",{href:!0});var cTt=s(cV);eMr=r(cTt,"FlaxBertModel"),cTt.forEach(t),oMr=r(wBe," (BERT model)"),wBe.forEach(t),rMr=i(Q),cE=n(Q,"LI",{});var ABe=s(cE);fve=n(ABe,"STRONG",{});var mTt=s(fve);tMr=r(mTt,"big_bird"),mTt.forEach(t),aMr=r(ABe," \u2014 "),mV=n(ABe,"A",{href:!0});var fTt=s(mV);nMr=r(fTt,"FlaxBigBirdModel"),fTt.forEach(t),sMr=r(ABe," (BigBird model)"),ABe.forEach(t),lMr=i(Q),mE=n(Q,"LI",{});var LBe=s(mE);gve=n(LBe,"STRONG",{});var gTt=s(gve);iMr=r(gTt,"blenderbot"),gTt.forEach(t),dMr=r(LBe," \u2014 "),fV=n(LBe,"A",{href:!0});var hTt=s(fV);cMr=r(hTt,"FlaxBlenderbotModel"),hTt.forEach(t),mMr=r(LBe," (Blenderbot model)"),LBe.forEach(t),fMr=i(Q),fE=n(Q,"LI",{});var BBe=s(fE);hve=n(BBe,"STRONG",{});var uTt=s(hve);gMr=r(uTt,"blenderbot-small"),uTt.forEach(t),hMr=r(BBe," \u2014 "),gV=n(BBe,"A",{href:!0});var pTt=s(gV);uMr=r(pTt,"FlaxBlenderbotSmallModel"),pTt.forEach(t),pMr=r(BBe," (BlenderbotSmall model)"),BBe.forEach(t),_Mr=i(Q),gE=n(Q,"LI",{});var xBe=s(gE);uve=n(xBe,"STRONG",{});var _Tt=s(uve);bMr=r(_Tt,"clip"),_Tt.forEach(t),vMr=r(xBe," \u2014 "),hV=n(xBe,"A",{href:!0});var bTt=s(hV);TMr=r(bTt,"FlaxCLIPModel"),bTt.forEach(t),FMr=r(xBe," (CLIP model)"),xBe.forEach(t),CMr=i(Q),hE=n(Q,"LI",{});var kBe=s(hE);pve=n(kBe,"STRONG",{});var vTt=s(pve);MMr=r(vTt,"distilbert"),vTt.forEach(t),EMr=r(kBe," \u2014 "),uV=n(kBe,"A",{href:!0});var TTt=s(uV);yMr=r(TTt,"FlaxDistilBertModel"),TTt.forEach(t),wMr=r(kBe," (DistilBERT model)"),kBe.forEach(t),AMr=i(Q),uE=n(Q,"LI",{});var RBe=s(uE);_ve=n(RBe,"STRONG",{});var FTt=s(_ve);LMr=r(FTt,"electra"),FTt.forEach(t),BMr=r(RBe," \u2014 "),pV=n(RBe,"A",{href:!0});var CTt=s(pV);xMr=r(CTt,"FlaxElectraModel"),CTt.forEach(t),kMr=r(RBe," (ELECTRA model)"),RBe.forEach(t),RMr=i(Q),pE=n(Q,"LI",{});var SBe=s(pE);bve=n(SBe,"STRONG",{});var MTt=s(bve);SMr=r(MTt,"gpt2"),MTt.forEach(t),PMr=r(SBe," \u2014 "),_V=n(SBe,"A",{href:!0});var ETt=s(_V);$Mr=r(ETt,"FlaxGPT2Model"),ETt.forEach(t),IMr=r(SBe," (OpenAI GPT-2 model)"),SBe.forEach(t),jMr=i(Q),_E=n(Q,"LI",{});var PBe=s(_E);vve=n(PBe,"STRONG",{});var yTt=s(vve);NMr=r(yTt,"gpt_neo"),yTt.forEach(t),DMr=r(PBe," \u2014 "),bV=n(PBe,"A",{href:!0});var wTt=s(bV);qMr=r(wTt,"FlaxGPTNeoModel"),wTt.forEach(t),GMr=r(PBe," (GPT Neo model)"),PBe.forEach(t),OMr=i(Q),bE=n(Q,"LI",{});var $Be=s(bE);Tve=n($Be,"STRONG",{});var ATt=s(Tve);XMr=r(ATt,"gptj"),ATt.forEach(t),VMr=r($Be," \u2014 "),vV=n($Be,"A",{href:!0});var LTt=s(vV);zMr=r(LTt,"FlaxGPTJModel"),LTt.forEach(t),WMr=r($Be," (GPT-J model)"),$Be.forEach(t),QMr=i(Q),vE=n(Q,"LI",{});var IBe=s(vE);Fve=n(IBe,"STRONG",{});var BTt=s(Fve);HMr=r(BTt,"marian"),BTt.forEach(t),UMr=r(IBe," \u2014 "),TV=n(IBe,"A",{href:!0});var xTt=s(TV);JMr=r(xTt,"FlaxMarianModel"),xTt.forEach(t),YMr=r(IBe," (Marian model)"),IBe.forEach(t),KMr=i(Q),TE=n(Q,"LI",{});var jBe=s(TE);Cve=n(jBe,"STRONG",{});var kTt=s(Cve);ZMr=r(kTt,"mbart"),kTt.forEach(t),e4r=r(jBe," \u2014 "),FV=n(jBe,"A",{href:!0});var RTt=s(FV);o4r=r(RTt,"FlaxMBartModel"),RTt.forEach(t),r4r=r(jBe," (mBART model)"),jBe.forEach(t),t4r=i(Q),FE=n(Q,"LI",{});var NBe=s(FE);Mve=n(NBe,"STRONG",{});var STt=s(Mve);a4r=r(STt,"mt5"),STt.forEach(t),n4r=r(NBe," \u2014 "),CV=n(NBe,"A",{href:!0});var PTt=s(CV);s4r=r(PTt,"FlaxMT5Model"),PTt.forEach(t),l4r=r(NBe," (mT5 model)"),NBe.forEach(t),i4r=i(Q),CE=n(Q,"LI",{});var DBe=s(CE);Eve=n(DBe,"STRONG",{});var $Tt=s(Eve);d4r=r($Tt,"pegasus"),$Tt.forEach(t),c4r=r(DBe," \u2014 "),MV=n(DBe,"A",{href:!0});var ITt=s(MV);m4r=r(ITt,"FlaxPegasusModel"),ITt.forEach(t),f4r=r(DBe," (Pegasus model)"),DBe.forEach(t),g4r=i(Q),ME=n(Q,"LI",{});var qBe=s(ME);yve=n(qBe,"STRONG",{});var jTt=s(yve);h4r=r(jTt,"roberta"),jTt.forEach(t),u4r=r(qBe," \u2014 "),EV=n(qBe,"A",{href:!0});var NTt=s(EV);p4r=r(NTt,"FlaxRobertaModel"),NTt.forEach(t),_4r=r(qBe," (RoBERTa model)"),qBe.forEach(t),b4r=i(Q),EE=n(Q,"LI",{});var GBe=s(EE);wve=n(GBe,"STRONG",{});var DTt=s(wve);v4r=r(DTt,"roformer"),DTt.forEach(t),T4r=r(GBe," \u2014 "),yV=n(GBe,"A",{href:!0});var qTt=s(yV);F4r=r(qTt,"FlaxRoFormerModel"),qTt.forEach(t),C4r=r(GBe," (RoFormer model)"),GBe.forEach(t),M4r=i(Q),yE=n(Q,"LI",{});var OBe=s(yE);Ave=n(OBe,"STRONG",{});var GTt=s(Ave);E4r=r(GTt,"t5"),GTt.forEach(t),y4r=r(OBe," \u2014 "),wV=n(OBe,"A",{href:!0});var OTt=s(wV);w4r=r(OTt,"FlaxT5Model"),OTt.forEach(t),A4r=r(OBe," (T5 model)"),OBe.forEach(t),L4r=i(Q),wE=n(Q,"LI",{});var XBe=s(wE);Lve=n(XBe,"STRONG",{});var XTt=s(Lve);B4r=r(XTt,"vision-text-dual-encoder"),XTt.forEach(t),x4r=r(XBe," \u2014 "),AV=n(XBe,"A",{href:!0});var VTt=s(AV);k4r=r(VTt,"FlaxVisionTextDualEncoderModel"),VTt.forEach(t),R4r=r(XBe," (VisionTextDualEncoder model)"),XBe.forEach(t),S4r=i(Q),AE=n(Q,"LI",{});var VBe=s(AE);Bve=n(VBe,"STRONG",{});var zTt=s(Bve);P4r=r(zTt,"vit"),zTt.forEach(t),$4r=r(VBe," \u2014 "),LV=n(VBe,"A",{href:!0});var WTt=s(LV);I4r=r(WTt,"FlaxViTModel"),WTt.forEach(t),j4r=r(VBe," (ViT model)"),VBe.forEach(t),N4r=i(Q),LE=n(Q,"LI",{});var zBe=s(LE);xve=n(zBe,"STRONG",{});var QTt=s(xve);D4r=r(QTt,"wav2vec2"),QTt.forEach(t),q4r=r(zBe," \u2014 "),BV=n(zBe,"A",{href:!0});var HTt=s(BV);G4r=r(HTt,"FlaxWav2Vec2Model"),HTt.forEach(t),O4r=r(zBe," (Wav2Vec2 model)"),zBe.forEach(t),X4r=i(Q),BE=n(Q,"LI",{});var WBe=s(BE);kve=n(WBe,"STRONG",{});var UTt=s(kve);V4r=r(UTt,"xglm"),UTt.forEach(t),z4r=r(WBe," \u2014 "),xV=n(WBe,"A",{href:!0});var JTt=s(xV);W4r=r(JTt,"FlaxXGLMModel"),JTt.forEach(t),Q4r=r(WBe," (XGLM model)"),WBe.forEach(t),H4r=i(Q),xE=n(Q,"LI",{});var QBe=s(xE);Rve=n(QBe,"STRONG",{});var YTt=s(Rve);U4r=r(YTt,"xlm-roberta"),YTt.forEach(t),J4r=r(QBe," \u2014 "),kV=n(QBe,"A",{href:!0});var KTt=s(kV);Y4r=r(KTt,"FlaxXLMRobertaModel"),KTt.forEach(t),K4r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Q.forEach(t),Z4r=i(La),Sve=n(La,"P",{});var ZTt=s(Sve);eEr=r(ZTt,"Examples:"),ZTt.forEach(t),oEr=i(La),f(PL.$$.fragment,La),La.forEach(t),mi.forEach(t),URe=i(c),em=n(c,"H2",{class:!0});var l$e=s(em);kE=n(l$e,"A",{id:!0,class:!0,href:!0});var e1t=s(kE);Pve=n(e1t,"SPAN",{});var o1t=s(Pve);f($L.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),rEr=i(l$e),$ve=n(l$e,"SPAN",{});var r1t=s($ve);tEr=r(r1t,"FlaxAutoModelForCausalLM"),r1t.forEach(t),l$e.forEach(t),JRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);f(IL.$$.fragment,gi),aEr=i(gi),om=n(gi,"P",{});var EQ=s(om);nEr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Ive=n(EQ,"CODE",{});var t1t=s(Ive);sEr=r(t1t,"from_pretrained()"),t1t.forEach(t),lEr=r(EQ,"class method or the "),jve=n(EQ,"CODE",{});var a1t=s(jve);iEr=r(a1t,"from_config()"),a1t.forEach(t),dEr=r(EQ,`class
method.`),EQ.forEach(t),cEr=i(gi),jL=n(gi,"P",{});var i$e=s(jL);mEr=r(i$e,"This class cannot be instantiated directly using "),Nve=n(i$e,"CODE",{});var n1t=s(Nve);fEr=r(n1t,"__init__()"),n1t.forEach(t),gEr=r(i$e," (throws an error)."),i$e.forEach(t),hEr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);f(NL.$$.fragment,hi),uEr=i(hi),Dve=n(hi,"P",{});var s1t=s(Dve);pEr=r(s1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s1t.forEach(t),_Er=i(hi),rm=n(hi,"P",{});var yQ=s(rm);bEr=r(yQ,`Note:
Loading a model from its configuration file does `),qve=n(yQ,"STRONG",{});var l1t=s(qve);vEr=r(l1t,"not"),l1t.forEach(t),TEr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=n(yQ,"CODE",{});var i1t=s(Gve);FEr=r(i1t,"from_pretrained()"),i1t.forEach(t),CEr=r(yQ,"to load the model weights."),yQ.forEach(t),MEr=i(hi),Ove=n(hi,"P",{});var d1t=s(Ove);EEr=r(d1t,"Examples:"),d1t.forEach(t),yEr=i(hi),f(DL.$$.fragment,hi),hi.forEach(t),wEr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);f(qL.$$.fragment,Ba),AEr=i(Ba),Xve=n(Ba,"P",{});var c1t=s(Xve);LEr=r(c1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c1t.forEach(t),BEr=i(Ba),xn=n(Ba,"P",{});var K5=s(xn);xEr=r(K5,"The model class to instantiate is selected based on the "),Vve=n(K5,"CODE",{});var m1t=s(Vve);kEr=r(m1t,"model_type"),m1t.forEach(t),REr=r(K5,` property of the config object (either
passed as an argument or loaded from `),zve=n(K5,"CODE",{});var f1t=s(zve);SEr=r(f1t,"pretrained_model_name_or_path"),f1t.forEach(t),PEr=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(K5,"CODE",{});var g1t=s(Wve);$Er=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),IEr=r(K5,":"),K5.forEach(t),jEr=i(Ba),ca=n(Ba,"UL",{});var ui=s(ca);RE=n(ui,"LI",{});var HBe=s(RE);Qve=n(HBe,"STRONG",{});var h1t=s(Qve);NEr=r(h1t,"bart"),h1t.forEach(t),DEr=r(HBe," \u2014 "),RV=n(HBe,"A",{href:!0});var u1t=s(RV);qEr=r(u1t,"FlaxBartForCausalLM"),u1t.forEach(t),GEr=r(HBe," (BART model)"),HBe.forEach(t),OEr=i(ui),SE=n(ui,"LI",{});var UBe=s(SE);Hve=n(UBe,"STRONG",{});var p1t=s(Hve);XEr=r(p1t,"gpt2"),p1t.forEach(t),VEr=r(UBe," \u2014 "),SV=n(UBe,"A",{href:!0});var _1t=s(SV);zEr=r(_1t,"FlaxGPT2LMHeadModel"),_1t.forEach(t),WEr=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),QEr=i(ui),PE=n(ui,"LI",{});var JBe=s(PE);Uve=n(JBe,"STRONG",{});var b1t=s(Uve);HEr=r(b1t,"gpt_neo"),b1t.forEach(t),UEr=r(JBe," \u2014 "),PV=n(JBe,"A",{href:!0});var v1t=s(PV);JEr=r(v1t,"FlaxGPTNeoForCausalLM"),v1t.forEach(t),YEr=r(JBe," (GPT Neo model)"),JBe.forEach(t),KEr=i(ui),$E=n(ui,"LI",{});var YBe=s($E);Jve=n(YBe,"STRONG",{});var T1t=s(Jve);ZEr=r(T1t,"gptj"),T1t.forEach(t),e3r=r(YBe," \u2014 "),$V=n(YBe,"A",{href:!0});var F1t=s($V);o3r=r(F1t,"FlaxGPTJForCausalLM"),F1t.forEach(t),r3r=r(YBe," (GPT-J model)"),YBe.forEach(t),t3r=i(ui),IE=n(ui,"LI",{});var KBe=s(IE);Yve=n(KBe,"STRONG",{});var C1t=s(Yve);a3r=r(C1t,"xglm"),C1t.forEach(t),n3r=r(KBe," \u2014 "),IV=n(KBe,"A",{href:!0});var M1t=s(IV);s3r=r(M1t,"FlaxXGLMForCausalLM"),M1t.forEach(t),l3r=r(KBe," (XGLM model)"),KBe.forEach(t),ui.forEach(t),i3r=i(Ba),Kve=n(Ba,"P",{});var E1t=s(Kve);d3r=r(E1t,"Examples:"),E1t.forEach(t),c3r=i(Ba),f(GL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),YRe=i(c),tm=n(c,"H2",{class:!0});var d$e=s(tm);jE=n(d$e,"A",{id:!0,class:!0,href:!0});var y1t=s(jE);Zve=n(y1t,"SPAN",{});var w1t=s(Zve);f(OL.$$.fragment,w1t),w1t.forEach(t),y1t.forEach(t),m3r=i(d$e),eTe=n(d$e,"SPAN",{});var A1t=s(eTe);f3r=r(A1t,"FlaxAutoModelForPreTraining"),A1t.forEach(t),d$e.forEach(t),KRe=i(c),Pr=n(c,"DIV",{class:!0});var pi=s(Pr);f(XL.$$.fragment,pi),g3r=i(pi),am=n(pi,"P",{});var wQ=s(am);h3r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oTe=n(wQ,"CODE",{});var L1t=s(oTe);u3r=r(L1t,"from_pretrained()"),L1t.forEach(t),p3r=r(wQ,"class method or the "),rTe=n(wQ,"CODE",{});var B1t=s(rTe);_3r=r(B1t,"from_config()"),B1t.forEach(t),b3r=r(wQ,`class
method.`),wQ.forEach(t),v3r=i(pi),VL=n(pi,"P",{});var c$e=s(VL);T3r=r(c$e,"This class cannot be instantiated directly using "),tTe=n(c$e,"CODE",{});var x1t=s(tTe);F3r=r(x1t,"__init__()"),x1t.forEach(t),C3r=r(c$e," (throws an error)."),c$e.forEach(t),M3r=i(pi),Lt=n(pi,"DIV",{class:!0});var _i=s(Lt);f(zL.$$.fragment,_i),E3r=i(_i),aTe=n(_i,"P",{});var k1t=s(aTe);y3r=r(k1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k1t.forEach(t),w3r=i(_i),nm=n(_i,"P",{});var AQ=s(nm);A3r=r(AQ,`Note:
Loading a model from its configuration file does `),nTe=n(AQ,"STRONG",{});var R1t=s(nTe);L3r=r(R1t,"not"),R1t.forEach(t),B3r=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sTe=n(AQ,"CODE",{});var S1t=s(sTe);x3r=r(S1t,"from_pretrained()"),S1t.forEach(t),k3r=r(AQ,"to load the model weights."),AQ.forEach(t),R3r=i(_i),lTe=n(_i,"P",{});var P1t=s(lTe);S3r=r(P1t,"Examples:"),P1t.forEach(t),P3r=i(_i),f(WL.$$.fragment,_i),_i.forEach(t),$3r=i(pi),Bo=n(pi,"DIV",{class:!0});var xa=s(Bo);f(QL.$$.fragment,xa),I3r=i(xa),iTe=n(xa,"P",{});var $1t=s(iTe);j3r=r($1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$1t.forEach(t),N3r=i(xa),kn=n(xa,"P",{});var Z5=s(kn);D3r=r(Z5,"The model class to instantiate is selected based on the "),dTe=n(Z5,"CODE",{});var I1t=s(dTe);q3r=r(I1t,"model_type"),I1t.forEach(t),G3r=r(Z5,` property of the config object (either
passed as an argument or loaded from `),cTe=n(Z5,"CODE",{});var j1t=s(cTe);O3r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),X3r=r(Z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(Z5,"CODE",{});var N1t=s(mTe);V3r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),z3r=r(Z5,":"),Z5.forEach(t),W3r=i(xa),me=n(xa,"UL",{});var ue=s(me);NE=n(ue,"LI",{});var ZBe=s(NE);fTe=n(ZBe,"STRONG",{});var D1t=s(fTe);Q3r=r(D1t,"albert"),D1t.forEach(t),H3r=r(ZBe," \u2014 "),jV=n(ZBe,"A",{href:!0});var q1t=s(jV);U3r=r(q1t,"FlaxAlbertForPreTraining"),q1t.forEach(t),J3r=r(ZBe," (ALBERT model)"),ZBe.forEach(t),Y3r=i(ue),DE=n(ue,"LI",{});var exe=s(DE);gTe=n(exe,"STRONG",{});var G1t=s(gTe);K3r=r(G1t,"bart"),G1t.forEach(t),Z3r=r(exe," \u2014 "),NV=n(exe,"A",{href:!0});var O1t=s(NV);e5r=r(O1t,"FlaxBartForConditionalGeneration"),O1t.forEach(t),o5r=r(exe," (BART model)"),exe.forEach(t),r5r=i(ue),qE=n(ue,"LI",{});var oxe=s(qE);hTe=n(oxe,"STRONG",{});var X1t=s(hTe);t5r=r(X1t,"bert"),X1t.forEach(t),a5r=r(oxe," \u2014 "),DV=n(oxe,"A",{href:!0});var V1t=s(DV);n5r=r(V1t,"FlaxBertForPreTraining"),V1t.forEach(t),s5r=r(oxe," (BERT model)"),oxe.forEach(t),l5r=i(ue),GE=n(ue,"LI",{});var rxe=s(GE);uTe=n(rxe,"STRONG",{});var z1t=s(uTe);i5r=r(z1t,"big_bird"),z1t.forEach(t),d5r=r(rxe," \u2014 "),qV=n(rxe,"A",{href:!0});var W1t=s(qV);c5r=r(W1t,"FlaxBigBirdForPreTraining"),W1t.forEach(t),m5r=r(rxe," (BigBird model)"),rxe.forEach(t),f5r=i(ue),OE=n(ue,"LI",{});var txe=s(OE);pTe=n(txe,"STRONG",{});var Q1t=s(pTe);g5r=r(Q1t,"electra"),Q1t.forEach(t),h5r=r(txe," \u2014 "),GV=n(txe,"A",{href:!0});var H1t=s(GV);u5r=r(H1t,"FlaxElectraForPreTraining"),H1t.forEach(t),p5r=r(txe," (ELECTRA model)"),txe.forEach(t),_5r=i(ue),XE=n(ue,"LI",{});var axe=s(XE);_Te=n(axe,"STRONG",{});var U1t=s(_Te);b5r=r(U1t,"mbart"),U1t.forEach(t),v5r=r(axe," \u2014 "),OV=n(axe,"A",{href:!0});var J1t=s(OV);T5r=r(J1t,"FlaxMBartForConditionalGeneration"),J1t.forEach(t),F5r=r(axe," (mBART model)"),axe.forEach(t),C5r=i(ue),VE=n(ue,"LI",{});var nxe=s(VE);bTe=n(nxe,"STRONG",{});var Y1t=s(bTe);M5r=r(Y1t,"mt5"),Y1t.forEach(t),E5r=r(nxe," \u2014 "),XV=n(nxe,"A",{href:!0});var K1t=s(XV);y5r=r(K1t,"FlaxMT5ForConditionalGeneration"),K1t.forEach(t),w5r=r(nxe," (mT5 model)"),nxe.forEach(t),A5r=i(ue),zE=n(ue,"LI",{});var sxe=s(zE);vTe=n(sxe,"STRONG",{});var Z1t=s(vTe);L5r=r(Z1t,"roberta"),Z1t.forEach(t),B5r=r(sxe," \u2014 "),VV=n(sxe,"A",{href:!0});var eFt=s(VV);x5r=r(eFt,"FlaxRobertaForMaskedLM"),eFt.forEach(t),k5r=r(sxe," (RoBERTa model)"),sxe.forEach(t),R5r=i(ue),WE=n(ue,"LI",{});var lxe=s(WE);TTe=n(lxe,"STRONG",{});var oFt=s(TTe);S5r=r(oFt,"roformer"),oFt.forEach(t),P5r=r(lxe," \u2014 "),zV=n(lxe,"A",{href:!0});var rFt=s(zV);$5r=r(rFt,"FlaxRoFormerForMaskedLM"),rFt.forEach(t),I5r=r(lxe," (RoFormer model)"),lxe.forEach(t),j5r=i(ue),QE=n(ue,"LI",{});var ixe=s(QE);FTe=n(ixe,"STRONG",{});var tFt=s(FTe);N5r=r(tFt,"t5"),tFt.forEach(t),D5r=r(ixe," \u2014 "),WV=n(ixe,"A",{href:!0});var aFt=s(WV);q5r=r(aFt,"FlaxT5ForConditionalGeneration"),aFt.forEach(t),G5r=r(ixe," (T5 model)"),ixe.forEach(t),O5r=i(ue),HE=n(ue,"LI",{});var dxe=s(HE);CTe=n(dxe,"STRONG",{});var nFt=s(CTe);X5r=r(nFt,"wav2vec2"),nFt.forEach(t),V5r=r(dxe," \u2014 "),QV=n(dxe,"A",{href:!0});var sFt=s(QV);z5r=r(sFt,"FlaxWav2Vec2ForPreTraining"),sFt.forEach(t),W5r=r(dxe," (Wav2Vec2 model)"),dxe.forEach(t),Q5r=i(ue),UE=n(ue,"LI",{});var cxe=s(UE);MTe=n(cxe,"STRONG",{});var lFt=s(MTe);H5r=r(lFt,"xlm-roberta"),lFt.forEach(t),U5r=r(cxe," \u2014 "),HV=n(cxe,"A",{href:!0});var iFt=s(HV);J5r=r(iFt,"FlaxXLMRobertaForMaskedLM"),iFt.forEach(t),Y5r=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),ue.forEach(t),K5r=i(xa),ETe=n(xa,"P",{});var dFt=s(ETe);Z5r=r(dFt,"Examples:"),dFt.forEach(t),eyr=i(xa),f(HL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),ZRe=i(c),sm=n(c,"H2",{class:!0});var m$e=s(sm);JE=n(m$e,"A",{id:!0,class:!0,href:!0});var cFt=s(JE);yTe=n(cFt,"SPAN",{});var mFt=s(yTe);f(UL.$$.fragment,mFt),mFt.forEach(t),cFt.forEach(t),oyr=i(m$e),wTe=n(m$e,"SPAN",{});var fFt=s(wTe);ryr=r(fFt,"FlaxAutoModelForMaskedLM"),fFt.forEach(t),m$e.forEach(t),eSe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);f(JL.$$.fragment,bi),tyr=i(bi),lm=n(bi,"P",{});var LQ=s(lm);ayr=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ATe=n(LQ,"CODE",{});var gFt=s(ATe);nyr=r(gFt,"from_pretrained()"),gFt.forEach(t),syr=r(LQ,"class method or the "),LTe=n(LQ,"CODE",{});var hFt=s(LTe);lyr=r(hFt,"from_config()"),hFt.forEach(t),iyr=r(LQ,`class
method.`),LQ.forEach(t),dyr=i(bi),YL=n(bi,"P",{});var f$e=s(YL);cyr=r(f$e,"This class cannot be instantiated directly using "),BTe=n(f$e,"CODE",{});var uFt=s(BTe);myr=r(uFt,"__init__()"),uFt.forEach(t),fyr=r(f$e," (throws an error)."),f$e.forEach(t),gyr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);f(KL.$$.fragment,vi),hyr=i(vi),xTe=n(vi,"P",{});var pFt=s(xTe);uyr=r(pFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pFt.forEach(t),pyr=i(vi),im=n(vi,"P",{});var BQ=s(im);_yr=r(BQ,`Note:
Loading a model from its configuration file does `),kTe=n(BQ,"STRONG",{});var _Ft=s(kTe);byr=r(_Ft,"not"),_Ft.forEach(t),vyr=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RTe=n(BQ,"CODE",{});var bFt=s(RTe);Tyr=r(bFt,"from_pretrained()"),bFt.forEach(t),Fyr=r(BQ,"to load the model weights."),BQ.forEach(t),Cyr=i(vi),STe=n(vi,"P",{});var vFt=s(STe);Myr=r(vFt,"Examples:"),vFt.forEach(t),Eyr=i(vi),f(ZL.$$.fragment,vi),vi.forEach(t),yyr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);f(e7.$$.fragment,ka),wyr=i(ka),PTe=n(ka,"P",{});var TFt=s(PTe);Ayr=r(TFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),TFt.forEach(t),Lyr=i(ka),Rn=n(ka,"P",{});var ey=s(Rn);Byr=r(ey,"The model class to instantiate is selected based on the "),$Te=n(ey,"CODE",{});var FFt=s($Te);xyr=r(FFt,"model_type"),FFt.forEach(t),kyr=r(ey,` property of the config object (either
passed as an argument or loaded from `),ITe=n(ey,"CODE",{});var CFt=s(ITe);Ryr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),Syr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(ey,"CODE",{});var MFt=s(jTe);Pyr=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),$yr=r(ey,":"),ey.forEach(t),Iyr=i(ka),be=n(ka,"UL",{});var we=s(be);YE=n(we,"LI",{});var mxe=s(YE);NTe=n(mxe,"STRONG",{});var EFt=s(NTe);jyr=r(EFt,"albert"),EFt.forEach(t),Nyr=r(mxe," \u2014 "),UV=n(mxe,"A",{href:!0});var yFt=s(UV);Dyr=r(yFt,"FlaxAlbertForMaskedLM"),yFt.forEach(t),qyr=r(mxe," (ALBERT model)"),mxe.forEach(t),Gyr=i(we),KE=n(we,"LI",{});var fxe=s(KE);DTe=n(fxe,"STRONG",{});var wFt=s(DTe);Oyr=r(wFt,"bart"),wFt.forEach(t),Xyr=r(fxe," \u2014 "),JV=n(fxe,"A",{href:!0});var AFt=s(JV);Vyr=r(AFt,"FlaxBartForConditionalGeneration"),AFt.forEach(t),zyr=r(fxe," (BART model)"),fxe.forEach(t),Wyr=i(we),ZE=n(we,"LI",{});var gxe=s(ZE);qTe=n(gxe,"STRONG",{});var LFt=s(qTe);Qyr=r(LFt,"bert"),LFt.forEach(t),Hyr=r(gxe," \u2014 "),YV=n(gxe,"A",{href:!0});var BFt=s(YV);Uyr=r(BFt,"FlaxBertForMaskedLM"),BFt.forEach(t),Jyr=r(gxe," (BERT model)"),gxe.forEach(t),Yyr=i(we),e3=n(we,"LI",{});var hxe=s(e3);GTe=n(hxe,"STRONG",{});var xFt=s(GTe);Kyr=r(xFt,"big_bird"),xFt.forEach(t),Zyr=r(hxe," \u2014 "),KV=n(hxe,"A",{href:!0});var kFt=s(KV);ewr=r(kFt,"FlaxBigBirdForMaskedLM"),kFt.forEach(t),owr=r(hxe," (BigBird model)"),hxe.forEach(t),rwr=i(we),o3=n(we,"LI",{});var uxe=s(o3);OTe=n(uxe,"STRONG",{});var RFt=s(OTe);twr=r(RFt,"distilbert"),RFt.forEach(t),awr=r(uxe," \u2014 "),ZV=n(uxe,"A",{href:!0});var SFt=s(ZV);nwr=r(SFt,"FlaxDistilBertForMaskedLM"),SFt.forEach(t),swr=r(uxe," (DistilBERT model)"),uxe.forEach(t),lwr=i(we),r3=n(we,"LI",{});var pxe=s(r3);XTe=n(pxe,"STRONG",{});var PFt=s(XTe);iwr=r(PFt,"electra"),PFt.forEach(t),dwr=r(pxe," \u2014 "),ez=n(pxe,"A",{href:!0});var $Ft=s(ez);cwr=r($Ft,"FlaxElectraForMaskedLM"),$Ft.forEach(t),mwr=r(pxe," (ELECTRA model)"),pxe.forEach(t),fwr=i(we),t3=n(we,"LI",{});var _xe=s(t3);VTe=n(_xe,"STRONG",{});var IFt=s(VTe);gwr=r(IFt,"mbart"),IFt.forEach(t),hwr=r(_xe," \u2014 "),oz=n(_xe,"A",{href:!0});var jFt=s(oz);uwr=r(jFt,"FlaxMBartForConditionalGeneration"),jFt.forEach(t),pwr=r(_xe," (mBART model)"),_xe.forEach(t),_wr=i(we),a3=n(we,"LI",{});var bxe=s(a3);zTe=n(bxe,"STRONG",{});var NFt=s(zTe);bwr=r(NFt,"roberta"),NFt.forEach(t),vwr=r(bxe," \u2014 "),rz=n(bxe,"A",{href:!0});var DFt=s(rz);Twr=r(DFt,"FlaxRobertaForMaskedLM"),DFt.forEach(t),Fwr=r(bxe," (RoBERTa model)"),bxe.forEach(t),Cwr=i(we),n3=n(we,"LI",{});var vxe=s(n3);WTe=n(vxe,"STRONG",{});var qFt=s(WTe);Mwr=r(qFt,"roformer"),qFt.forEach(t),Ewr=r(vxe," \u2014 "),tz=n(vxe,"A",{href:!0});var GFt=s(tz);ywr=r(GFt,"FlaxRoFormerForMaskedLM"),GFt.forEach(t),wwr=r(vxe," (RoFormer model)"),vxe.forEach(t),Awr=i(we),s3=n(we,"LI",{});var Txe=s(s3);QTe=n(Txe,"STRONG",{});var OFt=s(QTe);Lwr=r(OFt,"xlm-roberta"),OFt.forEach(t),Bwr=r(Txe," \u2014 "),az=n(Txe,"A",{href:!0});var XFt=s(az);xwr=r(XFt,"FlaxXLMRobertaForMaskedLM"),XFt.forEach(t),kwr=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),we.forEach(t),Rwr=i(ka),HTe=n(ka,"P",{});var VFt=s(HTe);Swr=r(VFt,"Examples:"),VFt.forEach(t),Pwr=i(ka),f(o7.$$.fragment,ka),ka.forEach(t),bi.forEach(t),oSe=i(c),dm=n(c,"H2",{class:!0});var g$e=s(dm);l3=n(g$e,"A",{id:!0,class:!0,href:!0});var zFt=s(l3);UTe=n(zFt,"SPAN",{});var WFt=s(UTe);f(r7.$$.fragment,WFt),WFt.forEach(t),zFt.forEach(t),$wr=i(g$e),JTe=n(g$e,"SPAN",{});var QFt=s(JTe);Iwr=r(QFt,"FlaxAutoModelForSeq2SeqLM"),QFt.forEach(t),g$e.forEach(t),rSe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);f(t7.$$.fragment,Ti),jwr=i(Ti),cm=n(Ti,"P",{});var xQ=s(cm);Nwr=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YTe=n(xQ,"CODE",{});var HFt=s(YTe);Dwr=r(HFt,"from_pretrained()"),HFt.forEach(t),qwr=r(xQ,"class method or the "),KTe=n(xQ,"CODE",{});var UFt=s(KTe);Gwr=r(UFt,"from_config()"),UFt.forEach(t),Owr=r(xQ,`class
method.`),xQ.forEach(t),Xwr=i(Ti),a7=n(Ti,"P",{});var h$e=s(a7);Vwr=r(h$e,"This class cannot be instantiated directly using "),ZTe=n(h$e,"CODE",{});var JFt=s(ZTe);zwr=r(JFt,"__init__()"),JFt.forEach(t),Wwr=r(h$e," (throws an error)."),h$e.forEach(t),Qwr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);f(n7.$$.fragment,Fi),Hwr=i(Fi),e1e=n(Fi,"P",{});var YFt=s(e1e);Uwr=r(YFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YFt.forEach(t),Jwr=i(Fi),mm=n(Fi,"P",{});var kQ=s(mm);Ywr=r(kQ,`Note:
Loading a model from its configuration file does `),o1e=n(kQ,"STRONG",{});var KFt=s(o1e);Kwr=r(KFt,"not"),KFt.forEach(t),Zwr=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r1e=n(kQ,"CODE",{});var ZFt=s(r1e);e6r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),o6r=r(kQ,"to load the model weights."),kQ.forEach(t),r6r=i(Fi),t1e=n(Fi,"P",{});var eCt=s(t1e);t6r=r(eCt,"Examples:"),eCt.forEach(t),a6r=i(Fi),f(s7.$$.fragment,Fi),Fi.forEach(t),n6r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);f(l7.$$.fragment,Ra),s6r=i(Ra),a1e=n(Ra,"P",{});var oCt=s(a1e);l6r=r(oCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oCt.forEach(t),i6r=i(Ra),Sn=n(Ra,"P",{});var oy=s(Sn);d6r=r(oy,"The model class to instantiate is selected based on the "),n1e=n(oy,"CODE",{});var rCt=s(n1e);c6r=r(rCt,"model_type"),rCt.forEach(t),m6r=r(oy,` property of the config object (either
passed as an argument or loaded from `),s1e=n(oy,"CODE",{});var tCt=s(s1e);f6r=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),g6r=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(oy,"CODE",{});var aCt=s(l1e);h6r=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),u6r=r(oy,":"),oy.forEach(t),p6r=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);i3=n(so,"LI",{});var Fxe=s(i3);i1e=n(Fxe,"STRONG",{});var nCt=s(i1e);_6r=r(nCt,"bart"),nCt.forEach(t),b6r=r(Fxe," \u2014 "),nz=n(Fxe,"A",{href:!0});var sCt=s(nz);v6r=r(sCt,"FlaxBartForConditionalGeneration"),sCt.forEach(t),T6r=r(Fxe," (BART model)"),Fxe.forEach(t),F6r=i(so),d3=n(so,"LI",{});var Cxe=s(d3);d1e=n(Cxe,"STRONG",{});var lCt=s(d1e);C6r=r(lCt,"blenderbot"),lCt.forEach(t),M6r=r(Cxe," \u2014 "),sz=n(Cxe,"A",{href:!0});var iCt=s(sz);E6r=r(iCt,"FlaxBlenderbotForConditionalGeneration"),iCt.forEach(t),y6r=r(Cxe," (Blenderbot model)"),Cxe.forEach(t),w6r=i(so),c3=n(so,"LI",{});var Mxe=s(c3);c1e=n(Mxe,"STRONG",{});var dCt=s(c1e);A6r=r(dCt,"blenderbot-small"),dCt.forEach(t),L6r=r(Mxe," \u2014 "),lz=n(Mxe,"A",{href:!0});var cCt=s(lz);B6r=r(cCt,"FlaxBlenderbotSmallForConditionalGeneration"),cCt.forEach(t),x6r=r(Mxe," (BlenderbotSmall model)"),Mxe.forEach(t),k6r=i(so),m3=n(so,"LI",{});var Exe=s(m3);m1e=n(Exe,"STRONG",{});var mCt=s(m1e);R6r=r(mCt,"encoder-decoder"),mCt.forEach(t),S6r=r(Exe," \u2014 "),iz=n(Exe,"A",{href:!0});var fCt=s(iz);P6r=r(fCt,"FlaxEncoderDecoderModel"),fCt.forEach(t),$6r=r(Exe," (Encoder decoder model)"),Exe.forEach(t),I6r=i(so),f3=n(so,"LI",{});var yxe=s(f3);f1e=n(yxe,"STRONG",{});var gCt=s(f1e);j6r=r(gCt,"marian"),gCt.forEach(t),N6r=r(yxe," \u2014 "),dz=n(yxe,"A",{href:!0});var hCt=s(dz);D6r=r(hCt,"FlaxMarianMTModel"),hCt.forEach(t),q6r=r(yxe," (Marian model)"),yxe.forEach(t),G6r=i(so),g3=n(so,"LI",{});var wxe=s(g3);g1e=n(wxe,"STRONG",{});var uCt=s(g1e);O6r=r(uCt,"mbart"),uCt.forEach(t),X6r=r(wxe," \u2014 "),cz=n(wxe,"A",{href:!0});var pCt=s(cz);V6r=r(pCt,"FlaxMBartForConditionalGeneration"),pCt.forEach(t),z6r=r(wxe," (mBART model)"),wxe.forEach(t),W6r=i(so),h3=n(so,"LI",{});var Axe=s(h3);h1e=n(Axe,"STRONG",{});var _Ct=s(h1e);Q6r=r(_Ct,"mt5"),_Ct.forEach(t),H6r=r(Axe," \u2014 "),mz=n(Axe,"A",{href:!0});var bCt=s(mz);U6r=r(bCt,"FlaxMT5ForConditionalGeneration"),bCt.forEach(t),J6r=r(Axe," (mT5 model)"),Axe.forEach(t),Y6r=i(so),u3=n(so,"LI",{});var Lxe=s(u3);u1e=n(Lxe,"STRONG",{});var vCt=s(u1e);K6r=r(vCt,"pegasus"),vCt.forEach(t),Z6r=r(Lxe," \u2014 "),fz=n(Lxe,"A",{href:!0});var TCt=s(fz);eAr=r(TCt,"FlaxPegasusForConditionalGeneration"),TCt.forEach(t),oAr=r(Lxe," (Pegasus model)"),Lxe.forEach(t),rAr=i(so),p3=n(so,"LI",{});var Bxe=s(p3);p1e=n(Bxe,"STRONG",{});var FCt=s(p1e);tAr=r(FCt,"t5"),FCt.forEach(t),aAr=r(Bxe," \u2014 "),gz=n(Bxe,"A",{href:!0});var CCt=s(gz);nAr=r(CCt,"FlaxT5ForConditionalGeneration"),CCt.forEach(t),sAr=r(Bxe," (T5 model)"),Bxe.forEach(t),so.forEach(t),lAr=i(Ra),_1e=n(Ra,"P",{});var MCt=s(_1e);iAr=r(MCt,"Examples:"),MCt.forEach(t),dAr=i(Ra),f(i7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),tSe=i(c),fm=n(c,"H2",{class:!0});var u$e=s(fm);_3=n(u$e,"A",{id:!0,class:!0,href:!0});var ECt=s(_3);b1e=n(ECt,"SPAN",{});var yCt=s(b1e);f(d7.$$.fragment,yCt),yCt.forEach(t),ECt.forEach(t),cAr=i(u$e),v1e=n(u$e,"SPAN",{});var wCt=s(v1e);mAr=r(wCt,"FlaxAutoModelForSequenceClassification"),wCt.forEach(t),u$e.forEach(t),aSe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);f(c7.$$.fragment,Ci),fAr=i(Ci),gm=n(Ci,"P",{});var RQ=s(gm);gAr=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T1e=n(RQ,"CODE",{});var ACt=s(T1e);hAr=r(ACt,"from_pretrained()"),ACt.forEach(t),uAr=r(RQ,"class method or the "),F1e=n(RQ,"CODE",{});var LCt=s(F1e);pAr=r(LCt,"from_config()"),LCt.forEach(t),_Ar=r(RQ,`class
method.`),RQ.forEach(t),bAr=i(Ci),m7=n(Ci,"P",{});var p$e=s(m7);vAr=r(p$e,"This class cannot be instantiated directly using "),C1e=n(p$e,"CODE",{});var BCt=s(C1e);TAr=r(BCt,"__init__()"),BCt.forEach(t),FAr=r(p$e," (throws an error)."),p$e.forEach(t),CAr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);f(f7.$$.fragment,Mi),MAr=i(Mi),M1e=n(Mi,"P",{});var xCt=s(M1e);EAr=r(xCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),xCt.forEach(t),yAr=i(Mi),hm=n(Mi,"P",{});var SQ=s(hm);wAr=r(SQ,`Note:
Loading a model from its configuration file does `),E1e=n(SQ,"STRONG",{});var kCt=s(E1e);AAr=r(kCt,"not"),kCt.forEach(t),LAr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=n(SQ,"CODE",{});var RCt=s(y1e);BAr=r(RCt,"from_pretrained()"),RCt.forEach(t),xAr=r(SQ,"to load the model weights."),SQ.forEach(t),kAr=i(Mi),w1e=n(Mi,"P",{});var SCt=s(w1e);RAr=r(SCt,"Examples:"),SCt.forEach(t),SAr=i(Mi),f(g7.$$.fragment,Mi),Mi.forEach(t),PAr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);f(h7.$$.fragment,Sa),$Ar=i(Sa),A1e=n(Sa,"P",{});var PCt=s(A1e);IAr=r(PCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PCt.forEach(t),jAr=i(Sa),Pn=n(Sa,"P",{});var ry=s(Pn);NAr=r(ry,"The model class to instantiate is selected based on the "),L1e=n(ry,"CODE",{});var $Ct=s(L1e);DAr=r($Ct,"model_type"),$Ct.forEach(t),qAr=r(ry,` property of the config object (either
passed as an argument or loaded from `),B1e=n(ry,"CODE",{});var ICt=s(B1e);GAr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),OAr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(ry,"CODE",{});var jCt=s(x1e);XAr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),VAr=r(ry,":"),ry.forEach(t),zAr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);b3=n(Ae,"LI",{});var xxe=s(b3);k1e=n(xxe,"STRONG",{});var NCt=s(k1e);WAr=r(NCt,"albert"),NCt.forEach(t),QAr=r(xxe," \u2014 "),hz=n(xxe,"A",{href:!0});var DCt=s(hz);HAr=r(DCt,"FlaxAlbertForSequenceClassification"),DCt.forEach(t),UAr=r(xxe," (ALBERT model)"),xxe.forEach(t),JAr=i(Ae),v3=n(Ae,"LI",{});var kxe=s(v3);R1e=n(kxe,"STRONG",{});var qCt=s(R1e);YAr=r(qCt,"bart"),qCt.forEach(t),KAr=r(kxe," \u2014 "),uz=n(kxe,"A",{href:!0});var GCt=s(uz);ZAr=r(GCt,"FlaxBartForSequenceClassification"),GCt.forEach(t),e0r=r(kxe," (BART model)"),kxe.forEach(t),o0r=i(Ae),T3=n(Ae,"LI",{});var Rxe=s(T3);S1e=n(Rxe,"STRONG",{});var OCt=s(S1e);r0r=r(OCt,"bert"),OCt.forEach(t),t0r=r(Rxe," \u2014 "),pz=n(Rxe,"A",{href:!0});var XCt=s(pz);a0r=r(XCt,"FlaxBertForSequenceClassification"),XCt.forEach(t),n0r=r(Rxe," (BERT model)"),Rxe.forEach(t),s0r=i(Ae),F3=n(Ae,"LI",{});var Sxe=s(F3);P1e=n(Sxe,"STRONG",{});var VCt=s(P1e);l0r=r(VCt,"big_bird"),VCt.forEach(t),i0r=r(Sxe," \u2014 "),_z=n(Sxe,"A",{href:!0});var zCt=s(_z);d0r=r(zCt,"FlaxBigBirdForSequenceClassification"),zCt.forEach(t),c0r=r(Sxe," (BigBird model)"),Sxe.forEach(t),m0r=i(Ae),C3=n(Ae,"LI",{});var Pxe=s(C3);$1e=n(Pxe,"STRONG",{});var WCt=s($1e);f0r=r(WCt,"distilbert"),WCt.forEach(t),g0r=r(Pxe," \u2014 "),bz=n(Pxe,"A",{href:!0});var QCt=s(bz);h0r=r(QCt,"FlaxDistilBertForSequenceClassification"),QCt.forEach(t),u0r=r(Pxe," (DistilBERT model)"),Pxe.forEach(t),p0r=i(Ae),M3=n(Ae,"LI",{});var $xe=s(M3);I1e=n($xe,"STRONG",{});var HCt=s(I1e);_0r=r(HCt,"electra"),HCt.forEach(t),b0r=r($xe," \u2014 "),vz=n($xe,"A",{href:!0});var UCt=s(vz);v0r=r(UCt,"FlaxElectraForSequenceClassification"),UCt.forEach(t),T0r=r($xe," (ELECTRA model)"),$xe.forEach(t),F0r=i(Ae),E3=n(Ae,"LI",{});var Ixe=s(E3);j1e=n(Ixe,"STRONG",{});var JCt=s(j1e);C0r=r(JCt,"mbart"),JCt.forEach(t),M0r=r(Ixe," \u2014 "),Tz=n(Ixe,"A",{href:!0});var YCt=s(Tz);E0r=r(YCt,"FlaxMBartForSequenceClassification"),YCt.forEach(t),y0r=r(Ixe," (mBART model)"),Ixe.forEach(t),w0r=i(Ae),y3=n(Ae,"LI",{});var jxe=s(y3);N1e=n(jxe,"STRONG",{});var KCt=s(N1e);A0r=r(KCt,"roberta"),KCt.forEach(t),L0r=r(jxe," \u2014 "),Fz=n(jxe,"A",{href:!0});var ZCt=s(Fz);B0r=r(ZCt,"FlaxRobertaForSequenceClassification"),ZCt.forEach(t),x0r=r(jxe," (RoBERTa model)"),jxe.forEach(t),k0r=i(Ae),w3=n(Ae,"LI",{});var Nxe=s(w3);D1e=n(Nxe,"STRONG",{});var eMt=s(D1e);R0r=r(eMt,"roformer"),eMt.forEach(t),S0r=r(Nxe," \u2014 "),Cz=n(Nxe,"A",{href:!0});var oMt=s(Cz);P0r=r(oMt,"FlaxRoFormerForSequenceClassification"),oMt.forEach(t),$0r=r(Nxe," (RoFormer model)"),Nxe.forEach(t),I0r=i(Ae),A3=n(Ae,"LI",{});var Dxe=s(A3);q1e=n(Dxe,"STRONG",{});var rMt=s(q1e);j0r=r(rMt,"xlm-roberta"),rMt.forEach(t),N0r=r(Dxe," \u2014 "),Mz=n(Dxe,"A",{href:!0});var tMt=s(Mz);D0r=r(tMt,"FlaxXLMRobertaForSequenceClassification"),tMt.forEach(t),q0r=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Ae.forEach(t),G0r=i(Sa),G1e=n(Sa,"P",{});var aMt=s(G1e);O0r=r(aMt,"Examples:"),aMt.forEach(t),X0r=i(Sa),f(u7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),nSe=i(c),um=n(c,"H2",{class:!0});var _$e=s(um);L3=n(_$e,"A",{id:!0,class:!0,href:!0});var nMt=s(L3);O1e=n(nMt,"SPAN",{});var sMt=s(O1e);f(p7.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),V0r=i(_$e),X1e=n(_$e,"SPAN",{});var lMt=s(X1e);z0r=r(lMt,"FlaxAutoModelForQuestionAnswering"),lMt.forEach(t),_$e.forEach(t),sSe=i(c),Nr=n(c,"DIV",{class:!0});var Ei=s(Nr);f(_7.$$.fragment,Ei),W0r=i(Ei),pm=n(Ei,"P",{});var PQ=s(pm);Q0r=r(PQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),V1e=n(PQ,"CODE",{});var iMt=s(V1e);H0r=r(iMt,"from_pretrained()"),iMt.forEach(t),U0r=r(PQ,"class method or the "),z1e=n(PQ,"CODE",{});var dMt=s(z1e);J0r=r(dMt,"from_config()"),dMt.forEach(t),Y0r=r(PQ,`class
method.`),PQ.forEach(t),K0r=i(Ei),b7=n(Ei,"P",{});var b$e=s(b7);Z0r=r(b$e,"This class cannot be instantiated directly using "),W1e=n(b$e,"CODE",{});var cMt=s(W1e);eLr=r(cMt,"__init__()"),cMt.forEach(t),oLr=r(b$e," (throws an error)."),b$e.forEach(t),rLr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);f(v7.$$.fragment,yi),tLr=i(yi),Q1e=n(yi,"P",{});var mMt=s(Q1e);aLr=r(mMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mMt.forEach(t),nLr=i(yi),_m=n(yi,"P",{});var $Q=s(_m);sLr=r($Q,`Note:
Loading a model from its configuration file does `),H1e=n($Q,"STRONG",{});var fMt=s(H1e);lLr=r(fMt,"not"),fMt.forEach(t),iLr=r($Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),U1e=n($Q,"CODE",{});var gMt=s(U1e);dLr=r(gMt,"from_pretrained()"),gMt.forEach(t),cLr=r($Q,"to load the model weights."),$Q.forEach(t),mLr=i(yi),J1e=n(yi,"P",{});var hMt=s(J1e);fLr=r(hMt,"Examples:"),hMt.forEach(t),gLr=i(yi),f(T7.$$.fragment,yi),yi.forEach(t),hLr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);f(F7.$$.fragment,Pa),uLr=i(Pa),Y1e=n(Pa,"P",{});var uMt=s(Y1e);pLr=r(uMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uMt.forEach(t),_Lr=i(Pa),$n=n(Pa,"P",{});var ty=s($n);bLr=r(ty,"The model class to instantiate is selected based on the "),K1e=n(ty,"CODE",{});var pMt=s(K1e);vLr=r(pMt,"model_type"),pMt.forEach(t),TLr=r(ty,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(ty,"CODE",{});var _Mt=s(Z1e);FLr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),CLr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(ty,"CODE",{});var bMt=s(eFe);MLr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),ELr=r(ty,":"),ty.forEach(t),yLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);B3=n(Le,"LI",{});var qxe=s(B3);oFe=n(qxe,"STRONG",{});var vMt=s(oFe);wLr=r(vMt,"albert"),vMt.forEach(t),ALr=r(qxe," \u2014 "),Ez=n(qxe,"A",{href:!0});var TMt=s(Ez);LLr=r(TMt,"FlaxAlbertForQuestionAnswering"),TMt.forEach(t),BLr=r(qxe," (ALBERT model)"),qxe.forEach(t),xLr=i(Le),x3=n(Le,"LI",{});var Gxe=s(x3);rFe=n(Gxe,"STRONG",{});var FMt=s(rFe);kLr=r(FMt,"bart"),FMt.forEach(t),RLr=r(Gxe," \u2014 "),yz=n(Gxe,"A",{href:!0});var CMt=s(yz);SLr=r(CMt,"FlaxBartForQuestionAnswering"),CMt.forEach(t),PLr=r(Gxe," (BART model)"),Gxe.forEach(t),$Lr=i(Le),k3=n(Le,"LI",{});var Oxe=s(k3);tFe=n(Oxe,"STRONG",{});var MMt=s(tFe);ILr=r(MMt,"bert"),MMt.forEach(t),jLr=r(Oxe," \u2014 "),wz=n(Oxe,"A",{href:!0});var EMt=s(wz);NLr=r(EMt,"FlaxBertForQuestionAnswering"),EMt.forEach(t),DLr=r(Oxe," (BERT model)"),Oxe.forEach(t),qLr=i(Le),R3=n(Le,"LI",{});var Xxe=s(R3);aFe=n(Xxe,"STRONG",{});var yMt=s(aFe);GLr=r(yMt,"big_bird"),yMt.forEach(t),OLr=r(Xxe," \u2014 "),Az=n(Xxe,"A",{href:!0});var wMt=s(Az);XLr=r(wMt,"FlaxBigBirdForQuestionAnswering"),wMt.forEach(t),VLr=r(Xxe," (BigBird model)"),Xxe.forEach(t),zLr=i(Le),S3=n(Le,"LI",{});var Vxe=s(S3);nFe=n(Vxe,"STRONG",{});var AMt=s(nFe);WLr=r(AMt,"distilbert"),AMt.forEach(t),QLr=r(Vxe," \u2014 "),Lz=n(Vxe,"A",{href:!0});var LMt=s(Lz);HLr=r(LMt,"FlaxDistilBertForQuestionAnswering"),LMt.forEach(t),ULr=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),JLr=i(Le),P3=n(Le,"LI",{});var zxe=s(P3);sFe=n(zxe,"STRONG",{});var BMt=s(sFe);YLr=r(BMt,"electra"),BMt.forEach(t),KLr=r(zxe," \u2014 "),Bz=n(zxe,"A",{href:!0});var xMt=s(Bz);ZLr=r(xMt,"FlaxElectraForQuestionAnswering"),xMt.forEach(t),e7r=r(zxe," (ELECTRA model)"),zxe.forEach(t),o7r=i(Le),$3=n(Le,"LI",{});var Wxe=s($3);lFe=n(Wxe,"STRONG",{});var kMt=s(lFe);r7r=r(kMt,"mbart"),kMt.forEach(t),t7r=r(Wxe," \u2014 "),xz=n(Wxe,"A",{href:!0});var RMt=s(xz);a7r=r(RMt,"FlaxMBartForQuestionAnswering"),RMt.forEach(t),n7r=r(Wxe," (mBART model)"),Wxe.forEach(t),s7r=i(Le),I3=n(Le,"LI",{});var Qxe=s(I3);iFe=n(Qxe,"STRONG",{});var SMt=s(iFe);l7r=r(SMt,"roberta"),SMt.forEach(t),i7r=r(Qxe," \u2014 "),kz=n(Qxe,"A",{href:!0});var PMt=s(kz);d7r=r(PMt,"FlaxRobertaForQuestionAnswering"),PMt.forEach(t),c7r=r(Qxe," (RoBERTa model)"),Qxe.forEach(t),m7r=i(Le),j3=n(Le,"LI",{});var Hxe=s(j3);dFe=n(Hxe,"STRONG",{});var $Mt=s(dFe);f7r=r($Mt,"roformer"),$Mt.forEach(t),g7r=r(Hxe," \u2014 "),Rz=n(Hxe,"A",{href:!0});var IMt=s(Rz);h7r=r(IMt,"FlaxRoFormerForQuestionAnswering"),IMt.forEach(t),u7r=r(Hxe," (RoFormer model)"),Hxe.forEach(t),p7r=i(Le),N3=n(Le,"LI",{});var Uxe=s(N3);cFe=n(Uxe,"STRONG",{});var jMt=s(cFe);_7r=r(jMt,"xlm-roberta"),jMt.forEach(t),b7r=r(Uxe," \u2014 "),Sz=n(Uxe,"A",{href:!0});var NMt=s(Sz);v7r=r(NMt,"FlaxXLMRobertaForQuestionAnswering"),NMt.forEach(t),T7r=r(Uxe," (XLM-RoBERTa model)"),Uxe.forEach(t),Le.forEach(t),F7r=i(Pa),mFe=n(Pa,"P",{});var DMt=s(mFe);C7r=r(DMt,"Examples:"),DMt.forEach(t),M7r=i(Pa),f(C7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),lSe=i(c),bm=n(c,"H2",{class:!0});var v$e=s(bm);D3=n(v$e,"A",{id:!0,class:!0,href:!0});var qMt=s(D3);fFe=n(qMt,"SPAN",{});var GMt=s(fFe);f(M7.$$.fragment,GMt),GMt.forEach(t),qMt.forEach(t),E7r=i(v$e),gFe=n(v$e,"SPAN",{});var OMt=s(gFe);y7r=r(OMt,"FlaxAutoModelForTokenClassification"),OMt.forEach(t),v$e.forEach(t),iSe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);f(E7.$$.fragment,wi),w7r=i(wi),vm=n(wi,"P",{});var IQ=s(vm);A7r=r(IQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hFe=n(IQ,"CODE",{});var XMt=s(hFe);L7r=r(XMt,"from_pretrained()"),XMt.forEach(t),B7r=r(IQ,"class method or the "),uFe=n(IQ,"CODE",{});var VMt=s(uFe);x7r=r(VMt,"from_config()"),VMt.forEach(t),k7r=r(IQ,`class
method.`),IQ.forEach(t),R7r=i(wi),y7=n(wi,"P",{});var T$e=s(y7);S7r=r(T$e,"This class cannot be instantiated directly using "),pFe=n(T$e,"CODE",{});var zMt=s(pFe);P7r=r(zMt,"__init__()"),zMt.forEach(t),$7r=r(T$e," (throws an error)."),T$e.forEach(t),I7r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);f(w7.$$.fragment,Ai),j7r=i(Ai),_Fe=n(Ai,"P",{});var WMt=s(_Fe);N7r=r(WMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WMt.forEach(t),D7r=i(Ai),Tm=n(Ai,"P",{});var jQ=s(Tm);q7r=r(jQ,`Note:
Loading a model from its configuration file does `),bFe=n(jQ,"STRONG",{});var QMt=s(bFe);G7r=r(QMt,"not"),QMt.forEach(t),O7r=r(jQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vFe=n(jQ,"CODE",{});var HMt=s(vFe);X7r=r(HMt,"from_pretrained()"),HMt.forEach(t),V7r=r(jQ,"to load the model weights."),jQ.forEach(t),z7r=i(Ai),TFe=n(Ai,"P",{});var UMt=s(TFe);W7r=r(UMt,"Examples:"),UMt.forEach(t),Q7r=i(Ai),f(A7.$$.fragment,Ai),Ai.forEach(t),H7r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);f(L7.$$.fragment,$a),U7r=i($a),FFe=n($a,"P",{});var JMt=s(FFe);J7r=r(JMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JMt.forEach(t),Y7r=i($a),In=n($a,"P",{});var ay=s(In);K7r=r(ay,"The model class to instantiate is selected based on the "),CFe=n(ay,"CODE",{});var YMt=s(CFe);Z7r=r(YMt,"model_type"),YMt.forEach(t),e8r=r(ay,` property of the config object (either
passed as an argument or loaded from `),MFe=n(ay,"CODE",{});var KMt=s(MFe);o8r=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),r8r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(ay,"CODE",{});var ZMt=s(EFe);t8r=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),a8r=r(ay,":"),ay.forEach(t),n8r=i($a),Se=n($a,"UL",{});var Oo=s(Se);q3=n(Oo,"LI",{});var Jxe=s(q3);yFe=n(Jxe,"STRONG",{});var e4t=s(yFe);s8r=r(e4t,"albert"),e4t.forEach(t),l8r=r(Jxe," \u2014 "),Pz=n(Jxe,"A",{href:!0});var o4t=s(Pz);i8r=r(o4t,"FlaxAlbertForTokenClassification"),o4t.forEach(t),d8r=r(Jxe," (ALBERT model)"),Jxe.forEach(t),c8r=i(Oo),G3=n(Oo,"LI",{});var Yxe=s(G3);wFe=n(Yxe,"STRONG",{});var r4t=s(wFe);m8r=r(r4t,"bert"),r4t.forEach(t),f8r=r(Yxe," \u2014 "),$z=n(Yxe,"A",{href:!0});var t4t=s($z);g8r=r(t4t,"FlaxBertForTokenClassification"),t4t.forEach(t),h8r=r(Yxe," (BERT model)"),Yxe.forEach(t),u8r=i(Oo),O3=n(Oo,"LI",{});var Kxe=s(O3);AFe=n(Kxe,"STRONG",{});var a4t=s(AFe);p8r=r(a4t,"big_bird"),a4t.forEach(t),_8r=r(Kxe," \u2014 "),Iz=n(Kxe,"A",{href:!0});var n4t=s(Iz);b8r=r(n4t,"FlaxBigBirdForTokenClassification"),n4t.forEach(t),v8r=r(Kxe," (BigBird model)"),Kxe.forEach(t),T8r=i(Oo),X3=n(Oo,"LI",{});var Zxe=s(X3);LFe=n(Zxe,"STRONG",{});var s4t=s(LFe);F8r=r(s4t,"distilbert"),s4t.forEach(t),C8r=r(Zxe," \u2014 "),jz=n(Zxe,"A",{href:!0});var l4t=s(jz);M8r=r(l4t,"FlaxDistilBertForTokenClassification"),l4t.forEach(t),E8r=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),y8r=i(Oo),V3=n(Oo,"LI",{});var eke=s(V3);BFe=n(eke,"STRONG",{});var i4t=s(BFe);w8r=r(i4t,"electra"),i4t.forEach(t),A8r=r(eke," \u2014 "),Nz=n(eke,"A",{href:!0});var d4t=s(Nz);L8r=r(d4t,"FlaxElectraForTokenClassification"),d4t.forEach(t),B8r=r(eke," (ELECTRA model)"),eke.forEach(t),x8r=i(Oo),z3=n(Oo,"LI",{});var oke=s(z3);xFe=n(oke,"STRONG",{});var c4t=s(xFe);k8r=r(c4t,"roberta"),c4t.forEach(t),R8r=r(oke," \u2014 "),Dz=n(oke,"A",{href:!0});var m4t=s(Dz);S8r=r(m4t,"FlaxRobertaForTokenClassification"),m4t.forEach(t),P8r=r(oke," (RoBERTa model)"),oke.forEach(t),$8r=i(Oo),W3=n(Oo,"LI",{});var rke=s(W3);kFe=n(rke,"STRONG",{});var f4t=s(kFe);I8r=r(f4t,"roformer"),f4t.forEach(t),j8r=r(rke," \u2014 "),qz=n(rke,"A",{href:!0});var g4t=s(qz);N8r=r(g4t,"FlaxRoFormerForTokenClassification"),g4t.forEach(t),D8r=r(rke," (RoFormer model)"),rke.forEach(t),q8r=i(Oo),Q3=n(Oo,"LI",{});var tke=s(Q3);RFe=n(tke,"STRONG",{});var h4t=s(RFe);G8r=r(h4t,"xlm-roberta"),h4t.forEach(t),O8r=r(tke," \u2014 "),Gz=n(tke,"A",{href:!0});var u4t=s(Gz);X8r=r(u4t,"FlaxXLMRobertaForTokenClassification"),u4t.forEach(t),V8r=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Oo.forEach(t),z8r=i($a),SFe=n($a,"P",{});var p4t=s(SFe);W8r=r(p4t,"Examples:"),p4t.forEach(t),Q8r=i($a),f(B7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),dSe=i(c),Fm=n(c,"H2",{class:!0});var F$e=s(Fm);H3=n(F$e,"A",{id:!0,class:!0,href:!0});var _4t=s(H3);PFe=n(_4t,"SPAN",{});var b4t=s(PFe);f(x7.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),H8r=i(F$e),$Fe=n(F$e,"SPAN",{});var v4t=s($Fe);U8r=r(v4t,"FlaxAutoModelForMultipleChoice"),v4t.forEach(t),F$e.forEach(t),cSe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);f(k7.$$.fragment,Li),J8r=i(Li),Cm=n(Li,"P",{});var NQ=s(Cm);Y8r=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IFe=n(NQ,"CODE",{});var T4t=s(IFe);K8r=r(T4t,"from_pretrained()"),T4t.forEach(t),Z8r=r(NQ,"class method or the "),jFe=n(NQ,"CODE",{});var F4t=s(jFe);e9r=r(F4t,"from_config()"),F4t.forEach(t),o9r=r(NQ,`class
method.`),NQ.forEach(t),r9r=i(Li),R7=n(Li,"P",{});var C$e=s(R7);t9r=r(C$e,"This class cannot be instantiated directly using "),NFe=n(C$e,"CODE",{});var C4t=s(NFe);a9r=r(C4t,"__init__()"),C4t.forEach(t),n9r=r(C$e," (throws an error)."),C$e.forEach(t),s9r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);f(S7.$$.fragment,Bi),l9r=i(Bi),DFe=n(Bi,"P",{});var M4t=s(DFe);i9r=r(M4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M4t.forEach(t),d9r=i(Bi),Mm=n(Bi,"P",{});var DQ=s(Mm);c9r=r(DQ,`Note:
Loading a model from its configuration file does `),qFe=n(DQ,"STRONG",{});var E4t=s(qFe);m9r=r(E4t,"not"),E4t.forEach(t),f9r=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GFe=n(DQ,"CODE",{});var y4t=s(GFe);g9r=r(y4t,"from_pretrained()"),y4t.forEach(t),h9r=r(DQ,"to load the model weights."),DQ.forEach(t),u9r=i(Bi),OFe=n(Bi,"P",{});var w4t=s(OFe);p9r=r(w4t,"Examples:"),w4t.forEach(t),_9r=i(Bi),f(P7.$$.fragment,Bi),Bi.forEach(t),b9r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);f($7.$$.fragment,Ia),v9r=i(Ia),XFe=n(Ia,"P",{});var A4t=s(XFe);T9r=r(A4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A4t.forEach(t),F9r=i(Ia),jn=n(Ia,"P",{});var ny=s(jn);C9r=r(ny,"The model class to instantiate is selected based on the "),VFe=n(ny,"CODE",{});var L4t=s(VFe);M9r=r(L4t,"model_type"),L4t.forEach(t),E9r=r(ny,` property of the config object (either
passed as an argument or loaded from `),zFe=n(ny,"CODE",{});var B4t=s(zFe);y9r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),w9r=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(ny,"CODE",{});var x4t=s(WFe);A9r=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),L9r=r(ny,":"),ny.forEach(t),B9r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);U3=n(Xo,"LI",{});var ake=s(U3);QFe=n(ake,"STRONG",{});var k4t=s(QFe);x9r=r(k4t,"albert"),k4t.forEach(t),k9r=r(ake," \u2014 "),Oz=n(ake,"A",{href:!0});var R4t=s(Oz);R9r=r(R4t,"FlaxAlbertForMultipleChoice"),R4t.forEach(t),S9r=r(ake," (ALBERT model)"),ake.forEach(t),P9r=i(Xo),J3=n(Xo,"LI",{});var nke=s(J3);HFe=n(nke,"STRONG",{});var S4t=s(HFe);$9r=r(S4t,"bert"),S4t.forEach(t),I9r=r(nke," \u2014 "),Xz=n(nke,"A",{href:!0});var P4t=s(Xz);j9r=r(P4t,"FlaxBertForMultipleChoice"),P4t.forEach(t),N9r=r(nke," (BERT model)"),nke.forEach(t),D9r=i(Xo),Y3=n(Xo,"LI",{});var ske=s(Y3);UFe=n(ske,"STRONG",{});var $4t=s(UFe);q9r=r($4t,"big_bird"),$4t.forEach(t),G9r=r(ske," \u2014 "),Vz=n(ske,"A",{href:!0});var I4t=s(Vz);O9r=r(I4t,"FlaxBigBirdForMultipleChoice"),I4t.forEach(t),X9r=r(ske," (BigBird model)"),ske.forEach(t),V9r=i(Xo),K3=n(Xo,"LI",{});var lke=s(K3);JFe=n(lke,"STRONG",{});var j4t=s(JFe);z9r=r(j4t,"distilbert"),j4t.forEach(t),W9r=r(lke," \u2014 "),zz=n(lke,"A",{href:!0});var N4t=s(zz);Q9r=r(N4t,"FlaxDistilBertForMultipleChoice"),N4t.forEach(t),H9r=r(lke," (DistilBERT model)"),lke.forEach(t),U9r=i(Xo),Z3=n(Xo,"LI",{});var ike=s(Z3);YFe=n(ike,"STRONG",{});var D4t=s(YFe);J9r=r(D4t,"electra"),D4t.forEach(t),Y9r=r(ike," \u2014 "),Wz=n(ike,"A",{href:!0});var q4t=s(Wz);K9r=r(q4t,"FlaxElectraForMultipleChoice"),q4t.forEach(t),Z9r=r(ike," (ELECTRA model)"),ike.forEach(t),eBr=i(Xo),e5=n(Xo,"LI",{});var dke=s(e5);KFe=n(dke,"STRONG",{});var G4t=s(KFe);oBr=r(G4t,"roberta"),G4t.forEach(t),rBr=r(dke," \u2014 "),Qz=n(dke,"A",{href:!0});var O4t=s(Qz);tBr=r(O4t,"FlaxRobertaForMultipleChoice"),O4t.forEach(t),aBr=r(dke," (RoBERTa model)"),dke.forEach(t),nBr=i(Xo),o5=n(Xo,"LI",{});var cke=s(o5);ZFe=n(cke,"STRONG",{});var X4t=s(ZFe);sBr=r(X4t,"roformer"),X4t.forEach(t),lBr=r(cke," \u2014 "),Hz=n(cke,"A",{href:!0});var V4t=s(Hz);iBr=r(V4t,"FlaxRoFormerForMultipleChoice"),V4t.forEach(t),dBr=r(cke," (RoFormer model)"),cke.forEach(t),cBr=i(Xo),r5=n(Xo,"LI",{});var mke=s(r5);eCe=n(mke,"STRONG",{});var z4t=s(eCe);mBr=r(z4t,"xlm-roberta"),z4t.forEach(t),fBr=r(mke," \u2014 "),Uz=n(mke,"A",{href:!0});var W4t=s(Uz);gBr=r(W4t,"FlaxXLMRobertaForMultipleChoice"),W4t.forEach(t),hBr=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),Xo.forEach(t),uBr=i(Ia),oCe=n(Ia,"P",{});var Q4t=s(oCe);pBr=r(Q4t,"Examples:"),Q4t.forEach(t),_Br=i(Ia),f(I7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),mSe=i(c),Em=n(c,"H2",{class:!0});var M$e=s(Em);t5=n(M$e,"A",{id:!0,class:!0,href:!0});var H4t=s(t5);rCe=n(H4t,"SPAN",{});var U4t=s(rCe);f(j7.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),bBr=i(M$e),tCe=n(M$e,"SPAN",{});var J4t=s(tCe);vBr=r(J4t,"FlaxAutoModelForNextSentencePrediction"),J4t.forEach(t),M$e.forEach(t),fSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);f(N7.$$.fragment,xi),TBr=i(xi),ym=n(xi,"P",{});var qQ=s(ym);FBr=r(qQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aCe=n(qQ,"CODE",{});var Y4t=s(aCe);CBr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),MBr=r(qQ,"class method or the "),nCe=n(qQ,"CODE",{});var K4t=s(nCe);EBr=r(K4t,"from_config()"),K4t.forEach(t),yBr=r(qQ,`class
method.`),qQ.forEach(t),wBr=i(xi),D7=n(xi,"P",{});var E$e=s(D7);ABr=r(E$e,"This class cannot be instantiated directly using "),sCe=n(E$e,"CODE",{});var Z4t=s(sCe);LBr=r(Z4t,"__init__()"),Z4t.forEach(t),BBr=r(E$e," (throws an error)."),E$e.forEach(t),xBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);f(q7.$$.fragment,ki),kBr=i(ki),lCe=n(ki,"P",{});var eEt=s(lCe);RBr=r(eEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eEt.forEach(t),SBr=i(ki),wm=n(ki,"P",{});var GQ=s(wm);PBr=r(GQ,`Note:
Loading a model from its configuration file does `),iCe=n(GQ,"STRONG",{});var oEt=s(iCe);$Br=r(oEt,"not"),oEt.forEach(t),IBr=r(GQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dCe=n(GQ,"CODE",{});var rEt=s(dCe);jBr=r(rEt,"from_pretrained()"),rEt.forEach(t),NBr=r(GQ,"to load the model weights."),GQ.forEach(t),DBr=i(ki),cCe=n(ki,"P",{});var tEt=s(cCe);qBr=r(tEt,"Examples:"),tEt.forEach(t),GBr=i(ki),f(G7.$$.fragment,ki),ki.forEach(t),OBr=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);f(O7.$$.fragment,ja),XBr=i(ja),mCe=n(ja,"P",{});var aEt=s(mCe);VBr=r(aEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aEt.forEach(t),zBr=i(ja),Nn=n(ja,"P",{});var sy=s(Nn);WBr=r(sy,"The model class to instantiate is selected based on the "),fCe=n(sy,"CODE",{});var nEt=s(fCe);QBr=r(nEt,"model_type"),nEt.forEach(t),HBr=r(sy,` property of the config object (either
passed as an argument or loaded from `),gCe=n(sy,"CODE",{});var sEt=s(gCe);UBr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),JBr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(sy,"CODE",{});var lEt=s(hCe);YBr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),KBr=r(sy,":"),sy.forEach(t),ZBr=i(ja),uCe=n(ja,"UL",{});var iEt=s(uCe);a5=n(iEt,"LI",{});var fke=s(a5);pCe=n(fke,"STRONG",{});var dEt=s(pCe);exr=r(dEt,"bert"),dEt.forEach(t),oxr=r(fke," \u2014 "),Jz=n(fke,"A",{href:!0});var cEt=s(Jz);rxr=r(cEt,"FlaxBertForNextSentencePrediction"),cEt.forEach(t),txr=r(fke," (BERT model)"),fke.forEach(t),iEt.forEach(t),axr=i(ja),_Ce=n(ja,"P",{});var mEt=s(_Ce);nxr=r(mEt,"Examples:"),mEt.forEach(t),sxr=i(ja),f(X7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),gSe=i(c),Am=n(c,"H2",{class:!0});var y$e=s(Am);n5=n(y$e,"A",{id:!0,class:!0,href:!0});var fEt=s(n5);bCe=n(fEt,"SPAN",{});var gEt=s(bCe);f(V7.$$.fragment,gEt),gEt.forEach(t),fEt.forEach(t),lxr=i(y$e),vCe=n(y$e,"SPAN",{});var hEt=s(vCe);ixr=r(hEt,"FlaxAutoModelForImageClassification"),hEt.forEach(t),y$e.forEach(t),hSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);f(z7.$$.fragment,Ri),dxr=i(Ri),Lm=n(Ri,"P",{});var OQ=s(Lm);cxr=r(OQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TCe=n(OQ,"CODE",{});var uEt=s(TCe);mxr=r(uEt,"from_pretrained()"),uEt.forEach(t),fxr=r(OQ,"class method or the "),FCe=n(OQ,"CODE",{});var pEt=s(FCe);gxr=r(pEt,"from_config()"),pEt.forEach(t),hxr=r(OQ,`class
method.`),OQ.forEach(t),uxr=i(Ri),W7=n(Ri,"P",{});var w$e=s(W7);pxr=r(w$e,"This class cannot be instantiated directly using "),CCe=n(w$e,"CODE",{});var _Et=s(CCe);_xr=r(_Et,"__init__()"),_Et.forEach(t),bxr=r(w$e," (throws an error)."),w$e.forEach(t),vxr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);f(Q7.$$.fragment,Si),Txr=i(Si),MCe=n(Si,"P",{});var bEt=s(MCe);Fxr=r(bEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bEt.forEach(t),Cxr=i(Si),Bm=n(Si,"P",{});var XQ=s(Bm);Mxr=r(XQ,`Note:
Loading a model from its configuration file does `),ECe=n(XQ,"STRONG",{});var vEt=s(ECe);Exr=r(vEt,"not"),vEt.forEach(t),yxr=r(XQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yCe=n(XQ,"CODE",{});var TEt=s(yCe);wxr=r(TEt,"from_pretrained()"),TEt.forEach(t),Axr=r(XQ,"to load the model weights."),XQ.forEach(t),Lxr=i(Si),wCe=n(Si,"P",{});var FEt=s(wCe);Bxr=r(FEt,"Examples:"),FEt.forEach(t),xxr=i(Si),f(H7.$$.fragment,Si),Si.forEach(t),kxr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Na=s(jo);f(U7.$$.fragment,Na),Rxr=i(Na),ACe=n(Na,"P",{});var CEt=s(ACe);Sxr=r(CEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CEt.forEach(t),Pxr=i(Na),Dn=n(Na,"P",{});var ly=s(Dn);$xr=r(ly,"The model class to instantiate is selected based on the "),LCe=n(ly,"CODE",{});var MEt=s(LCe);Ixr=r(MEt,"model_type"),MEt.forEach(t),jxr=r(ly,` property of the config object (either
passed as an argument or loaded from `),BCe=n(ly,"CODE",{});var EEt=s(BCe);Nxr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),Dxr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(ly,"CODE",{});var yEt=s(xCe);qxr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),Gxr=r(ly,":"),ly.forEach(t),Oxr=i(Na),J7=n(Na,"UL",{});var A$e=s(J7);s5=n(A$e,"LI",{});var gke=s(s5);kCe=n(gke,"STRONG",{});var wEt=s(kCe);Xxr=r(wEt,"beit"),wEt.forEach(t),Vxr=r(gke," \u2014 "),Yz=n(gke,"A",{href:!0});var AEt=s(Yz);zxr=r(AEt,"FlaxBeitForImageClassification"),AEt.forEach(t),Wxr=r(gke," (BEiT model)"),gke.forEach(t),Qxr=i(A$e),l5=n(A$e,"LI",{});var hke=s(l5);RCe=n(hke,"STRONG",{});var LEt=s(RCe);Hxr=r(LEt,"vit"),LEt.forEach(t),Uxr=r(hke," \u2014 "),Kz=n(hke,"A",{href:!0});var BEt=s(Kz);Jxr=r(BEt,"FlaxViTForImageClassification"),BEt.forEach(t),Yxr=r(hke," (ViT model)"),hke.forEach(t),A$e.forEach(t),Kxr=i(Na),SCe=n(Na,"P",{});var xEt=s(SCe);Zxr=r(xEt,"Examples:"),xEt.forEach(t),ekr=i(Na),f(Y7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),uSe=i(c),xm=n(c,"H2",{class:!0});var L$e=s(xm);i5=n(L$e,"A",{id:!0,class:!0,href:!0});var kEt=s(i5);PCe=n(kEt,"SPAN",{});var REt=s(PCe);f(K7.$$.fragment,REt),REt.forEach(t),kEt.forEach(t),okr=i(L$e),$Ce=n(L$e,"SPAN",{});var SEt=s($Ce);rkr=r(SEt,"FlaxAutoModelForVision2Seq"),SEt.forEach(t),L$e.forEach(t),pSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);f(Z7.$$.fragment,Pi),tkr=i(Pi),km=n(Pi,"P",{});var VQ=s(km);akr=r(VQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ICe=n(VQ,"CODE",{});var PEt=s(ICe);nkr=r(PEt,"from_pretrained()"),PEt.forEach(t),skr=r(VQ,"class method or the "),jCe=n(VQ,"CODE",{});var $Et=s(jCe);lkr=r($Et,"from_config()"),$Et.forEach(t),ikr=r(VQ,`class
method.`),VQ.forEach(t),dkr=i(Pi),e8=n(Pi,"P",{});var B$e=s(e8);ckr=r(B$e,"This class cannot be instantiated directly using "),NCe=n(B$e,"CODE",{});var IEt=s(NCe);mkr=r(IEt,"__init__()"),IEt.forEach(t),fkr=r(B$e," (throws an error)."),B$e.forEach(t),gkr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);f(o8.$$.fragment,$i),hkr=i($i),DCe=n($i,"P",{});var jEt=s(DCe);ukr=r(jEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jEt.forEach(t),pkr=i($i),Rm=n($i,"P",{});var zQ=s(Rm);_kr=r(zQ,`Note:
Loading a model from its configuration file does `),qCe=n(zQ,"STRONG",{});var NEt=s(qCe);bkr=r(NEt,"not"),NEt.forEach(t),vkr=r(zQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GCe=n(zQ,"CODE",{});var DEt=s(GCe);Tkr=r(DEt,"from_pretrained()"),DEt.forEach(t),Fkr=r(zQ,"to load the model weights."),zQ.forEach(t),Ckr=i($i),OCe=n($i,"P",{});var qEt=s(OCe);Mkr=r(qEt,"Examples:"),qEt.forEach(t),Ekr=i($i),f(r8.$$.fragment,$i),$i.forEach(t),ykr=i(Pi),No=n(Pi,"DIV",{class:!0});var Da=s(No);f(t8.$$.fragment,Da),wkr=i(Da),XCe=n(Da,"P",{});var GEt=s(XCe);Akr=r(GEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GEt.forEach(t),Lkr=i(Da),qn=n(Da,"P",{});var iy=s(qn);Bkr=r(iy,"The model class to instantiate is selected based on the "),VCe=n(iy,"CODE",{});var OEt=s(VCe);xkr=r(OEt,"model_type"),OEt.forEach(t),kkr=r(iy,` property of the config object (either
passed as an argument or loaded from `),zCe=n(iy,"CODE",{});var XEt=s(zCe);Rkr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),Skr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(iy,"CODE",{});var VEt=s(WCe);Pkr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),$kr=r(iy,":"),iy.forEach(t),Ikr=i(Da),QCe=n(Da,"UL",{});var zEt=s(QCe);d5=n(zEt,"LI",{});var uke=s(d5);HCe=n(uke,"STRONG",{});var WEt=s(HCe);jkr=r(WEt,"vision-encoder-decoder"),WEt.forEach(t),Nkr=r(uke," \u2014 "),Zz=n(uke,"A",{href:!0});var QEt=s(Zz);Dkr=r(QEt,"FlaxVisionEncoderDecoderModel"),QEt.forEach(t),qkr=r(uke," (Vision Encoder decoder model)"),uke.forEach(t),zEt.forEach(t),Gkr=i(Da),UCe=n(Da,"P",{});var HEt=s(UCe);Okr=r(HEt,"Examples:"),HEt.forEach(t),Xkr=i(Da),f(a8.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(a3t)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Dm,"id","extending-the-auto-classes"),d(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dm,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(i9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(d9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(c9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(m9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(f9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(g9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(h9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(u9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(p9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(_9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(b9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(v9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(T9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(F9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(C9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(M9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(E9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(y9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(w9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(A9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(L9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d($9,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(G9,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(W9,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(H9,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(Z9,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(eB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(rB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(sB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(dB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(fB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(gB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(hB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(uB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(pB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(_B,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(bB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(vB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(TB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(FB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(CB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(MB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(EB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(yB,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(wB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(AB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(LB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(BB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(xB,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(kB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(RB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(SB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(PB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d($B,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(IB,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(jB,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(NB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(DB,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(qB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(GB,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(OB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(XB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(VB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(zB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(WB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(QB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(HB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(UB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(JB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(YB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(KB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(Sg,"class","docstring"),d(Wo,"class","docstring"),d(Pg,"id","transformers.AutoTokenizer"),d(Pg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(ZB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(ex,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(ox,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(rx,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(tx,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(ax,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(nx,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(sx,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(lx,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(ix,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(dx,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(cx,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(mx,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(fx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(gx,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(hx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ux,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(px,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(_x,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(bx,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(vx,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Tx,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Fx,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Cx,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(Mx,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Ex,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(yx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(wx,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ax,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Lx,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Bx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(xx,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(kx,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Rx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Sx,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Px,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d($x,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Ix,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(jx,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Nx,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Dx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(qx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Gx,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Ox,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Xx,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Vx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(zx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Wx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Qx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Hx,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Ux,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Jx,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Yx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Kx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Zx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ek,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ok,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(rk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(tk,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ak,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(nk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(sk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(lk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ik,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(dk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(ck,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(mk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(fk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(gk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(hk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(uk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(pk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(_k,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(bk,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(vk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Tk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Fk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(Ck,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Mk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(yk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(wk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ak,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Lk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Bk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(xk,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(kk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Sk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(Ik,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Nk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Dk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(qk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Gk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(Ok,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Xk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Vk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Wk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Hk,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Uk,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Jk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Kk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Zk,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(eR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(oR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(tR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(sR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(iR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(dR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(cR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(mR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(fR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(gR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(ch,"class","docstring"),d(Qo,"class","docstring"),d(mh,"id","transformers.AutoFeatureExtractor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(hR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(uR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(pR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(_R,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(bR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(vR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(TR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(FR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(CR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(MR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(ER,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(yR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(AR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(LR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(RR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(kh,"class","docstring"),d(Ho,"class","docstring"),d(Rh,"id","transformers.AutoProcessor"),d(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(SR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(PR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d($R,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(IR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(jR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(NR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(DR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(qR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(GR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Oh,"class","docstring"),d(Uo,"class","docstring"),d(Xh,"id","transformers.AutoModel"),d(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(OR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(XR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(VR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(zR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(WR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(QR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(HR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(UR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(JR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(YR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(KR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(ZR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(eS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(oS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(rS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(tS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(aS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(nS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(sS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(lS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(iS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(dS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(cS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(mS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(fS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(gS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(hS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(uS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(pS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(_S,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(bS,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(vS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(TS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(FS,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(CS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(MS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(ES,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(yS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(wS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(AS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(LS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(BS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(xS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(kS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(RS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(SS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(PS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d($S,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(IS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(jS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(NS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(DS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(qS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(GS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(OS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(XS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(VS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(zS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(WS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(QS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(HS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(US,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(JS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(YS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(KS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(ZS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(eP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(oP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(rP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(tP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(aP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(nP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(sP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(lP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(iP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(dP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(cP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(mP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(fP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(gP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(hP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(uP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(pP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(_P,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(bP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(vP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(TP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(FP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(CP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(MP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(EP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(yP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(je,"class","docstring"),d(Jo,"class","docstring"),d(Ap,"id","transformers.AutoModelForPreTraining"),d(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ap,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(wP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(AP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(BP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(xP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(kP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(SP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(PP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d($P,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(IP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(jP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(NP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(DP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(qP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(GP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(OP,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(XP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(VP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(zP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(WP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(QP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(HP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(UP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(JP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(YP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(KP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(ZP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(e$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(o$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(r$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(t$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(a$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(n$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(s$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(l$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(i$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(d$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(c$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(h_,"id","transformers.AutoModelForCausalLM"),d(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h_,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(m$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(f$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(g$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(h$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(u$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(p$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(_$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(b$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(v$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(T$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(F$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(C$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(M$,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(E$,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(y$,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(w$,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(A$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(L$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(B$,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(x$,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(k$,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(R$,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(S$,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(P$,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d($$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(I$,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(j$,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(N$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(D$,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(q$,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(G$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(O$,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(X$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(V$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(z$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(Y_,"id","transformers.AutoModelForMaskedLM"),d(Y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y_,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(W$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(Q$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(H$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(U$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(J$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(K$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Z$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(eI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(oI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(rI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(tI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(aI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(nI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(sI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(lI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(iI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(dI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(cI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(mI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(fI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(gI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(hI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(uI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(pI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(_I,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(bI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(vI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(TI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(FI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(CI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(MI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(EI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(yI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(Pb,"id","transformers.AutoModelForSeq2SeqLM"),d(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pb,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(wI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(LI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(BI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(xI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(kI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(SI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(PI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d($I,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(II,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(jI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(NI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(DI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(qI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(GI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(Kb,"id","transformers.AutoModelForSequenceClassification"),d(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kb,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(OI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(XI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(VI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(zI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(WI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(QI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(HI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(UI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(JI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(YI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(KI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(ZI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(ej,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(oj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(rj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(tj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(aj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(nj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(sj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(lj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(ij,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(dj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(cj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(mj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(fj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(gj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(hj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(uj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Cj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(yj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(wj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Aj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Lj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Bj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Rj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(W2,"id","transformers.AutoModelForMultipleChoice"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(Pj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d($j,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Ij,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Nj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Dj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(qj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Gj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Oj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Xj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Vj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(zj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Wj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Qj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Hj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Uj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Jj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Yj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Kj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Zj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(eN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(oN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(rN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(tN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(aN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(nN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(sN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(lN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(Cv,"id","transformers.AutoModelForNextSentencePrediction"),d(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cv,"href","#transformers.AutoModelForNextSentencePrediction"),d(_d,"class","relative group"),d(Yr,"class","docstring"),d(iN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(dN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(cN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(mN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(fN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(Bv,"id","transformers.AutoModelForTokenClassification"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(gN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(hN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(uN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(pN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(_N,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(bN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(vN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(TN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(FN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(CN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(MN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(EN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(yN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(wN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(AN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(LN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(BN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(xN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(kN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(RN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(SN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(PN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d($N,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(IN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(jN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(NN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(DN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(qN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(GN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(ON,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(XN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(VN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(zN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(cT,"id","transformers.AutoModelForQuestionAnswering"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(WN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(QN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(HN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(UN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(JN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(YN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(KN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(ZN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(eD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(oD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(rD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(tD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(sD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(iD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(mD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(fD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(gD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(hD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(uD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(pD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(_D,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(bD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(vD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(FD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(CD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(MD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(ED,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(yD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(wD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(AD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(BD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(xD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(YT,"id","transformers.AutoModelForTableQuestionAnswering"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(kD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(e1,"id","transformers.AutoModelForImageClassification"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(RD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(SD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(PD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d($D,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(ID,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(jD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(ND,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(DD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(qD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(GD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(OD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(XD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(VD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(zD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(m1,"id","transformers.AutoModelForVision2Seq"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(WD,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(h1,"id","transformers.AutoModelForAudioClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(QD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(HD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(UD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(JD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(YD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(KD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(ZD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(eq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(E1,"id","transformers.AutoModelForAudioFrameClassification"),d(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E1,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(oq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(rq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(aq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(x1,"id","transformers.AutoModelForCTC"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(nq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(sq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(lq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(iq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(dq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(cq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(mq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(fq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(mr,"class","docstring"),d(q1,"id","transformers.AutoModelForSpeechSeq2Seq"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(gq,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(hq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(V1,"id","transformers.AutoModelForAudioXVector"),d(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V1,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(uq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(pq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(_q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(bq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(J1,"id","transformers.AutoModelForMaskedImageModeling"),d(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J1,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(vq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(Tq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(Fq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(oF,"id","transformers.AutoModelForObjectDetection"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(Cq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(ur,"class","docstring"),d(aF,"id","transformers.AutoModelForImageSegmentation"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Mq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(pr,"class","docstring"),d(lF,"id","transformers.AutoModelForSemanticSegmentation"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(mt,"class","docstring"),d(Eq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(yq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(mF,"id","transformers.AutoModelForInstanceSegmentation"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForInstanceSegmentation"),d(dc,"class","relative group"),d(ft,"class","docstring"),d(wq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(hF,"id","transformers.TFAutoModel"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.TFAutoModel"),d(fc,"class","relative group"),d(gt,"class","docstring"),d(Aq,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(Lq,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(Bq,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(xq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(kq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Rq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(Sq,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(Pq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d($q,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(Iq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(jq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(Nq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Dq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(qq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Gq,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(Oq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Xq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(Vq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(zq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Wq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(Qq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(Hq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Uq,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(Jq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(Yq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Kq,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(Zq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(eG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(oG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(rG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(tG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(aG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(nG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(sG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(lG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(iG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(dG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(cG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(mG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(fG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(gG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(hG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(pG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(tC,"id","transformers.TFAutoModelForPreTraining"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(ht,"class","docstring"),d(_G,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(bG,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(vG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(TG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(FG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(CG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(MG,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(EG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(yG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(wG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(AG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(LG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(BG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(xG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(RG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(SG,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(PG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d($G,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(IG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(jG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(NG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring"),d(Tr,"class","docstring"),d(wC,"id","transformers.TFAutoModelForCausalLM"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.TFAutoModelForCausalLM"),d(bc,"class","relative group"),d(ut,"class","docstring"),d(DG,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(qG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(GG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(OG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(VG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(zG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(QG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(HG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(UG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(JG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Fr,"class","docstring"),d(DC,"id","transformers.TFAutoModelForImageClassification"),d(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DC,"href","#transformers.TFAutoModelForImageClassification"),d(Fc,"class","relative group"),d(pt,"class","docstring"),d(YG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(KG,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(Cr,"class","docstring"),d(OC,"id","transformers.TFAutoModelForMaskedLM"),d(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OC,"href","#transformers.TFAutoModelForMaskedLM"),d(Ec,"class","relative group"),d(_t,"class","docstring"),d(ZG,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(eO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(oO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(rO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(tO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(aO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(nO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(lO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(iO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(dO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(cO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(mO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(fO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(gO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(hO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(uO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(pO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(_O,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(bO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(dM,"id","transformers.TFAutoModelForSeq2SeqLM"),d(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dM,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ac,"class","relative group"),d(bt,"class","docstring"),d(vO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(TO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(FO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(CO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(MO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(EO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(yO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(wO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(AO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(LO,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(TM,"id","transformers.TFAutoModelForSequenceClassification"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForSequenceClassification"),d(xc,"class","relative group"),d(vt,"class","docstring"),d(BO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(xO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(kO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(RO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(SO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d($O,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(jO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(NO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(DO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(qO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(XO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(VO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(WO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(QO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(eX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(QM,"id","transformers.TFAutoModelForMultipleChoice"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.TFAutoModelForMultipleChoice"),d(Sc,"class","relative group"),d(Tt,"class","docstring"),d(oX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(rX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(tX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(aX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(nX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(sX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(lX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(iX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(dX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(cX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(mX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(fX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(gX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(hX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(uX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(pX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(_X,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(m4,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Ic,"class","relative group"),d(Ft,"class","docstring"),d(bX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(g4,"id","transformers.TFAutoModelForTokenClassification"),d(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g4,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Ct,"class","docstring"),d(vX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(TX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(FX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(CX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(MX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(EX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(wX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(AX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(LX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(xX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(SX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d($X,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(P4,"id","transformers.TFAutoModelForQuestionAnswering"),d(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P4,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Oc,"class","relative group"),d(Mt,"class","docstring"),d(DX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(qX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(GX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(OX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(XX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(VX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(zX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(WX,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(QX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(HX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(UX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(JX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(YX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(KX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(ZX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(eV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(oV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(rV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(tV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(aV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(oE,"id","transformers.TFAutoModelForVision2Seq"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.TFAutoModelForVision2Seq"),d(zc,"class","relative group"),d(Et,"class","docstring"),d(nV,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(tE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Hc,"class","relative group"),d(yt,"class","docstring"),d(sV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(nE,"id","transformers.FlaxAutoModel"),d(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nE,"href","#transformers.FlaxAutoModel"),d(Yc,"class","relative group"),d(wt,"class","docstring"),d(lV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(iV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(dV,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(cV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(mV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(fV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(gV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(hV,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(uV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(pV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(_V,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(bV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(vV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(TV,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(FV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(CV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(MV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(EV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(yV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(wV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(AV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(LV,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(BV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(xV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(kV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(kE,"id","transformers.FlaxAutoModelForCausalLM"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.FlaxAutoModelForCausalLM"),d(em,"class","relative group"),d(At,"class","docstring"),d(RV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(SV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(PV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d($V,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(IV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(jE,"id","transformers.FlaxAutoModelForPreTraining"),d(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jE,"href","#transformers.FlaxAutoModelForPreTraining"),d(tm,"class","relative group"),d(Lt,"class","docstring"),d(jV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(NV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(qV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(GV,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(OV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(XV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(VV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WV,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(QV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(HV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(JE,"id","transformers.FlaxAutoModelForMaskedLM"),d(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(sm,"class","relative group"),d(Bt,"class","docstring"),d(UV,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(JV,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(YV,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(KV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ez,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(oz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(rz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(tz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(az,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(l3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(dm,"class","relative group"),d(xt,"class","docstring"),d(nz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(lz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(iz,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(dz,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(cz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(mz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(fz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(gz,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(_3,"id","transformers.FlaxAutoModelForSequenceClassification"),d(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(fm,"class","relative group"),d(kt,"class","docstring"),d(hz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(pz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(bz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(vz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Tz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Fz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(Cz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(Mz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(L3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(um,"class","relative group"),d(Rt,"class","docstring"),d(Ez,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yz,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Az,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Lz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Bz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(kz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Rz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Sz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Nr,"class","docstring"),d(D3,"id","transformers.FlaxAutoModelForTokenClassification"),d(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bm,"class","relative group"),d(St,"class","docstring"),d(Pz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d($z,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Iz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(jz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Nz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Dz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(qz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Gz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(H3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(Pt,"class","docstring"),d(Oz,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Xz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Vz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(zz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Wz,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Qz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Hz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Uz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(t5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d($t,"class","docstring"),d(Jz,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(n5,"id","transformers.FlaxAutoModelForImageClassification"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(It,"class","docstring"),d(Yz,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Kz,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Or,"class","docstring"),d(i5,"id","transformers.FlaxAutoModelForVision2Seq"),d(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i5,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(jt,"class","docstring"),d(Zz,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Xr,"class","docstring")},m(c,_){e(document.head,Z),b(c,io,_),b(c,de,_),e(de,Ee),e(Ee,lo),g(fe,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,$m,_),b(c,ma,_),e(ma,ji),e(ma,Ni),e(Ni,dy),e(ma,Im),b(c,Be,_),b(c,co,_),e(co,Di),e(co,Gn),e(Gn,cy),e(co,On),e(co,Xn),e(Xn,my),e(co,qi),e(co,Vn),e(Vn,fy),e(co,Gi),b(c,jm,_),g(qa,c,_),b(c,mo,_),b(c,pe,_),e(pe,r9),e(pe,Oi),e(Oi,t9),e(pe,a9),b(c,zo,_),b(c,Ga,_),e(Ga,n9),e(Ga,Nm),e(Nm,s9),e(Ga,x$e),b(c,pke,_),b(c,Xi,_),e(Xi,Dm),e(Dm,WQ),g(gy,WQ,null),e(Xi,k$e),e(Xi,QQ),e(QQ,R$e),b(c,_ke,_),b(c,zn,_),e(zn,S$e),e(zn,HQ),e(HQ,P$e),e(zn,$$e),e(zn,UQ),e(UQ,I$e),e(zn,j$e),b(c,bke,_),g(hy,c,_),b(c,vke,_),b(c,l9,_),e(l9,N$e),b(c,Tke,_),g(qm,c,_),b(c,Fke,_),b(c,Vi,_),e(Vi,Gm),e(Gm,JQ),g(uy,JQ,null),e(Vi,D$e),e(Vi,YQ),e(YQ,q$e),b(c,Cke,_),b(c,Wo,_),g(py,Wo,null),e(Wo,G$e),e(Wo,_y),e(_y,O$e),e(_y,i9),e(i9,X$e),e(_y,V$e),e(Wo,z$e),e(Wo,by),e(by,W$e),e(by,KQ),e(KQ,Q$e),e(by,H$e),e(Wo,U$e),e(Wo,fo),g(vy,fo,null),e(fo,J$e),e(fo,ZQ),e(ZQ,Y$e),e(fo,K$e),e(fo,zi),e(zi,Z$e),e(zi,eH),e(eH,eIe),e(zi,oIe),e(zi,oH),e(oH,rIe),e(zi,tIe),e(fo,aIe),e(fo,v),e(v,Om),e(Om,rH),e(rH,nIe),e(Om,sIe),e(Om,d9),e(d9,lIe),e(Om,iIe),e(v,dIe),e(v,Xm),e(Xm,tH),e(tH,cIe),e(Xm,mIe),e(Xm,c9),e(c9,fIe),e(Xm,gIe),e(v,hIe),e(v,Vm),e(Vm,aH),e(aH,uIe),e(Vm,pIe),e(Vm,m9),e(m9,_Ie),e(Vm,bIe),e(v,vIe),e(v,zm),e(zm,nH),e(nH,TIe),e(zm,FIe),e(zm,f9),e(f9,CIe),e(zm,MIe),e(v,EIe),e(v,Wm),e(Wm,sH),e(sH,yIe),e(Wm,wIe),e(Wm,g9),e(g9,AIe),e(Wm,LIe),e(v,BIe),e(v,Qm),e(Qm,lH),e(lH,xIe),e(Qm,kIe),e(Qm,h9),e(h9,RIe),e(Qm,SIe),e(v,PIe),e(v,Hm),e(Hm,iH),e(iH,$Ie),e(Hm,IIe),e(Hm,u9),e(u9,jIe),e(Hm,NIe),e(v,DIe),e(v,Um),e(Um,dH),e(dH,qIe),e(Um,GIe),e(Um,p9),e(p9,OIe),e(Um,XIe),e(v,VIe),e(v,Jm),e(Jm,cH),e(cH,zIe),e(Jm,WIe),e(Jm,_9),e(_9,QIe),e(Jm,HIe),e(v,UIe),e(v,Ym),e(Ym,mH),e(mH,JIe),e(Ym,YIe),e(Ym,b9),e(b9,KIe),e(Ym,ZIe),e(v,eje),e(v,Km),e(Km,fH),e(fH,oje),e(Km,rje),e(Km,v9),e(v9,tje),e(Km,aje),e(v,nje),e(v,Zm),e(Zm,gH),e(gH,sje),e(Zm,lje),e(Zm,T9),e(T9,ije),e(Zm,dje),e(v,cje),e(v,ef),e(ef,hH),e(hH,mje),e(ef,fje),e(ef,F9),e(F9,gje),e(ef,hje),e(v,uje),e(v,of),e(of,uH),e(uH,pje),e(of,_je),e(of,C9),e(C9,bje),e(of,vje),e(v,Tje),e(v,rf),e(rf,pH),e(pH,Fje),e(rf,Cje),e(rf,M9),e(M9,Mje),e(rf,Eje),e(v,yje),e(v,tf),e(tf,_H),e(_H,wje),e(tf,Aje),e(tf,E9),e(E9,Lje),e(tf,Bje),e(v,xje),e(v,af),e(af,bH),e(bH,kje),e(af,Rje),e(af,y9),e(y9,Sje),e(af,Pje),e(v,$je),e(v,nf),e(nf,vH),e(vH,Ije),e(nf,jje),e(nf,w9),e(w9,Nje),e(nf,Dje),e(v,qje),e(v,sf),e(sf,TH),e(TH,Gje),e(sf,Oje),e(sf,A9),e(A9,Xje),e(sf,Vje),e(v,zje),e(v,lf),e(lf,FH),e(FH,Wje),e(lf,Qje),e(lf,L9),e(L9,Hje),e(lf,Uje),e(v,Jje),e(v,df),e(df,CH),e(CH,Yje),e(df,Kje),e(df,B9),e(B9,Zje),e(df,eNe),e(v,oNe),e(v,cf),e(cf,MH),e(MH,rNe),e(cf,tNe),e(cf,x9),e(x9,aNe),e(cf,nNe),e(v,sNe),e(v,mf),e(mf,EH),e(EH,lNe),e(mf,iNe),e(mf,k9),e(k9,dNe),e(mf,cNe),e(v,mNe),e(v,ff),e(ff,yH),e(yH,fNe),e(ff,gNe),e(ff,R9),e(R9,hNe),e(ff,uNe),e(v,pNe),e(v,gf),e(gf,wH),e(wH,_Ne),e(gf,bNe),e(gf,S9),e(S9,vNe),e(gf,TNe),e(v,FNe),e(v,hf),e(hf,AH),e(AH,CNe),e(hf,MNe),e(hf,P9),e(P9,ENe),e(hf,yNe),e(v,wNe),e(v,uf),e(uf,LH),e(LH,ANe),e(uf,LNe),e(uf,$9),e($9,BNe),e(uf,xNe),e(v,kNe),e(v,pf),e(pf,BH),e(BH,RNe),e(pf,SNe),e(pf,I9),e(I9,PNe),e(pf,$Ne),e(v,INe),e(v,_f),e(_f,xH),e(xH,jNe),e(_f,NNe),e(_f,j9),e(j9,DNe),e(_f,qNe),e(v,GNe),e(v,bf),e(bf,kH),e(kH,ONe),e(bf,XNe),e(bf,N9),e(N9,VNe),e(bf,zNe),e(v,WNe),e(v,vf),e(vf,RH),e(RH,QNe),e(vf,HNe),e(vf,D9),e(D9,UNe),e(vf,JNe),e(v,YNe),e(v,Tf),e(Tf,SH),e(SH,KNe),e(Tf,ZNe),e(Tf,q9),e(q9,eDe),e(Tf,oDe),e(v,rDe),e(v,Ff),e(Ff,PH),e(PH,tDe),e(Ff,aDe),e(Ff,G9),e(G9,nDe),e(Ff,sDe),e(v,lDe),e(v,Cf),e(Cf,$H),e($H,iDe),e(Cf,dDe),e(Cf,O9),e(O9,cDe),e(Cf,mDe),e(v,fDe),e(v,Mf),e(Mf,IH),e(IH,gDe),e(Mf,hDe),e(Mf,X9),e(X9,uDe),e(Mf,pDe),e(v,_De),e(v,Ef),e(Ef,jH),e(jH,bDe),e(Ef,vDe),e(Ef,V9),e(V9,TDe),e(Ef,FDe),e(v,CDe),e(v,yf),e(yf,NH),e(NH,MDe),e(yf,EDe),e(yf,z9),e(z9,yDe),e(yf,wDe),e(v,ADe),e(v,wf),e(wf,DH),e(DH,LDe),e(wf,BDe),e(wf,W9),e(W9,xDe),e(wf,kDe),e(v,RDe),e(v,Af),e(Af,qH),e(qH,SDe),e(Af,PDe),e(Af,Q9),e(Q9,$De),e(Af,IDe),e(v,jDe),e(v,Lf),e(Lf,GH),e(GH,NDe),e(Lf,DDe),e(Lf,H9),e(H9,qDe),e(Lf,GDe),e(v,ODe),e(v,Bf),e(Bf,OH),e(OH,XDe),e(Bf,VDe),e(Bf,U9),e(U9,zDe),e(Bf,WDe),e(v,QDe),e(v,xf),e(xf,XH),e(XH,HDe),e(xf,UDe),e(xf,J9),e(J9,JDe),e(xf,YDe),e(v,KDe),e(v,kf),e(kf,VH),e(VH,ZDe),e(kf,eqe),e(kf,Y9),e(Y9,oqe),e(kf,rqe),e(v,tqe),e(v,Rf),e(Rf,zH),e(zH,aqe),e(Rf,nqe),e(Rf,K9),e(K9,sqe),e(Rf,lqe),e(v,iqe),e(v,Sf),e(Sf,WH),e(WH,dqe),e(Sf,cqe),e(Sf,Z9),e(Z9,mqe),e(Sf,fqe),e(v,gqe),e(v,Pf),e(Pf,QH),e(QH,hqe),e(Pf,uqe),e(Pf,eB),e(eB,pqe),e(Pf,_qe),e(v,bqe),e(v,$f),e($f,HH),e(HH,vqe),e($f,Tqe),e($f,oB),e(oB,Fqe),e($f,Cqe),e(v,Mqe),e(v,If),e(If,UH),e(UH,Eqe),e(If,yqe),e(If,rB),e(rB,wqe),e(If,Aqe),e(v,Lqe),e(v,jf),e(jf,JH),e(JH,Bqe),e(jf,xqe),e(jf,tB),e(tB,kqe),e(jf,Rqe),e(v,Sqe),e(v,Nf),e(Nf,YH),e(YH,Pqe),e(Nf,$qe),e(Nf,aB),e(aB,Iqe),e(Nf,jqe),e(v,Nqe),e(v,Df),e(Df,KH),e(KH,Dqe),e(Df,qqe),e(Df,nB),e(nB,Gqe),e(Df,Oqe),e(v,Xqe),e(v,qf),e(qf,ZH),e(ZH,Vqe),e(qf,zqe),e(qf,sB),e(sB,Wqe),e(qf,Qqe),e(v,Hqe),e(v,Gf),e(Gf,eU),e(eU,Uqe),e(Gf,Jqe),e(Gf,lB),e(lB,Yqe),e(Gf,Kqe),e(v,Zqe),e(v,Of),e(Of,oU),e(oU,eGe),e(Of,oGe),e(Of,iB),e(iB,rGe),e(Of,tGe),e(v,aGe),e(v,Xf),e(Xf,rU),e(rU,nGe),e(Xf,sGe),e(Xf,dB),e(dB,lGe),e(Xf,iGe),e(v,dGe),e(v,Vf),e(Vf,tU),e(tU,cGe),e(Vf,mGe),e(Vf,cB),e(cB,fGe),e(Vf,gGe),e(v,hGe),e(v,zf),e(zf,aU),e(aU,uGe),e(zf,pGe),e(zf,mB),e(mB,_Ge),e(zf,bGe),e(v,vGe),e(v,Wf),e(Wf,nU),e(nU,TGe),e(Wf,FGe),e(Wf,fB),e(fB,CGe),e(Wf,MGe),e(v,EGe),e(v,Qf),e(Qf,sU),e(sU,yGe),e(Qf,wGe),e(Qf,gB),e(gB,AGe),e(Qf,LGe),e(v,BGe),e(v,Hf),e(Hf,lU),e(lU,xGe),e(Hf,kGe),e(Hf,hB),e(hB,RGe),e(Hf,SGe),e(v,PGe),e(v,Uf),e(Uf,iU),e(iU,$Ge),e(Uf,IGe),e(Uf,uB),e(uB,jGe),e(Uf,NGe),e(v,DGe),e(v,Jf),e(Jf,dU),e(dU,qGe),e(Jf,GGe),e(Jf,pB),e(pB,OGe),e(Jf,XGe),e(v,VGe),e(v,Yf),e(Yf,cU),e(cU,zGe),e(Yf,WGe),e(Yf,_B),e(_B,QGe),e(Yf,HGe),e(v,UGe),e(v,Kf),e(Kf,mU),e(mU,JGe),e(Kf,YGe),e(Kf,bB),e(bB,KGe),e(Kf,ZGe),e(v,eOe),e(v,Zf),e(Zf,fU),e(fU,oOe),e(Zf,rOe),e(Zf,vB),e(vB,tOe),e(Zf,aOe),e(v,nOe),e(v,eg),e(eg,gU),e(gU,sOe),e(eg,lOe),e(eg,TB),e(TB,iOe),e(eg,dOe),e(v,cOe),e(v,og),e(og,hU),e(hU,mOe),e(og,fOe),e(og,FB),e(FB,gOe),e(og,hOe),e(v,uOe),e(v,rg),e(rg,uU),e(uU,pOe),e(rg,_Oe),e(rg,CB),e(CB,bOe),e(rg,vOe),e(v,TOe),e(v,tg),e(tg,pU),e(pU,FOe),e(tg,COe),e(tg,MB),e(MB,MOe),e(tg,EOe),e(v,yOe),e(v,ag),e(ag,_U),e(_U,wOe),e(ag,AOe),e(ag,EB),e(EB,LOe),e(ag,BOe),e(v,xOe),e(v,ng),e(ng,bU),e(bU,kOe),e(ng,ROe),e(ng,yB),e(yB,SOe),e(ng,POe),e(v,$Oe),e(v,sg),e(sg,vU),e(vU,IOe),e(sg,jOe),e(sg,wB),e(wB,NOe),e(sg,DOe),e(v,qOe),e(v,lg),e(lg,TU),e(TU,GOe),e(lg,OOe),e(lg,AB),e(AB,XOe),e(lg,VOe),e(v,zOe),e(v,ig),e(ig,FU),e(FU,WOe),e(ig,QOe),e(ig,LB),e(LB,HOe),e(ig,UOe),e(v,JOe),e(v,dg),e(dg,CU),e(CU,YOe),e(dg,KOe),e(dg,BB),e(BB,ZOe),e(dg,eXe),e(v,oXe),e(v,cg),e(cg,MU),e(MU,rXe),e(cg,tXe),e(cg,xB),e(xB,aXe),e(cg,nXe),e(v,sXe),e(v,mg),e(mg,EU),e(EU,lXe),e(mg,iXe),e(mg,kB),e(kB,dXe),e(mg,cXe),e(v,mXe),e(v,fg),e(fg,yU),e(yU,fXe),e(fg,gXe),e(fg,RB),e(RB,hXe),e(fg,uXe),e(v,pXe),e(v,gg),e(gg,wU),e(wU,_Xe),e(gg,bXe),e(gg,SB),e(SB,vXe),e(gg,TXe),e(v,FXe),e(v,hg),e(hg,AU),e(AU,CXe),e(hg,MXe),e(hg,PB),e(PB,EXe),e(hg,yXe),e(v,wXe),e(v,ug),e(ug,LU),e(LU,AXe),e(ug,LXe),e(ug,$B),e($B,BXe),e(ug,xXe),e(v,kXe),e(v,pg),e(pg,BU),e(BU,RXe),e(pg,SXe),e(pg,IB),e(IB,PXe),e(pg,$Xe),e(v,IXe),e(v,_g),e(_g,xU),e(xU,jXe),e(_g,NXe),e(_g,jB),e(jB,DXe),e(_g,qXe),e(v,GXe),e(v,bg),e(bg,kU),e(kU,OXe),e(bg,XXe),e(bg,NB),e(NB,VXe),e(bg,zXe),e(v,WXe),e(v,vg),e(vg,RU),e(RU,QXe),e(vg,HXe),e(vg,DB),e(DB,UXe),e(vg,JXe),e(v,YXe),e(v,Tg),e(Tg,SU),e(SU,KXe),e(Tg,ZXe),e(Tg,qB),e(qB,eVe),e(Tg,oVe),e(v,rVe),e(v,Fg),e(Fg,PU),e(PU,tVe),e(Fg,aVe),e(Fg,GB),e(GB,nVe),e(Fg,sVe),e(v,lVe),e(v,Cg),e(Cg,$U),e($U,iVe),e(Cg,dVe),e(Cg,OB),e(OB,cVe),e(Cg,mVe),e(v,fVe),e(v,Mg),e(Mg,IU),e(IU,gVe),e(Mg,hVe),e(Mg,XB),e(XB,uVe),e(Mg,pVe),e(v,_Ve),e(v,Eg),e(Eg,jU),e(jU,bVe),e(Eg,vVe),e(Eg,VB),e(VB,TVe),e(Eg,FVe),e(v,CVe),e(v,yg),e(yg,NU),e(NU,MVe),e(yg,EVe),e(yg,zB),e(zB,yVe),e(yg,wVe),e(v,AVe),e(v,wg),e(wg,DU),e(DU,LVe),e(wg,BVe),e(wg,WB),e(WB,xVe),e(wg,kVe),e(v,RVe),e(v,Ag),e(Ag,qU),e(qU,SVe),e(Ag,PVe),e(Ag,QB),e(QB,$Ve),e(Ag,IVe),e(v,jVe),e(v,Lg),e(Lg,GU),e(GU,NVe),e(Lg,DVe),e(Lg,HB),e(HB,qVe),e(Lg,GVe),e(v,OVe),e(v,Bg),e(Bg,OU),e(OU,XVe),e(Bg,VVe),e(Bg,UB),e(UB,zVe),e(Bg,WVe),e(v,QVe),e(v,xg),e(xg,XU),e(XU,HVe),e(xg,UVe),e(xg,JB),e(JB,JVe),e(xg,YVe),e(v,KVe),e(v,kg),e(kg,VU),e(VU,ZVe),e(kg,eze),e(kg,YB),e(YB,oze),e(kg,rze),e(v,tze),e(v,Rg),e(Rg,zU),e(zU,aze),e(Rg,nze),e(Rg,KB),e(KB,sze),e(Rg,lze),e(fo,ize),e(fo,WU),e(WU,dze),e(fo,cze),g(Ty,fo,null),e(Wo,mze),e(Wo,Sg),g(Fy,Sg,null),e(Sg,fze),e(Sg,QU),e(QU,gze),b(c,Mke,_),b(c,Wi,_),e(Wi,Pg),e(Pg,HU),g(Cy,HU,null),e(Wi,hze),e(Wi,UU),e(UU,uze),b(c,Eke,_),b(c,Qo,_),g(My,Qo,null),e(Qo,pze),e(Qo,Ey),e(Ey,_ze),e(Ey,ZB),e(ZB,bze),e(Ey,vze),e(Qo,Tze),e(Qo,yy),e(yy,Fze),e(yy,JU),e(JU,Cze),e(yy,Mze),e(Qo,Eze),e(Qo,go),g(wy,go,null),e(go,yze),e(go,YU),e(YU,wze),e(go,Aze),e(go,Oa),e(Oa,Lze),e(Oa,KU),e(KU,Bze),e(Oa,xze),e(Oa,ZU),e(ZU,kze),e(Oa,Rze),e(Oa,eJ),e(eJ,Sze),e(Oa,Pze),e(go,$ze),e(go,E),e(E,Wn),e(Wn,oJ),e(oJ,Ize),e(Wn,jze),e(Wn,ex),e(ex,Nze),e(Wn,Dze),e(Wn,ox),e(ox,qze),e(Wn,Gze),e(E,Oze),e(E,Qn),e(Qn,rJ),e(rJ,Xze),e(Qn,Vze),e(Qn,rx),e(rx,zze),e(Qn,Wze),e(Qn,tx),e(tx,Qze),e(Qn,Hze),e(E,Uze),e(E,Hn),e(Hn,tJ),e(tJ,Jze),e(Hn,Yze),e(Hn,ax),e(ax,Kze),e(Hn,Zze),e(Hn,nx),e(nx,eWe),e(Hn,oWe),e(E,rWe),e(E,$g),e($g,aJ),e(aJ,tWe),e($g,aWe),e($g,sx),e(sx,nWe),e($g,sWe),e(E,lWe),e(E,Un),e(Un,nJ),e(nJ,iWe),e(Un,dWe),e(Un,lx),e(lx,cWe),e(Un,mWe),e(Un,ix),e(ix,fWe),e(Un,gWe),e(E,hWe),e(E,Ig),e(Ig,sJ),e(sJ,uWe),e(Ig,pWe),e(Ig,dx),e(dx,_We),e(Ig,bWe),e(E,vWe),e(E,jg),e(jg,lJ),e(lJ,TWe),e(jg,FWe),e(jg,cx),e(cx,CWe),e(jg,MWe),e(E,EWe),e(E,Ng),e(Ng,iJ),e(iJ,yWe),e(Ng,wWe),e(Ng,mx),e(mx,AWe),e(Ng,LWe),e(E,BWe),e(E,Jn),e(Jn,dJ),e(dJ,xWe),e(Jn,kWe),e(Jn,fx),e(fx,RWe),e(Jn,SWe),e(Jn,gx),e(gx,PWe),e(Jn,$We),e(E,IWe),e(E,Yn),e(Yn,cJ),e(cJ,jWe),e(Yn,NWe),e(Yn,hx),e(hx,DWe),e(Yn,qWe),e(Yn,ux),e(ux,GWe),e(Yn,OWe),e(E,XWe),e(E,Kn),e(Kn,mJ),e(mJ,VWe),e(Kn,zWe),e(Kn,px),e(px,WWe),e(Kn,QWe),e(Kn,_x),e(_x,HWe),e(Kn,UWe),e(E,JWe),e(E,Dg),e(Dg,fJ),e(fJ,YWe),e(Dg,KWe),e(Dg,bx),e(bx,ZWe),e(Dg,eQe),e(E,oQe),e(E,qg),e(qg,gJ),e(gJ,rQe),e(qg,tQe),e(qg,vx),e(vx,aQe),e(qg,nQe),e(E,sQe),e(E,Zn),e(Zn,hJ),e(hJ,lQe),e(Zn,iQe),e(Zn,Tx),e(Tx,dQe),e(Zn,cQe),e(Zn,Fx),e(Fx,mQe),e(Zn,fQe),e(E,gQe),e(E,Gg),e(Gg,uJ),e(uJ,hQe),e(Gg,uQe),e(Gg,Cx),e(Cx,pQe),e(Gg,_Qe),e(E,bQe),e(E,es),e(es,pJ),e(pJ,vQe),e(es,TQe),e(es,Mx),e(Mx,FQe),e(es,CQe),e(es,Ex),e(Ex,MQe),e(es,EQe),e(E,yQe),e(E,os),e(os,_J),e(_J,wQe),e(os,AQe),e(os,yx),e(yx,LQe),e(os,BQe),e(os,wx),e(wx,xQe),e(os,kQe),e(E,RQe),e(E,rs),e(rs,bJ),e(bJ,SQe),e(rs,PQe),e(rs,Ax),e(Ax,$Qe),e(rs,IQe),e(rs,vJ),e(vJ,jQe),e(rs,NQe),e(E,DQe),e(E,Og),e(Og,TJ),e(TJ,qQe),e(Og,GQe),e(Og,Lx),e(Lx,OQe),e(Og,XQe),e(E,VQe),e(E,ts),e(ts,FJ),e(FJ,zQe),e(ts,WQe),e(ts,Bx),e(Bx,QQe),e(ts,HQe),e(ts,xx),e(xx,UQe),e(ts,JQe),e(E,YQe),e(E,Xg),e(Xg,CJ),e(CJ,KQe),e(Xg,ZQe),e(Xg,kx),e(kx,eHe),e(Xg,oHe),e(E,rHe),e(E,as),e(as,MJ),e(MJ,tHe),e(as,aHe),e(as,Rx),e(Rx,nHe),e(as,sHe),e(as,Sx),e(Sx,lHe),e(as,iHe),e(E,dHe),e(E,ns),e(ns,EJ),e(EJ,cHe),e(ns,mHe),e(ns,Px),e(Px,fHe),e(ns,gHe),e(ns,$x),e($x,hHe),e(ns,uHe),e(E,pHe),e(E,ss),e(ss,yJ),e(yJ,_He),e(ss,bHe),e(ss,Ix),e(Ix,vHe),e(ss,THe),e(ss,jx),e(jx,FHe),e(ss,CHe),e(E,MHe),e(E,Vg),e(Vg,wJ),e(wJ,EHe),e(Vg,yHe),e(Vg,Nx),e(Nx,wHe),e(Vg,AHe),e(E,LHe),e(E,ls),e(ls,AJ),e(AJ,BHe),e(ls,xHe),e(ls,Dx),e(Dx,kHe),e(ls,RHe),e(ls,qx),e(qx,SHe),e(ls,PHe),e(E,$He),e(E,zg),e(zg,LJ),e(LJ,IHe),e(zg,jHe),e(zg,Gx),e(Gx,NHe),e(zg,DHe),e(E,qHe),e(E,is),e(is,BJ),e(BJ,GHe),e(is,OHe),e(is,Ox),e(Ox,XHe),e(is,VHe),e(is,Xx),e(Xx,zHe),e(is,WHe),e(E,QHe),e(E,ds),e(ds,xJ),e(xJ,HHe),e(ds,UHe),e(ds,Vx),e(Vx,JHe),e(ds,YHe),e(ds,zx),e(zx,KHe),e(ds,ZHe),e(E,eUe),e(E,cs),e(cs,kJ),e(kJ,oUe),e(cs,rUe),e(cs,Wx),e(Wx,tUe),e(cs,aUe),e(cs,Qx),e(Qx,nUe),e(cs,sUe),e(E,lUe),e(E,ms),e(ms,RJ),e(RJ,iUe),e(ms,dUe),e(ms,Hx),e(Hx,cUe),e(ms,mUe),e(ms,Ux),e(Ux,fUe),e(ms,gUe),e(E,hUe),e(E,Wg),e(Wg,SJ),e(SJ,uUe),e(Wg,pUe),e(Wg,Jx),e(Jx,_Ue),e(Wg,bUe),e(E,vUe),e(E,fs),e(fs,PJ),e(PJ,TUe),e(fs,FUe),e(fs,Yx),e(Yx,CUe),e(fs,MUe),e(fs,Kx),e(Kx,EUe),e(fs,yUe),e(E,wUe),e(E,gs),e(gs,$J),e($J,AUe),e(gs,LUe),e(gs,Zx),e(Zx,BUe),e(gs,xUe),e(gs,ek),e(ek,kUe),e(gs,RUe),e(E,SUe),e(E,hs),e(hs,IJ),e(IJ,PUe),e(hs,$Ue),e(hs,ok),e(ok,IUe),e(hs,jUe),e(hs,rk),e(rk,NUe),e(hs,DUe),e(E,qUe),e(E,us),e(us,jJ),e(jJ,GUe),e(us,OUe),e(us,tk),e(tk,XUe),e(us,VUe),e(us,ak),e(ak,zUe),e(us,WUe),e(E,QUe),e(E,ps),e(ps,NJ),e(NJ,HUe),e(ps,UUe),e(ps,nk),e(nk,JUe),e(ps,YUe),e(ps,sk),e(sk,KUe),e(ps,ZUe),e(E,eJe),e(E,_s),e(_s,DJ),e(DJ,oJe),e(_s,rJe),e(_s,lk),e(lk,tJe),e(_s,aJe),e(_s,ik),e(ik,nJe),e(_s,sJe),e(E,lJe),e(E,Qg),e(Qg,qJ),e(qJ,iJe),e(Qg,dJe),e(Qg,dk),e(dk,cJe),e(Qg,mJe),e(E,fJe),e(E,bs),e(bs,GJ),e(GJ,gJe),e(bs,hJe),e(bs,ck),e(ck,uJe),e(bs,pJe),e(bs,mk),e(mk,_Je),e(bs,bJe),e(E,vJe),e(E,Hg),e(Hg,OJ),e(OJ,TJe),e(Hg,FJe),e(Hg,fk),e(fk,CJe),e(Hg,MJe),e(E,EJe),e(E,Ug),e(Ug,XJ),e(XJ,yJe),e(Ug,wJe),e(Ug,gk),e(gk,AJe),e(Ug,LJe),e(E,BJe),e(E,vs),e(vs,VJ),e(VJ,xJe),e(vs,kJe),e(vs,hk),e(hk,RJe),e(vs,SJe),e(vs,uk),e(uk,PJe),e(vs,$Je),e(E,IJe),e(E,Ts),e(Ts,zJ),e(zJ,jJe),e(Ts,NJe),e(Ts,pk),e(pk,DJe),e(Ts,qJe),e(Ts,_k),e(_k,GJe),e(Ts,OJe),e(E,XJe),e(E,Jg),e(Jg,WJ),e(WJ,VJe),e(Jg,zJe),e(Jg,bk),e(bk,WJe),e(Jg,QJe),e(E,HJe),e(E,Fs),e(Fs,QJ),e(QJ,UJe),e(Fs,JJe),e(Fs,vk),e(vk,YJe),e(Fs,KJe),e(Fs,Tk),e(Tk,ZJe),e(Fs,eYe),e(E,oYe),e(E,Cs),e(Cs,HJ),e(HJ,rYe),e(Cs,tYe),e(Cs,Fk),e(Fk,aYe),e(Cs,nYe),e(Cs,Ck),e(Ck,sYe),e(Cs,lYe),e(E,iYe),e(E,Ms),e(Ms,UJ),e(UJ,dYe),e(Ms,cYe),e(Ms,Mk),e(Mk,mYe),e(Ms,fYe),e(Ms,Ek),e(Ek,gYe),e(Ms,hYe),e(E,uYe),e(E,Es),e(Es,JJ),e(JJ,pYe),e(Es,_Ye),e(Es,yk),e(yk,bYe),e(Es,vYe),e(Es,wk),e(wk,TYe),e(Es,FYe),e(E,CYe),e(E,ys),e(ys,YJ),e(YJ,MYe),e(ys,EYe),e(ys,Ak),e(Ak,yYe),e(ys,wYe),e(ys,Lk),e(Lk,AYe),e(ys,LYe),e(E,BYe),e(E,Yg),e(Yg,KJ),e(KJ,xYe),e(Yg,kYe),e(Yg,Bk),e(Bk,RYe),e(Yg,SYe),e(E,PYe),e(E,Kg),e(Kg,ZJ),e(ZJ,$Ye),e(Kg,IYe),e(Kg,xk),e(xk,jYe),e(Kg,NYe),e(E,DYe),e(E,Zg),e(Zg,eY),e(eY,qYe),e(Zg,GYe),e(Zg,kk),e(kk,OYe),e(Zg,XYe),e(E,VYe),e(E,eh),e(eh,oY),e(oY,zYe),e(eh,WYe),e(eh,Rk),e(Rk,QYe),e(eh,HYe),e(E,UYe),e(E,ws),e(ws,rY),e(rY,JYe),e(ws,YYe),e(ws,Sk),e(Sk,KYe),e(ws,ZYe),e(ws,Pk),e(Pk,eKe),e(ws,oKe),e(E,rKe),e(E,oh),e(oh,tY),e(tY,tKe),e(oh,aKe),e(oh,$k),e($k,nKe),e(oh,sKe),e(E,lKe),e(E,As),e(As,aY),e(aY,iKe),e(As,dKe),e(As,Ik),e(Ik,cKe),e(As,mKe),e(As,jk),e(jk,fKe),e(As,gKe),e(E,hKe),e(E,Ls),e(Ls,nY),e(nY,uKe),e(Ls,pKe),e(Ls,Nk),e(Nk,_Ke),e(Ls,bKe),e(Ls,Dk),e(Dk,vKe),e(Ls,TKe),e(E,FKe),e(E,Bs),e(Bs,sY),e(sY,CKe),e(Bs,MKe),e(Bs,qk),e(qk,EKe),e(Bs,yKe),e(Bs,Gk),e(Gk,wKe),e(Bs,AKe),e(E,LKe),e(E,xs),e(xs,lY),e(lY,BKe),e(xs,xKe),e(xs,Ok),e(Ok,kKe),e(xs,RKe),e(xs,Xk),e(Xk,SKe),e(xs,PKe),e(E,$Ke),e(E,ks),e(ks,iY),e(iY,IKe),e(ks,jKe),e(ks,Vk),e(Vk,NKe),e(ks,DKe),e(ks,zk),e(zk,qKe),e(ks,GKe),e(E,OKe),e(E,Rs),e(Rs,dY),e(dY,XKe),e(Rs,VKe),e(Rs,Wk),e(Wk,zKe),e(Rs,WKe),e(Rs,Qk),e(Qk,QKe),e(Rs,HKe),e(E,UKe),e(E,rh),e(rh,cY),e(cY,JKe),e(rh,YKe),e(rh,Hk),e(Hk,KKe),e(rh,ZKe),e(E,eZe),e(E,th),e(th,mY),e(mY,oZe),e(th,rZe),e(th,Uk),e(Uk,tZe),e(th,aZe),e(E,nZe),e(E,Ss),e(Ss,fY),e(fY,sZe),e(Ss,lZe),e(Ss,Jk),e(Jk,iZe),e(Ss,dZe),e(Ss,Yk),e(Yk,cZe),e(Ss,mZe),e(E,fZe),e(E,Ps),e(Ps,gY),e(gY,gZe),e(Ps,hZe),e(Ps,Kk),e(Kk,uZe),e(Ps,pZe),e(Ps,Zk),e(Zk,_Ze),e(Ps,bZe),e(E,vZe),e(E,$s),e($s,hY),e(hY,TZe),e($s,FZe),e($s,eR),e(eR,CZe),e($s,MZe),e($s,oR),e(oR,EZe),e($s,yZe),e(E,wZe),e(E,ah),e(ah,uY),e(uY,AZe),e(ah,LZe),e(ah,rR),e(rR,BZe),e(ah,xZe),e(E,kZe),e(E,nh),e(nh,pY),e(pY,RZe),e(nh,SZe),e(nh,tR),e(tR,PZe),e(nh,$Ze),e(E,IZe),e(E,sh),e(sh,_Y),e(_Y,jZe),e(sh,NZe),e(sh,aR),e(aR,DZe),e(sh,qZe),e(E,GZe),e(E,lh),e(lh,bY),e(bY,OZe),e(lh,XZe),e(lh,nR),e(nR,VZe),e(lh,zZe),e(E,WZe),e(E,Is),e(Is,vY),e(vY,QZe),e(Is,HZe),e(Is,sR),e(sR,UZe),e(Is,JZe),e(Is,lR),e(lR,YZe),e(Is,KZe),e(E,ZZe),e(E,ih),e(ih,TY),e(TY,eeo),e(ih,oeo),e(ih,iR),e(iR,reo),e(ih,teo),e(E,aeo),e(E,dh),e(dh,FY),e(FY,neo),e(dh,seo),e(dh,dR),e(dR,leo),e(dh,ieo),e(E,deo),e(E,js),e(js,CY),e(CY,ceo),e(js,meo),e(js,cR),e(cR,feo),e(js,geo),e(js,mR),e(mR,heo),e(js,ueo),e(E,peo),e(E,Ns),e(Ns,MY),e(MY,_eo),e(Ns,beo),e(Ns,fR),e(fR,veo),e(Ns,Teo),e(Ns,gR),e(gR,Feo),e(Ns,Ceo),e(go,Meo),e(go,EY),e(EY,Eeo),e(go,yeo),g(Ay,go,null),e(Qo,weo),e(Qo,ch),g(Ly,ch,null),e(ch,Aeo),e(ch,yY),e(yY,Leo),b(c,yke,_),b(c,Qi,_),e(Qi,mh),e(mh,wY),g(By,wY,null),e(Qi,Beo),e(Qi,AY),e(AY,xeo),b(c,wke,_),b(c,Ho,_),g(xy,Ho,null),e(Ho,keo),e(Ho,ky),e(ky,Reo),e(ky,hR),e(hR,Seo),e(ky,Peo),e(Ho,$eo),e(Ho,Ry),e(Ry,Ieo),e(Ry,LY),e(LY,jeo),e(Ry,Neo),e(Ho,Deo),e(Ho,$e),g(Sy,$e,null),e($e,qeo),e($e,BY),e(BY,Geo),e($e,Oeo),e($e,Xa),e(Xa,Xeo),e(Xa,xY),e(xY,Veo),e(Xa,zeo),e(Xa,kY),e(kY,Weo),e(Xa,Qeo),e(Xa,RY),e(RY,Heo),e(Xa,Ueo),e($e,Jeo),e($e,te),e(te,fh),e(fh,SY),e(SY,Yeo),e(fh,Keo),e(fh,uR),e(uR,Zeo),e(fh,eoo),e(te,ooo),e(te,gh),e(gh,PY),e(PY,roo),e(gh,too),e(gh,pR),e(pR,aoo),e(gh,noo),e(te,soo),e(te,hh),e(hh,$Y),e($Y,loo),e(hh,ioo),e(hh,_R),e(_R,doo),e(hh,coo),e(te,moo),e(te,uh),e(uh,IY),e(IY,foo),e(uh,goo),e(uh,bR),e(bR,hoo),e(uh,uoo),e(te,poo),e(te,ph),e(ph,jY),e(jY,_oo),e(ph,boo),e(ph,vR),e(vR,voo),e(ph,Too),e(te,Foo),e(te,_h),e(_h,NY),e(NY,Coo),e(_h,Moo),e(_h,TR),e(TR,Eoo),e(_h,yoo),e(te,woo),e(te,bh),e(bh,DY),e(DY,Aoo),e(bh,Loo),e(bh,FR),e(FR,Boo),e(bh,xoo),e(te,koo),e(te,vh),e(vh,qY),e(qY,Roo),e(vh,Soo),e(vh,CR),e(CR,Poo),e(vh,$oo),e(te,Ioo),e(te,Th),e(Th,GY),e(GY,joo),e(Th,Noo),e(Th,MR),e(MR,Doo),e(Th,qoo),e(te,Goo),e(te,Fh),e(Fh,OY),e(OY,Ooo),e(Fh,Xoo),e(Fh,ER),e(ER,Voo),e(Fh,zoo),e(te,Woo),e(te,Ch),e(Ch,XY),e(XY,Qoo),e(Ch,Hoo),e(Ch,yR),e(yR,Uoo),e(Ch,Joo),e(te,Yoo),e(te,Mh),e(Mh,VY),e(VY,Koo),e(Mh,Zoo),e(Mh,wR),e(wR,ero),e(Mh,oro),e(te,rro),e(te,Eh),e(Eh,zY),e(zY,tro),e(Eh,aro),e(Eh,AR),e(AR,nro),e(Eh,sro),e(te,lro),e(te,yh),e(yh,WY),e(WY,iro),e(yh,dro),e(yh,LR),e(LR,cro),e(yh,mro),e(te,fro),e(te,wh),e(wh,QY),e(QY,gro),e(wh,hro),e(wh,BR),e(BR,uro),e(wh,pro),e(te,_ro),e(te,Ah),e(Ah,HY),e(HY,bro),e(Ah,vro),e(Ah,xR),e(xR,Tro),e(Ah,Fro),e(te,Cro),e(te,Lh),e(Lh,UY),e(UY,Mro),e(Lh,Ero),e(Lh,kR),e(kR,yro),e(Lh,wro),e(te,Aro),e(te,Bh),e(Bh,JY),e(JY,Lro),e(Bh,Bro),e(Bh,RR),e(RR,xro),e(Bh,kro),e($e,Rro),g(xh,$e,null),e($e,Sro),e($e,YY),e(YY,Pro),e($e,$ro),g(Py,$e,null),e(Ho,Iro),e(Ho,kh),g($y,kh,null),e(kh,jro),e(kh,KY),e(KY,Nro),b(c,Ake,_),b(c,Hi,_),e(Hi,Rh),e(Rh,ZY),g(Iy,ZY,null),e(Hi,Dro),e(Hi,eK),e(eK,qro),b(c,Lke,_),b(c,Uo,_),g(jy,Uo,null),e(Uo,Gro),e(Uo,Ny),e(Ny,Oro),e(Ny,SR),e(SR,Xro),e(Ny,Vro),e(Uo,zro),e(Uo,Dy),e(Dy,Wro),e(Dy,oK),e(oK,Qro),e(Dy,Hro),e(Uo,Uro),e(Uo,Ie),g(qy,Ie,null),e(Ie,Jro),e(Ie,rK),e(rK,Yro),e(Ie,Kro),e(Ie,Ui),e(Ui,Zro),e(Ui,tK),e(tK,eto),e(Ui,oto),e(Ui,aK),e(aK,rto),e(Ui,tto),e(Ie,ato),e(Ie,xe),e(xe,Sh),e(Sh,nK),e(nK,nto),e(Sh,sto),e(Sh,PR),e(PR,lto),e(Sh,ito),e(xe,dto),e(xe,Ph),e(Ph,sK),e(sK,cto),e(Ph,mto),e(Ph,$R),e($R,fto),e(Ph,gto),e(xe,hto),e(xe,$h),e($h,lK),e(lK,uto),e($h,pto),e($h,IR),e(IR,_to),e($h,bto),e(xe,vto),e(xe,Ih),e(Ih,iK),e(iK,Tto),e(Ih,Fto),e(Ih,jR),e(jR,Cto),e(Ih,Mto),e(xe,Eto),e(xe,jh),e(jh,dK),e(dK,yto),e(jh,wto),e(jh,NR),e(NR,Ato),e(jh,Lto),e(xe,Bto),e(xe,Nh),e(Nh,cK),e(cK,xto),e(Nh,kto),e(Nh,DR),e(DR,Rto),e(Nh,Sto),e(xe,Pto),e(xe,Dh),e(Dh,mK),e(mK,$to),e(Dh,Ito),e(Dh,qR),e(qR,jto),e(Dh,Nto),e(xe,Dto),e(xe,qh),e(qh,fK),e(fK,qto),e(qh,Gto),e(qh,GR),e(GR,Oto),e(qh,Xto),e(Ie,Vto),g(Gh,Ie,null),e(Ie,zto),e(Ie,gK),e(gK,Wto),e(Ie,Qto),g(Gy,Ie,null),e(Uo,Hto),e(Uo,Oh),g(Oy,Oh,null),e(Oh,Uto),e(Oh,hK),e(hK,Jto),b(c,Bke,_),b(c,Ji,_),e(Ji,Xh),e(Xh,uK),g(Xy,uK,null),e(Ji,Yto),e(Ji,pK),e(pK,Kto),b(c,xke,_),b(c,Jo,_),g(Vy,Jo,null),e(Jo,Zto),e(Jo,Yi),e(Yi,eao),e(Yi,_K),e(_K,oao),e(Yi,rao),e(Yi,bK),e(bK,tao),e(Yi,aao),e(Jo,nao),e(Jo,zy),e(zy,sao),e(zy,vK),e(vK,lao),e(zy,iao),e(Jo,dao),e(Jo,Vr),g(Wy,Vr,null),e(Vr,cao),e(Vr,TK),e(TK,mao),e(Vr,fao),e(Vr,Ki),e(Ki,gao),e(Ki,FK),e(FK,hao),e(Ki,uao),e(Ki,CK),e(CK,pao),e(Ki,_ao),e(Vr,bao),e(Vr,MK),e(MK,vao),e(Vr,Tao),g(Qy,Vr,null),e(Jo,Fao),e(Jo,je),g(Hy,je,null),e(je,Cao),e(je,EK),e(EK,Mao),e(je,Eao),e(je,Va),e(Va,yao),e(Va,yK),e(yK,wao),e(Va,Aao),e(Va,wK),e(wK,Lao),e(Va,Bao),e(Va,AK),e(AK,xao),e(Va,kao),e(je,Rao),e(je,F),e(F,Vh),e(Vh,LK),e(LK,Sao),e(Vh,Pao),e(Vh,OR),e(OR,$ao),e(Vh,Iao),e(F,jao),e(F,zh),e(zh,BK),e(BK,Nao),e(zh,Dao),e(zh,XR),e(XR,qao),e(zh,Gao),e(F,Oao),e(F,Wh),e(Wh,xK),e(xK,Xao),e(Wh,Vao),e(Wh,VR),e(VR,zao),e(Wh,Wao),e(F,Qao),e(F,Qh),e(Qh,kK),e(kK,Hao),e(Qh,Uao),e(Qh,zR),e(zR,Jao),e(Qh,Yao),e(F,Kao),e(F,Hh),e(Hh,RK),e(RK,Zao),e(Hh,eno),e(Hh,WR),e(WR,ono),e(Hh,rno),e(F,tno),e(F,Uh),e(Uh,SK),e(SK,ano),e(Uh,nno),e(Uh,QR),e(QR,sno),e(Uh,lno),e(F,ino),e(F,Jh),e(Jh,PK),e(PK,dno),e(Jh,cno),e(Jh,HR),e(HR,mno),e(Jh,fno),e(F,gno),e(F,Yh),e(Yh,$K),e($K,hno),e(Yh,uno),e(Yh,UR),e(UR,pno),e(Yh,_no),e(F,bno),e(F,Kh),e(Kh,IK),e(IK,vno),e(Kh,Tno),e(Kh,JR),e(JR,Fno),e(Kh,Cno),e(F,Mno),e(F,Zh),e(Zh,jK),e(jK,Eno),e(Zh,yno),e(Zh,YR),e(YR,wno),e(Zh,Ano),e(F,Lno),e(F,eu),e(eu,NK),e(NK,Bno),e(eu,xno),e(eu,KR),e(KR,kno),e(eu,Rno),e(F,Sno),e(F,ou),e(ou,DK),e(DK,Pno),e(ou,$no),e(ou,ZR),e(ZR,Ino),e(ou,jno),e(F,Nno),e(F,ru),e(ru,qK),e(qK,Dno),e(ru,qno),e(ru,eS),e(eS,Gno),e(ru,Ono),e(F,Xno),e(F,tu),e(tu,GK),e(GK,Vno),e(tu,zno),e(tu,oS),e(oS,Wno),e(tu,Qno),e(F,Hno),e(F,au),e(au,OK),e(OK,Uno),e(au,Jno),e(au,rS),e(rS,Yno),e(au,Kno),e(F,Zno),e(F,nu),e(nu,XK),e(XK,eso),e(nu,oso),e(nu,tS),e(tS,rso),e(nu,tso),e(F,aso),e(F,su),e(su,VK),e(VK,nso),e(su,sso),e(su,aS),e(aS,lso),e(su,iso),e(F,dso),e(F,lu),e(lu,zK),e(zK,cso),e(lu,mso),e(lu,nS),e(nS,fso),e(lu,gso),e(F,hso),e(F,iu),e(iu,WK),e(WK,uso),e(iu,pso),e(iu,sS),e(sS,_so),e(iu,bso),e(F,vso),e(F,du),e(du,QK),e(QK,Tso),e(du,Fso),e(du,lS),e(lS,Cso),e(du,Mso),e(F,Eso),e(F,cu),e(cu,HK),e(HK,yso),e(cu,wso),e(cu,iS),e(iS,Aso),e(cu,Lso),e(F,Bso),e(F,mu),e(mu,UK),e(UK,xso),e(mu,kso),e(mu,dS),e(dS,Rso),e(mu,Sso),e(F,Pso),e(F,fu),e(fu,JK),e(JK,$so),e(fu,Iso),e(fu,cS),e(cS,jso),e(fu,Nso),e(F,Dso),e(F,gu),e(gu,YK),e(YK,qso),e(gu,Gso),e(gu,mS),e(mS,Oso),e(gu,Xso),e(F,Vso),e(F,hu),e(hu,KK),e(KK,zso),e(hu,Wso),e(hu,fS),e(fS,Qso),e(hu,Hso),e(F,Uso),e(F,uu),e(uu,ZK),e(ZK,Jso),e(uu,Yso),e(uu,gS),e(gS,Kso),e(uu,Zso),e(F,elo),e(F,pu),e(pu,eZ),e(eZ,olo),e(pu,rlo),e(pu,hS),e(hS,tlo),e(pu,alo),e(F,nlo),e(F,_u),e(_u,oZ),e(oZ,slo),e(_u,llo),e(_u,uS),e(uS,ilo),e(_u,dlo),e(F,clo),e(F,Ds),e(Ds,rZ),e(rZ,mlo),e(Ds,flo),e(Ds,pS),e(pS,glo),e(Ds,hlo),e(Ds,_S),e(_S,ulo),e(Ds,plo),e(F,_lo),e(F,bu),e(bu,tZ),e(tZ,blo),e(bu,vlo),e(bu,bS),e(bS,Tlo),e(bu,Flo),e(F,Clo),e(F,vu),e(vu,aZ),e(aZ,Mlo),e(vu,Elo),e(vu,vS),e(vS,ylo),e(vu,wlo),e(F,Alo),e(F,Tu),e(Tu,nZ),e(nZ,Llo),e(Tu,Blo),e(Tu,TS),e(TS,xlo),e(Tu,klo),e(F,Rlo),e(F,Fu),e(Fu,sZ),e(sZ,Slo),e(Fu,Plo),e(Fu,FS),e(FS,$lo),e(Fu,Ilo),e(F,jlo),e(F,Cu),e(Cu,lZ),e(lZ,Nlo),e(Cu,Dlo),e(Cu,CS),e(CS,qlo),e(Cu,Glo),e(F,Olo),e(F,Mu),e(Mu,iZ),e(iZ,Xlo),e(Mu,Vlo),e(Mu,MS),e(MS,zlo),e(Mu,Wlo),e(F,Qlo),e(F,Eu),e(Eu,dZ),e(dZ,Hlo),e(Eu,Ulo),e(Eu,ES),e(ES,Jlo),e(Eu,Ylo),e(F,Klo),e(F,yu),e(yu,cZ),e(cZ,Zlo),e(yu,eio),e(yu,yS),e(yS,oio),e(yu,rio),e(F,tio),e(F,wu),e(wu,mZ),e(mZ,aio),e(wu,nio),e(wu,wS),e(wS,sio),e(wu,lio),e(F,iio),e(F,Au),e(Au,fZ),e(fZ,dio),e(Au,cio),e(Au,AS),e(AS,mio),e(Au,fio),e(F,gio),e(F,Lu),e(Lu,gZ),e(gZ,hio),e(Lu,uio),e(Lu,LS),e(LS,pio),e(Lu,_io),e(F,bio),e(F,Bu),e(Bu,hZ),e(hZ,vio),e(Bu,Tio),e(Bu,BS),e(BS,Fio),e(Bu,Cio),e(F,Mio),e(F,xu),e(xu,uZ),e(uZ,Eio),e(xu,yio),e(xu,xS),e(xS,wio),e(xu,Aio),e(F,Lio),e(F,ku),e(ku,pZ),e(pZ,Bio),e(ku,xio),e(ku,kS),e(kS,kio),e(ku,Rio),e(F,Sio),e(F,Ru),e(Ru,_Z),e(_Z,Pio),e(Ru,$io),e(Ru,RS),e(RS,Iio),e(Ru,jio),e(F,Nio),e(F,Su),e(Su,bZ),e(bZ,Dio),e(Su,qio),e(Su,SS),e(SS,Gio),e(Su,Oio),e(F,Xio),e(F,Pu),e(Pu,vZ),e(vZ,Vio),e(Pu,zio),e(Pu,PS),e(PS,Wio),e(Pu,Qio),e(F,Hio),e(F,$u),e($u,TZ),e(TZ,Uio),e($u,Jio),e($u,$S),e($S,Yio),e($u,Kio),e(F,Zio),e(F,Iu),e(Iu,FZ),e(FZ,edo),e(Iu,odo),e(Iu,IS),e(IS,rdo),e(Iu,tdo),e(F,ado),e(F,ju),e(ju,CZ),e(CZ,ndo),e(ju,sdo),e(ju,jS),e(jS,ldo),e(ju,ido),e(F,ddo),e(F,Nu),e(Nu,MZ),e(MZ,cdo),e(Nu,mdo),e(Nu,NS),e(NS,fdo),e(Nu,gdo),e(F,hdo),e(F,Du),e(Du,EZ),e(EZ,udo),e(Du,pdo),e(Du,DS),e(DS,_do),e(Du,bdo),e(F,vdo),e(F,qu),e(qu,yZ),e(yZ,Tdo),e(qu,Fdo),e(qu,qS),e(qS,Cdo),e(qu,Mdo),e(F,Edo),e(F,Gu),e(Gu,wZ),e(wZ,ydo),e(Gu,wdo),e(Gu,GS),e(GS,Ado),e(Gu,Ldo),e(F,Bdo),e(F,Ou),e(Ou,AZ),e(AZ,xdo),e(Ou,kdo),e(Ou,OS),e(OS,Rdo),e(Ou,Sdo),e(F,Pdo),e(F,Xu),e(Xu,LZ),e(LZ,$do),e(Xu,Ido),e(Xu,XS),e(XS,jdo),e(Xu,Ndo),e(F,Ddo),e(F,Vu),e(Vu,BZ),e(BZ,qdo),e(Vu,Gdo),e(Vu,VS),e(VS,Odo),e(Vu,Xdo),e(F,Vdo),e(F,zu),e(zu,xZ),e(xZ,zdo),e(zu,Wdo),e(zu,zS),e(zS,Qdo),e(zu,Hdo),e(F,Udo),e(F,Wu),e(Wu,kZ),e(kZ,Jdo),e(Wu,Ydo),e(Wu,WS),e(WS,Kdo),e(Wu,Zdo),e(F,eco),e(F,Qu),e(Qu,RZ),e(RZ,oco),e(Qu,rco),e(Qu,QS),e(QS,tco),e(Qu,aco),e(F,nco),e(F,Hu),e(Hu,SZ),e(SZ,sco),e(Hu,lco),e(Hu,HS),e(HS,ico),e(Hu,dco),e(F,cco),e(F,Uu),e(Uu,PZ),e(PZ,mco),e(Uu,fco),e(Uu,US),e(US,gco),e(Uu,hco),e(F,uco),e(F,Ju),e(Ju,$Z),e($Z,pco),e(Ju,_co),e(Ju,JS),e(JS,bco),e(Ju,vco),e(F,Tco),e(F,Yu),e(Yu,IZ),e(IZ,Fco),e(Yu,Cco),e(Yu,YS),e(YS,Mco),e(Yu,Eco),e(F,yco),e(F,Ku),e(Ku,jZ),e(jZ,wco),e(Ku,Aco),e(Ku,KS),e(KS,Lco),e(Ku,Bco),e(F,xco),e(F,Zu),e(Zu,NZ),e(NZ,kco),e(Zu,Rco),e(Zu,ZS),e(ZS,Sco),e(Zu,Pco),e(F,$co),e(F,ep),e(ep,DZ),e(DZ,Ico),e(ep,jco),e(ep,eP),e(eP,Nco),e(ep,Dco),e(F,qco),e(F,op),e(op,qZ),e(qZ,Gco),e(op,Oco),e(op,oP),e(oP,Xco),e(op,Vco),e(F,zco),e(F,rp),e(rp,GZ),e(GZ,Wco),e(rp,Qco),e(rp,rP),e(rP,Hco),e(rp,Uco),e(F,Jco),e(F,tp),e(tp,OZ),e(OZ,Yco),e(tp,Kco),e(tp,tP),e(tP,Zco),e(tp,emo),e(F,omo),e(F,ap),e(ap,XZ),e(XZ,rmo),e(ap,tmo),e(ap,aP),e(aP,amo),e(ap,nmo),e(F,smo),e(F,np),e(np,VZ),e(VZ,lmo),e(np,imo),e(np,nP),e(nP,dmo),e(np,cmo),e(F,mmo),e(F,sp),e(sp,zZ),e(zZ,fmo),e(sp,gmo),e(sp,sP),e(sP,hmo),e(sp,umo),e(F,pmo),e(F,lp),e(lp,WZ),e(WZ,_mo),e(lp,bmo),e(lp,lP),e(lP,vmo),e(lp,Tmo),e(F,Fmo),e(F,ip),e(ip,QZ),e(QZ,Cmo),e(ip,Mmo),e(ip,iP),e(iP,Emo),e(ip,ymo),e(F,wmo),e(F,dp),e(dp,HZ),e(HZ,Amo),e(dp,Lmo),e(dp,dP),e(dP,Bmo),e(dp,xmo),e(F,kmo),e(F,cp),e(cp,UZ),e(UZ,Rmo),e(cp,Smo),e(cp,cP),e(cP,Pmo),e(cp,$mo),e(F,Imo),e(F,mp),e(mp,JZ),e(JZ,jmo),e(mp,Nmo),e(mp,mP),e(mP,Dmo),e(mp,qmo),e(F,Gmo),e(F,fp),e(fp,YZ),e(YZ,Omo),e(fp,Xmo),e(fp,fP),e(fP,Vmo),e(fp,zmo),e(F,Wmo),e(F,gp),e(gp,KZ),e(KZ,Qmo),e(gp,Hmo),e(gp,gP),e(gP,Umo),e(gp,Jmo),e(F,Ymo),e(F,hp),e(hp,ZZ),e(ZZ,Kmo),e(hp,Zmo),e(hp,hP),e(hP,efo),e(hp,ofo),e(F,rfo),e(F,up),e(up,eee),e(eee,tfo),e(up,afo),e(up,uP),e(uP,nfo),e(up,sfo),e(F,lfo),e(F,pp),e(pp,oee),e(oee,ifo),e(pp,dfo),e(pp,pP),e(pP,cfo),e(pp,mfo),e(F,ffo),e(F,_p),e(_p,ree),e(ree,gfo),e(_p,hfo),e(_p,_P),e(_P,ufo),e(_p,pfo),e(F,_fo),e(F,bp),e(bp,tee),e(tee,bfo),e(bp,vfo),e(bp,bP),e(bP,Tfo),e(bp,Ffo),e(F,Cfo),e(F,vp),e(vp,aee),e(aee,Mfo),e(vp,Efo),e(vp,vP),e(vP,yfo),e(vp,wfo),e(F,Afo),e(F,Tp),e(Tp,nee),e(nee,Lfo),e(Tp,Bfo),e(Tp,TP),e(TP,xfo),e(Tp,kfo),e(F,Rfo),e(F,Fp),e(Fp,see),e(see,Sfo),e(Fp,Pfo),e(Fp,FP),e(FP,$fo),e(Fp,Ifo),e(F,jfo),e(F,Cp),e(Cp,lee),e(lee,Nfo),e(Cp,Dfo),e(Cp,CP),e(CP,qfo),e(Cp,Gfo),e(F,Ofo),e(F,Mp),e(Mp,iee),e(iee,Xfo),e(Mp,Vfo),e(Mp,MP),e(MP,zfo),e(Mp,Wfo),e(F,Qfo),e(F,Ep),e(Ep,dee),e(dee,Hfo),e(Ep,Ufo),e(Ep,EP),e(EP,Jfo),e(Ep,Yfo),e(F,Kfo),e(F,yp),e(yp,cee),e(cee,Zfo),e(yp,ego),e(yp,yP),e(yP,ogo),e(yp,rgo),e(je,tgo),e(je,wp),e(wp,ago),e(wp,mee),e(mee,ngo),e(wp,sgo),e(wp,fee),e(fee,lgo),e(je,igo),e(je,gee),e(gee,dgo),e(je,cgo),g(Uy,je,null),b(c,kke,_),b(c,Zi,_),e(Zi,Ap),e(Ap,hee),g(Jy,hee,null),e(Zi,mgo),e(Zi,uee),e(uee,fgo),b(c,Rke,_),b(c,Yo,_),g(Yy,Yo,null),e(Yo,ggo),e(Yo,ed),e(ed,hgo),e(ed,pee),e(pee,ugo),e(ed,pgo),e(ed,_ee),e(_ee,_go),e(ed,bgo),e(Yo,vgo),e(Yo,Ky),e(Ky,Tgo),e(Ky,bee),e(bee,Fgo),e(Ky,Cgo),e(Yo,Mgo),e(Yo,zr),g(Zy,zr,null),e(zr,Ego),e(zr,vee),e(vee,ygo),e(zr,wgo),e(zr,od),e(od,Ago),e(od,Tee),e(Tee,Lgo),e(od,Bgo),e(od,Fee),e(Fee,xgo),e(od,kgo),e(zr,Rgo),e(zr,Cee),e(Cee,Sgo),e(zr,Pgo),g(ew,zr,null),e(Yo,$go),e(Yo,Ne),g(ow,Ne,null),e(Ne,Igo),e(Ne,Mee),e(Mee,jgo),e(Ne,Ngo),e(Ne,za),e(za,Dgo),e(za,Eee),e(Eee,qgo),e(za,Ggo),e(za,yee),e(yee,Ogo),e(za,Xgo),e(za,wee),e(wee,Vgo),e(za,zgo),e(Ne,Wgo),e(Ne,k),e(k,Lp),e(Lp,Aee),e(Aee,Qgo),e(Lp,Hgo),e(Lp,wP),e(wP,Ugo),e(Lp,Jgo),e(k,Ygo),e(k,Bp),e(Bp,Lee),e(Lee,Kgo),e(Bp,Zgo),e(Bp,AP),e(AP,eho),e(Bp,oho),e(k,rho),e(k,xp),e(xp,Bee),e(Bee,tho),e(xp,aho),e(xp,LP),e(LP,nho),e(xp,sho),e(k,lho),e(k,kp),e(kp,xee),e(xee,iho),e(kp,dho),e(kp,BP),e(BP,cho),e(kp,mho),e(k,fho),e(k,Rp),e(Rp,kee),e(kee,gho),e(Rp,hho),e(Rp,xP),e(xP,uho),e(Rp,pho),e(k,_ho),e(k,Sp),e(Sp,Ree),e(Ree,bho),e(Sp,vho),e(Sp,kP),e(kP,Tho),e(Sp,Fho),e(k,Cho),e(k,Pp),e(Pp,See),e(See,Mho),e(Pp,Eho),e(Pp,RP),e(RP,yho),e(Pp,who),e(k,Aho),e(k,$p),e($p,Pee),e(Pee,Lho),e($p,Bho),e($p,SP),e(SP,xho),e($p,kho),e(k,Rho),e(k,Ip),e(Ip,$ee),e($ee,Sho),e(Ip,Pho),e(Ip,PP),e(PP,$ho),e(Ip,Iho),e(k,jho),e(k,jp),e(jp,Iee),e(Iee,Nho),e(jp,Dho),e(jp,$P),e($P,qho),e(jp,Gho),e(k,Oho),e(k,Np),e(Np,jee),e(jee,Xho),e(Np,Vho),e(Np,IP),e(IP,zho),e(Np,Who),e(k,Qho),e(k,Dp),e(Dp,Nee),e(Nee,Hho),e(Dp,Uho),e(Dp,jP),e(jP,Jho),e(Dp,Yho),e(k,Kho),e(k,qp),e(qp,Dee),e(Dee,Zho),e(qp,euo),e(qp,NP),e(NP,ouo),e(qp,ruo),e(k,tuo),e(k,Gp),e(Gp,qee),e(qee,auo),e(Gp,nuo),e(Gp,DP),e(DP,suo),e(Gp,luo),e(k,iuo),e(k,Op),e(Op,Gee),e(Gee,duo),e(Op,cuo),e(Op,qP),e(qP,muo),e(Op,fuo),e(k,guo),e(k,Xp),e(Xp,Oee),e(Oee,huo),e(Xp,uuo),e(Xp,GP),e(GP,puo),e(Xp,_uo),e(k,buo),e(k,Vp),e(Vp,Xee),e(Xee,vuo),e(Vp,Tuo),e(Vp,OP),e(OP,Fuo),e(Vp,Cuo),e(k,Muo),e(k,zp),e(zp,Vee),e(Vee,Euo),e(zp,yuo),e(zp,XP),e(XP,wuo),e(zp,Auo),e(k,Luo),e(k,Wp),e(Wp,zee),e(zee,Buo),e(Wp,xuo),e(Wp,VP),e(VP,kuo),e(Wp,Ruo),e(k,Suo),e(k,Qp),e(Qp,Wee),e(Wee,Puo),e(Qp,$uo),e(Qp,zP),e(zP,Iuo),e(Qp,juo),e(k,Nuo),e(k,Hp),e(Hp,Qee),e(Qee,Duo),e(Hp,quo),e(Hp,WP),e(WP,Guo),e(Hp,Ouo),e(k,Xuo),e(k,Up),e(Up,Hee),e(Hee,Vuo),e(Up,zuo),e(Up,QP),e(QP,Wuo),e(Up,Quo),e(k,Huo),e(k,Jp),e(Jp,Uee),e(Uee,Uuo),e(Jp,Juo),e(Jp,HP),e(HP,Yuo),e(Jp,Kuo),e(k,Zuo),e(k,Yp),e(Yp,Jee),e(Jee,epo),e(Yp,opo),e(Yp,UP),e(UP,rpo),e(Yp,tpo),e(k,apo),e(k,Kp),e(Kp,Yee),e(Yee,npo),e(Kp,spo),e(Kp,JP),e(JP,lpo),e(Kp,ipo),e(k,dpo),e(k,Zp),e(Zp,Kee),e(Kee,cpo),e(Zp,mpo),e(Zp,YP),e(YP,fpo),e(Zp,gpo),e(k,hpo),e(k,e_),e(e_,Zee),e(Zee,upo),e(e_,ppo),e(e_,KP),e(KP,_po),e(e_,bpo),e(k,vpo),e(k,o_),e(o_,eoe),e(eoe,Tpo),e(o_,Fpo),e(o_,ZP),e(ZP,Cpo),e(o_,Mpo),e(k,Epo),e(k,r_),e(r_,ooe),e(ooe,ypo),e(r_,wpo),e(r_,e$),e(e$,Apo),e(r_,Lpo),e(k,Bpo),e(k,t_),e(t_,roe),e(roe,xpo),e(t_,kpo),e(t_,o$),e(o$,Rpo),e(t_,Spo),e(k,Ppo),e(k,a_),e(a_,toe),e(toe,$po),e(a_,Ipo),e(a_,r$),e(r$,jpo),e(a_,Npo),e(k,Dpo),e(k,n_),e(n_,aoe),e(aoe,qpo),e(n_,Gpo),e(n_,t$),e(t$,Opo),e(n_,Xpo),e(k,Vpo),e(k,s_),e(s_,noe),e(noe,zpo),e(s_,Wpo),e(s_,a$),e(a$,Qpo),e(s_,Hpo),e(k,Upo),e(k,l_),e(l_,soe),e(soe,Jpo),e(l_,Ypo),e(l_,n$),e(n$,Kpo),e(l_,Zpo),e(k,e_o),e(k,i_),e(i_,loe),e(loe,o_o),e(i_,r_o),e(i_,s$),e(s$,t_o),e(i_,a_o),e(k,n_o),e(k,d_),e(d_,ioe),e(ioe,s_o),e(d_,l_o),e(d_,l$),e(l$,i_o),e(d_,d_o),e(k,c_o),e(k,c_),e(c_,doe),e(doe,m_o),e(c_,f_o),e(c_,i$),e(i$,g_o),e(c_,h_o),e(k,u_o),e(k,m_),e(m_,coe),e(coe,p_o),e(m_,__o),e(m_,d$),e(d$,b_o),e(m_,v_o),e(k,T_o),e(k,f_),e(f_,moe),e(moe,F_o),e(f_,C_o),e(f_,c$),e(c$,M_o),e(f_,E_o),e(Ne,y_o),e(Ne,g_),e(g_,w_o),e(g_,foe),e(foe,A_o),e(g_,L_o),e(g_,goe),e(goe,B_o),e(Ne,x_o),e(Ne,hoe),e(hoe,k_o),e(Ne,R_o),g(rw,Ne,null),b(c,Ske,_),b(c,rd,_),e(rd,h_),e(h_,uoe),g(tw,uoe,null),e(rd,S_o),e(rd,poe),e(poe,P_o),b(c,Pke,_),b(c,Ko,_),g(aw,Ko,null),e(Ko,$_o),e(Ko,td),e(td,I_o),e(td,_oe),e(_oe,j_o),e(td,N_o),e(td,boe),e(boe,D_o),e(td,q_o),e(Ko,G_o),e(Ko,nw),e(nw,O_o),e(nw,voe),e(voe,X_o),e(nw,V_o),e(Ko,z_o),e(Ko,Wr),g(sw,Wr,null),e(Wr,W_o),e(Wr,Toe),e(Toe,Q_o),e(Wr,H_o),e(Wr,ad),e(ad,U_o),e(ad,Foe),e(Foe,J_o),e(ad,Y_o),e(ad,Coe),e(Coe,K_o),e(ad,Z_o),e(Wr,ebo),e(Wr,Moe),e(Moe,obo),e(Wr,rbo),g(lw,Wr,null),e(Ko,tbo),e(Ko,De),g(iw,De,null),e(De,abo),e(De,Eoe),e(Eoe,nbo),e(De,sbo),e(De,Wa),e(Wa,lbo),e(Wa,yoe),e(yoe,ibo),e(Wa,dbo),e(Wa,woe),e(woe,cbo),e(Wa,mbo),e(Wa,Aoe),e(Aoe,fbo),e(Wa,gbo),e(De,hbo),e(De,$),e($,u_),e(u_,Loe),e(Loe,ubo),e(u_,pbo),e(u_,m$),e(m$,_bo),e(u_,bbo),e($,vbo),e($,p_),e(p_,Boe),e(Boe,Tbo),e(p_,Fbo),e(p_,f$),e(f$,Cbo),e(p_,Mbo),e($,Ebo),e($,__),e(__,xoe),e(xoe,ybo),e(__,wbo),e(__,g$),e(g$,Abo),e(__,Lbo),e($,Bbo),e($,b_),e(b_,koe),e(koe,xbo),e(b_,kbo),e(b_,h$),e(h$,Rbo),e(b_,Sbo),e($,Pbo),e($,v_),e(v_,Roe),e(Roe,$bo),e(v_,Ibo),e(v_,u$),e(u$,jbo),e(v_,Nbo),e($,Dbo),e($,T_),e(T_,Soe),e(Soe,qbo),e(T_,Gbo),e(T_,p$),e(p$,Obo),e(T_,Xbo),e($,Vbo),e($,F_),e(F_,Poe),e(Poe,zbo),e(F_,Wbo),e(F_,_$),e(_$,Qbo),e(F_,Hbo),e($,Ubo),e($,C_),e(C_,$oe),e($oe,Jbo),e(C_,Ybo),e(C_,b$),e(b$,Kbo),e(C_,Zbo),e($,e2o),e($,M_),e(M_,Ioe),e(Ioe,o2o),e(M_,r2o),e(M_,v$),e(v$,t2o),e(M_,a2o),e($,n2o),e($,E_),e(E_,joe),e(joe,s2o),e(E_,l2o),e(E_,T$),e(T$,i2o),e(E_,d2o),e($,c2o),e($,y_),e(y_,Noe),e(Noe,m2o),e(y_,f2o),e(y_,F$),e(F$,g2o),e(y_,h2o),e($,u2o),e($,w_),e(w_,Doe),e(Doe,p2o),e(w_,_2o),e(w_,C$),e(C$,b2o),e(w_,v2o),e($,T2o),e($,A_),e(A_,qoe),e(qoe,F2o),e(A_,C2o),e(A_,M$),e(M$,M2o),e(A_,E2o),e($,y2o),e($,L_),e(L_,Goe),e(Goe,w2o),e(L_,A2o),e(L_,E$),e(E$,L2o),e(L_,B2o),e($,x2o),e($,B_),e(B_,Ooe),e(Ooe,k2o),e(B_,R2o),e(B_,y$),e(y$,S2o),e(B_,P2o),e($,$2o),e($,x_),e(x_,Xoe),e(Xoe,I2o),e(x_,j2o),e(x_,w$),e(w$,N2o),e(x_,D2o),e($,q2o),e($,k_),e(k_,Voe),e(Voe,G2o),e(k_,O2o),e(k_,A$),e(A$,X2o),e(k_,V2o),e($,z2o),e($,R_),e(R_,zoe),e(zoe,W2o),e(R_,Q2o),e(R_,L$),e(L$,H2o),e(R_,U2o),e($,J2o),e($,S_),e(S_,Woe),e(Woe,Y2o),e(S_,K2o),e(S_,B$),e(B$,Z2o),e(S_,evo),e($,ovo),e($,P_),e(P_,Qoe),e(Qoe,rvo),e(P_,tvo),e(P_,x$),e(x$,avo),e(P_,nvo),e($,svo),e($,$_),e($_,Hoe),e(Hoe,lvo),e($_,ivo),e($_,k$),e(k$,dvo),e($_,cvo),e($,mvo),e($,I_),e(I_,Uoe),e(Uoe,fvo),e(I_,gvo),e(I_,R$),e(R$,hvo),e(I_,uvo),e($,pvo),e($,j_),e(j_,Joe),e(Joe,_vo),e(j_,bvo),e(j_,S$),e(S$,vvo),e(j_,Tvo),e($,Fvo),e($,N_),e(N_,Yoe),e(Yoe,Cvo),e(N_,Mvo),e(N_,P$),e(P$,Evo),e(N_,yvo),e($,wvo),e($,D_),e(D_,Koe),e(Koe,Avo),e(D_,Lvo),e(D_,$$),e($$,Bvo),e(D_,xvo),e($,kvo),e($,q_),e(q_,Zoe),e(Zoe,Rvo),e(q_,Svo),e(q_,I$),e(I$,Pvo),e(q_,$vo),e($,Ivo),e($,G_),e(G_,ere),e(ere,jvo),e(G_,Nvo),e(G_,j$),e(j$,Dvo),e(G_,qvo),e($,Gvo),e($,O_),e(O_,ore),e(ore,Ovo),e(O_,Xvo),e(O_,N$),e(N$,Vvo),e(O_,zvo),e($,Wvo),e($,X_),e(X_,rre),e(rre,Qvo),e(X_,Hvo),e(X_,D$),e(D$,Uvo),e(X_,Jvo),e($,Yvo),e($,V_),e(V_,tre),e(tre,Kvo),e(V_,Zvo),e(V_,q$),e(q$,eTo),e(V_,oTo),e($,rTo),e($,z_),e(z_,are),e(are,tTo),e(z_,aTo),e(z_,G$),e(G$,nTo),e(z_,sTo),e($,lTo),e($,W_),e(W_,nre),e(nre,iTo),e(W_,dTo),e(W_,O$),e(O$,cTo),e(W_,mTo),e($,fTo),e($,Q_),e(Q_,sre),e(sre,gTo),e(Q_,hTo),e(Q_,X$),e(X$,uTo),e(Q_,pTo),e($,_To),e($,H_),e(H_,lre),e(lre,bTo),e(H_,vTo),e(H_,V$),e(V$,TTo),e(H_,FTo),e($,CTo),e($,U_),e(U_,ire),e(ire,MTo),e(U_,ETo),e(U_,z$),e(z$,yTo),e(U_,wTo),e(De,ATo),e(De,J_),e(J_,LTo),e(J_,dre),e(dre,BTo),e(J_,xTo),e(J_,cre),e(cre,kTo),e(De,RTo),e(De,mre),e(mre,STo),e(De,PTo),g(dw,De,null),b(c,$ke,_),b(c,nd,_),e(nd,Y_),e(Y_,fre),g(cw,fre,null),e(nd,$To),e(nd,gre),e(gre,ITo),b(c,Ike,_),b(c,Zo,_),g(mw,Zo,null),e(Zo,jTo),e(Zo,sd),e(sd,NTo),e(sd,hre),e(hre,DTo),e(sd,qTo),e(sd,ure),e(ure,GTo),e(sd,OTo),e(Zo,XTo),e(Zo,fw),e(fw,VTo),e(fw,pre),e(pre,zTo),e(fw,WTo),e(Zo,QTo),e(Zo,Qr),g(gw,Qr,null),e(Qr,HTo),e(Qr,_re),e(_re,UTo),e(Qr,JTo),e(Qr,ld),e(ld,YTo),e(ld,bre),e(bre,KTo),e(ld,ZTo),e(ld,vre),e(vre,e1o),e(ld,o1o),e(Qr,r1o),e(Qr,Tre),e(Tre,t1o),e(Qr,a1o),g(hw,Qr,null),e(Zo,n1o),e(Zo,qe),g(uw,qe,null),e(qe,s1o),e(qe,Fre),e(Fre,l1o),e(qe,i1o),e(qe,Qa),e(Qa,d1o),e(Qa,Cre),e(Cre,c1o),e(Qa,m1o),e(Qa,Mre),e(Mre,f1o),e(Qa,g1o),e(Qa,Ere),e(Ere,h1o),e(Qa,u1o),e(qe,p1o),e(qe,I),e(I,K_),e(K_,yre),e(yre,_1o),e(K_,b1o),e(K_,W$),e(W$,v1o),e(K_,T1o),e(I,F1o),e(I,Z_),e(Z_,wre),e(wre,C1o),e(Z_,M1o),e(Z_,Q$),e(Q$,E1o),e(Z_,y1o),e(I,w1o),e(I,eb),e(eb,Are),e(Are,A1o),e(eb,L1o),e(eb,H$),e(H$,B1o),e(eb,x1o),e(I,k1o),e(I,ob),e(ob,Lre),e(Lre,R1o),e(ob,S1o),e(ob,U$),e(U$,P1o),e(ob,$1o),e(I,I1o),e(I,rb),e(rb,Bre),e(Bre,j1o),e(rb,N1o),e(rb,J$),e(J$,D1o),e(rb,q1o),e(I,G1o),e(I,tb),e(tb,xre),e(xre,O1o),e(tb,X1o),e(tb,Y$),e(Y$,V1o),e(tb,z1o),e(I,W1o),e(I,ab),e(ab,kre),e(kre,Q1o),e(ab,H1o),e(ab,K$),e(K$,U1o),e(ab,J1o),e(I,Y1o),e(I,nb),e(nb,Rre),e(Rre,K1o),e(nb,Z1o),e(nb,Z$),e(Z$,eFo),e(nb,oFo),e(I,rFo),e(I,sb),e(sb,Sre),e(Sre,tFo),e(sb,aFo),e(sb,eI),e(eI,nFo),e(sb,sFo),e(I,lFo),e(I,lb),e(lb,Pre),e(Pre,iFo),e(lb,dFo),e(lb,oI),e(oI,cFo),e(lb,mFo),e(I,fFo),e(I,ib),e(ib,$re),e($re,gFo),e(ib,hFo),e(ib,rI),e(rI,uFo),e(ib,pFo),e(I,_Fo),e(I,db),e(db,Ire),e(Ire,bFo),e(db,vFo),e(db,tI),e(tI,TFo),e(db,FFo),e(I,CFo),e(I,cb),e(cb,jre),e(jre,MFo),e(cb,EFo),e(cb,aI),e(aI,yFo),e(cb,wFo),e(I,AFo),e(I,mb),e(mb,Nre),e(Nre,LFo),e(mb,BFo),e(mb,nI),e(nI,xFo),e(mb,kFo),e(I,RFo),e(I,fb),e(fb,Dre),e(Dre,SFo),e(fb,PFo),e(fb,sI),e(sI,$Fo),e(fb,IFo),e(I,jFo),e(I,gb),e(gb,qre),e(qre,NFo),e(gb,DFo),e(gb,lI),e(lI,qFo),e(gb,GFo),e(I,OFo),e(I,hb),e(hb,Gre),e(Gre,XFo),e(hb,VFo),e(hb,iI),e(iI,zFo),e(hb,WFo),e(I,QFo),e(I,ub),e(ub,Ore),e(Ore,HFo),e(ub,UFo),e(ub,dI),e(dI,JFo),e(ub,YFo),e(I,KFo),e(I,pb),e(pb,Xre),e(Xre,ZFo),e(pb,eCo),e(pb,cI),e(cI,oCo),e(pb,rCo),e(I,tCo),e(I,_b),e(_b,Vre),e(Vre,aCo),e(_b,nCo),e(_b,mI),e(mI,sCo),e(_b,lCo),e(I,iCo),e(I,bb),e(bb,zre),e(zre,dCo),e(bb,cCo),e(bb,fI),e(fI,mCo),e(bb,fCo),e(I,gCo),e(I,vb),e(vb,Wre),e(Wre,hCo),e(vb,uCo),e(vb,gI),e(gI,pCo),e(vb,_Co),e(I,bCo),e(I,Tb),e(Tb,Qre),e(Qre,vCo),e(Tb,TCo),e(Tb,hI),e(hI,FCo),e(Tb,CCo),e(I,MCo),e(I,Fb),e(Fb,Hre),e(Hre,ECo),e(Fb,yCo),e(Fb,uI),e(uI,wCo),e(Fb,ACo),e(I,LCo),e(I,Cb),e(Cb,Ure),e(Ure,BCo),e(Cb,xCo),e(Cb,pI),e(pI,kCo),e(Cb,RCo),e(I,SCo),e(I,Mb),e(Mb,Jre),e(Jre,PCo),e(Mb,$Co),e(Mb,_I),e(_I,ICo),e(Mb,jCo),e(I,NCo),e(I,Eb),e(Eb,Yre),e(Yre,DCo),e(Eb,qCo),e(Eb,bI),e(bI,GCo),e(Eb,OCo),e(I,XCo),e(I,yb),e(yb,Kre),e(Kre,VCo),e(yb,zCo),e(yb,vI),e(vI,WCo),e(yb,QCo),e(I,HCo),e(I,wb),e(wb,Zre),e(Zre,UCo),e(wb,JCo),e(wb,TI),e(TI,YCo),e(wb,KCo),e(I,ZCo),e(I,Ab),e(Ab,ete),e(ete,eMo),e(Ab,oMo),e(Ab,FI),e(FI,rMo),e(Ab,tMo),e(I,aMo),e(I,Lb),e(Lb,ote),e(ote,nMo),e(Lb,sMo),e(Lb,rte),e(rte,lMo),e(Lb,iMo),e(I,dMo),e(I,Bb),e(Bb,tte),e(tte,cMo),e(Bb,mMo),e(Bb,CI),e(CI,fMo),e(Bb,gMo),e(I,hMo),e(I,xb),e(xb,ate),e(ate,uMo),e(xb,pMo),e(xb,MI),e(MI,_Mo),e(xb,bMo),e(I,vMo),e(I,kb),e(kb,nte),e(nte,TMo),e(kb,FMo),e(kb,EI),e(EI,CMo),e(kb,MMo),e(I,EMo),e(I,Rb),e(Rb,ste),e(ste,yMo),e(Rb,wMo),e(Rb,yI),e(yI,AMo),e(Rb,LMo),e(qe,BMo),e(qe,Sb),e(Sb,xMo),e(Sb,lte),e(lte,kMo),e(Sb,RMo),e(Sb,ite),e(ite,SMo),e(qe,PMo),e(qe,dte),e(dte,$Mo),e(qe,IMo),g(pw,qe,null),b(c,jke,_),b(c,id,_),e(id,Pb),e(Pb,cte),g(_w,cte,null),e(id,jMo),e(id,mte),e(mte,NMo),b(c,Nke,_),b(c,er,_),g(bw,er,null),e(er,DMo),e(er,dd),e(dd,qMo),e(dd,fte),e(fte,GMo),e(dd,OMo),e(dd,gte),e(gte,XMo),e(dd,VMo),e(er,zMo),e(er,vw),e(vw,WMo),e(vw,hte),e(hte,QMo),e(vw,HMo),e(er,UMo),e(er,Hr),g(Tw,Hr,null),e(Hr,JMo),e(Hr,ute),e(ute,YMo),e(Hr,KMo),e(Hr,cd),e(cd,ZMo),e(cd,pte),e(pte,e4o),e(cd,o4o),e(cd,_te),e(_te,r4o),e(cd,t4o),e(Hr,a4o),e(Hr,bte),e(bte,n4o),e(Hr,s4o),g(Fw,Hr,null),e(er,l4o),e(er,Ge),g(Cw,Ge,null),e(Ge,i4o),e(Ge,vte),e(vte,d4o),e(Ge,c4o),e(Ge,Ha),e(Ha,m4o),e(Ha,Tte),e(Tte,f4o),e(Ha,g4o),e(Ha,Fte),e(Fte,h4o),e(Ha,u4o),e(Ha,Cte),e(Cte,p4o),e(Ha,_4o),e(Ge,b4o),e(Ge,se),e(se,$b),e($b,Mte),e(Mte,v4o),e($b,T4o),e($b,wI),e(wI,F4o),e($b,C4o),e(se,M4o),e(se,Ib),e(Ib,Ete),e(Ete,E4o),e(Ib,y4o),e(Ib,AI),e(AI,w4o),e(Ib,A4o),e(se,L4o),e(se,jb),e(jb,yte),e(yte,B4o),e(jb,x4o),e(jb,LI),e(LI,k4o),e(jb,R4o),e(se,S4o),e(se,Nb),e(Nb,wte),e(wte,P4o),e(Nb,$4o),e(Nb,BI),e(BI,I4o),e(Nb,j4o),e(se,N4o),e(se,Db),e(Db,Ate),e(Ate,D4o),e(Db,q4o),e(Db,xI),e(xI,G4o),e(Db,O4o),e(se,X4o),e(se,qb),e(qb,Lte),e(Lte,V4o),e(qb,z4o),e(qb,kI),e(kI,W4o),e(qb,Q4o),e(se,H4o),e(se,Gb),e(Gb,Bte),e(Bte,U4o),e(Gb,J4o),e(Gb,RI),e(RI,Y4o),e(Gb,K4o),e(se,Z4o),e(se,Ob),e(Ob,xte),e(xte,eEo),e(Ob,oEo),e(Ob,SI),e(SI,rEo),e(Ob,tEo),e(se,aEo),e(se,Xb),e(Xb,kte),e(kte,nEo),e(Xb,sEo),e(Xb,PI),e(PI,lEo),e(Xb,iEo),e(se,dEo),e(se,Vb),e(Vb,Rte),e(Rte,cEo),e(Vb,mEo),e(Vb,$I),e($I,fEo),e(Vb,gEo),e(se,hEo),e(se,zb),e(zb,Ste),e(Ste,uEo),e(zb,pEo),e(zb,II),e(II,_Eo),e(zb,bEo),e(se,vEo),e(se,Wb),e(Wb,Pte),e(Pte,TEo),e(Wb,FEo),e(Wb,jI),e(jI,CEo),e(Wb,MEo),e(se,EEo),e(se,Qb),e(Qb,$te),e($te,yEo),e(Qb,wEo),e(Qb,NI),e(NI,AEo),e(Qb,LEo),e(se,BEo),e(se,Hb),e(Hb,Ite),e(Ite,xEo),e(Hb,kEo),e(Hb,DI),e(DI,REo),e(Hb,SEo),e(se,PEo),e(se,Ub),e(Ub,jte),e(jte,$Eo),e(Ub,IEo),e(Ub,qI),e(qI,jEo),e(Ub,NEo),e(se,DEo),e(se,Jb),e(Jb,Nte),e(Nte,qEo),e(Jb,GEo),e(Jb,GI),e(GI,OEo),e(Jb,XEo),e(Ge,VEo),e(Ge,Yb),e(Yb,zEo),e(Yb,Dte),e(Dte,WEo),e(Yb,QEo),e(Yb,qte),e(qte,HEo),e(Ge,UEo),e(Ge,Gte),e(Gte,JEo),e(Ge,YEo),g(Mw,Ge,null),b(c,Dke,_),b(c,md,_),e(md,Kb),e(Kb,Ote),g(Ew,Ote,null),e(md,KEo),e(md,Xte),e(Xte,ZEo),b(c,qke,_),b(c,or,_),g(yw,or,null),e(or,e3o),e(or,fd),e(fd,o3o),e(fd,Vte),e(Vte,r3o),e(fd,t3o),e(fd,zte),e(zte,a3o),e(fd,n3o),e(or,s3o),e(or,ww),e(ww,l3o),e(ww,Wte),e(Wte,i3o),e(ww,d3o),e(or,c3o),e(or,Ur),g(Aw,Ur,null),e(Ur,m3o),e(Ur,Qte),e(Qte,f3o),e(Ur,g3o),e(Ur,gd),e(gd,h3o),e(gd,Hte),e(Hte,u3o),e(gd,p3o),e(gd,Ute),e(Ute,_3o),e(gd,b3o),e(Ur,v3o),e(Ur,Jte),e(Jte,T3o),e(Ur,F3o),g(Lw,Ur,null),e(or,C3o),e(or,Oe),g(Bw,Oe,null),e(Oe,M3o),e(Oe,Yte),e(Yte,E3o),e(Oe,y3o),e(Oe,Ua),e(Ua,w3o),e(Ua,Kte),e(Kte,A3o),e(Ua,L3o),e(Ua,Zte),e(Zte,B3o),e(Ua,x3o),e(Ua,eae),e(eae,k3o),e(Ua,R3o),e(Oe,S3o),e(Oe,A),e(A,Zb),e(Zb,oae),e(oae,P3o),e(Zb,$3o),e(Zb,OI),e(OI,I3o),e(Zb,j3o),e(A,N3o),e(A,e2),e(e2,rae),e(rae,D3o),e(e2,q3o),e(e2,XI),e(XI,G3o),e(e2,O3o),e(A,X3o),e(A,o2),e(o2,tae),e(tae,V3o),e(o2,z3o),e(o2,VI),e(VI,W3o),e(o2,Q3o),e(A,H3o),e(A,r2),e(r2,aae),e(aae,U3o),e(r2,J3o),e(r2,zI),e(zI,Y3o),e(r2,K3o),e(A,Z3o),e(A,t2),e(t2,nae),e(nae,e5o),e(t2,o5o),e(t2,WI),e(WI,r5o),e(t2,t5o),e(A,a5o),e(A,a2),e(a2,sae),e(sae,n5o),e(a2,s5o),e(a2,QI),e(QI,l5o),e(a2,i5o),e(A,d5o),e(A,n2),e(n2,lae),e(lae,c5o),e(n2,m5o),e(n2,HI),e(HI,f5o),e(n2,g5o),e(A,h5o),e(A,s2),e(s2,iae),e(iae,u5o),e(s2,p5o),e(s2,UI),e(UI,_5o),e(s2,b5o),e(A,v5o),e(A,l2),e(l2,dae),e(dae,T5o),e(l2,F5o),e(l2,JI),e(JI,C5o),e(l2,M5o),e(A,E5o),e(A,i2),e(i2,cae),e(cae,y5o),e(i2,w5o),e(i2,YI),e(YI,A5o),e(i2,L5o),e(A,B5o),e(A,d2),e(d2,mae),e(mae,x5o),e(d2,k5o),e(d2,KI),e(KI,R5o),e(d2,S5o),e(A,P5o),e(A,c2),e(c2,fae),e(fae,$5o),e(c2,I5o),e(c2,ZI),e(ZI,j5o),e(c2,N5o),e(A,D5o),e(A,m2),e(m2,gae),e(gae,q5o),e(m2,G5o),e(m2,ej),e(ej,O5o),e(m2,X5o),e(A,V5o),e(A,f2),e(f2,hae),e(hae,z5o),e(f2,W5o),e(f2,oj),e(oj,Q5o),e(f2,H5o),e(A,U5o),e(A,g2),e(g2,uae),e(uae,J5o),e(g2,Y5o),e(g2,rj),e(rj,K5o),e(g2,Z5o),e(A,eyo),e(A,h2),e(h2,pae),e(pae,oyo),e(h2,ryo),e(h2,tj),e(tj,tyo),e(h2,ayo),e(A,nyo),e(A,u2),e(u2,_ae),e(_ae,syo),e(u2,lyo),e(u2,aj),e(aj,iyo),e(u2,dyo),e(A,cyo),e(A,p2),e(p2,bae),e(bae,myo),e(p2,fyo),e(p2,nj),e(nj,gyo),e(p2,hyo),e(A,uyo),e(A,_2),e(_2,vae),e(vae,pyo),e(_2,_yo),e(_2,sj),e(sj,byo),e(_2,vyo),e(A,Tyo),e(A,b2),e(b2,Tae),e(Tae,Fyo),e(b2,Cyo),e(b2,lj),e(lj,Myo),e(b2,Eyo),e(A,yyo),e(A,v2),e(v2,Fae),e(Fae,wyo),e(v2,Ayo),e(v2,ij),e(ij,Lyo),e(v2,Byo),e(A,xyo),e(A,T2),e(T2,Cae),e(Cae,kyo),e(T2,Ryo),e(T2,dj),e(dj,Syo),e(T2,Pyo),e(A,$yo),e(A,F2),e(F2,Mae),e(Mae,Iyo),e(F2,jyo),e(F2,cj),e(cj,Nyo),e(F2,Dyo),e(A,qyo),e(A,C2),e(C2,Eae),e(Eae,Gyo),e(C2,Oyo),e(C2,mj),e(mj,Xyo),e(C2,Vyo),e(A,zyo),e(A,M2),e(M2,yae),e(yae,Wyo),e(M2,Qyo),e(M2,fj),e(fj,Hyo),e(M2,Uyo),e(A,Jyo),e(A,E2),e(E2,wae),e(wae,Yyo),e(E2,Kyo),e(E2,gj),e(gj,Zyo),e(E2,ewo),e(A,owo),e(A,y2),e(y2,Aae),e(Aae,rwo),e(y2,two),e(y2,hj),e(hj,awo),e(y2,nwo),e(A,swo),e(A,w2),e(w2,Lae),e(Lae,lwo),e(w2,iwo),e(w2,uj),e(uj,dwo),e(w2,cwo),e(A,mwo),e(A,A2),e(A2,Bae),e(Bae,fwo),e(A2,gwo),e(A2,pj),e(pj,hwo),e(A2,uwo),e(A,pwo),e(A,L2),e(L2,xae),e(xae,_wo),e(L2,bwo),e(L2,_j),e(_j,vwo),e(L2,Two),e(A,Fwo),e(A,B2),e(B2,kae),e(kae,Cwo),e(B2,Mwo),e(B2,bj),e(bj,Ewo),e(B2,ywo),e(A,wwo),e(A,x2),e(x2,Rae),e(Rae,Awo),e(x2,Lwo),e(x2,vj),e(vj,Bwo),e(x2,xwo),e(A,kwo),e(A,k2),e(k2,Sae),e(Sae,Rwo),e(k2,Swo),e(k2,Tj),e(Tj,Pwo),e(k2,$wo),e(A,Iwo),e(A,R2),e(R2,Pae),e(Pae,jwo),e(R2,Nwo),e(R2,Fj),e(Fj,Dwo),e(R2,qwo),e(A,Gwo),e(A,S2),e(S2,$ae),e($ae,Owo),e(S2,Xwo),e(S2,Cj),e(Cj,Vwo),e(S2,zwo),e(A,Wwo),e(A,P2),e(P2,Iae),e(Iae,Qwo),e(P2,Hwo),e(P2,Mj),e(Mj,Uwo),e(P2,Jwo),e(A,Ywo),e(A,$2),e($2,jae),e(jae,Kwo),e($2,Zwo),e($2,Ej),e(Ej,e6o),e($2,o6o),e(A,r6o),e(A,I2),e(I2,Nae),e(Nae,t6o),e(I2,a6o),e(I2,yj),e(yj,n6o),e(I2,s6o),e(A,l6o),e(A,j2),e(j2,Dae),e(Dae,i6o),e(j2,d6o),e(j2,wj),e(wj,c6o),e(j2,m6o),e(A,f6o),e(A,N2),e(N2,qae),e(qae,g6o),e(N2,h6o),e(N2,Aj),e(Aj,u6o),e(N2,p6o),e(A,_6o),e(A,D2),e(D2,Gae),e(Gae,b6o),e(D2,v6o),e(D2,Lj),e(Lj,T6o),e(D2,F6o),e(A,C6o),e(A,q2),e(q2,Oae),e(Oae,M6o),e(q2,E6o),e(q2,Bj),e(Bj,y6o),e(q2,w6o),e(A,A6o),e(A,G2),e(G2,Xae),e(Xae,L6o),e(G2,B6o),e(G2,xj),e(xj,x6o),e(G2,k6o),e(A,R6o),e(A,O2),e(O2,Vae),e(Vae,S6o),e(O2,P6o),e(O2,kj),e(kj,$6o),e(O2,I6o),e(A,j6o),e(A,X2),e(X2,zae),e(zae,N6o),e(X2,D6o),e(X2,Rj),e(Rj,q6o),e(X2,G6o),e(A,O6o),e(A,V2),e(V2,Wae),e(Wae,X6o),e(V2,V6o),e(V2,Sj),e(Sj,z6o),e(V2,W6o),e(Oe,Q6o),e(Oe,z2),e(z2,H6o),e(z2,Qae),e(Qae,U6o),e(z2,J6o),e(z2,Hae),e(Hae,Y6o),e(Oe,K6o),e(Oe,Uae),e(Uae,Z6o),e(Oe,eAo),g(xw,Oe,null),b(c,Gke,_),b(c,hd,_),e(hd,W2),e(W2,Jae),g(kw,Jae,null),e(hd,oAo),e(hd,Yae),e(Yae,rAo),b(c,Oke,_),b(c,rr,_),g(Rw,rr,null),e(rr,tAo),e(rr,ud),e(ud,aAo),e(ud,Kae),e(Kae,nAo),e(ud,sAo),e(ud,Zae),e(Zae,lAo),e(ud,iAo),e(rr,dAo),e(rr,Sw),e(Sw,cAo),e(Sw,ene),e(ene,mAo),e(Sw,fAo),e(rr,gAo),e(rr,Jr),g(Pw,Jr,null),e(Jr,hAo),e(Jr,one),e(one,uAo),e(Jr,pAo),e(Jr,pd),e(pd,_Ao),e(pd,rne),e(rne,bAo),e(pd,vAo),e(pd,tne),e(tne,TAo),e(pd,FAo),e(Jr,CAo),e(Jr,ane),e(ane,MAo),e(Jr,EAo),g($w,Jr,null),e(rr,yAo),e(rr,Xe),g(Iw,Xe,null),e(Xe,wAo),e(Xe,nne),e(nne,AAo),e(Xe,LAo),e(Xe,Ja),e(Ja,BAo),e(Ja,sne),e(sne,xAo),e(Ja,kAo),e(Ja,lne),e(lne,RAo),e(Ja,SAo),e(Ja,ine),e(ine,PAo),e(Ja,$Ao),e(Xe,IAo),e(Xe,G),e(G,Q2),e(Q2,dne),e(dne,jAo),e(Q2,NAo),e(Q2,Pj),e(Pj,DAo),e(Q2,qAo),e(G,GAo),e(G,H2),e(H2,cne),e(cne,OAo),e(H2,XAo),e(H2,$j),e($j,VAo),e(H2,zAo),e(G,WAo),e(G,U2),e(U2,mne),e(mne,QAo),e(U2,HAo),e(U2,Ij),e(Ij,UAo),e(U2,JAo),e(G,YAo),e(G,J2),e(J2,fne),e(fne,KAo),e(J2,ZAo),e(J2,jj),e(jj,e0o),e(J2,o0o),e(G,r0o),e(G,Y2),e(Y2,gne),e(gne,t0o),e(Y2,a0o),e(Y2,Nj),e(Nj,n0o),e(Y2,s0o),e(G,l0o),e(G,K2),e(K2,hne),e(hne,i0o),e(K2,d0o),e(K2,Dj),e(Dj,c0o),e(K2,m0o),e(G,f0o),e(G,Z2),e(Z2,une),e(une,g0o),e(Z2,h0o),e(Z2,qj),e(qj,u0o),e(Z2,p0o),e(G,_0o),e(G,ev),e(ev,pne),e(pne,b0o),e(ev,v0o),e(ev,Gj),e(Gj,T0o),e(ev,F0o),e(G,C0o),e(G,ov),e(ov,_ne),e(_ne,M0o),e(ov,E0o),e(ov,Oj),e(Oj,y0o),e(ov,w0o),e(G,A0o),e(G,rv),e(rv,bne),e(bne,L0o),e(rv,B0o),e(rv,Xj),e(Xj,x0o),e(rv,k0o),e(G,R0o),e(G,tv),e(tv,vne),e(vne,S0o),e(tv,P0o),e(tv,Vj),e(Vj,$0o),e(tv,I0o),e(G,j0o),e(G,av),e(av,Tne),e(Tne,N0o),e(av,D0o),e(av,zj),e(zj,q0o),e(av,G0o),e(G,O0o),e(G,nv),e(nv,Fne),e(Fne,X0o),e(nv,V0o),e(nv,Wj),e(Wj,z0o),e(nv,W0o),e(G,Q0o),e(G,sv),e(sv,Cne),e(Cne,H0o),e(sv,U0o),e(sv,Qj),e(Qj,J0o),e(sv,Y0o),e(G,K0o),e(G,lv),e(lv,Mne),e(Mne,Z0o),e(lv,eLo),e(lv,Hj),e(Hj,oLo),e(lv,rLo),e(G,tLo),e(G,iv),e(iv,Ene),e(Ene,aLo),e(iv,nLo),e(iv,Uj),e(Uj,sLo),e(iv,lLo),e(G,iLo),e(G,dv),e(dv,yne),e(yne,dLo),e(dv,cLo),e(dv,Jj),e(Jj,mLo),e(dv,fLo),e(G,gLo),e(G,cv),e(cv,wne),e(wne,hLo),e(cv,uLo),e(cv,Yj),e(Yj,pLo),e(cv,_Lo),e(G,bLo),e(G,mv),e(mv,Ane),e(Ane,vLo),e(mv,TLo),e(mv,Kj),e(Kj,FLo),e(mv,CLo),e(G,MLo),e(G,fv),e(fv,Lne),e(Lne,ELo),e(fv,yLo),e(fv,Zj),e(Zj,wLo),e(fv,ALo),e(G,LLo),e(G,gv),e(gv,Bne),e(Bne,BLo),e(gv,xLo),e(gv,eN),e(eN,kLo),e(gv,RLo),e(G,SLo),e(G,hv),e(hv,xne),e(xne,PLo),e(hv,$Lo),e(hv,oN),e(oN,ILo),e(hv,jLo),e(G,NLo),e(G,uv),e(uv,kne),e(kne,DLo),e(uv,qLo),e(uv,rN),e(rN,GLo),e(uv,OLo),e(G,XLo),e(G,pv),e(pv,Rne),e(Rne,VLo),e(pv,zLo),e(pv,tN),e(tN,WLo),e(pv,QLo),e(G,HLo),e(G,_v),e(_v,Sne),e(Sne,ULo),e(_v,JLo),e(_v,aN),e(aN,YLo),e(_v,KLo),e(G,ZLo),e(G,bv),e(bv,Pne),e(Pne,e7o),e(bv,o7o),e(bv,nN),e(nN,r7o),e(bv,t7o),e(G,a7o),e(G,vv),e(vv,$ne),e($ne,n7o),e(vv,s7o),e(vv,sN),e(sN,l7o),e(vv,i7o),e(G,d7o),e(G,Tv),e(Tv,Ine),e(Ine,c7o),e(Tv,m7o),e(Tv,lN),e(lN,f7o),e(Tv,g7o),e(Xe,h7o),e(Xe,Fv),e(Fv,u7o),e(Fv,jne),e(jne,p7o),e(Fv,_7o),e(Fv,Nne),e(Nne,b7o),e(Xe,v7o),e(Xe,Dne),e(Dne,T7o),e(Xe,F7o),g(jw,Xe,null),b(c,Xke,_),b(c,_d,_),e(_d,Cv),e(Cv,qne),g(Nw,qne,null),e(_d,C7o),e(_d,Gne),e(Gne,M7o),b(c,Vke,_),b(c,tr,_),g(Dw,tr,null),e(tr,E7o),e(tr,bd),e(bd,y7o),e(bd,One),e(One,w7o),e(bd,A7o),e(bd,Xne),e(Xne,L7o),e(bd,B7o),e(tr,x7o),e(tr,qw),e(qw,k7o),e(qw,Vne),e(Vne,R7o),e(qw,S7o),e(tr,P7o),e(tr,Yr),g(Gw,Yr,null),e(Yr,$7o),e(Yr,zne),e(zne,I7o),e(Yr,j7o),e(Yr,vd),e(vd,N7o),e(vd,Wne),e(Wne,D7o),e(vd,q7o),e(vd,Qne),e(Qne,G7o),e(vd,O7o),e(Yr,X7o),e(Yr,Hne),e(Hne,V7o),e(Yr,z7o),g(Ow,Yr,null),e(tr,W7o),e(tr,Ve),g(Xw,Ve,null),e(Ve,Q7o),e(Ve,Une),e(Une,H7o),e(Ve,U7o),e(Ve,Ya),e(Ya,J7o),e(Ya,Jne),e(Jne,Y7o),e(Ya,K7o),e(Ya,Yne),e(Yne,Z7o),e(Ya,e8o),e(Ya,Kne),e(Kne,o8o),e(Ya,r8o),e(Ve,t8o),e(Ve,da),e(da,Mv),e(Mv,Zne),e(Zne,a8o),e(Mv,n8o),e(Mv,iN),e(iN,s8o),e(Mv,l8o),e(da,i8o),e(da,Ev),e(Ev,ese),e(ese,d8o),e(Ev,c8o),e(Ev,dN),e(dN,m8o),e(Ev,f8o),e(da,g8o),e(da,yv),e(yv,ose),e(ose,h8o),e(yv,u8o),e(yv,cN),e(cN,p8o),e(yv,_8o),e(da,b8o),e(da,wv),e(wv,rse),e(rse,v8o),e(wv,T8o),e(wv,mN),e(mN,F8o),e(wv,C8o),e(da,M8o),e(da,Av),e(Av,tse),e(tse,E8o),e(Av,y8o),e(Av,fN),e(fN,w8o),e(Av,A8o),e(Ve,L8o),e(Ve,Lv),e(Lv,B8o),e(Lv,ase),e(ase,x8o),e(Lv,k8o),e(Lv,nse),e(nse,R8o),e(Ve,S8o),e(Ve,sse),e(sse,P8o),e(Ve,$8o),g(Vw,Ve,null),b(c,zke,_),b(c,Td,_),e(Td,Bv),e(Bv,lse),g(zw,lse,null),e(Td,I8o),e(Td,ise),e(ise,j8o),b(c,Wke,_),b(c,ar,_),g(Ww,ar,null),e(ar,N8o),e(ar,Fd),e(Fd,D8o),e(Fd,dse),e(dse,q8o),e(Fd,G8o),e(Fd,cse),e(cse,O8o),e(Fd,X8o),e(ar,V8o),e(ar,Qw),e(Qw,z8o),e(Qw,mse),e(mse,W8o),e(Qw,Q8o),e(ar,H8o),e(ar,Kr),g(Hw,Kr,null),e(Kr,U8o),e(Kr,fse),e(fse,J8o),e(Kr,Y8o),e(Kr,Cd),e(Cd,K8o),e(Cd,gse),e(gse,Z8o),e(Cd,e9o),e(Cd,hse),e(hse,o9o),e(Cd,r9o),e(Kr,t9o),e(Kr,use),e(use,a9o),e(Kr,n9o),g(Uw,Kr,null),e(ar,s9o),e(ar,ze),g(Jw,ze,null),e(ze,l9o),e(ze,pse),e(pse,i9o),e(ze,d9o),e(ze,Ka),e(Ka,c9o),e(Ka,_se),e(_se,m9o),e(Ka,f9o),e(Ka,bse),e(bse,g9o),e(Ka,h9o),e(Ka,vse),e(vse,u9o),e(Ka,p9o),e(ze,_9o),e(ze,D),e(D,xv),e(xv,Tse),e(Tse,b9o),e(xv,v9o),e(xv,gN),e(gN,T9o),e(xv,F9o),e(D,C9o),e(D,kv),e(kv,Fse),e(Fse,M9o),e(kv,E9o),e(kv,hN),e(hN,y9o),e(kv,w9o),e(D,A9o),e(D,Rv),e(Rv,Cse),e(Cse,L9o),e(Rv,B9o),e(Rv,uN),e(uN,x9o),e(Rv,k9o),e(D,R9o),e(D,Sv),e(Sv,Mse),e(Mse,S9o),e(Sv,P9o),e(Sv,pN),e(pN,$9o),e(Sv,I9o),e(D,j9o),e(D,Pv),e(Pv,Ese),e(Ese,N9o),e(Pv,D9o),e(Pv,_N),e(_N,q9o),e(Pv,G9o),e(D,O9o),e(D,$v),e($v,yse),e(yse,X9o),e($v,V9o),e($v,bN),e(bN,z9o),e($v,W9o),e(D,Q9o),e(D,Iv),e(Iv,wse),e(wse,H9o),e(Iv,U9o),e(Iv,vN),e(vN,J9o),e(Iv,Y9o),e(D,K9o),e(D,jv),e(jv,Ase),e(Ase,Z9o),e(jv,eBo),e(jv,TN),e(TN,oBo),e(jv,rBo),e(D,tBo),e(D,Nv),e(Nv,Lse),e(Lse,aBo),e(Nv,nBo),e(Nv,FN),e(FN,sBo),e(Nv,lBo),e(D,iBo),e(D,Dv),e(Dv,Bse),e(Bse,dBo),e(Dv,cBo),e(Dv,CN),e(CN,mBo),e(Dv,fBo),e(D,gBo),e(D,qv),e(qv,xse),e(xse,hBo),e(qv,uBo),e(qv,MN),e(MN,pBo),e(qv,_Bo),e(D,bBo),e(D,Gv),e(Gv,kse),e(kse,vBo),e(Gv,TBo),e(Gv,EN),e(EN,FBo),e(Gv,CBo),e(D,MBo),e(D,Ov),e(Ov,Rse),e(Rse,EBo),e(Ov,yBo),e(Ov,yN),e(yN,wBo),e(Ov,ABo),e(D,LBo),e(D,Xv),e(Xv,Sse),e(Sse,BBo),e(Xv,xBo),e(Xv,wN),e(wN,kBo),e(Xv,RBo),e(D,SBo),e(D,Vv),e(Vv,Pse),e(Pse,PBo),e(Vv,$Bo),e(Vv,AN),e(AN,IBo),e(Vv,jBo),e(D,NBo),e(D,zv),e(zv,$se),e($se,DBo),e(zv,qBo),e(zv,LN),e(LN,GBo),e(zv,OBo),e(D,XBo),e(D,Wv),e(Wv,Ise),e(Ise,VBo),e(Wv,zBo),e(Wv,BN),e(BN,WBo),e(Wv,QBo),e(D,HBo),e(D,Qv),e(Qv,jse),e(jse,UBo),e(Qv,JBo),e(Qv,xN),e(xN,YBo),e(Qv,KBo),e(D,ZBo),e(D,Hv),e(Hv,Nse),e(Nse,exo),e(Hv,oxo),e(Hv,kN),e(kN,rxo),e(Hv,txo),e(D,axo),e(D,Uv),e(Uv,Dse),e(Dse,nxo),e(Uv,sxo),e(Uv,RN),e(RN,lxo),e(Uv,ixo),e(D,dxo),e(D,Jv),e(Jv,qse),e(qse,cxo),e(Jv,mxo),e(Jv,SN),e(SN,fxo),e(Jv,gxo),e(D,hxo),e(D,Yv),e(Yv,Gse),e(Gse,uxo),e(Yv,pxo),e(Yv,PN),e(PN,_xo),e(Yv,bxo),e(D,vxo),e(D,Kv),e(Kv,Ose),e(Ose,Txo),e(Kv,Fxo),e(Kv,$N),e($N,Cxo),e(Kv,Mxo),e(D,Exo),e(D,Zv),e(Zv,Xse),e(Xse,yxo),e(Zv,wxo),e(Zv,IN),e(IN,Axo),e(Zv,Lxo),e(D,Bxo),e(D,eT),e(eT,Vse),e(Vse,xxo),e(eT,kxo),e(eT,jN),e(jN,Rxo),e(eT,Sxo),e(D,Pxo),e(D,oT),e(oT,zse),e(zse,$xo),e(oT,Ixo),e(oT,NN),e(NN,jxo),e(oT,Nxo),e(D,Dxo),e(D,rT),e(rT,Wse),e(Wse,qxo),e(rT,Gxo),e(rT,DN),e(DN,Oxo),e(rT,Xxo),e(D,Vxo),e(D,tT),e(tT,Qse),e(Qse,zxo),e(tT,Wxo),e(tT,qN),e(qN,Qxo),e(tT,Hxo),e(D,Uxo),e(D,aT),e(aT,Hse),e(Hse,Jxo),e(aT,Yxo),e(aT,GN),e(GN,Kxo),e(aT,Zxo),e(D,eko),e(D,nT),e(nT,Use),e(Use,oko),e(nT,rko),e(nT,ON),e(ON,tko),e(nT,ako),e(D,nko),e(D,sT),e(sT,Jse),e(Jse,sko),e(sT,lko),e(sT,XN),e(XN,iko),e(sT,dko),e(D,cko),e(D,lT),e(lT,Yse),e(Yse,mko),e(lT,fko),e(lT,VN),e(VN,gko),e(lT,hko),e(D,uko),e(D,iT),e(iT,Kse),e(Kse,pko),e(iT,_ko),e(iT,zN),e(zN,bko),e(iT,vko),e(ze,Tko),e(ze,dT),e(dT,Fko),e(dT,Zse),e(Zse,Cko),e(dT,Mko),e(dT,ele),e(ele,Eko),e(ze,yko),e(ze,ole),e(ole,wko),e(ze,Ako),g(Yw,ze,null),b(c,Qke,_),b(c,Md,_),e(Md,cT),e(cT,rle),g(Kw,rle,null),e(Md,Lko),e(Md,tle),e(tle,Bko),b(c,Hke,_),b(c,nr,_),g(Zw,nr,null),e(nr,xko),e(nr,Ed),e(Ed,kko),e(Ed,ale),e(ale,Rko),e(Ed,Sko),e(Ed,nle),e(nle,Pko),e(Ed,$ko),e(nr,Iko),e(nr,e6),e(e6,jko),e(e6,sle),e(sle,Nko),e(e6,Dko),e(nr,qko),e(nr,Zr),g(o6,Zr,null),e(Zr,Gko),e(Zr,lle),e(lle,Oko),e(Zr,Xko),e(Zr,yd),e(yd,Vko),e(yd,ile),e(ile,zko),e(yd,Wko),e(yd,dle),e(dle,Qko),e(yd,Hko),e(Zr,Uko),e(Zr,cle),e(cle,Jko),e(Zr,Yko),g(r6,Zr,null),e(nr,Kko),e(nr,We),g(t6,We,null),e(We,Zko),e(We,mle),e(mle,eRo),e(We,oRo),e(We,Za),e(Za,rRo),e(Za,fle),e(fle,tRo),e(Za,aRo),e(Za,gle),e(gle,nRo),e(Za,sRo),e(Za,hle),e(hle,lRo),e(Za,iRo),e(We,dRo),e(We,R),e(R,mT),e(mT,ule),e(ule,cRo),e(mT,mRo),e(mT,WN),e(WN,fRo),e(mT,gRo),e(R,hRo),e(R,fT),e(fT,ple),e(ple,uRo),e(fT,pRo),e(fT,QN),e(QN,_Ro),e(fT,bRo),e(R,vRo),e(R,gT),e(gT,_le),e(_le,TRo),e(gT,FRo),e(gT,HN),e(HN,CRo),e(gT,MRo),e(R,ERo),e(R,hT),e(hT,ble),e(ble,yRo),e(hT,wRo),e(hT,UN),e(UN,ARo),e(hT,LRo),e(R,BRo),e(R,uT),e(uT,vle),e(vle,xRo),e(uT,kRo),e(uT,JN),e(JN,RRo),e(uT,SRo),e(R,PRo),e(R,pT),e(pT,Tle),e(Tle,$Ro),e(pT,IRo),e(pT,YN),e(YN,jRo),e(pT,NRo),e(R,DRo),e(R,_T),e(_T,Fle),e(Fle,qRo),e(_T,GRo),e(_T,KN),e(KN,ORo),e(_T,XRo),e(R,VRo),e(R,bT),e(bT,Cle),e(Cle,zRo),e(bT,WRo),e(bT,ZN),e(ZN,QRo),e(bT,HRo),e(R,URo),e(R,vT),e(vT,Mle),e(Mle,JRo),e(vT,YRo),e(vT,eD),e(eD,KRo),e(vT,ZRo),e(R,eSo),e(R,TT),e(TT,Ele),e(Ele,oSo),e(TT,rSo),e(TT,oD),e(oD,tSo),e(TT,aSo),e(R,nSo),e(R,FT),e(FT,yle),e(yle,sSo),e(FT,lSo),e(FT,rD),e(rD,iSo),e(FT,dSo),e(R,cSo),e(R,CT),e(CT,wle),e(wle,mSo),e(CT,fSo),e(CT,tD),e(tD,gSo),e(CT,hSo),e(R,uSo),e(R,MT),e(MT,Ale),e(Ale,pSo),e(MT,_So),e(MT,aD),e(aD,bSo),e(MT,vSo),e(R,TSo),e(R,ET),e(ET,Lle),e(Lle,FSo),e(ET,CSo),e(ET,nD),e(nD,MSo),e(ET,ESo),e(R,ySo),e(R,yT),e(yT,Ble),e(Ble,wSo),e(yT,ASo),e(yT,sD),e(sD,LSo),e(yT,BSo),e(R,xSo),e(R,wT),e(wT,xle),e(xle,kSo),e(wT,RSo),e(wT,lD),e(lD,SSo),e(wT,PSo),e(R,$So),e(R,AT),e(AT,kle),e(kle,ISo),e(AT,jSo),e(AT,iD),e(iD,NSo),e(AT,DSo),e(R,qSo),e(R,LT),e(LT,Rle),e(Rle,GSo),e(LT,OSo),e(LT,dD),e(dD,XSo),e(LT,VSo),e(R,zSo),e(R,BT),e(BT,Sle),e(Sle,WSo),e(BT,QSo),e(BT,cD),e(cD,HSo),e(BT,USo),e(R,JSo),e(R,xT),e(xT,Ple),e(Ple,YSo),e(xT,KSo),e(xT,mD),e(mD,ZSo),e(xT,ePo),e(R,oPo),e(R,kT),e(kT,$le),e($le,rPo),e(kT,tPo),e(kT,fD),e(fD,aPo),e(kT,nPo),e(R,sPo),e(R,RT),e(RT,Ile),e(Ile,lPo),e(RT,iPo),e(RT,gD),e(gD,dPo),e(RT,cPo),e(R,mPo),e(R,ST),e(ST,jle),e(jle,fPo),e(ST,gPo),e(ST,hD),e(hD,hPo),e(ST,uPo),e(R,pPo),e(R,PT),e(PT,Nle),e(Nle,_Po),e(PT,bPo),e(PT,uD),e(uD,vPo),e(PT,TPo),e(R,FPo),e(R,$T),e($T,Dle),e(Dle,CPo),e($T,MPo),e($T,pD),e(pD,EPo),e($T,yPo),e(R,wPo),e(R,IT),e(IT,qle),e(qle,APo),e(IT,LPo),e(IT,_D),e(_D,BPo),e(IT,xPo),e(R,kPo),e(R,jT),e(jT,Gle),e(Gle,RPo),e(jT,SPo),e(jT,bD),e(bD,PPo),e(jT,$Po),e(R,IPo),e(R,NT),e(NT,Ole),e(Ole,jPo),e(NT,NPo),e(NT,vD),e(vD,DPo),e(NT,qPo),e(R,GPo),e(R,DT),e(DT,Xle),e(Xle,OPo),e(DT,XPo),e(DT,TD),e(TD,VPo),e(DT,zPo),e(R,WPo),e(R,qT),e(qT,Vle),e(Vle,QPo),e(qT,HPo),e(qT,FD),e(FD,UPo),e(qT,JPo),e(R,YPo),e(R,GT),e(GT,zle),e(zle,KPo),e(GT,ZPo),e(GT,CD),e(CD,e$o),e(GT,o$o),e(R,r$o),e(R,OT),e(OT,Wle),e(Wle,t$o),e(OT,a$o),e(OT,MD),e(MD,n$o),e(OT,s$o),e(R,l$o),e(R,XT),e(XT,Qle),e(Qle,i$o),e(XT,d$o),e(XT,ED),e(ED,c$o),e(XT,m$o),e(R,f$o),e(R,VT),e(VT,Hle),e(Hle,g$o),e(VT,h$o),e(VT,yD),e(yD,u$o),e(VT,p$o),e(R,_$o),e(R,zT),e(zT,Ule),e(Ule,b$o),e(zT,v$o),e(zT,wD),e(wD,T$o),e(zT,F$o),e(R,C$o),e(R,WT),e(WT,Jle),e(Jle,M$o),e(WT,E$o),e(WT,AD),e(AD,y$o),e(WT,w$o),e(R,A$o),e(R,QT),e(QT,Yle),e(Yle,L$o),e(QT,B$o),e(QT,LD),e(LD,x$o),e(QT,k$o),e(R,R$o),e(R,HT),e(HT,Kle),e(Kle,S$o),e(HT,P$o),e(HT,BD),e(BD,$$o),e(HT,I$o),e(R,j$o),e(R,UT),e(UT,Zle),e(Zle,N$o),e(UT,D$o),e(UT,xD),e(xD,q$o),e(UT,G$o),e(We,O$o),e(We,JT),e(JT,X$o),e(JT,eie),e(eie,V$o),e(JT,z$o),e(JT,oie),e(oie,W$o),e(We,Q$o),e(We,rie),e(rie,H$o),e(We,U$o),g(a6,We,null),b(c,Uke,_),b(c,wd,_),e(wd,YT),e(YT,tie),g(n6,tie,null),e(wd,J$o),e(wd,aie),e(aie,Y$o),b(c,Jke,_),b(c,sr,_),g(s6,sr,null),e(sr,K$o),e(sr,Ad),e(Ad,Z$o),e(Ad,nie),e(nie,eIo),e(Ad,oIo),e(Ad,sie),e(sie,rIo),e(Ad,tIo),e(sr,aIo),e(sr,l6),e(l6,nIo),e(l6,lie),e(lie,sIo),e(l6,lIo),e(sr,iIo),e(sr,et),g(i6,et,null),e(et,dIo),e(et,iie),e(iie,cIo),e(et,mIo),e(et,Ld),e(Ld,fIo),e(Ld,die),e(die,gIo),e(Ld,hIo),e(Ld,cie),e(cie,uIo),e(Ld,pIo),e(et,_Io),e(et,mie),e(mie,bIo),e(et,vIo),g(d6,et,null),e(sr,TIo),e(sr,Qe),g(c6,Qe,null),e(Qe,FIo),e(Qe,fie),e(fie,CIo),e(Qe,MIo),e(Qe,en),e(en,EIo),e(en,gie),e(gie,yIo),e(en,wIo),e(en,hie),e(hie,AIo),e(en,LIo),e(en,uie),e(uie,BIo),e(en,xIo),e(Qe,kIo),e(Qe,pie),e(pie,KT),e(KT,_ie),e(_ie,RIo),e(KT,SIo),e(KT,kD),e(kD,PIo),e(KT,$Io),e(Qe,IIo),e(Qe,ZT),e(ZT,jIo),e(ZT,bie),e(bie,NIo),e(ZT,DIo),e(ZT,vie),e(vie,qIo),e(Qe,GIo),e(Qe,Tie),e(Tie,OIo),e(Qe,XIo),g(m6,Qe,null),b(c,Yke,_),b(c,Bd,_),e(Bd,e1),e(e1,Fie),g(f6,Fie,null),e(Bd,VIo),e(Bd,Cie),e(Cie,zIo),b(c,Kke,_),b(c,lr,_),g(g6,lr,null),e(lr,WIo),e(lr,xd),e(xd,QIo),e(xd,Mie),e(Mie,HIo),e(xd,UIo),e(xd,Eie),e(Eie,JIo),e(xd,YIo),e(lr,KIo),e(lr,h6),e(h6,ZIo),e(h6,yie),e(yie,ejo),e(h6,ojo),e(lr,rjo),e(lr,ot),g(u6,ot,null),e(ot,tjo),e(ot,wie),e(wie,ajo),e(ot,njo),e(ot,kd),e(kd,sjo),e(kd,Aie),e(Aie,ljo),e(kd,ijo),e(kd,Lie),e(Lie,djo),e(kd,cjo),e(ot,mjo),e(ot,Bie),e(Bie,fjo),e(ot,gjo),g(p6,ot,null),e(lr,hjo),e(lr,He),g(_6,He,null),e(He,ujo),e(He,xie),e(xie,pjo),e(He,_jo),e(He,on),e(on,bjo),e(on,kie),e(kie,vjo),e(on,Tjo),e(on,Rie),e(Rie,Fjo),e(on,Cjo),e(on,Sie),e(Sie,Mjo),e(on,Ejo),e(He,yjo),e(He,ge),e(ge,o1),e(o1,Pie),e(Pie,wjo),e(o1,Ajo),e(o1,RD),e(RD,Ljo),e(o1,Bjo),e(ge,xjo),e(ge,r1),e(r1,$ie),e($ie,kjo),e(r1,Rjo),e(r1,SD),e(SD,Sjo),e(r1,Pjo),e(ge,$jo),e(ge,qs),e(qs,Iie),e(Iie,Ijo),e(qs,jjo),e(qs,PD),e(PD,Njo),e(qs,Djo),e(qs,$D),e($D,qjo),e(qs,Gjo),e(ge,Ojo),e(ge,t1),e(t1,jie),e(jie,Xjo),e(t1,Vjo),e(t1,ID),e(ID,zjo),e(t1,Wjo),e(ge,Qjo),e(ge,fa),e(fa,Nie),e(Nie,Hjo),e(fa,Ujo),e(fa,jD),e(jD,Jjo),e(fa,Yjo),e(fa,ND),e(ND,Kjo),e(fa,Zjo),e(fa,DD),e(DD,eNo),e(fa,oNo),e(ge,rNo),e(ge,a1),e(a1,Die),e(Die,tNo),e(a1,aNo),e(a1,qD),e(qD,nNo),e(a1,sNo),e(ge,lNo),e(ge,n1),e(n1,qie),e(qie,iNo),e(n1,dNo),e(n1,GD),e(GD,cNo),e(n1,mNo),e(ge,fNo),e(ge,s1),e(s1,Gie),e(Gie,gNo),e(s1,hNo),e(s1,OD),e(OD,uNo),e(s1,pNo),e(ge,_No),e(ge,l1),e(l1,Oie),e(Oie,bNo),e(l1,vNo),e(l1,XD),e(XD,TNo),e(l1,FNo),e(ge,CNo),e(ge,i1),e(i1,Xie),e(Xie,MNo),e(i1,ENo),e(i1,VD),e(VD,yNo),e(i1,wNo),e(ge,ANo),e(ge,d1),e(d1,Vie),e(Vie,LNo),e(d1,BNo),e(d1,zD),e(zD,xNo),e(d1,kNo),e(He,RNo),e(He,c1),e(c1,SNo),e(c1,zie),e(zie,PNo),e(c1,$No),e(c1,Wie),e(Wie,INo),e(He,jNo),e(He,Qie),e(Qie,NNo),e(He,DNo),g(b6,He,null),b(c,Zke,_),b(c,Rd,_),e(Rd,m1),e(m1,Hie),g(v6,Hie,null),e(Rd,qNo),e(Rd,Uie),e(Uie,GNo),b(c,eRe,_),b(c,ir,_),g(T6,ir,null),e(ir,ONo),e(ir,Sd),e(Sd,XNo),e(Sd,Jie),e(Jie,VNo),e(Sd,zNo),e(Sd,Yie),e(Yie,WNo),e(Sd,QNo),e(ir,HNo),e(ir,F6),e(F6,UNo),e(F6,Kie),e(Kie,JNo),e(F6,YNo),e(ir,KNo),e(ir,rt),g(C6,rt,null),e(rt,ZNo),e(rt,Zie),e(Zie,eDo),e(rt,oDo),e(rt,Pd),e(Pd,rDo),e(Pd,ede),e(ede,tDo),e(Pd,aDo),e(Pd,ode),e(ode,nDo),e(Pd,sDo),e(rt,lDo),e(rt,rde),e(rde,iDo),e(rt,dDo),g(M6,rt,null),e(ir,cDo),e(ir,Ue),g(E6,Ue,null),e(Ue,mDo),e(Ue,tde),e(tde,fDo),e(Ue,gDo),e(Ue,rn),e(rn,hDo),e(rn,ade),e(ade,uDo),e(rn,pDo),e(rn,nde),e(nde,_Do),e(rn,bDo),e(rn,sde),e(sde,vDo),e(rn,TDo),e(Ue,FDo),e(Ue,lde),e(lde,f1),e(f1,ide),e(ide,CDo),e(f1,MDo),e(f1,WD),e(WD,EDo),e(f1,yDo),e(Ue,wDo),e(Ue,g1),e(g1,ADo),e(g1,dde),e(dde,LDo),e(g1,BDo),e(g1,cde),e(cde,xDo),e(Ue,kDo),e(Ue,mde),e(mde,RDo),e(Ue,SDo),g(y6,Ue,null),b(c,oRe,_),b(c,$d,_),e($d,h1),e(h1,fde),g(w6,fde,null),e($d,PDo),e($d,gde),e(gde,$Do),b(c,rRe,_),b(c,dr,_),g(A6,dr,null),e(dr,IDo),e(dr,Id),e(Id,jDo),e(Id,hde),e(hde,NDo),e(Id,DDo),e(Id,ude),e(ude,qDo),e(Id,GDo),e(dr,ODo),e(dr,L6),e(L6,XDo),e(L6,pde),e(pde,VDo),e(L6,zDo),e(dr,WDo),e(dr,tt),g(B6,tt,null),e(tt,QDo),e(tt,_de),e(_de,HDo),e(tt,UDo),e(tt,jd),e(jd,JDo),e(jd,bde),e(bde,YDo),e(jd,KDo),e(jd,vde),e(vde,ZDo),e(jd,eqo),e(tt,oqo),e(tt,Tde),e(Tde,rqo),e(tt,tqo),g(x6,tt,null),e(dr,aqo),e(dr,Je),g(k6,Je,null),e(Je,nqo),e(Je,Fde),e(Fde,sqo),e(Je,lqo),e(Je,tn),e(tn,iqo),e(tn,Cde),e(Cde,dqo),e(tn,cqo),e(tn,Mde),e(Mde,mqo),e(tn,fqo),e(tn,Ede),e(Ede,gqo),e(tn,hqo),e(Je,uqo),e(Je,ke),e(ke,u1),e(u1,yde),e(yde,pqo),e(u1,_qo),e(u1,QD),e(QD,bqo),e(u1,vqo),e(ke,Tqo),e(ke,p1),e(p1,wde),e(wde,Fqo),e(p1,Cqo),e(p1,HD),e(HD,Mqo),e(p1,Eqo),e(ke,yqo),e(ke,_1),e(_1,Ade),e(Ade,wqo),e(_1,Aqo),e(_1,UD),e(UD,Lqo),e(_1,Bqo),e(ke,xqo),e(ke,b1),e(b1,Lde),e(Lde,kqo),e(b1,Rqo),e(b1,JD),e(JD,Sqo),e(b1,Pqo),e(ke,$qo),e(ke,v1),e(v1,Bde),e(Bde,Iqo),e(v1,jqo),e(v1,YD),e(YD,Nqo),e(v1,Dqo),e(ke,qqo),e(ke,T1),e(T1,xde),e(xde,Gqo),e(T1,Oqo),e(T1,KD),e(KD,Xqo),e(T1,Vqo),e(ke,zqo),e(ke,F1),e(F1,kde),e(kde,Wqo),e(F1,Qqo),e(F1,ZD),e(ZD,Hqo),e(F1,Uqo),e(ke,Jqo),e(ke,C1),e(C1,Rde),e(Rde,Yqo),e(C1,Kqo),e(C1,eq),e(eq,Zqo),e(C1,eGo),e(Je,oGo),e(Je,M1),e(M1,rGo),e(M1,Sde),e(Sde,tGo),e(M1,aGo),e(M1,Pde),e(Pde,nGo),e(Je,sGo),e(Je,$de),e($de,lGo),e(Je,iGo),g(R6,Je,null),b(c,tRe,_),b(c,Nd,_),e(Nd,E1),e(E1,Ide),g(S6,Ide,null),e(Nd,dGo),e(Nd,jde),e(jde,cGo),b(c,aRe,_),b(c,cr,_),g(P6,cr,null),e(cr,mGo),e(cr,Dd),e(Dd,fGo),e(Dd,Nde),e(Nde,gGo),e(Dd,hGo),e(Dd,Dde),e(Dde,uGo),e(Dd,pGo),e(cr,_Go),e(cr,$6),e($6,bGo),e($6,qde),e(qde,vGo),e($6,TGo),e(cr,FGo),e(cr,at),g(I6,at,null),e(at,CGo),e(at,Gde),e(Gde,MGo),e(at,EGo),e(at,qd),e(qd,yGo),e(qd,Ode),e(Ode,wGo),e(qd,AGo),e(qd,Xde),e(Xde,LGo),e(qd,BGo),e(at,xGo),e(at,Vde),e(Vde,kGo),e(at,RGo),g(j6,at,null),e(cr,SGo),e(cr,Ye),g(N6,Ye,null),e(Ye,PGo),e(Ye,zde),e(zde,$Go),e(Ye,IGo),e(Ye,an),e(an,jGo),e(an,Wde),e(Wde,NGo),e(an,DGo),e(an,Qde),e(Qde,qGo),e(an,GGo),e(an,Hde),e(Hde,OGo),e(an,XGo),e(Ye,VGo),e(Ye,nn),e(nn,y1),e(y1,Ude),e(Ude,zGo),e(y1,WGo),e(y1,oq),e(oq,QGo),e(y1,HGo),e(nn,UGo),e(nn,w1),e(w1,Jde),e(Jde,JGo),e(w1,YGo),e(w1,rq),e(rq,KGo),e(w1,ZGo),e(nn,eOo),e(nn,A1),e(A1,Yde),e(Yde,oOo),e(A1,rOo),e(A1,tq),e(tq,tOo),e(A1,aOo),e(nn,nOo),e(nn,L1),e(L1,Kde),e(Kde,sOo),e(L1,lOo),e(L1,aq),e(aq,iOo),e(L1,dOo),e(Ye,cOo),e(Ye,B1),e(B1,mOo),e(B1,Zde),e(Zde,fOo),e(B1,gOo),e(B1,ece),e(ece,hOo),e(Ye,uOo),e(Ye,oce),e(oce,pOo),e(Ye,_Oo),g(D6,Ye,null),b(c,nRe,_),b(c,Gd,_),e(Gd,x1),e(x1,rce),g(q6,rce,null),e(Gd,bOo),e(Gd,tce),e(tce,vOo),b(c,sRe,_),b(c,mr,_),g(G6,mr,null),e(mr,TOo),e(mr,Od),e(Od,FOo),e(Od,ace),e(ace,COo),e(Od,MOo),e(Od,nce),e(nce,EOo),e(Od,yOo),e(mr,wOo),e(mr,O6),e(O6,AOo),e(O6,sce),e(sce,LOo),e(O6,BOo),e(mr,xOo),e(mr,nt),g(X6,nt,null),e(nt,kOo),e(nt,lce),e(lce,ROo),e(nt,SOo),e(nt,Xd),e(Xd,POo),e(Xd,ice),e(ice,$Oo),e(Xd,IOo),e(Xd,dce),e(dce,jOo),e(Xd,NOo),e(nt,DOo),e(nt,cce),e(cce,qOo),e(nt,GOo),g(V6,nt,null),e(mr,OOo),e(mr,Ke),g(z6,Ke,null),e(Ke,XOo),e(Ke,mce),e(mce,VOo),e(Ke,zOo),e(Ke,sn),e(sn,WOo),e(sn,fce),e(fce,QOo),e(sn,HOo),e(sn,gce),e(gce,UOo),e(sn,JOo),e(sn,hce),e(hce,YOo),e(sn,KOo),e(Ke,ZOo),e(Ke,Re),e(Re,k1),e(k1,uce),e(uce,eXo),e(k1,oXo),e(k1,nq),e(nq,rXo),e(k1,tXo),e(Re,aXo),e(Re,R1),e(R1,pce),e(pce,nXo),e(R1,sXo),e(R1,sq),e(sq,lXo),e(R1,iXo),e(Re,dXo),e(Re,S1),e(S1,_ce),e(_ce,cXo),e(S1,mXo),e(S1,lq),e(lq,fXo),e(S1,gXo),e(Re,hXo),e(Re,P1),e(P1,bce),e(bce,uXo),e(P1,pXo),e(P1,iq),e(iq,_Xo),e(P1,bXo),e(Re,vXo),e(Re,$1),e($1,vce),e(vce,TXo),e($1,FXo),e($1,dq),e(dq,CXo),e($1,MXo),e(Re,EXo),e(Re,I1),e(I1,Tce),e(Tce,yXo),e(I1,wXo),e(I1,cq),e(cq,AXo),e(I1,LXo),e(Re,BXo),e(Re,j1),e(j1,Fce),e(Fce,xXo),e(j1,kXo),e(j1,mq),e(mq,RXo),e(j1,SXo),e(Re,PXo),e(Re,N1),e(N1,Cce),e(Cce,$Xo),e(N1,IXo),e(N1,fq),e(fq,jXo),e(N1,NXo),e(Ke,DXo),e(Ke,D1),e(D1,qXo),e(D1,Mce),e(Mce,GXo),e(D1,OXo),e(D1,Ece),e(Ece,XXo),e(Ke,VXo),e(Ke,yce),e(yce,zXo),e(Ke,WXo),g(W6,Ke,null),b(c,lRe,_),b(c,Vd,_),e(Vd,q1),e(q1,wce),g(Q6,wce,null),e(Vd,QXo),e(Vd,Ace),e(Ace,HXo),b(c,iRe,_),b(c,fr,_),g(H6,fr,null),e(fr,UXo),e(fr,zd),e(zd,JXo),e(zd,Lce),e(Lce,YXo),e(zd,KXo),e(zd,Bce),e(Bce,ZXo),e(zd,eVo),e(fr,oVo),e(fr,U6),e(U6,rVo),e(U6,xce),e(xce,tVo),e(U6,aVo),e(fr,nVo),e(fr,st),g(J6,st,null),e(st,sVo),e(st,kce),e(kce,lVo),e(st,iVo),e(st,Wd),e(Wd,dVo),e(Wd,Rce),e(Rce,cVo),e(Wd,mVo),e(Wd,Sce),e(Sce,fVo),e(Wd,gVo),e(st,hVo),e(st,Pce),e(Pce,uVo),e(st,pVo),g(Y6,st,null),e(fr,_Vo),e(fr,Ze),g(K6,Ze,null),e(Ze,bVo),e(Ze,$ce),e($ce,vVo),e(Ze,TVo),e(Ze,ln),e(ln,FVo),e(ln,Ice),e(Ice,CVo),e(ln,MVo),e(ln,jce),e(jce,EVo),e(ln,yVo),e(ln,Nce),e(Nce,wVo),e(ln,AVo),e(Ze,LVo),e(Ze,Z6),e(Z6,G1),e(G1,Dce),e(Dce,BVo),e(G1,xVo),e(G1,gq),e(gq,kVo),e(G1,RVo),e(Z6,SVo),e(Z6,O1),e(O1,qce),e(qce,PVo),e(O1,$Vo),e(O1,hq),e(hq,IVo),e(O1,jVo),e(Ze,NVo),e(Ze,X1),e(X1,DVo),e(X1,Gce),e(Gce,qVo),e(X1,GVo),e(X1,Oce),e(Oce,OVo),e(Ze,XVo),e(Ze,Xce),e(Xce,VVo),e(Ze,zVo),g(eA,Ze,null),b(c,dRe,_),b(c,Qd,_),e(Qd,V1),e(V1,Vce),g(oA,Vce,null),e(Qd,WVo),e(Qd,zce),e(zce,QVo),b(c,cRe,_),b(c,gr,_),g(rA,gr,null),e(gr,HVo),e(gr,Hd),e(Hd,UVo),e(Hd,Wce),e(Wce,JVo),e(Hd,YVo),e(Hd,Qce),e(Qce,KVo),e(Hd,ZVo),e(gr,ezo),e(gr,tA),e(tA,ozo),e(tA,Hce),e(Hce,rzo),e(tA,tzo),e(gr,azo),e(gr,lt),g(aA,lt,null),e(lt,nzo),e(lt,Uce),e(Uce,szo),e(lt,lzo),e(lt,Ud),e(Ud,izo),e(Ud,Jce),e(Jce,dzo),e(Ud,czo),e(Ud,Yce),e(Yce,mzo),e(Ud,fzo),e(lt,gzo),e(lt,Kce),e(Kce,hzo),e(lt,uzo),g(nA,lt,null),e(gr,pzo),e(gr,eo),g(sA,eo,null),e(eo,_zo),e(eo,Zce),e(Zce,bzo),e(eo,vzo),e(eo,dn),e(dn,Tzo),e(dn,eme),e(eme,Fzo),e(dn,Czo),e(dn,ome),e(ome,Mzo),e(dn,Ezo),e(dn,rme),e(rme,yzo),e(dn,wzo),e(eo,Azo),e(eo,cn),e(cn,z1),e(z1,tme),e(tme,Lzo),e(z1,Bzo),e(z1,uq),e(uq,xzo),e(z1,kzo),e(cn,Rzo),e(cn,W1),e(W1,ame),e(ame,Szo),e(W1,Pzo),e(W1,pq),e(pq,$zo),e(W1,Izo),e(cn,jzo),e(cn,Q1),e(Q1,nme),e(nme,Nzo),e(Q1,Dzo),e(Q1,_q),e(_q,qzo),e(Q1,Gzo),e(cn,Ozo),e(cn,H1),e(H1,sme),e(sme,Xzo),e(H1,Vzo),e(H1,bq),e(bq,zzo),e(H1,Wzo),e(eo,Qzo),e(eo,U1),e(U1,Hzo),e(U1,lme),e(lme,Uzo),e(U1,Jzo),e(U1,ime),e(ime,Yzo),e(eo,Kzo),e(eo,dme),e(dme,Zzo),e(eo,eWo),g(lA,eo,null),b(c,mRe,_),b(c,Jd,_),e(Jd,J1),e(J1,cme),g(iA,cme,null),e(Jd,oWo),e(Jd,mme),e(mme,rWo),b(c,fRe,_),b(c,hr,_),g(dA,hr,null),e(hr,tWo),e(hr,Yd),e(Yd,aWo),e(Yd,fme),e(fme,nWo),e(Yd,sWo),e(Yd,gme),e(gme,lWo),e(Yd,iWo),e(hr,dWo),e(hr,cA),e(cA,cWo),e(cA,hme),e(hme,mWo),e(cA,fWo),e(hr,gWo),e(hr,it),g(mA,it,null),e(it,hWo),e(it,ume),e(ume,uWo),e(it,pWo),e(it,Kd),e(Kd,_Wo),e(Kd,pme),e(pme,bWo),e(Kd,vWo),e(Kd,_me),e(_me,TWo),e(Kd,FWo),e(it,CWo),e(it,bme),e(bme,MWo),e(it,EWo),g(fA,it,null),e(hr,yWo),e(hr,oo),g(gA,oo,null),e(oo,wWo),e(oo,vme),e(vme,AWo),e(oo,LWo),e(oo,mn),e(mn,BWo),e(mn,Tme),e(Tme,xWo),e(mn,kWo),e(mn,Fme),e(Fme,RWo),e(mn,SWo),e(mn,Cme),e(Cme,PWo),e(mn,$Wo),e(oo,IWo),e(oo,Zd),e(Zd,Y1),e(Y1,Mme),e(Mme,jWo),e(Y1,NWo),e(Y1,vq),e(vq,DWo),e(Y1,qWo),e(Zd,GWo),e(Zd,K1),e(K1,Eme),e(Eme,OWo),e(K1,XWo),e(K1,Tq),e(Tq,VWo),e(K1,zWo),e(Zd,WWo),e(Zd,Z1),e(Z1,yme),e(yme,QWo),e(Z1,HWo),e(Z1,Fq),e(Fq,UWo),e(Z1,JWo),e(oo,YWo),e(oo,eF),e(eF,KWo),e(eF,wme),e(wme,ZWo),e(eF,eQo),e(eF,Ame),e(Ame,oQo),e(oo,rQo),e(oo,Lme),e(Lme,tQo),e(oo,aQo),g(hA,oo,null),b(c,gRe,_),b(c,ec,_),e(ec,oF),e(oF,Bme),g(uA,Bme,null),e(ec,nQo),e(ec,xme),e(xme,sQo),b(c,hRe,_),b(c,ur,_),g(pA,ur,null),e(ur,lQo),e(ur,oc),e(oc,iQo),e(oc,kme),e(kme,dQo),e(oc,cQo),e(oc,Rme),e(Rme,mQo),e(oc,fQo),e(ur,gQo),e(ur,_A),e(_A,hQo),e(_A,Sme),e(Sme,uQo),e(_A,pQo),e(ur,_Qo),e(ur,dt),g(bA,dt,null),e(dt,bQo),e(dt,Pme),e(Pme,vQo),e(dt,TQo),e(dt,rc),e(rc,FQo),e(rc,$me),e($me,CQo),e(rc,MQo),e(rc,Ime),e(Ime,EQo),e(rc,yQo),e(dt,wQo),e(dt,jme),e(jme,AQo),e(dt,LQo),g(vA,dt,null),e(ur,BQo),e(ur,ro),g(TA,ro,null),e(ro,xQo),e(ro,Nme),e(Nme,kQo),e(ro,RQo),e(ro,fn),e(fn,SQo),e(fn,Dme),e(Dme,PQo),e(fn,$Qo),e(fn,qme),e(qme,IQo),e(fn,jQo),e(fn,Gme),e(Gme,NQo),e(fn,DQo),e(ro,qQo),e(ro,Ome),e(Ome,rF),e(rF,Xme),e(Xme,GQo),e(rF,OQo),e(rF,Cq),e(Cq,XQo),e(rF,VQo),e(ro,zQo),e(ro,tF),e(tF,WQo),e(tF,Vme),e(Vme,QQo),e(tF,HQo),e(tF,zme),e(zme,UQo),e(ro,JQo),e(ro,Wme),e(Wme,YQo),e(ro,KQo),g(FA,ro,null),b(c,uRe,_),b(c,tc,_),e(tc,aF),e(aF,Qme),g(CA,Qme,null),e(tc,ZQo),e(tc,Hme),e(Hme,eHo),b(c,pRe,_),b(c,pr,_),g(MA,pr,null),e(pr,oHo),e(pr,ac),e(ac,rHo),e(ac,Ume),e(Ume,tHo),e(ac,aHo),e(ac,Jme),e(Jme,nHo),e(ac,sHo),e(pr,lHo),e(pr,EA),e(EA,iHo),e(EA,Yme),e(Yme,dHo),e(EA,cHo),e(pr,mHo),e(pr,ct),g(yA,ct,null),e(ct,fHo),e(ct,Kme),e(Kme,gHo),e(ct,hHo),e(ct,nc),e(nc,uHo),e(nc,Zme),e(Zme,pHo),e(nc,_Ho),e(nc,efe),e(efe,bHo),e(nc,vHo),e(ct,THo),e(ct,ofe),e(ofe,FHo),e(ct,CHo),g(wA,ct,null),e(pr,MHo),e(pr,to),g(AA,to,null),e(to,EHo),e(to,rfe),e(rfe,yHo),e(to,wHo),e(to,gn),e(gn,AHo),e(gn,tfe),e(tfe,LHo),e(gn,BHo),e(gn,afe),e(afe,xHo),e(gn,kHo),e(gn,nfe),e(nfe,RHo),e(gn,SHo),e(to,PHo),e(to,sfe),e(sfe,nF),e(nF,lfe),e(lfe,$Ho),e(nF,IHo),e(nF,Mq),e(Mq,jHo),e(nF,NHo),e(to,DHo),e(to,sF),e(sF,qHo),e(sF,ife),e(ife,GHo),e(sF,OHo),e(sF,dfe),e(dfe,XHo),e(to,VHo),e(to,cfe),e(cfe,zHo),e(to,WHo),g(LA,to,null),b(c,_Re,_),b(c,sc,_),e(sc,lF),e(lF,mfe),g(BA,mfe,null),e(sc,QHo),e(sc,ffe),e(ffe,HHo),b(c,bRe,_),b(c,_r,_),g(xA,_r,null),e(_r,UHo),e(_r,lc),e(lc,JHo),e(lc,gfe),e(gfe,YHo),e(lc,KHo),e(lc,hfe),e(hfe,ZHo),e(lc,eUo),e(_r,oUo),e(_r,kA),e(kA,rUo),e(kA,ufe),e(ufe,tUo),e(kA,aUo),e(_r,nUo),e(_r,mt),g(RA,mt,null),e(mt,sUo),e(mt,pfe),e(pfe,lUo),e(mt,iUo),e(mt,ic),e(ic,dUo),e(ic,_fe),e(_fe,cUo),e(ic,mUo),e(ic,bfe),e(bfe,fUo),e(ic,gUo),e(mt,hUo),e(mt,vfe),e(vfe,uUo),e(mt,pUo),g(SA,mt,null),e(_r,_Uo),e(_r,ao),g(PA,ao,null),e(ao,bUo),e(ao,Tfe),e(Tfe,vUo),e(ao,TUo),e(ao,hn),e(hn,FUo),e(hn,Ffe),e(Ffe,CUo),e(hn,MUo),e(hn,Cfe),e(Cfe,EUo),e(hn,yUo),e(hn,Mfe),e(Mfe,wUo),e(hn,AUo),e(ao,LUo),e(ao,$A),e($A,iF),e(iF,Efe),e(Efe,BUo),e(iF,xUo),e(iF,Eq),e(Eq,kUo),e(iF,RUo),e($A,SUo),e($A,dF),e(dF,yfe),e(yfe,PUo),e(dF,$Uo),e(dF,yq),e(yq,IUo),e(dF,jUo),e(ao,NUo),e(ao,cF),e(cF,DUo),e(cF,wfe),e(wfe,qUo),e(cF,GUo),e(cF,Afe),e(Afe,OUo),e(ao,XUo),e(ao,Lfe),e(Lfe,VUo),e(ao,zUo),g(IA,ao,null),b(c,vRe,_),b(c,dc,_),e(dc,mF),e(mF,Bfe),g(jA,Bfe,null),e(dc,WUo),e(dc,xfe),e(xfe,QUo),b(c,TRe,_),b(c,br,_),g(NA,br,null),e(br,HUo),e(br,cc),e(cc,UUo),e(cc,kfe),e(kfe,JUo),e(cc,YUo),e(cc,Rfe),e(Rfe,KUo),e(cc,ZUo),e(br,eJo),e(br,DA),e(DA,oJo),e(DA,Sfe),e(Sfe,rJo),e(DA,tJo),e(br,aJo),e(br,ft),g(qA,ft,null),e(ft,nJo),e(ft,Pfe),e(Pfe,sJo),e(ft,lJo),e(ft,mc),e(mc,iJo),e(mc,$fe),e($fe,dJo),e(mc,cJo),e(mc,Ife),e(Ife,mJo),e(mc,fJo),e(ft,gJo),e(ft,jfe),e(jfe,hJo),e(ft,uJo),g(GA,ft,null),e(br,pJo),e(br,no),g(OA,no,null),e(no,_Jo),e(no,Nfe),e(Nfe,bJo),e(no,vJo),e(no,un),e(un,TJo),e(un,Dfe),e(Dfe,FJo),e(un,CJo),e(un,qfe),e(qfe,MJo),e(un,EJo),e(un,Gfe),e(Gfe,yJo),e(un,wJo),e(no,AJo),e(no,Ofe),e(Ofe,fF),e(fF,Xfe),e(Xfe,LJo),e(fF,BJo),e(fF,wq),e(wq,xJo),e(fF,kJo),e(no,RJo),e(no,gF),e(gF,SJo),e(gF,Vfe),e(Vfe,PJo),e(gF,$Jo),e(gF,zfe),e(zfe,IJo),e(no,jJo),e(no,Wfe),e(Wfe,NJo),e(no,DJo),g(XA,no,null),b(c,FRe,_),b(c,fc,_),e(fc,hF),e(hF,Qfe),g(VA,Qfe,null),e(fc,qJo),e(fc,Hfe),e(Hfe,GJo),b(c,CRe,_),b(c,vr,_),g(zA,vr,null),e(vr,OJo),e(vr,gc),e(gc,XJo),e(gc,Ufe),e(Ufe,VJo),e(gc,zJo),e(gc,Jfe),e(Jfe,WJo),e(gc,QJo),e(vr,HJo),e(vr,WA),e(WA,UJo),e(WA,Yfe),e(Yfe,JJo),e(WA,YJo),e(vr,KJo),e(vr,gt),g(QA,gt,null),e(gt,ZJo),e(gt,Kfe),e(Kfe,eYo),e(gt,oYo),e(gt,hc),e(hc,rYo),e(hc,Zfe),e(Zfe,tYo),e(hc,aYo),e(hc,ege),e(ege,nYo),e(hc,sYo),e(gt,lYo),e(gt,oge),e(oge,iYo),e(gt,dYo),g(HA,gt,null),e(vr,cYo),e(vr,ho),g(UA,ho,null),e(ho,mYo),e(ho,rge),e(rge,fYo),e(ho,gYo),e(ho,pn),e(pn,hYo),e(pn,tge),e(tge,uYo),e(pn,pYo),e(pn,age),e(age,_Yo),e(pn,bYo),e(pn,nge),e(nge,vYo),e(pn,TYo),e(ho,FYo),e(ho,B),e(B,uF),e(uF,sge),e(sge,CYo),e(uF,MYo),e(uF,Aq),e(Aq,EYo),e(uF,yYo),e(B,wYo),e(B,pF),e(pF,lge),e(lge,AYo),e(pF,LYo),e(pF,Lq),e(Lq,BYo),e(pF,xYo),e(B,kYo),e(B,_F),e(_F,ige),e(ige,RYo),e(_F,SYo),e(_F,Bq),e(Bq,PYo),e(_F,$Yo),e(B,IYo),e(B,bF),e(bF,dge),e(dge,jYo),e(bF,NYo),e(bF,xq),e(xq,DYo),e(bF,qYo),e(B,GYo),e(B,vF),e(vF,cge),e(cge,OYo),e(vF,XYo),e(vF,kq),e(kq,VYo),e(vF,zYo),e(B,WYo),e(B,TF),e(TF,mge),e(mge,QYo),e(TF,HYo),e(TF,Rq),e(Rq,UYo),e(TF,JYo),e(B,YYo),e(B,FF),e(FF,fge),e(fge,KYo),e(FF,ZYo),e(FF,Sq),e(Sq,eKo),e(FF,oKo),e(B,rKo),e(B,CF),e(CF,gge),e(gge,tKo),e(CF,aKo),e(CF,Pq),e(Pq,nKo),e(CF,sKo),e(B,lKo),e(B,MF),e(MF,hge),e(hge,iKo),e(MF,dKo),e(MF,$q),e($q,cKo),e(MF,mKo),e(B,fKo),e(B,EF),e(EF,uge),e(uge,gKo),e(EF,hKo),e(EF,Iq),e(Iq,uKo),e(EF,pKo),e(B,_Ko),e(B,yF),e(yF,pge),e(pge,bKo),e(yF,vKo),e(yF,jq),e(jq,TKo),e(yF,FKo),e(B,CKo),e(B,wF),e(wF,_ge),e(_ge,MKo),e(wF,EKo),e(wF,Nq),e(Nq,yKo),e(wF,wKo),e(B,AKo),e(B,AF),e(AF,bge),e(bge,LKo),e(AF,BKo),e(AF,Dq),e(Dq,xKo),e(AF,kKo),e(B,RKo),e(B,LF),e(LF,vge),e(vge,SKo),e(LF,PKo),e(LF,qq),e(qq,$Ko),e(LF,IKo),e(B,jKo),e(B,BF),e(BF,Tge),e(Tge,NKo),e(BF,DKo),e(BF,Gq),e(Gq,qKo),e(BF,GKo),e(B,OKo),e(B,xF),e(xF,Fge),e(Fge,XKo),e(xF,VKo),e(xF,Oq),e(Oq,zKo),e(xF,WKo),e(B,QKo),e(B,Gs),e(Gs,Cge),e(Cge,HKo),e(Gs,UKo),e(Gs,Xq),e(Xq,JKo),e(Gs,YKo),e(Gs,Vq),e(Vq,KKo),e(Gs,ZKo),e(B,eZo),e(B,kF),e(kF,Mge),e(Mge,oZo),e(kF,rZo),e(kF,zq),e(zq,tZo),e(kF,aZo),e(B,nZo),e(B,RF),e(RF,Ege),e(Ege,sZo),e(RF,lZo),e(RF,Wq),e(Wq,iZo),e(RF,dZo),e(B,cZo),e(B,SF),e(SF,yge),e(yge,mZo),e(SF,fZo),e(SF,Qq),e(Qq,gZo),e(SF,hZo),e(B,uZo),e(B,PF),e(PF,wge),e(wge,pZo),e(PF,_Zo),e(PF,Hq),e(Hq,bZo),e(PF,vZo),e(B,TZo),e(B,$F),e($F,Age),e(Age,FZo),e($F,CZo),e($F,Uq),e(Uq,MZo),e($F,EZo),e(B,yZo),e(B,IF),e(IF,Lge),e(Lge,wZo),e(IF,AZo),e(IF,Jq),e(Jq,LZo),e(IF,BZo),e(B,xZo),e(B,jF),e(jF,Bge),e(Bge,kZo),e(jF,RZo),e(jF,Yq),e(Yq,SZo),e(jF,PZo),e(B,$Zo),e(B,NF),e(NF,xge),e(xge,IZo),e(NF,jZo),e(NF,Kq),e(Kq,NZo),e(NF,DZo),e(B,qZo),e(B,DF),e(DF,kge),e(kge,GZo),e(DF,OZo),e(DF,Zq),e(Zq,XZo),e(DF,VZo),e(B,zZo),e(B,qF),e(qF,Rge),e(Rge,WZo),e(qF,QZo),e(qF,eG),e(eG,HZo),e(qF,UZo),e(B,JZo),e(B,GF),e(GF,Sge),e(Sge,YZo),e(GF,KZo),e(GF,oG),e(oG,ZZo),e(GF,eer),e(B,oer),e(B,OF),e(OF,Pge),e(Pge,rer),e(OF,ter),e(OF,rG),e(rG,aer),e(OF,ner),e(B,ser),e(B,XF),e(XF,$ge),e($ge,ler),e(XF,ier),e(XF,tG),e(tG,der),e(XF,cer),e(B,mer),e(B,VF),e(VF,Ige),e(Ige,fer),e(VF,ger),e(VF,aG),e(aG,her),e(VF,uer),e(B,per),e(B,zF),e(zF,jge),e(jge,_er),e(zF,ber),e(zF,nG),e(nG,ver),e(zF,Ter),e(B,Fer),e(B,WF),e(WF,Nge),e(Nge,Cer),e(WF,Mer),e(WF,sG),e(sG,Eer),e(WF,yer),e(B,wer),e(B,QF),e(QF,Dge),e(Dge,Aer),e(QF,Ler),e(QF,lG),e(lG,Ber),e(QF,xer),e(B,ker),e(B,HF),e(HF,qge),e(qge,Rer),e(HF,Ser),e(HF,iG),e(iG,Per),e(HF,$er),e(B,Ier),e(B,UF),e(UF,Gge),e(Gge,jer),e(UF,Ner),e(UF,dG),e(dG,Der),e(UF,qer),e(B,Ger),e(B,JF),e(JF,Oge),e(Oge,Oer),e(JF,Xer),e(JF,cG),e(cG,Ver),e(JF,zer),e(B,Wer),e(B,YF),e(YF,Xge),e(Xge,Qer),e(YF,Her),e(YF,mG),e(mG,Uer),e(YF,Jer),e(B,Yer),e(B,KF),e(KF,Vge),e(Vge,Ker),e(KF,Zer),e(KF,fG),e(fG,eor),e(KF,oor),e(B,ror),e(B,ZF),e(ZF,zge),e(zge,tor),e(ZF,aor),e(ZF,gG),e(gG,nor),e(ZF,sor),e(B,lor),e(B,eC),e(eC,Wge),e(Wge,ior),e(eC,dor),e(eC,hG),e(hG,cor),e(eC,mor),e(B,gor),e(B,oC),e(oC,Qge),e(Qge,hor),e(oC,uor),e(oC,uG),e(uG,por),e(oC,_or),e(B,bor),e(B,rC),e(rC,Hge),e(Hge,vor),e(rC,Tor),e(rC,pG),e(pG,For),e(rC,Cor),e(ho,Mor),e(ho,Uge),e(Uge,Eor),e(ho,yor),g(JA,ho,null),b(c,MRe,_),b(c,uc,_),e(uc,tC),e(tC,Jge),g(YA,Jge,null),e(uc,wor),e(uc,Yge),e(Yge,Aor),b(c,ERe,_),b(c,Tr,_),g(KA,Tr,null),e(Tr,Lor),e(Tr,pc),e(pc,Bor),e(pc,Kge),e(Kge,xor),e(pc,kor),e(pc,Zge),e(Zge,Ror),e(pc,Sor),e(Tr,Por),e(Tr,ZA),e(ZA,$or),e(ZA,ehe),e(ehe,Ior),e(ZA,jor),e(Tr,Nor),e(Tr,ht),g(e0,ht,null),e(ht,Dor),e(ht,ohe),e(ohe,qor),e(ht,Gor),e(ht,_c),e(_c,Oor),e(_c,rhe),e(rhe,Xor),e(_c,Vor),e(_c,the),e(the,zor),e(_c,Wor),e(ht,Qor),e(ht,ahe),e(ahe,Hor),e(ht,Uor),g(o0,ht,null),e(Tr,Jor),e(Tr,uo),g(r0,uo,null),e(uo,Yor),e(uo,nhe),e(nhe,Kor),e(uo,Zor),e(uo,_n),e(_n,err),e(_n,she),e(she,orr),e(_n,rrr),e(_n,lhe),e(lhe,trr),e(_n,arr),e(_n,ihe),e(ihe,nrr),e(_n,srr),e(uo,lrr),e(uo,H),e(H,aC),e(aC,dhe),e(dhe,irr),e(aC,drr),e(aC,_G),e(_G,crr),e(aC,mrr),e(H,frr),e(H,nC),e(nC,che),e(che,grr),e(nC,hrr),e(nC,bG),e(bG,urr),e(nC,prr),e(H,_rr),e(H,sC),e(sC,mhe),e(mhe,brr),e(sC,vrr),e(sC,vG),e(vG,Trr),e(sC,Frr),e(H,Crr),e(H,lC),e(lC,fhe),e(fhe,Mrr),e(lC,Err),e(lC,TG),e(TG,yrr),e(lC,wrr),e(H,Arr),e(H,iC),e(iC,ghe),e(ghe,Lrr),e(iC,Brr),e(iC,FG),e(FG,xrr),e(iC,krr),e(H,Rrr),e(H,dC),e(dC,hhe),e(hhe,Srr),e(dC,Prr),e(dC,CG),e(CG,$rr),e(dC,Irr),e(H,jrr),e(H,cC),e(cC,uhe),e(uhe,Nrr),e(cC,Drr),e(cC,MG),e(MG,qrr),e(cC,Grr),e(H,Orr),e(H,mC),e(mC,phe),e(phe,Xrr),e(mC,Vrr),e(mC,EG),e(EG,zrr),e(mC,Wrr),e(H,Qrr),e(H,fC),e(fC,_he),e(_he,Hrr),e(fC,Urr),e(fC,yG),e(yG,Jrr),e(fC,Yrr),e(H,Krr),e(H,gC),e(gC,bhe),e(bhe,Zrr),e(gC,etr),e(gC,wG),e(wG,otr),e(gC,rtr),e(H,ttr),e(H,hC),e(hC,vhe),e(vhe,atr),e(hC,ntr),e(hC,AG),e(AG,str),e(hC,ltr),e(H,itr),e(H,uC),e(uC,The),e(The,dtr),e(uC,ctr),e(uC,LG),e(LG,mtr),e(uC,ftr),e(H,gtr),e(H,pC),e(pC,Fhe),e(Fhe,htr),e(pC,utr),e(pC,BG),e(BG,ptr),e(pC,_tr),e(H,btr),e(H,_C),e(_C,Che),e(Che,vtr),e(_C,Ttr),e(_C,xG),e(xG,Ftr),e(_C,Ctr),e(H,Mtr),e(H,bC),e(bC,Mhe),e(Mhe,Etr),e(bC,ytr),e(bC,kG),e(kG,wtr),e(bC,Atr),e(H,Ltr),e(H,vC),e(vC,Ehe),e(Ehe,Btr),e(vC,xtr),e(vC,RG),e(RG,ktr),e(vC,Rtr),e(H,Str),e(H,TC),e(TC,yhe),e(yhe,Ptr),e(TC,$tr),e(TC,SG),e(SG,Itr),e(TC,jtr),e(H,Ntr),e(H,FC),e(FC,whe),e(whe,Dtr),e(FC,qtr),e(FC,PG),e(PG,Gtr),e(FC,Otr),e(H,Xtr),e(H,CC),e(CC,Ahe),e(Ahe,Vtr),e(CC,ztr),e(CC,$G),e($G,Wtr),e(CC,Qtr),e(H,Htr),e(H,MC),e(MC,Lhe),e(Lhe,Utr),e(MC,Jtr),e(MC,IG),e(IG,Ytr),e(MC,Ktr),e(H,Ztr),e(H,EC),e(EC,Bhe),e(Bhe,ear),e(EC,oar),e(EC,jG),e(jG,rar),e(EC,tar),e(H,aar),e(H,yC),e(yC,xhe),e(xhe,nar),e(yC,sar),e(yC,NG),e(NG,lar),e(yC,iar),e(uo,dar),e(uo,khe),e(khe,car),e(uo,mar),g(t0,uo,null),b(c,yRe,_),b(c,bc,_),e(bc,wC),e(wC,Rhe),g(a0,Rhe,null),e(bc,far),e(bc,She),e(She,gar),b(c,wRe,_),b(c,Fr,_),g(n0,Fr,null),e(Fr,har),e(Fr,vc),e(vc,uar),e(vc,Phe),e(Phe,par),e(vc,_ar),e(vc,$he),e($he,bar),e(vc,Tar),e(Fr,Far),e(Fr,s0),e(s0,Car),e(s0,Ihe),e(Ihe,Mar),e(s0,Ear),e(Fr,yar),e(Fr,ut),g(l0,ut,null),e(ut,war),e(ut,jhe),e(jhe,Aar),e(ut,Lar),e(ut,Tc),e(Tc,Bar),e(Tc,Nhe),e(Nhe,xar),e(Tc,kar),e(Tc,Dhe),e(Dhe,Rar),e(Tc,Sar),e(ut,Par),e(ut,qhe),e(qhe,$ar),e(ut,Iar),g(i0,ut,null),e(Fr,jar),e(Fr,po),g(d0,po,null),e(po,Nar),e(po,Ghe),e(Ghe,Dar),e(po,qar),e(po,bn),e(bn,Gar),e(bn,Ohe),e(Ohe,Oar),e(bn,Xar),e(bn,Xhe),e(Xhe,Var),e(bn,zar),e(bn,Vhe),e(Vhe,War),e(bn,Qar),e(po,Har),e(po,ce),e(ce,AC),e(AC,zhe),e(zhe,Uar),e(AC,Jar),e(AC,DG),e(DG,Yar),e(AC,Kar),e(ce,Zar),e(ce,LC),e(LC,Whe),e(Whe,enr),e(LC,onr),e(LC,qG),e(qG,rnr),e(LC,tnr),e(ce,anr),e(ce,BC),e(BC,Qhe),e(Qhe,nnr),e(BC,snr),e(BC,GG),e(GG,lnr),e(BC,inr),e(ce,dnr),e(ce,xC),e(xC,Hhe),e(Hhe,cnr),e(xC,mnr),e(xC,OG),e(OG,fnr),e(xC,gnr),e(ce,hnr),e(ce,kC),e(kC,Uhe),e(Uhe,unr),e(kC,pnr),e(kC,XG),e(XG,_nr),e(kC,bnr),e(ce,vnr),e(ce,RC),e(RC,Jhe),e(Jhe,Tnr),e(RC,Fnr),e(RC,VG),e(VG,Cnr),e(RC,Mnr),e(ce,Enr),e(ce,SC),e(SC,Yhe),e(Yhe,ynr),e(SC,wnr),e(SC,zG),e(zG,Anr),e(SC,Lnr),e(ce,Bnr),e(ce,PC),e(PC,Khe),e(Khe,xnr),e(PC,knr),e(PC,WG),e(WG,Rnr),e(PC,Snr),e(ce,Pnr),e(ce,$C),e($C,Zhe),e(Zhe,$nr),e($C,Inr),e($C,QG),e(QG,jnr),e($C,Nnr),e(ce,Dnr),e(ce,IC),e(IC,eue),e(eue,qnr),e(IC,Gnr),e(IC,HG),e(HG,Onr),e(IC,Xnr),e(ce,Vnr),e(ce,jC),e(jC,oue),e(oue,znr),e(jC,Wnr),e(jC,UG),e(UG,Qnr),e(jC,Hnr),e(ce,Unr),e(ce,NC),e(NC,rue),e(rue,Jnr),e(NC,Ynr),e(NC,JG),e(JG,Knr),e(NC,Znr),e(po,esr),e(po,tue),e(tue,osr),e(po,rsr),g(c0,po,null),b(c,ARe,_),b(c,Fc,_),e(Fc,DC),e(DC,aue),g(m0,aue,null),e(Fc,tsr),e(Fc,nue),e(nue,asr),b(c,LRe,_),b(c,Cr,_),g(f0,Cr,null),e(Cr,nsr),e(Cr,Cc),e(Cc,ssr),e(Cc,sue),e(sue,lsr),e(Cc,isr),e(Cc,lue),e(lue,dsr),e(Cc,csr),e(Cr,msr),e(Cr,g0),e(g0,fsr),e(g0,iue),e(iue,gsr),e(g0,hsr),e(Cr,usr),e(Cr,pt),g(h0,pt,null),e(pt,psr),e(pt,due),e(due,_sr),e(pt,bsr),e(pt,Mc),e(Mc,vsr),e(Mc,cue),e(cue,Tsr),e(Mc,Fsr),e(Mc,mue),e(mue,Csr),e(Mc,Msr),e(pt,Esr),e(pt,fue),e(fue,ysr),e(pt,wsr),g(u0,pt,null),e(Cr,Asr),e(Cr,_o),g(p0,_o,null),e(_o,Lsr),e(_o,gue),e(gue,Bsr),e(_o,xsr),e(_o,vn),e(vn,ksr),e(vn,hue),e(hue,Rsr),e(vn,Ssr),e(vn,uue),e(uue,Psr),e(vn,$sr),e(vn,pue),e(pue,Isr),e(vn,jsr),e(_o,Nsr),e(_o,_0),e(_0,qC),e(qC,_ue),e(_ue,Dsr),e(qC,qsr),e(qC,YG),e(YG,Gsr),e(qC,Osr),e(_0,Xsr),e(_0,GC),e(GC,bue),e(bue,Vsr),e(GC,zsr),e(GC,KG),e(KG,Wsr),e(GC,Qsr),e(_o,Hsr),e(_o,vue),e(vue,Usr),e(_o,Jsr),g(b0,_o,null),b(c,BRe,_),b(c,Ec,_),e(Ec,OC),e(OC,Tue),g(v0,Tue,null),e(Ec,Ysr),e(Ec,Fue),e(Fue,Ksr),b(c,xRe,_),b(c,Mr,_),g(T0,Mr,null),e(Mr,Zsr),e(Mr,yc),e(yc,elr),e(yc,Cue),e(Cue,olr),e(yc,rlr),e(yc,Mue),e(Mue,tlr),e(yc,alr),e(Mr,nlr),e(Mr,F0),e(F0,slr),e(F0,Eue),e(Eue,llr),e(F0,ilr),e(Mr,dlr),e(Mr,_t),g(C0,_t,null),e(_t,clr),e(_t,yue),e(yue,mlr),e(_t,flr),e(_t,wc),e(wc,glr),e(wc,wue),e(wue,hlr),e(wc,ulr),e(wc,Aue),e(Aue,plr),e(wc,_lr),e(_t,blr),e(_t,Lue),e(Lue,vlr),e(_t,Tlr),g(M0,_t,null),e(Mr,Flr),e(Mr,bo),g(E0,bo,null),e(bo,Clr),e(bo,Bue),e(Bue,Mlr),e(bo,Elr),e(bo,Tn),e(Tn,ylr),e(Tn,xue),e(xue,wlr),e(Tn,Alr),e(Tn,kue),e(kue,Llr),e(Tn,Blr),e(Tn,Rue),e(Rue,xlr),e(Tn,klr),e(bo,Rlr),e(bo,J),e(J,XC),e(XC,Sue),e(Sue,Slr),e(XC,Plr),e(XC,ZG),e(ZG,$lr),e(XC,Ilr),e(J,jlr),e(J,VC),e(VC,Pue),e(Pue,Nlr),e(VC,Dlr),e(VC,eO),e(eO,qlr),e(VC,Glr),e(J,Olr),e(J,zC),e(zC,$ue),e($ue,Xlr),e(zC,Vlr),e(zC,oO),e(oO,zlr),e(zC,Wlr),e(J,Qlr),e(J,WC),e(WC,Iue),e(Iue,Hlr),e(WC,Ulr),e(WC,rO),e(rO,Jlr),e(WC,Ylr),e(J,Klr),e(J,QC),e(QC,jue),e(jue,Zlr),e(QC,eir),e(QC,tO),e(tO,oir),e(QC,rir),e(J,tir),e(J,HC),e(HC,Nue),e(Nue,air),e(HC,nir),e(HC,aO),e(aO,sir),e(HC,lir),e(J,iir),e(J,UC),e(UC,Due),e(Due,dir),e(UC,cir),e(UC,nO),e(nO,mir),e(UC,fir),e(J,gir),e(J,JC),e(JC,que),e(que,hir),e(JC,uir),e(JC,sO),e(sO,pir),e(JC,_ir),e(J,bir),e(J,YC),e(YC,Gue),e(Gue,vir),e(YC,Tir),e(YC,lO),e(lO,Fir),e(YC,Cir),e(J,Mir),e(J,KC),e(KC,Oue),e(Oue,Eir),e(KC,yir),e(KC,iO),e(iO,wir),e(KC,Air),e(J,Lir),e(J,ZC),e(ZC,Xue),e(Xue,Bir),e(ZC,xir),e(ZC,dO),e(dO,kir),e(ZC,Rir),e(J,Sir),e(J,eM),e(eM,Vue),e(Vue,Pir),e(eM,$ir),e(eM,cO),e(cO,Iir),e(eM,jir),e(J,Nir),e(J,oM),e(oM,zue),e(zue,Dir),e(oM,qir),e(oM,mO),e(mO,Gir),e(oM,Oir),e(J,Xir),e(J,rM),e(rM,Wue),e(Wue,Vir),e(rM,zir),e(rM,fO),e(fO,Wir),e(rM,Qir),e(J,Hir),e(J,tM),e(tM,Que),e(Que,Uir),e(tM,Jir),e(tM,gO),e(gO,Yir),e(tM,Kir),e(J,Zir),e(J,aM),e(aM,Hue),e(Hue,edr),e(aM,odr),e(aM,hO),e(hO,rdr),e(aM,tdr),e(J,adr),e(J,nM),e(nM,Uue),e(Uue,ndr),e(nM,sdr),e(nM,uO),e(uO,ldr),e(nM,idr),e(J,ddr),e(J,sM),e(sM,Jue),e(Jue,cdr),e(sM,mdr),e(sM,pO),e(pO,fdr),e(sM,gdr),e(J,hdr),e(J,lM),e(lM,Yue),e(Yue,udr),e(lM,pdr),e(lM,_O),e(_O,_dr),e(lM,bdr),e(J,vdr),e(J,iM),e(iM,Kue),e(Kue,Tdr),e(iM,Fdr),e(iM,bO),e(bO,Cdr),e(iM,Mdr),e(bo,Edr),e(bo,Zue),e(Zue,ydr),e(bo,wdr),g(y0,bo,null),b(c,kRe,_),b(c,Ac,_),e(Ac,dM),e(dM,epe),g(w0,epe,null),e(Ac,Adr),e(Ac,ope),e(ope,Ldr),b(c,RRe,_),b(c,Er,_),g(A0,Er,null),e(Er,Bdr),e(Er,Lc),e(Lc,xdr),e(Lc,rpe),e(rpe,kdr),e(Lc,Rdr),e(Lc,tpe),e(tpe,Sdr),e(Lc,Pdr),e(Er,$dr),e(Er,L0),e(L0,Idr),e(L0,ape),e(ape,jdr),e(L0,Ndr),e(Er,Ddr),e(Er,bt),g(B0,bt,null),e(bt,qdr),e(bt,npe),e(npe,Gdr),e(bt,Odr),e(bt,Bc),e(Bc,Xdr),e(Bc,spe),e(spe,Vdr),e(Bc,zdr),e(Bc,lpe),e(lpe,Wdr),e(Bc,Qdr),e(bt,Hdr),e(bt,ipe),e(ipe,Udr),e(bt,Jdr),g(x0,bt,null),e(Er,Ydr),e(Er,vo),g(k0,vo,null),e(vo,Kdr),e(vo,dpe),e(dpe,Zdr),e(vo,ecr),e(vo,Fn),e(Fn,ocr),e(Fn,cpe),e(cpe,rcr),e(Fn,tcr),e(Fn,mpe),e(mpe,acr),e(Fn,ncr),e(Fn,fpe),e(fpe,scr),e(Fn,lcr),e(vo,icr),e(vo,_e),e(_e,cM),e(cM,gpe),e(gpe,dcr),e(cM,ccr),e(cM,vO),e(vO,mcr),e(cM,fcr),e(_e,gcr),e(_e,mM),e(mM,hpe),e(hpe,hcr),e(mM,ucr),e(mM,TO),e(TO,pcr),e(mM,_cr),e(_e,bcr),e(_e,fM),e(fM,upe),e(upe,vcr),e(fM,Tcr),e(fM,FO),e(FO,Fcr),e(fM,Ccr),e(_e,Mcr),e(_e,gM),e(gM,ppe),e(ppe,Ecr),e(gM,ycr),e(gM,CO),e(CO,wcr),e(gM,Acr),e(_e,Lcr),e(_e,hM),e(hM,_pe),e(_pe,Bcr),e(hM,xcr),e(hM,MO),e(MO,kcr),e(hM,Rcr),e(_e,Scr),e(_e,uM),e(uM,bpe),e(bpe,Pcr),e(uM,$cr),e(uM,EO),e(EO,Icr),e(uM,jcr),e(_e,Ncr),e(_e,pM),e(pM,vpe),e(vpe,Dcr),e(pM,qcr),e(pM,yO),e(yO,Gcr),e(pM,Ocr),e(_e,Xcr),e(_e,_M),e(_M,Tpe),e(Tpe,Vcr),e(_M,zcr),e(_M,wO),e(wO,Wcr),e(_M,Qcr),e(_e,Hcr),e(_e,bM),e(bM,Fpe),e(Fpe,Ucr),e(bM,Jcr),e(bM,AO),e(AO,Ycr),e(bM,Kcr),e(_e,Zcr),e(_e,vM),e(vM,Cpe),e(Cpe,emr),e(vM,omr),e(vM,LO),e(LO,rmr),e(vM,tmr),e(vo,amr),e(vo,Mpe),e(Mpe,nmr),e(vo,smr),g(R0,vo,null),b(c,SRe,_),b(c,xc,_),e(xc,TM),e(TM,Epe),g(S0,Epe,null),e(xc,lmr),e(xc,ype),e(ype,imr),b(c,PRe,_),b(c,yr,_),g(P0,yr,null),e(yr,dmr),e(yr,kc),e(kc,cmr),e(kc,wpe),e(wpe,mmr),e(kc,fmr),e(kc,Ape),e(Ape,gmr),e(kc,hmr),e(yr,umr),e(yr,$0),e($0,pmr),e($0,Lpe),e(Lpe,_mr),e($0,bmr),e(yr,vmr),e(yr,vt),g(I0,vt,null),e(vt,Tmr),e(vt,Bpe),e(Bpe,Fmr),e(vt,Cmr),e(vt,Rc),e(Rc,Mmr),e(Rc,xpe),e(xpe,Emr),e(Rc,ymr),e(Rc,kpe),e(kpe,wmr),e(Rc,Amr),e(vt,Lmr),e(vt,Rpe),e(Rpe,Bmr),e(vt,xmr),g(j0,vt,null),e(yr,kmr),e(yr,To),g(N0,To,null),e(To,Rmr),e(To,Spe),e(Spe,Smr),e(To,Pmr),e(To,Cn),e(Cn,$mr),e(Cn,Ppe),e(Ppe,Imr),e(Cn,jmr),e(Cn,$pe),e($pe,Nmr),e(Cn,Dmr),e(Cn,Ipe),e(Ipe,qmr),e(Cn,Gmr),e(To,Omr),e(To,X),e(X,FM),e(FM,jpe),e(jpe,Xmr),e(FM,Vmr),e(FM,BO),e(BO,zmr),e(FM,Wmr),e(X,Qmr),e(X,CM),e(CM,Npe),e(Npe,Hmr),e(CM,Umr),e(CM,xO),e(xO,Jmr),e(CM,Ymr),e(X,Kmr),e(X,MM),e(MM,Dpe),e(Dpe,Zmr),e(MM,efr),e(MM,kO),e(kO,ofr),e(MM,rfr),e(X,tfr),e(X,EM),e(EM,qpe),e(qpe,afr),e(EM,nfr),e(EM,RO),e(RO,sfr),e(EM,lfr),e(X,ifr),e(X,yM),e(yM,Gpe),e(Gpe,dfr),e(yM,cfr),e(yM,SO),e(SO,mfr),e(yM,ffr),e(X,gfr),e(X,wM),e(wM,Ope),e(Ope,hfr),e(wM,ufr),e(wM,PO),e(PO,pfr),e(wM,_fr),e(X,bfr),e(X,AM),e(AM,Xpe),e(Xpe,vfr),e(AM,Tfr),e(AM,$O),e($O,Ffr),e(AM,Cfr),e(X,Mfr),e(X,LM),e(LM,Vpe),e(Vpe,Efr),e(LM,yfr),e(LM,IO),e(IO,wfr),e(LM,Afr),e(X,Lfr),e(X,BM),e(BM,zpe),e(zpe,Bfr),e(BM,xfr),e(BM,jO),e(jO,kfr),e(BM,Rfr),e(X,Sfr),e(X,xM),e(xM,Wpe),e(Wpe,Pfr),e(xM,$fr),e(xM,NO),e(NO,Ifr),e(xM,jfr),e(X,Nfr),e(X,kM),e(kM,Qpe),e(Qpe,Dfr),e(kM,qfr),e(kM,DO),e(DO,Gfr),e(kM,Ofr),e(X,Xfr),e(X,RM),e(RM,Hpe),e(Hpe,Vfr),e(RM,zfr),e(RM,qO),e(qO,Wfr),e(RM,Qfr),e(X,Hfr),e(X,SM),e(SM,Upe),e(Upe,Ufr),e(SM,Jfr),e(SM,GO),e(GO,Yfr),e(SM,Kfr),e(X,Zfr),e(X,PM),e(PM,Jpe),e(Jpe,egr),e(PM,ogr),e(PM,OO),e(OO,rgr),e(PM,tgr),e(X,agr),e(X,$M),e($M,Ype),e(Ype,ngr),e($M,sgr),e($M,XO),e(XO,lgr),e($M,igr),e(X,dgr),e(X,IM),e(IM,Kpe),e(Kpe,cgr),e(IM,mgr),e(IM,VO),e(VO,fgr),e(IM,ggr),e(X,hgr),e(X,jM),e(jM,Zpe),e(Zpe,ugr),e(jM,pgr),e(jM,zO),e(zO,_gr),e(jM,bgr),e(X,vgr),e(X,NM),e(NM,e_e),e(e_e,Tgr),e(NM,Fgr),e(NM,WO),e(WO,Cgr),e(NM,Mgr),e(X,Egr),e(X,DM),e(DM,o_e),e(o_e,ygr),e(DM,wgr),e(DM,QO),e(QO,Agr),e(DM,Lgr),e(X,Bgr),e(X,qM),e(qM,r_e),e(r_e,xgr),e(qM,kgr),e(qM,HO),e(HO,Rgr),e(qM,Sgr),e(X,Pgr),e(X,GM),e(GM,t_e),e(t_e,$gr),e(GM,Igr),e(GM,UO),e(UO,jgr),e(GM,Ngr),e(X,Dgr),e(X,OM),e(OM,a_e),e(a_e,qgr),e(OM,Ggr),e(OM,JO),e(JO,Ogr),e(OM,Xgr),e(X,Vgr),e(X,XM),e(XM,n_e),e(n_e,zgr),e(XM,Wgr),e(XM,YO),e(YO,Qgr),e(XM,Hgr),e(X,Ugr),e(X,VM),e(VM,s_e),e(s_e,Jgr),e(VM,Ygr),e(VM,KO),e(KO,Kgr),e(VM,Zgr),e(X,ehr),e(X,zM),e(zM,l_e),e(l_e,ohr),e(zM,rhr),e(zM,ZO),e(ZO,thr),e(zM,ahr),e(X,nhr),e(X,WM),e(WM,i_e),e(i_e,shr),e(WM,lhr),e(WM,eX),e(eX,ihr),e(WM,dhr),e(To,chr),e(To,d_e),e(d_e,mhr),e(To,fhr),g(D0,To,null),b(c,$Re,_),b(c,Sc,_),e(Sc,QM),e(QM,c_e),g(q0,c_e,null),e(Sc,ghr),e(Sc,m_e),e(m_e,hhr),b(c,IRe,_),b(c,wr,_),g(G0,wr,null),e(wr,uhr),e(wr,Pc),e(Pc,phr),e(Pc,f_e),e(f_e,_hr),e(Pc,bhr),e(Pc,g_e),e(g_e,vhr),e(Pc,Thr),e(wr,Fhr),e(wr,O0),e(O0,Chr),e(O0,h_e),e(h_e,Mhr),e(O0,Ehr),e(wr,yhr),e(wr,Tt),g(X0,Tt,null),e(Tt,whr),e(Tt,u_e),e(u_e,Ahr),e(Tt,Lhr),e(Tt,$c),e($c,Bhr),e($c,p_e),e(p_e,xhr),e($c,khr),e($c,__e),e(__e,Rhr),e($c,Shr),e(Tt,Phr),e(Tt,b_e),e(b_e,$hr),e(Tt,Ihr),g(V0,Tt,null),e(wr,jhr),e(wr,Fo),g(z0,Fo,null),e(Fo,Nhr),e(Fo,v_e),e(v_e,Dhr),e(Fo,qhr),e(Fo,Mn),e(Mn,Ghr),e(Mn,T_e),e(T_e,Ohr),e(Mn,Xhr),e(Mn,F_e),e(F_e,Vhr),e(Mn,zhr),e(Mn,C_e),e(C_e,Whr),e(Mn,Qhr),e(Fo,Hhr),e(Fo,ae),e(ae,HM),e(HM,M_e),e(M_e,Uhr),e(HM,Jhr),e(HM,oX),e(oX,Yhr),e(HM,Khr),e(ae,Zhr),e(ae,UM),e(UM,E_e),e(E_e,eur),e(UM,our),e(UM,rX),e(rX,rur),e(UM,tur),e(ae,aur),e(ae,JM),e(JM,y_e),e(y_e,nur),e(JM,sur),e(JM,tX),e(tX,lur),e(JM,iur),e(ae,dur),e(ae,YM),e(YM,w_e),e(w_e,cur),e(YM,mur),e(YM,aX),e(aX,fur),e(YM,gur),e(ae,hur),e(ae,KM),e(KM,A_e),e(A_e,uur),e(KM,pur),e(KM,nX),e(nX,_ur),e(KM,bur),e(ae,vur),e(ae,ZM),e(ZM,L_e),e(L_e,Tur),e(ZM,Fur),e(ZM,sX),e(sX,Cur),e(ZM,Mur),e(ae,Eur),e(ae,e4),e(e4,B_e),e(B_e,yur),e(e4,wur),e(e4,lX),e(lX,Aur),e(e4,Lur),e(ae,Bur),e(ae,o4),e(o4,x_e),e(x_e,xur),e(o4,kur),e(o4,iX),e(iX,Rur),e(o4,Sur),e(ae,Pur),e(ae,r4),e(r4,k_e),e(k_e,$ur),e(r4,Iur),e(r4,dX),e(dX,jur),e(r4,Nur),e(ae,Dur),e(ae,t4),e(t4,R_e),e(R_e,qur),e(t4,Gur),e(t4,cX),e(cX,Our),e(t4,Xur),e(ae,Vur),e(ae,a4),e(a4,S_e),e(S_e,zur),e(a4,Wur),e(a4,mX),e(mX,Qur),e(a4,Hur),e(ae,Uur),e(ae,n4),e(n4,P_e),e(P_e,Jur),e(n4,Yur),e(n4,fX),e(fX,Kur),e(n4,Zur),e(ae,epr),e(ae,s4),e(s4,$_e),e($_e,opr),e(s4,rpr),e(s4,gX),e(gX,tpr),e(s4,apr),e(ae,npr),e(ae,l4),e(l4,I_e),e(I_e,spr),e(l4,lpr),e(l4,hX),e(hX,ipr),e(l4,dpr),e(ae,cpr),e(ae,i4),e(i4,j_e),e(j_e,mpr),e(i4,fpr),e(i4,uX),e(uX,gpr),e(i4,hpr),e(ae,upr),e(ae,d4),e(d4,N_e),e(N_e,ppr),e(d4,_pr),e(d4,pX),e(pX,bpr),e(d4,vpr),e(ae,Tpr),e(ae,c4),e(c4,D_e),e(D_e,Fpr),e(c4,Cpr),e(c4,_X),e(_X,Mpr),e(c4,Epr),e(Fo,ypr),e(Fo,q_e),e(q_e,wpr),e(Fo,Apr),g(W0,Fo,null),b(c,jRe,_),b(c,Ic,_),e(Ic,m4),e(m4,G_e),g(Q0,G_e,null),e(Ic,Lpr),e(Ic,O_e),e(O_e,Bpr),b(c,NRe,_),b(c,Ar,_),g(H0,Ar,null),e(Ar,xpr),e(Ar,jc),e(jc,kpr),e(jc,X_e),e(X_e,Rpr),e(jc,Spr),e(jc,V_e),e(V_e,Ppr),e(jc,$pr),e(Ar,Ipr),e(Ar,U0),e(U0,jpr),e(U0,z_e),e(z_e,Npr),e(U0,Dpr),e(Ar,qpr),e(Ar,Ft),g(J0,Ft,null),e(Ft,Gpr),e(Ft,W_e),e(W_e,Opr),e(Ft,Xpr),e(Ft,Nc),e(Nc,Vpr),e(Nc,Q_e),e(Q_e,zpr),e(Nc,Wpr),e(Nc,H_e),e(H_e,Qpr),e(Nc,Hpr),e(Ft,Upr),e(Ft,U_e),e(U_e,Jpr),e(Ft,Ypr),g(Y0,Ft,null),e(Ar,Kpr),e(Ar,Co),g(K0,Co,null),e(Co,Zpr),e(Co,J_e),e(J_e,e_r),e(Co,o_r),e(Co,En),e(En,r_r),e(En,Y_e),e(Y_e,t_r),e(En,a_r),e(En,K_e),e(K_e,n_r),e(En,s_r),e(En,Z_e),e(Z_e,l_r),e(En,i_r),e(Co,d_r),e(Co,ebe),e(ebe,f4),e(f4,obe),e(obe,c_r),e(f4,m_r),e(f4,bX),e(bX,f_r),e(f4,g_r),e(Co,h_r),e(Co,rbe),e(rbe,u_r),e(Co,p_r),g(Z0,Co,null),b(c,DRe,_),b(c,Dc,_),e(Dc,g4),e(g4,tbe),g(eL,tbe,null),e(Dc,__r),e(Dc,abe),e(abe,b_r),b(c,qRe,_),b(c,Lr,_),g(oL,Lr,null),e(Lr,v_r),e(Lr,qc),e(qc,T_r),e(qc,nbe),e(nbe,F_r),e(qc,C_r),e(qc,sbe),e(sbe,M_r),e(qc,E_r),e(Lr,y_r),e(Lr,rL),e(rL,w_r),e(rL,lbe),e(lbe,A_r),e(rL,L_r),e(Lr,B_r),e(Lr,Ct),g(tL,Ct,null),e(Ct,x_r),e(Ct,ibe),e(ibe,k_r),e(Ct,R_r),e(Ct,Gc),e(Gc,S_r),e(Gc,dbe),e(dbe,P_r),e(Gc,$_r),e(Gc,cbe),e(cbe,I_r),e(Gc,j_r),e(Ct,N_r),e(Ct,mbe),e(mbe,D_r),e(Ct,q_r),g(aL,Ct,null),e(Lr,G_r),e(Lr,Mo),g(nL,Mo,null),e(Mo,O_r),e(Mo,fbe),e(fbe,X_r),e(Mo,V_r),e(Mo,yn),e(yn,z_r),e(yn,gbe),e(gbe,W_r),e(yn,Q_r),e(yn,hbe),e(hbe,H_r),e(yn,U_r),e(yn,ube),e(ube,J_r),e(yn,Y_r),e(Mo,K_r),e(Mo,Y),e(Y,h4),e(h4,pbe),e(pbe,Z_r),e(h4,ebr),e(h4,vX),e(vX,obr),e(h4,rbr),e(Y,tbr),e(Y,u4),e(u4,_be),e(_be,abr),e(u4,nbr),e(u4,TX),e(TX,sbr),e(u4,lbr),e(Y,ibr),e(Y,p4),e(p4,bbe),e(bbe,dbr),e(p4,cbr),e(p4,FX),e(FX,mbr),e(p4,fbr),e(Y,gbr),e(Y,_4),e(_4,vbe),e(vbe,hbr),e(_4,ubr),e(_4,CX),e(CX,pbr),e(_4,_br),e(Y,bbr),e(Y,b4),e(b4,Tbe),e(Tbe,vbr),e(b4,Tbr),e(b4,MX),e(MX,Fbr),e(b4,Cbr),e(Y,Mbr),e(Y,v4),e(v4,Fbe),e(Fbe,Ebr),e(v4,ybr),e(v4,EX),e(EX,wbr),e(v4,Abr),e(Y,Lbr),e(Y,T4),e(T4,Cbe),e(Cbe,Bbr),e(T4,xbr),e(T4,yX),e(yX,kbr),e(T4,Rbr),e(Y,Sbr),e(Y,F4),e(F4,Mbe),e(Mbe,Pbr),e(F4,$br),e(F4,wX),e(wX,Ibr),e(F4,jbr),e(Y,Nbr),e(Y,C4),e(C4,Ebe),e(Ebe,Dbr),e(C4,qbr),e(C4,AX),e(AX,Gbr),e(C4,Obr),e(Y,Xbr),e(Y,M4),e(M4,ybe),e(ybe,Vbr),e(M4,zbr),e(M4,LX),e(LX,Wbr),e(M4,Qbr),e(Y,Hbr),e(Y,E4),e(E4,wbe),e(wbe,Ubr),e(E4,Jbr),e(E4,BX),e(BX,Ybr),e(E4,Kbr),e(Y,Zbr),e(Y,y4),e(y4,Abe),e(Abe,e2r),e(y4,o2r),e(y4,xX),e(xX,r2r),e(y4,t2r),e(Y,a2r),e(Y,w4),e(w4,Lbe),e(Lbe,n2r),e(w4,s2r),e(w4,kX),e(kX,l2r),e(w4,i2r),e(Y,d2r),e(Y,A4),e(A4,Bbe),e(Bbe,c2r),e(A4,m2r),e(A4,RX),e(RX,f2r),e(A4,g2r),e(Y,h2r),e(Y,L4),e(L4,xbe),e(xbe,u2r),e(L4,p2r),e(L4,SX),e(SX,_2r),e(L4,b2r),e(Y,v2r),e(Y,B4),e(B4,kbe),e(kbe,T2r),e(B4,F2r),e(B4,PX),e(PX,C2r),e(B4,M2r),e(Y,E2r),e(Y,x4),e(x4,Rbe),e(Rbe,y2r),e(x4,w2r),e(x4,$X),e($X,A2r),e(x4,L2r),e(Y,B2r),e(Y,k4),e(k4,Sbe),e(Sbe,x2r),e(k4,k2r),e(k4,IX),e(IX,R2r),e(k4,S2r),e(Y,P2r),e(Y,R4),e(R4,Pbe),e(Pbe,$2r),e(R4,I2r),e(R4,jX),e(jX,j2r),e(R4,N2r),e(Y,D2r),e(Y,S4),e(S4,$be),e($be,q2r),e(S4,G2r),e(S4,NX),e(NX,O2r),e(S4,X2r),e(Mo,V2r),e(Mo,Ibe),e(Ibe,z2r),e(Mo,W2r),g(sL,Mo,null),b(c,GRe,_),b(c,Oc,_),e(Oc,P4),e(P4,jbe),g(lL,jbe,null),e(Oc,Q2r),e(Oc,Nbe),e(Nbe,H2r),b(c,ORe,_),b(c,Br,_),g(iL,Br,null),e(Br,U2r),e(Br,Xc),e(Xc,J2r),e(Xc,Dbe),e(Dbe,Y2r),e(Xc,K2r),e(Xc,qbe),e(qbe,Z2r),e(Xc,evr),e(Br,ovr),e(Br,dL),e(dL,rvr),e(dL,Gbe),e(Gbe,tvr),e(dL,avr),e(Br,nvr),e(Br,Mt),g(cL,Mt,null),e(Mt,svr),e(Mt,Obe),e(Obe,lvr),e(Mt,ivr),e(Mt,Vc),e(Vc,dvr),e(Vc,Xbe),e(Xbe,cvr),e(Vc,mvr),e(Vc,Vbe),e(Vbe,fvr),e(Vc,gvr),e(Mt,hvr),e(Mt,zbe),e(zbe,uvr),e(Mt,pvr),g(mL,Mt,null),e(Br,_vr),e(Br,Eo),g(fL,Eo,null),e(Eo,bvr),e(Eo,Wbe),e(Wbe,vvr),e(Eo,Tvr),e(Eo,wn),e(wn,Fvr),e(wn,Qbe),e(Qbe,Cvr),e(wn,Mvr),e(wn,Hbe),e(Hbe,Evr),e(wn,yvr),e(wn,Ube),e(Ube,wvr),e(wn,Avr),e(Eo,Lvr),e(Eo,K),e(K,$4),e($4,Jbe),e(Jbe,Bvr),e($4,xvr),e($4,DX),e(DX,kvr),e($4,Rvr),e(K,Svr),e(K,I4),e(I4,Ybe),e(Ybe,Pvr),e(I4,$vr),e(I4,qX),e(qX,Ivr),e(I4,jvr),e(K,Nvr),e(K,j4),e(j4,Kbe),e(Kbe,Dvr),e(j4,qvr),e(j4,GX),e(GX,Gvr),e(j4,Ovr),e(K,Xvr),e(K,N4),e(N4,Zbe),e(Zbe,Vvr),e(N4,zvr),e(N4,OX),e(OX,Wvr),e(N4,Qvr),e(K,Hvr),e(K,D4),e(D4,e2e),e(e2e,Uvr),e(D4,Jvr),e(D4,XX),e(XX,Yvr),e(D4,Kvr),e(K,Zvr),e(K,q4),e(q4,o2e),e(o2e,eTr),e(q4,oTr),e(q4,VX),e(VX,rTr),e(q4,tTr),e(K,aTr),e(K,G4),e(G4,r2e),e(r2e,nTr),e(G4,sTr),e(G4,zX),e(zX,lTr),e(G4,iTr),e(K,dTr),e(K,O4),e(O4,t2e),e(t2e,cTr),e(O4,mTr),e(O4,WX),e(WX,fTr),e(O4,gTr),e(K,hTr),e(K,X4),e(X4,a2e),e(a2e,uTr),e(X4,pTr),e(X4,QX),e(QX,_Tr),e(X4,bTr),e(K,vTr),e(K,V4),e(V4,n2e),e(n2e,TTr),e(V4,FTr),e(V4,HX),e(HX,CTr),e(V4,MTr),e(K,ETr),e(K,z4),e(z4,s2e),e(s2e,yTr),e(z4,wTr),e(z4,UX),e(UX,ATr),e(z4,LTr),e(K,BTr),e(K,W4),e(W4,l2e),e(l2e,xTr),e(W4,kTr),e(W4,JX),e(JX,RTr),e(W4,STr),e(K,PTr),e(K,Q4),e(Q4,i2e),e(i2e,$Tr),e(Q4,ITr),e(Q4,YX),e(YX,jTr),e(Q4,NTr),e(K,DTr),e(K,H4),e(H4,d2e),e(d2e,qTr),e(H4,GTr),e(H4,KX),e(KX,OTr),e(H4,XTr),e(K,VTr),e(K,U4),e(U4,c2e),e(c2e,zTr),e(U4,WTr),e(U4,ZX),e(ZX,QTr),e(U4,HTr),e(K,UTr),e(K,J4),e(J4,m2e),e(m2e,JTr),e(J4,YTr),e(J4,eV),e(eV,KTr),e(J4,ZTr),e(K,e1r),e(K,Y4),e(Y4,f2e),e(f2e,o1r),e(Y4,r1r),e(Y4,oV),e(oV,t1r),e(Y4,a1r),e(K,n1r),e(K,K4),e(K4,g2e),e(g2e,s1r),e(K4,l1r),e(K4,rV),e(rV,i1r),e(K4,d1r),e(K,c1r),e(K,Z4),e(Z4,h2e),e(h2e,m1r),e(Z4,f1r),e(Z4,tV),e(tV,g1r),e(Z4,h1r),e(K,u1r),e(K,eE),e(eE,u2e),e(u2e,p1r),e(eE,_1r),e(eE,aV),e(aV,b1r),e(eE,v1r),e(Eo,T1r),e(Eo,p2e),e(p2e,F1r),e(Eo,C1r),g(gL,Eo,null),b(c,XRe,_),b(c,zc,_),e(zc,oE),e(oE,_2e),g(hL,_2e,null),e(zc,M1r),e(zc,b2e),e(b2e,E1r),b(c,VRe,_),b(c,xr,_),g(uL,xr,null),e(xr,y1r),e(xr,Wc),e(Wc,w1r),e(Wc,v2e),e(v2e,A1r),e(Wc,L1r),e(Wc,T2e),e(T2e,B1r),e(Wc,x1r),e(xr,k1r),e(xr,pL),e(pL,R1r),e(pL,F2e),e(F2e,S1r),e(pL,P1r),e(xr,$1r),e(xr,Et),g(_L,Et,null),e(Et,I1r),e(Et,C2e),e(C2e,j1r),e(Et,N1r),e(Et,Qc),e(Qc,D1r),e(Qc,M2e),e(M2e,q1r),e(Qc,G1r),e(Qc,E2e),e(E2e,O1r),e(Qc,X1r),e(Et,V1r),e(Et,y2e),e(y2e,z1r),e(Et,W1r),g(bL,Et,null),e(xr,Q1r),e(xr,yo),g(vL,yo,null),e(yo,H1r),e(yo,w2e),e(w2e,U1r),e(yo,J1r),e(yo,An),e(An,Y1r),e(An,A2e),e(A2e,K1r),e(An,Z1r),e(An,L2e),e(L2e,eFr),e(An,oFr),e(An,B2e),e(B2e,rFr),e(An,tFr),e(yo,aFr),e(yo,x2e),e(x2e,rE),e(rE,k2e),e(k2e,nFr),e(rE,sFr),e(rE,nV),e(nV,lFr),e(rE,iFr),e(yo,dFr),e(yo,R2e),e(R2e,cFr),e(yo,mFr),g(TL,yo,null),b(c,zRe,_),b(c,Hc,_),e(Hc,tE),e(tE,S2e),g(FL,S2e,null),e(Hc,fFr),e(Hc,P2e),e(P2e,gFr),b(c,WRe,_),b(c,kr,_),g(CL,kr,null),e(kr,hFr),e(kr,Uc),e(Uc,uFr),e(Uc,$2e),e($2e,pFr),e(Uc,_Fr),e(Uc,I2e),e(I2e,bFr),e(Uc,vFr),e(kr,TFr),e(kr,ML),e(ML,FFr),e(ML,j2e),e(j2e,CFr),e(ML,MFr),e(kr,EFr),e(kr,yt),g(EL,yt,null),e(yt,yFr),e(yt,N2e),e(N2e,wFr),e(yt,AFr),e(yt,Jc),e(Jc,LFr),e(Jc,D2e),e(D2e,BFr),e(Jc,xFr),e(Jc,q2e),e(q2e,kFr),e(Jc,RFr),e(yt,SFr),e(yt,G2e),e(G2e,PFr),e(yt,$Fr),g(yL,yt,null),e(kr,IFr),e(kr,wo),g(wL,wo,null),e(wo,jFr),e(wo,O2e),e(O2e,NFr),e(wo,DFr),e(wo,Ln),e(Ln,qFr),e(Ln,X2e),e(X2e,GFr),e(Ln,OFr),e(Ln,V2e),e(V2e,XFr),e(Ln,VFr),e(Ln,z2e),e(z2e,zFr),e(Ln,WFr),e(wo,QFr),e(wo,W2e),e(W2e,aE),e(aE,Q2e),e(Q2e,HFr),e(aE,UFr),e(aE,sV),e(sV,JFr),e(aE,YFr),e(wo,KFr),e(wo,H2e),e(H2e,ZFr),e(wo,eCr),g(AL,wo,null),b(c,QRe,_),b(c,Yc,_),e(Yc,nE),e(nE,U2e),g(LL,U2e,null),e(Yc,oCr),e(Yc,J2e),e(J2e,rCr),b(c,HRe,_),b(c,Rr,_),g(BL,Rr,null),e(Rr,tCr),e(Rr,Kc),e(Kc,aCr),e(Kc,Y2e),e(Y2e,nCr),e(Kc,sCr),e(Kc,K2e),e(K2e,lCr),e(Kc,iCr),e(Rr,dCr),e(Rr,xL),e(xL,cCr),e(xL,Z2e),e(Z2e,mCr),e(xL,fCr),e(Rr,gCr),e(Rr,wt),g(kL,wt,null),e(wt,hCr),e(wt,eve),e(eve,uCr),e(wt,pCr),e(wt,Zc),e(Zc,_Cr),e(Zc,ove),e(ove,bCr),e(Zc,vCr),e(Zc,rve),e(rve,TCr),e(Zc,FCr),e(wt,CCr),e(wt,tve),e(tve,MCr),e(wt,ECr),g(RL,wt,null),e(Rr,yCr),e(Rr,Ao),g(SL,Ao,null),e(Ao,wCr),e(Ao,ave),e(ave,ACr),e(Ao,LCr),e(Ao,Bn),e(Bn,BCr),e(Bn,nve),e(nve,xCr),e(Bn,kCr),e(Bn,sve),e(sve,RCr),e(Bn,SCr),e(Bn,lve),e(lve,PCr),e(Bn,$Cr),e(Ao,ICr),e(Ao,z),e(z,sE),e(sE,ive),e(ive,jCr),e(sE,NCr),e(sE,lV),e(lV,DCr),e(sE,qCr),e(z,GCr),e(z,lE),e(lE,dve),e(dve,OCr),e(lE,XCr),e(lE,iV),e(iV,VCr),e(lE,zCr),e(z,WCr),e(z,iE),e(iE,cve),e(cve,QCr),e(iE,HCr),e(iE,dV),e(dV,UCr),e(iE,JCr),e(z,YCr),e(z,dE),e(dE,mve),e(mve,KCr),e(dE,ZCr),e(dE,cV),e(cV,eMr),e(dE,oMr),e(z,rMr),e(z,cE),e(cE,fve),e(fve,tMr),e(cE,aMr),e(cE,mV),e(mV,nMr),e(cE,sMr),e(z,lMr),e(z,mE),e(mE,gve),e(gve,iMr),e(mE,dMr),e(mE,fV),e(fV,cMr),e(mE,mMr),e(z,fMr),e(z,fE),e(fE,hve),e(hve,gMr),e(fE,hMr),e(fE,gV),e(gV,uMr),e(fE,pMr),e(z,_Mr),e(z,gE),e(gE,uve),e(uve,bMr),e(gE,vMr),e(gE,hV),e(hV,TMr),e(gE,FMr),e(z,CMr),e(z,hE),e(hE,pve),e(pve,MMr),e(hE,EMr),e(hE,uV),e(uV,yMr),e(hE,wMr),e(z,AMr),e(z,uE),e(uE,_ve),e(_ve,LMr),e(uE,BMr),e(uE,pV),e(pV,xMr),e(uE,kMr),e(z,RMr),e(z,pE),e(pE,bve),e(bve,SMr),e(pE,PMr),e(pE,_V),e(_V,$Mr),e(pE,IMr),e(z,jMr),e(z,_E),e(_E,vve),e(vve,NMr),e(_E,DMr),e(_E,bV),e(bV,qMr),e(_E,GMr),e(z,OMr),e(z,bE),e(bE,Tve),e(Tve,XMr),e(bE,VMr),e(bE,vV),e(vV,zMr),e(bE,WMr),e(z,QMr),e(z,vE),e(vE,Fve),e(Fve,HMr),e(vE,UMr),e(vE,TV),e(TV,JMr),e(vE,YMr),e(z,KMr),e(z,TE),e(TE,Cve),e(Cve,ZMr),e(TE,e4r),e(TE,FV),e(FV,o4r),e(TE,r4r),e(z,t4r),e(z,FE),e(FE,Mve),e(Mve,a4r),e(FE,n4r),e(FE,CV),e(CV,s4r),e(FE,l4r),e(z,i4r),e(z,CE),e(CE,Eve),e(Eve,d4r),e(CE,c4r),e(CE,MV),e(MV,m4r),e(CE,f4r),e(z,g4r),e(z,ME),e(ME,yve),e(yve,h4r),e(ME,u4r),e(ME,EV),e(EV,p4r),e(ME,_4r),e(z,b4r),e(z,EE),e(EE,wve),e(wve,v4r),e(EE,T4r),e(EE,yV),e(yV,F4r),e(EE,C4r),e(z,M4r),e(z,yE),e(yE,Ave),e(Ave,E4r),e(yE,y4r),e(yE,wV),e(wV,w4r),e(yE,A4r),e(z,L4r),e(z,wE),e(wE,Lve),e(Lve,B4r),e(wE,x4r),e(wE,AV),e(AV,k4r),e(wE,R4r),e(z,S4r),e(z,AE),e(AE,Bve),e(Bve,P4r),e(AE,$4r),e(AE,LV),e(LV,I4r),e(AE,j4r),e(z,N4r),e(z,LE),e(LE,xve),e(xve,D4r),e(LE,q4r),e(LE,BV),e(BV,G4r),e(LE,O4r),e(z,X4r),e(z,BE),e(BE,kve),e(kve,V4r),e(BE,z4r),e(BE,xV),e(xV,W4r),e(BE,Q4r),e(z,H4r),e(z,xE),e(xE,Rve),e(Rve,U4r),e(xE,J4r),e(xE,kV),e(kV,Y4r),e(xE,K4r),e(Ao,Z4r),e(Ao,Sve),e(Sve,eEr),e(Ao,oEr),g(PL,Ao,null),b(c,URe,_),b(c,em,_),e(em,kE),e(kE,Pve),g($L,Pve,null),e(em,rEr),e(em,$ve),e($ve,tEr),b(c,JRe,_),b(c,Sr,_),g(IL,Sr,null),e(Sr,aEr),e(Sr,om),e(om,nEr),e(om,Ive),e(Ive,sEr),e(om,lEr),e(om,jve),e(jve,iEr),e(om,dEr),e(Sr,cEr),e(Sr,jL),e(jL,mEr),e(jL,Nve),e(Nve,fEr),e(jL,gEr),e(Sr,hEr),e(Sr,At),g(NL,At,null),e(At,uEr),e(At,Dve),e(Dve,pEr),e(At,_Er),e(At,rm),e(rm,bEr),e(rm,qve),e(qve,vEr),e(rm,TEr),e(rm,Gve),e(Gve,FEr),e(rm,CEr),e(At,MEr),e(At,Ove),e(Ove,EEr),e(At,yEr),g(DL,At,null),e(Sr,wEr),e(Sr,Lo),g(qL,Lo,null),e(Lo,AEr),e(Lo,Xve),e(Xve,LEr),e(Lo,BEr),e(Lo,xn),e(xn,xEr),e(xn,Vve),e(Vve,kEr),e(xn,REr),e(xn,zve),e(zve,SEr),e(xn,PEr),e(xn,Wve),e(Wve,$Er),e(xn,IEr),e(Lo,jEr),e(Lo,ca),e(ca,RE),e(RE,Qve),e(Qve,NEr),e(RE,DEr),e(RE,RV),e(RV,qEr),e(RE,GEr),e(ca,OEr),e(ca,SE),e(SE,Hve),e(Hve,XEr),e(SE,VEr),e(SE,SV),e(SV,zEr),e(SE,WEr),e(ca,QEr),e(ca,PE),e(PE,Uve),e(Uve,HEr),e(PE,UEr),e(PE,PV),e(PV,JEr),e(PE,YEr),e(ca,KEr),e(ca,$E),e($E,Jve),e(Jve,ZEr),e($E,e3r),e($E,$V),e($V,o3r),e($E,r3r),e(ca,t3r),e(ca,IE),e(IE,Yve),e(Yve,a3r),e(IE,n3r),e(IE,IV),e(IV,s3r),e(IE,l3r),e(Lo,i3r),e(Lo,Kve),e(Kve,d3r),e(Lo,c3r),g(GL,Lo,null),b(c,YRe,_),b(c,tm,_),e(tm,jE),e(jE,Zve),g(OL,Zve,null),e(tm,m3r),e(tm,eTe),e(eTe,f3r),b(c,KRe,_),b(c,Pr,_),g(XL,Pr,null),e(Pr,g3r),e(Pr,am),e(am,h3r),e(am,oTe),e(oTe,u3r),e(am,p3r),e(am,rTe),e(rTe,_3r),e(am,b3r),e(Pr,v3r),e(Pr,VL),e(VL,T3r),e(VL,tTe),e(tTe,F3r),e(VL,C3r),e(Pr,M3r),e(Pr,Lt),g(zL,Lt,null),e(Lt,E3r),e(Lt,aTe),e(aTe,y3r),e(Lt,w3r),e(Lt,nm),e(nm,A3r),e(nm,nTe),e(nTe,L3r),e(nm,B3r),e(nm,sTe),e(sTe,x3r),e(nm,k3r),e(Lt,R3r),e(Lt,lTe),e(lTe,S3r),e(Lt,P3r),g(WL,Lt,null),e(Pr,$3r),e(Pr,Bo),g(QL,Bo,null),e(Bo,I3r),e(Bo,iTe),e(iTe,j3r),e(Bo,N3r),e(Bo,kn),e(kn,D3r),e(kn,dTe),e(dTe,q3r),e(kn,G3r),e(kn,cTe),e(cTe,O3r),e(kn,X3r),e(kn,mTe),e(mTe,V3r),e(kn,z3r),e(Bo,W3r),e(Bo,me),e(me,NE),e(NE,fTe),e(fTe,Q3r),e(NE,H3r),e(NE,jV),e(jV,U3r),e(NE,J3r),e(me,Y3r),e(me,DE),e(DE,gTe),e(gTe,K3r),e(DE,Z3r),e(DE,NV),e(NV,e5r),e(DE,o5r),e(me,r5r),e(me,qE),e(qE,hTe),e(hTe,t5r),e(qE,a5r),e(qE,DV),e(DV,n5r),e(qE,s5r),e(me,l5r),e(me,GE),e(GE,uTe),e(uTe,i5r),e(GE,d5r),e(GE,qV),e(qV,c5r),e(GE,m5r),e(me,f5r),e(me,OE),e(OE,pTe),e(pTe,g5r),e(OE,h5r),e(OE,GV),e(GV,u5r),e(OE,p5r),e(me,_5r),e(me,XE),e(XE,_Te),e(_Te,b5r),e(XE,v5r),e(XE,OV),e(OV,T5r),e(XE,F5r),e(me,C5r),e(me,VE),e(VE,bTe),e(bTe,M5r),e(VE,E5r),e(VE,XV),e(XV,y5r),e(VE,w5r),e(me,A5r),e(me,zE),e(zE,vTe),e(vTe,L5r),e(zE,B5r),e(zE,VV),e(VV,x5r),e(zE,k5r),e(me,R5r),e(me,WE),e(WE,TTe),e(TTe,S5r),e(WE,P5r),e(WE,zV),e(zV,$5r),e(WE,I5r),e(me,j5r),e(me,QE),e(QE,FTe),e(FTe,N5r),e(QE,D5r),e(QE,WV),e(WV,q5r),e(QE,G5r),e(me,O5r),e(me,HE),e(HE,CTe),e(CTe,X5r),e(HE,V5r),e(HE,QV),e(QV,z5r),e(HE,W5r),e(me,Q5r),e(me,UE),e(UE,MTe),e(MTe,H5r),e(UE,U5r),e(UE,HV),e(HV,J5r),e(UE,Y5r),e(Bo,K5r),e(Bo,ETe),e(ETe,Z5r),e(Bo,eyr),g(HL,Bo,null),b(c,ZRe,_),b(c,sm,_),e(sm,JE),e(JE,yTe),g(UL,yTe,null),e(sm,oyr),e(sm,wTe),e(wTe,ryr),b(c,eSe,_),b(c,$r,_),g(JL,$r,null),e($r,tyr),e($r,lm),e(lm,ayr),e(lm,ATe),e(ATe,nyr),e(lm,syr),e(lm,LTe),e(LTe,lyr),e(lm,iyr),e($r,dyr),e($r,YL),e(YL,cyr),e(YL,BTe),e(BTe,myr),e(YL,fyr),e($r,gyr),e($r,Bt),g(KL,Bt,null),e(Bt,hyr),e(Bt,xTe),e(xTe,uyr),e(Bt,pyr),e(Bt,im),e(im,_yr),e(im,kTe),e(kTe,byr),e(im,vyr),e(im,RTe),e(RTe,Tyr),e(im,Fyr),e(Bt,Cyr),e(Bt,STe),e(STe,Myr),e(Bt,Eyr),g(ZL,Bt,null),e($r,yyr),e($r,xo),g(e7,xo,null),e(xo,wyr),e(xo,PTe),e(PTe,Ayr),e(xo,Lyr),e(xo,Rn),e(Rn,Byr),e(Rn,$Te),e($Te,xyr),e(Rn,kyr),e(Rn,ITe),e(ITe,Ryr),e(Rn,Syr),e(Rn,jTe),e(jTe,Pyr),e(Rn,$yr),e(xo,Iyr),e(xo,be),e(be,YE),e(YE,NTe),e(NTe,jyr),e(YE,Nyr),e(YE,UV),e(UV,Dyr),e(YE,qyr),e(be,Gyr),e(be,KE),e(KE,DTe),e(DTe,Oyr),e(KE,Xyr),e(KE,JV),e(JV,Vyr),e(KE,zyr),e(be,Wyr),e(be,ZE),e(ZE,qTe),e(qTe,Qyr),e(ZE,Hyr),e(ZE,YV),e(YV,Uyr),e(ZE,Jyr),e(be,Yyr),e(be,e3),e(e3,GTe),e(GTe,Kyr),e(e3,Zyr),e(e3,KV),e(KV,ewr),e(e3,owr),e(be,rwr),e(be,o3),e(o3,OTe),e(OTe,twr),e(o3,awr),e(o3,ZV),e(ZV,nwr),e(o3,swr),e(be,lwr),e(be,r3),e(r3,XTe),e(XTe,iwr),e(r3,dwr),e(r3,ez),e(ez,cwr),e(r3,mwr),e(be,fwr),e(be,t3),e(t3,VTe),e(VTe,gwr),e(t3,hwr),e(t3,oz),e(oz,uwr),e(t3,pwr),e(be,_wr),e(be,a3),e(a3,zTe),e(zTe,bwr),e(a3,vwr),e(a3,rz),e(rz,Twr),e(a3,Fwr),e(be,Cwr),e(be,n3),e(n3,WTe),e(WTe,Mwr),e(n3,Ewr),e(n3,tz),e(tz,ywr),e(n3,wwr),e(be,Awr),e(be,s3),e(s3,QTe),e(QTe,Lwr),e(s3,Bwr),e(s3,az),e(az,xwr),e(s3,kwr),e(xo,Rwr),e(xo,HTe),e(HTe,Swr),e(xo,Pwr),g(o7,xo,null),b(c,oSe,_),b(c,dm,_),e(dm,l3),e(l3,UTe),g(r7,UTe,null),e(dm,$wr),e(dm,JTe),e(JTe,Iwr),b(c,rSe,_),b(c,Ir,_),g(t7,Ir,null),e(Ir,jwr),e(Ir,cm),e(cm,Nwr),e(cm,YTe),e(YTe,Dwr),e(cm,qwr),e(cm,KTe),e(KTe,Gwr),e(cm,Owr),e(Ir,Xwr),e(Ir,a7),e(a7,Vwr),e(a7,ZTe),e(ZTe,zwr),e(a7,Wwr),e(Ir,Qwr),e(Ir,xt),g(n7,xt,null),e(xt,Hwr),e(xt,e1e),e(e1e,Uwr),e(xt,Jwr),e(xt,mm),e(mm,Ywr),e(mm,o1e),e(o1e,Kwr),e(mm,Zwr),e(mm,r1e),e(r1e,e6r),e(mm,o6r),e(xt,r6r),e(xt,t1e),e(t1e,t6r),e(xt,a6r),g(s7,xt,null),e(Ir,n6r),e(Ir,ko),g(l7,ko,null),e(ko,s6r),e(ko,a1e),e(a1e,l6r),e(ko,i6r),e(ko,Sn),e(Sn,d6r),e(Sn,n1e),e(n1e,c6r),e(Sn,m6r),e(Sn,s1e),e(s1e,f6r),e(Sn,g6r),e(Sn,l1e),e(l1e,h6r),e(Sn,u6r),e(ko,p6r),e(ko,Me),e(Me,i3),e(i3,i1e),e(i1e,_6r),e(i3,b6r),e(i3,nz),e(nz,v6r),e(i3,T6r),e(Me,F6r),e(Me,d3),e(d3,d1e),e(d1e,C6r),e(d3,M6r),e(d3,sz),e(sz,E6r),e(d3,y6r),e(Me,w6r),e(Me,c3),e(c3,c1e),e(c1e,A6r),e(c3,L6r),e(c3,lz),e(lz,B6r),e(c3,x6r),e(Me,k6r),e(Me,m3),e(m3,m1e),e(m1e,R6r),e(m3,S6r),e(m3,iz),e(iz,P6r),e(m3,$6r),e(Me,I6r),e(Me,f3),e(f3,f1e),e(f1e,j6r),e(f3,N6r),e(f3,dz),e(dz,D6r),e(f3,q6r),e(Me,G6r),e(Me,g3),e(g3,g1e),e(g1e,O6r),e(g3,X6r),e(g3,cz),e(cz,V6r),e(g3,z6r),e(Me,W6r),e(Me,h3),e(h3,h1e),e(h1e,Q6r),e(h3,H6r),e(h3,mz),e(mz,U6r),e(h3,J6r),e(Me,Y6r),e(Me,u3),e(u3,u1e),e(u1e,K6r),e(u3,Z6r),e(u3,fz),e(fz,eAr),e(u3,oAr),e(Me,rAr),e(Me,p3),e(p3,p1e),e(p1e,tAr),e(p3,aAr),e(p3,gz),e(gz,nAr),e(p3,sAr),e(ko,lAr),e(ko,_1e),e(_1e,iAr),e(ko,dAr),g(i7,ko,null),b(c,tSe,_),b(c,fm,_),e(fm,_3),e(_3,b1e),g(d7,b1e,null),e(fm,cAr),e(fm,v1e),e(v1e,mAr),b(c,aSe,_),b(c,jr,_),g(c7,jr,null),e(jr,fAr),e(jr,gm),e(gm,gAr),e(gm,T1e),e(T1e,hAr),e(gm,uAr),e(gm,F1e),e(F1e,pAr),e(gm,_Ar),e(jr,bAr),e(jr,m7),e(m7,vAr),e(m7,C1e),e(C1e,TAr),e(m7,FAr),e(jr,CAr),e(jr,kt),g(f7,kt,null),e(kt,MAr),e(kt,M1e),e(M1e,EAr),e(kt,yAr),e(kt,hm),e(hm,wAr),e(hm,E1e),e(E1e,AAr),e(hm,LAr),e(hm,y1e),e(y1e,BAr),e(hm,xAr),e(kt,kAr),e(kt,w1e),e(w1e,RAr),e(kt,SAr),g(g7,kt,null),e(jr,PAr),e(jr,Ro),g(h7,Ro,null),e(Ro,$Ar),e(Ro,A1e),e(A1e,IAr),e(Ro,jAr),e(Ro,Pn),e(Pn,NAr),e(Pn,L1e),e(L1e,DAr),e(Pn,qAr),e(Pn,B1e),e(B1e,GAr),e(Pn,OAr),e(Pn,x1e),e(x1e,XAr),e(Pn,VAr),e(Ro,zAr),e(Ro,ve),e(ve,b3),e(b3,k1e),e(k1e,WAr),e(b3,QAr),e(b3,hz),e(hz,HAr),e(b3,UAr),e(ve,JAr),e(ve,v3),e(v3,R1e),e(R1e,YAr),e(v3,KAr),e(v3,uz),e(uz,ZAr),e(v3,e0r),e(ve,o0r),e(ve,T3),e(T3,S1e),e(S1e,r0r),e(T3,t0r),e(T3,pz),e(pz,a0r),e(T3,n0r),e(ve,s0r),e(ve,F3),e(F3,P1e),e(P1e,l0r),e(F3,i0r),e(F3,_z),e(_z,d0r),e(F3,c0r),e(ve,m0r),e(ve,C3),e(C3,$1e),e($1e,f0r),e(C3,g0r),e(C3,bz),e(bz,h0r),e(C3,u0r),e(ve,p0r),e(ve,M3),e(M3,I1e),e(I1e,_0r),e(M3,b0r),e(M3,vz),e(vz,v0r),e(M3,T0r),e(ve,F0r),e(ve,E3),e(E3,j1e),e(j1e,C0r),e(E3,M0r),e(E3,Tz),e(Tz,E0r),e(E3,y0r),e(ve,w0r),e(ve,y3),e(y3,N1e),e(N1e,A0r),e(y3,L0r),e(y3,Fz),e(Fz,B0r),e(y3,x0r),e(ve,k0r),e(ve,w3),e(w3,D1e),e(D1e,R0r),e(w3,S0r),e(w3,Cz),e(Cz,P0r),e(w3,$0r),e(ve,I0r),e(ve,A3),e(A3,q1e),e(q1e,j0r),e(A3,N0r),e(A3,Mz),e(Mz,D0r),e(A3,q0r),e(Ro,G0r),e(Ro,G1e),e(G1e,O0r),e(Ro,X0r),g(u7,Ro,null),b(c,nSe,_),b(c,um,_),e(um,L3),e(L3,O1e),g(p7,O1e,null),e(um,V0r),e(um,X1e),e(X1e,z0r),b(c,sSe,_),b(c,Nr,_),g(_7,Nr,null),e(Nr,W0r),e(Nr,pm),e(pm,Q0r),e(pm,V1e),e(V1e,H0r),e(pm,U0r),e(pm,z1e),e(z1e,J0r),e(pm,Y0r),e(Nr,K0r),e(Nr,b7),e(b7,Z0r),e(b7,W1e),e(W1e,eLr),e(b7,oLr),e(Nr,rLr),e(Nr,Rt),g(v7,Rt,null),e(Rt,tLr),e(Rt,Q1e),e(Q1e,aLr),e(Rt,nLr),e(Rt,_m),e(_m,sLr),e(_m,H1e),e(H1e,lLr),e(_m,iLr),e(_m,U1e),e(U1e,dLr),e(_m,cLr),e(Rt,mLr),e(Rt,J1e),e(J1e,fLr),e(Rt,gLr),g(T7,Rt,null),e(Nr,hLr),e(Nr,So),g(F7,So,null),e(So,uLr),e(So,Y1e),e(Y1e,pLr),e(So,_Lr),e(So,$n),e($n,bLr),e($n,K1e),e(K1e,vLr),e($n,TLr),e($n,Z1e),e(Z1e,FLr),e($n,CLr),e($n,eFe),e(eFe,MLr),e($n,ELr),e(So,yLr),e(So,Te),e(Te,B3),e(B3,oFe),e(oFe,wLr),e(B3,ALr),e(B3,Ez),e(Ez,LLr),e(B3,BLr),e(Te,xLr),e(Te,x3),e(x3,rFe),e(rFe,kLr),e(x3,RLr),e(x3,yz),e(yz,SLr),e(x3,PLr),e(Te,$Lr),e(Te,k3),e(k3,tFe),e(tFe,ILr),e(k3,jLr),e(k3,wz),e(wz,NLr),e(k3,DLr),e(Te,qLr),e(Te,R3),e(R3,aFe),e(aFe,GLr),e(R3,OLr),e(R3,Az),e(Az,XLr),e(R3,VLr),e(Te,zLr),e(Te,S3),e(S3,nFe),e(nFe,WLr),e(S3,QLr),e(S3,Lz),e(Lz,HLr),e(S3,ULr),e(Te,JLr),e(Te,P3),e(P3,sFe),e(sFe,YLr),e(P3,KLr),e(P3,Bz),e(Bz,ZLr),e(P3,e7r),e(Te,o7r),e(Te,$3),e($3,lFe),e(lFe,r7r),e($3,t7r),e($3,xz),e(xz,a7r),e($3,n7r),e(Te,s7r),e(Te,I3),e(I3,iFe),e(iFe,l7r),e(I3,i7r),e(I3,kz),e(kz,d7r),e(I3,c7r),e(Te,m7r),e(Te,j3),e(j3,dFe),e(dFe,f7r),e(j3,g7r),e(j3,Rz),e(Rz,h7r),e(j3,u7r),e(Te,p7r),e(Te,N3),e(N3,cFe),e(cFe,_7r),e(N3,b7r),e(N3,Sz),e(Sz,v7r),e(N3,T7r),e(So,F7r),e(So,mFe),e(mFe,C7r),e(So,M7r),g(C7,So,null),b(c,lSe,_),b(c,bm,_),e(bm,D3),e(D3,fFe),g(M7,fFe,null),e(bm,E7r),e(bm,gFe),e(gFe,y7r),b(c,iSe,_),b(c,Dr,_),g(E7,Dr,null),e(Dr,w7r),e(Dr,vm),e(vm,A7r),e(vm,hFe),e(hFe,L7r),e(vm,B7r),e(vm,uFe),e(uFe,x7r),e(vm,k7r),e(Dr,R7r),e(Dr,y7),e(y7,S7r),e(y7,pFe),e(pFe,P7r),e(y7,$7r),e(Dr,I7r),e(Dr,St),g(w7,St,null),e(St,j7r),e(St,_Fe),e(_Fe,N7r),e(St,D7r),e(St,Tm),e(Tm,q7r),e(Tm,bFe),e(bFe,G7r),e(Tm,O7r),e(Tm,vFe),e(vFe,X7r),e(Tm,V7r),e(St,z7r),e(St,TFe),e(TFe,W7r),e(St,Q7r),g(A7,St,null),e(Dr,H7r),e(Dr,Po),g(L7,Po,null),e(Po,U7r),e(Po,FFe),e(FFe,J7r),e(Po,Y7r),e(Po,In),e(In,K7r),e(In,CFe),e(CFe,Z7r),e(In,e8r),e(In,MFe),e(MFe,o8r),e(In,r8r),e(In,EFe),e(EFe,t8r),e(In,a8r),e(Po,n8r),e(Po,Se),e(Se,q3),e(q3,yFe),e(yFe,s8r),e(q3,l8r),e(q3,Pz),e(Pz,i8r),e(q3,d8r),e(Se,c8r),e(Se,G3),e(G3,wFe),e(wFe,m8r),e(G3,f8r),e(G3,$z),e($z,g8r),e(G3,h8r),e(Se,u8r),e(Se,O3),e(O3,AFe),e(AFe,p8r),e(O3,_8r),e(O3,Iz),e(Iz,b8r),e(O3,v8r),e(Se,T8r),e(Se,X3),e(X3,LFe),e(LFe,F8r),e(X3,C8r),e(X3,jz),e(jz,M8r),e(X3,E8r),e(Se,y8r),e(Se,V3),e(V3,BFe),e(BFe,w8r),e(V3,A8r),e(V3,Nz),e(Nz,L8r),e(V3,B8r),e(Se,x8r),e(Se,z3),e(z3,xFe),e(xFe,k8r),e(z3,R8r),e(z3,Dz),e(Dz,S8r),e(z3,P8r),e(Se,$8r),e(Se,W3),e(W3,kFe),e(kFe,I8r),e(W3,j8r),e(W3,qz),e(qz,N8r),e(W3,D8r),e(Se,q8r),e(Se,Q3),e(Q3,RFe),e(RFe,G8r),e(Q3,O8r),e(Q3,Gz),e(Gz,X8r),e(Q3,V8r),e(Po,z8r),e(Po,SFe),e(SFe,W8r),e(Po,Q8r),g(B7,Po,null),b(c,dSe,_),b(c,Fm,_),e(Fm,H3),e(H3,PFe),g(x7,PFe,null),e(Fm,H8r),e(Fm,$Fe),e($Fe,U8r),b(c,cSe,_),b(c,qr,_),g(k7,qr,null),e(qr,J8r),e(qr,Cm),e(Cm,Y8r),e(Cm,IFe),e(IFe,K8r),e(Cm,Z8r),e(Cm,jFe),e(jFe,e9r),e(Cm,o9r),e(qr,r9r),e(qr,R7),e(R7,t9r),e(R7,NFe),e(NFe,a9r),e(R7,n9r),e(qr,s9r),e(qr,Pt),g(S7,Pt,null),e(Pt,l9r),e(Pt,DFe),e(DFe,i9r),e(Pt,d9r),e(Pt,Mm),e(Mm,c9r),e(Mm,qFe),e(qFe,m9r),e(Mm,f9r),e(Mm,GFe),e(GFe,g9r),e(Mm,h9r),e(Pt,u9r),e(Pt,OFe),e(OFe,p9r),e(Pt,_9r),g(P7,Pt,null),e(qr,b9r),e(qr,$o),g($7,$o,null),e($o,v9r),e($o,XFe),e(XFe,T9r),e($o,F9r),e($o,jn),e(jn,C9r),e(jn,VFe),e(VFe,M9r),e(jn,E9r),e(jn,zFe),e(zFe,y9r),e(jn,w9r),e(jn,WFe),e(WFe,A9r),e(jn,L9r),e($o,B9r),e($o,Pe),e(Pe,U3),e(U3,QFe),e(QFe,x9r),e(U3,k9r),e(U3,Oz),e(Oz,R9r),e(U3,S9r),e(Pe,P9r),e(Pe,J3),e(J3,HFe),e(HFe,$9r),e(J3,I9r),e(J3,Xz),e(Xz,j9r),e(J3,N9r),e(Pe,D9r),e(Pe,Y3),e(Y3,UFe),e(UFe,q9r),e(Y3,G9r),e(Y3,Vz),e(Vz,O9r),e(Y3,X9r),e(Pe,V9r),e(Pe,K3),e(K3,JFe),e(JFe,z9r),e(K3,W9r),e(K3,zz),e(zz,Q9r),e(K3,H9r),e(Pe,U9r),e(Pe,Z3),e(Z3,YFe),e(YFe,J9r),e(Z3,Y9r),e(Z3,Wz),e(Wz,K9r),e(Z3,Z9r),e(Pe,eBr),e(Pe,e5),e(e5,KFe),e(KFe,oBr),e(e5,rBr),e(e5,Qz),e(Qz,tBr),e(e5,aBr),e(Pe,nBr),e(Pe,o5),e(o5,ZFe),e(ZFe,sBr),e(o5,lBr),e(o5,Hz),e(Hz,iBr),e(o5,dBr),e(Pe,cBr),e(Pe,r5),e(r5,eCe),e(eCe,mBr),e(r5,fBr),e(r5,Uz),e(Uz,gBr),e(r5,hBr),e($o,uBr),e($o,oCe),e(oCe,pBr),e($o,_Br),g(I7,$o,null),b(c,mSe,_),b(c,Em,_),e(Em,t5),e(t5,rCe),g(j7,rCe,null),e(Em,bBr),e(Em,tCe),e(tCe,vBr),b(c,fSe,_),b(c,Gr,_),g(N7,Gr,null),e(Gr,TBr),e(Gr,ym),e(ym,FBr),e(ym,aCe),e(aCe,CBr),e(ym,MBr),e(ym,nCe),e(nCe,EBr),e(ym,yBr),e(Gr,wBr),e(Gr,D7),e(D7,ABr),e(D7,sCe),e(sCe,LBr),e(D7,BBr),e(Gr,xBr),e(Gr,$t),g(q7,$t,null),e($t,kBr),e($t,lCe),e(lCe,RBr),e($t,SBr),e($t,wm),e(wm,PBr),e(wm,iCe),e(iCe,$Br),e(wm,IBr),e(wm,dCe),e(dCe,jBr),e(wm,NBr),e($t,DBr),e($t,cCe),e(cCe,qBr),e($t,GBr),g(G7,$t,null),e(Gr,OBr),e(Gr,Io),g(O7,Io,null),e(Io,XBr),e(Io,mCe),e(mCe,VBr),e(Io,zBr),e(Io,Nn),e(Nn,WBr),e(Nn,fCe),e(fCe,QBr),e(Nn,HBr),e(Nn,gCe),e(gCe,UBr),e(Nn,JBr),e(Nn,hCe),e(hCe,YBr),e(Nn,KBr),e(Io,ZBr),e(Io,uCe),e(uCe,a5),e(a5,pCe),e(pCe,exr),e(a5,oxr),e(a5,Jz),e(Jz,rxr),e(a5,txr),e(Io,axr),e(Io,_Ce),e(_Ce,nxr),e(Io,sxr),g(X7,Io,null),b(c,gSe,_),b(c,Am,_),e(Am,n5),e(n5,bCe),g(V7,bCe,null),e(Am,lxr),e(Am,vCe),e(vCe,ixr),b(c,hSe,_),b(c,Or,_),g(z7,Or,null),e(Or,dxr),e(Or,Lm),e(Lm,cxr),e(Lm,TCe),e(TCe,mxr),e(Lm,fxr),e(Lm,FCe),e(FCe,gxr),e(Lm,hxr),e(Or,uxr),e(Or,W7),e(W7,pxr),e(W7,CCe),e(CCe,_xr),e(W7,bxr),e(Or,vxr),e(Or,It),g(Q7,It,null),e(It,Txr),e(It,MCe),e(MCe,Fxr),e(It,Cxr),e(It,Bm),e(Bm,Mxr),e(Bm,ECe),e(ECe,Exr),e(Bm,yxr),e(Bm,yCe),e(yCe,wxr),e(Bm,Axr),e(It,Lxr),e(It,wCe),e(wCe,Bxr),e(It,xxr),g(H7,It,null),e(Or,kxr),e(Or,jo),g(U7,jo,null),e(jo,Rxr),e(jo,ACe),e(ACe,Sxr),e(jo,Pxr),e(jo,Dn),e(Dn,$xr),e(Dn,LCe),e(LCe,Ixr),e(Dn,jxr),e(Dn,BCe),e(BCe,Nxr),e(Dn,Dxr),e(Dn,xCe),e(xCe,qxr),e(Dn,Gxr),e(jo,Oxr),e(jo,J7),e(J7,s5),e(s5,kCe),e(kCe,Xxr),e(s5,Vxr),e(s5,Yz),e(Yz,zxr),e(s5,Wxr),e(J7,Qxr),e(J7,l5),e(l5,RCe),e(RCe,Hxr),e(l5,Uxr),e(l5,Kz),e(Kz,Jxr),e(l5,Yxr),e(jo,Kxr),e(jo,SCe),e(SCe,Zxr),e(jo,ekr),g(Y7,jo,null),b(c,uSe,_),b(c,xm,_),e(xm,i5),e(i5,PCe),g(K7,PCe,null),e(xm,okr),e(xm,$Ce),e($Ce,rkr),b(c,pSe,_),b(c,Xr,_),g(Z7,Xr,null),e(Xr,tkr),e(Xr,km),e(km,akr),e(km,ICe),e(ICe,nkr),e(km,skr),e(km,jCe),e(jCe,lkr),e(km,ikr),e(Xr,dkr),e(Xr,e8),e(e8,ckr),e(e8,NCe),e(NCe,mkr),e(e8,fkr),e(Xr,gkr),e(Xr,jt),g(o8,jt,null),e(jt,hkr),e(jt,DCe),e(DCe,ukr),e(jt,pkr),e(jt,Rm),e(Rm,_kr),e(Rm,qCe),e(qCe,bkr),e(Rm,vkr),e(Rm,GCe),e(GCe,Tkr),e(Rm,Fkr),e(jt,Ckr),e(jt,OCe),e(OCe,Mkr),e(jt,Ekr),g(r8,jt,null),e(Xr,ykr),e(Xr,No),g(t8,No,null),e(No,wkr),e(No,XCe),e(XCe,Akr),e(No,Lkr),e(No,qn),e(qn,Bkr),e(qn,VCe),e(VCe,xkr),e(qn,kkr),e(qn,zCe),e(zCe,Rkr),e(qn,Skr),e(qn,WCe),e(WCe,Pkr),e(qn,$kr),e(No,Ikr),e(No,QCe),e(QCe,d5),e(d5,HCe),e(HCe,jkr),e(d5,Nkr),e(d5,Zz),e(Zz,Dkr),e(d5,qkr),e(No,Gkr),e(No,UCe),e(UCe,Okr),e(No,Xkr),g(a8,No,null),_Se=!0},p(c,[_]){const n8={};_&2&&(n8.$$scope={dirty:_,ctx:c}),qm.$set(n8);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:c}),xh.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:c}),Gh.$set(YCe)},i(c){_Se||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(qm.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(xh.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(qy.$$.fragment,c),h(Gh.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(uw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(jw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h(I6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(mA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(h0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(j0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(uL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(EL.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(S7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(j7.$$.fragment,c),h(N7.$$.fragment,c),h(q7.$$.fragment,c),h(G7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),h(Q7.$$.fragment,c),h(H7.$$.fragment,c),h(U7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),h(Z7.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),_Se=!0)},o(c){u(fe.$$.fragment,c),u(qa.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(qm.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(vy.$$.fragment,c),u(Ty.$$.fragment,c),u(Fy.$$.fragment,c),u(Cy.$$.fragment,c),u(My.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(Ly.$$.fragment,c),u(By.$$.fragment,c),u(xy.$$.fragment,c),u(Sy.$$.fragment,c),u(xh.$$.fragment,c),u(Py.$$.fragment,c),u($y.$$.fragment,c),u(Iy.$$.fragment,c),u(jy.$$.fragment,c),u(qy.$$.fragment,c),u(Gh.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Xy.$$.fragment,c),u(Vy.$$.fragment,c),u(Wy.$$.fragment,c),u(Qy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Zy.$$.fragment,c),u(ew.$$.fragment,c),u(ow.$$.fragment,c),u(rw.$$.fragment,c),u(tw.$$.fragment,c),u(aw.$$.fragment,c),u(sw.$$.fragment,c),u(lw.$$.fragment,c),u(iw.$$.fragment,c),u(dw.$$.fragment,c),u(cw.$$.fragment,c),u(mw.$$.fragment,c),u(gw.$$.fragment,c),u(hw.$$.fragment,c),u(uw.$$.fragment,c),u(pw.$$.fragment,c),u(_w.$$.fragment,c),u(bw.$$.fragment,c),u(Tw.$$.fragment,c),u(Fw.$$.fragment,c),u(Cw.$$.fragment,c),u(Mw.$$.fragment,c),u(Ew.$$.fragment,c),u(yw.$$.fragment,c),u(Aw.$$.fragment,c),u(Lw.$$.fragment,c),u(Bw.$$.fragment,c),u(xw.$$.fragment,c),u(kw.$$.fragment,c),u(Rw.$$.fragment,c),u(Pw.$$.fragment,c),u($w.$$.fragment,c),u(Iw.$$.fragment,c),u(jw.$$.fragment,c),u(Nw.$$.fragment,c),u(Dw.$$.fragment,c),u(Gw.$$.fragment,c),u(Ow.$$.fragment,c),u(Xw.$$.fragment,c),u(Vw.$$.fragment,c),u(zw.$$.fragment,c),u(Ww.$$.fragment,c),u(Hw.$$.fragment,c),u(Uw.$$.fragment,c),u(Jw.$$.fragment,c),u(Yw.$$.fragment,c),u(Kw.$$.fragment,c),u(Zw.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(t6.$$.fragment,c),u(a6.$$.fragment,c),u(n6.$$.fragment,c),u(s6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(c6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(_6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(T6.$$.fragment,c),u(C6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(y6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(B6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(S6.$$.fragment,c),u(P6.$$.fragment,c),u(I6.$$.fragment,c),u(j6.$$.fragment,c),u(N6.$$.fragment,c),u(D6.$$.fragment,c),u(q6.$$.fragment,c),u(G6.$$.fragment,c),u(X6.$$.fragment,c),u(V6.$$.fragment,c),u(z6.$$.fragment,c),u(W6.$$.fragment,c),u(Q6.$$.fragment,c),u(H6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(K6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(aA.$$.fragment,c),u(nA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(mA.$$.fragment,c),u(fA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(bA.$$.fragment,c),u(vA.$$.fragment,c),u(TA.$$.fragment,c),u(FA.$$.fragment,c),u(CA.$$.fragment,c),u(MA.$$.fragment,c),u(yA.$$.fragment,c),u(wA.$$.fragment,c),u(AA.$$.fragment,c),u(LA.$$.fragment,c),u(BA.$$.fragment,c),u(xA.$$.fragment,c),u(RA.$$.fragment,c),u(SA.$$.fragment,c),u(PA.$$.fragment,c),u(IA.$$.fragment,c),u(jA.$$.fragment,c),u(NA.$$.fragment,c),u(qA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(XA.$$.fragment,c),u(VA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(e0.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(l0.$$.fragment,c),u(i0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(h0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(b0.$$.fragment,c),u(v0.$$.fragment,c),u(T0.$$.fragment,c),u(C0.$$.fragment,c),u(M0.$$.fragment,c),u(E0.$$.fragment,c),u(y0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(B0.$$.fragment,c),u(x0.$$.fragment,c),u(k0.$$.fragment,c),u(R0.$$.fragment,c),u(S0.$$.fragment,c),u(P0.$$.fragment,c),u(I0.$$.fragment,c),u(j0.$$.fragment,c),u(N0.$$.fragment,c),u(D0.$$.fragment,c),u(q0.$$.fragment,c),u(G0.$$.fragment,c),u(X0.$$.fragment,c),u(V0.$$.fragment,c),u(z0.$$.fragment,c),u(W0.$$.fragment,c),u(Q0.$$.fragment,c),u(H0.$$.fragment,c),u(J0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(eL.$$.fragment,c),u(oL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(iL.$$.fragment,c),u(cL.$$.fragment,c),u(mL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(uL.$$.fragment,c),u(_L.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(TL.$$.fragment,c),u(FL.$$.fragment,c),u(CL.$$.fragment,c),u(EL.$$.fragment,c),u(yL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(LL.$$.fragment,c),u(BL.$$.fragment,c),u(kL.$$.fragment,c),u(RL.$$.fragment,c),u(SL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(IL.$$.fragment,c),u(NL.$$.fragment,c),u(DL.$$.fragment,c),u(qL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(XL.$$.fragment,c),u(zL.$$.fragment,c),u(WL.$$.fragment,c),u(QL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(JL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(t7.$$.fragment,c),u(n7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(c7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),u(h7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(v7.$$.fragment,c),u(T7.$$.fragment,c),u(F7.$$.fragment,c),u(C7.$$.fragment,c),u(M7.$$.fragment,c),u(E7.$$.fragment,c),u(w7.$$.fragment,c),u(A7.$$.fragment,c),u(L7.$$.fragment,c),u(B7.$$.fragment,c),u(x7.$$.fragment,c),u(k7.$$.fragment,c),u(S7.$$.fragment,c),u(P7.$$.fragment,c),u($7.$$.fragment,c),u(I7.$$.fragment,c),u(j7.$$.fragment,c),u(N7.$$.fragment,c),u(q7.$$.fragment,c),u(G7.$$.fragment,c),u(O7.$$.fragment,c),u(X7.$$.fragment,c),u(V7.$$.fragment,c),u(z7.$$.fragment,c),u(Q7.$$.fragment,c),u(H7.$$.fragment,c),u(U7.$$.fragment,c),u(Y7.$$.fragment,c),u(K7.$$.fragment,c),u(Z7.$$.fragment,c),u(o8.$$.fragment,c),u(r8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),_Se=!1},d(c){t(Z),c&&t(io),c&&t(de),p(fe),c&&t($m),c&&t(ma),c&&t(Be),c&&t(co),c&&t(jm),p(qa,c),c&&t(mo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(pke),c&&t(Xi),p(gy),c&&t(_ke),c&&t(zn),c&&t(bke),p(hy,c),c&&t(vke),c&&t(l9),c&&t(Tke),p(qm,c),c&&t(Fke),c&&t(Vi),p(uy),c&&t(Cke),c&&t(Wo),p(py),p(vy),p(Ty),p(Fy),c&&t(Mke),c&&t(Wi),p(Cy),c&&t(Eke),c&&t(Qo),p(My),p(wy),p(Ay),p(Ly),c&&t(yke),c&&t(Qi),p(By),c&&t(wke),c&&t(Ho),p(xy),p(Sy),p(xh),p(Py),p($y),c&&t(Ake),c&&t(Hi),p(Iy),c&&t(Lke),c&&t(Uo),p(jy),p(qy),p(Gh),p(Gy),p(Oy),c&&t(Bke),c&&t(Ji),p(Xy),c&&t(xke),c&&t(Jo),p(Vy),p(Wy),p(Qy),p(Hy),p(Uy),c&&t(kke),c&&t(Zi),p(Jy),c&&t(Rke),c&&t(Yo),p(Yy),p(Zy),p(ew),p(ow),p(rw),c&&t(Ske),c&&t(rd),p(tw),c&&t(Pke),c&&t(Ko),p(aw),p(sw),p(lw),p(iw),p(dw),c&&t($ke),c&&t(nd),p(cw),c&&t(Ike),c&&t(Zo),p(mw),p(gw),p(hw),p(uw),p(pw),c&&t(jke),c&&t(id),p(_w),c&&t(Nke),c&&t(er),p(bw),p(Tw),p(Fw),p(Cw),p(Mw),c&&t(Dke),c&&t(md),p(Ew),c&&t(qke),c&&t(or),p(yw),p(Aw),p(Lw),p(Bw),p(xw),c&&t(Gke),c&&t(hd),p(kw),c&&t(Oke),c&&t(rr),p(Rw),p(Pw),p($w),p(Iw),p(jw),c&&t(Xke),c&&t(_d),p(Nw),c&&t(Vke),c&&t(tr),p(Dw),p(Gw),p(Ow),p(Xw),p(Vw),c&&t(zke),c&&t(Td),p(zw),c&&t(Wke),c&&t(ar),p(Ww),p(Hw),p(Uw),p(Jw),p(Yw),c&&t(Qke),c&&t(Md),p(Kw),c&&t(Hke),c&&t(nr),p(Zw),p(o6),p(r6),p(t6),p(a6),c&&t(Uke),c&&t(wd),p(n6),c&&t(Jke),c&&t(sr),p(s6),p(i6),p(d6),p(c6),p(m6),c&&t(Yke),c&&t(Bd),p(f6),c&&t(Kke),c&&t(lr),p(g6),p(u6),p(p6),p(_6),p(b6),c&&t(Zke),c&&t(Rd),p(v6),c&&t(eRe),c&&t(ir),p(T6),p(C6),p(M6),p(E6),p(y6),c&&t(oRe),c&&t($d),p(w6),c&&t(rRe),c&&t(dr),p(A6),p(B6),p(x6),p(k6),p(R6),c&&t(tRe),c&&t(Nd),p(S6),c&&t(aRe),c&&t(cr),p(P6),p(I6),p(j6),p(N6),p(D6),c&&t(nRe),c&&t(Gd),p(q6),c&&t(sRe),c&&t(mr),p(G6),p(X6),p(V6),p(z6),p(W6),c&&t(lRe),c&&t(Vd),p(Q6),c&&t(iRe),c&&t(fr),p(H6),p(J6),p(Y6),p(K6),p(eA),c&&t(dRe),c&&t(Qd),p(oA),c&&t(cRe),c&&t(gr),p(rA),p(aA),p(nA),p(sA),p(lA),c&&t(mRe),c&&t(Jd),p(iA),c&&t(fRe),c&&t(hr),p(dA),p(mA),p(fA),p(gA),p(hA),c&&t(gRe),c&&t(ec),p(uA),c&&t(hRe),c&&t(ur),p(pA),p(bA),p(vA),p(TA),p(FA),c&&t(uRe),c&&t(tc),p(CA),c&&t(pRe),c&&t(pr),p(MA),p(yA),p(wA),p(AA),p(LA),c&&t(_Re),c&&t(sc),p(BA),c&&t(bRe),c&&t(_r),p(xA),p(RA),p(SA),p(PA),p(IA),c&&t(vRe),c&&t(dc),p(jA),c&&t(TRe),c&&t(br),p(NA),p(qA),p(GA),p(OA),p(XA),c&&t(FRe),c&&t(fc),p(VA),c&&t(CRe),c&&t(vr),p(zA),p(QA),p(HA),p(UA),p(JA),c&&t(MRe),c&&t(uc),p(YA),c&&t(ERe),c&&t(Tr),p(KA),p(e0),p(o0),p(r0),p(t0),c&&t(yRe),c&&t(bc),p(a0),c&&t(wRe),c&&t(Fr),p(n0),p(l0),p(i0),p(d0),p(c0),c&&t(ARe),c&&t(Fc),p(m0),c&&t(LRe),c&&t(Cr),p(f0),p(h0),p(u0),p(p0),p(b0),c&&t(BRe),c&&t(Ec),p(v0),c&&t(xRe),c&&t(Mr),p(T0),p(C0),p(M0),p(E0),p(y0),c&&t(kRe),c&&t(Ac),p(w0),c&&t(RRe),c&&t(Er),p(A0),p(B0),p(x0),p(k0),p(R0),c&&t(SRe),c&&t(xc),p(S0),c&&t(PRe),c&&t(yr),p(P0),p(I0),p(j0),p(N0),p(D0),c&&t($Re),c&&t(Sc),p(q0),c&&t(IRe),c&&t(wr),p(G0),p(X0),p(V0),p(z0),p(W0),c&&t(jRe),c&&t(Ic),p(Q0),c&&t(NRe),c&&t(Ar),p(H0),p(J0),p(Y0),p(K0),p(Z0),c&&t(DRe),c&&t(Dc),p(eL),c&&t(qRe),c&&t(Lr),p(oL),p(tL),p(aL),p(nL),p(sL),c&&t(GRe),c&&t(Oc),p(lL),c&&t(ORe),c&&t(Br),p(iL),p(cL),p(mL),p(fL),p(gL),c&&t(XRe),c&&t(zc),p(hL),c&&t(VRe),c&&t(xr),p(uL),p(_L),p(bL),p(vL),p(TL),c&&t(zRe),c&&t(Hc),p(FL),c&&t(WRe),c&&t(kr),p(CL),p(EL),p(yL),p(wL),p(AL),c&&t(QRe),c&&t(Yc),p(LL),c&&t(HRe),c&&t(Rr),p(BL),p(kL),p(RL),p(SL),p(PL),c&&t(URe),c&&t(em),p($L),c&&t(JRe),c&&t(Sr),p(IL),p(NL),p(DL),p(qL),p(GL),c&&t(YRe),c&&t(tm),p(OL),c&&t(KRe),c&&t(Pr),p(XL),p(zL),p(WL),p(QL),p(HL),c&&t(ZRe),c&&t(sm),p(UL),c&&t(eSe),c&&t($r),p(JL),p(KL),p(ZL),p(e7),p(o7),c&&t(oSe),c&&t(dm),p(r7),c&&t(rSe),c&&t(Ir),p(t7),p(n7),p(s7),p(l7),p(i7),c&&t(tSe),c&&t(fm),p(d7),c&&t(aSe),c&&t(jr),p(c7),p(f7),p(g7),p(h7),p(u7),c&&t(nSe),c&&t(um),p(p7),c&&t(sSe),c&&t(Nr),p(_7),p(v7),p(T7),p(F7),p(C7),c&&t(lSe),c&&t(bm),p(M7),c&&t(iSe),c&&t(Dr),p(E7),p(w7),p(A7),p(L7),p(B7),c&&t(dSe),c&&t(Fm),p(x7),c&&t(cSe),c&&t(qr),p(k7),p(S7),p(P7),p($7),p(I7),c&&t(mSe),c&&t(Em),p(j7),c&&t(fSe),c&&t(Gr),p(N7),p(q7),p(G7),p(O7),p(X7),c&&t(gSe),c&&t(Am),p(V7),c&&t(hSe),c&&t(Or),p(z7),p(Q7),p(H7),p(U7),p(Y7),c&&t(uSe),c&&t(xm),p(K7),c&&t(pSe),c&&t(Xr),p(Z7),p(o8),p(r8),p(t8),p(a8)}}}const a3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function n3t(Pm){return ZEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class m3t extends UEt{constructor(Z){super();JEt(this,Z,n3t,t3t,YEt,{})}}export{m3t as default,a3t as metadata};
